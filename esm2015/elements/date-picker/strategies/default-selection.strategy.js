import { Injectable, InjectionToken, Optional, SkipSelf } from '@angular/core';
import { isSameDay } from 'date-fns';
import * as i0 from "@angular/core";
/** Injection token used to customize the date range selection behavior. */
export const NOVO_DATE_SELECTION_STRATEGY = new InjectionToken('NOVO_DATE_SELECTION_STRATEGY');
/** Provides the default date selection behavior. Single Date */
export class DefaultDateSelectionStrategy {
    selectionFinished(date, currentValue, event) {
        return [date];
    }
    createPreview(activeDate, [currentDate]) {
        return [activeDate];
    }
    isSelected(activeDate, [currentDate]) {
        return isSameDay(activeDate, currentDate);
    }
}
DefaultDateSelectionStrategy.ɵfac = function DefaultDateSelectionStrategy_Factory(t) { return new (t || DefaultDateSelectionStrategy)(); };
DefaultDateSelectionStrategy.ɵprov = i0.ɵɵdefineInjectable({ token: DefaultDateSelectionStrategy, factory: DefaultDateSelectionStrategy.ɵfac });
/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(DefaultDateSelectionStrategy, [{
        type: Injectable
    }], null, null); })();
/** @docs-private */
export function NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY(parent) {
    return parent || new DefaultDateSelectionStrategy();
}
/** @docs-private */
export const NOVO_DATE_SELECTION_STRATEGY_PROVIDER = {
    provide: NOVO_DATE_SELECTION_STRATEGY,
    deps: [[new Optional(), new SkipSelf(), NOVO_DATE_SELECTION_STRATEGY]],
    useFactory: NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zZWxlY3Rpb24uc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdHJhdmlzL2J1aWxkL2J1bGxob3JuL25vdm8tZWxlbWVudHMvcHJvamVjdHMvbm92by1lbGVtZW50cy9zcmMvIiwic291cmNlcyI6WyJlbGVtZW50cy9kYXRlLXBpY2tlci9zdHJhdGVnaWVzL2RlZmF1bHQtc2VsZWN0aW9uLnN0cmF0ZWd5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUIsVUFBVSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxVQUFVLENBQUM7O0FBR3JDLDJFQUEyRTtBQUMzRSxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxJQUFJLGNBQWMsQ0FBNEIsOEJBQThCLENBQUMsQ0FBQztBQUUxSCxnRUFBZ0U7QUFFaEUsTUFBTSxPQUFPLDRCQUE0QjtJQUN2QyxpQkFBaUIsQ0FBQyxJQUFxQixFQUFFLFlBQXdCLEVBQUUsS0FBWTtRQUM3RSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDaEIsQ0FBQztJQUVELGFBQWEsQ0FBQyxVQUEyQixFQUFFLENBQUMsV0FBVyxDQUFhO1FBQ2xFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QixDQUFDO0lBRUQsVUFBVSxDQUFDLFVBQTJCLEVBQUUsQ0FBQyxXQUFXLENBQWE7UUFDL0QsT0FBTyxTQUFTLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQzVDLENBQUM7O3dHQVhVLDRCQUE0QjtvRUFBNUIsNEJBQTRCLFdBQTVCLDRCQUE0QjtrREFBNUIsNEJBQTRCO2NBRHhDLFVBQVU7O0FBZVgsb0JBQW9CO0FBQ3BCLE1BQU0sVUFBVSw2Q0FBNkMsQ0FBQyxNQUEwQztJQUN0RyxPQUFPLE1BQU0sSUFBSSxJQUFJLDRCQUE0QixFQUFFLENBQUM7QUFDdEQsQ0FBQztBQUVELG9CQUFvQjtBQUNwQixNQUFNLENBQUMsTUFBTSxxQ0FBcUMsR0FBb0I7SUFDcEUsT0FBTyxFQUFFLDRCQUE0QjtJQUNyQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3RFLFVBQVUsRUFBRSw2Q0FBNkM7Q0FDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZhY3RvcnlQcm92aWRlciwgSW5qZWN0YWJsZSwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBTa2lwU2VsZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNTYW1lRGF5IH0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgRGF0ZUxpa2UsIE5vdm9EYXRlU2VsZWN0aW9uU3RyYXRlZ3kgfSBmcm9tICcuLi9kYXRlLXBpY2tlci50eXBlcyc7XG5cbi8qKiBJbmplY3Rpb24gdG9rZW4gdXNlZCB0byBjdXN0b21pemUgdGhlIGRhdGUgcmFuZ2Ugc2VsZWN0aW9uIGJlaGF2aW9yLiAqL1xuZXhwb3J0IGNvbnN0IE5PVk9fREFURV9TRUxFQ1RJT05fU1RSQVRFR1kgPSBuZXcgSW5qZWN0aW9uVG9rZW48Tm92b0RhdGVTZWxlY3Rpb25TdHJhdGVneT4oJ05PVk9fREFURV9TRUxFQ1RJT05fU1RSQVRFR1knKTtcblxuLyoqIFByb3ZpZGVzIHRoZSBkZWZhdWx0IGRhdGUgc2VsZWN0aW9uIGJlaGF2aW9yLiBTaW5nbGUgRGF0ZSAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlZmF1bHREYXRlU2VsZWN0aW9uU3RyYXRlZ3kgaW1wbGVtZW50cyBOb3ZvRGF0ZVNlbGVjdGlvblN0cmF0ZWd5PERhdGVMaWtlW10+IHtcbiAgc2VsZWN0aW9uRmluaXNoZWQoZGF0ZTogRGF0ZUxpa2UgfCBudWxsLCBjdXJyZW50VmFsdWU6IERhdGVMaWtlW10sIGV2ZW50OiBFdmVudCk6IERhdGVMaWtlW10ge1xuICAgIHJldHVybiBbZGF0ZV07XG4gIH1cblxuICBjcmVhdGVQcmV2aWV3KGFjdGl2ZURhdGU6IERhdGVMaWtlIHwgbnVsbCwgW2N1cnJlbnREYXRlXTogRGF0ZUxpa2VbXSkge1xuICAgIHJldHVybiBbYWN0aXZlRGF0ZV07XG4gIH1cblxuICBpc1NlbGVjdGVkKGFjdGl2ZURhdGU6IERhdGVMaWtlIHwgbnVsbCwgW2N1cnJlbnREYXRlXTogRGF0ZUxpa2VbXSkge1xuICAgIHJldHVybiBpc1NhbWVEYXkoYWN0aXZlRGF0ZSwgY3VycmVudERhdGUpO1xuICB9XG59XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZnVuY3Rpb24gTk9WT19EQVRFX1NFTEVDVElPTl9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZKHBhcmVudDogTm92b0RhdGVTZWxlY3Rpb25TdHJhdGVneTx1bmtub3duPikge1xuICByZXR1cm4gcGFyZW50IHx8IG5ldyBEZWZhdWx0RGF0ZVNlbGVjdGlvblN0cmF0ZWd5KCk7XG59XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgY29uc3QgTk9WT19EQVRFX1NFTEVDVElPTl9TVFJBVEVHWV9QUk9WSURFUjogRmFjdG9yeVByb3ZpZGVyID0ge1xuICBwcm92aWRlOiBOT1ZPX0RBVEVfU0VMRUNUSU9OX1NUUkFURUdZLFxuICBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgTk9WT19EQVRFX1NFTEVDVElPTl9TVFJBVEVHWV1dLFxuICB1c2VGYWN0b3J5OiBOT1ZPX0RBVEVfU0VMRUNUSU9OX1NUUkFURUdZX1BST1ZJREVSX0ZBQ1RPUlksXG59O1xuIl19