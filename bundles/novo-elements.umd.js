(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('brace/index'), require('brace/mode/javascript'), require('brace/theme/chrome'), require('brace/ext/language_tools.js'), require('@angular/common'), require('date-fns'), require('@angular/cdk/coercion'), require('timezone-support'), require('timezone-support/dist/parse-format'), require('rxjs'), require('@angular/animations'), require('@angular/cdk/overlay'), require('@angular/cdk/portal'), require('rxjs/operators'), require('@angular/platform-browser'), require('@angular/router'), require('novo-design-tokens'), require('@angular/platform-browser/animations'), require('@angular/cdk/keycodes'), require('@angular/cdk/scrolling'), require('@angular/cdk/a11y'), require('@angular/cdk/observers'), require('angular2-text-mask'), require('@angular/cdk/platform'), require('@angular/cdk/bidi'), require('@angular/cdk/collections'), require('angular-imask'), require('imask'), require('@angular/cdk/text-field'), require('@angular/cdk/table'), require('text-mask-addons/dist/createAutoCorrectedDatePipe'), require('@bullhorn/dragula'), require('@angular/cdk/accordion'), require('@angular/common/http'), require('@angular/cdk/stepper')) :
    typeof define === 'function' && define.amd ? define('novo-elements', ['exports', '@angular/core', '@angular/forms', 'brace/index', 'brace/mode/javascript', 'brace/theme/chrome', 'brace/ext/language_tools.js', '@angular/common', 'date-fns', '@angular/cdk/coercion', 'timezone-support', 'timezone-support/dist/parse-format', 'rxjs', '@angular/animations', '@angular/cdk/overlay', '@angular/cdk/portal', 'rxjs/operators', '@angular/platform-browser', '@angular/router', 'novo-design-tokens', '@angular/platform-browser/animations', '@angular/cdk/keycodes', '@angular/cdk/scrolling', '@angular/cdk/a11y', '@angular/cdk/observers', 'angular2-text-mask', '@angular/cdk/platform', '@angular/cdk/bidi', '@angular/cdk/collections', 'angular-imask', 'imask', '@angular/cdk/text-field', '@angular/cdk/table', 'text-mask-addons/dist/createAutoCorrectedDatePipe', '@bullhorn/dragula', '@angular/cdk/accordion', '@angular/common/http', '@angular/cdk/stepper'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['novo-elements'] = {}, global.ng.core, global.ng.forms, null, null, null, null, global.ng.common, global.dateFns, global.ng.cdk.coercion, global.timezoneSupport, global.parseFormat, global.rxjs, global.ng.animations, global.ng.cdk.overlay, global.ng.cdk.portal, global.rxjs.operators, global.ng.platformBrowser, global.ng.router, global.tokens, global.ng.platformBrowser.animations, global.ng.cdk.keycodes, global.ng.cdk.scrolling, global.ng.cdk.a11y, global.ng.cdk.observers, global.angular2TextMask, global.ng.cdk.platform, global.ng.cdk.bidi, global.ng.cdk.collections, global.angularImask, global.IMask, global.ng.cdk.textField, global.ng.cdk.table, global.createAutoCorrectedDatePipe, global.dragulaImported, global.ng.cdk.accordion, global.ng.common.http, global.ng.cdk.stepper));
}(this, (function (exports, i0, forms, index, javascript, chrome, language_tools_js, common, dateFns, coercion, timezoneSupport, parseFormat, rxjs, animations, i1, portal, operators, platformBrowser, router, tokens, animations$1, keycodes, scrolling, a11y, observers, angular2TextMask, platform, bidi, collections, angularImask, IMask, textField, table, createAutoCorrectedDatePipe, dragulaImported, accordion, http, stepper) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    function _interopNamespace(e) {
        if (e && e.__esModule) { return e; } else {
            var n = Object.create(null);
            if (e) {
                Object.keys(e).forEach(function (k) {
                    if (k !== 'default') {
                        var d = Object.getOwnPropertyDescriptor(e, k);
                        Object.defineProperty(n, k, d.get ? d : {
                            enumerable: true,
                            get: function () {
                                return e[k];
                            }
                        });
                    }
                });
            }
            n['default'] = e;
            return Object.freeze(n);
        }
    }

    var createAutoCorrectedDatePipe__default = /*#__PURE__*/_interopDefaultLegacy(createAutoCorrectedDatePipe);
    var dragulaImported__namespace = /*#__PURE__*/_interopNamespace(dragulaImported);

    // @dynamic
    var Helpers = /** @class */ (function () {
        function Helpers() {
        }
        Helpers.isTemplateRef = function (value) {
            return value instanceof i0.TemplateRef;
        };
        /**
         * Swallows an event to stop further execution
         */
        Helpers.swallowEvent = function (event) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
        };
        Helpers.interpolate = function (str, props) {
            if (typeof str === 'function') {
                return str(props);
            }
            if (this.isDate(props)) {
                props = this.dateToObject(props);
            }
            // else {
            //   props = Object.entries(props).reduce((obj, [key, value]) => {
            //     const res = { ...obj, [key]: value };
            //     if (this.isIsoDate(value as string)) {
            //       res[`${key}Parts`] = this.dateToObject(new Date(value as string));
            //     }
            //     return res;
            //   }, {});
            // }
            return str.replace(/\$([\w\.]+)/g, function (original, key) {
                var keys = key.split('.');
                var value = props[keys.shift()];
                while (keys.length && value !== undefined) {
                    var k = keys.shift();
                    value = k ? value[k] : value + ".";
                }
                return value !== undefined ? value : '';
            });
        };
        Helpers.interpolateWithFallback = function (formatString, data) {
            // Format string can be an array, it will attempt to interpolate each item
            // in the array, if there is a failure to replace it will mark it as such
            // It will either return the first successful replacement of ALL variables,
            // or an empty string
            if (Array.isArray(formatString)) {
                var successes_1 = [];
                var failures_1 = [];
                formatString.forEach(function (format) {
                    var isSuccess = true;
                    var attempt = format.replace(/\$([\w\.]+)/g, function (original, key) {
                        var keys = key.split('.');
                        var value = data[keys.shift()];
                        while (keys.length && value !== undefined) {
                            var k = keys.shift();
                            value = k ? value[k] : value + ".";
                        }
                        if (isSuccess && Helpers.isEmpty(value)) {
                            isSuccess = false;
                        }
                        return Helpers.isEmpty(value) ? '' : value;
                    });
                    if (isSuccess) {
                        successes_1.push(attempt);
                    }
                    else {
                        failures_1.push(attempt);
                    }
                });
                if (successes_1.length !== 0) {
                    return successes_1[0];
                }
                return '';
            }
            else {
                return Helpers.interpolate(formatString, data);
            }
        };
        /**
         * Verifies that an object has every property expected by a string to interpolate
         * @param str   The string to interpolate
         * @param props The params to replace in string.
         */
        Helpers.validateInterpolationProps = function (str, props) {
            if (typeof str === 'function') {
                return true;
            }
            var keys = str.match(/\$([\w\.]+)/g);
            return keys.every(function (key) {
                return props.hasOwnProperty(key.substr(1));
            });
        };
        Helpers.isObject = function (item) {
            return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
        };
        /**
         * Checks to see if the object is a string
         */
        Helpers.isString = function (obj) {
            return typeof obj === 'string';
        };
        Helpers.escapeString = function (obj) {
            if (Helpers.isString(obj)) {
                return obj.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
            }
            return obj;
        };
        Helpers.isNumber = function (val, includeNegatives) {
            if (includeNegatives === void 0) { includeNegatives = false; }
            var numberRegex = includeNegatives ? /^-{0,1}\d*\.?\d*$/ : /^\d*\.?\d*$/;
            if (typeof val === 'string') {
                return val.length > 0 && val !== '.' && numberRegex.test(val);
            }
            else {
                return !isNaN(parseFloat(val));
            }
        };
        /**
         * Checks to see if the object is a undefined or null
         */
        Helpers.isBlank = function (obj) {
            return obj === undefined || obj === null;
        };
        /**
         * Checks to see if the object is a undefined or null
         */
        Helpers.isEmpty = function (obj) {
            return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
        };
        /**
         * Checks to see if the object is a function
         */
        Helpers.isFunction = function (obj) {
            return !!(obj && obj.constructor && obj.call && obj.apply);
        };
        /**
         * Checks to see if the object is a Date
         */
        Helpers.isDate = function (obj) {
            return obj instanceof Date;
        };
        Helpers.isIsoDate = function (str) {
            if (!/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(str)) {
                return false;
            }
            var d = new Date(str);
            return d.toISOString() === str;
        };
        Helpers.convertToArray = function (obj) {
            if (obj === undefined) {
                return [];
            }
            else if (!Array.isArray(obj)) {
                return [obj];
            }
            return obj;
        };
        Helpers.sortByField = function (fields, reverse) {
            if (reverse === void 0) { reverse = false; }
            return function (previous, current) {
                if (Helpers.isFunction(fields)) {
                    return fields(reverse ? 'desc' : 'asc', previous, current);
                }
                if (!Array.isArray(fields)) {
                    fields = [fields];
                }
                for (var i = 0; i < fields.length; i++) {
                    var field = fields[i];
                    var first = previous[field] || '';
                    var second = current[field] || '';
                    if (Helpers.isDate(first) && Helpers.isDate(second)) {
                        // Dates
                        first = first.getTime();
                        second = second.getTime();
                    }
                    else if (Helpers.isString(first) && Helpers.isString(second)) {
                        // Basic strings
                        first = first.toLowerCase();
                        second = second.toLowerCase();
                    }
                    else {
                        // Numbers
                        first = isNaN(Number(first)) ? first : Number(first);
                        second = isNaN(Number(second)) ? second : Number(second);
                    }
                    if (first > second) {
                        return reverse ? -1 : 1;
                    }
                    else if (first < second) {
                        return reverse ? 1 : -1;
                    }
                }
                return 0;
            };
        };
        Helpers.filterByField = function (key, value) {
            return function (item) {
                var results = [];
                var field = can(item).have(key);
                if (value instanceof Function) {
                    results.push(value(field, item));
                }
                else if (Array.isArray(value)) {
                    results.push(value.includes(field));
                }
                else if (value instanceof Object) {
                    if (field instanceof Date) {
                        field = field.getTime();
                    }
                    if (value.min) {
                        results.push(field >= value.min);
                    }
                    if (value.max) {
                        results.push(field <= value.max);
                    }
                    if (value.any && Array.isArray(value.any)) {
                        if (Array.isArray(field)) {
                            results.push(value.any.some(function (v) { return field.includes(v); }));
                        }
                        else {
                            results.push(value.any.includes(field));
                        }
                    }
                    if (value.all && Array.isArray(value.all)) {
                        results.push(value.all.every(function (v) { return field.includes(v); }));
                    }
                    if (value.not) {
                        results.push(!Helpers.filterByField(key, value.not)(item));
                    }
                    for (var subkey in value) {
                        if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                            var subvalue = value[subkey];
                            results.push(Helpers.filterByField(key + "." + subkey, subvalue)(item));
                        }
                    }
                }
                else {
                    results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
                }
                return results.every(function (x) { return x; });
            };
        };
        Helpers.findAncestor = function (element, selector) {
            while ((element = element.parentElement) && !element.matches.call(element, selector))
                ; // tslint:disable-line
            return element;
        };
        Helpers.deepClone = function (item) {
            if (Array.isArray(item)) {
                var newArr = [];
                for (var i = item.length; i-- > 0;) {
                    // tslint:disable-line
                    newArr[i] = Helpers.deepClone(item[i]);
                }
                return newArr;
            }
            if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString()) && !item.toString().startsWith('class')) {
                var obj = void 0;
                for (var k in item) {
                    if (k in item) {
                        obj[k] = Helpers.deepClone(item[k]);
                    }
                }
                return obj;
            }
            if (item && typeof item === 'object') {
                var obj = {};
                for (var k in item) {
                    if (k in item) {
                        obj[k] = Helpers.deepClone(item[k]);
                    }
                }
                return obj;
            }
            return item;
        };
        Helpers.deepAssign = function () {
            var objs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                objs[_i] = arguments[_i];
            }
            if (objs.length < 2) {
                throw new Error('Need two or more objects to merge');
            }
            var target = Object.assign({}, objs[0]);
            var _loop_1 = function (i) {
                var source = Object.assign({}, objs[i]);
                Object.keys(source).forEach(function (prop) {
                    var value = source[prop];
                    if (Helpers.isObject(value)) {
                        if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                            target[prop] = Helpers.deepAssign(target[prop], value);
                        }
                        else {
                            target[prop] = value;
                        }
                    }
                    else if (Array.isArray(value)) {
                        if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                            var targetArray_1 = target[prop];
                            value.forEach(function (sourceItem, itemIndex) {
                                if (itemIndex < targetArray_1.length) {
                                    var targetItem = targetArray_1[itemIndex];
                                    if (Object.is(targetItem, sourceItem)) {
                                        return;
                                    }
                                    if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                        targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                    }
                                    else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                        targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                    }
                                    else {
                                        targetArray_1[itemIndex] = sourceItem;
                                    }
                                }
                                else {
                                    targetArray_1.push(sourceItem);
                                }
                            });
                        }
                        else {
                            target[prop] = value;
                        }
                    }
                    else {
                        target[prop] = value;
                    }
                });
            };
            for (var i = 1; i < objs.length; i++) {
                _loop_1(i);
            }
            return target;
        };
        /**
         * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
         * @param element any document element
         * @returns the next sibling node that is of type: Element
         */
        Helpers.getNextElementSibling = function (element) {
            if (element.nextElementSibling) {
                return element.nextElementSibling;
            }
            else {
                var e = element.nextSibling;
                while (e && 1 !== e.nodeType) {
                    e = e.nextSibling;
                }
                return e;
            }
        };
        Helpers.dateToObject = function (date) {
            var dateObj = {
                day: '',
                dayPeriod: '',
                era: '',
                hour: '',
                minute: '',
                month: '',
                second: '',
                weekday: '',
                year: '',
            };
            Intl.DateTimeFormat('en-US', {
                day: 'numeric',
                era: 'short',
                hour: 'numeric',
                minute: 'numeric',
                month: 'numeric',
                second: 'numeric',
                weekday: 'long',
                year: 'numeric',
            })
                .formatToParts(date)
                .forEach(function (dateTimeFormatPart) {
                if (dateTimeFormatPart.type !== 'literal') {
                    dateObj[dateTimeFormatPart.type] = dateTimeFormatPart.value;
                }
            });
            return dateObj;
        };
        return Helpers;
    }());
    var Can = /** @class */ (function () {
        function Can(obj) {
            this.obj = obj;
        }
        Can.prototype.have = function (key) {
            var props = key.split('.');
            var item = this.obj;
            for (var i = 0; i < props.length; i++) {
                item = item[props[i]];
                if (this.check(item) === false) {
                    return item;
                }
            }
            return item;
        };
        Can.prototype.check = function (thing) {
            return thing !== void 0;
        };
        return Can;
    }());
    function can(obj) {
        return new Can(obj);
    }
    // Assumes data is already sorted
    function binarySearch(item, array, compare) {
        return search(0, array.length - 1);
        function search(min, max) {
            if (min > max) {
                return undefined;
            }
            var guess = min + Math.floor((max - min) / 2);
            var comparison = compare(item, array[guess]);
            if (comparison === 0) {
                return array[guess];
            }
            else if (comparison === -1) {
                return search(min, guess - 1);
            }
            else if (comparison === 1) {
                return search(guess + 1, max);
            }
            else {
                throw new Error("Input mismatch: " + JSON.stringify(item) + " not comparable to " + JSON.stringify(array[guess]));
            }
        }
    }

    // NG2
    var ACE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoAceEditor; }),
        multi: true,
    };
    var NovoAceEditor = /** @class */ (function () {
        function NovoAceEditor(elementRef) {
            this.elementRef = elementRef;
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this._options = {
                showPrintMargin: false,
                displayIndentGuides: true,
            };
            this._theme = 'chrome';
            this._mode = 'javascript';
            this.text = '';
            this.onChange = function (_) { };
            this.onTouched = function () { };
        }
        Object.defineProperty(NovoAceEditor.prototype, "theme", {
            set: function (theme) {
                this.setTheme(theme);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAceEditor.prototype, "options", {
            set: function (options) {
                this.setOptions(options);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAceEditor.prototype, "mode", {
            set: function (mode) {
                this.setMode(mode);
            },
            enumerable: false,
            configurable: true
        });
        NovoAceEditor.prototype.ngOnDestroy = function () {
            if (this.editor) {
                this.editor.destroy();
            }
        };
        NovoAceEditor.prototype.ngOnInit = function () {
            this.initializeEditor();
            this.initializeOptions();
            this.initializeEvents();
        };
        NovoAceEditor.prototype.initializeEditor = function () {
            var el = this.elementRef.nativeElement;
            this.editor = ace.edit(el);
            this.editor.$blockScrolling = Infinity;
        };
        NovoAceEditor.prototype.initializeOptions = function () {
            this.setOptions(this._options || {});
            this.setTheme(this._theme);
            this.setMode(this._mode);
        };
        NovoAceEditor.prototype.initializeEvents = function () {
            var _this = this;
            this.editor.on('focus', function (event) { return _this.focus.emit(event); });
            this.editor.on('blur', function (event) { return _this.focus.emit(event); });
            this.editor.on('change', function () { return _this.updateText(); });
            this.editor.on('paste', function () { return _this.updateText(); });
        };
        NovoAceEditor.prototype.updateText = function () {
            var newVal = this.editor.getValue();
            if (newVal === this.oldText) {
                return;
            }
            this.text = newVal;
            this.onChange(newVal);
            this.oldText = newVal;
        };
        NovoAceEditor.prototype.setText = function (text) {
            if (Helpers.isBlank(text)) {
                text = '';
            }
            if (this.text !== text) {
                this.text = text;
                this.editor.setValue(text);
                this.onChange(text);
                this.editor.clearSelection();
            }
        };
        NovoAceEditor.prototype.setOptions = function (options) {
            this._options = options;
            this.editor.setOptions(options || {});
        };
        NovoAceEditor.prototype.setTheme = function (theme) {
            this._theme = theme;
            this.editor.setTheme("ace/theme/" + theme);
        };
        NovoAceEditor.prototype.setMode = function (mode) {
            this._mode = mode;
            this.editor.getSession().setMode("ace/mode/" + this._mode);
        };
        NovoAceEditor.prototype.writeValue = function (value) {
            this.setText(value);
        };
        NovoAceEditor.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        NovoAceEditor.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        return NovoAceEditor;
    }());
    NovoAceEditor.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-ace-editor',
                    template: '',
                    providers: [ACE_VALUE_ACCESSOR]
                },] }
    ];
    NovoAceEditor.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoAceEditor.propDecorators = {
        theme: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }]
    };

    // NG2
    var NovoAceEditorModule = /** @class */ (function () {
        function NovoAceEditorModule() {
        }
        return NovoAceEditorModule;
    }());
    NovoAceEditorModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoAceEditor],
                    exports: [NovoAceEditor],
                },] }
    ];

    // NG2
    var DecodeURIPipe = /** @class */ (function () {
        function DecodeURIPipe() {
        }
        DecodeURIPipe.prototype.transform = function (encodedString) {
            var decodedString = '';
            if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
                decodedString = decodeURIComponent(encodedString);
            }
            return decodedString;
        };
        return DecodeURIPipe;
    }());
    DecodeURIPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'decodeURI' },] },
        { type: i0.Injectable }
    ];

    // NG2
    var DefaultPipe = /** @class */ (function () {
        function DefaultPipe() {
        }
        DefaultPipe.prototype.transform = function (value, defaultValue) {
            return value || defaultValue;
        };
        return DefaultPipe;
    }());
    DefaultPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'default', pure: true },] },
        { type: i0.Injectable }
    ];

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || Array.prototype.slice.call(from));
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var GroupByPipe = /** @class */ (function () {
        function GroupByPipe() {
        }
        GroupByPipe.prototype.transform = function (input, prop) {
            var e_1, _a;
            if (!Array.isArray(input)) {
                return input;
            }
            var arr = {};
            try {
                for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                    var value = input_1_1.value;
                    var field = can(value).have(prop);
                    if (Helpers.isBlank(arr[field])) {
                        arr[field] = [];
                    }
                    arr[field].push(value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return Object.keys(arr).map(function (key) { return ({ key: key, value: arr[key] }); });
        };
        return GroupByPipe;
    }());
    GroupByPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'groupBy',
                },] }
    ];

    var IsoDateRangePipe = /** @class */ (function () {
        function IsoDateRangePipe() {
        }
        IsoDateRangePipe.prototype.transform = function (dates) {
            // TODO: Lookup Locale to convert to Users DateFormat
            var _a = __read(dates.map(function (date) {
                if (date instanceof Date) {
                    return date.toISOString().slice(0, 10);
                }
                return date.slice(0, 10);
            }), 2), start = _a[0], end = _a[1];
            return start + " - " + end;
        };
        return IsoDateRangePipe;
    }());
    IsoDateRangePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'isoDateRange' },] }
    ];
    IsoDateRangePipe.ctorParameters = function () { return []; };

    var IsoDatePipe = /** @class */ (function () {
        function IsoDatePipe() {
        }
        IsoDatePipe.prototype.transform = function (date) {
            if (date instanceof Date) {
                return date.toISOString().slice(0, 10);
            }
            return date.slice(0, 10);
        };
        return IsoDatePipe;
    }());
    IsoDatePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'isoDate' },] }
    ];
    IsoDatePipe.ctorParameters = function () { return []; };

    var IsoTimeRangePipe = /** @class */ (function () {
        function IsoTimeRangePipe() {
        }
        IsoTimeRangePipe.prototype.transform = function (dates) {
            // TODO: Lookup Locale to convert to 12hour
            var _a = __read(dates.map(function (date) {
                if (date instanceof Date) {
                    return date.toISOString().slice(11, 16);
                }
                return date.slice(11, 16);
            }), 2), start = _a[0], end = _a[1];
            return start + " - " + end;
        };
        return IsoTimeRangePipe;
    }());
    IsoTimeRangePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'isoTimeRange' },] }
    ];
    IsoTimeRangePipe.ctorParameters = function () { return []; };

    var IsoTimePipe = /** @class */ (function () {
        function IsoTimePipe() {
        }
        IsoTimePipe.prototype.transform = function (date) {
            // TODO: Lookup Locale to convert to 12hour
            if (date instanceof Date) {
                return date.toISOString().slice(11, 16);
            }
            return date.slice(11, 16);
        };
        return IsoTimePipe;
    }());
    IsoTimePipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'isoTime' },] }
    ];
    IsoTimePipe.ctorParameters = function () { return []; };

    // NG2
    // Rule storage - pluralize and singularize need to be run sequentially,
    // while other rules can be optimized using an object for instant lookups.
    var pluralRules = [];
    var singularRules = [];
    var uncountables = {};
    var irregularPlurals = {};
    var irregularSingles = {};
    /**
     * Title case a string.
     */
    function toTitleCase(str) {
        return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
    }
    /**
     * Sanitize a pluralization rule to a usable regular expression.
     */
    function sanitizeRule(rule) {
        if (typeof rule === 'string') {
            return new RegExp('^' + rule + '$', 'i');
        }
        return rule;
    }
    /**
     * Pass in a word token to produce a function that can replicate the case on
     * another word.
     */
    function restoreCase(word, token) {
        // Upper cased words. E.g. "HELLO".
        if (word === word.toUpperCase()) {
            return token.toUpperCase();
        }
        // Title cased words. E.g. "Title".
        if (word[0] === word[0].toUpperCase()) {
            return toTitleCase(token);
        }
        // Lower cased words. E.g. "test".
        return token.toLowerCase();
    }
    /**
     * Interpolate a regexp string.
     */
    function interpolate(str, args) {
        return str.replace(/\$(\d{1,2})/g, function (match, index) {
            return args[index] || '';
        });
    }
    /**
     * Sanitize a word by passing in the word and sanitization rules.
     */
    function sanitizeWord(token, word, collection) {
        // Empty string or doesn't need fixing.
        if (!token.length || uncountables.hasOwnProperty(token)) {
            return word;
        }
        var len = collection.length;
        var _loop_1 = function () {
            var rule = collection[len];
            // If the rule passes, return the replacement.
            if (rule[0].test(word)) {
                return { value: word.replace(rule[0], function (match, index, words) {
                        var result = interpolate(rule[1], [match, index, words]);
                        if (match === '') {
                            return restoreCase(words[index - 1], result);
                        }
                        return restoreCase(match, result);
                    }) };
            }
        };
        // Iterate over the sanitization rules and use the first one to match.
        while (len--) {
            var state_1 = _loop_1();
            if (typeof state_1 === "object")
                return state_1.value;
        }
        return word;
    }
    /**
     * Replace a word with the updated word.
     */
    function replaceWord(replaceMap, keepMap, rules) {
        return function (word) {
            // Get the correct token and case restoration functions.
            var token = word.toLowerCase();
            // Check against the keep object map.
            if (keepMap.hasOwnProperty(token)) {
                return restoreCase(word, token);
            }
            // Check against the replacement map for a direct word replacement.
            if (replaceMap.hasOwnProperty(token)) {
                return restoreCase(word, replaceMap[token]);
            }
            // Run all the rules against the word.
            return sanitizeWord(token, word, rules);
        };
    }
    var Pluralize = /** @class */ (function () {
        function Pluralize() {
        }
        Pluralize.pluralize = function (word, count, inclusive) {
            if (count === void 0) { count = 1; }
            var pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
            return (inclusive ? count + " " : '') + pluralized;
        };
        Pluralize.singular = function (word) {
            return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
        };
        Pluralize.plural = function (word) {
            return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
        };
        Pluralize.addPluralRule = function (rule, replacement) {
            pluralRules.push([sanitizeRule(rule), replacement]);
        };
        Pluralize.addSingularRule = function (rule, replacement) {
            singularRules.push([sanitizeRule(rule), replacement]);
        };
        Pluralize.addUncountableRule = function (word) {
            if (typeof word === 'string') {
                uncountables[word.toLowerCase()] = true;
                return;
            }
            // Set singular and plural references for the word.
            Pluralize.addPluralRule(word, '$0');
            Pluralize.addSingularRule(word, '$0');
        };
        Pluralize.addIrregularRule = function (single, plural) {
            var one = plural.toLowerCase();
            var many = single.toLowerCase();
            irregularSingles[one] = many;
            irregularPlurals[many] = one;
        };
        return Pluralize;
    }());
    /**
     * Irregular rules.
     */
    [
        // Pronouns.
        ['I', 'we'],
        ['me', 'us'],
        ['he', 'they'],
        ['she', 'they'],
        ['them', 'them'],
        ['myself', 'ourselves'],
        ['yourself', 'yourselves'],
        ['itself', 'themselves'],
        ['herself', 'themselves'],
        ['himself', 'themselves'],
        ['themself', 'themselves'],
        ['is', 'are'],
        ['this', 'these'],
        ['that', 'those'],
        // Words ending in with a consonant and `o`.
        ['echo', 'echoes'],
        ['dingo', 'dingoes'],
        ['volcano', 'volcanoes'],
        ['tornado', 'tornadoes'],
        ['torpedo', 'torpedoes'],
        // Ends with `us`.
        ['genus', 'genera'],
        ['viscus', 'viscera'],
        // Ends with `ma`.
        ['stigma', 'stigmata'],
        ['stoma', 'stomata'],
        ['dogma', 'dogmata'],
        ['lemma', 'lemmata'],
        ['schema', 'schemata'],
        ['anathema', 'anathemata'],
        // Other irregular rules.
        ['ox', 'oxen'],
        ['axe', 'axes'],
        ['die', 'dice'],
        ['yes', 'yeses'],
        ['foot', 'feet'],
        ['eave', 'eaves'],
        ['goose', 'geese'],
        ['tooth', 'teeth'],
        ['quiz', 'quizzes'],
        ['human', 'humans'],
        ['proof', 'proofs'],
        ['carve', 'carves'],
        ['valve', 'valves'],
        ['thief', 'thieves'],
        ['genie', 'genies'],
        ['groove', 'grooves'],
        ['pickaxe', 'pickaxes'],
        ['whiskey', 'whiskies'],
    ].forEach(function (rule) {
        return Pluralize.addIrregularRule(rule[0], rule[1]);
    });
    /**
     * Pluralization rules.
     */
    [
        [/s?$/i, 's'],
        [/([^aeiou]ese)$/i, '$1'],
        [/(ax|test)is$/i, '$1es'],
        [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
        [/(e[mn]u)s?$/i, '$1s'],
        [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
        [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
        [/(seraph|cherub)(?:im)?$/i, '$1im'],
        [/(her|at|gr)o$/i, '$1oes'],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
        [/sis$/i, 'ses'],
        [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
        [/([^aeiouy]|qu)y$/i, '$1ies'],
        [/([^ch][ieo][ln])ey$/i, '$1ies'],
        [/(x|ch|ss|sh|zz)$/i, '$1es'],
        [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
        [/(m|l)(?:ice|ouse)$/i, '$1ice'],
        [/(pe)(?:rson|ople)$/i, '$1ople'],
        [/(child)(?:ren)?$/i, '$1ren'],
        [/eaux$/i, '$0'],
        [/m[ae]n$/i, 'men'],
        ['thou', 'you'],
    ].forEach(function (rule) {
        return Pluralize.addPluralRule(rule[0], rule[1]);
    });
    /**
     * Singularization rules.
     */
    [
        [/s$/i, ''],
        [/(ss)$/i, '$1'],
        [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
        [/(^analy)(?:sis|ses)$/i, '$1sis'],
        [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
        [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
        [/([^aeiouy]|qu)ies$/i, '$1y'],
        [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
        [/(\b(?:mon|smil))ies$/i, '$1ey'],
        [/(m|l)ice$/i, '$1ouse'],
        [/(seraph|cherub)im$/i, '$1'],
        [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
        [/(e[mn]u)s?$/i, '$1'],
        [/(movie|twelve)s$/i, '$1'],
        [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
        [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
        [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
        [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
        [/(alumn|alg|vertebr)ae$/i, '$1a'],
        [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
        [/(matr|append)ices$/i, '$1ix'],
        [/(pe)(rson|ople)$/i, '$1rson'],
        [/(child)ren$/i, '$1'],
        [/(eau)x?$/i, '$1'],
        [/men$/i, 'man'],
    ].forEach(function (rule) {
        return Pluralize.addSingularRule(rule[0], rule[1]);
    });
    /**
     * Uncountable rules.
     */
    [
        // Singular words with no plurals.
        'advice',
        'adulthood',
        'agenda',
        'aid',
        'alcohol',
        'ammo',
        'athletics',
        'bison',
        'blood',
        'bream',
        'buffalo',
        'butter',
        'carp',
        'cash',
        'chassis',
        'chess',
        'clothing',
        'commerce',
        'cod',
        'cooperation',
        'corps',
        'digestion',
        'debris',
        'diabetes',
        'energy',
        'equipment',
        'elk',
        'excretion',
        'expertise',
        'flounder',
        'fun',
        'gallows',
        'garbage',
        'graffiti',
        'headquarters',
        'health',
        'herpes',
        'highjinks',
        'homework',
        'housework',
        'information',
        'jeans',
        'justice',
        'kudos',
        'labour',
        'literature',
        'machinery',
        'mackerel',
        'media',
        'mews',
        'moose',
        'music',
        'news',
        'pike',
        'plankton',
        'pliers',
        'pollution',
        'premises',
        'rain',
        'research',
        'rice',
        'salmon',
        'scissors',
        'series',
        'sewage',
        'shambles',
        'shrimp',
        'species',
        'staff',
        'swine',
        'trout',
        'traffic',
        'transporation',
        'tuna',
        'wealth',
        'welfare',
        'whiting',
        'wildebeest',
        'wildlife',
        'you',
        // Regexes.
        /pox$/i,
        /ois$/i,
        /deer$/i,
        /fish$/i,
        /sheep$/i,
        /measles$/i,
        /[^aeiou]ese$/i,
    ].forEach(Pluralize.addUncountableRule);
    var PluralPipe = /** @class */ (function () {
        function PluralPipe() {
        }
        PluralPipe.prototype.transform = function (value) {
            return Pluralize.pluralize(value);
        };
        return PluralPipe;
    }());
    PluralPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'plural' },] },
        { type: i0.Injectable }
    ];

    // NG2
    var NovoPipesModule = /** @class */ (function () {
        function NovoPipesModule() {
        }
        return NovoPipesModule;
    }());
    NovoPipesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PluralPipe, DecodeURIPipe, GroupByPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe],
                    exports: [PluralPipe, DecodeURIPipe, GroupByPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe],
                },] }
    ];

    (function (AppBridgeHandler) {
        AppBridgeHandler[AppBridgeHandler["HTTP"] = 0] = "HTTP";
        AppBridgeHandler[AppBridgeHandler["OPEN"] = 1] = "OPEN";
        AppBridgeHandler[AppBridgeHandler["OPEN_LIST"] = 2] = "OPEN_LIST";
        AppBridgeHandler[AppBridgeHandler["CLOSE"] = 3] = "CLOSE";
        AppBridgeHandler[AppBridgeHandler["REFRESH"] = 4] = "REFRESH";
        AppBridgeHandler[AppBridgeHandler["PIN"] = 5] = "PIN";
        AppBridgeHandler[AppBridgeHandler["REGISTER"] = 6] = "REGISTER";
        AppBridgeHandler[AppBridgeHandler["UPDATE"] = 7] = "UPDATE";
        AppBridgeHandler[AppBridgeHandler["REQUEST_DATA"] = 8] = "REQUEST_DATA";
        AppBridgeHandler[AppBridgeHandler["CALLBACK"] = 9] = "CALLBACK";
        AppBridgeHandler[AppBridgeHandler["PING"] = 10] = "PING";
    })(exports.AppBridgeHandler || (exports.AppBridgeHandler = {}));
    var HTTP_VERBS = {
        GET: 'get',
        POST: 'post',
        PUT: 'put',
        DELETE: 'delete',
    };
    var MESSAGE_TYPES = {
        REGISTER: 'register',
        OPEN: 'open',
        OPEN_LIST: 'openList',
        CLOSE: 'close',
        REFRESH: 'refresh',
        PIN: 'pin',
        PING: 'ping',
        UPDATE: 'update',
        HTTP_GET: 'httpGET',
        HTTP_POST: 'httpPOST',
        HTTP_PUT: 'httpPUT',
        HTTP_DELETE: 'httpDELETE',
        CUSTOM_EVENT: 'customEvent',
        REQUEST_DATA: 'requestData',
        CALLBACK: 'callback',
    };
    var AppBridgeService = /** @class */ (function () {
        function AppBridgeService() {
        }
        AppBridgeService.prototype.create = function (name) {
            return new AppBridge(name);
        };
        return AppBridgeService;
    }());
    var DevAppBridgeService = /** @class */ (function () {
        function DevAppBridgeService(http) {
            this.http = http;
        }
        DevAppBridgeService.prototype.create = function (name) {
            return new DevAppBridge(name, this.http);
        };
        return DevAppBridgeService;
    }());
    var AppBridge = /** @class */ (function () {
        // Type?
        function AppBridge(traceName) {
            if (traceName === void 0) { traceName = 'AppBridge'; }
            this.id = "" + Date.now();
            this._registeredFrames = [];
            this._handlers = {};
            this._tracing = false;
            this._eventListeners = {};
            this.traceName = traceName;
            if (postRobot) {
                postRobot.CONFIG.LOG_LEVEL = 'error';
                try {
                    this._setupHandlers();
                }
                catch (error) {
                    // No op
                }
            }
        }
        Object.defineProperty(AppBridge.prototype, "tracing", {
            set: function (tracing) {
                this._tracing = tracing;
            },
            enumerable: false,
            configurable: true
        });
        AppBridge.prototype.handle = function (type, handler) {
            this._handlers[type] = handler;
        };
        AppBridge.prototype._trace = function (eventType, event) {
            if (this._tracing) {
                console.log("[" + (this.traceName || this.id) + "] \"" + eventType + "\"", event); // tslint:disable-line
            }
        };
        AppBridge.prototype._setupHandlers = function () {
            var _this = this;
            // Register
            postRobot.on(MESSAGE_TYPES.REGISTER, function (event) {
                _this._trace(MESSAGE_TYPES.REGISTER, event);
                _this._registeredFrames.push(event);
                return _this.register(event.data).then(function (windowName) {
                    return { windowName: windowName };
                });
            });
            // Update
            postRobot.on(MESSAGE_TYPES.UPDATE, function (event) {
                _this._trace(MESSAGE_TYPES.UPDATE, event);
                return _this.update(event.data).then(function (success) {
                    return { success: success };
                });
            });
            // Open
            postRobot.on(MESSAGE_TYPES.OPEN, function (event) {
                _this._trace(MESSAGE_TYPES.OPEN, event);
                return _this.open(event.data).then(function (success) {
                    return { success: success };
                });
            });
            postRobot.on(MESSAGE_TYPES.OPEN_LIST, function (event) {
                _this._trace(MESSAGE_TYPES.OPEN_LIST, event);
                return _this.openList(event.data).then(function (success) {
                    return { success: success };
                });
            });
            // Close
            postRobot.on(MESSAGE_TYPES.CLOSE, function (event) {
                _this._trace(MESSAGE_TYPES.CLOSE, event);
                var index = _this._registeredFrames.findIndex(function (frame) { return frame.data.id === event.data.id; });
                if (index !== -1) {
                    _this._registeredFrames.splice(index, 1);
                }
                return _this.close(event.data).then(function (success) {
                    return { success: success };
                });
            });
            // Refresh
            postRobot.on(MESSAGE_TYPES.REFRESH, function (event) {
                _this._trace(MESSAGE_TYPES.REFRESH, event);
                return _this.refresh(event.data).then(function (success) {
                    return { success: success };
                });
            });
            // PIN
            postRobot.on(MESSAGE_TYPES.PIN, function (event) {
                _this._trace(MESSAGE_TYPES.PIN, event);
                return _this.pin(event.data).then(function (success) {
                    return { success: success };
                });
            });
            // PING
            postRobot.on(MESSAGE_TYPES.PING, function (event) {
                _this._trace(MESSAGE_TYPES.PING, event);
                return _this.httpGET('ping').then(function (result) {
                    return { data: result.data, error: result.error };
                });
            });
            // REQUEST_DATA
            postRobot.on(MESSAGE_TYPES.REQUEST_DATA, function (event) {
                _this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
                return _this.requestData(event.data).then(function (result) {
                    return { data: result.data, error: result.error };
                });
            });
            // CALLBACKS
            postRobot.on(MESSAGE_TYPES.CALLBACK, function (event) {
                _this._trace(MESSAGE_TYPES.CALLBACK, event);
                return _this.callback(event.data).then(function (success) {
                    return { success: success };
                });
            });
            // HTTP-GET
            postRobot.on(MESSAGE_TYPES.HTTP_GET, function (event) {
                _this._trace(MESSAGE_TYPES.HTTP_GET, event);
                return _this.httpGET(event.data.relativeURL).then(function (result) {
                    return { data: result.data, error: result.error };
                });
            });
            // HTTP-POST
            postRobot.on(MESSAGE_TYPES.HTTP_POST, function (event) {
                _this._trace(MESSAGE_TYPES.HTTP_POST, event);
                return _this.httpPOST(event.data.relativeURL, event.data.data).then(function (result) {
                    return { data: result.data, error: result.error };
                });
            });
            // HTTP-PUT
            postRobot.on(MESSAGE_TYPES.HTTP_PUT, function (event) {
                _this._trace(MESSAGE_TYPES.HTTP_PUT, event);
                return _this.httpPUT(event.data.relativeURL, event.data.data).then(function (result) {
                    return { data: result.data, error: result.error };
                });
            });
            // HTTP-DELETE
            postRobot.on(MESSAGE_TYPES.HTTP_DELETE, function (event) {
                _this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
                return _this.httpDELETE(event.data.relativeURL).then(function (result) {
                    return { data: result.data, error: result.error };
                });
            });
            // Custom Events
            postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, function (event) {
                _this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
                if (_this._eventListeners[event.data.event]) {
                    _this._eventListeners[event.data.event].forEach(function (listener) {
                        listener(event.data.data);
                    });
                }
                if (_this._registeredFrames.length > 0) {
                    _this._registeredFrames.forEach(function (frame) {
                        postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                    });
                }
            });
        };
        /**
         * Fires or responds to an open event
         * @param packet any - packet of data to send with the open event
         */
        AppBridge.prototype.open = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.OPEN]) {
                    _this._handlers[exports.AppBridgeHandler.OPEN](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                    postRobot
                        .sendToParent(MESSAGE_TYPES.OPEN, packet)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.OPEN + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires or responds to an openList event
         * @param packet any - packet of data to send with the open event
         */
        AppBridge.prototype.openList = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.OPEN_LIST]) {
                    _this._handlers[exports.AppBridgeHandler.OPEN_LIST](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    var openListPacket = {};
                    Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                    postRobot
                        .sendToParent(MESSAGE_TYPES.OPEN_LIST, packet)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.OPEN_LIST + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires or responds to an close event
         * @param packet any - packet of data to send with the close event
         */
        AppBridge.prototype.update = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.UPDATE]) {
                    _this._handlers[exports.AppBridgeHandler.UPDATE](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                    postRobot
                        .sendToParent(MESSAGE_TYPES.UPDATE, packet)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.UPDATE + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires or responds to an close event
         */
        AppBridge.prototype.close = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.CLOSE]) {
                    _this._handlers[exports.AppBridgeHandler.CLOSE](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    if (packet) {
                        console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                    }
                    var realPacket = { id: _this.id, windowName: _this.windowName };
                    postRobot
                        .sendToParent(MESSAGE_TYPES.CLOSE, realPacket)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.CLOSE + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires or responds to an close event
         */
        AppBridge.prototype.refresh = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.REFRESH]) {
                    _this._handlers[exports.AppBridgeHandler.REFRESH](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    if (packet) {
                        console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                    }
                    var realPacket = { id: _this.id, windowName: _this.windowName };
                    postRobot
                        .sendToParent(MESSAGE_TYPES.REFRESH, realPacket)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.REFRESH + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        AppBridge.prototype.ping = function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.PING]) {
                    _this._handlers[exports.AppBridgeHandler.PING]({}, function (data, error) {
                        resolve({ data: data, error: error });
                    });
                }
                else {
                    postRobot
                        .sendToParent(MESSAGE_TYPES.PING, {})
                        .then(function (event) {
                        resolve({ data: event.data.data, error: event.data.error });
                    })
                        .catch(function (err) {
                        reject(null);
                    });
                }
            });
        };
        /**
         * Fires or responds to a pin event
         */
        AppBridge.prototype.pin = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.PIN]) {
                    _this._handlers[exports.AppBridgeHandler.PIN](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    if (packet) {
                        console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                    }
                    var realPacket = { id: _this.id, windowName: _this.windowName };
                    postRobot
                        .sendToParent(MESSAGE_TYPES.PIN, realPacket)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.PIN + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires or responds to a requestData event
         * @param packet any - packet of data to send with the requestData event
         */
        AppBridge.prototype.requestData = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.REQUEST_DATA]) {
                    _this._handlers[exports.AppBridgeHandler.REQUEST_DATA](packet, function (data) {
                        if (data) {
                            resolve({ data: data });
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                    postRobot
                        .sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.REQUEST_DATA + " (callback)", event);
                        if (event.data) {
                            resolve({ data: event.data.data });
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires a generic callback command
         * @param packet string - key: string, generic: boolean
         */
        AppBridge.prototype.callback = function (packet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.CALLBACK]) {
                    _this._handlers[exports.AppBridgeHandler.CALLBACK](packet, function (success) {
                        if (success) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    });
                }
                else {
                    Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                    postRobot
                        .sendToParent(MESSAGE_TYPES.CALLBACK, packet)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.CALLBACK + " (callback)", event);
                        if (event.data) {
                            resolve(true);
                        }
                        else {
                            reject(false);
                        }
                    })
                        .catch(function (err) {
                        reject(false);
                    });
                }
            });
        };
        /**
         * Fires or responds to an register event
         * @param packet any - packet of data to send with the event
         */
        AppBridge.prototype.register = function (packet) {
            var _this = this;
            if (packet === void 0) { packet = {}; }
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.REGISTER]) {
                    _this._handlers[exports.AppBridgeHandler.REGISTER](packet, function (windowName) {
                        if (windowName) {
                            resolve(windowName);
                        }
                        else {
                            resolve(null);
                        }
                    });
                }
                else {
                    Object.assign(packet, { id: _this.id });
                    postRobot
                        .sendToParent(MESSAGE_TYPES.REGISTER, packet)
                        .then(function (event) {
                        _this._trace(MESSAGE_TYPES.REGISTER + " (callback)", event);
                        if (event.data) {
                            _this.windowName = event.data.windowName;
                            resolve(event.data.windowName);
                        }
                        else {
                            resolve(null);
                        }
                    })
                        .catch(function (err) {
                        _this._trace(MESSAGE_TYPES.REGISTER + " - FAILED - (no parent)", err);
                        reject(err);
                    });
                }
            });
        };
        /**
         * Fires or responds to an HTTP_GET event
         * @param packet any - packet of data to send with the event
         */
        AppBridge.prototype.httpGET = function (relativeURL, timeout) {
            var _this = this;
            if (timeout === void 0) { timeout = 10000; }
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.HTTP]) {
                    _this._handlers[exports.AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL: relativeURL }, function (data, error) {
                        resolve({ data: data, error: error });
                    });
                }
                else {
                    postRobot
                        .sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL: relativeURL }, { timeout: timeout })
                        .then(function (event) {
                        resolve({ data: event.data.data, error: event.data.error });
                    })
                        .catch(function (err) {
                        reject(null);
                    });
                }
            });
        };
        /**
         * Fires or responds to an HTTP_POST event
         * @param packet any - packet of data to send with the event
         */
        AppBridge.prototype.httpPOST = function (relativeURL, postData, timeout) {
            var _this = this;
            if (timeout === void 0) { timeout = 10000; }
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.HTTP]) {
                    _this._handlers[exports.AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL: relativeURL, data: postData }, function (data, error) {
                        resolve({ data: data, error: error });
                    });
                }
                else {
                    postRobot
                        .sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL: relativeURL, data: postData }, { timeout: timeout })
                        .then(function (event) {
                        resolve({ data: event.data.data, error: event.data.error });
                    })
                        .catch(function (err) {
                        reject(null);
                    });
                }
            });
        };
        /**
         * Fires or responds to an HTTP_PUT event
         * @param packet any - packet of data to send with the event
         */
        AppBridge.prototype.httpPUT = function (relativeURL, putData, timeout) {
            var _this = this;
            if (timeout === void 0) { timeout = 10000; }
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.HTTP]) {
                    _this._handlers[exports.AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL: relativeURL, data: putData }, function (data, error) {
                        resolve({ data: data, error: error });
                    });
                }
                else {
                    postRobot
                        .sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL: relativeURL, data: putData }, { timeout: timeout })
                        .then(function (event) {
                        resolve({ data: event.data.data, error: event.data.error });
                    })
                        .catch(function (err) {
                        reject(null);
                    });
                }
            });
        };
        /**
         * Fires or responds to an HTTP_DELETE event
         * @param packet any - packet of data to send with the event
         */
        AppBridge.prototype.httpDELETE = function (relativeURL, timeout) {
            var _this = this;
            if (timeout === void 0) { timeout = 10000; }
            return new Promise(function (resolve, reject) {
                if (_this._handlers[exports.AppBridgeHandler.HTTP]) {
                    _this._handlers[exports.AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL: relativeURL }, function (data, error) {
                        resolve({ data: data, error: error });
                    });
                }
                else {
                    postRobot
                        .sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL: relativeURL }, { timeout: timeout })
                        .then(function (event) {
                        resolve({ data: event.data.data, error: event.data.error });
                    })
                        .catch(function (err) {
                        reject(null);
                    });
                }
            });
        };
        /**
         * Fires a custom event to anywhere in the application
         * @param event string - event name to fire
         * @param data any - data to be sent along with the event
         */
        AppBridge.prototype.fireEvent = function (event, data) {
            return new Promise(function (resolve, reject) {
                postRobot
                    .sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event: event, data: data })
                    .then(function (e) {
                    resolve(e);
                })
                    .catch(function (err) {
                    reject(null);
                });
            });
        };
        /**
         * Fires a custom event to all registered frames
         * @param event string - event name to fire
         * @param data any - data to be sent along with the event
         */
        AppBridge.prototype.fireEventToChildren = function (event, data) {
            if (this._registeredFrames.length > 0) {
                this._registeredFrames.forEach(function (frame) {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                        event: event,
                        eventType: event,
                        data: data,
                    });
                });
            }
        };
        /**
         * Fires a custom event to specified frames
         * @param source Window - specific iframe contentWindow
         * @param event string - event name to fire
         * @param data any - data to be sent along with the event
         */
        AppBridge.prototype.fireEventToChild = function (source, event, data) {
            if (source instanceof HTMLIFrameElement) {
                source = source.contentWindow;
            }
            postRobot.send(source, MESSAGE_TYPES.CUSTOM_EVENT, { event: event, data: data });
        };
        /**
         * Adds an event listener to a custom event
         * @param event string - event name to listen to
         * @param callback function - callback to be fired when an event is caught
         */
        AppBridge.prototype.addEventListener = function (event, callback) {
            if (!this._eventListeners[event]) {
                this._eventListeners[event] = [];
            }
            this._eventListeners[event].push(callback);
        };
        return AppBridge;
    }());
    var DevAppBridge = /** @class */ (function (_super) {
        __extends(DevAppBridge, _super);
        function DevAppBridge(traceName, http) {
            if (traceName === void 0) { traceName = 'DevAppBridge'; }
            var _this = _super.call(this, traceName) || this;
            _this.http = http;
            var cookie = _this.getCookie('UlEncodedIdentity');
            if (cookie && cookie.length) {
                var identity = JSON.parse(decodeURIComponent(cookie));
                var endpoints = identity.sessions.reduce(function (obj, session) {
                    obj[session.name] = session.value.endpoint;
                    return obj;
                }, {});
                _this.baseURL = endpoints.rest;
            }
            return _this;
        }
        DevAppBridge.prototype._setupHandlers = function () { };
        /**
         * Fires or responds to an HTTP_GET event
         * @param packet any - packet of data to send with the event
         */
        DevAppBridge.prototype.httpGET = function (relativeURL) {
            return this.http.get(this.baseURL + "/" + relativeURL, { withCredentials: true }).toPromise();
        };
        /**
         * Fires or responds to an HTTP_POST event
         * @param packet any - packet of data to send with the event
         */
        DevAppBridge.prototype.httpPOST = function (relativeURL, postData) {
            return this.http.post(this.baseURL + "/" + relativeURL, postData, { withCredentials: true }).toPromise();
        };
        /**
         * Fires or responds to an HTTP_PUT event
         * @param packet any - packet of data to send with the event
         */
        DevAppBridge.prototype.httpPUT = function (relativeURL, putData) {
            return this.http.put(this.baseURL + "/" + relativeURL, putData, { withCredentials: true }).toPromise();
        };
        /**
         * Fires or responds to an HTTP_DELETE event
         * @param packet any - packet of data to send with the event
         */
        DevAppBridge.prototype.httpDELETE = function (relativeURL) {
            return this.http.delete(this.baseURL + "/" + relativeURL, { withCredentials: true }).toPromise();
        };
        DevAppBridge.prototype.getCookie = function (cname) {
            if (document) {
                var name = cname + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) === ' ') {
                        c = c.substring(1);
                    }
                    if (c.indexOf(name) === 0) {
                        return c.substring(name.length, c.length);
                    }
                }
            }
            return false;
        };
        return DevAppBridge;
    }(AppBridge));

    var WEEKEND_DAY_NUMBERS = [0, 6];
    var DAYS_IN_WEEK = 7;
    var HOURS_IN_DAY = 24;
    var MINUTES_IN_HOUR = 60;
    (function (CalendarEventResponse) {
        CalendarEventResponse[CalendarEventResponse["Maybe"] = 0] = "Maybe";
        CalendarEventResponse[CalendarEventResponse["Accepted"] = 1] = "Accepted";
        CalendarEventResponse[CalendarEventResponse["Rejected"] = 2] = "Rejected";
    })(exports.CalendarEventResponse || (exports.CalendarEventResponse = {}));
    function getExcludedDays(_a) {
        var startDate = _a.startDate, days = _a.days, excluded = _a.excluded;
        if (excluded.length < 1) {
            return 0;
        }
        var day = startDate.getDay();
        var reduce = 0;
        for (var i = 0; i < days; i++) {
            if (day === DAYS_IN_WEEK) {
                day = 0;
            }
            if (excluded.some(function (e) { return e === day; })) {
                reduce++;
            }
            day++;
        }
        return reduce;
    }
    function getWeekViewEventSpan(_a) {
        var event = _a.event, offset = _a.offset, startOfWeek = _a.startOfWeek, excluded = _a.excluded;
        var begin = event.start < startOfWeek ? startOfWeek : event.start;
        var span = 1;
        if (event.end) {
            span = dateFns.differenceInDays(dateFns.addMinutes(dateFns.endOfDay(event.end), 1), dateFns.startOfDay(begin));
        }
        var totalLength = offset + span;
        if (totalLength > DAYS_IN_WEEK) {
            span = DAYS_IN_WEEK - offset;
        }
        return span - getExcludedDays({ startDate: begin, days: span, excluded: excluded });
    }
    function getWeekViewEventOffset(_a) {
        var event = _a.event, startOfWeek = _a.startOfWeek, _b = _a.excluded, excluded = _b === void 0 ? [] : _b;
        if (event.start < startOfWeek) {
            return 0;
        }
        var distance = dateFns.differenceInDays(event.start, startOfWeek);
        return distance - getExcludedDays({ startDate: startOfWeek, days: distance, excluded: excluded });
    }
    function isEventIsPeriod(_a) {
        var event = _a.event, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
        var eventStart = event.start;
        var eventEnd = event.end || event.start;
        if (eventStart > periodStart && eventStart < periodEnd) {
            return true;
        }
        if (eventEnd > periodStart && eventEnd < periodEnd) {
            return true;
        }
        if (eventStart < periodStart && eventEnd > periodEnd) {
            return true;
        }
        if (dateFns.isSameSecond(eventStart, periodStart) || dateFns.isSameSecond(eventStart, periodEnd)) {
            return true;
        }
        if (dateFns.isSameSecond(eventEnd, periodStart) || dateFns.isSameSecond(eventEnd, periodEnd)) {
            return true;
        }
        return false;
    }
    function getEventsInPeriod(_a) {
        var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
        return events.filter(function (event) { return isEventIsPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }); });
    }
    function getEventsInTimeRange(events, dayStart, dayEnd) {
        return events.filter(function (event) {
            var eventStart = event.start;
            var eventEnd = event.end || eventStart;
            var startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(eventStart), dayStart.hour), dayStart.minute);
            var endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
            return dateFns.isAfter(eventEnd, startOfView) && dateFns.isBefore(eventStart, endOfView);
        });
    }
    function getWeekDay(_a) {
        var date = _a.date;
        var today = dateFns.startOfDay(new Date());
        return {
            date: date,
            isPast: date < today,
            isToday: dateFns.isSameDay(date, today),
            isFuture: date > today,
            isWeekend: WEEKEND_DAY_NUMBERS.indexOf(dateFns.getDay(date)) > -1,
        };
    }
    function getWeekViewHeader(_a) {
        var viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _b = _a.excluded, excluded = _b === void 0 ? [] : _b;
        var start = dateFns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        var days = [];
        var _loop_1 = function (i) {
            var date = dateFns.addDays(start, i);
            if (!excluded.some(function (e) { return date.getDay() === e; })) {
                days.push(getWeekDay({ date: date }));
            }
        };
        for (var i = 0; i < DAYS_IN_WEEK; i++) {
            _loop_1(i);
        }
        return days;
    }
    function getWeekView(_a) {
        var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c, hourSegments = _a.hourSegments, segmentHeight = _a.segmentHeight, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
        if (!events) {
            events = [];
        }
        var startOfViewWeek = dateFns.startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        var endOfViewWeek = dateFns.endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
        var maxRange = DAYS_IN_WEEK - excluded.length;
        var eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
            .map(function (event) {
            var offset = getWeekViewEventOffset({ event: event, startOfWeek: startOfViewWeek, excluded: excluded });
            var span = 1; // getWeekViewEventSpan({ event, offset, startOfWeek: startOfViewWeek, excluded });
            return { event: event, offset: offset, span: span };
        })
            .filter(function (e) { return e.offset < maxRange; })
            .filter(function (e) { return e.span > 0; })
            .map(function (entry) { return ({
            event: entry.event,
            offset: entry.offset,
            span: entry.span,
            startsBeforeWeek: entry.event.start < startOfViewWeek,
            endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
            top: 0,
        }); })
            .sort(function (itemA, itemB) {
            var startSecondsDiff = dateFns.differenceInSeconds(itemA.event.start, itemB.event.start);
            if (startSecondsDiff === 0) {
                return dateFns.differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
            }
            return startSecondsDiff;
        })
            .map(function (entry) {
            var startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
            var endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
            var eventStart = entry.event.start;
            var eventEnd = entry.event.end || eventStart;
            var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
            if (eventStart > startOfView) {
                entry.top += dateFns.differenceInMinutes(eventStart, startOfView);
            }
            entry.top *= hourHeightModifier;
            var startsBeforeDay = eventStart < startOfView;
            var endsAfterDay = eventEnd > endOfView;
            var startDate = startsBeforeDay ? startOfView : eventStart;
            var endDate = endsAfterDay ? endOfView : eventEnd;
            var height = dateFns.differenceInMinutes(endDate, startDate);
            if (!entry.event.end) {
                height = segmentHeight;
            }
            else {
                height *= hourHeightModifier;
            }
            entry.height = height;
            return entry;
        });
        var eventRows = [];
        var allocatedEvents = [];
        eventsMapped.forEach(function (event, index) {
            if (allocatedEvents.indexOf(event) === -1) {
                allocatedEvents.push(event);
                var otherRowEvents = eventsMapped.slice(index + 1).filter(function (nextEvent) {
                    return nextEvent.top === event.top && nextEvent.offset === event.offset;
                });
                if (otherRowEvents.length > 0) {
                    var totalEventsForRow = otherRowEvents.length + 1;
                    event.span = 1 / totalEventsForRow;
                    var nextOffset_1 = event.span + event.offset;
                    otherRowEvents.forEach(function (nextEvent) {
                        nextEvent.offset = nextOffset_1;
                        nextEvent.span = event.span;
                        nextOffset_1 = nextEvent.span + nextEvent.offset;
                    });
                    allocatedEvents.push.apply(allocatedEvents, __spread(otherRowEvents));
                }
                eventRows.push({
                    row: __spread([event], otherRowEvents),
                });
            }
        });
        return eventRows;
    }
    function getMonthView(_a) {
        var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c;
        if (!events) {
            events = [];
        }
        var start = dateFns.startOfWeek(dateFns.startOfMonth(viewDate), { weekStartsOn: weekStartsOn });
        var end = dateFns.endOfWeek(dateFns.endOfMonth(viewDate), { weekStartsOn: weekStartsOn });
        var eventsInMonth = getEventsInPeriod({
            events: events,
            periodStart: start,
            periodEnd: end,
        });
        var days = [];
        var _loop_2 = function (i) {
            var date = dateFns.addDays(start, i);
            if (!excluded.some(function (e) { return date.getDay() === e; })) {
                var day = getWeekDay({ date: date });
                var calEvents = getEventsInPeriod({
                    events: eventsInMonth,
                    periodStart: dateFns.startOfDay(date),
                    periodEnd: dateFns.endOfDay(date),
                });
                day.inMonth = dateFns.isSameMonth(date, viewDate);
                day.events = calEvents;
                day.badgeTotal = calEvents.length;
                days.push(day);
            }
        };
        for (var i = 0; i < dateFns.differenceInDays(end, start) + 1; i++) {
            _loop_2(i);
        }
        var totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
        var rows = Math.floor(days.length / totalDaysVisibleInWeek);
        var rowOffsets = [];
        for (var i = 0; i < rows; i++) {
            rowOffsets.push(i * totalDaysVisibleInWeek);
        }
        return {
            rowOffsets: rowOffsets,
            totalDaysVisibleInWeek: totalDaysVisibleInWeek,
            days: days,
        };
    }
    function getDayView(_a) {
        var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, eventWidth = _a.eventWidth, segmentHeight = _a.segmentHeight;
        if (!events) {
            events = [];
        }
        var startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
        var endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
        var previousDayEvents = [];
        var dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
            events: events.filter(function (event) { return !event.allDay; }),
            periodStart: startOfView,
            periodEnd: endOfView,
        }), dayStart, dayEnd)
            .sort(function (eventA, eventB) {
            return eventA.start.valueOf() - eventB.start.valueOf();
        })
            .map(function (event) {
            var eventStart = event.start;
            var eventEnd = event.end || eventStart;
            var startsBeforeDay = eventStart < startOfView;
            var endsAfterDay = eventEnd > endOfView;
            var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
            var top = 0;
            if (eventStart > startOfView) {
                top += dateFns.differenceInMinutes(eventStart, startOfView);
            }
            top *= hourHeightModifier;
            var startDate = startsBeforeDay ? startOfView : eventStart;
            var endDate = endsAfterDay ? endOfView : eventEnd;
            var height = dateFns.differenceInMinutes(endDate, startDate);
            if (!event.end) {
                height = segmentHeight;
            }
            else {
                height *= hourHeightModifier;
            }
            var bottom = top + height;
            var overlappingPreviousEvents = previousDayEvents.filter(function (previousEvent) {
                var previousEventTop = previousEvent.top;
                var previousEventBottom = previousEvent.top + previousEvent.height;
                if (top < previousEventBottom && previousEventBottom < bottom) {
                    return true;
                }
                else if (previousEventTop <= top && bottom <= previousEventBottom) {
                    return true;
                }
                return false;
            });
            var left = 0;
            while (overlappingPreviousEvents.some(function (previousEvent) { return previousEvent.left === left; })) {
                left += eventWidth;
            }
            var dayEvent = {
                event: event,
                height: height,
                width: eventWidth,
                top: top,
                left: left,
                startsBeforeDay: startsBeforeDay,
                endsAfterDay: endsAfterDay,
            };
            if (height > 0) {
                previousDayEvents.push(dayEvent);
            }
            return dayEvent;
        })
            .filter(function (dayEvent) { return dayEvent.height > 0; });
        var width = Math.max.apply(Math, __spread(dayViewEvents.map(function (event) { return event.left + event.width; })));
        var allDayEvents = getEventsInPeriod({
            events: events.filter(function (event) { return event.allDay; }),
            periodStart: dateFns.startOfDay(startOfView),
            periodEnd: dateFns.endOfDay(endOfView),
        });
        return {
            events: dayViewEvents,
            width: width,
            allDayEvents: allDayEvents,
        };
    }
    function getDayViewHourGrid(_a) {
        var viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
        var hours = [];
        var startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
        var endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
        var segmentDuration = MINUTES_IN_HOUR / hourSegments;
        var startOfViewDay = dateFns.startOfDay(viewDate);
        for (var i = 0; i < HOURS_IN_DAY; i++) {
            var segments = [];
            for (var j = 0; j < hourSegments; j++) {
                var date = dateFns.addMinutes(dateFns.addHours(startOfViewDay, i), j * segmentDuration);
                if (date >= startOfView && date < endOfView) {
                    segments.push({
                        date: date,
                        isStart: j === 0,
                    });
                }
            }
            if (segments.length > 0) {
                hours.push({ segments: segments });
            }
        }
        return hours;
    }

    // NG2
    var ComponentUtils = /** @class */ (function () {
        function ComponentUtils(componentFactoryResolver) {
            this.componentFactoryResolver = componentFactoryResolver;
        }
        ComponentUtils.prototype.append = function (ComponentClass, location, providers, onTop) {
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
            var parent = location.injector;
            var index = onTop ? 0 : location.length;
            return location.createComponent(componentFactory, index, i0.Injector.create({ providers: providers, parent: parent }));
        };
        return ComponentUtils;
    }());
    ComponentUtils.decorators = [
        { type: i0.Injectable }
    ];
    ComponentUtils.ctorParameters = function () { return [
        { type: i0.ComponentFactoryResolver }
    ]; };

    /* tslint:disable:quotemark */
    /**
     * AUTOGENERATED FILE - DO NOT EDIT
     * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
     * Last generated on: Tue Feb 26 2019 15:45:12 GMT-0600 (Central Standard Time)
     */
    var COUNTRIES = [
        {
            code: 'US',
            id: 1,
            name: 'United States',
            states: [
                {
                    code: 'AL',
                    name: 'Alabama',
                },
                {
                    code: 'AK',
                    name: 'Alaska',
                },
                {
                    code: 'AZ',
                    name: 'Arizona',
                },
                {
                    code: 'AR',
                    name: 'Arkansas',
                },
                {
                    code: 'CA',
                    name: 'California',
                },
                {
                    code: 'CO',
                    name: 'Colorado',
                },
                {
                    code: 'CT',
                    name: 'Connecticut',
                },
                {
                    code: 'DE',
                    name: 'Delaware',
                },
                {
                    code: 'DC',
                    name: 'District Of Columbia',
                },
                {
                    code: 'FL',
                    name: 'Florida',
                },
                {
                    code: 'GA',
                    name: 'Georgia',
                },
                {
                    code: 'GU',
                    name: 'Guam',
                },
                {
                    code: 'HI',
                    name: 'Hawaii',
                },
                {
                    code: 'ID',
                    name: 'Idaho',
                },
                {
                    code: 'IL',
                    name: 'Illinois',
                },
                {
                    code: 'IN',
                    name: 'Indiana',
                },
                {
                    code: 'IA',
                    name: 'Iowa',
                },
                {
                    code: 'KS',
                    name: 'Kansas',
                },
                {
                    code: 'KY',
                    name: 'Kentucky',
                },
                {
                    code: 'LA',
                    name: 'Louisiana',
                },
                {
                    code: 'ME',
                    name: 'Maine',
                },
                {
                    code: 'MH',
                    name: 'Marshall Islands',
                },
                {
                    code: 'MD',
                    name: 'Maryland',
                },
                {
                    code: 'MA',
                    name: 'Massachusetts',
                },
                {
                    code: 'MI',
                    name: 'Michigan',
                },
                {
                    code: 'MN',
                    name: 'Minnesota',
                },
                {
                    code: 'MS',
                    name: 'Mississippi',
                },
                {
                    code: 'MO',
                    name: 'Missouri',
                },
                {
                    code: 'MT',
                    name: 'Montana',
                },
                {
                    code: 'NE',
                    name: 'Nebraska',
                },
                {
                    code: 'NV',
                    name: 'Nevada',
                },
                {
                    code: 'NH',
                    name: 'New Hampshire',
                },
                {
                    code: 'NJ',
                    name: 'New Jersey',
                },
                {
                    code: 'NM',
                    name: 'New Mexico',
                },
                {
                    code: 'NY',
                    name: 'New York',
                },
                {
                    code: 'NC',
                    name: 'North Carolina',
                },
                {
                    code: 'ND',
                    name: 'North Dakota',
                },
                {
                    code: 'MP',
                    name: 'Northern Mariana Islands',
                },
                {
                    code: 'OH',
                    name: 'Ohio',
                },
                {
                    code: 'OK',
                    name: 'Oklahoma',
                },
                {
                    code: 'OR',
                    name: 'Oregon',
                },
                {
                    code: 'PW',
                    name: 'Palau',
                },
                {
                    code: 'PA',
                    name: 'Pennsylvania',
                },
                {
                    code: 'PR',
                    name: 'Puerto Rico',
                },
                {
                    code: 'RI',
                    name: 'Rhode Island',
                },
                {
                    code: 'SC',
                    name: 'South Carolina',
                },
                {
                    code: 'SD',
                    name: 'South Dakota',
                },
                {
                    code: 'TN',
                    name: 'Tennessee',
                },
                {
                    code: 'TX',
                    name: 'Texas',
                },
                {
                    code: 'UT',
                    name: 'Utah',
                },
                {
                    code: 'VT',
                    name: 'Vermont',
                },
                {
                    code: 'VI',
                    name: 'Virgin Islands',
                },
                {
                    code: 'VA',
                    name: 'Virginia',
                },
                {
                    code: 'WA',
                    name: 'Washington',
                },
                {
                    code: 'WV',
                    name: 'West Virginia',
                },
                {
                    code: 'WI',
                    name: 'Wisconsin',
                },
                {
                    code: 'WY',
                    name: 'Wyoming',
                },
            ],
        },
        {
            code: 'UK',
            id: 2359,
            name: 'United Kingdom',
            states: [
                {
                    code: 'ABD',
                    name: 'Aberdeenshire',
                },
                {
                    code: 'ALD',
                    name: 'Alderney',
                },
                {
                    code: 'ANS',
                    name: 'Angus',
                },
                {
                    code: 'ANN',
                    name: 'Antrim and Newtownabbey',
                },
                {
                    code: 'AGB',
                    name: 'Argyllshire',
                },
                {
                    code: 'ABC',
                    name: 'Armagh',
                },
                {
                    code: 'EAY',
                    name: 'Ayrshire',
                },
                {
                    code: 'BLA',
                    name: 'Ballymena',
                },
                {
                    code: 'BAY',
                    name: 'Ballymoney',
                },
                {
                    code: 'BNB',
                    name: 'Banbridge',
                },
                {
                    code: 'BAN',
                    name: 'Banffshire',
                },
                {
                    code: 'BDF',
                    name: 'Bedfordshire',
                },
                {
                    code: 'BFS',
                    name: 'Belfast',
                },
                {
                    code: 'BRK',
                    name: 'Berkshire',
                },
                {
                    code: 'BGW',
                    name: 'Blaenau Gwent',
                },
                {
                    code: 'SCB',
                    name: 'Borders',
                },
                {
                    code: 'BGE',
                    name: 'Bridgend',
                },
                {
                    code: 'BST',
                    name: 'Bristol',
                },
                {
                    code: 'BKM',
                    name: 'Buckinghamshire',
                },
                {
                    code: 'CAY',
                    name: 'Caerphilly',
                },
                {
                    code: 'CAI',
                    name: 'Caithness',
                },
                {
                    code: 'CAM',
                    name: 'Cambridgeshire',
                },
                {
                    code: 'CRF',
                    name: 'Cardiff',
                },
                {
                    code: 'CMN',
                    name: 'Carmarthenshire',
                },
                {
                    code: 'CKF',
                    name: 'Carrickfergus',
                },
                {
                    code: 'CAS',
                    name: 'Castlereagh',
                },
                {
                    code: 'CGN',
                    name: 'Ceredigion',
                },
                {
                    code: 'CHE',
                    name: 'Cheshire',
                },
                {
                    code: 'CLK',
                    name: 'Clackmannanshire',
                },
                {
                    code: 'CLR',
                    name: 'Coleraine',
                },
                {
                    code: 'CWY',
                    name: 'Conwy',
                },
                {
                    code: 'CKT',
                    name: 'Cookstown',
                },
                {
                    code: 'CON',
                    name: 'Cornwall',
                },
                {
                    code: 'DUR',
                    name: 'County Durham',
                },
                {
                    code: 'DRS',
                    name: 'County Londonderry',
                },
                {
                    code: 'CRA',
                    name: 'Craigavon',
                },
                {
                    code: 'CMA',
                    name: 'Cumbria',
                },
                {
                    code: 'DEN',
                    name: 'Denbighshire',
                },
                {
                    code: 'DBY',
                    name: 'Derbyshire',
                },
                {
                    code: 'DEV',
                    name: 'Devon',
                },
                {
                    code: 'DOR',
                    name: 'Dorset',
                },
                {
                    code: 'EDU',
                    name: 'Dumbartonshire',
                },
                {
                    code: 'DGY',
                    name: 'Dumfries and Galloway',
                },
                {
                    code: 'DGN',
                    name: 'Dungannon and South Tyrone',
                },
                {
                    code: 'ELN',
                    name: 'East Lothian',
                },
                {
                    code: 'ESX',
                    name: 'East Sussex',
                },
                {
                    code: 'ERY',
                    name: 'East Yorkshire',
                },
                {
                    code: 'ESS',
                    name: 'Essex',
                },
                {
                    code: 'FMO',
                    name: 'Fermanagh and Omagh',
                },
                {
                    code: 'FIF',
                    name: 'Fife',
                },
                {
                    code: 'FLN',
                    name: 'Flintshire',
                },
                {
                    code: 'GLG',
                    name: 'Glasgow',
                },
                {
                    code: 'GLS',
                    name: 'Gloucestershire',
                },
                {
                    code: 'LND',
                    name: 'Greater London',
                },
                {
                    code: 'MAN',
                    name: 'Greater Manchester',
                },
                {
                    code: 'GSY',
                    name: 'Guernsey',
                },
                {
                    code: 'GWN',
                    name: 'Gwynedd',
                },
                {
                    code: 'HAM',
                    name: 'Hampshire',
                },
                {
                    code: 'HEF',
                    name: 'Herefordshire',
                },
                {
                    code: 'HRM',
                    name: 'Herm',
                },
                {
                    code: 'HRT',
                    name: 'Hertfordshire',
                },
                {
                    code: 'HLD',
                    name: 'Highland',
                },
                {
                    code: 'INV',
                    name: 'Inverness-shire',
                },
                {
                    code: 'AGY',
                    name: 'Isle of Anglesey',
                },
                {
                    code: 'IOM',
                    name: 'Isle of Man',
                },
                {
                    code: 'IOW',
                    name: 'Isle of Wight',
                },
                {
                    code: 'JSY',
                    name: 'Jersey',
                },
                {
                    code: 'KEN',
                    name: 'Kent',
                },
                {
                    code: 'KCD',
                    name: 'Kincardineshire',
                },
                {
                    code: 'KKD',
                    name: 'Kirkcudbrightshire',
                },
                {
                    code: 'LAN',
                    name: 'Lancashire',
                },
                {
                    code: 'LRN',
                    name: 'Larne',
                },
                {
                    code: 'LEC',
                    name: 'Leicestershire',
                },
                {
                    code: 'LMV',
                    name: 'Limavady',
                },
                {
                    code: 'LIN',
                    name: 'Lincolnshire',
                },
                {
                    code: 'LBC',
                    name: 'Lisburn and Castlereagh',
                },
                {
                    code: 'MFT',
                    name: 'Magherafelt',
                },
                {
                    code: 'MER',
                    name: 'Merseyside',
                },
                {
                    code: 'MTY',
                    name: 'Merthyr Tydfil',
                },
                {
                    code: 'MLN',
                    name: 'Midlothian',
                },
                {
                    code: 'MON',
                    name: 'Monmouthshire',
                },
                {
                    code: 'MRY',
                    name: 'Morayshire',
                },
                {
                    code: 'MYL',
                    name: 'Moyle',
                },
                {
                    code: 'NAI',
                    name: 'Nairn',
                },
                {
                    code: 'NTL',
                    name: 'Neath Port Talbot',
                },
                {
                    code: 'NWP',
                    name: 'Newport',
                },
                {
                    code: 'NMD',
                    name: 'Newry, Mourne and Down',
                },
                {
                    code: 'NFK',
                    name: 'Norfolk',
                },
                {
                    code: 'AND',
                    name: 'North Down and Ards',
                },
                {
                    code: 'NLK',
                    name: 'North Lanarkshire',
                },
                {
                    code: 'NYK',
                    name: 'North Yorkshire',
                },
                {
                    code: 'NTH',
                    name: 'Northamptonshire',
                },
                {
                    code: 'NBL',
                    name: 'Northumberland',
                },
                {
                    code: 'NTT',
                    name: 'Nottinghamshire',
                },
                {
                    code: 'OMA',
                    name: 'Omagh',
                },
                {
                    code: 'ORK',
                    name: 'Orkney Islands',
                },
                {
                    code: 'OXF',
                    name: 'Oxfordshire',
                },
                {
                    code: 'PEM',
                    name: 'Pembrokeshire',
                },
                {
                    code: 'PKN',
                    name: 'Perth and Kinross',
                },
                {
                    code: 'PER',
                    name: 'Perthshire and Kinross',
                },
                {
                    code: 'POW',
                    name: 'Powys',
                },
                {
                    code: 'RCC',
                    name: 'Redcar and Cleveland',
                },
                {
                    code: 'RFW',
                    name: 'Renfrewshire',
                },
                {
                    code: 'RCT',
                    name: 'Rhondda Cynon Taff',
                },
                {
                    code: 'RUT',
                    name: 'Rutland',
                },
                {
                    code: 'SRK',
                    name: 'Sark',
                },
                {
                    code: 'ZET',
                    name: 'Shetland Islands',
                },
                {
                    code: 'SHR',
                    name: 'Shropshire',
                },
                {
                    code: 'SOM',
                    name: 'Somerset',
                },
                {
                    code: 'SLK',
                    name: 'South Lanarkshire',
                },
                {
                    code: 'SYK',
                    name: 'South Yorkshire',
                },
                {
                    code: 'STS',
                    name: 'Staffordshire',
                },
                {
                    code: 'STG',
                    name: 'Stirlingshire',
                },
                {
                    code: 'STR',
                    name: 'Strabane',
                },
                {
                    code: 'SFK',
                    name: 'Suffolk',
                },
                {
                    code: 'SRY',
                    name: 'Surrey',
                },
                {
                    code: 'SSX',
                    name: 'Sussex',
                },
                {
                    code: 'SUT',
                    name: 'Sutherland',
                },
                {
                    code: 'SWA',
                    name: 'Swansea',
                },
                {
                    code: 'TOF',
                    name: 'Torfaen',
                },
                {
                    code: 'TWR',
                    name: 'Tyne and Wear',
                },
                {
                    code: 'VGL',
                    name: 'Vale of Glamorgan',
                },
                {
                    code: 'WAR',
                    name: 'Warwickshire',
                },
                {
                    code: 'WLN',
                    name: 'West Lothian',
                },
                {
                    code: 'WMD',
                    name: 'West Midlands',
                },
                {
                    code: 'WSX',
                    name: 'West Sussex',
                },
                {
                    code: 'WRY',
                    name: 'West Yorkshire',
                },
                {
                    code: 'ELS',
                    name: 'Western Isles',
                },
                {
                    code: 'WIL',
                    name: 'Wiltshire',
                },
                {
                    code: 'WOR',
                    name: 'Worcestershire',
                },
                {
                    code: 'WRX',
                    name: 'Wrexham',
                },
            ],
        },
        {
            code: 'AF',
            id: 2185,
            name: 'Afghanistan',
            states: [
                {
                    code: 'AF01',
                    name: 'Badakhshan',
                },
                {
                    code: 'AF02',
                    name: 'Badghis',
                },
                {
                    code: 'AF03',
                    name: 'Baghlan',
                },
                {
                    code: 'AF30',
                    name: 'Balkh',
                },
                {
                    code: 'AF05',
                    name: 'Bamian',
                },
                {
                    code: 'AF41',
                    name: 'Daikondi',
                },
                {
                    code: 'AF06',
                    name: 'Farah',
                },
                {
                    code: 'AF07',
                    name: 'Faryab',
                },
                {
                    code: 'AF08',
                    name: 'Ghazni',
                },
                {
                    code: 'AF09',
                    name: 'Ghowr',
                },
                {
                    code: 'AF10',
                    name: 'Helmand',
                },
                {
                    code: 'AF11',
                    name: 'Herat',
                },
                {
                    code: 'AF31',
                    name: 'Jowzjan',
                },
                {
                    code: 'AF13',
                    name: 'Kabul',
                },
                {
                    code: 'AF23',
                    name: 'Kandahar',
                },
                {
                    code: 'AF14',
                    name: 'Kapisa',
                },
                {
                    code: 'AF37',
                    name: 'Khowst',
                },
                {
                    code: 'AF34',
                    name: 'Konar',
                },
                {
                    code: 'AF24',
                    name: 'Kondoz',
                },
                {
                    code: 'AF35',
                    name: 'Laghman',
                },
                {
                    code: 'AF17',
                    name: 'Lowgar',
                },
                {
                    code: 'AF18',
                    name: 'Nangarhar',
                },
                {
                    code: 'AF19',
                    name: 'Nimruz',
                },
                {
                    code: 'AF38',
                    name: 'Nurestan',
                },
                {
                    code: 'AF39',
                    name: 'Oruzgan',
                },
                {
                    code: 'AF36',
                    name: 'Paktia',
                },
                {
                    code: 'AF29',
                    name: 'Paktika',
                },
                {
                    code: 'AF42',
                    name: 'Panjshir',
                },
                {
                    code: 'AF40',
                    name: 'Parvan',
                },
                {
                    code: 'AF32',
                    name: 'Samangan',
                },
                {
                    code: 'AF33',
                    name: 'Sar-e Pol',
                },
                {
                    code: 'AF26',
                    name: 'Takhar',
                },
                {
                    code: 'AF27',
                    name: 'Vardak',
                },
                {
                    code: 'AF28',
                    name: 'Zabol',
                },
            ],
        },
        {
            code: 'AX',
            id: 2407,
            name: 'Åland Islands',
            states: [],
        },
        {
            code: 'AL',
            id: 2186,
            name: 'Albania',
            states: [],
        },
        {
            code: 'DZ',
            id: 2187,
            name: 'Algeria',
            states: [
                {
                    code: 'DZ.AR',
                    name: 'Adrar',
                },
                {
                    code: 'DZ.AD',
                    name: 'Aïn Defla',
                },
                {
                    code: 'DZ.AT',
                    name: 'Aïn Témouchent',
                },
                {
                    code: 'DZ.AL',
                    name: 'Algiers',
                },
                {
                    code: 'DZ.AN',
                    name: 'Annaba',
                },
                {
                    code: 'DZ.BT',
                    name: 'Batna',
                },
                {
                    code: 'DZ.BC',
                    name: 'Béchar',
                },
                {
                    code: 'DZ.BJ',
                    name: 'Béjaïa',
                },
                {
                    code: 'DZ.BS',
                    name: 'Biskra',
                },
                {
                    code: 'DZ.BL',
                    name: 'Blida',
                },
                {
                    code: 'DZ.BB',
                    name: 'Bordj Bou Arréridj',
                },
                {
                    code: 'DZ.BU',
                    name: 'Bouira',
                },
                {
                    code: 'DZ.BM',
                    name: 'Boumerdès',
                },
                {
                    code: 'DZ.CH',
                    name: 'Chlef',
                },
                {
                    code: 'DZ.CO',
                    name: 'Constantine',
                },
                {
                    code: 'DZ.DJ',
                    name: 'Djelfa',
                },
                {
                    code: 'DZ.EB',
                    name: 'El Bayadh',
                },
                {
                    code: 'DZ.EO',
                    name: 'El Oued',
                },
                {
                    code: 'DZ.ET',
                    name: 'El Tarf',
                },
                {
                    code: 'DZ.GR',
                    name: 'Ghardaïa',
                },
                {
                    code: 'DZ.GL',
                    name: 'Guelma',
                },
                {
                    code: 'DZ.IL',
                    name: 'Illizi',
                },
                {
                    code: 'DZ.JJ',
                    name: 'Jijel',
                },
                {
                    code: 'DZ.KH',
                    name: 'Khenchela',
                },
                {
                    code: 'DZ.LG',
                    name: 'Laghouat',
                },
                {
                    code: 'DZ.MC',
                    name: 'Mascara',
                },
                {
                    code: 'DZ.MD',
                    name: 'Médéa',
                },
                {
                    code: 'DZ.ML',
                    name: 'Mila',
                },
                {
                    code: 'DZ.MG',
                    name: 'Mostaganem',
                },
                {
                    code: 'DZ.MS',
                    name: 'Msila',
                },
                {
                    code: 'DZ.NA',
                    name: 'Naama',
                },
                {
                    code: 'DZ.OR',
                    name: 'Oran',
                },
                {
                    code: 'DZ.OG',
                    name: 'Ouargla',
                },
                {
                    code: 'DZ.OB',
                    name: 'Oum el Bouaghi',
                },
                {
                    code: 'DZ.RE',
                    name: 'Relizane',
                },
                {
                    code: 'DZ.SD',
                    name: 'Saïda',
                },
                {
                    code: 'DZ.SF',
                    name: 'Sétif',
                },
                {
                    code: 'DZ.SB',
                    name: 'Sidi Bel Abbès',
                },
                {
                    code: 'DZ.SK',
                    name: 'Skikda',
                },
                {
                    code: 'DZ.SA',
                    name: 'Souk Ahras',
                },
                {
                    code: 'DZ.TM',
                    name: 'Tamanrasset',
                },
                {
                    code: 'DZ.TB',
                    name: 'Tébessa',
                },
                {
                    code: 'DZ.TR',
                    name: 'Tiaret',
                },
                {
                    code: 'DZ.TN',
                    name: 'Tindouf',
                },
                {
                    code: 'DZ.TP',
                    name: 'Tipaza',
                },
                {
                    code: 'DZ.TS',
                    name: 'Tissemsilt',
                },
                {
                    code: 'DZ.TO',
                    name: 'Tizi Ouzou',
                },
                {
                    code: 'DZ.TL',
                    name: 'Tlemcen',
                },
            ],
        },
        {
            code: 'AS',
            id: 2408,
            name: 'American Samoa',
            states: [],
        },
        {
            code: 'AD',
            id: 2188,
            name: 'Andorra',
            states: [],
        },
        {
            code: 'AO',
            id: 2189,
            name: 'Angola',
            states: [
                {
                    code: 'AO19',
                    name: 'Bengo',
                },
                {
                    code: 'AO01',
                    name: 'Benguela',
                },
                {
                    code: 'AO02',
                    name: 'Bié',
                },
                {
                    code: 'AO03',
                    name: 'Cabinda',
                },
                {
                    code: 'AO04',
                    name: 'Cuando Cubango',
                },
                {
                    code: 'AO05',
                    name: 'Cuanza Norte',
                },
                {
                    code: 'AO06',
                    name: 'Cuanza Sul',
                },
                {
                    code: 'AO07',
                    name: 'Cunene',
                },
                {
                    code: 'AO08',
                    name: 'Huambo',
                },
                {
                    code: 'AO09',
                    name: 'Huíla',
                },
                {
                    code: 'AO20',
                    name: 'Luanda',
                },
                {
                    code: 'AO17',
                    name: 'Lunda Norte',
                },
                {
                    code: 'AO18',
                    name: 'Lunda Sul',
                },
                {
                    code: 'AO12',
                    name: 'Malanje',
                },
                {
                    code: 'AO14',
                    name: 'Moxico',
                },
                {
                    code: 'AO13',
                    name: 'Namibe',
                },
                {
                    code: 'AO15',
                    name: 'Uíge',
                },
                {
                    code: 'AO16',
                    name: 'Zaire',
                },
            ],
        },
        {
            code: 'AI',
            id: 2409,
            name: 'Anguilla',
            states: [],
        },
        {
            code: 'AQ',
            id: 2190,
            name: 'Antarctica',
            states: [],
        },
        {
            code: 'AG',
            id: 2191,
            name: 'Antigua and Barbuda',
            states: [],
        },
        {
            code: 'AR',
            id: 2192,
            name: 'Argentina',
            states: [
                {
                    code: 'AR01',
                    name: 'Buenos Aires',
                },
                {
                    code: 'AR02',
                    name: 'Catamarca',
                },
                {
                    code: 'AR03',
                    name: 'Chaco',
                },
                {
                    code: 'AR04',
                    name: 'Chubut',
                },
                {
                    code: 'AR07',
                    name: 'Ciudad de Buenos Aires',
                },
                {
                    code: 'AR05',
                    name: 'Córdoba',
                },
                {
                    code: 'AR06',
                    name: 'Corrientes',
                },
                {
                    code: 'AR08',
                    name: 'Entre Ríos',
                },
                {
                    code: 'AR09',
                    name: 'Formosa',
                },
                {
                    code: 'AR10',
                    name: 'Jujuy',
                },
                {
                    code: 'AR11',
                    name: 'La Pampa',
                },
                {
                    code: 'AR12',
                    name: 'La Rioja',
                },
                {
                    code: 'AR13',
                    name: 'Mendoza',
                },
                {
                    code: 'AR14',
                    name: 'Misiones',
                },
                {
                    code: 'AR15',
                    name: 'Neuquén',
                },
                {
                    code: 'AR16',
                    name: 'Río Negro',
                },
                {
                    code: 'AR17',
                    name: 'Salta',
                },
                {
                    code: 'AR18',
                    name: 'San Juan',
                },
                {
                    code: 'AR19',
                    name: 'San Luis',
                },
                {
                    code: 'AR20',
                    name: 'Santa Cruz',
                },
                {
                    code: 'AR21',
                    name: 'Santa Fe',
                },
                {
                    code: 'AR22',
                    name: 'Santiago del Estero',
                },
                {
                    code: 'AR23',
                    name: 'Tierra del Fuego',
                },
                {
                    code: 'AR24',
                    name: 'Tucumán',
                },
            ],
        },
        {
            code: 'AM',
            id: 2193,
            name: 'Armenia',
            states: [],
        },
        {
            code: 'AB',
            id: 2373,
            name: 'Aruba',
            states: [
                {
                    code: 'AW.AA',
                    name: 'Aruba',
                },
            ],
        },
        {
            code: 'AU',
            id: 2194,
            name: 'Australia',
            states: [
                {
                    code: 'ACT',
                    name: 'Australian Capital Territory',
                },
                {
                    code: 'NSW',
                    name: 'New South Wales',
                },
                {
                    code: 'NT',
                    name: 'Northern Territory',
                },
                {
                    code: 'QLD',
                    name: 'Queensland',
                },
                {
                    code: 'SA',
                    name: 'South Australia',
                },
                {
                    code: 'TAS',
                    name: 'Tasmania',
                },
                {
                    code: 'VIC',
                    name: 'Victoria',
                },
                {
                    code: 'WA',
                    name: 'Western Australia',
                },
            ],
        },
        {
            code: 'AT',
            id: 2195,
            name: 'Austria',
            states: [
                {
                    code: 'AU01',
                    name: 'Burgenland',
                },
                {
                    code: 'AU02',
                    name: 'Carinthia',
                },
                {
                    code: 'AU03',
                    name: 'Lower Austria',
                },
                {
                    code: 'AU05',
                    name: 'Salzburg',
                },
                {
                    code: 'AU06',
                    name: 'Styria',
                },
                {
                    code: 'AU07',
                    name: 'Tyrol',
                },
                {
                    code: 'AU04',
                    name: 'Upper Austria',
                },
                {
                    code: 'AU09',
                    name: 'Vienna',
                },
                {
                    code: 'AU08',
                    name: 'Vorarlberg',
                },
            ],
        },
        {
            code: 'AZ',
            id: 2196,
            name: 'Azerbaijan',
            states: [
                {
                    code: 'AZ-ABS',
                    name: 'Absheron',
                },
                {
                    code: 'AZ-AGM',
                    name: 'Aghdam',
                },
                {
                    code: 'AZ-AGS',
                    name: 'Aghdash',
                },
                {
                    code: 'AZ-AGC',
                    name: 'Aghjabedi',
                },
                {
                    code: 'AZ-AGA',
                    name: 'Aghstafa',
                },
                {
                    code: 'AZ-AGU',
                    name: 'Aghsu',
                },
                {
                    code: 'AZ-AB',
                    name: 'Ali-Bairamly',
                },
                {
                    code: 'AZ-AST',
                    name: 'Astara',
                },
                {
                    code: 'AZ-BAB',
                    name: 'Babek',
                },
                {
                    code: 'AZ-BA',
                    name: 'Baku',
                },
                {
                    code: 'AZ-BAL',
                    name: 'Balaken',
                },
                {
                    code: 'AZ-BAR',
                    name: 'Barda',
                },
                {
                    code: 'AZ-BEY',
                    name: 'Beilagan',
                },
                {
                    code: 'AZ-BIL',
                    name: 'Bilasuvar',
                },
                {
                    code: 'AZ-DAS',
                    name: 'Dashkesan',
                },
                {
                    code: 'AZ-DAV',
                    name: 'Devechi',
                },
                {
                    code: 'AZ-FUZ',
                    name: 'Fizuli',
                },
                {
                    code: 'AZ-QAB',
                    name: 'Gabala',
                },
                {
                    code: 'AZ-GAD',
                    name: 'Gadabey',
                },
                {
                    code: 'AZ-QAX',
                    name: 'Gakh',
                },
                {
                    code: 'AZ-GA',
                    name: 'Ganja',
                },
                {
                    code: 'AZ-QAZ',
                    name: 'Gazakh',
                },
                {
                    code: 'AZ-GOR',
                    name: 'Geranboy',
                },
                {
                    code: 'AZ-QOB',
                    name: 'Gobustan',
                },
                {
                    code: 'AZ-GOY',
                    name: 'Goychay',
                },
                {
                    code: 'AZ-QBA',
                    name: 'Guba',
                },
                {
                    code: 'AZ-QBI',
                    name: 'Gubadly',
                },
                {
                    code: 'AZ-QUS',
                    name: 'Gusar',
                },
                {
                    code: 'AZ-HAC',
                    name: 'Hacuqabul',
                },
                {
                    code: 'AZ-IMI',
                    name: 'Imishli',
                },
                {
                    code: 'AZ-ISM',
                    name: 'Ismailly',
                },
                {
                    code: 'AZ-CAL',
                    name: 'Jalilabad',
                },
                {
                    code: 'AZ-CAB',
                    name: 'Jebrail',
                },
                {
                    code: 'AZ-CUL',
                    name: 'Julfa',
                },
                {
                    code: 'AZ-KAL',
                    name: 'Kelbajar',
                },
                {
                    code: 'AZ-XAC',
                    name: 'Khachmaz',
                },
                {
                    code: 'AZ-XA',
                    name: 'Khankendy',
                },
                {
                    code: 'AZ-XAN',
                    name: 'Khanlar',
                },
                {
                    code: 'AZ-XCI',
                    name: 'Khojaly',
                },
                {
                    code: 'AZ-XVD',
                    name: 'Khojavend',
                },
                {
                    code: 'AZ-XIZ',
                    name: 'Khyzy',
                },
                {
                    code: 'AZ-KUR',
                    name: 'Kyurdamir',
                },
                {
                    code: 'AZ-LAC',
                    name: 'Lachin',
                },
                {
                    code: 'AZ-LAN',
                    name: 'Lenkaran',
                },
                {
                    code: 'AZ-LA',
                    name: 'Lenkaran',
                },
                {
                    code: 'AZ-LER',
                    name: 'Lerik',
                },
                {
                    code: 'AZ-MAS',
                    name: 'Masally',
                },
                {
                    code: 'AZ-MI',
                    name: 'Mingechevir',
                },
                {
                    code: 'AZ-NA',
                    name: 'Naftalan',
                },
                {
                    code: 'AZ-NX',
                    name: 'Nakhchivan',
                },
                {
                    code: 'AZ-NEF',
                    name: 'Neftchala',
                },
                {
                    code: 'AZ-OGU',
                    name: 'Oghuz',
                },
                {
                    code: 'AZ-ORD',
                    name: 'Ordubad',
                },
                {
                    code: 'AZ-SAT',
                    name: 'Saatly',
                },
                {
                    code: 'AZ-SAB',
                    name: 'Sabirabad',
                },
                {
                    code: 'AZ-SAL',
                    name: 'Salyan',
                },
                {
                    code: 'AZ-SMX',
                    name: 'Samuh',
                },
                {
                    code: 'AZ-SAD',
                    name: 'Sedarak',
                },
                {
                    code: 'AZ-SAH',
                    name: 'Shahbuz',
                },
                {
                    code: 'AZ-SMI',
                    name: 'Shamakhy',
                },
                {
                    code: 'AZ-SKR',
                    name: 'Shamkir',
                },
                {
                    code: 'AZ-SAK',
                    name: 'Sheki',
                },
                {
                    code: 'AZ-SA',
                    name: 'Sheki',
                },
                {
                    code: 'AZ-SAR',
                    name: 'Sherur',
                },
                {
                    code: 'AZ-SS',
                    name: 'Shusha',
                },
                {
                    code: 'AZ-SUS',
                    name: 'Shusha',
                },
                {
                    code: 'AZ-SIY',
                    name: 'Siazan',
                },
                {
                    code: 'AZ-SM',
                    name: 'Sumgayit',
                },
                {
                    code: 'AZ-TAR',
                    name: 'Terter',
                },
                {
                    code: 'AZ-TOV',
                    name: 'Tovuz',
                },
                {
                    code: 'AZ-UCA',
                    name: 'Ujar',
                },
                {
                    code: 'AZ-YAR',
                    name: 'Yardymly',
                },
                {
                    code: 'AZ-YE',
                    name: 'Yevlakh',
                },
                {
                    code: 'AZ-YEV',
                    name: 'Yevlakh',
                },
                {
                    code: 'AZ-ZAQ',
                    name: 'Zagatala',
                },
                {
                    code: 'AZ-ZAN',
                    name: 'Zangilan',
                },
                {
                    code: 'AZ-ZAR',
                    name: 'Zerdab',
                },
            ],
        },
        {
            code: 'BS',
            id: 2197,
            name: 'Bahamas',
            states: [
                {
                    code: 'BF24',
                    name: 'Acklins',
                },
                {
                    code: 'BF32',
                    name: 'Berry Islands',
                },
                {
                    code: 'BF05',
                    name: 'Bimini',
                },
                {
                    code: 'BF36',
                    name: 'Black Point',
                },
                {
                    code: 'BF06',
                    name: 'Cat Island',
                },
                {
                    code: 'BF37',
                    name: 'Central Abaco',
                },
                {
                    code: 'BF38',
                    name: 'Central Andros',
                },
                {
                    code: 'BF39',
                    name: 'Central Eleuthera',
                },
                {
                    code: 'BF25',
                    name: 'City of Freeport',
                },
                {
                    code: 'BF40',
                    name: 'Crooked Island',
                },
                {
                    code: 'BF41',
                    name: 'East Grand Bahama',
                },
                {
                    code: 'BF10',
                    name: 'Exuma',
                },
                {
                    code: 'BF42',
                    name: 'Grand Cay',
                },
                {
                    code: 'BS.GT\t',
                    name: 'Green Turtle Cay',
                },
                {
                    code: 'BF22',
                    name: 'Harbour Island',
                },
                {
                    code: 'BF43',
                    name: 'Hope Town',
                },
                {
                    code: 'BF13',
                    name: 'Inagua',
                },
                {
                    code: 'BF15',
                    name: 'Long Island',
                },
                {
                    code: 'BF44',
                    name: 'Mangrove Cay',
                },
                {
                    code: 'BF16',
                    name: 'Mayaguana',
                },
                {
                    code: 'BF45',
                    name: "Moore's Island",
                },
                {
                    code: 'BS.NW',
                    name: 'New Providence',
                },
                {
                    code: 'BF46',
                    name: 'North Abaco',
                },
                {
                    code: 'BF47',
                    name: 'North Andros',
                },
                {
                    code: 'BF48',
                    name: 'North Eleuthera',
                },
                {
                    code: 'BF18',
                    name: 'Ragged Island',
                },
                {
                    code: 'BF49',
                    name: 'Rum Cay',
                },
                {
                    code: 'BF35',
                    name: 'San Salvador',
                },
                {
                    code: 'BF50',
                    name: 'South Abaco',
                },
                {
                    code: 'BF51',
                    name: 'South Andros',
                },
                {
                    code: 'BF52',
                    name: 'South Eleuthera',
                },
                {
                    code: 'BF53',
                    name: 'Spanish Wells',
                },
                {
                    code: 'BF54',
                    name: 'West Grand Bahama',
                },
            ],
        },
        {
            code: 'BH',
            id: 2198,
            name: 'Bahrain',
            states: [
                {
                    code: 'BA16',
                    name: 'Capital',
                },
                {
                    code: 'BA19',
                    name: 'Central',
                },
                {
                    code: 'BA15',
                    name: 'Muharraq',
                },
                {
                    code: 'BA18',
                    name: 'Northern',
                },
                {
                    code: 'BA17',
                    name: 'Southern',
                },
            ],
        },
        {
            code: 'BD',
            id: 2199,
            name: 'Bangladesh',
            states: [
                {
                    code: 'BG85',
                    name: 'Barisal',
                },
                {
                    code: 'BG84',
                    name: 'Chittagong',
                },
                {
                    code: 'BG81',
                    name: 'Dhaka',
                },
                {
                    code: 'BG82',
                    name: 'Khulna',
                },
                {
                    code: 'BG81',
                    name: 'Mymensingh',
                },
                {
                    code: 'BG83',
                    name: 'Rajshahi',
                },
                {
                    code: 'BG87',
                    name: 'Rangpur',
                },
                {
                    code: 'BG86',
                    name: 'Sylhet',
                },
            ],
        },
        {
            code: 'BB',
            id: 2200,
            name: 'Barbados',
            states: [
                {
                    code: 'BB01',
                    name: 'Christ Church',
                },
                {
                    code: 'BB02',
                    name: 'Saint Andrew',
                },
                {
                    code: 'BB03',
                    name: 'Saint George',
                },
                {
                    code: 'BB04',
                    name: 'Saint James',
                },
                {
                    code: 'BB05',
                    name: 'Saint John',
                },
                {
                    code: 'BB06',
                    name: 'Saint Joseph',
                },
                {
                    code: 'BB07',
                    name: 'Saint Lucy',
                },
                {
                    code: 'BB08',
                    name: 'Saint Michael',
                },
                {
                    code: 'BB09',
                    name: 'Saint Peter',
                },
                {
                    code: 'BB10',
                    name: 'Saint Philip',
                },
                {
                    code: 'BB11',
                    name: 'Saint Thomas',
                },
            ],
        },
        {
            code: 'BY',
            id: 2201,
            name: 'Belarus',
            states: [
                {
                    code: 'BO01',
                    name: 'Brest',
                },
                {
                    code: 'BO02',
                    name: 'Gomel',
                },
                {
                    code: 'BO03',
                    name: 'Grodno',
                },
                {
                    code: 'BO05',
                    name: 'Minsk',
                },
                {
                    code: 'BO04',
                    name: 'Minsk City',
                },
                {
                    code: 'BO06',
                    name: 'Mogilev',
                },
                {
                    code: 'BO07',
                    name: 'Vitebsk',
                },
            ],
        },
        {
            code: 'BE',
            id: 2202,
            name: 'Belgium',
            states: [
                {
                    code: 'BE01',
                    name: 'Antwerpen Province',
                },
                {
                    code: 'BE11',
                    name: 'Brussels-Capital Region',
                },
                {
                    code: 'BE12',
                    name: 'Flemish Brabant Province',
                },
                {
                    code: 'BE03',
                    name: 'Hainaut Province',
                },
                {
                    code: 'BE04',
                    name: 'Liege Province',
                },
                {
                    code: 'BE05',
                    name: 'Limburg Province',
                },
                {
                    code: 'BE06',
                    name: 'Luxembourg Province',
                },
                {
                    code: 'BE07',
                    name: 'Namur Province',
                },
                {
                    code: 'BE08',
                    name: 'Oost-Vlaanderen Province',
                },
                {
                    code: 'BE10',
                    name: 'Walloon Brabant Province',
                },
                {
                    code: 'BE09',
                    name: 'West-Vlaanderen Province',
                },
            ],
        },
        {
            code: 'BZ',
            id: 2203,
            name: 'Belize',
            states: [],
        },
        {
            code: 'BJ',
            id: 2204,
            name: 'Benin',
            states: [
                {
                    code: 'BN07',
                    name: 'Alibori',
                },
                {
                    code: 'BN08',
                    name: 'Atacora',
                },
                {
                    code: 'BN09',
                    name: 'Atlantique',
                },
                {
                    code: 'BN10',
                    name: 'Borgou',
                },
                {
                    code: 'BN11',
                    name: 'Collines',
                },
                {
                    code: 'BN12',
                    name: 'Couffo',
                },
                {
                    code: 'BN13',
                    name: 'Donga',
                },
                {
                    code: 'BN14',
                    name: 'Littoral',
                },
                {
                    code: 'BN15',
                    name: 'Mono',
                },
                {
                    code: 'BN16',
                    name: 'Ouémé',
                },
                {
                    code: 'BN17',
                    name: 'Plateau',
                },
                {
                    code: 'BN18',
                    name: 'Zou',
                },
            ],
        },
        {
            code: 'BU',
            id: 2372,
            name: 'Bermuda',
            states: [
                {
                    code: 'BM.BD',
                    name: 'Bermuda',
                },
                {
                    code: 'BD01',
                    name: 'Devonshire',
                },
                {
                    code: 'BD03',
                    name: 'Hamilton municipality',
                },
                {
                    code: 'BD02',
                    name: 'Hamilton',
                },
                {
                    code: 'BD04',
                    name: 'Paget',
                },
                {
                    code: 'BD05',
                    name: 'Pembroke',
                },
                {
                    code: 'BD06',
                    name: 'Saint George municipality',
                },
                {
                    code: 'BD07',
                    name: "Saint George's",
                },
                {
                    code: 'BD08',
                    name: 'Sandys',
                },
                {
                    code: 'BD09',
                    name: 'Smiths',
                },
                {
                    code: 'BD10',
                    name: 'Southampton',
                },
                {
                    code: 'BD11',
                    name: 'Warwick',
                },
            ],
        },
        {
            code: 'BT',
            id: 2205,
            name: 'Bhutan',
            states: [],
        },
        {
            code: 'BO',
            id: 2206,
            name: 'Bolivia; Plurinational State',
            states: [
                {
                    code: 'BL01',
                    name: 'Chuquisaca',
                },
                {
                    code: 'BL02',
                    name: 'Cochabamba',
                },
                {
                    code: 'BL03',
                    name: 'El Beni',
                },
                {
                    code: 'BL04',
                    name: 'La Paz',
                },
                {
                    code: 'BL05',
                    name: 'Oruro',
                },
                {
                    code: 'BL06',
                    name: 'Pando',
                },
                {
                    code: 'BL07',
                    name: 'Potosí',
                },
                {
                    code: 'BL08',
                    name: 'Santa Cruz',
                },
                {
                    code: 'BL09',
                    name: 'Tarija',
                },
            ],
        },
        {
            code: 'BQ',
            id: 2449,
            name: 'Bonaire',
            states: [
                {
                    code: 'BQ.BO',
                    name: 'Bonaire',
                },
                {
                    code: 'BQ.SB',
                    name: 'Saba',
                },
                {
                    code: 'BQ.SE',
                    name: 'Sint Eustatius',
                },
            ],
        },
        {
            code: 'BA',
            id: 2207,
            name: 'Bosnia and Herzegovina',
            states: [
                {
                    code: 'BA-05',
                    name: 'Bosansko-podrinjski kanton',
                },
                {
                    code: 'BA-BRC',
                    name: 'Brcko distrikt',
                },
                {
                    code: 'BA-BIH',
                    name: 'Federacija Bosna i Hercegovina',
                },
                {
                    code: 'BA-07',
                    name: 'Hercegovacko-neretvanski kanton',
                },
                {
                    code: 'BA-09',
                    name: 'Kanton Sarajevo',
                },
                {
                    code: 'BA-10',
                    name: 'Livanjski kanton',
                },
                {
                    code: 'BA-02',
                    name: 'Posavski kanton',
                },
                {
                    code: 'BA-SRP',
                    name: 'Republika Srpska',
                },
                {
                    code: 'BA-06',
                    name: 'Srednjobosanski kanton',
                },
                {
                    code: 'BA-03',
                    name: 'Tuzlanski kanton',
                },
                {
                    code: 'BA-01',
                    name: 'Unsko-sanski kanton',
                },
                {
                    code: 'BA-08',
                    name: 'Zapadnohercegovacki kanton',
                },
                {
                    code: 'BA-04',
                    name: 'Zenicko-dobojski kanton',
                },
            ],
        },
        {
            code: 'BW',
            id: 2208,
            name: 'Botswana',
            states: [
                {
                    code: 'BC01',
                    name: 'Central',
                },
                {
                    code: 'BC12',
                    name: 'Chobe',
                },
                {
                    code: 'BC13',
                    name: 'Francistown',
                },
                {
                    code: 'BC14',
                    name: 'Gaborone',
                },
                {
                    code: 'BC03',
                    name: 'Ghanzi',
                },
                {
                    code: 'BC15',
                    name: 'Jwaneng',
                },
                {
                    code: 'BC04',
                    name: 'Kgalagadi',
                },
                {
                    code: 'BC05',
                    name: 'Kgatleng',
                },
                {
                    code: 'BC06',
                    name: 'Kweneng',
                },
                {
                    code: 'BC16',
                    name: 'Lobatse',
                },
                {
                    code: 'BC08',
                    name: 'North-East',
                },
                {
                    code: 'BC11',
                    name: 'North-West',
                },
                {
                    code: 'BC17',
                    name: 'Selibe Phikwe',
                },
                {
                    code: 'BC09',
                    name: 'South East',
                },
                {
                    code: 'BC10',
                    name: 'Southern',
                },
                {
                    code: 'BC18',
                    name: 'Sowa Town',
                },
            ],
        },
        {
            code: 'BV',
            id: 2410,
            name: 'Bouvet Island',
            states: [],
        },
        {
            code: 'BR',
            id: 2209,
            name: 'Brazil',
            states: [
                {
                    code: 'AC',
                    name: 'Acre',
                },
                {
                    code: 'AL',
                    name: 'Alagoas',
                },
                {
                    code: 'AP',
                    name: 'Amapá',
                },
                {
                    code: 'AM',
                    name: 'Amazonas',
                },
                {
                    code: 'BA',
                    name: 'Bahia',
                },
                {
                    code: 'CE',
                    name: 'Ceará',
                },
                {
                    code: 'DF',
                    name: 'Distrito Federal',
                },
                {
                    code: 'ES',
                    name: 'Espírito Santo',
                },
                {
                    code: 'GO',
                    name: 'Goiás',
                },
                {
                    code: 'MA',
                    name: 'Maranhão',
                },
                {
                    code: 'MT',
                    name: 'Mato Grosso',
                },
                {
                    code: 'MS',
                    name: 'Mato Grosso do Sul',
                },
                {
                    code: 'MG',
                    name: 'Minas Gerais',
                },
                {
                    code: 'PA',
                    name: 'Pará',
                },
                {
                    code: 'PR',
                    name: 'Paraná',
                },
                {
                    code: 'PB',
                    name: 'Paraíba',
                },
                {
                    code: 'PE',
                    name: 'Pernambuco',
                },
                {
                    code: 'PI',
                    name: 'Piauí',
                },
                {
                    code: 'RN',
                    name: 'Rio Grande do Norte',
                },
                {
                    code: 'RS',
                    name: 'Rio Grande do Sul',
                },
                {
                    code: 'RJ',
                    name: 'Rio de Janeiro',
                },
                {
                    code: 'RO',
                    name: 'Rondônia',
                },
                {
                    code: 'RR',
                    name: 'Roraima',
                },
                {
                    code: 'SC',
                    name: 'Santa Catarina',
                },
                {
                    code: 'SP',
                    name: 'São Paulo',
                },
                {
                    code: 'SE',
                    name: 'Sergipe',
                },
                {
                    code: 'TO',
                    name: 'Tocantins',
                },
            ],
        },
        {
            code: 'IO',
            id: 2411,
            name: 'British Indian Ocean Territory',
            states: [],
        },
        {
            code: 'BN',
            id: 2210,
            name: 'Brunei Darussalam',
            states: [
                {
                    code: 'BX01',
                    name: 'Amo',
                },
                {
                    code: 'BX02',
                    name: 'Bandar Seri Begawan',
                },
                {
                    code: 'BX03',
                    name: 'Bangar',
                },
                {
                    code: 'BX04',
                    name: 'Batu Apoi',
                },
                {
                    code: 'BX05',
                    name: 'Berakas',
                },
                {
                    code: 'BX06',
                    name: 'Bokok',
                },
                {
                    code: 'BX07',
                    name: 'Bukit Sawat',
                },
                {
                    code: 'BX08',
                    name: 'Burong Pinggai Ayer',
                },
                {
                    code: 'BX09',
                    name: 'Gadong',
                },
                {
                    code: 'BX10',
                    name: 'Keriam',
                },
                {
                    code: 'BX11',
                    name: 'Kianggeh',
                },
                {
                    code: 'BX12',
                    name: 'Kilanas',
                },
                {
                    code: 'BX13',
                    name: 'Kiudang',
                },
                {
                    code: 'BX14',
                    name: 'Kota Batu',
                },
                {
                    code: 'BX15',
                    name: 'Kuala Balai',
                },
                {
                    code: 'BX16',
                    name: 'Kuala Belait',
                },
                {
                    code: 'BX17',
                    name: 'Labi',
                },
                {
                    code: 'BX18',
                    name: 'Labu',
                },
                {
                    code: 'BX19',
                    name: 'Lamunin',
                },
                {
                    code: 'BX20',
                    name: 'Liang',
                },
                {
                    code: 'BX21',
                    name: 'Lumapas',
                },
                {
                    code: 'BX22',
                    name: 'Melilas',
                },
                {
                    code: 'BX23',
                    name: 'Mentiri',
                },
                {
                    code: 'BX24',
                    name: 'Pekan Tutong',
                },
                {
                    code: 'BX25',
                    name: 'Pengkalan Batu',
                },
                {
                    code: 'BX26',
                    name: 'Peramu',
                },
                {
                    code: 'BX27',
                    name: 'Rambai',
                },
                {
                    code: 'BX28',
                    name: 'Saba',
                },
                {
                    code: 'BX29',
                    name: 'Sengkurong',
                },
                {
                    code: 'BX30',
                    name: 'Serasa',
                },
                {
                    code: 'BX31',
                    name: 'Seria',
                },
                {
                    code: 'BX32',
                    name: 'Sukang',
                },
                {
                    code: 'BX33',
                    name: 'Sungai Kebun',
                },
                {
                    code: 'BX34',
                    name: 'Sungai Kedayan',
                },
                {
                    code: 'BX35',
                    name: 'Tamoi',
                },
                {
                    code: 'BX36',
                    name: 'Tanjong Maya',
                },
                {
                    code: 'BX37',
                    name: 'Telisai',
                },
                {
                    code: 'BX38',
                    name: 'Ukong',
                },
            ],
        },
        {
            code: 'BG',
            id: 2211,
            name: 'Bulgaria',
            states: [
                {
                    code: 'BU38',
                    name: 'Blagoevgrad',
                },
                {
                    code: 'BU39',
                    name: 'Burgas',
                },
                {
                    code: 'BU40',
                    name: 'Dobrich',
                },
                {
                    code: 'BU41',
                    name: 'Gabrovo',
                },
                {
                    code: 'BU42',
                    name: 'Grad Sofiya',
                },
                {
                    code: 'BU43',
                    name: 'Khaskovo',
                },
                {
                    code: 'BU44',
                    name: 'Kurdzhali',
                },
                {
                    code: 'BU45',
                    name: 'Kyustendil',
                },
                {
                    code: 'BU46',
                    name: 'Lovech',
                },
                {
                    code: 'BU47',
                    name: 'Montana',
                },
                {
                    code: 'BU48',
                    name: 'Pazardzhik',
                },
                {
                    code: 'BU49',
                    name: 'Pernik',
                },
                {
                    code: 'BU50',
                    name: 'Pleven',
                },
                {
                    code: 'BU51',
                    name: 'Plovdiv',
                },
                {
                    code: 'BU52',
                    name: 'Razgrad',
                },
                {
                    code: 'BU53',
                    name: 'Ruse',
                },
                {
                    code: 'BU54',
                    name: 'Shumen',
                },
                {
                    code: 'BU55',
                    name: 'Silistra',
                },
                {
                    code: 'BU56',
                    name: 'Sliven',
                },
                {
                    code: 'BU57',
                    name: 'Smolyan',
                },
                {
                    code: 'BU58',
                    name: 'Sofiya',
                },
                {
                    code: 'BU59',
                    name: 'Stara Zagora',
                },
                {
                    code: 'BU60',
                    name: 'Turgovishte',
                },
                {
                    code: 'BU61',
                    name: 'Varna',
                },
                {
                    code: 'BU62',
                    name: 'Veliko Turnovo',
                },
                {
                    code: 'BU63',
                    name: 'Vidin',
                },
                {
                    code: 'BU64',
                    name: 'Vratsa',
                },
                {
                    code: 'BU65',
                    name: 'Yambol',
                },
            ],
        },
        {
            code: 'BF',
            id: 2212,
            name: 'Burkina Faso',
            states: [
                {
                    code: 'UV79',
                    name: 'Boucle du Mouhoun',
                },
                {
                    code: 'UV80',
                    name: 'Cascades',
                },
                {
                    code: 'UV82',
                    name: 'Centre Est',
                },
                {
                    code: 'UV83',
                    name: 'Centre Nord',
                },
                {
                    code: 'UV84',
                    name: 'Centre Ouest',
                },
                {
                    code: 'UV81',
                    name: 'Centre',
                },
                {
                    code: 'UV85',
                    name: 'Centre Sud',
                },
                {
                    code: 'UV86',
                    name: 'Est',
                },
                {
                    code: 'UV87',
                    name: 'Hauts Bassins',
                },
                {
                    code: 'UV88',
                    name: 'Nord',
                },
                {
                    code: 'UV89',
                    name: 'Plateau Central',
                },
                {
                    code: 'UV90',
                    name: 'Sahel',
                },
                {
                    code: 'UV91',
                    name: 'Sud-Ouest',
                },
            ],
        },
        {
            code: 'BM',
            id: 2385,
            name: 'Burma',
            states: [
                {
                    code: 'BM03',
                    name: 'Ayeyarwady',
                },
                {
                    code: 'BM16',
                    name: 'Bago',
                },
                {
                    code: 'BM02',
                    name: 'Chin',
                },
                {
                    code: 'BM04',
                    name: 'Kachin',
                },
                {
                    code: 'BM06',
                    name: 'Kayah',
                },
                {
                    code: 'BM05',
                    name: 'Kayin',
                },
                {
                    code: 'BM15',
                    name: 'Magway',
                },
                {
                    code: 'BM08',
                    name: 'Mandalay',
                },
                {
                    code: 'BM13',
                    name: 'Mon',
                },
                {
                    code: 'BM18',
                    name: 'Naypyidaw',
                },
                {
                    code: 'BM01',
                    name: 'Rakhine',
                },
                {
                    code: 'BM10',
                    name: 'Sagaing',
                },
                {
                    code: 'BM11',
                    name: 'Shan',
                },
                {
                    code: 'BM12',
                    name: 'Tanintharyi',
                },
                {
                    code: 'BM17',
                    name: 'Yangon',
                },
            ],
        },
        {
            code: 'BI',
            id: 2213,
            name: 'Burundi',
            states: [],
        },
        {
            code: 'KH',
            id: 2214,
            name: 'Cambodia',
            states: [
                {
                    code: 'CB25',
                    name: 'Bântéay Méanchey',
                },
                {
                    code: 'CB29',
                    name: 'Batdâmbâng',
                },
                {
                    code: 'CB02',
                    name: 'Kâmpóng Cham',
                },
                {
                    code: 'CB03',
                    name: 'Kâmpóng Chhnang',
                },
                {
                    code: 'CB04',
                    name: 'Kâmpóng Spœ',
                },
                {
                    code: 'CB05',
                    name: 'Kâmpóng Thum',
                },
                {
                    code: 'CB21',
                    name: 'Kâmpôt',
                },
                {
                    code: 'CB07',
                    name: 'Kândal',
                },
                {
                    code: 'CB08',
                    name: 'Kaôh Kong',
                },
                {
                    code: 'CB09',
                    name: 'Krâchéh',
                },
                {
                    code: 'CB26',
                    name: 'Krong Keb',
                },
                {
                    code: 'CB30',
                    name: 'Krong Pailin',
                },
                {
                    code: 'CB28',
                    name: 'Krong Preah Sihanouk',
                },
                {
                    code: 'CB10',
                    name: 'Môndól Kiri',
                },
                {
                    code: 'CB27',
                    name: 'Otdâr Méanchey',
                },
                {
                    code: 'CB22',
                    name: 'Phnom Penh',
                },
                {
                    code: 'CB12',
                    name: 'Pouthisat',
                },
                {
                    code: 'CB13',
                    name: 'Preah Vihéar',
                },
                {
                    code: 'CB14',
                    name: 'Prey Vêng',
                },
                {
                    code: 'CB23',
                    name: 'Rôtânôkiri',
                },
                {
                    code: 'CB24',
                    name: 'Siemréab',
                },
                {
                    code: 'CB17',
                    name: 'Stœ?ng Trêng',
                },
                {
                    code: 'CB18',
                    name: 'Svay Rieng',
                },
                {
                    code: 'CB19',
                    name: 'Takêv',
                },
                {
                    code: 'CB31',
                    name: 'Tbong Khmum',
                },
            ],
        },
        {
            code: 'CM',
            id: 2215,
            name: 'Cameroon',
            states: [
                {
                    code: 'CM10',
                    name: 'Adamaoua',
                },
                {
                    code: 'CM11',
                    name: 'Centre',
                },
                {
                    code: 'CM04',
                    name: 'Est',
                },
                {
                    code: 'CM12',
                    name: 'Extrême-Nord',
                },
                {
                    code: 'CM05',
                    name: 'Littoral',
                },
                {
                    code: 'CM07',
                    name: 'Nord-Ouest',
                },
                {
                    code: 'CM13',
                    name: 'Nord',
                },
                {
                    code: 'CM08',
                    name: 'Ouest',
                },
                {
                    code: 'CM09',
                    name: 'Sud-Ouest',
                },
                {
                    code: 'CM14',
                    name: 'Sud',
                },
            ],
        },
        {
            code: 'CA',
            id: 2216,
            name: 'Canada',
            states: [
                {
                    code: 'AB',
                    name: 'Alberta',
                },
                {
                    code: 'BC',
                    name: 'British Columbia',
                },
                {
                    code: 'MB',
                    name: 'Manitoba',
                },
                {
                    code: 'NB',
                    name: 'New Brunswick',
                },
                {
                    code: 'NL',
                    name: 'Newfoundland and Labrador',
                },
                {
                    code: 'NT',
                    name: 'Northwest Territories',
                },
                {
                    code: 'NS',
                    name: 'Nova Scotia',
                },
                {
                    code: 'NU',
                    name: 'Nunavut',
                },
                {
                    code: 'ON',
                    name: 'Ontario',
                },
                {
                    code: 'PE',
                    name: 'Prince Edward Island',
                },
                {
                    code: 'QC',
                    name: 'Quebec',
                },
                {
                    code: 'SK',
                    name: 'Saskatchewan',
                },
                {
                    code: 'YT',
                    name: 'Yukon',
                },
            ],
        },
        {
            code: 'CV',
            id: 2217,
            name: 'Cape Verde',
            states: [],
        },
        {
            code: 'KY',
            id: 2379,
            name: 'Cayman Islands',
            states: [
                {
                    code: 'KY.BT',
                    name: 'Bodden Town',
                },
                {
                    code: 'KY.CJ',
                    name: 'Cayman Islands',
                },
                {
                    code: 'KY.EE',
                    name: 'East End',
                },
                {
                    code: 'KY.GT',
                    name: 'George Town',
                },
                {
                    code: 'KY.NS',
                    name: 'North Side',
                },
                {
                    code: 'KY.SI',
                    name: 'Sister Islands',
                },
                {
                    code: 'KY.WB',
                    name: 'West Bay',
                },
            ],
        },
        {
            code: 'CF',
            id: 2218,
            name: 'Central African Republic',
            states: [
                {
                    code: 'CT01',
                    name: 'Bamingui-Bangoran',
                },
                {
                    code: 'CT18',
                    name: 'Bangui',
                },
                {
                    code: 'CT02',
                    name: 'Basse-Kotto',
                },
                {
                    code: 'CT05',
                    name: 'Haut-Mbomou',
                },
                {
                    code: 'CT03',
                    name: 'Haute-Kotto',
                },
                {
                    code: 'CT06',
                    name: 'Kémo',
                },
                {
                    code: 'CT07',
                    name: 'Lobaye',
                },
                {
                    code: 'CT04',
                    name: 'Mambéré-Kadéï',
                },
                {
                    code: 'CT08',
                    name: 'Mbomou',
                },
                {
                    code: 'CT15',
                    name: 'Nana-Grébizi',
                },
                {
                    code: 'CT09',
                    name: 'Nana-Mambéré',
                },
                {
                    code: 'CT17',
                    name: "Ombella-M'Poko",
                },
                {
                    code: 'CT11',
                    name: 'Ouaka',
                },
                {
                    code: 'CT12',
                    name: 'Ouham',
                },
                {
                    code: 'CT13',
                    name: 'Ouham-Pendé',
                },
                {
                    code: 'CT16',
                    name: 'Sangha-Mbaéré',
                },
                {
                    code: 'CT14',
                    name: 'Vakaga',
                },
            ],
        },
        {
            code: 'TD',
            id: 2219,
            name: 'Chad',
            states: [
                {
                    code: 'CD22',
                    name: 'Barh el Ghazel',
                },
                {
                    code: 'CD01',
                    name: 'Batha',
                },
                {
                    code: 'CD23',
                    name: 'Borkou',
                },
                {
                    code: 'CD15',
                    name: 'Chari-Baguirmi',
                },
                {
                    code: 'CD27',
                    name: 'Ennedi Est',
                },
                {
                    code: 'CD28',
                    name: 'Ennedi Ouest',
                },
                {
                    code: 'CD05',
                    name: 'Guéra',
                },
                {
                    code: 'CD18',
                    name: 'Hadjer-Lamis',
                },
                {
                    code: 'CD06',
                    name: 'Kanem',
                },
                {
                    code: 'CD07',
                    name: 'Lac',
                },
                {
                    code: 'CD08',
                    name: 'Logone Occidental',
                },
                {
                    code: 'CD09',
                    name: 'Logone Oriental',
                },
                {
                    code: 'CD19',
                    name: 'Mandoul',
                },
                {
                    code: 'CD16',
                    name: 'Mayo-Kebbi Est',
                },
                {
                    code: 'CD20',
                    name: 'Mayo-Kebbi Ouest',
                },
                {
                    code: 'CD17',
                    name: 'Moyen-Chari',
                },
                {
                    code: 'CD12',
                    name: 'Ouaddaï',
                },
                {
                    code: 'CD13',
                    name: 'Salamat',
                },
                {
                    code: 'CD25',
                    name: 'Sila',
                },
                {
                    code: 'CD14',
                    name: 'Tandjilé',
                },
                {
                    code: 'CD26',
                    name: 'Tibesti',
                },
                {
                    code: 'CD21',
                    name: "Ville de N'Djamena",
                },
                {
                    code: 'CD02',
                    name: 'Wadi Fira',
                },
            ],
        },
        {
            code: 'CH99',
            id: 2386,
            name: 'Channel Islands',
            states: [],
        },
        {
            code: 'CL',
            id: 2220,
            name: 'Chile',
            states: [
                {
                    code: 'CL.AI',
                    name: 'Aisén del General Carlos Ibáñez del Campo',
                },
                {
                    code: 'CL.AN',
                    name: 'Antofagasta',
                },
                {
                    code: 'CL.AR',
                    name: 'Araucanía',
                },
                {
                    code: 'CL.AP',
                    name: 'Arica and Parinacota',
                },
                {
                    code: 'CL.AT',
                    name: 'Atacama',
                },
                {
                    code: 'CL.BI',
                    name: 'Bío-Bío',
                },
                {
                    code: 'CL.CO',
                    name: 'Coquimbo',
                },
                {
                    code: 'CL.LI',
                    name: "Libertador General Bernardo O'Higgins",
                },
                {
                    code: 'CL.LG',
                    name: 'Los Lagos',
                },
                {
                    code: 'CL.LR',
                    name: 'Los Ríos',
                },
                {
                    code: 'CL.MA',
                    name: 'Magallanes y Antártica Chilena',
                },
                {
                    code: 'CL.ML',
                    name: 'Maule',
                },
                {
                    code: 'CL.RM',
                    name: 'Región Metropolitana de Santiago',
                },
                {
                    code: 'CL.TP',
                    name: 'Tarapacá',
                },
                {
                    code: 'CL.VS',
                    name: 'Valparaíso',
                },
            ],
        },
        {
            code: 'CN',
            id: 2221,
            name: 'China',
            states: [
                {
                    code: 'CH01',
                    name: 'Anhui',
                },
                {
                    code: 'CH22',
                    name: 'Beijing',
                },
                {
                    code: 'CH33',
                    name: 'Chongqing',
                },
                {
                    code: 'CH07',
                    name: 'Fujian',
                },
                {
                    code: 'CH15',
                    name: 'Gansu',
                },
                {
                    code: 'CH17',
                    name: 'Guangdon',
                },
                {
                    code: 'CH30',
                    name: 'Guangdong',
                },
                {
                    code: 'CH16',
                    name: 'Guangxi',
                },
                {
                    code: 'CH18',
                    name: 'Guizhou',
                },
                {
                    code: 'CH31',
                    name: 'Hainan',
                },
                {
                    code: 'CH10',
                    name: 'Hebei',
                },
                {
                    code: 'CH08',
                    name: 'Heilongjiang',
                },
                {
                    code: 'CH09',
                    name: 'Henan',
                },
                {
                    code: 'CH34',
                    name: 'Hong Kong',
                },
                {
                    code: 'CH12',
                    name: 'Hubei',
                },
                {
                    code: 'CH11',
                    name: 'Hunan',
                },
                {
                    code: 'CH04',
                    name: 'Jiangsu',
                },
                {
                    code: 'CH03',
                    name: 'Jiangxi',
                },
                {
                    code: 'CH05',
                    name: 'Jilin',
                },
                {
                    code: 'CH19',
                    name: 'Liaoning',
                },
                {
                    code: 'CH20',
                    name: 'Nei Mongol',
                },
                {
                    code: 'CH21',
                    name: 'Ningxia',
                },
                {
                    code: 'CH06',
                    name: 'Qinghai',
                },
                {
                    code: 'CH26',
                    name: 'Shaanxi',
                },
                {
                    code: 'CH25',
                    name: 'Shandong',
                },
                {
                    code: 'CH23',
                    name: 'Shanghai',
                },
                {
                    code: 'CH24',
                    name: 'Shanxi',
                },
                {
                    code: 'CH32',
                    name: 'Sichuan',
                },
                {
                    code: 'CH27',
                    name: 'Sichuan',
                },
                {
                    code: 'CH28',
                    name: 'Tianjin',
                },
                {
                    code: 'CH13',
                    name: 'Xinjiang',
                },
                {
                    code: 'CH14',
                    name: 'Xizang',
                },
                {
                    code: 'CH29',
                    name: 'Yunnan',
                },
                {
                    code: 'CH02',
                    name: 'Zhejiang',
                },
            ],
        },
        {
            code: 'CX',
            id: 2412,
            name: 'Christmas Island',
            states: [],
        },
        {
            code: 'CC',
            id: 2413,
            name: 'Cocos (Keeling) Islands',
            states: [],
        },
        {
            code: 'CO',
            id: 2222,
            name: 'Colombia',
            states: [
                {
                    code: 'CO01',
                    name: 'Amazonas',
                },
                {
                    code: 'CO02',
                    name: 'Antioquia',
                },
                {
                    code: 'CO03',
                    name: 'Arauca',
                },
                {
                    code: 'CO04',
                    name: 'Atlántico',
                },
                {
                    code: 'CO35',
                    name: 'Bolívar',
                },
                {
                    code: 'CO36',
                    name: 'Boyacá',
                },
                {
                    code: 'CO37',
                    name: 'Caldas',
                },
                {
                    code: 'CO08',
                    name: 'Caquetá',
                },
                {
                    code: 'CO32',
                    name: 'Casanare',
                },
                {
                    code: 'CO09',
                    name: 'Cauca',
                },
                {
                    code: 'CO10',
                    name: 'Cesar',
                },
                {
                    code: 'CO11',
                    name: 'Chocó',
                },
                {
                    code: 'CO12',
                    name: 'Córdoba',
                },
                {
                    code: 'CO33',
                    name: 'Cundinamarca',
                },
                {
                    code: 'CO34',
                    name: 'Distrito Capital',
                },
                {
                    code: 'CO15',
                    name: 'Guainía',
                },
                {
                    code: 'CO14',
                    name: 'Guaviare',
                },
                {
                    code: 'CO16',
                    name: 'Huila',
                },
                {
                    code: 'CO17',
                    name: 'La Guajira',
                },
                {
                    code: 'CO38',
                    name: 'Magdalena',
                },
                {
                    code: 'CO19',
                    name: 'Meta',
                },
                {
                    code: 'CO20',
                    name: 'Nariño',
                },
                {
                    code: 'CO21',
                    name: 'Norte de Santander',
                },
                {
                    code: 'CO22',
                    name: 'Putumayo',
                },
                {
                    code: 'CO23',
                    name: 'Quindío',
                },
                {
                    code: 'CO24',
                    name: 'Risaralda',
                },
                {
                    code: 'CO25',
                    name: 'San Andrés y Providencia',
                },
                {
                    code: 'CO26',
                    name: 'Santander',
                },
                {
                    code: 'CO27',
                    name: 'Sucre',
                },
                {
                    code: 'CO28',
                    name: 'Tolima',
                },
                {
                    code: 'CO29',
                    name: 'Valle del Cauca',
                },
                {
                    code: 'CO30',
                    name: 'Vaupés',
                },
                {
                    code: 'CO31',
                    name: 'Vichada',
                },
            ],
        },
        {
            code: 'KM',
            id: 2223,
            name: 'Comoros',
            states: [],
        },
        {
            code: 'ZR',
            id: 2368,
            name: 'Congo; Democratic Republic of',
            states: [
                {
                    code: 'CD.BU',
                    name: 'Bas-Uélé',
                },
                {
                    code: 'CD.HK',
                    name: 'Haut-Katanga',
                },
                {
                    code: 'CD.HL',
                    name: 'Haut-Lomami',
                },
                {
                    code: 'CD.HU',
                    name: 'Haut-Uélé',
                },
                {
                    code: 'CD.IT',
                    name: 'Ituri',
                },
                {
                    code: 'CD.KS',
                    name: 'Kasaï',
                },
                {
                    code: 'CD.LL',
                    name: 'Kasaï-Central',
                },
                {
                    code: 'CD.KO',
                    name: 'Kasaï Oriental',
                },
                {
                    code: 'CD.KN',
                    name: 'Kinshasa',
                },
                {
                    code: 'CD.BC',
                    name: 'Kongo Central',
                },
                {
                    code: 'CD.KG',
                    name: 'Kwango',
                },
                {
                    code: 'CD.KU',
                    name: 'Kwilu',
                },
                {
                    code: 'CD.LM',
                    name: 'Lomami',
                },
                {
                    code: 'CD.LB',
                    name: 'Lualaba',
                },
                {
                    code: 'CD.MA',
                    name: 'Mai-Ndombe',
                },
                {
                    code: 'CD.MN',
                    name: 'Maniema',
                },
                {
                    code: 'CD.MO',
                    name: 'Mongala',
                },
                {
                    code: 'CD.NK',
                    name: 'Nord-Kivu',
                },
                {
                    code: 'CD.NU',
                    name: 'Nord-Ubangi',
                },
                {
                    code: 'CD.SN',
                    name: 'Sankuru',
                },
                {
                    code: 'CD.SK',
                    name: 'Sud-Kivu',
                },
                {
                    code: 'CD.SU',
                    name: 'Sud-Ubangi',
                },
                {
                    code: 'CD.TG',
                    name: 'Tanganyika',
                },
                {
                    code: 'CD.TO',
                    name: 'Tshopo',
                },
                {
                    code: 'CD.TP',
                    name: 'Tshuapa',
                },
                {
                    code: 'CD.ET',
                    name: 'Équateur',
                },
            ],
        },
        {
            code: 'CG',
            id: 2383,
            name: 'Congo; Republic of',
            states: [],
        },
        {
            code: 'CK',
            id: 2414,
            name: 'Cook Islands',
            states: [],
        },
        {
            code: 'CR',
            id: 2226,
            name: 'Costa Rica',
            states: [
                {
                    code: 'CS01',
                    name: 'Alajuela',
                },
                {
                    code: 'CS02',
                    name: 'Cartago',
                },
                {
                    code: 'CS03',
                    name: 'Guanacaste',
                },
                {
                    code: 'CS04',
                    name: 'Heredia',
                },
                {
                    code: 'CS06',
                    name: 'Limón',
                },
                {
                    code: 'CS07',
                    name: 'Puntarenas',
                },
                {
                    code: 'CS08',
                    name: 'San José',
                },
            ],
        },
        {
            code: 'CI',
            id: 2227,
            name: "Cote D'Ivoire",
            states: [
                {
                    code: 'IV93',
                    name: 'Abidjan',
                },
                {
                    code: 'IV76',
                    name: 'Bas-Sassandra',
                },
                {
                    code: 'IV94',
                    name: 'Comoé',
                },
                {
                    code: 'IV77',
                    name: 'Denguélé',
                },
                {
                    code: 'IV95',
                    name: 'Gôh-Djiboua',
                },
                {
                    code: 'IV81',
                    name: 'Lacs',
                },
                {
                    code: 'IV82',
                    name: 'Lagunes',
                },
                {
                    code: 'IV78',
                    name: 'Montagnes',
                },
                {
                    code: 'IV96',
                    name: 'Sassandra-Marahoué',
                },
                {
                    code: 'IV87',
                    name: 'Savanes',
                },
                {
                    code: 'IV90',
                    name: 'Vallée du Bandama',
                },
                {
                    code: 'IV97',
                    name: 'Woroba',
                },
                {
                    code: 'IV98',
                    name: 'Yamoussoukro',
                },
                {
                    code: 'IV92',
                    name: 'Zanzan',
                },
            ],
        },
        {
            code: 'HR',
            id: 2228,
            name: 'Croatia',
            states: [
                {
                    code: 'HR07',
                    name: 'Bjelovarsko-bilogorska',
                },
                {
                    code: 'HR12',
                    name: 'Brodsko-posavska',
                },
                {
                    code: 'HR19',
                    name: 'Dubrovacko-neretvanska',
                },
                {
                    code: 'HR21',
                    name: 'Grad Zagreb',
                },
                {
                    code: 'HR-18',
                    name: 'Istarska',
                },
                {
                    code: 'HR04',
                    name: 'Karlovacka',
                },
                {
                    code: 'HR06',
                    name: 'Koprivnicko-križevacka',
                },
                {
                    code: 'HR02',
                    name: 'Krapinsko-zagorska',
                },
                {
                    code: 'HR09',
                    name: 'Licko-senjska',
                },
                {
                    code: 'HR20',
                    name: 'Medimurska',
                },
                {
                    code: 'HR14',
                    name: 'Osjecko-baranjska',
                },
                {
                    code: 'HR11',
                    name: 'Požeško-slavonska',
                },
                {
                    code: 'HR08',
                    name: 'Primorsko-goranska',
                },
                {
                    code: 'HR15',
                    name: 'Šibensko-kninska',
                },
                {
                    code: 'HR03',
                    name: 'Sisacko-moslavacka',
                },
                {
                    code: 'HR17',
                    name: 'Splitsko-dalmatinska',
                },
                {
                    code: 'HR05',
                    name: 'Varaždinska',
                },
                {
                    code: 'HR10',
                    name: 'Viroviticko-podravska',
                },
                {
                    code: 'HR16',
                    name: 'Vukovarsko-srijemska',
                },
                {
                    code: 'HR13',
                    name: 'Zadarska',
                },
                {
                    code: 'HR01',
                    name: 'Zagrebacka',
                },
            ],
        },
        {
            code: 'CU',
            id: 2229,
            name: 'Cuba',
            states: [
                {
                    code: 'CU17',
                    name: 'Artemisa',
                },
                {
                    code: 'CU05',
                    name: 'Camagüey',
                },
                {
                    code: 'CU07',
                    name: 'Ciego de Ávila',
                },
                {
                    code: 'CU08',
                    name: 'Cienfuegos',
                },
                {
                    code: 'CU09',
                    name: 'Granma',
                },
                {
                    code: 'CU10',
                    name: 'Guantánamo',
                },
                {
                    code: 'CU12',
                    name: 'Holguín',
                },
                {
                    code: 'CU04',
                    name: 'Isla de la Juventud',
                },
                {
                    code: 'CU02',
                    name: 'La Habana',
                },
                {
                    code: 'CU13',
                    name: 'Las Tunas',
                },
                {
                    code: 'CU03',
                    name: 'Matanzas',
                },
                {
                    code: 'CU18',
                    name: 'Mayabeque',
                },
                {
                    code: 'CU01',
                    name: 'Pinar del Río',
                },
                {
                    code: 'CU14',
                    name: 'Sancti Spíritus',
                },
                {
                    code: 'CU15',
                    name: 'Santiago de Cuba',
                },
                {
                    code: 'CU16',
                    name: 'Villa Clara',
                },
            ],
        },
        {
            code: 'C999',
            id: 2387,
            name: 'Curacao',
            states: [
                {
                    code: 'CW.CU',
                    name: 'Curacao',
                },
            ],
        },
        {
            code: 'CY',
            id: 2230,
            name: 'Cyprus',
            states: [
                {
                    code: 'CY01',
                    name: 'Famagusta',
                },
                {
                    code: 'CY02',
                    name: 'Kyrenia',
                },
                {
                    code: 'CY03',
                    name: 'Larnaca',
                },
                {
                    code: 'CY05',
                    name: 'Limassol',
                },
                {
                    code: 'CY04',
                    name: 'Nicosia',
                },
                {
                    code: 'CY06',
                    name: 'Paphos',
                },
            ],
        },
        {
            code: 'CZ',
            id: 2231,
            name: 'Czech Republic',
            states: [
                {
                    code: 'JC',
                    name: 'Jihoceský kraj',
                },
                {
                    code: 'JM',
                    name: 'Jihomoravský kraj',
                },
                {
                    code: 'KA',
                    name: 'Karlovarský kraj',
                },
                {
                    code: 'KR',
                    name: 'Královéhradecký kraj',
                },
                {
                    code: 'LI',
                    name: 'Liberecký kraj',
                },
                {
                    code: 'MO',
                    name: 'Moravskoslezský kraj',
                },
                {
                    code: 'OL',
                    name: 'Olomoucký kraj',
                },
                {
                    code: 'PA',
                    name: 'Pardubický kraj',
                },
                {
                    code: 'PL',
                    name: 'Plzenský kraj',
                },
                {
                    code: 'PR',
                    name: 'Praha, hlavní mesto',
                },
                {
                    code: 'ST',
                    name: 'Stredoceský kraj',
                },
                {
                    code: 'VY',
                    name: 'Vysocina',
                },
                {
                    code: 'ZL',
                    name: 'Zlínský kraj',
                },
                {
                    code: 'US',
                    name: 'Ústecký kraj',
                },
            ],
        },
        {
            code: 'DK',
            id: 2232,
            name: 'Denmark',
            states: [
                {
                    code: 'DA01',
                    name: 'Arhus County',
                },
                {
                    code: 'DA02',
                    name: 'Bornholm Regional Municipality',
                },
                {
                    code: 'DA17',
                    name: 'Capital Region',
                },
                {
                    code: 'DA18',
                    name: 'Central Jutland Region',
                },
                {
                    code: 'DA16',
                    name: 'Frederiksberg municipal',
                },
                {
                    code: 'DA03',
                    name: 'Frederiksborg County',
                },
                {
                    code: 'DA04',
                    name: 'Fyn County',
                },
                {
                    code: 'DA06',
                    name: 'Kobenhavn County',
                },
                {
                    code: 'DA05',
                    name: 'Kobenhavn municipal',
                },
                {
                    code: 'DA07',
                    name: 'Nordjylland County',
                },
                {
                    code: 'DA19',
                    name: 'North Jutland Region',
                },
                {
                    code: 'DA08',
                    name: 'Ribe County',
                },
                {
                    code: 'DA09',
                    name: 'Ringkobing County',
                },
                {
                    code: 'DA10',
                    name: 'Roskilde County',
                },
                {
                    code: 'DA11',
                    name: 'Sonderjylland County',
                },
                {
                    code: 'DA21',
                    name: 'South Denmark Region',
                },
                {
                    code: 'DA12',
                    name: 'Storstrom County',
                },
                {
                    code: 'DA13',
                    name: 'Vejle County',
                },
                {
                    code: 'DA14',
                    name: 'Vestsjaelland County',
                },
                {
                    code: 'DA15',
                    name: 'Viborg County',
                },
                {
                    code: 'DA20',
                    name: 'Zealand Region',
                },
            ],
        },
        {
            code: 'DJ',
            id: 2233,
            name: 'Djibouti',
            states: [],
        },
        {
            code: 'DM',
            id: 2234,
            name: 'Dominica',
            states: [],
        },
        {
            code: 'DO',
            id: 2235,
            name: 'Dominican Republic',
            states: [
                {
                    code: 'DR01',
                    name: 'Azua',
                },
                {
                    code: 'DR02',
                    name: 'Bahoruco',
                },
                {
                    code: 'DR03',
                    name: 'Barahona',
                },
                {
                    code: 'DR04',
                    name: 'Dajabón',
                },
                {
                    code: 'DR34',
                    name: 'Distrito Nacional',
                },
                {
                    code: 'DR06',
                    name: 'Duarte',
                },
                {
                    code: 'DR28',
                    name: 'El Seibo',
                },
                {
                    code: 'DR11',
                    name: 'Elías Piña',
                },
                {
                    code: 'DR08',
                    name: 'Espaillat',
                },
                {
                    code: 'DR29',
                    name: 'Hato Mayor',
                },
                {
                    code: 'DR19',
                    name: 'Hermanas Mirabal',
                },
                {
                    code: 'DR09',
                    name: 'Independencia',
                },
                {
                    code: 'DR10',
                    name: 'La Altagracia',
                },
                {
                    code: 'DR12',
                    name: 'La Romana',
                },
                {
                    code: 'DR30',
                    name: 'La Vega',
                },
                {
                    code: 'DR14',
                    name: 'María Trinidad Sánchez',
                },
                {
                    code: 'DR31',
                    name: 'Monseñor Nouel',
                },
                {
                    code: 'DR15',
                    name: 'Monte Cristi',
                },
                {
                    code: 'DR32',
                    name: 'Monte Plata',
                },
                {
                    code: 'DR16',
                    name: 'Pedernales',
                },
                {
                    code: 'DR35',
                    name: 'Peravia',
                },
                {
                    code: 'DR18',
                    name: 'Puerto Plata',
                },
                {
                    code: 'DR20',
                    name: 'Samaná',
                },
                {
                    code: 'DR33',
                    name: 'San Cristóbal',
                },
                {
                    code: 'DR36',
                    name: 'San José de Ocoa',
                },
                {
                    code: 'DR23',
                    name: 'San Juan',
                },
                {
                    code: 'DR24',
                    name: 'San Pedro de Macorís',
                },
                {
                    code: 'DR21',
                    name: 'Sánchez Ramírez',
                },
                {
                    code: 'DR25',
                    name: 'Santiago',
                },
                {
                    code: 'DR26',
                    name: 'Santiago Rodríguez',
                },
                {
                    code: 'DR37',
                    name: 'Santo Domingo',
                },
                {
                    code: 'DR27',
                    name: 'Valverde',
                },
            ],
        },
        {
            code: 'EC',
            id: 2236,
            name: 'Ecuador',
            states: [
                {
                    code: 'EC02',
                    name: 'Azuay',
                },
                {
                    code: 'EC02',
                    name: 'Azuay',
                },
                {
                    code: 'EC03',
                    name: 'Bolívar',
                },
                {
                    code: 'EC04',
                    name: 'Cañar',
                },
                {
                    code: 'EC05',
                    name: 'Carchi',
                },
                {
                    code: 'EC06',
                    name: 'Chimborazo',
                },
                {
                    code: 'EC07',
                    name: 'Cotopaxi',
                },
                {
                    code: 'EC08',
                    name: 'El Oro',
                },
                {
                    code: 'EC09',
                    name: 'Esmeraldas',
                },
                {
                    code: 'EC01',
                    name: 'Galápagos',
                },
                {
                    code: 'EC10',
                    name: 'Guayas',
                },
                {
                    code: 'EC11',
                    name: 'Imbabura',
                },
                {
                    code: 'EC12',
                    name: 'Loja',
                },
                {
                    code: 'EC13',
                    name: 'Los Ríos',
                },
                {
                    code: 'EC14',
                    name: 'Manabí',
                },
                {
                    code: 'EC15',
                    name: 'Morona-Santiago',
                },
                {
                    code: 'EC23',
                    name: 'Napo',
                },
                {
                    code: 'EC24',
                    name: 'Orellana',
                },
                {
                    code: 'EC17',
                    name: 'Pastaza',
                },
                {
                    code: 'EC18',
                    name: 'Pichincha',
                },
                {
                    code: 'EC25',
                    name: 'Santa Elena',
                },
                {
                    code: 'EC26',
                    name: 'Santo Domingo de los Tsáchilas',
                },
                {
                    code: 'EC22',
                    name: 'Sucumbíos',
                },
                {
                    code: 'EC19',
                    name: 'Tungurahua',
                },
                {
                    code: 'EC20',
                    name: 'Zamora-Chinchipe',
                },
            ],
        },
        {
            code: 'EG',
            id: 2237,
            name: 'Egypt',
            states: [
                {
                    code: 'EG01',
                    name: 'Ad Daqahliyah',
                },
                {
                    code: 'EG02',
                    name: 'Al Bahr al Ahmar',
                },
                {
                    code: 'EG03',
                    name: 'Al Buhayrah',
                },
                {
                    code: 'EG04',
                    name: 'Al Fayyum',
                },
                {
                    code: 'EG05',
                    name: 'Al Gharbiyah',
                },
                {
                    code: 'EG06',
                    name: 'Al Iskandariyah',
                },
                {
                    code: 'EG07',
                    name: 'Al Isma`iliyah',
                },
                {
                    code: 'EG08',
                    name: 'Al Jizah',
                },
                {
                    code: 'EG09',
                    name: 'Al Minufiyah',
                },
                {
                    code: 'EG10',
                    name: 'Al Minya',
                },
                {
                    code: 'EG11',
                    name: 'Al Qahirah',
                },
                {
                    code: 'EG12',
                    name: 'Al Qalyubiyah',
                },
                {
                    code: 'EG28',
                    name: 'Al Uqsur',
                },
                {
                    code: 'EG13',
                    name: 'Al Wadi al Jadid',
                },
                {
                    code: 'EG15',
                    name: 'As Suways',
                },
                {
                    code: 'EG14',
                    name: 'Ash Sharqiyah',
                },
                {
                    code: 'EG16',
                    name: 'Aswan',
                },
                {
                    code: 'EG17',
                    name: 'Asyut',
                },
                {
                    code: 'EG18',
                    name: 'Bani Suwayf',
                },
                {
                    code: 'EG19',
                    name: 'Bur Sa`id',
                },
                {
                    code: 'EG20',
                    name: 'Dumyat',
                },
                {
                    code: 'EG26',
                    name: 'Janub Sina',
                },
                {
                    code: 'EG21',
                    name: 'Kafr ash Shaykh',
                },
                {
                    code: 'EG22',
                    name: 'Matruh',
                },
                {
                    code: 'EG23',
                    name: 'Qina',
                },
                {
                    code: 'EG27',
                    name: 'Shamal Sina',
                },
                {
                    code: 'EG24',
                    name: 'Suhaj',
                },
            ],
        },
        {
            code: 'SV',
            id: 2238,
            name: 'El Salvador',
            states: [
                {
                    code: 'ES01',
                    name: 'Ahuachapán',
                },
                {
                    code: 'ES02',
                    name: 'Cabañas',
                },
                {
                    code: 'ES03',
                    name: 'Chalatenango',
                },
                {
                    code: 'ES04',
                    name: 'Cuscatlán',
                },
                {
                    code: 'ES05',
                    name: 'La Libertad',
                },
                {
                    code: 'ES06',
                    name: 'La Paz',
                },
                {
                    code: 'ES07',
                    name: 'La Unión',
                },
                {
                    code: 'ES08',
                    name: 'Morazán',
                },
                {
                    code: 'ES09',
                    name: 'San Miguel',
                },
                {
                    code: 'ES10',
                    name: 'San Salvador',
                },
                {
                    code: 'ES12',
                    name: 'San Vicente',
                },
                {
                    code: 'ES11',
                    name: 'Santa Ana',
                },
                {
                    code: 'ES13',
                    name: 'Sonsonate',
                },
                {
                    code: 'ES14',
                    name: 'Usulután',
                },
            ],
        },
        {
            code: 'GQ',
            id: 2239,
            name: 'Equatorial Guinea',
            states: [],
        },
        {
            code: 'ER',
            id: 2240,
            name: 'Eritrea',
            states: [],
        },
        {
            code: 'EE',
            id: 2241,
            name: 'Estonia',
            states: [
                {
                    code: 'EN01',
                    name: 'Harju',
                },
                {
                    code: 'EN02',
                    name: 'Hiiu',
                },
                {
                    code: 'EN03',
                    name: 'Ida-Viru',
                },
                {
                    code: 'EN04',
                    name: 'Järva',
                },
                {
                    code: 'EN05',
                    name: 'Jõgeva',
                },
                {
                    code: 'EN07',
                    name: 'Lääne',
                },
                {
                    code: 'EN08',
                    name: 'Lääne-Viru',
                },
                {
                    code: 'EN11',
                    name: 'Pärnu',
                },
                {
                    code: 'EN12',
                    name: 'Põlva',
                },
                {
                    code: 'EN13',
                    name: 'Rapla',
                },
                {
                    code: 'EN14',
                    name: 'Saare',
                },
                {
                    code: 'EN18',
                    name: 'Tartu',
                },
                {
                    code: 'EN19',
                    name: 'Valga',
                },
                {
                    code: 'EN20',
                    name: 'Viljandi',
                },
                {
                    code: 'EN21',
                    name: 'Võru',
                },
            ],
        },
        {
            code: 'ET',
            id: 2242,
            name: 'Ethiopia',
            states: [
                {
                    code: 'ET44',
                    name: 'Addis Ababa',
                },
                {
                    code: 'ET45',
                    name: 'Afar',
                },
                {
                    code: 'ET46',
                    name: 'Amhara',
                },
                {
                    code: 'ET47',
                    name: 'Benshangul-Gumaz',
                },
                {
                    code: 'ET48',
                    name: 'Dire Dawa',
                },
                {
                    code: 'ET49',
                    name: 'Gambela Peoples',
                },
                {
                    code: 'ET50',
                    name: 'Harari People',
                },
                {
                    code: 'ET51',
                    name: 'Oromia',
                },
                {
                    code: 'ET52',
                    name: 'Somali',
                },
                {
                    code: 'ET54',
                    name: 'Southern Nations, Nationalities and Peoples',
                },
                {
                    code: 'ET53',
                    name: 'Tigray',
                },
            ],
        },
        {
            code: 'FK',
            id: 2415,
            name: 'Falkland Islands (Malvinas)',
            states: [],
        },
        {
            code: 'FI99',
            id: 2388,
            name: 'Faroe Islands',
            states: [],
        },
        {
            code: 'FJ',
            id: 2243,
            name: 'Fiji',
            states: [],
        },
        {
            code: 'FI',
            id: 2244,
            name: 'Finland',
            states: [
                {
                    code: 'FI-AL',
                    name: 'Ahvenanmaan lääni',
                },
                {
                    code: 'AX',
                    name: 'Ahvenanmaa',
                },
                {
                    code: 'FI.SK',
                    name: 'Etelä-Karjala',
                },
                {
                    code: 'FI.SO',
                    name: 'Etelä-Pohjanmaa',
                },
                {
                    code: 'FI.SS',
                    name: 'Etelä-Savo',
                },
                {
                    code: 'FI-ES',
                    name: 'Etelä-Suomen lääni',
                },
                {
                    code: 'FI-IS',
                    name: 'Itä-Suomen lääni',
                },
                {
                    code: 'FI.KA',
                    name: 'Kainuu',
                },
                {
                    code: 'FI.KH',
                    name: 'Kanta-Häme',
                },
                {
                    code: 'FI.CO',
                    name: 'Keski-Pohjanmaa',
                },
                {
                    code: 'FI.CF',
                    name: 'Keski-Suomi',
                },
                {
                    code: 'FI.KY',
                    name: 'Kymenlaakso',
                },
                {
                    code: 'FI-LS',
                    name: 'Länsi-Suomen lääni',
                },
                {
                    code: 'FI-LL',
                    name: 'Lapin lääni',
                },
                {
                    code: 'FI.LA',
                    name: 'Lappi',
                },
                {
                    code: 'FI-OL',
                    name: 'Oulun lääni',
                },
                {
                    code: 'FI.PH',
                    name: 'Päijät-Häme',
                },
                {
                    code: 'FI.TR',
                    name: 'Pirkanmaa',
                },
                {
                    code: 'FI.OS',
                    name: 'Pohjanmaa',
                },
                {
                    code: 'FI.NK',
                    name: 'Pohjois-Karjala',
                },
                {
                    code: 'FI.NO',
                    name: 'Pohjois-Pohjanmaa',
                },
                {
                    code: 'FI.NS',
                    name: 'Pohjois-Savo',
                },
                {
                    code: 'FI.SA',
                    name: 'Satakunta',
                },
                {
                    code: 'FI.US',
                    name: 'Uusimaa',
                },
                {
                    code: 'FI.SF',
                    name: 'Varsinais-Suomi',
                },
            ],
        },
        {
            code: 'FR',
            id: 2245,
            name: 'France',
            states: [
                {
                    code: 'FRC2',
                    name: 'Ain',
                },
                {
                    code: 'FRC3',
                    name: 'Aisne',
                },
                {
                    code: 'FRC4',
                    name: 'Allier',
                },
                {
                    code: 'FRC6',
                    name: 'Alpes-Maritimes',
                },
                {
                    code: 'FRC5',
                    name: 'Alpes-de-Haute-Provence',
                },
                {
                    code: 'FRC1',
                    name: 'Alsace',
                },
                {
                    code: 'FR97',
                    name: 'Aquitaine',
                },
                {
                    code: 'FRC7',
                    name: 'Ardèche',
                },
                {
                    code: 'FRC8',
                    name: 'Ardennes',
                },
                {
                    code: 'FRC9',
                    name: 'Ariège',
                },
                {
                    code: 'FRD1',
                    name: 'Aube',
                },
                {
                    code: 'FRD2',
                    name: 'Aude',
                },
                {
                    code: 'FR.AR',
                    name: 'Auvergne-Rhône-Alpes',
                },
                {
                    code: 'FR98',
                    name: 'Auvergne',
                },
                {
                    code: 'FRD3',
                    name: 'Aveyron',
                },
                {
                    code: 'FRD4',
                    name: 'Bas-Rhin',
                },
                {
                    code: 'FR99',
                    name: 'Basse-Normandie',
                },
                {
                    code: 'FRD5',
                    name: 'Bouches-du-Rhône',
                },
                {
                    code: 'FR.BF',
                    name: 'Bourgogne-Franche-Comté',
                },
                {
                    code: 'FRA1',
                    name: 'Bourgogne',
                },
                {
                    code: 'FRA2',
                    name: 'Bretagne',
                },
                {
                    code: 'FRD8',
                    name: 'Calvados',
                },
                {
                    code: 'FRD9',
                    name: 'Cantal',
                },
                {
                    code: 'FRA3',
                    name: 'Centre',
                },
                {
                    code: 'FR.CN',
                    name: 'Centre-Val de Loire',
                },
                {
                    code: 'FRA4',
                    name: 'Champagne-Ardenne',
                },
                {
                    code: 'FRE1',
                    name: 'Charente-Maritime',
                },
                {
                    code: 'FRE2',
                    name: 'Charente',
                },
                {
                    code: 'FRE3',
                    name: 'Cher',
                },
                {
                    code: 'FRE4',
                    name: 'Corrèze',
                },
                {
                    code: 'FRE5',
                    name: 'Corse-du-Sud',
                },
                {
                    code: 'FR.CE',
                    name: 'Corse',
                },
                {
                    code: 'FRD6',
                    name: "Côte-d'Or",
                },
                {
                    code: 'FRD7',
                    name: "Côtes-d'Armor",
                },
                {
                    code: 'FRE6',
                    name: 'Creuse',
                },
                {
                    code: 'FRE7',
                    name: 'Deux-Sèvres',
                },
                {
                    code: 'FRE8',
                    name: 'Dordogne',
                },
                {
                    code: 'FRE9',
                    name: 'Doubs',
                },
                {
                    code: 'FRF1',
                    name: 'Drôme',
                },
                {
                    code: 'FRF2',
                    name: 'Essonne',
                },
                {
                    code: 'FRF3',
                    name: 'Eure-et-Loir',
                },
                {
                    code: 'FRF4',
                    name: 'Eure',
                },
                {
                    code: 'FRF5',
                    name: 'Finistère',
                },
                {
                    code: 'FRA6',
                    name: 'Franche-Comte',
                },
                {
                    code: 'FRF6',
                    name: 'Gard',
                },
                {
                    code: 'FRF7',
                    name: 'Gers',
                },
                {
                    code: 'FRF8',
                    name: 'Gironde',
                },
                {
                    code: 'FR.AO',
                    name: 'Grand Est',
                },
                {
                    code: 'FRG1',
                    name: 'Haut-Rhin',
                },
                {
                    code: 'FRG2',
                    name: 'Haute-Corse',
                },
                {
                    code: 'FRG3',
                    name: 'Haute-Garonne',
                },
                {
                    code: 'FRG4',
                    name: 'Haute-Loire',
                },
                {
                    code: 'FRG5',
                    name: 'Haute-Marne',
                },
                {
                    code: 'FRA7',
                    name: 'Haute-Normandie',
                },
                {
                    code: 'FRG6',
                    name: 'Haute-Saône',
                },
                {
                    code: 'FRG7',
                    name: 'Haute-Savoie',
                },
                {
                    code: 'FRG8',
                    name: 'Haute-Vienne',
                },
                {
                    code: 'FRG9',
                    name: 'Hautes-Alpes',
                },
                {
                    code: 'FRH1',
                    name: 'Hautes-Pyrénées',
                },
                {
                    code: 'FR.NC',
                    name: 'Hauts-de-France',
                },
                {
                    code: 'FRH2',
                    name: 'Hauts-de-Seine',
                },
                {
                    code: 'FRF9',
                    name: 'Hérault',
                },
                {
                    code: 'FRA8',
                    name: 'Ile-de-France',
                },
                {
                    code: 'FRH3',
                    name: 'Ille-et-Vilaine',
                },
                {
                    code: 'FRH5',
                    name: 'Indre',
                },
                {
                    code: 'FRH4',
                    name: 'Indre-et-Loire',
                },
                {
                    code: 'FRH6',
                    name: 'Isère',
                },
                {
                    code: 'FRH7',
                    name: 'Jura',
                },
                {
                    code: 'FRH8',
                    name: 'Landes',
                },
                {
                    code: 'FRA9',
                    name: 'Languedoc-Roussillon',
                },
                {
                    code: 'FRB1',
                    name: 'Limousin',
                },
                {
                    code: 'FRI3',
                    name: 'Loir-et-Cher',
                },
                {
                    code: 'FRI2',
                    name: 'Loiret',
                },
                {
                    code: 'FRI1',
                    name: 'Loire',
                },
                {
                    code: 'FRH9',
                    name: 'Loire-Atlantique',
                },
                {
                    code: 'FRB2',
                    name: 'Lorraine',
                },
                {
                    code: 'FRI4',
                    name: 'Lot-et-Garonne',
                },
                {
                    code: 'FRI5',
                    name: 'Lot',
                },
                {
                    code: 'FRI6',
                    name: 'Lozère',
                },
                {
                    code: 'FRI7',
                    name: 'Maine-et-Loire',
                },
                {
                    code: 'FRI8',
                    name: 'Manche',
                },
                {
                    code: 'FRI9',
                    name: 'Marne',
                },
                {
                    code: 'FRJ1',
                    name: 'Mayenne',
                },
                {
                    code: 'FRJ2',
                    name: 'Meurthe-et-Moselle',
                },
                {
                    code: 'FRJ3',
                    name: 'Meuse',
                },
                {
                    code: 'FRB3',
                    name: 'Midi-Pyrenees',
                },
                {
                    code: 'FRJ4',
                    name: 'Morbihan',
                },
                {
                    code: 'FRJ5',
                    name: 'Moselle',
                },
                {
                    code: 'FRJ6',
                    name: 'Nièvre',
                },
                {
                    code: 'FRJ7',
                    name: 'Nord France',
                },
                {
                    code: 'FR67',
                    name: 'Nord',
                },
                {
                    code: 'FR.ND',
                    name: 'Normandie',
                },
                {
                    code: 'FR.AC',
                    name: 'Nouvelle-Aquitaine',
                },
                {
                    code: 'FR.LP',
                    name: 'Occitanie',
                },
                {
                    code: 'FRJ8',
                    name: 'Oise',
                },
                {
                    code: 'FRJ9',
                    name: 'Orne',
                },
                {
                    code: 'FRK1',
                    name: 'Paris',
                },
                {
                    code: 'FRB4',
                    name: 'Pas-de-Calais',
                },
                {
                    code: 'FRB5',
                    name: 'Pays de la Loire',
                },
                {
                    code: 'FRB6',
                    name: 'Picardie',
                },
                {
                    code: 'FRB7',
                    name: 'Poitou-Charentes',
                },
                {
                    code: 'FRB8',
                    name: "Provence-Alpes-Cote d'Azur",
                },
                {
                    code: 'FRK2',
                    name: 'Puy-de-Dôme',
                },
                {
                    code: 'FRK3',
                    name: 'Pyrénées-Atlantiques',
                },
                {
                    code: 'FRK4',
                    name: 'Pyrénées-Orientales',
                },
                {
                    code: 'FRB9',
                    name: 'Rhône',
                },
                {
                    code: 'FRK5',
                    name: 'Saône-et-Loire',
                },
                {
                    code: 'FRK6',
                    name: 'Sarthe',
                },
                {
                    code: 'FRK7',
                    name: 'Savoie',
                },
                {
                    code: 'FRK9',
                    name: 'Seine-Maritime',
                },
                {
                    code: 'FRL1',
                    name: 'Seine-Saint-Denis',
                },
                {
                    code: 'FRK8',
                    name: 'Seine-et-Marne',
                },
                {
                    code: 'FRL2',
                    name: 'Somme',
                },
                {
                    code: 'FRL3',
                    name: 'Tarn-et-Garonne',
                },
                {
                    code: 'FRL4',
                    name: 'Tarn',
                },
                {
                    code: 'FRL5',
                    name: 'Territoire de Belfor',
                },
                {
                    code: 'FR14',
                    name: 'Territoire de Belfort',
                },
                {
                    code: 'FRL6',
                    name: "Val-d'Oise",
                },
                {
                    code: 'FRL7',
                    name: 'Val-de-Marne',
                },
                {
                    code: 'FRL8',
                    name: 'Var',
                },
                {
                    code: 'FRL9',
                    name: 'Vaucluse',
                },
                {
                    code: 'FRM1',
                    name: 'Vendée',
                },
                {
                    code: 'FRM2',
                    name: 'Vienne',
                },
                {
                    code: 'FR94',
                    name: 'Ville de Paris',
                },
                {
                    code: 'FRM3',
                    name: 'Vosges',
                },
                {
                    code: 'FRM4',
                    name: 'Yonne',
                },
                {
                    code: 'FRM5',
                    name: 'Yvelines',
                },
                {
                    code: 'FR.IF',
                    name: 'Île-de-France',
                },
            ],
        },
        {
            code: 'GF',
            id: 2416,
            name: 'French Guiana',
            states: [],
        },
        {
            code: 'PF',
            id: 2417,
            name: 'French Polynesia',
            states: [],
        },
        {
            code: 'TF',
            id: 2418,
            name: 'French Southern Territories',
            states: [],
        },
        {
            code: 'GA',
            id: 2246,
            name: 'Gabon',
            states: [
                {
                    code: 'GB01',
                    name: 'Estuaire',
                },
                {
                    code: 'GB02',
                    name: 'Haut-Ogooué',
                },
                {
                    code: 'GB03',
                    name: 'Moyen-Ogooué',
                },
                {
                    code: 'GB04',
                    name: 'Ngounié',
                },
                {
                    code: 'GB05',
                    name: 'Nyanga',
                },
                {
                    code: 'GB06',
                    name: 'Ogooué-Ivindo',
                },
                {
                    code: 'GB07',
                    name: 'Ogooué-Lolo',
                },
                {
                    code: 'GB08',
                    name: 'Ogooué-Maritime',
                },
                {
                    code: 'GB09',
                    name: 'Woleu-Ntem',
                },
            ],
        },
        {
            code: 'GM',
            id: 2389,
            name: 'Gambia',
            states: [
                {
                    code: 'GA01',
                    name: 'Banjul',
                },
                {
                    code: 'GA03',
                    name: 'Central River',
                },
                {
                    code: 'GA02',
                    name: 'Lower River',
                },
                {
                    code: 'GA07',
                    name: 'North Bank',
                },
                {
                    code: 'GA04',
                    name: 'Upper River',
                },
                {
                    code: 'GA05',
                    name: 'West Coast',
                },
            ],
        },
        {
            code: 'GE',
            id: 2248,
            name: 'Georgia',
            states: [
                {
                    code: 'GG02',
                    name: 'Abkhazia',
                },
                {
                    code: 'GG04',
                    name: 'Ajaria',
                },
                {
                    code: 'GG65',
                    name: 'Guria',
                },
                {
                    code: 'GG66',
                    name: 'Imereti',
                },
                {
                    code: 'GG67',
                    name: 'Kakheti',
                },
                {
                    code: 'GG68',
                    name: 'Kvemo Kartli',
                },
                {
                    code: 'GG69',
                    name: 'Mtskheta-Mtianeti',
                },
                {
                    code: 'GG70',
                    name: 'Racha-Lochkhumi-Kvemo Svaneti',
                },
                {
                    code: 'GG71',
                    name: 'Samegrelo-Zemo Svaneti',
                },
                {
                    code: 'GG72',
                    name: 'Samtskhe-Javakheti',
                },
                {
                    code: 'GG73',
                    name: 'Shida Kartli',
                },
                {
                    code: 'GG51',
                    name: 'Tbilisi',
                },
            ],
        },
        {
            code: 'DE',
            id: 2249,
            name: 'Germany',
            states: [
                {
                    code: 'BW',
                    name: 'Baden-Württemberg',
                },
                {
                    code: 'BY',
                    name: 'Bayern',
                },
                {
                    code: 'BE',
                    name: 'Berlin',
                },
                {
                    code: 'BB',
                    name: 'Brandenburg',
                },
                {
                    code: 'HB',
                    name: 'Bremen',
                },
                {
                    code: 'HH',
                    name: 'Hamburg',
                },
                {
                    code: 'HE',
                    name: 'Hessen',
                },
                {
                    code: 'MV',
                    name: 'Mecklenburg-Vorpommern',
                },
                {
                    code: 'NI',
                    name: 'Niedersachsen',
                },
                {
                    code: 'NW',
                    name: 'Nordrhein-Westfalen',
                },
                {
                    code: 'RP',
                    name: 'Rheinland-Pfalz',
                },
                {
                    code: 'SL',
                    name: 'Saarland',
                },
                {
                    code: 'SN',
                    name: 'Sachsen',
                },
                {
                    code: 'ST',
                    name: 'Sachsen-Anhalt',
                },
                {
                    code: 'SH',
                    name: 'Schleswig-Holstein',
                },
                {
                    code: 'TH',
                    name: 'Thüringen',
                },
            ],
        },
        {
            code: 'GH',
            id: 2250,
            name: 'Ghana',
            states: [
                {
                    code: 'GH02',
                    name: 'Ashanti',
                },
                {
                    code: 'GH03',
                    name: 'Brong-Ahafo',
                },
                {
                    code: 'GH04',
                    name: 'Central',
                },
                {
                    code: 'GH05',
                    name: 'Eastern',
                },
                {
                    code: 'GH01',
                    name: 'Greater Accra',
                },
                {
                    code: 'GH06',
                    name: 'Northern',
                },
                {
                    code: 'GH10',
                    name: 'Upper East',
                },
                {
                    code: 'GH11',
                    name: 'Upper West',
                },
                {
                    code: 'GH08',
                    name: 'Volta',
                },
                {
                    code: 'GH09',
                    name: 'Western',
                },
            ],
        },
        {
            code: 'G999',
            id: 2390,
            name: 'Gibraltar',
            states: [
                {
                    code: 'GI.GI',
                    name: 'Gibraltar',
                },
            ],
        },
        {
            code: 'GR',
            id: 2251,
            name: 'Greece',
            states: [
                {
                    code: '13',
                    name: 'Achaïa',
                },
                {
                    code: '69',
                    name: 'Agio Oros',
                },
                {
                    code: '01',
                    name: 'Aitolia kai Akarnania',
                },
                {
                    code: '11',
                    name: 'Argolida',
                },
                {
                    code: '12',
                    name: 'Arkadia',
                },
                {
                    code: '31',
                    name: 'Arta',
                },
                {
                    code: 'A1',
                    name: 'Attiki',
                },
                {
                    code: '64',
                    name: 'Chalkidiki',
                },
                {
                    code: '94',
                    name: 'Chania',
                },
                {
                    code: '85',
                    name: 'Chios',
                },
                {
                    code: '81',
                    name: 'Dodekanisos',
                },
                {
                    code: '52',
                    name: 'Drama',
                },
                {
                    code: '71',
                    name: 'Evros',
                },
                {
                    code: '05',
                    name: 'Evrytania',
                },
                {
                    code: '04',
                    name: 'Evvoia',
                },
                {
                    code: '63',
                    name: 'Florina',
                },
                {
                    code: '07',
                    name: 'Fokida',
                },
                {
                    code: '06',
                    name: 'Fthiotida',
                },
                {
                    code: '51',
                    name: 'Grevena',
                },
                {
                    code: '14',
                    name: 'Ileia',
                },
                {
                    code: '53',
                    name: 'Imathia',
                },
                {
                    code: '33',
                    name: 'Ioannina',
                },
                {
                    code: '91',
                    name: 'Irakleio',
                },
                {
                    code: '41',
                    name: 'Karditsa',
                },
                {
                    code: '56',
                    name: 'Kastoria',
                },
                {
                    code: '55',
                    name: 'Kavala',
                },
                {
                    code: '23',
                    name: 'Kefallonia',
                },
                {
                    code: '22',
                    name: 'Kerkyra',
                },
                {
                    code: '57',
                    name: 'Kilkis',
                },
                {
                    code: '15',
                    name: 'Korinthia',
                },
                {
                    code: '58',
                    name: 'Kozani',
                },
                {
                    code: '82',
                    name: 'Kyklades',
                },
                {
                    code: '16',
                    name: 'Lakonia',
                },
                {
                    code: '42',
                    name: 'Larisa',
                },
                {
                    code: '92',
                    name: 'Lasithi',
                },
                {
                    code: '24',
                    name: 'Lefkada',
                },
                {
                    code: '83',
                    name: 'Lesvos',
                },
                {
                    code: '43',
                    name: 'Magnisia',
                },
                {
                    code: '17',
                    name: 'Messinia',
                },
                {
                    code: '59',
                    name: 'Pella',
                },
                {
                    code: '61',
                    name: 'Pieria',
                },
                {
                    code: '34',
                    name: 'Preveza',
                },
                {
                    code: '93',
                    name: 'Rethymno',
                },
                {
                    code: '73',
                    name: 'Rodopi',
                },
                {
                    code: '84',
                    name: 'Samos',
                },
                {
                    code: '62',
                    name: 'Serres',
                },
                {
                    code: '32',
                    name: 'Thesprotia',
                },
                {
                    code: '54',
                    name: 'Thessaloniki',
                },
                {
                    code: '44',
                    name: 'Trikala',
                },
                {
                    code: '03',
                    name: 'Voiotia',
                },
                {
                    code: '72',
                    name: 'Xanthi',
                },
                {
                    code: '21',
                    name: 'Zakynthos',
                },
            ],
        },
        {
            code: 'GL',
            id: 2252,
            name: 'Greenland',
            states: [],
        },
        {
            code: 'GD',
            id: 2253,
            name: 'Grenada',
            states: [],
        },
        {
            code: 'GP',
            id: 2419,
            name: 'Guadeloupe',
            states: [],
        },
        {
            code: 'GU',
            id: 2376,
            name: 'Guam',
            states: [],
        },
        {
            code: 'GT',
            id: 2371,
            name: 'Guatemala',
            states: [
                {
                    code: 'GT01',
                    name: 'Alta Verapaz',
                },
                {
                    code: 'GT02',
                    name: 'Baja Verapaz',
                },
                {
                    code: 'GT03',
                    name: 'Chimaltenango',
                },
                {
                    code: 'GT04',
                    name: 'Chiquimula',
                },
                {
                    code: 'GT05',
                    name: 'El Progreso',
                },
                {
                    code: 'GT06',
                    name: 'Escuintla',
                },
                {
                    code: 'GT07',
                    name: 'Guatemala',
                },
                {
                    code: 'GT08',
                    name: 'Huehuetenango',
                },
                {
                    code: 'GT09',
                    name: 'Izabal',
                },
                {
                    code: 'GT10',
                    name: 'Jalapa',
                },
                {
                    code: 'GT11',
                    name: 'Jutiapa',
                },
                {
                    code: 'GT12',
                    name: 'Petén',
                },
                {
                    code: 'GT13',
                    name: 'Quetzaltenango',
                },
                {
                    code: 'GT14',
                    name: 'Quiché',
                },
                {
                    code: 'GT15',
                    name: 'Retalhuleu',
                },
                {
                    code: 'GT16',
                    name: 'Sacatepéquez',
                },
                {
                    code: 'GT17',
                    name: 'San Marcos',
                },
                {
                    code: 'GT18',
                    name: 'Santa Rosa',
                },
                {
                    code: 'GT19',
                    name: 'Sololá',
                },
                {
                    code: 'GT20',
                    name: 'Suchitepéquez',
                },
                {
                    code: 'GT21',
                    name: 'Totonicapán',
                },
                {
                    code: 'GT22',
                    name: 'Zacapa',
                },
            ],
        },
        {
            code: 'GG',
            id: 2420,
            name: 'Guernsey',
            states: [],
        },
        {
            code: 'GN',
            id: 2255,
            name: 'Guinea',
            states: [
                {
                    code: 'GV01',
                    name: 'Beyla',
                },
                {
                    code: 'GV02',
                    name: 'Boffa',
                },
                {
                    code: 'GV03',
                    name: 'Boké',
                },
                {
                    code: 'GV04',
                    name: 'Conakry',
                },
                {
                    code: 'GV30',
                    name: 'Coyah',
                },
                {
                    code: 'GV05',
                    name: 'Dabola',
                },
                {
                    code: 'GV06',
                    name: 'Dalaba',
                },
                {
                    code: 'GV07',
                    name: 'Dinguiraye',
                },
                {
                    code: 'GV31',
                    name: 'Dubréka',
                },
                {
                    code: 'GV09',
                    name: 'Faranah',
                },
                {
                    code: 'GV10',
                    name: 'Forécariah',
                },
                {
                    code: 'GV11',
                    name: 'Fria',
                },
                {
                    code: 'GV12',
                    name: 'Gaoual',
                },
                {
                    code: 'GV13',
                    name: 'Guéckédou',
                },
                {
                    code: 'GV32',
                    name: 'Kankan',
                },
                {
                    code: 'GV15',
                    name: 'Kérouané',
                },
                {
                    code: 'GV16',
                    name: 'Kindia',
                },
                {
                    code: 'GV17',
                    name: 'Kissidougou',
                },
                {
                    code: 'GV33',
                    name: 'Koubia',
                },
                {
                    code: 'GV18',
                    name: 'Koundara',
                },
                {
                    code: 'GV19',
                    name: 'Kouroussa',
                },
                {
                    code: 'GV34',
                    name: 'Labé',
                },
                {
                    code: 'GV35',
                    name: 'Lélouma',
                },
                {
                    code: 'GV36',
                    name: 'Lola',
                },
                {
                    code: 'GV21',
                    name: 'Macenta',
                },
                {
                    code: 'GV22',
                    name: 'Mali',
                },
                {
                    code: 'GV23',
                    name: 'Mamou',
                },
                {
                    code: 'GV37',
                    name: 'Mandiana',
                },
                {
                    code: 'GV38',
                    name: 'Nzérékoré',
                },
                {
                    code: 'GV25',
                    name: 'Pita',
                },
                {
                    code: 'GV39',
                    name: 'Siguiri',
                },
                {
                    code: 'GV27',
                    name: 'Télimélé',
                },
                {
                    code: 'GV28',
                    name: 'Tougué',
                },
                {
                    code: 'GV29',
                    name: 'Yomou',
                },
            ],
        },
        {
            code: 'GW',
            id: 2256,
            name: 'Guinea-Bissau',
            states: [
                {
                    code: 'PU01',
                    name: 'Bafatá',
                },
                {
                    code: 'PU12',
                    name: 'Biombo',
                },
                {
                    code: 'PU11',
                    name: 'Bissau',
                },
                {
                    code: 'PU05',
                    name: 'Bolama',
                },
                {
                    code: 'PU06',
                    name: 'Cacheu',
                },
                {
                    code: 'PU10',
                    name: 'Gabú',
                },
                {
                    code: 'PU04',
                    name: 'Oio',
                },
                {
                    code: 'PU02',
                    name: 'Quinara',
                },
                {
                    code: 'PU07',
                    name: 'Tombali',
                },
            ],
        },
        {
            code: 'GY',
            id: 2257,
            name: 'Guyana',
            states: [
                {
                    code: 'GY10',
                    name: 'Barima-Waini',
                },
                {
                    code: 'GY11',
                    name: 'Cuyuni-Mazaruni',
                },
                {
                    code: 'GY12',
                    name: 'Demerara-Mahaica',
                },
                {
                    code: 'GY13',
                    name: 'East Berbice-Corentyne',
                },
                {
                    code: 'GY14',
                    name: 'Essequibo Islands-West Demerara',
                },
                {
                    code: 'GY15',
                    name: 'Mahaica-Berbice',
                },
                {
                    code: 'GY16',
                    name: 'Pomeroon-Supenaam',
                },
                {
                    code: 'GY17',
                    name: 'Potaro-Siparuni',
                },
                {
                    code: 'GY18',
                    name: 'Upper Demerara-Berbice',
                },
                {
                    code: 'GY19',
                    name: 'Upper Takutu-Upper Essequibo',
                },
            ],
        },
        {
            code: 'HT',
            id: 2258,
            name: 'Haiti',
            states: [
                {
                    code: 'HA07',
                    name: 'Centre',
                },
                {
                    code: 'HA14',
                    name: "Grand' Anse",
                },
                {
                    code: 'HA06',
                    name: "L'Artibonite",
                },
                {
                    code: 'HA15',
                    name: 'Nippes',
                },
                {
                    code: 'HA10',
                    name: 'Nord-Est',
                },
                {
                    code: 'HA03',
                    name: 'Nord-Ouest',
                },
                {
                    code: 'HA09',
                    name: 'Nord',
                },
                {
                    code: 'HA11',
                    name: 'Ouest',
                },
                {
                    code: 'HA13',
                    name: 'Sud-Est',
                },
                {
                    code: 'HA12',
                    name: 'Sud',
                },
            ],
        },
        {
            code: 'HM',
            id: 2421,
            name: 'Heard and McDonald Islands',
            states: [],
        },
        {
            code: 'VA',
            id: 2362,
            name: 'Holy See (Vatican City State)',
            states: [],
        },
        {
            code: 'HN',
            id: 2259,
            name: 'Honduras',
            states: [
                {
                    code: 'HO01',
                    name: 'Atlántida',
                },
                {
                    code: 'HO02',
                    name: 'Choluteca',
                },
                {
                    code: 'HO03',
                    name: 'Colón',
                },
                {
                    code: 'HO04',
                    name: 'Comayagua',
                },
                {
                    code: 'HO05',
                    name: 'Copán',
                },
                {
                    code: 'HO06',
                    name: 'Cortés',
                },
                {
                    code: 'HO07',
                    name: 'El Paraíso',
                },
                {
                    code: 'HO08',
                    name: 'Francisco Morazán',
                },
                {
                    code: 'HO09',
                    name: 'Gracias a Dios',
                },
                {
                    code: 'HO10',
                    name: 'Intibucá',
                },
                {
                    code: 'HO11',
                    name: 'Islas de la Bahía',
                },
                {
                    code: 'HO12',
                    name: 'La Paz',
                },
                {
                    code: 'HO13',
                    name: 'Lempira',
                },
                {
                    code: 'HO14',
                    name: 'Ocotepeque',
                },
                {
                    code: 'HO15',
                    name: 'Olancho',
                },
                {
                    code: 'HO16',
                    name: 'Santa Bárbara',
                },
                {
                    code: 'HO17',
                    name: 'Valle',
                },
                {
                    code: 'HO18',
                    name: 'Yoro',
                },
            ],
        },
        {
            code: 'HK',
            id: 2377,
            name: 'Hong Kong',
            states: [
                {
                    code: 'HK001',
                    name: 'Hong Kong Island',
                },
                {
                    code: 'HK002',
                    name: 'Kowloon',
                },
                {
                    code: 'HK003',
                    name: 'New Territories',
                },
            ],
        },
        {
            code: 'HU',
            id: 2260,
            name: 'Hungary',
            states: [
                {
                    code: 'BK',
                    name: 'Bács-Kiskun',
                },
                {
                    code: 'BA',
                    name: 'Baranya',
                },
                {
                    code: 'BE',
                    name: 'Békés',
                },
                {
                    code: 'BC',
                    name: 'Békéscsaba',
                },
                {
                    code: 'BZ',
                    name: 'Borsod-Abaúj-Zemplén',
                },
                {
                    code: 'BU',
                    name: 'Budapest',
                },
                {
                    code: 'CS',
                    name: 'Csongrád',
                },
                {
                    code: 'DE',
                    name: 'Debrecen',
                },
                {
                    code: 'DU',
                    name: 'Dunaújváros',
                },
                {
                    code: 'EG',
                    name: 'Eger',
                },
                {
                    code: 'ER',
                    name: 'Erd',
                },
                {
                    code: 'FE',
                    name: 'Fejér',
                },
                {
                    code: 'GY',
                    name: 'Gyor',
                },
                {
                    code: 'GS',
                    name: 'Gyor-Moson-Sopron',
                },
                {
                    code: 'HB',
                    name: 'Hajdú-Bihar',
                },
                {
                    code: 'HE',
                    name: 'Heves',
                },
                {
                    code: 'HV',
                    name: 'Hódmezovásárhely',
                },
                {
                    code: 'JN',
                    name: 'Jász-Nagykun-Szolnok',
                },
                {
                    code: 'KV',
                    name: 'Kaposvár',
                },
                {
                    code: 'KM',
                    name: 'Kecskemét',
                },
                {
                    code: 'KE',
                    name: 'Komárom-Esztergom',
                },
                {
                    code: 'MI',
                    name: 'Miskolc',
                },
                {
                    code: 'NK',
                    name: 'Nagykanizsa',
                },
                {
                    code: 'NO',
                    name: 'Nógrád',
                },
                {
                    code: 'NY',
                    name: 'Nyíregyháza',
                },
                {
                    code: 'PS',
                    name: 'Pécs',
                },
                {
                    code: 'PE',
                    name: 'Pest',
                },
                {
                    code: 'ST',
                    name: 'Salgótarján',
                },
                {
                    code: 'SO',
                    name: 'Somogy',
                },
                {
                    code: 'SN',
                    name: 'Sopron',
                },
                {
                    code: 'SZ',
                    name: 'Szabolcs-Szatmár-Bereg',
                },
                {
                    code: 'SD',
                    name: 'Szeged',
                },
                {
                    code: 'SF',
                    name: 'Székesfehérvár',
                },
                {
                    code: 'SS',
                    name: 'Szekszárd',
                },
                {
                    code: 'SK',
                    name: 'Szolnok',
                },
                {
                    code: 'SH',
                    name: 'Szombathely',
                },
                {
                    code: 'TB',
                    name: 'Tatabánya',
                },
                {
                    code: 'TO',
                    name: 'Tolna',
                },
                {
                    code: 'VA',
                    name: 'Vas',
                },
                {
                    code: 'VE',
                    name: 'Veszprém',
                },
                {
                    code: 'VM',
                    name: 'Veszprém City',
                },
                {
                    code: 'ZA',
                    name: 'Zala',
                },
                {
                    code: 'ZE',
                    name: 'Zalaegerszeg',
                },
            ],
        },
        {
            code: 'IS',
            id: 2261,
            name: 'Iceland',
            states: [
                {
                    code: '7',
                    name: 'Austurland',
                },
                {
                    code: '1',
                    name: 'Höfuðborgarsvæði utan Reykjavíkur',
                },
                {
                    code: '6',
                    name: 'Norðurland eystra',
                },
                {
                    code: '5',
                    name: 'Norðurland vestra',
                },
                {
                    code: '0',
                    name: 'Reykjavík',
                },
                {
                    code: '8',
                    name: 'Suðurland',
                },
                {
                    code: '2',
                    name: 'Suðurnes',
                },
                {
                    code: '4',
                    name: 'Vestfirðir',
                },
                {
                    code: '3',
                    name: 'Vesturland',
                },
            ],
        },
        {
            code: 'IN',
            id: 2262,
            name: 'India',
            states: [
                {
                    code: 'AN',
                    name: 'Andaman and Nicobar Islands',
                },
                {
                    code: 'AP',
                    name: 'Andhra Pradesh',
                },
                {
                    code: 'AR',
                    name: 'Arunachal Pradesh',
                },
                {
                    code: 'AS',
                    name: 'Assam',
                },
                {
                    code: 'BR',
                    name: 'Bihar',
                },
                {
                    code: 'CH',
                    name: 'Chandigarh',
                },
                {
                    code: 'CT',
                    name: 'Chhattisgarh',
                },
                {
                    code: 'DN',
                    name: 'Dadra and Nagar Haveli',
                },
                {
                    code: 'DD',
                    name: 'Daman and Diu',
                },
                {
                    code: 'DL',
                    name: 'Delhi',
                },
                {
                    code: 'GA',
                    name: 'Goa',
                },
                {
                    code: 'GJ',
                    name: 'Gujarat',
                },
                {
                    code: 'HR',
                    name: 'Haryana',
                },
                {
                    code: 'HP',
                    name: 'Himachal Pradesh',
                },
                {
                    code: 'JK',
                    name: 'Jammu and Kashmir',
                },
                {
                    code: 'JH',
                    name: 'Jharkhand',
                },
                {
                    code: 'KA',
                    name: 'Karnataka',
                },
                {
                    code: 'KL',
                    name: 'Kerala',
                },
                {
                    code: 'LD',
                    name: 'Lakshadweep',
                },
                {
                    code: 'MP',
                    name: 'Madhya Pradesh',
                },
                {
                    code: 'MH',
                    name: 'Maharashtra',
                },
                {
                    code: 'MN',
                    name: 'Manipur',
                },
                {
                    code: 'ML',
                    name: 'Meghalaya',
                },
                {
                    code: 'MZ',
                    name: 'Mizoram',
                },
                {
                    code: 'NL',
                    name: 'Nagaland',
                },
                {
                    code: 'OR',
                    name: 'Orissa',
                },
                {
                    code: 'PY',
                    name: 'Pondicherry',
                },
                {
                    code: 'PB',
                    name: 'Punjab',
                },
                {
                    code: 'RJ',
                    name: 'Rajasthan',
                },
                {
                    code: 'SK',
                    name: 'Sikkim',
                },
                {
                    code: 'TN',
                    name: 'Tamil Nadu',
                },
                {
                    code: 'TG',
                    name: 'Telangana',
                },
                {
                    code: 'TR',
                    name: 'Tripura',
                },
                {
                    code: 'UP',
                    name: 'Uttar Pradesh',
                },
                {
                    code: 'UL',
                    name: 'Uttaranchal',
                },
                {
                    code: 'WB',
                    name: 'West Bengal',
                },
            ],
        },
        {
            code: 'ID',
            id: 2263,
            name: 'Indonesia',
            states: [
                {
                    code: 'AC',
                    name: 'Aceh',
                },
                {
                    code: 'BA',
                    name: 'Bali',
                },
                {
                    code: 'BB',
                    name: 'Bangka Belitung',
                },
                {
                    code: 'BT',
                    name: 'Banten',
                },
                {
                    code: 'BE',
                    name: 'Bengkulu',
                },
                {
                    code: 'GO',
                    name: 'Gorontalo',
                },
                {
                    code: 'JK',
                    name: 'Jakarta Raya',
                },
                {
                    code: 'JA',
                    name: 'Jambi',
                },
                {
                    code: 'JB',
                    name: 'Jawa Barat',
                },
                {
                    code: 'JT',
                    name: 'Jawa Tengah',
                },
                {
                    code: 'JI',
                    name: 'Jawa Timur',
                },
                {
                    code: 'KB',
                    name: 'Kalimantan Barat',
                },
                {
                    code: 'KS',
                    name: 'Kalimantan Selatan',
                },
                {
                    code: 'KT',
                    name: 'Kalimantan Tengah',
                },
                {
                    code: 'KI',
                    name: 'Kalimantan Timur',
                },
                {
                    code: 'KR',
                    name: 'Kepulauan Riau',
                },
                {
                    code: 'LA',
                    name: 'Lampung',
                },
                {
                    code: 'MA',
                    name: 'Maluku',
                },
                {
                    code: 'MU',
                    name: 'Maluku Utara',
                },
                {
                    code: 'NB',
                    name: 'Nusa Tenggara Barat',
                },
                {
                    code: 'NT',
                    name: 'Nusa Tenggara Timur',
                },
                {
                    code: 'PA',
                    name: 'Papua',
                },
                {
                    code: 'PB',
                    name: 'Papua Barat',
                },
                {
                    code: 'RI',
                    name: 'Riau',
                },
                {
                    code: 'SR',
                    name: 'Sulawesi Barat',
                },
                {
                    code: 'SN',
                    name: 'Sulawesi Selatan',
                },
                {
                    code: 'ST',
                    name: 'Sulawesi Tengah',
                },
                {
                    code: 'SG',
                    name: 'Sulawesi Tenggara',
                },
                {
                    code: 'SA',
                    name: 'Sulawesi Utara',
                },
                {
                    code: 'SB',
                    name: 'Sumatera Barat',
                },
                {
                    code: 'SS',
                    name: 'Sumatera Selatan',
                },
                {
                    code: 'SU',
                    name: 'Sumatera Utara',
                },
                {
                    code: 'YO',
                    name: 'Yogyakarta',
                },
            ],
        },
        {
            code: 'IR',
            id: 2264,
            name: 'Iran; Islamic Republic of',
            states: [
                {
                    code: 'IR44',
                    name: 'Alborz',
                },
                {
                    code: 'IR32',
                    name: 'Ardebil',
                },
                {
                    code: 'IR22',
                    name: 'Bushehr',
                },
                {
                    code: 'IR03',
                    name: 'Chahar Mahall and Bakhtiari',
                },
                {
                    code: 'IR33',
                    name: 'East Azarbaijan',
                },
                {
                    code: 'IR28',
                    name: 'Esfahan',
                },
                {
                    code: 'IR07',
                    name: 'Fars',
                },
                {
                    code: 'IR08',
                    name: 'Gilan',
                },
                {
                    code: 'IR37',
                    name: 'Golestan',
                },
                {
                    code: 'IR09',
                    name: 'Hamadan',
                },
                {
                    code: 'IR11',
                    name: 'Hormozgan',
                },
                {
                    code: 'IR42',
                    name: 'IRazavi Khorasan',
                },
                {
                    code: 'IR10',
                    name: 'Ilam',
                },
                {
                    code: 'IR29',
                    name: 'Kerman',
                },
                {
                    code: 'IR13',
                    name: 'Kermanshah',
                },
                {
                    code: 'IR15',
                    name: 'Khuzestan',
                },
                {
                    code: 'IR05',
                    name: 'Kohgiluyeh and Buyer Ahmad',
                },
                {
                    code: 'IR16',
                    name: 'Kordestan',
                },
                {
                    code: 'IR23',
                    name: 'Lorestan',
                },
                {
                    code: 'IR34',
                    name: 'Markazi',
                },
                {
                    code: 'IR35',
                    name: 'Mazandaran',
                },
                {
                    code: 'IR43',
                    name: 'North Khorasan',
                },
                {
                    code: 'IR38',
                    name: 'Qazvin',
                },
                {
                    code: 'IR39',
                    name: 'Qom',
                },
                {
                    code: 'IR25',
                    name: 'Semnan',
                },
                {
                    code: 'IR04',
                    name: 'Sistan and Baluchestan',
                },
                {
                    code: 'IR41',
                    name: 'South Khorasan',
                },
                {
                    code: 'IR26',
                    name: 'Tehran',
                },
                {
                    code: 'IR01',
                    name: 'West Azarbaijan',
                },
                {
                    code: 'IR40',
                    name: 'Yazd',
                },
                {
                    code: 'IR36',
                    name: 'Zanjan',
                },
            ],
        },
        {
            code: 'IQ',
            id: 2265,
            name: 'Iraq',
            states: [
                {
                    code: 'IZ01',
                    name: 'Al-Anbar',
                },
                {
                    code: 'IZ02',
                    name: 'Al-Basrah',
                },
                {
                    code: 'IZ03',
                    name: 'Al-Muthanna',
                },
                {
                    code: 'IZ04',
                    name: 'Al-Qadisiyah',
                },
                {
                    code: 'IZ17',
                    name: 'An-Najaf',
                },
                {
                    code: 'IZ11',
                    name: 'Arbil',
                },
                {
                    code: 'IZ05',
                    name: 'As-Sulaymaniyah',
                },
                {
                    code: 'IZ13',
                    name: "At-Ta'mim",
                },
                {
                    code: 'IZ06',
                    name: 'Babil',
                },
                {
                    code: 'IZ07',
                    name: 'Baghdad',
                },
                {
                    code: 'IZ08',
                    name: 'Dahuk',
                },
                {
                    code: 'IZ09',
                    name: 'Dhi Qar',
                },
                {
                    code: 'IZ10',
                    name: 'Diyala',
                },
                {
                    code: 'IZ12',
                    name: 'Karbala',
                },
                {
                    code: 'IZ14',
                    name: 'Maysan',
                },
                {
                    code: 'IZ15',
                    name: 'Ninawa',
                },
                {
                    code: 'IZ18',
                    name: 'Salah ad-Din',
                },
                {
                    code: 'IZ16',
                    name: 'Wasit',
                },
            ],
        },
        {
            code: 'IE',
            id: 2266,
            name: 'Ireland',
            states: [
                {
                    code: 'CW',
                    name: 'Carlow',
                },
                {
                    code: 'CN',
                    name: 'Cavan',
                },
                {
                    code: 'CE',
                    name: 'Clare',
                },
                {
                    code: 'C',
                    name: 'Connacht',
                },
                {
                    code: 'CO',
                    name: 'Cork',
                },
                {
                    code: 'DL',
                    name: 'Donegal',
                },
                {
                    code: 'D',
                    name: 'Dublin',
                },
                {
                    code: 'G',
                    name: 'Galway',
                },
                {
                    code: 'KY',
                    name: 'Kerry',
                },
                {
                    code: 'KE',
                    name: 'Kildare',
                },
                {
                    code: 'KK',
                    name: 'Kilkenny',
                },
                {
                    code: 'LS',
                    name: 'Laois',
                },
                {
                    code: 'L',
                    name: 'Leinster',
                },
                {
                    code: 'LM',
                    name: 'Leitrim',
                },
                {
                    code: 'LK',
                    name: 'Limerick',
                },
                {
                    code: 'LD',
                    name: 'Longford',
                },
                {
                    code: 'LH',
                    name: 'Louth',
                },
                {
                    code: 'MO',
                    name: 'Mayo',
                },
                {
                    code: 'MH',
                    name: 'Meath',
                },
                {
                    code: 'MN',
                    name: 'Monaghan',
                },
                {
                    code: 'M',
                    name: 'Munster',
                },
                {
                    code: 'OY',
                    name: 'Offaly',
                },
                {
                    code: 'RN',
                    name: 'Roscommon',
                },
                {
                    code: 'SO',
                    name: 'Sligo',
                },
                {
                    code: 'TA',
                    name: 'Tipperary',
                },
                {
                    code: 'U',
                    name: 'Ulster',
                },
                {
                    code: 'WD',
                    name: 'Waterford',
                },
                {
                    code: 'WH',
                    name: 'Westmeath',
                },
                {
                    code: 'WX',
                    name: 'Wexford',
                },
                {
                    code: 'WW',
                    name: 'Wicklow',
                },
            ],
        },
        {
            code: 'IM',
            id: 2445,
            name: 'Isle of Man',
            states: [],
        },
        {
            code: 'IL',
            id: 2267,
            name: 'Israel',
            states: [
                {
                    code: 'IS01',
                    name: 'HaDarom',
                },
                {
                    code: 'IS02',
                    name: 'HaMerkaz',
                },
                {
                    code: 'IS03',
                    name: 'HaZafon',
                },
                {
                    code: 'IS04',
                    name: 'Haifa',
                },
                {
                    code: 'IS06',
                    name: 'Jerusalem',
                },
                {
                    code: 'IS05',
                    name: 'Tel Aviv',
                },
            ],
        },
        {
            code: 'IT',
            id: 2268,
            name: 'Italy',
            states: [
                {
                    code: '65',
                    name: 'Abruzzo',
                },
                {
                    code: 'AG',
                    name: 'Agrigento',
                },
                {
                    code: 'AL',
                    name: 'Alessandria',
                },
                {
                    code: 'AN',
                    name: 'Ancona',
                },
                {
                    code: 'AO',
                    name: 'Aosta',
                },
                {
                    code: 'AR',
                    name: 'Arezzo',
                },
                {
                    code: 'AP',
                    name: 'Ascoli Piceno',
                },
                {
                    code: 'AT',
                    name: 'Asti',
                },
                {
                    code: 'AV',
                    name: 'Avellino',
                },
                {
                    code: 'BA',
                    name: 'Bari',
                },
                {
                    code: 'BT',
                    name: 'Barletta-Andria-Trani',
                },
                {
                    code: '77',
                    name: 'Basilicata',
                },
                {
                    code: 'BL',
                    name: 'Belluno',
                },
                {
                    code: 'BN',
                    name: 'Benevento',
                },
                {
                    code: 'BG',
                    name: 'Bergamo',
                },
                {
                    code: 'BI',
                    name: 'Biella',
                },
                {
                    code: 'BO',
                    name: 'Bologna',
                },
                {
                    code: 'BZ',
                    name: 'Bolzano',
                },
                {
                    code: 'BS',
                    name: 'Brescia',
                },
                {
                    code: 'BR',
                    name: 'Brindisi',
                },
                {
                    code: 'CA',
                    name: 'Cagliari',
                },
                {
                    code: '78',
                    name: 'Calabria',
                },
                {
                    code: 'CL',
                    name: 'Caltanissetta',
                },
                {
                    code: '72',
                    name: 'Campania',
                },
                {
                    code: 'CB',
                    name: 'Campobasso',
                },
                {
                    code: 'CI',
                    name: 'Carbonia-Iglesias',
                },
                {
                    code: 'CE',
                    name: 'Caserta',
                },
                {
                    code: 'CT',
                    name: 'Catania',
                },
                {
                    code: 'CZ',
                    name: 'Catanzaro',
                },
                {
                    code: 'CH',
                    name: 'Chieti',
                },
                {
                    code: 'CO',
                    name: 'Como',
                },
                {
                    code: 'CS',
                    name: 'Cosenza',
                },
                {
                    code: 'CR',
                    name: 'Cremona',
                },
                {
                    code: 'KR',
                    name: 'Crotone',
                },
                {
                    code: 'CN',
                    name: 'Cuneo',
                },
                {
                    code: '45',
                    name: 'Emilia-Romagna',
                },
                {
                    code: 'EN',
                    name: 'Enna',
                },
                {
                    code: 'FM',
                    name: 'Fermo',
                },
                {
                    code: 'FE',
                    name: 'Ferrara',
                },
                {
                    code: 'FI',
                    name: 'Firenze',
                },
                {
                    code: 'FG',
                    name: 'Foggia',
                },
                {
                    code: 'FC',
                    name: 'Forli-Cesena',
                },
                {
                    code: '36',
                    name: 'Friuli-Venezia Giulia',
                },
                {
                    code: 'FR',
                    name: 'Frosinone',
                },
                {
                    code: 'GE',
                    name: 'Genova',
                },
                {
                    code: 'GO',
                    name: 'Gorizia',
                },
                {
                    code: 'GR',
                    name: 'Grosseto',
                },
                {
                    code: 'IM',
                    name: 'Imperia',
                },
                {
                    code: 'IS',
                    name: 'Isernia',
                },
                {
                    code: 'AQ',
                    name: "L'Aquila",
                },
                {
                    code: 'SP',
                    name: 'La Spezia',
                },
                {
                    code: 'LT',
                    name: 'Latina',
                },
                {
                    code: '62',
                    name: 'Lazio',
                },
                {
                    code: 'LE',
                    name: 'Lecce',
                },
                {
                    code: 'LC',
                    name: 'Lecco',
                },
                {
                    code: '42',
                    name: 'Liguria',
                },
                {
                    code: 'LI',
                    name: 'Livorno',
                },
                {
                    code: 'LO',
                    name: 'Lodi',
                },
                {
                    code: '25',
                    name: 'Lombardia',
                },
                {
                    code: 'LU',
                    name: 'Lucca',
                },
                {
                    code: 'MC',
                    name: 'Macerata',
                },
                {
                    code: 'MN',
                    name: 'Mantova',
                },
                {
                    code: '57',
                    name: 'Marche',
                },
                {
                    code: 'MS',
                    name: 'Massa-Carrara',
                },
                {
                    code: 'MT',
                    name: 'Matera',
                },
                {
                    code: 'VS',
                    name: 'Medio Campidano',
                },
                {
                    code: 'ME',
                    name: 'Messina',
                },
                {
                    code: 'MI',
                    name: 'Milano',
                },
                {
                    code: 'MO',
                    name: 'Modena',
                },
                {
                    code: '67',
                    name: 'Molise',
                },
                {
                    code: 'MB',
                    name: 'Monza e Brianza',
                },
                {
                    code: 'NA',
                    name: 'Napoli',
                },
                {
                    code: 'NO',
                    name: 'Novara',
                },
                {
                    code: 'NU',
                    name: 'Nuoro',
                },
                {
                    code: 'OG',
                    name: 'Ogliastra',
                },
                {
                    code: 'OT',
                    name: 'Olbia-Tempio',
                },
                {
                    code: 'OR',
                    name: 'Oristano',
                },
                {
                    code: 'PD',
                    name: 'Padova',
                },
                {
                    code: 'PA',
                    name: 'Palermo',
                },
                {
                    code: 'PR',
                    name: 'Parma',
                },
                {
                    code: 'PV',
                    name: 'Pavia',
                },
                {
                    code: 'PG',
                    name: 'Perugia',
                },
                {
                    code: 'PU',
                    name: 'Pesaro e Urbino',
                },
                {
                    code: 'PE',
                    name: 'Pescara',
                },
                {
                    code: 'PC',
                    name: 'Piacenza',
                },
                {
                    code: '21',
                    name: 'Piemonte',
                },
                {
                    code: 'PI',
                    name: 'Pisa',
                },
                {
                    code: 'PT',
                    name: 'Pistoia',
                },
                {
                    code: 'PN',
                    name: 'Pordenone',
                },
                {
                    code: 'PZ',
                    name: 'Potenza',
                },
                {
                    code: 'PO',
                    name: 'Prato',
                },
                {
                    code: '75',
                    name: 'Puglia',
                },
                {
                    code: 'RG',
                    name: 'Ragusa',
                },
                {
                    code: 'RA',
                    name: 'Ravenna',
                },
                {
                    code: 'RC',
                    name: 'Reggio Calabria',
                },
                {
                    code: 'RE',
                    name: 'Reggio Emilia',
                },
                {
                    code: 'RI',
                    name: 'Rieti',
                },
                {
                    code: 'RN',
                    name: 'Rimini',
                },
                {
                    code: 'RM',
                    name: 'Roma',
                },
                {
                    code: 'RO',
                    name: 'Rovigo',
                },
                {
                    code: 'SA',
                    name: 'Salerno',
                },
                {
                    code: '88',
                    name: 'Sardegna',
                },
                {
                    code: 'SS',
                    name: 'Sassari',
                },
                {
                    code: 'SV',
                    name: 'Savona',
                },
                {
                    code: '82',
                    name: 'Sicilia',
                },
                {
                    code: 'SI',
                    name: 'Siena',
                },
                {
                    code: 'SR',
                    name: 'Siracusa',
                },
                {
                    code: 'SO',
                    name: 'Sondrio',
                },
                {
                    code: 'TA',
                    name: 'Taranto',
                },
                {
                    code: 'TE',
                    name: 'Teramo',
                },
                {
                    code: 'TR',
                    name: 'Terni',
                },
                {
                    code: 'TO',
                    name: 'Torino',
                },
                {
                    code: '52',
                    name: 'Toscana',
                },
                {
                    code: 'TP',
                    name: 'Trapani',
                },
                {
                    code: '32',
                    name: 'Trentino-Alto Adige',
                },
                {
                    code: 'TN',
                    name: 'Trento',
                },
                {
                    code: 'TV',
                    name: 'Treviso',
                },
                {
                    code: 'TS',
                    name: 'Trieste',
                },
                {
                    code: 'UD',
                    name: 'Udine',
                },
                {
                    code: '55',
                    name: 'Umbria',
                },
                {
                    code: '23',
                    name: "Valle d'Aosta",
                },
                {
                    code: 'VA',
                    name: 'Varese',
                },
                {
                    code: '34',
                    name: 'Veneto',
                },
                {
                    code: 'VE',
                    name: 'Venezia',
                },
                {
                    code: 'VB',
                    name: 'Verbano-Cusio-Ossola',
                },
                {
                    code: 'VC',
                    name: 'Vercelli',
                },
                {
                    code: 'VR',
                    name: 'Verona',
                },
                {
                    code: 'VV',
                    name: 'Vibo Valentia',
                },
                {
                    code: 'VI',
                    name: 'Vicenza',
                },
                {
                    code: 'VT',
                    name: 'Viterbo',
                },
            ],
        },
        {
            code: 'JM',
            id: 2269,
            name: 'Jamaica',
            states: [
                {
                    code: 'JM01',
                    name: 'Clarendon',
                },
                {
                    code: 'JM02',
                    name: 'Hanover',
                },
                {
                    code: 'JM17',
                    name: 'Kingston',
                },
                {
                    code: 'JM04',
                    name: 'Manchester',
                },
                {
                    code: 'JM07',
                    name: 'Portland',
                },
                {
                    code: 'JM08',
                    name: 'Saint Andrew',
                },
                {
                    code: 'JM09',
                    name: 'Saint Ann',
                },
                {
                    code: 'JM10',
                    name: 'Saint Catherine',
                },
                {
                    code: 'JM11',
                    name: 'Saint Elizabeth',
                },
                {
                    code: 'JM12',
                    name: 'Saint James',
                },
                {
                    code: 'JM13',
                    name: 'Saint Mary',
                },
                {
                    code: 'JM14',
                    name: 'Saint Thomas',
                },
                {
                    code: 'JM15',
                    name: 'Trelawny',
                },
                {
                    code: 'JM16',
                    name: 'Westmoreland',
                },
            ],
        },
        {
            code: 'JP',
            id: 2270,
            name: 'Japan',
            states: [
                {
                    code: 'JP23',
                    name: 'Aichi',
                },
                {
                    code: 'JP05',
                    name: 'Akita',
                },
                {
                    code: 'JP02',
                    name: 'Aomori',
                },
                {
                    code: 'JP12',
                    name: 'Chiba',
                },
                {
                    code: 'JP38',
                    name: 'Ehime',
                },
                {
                    code: 'JP18',
                    name: 'Fukui',
                },
                {
                    code: 'JP40',
                    name: 'Fukuoka',
                },
                {
                    code: 'JP07',
                    name: 'Fukushima',
                },
                {
                    code: 'JP21',
                    name: 'Gifu',
                },
                {
                    code: 'JP10',
                    name: 'Gunma',
                },
                {
                    code: 'JP34',
                    name: 'Hiroshima',
                },
                {
                    code: 'JP01',
                    name: 'Hokkaido',
                },
                {
                    code: 'JP28',
                    name: 'Hyogo',
                },
                {
                    code: 'JP08',
                    name: 'Ibaraki',
                },
                {
                    code: 'JP17',
                    name: 'Ishikawa',
                },
                {
                    code: 'JP03',
                    name: 'Iwate',
                },
                {
                    code: 'JP37',
                    name: 'Kagawa',
                },
                {
                    code: 'JP46',
                    name: 'Kagoshima',
                },
                {
                    code: 'JP14',
                    name: 'Kanagawa',
                },
                {
                    code: 'JP39',
                    name: 'Kochi',
                },
                {
                    code: 'JP43',
                    name: 'Kumamoto',
                },
                {
                    code: 'JP26',
                    name: 'Kyoto',
                },
                {
                    code: 'JP24',
                    name: 'Mie',
                },
                {
                    code: 'JP04',
                    name: 'Miyagi',
                },
                {
                    code: 'JP45',
                    name: 'Miyazaki',
                },
                {
                    code: 'JP20',
                    name: 'Nagano',
                },
                {
                    code: 'JP42',
                    name: 'Nagasaki',
                },
                {
                    code: 'JP29',
                    name: 'Nara',
                },
                {
                    code: 'JP15',
                    name: 'Niigata',
                },
                {
                    code: 'JP44',
                    name: 'Oita',
                },
                {
                    code: 'JP33',
                    name: 'Okayama',
                },
                {
                    code: 'JP47',
                    name: 'Okinawa',
                },
                {
                    code: 'JP27',
                    name: 'Osaka',
                },
                {
                    code: 'JP41',
                    name: 'Saga',
                },
                {
                    code: 'JP11',
                    name: 'Saitama',
                },
                {
                    code: 'JP25',
                    name: 'Shiga',
                },
                {
                    code: 'JP32',
                    name: 'Shimane',
                },
                {
                    code: 'JP22',
                    name: 'Shizuoka',
                },
                {
                    code: 'JP09',
                    name: 'Tochigi',
                },
                {
                    code: 'JP36',
                    name: 'Tokushima',
                },
                {
                    code: 'JP13',
                    name: 'Tokyo',
                },
                {
                    code: 'JP31',
                    name: 'Tottori',
                },
                {
                    code: 'JP16',
                    name: 'Toyama',
                },
                {
                    code: 'JP30',
                    name: 'Wakayama',
                },
                {
                    code: 'JP06',
                    name: 'Yamagata',
                },
                {
                    code: 'JP35',
                    name: 'Yamaguchi',
                },
                {
                    code: 'JP19',
                    name: 'Yamanashi',
                },
            ],
        },
        {
            code: 'JE',
            id: 2422,
            name: 'Jersey',
            states: [],
        },
        {
            code: 'JO',
            id: 2271,
            name: 'Jordan',
            states: [
                {
                    code: 'JO01',
                    name: 'Ajlun',
                },
                {
                    code: 'JO02',
                    name: 'Amman',
                },
                {
                    code: 'JO03',
                    name: 'Aqaba',
                },
                {
                    code: 'JO04',
                    name: 'Balqa',
                },
                {
                    code: 'JO05',
                    name: 'Irbid',
                },
                {
                    code: 'JO06',
                    name: 'JarasJ',
                },
                {
                    code: 'JO07',
                    name: 'Karak',
                },
                {
                    code: 'JO08',
                    name: "Ma'an",
                },
                {
                    code: 'JO09',
                    name: 'Madaba',
                },
                {
                    code: 'JO10',
                    name: 'Mafraq',
                },
                {
                    code: 'JO11',
                    name: 'Tafilah',
                },
                {
                    code: 'JO12',
                    name: 'Zarqa',
                },
            ],
        },
        {
            code: 'KZ',
            id: 2272,
            name: 'Kazakhstan',
            states: [
                {
                    code: 'KZ01',
                    name: 'Almaty',
                },
                {
                    code: 'KZ02',
                    name: 'Almaty (City)',
                },
                {
                    code: 'KZ03',
                    name: 'Aqmola',
                },
                {
                    code: 'KZ04',
                    name: 'Aqtöbe',
                },
                {
                    code: 'KZ05',
                    name: 'Astana',
                },
                {
                    code: 'KZ06',
                    name: 'Atyrau',
                },
                {
                    code: 'KZ08',
                    name: 'Bayqonyr',
                },
                {
                    code: 'KZ15',
                    name: 'East Kazakhstan',
                },
                {
                    code: 'KZ09',
                    name: 'Mangghystau',
                },
                {
                    code: 'KZ16',
                    name: 'North Kazakhstan',
                },
                {
                    code: 'KZ11',
                    name: 'Pavlodar',
                },
                {
                    code: 'KZ12',
                    name: 'Qaraghandy',
                },
                {
                    code: 'KZ13',
                    name: 'Qostanay',
                },
                {
                    code: 'KZ14',
                    name: 'Qyzylorda',
                },
                {
                    code: 'KZ10',
                    name: 'South Kazakhstan',
                },
                {
                    code: 'KZ07',
                    name: 'West Kazakhstan',
                },
                {
                    code: 'KZ17',
                    name: 'Zhambyl',
                },
            ],
        },
        {
            code: 'KE',
            id: 2273,
            name: 'Kenya',
            states: [
                {
                    code: 'KE10',
                    name: 'Baringo',
                },
                {
                    code: 'KE11',
                    name: 'Bomet',
                },
                {
                    code: 'KE12',
                    name: 'Bungoma',
                },
                {
                    code: 'KE13',
                    name: 'Busia',
                },
                {
                    code: 'KE14',
                    name: 'Elgeyo Marakwet',
                },
                {
                    code: 'KE15',
                    name: 'Embu',
                },
                {
                    code: 'KE16',
                    name: 'Garissa',
                },
                {
                    code: 'KE17',
                    name: 'Homa Bay',
                },
                {
                    code: 'KE18',
                    name: 'Isiolo',
                },
                {
                    code: 'KE19',
                    name: 'Kajiado',
                },
                {
                    code: 'KE20',
                    name: 'Kakamega',
                },
                {
                    code: 'KE21',
                    name: 'Kericho',
                },
                {
                    code: 'KE22',
                    name: 'Kiambu',
                },
                {
                    code: 'KE23',
                    name: 'Kilifi',
                },
                {
                    code: 'KE24',
                    name: 'Kirinyaga',
                },
                {
                    code: 'KE25',
                    name: 'Kisii',
                },
                {
                    code: 'KE26',
                    name: 'Kisumu',
                },
                {
                    code: 'KE27',
                    name: 'Kitui',
                },
                {
                    code: 'KE28',
                    name: 'Kwale',
                },
                {
                    code: 'KE29',
                    name: 'Laikipia',
                },
                {
                    code: 'KE30',
                    name: 'Lamu',
                },
                {
                    code: 'KE31',
                    name: 'Machakos',
                },
                {
                    code: 'KE32',
                    name: 'Makueni',
                },
                {
                    code: 'KE33',
                    name: 'Mandera',
                },
                {
                    code: 'KE34',
                    name: 'Marsabit',
                },
                {
                    code: 'KE35',
                    name: 'Meru',
                },
                {
                    code: 'KE36',
                    name: 'Migori',
                },
                {
                    code: 'KE37',
                    name: 'Mombasa',
                },
                {
                    code: 'KE38',
                    name: 'Murang',
                },
                {
                    code: 'KE05',
                    name: 'Nairobi',
                },
                {
                    code: 'KE39',
                    name: 'Nakuru',
                },
                {
                    code: 'KE40',
                    name: 'Nandi',
                },
                {
                    code: 'KE41',
                    name: 'Narok',
                },
                {
                    code: 'KE42',
                    name: 'Nyamira',
                },
                {
                    code: 'KE43',
                    name: 'Nyandarua',
                },
                {
                    code: 'KE44',
                    name: 'Nyeri',
                },
                {
                    code: 'KE45',
                    name: 'Samburu',
                },
                {
                    code: 'KE46',
                    name: 'Siaya',
                },
                {
                    code: 'KE47',
                    name: 'Taita Taveta',
                },
                {
                    code: 'KE48',
                    name: 'Tana River',
                },
                {
                    code: 'KE49',
                    name: 'Tharaka Nithi',
                },
                {
                    code: 'KE50',
                    name: 'Trans Nzoia',
                },
                {
                    code: 'KE51',
                    name: 'Turkana',
                },
                {
                    code: 'KE52',
                    name: 'Uasin Gishu',
                },
                {
                    code: 'KE53',
                    name: 'Vihiga',
                },
                {
                    code: 'KE54',
                    name: 'Wajir',
                },
                {
                    code: 'KE55',
                    name: 'West Pokot',
                },
            ],
        },
        {
            code: 'KI',
            id: 2391,
            name: 'Kiribati',
            states: [],
        },
        {
            code: 'KP',
            id: 2274,
            name: "Korea; Democratic People's Republic Of (North)",
            states: [
                {
                    code: 'KN01',
                    name: 'Chagang-do',
                },
                {
                    code: 'KN17',
                    name: 'Hamgyong-bukto',
                },
                {
                    code: 'KN03',
                    name: 'Hamgyong-namdo',
                },
                {
                    code: 'KN07',
                    name: 'Hwanghae-bukto',
                },
                {
                    code: 'KN06',
                    name: 'Hwanghae-namdo',
                },
                {
                    code: 'KN09',
                    name: 'Kangwon-do',
                },
                {
                    code: 'KN18',
                    name: 'Najin Sonbong-si',
                },
                {
                    code: 'KN11',
                    name: "P'yongan-bukto",
                },
                {
                    code: 'KN15',
                    name: "P'yongan-namdo",
                },
                {
                    code: 'KN12',
                    name: "P'yongyang-si",
                },
                {
                    code: 'KN13',
                    name: 'Yanggang-do',
                },
            ],
        },
        {
            code: 'KR',
            id: 2275,
            name: 'Korea; Republic Of (South)',
            states: [
                {
                    code: 'KS10',
                    name: 'Busan',
                },
                {
                    code: 'KS05',
                    name: 'Chungcheongbuk-do',
                },
                {
                    code: 'KS17',
                    name: 'Chungcheongnam-do',
                },
                {
                    code: 'KS15',
                    name: 'Daegu',
                },
                {
                    code: 'KS19',
                    name: 'Daejeon',
                },
                {
                    code: 'KS06',
                    name: 'Gangwon-do',
                },
                {
                    code: 'KS18',
                    name: 'Gwangju',
                },
                {
                    code: 'KS13',
                    name: 'Gyeonggi-do',
                },
                {
                    code: 'KS14',
                    name: 'Gyeongsangbuk-do',
                },
                {
                    code: 'KS20',
                    name: 'Gyeongsangnam-do',
                },
                {
                    code: 'KS12',
                    name: 'Incheon',
                },
                {
                    code: 'KS01',
                    name: 'Jeju-do',
                },
                {
                    code: 'KS03',
                    name: 'Jeollabuk-do',
                },
                {
                    code: 'KS16',
                    name: 'Jeollanam-do',
                },
                {
                    code: 'KS22',
                    name: 'Sejong',
                },
                {
                    code: 'KS11',
                    name: 'Seoul',
                },
                {
                    code: 'KS21',
                    name: 'Ulsan',
                },
            ],
        },
        {
            code: 'KV',
            id: 2392,
            name: 'Kosovo',
            states: [],
        },
        {
            code: 'KW',
            id: 2276,
            name: 'Kuwait',
            states: [
                {
                    code: 'KU04',
                    name: 'Al Ahmadi',
                },
                {
                    code: 'KU07',
                    name: 'Al Farwaniyah',
                },
                {
                    code: 'KU05',
                    name: 'Al Jahrah',
                },
                {
                    code: 'KU02',
                    name: 'Al Kuwayt',
                },
                {
                    code: 'KU08',
                    name: 'Hawalli',
                },
                {
                    code: 'KU09',
                    name: 'Mubarak Al-Kabir',
                },
            ],
        },
        {
            code: 'KG',
            id: 2277,
            name: 'Kyrgyzstan',
            states: [
                {
                    code: 'KG09',
                    name: 'Batken',
                },
                {
                    code: 'KG01',
                    name: 'Bishkek',
                },
                {
                    code: 'KG02',
                    name: 'Chüy',
                },
                {
                    code: 'KG03',
                    name: 'Jalal-Abad',
                },
                {
                    code: 'KG04',
                    name: 'Naryn',
                },
                {
                    code: 'KG10',
                    name: 'Osh [City]',
                },
                {
                    code: 'KG08',
                    name: 'Osh',
                },
                {
                    code: 'KG06',
                    name: 'Talas',
                },
                {
                    code: 'KG07',
                    name: 'Ysyk-Köl',
                },
            ],
        },
        {
            code: 'LA',
            id: 2278,
            name: "Lao People's Democratic Republic",
            states: [
                {
                    code: 'LA01',
                    name: 'Attapu',
                },
                {
                    code: 'LA22',
                    name: 'Bokeo',
                },
                {
                    code: 'LA23',
                    name: 'Bolikhamxai',
                },
                {
                    code: 'LA02',
                    name: 'Champasak',
                },
                {
                    code: 'LA03',
                    name: 'Houaphan',
                },
                {
                    code: 'LA15',
                    name: 'Khammouan',
                },
                {
                    code: 'LA16',
                    name: 'Louang Namtha',
                },
                {
                    code: 'LA17',
                    name: 'Louangphrabang',
                },
                {
                    code: 'LA07',
                    name: 'Oudômxai',
                },
                {
                    code: 'LA18',
                    name: 'Phôngsali',
                },
                {
                    code: 'LA19',
                    name: 'Saravan',
                },
                {
                    code: 'LA20',
                    name: 'Savannakhét',
                },
                {
                    code: 'LA27',
                    name: 'Vientiane',
                },
                {
                    code: 'LA24',
                    name: 'Vientiane [prefecture]',
                },
                {
                    code: 'LA13',
                    name: 'Xaignabouri',
                },
                {
                    code: 'LA28',
                    name: 'Xaisômboun',
                },
                {
                    code: 'LA26',
                    name: 'Xékong',
                },
                {
                    code: 'LA14',
                    name: 'Xiangkhoang',
                },
            ],
        },
        {
            code: 'LV',
            id: 2279,
            name: 'Latvia',
            states: [
                {
                    code: 'LG34',
                    name: 'Adaži',
                },
                {
                    code: 'LG35',
                    name: 'Aglona',
                },
                {
                    code: 'LG36',
                    name: 'Aizkraukle',
                },
                {
                    code: 'LG37',
                    name: 'Aizpute',
                },
                {
                    code: 'LG38',
                    name: 'Akniste',
                },
                {
                    code: 'LG39',
                    name: 'Aloja',
                },
                {
                    code: 'LG40',
                    name: 'Alsunga',
                },
                {
                    code: 'LG41',
                    name: 'Aluksne',
                },
                {
                    code: 'LG42',
                    name: 'Amata',
                },
                {
                    code: 'LG43',
                    name: 'Ape',
                },
                {
                    code: 'LG44',
                    name: 'Auce',
                },
                {
                    code: 'LG45',
                    name: 'Babite',
                },
                {
                    code: 'LG46',
                    name: 'Baldone',
                },
                {
                    code: 'LG47',
                    name: 'Baltinava',
                },
                {
                    code: 'LG48',
                    name: 'Balvi',
                },
                {
                    code: 'LG49',
                    name: 'Bauska',
                },
                {
                    code: 'LG50',
                    name: 'Beverina',
                },
                {
                    code: 'LG51',
                    name: 'Broceni',
                },
                {
                    code: 'LG52',
                    name: 'Burtnieki',
                },
                {
                    code: 'LG53',
                    name: 'Carnikava',
                },
                {
                    code: 'LG54',
                    name: 'Cesis',
                },
                {
                    code: 'LG55',
                    name: 'Cesvaine',
                },
                {
                    code: 'LG56',
                    name: 'Cibla',
                },
                {
                    code: 'LG57',
                    name: 'Dagda',
                },
                {
                    code: 'LG06',
                    name: 'Daugavpils',
                },
                {
                    code: 'LG58',
                    name: 'Daugavpils',
                },
                {
                    code: 'LG59',
                    name: 'Dobele',
                },
                {
                    code: 'LG60',
                    name: 'Dundaga',
                },
                {
                    code: 'LG61',
                    name: 'Durbe',
                },
                {
                    code: 'LG62',
                    name: 'Engure',
                },
                {
                    code: 'LG63',
                    name: 'Ergli',
                },
                {
                    code: 'LG64',
                    name: 'Garkalne',
                },
                {
                    code: 'LG65',
                    name: 'Grobina',
                },
                {
                    code: 'LG66',
                    name: 'Gulbene',
                },
                {
                    code: 'LG67',
                    name: 'Iecava',
                },
                {
                    code: 'LG68',
                    name: 'Ikškile',
                },
                {
                    code: 'LG69',
                    name: 'Ilukste',
                },
                {
                    code: 'LG70',
                    name: 'Incukalns',
                },
                {
                    code: 'LG71',
                    name: 'Jaunjelgava',
                },
                {
                    code: 'LG72',
                    name: 'Jaunpiebalga',
                },
                {
                    code: 'LG73',
                    name: 'Jaunpils',
                },
                {
                    code: 'LG75',
                    name: 'Jekabpils',
                },
                {
                    code: 'LG74',
                    name: 'Jekabpils',
                },
                {
                    code: 'LG76',
                    name: 'Jelgava',
                },
                {
                    code: 'LG11',
                    name: 'Jelgava',
                },
                {
                    code: 'LG13',
                    name: 'Jurmala',
                },
                {
                    code: 'LG77',
                    name: 'Kandava',
                },
                {
                    code: 'LG78',
                    name: 'Karsava',
                },
                {
                    code: 'LG79',
                    name: 'Kegums',
                },
                {
                    code: 'LG80',
                    name: 'Kekava',
                },
                {
                    code: 'LG81',
                    name: 'Kocenu',
                },
                {
                    code: 'LG82',
                    name: 'Koknese',
                },
                {
                    code: 'LG83',
                    name: 'Kraslava',
                },
                {
                    code: 'LG84',
                    name: 'Krimulda',
                },
                {
                    code: 'LG85',
                    name: 'Krustpils',
                },
                {
                    code: 'LG86',
                    name: 'Kuldiga',
                },
                {
                    code: 'LG87',
                    name: 'Lielvarde',
                },
                {
                    code: 'LG16',
                    name: 'Liepaja',
                },
                {
                    code: 'LG88',
                    name: 'Ligatne',
                },
                {
                    code: 'LG89',
                    name: 'Limbaži',
                },
                {
                    code: 'LG90',
                    name: 'Livani',
                },
                {
                    code: 'LG91',
                    name: 'Lubana',
                },
                {
                    code: 'LG92',
                    name: 'Ludza',
                },
                {
                    code: 'LG93',
                    name: 'Madona',
                },
                {
                    code: 'LG94',
                    name: 'Malpils',
                },
                {
                    code: 'LG95',
                    name: 'Marupe',
                },
                {
                    code: 'LG96',
                    name: 'Mazsalaca',
                },
                {
                    code: 'LGF1',
                    name: 'Mersraga',
                },
                {
                    code: 'LG97',
                    name: 'Naukšeni',
                },
                {
                    code: 'LG98',
                    name: 'Nereta',
                },
                {
                    code: 'LG99',
                    name: 'Nica',
                },
                {
                    code: 'LGA1',
                    name: 'Ogre',
                },
                {
                    code: 'LGA2',
                    name: 'Olaine',
                },
                {
                    code: 'LGA3',
                    name: 'Ozolnieki',
                },
                {
                    code: 'LGA4',
                    name: 'Pargauja',
                },
                {
                    code: 'LGA5',
                    name: 'Pavilosta',
                },
                {
                    code: 'LGA6',
                    name: 'Plavinas',
                },
                {
                    code: 'LGA7',
                    name: 'Preili',
                },
                {
                    code: 'LGA8',
                    name: 'Priekule',
                },
                {
                    code: 'LGA9',
                    name: 'Priekuli',
                },
                {
                    code: 'LGB1',
                    name: 'Rauna',
                },
                {
                    code: 'LGB2',
                    name: 'Rezekne',
                },
                {
                    code: 'LG23',
                    name: 'Rezekne',
                },
                {
                    code: 'LGB3',
                    name: 'Riebini',
                },
                {
                    code: 'LG25',
                    name: 'Riga',
                },
                {
                    code: 'LGB4',
                    name: 'Roja',
                },
                {
                    code: 'LGB5',
                    name: 'Ropaži',
                },
                {
                    code: 'LGB6',
                    name: 'Rucava',
                },
                {
                    code: 'LGB7',
                    name: 'Rugaji',
                },
                {
                    code: 'LGB8',
                    name: 'Rujiena',
                },
                {
                    code: 'LGB9',
                    name: 'Rundale',
                },
                {
                    code: 'LGC1',
                    name: 'Salacgriva',
                },
                {
                    code: 'LGC2',
                    name: 'Sala',
                },
                {
                    code: 'LGC3',
                    name: 'Salaspils',
                },
                {
                    code: 'LGC4',
                    name: 'Saldus',
                },
                {
                    code: 'LGC5',
                    name: 'Saulkrasti',
                },
                {
                    code: 'LGC6',
                    name: 'Seja',
                },
                {
                    code: 'LGC7',
                    name: 'Sigulda',
                },
                {
                    code: 'LGC8',
                    name: 'Skriveri',
                },
                {
                    code: 'LGC9',
                    name: 'Skrunda',
                },
                {
                    code: 'LGD1',
                    name: 'Smiltene',
                },
                {
                    code: 'LGD2',
                    name: 'Stopini',
                },
                {
                    code: 'LGD3',
                    name: 'Strenci',
                },
                {
                    code: 'LGD4',
                    name: 'Talsi',
                },
                {
                    code: 'LGD5',
                    name: 'Tervete',
                },
                {
                    code: 'LGD6',
                    name: 'Tukums',
                },
                {
                    code: 'LGD7',
                    name: 'Vainode',
                },
                {
                    code: 'LGD8',
                    name: 'Valka',
                },
                {
                    code: 'LGD9',
                    name: 'Valmiera',
                },
                {
                    code: 'LGE1',
                    name: 'Varaklani',
                },
                {
                    code: 'LGE2',
                    name: 'Varkava',
                },
                {
                    code: 'LGE3',
                    name: 'Vecpiebalga',
                },
                {
                    code: 'LGE4',
                    name: 'Vecumnieki',
                },
                {
                    code: 'LGE5',
                    name: 'Ventspils',
                },
                {
                    code: 'LG32',
                    name: 'Ventspils',
                },
                {
                    code: 'LGE6',
                    name: 'Viesite',
                },
                {
                    code: 'LGE7',
                    name: 'Vilaka',
                },
                {
                    code: 'LGE8',
                    name: 'Vilani',
                },
                {
                    code: 'LGE9',
                    name: 'Zilupe',
                },
            ],
        },
        {
            code: 'LB',
            id: 2280,
            name: 'Lebanon',
            states: [
                {
                    code: 'LE10',
                    name: 'Aakkar',
                },
                {
                    code: 'LE07',
                    name: 'An Nabatiyah',
                },
                {
                    code: 'LE11',
                    name: 'Baalbek-Hermel',
                },
                {
                    code: 'LE04',
                    name: 'Beirut',
                },
                {
                    code: 'LE08',
                    name: 'Beqaa',
                },
                {
                    code: 'LE05',
                    name: 'Mount Lebanon',
                },
                {
                    code: 'LE09',
                    name: 'North Lebanon',
                },
                {
                    code: 'LE06',
                    name: 'South Lebanon',
                },
            ],
        },
        {
            code: 'LS',
            id: 2281,
            name: 'Lesotho',
            states: [
                {
                    code: 'LT10',
                    name: 'Berea',
                },
                {
                    code: 'LT11',
                    name: 'Butha-Buthe',
                },
                {
                    code: 'LT12',
                    name: 'Leribe',
                },
                {
                    code: 'LT14',
                    name: 'Mafeteng',
                },
                {
                    code: 'LT13',
                    name: 'Mafeteng',
                },
                {
                    code: 'LT15',
                    name: "Mohale's Hoek",
                },
                {
                    code: 'LT16',
                    name: 'Mokhotlong',
                },
                {
                    code: 'LT17',
                    name: "Qacha's Nek",
                },
                {
                    code: 'LT18',
                    name: 'Quthing',
                },
                {
                    code: 'LT19',
                    name: 'Thaba-Tseka',
                },
            ],
        },
        {
            code: 'LR',
            id: 2282,
            name: 'Liberia',
            states: [
                {
                    code: 'LI15',
                    name: 'Bomi',
                },
                {
                    code: 'LI01',
                    name: 'Bong',
                },
                {
                    code: 'LI21\t',
                    name: 'Gbarpolu',
                },
                {
                    code: 'LI11',
                    name: 'Grand Bassa',
                },
                {
                    code: 'LI12',
                    name: 'Grand Cape Mount',
                },
                {
                    code: 'LI19',
                    name: 'Grand Gedeh',
                },
                {
                    code: 'LI16',
                    name: 'Grand Kru',
                },
                {
                    code: 'LI20',
                    name: 'Lofa',
                },
                {
                    code: 'LI17',
                    name: 'Margibi',
                },
                {
                    code: 'LI13',
                    name: 'Maryland',
                },
                {
                    code: 'LI14',
                    name: 'Montserrado',
                },
                {
                    code: 'LI09',
                    name: 'Nimba',
                },
                {
                    code: 'LI22',
                    name: 'River Gee',
                },
                {
                    code: 'LI18',
                    name: 'Rivercess',
                },
                {
                    code: 'LI10',
                    name: 'Sinoe',
                },
            ],
        },
        {
            code: 'LY',
            id: 2380,
            name: 'Libyan Arab Jamahiriya',
            states: [],
        },
        {
            code: 'LI',
            id: 2284,
            name: 'Liechtenstein',
            states: [],
        },
        {
            code: 'LT',
            id: 2285,
            name: 'Lithuania',
            states: [
                {
                    code: 'LH56',
                    name: 'Alytus',
                },
                {
                    code: 'LH57',
                    name: 'Kaunas',
                },
                {
                    code: 'LH58',
                    name: 'Klaipeda',
                },
                {
                    code: 'LH59',
                    name: 'Marijampole',
                },
                {
                    code: 'LH60',
                    name: 'Panevežys',
                },
                {
                    code: 'LH61',
                    name: 'Siauliai',
                },
                {
                    code: 'LH62',
                    name: 'Taurage',
                },
                {
                    code: 'LH63',
                    name: 'Telšiai',
                },
                {
                    code: 'LH64',
                    name: 'Utena',
                },
                {
                    code: 'LH65',
                    name: 'Vilnius',
                },
            ],
        },
        {
            code: 'LU',
            id: 2286,
            name: 'Luxembourg',
            states: [
                {
                    code: 'LU01',
                    name: 'Diekirch',
                },
                {
                    code: 'LU02',
                    name: 'Grevenmacher',
                },
                {
                    code: 'LU03',
                    name: 'Luxembourg',
                },
            ],
        },
        {
            code: 'MO',
            id: 2287,
            name: 'Macau',
            states: [],
        },
        {
            code: 'MK',
            id: 2288,
            name: 'Macedonia',
            states: [],
        },
        {
            code: 'YU',
            id: 2367,
            name: 'Macedonia; the Former Yugoslav Republic',
            states: [],
        },
        {
            code: 'MG',
            id: 2289,
            name: 'Madagascar',
            states: [
                {
                    code: 'MA05',
                    name: 'Antananarivo',
                },
                {
                    code: 'MA01',
                    name: 'Antsiranana',
                },
                {
                    code: 'MA02',
                    name: 'Fianarantsoa',
                },
                {
                    code: 'MA03',
                    name: 'Mahajanga',
                },
                {
                    code: 'MA04',
                    name: 'Toamasina',
                },
                {
                    code: 'MA06',
                    name: 'Toliara',
                },
            ],
        },
        {
            code: 'MW',
            id: 2290,
            name: 'Malawi',
            states: [
                {
                    code: 'MI26',
                    name: 'Balaka',
                },
                {
                    code: 'MI24',
                    name: 'Blantyre',
                },
                {
                    code: 'MI02',
                    name: 'Chikwawa',
                },
                {
                    code: 'MI03',
                    name: 'Chiradzulu',
                },
                {
                    code: 'MI04',
                    name: 'Chitipa',
                },
                {
                    code: 'MI06',
                    name: 'Dedza',
                },
                {
                    code: 'MI07',
                    name: 'Dowa',
                },
                {
                    code: 'MI08',
                    name: 'Karonga',
                },
                {
                    code: 'MI09',
                    name: 'Kasungu',
                },
                {
                    code: 'MI27',
                    name: 'Likoma',
                },
                {
                    code: 'MI11',
                    name: 'Lilongwe',
                },
                {
                    code: 'MI28',
                    name: 'Machinga',
                },
                {
                    code: 'MI12',
                    name: 'Mangochi',
                },
                {
                    code: 'MI13',
                    name: 'Mchinji',
                },
                {
                    code: 'MI29',
                    name: 'Mulanje',
                },
                {
                    code: 'MI25',
                    name: 'Mwanza',
                },
                {
                    code: 'MI15',
                    name: 'Mzimba',
                },
                {
                    code: 'MI31',
                    name: 'Neno',
                },
                {
                    code: 'MI17',
                    name: 'Nkhata Bay',
                },
                {
                    code: 'MI18',
                    name: 'Nkhotakota',
                },
                {
                    code: 'MI19',
                    name: 'Nsanje',
                },
                {
                    code: 'MI16',
                    name: 'Ntcheu',
                },
                {
                    code: 'MI20',
                    name: 'Ntchisi',
                },
                {
                    code: 'MI30',
                    name: 'Phalombe',
                },
                {
                    code: 'MI21',
                    name: 'Rumphi',
                },
                {
                    code: 'MI22',
                    name: 'Salima',
                },
                {
                    code: 'MI05',
                    name: 'Thyolo',
                },
                {
                    code: 'MI23',
                    name: 'Zomba',
                },
            ],
        },
        {
            code: 'MY',
            id: 2291,
            name: 'Malaysia',
            states: [
                {
                    code: 'MY01',
                    name: 'Johor',
                },
                {
                    code: 'MY02',
                    name: 'Kedah',
                },
                {
                    code: 'MY03',
                    name: 'Kelantan',
                },
                {
                    code: 'MY04',
                    name: 'Melaka',
                },
                {
                    code: 'MY05',
                    name: 'Negeri Sembilan',
                },
                {
                    code: 'MY06',
                    name: 'Pahang',
                },
                {
                    code: 'MY08',
                    name: 'Perak',
                },
                {
                    code: 'MY09',
                    name: 'Perlis',
                },
                {
                    code: 'MY07',
                    name: 'Pulau Pinang',
                },
                {
                    code: 'MY12',
                    name: 'Sabah',
                },
                {
                    code: 'MY13',
                    name: 'Sarawak',
                },
                {
                    code: 'MY10',
                    name: 'Selangor',
                },
                {
                    code: 'MY11',
                    name: 'Terengganu',
                },
                {
                    code: 'MY14',
                    name: 'W.P. Kuala Lumpur',
                },
                {
                    code: 'MY15',
                    name: 'W.P. Labuan',
                },
                {
                    code: 'MY16',
                    name: 'W.P. Putrajaya',
                },
            ],
        },
        {
            code: 'MV',
            id: 2384,
            name: 'Maldives; Republic of',
            states: [],
        },
        {
            code: 'ML',
            id: 2292,
            name: 'Mali',
            states: [
                {
                    code: 'ML01',
                    name: 'Bamako',
                },
                {
                    code: 'ML09',
                    name: 'Gao',
                },
                {
                    code: 'ML03',
                    name: 'Kayes',
                },
                {
                    code: 'ML10',
                    name: 'Kidal',
                },
                {
                    code: 'ML07',
                    name: 'Koulikoro',
                },
                {
                    code: 'ML.ME',
                    name: 'Ménaka',
                },
                {
                    code: 'ML04',
                    name: 'Mopti',
                },
                {
                    code: 'ML05',
                    name: 'Ségou',
                },
                {
                    code: 'ML06',
                    name: 'Sikasso',
                },
                {
                    code: 'ML.TD',
                    name: 'Taoudénit',
                },
                {
                    code: 'ML08',
                    name: 'Timbuktu',
                },
            ],
        },
        {
            code: 'MT',
            id: 2293,
            name: 'Malta',
            states: [
                {
                    code: 'MT.CE',
                    name: 'Central',
                },
                {
                    code: 'MT.GO',
                    name: 'Gozo',
                },
                {
                    code: 'MT.NO',
                    name: 'Northern',
                },
                {
                    code: 'MT.SE',
                    name: 'South Eastern',
                },
                {
                    code: 'MT.SO',
                    name: 'Southern',
                },
            ],
        },
        {
            code: 'RM',
            id: 2394,
            name: 'Marshall Islands',
            states: [],
        },
        {
            code: 'MQ',
            id: 2423,
            name: 'Martinique',
            states: [],
        },
        {
            code: 'MR',
            id: 2294,
            name: 'Mauritania',
            states: [
                {
                    code: 'MR07',
                    name: 'Adrar',
                },
                {
                    code: 'MR03',
                    name: 'Assaba',
                },
                {
                    code: 'MR05',
                    name: 'Brakna',
                },
                {
                    code: 'MR08',
                    name: 'Dakhlet Nouadhibou',
                },
                {
                    code: 'MR04',
                    name: 'Gorgol',
                },
                {
                    code: 'MR10',
                    name: 'Guidimaka',
                },
                {
                    code: 'MR01',
                    name: 'Hodh ech Chargui',
                },
                {
                    code: 'MR02',
                    name: 'Hodh el Gharbi',
                },
                {
                    code: 'MR12',
                    name: 'Inchiri',
                },
                {
                    code: 'MR.NN',
                    name: 'Nouakchott Nord',
                },
                {
                    code: 'MR13',
                    name: 'Nouakchott Ouest',
                },
                {
                    code: 'MR.NS',
                    name: 'Nouakchott Sud',
                },
                {
                    code: 'MR09',
                    name: 'Tagant',
                },
                {
                    code: 'MR11',
                    name: 'Tiris Zemmour',
                },
                {
                    code: 'MR06',
                    name: 'Trarza',
                },
            ],
        },
        {
            code: 'MU',
            id: 2295,
            name: 'Mauritius',
            states: [
                {
                    code: 'MP21',
                    name: 'Agalega Islands',
                },
                {
                    code: 'MP12',
                    name: 'Black River',
                },
                {
                    code: 'MP22',
                    name: 'Cargados Carajos',
                },
                {
                    code: 'MP13',
                    name: 'Flacq',
                },
                {
                    code: 'MP14',
                    name: 'Grand Port',
                },
                {
                    code: 'MP15',
                    name: 'Moka',
                },
                {
                    code: 'MP16',
                    name: 'Pamplemousses',
                },
                {
                    code: 'MP17',
                    name: 'Plaines Wilhems',
                },
                {
                    code: 'MP18',
                    name: 'Port Louis',
                },
                {
                    code: 'MP19',
                    name: 'Rivière du Rempart',
                },
                {
                    code: 'MP23',
                    name: 'Rodrigues',
                },
                {
                    code: 'MP20',
                    name: 'Savanne',
                },
            ],
        },
        {
            code: 'M999',
            id: 2393,
            name: 'Mayotte',
            states: [],
        },
        {
            code: 'MX',
            id: 2296,
            name: 'Mexico',
            states: [
                {
                    code: 'AGU',
                    name: 'Aguascalientes',
                },
                {
                    code: 'BCS',
                    name: 'Baja California Sur',
                },
                {
                    code: 'BCN',
                    name: 'Baja California',
                },
                {
                    code: 'CAM',
                    name: 'Campeche',
                },
                {
                    code: 'CHP',
                    name: 'Chiapas',
                },
                {
                    code: 'CHH',
                    name: 'Chihuahua',
                },
                {
                    code: 'COA',
                    name: 'Coahuila',
                },
                {
                    code: 'COL',
                    name: 'Colima',
                },
                {
                    code: 'DIF',
                    name: 'Distrito Federal',
                },
                {
                    code: 'DUR',
                    name: 'Durango',
                },
                {
                    code: 'GUA',
                    name: 'Guanajuato',
                },
                {
                    code: 'GRO',
                    name: 'Guerrero',
                },
                {
                    code: 'HID',
                    name: 'Hidalgo',
                },
                {
                    code: 'JAL',
                    name: 'Jalisco',
                },
                {
                    code: 'MEX',
                    name: 'México',
                },
                {
                    code: 'MIC',
                    name: 'Michoacán',
                },
                {
                    code: 'MOR',
                    name: 'Morelos',
                },
                {
                    code: 'NAY',
                    name: 'Nayarit',
                },
                {
                    code: 'NLE',
                    name: 'Nuevo León',
                },
                {
                    code: 'OAX',
                    name: 'Oaxaca',
                },
                {
                    code: 'PUE',
                    name: 'Puebla',
                },
                {
                    code: 'QUE',
                    name: 'Querétaro',
                },
                {
                    code: 'ROO',
                    name: 'Quintana Roo',
                },
                {
                    code: 'SLP',
                    name: 'San Luis Potosí',
                },
                {
                    code: 'SIN',
                    name: 'Sinaloa',
                },
                {
                    code: 'SON',
                    name: 'Sonora',
                },
                {
                    code: 'TAB',
                    name: 'Tabasco',
                },
                {
                    code: 'TAM',
                    name: 'Tamaulipas',
                },
                {
                    code: 'TLA',
                    name: 'Tlaxcala',
                },
                {
                    code: 'VER',
                    name: 'Veracruz',
                },
                {
                    code: 'YUC',
                    name: 'Yucatán',
                },
                {
                    code: 'ZAC',
                    name: 'Zacatecas',
                },
            ],
        },
        {
            code: 'FM',
            id: 2297,
            name: 'Micronesia; Federated States of',
            states: [
                {
                    code: 'FM03',
                    name: 'Chuuk',
                },
                {
                    code: 'FM01',
                    name: 'Kosrae',
                },
                {
                    code: 'FM02',
                    name: 'Pohnpei',
                },
                {
                    code: 'FM04',
                    name: 'Yap',
                },
            ],
        },
        {
            code: 'MD',
            id: 2395,
            name: 'Moldova; Republic of',
            states: [],
        },
        {
            code: 'MC',
            id: 2299,
            name: 'Monaco',
            states: [],
        },
        {
            code: 'MN',
            id: 2300,
            name: 'Mongolia',
            states: [],
        },
        {
            code: 'MJ',
            id: 2396,
            name: 'Montenegro',
            states: [
                {
                    code: 'ME-1',
                    name: 'Andrijevica',
                },
                {
                    code: 'ME-2',
                    name: 'Bar',
                },
                {
                    code: 'ME-3',
                    name: 'Berane',
                },
                {
                    code: 'ME-4',
                    name: 'Bijelo Polje',
                },
                {
                    code: 'ME-5',
                    name: 'Budva',
                },
                {
                    code: 'ME-6',
                    name: 'Cetinje',
                },
                {
                    code: 'ME-7',
                    name: 'Danilovgrad',
                },
                {
                    code: 'ME-8',
                    name: 'Herceg Novi',
                },
                {
                    code: 'ME-9',
                    name: 'Kolašin',
                },
                {
                    code: 'ME-10',
                    name: 'Kotor',
                },
                {
                    code: 'ME-11',
                    name: 'Mojkovac',
                },
                {
                    code: 'ME-12',
                    name: 'Nikšic',
                },
                {
                    code: 'ME-13',
                    name: 'Plav',
                },
                {
                    code: 'ME-14',
                    name: 'Pljevlja',
                },
                {
                    code: 'ME-15',
                    name: 'Plužine',
                },
                {
                    code: 'ME-16',
                    name: 'Podgorica',
                },
                {
                    code: 'ME-17',
                    name: 'Rožaje',
                },
                {
                    code: 'ME-18',
                    name: 'Šavnik',
                },
                {
                    code: 'ME-19',
                    name: 'Tivat',
                },
                {
                    code: 'ME-20',
                    name: 'Ulcinj',
                },
                {
                    code: 'ME-21',
                    name: 'Žabljak',
                },
            ],
        },
        {
            code: 'MS',
            id: 2424,
            name: 'Montserrat',
            states: [],
        },
        {
            code: 'MA',
            id: 2301,
            name: 'Morocco',
            states: [
                {
                    code: 'MA.BK',
                    name: 'Béni Mellal-Khénifra',
                },
                {
                    code: 'MA.CS',
                    name: 'Casablanca-Settat',
                },
                {
                    code: 'MA.OL',
                    name: 'Dakhla-Oued Ed-Dahab',
                },
                {
                    code: 'MA.DT',
                    name: 'Drâa-Tafilalet',
                },
                {
                    code: 'MA.FK',
                    name: 'Fès-Meknès',
                },
                {
                    code: 'MA.GN',
                    name: 'Guelmim-Oued Noun',
                },
                {
                    code: 'MA.OF',
                    name: "L'oriental",
                },
                {
                    code: 'MA.LS',
                    name: 'Laâyoune-Sakia al Hamra',
                },
                {
                    code: 'MA.MS',
                    name: 'Marrakech-Safi',
                },
                {
                    code: 'MA.RK',
                    name: 'Rabat-Salé-Kénitra',
                },
                {
                    code: 'MA.SS',
                    name: 'Souss-Massa',
                },
                {
                    code: 'MA.TC',
                    name: 'Tanger-Tétouan-Al Hoceima',
                },
            ],
        },
        {
            code: 'MZ',
            id: 2302,
            name: 'Mozambique',
            states: [
                {
                    code: 'MZ01',
                    name: 'Cabo Delgado',
                },
                {
                    code: 'MZ02',
                    name: 'Gaza',
                },
                {
                    code: 'MZ03',
                    name: 'Inhambane',
                },
                {
                    code: 'MZ10',
                    name: 'Manica',
                },
                {
                    code: 'MZ11',
                    name: 'Maputo [city]',
                },
                {
                    code: 'MZ04',
                    name: 'Maputo',
                },
                {
                    code: 'MZ06',
                    name: 'Nampula',
                },
                {
                    code: 'MZ07',
                    name: 'Niassa',
                },
                {
                    code: 'MZ05',
                    name: 'Sofala',
                },
                {
                    code: 'MZ08',
                    name: 'Tete',
                },
                {
                    code: 'MZ09',
                    name: 'Zambézia',
                },
            ],
        },
        {
            code: 'MM',
            id: 2303,
            name: 'Myanmar',
            states: [
                {
                    code: 'MM.AY',
                    name: 'Ayeyarwady',
                },
                {
                    code: 'MM.BA',
                    name: 'Bago',
                },
                {
                    code: 'MM.CH',
                    name: 'Chin',
                },
                {
                    code: 'MM.KC',
                    name: 'Kachin',
                },
                {
                    code: 'MM.KH',
                    name: 'Kayah',
                },
                {
                    code: 'MM.KN',
                    name: 'Kayin',
                },
                {
                    code: 'MM.MG',
                    name: 'Magway',
                },
                {
                    code: 'MM.ML',
                    name: 'Mandalay',
                },
                {
                    code: 'MM.MO',
                    name: 'Mon',
                },
                {
                    code: 'MM.NY',
                    name: 'Naypyidaw',
                },
                {
                    code: 'MM.RA',
                    name: 'Rakhine',
                },
                {
                    code: 'MM.SA',
                    name: 'Sagaing',
                },
                {
                    code: 'MM.SH',
                    name: 'Shan',
                },
                {
                    code: 'MM.TN',
                    name: 'Tanintharyi',
                },
                {
                    code: 'MM.YA',
                    name: 'Yangon',
                },
            ],
        },
        {
            code: 'NA',
            id: 2304,
            name: 'Namibia',
            states: [
                {
                    code: 'WA29',
                    name: 'Erongo',
                },
                {
                    code: 'WA30',
                    name: 'Hardap',
                },
                {
                    code: 'WA31',
                    name: 'Karas',
                },
                {
                    code: 'WA40',
                    name: 'Kavango East',
                },
                {
                    code: 'WA41',
                    name: 'Kavango West',
                },
                {
                    code: 'WA21',
                    name: 'Khomas',
                },
                {
                    code: 'WA32',
                    name: 'Kunene',
                },
                {
                    code: 'WA33',
                    name: 'Ohangwena',
                },
                {
                    code: 'WA35',
                    name: 'Omaheke',
                },
                {
                    code: 'WA36',
                    name: 'Omusati',
                },
                {
                    code: 'WA37',
                    name: 'Oshana',
                },
                {
                    code: 'WA38',
                    name: 'Oshikoto',
                },
                {
                    code: 'WA39',
                    name: 'Otjozondjupa',
                },
                {
                    code: 'WA28',
                    name: 'Zambezi',
                },
            ],
        },
        {
            code: 'NR',
            id: 2397,
            name: 'Nauru',
            states: [],
        },
        {
            code: 'NP',
            id: 2305,
            name: 'Nepal',
            states: [
                {
                    code: 'NP.FI',
                    name: 'Five',
                },
                {
                    code: 'NP.FO',
                    name: 'Four',
                },
                {
                    code: 'NP.ON',
                    name: 'One',
                },
                {
                    code: 'NP.SE',
                    name: 'Seven',
                },
                {
                    code: 'NP.SI',
                    name: 'Six',
                },
                {
                    code: 'NP.TH',
                    name: 'Three',
                },
                {
                    code: 'NP.TW',
                    name: 'Two',
                },
            ],
        },
        {
            code: 'NL',
            id: 2306,
            name: 'Netherlands',
            states: [
                {
                    code: 'DR',
                    name: 'Drenthe',
                },
                {
                    code: 'FL',
                    name: 'Flevoland',
                },
                {
                    code: 'FR',
                    name: 'Friesland',
                },
                {
                    code: 'GE',
                    name: 'Gelderland',
                },
                {
                    code: 'GR',
                    name: 'Groningen',
                },
                {
                    code: 'LI',
                    name: 'Limburg',
                },
                {
                    code: 'NB',
                    name: 'Noord-Brabant',
                },
                {
                    code: 'NH',
                    name: 'Noord-Holland',
                },
                {
                    code: 'OV',
                    name: 'Overijssel',
                },
                {
                    code: 'UT',
                    name: 'Utrecht',
                },
                {
                    code: 'ZE',
                    name: 'Zeeland',
                },
                {
                    code: 'ZH',
                    name: 'Zuid-Holland',
                },
            ],
        },
        {
            code: 'AN',
            id: 2425,
            name: 'Netherlands Antilles',
            states: [],
        },
        {
            code: 'NC',
            id: 2426,
            name: 'New Caledonia',
            states: [],
        },
        {
            code: 'NZ',
            id: 2307,
            name: 'New Zealand',
            states: [
                {
                    code: 'AUK',
                    name: 'Auckland',
                },
                {
                    code: 'BOP',
                    name: 'Bay of Plenty',
                },
                {
                    code: 'CAN',
                    name: 'Canterbury',
                },
                {
                    code: 'CIT',
                    name: 'Chatham Islands Territory',
                },
                {
                    code: 'GIS',
                    name: 'Gisborne',
                },
                {
                    code: 'HKB',
                    name: "Hawke's Bay",
                },
                {
                    code: 'MWT',
                    name: 'Manawatu-Wanganui',
                },
                {
                    code: 'MBH',
                    name: 'Marlborough',
                },
                {
                    code: 'NSN',
                    name: 'Nelson',
                },
                {
                    code: 'N',
                    name: 'North Island',
                },
                {
                    code: 'NTL',
                    name: 'Northland',
                },
                {
                    code: 'OTA',
                    name: 'Otago',
                },
                {
                    code: 'S',
                    name: 'South Island',
                },
                {
                    code: 'STL',
                    name: 'Southland',
                },
                {
                    code: 'TKI',
                    name: 'Taranaki',
                },
                {
                    code: 'TAS',
                    name: 'Tasman District',
                },
                {
                    code: 'WKO',
                    name: 'Waikato',
                },
                {
                    code: 'WGN',
                    name: 'Wellington',
                },
                {
                    code: 'WTC',
                    name: 'West Coast',
                },
            ],
        },
        {
            code: 'NI',
            id: 2308,
            name: 'Nicaragua',
            states: [
                {
                    code: 'NU01',
                    name: 'Boaco',
                },
                {
                    code: 'NU02',
                    name: 'Carazo',
                },
                {
                    code: 'NU03',
                    name: 'Chinandega',
                },
                {
                    code: 'NU04',
                    name: 'Chontales',
                },
                {
                    code: 'NU05',
                    name: 'Estelí',
                },
                {
                    code: 'NU06',
                    name: 'Granada',
                },
                {
                    code: 'NU07',
                    name: 'Jinotega',
                },
                {
                    code: 'NU08',
                    name: 'León',
                },
                {
                    code: 'NU09',
                    name: 'Madriz',
                },
                {
                    code: 'NU10',
                    name: 'Managua',
                },
                {
                    code: 'NU11',
                    name: 'Masaya',
                },
                {
                    code: 'NU12',
                    name: 'Matagalpa',
                },
                {
                    code: 'NU13',
                    name: 'Nueva Segovia',
                },
                {
                    code: 'NU17',
                    name: 'Región Autónoma del Caribe Norte',
                },
                {
                    code: 'NU18',
                    name: 'Región Autónoma del Caribe Sur',
                },
                {
                    code: 'NU14',
                    name: 'Río San Juan',
                },
                {
                    code: 'NU15',
                    name: 'Rivas',
                },
            ],
        },
        {
            code: 'NE',
            id: 2309,
            name: 'Niger',
            states: [
                {
                    code: 'NG01',
                    name: 'Agadez',
                },
                {
                    code: 'NG02',
                    name: 'Diffa',
                },
                {
                    code: 'NG03',
                    name: 'Dosso',
                },
                {
                    code: 'NG04',
                    name: 'Maradi',
                },
                {
                    code: 'NG08',
                    name: 'Niamey',
                },
                {
                    code: 'NG06',
                    name: 'Tahoua',
                },
                {
                    code: 'NG09',
                    name: 'Tillabéri',
                },
                {
                    code: 'NG07',
                    name: 'Zinder',
                },
            ],
        },
        {
            code: 'NG',
            id: 2310,
            name: 'Nigeria',
            states: [
                {
                    code: 'NI45',
                    name: 'Abia',
                },
                {
                    code: 'NI35',
                    name: 'Adamawa',
                },
                {
                    code: 'NI21',
                    name: 'Akwa Ibom',
                },
                {
                    code: 'NI25',
                    name: 'Anambra',
                },
                {
                    code: 'NI46',
                    name: 'Bauchi',
                },
                {
                    code: 'NI52',
                    name: 'Bayelsa',
                },
                {
                    code: 'NI26',
                    name: 'Benue',
                },
                {
                    code: 'NI27',
                    name: 'Borno',
                },
                {
                    code: 'NI22',
                    name: 'Cross River',
                },
                {
                    code: 'NI36',
                    name: 'Delta',
                },
                {
                    code: 'NI53',
                    name: 'Ebonyi',
                },
                {
                    code: 'NI37',
                    name: 'Edo',
                },
                {
                    code: 'NI54',
                    name: 'Ekiti',
                },
                {
                    code: 'NI47',
                    name: 'Enugu',
                },
                {
                    code: 'NI11',
                    name: 'Federal Capital Territory',
                },
                {
                    code: 'NI55',
                    name: 'Gombe',
                },
                {
                    code: 'NI28',
                    name: 'Imo',
                },
                {
                    code: 'NI39',
                    name: 'Jigawa',
                },
                {
                    code: 'NI23',
                    name: 'Kaduna',
                },
                {
                    code: 'NI29',
                    name: 'Kano',
                },
                {
                    code: 'NI24',
                    name: 'Katsina',
                },
                {
                    code: 'NI40',
                    name: 'Kebbi',
                },
                {
                    code: 'NI41',
                    name: 'Kogi',
                },
                {
                    code: 'NI30',
                    name: 'Kwara',
                },
                {
                    code: 'NI05',
                    name: 'Lagos',
                },
                {
                    code: 'NI56',
                    name: 'Nassarawa',
                },
                {
                    code: 'NI31',
                    name: 'Niger',
                },
                {
                    code: 'NI16',
                    name: 'Ogun',
                },
                {
                    code: 'NI48',
                    name: 'Ondo',
                },
                {
                    code: 'NI42',
                    name: 'Osun',
                },
                {
                    code: 'NI32',
                    name: 'Oyo',
                },
                {
                    code: 'NI49',
                    name: 'Plateau',
                },
                {
                    code: 'NI50',
                    name: 'Rivers',
                },
                {
                    code: 'NI51',
                    name: 'Sokoto',
                },
                {
                    code: 'NI43',
                    name: 'Taraba',
                },
                {
                    code: 'NI44',
                    name: 'Yobe',
                },
                {
                    code: 'NI57',
                    name: 'Zamfara',
                },
            ],
        },
        {
            code: 'NU',
            id: 2427,
            name: 'Niue',
            states: [],
        },
        {
            code: 'NF',
            id: 2428,
            name: 'Norfolk Island',
            states: [],
        },
        {
            code: 'MP',
            id: 2429,
            name: 'Northern Mariana Islands',
            states: [],
        },
        {
            code: 'NO',
            id: 2311,
            name: 'Norway',
            states: [
                {
                    code: 'NO02',
                    name: 'Akershus',
                },
                {
                    code: 'NO09',
                    name: 'Aust-Agder',
                },
                {
                    code: 'NO06',
                    name: 'Buskerud',
                },
                {
                    code: 'NO20',
                    name: 'Finnmark',
                },
                {
                    code: 'NO04',
                    name: 'Hedmark',
                },
                {
                    code: 'NO12',
                    name: 'Hordaland',
                },
                {
                    code: 'NO22',
                    name: 'Jan Mayen (Arctic Region)',
                },
                {
                    code: 'NO15',
                    name: 'Møre og Romsdal',
                },
                {
                    code: 'NO17',
                    name: 'Nord-Trøndelag',
                },
                {
                    code: 'NO18',
                    name: 'Nordland',
                },
                {
                    code: 'NO05',
                    name: 'Oppland',
                },
                {
                    code: 'NO03',
                    name: 'Oslo',
                },
                {
                    code: 'NO01',
                    name: 'Østfold',
                },
                {
                    code: 'NO11',
                    name: 'Rogaland',
                },
                {
                    code: 'NO14',
                    name: 'Sogn og Fjordane',
                },
                {
                    code: 'NO16',
                    name: 'Sør-Trøndelag',
                },
                {
                    code: 'NO21',
                    name: 'Svalbard (Arctic Region)',
                },
                {
                    code: 'NO08',
                    name: 'Telemark',
                },
                {
                    code: 'NO19',
                    name: 'Troms',
                },
                {
                    code: 'NO10',
                    name: 'Vest-Agder',
                },
                {
                    code: 'NO07',
                    name: 'Vestfold',
                },
            ],
        },
        {
            code: 'OM',
            id: 2312,
            name: 'Oman',
            states: [
                {
                    code: 'MU01',
                    name: 'Ad Dakhliyah',
                },
                {
                    code: 'MU09',
                    name: 'Adh Dhahirah',
                },
                {
                    code: 'MU11',
                    name: 'Al Batinah North',
                },
                {
                    code: 'MU02',
                    name: 'Al Batinah South',
                },
                {
                    code: 'MU10',
                    name: 'Al Buraymi',
                },
                {
                    code: 'MU03',
                    name: 'Al Wusta',
                },
                {
                    code: 'MU12',
                    name: 'Ash Sharqiyah North',
                },
                {
                    code: 'MU04',
                    name: 'Ash Sharqiyah South',
                },
                {
                    code: 'MU08',
                    name: 'Dhofar',
                },
                {
                    code: 'MU07',
                    name: 'Musandam',
                },
                {
                    code: 'MU06',
                    name: 'Muscat',
                },
            ],
        },
        {
            code: 'PK',
            id: 2313,
            name: 'Pakistan',
            states: [
                {
                    code: 'PK06',
                    name: 'Azad Kashmir',
                },
                {
                    code: 'PK02',
                    name: 'Balochistan',
                },
                {
                    code: 'PK01',
                    name: 'Federally Administered Tribal Areas',
                },
                {
                    code: 'PK07',
                    name: 'Gilgit-Baltistan',
                },
                {
                    code: 'PK08',
                    name: 'Islamabad',
                },
                {
                    code: 'PK03',
                    name: 'Khyber-Pakhtunkhwa',
                },
                {
                    code: 'PK04',
                    name: 'Punjab',
                },
                {
                    code: 'PK05',
                    name: 'Sindh',
                },
            ],
        },
        {
            code: 'PW',
            id: 2314,
            name: 'Palau',
            states: [],
        },
        {
            code: 'PS',
            id: 2430,
            name: 'Palestinian Territory; Occupied',
            states: [],
        },
        {
            code: 'PA',
            id: 2315,
            name: 'Panama',
            states: [
                {
                    code: 'PM01',
                    name: 'Bocas del Toro',
                },
                {
                    code: 'PM02\t',
                    name: 'Chiriquí',
                },
                {
                    code: 'PM03',
                    name: 'Coclé',
                },
                {
                    code: 'PM04',
                    name: 'Coclé',
                },
                {
                    code: 'PM05',
                    name: 'Darién',
                },
                {
                    code: 'PM11',
                    name: 'Emberá',
                },
                {
                    code: 'PM06',
                    name: 'Herrera',
                },
                {
                    code: 'PM09',
                    name: 'Kuna Yala',
                },
                {
                    code: 'PM07',
                    name: 'Los Santos',
                },
                {
                    code: 'PM12',
                    name: 'Ngäbe Buglé',
                },
                {
                    code: 'PM13',
                    name: 'Panamá Oeste',
                },
                {
                    code: 'PM08',
                    name: 'Panamá',
                },
                {
                    code: 'PM10',
                    name: 'Veraguas',
                },
            ],
        },
        {
            code: 'PG',
            id: 2316,
            name: 'Papua New Guinea',
            states: [
                {
                    code: 'PP07',
                    name: 'Bougainville',
                },
                {
                    code: 'PP01',
                    name: 'Central',
                },
                {
                    code: 'PP08',
                    name: 'Chimbu',
                },
                {
                    code: 'PP10',
                    name: 'East New Britain',
                },
                {
                    code: 'PP11',
                    name: 'East Sepik',
                },
                {
                    code: 'PP09',
                    name: 'Eastern Highlands',
                },
                {
                    code: 'PP19',
                    name: 'Enga',
                },
                {
                    code: 'PP02',
                    name: 'Gulf',
                },
                {
                    code: 'PP21',
                    name: 'Hela',
                },
                {
                    code: 'PP22',
                    name: 'Jiwaka',
                },
                {
                    code: 'PP12',
                    name: 'Madang',
                },
                {
                    code: 'PP13',
                    name: 'Manus',
                },
                {
                    code: 'PP03',
                    name: 'Milne Bay',
                },
                {
                    code: 'PP14',
                    name: 'Morobe',
                },
                {
                    code: 'PP20',
                    name: 'National Capital District',
                },
                {
                    code: 'PP15',
                    name: 'New Ireland',
                },
                {
                    code: 'PP04',
                    name: 'Northern',
                },
                {
                    code: 'PP18',
                    name: 'Sandaun',
                },
                {
                    code: 'PP05',
                    name: 'Southern Highlands',
                },
                {
                    code: 'PP17',
                    name: 'West New Britain',
                },
                {
                    code: 'PP06',
                    name: 'Western',
                },
                {
                    code: 'PP16',
                    name: 'Western Highlands',
                },
            ],
        },
        {
            code: 'PY',
            id: 2317,
            name: 'Paraguay',
            states: [
                {
                    code: 'PA23',
                    name: 'Alto Paraguay',
                },
                {
                    code: 'PA01',
                    name: 'Alto Paraná',
                },
                {
                    code: 'PA02',
                    name: 'Amambay',
                },
                {
                    code: 'PA22',
                    name: 'Asunción',
                },
                {
                    code: 'PA24',
                    name: 'Boquerón',
                },
                {
                    code: 'PA04',
                    name: 'Caaguazú',
                },
                {
                    code: 'PA05',
                    name: 'Caazapá',
                },
                {
                    code: 'PA19',
                    name: 'Canindeyú',
                },
                {
                    code: 'PA06',
                    name: 'Central',
                },
                {
                    code: 'PA07',
                    name: 'Concepción',
                },
                {
                    code: 'PA08',
                    name: 'Cordillera',
                },
                {
                    code: 'PA10',
                    name: 'Guairá',
                },
                {
                    code: 'PA11',
                    name: 'Itapúa',
                },
                {
                    code: 'PA12',
                    name: 'Misiones',
                },
                {
                    code: 'PA15',
                    name: 'Paraguarí',
                },
                {
                    code: 'PA16',
                    name: 'Presidente Hayes',
                },
                {
                    code: 'PA17',
                    name: 'San Pedro',
                },
                {
                    code: 'PA13',
                    name: 'Ñeembucú',
                },
            ],
        },
        {
            code: 'PE',
            id: 2318,
            name: 'Peru',
            states: [
                {
                    code: 'PE01',
                    name: 'Amazonas',
                },
                {
                    code: 'PE02',
                    name: 'Ancash',
                },
                {
                    code: 'PE03',
                    name: 'Apurímac',
                },
                {
                    code: 'PE04',
                    name: 'Arequipa',
                },
                {
                    code: 'PE05',
                    name: 'Ayacucho',
                },
                {
                    code: 'PE06',
                    name: 'Cajamarca',
                },
                {
                    code: 'PE07',
                    name: 'Callao',
                },
                {
                    code: 'PE08',
                    name: 'Cusco',
                },
                {
                    code: 'PE09',
                    name: 'Huancavelica',
                },
                {
                    code: 'PE10',
                    name: 'Huánuco',
                },
                {
                    code: 'PE11',
                    name: 'Ica',
                },
                {
                    code: 'PE12',
                    name: 'Junín',
                },
                {
                    code: 'PE13',
                    name: 'La Libertad',
                },
                {
                    code: 'PE14',
                    name: 'Lambayeque',
                },
                {
                    code: 'PE15',
                    name: 'Lima',
                },
                {
                    code: 'PE26',
                    name: 'Lima [Province]',
                },
                {
                    code: 'PE16',
                    name: 'Loreto',
                },
                {
                    code: 'PE17',
                    name: 'Madre de Dios',
                },
                {
                    code: 'PE18',
                    name: 'Moquegua',
                },
                {
                    code: 'PE19',
                    name: 'Pasco',
                },
                {
                    code: 'PE20',
                    name: 'Piura',
                },
                {
                    code: 'PE21',
                    name: 'Puno',
                },
                {
                    code: 'PE22',
                    name: 'San Martín',
                },
                {
                    code: 'PE23',
                    name: 'Tacna',
                },
                {
                    code: 'PE24',
                    name: 'Tumbes',
                },
                {
                    code: 'PE25',
                    name: 'Ucayali',
                },
            ],
        },
        {
            code: 'PH',
            id: 2319,
            name: 'Philippines',
            states: [
                {
                    code: 'RP01',
                    name: 'Abra',
                },
                {
                    code: 'RP02',
                    name: 'Agusan del Norte',
                },
                {
                    code: 'RP03',
                    name: 'Agusan del Sur',
                },
                {
                    code: 'RP04',
                    name: 'Aklan',
                },
                {
                    code: 'RP05',
                    name: 'Albay',
                },
                {
                    code: 'RP06',
                    name: 'Antique',
                },
                {
                    code: 'RPH6',
                    name: 'Apayao',
                },
                {
                    code: 'RPG8',
                    name: 'Aurora',
                },
                {
                    code: 'RP22',
                    name: 'Basilan',
                },
                {
                    code: 'RP07',
                    name: 'Bataan',
                },
                {
                    code: 'RP08',
                    name: 'Batanes',
                },
                {
                    code: 'RP09',
                    name: 'Batangas',
                },
                {
                    code: 'RP10',
                    name: 'Benguet',
                },
                {
                    code: 'RPH9',
                    name: 'Biliran',
                },
                {
                    code: 'RP11',
                    name: 'Bohol',
                },
                {
                    code: 'RP12',
                    name: 'Bukidnon',
                },
                {
                    code: 'RP13',
                    name: 'Bulacan',
                },
                {
                    code: 'RP14',
                    name: 'Cagayan',
                },
                {
                    code: 'RP15',
                    name: 'Camarines Norte',
                },
                {
                    code: 'RP16',
                    name: 'Camarines Sur',
                },
                {
                    code: 'RP17',
                    name: 'Camiguin',
                },
                {
                    code: 'RP18',
                    name: 'Capiz',
                },
                {
                    code: 'RP19',
                    name: 'Catanduanes',
                },
                {
                    code: 'RP20',
                    name: 'Cavite',
                },
                {
                    code: 'RP21',
                    name: 'Cebu',
                },
                {
                    code: 'RPI6',
                    name: 'Compostela Valley',
                },
                {
                    code: 'RP57',
                    name: 'Cotabato',
                },
                {
                    code: 'RP26',
                    name: 'Davao Oriental',
                },
                {
                    code: 'RPI7',
                    name: 'Davao del Norte',
                },
                {
                    code: 'RP25',
                    name: 'Davao del Sur',
                },
                {
                    code: 'RPI9',
                    name: 'Dinagat Islands',
                },
                {
                    code: 'RP23',
                    name: 'Eastern Samar',
                },
                {
                    code: 'RPJ3',
                    name: 'Guimaras',
                },
                {
                    code: 'RP27',
                    name: 'Ifugao',
                },
                {
                    code: 'RP28',
                    name: 'Ilocos Norte',
                },
                {
                    code: 'RP29',
                    name: 'Ilocos Sur',
                },
                {
                    code: 'RP30',
                    name: 'Iloilo',
                },
                {
                    code: 'RP31',
                    name: 'Isabela',
                },
                {
                    code: 'RPJ7',
                    name: 'Kalinga',
                },
                {
                    code: 'RP36',
                    name: 'La Union',
                },
                {
                    code: 'RP33',
                    name: 'Laguna',
                },
                {
                    code: 'RP34',
                    name: 'Lanao del Norte',
                },
                {
                    code: 'RP35',
                    name: 'Lanao del Sur',
                },
                {
                    code: 'RP37',
                    name: 'Leyte',
                },
                {
                    code: 'RP56',
                    name: 'Maguindanao',
                },
                {
                    code: 'RP38',
                    name: 'Marinduque',
                },
                {
                    code: 'RP39',
                    name: 'Masbate',
                },
                {
                    code: 'RPD9',
                    name: 'Metropolitan Manila',
                },
                {
                    code: 'RP42',
                    name: 'Misamis Occidental',
                },
                {
                    code: 'RP43',
                    name: 'Misamis Oriental',
                },
                {
                    code: 'RP44',
                    name: 'Mountain',
                },
                {
                    code: 'RPH3',
                    name: 'Negros Occidental',
                },
                {
                    code: 'RP46',
                    name: 'Negros Oriental',
                },
                {
                    code: 'RP67',
                    name: 'Northern Samar',
                },
                {
                    code: 'RP47',
                    name: 'Nueva Ecija',
                },
                {
                    code: 'RP48',
                    name: 'Nueva Vizcaya',
                },
                {
                    code: 'RP40',
                    name: 'Occidental Mindoro',
                },
                {
                    code: 'RP41',
                    name: 'Oriental Mindoro',
                },
                {
                    code: 'RP49',
                    name: 'Palawan',
                },
                {
                    code: 'RP50',
                    name: 'Pampanga',
                },
                {
                    code: 'RP51',
                    name: 'Pangasinan',
                },
                {
                    code: 'RPH2',
                    name: 'Quezon',
                },
                {
                    code: 'RP68',
                    name: 'Quirino',
                },
                {
                    code: 'RP53',
                    name: 'Rizal',
                },
                {
                    code: 'RP54',
                    name: 'Romblon',
                },
                {
                    code: 'RP55',
                    name: 'Samar',
                },
                {
                    code: 'PH72',
                    name: 'Sarangani',
                },
                {
                    code: 'RP69',
                    name: 'Siquijor',
                },
                {
                    code: 'RP58',
                    name: 'Sorsogon',
                },
                {
                    code: 'RP70',
                    name: 'South Cotabato',
                },
                {
                    code: 'RP59',
                    name: 'Southern Leyte',
                },
                {
                    code: 'RP71',
                    name: 'Sultan Kudarat',
                },
                {
                    code: 'RP60',
                    name: 'Sulu',
                },
                {
                    code: 'RP61',
                    name: 'Surigao del Norte',
                },
                {
                    code: 'RP62',
                    name: 'Surigao del Sur',
                },
                {
                    code: 'RPO3',
                    name: 'Tarlac',
                },
                {
                    code: 'RPO4',
                    name: 'Tawi-Tawi',
                },
                {
                    code: 'RPP1',
                    name: 'Zambales',
                },
                {
                    code: 'RPG7',
                    name: 'Zamboanga del Norte',
                },
                {
                    code: 'RP65',
                    name: 'Zamboanga del Sur',
                },
                {
                    code: 'RP66',
                    name: 'Zamboanga-Sibugay',
                },
            ],
        },
        {
            code: 'PN',
            id: 2431,
            name: 'Pitcairn',
            states: [],
        },
        {
            code: 'PL',
            id: 2320,
            name: 'Poland',
            states: [
                {
                    code: 'PL-DS',
                    name: 'Dolnoslaskie',
                },
                {
                    code: 'PL-KP',
                    name: 'Kujawsko-pomorskie',
                },
                {
                    code: 'PL-LD',
                    name: 'Lódzkie',
                },
                {
                    code: 'PL-LU',
                    name: 'Lubelskie',
                },
                {
                    code: 'PL-LB',
                    name: 'Lubuskie',
                },
                {
                    code: 'PL-MA',
                    name: 'Malopolskie',
                },
                {
                    code: 'PL-MZ',
                    name: 'Mazowieckie',
                },
                {
                    code: 'PL-OP',
                    name: 'Opolskie',
                },
                {
                    code: 'PL-PK',
                    name: 'Podkarpackie',
                },
                {
                    code: 'PL-PD',
                    name: 'Podlaskie',
                },
                {
                    code: 'PL-PM',
                    name: 'Pomorskie',
                },
                {
                    code: 'PL-SL',
                    name: 'Slaskie',
                },
                {
                    code: 'PL-SK',
                    name: 'Swietokrzyskie',
                },
                {
                    code: 'PL-WN',
                    name: 'Warminsko-mazurskie',
                },
                {
                    code: 'PL-WP',
                    name: 'Wielkopolskie',
                },
            ],
        },
        {
            code: 'PT',
            id: 2321,
            name: 'Portugal',
            states: [
                {
                    code: 'PO23',
                    name: 'Acores Autonomous',
                },
                {
                    code: 'PO02',
                    name: 'Aveiro',
                },
                {
                    code: 'PO03',
                    name: 'Beja',
                },
                {
                    code: 'PO04',
                    name: 'Braga',
                },
                {
                    code: 'PO05',
                    name: 'Braganca',
                },
                {
                    code: 'PO06',
                    name: 'Castelo Branco',
                },
                {
                    code: 'PO07',
                    name: 'Coimbra',
                },
                {
                    code: 'PO08',
                    name: 'Evora',
                },
                {
                    code: 'PO09',
                    name: 'Faro',
                },
                {
                    code: 'PO11',
                    name: 'Guarda',
                },
                {
                    code: 'PO13',
                    name: 'Leiria',
                },
                {
                    code: 'PO14',
                    name: 'Lisboa',
                },
                {
                    code: 'PO10',
                    name: 'Madeira Autonomous',
                },
                {
                    code: 'PO16',
                    name: 'Portalegre',
                },
                {
                    code: 'PO17',
                    name: 'Porto',
                },
                {
                    code: 'PO18',
                    name: 'Santarem',
                },
                {
                    code: 'PO19',
                    name: 'Setubal',
                },
                {
                    code: 'PO20',
                    name: 'Viana do Castelo',
                },
                {
                    code: 'PO21',
                    name: 'Vila Real',
                },
                {
                    code: 'PO22',
                    name: 'Viseu',
                },
            ],
        },
        {
            code: 'PR',
            id: 2374,
            name: 'Puerto Rico',
            states: [
                {
                    code: 'PR.AJ',
                    name: 'Adjuntas',
                },
                {
                    code: 'PR.AD',
                    name: 'Aguada',
                },
                {
                    code: 'PR.AL',
                    name: 'Aguadilla',
                },
                {
                    code: 'PR.AB',
                    name: 'Aguas Buenas',
                },
                {
                    code: 'PR.AI',
                    name: 'Aibonito',
                },
                {
                    code: 'PR.AN',
                    name: 'Añasco',
                },
                {
                    code: 'PR.AC',
                    name: 'Arecibo',
                },
                {
                    code: 'PR.AR',
                    name: 'Arroyo',
                },
                {
                    code: 'PR.BC',
                    name: 'Barceloneta',
                },
                {
                    code: 'PR.BQ',
                    name: 'Barranquitas',
                },
                {
                    code: 'PR.BY',
                    name: 'Bayamón',
                },
                {
                    code: 'PR.CR',
                    name: 'Cabo Rojo',
                },
                {
                    code: 'PR.CG',
                    name: 'Caguas',
                },
                {
                    code: 'PR.CA',
                    name: 'Camuy',
                },
                {
                    code: 'PR.CV',
                    name: 'Canóvanas',
                },
                {
                    code: 'PR.CN',
                    name: 'Carolina',
                },
                {
                    code: 'PR.CT',
                    name: 'Cataño',
                },
                {
                    code: 'PR.CY',
                    name: 'Cayey',
                },
                {
                    code: 'PR.CB',
                    name: 'Ceiba',
                },
                {
                    code: 'PR.CL',
                    name: 'Ciales',
                },
                {
                    code: 'PR.CD',
                    name: 'Cidra',
                },
                {
                    code: 'PR.CO',
                    name: 'Coamo',
                },
                {
                    code: 'PR.CM',
                    name: 'Comerío',
                },
                {
                    code: 'PR.CZ',
                    name: 'Corozal',
                },
                {
                    code: 'PR.CU',
                    name: 'Culebra',
                },
                {
                    code: 'PR.DO',
                    name: 'Dorado',
                },
                {
                    code: 'PR.FJ',
                    name: 'Fajardo',
                },
                {
                    code: 'PR.FL',
                    name: 'Florida',
                },
                {
                    code: 'PR.GC',
                    name: 'Guánica',
                },
                {
                    code: 'PR.GM',
                    name: 'Guayama',
                },
                {
                    code: 'PR.GL',
                    name: 'Guayanilla',
                },
                {
                    code: 'PR.GB',
                    name: 'Guaynabo',
                },
                {
                    code: 'PR.GR',
                    name: 'Gurabo',
                },
                {
                    code: 'PR.HA',
                    name: 'Hatillo',
                },
                {
                    code: 'PR.HO',
                    name: 'Hormigueros',
                },
                {
                    code: 'PR.HU',
                    name: 'Humacao',
                },
                {
                    code: 'PR.IS',
                    name: 'Isabela',
                },
                {
                    code: 'PR.JY',
                    name: 'Jayuya',
                },
                {
                    code: 'PR.JD',
                    name: 'Juana Díaz',
                },
                {
                    code: 'PR.JC',
                    name: 'Juncos',
                },
                {
                    code: 'PR.LJ',
                    name: 'Lajas',
                },
                {
                    code: 'PR.LR',
                    name: 'Lares',
                },
                {
                    code: 'PR.LM',
                    name: 'Las Marías',
                },
                {
                    code: 'PR.LP',
                    name: 'Las Piedras',
                },
                {
                    code: 'PR.LZ',
                    name: 'Loíza',
                },
                {
                    code: 'PR.LQ',
                    name: 'Luquillo',
                },
                {
                    code: 'PR.MT',
                    name: 'Manatí',
                },
                {
                    code: 'PR.MR',
                    name: 'Maricao',
                },
                {
                    code: 'PR.MB',
                    name: 'Maunabo',
                },
                {
                    code: 'PR.MG',
                    name: 'Mayagüez',
                },
                {
                    code: 'PR.MC',
                    name: 'Moca',
                },
                {
                    code: 'PR.MV',
                    name: 'Morovis',
                },
                {
                    code: 'PR.NG',
                    name: 'Naguabo',
                },
                {
                    code: 'PR.NR',
                    name: 'Naranjito',
                },
                {
                    code: 'PR.OR',
                    name: 'Orocovis',
                },
                {
                    code: 'PR.PT',
                    name: 'Patillas',
                },
                {
                    code: 'PR.PN\t',
                    name: 'Peñuelas',
                },
                {
                    code: 'PR.PO',
                    name: 'Ponce',
                },
                {
                    code: 'PR.QB',
                    name: 'Quebradillas',
                },
                {
                    code: 'PR.RC',
                    name: 'Rincón',
                },
                {
                    code: 'PR.RG',
                    name: 'Río Grande',
                },
                {
                    code: 'PR.SB',
                    name: 'Sabana Grande',
                },
                {
                    code: 'PR.SA',
                    name: 'Salinas',
                },
                {
                    code: 'PR.SG',
                    name: 'San Germán',
                },
                {
                    code: 'PR.SJ',
                    name: 'San Juan',
                },
                {
                    code: 'PR.SL',
                    name: 'San Lorenzo',
                },
                {
                    code: 'PR.SS',
                    name: 'San Sebastián',
                },
                {
                    code: 'PR.SI',
                    name: 'Santa Isabel',
                },
                {
                    code: 'PR.TA',
                    name: 'Toa Alta',
                },
                {
                    code: 'PR.TB',
                    name: 'Toa Baja',
                },
                {
                    code: 'PR.TJ',
                    name: 'Trujillo Alto',
                },
                {
                    code: 'PR.UT',
                    name: 'Utuado',
                },
                {
                    code: 'PR.VA',
                    name: 'Vega Alta',
                },
                {
                    code: 'PR.VB',
                    name: 'Vega Baja',
                },
                {
                    code: 'PR.VQ',
                    name: 'Vieques',
                },
                {
                    code: 'PR.VL',
                    name: 'Villalba',
                },
                {
                    code: 'PR.YB',
                    name: 'Yabucoa',
                },
                {
                    code: 'PR.YU',
                    name: 'Yauco',
                },
            ],
        },
        {
            code: 'QA',
            id: 2322,
            name: 'Qatar',
            states: [
                {
                    code: 'QA01',
                    name: 'Ad Dawhah',
                },
                {
                    code: 'QA13',
                    name: 'Al Daayen',
                },
                {
                    code: 'QA04',
                    name: 'Al Khawr',
                },
                {
                    code: 'QA10',
                    name: 'Al Wakrah',
                },
                {
                    code: 'QA14',
                    name: 'Al-Shahaniya',
                },
                {
                    code: 'QA06',
                    name: 'Ar Rayyan',
                },
                {
                    code: 'QA08',
                    name: 'Madinat ach Shamal',
                },
                {
                    code: 'QA09',
                    name: 'Umm Salal',
                },
            ],
        },
        {
            code: 'R999',
            id: 2398,
            name: 'Reunion',
            states: [],
        },
        {
            code: 'RO',
            id: 2323,
            name: 'Romania',
            states: [
                {
                    code: 'RO-AB',
                    name: 'Alba',
                },
                {
                    code: 'RO-AR',
                    name: 'Arad',
                },
                {
                    code: 'RO-AG',
                    name: 'Arges',
                },
                {
                    code: 'RO-BC',
                    name: 'Bacau',
                },
                {
                    code: 'RO-BH',
                    name: 'Bihor',
                },
                {
                    code: 'RO-BN',
                    name: 'Bistrita-Nasaud',
                },
                {
                    code: 'RO-BT',
                    name: 'Botosani',
                },
                {
                    code: 'RO-BR',
                    name: 'Braila',
                },
                {
                    code: 'RO-BV',
                    name: 'Brasov',
                },
                {
                    code: 'RO-B',
                    name: 'Bucuresti',
                },
                {
                    code: 'RO-BZ',
                    name: 'Buzau',
                },
                {
                    code: 'RO-CL',
                    name: 'Calarasi',
                },
                {
                    code: 'RO-CS',
                    name: 'Caras-Severin',
                },
                {
                    code: 'RO-CJ',
                    name: 'Cluj',
                },
                {
                    code: 'RO-CT',
                    name: 'Constanta',
                },
                {
                    code: 'RO-CV',
                    name: 'Covasna',
                },
                {
                    code: 'RO-DB',
                    name: 'Dâmbovita',
                },
                {
                    code: 'RO-DJ',
                    name: 'Dolj',
                },
                {
                    code: 'RO-GL',
                    name: 'Galati',
                },
                {
                    code: 'RO-GR',
                    name: 'Giurgiu',
                },
                {
                    code: 'RO-GJ',
                    name: 'Gorj',
                },
                {
                    code: 'RO-HR',
                    name: 'Harghita',
                },
                {
                    code: 'RO-HD',
                    name: 'Hunedoara',
                },
                {
                    code: 'RO-IL',
                    name: 'Ialomita',
                },
                {
                    code: 'RO-IS',
                    name: 'Iasi',
                },
                {
                    code: 'RO-IF',
                    name: 'Ilfov',
                },
                {
                    code: 'RO-MM',
                    name: 'Maramures',
                },
                {
                    code: 'RO-MH',
                    name: 'Mehedinti',
                },
                {
                    code: 'RO-MS',
                    name: 'Mures',
                },
                {
                    code: 'RO-NT',
                    name: 'Neamt',
                },
                {
                    code: 'RO-OT',
                    name: 'Olt',
                },
                {
                    code: 'RO-PH',
                    name: 'Prahova',
                },
                {
                    code: 'RO-SJ',
                    name: 'Salaj',
                },
                {
                    code: 'RO-SM',
                    name: 'Satu Mare',
                },
                {
                    code: 'RO-SB',
                    name: 'Sibiu',
                },
                {
                    code: 'RO-SV',
                    name: 'Suceava',
                },
                {
                    code: 'RO-TR',
                    name: 'Teleorman',
                },
                {
                    code: 'RO-TM',
                    name: 'Timis',
                },
                {
                    code: 'RO-TL',
                    name: 'Tulcea',
                },
                {
                    code: 'RO-VL',
                    name: 'Vâlcea',
                },
                {
                    code: 'RO-VS',
                    name: 'Vaslui',
                },
                {
                    code: 'RO-VN',
                    name: 'Vrancea',
                },
            ],
        },
        {
            code: 'RU',
            id: 2324,
            name: 'Russian Federation',
            states: [
                {
                    code: 'RS01',
                    name: 'Adygeya Republic',
                },
                {
                    code: 'RS02',
                    name: 'Aginskiy Buryatskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS03',
                    name: 'Altay Republic',
                },
                {
                    code: 'RS04',
                    name: 'Altayskiy Kray',
                },
                {
                    code: 'RS05',
                    name: "Amurskaya Oblast'",
                },
                {
                    code: 'RS06',
                    name: "Arkhangel'skaya Oblast'",
                },
                {
                    code: 'RS07',
                    name: "Astrakhanskaya Oblast'",
                },
                {
                    code: 'RS08',
                    name: 'Bashkortostan Republic',
                },
                {
                    code: 'RS09',
                    name: "Belgorodskaya Oblast'",
                },
                {
                    code: 'RS10',
                    name: "Bryanskaya Oblast'",
                },
                {
                    code: 'RS11',
                    name: 'Buryatiya Republic',
                },
                {
                    code: 'RSCI',
                    name: 'Chechnya Republic',
                },
                {
                    code: 'RS13',
                    name: "Chelyabinskaya Oblast'",
                },
                {
                    code: 'RS14',
                    name: "Chitinskaya Oblast'",
                },
                {
                    code: 'RS15',
                    name: 'Chukotskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS16',
                    name: 'Chuvashiya Republic',
                },
                {
                    code: 'RS17',
                    name: 'Dagestan Republic',
                },
                {
                    code: 'RS18',
                    name: 'Evenkiyskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS20',
                    name: "Irkutskaya Oblast'",
                },
                {
                    code: 'RS21',
                    name: "Ivanovskaya Oblast'",
                },
                {
                    code: 'RS22',
                    name: 'Kabardino-Balkariya Republic',
                },
                {
                    code: 'RS23',
                    name: "Kaliningradskaya Oblast'",
                },
                {
                    code: 'RS24',
                    name: 'Kalmykiya Republic',
                },
                {
                    code: 'RS25',
                    name: "Kaluzhskaya Oblast'",
                },
                {
                    code: 'RS26',
                    name: "Kamchatskaya Oblast'",
                },
                {
                    code: 'RS27',
                    name: 'Karachayevo-Cherkesiya Republic',
                },
                {
                    code: 'RS28',
                    name: 'Kareliya Republic',
                },
                {
                    code: 'RS29',
                    name: "Kemerovskaya Oblast'",
                },
                {
                    code: 'RS30',
                    name: 'Khabarovskiy Kray',
                },
                {
                    code: 'RS31',
                    name: 'Khakasiya Republic',
                },
                {
                    code: 'RS32',
                    name: 'Khanty-Mansiyskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS33',
                    name: "Kirovskaya Oblast'",
                },
                {
                    code: 'RS34',
                    name: 'Komi Republic',
                },
                {
                    code: 'RS36',
                    name: 'Koryakskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS37',
                    name: "Kostromskaya Oblast'",
                },
                {
                    code: 'RS38',
                    name: 'Krasnodarskiy Kray',
                },
                {
                    code: 'RS39',
                    name: 'Krasnoyarskiy Kray',
                },
                {
                    code: 'RS40',
                    name: "Kurganskaya Oblast'",
                },
                {
                    code: 'RS41',
                    name: "Kurskaya Oblast'",
                },
                {
                    code: 'RS42',
                    name: "Leningradskaya Oblast'",
                },
                {
                    code: 'RS43',
                    name: "Lipetskaya Oblast'",
                },
                {
                    code: 'RS44',
                    name: "Magadanskaya Oblast'",
                },
                {
                    code: 'RS45',
                    name: 'Mariy-El Republic',
                },
                {
                    code: 'RS46',
                    name: 'Mordoviya Republic',
                },
                {
                    code: 'RS47',
                    name: "Moskovskaya Oblast'",
                },
                {
                    code: 'RS48',
                    name: 'Moskva Federal City',
                },
                {
                    code: 'RS49',
                    name: "Murmanskaya Oblast'",
                },
                {
                    code: 'RS50',
                    name: 'Nenetskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS51',
                    name: "Nizhegorodskaya Oblast'",
                },
                {
                    code: 'RS52',
                    name: "Novgorodskaya Oblast'",
                },
                {
                    code: 'RS53',
                    name: "Novosibirskaya Oblast'",
                },
                {
                    code: 'RS54',
                    name: "Omskaya Oblast'",
                },
                {
                    code: 'RS55',
                    name: "Orenburgskaya Oblast'",
                },
                {
                    code: 'RS56',
                    name: "Orlovskaya Oblast'",
                },
                {
                    code: 'RS57',
                    name: "Penzenskaya Oblast'",
                },
                {
                    code: 'RS90',
                    name: 'Permskiy Kray',
                },
                {
                    code: 'RS59',
                    name: 'Primorskiy Kray',
                },
                {
                    code: 'RS60',
                    name: "Pskovskaya Oblast'",
                },
                {
                    code: 'RS61',
                    name: "Rostovskaya Oblast'",
                },
                {
                    code: 'RS62',
                    name: "Ryazanskaya Oblast'",
                },
                {
                    code: 'RS63',
                    name: 'Sakha (Yakutiya) Republic',
                },
                {
                    code: 'RS64',
                    name: "Sakhalinskaya Oblast'",
                },
                {
                    code: 'RS65',
                    name: "Samarskaya Oblast'",
                },
                {
                    code: 'RS66',
                    name: 'Sankt-Peterburg Federal City',
                },
                {
                    code: 'RS67',
                    name: "Saratovskaya Oblast'",
                },
                {
                    code: 'RS68',
                    name: 'Severnaya Osetiya-Alaniya Respublika',
                },
                {
                    code: 'RS69',
                    name: "Smolenskaya Oblast'",
                },
                {
                    code: 'RS70',
                    name: "Stavropol'skiy Kray",
                },
                {
                    code: 'RS71',
                    name: "Sverdlovskaya Oblast'",
                },
                {
                    code: 'RS72',
                    name: "Tambovskaya Oblast'",
                },
                {
                    code: 'RS73',
                    name: 'Tatarstan Republic',
                },
                {
                    code: 'RS74',
                    name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug',
                },
                {
                    code: 'RS75',
                    name: "Tomskaya Oblast'",
                },
                {
                    code: 'RS76',
                    name: "Tul'skaya Oblast'",
                },
                {
                    code: 'RS77',
                    name: "Tverskaya Oblast'",
                },
                {
                    code: 'RS78',
                    name: "Tyumenskaya Oblast'",
                },
                {
                    code: 'RS79',
                    name: 'Tyva Republic',
                },
                {
                    code: 'RS80',
                    name: 'Udmurtiya Republic',
                },
                {
                    code: 'RS81',
                    name: "Ul'yanovskaya Oblast'",
                },
                {
                    code: 'RS82',
                    name: "Ust'-Ordynskiy Buryatskiy Avtonomnyy Okrug",
                },
                {
                    code: 'RS83',
                    name: "Vladimirskaya Oblast'",
                },
                {
                    code: 'RS84',
                    name: "Volgogradskaya Oblast'",
                },
                {
                    code: 'RS85',
                    name: "Vologodskaya Oblast'",
                },
                {
                    code: 'RS86',
                    name: "Voronezhskaya Oblast'",
                },
                {
                    code: 'RS87',
                    name: 'Yamalo-Nenetskiy Avtonomnyy Okrug',
                },
                {
                    code: 'RS88',
                    name: "Yaroslavskaya Oblast'",
                },
                {
                    code: 'RS89',
                    name: "Yevreyskaya Avtonomnaya Oblast'",
                },
            ],
        },
        {
            code: 'RW',
            id: 2325,
            name: 'Rwanda',
            states: [
                {
                    code: 'RW11',
                    name: 'Eastern',
                },
                {
                    code: 'RW12',
                    name: 'Kigali City',
                },
                {
                    code: 'RW13',
                    name: 'Northern',
                },
                {
                    code: 'RW15',
                    name: 'Southern',
                },
                {
                    code: 'RW14',
                    name: 'Western',
                },
            ],
        },
        {
            code: 'BL',
            id: 2432,
            name: 'Saint Barthélemy',
            states: [],
        },
        {
            code: 'SH',
            id: 2433,
            name: 'Saint Helena; Ascension and Tristan Da Cunha',
            states: [],
        },
        {
            code: 'KN',
            id: 2399,
            name: 'Saint Kitts and Nevis',
            states: [],
        },
        {
            code: 'LC',
            id: 2326,
            name: 'Saint Lucia',
            states: [],
        },
        {
            code: 'MF',
            id: 2434,
            name: 'Saint Martin',
            states: [
                {
                    code: 'MF.SM',
                    name: 'Saint Martin',
                },
            ],
        },
        {
            code: 'PM',
            id: 2435,
            name: 'Saint Pierre And Miquelon',
            states: [],
        },
        {
            code: 'VC',
            id: 2400,
            name: 'Saint Vincent and Grenadines',
            states: [],
        },
        {
            code: 'WS',
            id: 2401,
            name: 'Samoa',
            states: [
                {
                    code: 'WS01',
                    name: "A'ana",
                },
                {
                    code: 'WS02',
                    name: 'Aiga-i-le-Tai',
                },
                {
                    code: 'WS03',
                    name: 'Atua',
                },
                {
                    code: 'WS04',
                    name: "Fa'asaleleaga",
                },
                {
                    code: 'WS05',
                    name: "Gaga'emauga",
                },
                {
                    code: 'WS07',
                    name: 'Gagaifomauga',
                },
                {
                    code: 'WS08',
                    name: 'Palauli',
                },
                {
                    code: 'WS09',
                    name: "Satupa'itea",
                },
                {
                    code: 'WS10',
                    name: 'Tuamasaga',
                },
                {
                    code: 'WS06',
                    name: "Va'a-o-Fonoti",
                },
                {
                    code: 'WS11',
                    name: 'Vaisigano',
                },
            ],
        },
        {
            code: 'SM',
            id: 2327,
            name: 'San Marino',
            states: [],
        },
        {
            code: 'TP',
            id: 2403,
            name: 'Sao Tome and Principe',
            states: [],
        },
        {
            code: 'SA',
            id: 2328,
            name: 'Saudi Arabia',
            states: [
                {
                    code: 'SA02',
                    name: 'Al Bahah',
                },
                {
                    code: 'SA15',
                    name: 'Al Hudud ash Shamaliyah',
                },
                {
                    code: 'SA20',
                    name: 'Al Jawf',
                },
                {
                    code: 'SA05',
                    name: 'Al Madinah',
                },
                {
                    code: 'SA08',
                    name: 'Al Qasim',
                },
                {
                    code: 'SA10',
                    name: 'Ar Riyad',
                },
                {
                    code: 'SA06',
                    name: 'Ash Sharqiyah',
                },
                {
                    code: 'SA11',
                    name: 'Asir',
                },
                {
                    code: 'SA13',
                    name: "Ha'il",
                },
                {
                    code: 'SA17',
                    name: 'Jizan',
                },
                {
                    code: 'SA14',
                    name: 'Makkah',
                },
                {
                    code: 'SA16',
                    name: 'Najran',
                },
                {
                    code: 'SA19',
                    name: 'Tabuk',
                },
            ],
        },
        {
            code: 'SN',
            id: 2329,
            name: 'Senegal',
            states: [
                {
                    code: 'SG01',
                    name: 'Dakar',
                },
                {
                    code: 'SG03',
                    name: 'Diourbel',
                },
                {
                    code: 'SG09',
                    name: 'Fatick',
                },
                {
                    code: 'SG16',
                    name: 'Kaffrine',
                },
                {
                    code: 'SG10',
                    name: 'Kaolack',
                },
                {
                    code: 'SG17',
                    name: 'Kédougou',
                },
                {
                    code: 'SG11',
                    name: 'Kolda',
                },
                {
                    code: 'SG13',
                    name: 'Louga',
                },
                {
                    code: 'SG15',
                    name: 'Matam',
                },
                {
                    code: 'SG14',
                    name: 'Saint-Louis',
                },
                {
                    code: 'SG18',
                    name: 'Sédhiou',
                },
                {
                    code: 'SG05',
                    name: 'Tambacounda',
                },
                {
                    code: 'SG07',
                    name: 'Thiès',
                },
                {
                    code: 'SG12',
                    name: 'Ziguinchor',
                },
            ],
        },
        {
            code: 'RI',
            id: 2402,
            name: 'Serbia',
            states: [
                {
                    code: 'RS-00',
                    name: 'Belgrade',
                },
                {
                    code: 'RS-14',
                    name: 'Borski okrug',
                },
                {
                    code: 'RS-11',
                    name: 'Branicevski okrug',
                },
                {
                    code: 'RS-23',
                    name: 'Jablanicki okrug',
                },
                {
                    code: 'RS-06',
                    name: 'Južnobanatski okrug',
                },
                {
                    code: 'RS-04',
                    name: 'Južnobanatski okrug',
                },
                {
                    code: 'RS-09',
                    name: 'Kolubarski okrug',
                },
                {
                    code: 'RS-25',
                    name: 'Kosovski okrug',
                },
                {
                    code: 'RS-28',
                    name: 'Kosovsko-Mitrovacki okrug',
                },
                {
                    code: 'RS-29',
                    name: 'Kosovsko-Pomoravski okrug',
                },
                {
                    code: 'RS-08',
                    name: 'Macvanski okrug',
                },
                {
                    code: 'RS-17',
                    name: 'Moravicki okrug',
                },
                {
                    code: 'RS-20',
                    name: 'Nišavski okrug',
                },
                {
                    code: 'RS-24',
                    name: 'Pcinjski okrug',
                },
                {
                    code: 'RS-26',
                    name: 'Pecki okrug',
                },
                {
                    code: 'RS-22',
                    name: 'Pirotski okrug',
                },
                {
                    code: 'RS-10',
                    name: 'Podunavski okrug',
                },
                {
                    code: 'RS-13',
                    name: 'Pomoravski okrug',
                },
                {
                    code: 'RS-27',
                    name: 'Prizrenski okrug',
                },
                {
                    code: 'RS-19',
                    name: 'Rasinski okrug',
                },
                {
                    code: 'RS-18',
                    name: 'Raška okrug',
                },
                {
                    code: 'RS-01',
                    name: 'Severnobacki okrug',
                },
                {
                    code: 'RS-03',
                    name: 'Severnobanatski okrug',
                },
                {
                    code: 'RS-02',
                    name: 'Srednjebanatski okrug',
                },
                {
                    code: 'RS-07',
                    name: 'Sremski okrug',
                },
                {
                    code: 'RS-12',
                    name: 'Šumadijski okrug',
                },
                {
                    code: 'RS-21',
                    name: 'Toplièki okrug',
                },
                {
                    code: 'RS-15',
                    name: 'Zajeèarski okrug',
                },
                {
                    code: 'RS-05',
                    name: 'Zapadnobaèki okrug',
                },
                {
                    code: 'RS-16',
                    name: 'Zlatiborski okrug',
                },
            ],
        },
        {
            code: 'SC',
            id: 2331,
            name: 'Seychelles',
            states: [],
        },
        {
            code: 'SL',
            id: 2332,
            name: 'Sierra Leone',
            states: [
                {
                    code: 'SL01',
                    name: 'Eastern',
                },
                {
                    code: 'SL02',
                    name: 'Northern',
                },
                {
                    code: 'SL03',
                    name: 'Southern',
                },
                {
                    code: 'SL04',
                    name: 'Western',
                },
            ],
        },
        {
            code: 'SG',
            id: 2333,
            name: 'Singapore',
            states: [
                {
                    code: 'SG01',
                    name: 'Central Singapore',
                },
                {
                    code: 'SG02',
                    name: 'North East',
                },
                {
                    code: 'SG03',
                    name: 'North West',
                },
                {
                    code: 'SG04',
                    name: 'South East',
                },
                {
                    code: 'SG05',
                    name: 'South West',
                },
            ],
        },
        {
            code: 'SX',
            id: 2448,
            name: 'Sint Maarten',
            states: [
                {
                    code: 'SX.SM',
                    name: 'Sint Maarten',
                },
            ],
        },
        {
            code: 'SK',
            id: 2334,
            name: 'Slovakia',
            states: [
                {
                    code: 'SK-BC',
                    name: 'Banskobystrický kraj',
                },
                {
                    code: 'SK-BL',
                    name: 'Bratislavský kraj',
                },
                {
                    code: 'SK-KI',
                    name: 'Košický kraj',
                },
                {
                    code: 'SK-NI',
                    name: 'Nitriansky kraj',
                },
                {
                    code: 'SK-PV',
                    name: 'Prešovský kraj',
                },
                {
                    code: 'SK-TC',
                    name: 'Trenciansky kraj',
                },
                {
                    code: 'SK-TA',
                    name: 'Trnavský kraj',
                },
                {
                    code: 'SK-ZI',
                    name: 'Žilinský kraj',
                },
            ],
        },
        {
            code: 'SI',
            id: 2335,
            name: 'Slovenia',
            states: [
                {
                    code: 'SI-001',
                    name: 'Ajdovšcina',
                },
                {
                    code: 'SI-195',
                    name: 'Apace',
                },
                {
                    code: 'SI-002',
                    name: 'Beltinci',
                },
                {
                    code: 'SI-148',
                    name: 'Benedikt',
                },
                {
                    code: 'SI-149',
                    name: 'Bistrica ob Sotli',
                },
                {
                    code: 'SI-003',
                    name: 'Bled',
                },
                {
                    code: 'SI-150',
                    name: 'Bloke',
                },
                {
                    code: 'SI-004',
                    name: 'Bohinj',
                },
                {
                    code: 'SI-005',
                    name: 'Borovnica',
                },
                {
                    code: 'SI-006',
                    name: 'Bovec',
                },
                {
                    code: 'SI-151',
                    name: 'Braslovce',
                },
                {
                    code: 'SI-007',
                    name: 'Brda',
                },
                {
                    code: 'SI-009',
                    name: 'Brežice',
                },
                {
                    code: 'SI-008',
                    name: 'Brezovica',
                },
                {
                    code: 'SI-152',
                    name: 'Cankova',
                },
                {
                    code: 'SI-011',
                    name: 'Celje',
                },
                {
                    code: 'SI-012',
                    name: 'Cerklje na Gorenjskem',
                },
                {
                    code: 'SI-013',
                    name: 'Cerknica',
                },
                {
                    code: 'SI-014',
                    name: 'Cerkno',
                },
                {
                    code: 'SI-153',
                    name: 'Cerkvenjak',
                },
                {
                    code: 'SI-197',
                    name: 'Cirkulane',
                },
                {
                    code: 'SI-015',
                    name: 'Crenšovci',
                },
                {
                    code: 'SI-016',
                    name: 'Crna na Koroškem',
                },
                {
                    code: 'SI-017',
                    name: 'Crnomelj',
                },
                {
                    code: 'SI-018',
                    name: 'Destrnik',
                },
                {
                    code: 'SI-019',
                    name: 'Divaca',
                },
                {
                    code: 'SI-154',
                    name: 'Dobje',
                },
                {
                    code: 'SI-020',
                    name: 'Dobrepolje',
                },
                {
                    code: 'SI-155',
                    name: 'Dobrna',
                },
                {
                    code: 'SI-021',
                    name: 'Dobrova-Polhov Gradec',
                },
                {
                    code: 'SI-156',
                    name: 'Dobrovnik/Dobronak',
                },
                {
                    code: 'SI-022',
                    name: 'Dol pri Ljubljani',
                },
                {
                    code: 'SI-157',
                    name: 'Dolenjske Toplice',
                },
                {
                    code: 'SI-023',
                    name: 'Domžale',
                },
                {
                    code: 'SI-024',
                    name: 'Dornava',
                },
                {
                    code: 'SI-025',
                    name: 'Dravograd',
                },
                {
                    code: 'SI-026',
                    name: 'Duplek',
                },
                {
                    code: 'SI-027',
                    name: 'Gorenja vas-Poljane',
                },
                {
                    code: 'SI-028',
                    name: 'Gorišnica',
                },
                {
                    code: 'SI-207',
                    name: 'Gorje',
                },
                {
                    code: 'SI-029',
                    name: 'Gornja Radgona',
                },
                {
                    code: 'SI-030',
                    name: 'Gornji Grad',
                },
                {
                    code: 'SI-031',
                    name: 'Gornji Petrovci',
                },
                {
                    code: 'SI-158',
                    name: 'Grad',
                },
                {
                    code: 'SI-032',
                    name: 'Grosuplje',
                },
                {
                    code: 'SI-159',
                    name: 'Hajdina',
                },
                {
                    code: 'SI-160',
                    name: 'Hoce-Slivnica',
                },
                {
                    code: 'SI-161',
                    name: 'Hodoš/Hodos',
                },
                {
                    code: 'SI-162',
                    name: 'Horjul',
                },
                {
                    code: 'SI-034',
                    name: 'Hrastnik',
                },
                {
                    code: 'SI-035',
                    name: 'Hrpelje-Kozina',
                },
                {
                    code: 'SI-036',
                    name: 'Idrija',
                },
                {
                    code: 'SI-037',
                    name: 'Ig',
                },
                {
                    code: 'SI-038',
                    name: 'Ilirska Bistrica',
                },
                {
                    code: 'SI-039',
                    name: 'Ivancna Gorica',
                },
                {
                    code: 'SI-040',
                    name: 'Izola/Isola',
                },
                {
                    code: 'SI-041',
                    name: 'Jesenice',
                },
                {
                    code: 'SI-163',
                    name: 'Jezersko',
                },
                {
                    code: 'SI-042',
                    name: 'Juršinci',
                },
                {
                    code: 'SI-043',
                    name: 'Kamnik',
                },
                {
                    code: 'SI-044',
                    name: 'Kanal',
                },
                {
                    code: 'SI-045',
                    name: 'Kidricevo',
                },
                {
                    code: 'SI-046',
                    name: 'Kobarid',
                },
                {
                    code: 'SI-047',
                    name: 'Kobilje',
                },
                {
                    code: 'SI-048',
                    name: 'Kocevje',
                },
                {
                    code: 'SI-049',
                    name: 'Komen',
                },
                {
                    code: 'SI-164',
                    name: 'Komenda',
                },
                {
                    code: 'SI-050',
                    name: 'Koper/Capodistria',
                },
                {
                    code: 'SI-196',
                    name: 'Kosanjevica na Krki',
                },
                {
                    code: 'SI-165',
                    name: 'Kostel',
                },
                {
                    code: 'SI-051',
                    name: 'Kozje',
                },
                {
                    code: 'SI-052',
                    name: 'Kranj',
                },
                {
                    code: 'SI-053',
                    name: 'Kranjska Gora',
                },
                {
                    code: 'SI-166',
                    name: 'Križevci',
                },
                {
                    code: 'SI-054',
                    name: 'Krško',
                },
                {
                    code: 'SI-055',
                    name: 'Kungota',
                },
                {
                    code: 'SI-056',
                    name: 'Kuzma',
                },
                {
                    code: 'SI-057',
                    name: 'Laško',
                },
                {
                    code: 'SI-058',
                    name: 'Lenart',
                },
                {
                    code: 'SI-059',
                    name: 'Lendava/Lendva',
                },
                {
                    code: 'SI-060',
                    name: 'Litija',
                },
                {
                    code: 'SI-061',
                    name: 'Ljubljana',
                },
                {
                    code: 'SI-062',
                    name: 'Ljubno',
                },
                {
                    code: 'SI-063',
                    name: 'Ljutomer',
                },
                {
                    code: 'SI-208',
                    name: 'Log-Dragomer',
                },
                {
                    code: 'SI-064',
                    name: 'Logatec',
                },
                {
                    code: 'SI-065',
                    name: 'Loška dolina',
                },
                {
                    code: 'SI-066',
                    name: 'Loški Potok',
                },
                {
                    code: 'SI-167',
                    name: 'Lovrenc na Pohorju',
                },
                {
                    code: 'SI-067',
                    name: 'Luce',
                },
                {
                    code: 'SI-068',
                    name: 'Lukovica',
                },
                {
                    code: 'SI-069',
                    name: 'Majšperk',
                },
                {
                    code: 'SI-198',
                    name: 'Makole',
                },
                {
                    code: 'SI-070',
                    name: 'Maribor',
                },
                {
                    code: 'SI-168',
                    name: 'Markovci',
                },
                {
                    code: 'SI-071',
                    name: 'Medvode',
                },
                {
                    code: 'SI-072',
                    name: 'Mengeš',
                },
                {
                    code: 'SI-073',
                    name: 'Metlika',
                },
                {
                    code: 'SI-074',
                    name: 'Mežica',
                },
                {
                    code: 'SI-169',
                    name: 'Miklavž na Dravskem polju',
                },
                {
                    code: 'SI-075',
                    name: 'Miren-Kostanjevica',
                },
                {
                    code: 'SI-170',
                    name: 'Mirna Pec',
                },
                {
                    code: 'SI-076',
                    name: 'Mislinja',
                },
                {
                    code: 'SI-199',
                    name: 'Mokronog-Trebelno',
                },
                {
                    code: 'SI-077',
                    name: 'Moravce',
                },
                {
                    code: 'SI-078',
                    name: 'Moravske Toplice',
                },
                {
                    code: 'SI-079',
                    name: 'Mozirje',
                },
                {
                    code: 'SI-080',
                    name: 'Murska Sobota',
                },
                {
                    code: 'SI-081',
                    name: 'Muta',
                },
                {
                    code: 'SI-082',
                    name: 'Naklo',
                },
                {
                    code: 'SI-083',
                    name: 'Nazarje',
                },
                {
                    code: 'SI-084',
                    name: 'Nova Gorica',
                },
                {
                    code: 'SI-085',
                    name: 'Novo mesto',
                },
                {
                    code: 'SI-086',
                    name: 'Odranci',
                },
                {
                    code: 'SI-171',
                    name: 'Oplotnica',
                },
                {
                    code: 'SI-087',
                    name: 'Ormož',
                },
                {
                    code: 'SI-088',
                    name: 'Osilnica',
                },
                {
                    code: 'SI-089',
                    name: 'Pesnica',
                },
                {
                    code: 'SI-090',
                    name: 'Piran/Pirano',
                },
                {
                    code: 'SI-091',
                    name: 'Pivka',
                },
                {
                    code: 'SI-092',
                    name: 'Podcetrtek',
                },
                {
                    code: 'SI-172',
                    name: 'Podlehnik',
                },
                {
                    code: 'SI-093',
                    name: 'Podvelka',
                },
                {
                    code: 'SI-200',
                    name: 'Poljcane',
                },
                {
                    code: 'SI-173',
                    name: 'Polzela',
                },
                {
                    code: 'SI-094',
                    name: 'Postojna',
                },
                {
                    code: 'SI-174',
                    name: 'Prebold',
                },
                {
                    code: 'SI-095',
                    name: 'Preddvor',
                },
                {
                    code: 'SI-175',
                    name: 'Prevalje',
                },
                {
                    code: 'SI-096',
                    name: 'Ptuj',
                },
                {
                    code: 'SI-097',
                    name: 'Puconci',
                },
                {
                    code: 'SI-098',
                    name: 'Race-Fram',
                },
                {
                    code: 'SI-099',
                    name: 'Radece',
                },
                {
                    code: 'SI-100',
                    name: 'Radenci',
                },
                {
                    code: 'SI-101',
                    name: 'Radlje ob Dravi',
                },
                {
                    code: 'SI-102',
                    name: 'Radovljica',
                },
                {
                    code: 'SI-103',
                    name: 'Ravne na Koroškem',
                },
                {
                    code: 'SI-176',
                    name: 'Razkrižje',
                },
                {
                    code: 'SI-209',
                    name: 'Recica ob Savinji',
                },
                {
                    code: 'SI-201',
                    name: 'Rence-Vogrsko',
                },
                {
                    code: 'SI-177',
                    name: 'Ribnica na Pohorju',
                },
                {
                    code: 'SI-104',
                    name: 'Ribnica',
                },
                {
                    code: 'SI-106',
                    name: 'Rogaška Slatina',
                },
                {
                    code: 'SI-105',
                    name: 'Rogašovci',
                },
                {
                    code: 'SI-107',
                    name: 'Rogatec',
                },
                {
                    code: 'SI-108',
                    name: 'Ruše',
                },
                {
                    code: 'SI-033',
                    name: 'Šalovci',
                },
                {
                    code: 'SI-178',
                    name: 'Selnica ob Dravi',
                },
                {
                    code: 'SI-109',
                    name: 'Semic',
                },
                {
                    code: 'SI-183',
                    name: 'Šempeter-Vrtojba',
                },
                {
                    code: 'SI-117',
                    name: 'Šencur',
                },
                {
                    code: 'SI-118',
                    name: 'Šentilj',
                },
                {
                    code: 'SI-119',
                    name: 'Šentjernej',
                },
                {
                    code: 'SI-120',
                    name: 'Šentjur pri Celju',
                },
                {
                    code: 'SI-211',
                    name: 'Šentrupert',
                },
                {
                    code: 'SI-110',
                    name: 'Sevnica',
                },
                {
                    code: 'SI-111',
                    name: 'Sežana',
                },
                {
                    code: 'SI-121',
                    name: 'Škocjan',
                },
                {
                    code: 'SI-122',
                    name: 'Škofja Loka',
                },
                {
                    code: 'SI-123',
                    name: 'Škofljica',
                },
                {
                    code: 'SI-112',
                    name: 'Slovenj Gradec',
                },
                {
                    code: 'SI-113',
                    name: 'Slovenska Bistrica',
                },
                {
                    code: 'SI-114',
                    name: 'Slovenske Konjice',
                },
                {
                    code: 'SI-124',
                    name: 'Šmarje pri Jelšah',
                },
                {
                    code: 'SI-206',
                    name: 'Šmarješke Toplice',
                },
                {
                    code: 'SI-125',
                    name: 'Šmartno ob Paki',
                },
                {
                    code: 'SI-194',
                    name: 'Šmartno pri Litiji',
                },
                {
                    code: 'SI-194',
                    name: 'Šmartno pri Litiji',
                },
                {
                    code: 'SI-179',
                    name: 'Sodražica',
                },
                {
                    code: 'SI-180',
                    name: 'Solcava',
                },
                {
                    code: 'SI-126',
                    name: 'Šoštanj',
                },
                {
                    code: 'SI-202',
                    name: 'Središce ob Dravi',
                },
                {
                    code: 'SI-115',
                    name: 'Starše',
                },
                {
                    code: 'SI-127',
                    name: 'Štore',
                },
                {
                    code: 'SI-203',
                    name: 'Straža',
                },
                {
                    code: 'SI-181',
                    name: 'Sveta Ana',
                },
                {
                    code: 'SI-204',
                    name: 'Sveta Trojica v Slovenskih Goricah',
                },
                {
                    code: 'SI-182',
                    name: 'Sveti Andraž v Slovenskih goricah',
                },
                {
                    code: 'SI-116',
                    name: 'Sveti Jurij',
                },
                {
                    code: 'SI-210',
                    name: 'Sveti Jurij v Slovenskih Goricah',
                },
                {
                    code: 'SI-205',
                    name: 'Sveti Tomaž',
                },
                {
                    code: 'SI-184',
                    name: 'Tabor',
                },
                {
                    code: 'SI-010',
                    name: 'Tišina',
                },
                {
                    code: 'SI-128',
                    name: 'Tolmin',
                },
                {
                    code: 'SI-129',
                    name: 'Trbovlje',
                },
                {
                    code: 'SI-130',
                    name: 'Trebnje',
                },
                {
                    code: 'SI-185',
                    name: 'Trnovska vas',
                },
                {
                    code: 'SI-131',
                    name: 'Tržic',
                },
                {
                    code: 'SI-186',
                    name: 'Trzin',
                },
                {
                    code: 'SI-132',
                    name: 'Turnišce',
                },
                {
                    code: 'SI-133',
                    name: 'Velenje',
                },
                {
                    code: 'SI-187',
                    name: 'Velika Polana',
                },
                {
                    code: 'SI-134',
                    name: 'Velike Lašce',
                },
                {
                    code: 'SI-188',
                    name: 'Veržej',
                },
                {
                    code: 'SI-135',
                    name: 'Videm',
                },
                {
                    code: 'SI-136',
                    name: 'Vipava',
                },
                {
                    code: 'SI-137',
                    name: 'Vitanje',
                },
                {
                    code: 'SI-138',
                    name: 'Vodice',
                },
                {
                    code: 'SI-139',
                    name: 'Vojnik',
                },
                {
                    code: 'SI-189',
                    name: 'Vransko',
                },
                {
                    code: 'SI-140',
                    name: 'Vrhnika',
                },
                {
                    code: 'SI-141',
                    name: 'Vuzenica',
                },
                {
                    code: 'SI-142',
                    name: 'Zagorje ob Savi',
                },
                {
                    code: 'SI-190',
                    name: 'Žalec',
                },
                {
                    code: 'SI-143',
                    name: 'Zavrc',
                },
                {
                    code: 'SI-146',
                    name: 'Železniki',
                },
                {
                    code: 'SI-191',
                    name: 'Žetale',
                },
                {
                    code: 'SI-147',
                    name: 'Žiri',
                },
                {
                    code: 'SI-192',
                    name: 'Žirovnica',
                },
                {
                    code: 'SI-144',
                    name: 'Zrece',
                },
                {
                    code: 'SI-193',
                    name: 'Žužemberk',
                },
            ],
        },
        {
            code: 'SB',
            id: 2336,
            name: 'Solomon Islands',
            states: [],
        },
        {
            code: 'SO',
            id: 2337,
            name: 'Somalia',
            states: [
                {
                    code: 'SO21',
                    name: 'Awdal',
                },
                {
                    code: 'SO01',
                    name: 'Bakool',
                },
                {
                    code: 'SO02',
                    name: 'Banaadir',
                },
                {
                    code: 'SO03',
                    name: 'Bari',
                },
                {
                    code: 'SO04',
                    name: 'Bay',
                },
                {
                    code: 'SO05',
                    name: 'Galguduud',
                },
                {
                    code: 'SO06',
                    name: 'Gedo',
                },
                {
                    code: 'SO07',
                    name: 'Hiiraan',
                },
                {
                    code: 'SO08',
                    name: 'Jubbada Dhexe',
                },
                {
                    code: 'SO09',
                    name: 'Jubbada Hoose',
                },
                {
                    code: 'SO10',
                    name: 'Mudug',
                },
                {
                    code: 'SO18',
                    name: 'Nugaal',
                },
                {
                    code: 'SO12',
                    name: 'Sanaag',
                },
                {
                    code: 'SO13',
                    name: 'Shabeellaha Dhexe',
                },
                {
                    code: 'SO14',
                    name: 'Shabeellaha Hoose',
                },
                {
                    code: 'SO22',
                    name: 'Sool',
                },
                {
                    code: 'SO19',
                    name: 'Togdheer',
                },
                {
                    code: 'SO20',
                    name: 'Woqooyi Galbeed',
                },
            ],
        },
        {
            code: 'ZA',
            id: 2338,
            name: 'South Africa',
            states: [
                {
                    code: 'SF01',
                    name: 'Cape Province',
                },
                {
                    code: 'SF05',
                    name: 'Eastern Cape',
                },
                {
                    code: 'SF03',
                    name: 'Free State',
                },
                {
                    code: 'SF06',
                    name: 'Gauteng',
                },
                {
                    code: 'SF02',
                    name: 'KwaZulu-Natal',
                },
                {
                    code: 'SF09',
                    name: 'Limpopo',
                },
                {
                    code: 'SF07',
                    name: 'Mpumalanga',
                },
                {
                    code: 'SF10',
                    name: 'North-West',
                },
                {
                    code: 'SF08',
                    name: 'Northern Cape',
                },
                {
                    code: 'SF04',
                    name: 'Transvaal',
                },
                {
                    code: 'SF11',
                    name: 'Western Cape',
                },
            ],
        },
        {
            code: 'GS',
            id: 2436,
            name: 'South Georgia and the South Sandwich Islands',
            states: [],
        },
        {
            code: 'SS',
            id: 2447,
            name: 'South Sudan',
            states: [
                {
                    code: 'OD01',
                    name: 'Central Equatoria',
                },
                {
                    code: 'OD02',
                    name: 'East Equatoria',
                },
                {
                    code: 'OD03',
                    name: 'Jungoli',
                },
                {
                    code: 'OD04',
                    name: 'Lakes',
                },
                {
                    code: 'OD05',
                    name: 'North Bahr-al-Ghazal',
                },
                {
                    code: 'OD06',
                    name: 'Unity',
                },
                {
                    code: 'OD07',
                    name: 'Upper Nile',
                },
                {
                    code: 'OD08',
                    name: 'Warap',
                },
                {
                    code: 'OD09',
                    name: 'West Bahr-al-Ghazal',
                },
                {
                    code: 'OD10',
                    name: 'West Equatoria',
                },
            ],
        },
        {
            code: 'ES',
            id: 2339,
            name: 'Spain',
            states: [
                {
                    code: 'SP23',
                    name: 'A Coruña',
                },
                {
                    code: 'SP01',
                    name: 'Alava',
                },
                {
                    code: 'SP02',
                    name: 'Albacete',
                },
                {
                    code: 'SP03',
                    name: 'Alicante',
                },
                {
                    code: 'SP04',
                    name: 'Almeria',
                },
                {
                    code: 'SP51',
                    name: 'Andalucia',
                },
                {
                    code: 'SP52',
                    name: 'Aragon',
                },
                {
                    code: 'SP34',
                    name: 'Asturias',
                },
                {
                    code: 'SP05',
                    name: 'Avila',
                },
                {
                    code: 'SP06',
                    name: 'Badajoz',
                },
                {
                    code: 'SP08',
                    name: 'Barcelona',
                },
                {
                    code: 'SP09',
                    name: 'Burgos',
                },
                {
                    code: 'SP10',
                    name: 'Caceres',
                },
                {
                    code: 'SP11',
                    name: 'Cadiz',
                },
                {
                    code: 'SP53',
                    name: 'Canarias',
                },
                {
                    code: 'SP39',
                    name: 'Cantabria',
                },
                {
                    code: 'SP12',
                    name: 'Castellon',
                },
                {
                    code: 'SP55',
                    name: 'Castilla y Leon',
                },
                {
                    code: 'SP54',
                    name: 'Castilla-La Mancha',
                },
                {
                    code: 'SP56',
                    name: 'Cataluna',
                },
                {
                    code: 'SP13',
                    name: 'Ciudad Real',
                },
                {
                    code: 'SP14',
                    name: 'Cordoba',
                },
                {
                    code: 'SP15',
                    name: 'Cuenca',
                },
                {
                    code: 'SP57',
                    name: 'Extremadura',
                },
                {
                    code: 'SP58',
                    name: 'Galicia',
                },
                {
                    code: 'SP16',
                    name: 'Gerona',
                },
                {
                    code: 'SP17',
                    name: 'Granada',
                },
                {
                    code: 'SP18',
                    name: 'Guadalajara',
                },
                {
                    code: 'SP19',
                    name: 'Guipuzcoa',
                },
                {
                    code: 'SP20',
                    name: 'Huelva',
                },
                {
                    code: 'SP21',
                    name: 'Huesca',
                },
                {
                    code: 'SP07',
                    name: 'Islas Baleares',
                },
                {
                    code: 'SP22',
                    name: 'Jaen',
                },
                {
                    code: 'SP23',
                    name: 'La Coruna',
                },
                {
                    code: 'SP27',
                    name: 'La Rioja',
                },
                {
                    code: 'SP24',
                    name: 'Las Palmas',
                },
                {
                    code: 'SP25',
                    name: 'Leon',
                },
                {
                    code: 'SP26',
                    name: 'Lerida',
                },
                {
                    code: 'SP28',
                    name: 'Lugo',
                },
                {
                    code: 'SP29',
                    name: 'Madrid',
                },
                {
                    code: 'SP30',
                    name: 'Malaga',
                },
                {
                    code: 'SP31',
                    name: 'Murcia',
                },
                {
                    code: 'SP32',
                    name: 'Navarra',
                },
                {
                    code: 'SP33',
                    name: 'Orense',
                },
                {
                    code: 'SP59',
                    name: 'Pais Vasco',
                },
                {
                    code: 'SP35',
                    name: 'Palencia',
                },
                {
                    code: 'SP36',
                    name: 'Pontevedra',
                },
                {
                    code: 'SP37',
                    name: 'Salamanca',
                },
                {
                    code: 'SP38',
                    name: 'Santa Cruz de Tenerife',
                },
                {
                    code: 'SP40',
                    name: 'Segovia',
                },
                {
                    code: 'SP41',
                    name: 'Sevilla',
                },
                {
                    code: 'SP42',
                    name: 'Soria',
                },
                {
                    code: 'SP43',
                    name: 'Tarragona',
                },
                {
                    code: 'SP44',
                    name: 'Teruel',
                },
                {
                    code: 'SP45',
                    name: 'Toledo',
                },
                {
                    code: 'SP46',
                    name: 'Valencia',
                },
                {
                    code: 'SP60',
                    name: 'Valenciana',
                },
                {
                    code: 'SP47',
                    name: 'Valladolid',
                },
                {
                    code: 'SP48',
                    name: 'Vizcaya',
                },
                {
                    code: 'SP49',
                    name: 'Zamora',
                },
                {
                    code: 'SP50',
                    name: 'Zaragoza',
                },
            ],
        },
        {
            code: 'LK',
            id: 2340,
            name: 'Sri Lanka',
            states: [],
        },
        {
            code: 'SD',
            id: 2341,
            name: 'Sudan',
            states: [
                {
                    code: 'SU42',
                    name: 'Blue Nile',
                },
                {
                    code: 'SU61',
                    name: 'Central Darfur',
                },
                {
                    code: 'SU60',
                    name: 'East Darfur',
                },
                {
                    code: 'SU39',
                    name: 'Gedarif',
                },
                {
                    code: 'SU38',
                    name: 'Gezira',
                },
                {
                    code: 'SU52',
                    name: 'Kassala',
                },
                {
                    code: 'SU29',
                    name: 'Khartoum',
                },
                {
                    code: 'SU55',
                    name: 'North Darfur',
                },
                {
                    code: 'SU56',
                    name: 'North Kordofan',
                },
                {
                    code: 'SU43',
                    name: 'Northern',
                },
                {
                    code: 'SU36',
                    name: 'Red Sea',
                },
                {
                    code: 'SU53',
                    name: 'River Nile',
                },
                {
                    code: 'SU58',
                    name: 'Sennar',
                },
                {
                    code: 'SU49',
                    name: 'South Darfur',
                },
                {
                    code: 'SU50',
                    name: 'South Kordofan',
                },
                {
                    code: 'SU47',
                    name: 'West Darfur',
                },
                {
                    code: 'SU62',
                    name: 'West Kordofan',
                },
                {
                    code: 'SU41',
                    name: 'White Nile',
                },
            ],
        },
        {
            code: 'SR',
            id: 2342,
            name: 'Suriname',
            states: [
                {
                    code: 'NS10',
                    name: 'Brokopondo',
                },
                {
                    code: 'NS11',
                    name: 'Commewijne',
                },
                {
                    code: 'NS12',
                    name: 'Coronie',
                },
                {
                    code: 'NS13',
                    name: 'Marowijne',
                },
                {
                    code: 'NS14',
                    name: 'Nickerie',
                },
                {
                    code: 'NS16',
                    name: 'Paramaribo',
                },
                {
                    code: 'NS15',
                    name: 'Para',
                },
                {
                    code: 'NS17',
                    name: 'Saramacca',
                },
                {
                    code: 'NS18',
                    name: 'Sipaliwini',
                },
                {
                    code: 'NS19',
                    name: 'Wanica',
                },
            ],
        },
        {
            code: 'SJ',
            id: 2437,
            name: 'Svalbard And Jan Mayen',
            states: [],
        },
        {
            code: 'SZ',
            id: 2343,
            name: 'Swaziland',
            states: [
                {
                    code: 'WZ01',
                    name: 'Hhohho',
                },
                {
                    code: 'WZ02',
                    name: 'Lubombo',
                },
                {
                    code: 'WZ03',
                    name: 'Manzini',
                },
                {
                    code: 'WZ04',
                    name: 'Shiselweni',
                },
            ],
        },
        {
            code: 'SE',
            id: 2344,
            name: 'Sweden',
            states: [
                {
                    code: 'SE-K',
                    name: 'Blekinge län',
                },
                {
                    code: 'SE-W',
                    name: 'Dalarnas län',
                },
                {
                    code: 'SE-X',
                    name: 'Gävleborgs län',
                },
                {
                    code: 'SE-I',
                    name: 'Gotlands län',
                },
                {
                    code: 'SE-N',
                    name: 'Hallands län',
                },
                {
                    code: 'SE-Z',
                    name: 'Jämtlands län',
                },
                {
                    code: 'SE-F',
                    name: 'Jönköpings län',
                },
                {
                    code: 'SE-H',
                    name: 'Kalmar län',
                },
                {
                    code: 'SE-G',
                    name: 'Kronobergs län',
                },
                {
                    code: 'SE-BD',
                    name: 'Norrbottens län',
                },
                {
                    code: 'SE-M',
                    name: 'Skåne län',
                },
                {
                    code: 'SE-D',
                    name: 'Södermanlands län',
                },
                {
                    code: 'SE-AB',
                    name: 'Stockholms län',
                },
                {
                    code: 'SE-C',
                    name: 'Uppsala län',
                },
                {
                    code: 'SE-S',
                    name: 'Värmlands län',
                },
                {
                    code: 'SE-AC',
                    name: 'Västerbottens län',
                },
                {
                    code: 'SE-Y',
                    name: 'Västernorrlands län',
                },
                {
                    code: 'SE-U',
                    name: 'Västmanlands län',
                },
                {
                    code: 'SE-O',
                    name: 'Västra Götalands län',
                },
                {
                    code: 'SE-T',
                    name: 'Örebro län',
                },
                {
                    code: 'SE-E',
                    name: 'Östergötlands län',
                },
            ],
        },
        {
            code: 'CH',
            id: 2345,
            name: 'Switzerland',
            states: [
                {
                    code: 'AG',
                    name: 'Aargau',
                },
                {
                    code: 'AR',
                    name: 'Appenzell Ausserrhoden',
                },
                {
                    code: 'AI',
                    name: 'Appenzell Innerrhoden',
                },
                {
                    code: 'BL',
                    name: 'Basel-Landschaft',
                },
                {
                    code: 'BS',
                    name: 'Basel-Stadt',
                },
                {
                    code: 'BE',
                    name: 'Bern',
                },
                {
                    code: 'FR',
                    name: 'Fribourg',
                },
                {
                    code: 'GE',
                    name: 'Genève',
                },
                {
                    code: 'GL',
                    name: 'Glarus',
                },
                {
                    code: 'GR',
                    name: 'Graubünden',
                },
                {
                    code: 'JU',
                    name: 'Jura',
                },
                {
                    code: 'LU',
                    name: 'Luzern',
                },
                {
                    code: 'NE',
                    name: 'Neuchâtel',
                },
                {
                    code: 'NW',
                    name: 'Nidwalden',
                },
                {
                    code: 'OW',
                    name: 'Obwalden',
                },
                {
                    code: 'SG',
                    name: 'Sankt Gallen',
                },
                {
                    code: 'SH',
                    name: 'Schaffhausen',
                },
                {
                    code: 'SZ',
                    name: 'Schwyz',
                },
                {
                    code: 'SO',
                    name: 'Solothurn',
                },
                {
                    code: 'TG',
                    name: 'Thurgau',
                },
                {
                    code: 'TI',
                    name: 'Ticino',
                },
                {
                    code: 'UR',
                    name: 'Uri',
                },
                {
                    code: 'VS',
                    name: 'Valais',
                },
                {
                    code: 'VD',
                    name: 'Vaud',
                },
                {
                    code: 'ZG',
                    name: 'Zug',
                },
                {
                    code: 'ZH',
                    name: 'Zürich',
                },
            ],
        },
        {
            code: 'SY',
            id: 2381,
            name: 'Syrian Arab Republic',
            states: [
                {
                    code: 'SY01',
                    name: 'Al Hasakah',
                },
                {
                    code: 'SY09',
                    name: 'Aleppo',
                },
                {
                    code: 'SY04',
                    name: 'Ar Raqqah',
                },
                {
                    code: 'SY05',
                    name: "As Suwayda'",
                },
                {
                    code: 'SY13',
                    name: 'Damascus',
                },
                {
                    code: 'SY06',
                    name: 'Dar`a',
                },
                {
                    code: 'SY07',
                    name: 'Dayr az Zawr',
                },
                {
                    code: 'SY10',
                    name: 'Hama',
                },
                {
                    code: 'SY11',
                    name: 'Hims',
                },
                {
                    code: 'SY12',
                    name: 'Idlib',
                },
                {
                    code: 'SY02',
                    name: 'Latakia',
                },
                {
                    code: 'SY03',
                    name: 'Quneitra',
                },
                {
                    code: 'SY08',
                    name: 'Rif Dimashq',
                },
                {
                    code: 'SY14',
                    name: 'Tartus',
                },
            ],
        },
        {
            code: 'TW',
            id: 2375,
            name: 'Taiwan',
            states: [
                {
                    code: 'TW02',
                    name: 'Kaohsiung',
                },
                {
                    code: 'TW03',
                    name: 'Taipei',
                },
            ],
        },
        {
            code: 'TJ',
            id: 2348,
            name: 'Tajikistan',
            states: [
                {
                    code: 'TI01',
                    name: 'Badakhshoni Kuni',
                },
                {
                    code: 'TI04',
                    name: 'Dushanbe',
                },
                {
                    code: 'TI02',
                    name: 'Khatlon',
                },
                {
                    code: 'TI05',
                    name: 'Regions of Republican Subordination',
                },
                {
                    code: 'TI03',
                    name: 'Sogd',
                },
            ],
        },
        {
            code: 'TZ',
            id: 2349,
            name: 'Tanzania',
            states: [
                {
                    code: 'TZ26',
                    name: 'Arusha',
                },
                {
                    code: 'TZ23',
                    name: 'Dar es Salaam',
                },
                {
                    code: 'TZ03',
                    name: 'Dodoma',
                },
                {
                    code: 'TZ28',
                    name: 'Geita',
                },
                {
                    code: 'TZ04',
                    name: 'Iringa',
                },
                {
                    code: 'TZ19',
                    name: 'Kagera',
                },
                {
                    code: 'TZ29',
                    name: 'Katavi',
                },
                {
                    code: 'TZ05',
                    name: 'Kigoma',
                },
                {
                    code: 'TZ06',
                    name: 'Kilimanjaro',
                },
                {
                    code: 'TZ07',
                    name: 'Lindi',
                },
                {
                    code: 'TZ27',
                    name: 'Manyara',
                },
                {
                    code: 'TZ08',
                    name: 'Mara',
                },
                {
                    code: 'TZ09',
                    name: 'Mbeya',
                },
                {
                    code: 'TZ10',
                    name: 'Morogoro',
                },
                {
                    code: 'TZ11',
                    name: 'Mtwara',
                },
                {
                    code: 'TZ12',
                    name: 'Mwanza',
                },
                {
                    code: 'TZ30',
                    name: 'Njombe',
                },
                {
                    code: 'TZ13',
                    name: 'Pemba North',
                },
                {
                    code: 'TZ20',
                    name: 'Pemba South',
                },
                {
                    code: 'TZ02',
                    name: 'Pwani',
                },
                {
                    code: 'TZ24',
                    name: 'Rukwa',
                },
                {
                    code: 'TZ14',
                    name: 'Ruvuma',
                },
                {
                    code: 'TZ15',
                    name: 'Shinyanga',
                },
                {
                    code: 'TZ31',
                    name: 'Simiyu',
                },
                {
                    code: 'TZ16',
                    name: 'Singida',
                },
                {
                    code: 'TZ17',
                    name: 'Tabora',
                },
                {
                    code: 'TZ18',
                    name: 'Tanga',
                },
                {
                    code: 'TZ22',
                    name: 'Zanzibar North',
                },
                {
                    code: 'TZ21',
                    name: 'Zanzibar South and Central',
                },
                {
                    code: 'TZ25',
                    name: 'Zanzibar West',
                },
            ],
        },
        {
            code: 'TH',
            id: 2350,
            name: 'Thailand',
            states: [
                {
                    code: 'TH77',
                    name: 'Amnat Charoen',
                },
                {
                    code: 'TH35',
                    name: 'Ang Thong',
                },
                {
                    code: 'TH40',
                    name: 'Bangkok Metropolis',
                },
                {
                    code: 'TH81',
                    name: 'Bueng Kan',
                },
                {
                    code: 'TH28',
                    name: 'Buri Ram',
                },
                {
                    code: 'TH44',
                    name: 'Chachoengsao',
                },
                {
                    code: 'TH32',
                    name: 'Chai Nat',
                },
                {
                    code: 'TH26',
                    name: 'Chaiyaphum',
                },
                {
                    code: 'TH48',
                    name: 'Chanthaburi',
                },
                {
                    code: 'TH02',
                    name: 'Chiang Mai',
                },
                {
                    code: 'TH03',
                    name: 'Chiang Rai',
                },
                {
                    code: 'TH46',
                    name: 'Chon Buri',
                },
                {
                    code: 'TH58',
                    name: 'Chumphon',
                },
                {
                    code: 'TH23',
                    name: 'Kalasin',
                },
                {
                    code: 'TH11',
                    name: 'Kamphaeng Phet',
                },
                {
                    code: 'TH50',
                    name: 'Kanchanaburi',
                },
                {
                    code: 'TH22',
                    name: 'Khon Kaen',
                },
                {
                    code: 'TH63',
                    name: 'Krabi',
                },
                {
                    code: 'TH06',
                    name: 'Lampang',
                },
                {
                    code: 'TH05',
                    name: 'Lamphun',
                },
                {
                    code: 'TH18',
                    name: 'Loei',
                },
                {
                    code: 'TH34',
                    name: 'Lop Buri',
                },
                {
                    code: 'TH01',
                    name: 'Mae Hong Son',
                },
                {
                    code: 'TH24',
                    name: 'Maha Sarakham',
                },
                {
                    code: 'TH78',
                    name: 'Mukdahan',
                },
                {
                    code: 'TH43',
                    name: 'Nakhon Nayok',
                },
                {
                    code: 'TH53',
                    name: 'Nakhon Pathom',
                },
                {
                    code: 'TH73',
                    name: 'Nakhon Phanom',
                },
                {
                    code: 'TH27',
                    name: 'Nakhon Ratchasima',
                },
                {
                    code: 'TH16',
                    name: 'Nakhon Sawan',
                },
                {
                    code: 'TH64',
                    name: 'Nakhon Si Thammarat',
                },
                {
                    code: 'TH04',
                    name: 'Nan',
                },
                {
                    code: 'TH31',
                    name: 'Narathiwat',
                },
                {
                    code: 'TH79',
                    name: 'Nong Bua Lam Phu',
                },
                {
                    code: 'TH17',
                    name: 'Nong Khai',
                },
                {
                    code: 'TH38',
                    name: 'Nonthaburi',
                },
                {
                    code: 'TH39',
                    name: 'Pathum Thani',
                },
                {
                    code: 'TH69',
                    name: 'Pattani',
                },
                {
                    code: 'TH61',
                    name: 'Phangnga',
                },
                {
                    code: 'TH66',
                    name: 'Phatthalung',
                },
                {
                    code: 'TH41',
                    name: 'Phayao',
                },
                {
                    code: 'TH14',
                    name: 'Phetchabun',
                },
                {
                    code: 'TH56',
                    name: 'Phetchaburi',
                },
                {
                    code: 'TH13',
                    name: 'Phichit',
                },
                {
                    code: 'TH12',
                    name: 'Phitsanulok',
                },
                {
                    code: 'TH36',
                    name: 'Phra Nakhon Si Ayutthaya',
                },
                {
                    code: 'TH07',
                    name: 'Phrae',
                },
                {
                    code: 'TH62',
                    name: 'Phuket',
                },
                {
                    code: 'TH74',
                    name: 'Prachin Buri',
                },
                {
                    code: 'TH57',
                    name: 'Prachuap Khiri Khan',
                },
                {
                    code: 'TH59',
                    name: 'Ranong',
                },
                {
                    code: 'TH52',
                    name: 'Ratchaburi',
                },
                {
                    code: 'TH47',
                    name: 'Rayong',
                },
                {
                    code: 'TH25',
                    name: 'Roi Et',
                },
                {
                    code: 'TH80',
                    name: 'Sa Kaeo',
                },
                {
                    code: 'TH20',
                    name: 'Sakon Nakhon',
                },
                {
                    code: 'TH42',
                    name: 'Samut Prakan',
                },
                {
                    code: 'TH55',
                    name: 'Samut Sakhon',
                },
                {
                    code: 'TH54',
                    name: 'Samut Songkhram',
                },
                {
                    code: 'TH37',
                    name: 'Saraburi',
                },
                {
                    code: 'TH67',
                    name: 'Satun',
                },
                {
                    code: 'TH30',
                    name: 'Si Sa Ket',
                },
                {
                    code: 'TH33',
                    name: 'Sing Buri',
                },
                {
                    code: 'TH68',
                    name: 'Songkhla',
                },
                {
                    code: 'TH09',
                    name: 'Sukhothai',
                },
                {
                    code: 'TH51',
                    name: 'Suphan Buri',
                },
                {
                    code: 'TH60',
                    name: 'Surat Thani',
                },
                {
                    code: 'TH29',
                    name: 'Surin',
                },
                {
                    code: 'TH08',
                    name: 'Tak',
                },
                {
                    code: 'TH65',
                    name: 'Trang',
                },
                {
                    code: 'TH49',
                    name: 'Trat',
                },
                {
                    code: 'TH75',
                    name: 'Ubon Ratchathani',
                },
                {
                    code: 'TH76',
                    name: 'Udon Thani',
                },
                {
                    code: 'TH15',
                    name: 'Uthai Thani',
                },
                {
                    code: 'TH10',
                    name: 'Uttaradit',
                },
                {
                    code: 'TH70',
                    name: 'Yala',
                },
                {
                    code: 'TH72',
                    name: 'Yasothon',
                },
            ],
        },
        {
            code: 'TL',
            id: 2404,
            name: 'Timor-Leste',
            states: [],
        },
        {
            code: 'TG',
            id: 2351,
            name: 'Togo',
            states: [
                {
                    code: 'TO22',
                    name: 'Centrale',
                },
                {
                    code: 'TO23',
                    name: 'Kara',
                },
                {
                    code: 'TO24',
                    name: 'Maritime',
                },
                {
                    code: 'TO25',
                    name: 'Plateaux',
                },
                {
                    code: 'TO26',
                    name: 'Savanes',
                },
            ],
        },
        {
            code: 'TK',
            id: 2438,
            name: 'Tokelau',
            states: [],
        },
        {
            code: 'TO',
            id: 2405,
            name: 'Tonga',
            states: [],
        },
        {
            code: 'TT',
            id: 2352,
            name: 'Trinidad and Tobago',
            states: [
                {
                    code: 'TD01',
                    name: 'Arima',
                },
                {
                    code: 'TD13',
                    name: 'Chaguanas',
                },
                {
                    code: 'TD14',
                    name: 'Couva/Tabaquite/Talparo',
                },
                {
                    code: 'TD15',
                    name: 'Diego Martin',
                },
                {
                    code: 'TD11',
                    name: 'Eastern Tobago',
                },
                {
                    code: 'TD16',
                    name: 'Mayaro/Rio Claro',
                },
                {
                    code: 'TD17',
                    name: 'Penal/Debe',
                },
                {
                    code: 'TD18',
                    name: 'Point Fortin',
                },
                {
                    code: 'TD05',
                    name: 'Port of Spain',
                },
                {
                    code: 'TD19',
                    name: 'Princes Town',
                },
                {
                    code: 'TD10',
                    name: 'San Fernando',
                },
                {
                    code: 'TD20',
                    name: 'San Juan/Laventille',
                },
                {
                    code: 'TD21',
                    name: 'Sangre Grande',
                },
                {
                    code: 'TD22',
                    name: 'Siparia',
                },
                {
                    code: 'TD23',
                    name: 'Tunapuna/Piarco',
                },
                {
                    code: 'TD11',
                    name: 'Western Tobago',
                },
            ],
        },
        {
            code: 'TN',
            id: 2353,
            name: 'Tunisia',
            states: [
                {
                    code: 'TS38',
                    name: 'Ariana',
                },
                {
                    code: 'TS17',
                    name: 'Béja',
                },
                {
                    code: 'TS27',
                    name: 'Ben Arous',
                },
                {
                    code: 'TS18',
                    name: 'Bizerte',
                },
                {
                    code: 'TS29',
                    name: 'Gabès',
                },
                {
                    code: 'TS30',
                    name: 'Gafsa',
                },
                {
                    code: 'TS06',
                    name: 'Jendouba',
                },
                {
                    code: 'TS03',
                    name: 'Kairouan',
                },
                {
                    code: 'TS02',
                    name: 'Kassérine',
                },
                {
                    code: 'TS31',
                    name: 'Kebili',
                },
                {
                    code: 'TS14',
                    name: 'Le Kef',
                },
                {
                    code: 'TS15',
                    name: 'Mahdia',
                },
                {
                    code: 'TS39',
                    name: 'Manouba',
                },
                {
                    code: 'TS28',
                    name: 'Médenine',
                },
                {
                    code: 'TS16',
                    name: 'Monastir',
                },
                {
                    code: 'TS19',
                    name: 'Nabeul',
                },
                {
                    code: 'TS32',
                    name: 'Sfax',
                },
                {
                    code: 'TS33',
                    name: 'Sidi Bou Zid',
                },
                {
                    code: 'TS22',
                    name: 'Siliana',
                },
                {
                    code: 'TS23',
                    name: 'Sousse',
                },
                {
                    code: 'TS34',
                    name: 'Tataouine',
                },
                {
                    code: 'TS35',
                    name: 'Tozeur',
                },
                {
                    code: 'TS36',
                    name: 'Tunis',
                },
                {
                    code: 'TS37',
                    name: 'Zaghouan',
                },
            ],
        },
        {
            code: 'TR',
            id: 2354,
            name: 'Turkey',
            states: [
                {
                    code: 'TU81',
                    name: 'Adana',
                },
                {
                    code: 'TU02',
                    name: 'Adiyaman',
                },
                {
                    code: 'TU03',
                    name: 'Afyonkarahisar',
                },
                {
                    code: 'TU04',
                    name: 'Agri',
                },
                {
                    code: 'TU75',
                    name: 'Aksaray',
                },
                {
                    code: 'TU05',
                    name: 'Amasya',
                },
                {
                    code: 'TU68',
                    name: 'Ankara',
                },
                {
                    code: 'TU07',
                    name: 'Antalya',
                },
                {
                    code: 'TU86',
                    name: 'Ardahan',
                },
                {
                    code: 'TU08',
                    name: 'Artvin',
                },
                {
                    code: 'TU09',
                    name: 'Aydin',
                },
                {
                    code: 'TU10',
                    name: 'Balikesir',
                },
                {
                    code: 'TU87',
                    name: 'Bartin',
                },
                {
                    code: 'TU76',
                    name: 'Batman',
                },
                {
                    code: 'TU77',
                    name: 'Bayburt',
                },
                {
                    code: 'TU11',
                    name: 'Bilecik',
                },
                {
                    code: 'TU12',
                    name: 'Bingöl',
                },
                {
                    code: 'TU13',
                    name: 'Bitlis',
                },
                {
                    code: 'TU14',
                    name: 'Bolu',
                },
                {
                    code: 'TU15',
                    name: 'Burdur',
                },
                {
                    code: 'TU16',
                    name: 'Bursa',
                },
                {
                    code: 'TU17',
                    name: 'Çanakkale',
                },
                {
                    code: 'TU82',
                    name: 'Çankiri',
                },
                {
                    code: 'TU19',
                    name: 'Çorum',
                },
                {
                    code: 'TU20',
                    name: 'Denizli',
                },
                {
                    code: 'TU21',
                    name: 'Diyarbakir',
                },
                {
                    code: 'TU93',
                    name: 'Düzce',
                },
                {
                    code: 'TU22',
                    name: 'Edirne',
                },
                {
                    code: 'TU23',
                    name: 'Elazig',
                },
                {
                    code: 'TU24',
                    name: 'Erzincan',
                },
                {
                    code: 'TU25',
                    name: 'Erzurum',
                },
                {
                    code: 'TU26',
                    name: 'Eskisehir',
                },
                {
                    code: 'TU83',
                    name: 'Gaziantep',
                },
                {
                    code: 'TU28',
                    name: 'Giresun',
                },
                {
                    code: 'TU69',
                    name: 'Gümüshane',
                },
                {
                    code: 'TU70',
                    name: 'Hakkari',
                },
                {
                    code: 'TU31',
                    name: 'Hatay',
                },
                {
                    code: 'TU88',
                    name: 'Igdir',
                },
                {
                    code: 'TU33',
                    name: 'Isparta',
                },
                {
                    code: 'TU34',
                    name: 'Istanbul',
                },
                {
                    code: 'TU35',
                    name: 'Izmir',
                },
                {
                    code: 'TU46',
                    name: 'Kahramanmaras',
                },
                {
                    code: 'TU89',
                    name: 'Karabük',
                },
                {
                    code: 'TU78',
                    name: 'Karaman',
                },
                {
                    code: 'TU84',
                    name: 'Kars',
                },
                {
                    code: 'TU37',
                    name: 'Kastamonu',
                },
                {
                    code: 'TU38',
                    name: 'Kayseri',
                },
                {
                    code: 'TU90',
                    name: 'Kilis',
                },
                {
                    code: 'TU79',
                    name: 'Kirikkale',
                },
                {
                    code: 'TU39',
                    name: 'Kirklareli',
                },
                {
                    code: 'TU40',
                    name: 'Kirsehir',
                },
                {
                    code: 'TU41',
                    name: 'Kocaeli',
                },
                {
                    code: 'TU71',
                    name: 'Konya',
                },
                {
                    code: 'TU43',
                    name: 'Kütahya',
                },
                {
                    code: 'TU44',
                    name: 'Malatya',
                },
                {
                    code: 'TU45',
                    name: 'Manisa',
                },
                {
                    code: 'TU72',
                    name: 'Mardin',
                },
                {
                    code: 'TU32',
                    name: 'Mersin',
                },
                {
                    code: 'TU48',
                    name: 'Mugla',
                },
                {
                    code: 'TU49',
                    name: 'Mus',
                },
                {
                    code: 'TU50',
                    name: 'Nevsehir',
                },
                {
                    code: 'TU73',
                    name: 'Nigde',
                },
                {
                    code: 'TU52',
                    name: 'Ordu',
                },
                {
                    code: 'TU91',
                    name: 'Osmaniye',
                },
                {
                    code: 'TU53',
                    name: 'Rize',
                },
                {
                    code: 'TU54',
                    name: 'Sakarya',
                },
                {
                    code: 'TU55',
                    name: 'Samsun',
                },
                {
                    code: 'TU63',
                    name: 'Sanliurfa',
                },
                {
                    code: 'TU74',
                    name: 'Siirt',
                },
                {
                    code: 'TU57',
                    name: 'Sinop',
                },
                {
                    code: 'TU80',
                    name: 'Sirnak',
                },
                {
                    code: 'TU58',
                    name: 'Sivas',
                },
                {
                    code: 'TU59',
                    name: 'Tekirdag',
                },
                {
                    code: 'TU60',
                    name: 'Tokat',
                },
                {
                    code: 'TU61',
                    name: 'Trabzon',
                },
                {
                    code: 'TU62',
                    name: 'Tunceli',
                },
                {
                    code: 'TU64',
                    name: 'Usak',
                },
                {
                    code: 'TU65',
                    name: 'Van',
                },
                {
                    code: 'TU92',
                    name: 'Yalova',
                },
                {
                    code: 'TU66',
                    name: 'Yozgat',
                },
                {
                    code: 'TU85',
                    name: 'Zonguldak',
                },
            ],
        },
        {
            code: 'TM',
            id: 2355,
            name: 'Turkmenistan',
            states: [
                {
                    code: 'TX01',
                    name: 'Ahal',
                },
                {
                    code: 'TM.AB',
                    name: 'Ashgabat',
                },
                {
                    code: 'TX02',
                    name: 'Balkan',
                },
                {
                    code: 'TX03',
                    name: 'Dashoguz',
                },
                {
                    code: 'TX04',
                    name: 'Lebap',
                },
                {
                    code: 'TX05',
                    name: 'Mary',
                },
            ],
        },
        {
            code: 'TC',
            id: 2439,
            name: 'Turks and Caicos Islands',
            states: [],
        },
        {
            code: 'TV',
            id: 2440,
            name: 'Tuvalu',
            states: [],
        },
        {
            code: 'UG',
            id: 2356,
            name: 'Uganda',
            states: [
                {
                    code: 'UG.AI',
                    name: 'Abim',
                },
                {
                    code: 'UG.AD',
                    name: 'Adjumani',
                },
                {
                    code: 'UG.AG',
                    name: 'Agago',
                },
                {
                    code: 'UG.AL',
                    name: 'Alebtong',
                },
                {
                    code: 'UG.AT',
                    name: 'Amolatar',
                },
                {
                    code: 'UG.AZ',
                    name: 'Amudat',
                },
                {
                    code: 'UG.AM',
                    name: 'Amuria',
                },
                {
                    code: 'UG.AY',
                    name: 'Amuru',
                },
                {
                    code: 'UG.AQ',
                    name: 'Apac',
                },
                {
                    code: 'UG.AX',
                    name: 'Arua',
                },
                {
                    code: 'UG.BD',
                    name: 'Budaka',
                },
                {
                    code: 'UG.BA',
                    name: 'Bududa',
                },
                {
                    code: 'UG.BI',
                    name: 'Bugiri',
                },
                {
                    code: 'UG.BH',
                    name: 'Buhweju',
                },
                {
                    code: 'UG.BZ',
                    name: 'Buikwe',
                },
                {
                    code: 'UG.BE',
                    name: 'Bukedea',
                },
                {
                    code: 'UG.BM',
                    name: 'Bukomansimbi',
                },
                {
                    code: 'UG.BW',
                    name: 'Bukwo',
                },
                {
                    code: 'UG.BB',
                    name: 'Bulambuli',
                },
                {
                    code: 'UG.BL',
                    name: 'Buliisa',
                },
                {
                    code: 'UG.BX',
                    name: 'Bundibugyo',
                },
                {
                    code: 'UG.BC',
                    name: 'Bushenyi',
                },
                {
                    code: 'UG.BU',
                    name: 'Busia',
                },
                {
                    code: 'UG.BJ',
                    name: 'Butaleja',
                },
                {
                    code: 'UG.BT',
                    name: 'Butambala',
                },
                {
                    code: 'UG.BV',
                    name: 'Buvuma',
                },
                {
                    code: 'UG.BY',
                    name: 'Buyende',
                },
                {
                    code: 'UG.DO',
                    name: 'Dokolo',
                },
                {
                    code: 'UG.GM',
                    name: 'Gomba',
                },
                {
                    code: 'UG.GL',
                    name: 'Gulu',
                },
                {
                    code: 'UG.HO',
                    name: 'Hoima',
                },
                {
                    code: 'UG.IB',
                    name: 'Ibanda',
                },
                {
                    code: 'UG.IC',
                    name: 'Iganga',
                },
                {
                    code: 'UG.NG',
                    name: 'Isingiro',
                },
                {
                    code: 'UG.JI',
                    name: 'Jinja',
                },
                {
                    code: 'UG.AB',
                    name: 'Kaabong',
                },
                {
                    code: 'UG.KA',
                    name: 'Kabale',
                },
                {
                    code: 'UG.BR',
                    name: 'Kabarole',
                },
                {
                    code: 'UG.KD',
                    name: 'Kaberamaido',
                },
                {
                    code: 'UG.KN',
                    name: 'Kalangala',
                },
                {
                    code: 'UG.RO',
                    name: 'Kaliro',
                },
                {
                    code: 'UG.QA',
                    name: 'Kalungu',
                },
                {
                    code: 'UG.KM',
                    name: 'Kampala',
                },
                {
                    code: 'UG.QU',
                    name: 'Kamuli',
                },
                {
                    code: 'UG.KE',
                    name: 'Kamwenge',
                },
                {
                    code: 'UG.UU',
                    name: 'Kanungu',
                },
                {
                    code: 'UG.QP',
                    name: 'Kapchorwa',
                },
                {
                    code: 'UG.KS',
                    name: 'Kasese',
                },
                {
                    code: 'UG.KK',
                    name: 'Katakwi',
                },
                {
                    code: 'UG.KY',
                    name: 'Kayunga',
                },
                {
                    code: 'UG.KI',
                    name: 'Kibaale',
                },
                {
                    code: 'UG.QO',
                    name: 'Kiboga',
                },
                {
                    code: 'UG.QB',
                    name: 'Kibuku',
                },
                {
                    code: 'UG.KH',
                    name: 'Kiruhuura',
                },
                {
                    code: 'UG.QD',
                    name: 'Kiryandongo',
                },
                {
                    code: 'UG.KR',
                    name: 'Kisoro',
                },
                {
                    code: 'UG.QT',
                    name: 'Kitgum',
                },
                {
                    code: 'UG.OK',
                    name: 'Koboko',
                },
                {
                    code: 'UG.QL',
                    name: 'Kole',
                },
                {
                    code: 'UG.KF',
                    name: 'Kotido',
                },
                {
                    code: 'UG.QM',
                    name: 'Kumi',
                },
                {
                    code: 'UG.QW',
                    name: 'Kween',
                },
                {
                    code: 'UG.QZ',
                    name: 'Kyankwanzi',
                },
                {
                    code: 'UG.QG',
                    name: 'Kyegegwa',
                },
                {
                    code: 'UG.QJ',
                    name: 'Kyenjojo',
                },
                {
                    code: 'UG.LM',
                    name: 'Lamwo',
                },
                {
                    code: 'UG.LL',
                    name: 'Lira',
                },
                {
                    code: 'UG.LK',
                    name: 'Luuka',
                },
                {
                    code: 'UG.LW',
                    name: 'Luwero',
                },
                {
                    code: 'UG.LE',
                    name: 'Lwengo',
                },
                {
                    code: 'UG.LY',
                    name: 'Lyantonde',
                },
                {
                    code: 'UG.MW',
                    name: 'Manafwa',
                },
                {
                    code: 'UG.MQ',
                    name: 'Masaka',
                },
                {
                    code: 'UG.MZ',
                    name: 'Masindi',
                },
                {
                    code: 'UG.MG',
                    name: 'Mayuge',
                },
                {
                    code: 'UG.ME',
                    name: 'Mbale',
                },
                {
                    code: 'UG.RR',
                    name: 'Mbarara',
                },
                {
                    code: 'UG.MM',
                    name: 'Mitoma',
                },
                {
                    code: 'UG.TY',
                    name: 'Mityana',
                },
                {
                    code: 'UG.MX',
                    name: 'Moroto',
                },
                {
                    code: 'UG.MY',
                    name: 'Moyo',
                },
                {
                    code: 'UG.MJ',
                    name: 'Mpigi',
                },
                {
                    code: 'UG.MD',
                    name: 'Mubende',
                },
                {
                    code: 'UG.MV',
                    name: 'Mukono',
                },
                {
                    code: 'UG.NI',
                    name: 'Nakapiripirit',
                },
                {
                    code: 'UG.NK',
                    name: 'Nakaseke',
                },
                {
                    code: 'UG.NA',
                    name: 'Nakasongola',
                },
                {
                    code: 'UG.NY',
                    name: 'Namayingo',
                },
                {
                    code: 'UG.BK',
                    name: 'Namutumba',
                },
                {
                    code: 'UG.NQ',
                    name: 'Napak',
                },
                {
                    code: 'UG.NB',
                    name: 'Nebbi',
                },
                {
                    code: 'UG.NR',
                    name: 'Ngora',
                },
                {
                    code: 'UG.NO',
                    name: 'Ntoroko',
                },
                {
                    code: 'UG.NT',
                    name: 'Ntungamo',
                },
                {
                    code: 'UG.NW',
                    name: 'Nwoya',
                },
                {
                    code: 'UG.MH',
                    name: 'Nyadri',
                },
                {
                    code: 'UG.OT',
                    name: 'Otuke',
                },
                {
                    code: 'UG.OY',
                    name: 'Oyam',
                },
                {
                    code: 'UG.PR',
                    name: 'Pader',
                },
                {
                    code: 'UG.PS',
                    name: 'Pallisa',
                },
                {
                    code: 'UG.RI',
                    name: 'Rakai',
                },
                {
                    code: 'UG.RZ',
                    name: 'Rubirizi',
                },
                {
                    code: 'UG.RK',
                    name: 'Rukungiri',
                },
                {
                    code: 'UG.SE',
                    name: 'Sembabule',
                },
                {
                    code: 'UG.SX',
                    name: 'Serere',
                },
                {
                    code: 'UG.SH',
                    name: 'Sheema',
                },
                {
                    code: 'UG.SK',
                    name: 'Sironko',
                },
                {
                    code: 'UG.ST',
                    name: 'Soroti',
                },
                {
                    code: 'UG.TR',
                    name: 'Tororo',
                },
                {
                    code: 'UG.WA',
                    name: 'Wakiso',
                },
                {
                    code: 'UG.YU',
                    name: 'Yumbe',
                },
                {
                    code: 'UG.ZO',
                    name: 'Zombo',
                },
            ],
        },
        {
            code: 'UA',
            id: 2357,
            name: 'Ukraine',
            states: [
                {
                    code: 'UP01',
                    name: 'Cherkasy',
                },
                {
                    code: 'UP02',
                    name: 'Chernihiv',
                },
                {
                    code: 'UP03',
                    name: 'Chernivtsi',
                },
                {
                    code: 'UP11',
                    name: 'Crimea',
                },
                {
                    code: 'UP04',
                    name: "Dnipropetrovs'k",
                },
                {
                    code: 'UP05',
                    name: "Donets'k",
                },
                {
                    code: 'UP06',
                    name: "Ivano-Frankivs'k",
                },
                {
                    code: 'UP07',
                    name: 'Kharkiv',
                },
                {
                    code: 'UP08',
                    name: 'Kherson',
                },
                {
                    code: 'UP09',
                    name: "Khmel'nyts'kyy",
                },
                {
                    code: 'UP13',
                    name: 'Kiev',
                },
                {
                    code: 'UP12',
                    name: 'Kiev City',
                },
                {
                    code: 'UP10',
                    name: 'Kirovohrad',
                },
                {
                    code: 'UP15',
                    name: "L'viv",
                },
                {
                    code: 'UP14',
                    name: "Luhans'k",
                },
                {
                    code: 'UP16',
                    name: 'Mykolayiv',
                },
                {
                    code: 'UP17',
                    name: 'Odessa',
                },
                {
                    code: 'UP18',
                    name: 'Poltava',
                },
                {
                    code: 'UP19',
                    name: 'Rivne',
                },
                {
                    code: 'UP20',
                    name: "Sevastopol' City",
                },
                {
                    code: 'UP21',
                    name: 'Sumy',
                },
                {
                    code: 'UP22',
                    name: "Ternopil'",
                },
                {
                    code: 'UP25',
                    name: 'Transcarpathia',
                },
                {
                    code: 'UP23',
                    name: 'Vinnytsya',
                },
                {
                    code: 'UP24',
                    name: 'Volyn',
                },
                {
                    code: 'UP26',
                    name: 'Zaporizhzhya',
                },
                {
                    code: 'UP27',
                    name: 'Zhytomyr',
                },
            ],
        },
        {
            code: 'AE',
            id: 2358,
            name: 'United Arab Emirates',
            states: [
                {
                    code: 'AE02',
                    name: "'Ajman",
                },
                {
                    code: 'AE01',
                    name: 'Abu Dhabi',
                },
                {
                    code: 'AE04',
                    name: 'Al Fujayrah',
                },
                {
                    code: 'AE03',
                    name: 'Dubai',
                },
                {
                    code: 'AE05',
                    name: "Ra's al Khaymah",
                },
                {
                    code: 'AE06',
                    name: 'Sharjah',
                },
                {
                    code: 'AE07',
                    name: 'Umm al Qaywayn',
                },
            ],
        },
        {
            code: 'UM',
            id: 2441,
            name: 'United States Minor Outlying Islands',
            states: [],
        },
        {
            code: 'UY',
            id: 2360,
            name: 'Uruguay',
            states: [],
        },
        {
            code: 'UZ',
            id: 2361,
            name: 'Uzbekistan',
            states: [
                {
                    code: 'UZ01',
                    name: 'Andijon',
                },
                {
                    code: 'UZ02',
                    name: 'Buxoro',
                },
                {
                    code: 'UZ03',
                    name: 'Farg`ona',
                },
                {
                    code: 'UZ15',
                    name: 'Jizzax',
                },
                {
                    code: 'UZ09',
                    name: 'Karakalpakstan',
                },
                {
                    code: 'UZ08',
                    name: 'Kashkadarya',
                },
                {
                    code: 'UZ06',
                    name: 'Namangan',
                },
                {
                    code: 'UZ07',
                    name: 'Navoi',
                },
                {
                    code: 'UZ10',
                    name: 'Samarkand',
                },
                {
                    code: 'UZ16',
                    name: 'Sirdaryo',
                },
                {
                    code: 'UZ12',
                    name: 'Surxondaryo',
                },
                {
                    code: 'UZ13',
                    name: 'Tashkent City',
                },
                {
                    code: 'UZ14',
                    name: 'Tashkent',
                },
                {
                    code: 'UZ05',
                    name: 'Xorazm',
                },
            ],
        },
        {
            code: 'NH',
            id: 2406,
            name: 'Vanuatu',
            states: [],
        },
        {
            code: 'VE',
            id: 2363,
            name: 'Venezuela; Bolivarian Republic of',
            states: [
                {
                    code: 'VE01',
                    name: 'Amazonas',
                },
                {
                    code: 'VE02',
                    name: 'Anzoátegui',
                },
                {
                    code: 'VE03',
                    name: 'Apure',
                },
                {
                    code: 'VE04',
                    name: 'Aragua',
                },
                {
                    code: 'VE05',
                    name: 'Barinas',
                },
                {
                    code: 'VE06',
                    name: 'Bolívar',
                },
                {
                    code: 'VE07',
                    name: 'Carabobo',
                },
                {
                    code: 'VE08',
                    name: 'Cojedes',
                },
                {
                    code: 'VE09',
                    name: 'Delta Amacuro',
                },
                {
                    code: 'VE24',
                    name: 'Dependencias Federales',
                },
                {
                    code: 'VE25',
                    name: 'Distrito Capital',
                },
                {
                    code: 'VE11',
                    name: 'Falcón',
                },
                {
                    code: 'VE12',
                    name: 'Guárico',
                },
                {
                    code: 'VE13',
                    name: 'Lara',
                },
                {
                    code: 'VE14',
                    name: 'Mérida',
                },
                {
                    code: 'VE15',
                    name: 'Miranda',
                },
                {
                    code: 'VE16',
                    name: 'Monagas',
                },
                {
                    code: 'VE17',
                    name: 'Nueva Esparta',
                },
                {
                    code: 'VE18',
                    name: 'Portuguesa',
                },
                {
                    code: 'VE19',
                    name: 'Sucre',
                },
                {
                    code: 'VE20',
                    name: 'Táchira',
                },
                {
                    code: 'VE21',
                    name: 'Trujillo',
                },
                {
                    code: 'VE26',
                    name: 'Vargas',
                },
                {
                    code: 'VE22',
                    name: 'Yaracuy',
                },
                {
                    code: 'VE23',
                    name: 'Zulia',
                },
            ],
        },
        {
            code: 'VN',
            id: 2364,
            name: 'Vietnam',
            states: [
                {
                    code: 'VM01',
                    name: 'An Giang',
                },
                {
                    code: 'VM45',
                    name: 'Ba Ria-Vung Tau',
                },
                {
                    code: 'VM72',
                    name: 'Bac Can',
                },
                {
                    code: 'VM71',
                    name: 'Bac Giang',
                },
                {
                    code: 'VM73',
                    name: 'Bac Lieu',
                },
                {
                    code: 'VM74',
                    name: 'Bac Ninh',
                },
                {
                    code: 'VM03',
                    name: 'Ben Tre',
                },
                {
                    code: 'VM46',
                    name: 'Binh Dinh',
                },
                {
                    code: 'VM75',
                    name: 'Binh Duong',
                },
                {
                    code: 'VM76',
                    name: 'Binh Phuoc',
                },
                {
                    code: 'VM47',
                    name: 'Binh Thuan',
                },
                {
                    code: 'VM77',
                    name: 'Ca Mau',
                },
                {
                    code: 'VM87',
                    name: 'Can Tho',
                },
                {
                    code: 'VM05',
                    name: 'Cao Bang',
                },
                {
                    code: 'VM78',
                    name: 'Da Nang',
                },
                {
                    code: 'VM88',
                    name: 'Dac Lac',
                },
                {
                    code: 'VM91',
                    name: 'Dac Nong',
                },
                {
                    code: 'VM92',
                    name: 'Dien Bien',
                },
                {
                    code: 'VM43',
                    name: 'Dong Nai',
                },
                {
                    code: 'VM09',
                    name: 'Dong Thap',
                },
                {
                    code: 'VM49',
                    name: 'Gia Lai',
                },
                {
                    code: 'VM50',
                    name: 'Ha Giang',
                },
                {
                    code: 'VM80',
                    name: 'Ha Nam',
                },
                {
                    code: 'VM52',
                    name: 'Ha Tinh',
                },
                {
                    code: 'VM79',
                    name: 'Hai Duong',
                },
                {
                    code: 'VM13',
                    name: 'Haiphong',
                },
                {
                    code: 'VM44',
                    name: 'Hanoi',
                },
                {
                    code: 'VM93',
                    name: 'Hau Giang',
                },
                {
                    code: 'VM20',
                    name: 'Ho Chi Minh',
                },
                {
                    code: 'VM53',
                    name: 'Hoa Binh',
                },
                {
                    code: 'VM81',
                    name: 'Hung Yen',
                },
                {
                    code: 'VM54',
                    name: 'Khanh Hoa',
                },
                {
                    code: 'VM21',
                    name: 'Kien Giang',
                },
                {
                    code: 'VM55',
                    name: 'Kon Tum',
                },
                {
                    code: 'VM89',
                    name: 'Lai Chau',
                },
                {
                    code: 'VM23',
                    name: 'Lam Dong',
                },
                {
                    code: 'VM39',
                    name: 'Lang Son',
                },
                {
                    code: 'VM90',
                    name: 'Lao Cai',
                },
                {
                    code: 'VM24',
                    name: 'Long An',
                },
                {
                    code: 'VM82',
                    name: 'Nam Dinh',
                },
                {
                    code: 'VM58',
                    name: 'Nghe An',
                },
                {
                    code: 'VM59',
                    name: 'Ninh Binh',
                },
                {
                    code: 'VM60',
                    name: 'Ninh Thuan',
                },
                {
                    code: 'VM83',
                    name: 'Phu Tho',
                },
                {
                    code: 'VM61',
                    name: 'Phu Yen',
                },
                {
                    code: 'VM62',
                    name: 'Quang Binh',
                },
                {
                    code: 'VM84',
                    name: 'Quang Nam',
                },
                {
                    code: 'VM63',
                    name: 'Quang Ngai',
                },
                {
                    code: 'VM30',
                    name: 'Quang Ninh',
                },
                {
                    code: 'VM64',
                    name: 'Quang Tri',
                },
                {
                    code: 'VM65',
                    name: 'Soc Trang',
                },
                {
                    code: 'VM32',
                    name: 'Son La',
                },
                {
                    code: 'VM33',
                    name: 'Tay Ninh',
                },
                {
                    code: 'VM35',
                    name: 'Thai Binh',
                },
                {
                    code: 'VM85',
                    name: 'Thai Nguyen',
                },
                {
                    code: 'VM34',
                    name: 'Thanh Hoa',
                },
                {
                    code: 'VM66',
                    name: 'Thua Thien-Hue',
                },
                {
                    code: 'VM37',
                    name: 'Tien Giang',
                },
                {
                    code: 'VM67',
                    name: 'Tra Vinh',
                },
                {
                    code: 'VM68',
                    name: 'Tuyen Quang',
                },
                {
                    code: 'VM69',
                    name: 'Vinh Long',
                },
                {
                    code: 'VM86',
                    name: 'Vinh Phuc',
                },
                {
                    code: 'VM70',
                    name: 'Yen Bai',
                },
            ],
        },
        {
            code: 'VG',
            id: 2446,
            name: 'Virgin Islands; British',
            states: [
                {
                    code: 'VG.VI',
                    name: 'British Virgin Islands',
                },
            ],
        },
        {
            code: 'VI',
            id: 2442,
            name: 'Virgin Islands; U.S.',
            states: [
                {
                    code: '010',
                    name: 'Saint Croix',
                },
                {
                    code: '020',
                    name: 'Saint John',
                },
                {
                    code: '030',
                    name: 'Saint Thomas',
                },
            ],
        },
        {
            code: 'WF',
            id: 2443,
            name: 'Wallis and Futuna',
            states: [],
        },
        {
            code: 'EH',
            id: 2444,
            name: 'Western Sahara',
            states: [],
        },
        {
            code: 'YE',
            id: 2382,
            name: 'Yemen',
            states: [
                {
                    code: 'YM01',
                    name: 'Abyan',
                },
                {
                    code: 'YM20',
                    name: "Al Bayda'",
                },
                {
                    code: 'YM18',
                    name: "Al Dali'",
                },
                {
                    code: 'YM08',
                    name: 'Al Hudaydah',
                },
                {
                    code: 'YM21',
                    name: 'Al Jawf',
                },
                {
                    code: 'YM03',
                    name: 'Al Mahrah',
                },
                {
                    code: 'YM10',
                    name: 'Al Mahwit',
                },
                {
                    code: 'YM19',
                    name: 'Amran',
                },
                {
                    code: 'YM11',
                    name: 'Dhamar',
                },
                {
                    code: 'YM04',
                    name: 'Hadramawt',
                },
                {
                    code: 'YM22',
                    name: 'Hajjah',
                },
                {
                    code: 'YM23',
                    name: 'Ibb',
                },
                {
                    code: 'YM24',
                    name: 'Lahij',
                },
                {
                    code: 'YM14',
                    name: "Ma'rib",
                },
                {
                    code: 'YM27',
                    name: 'Raymah',
                },
                {
                    code: 'YM15',
                    name: 'Sa`dah',
                },
                {
                    code: 'YM16',
                    name: "San`a'",
                },
                {
                    code: 'YM26',
                    name: "San`a' [City]",
                },
                {
                    code: 'YM05',
                    name: 'Shabwah',
                },
                {
                    code: 'YM28',
                    name: 'Socotra',
                },
                {
                    code: 'YM25',
                    name: 'Ta`izz',
                },
                {
                    code: 'YM02',
                    name: '`Adan',
                },
            ],
        },
        {
            code: 'ZM',
            id: 2369,
            name: 'Zambia',
            states: [
                {
                    code: 'ZA02',
                    name: 'Central',
                },
                {
                    code: 'ZA08',
                    name: 'Copperbelt',
                },
                {
                    code: 'ZA03',
                    name: 'Eastern',
                },
                {
                    code: 'ZA04',
                    name: 'Luapula',
                },
                {
                    code: 'ZA09',
                    name: 'Lusaka',
                },
                {
                    code: 'ZA10',
                    name: 'Muchinga',
                },
                {
                    code: 'ZA06',
                    name: 'North-Western',
                },
                {
                    code: 'ZA05',
                    name: 'Northern',
                },
                {
                    code: 'ZA07',
                    name: 'Southern',
                },
                {
                    code: 'ZA01',
                    name: 'Western',
                },
            ],
        },
        {
            code: 'ZW',
            id: 2370,
            name: 'Zimbabwe',
            states: [
                {
                    code: 'ZI09',
                    name: 'Bulawayo',
                },
                {
                    code: 'ZI10',
                    name: 'Harare',
                },
                {
                    code: 'ZI01',
                    name: 'Manicaland',
                },
                {
                    code: 'ZI03',
                    name: 'Mashonaland Central',
                },
                {
                    code: 'ZI04',
                    name: 'Mashonaland East',
                },
                {
                    code: 'ZI05',
                    name: 'Mashonaland West',
                },
                {
                    code: 'ZI08',
                    name: 'Masvingo',
                },
                {
                    code: 'ZI06',
                    name: 'Matabeleland North',
                },
                {
                    code: 'ZI07',
                    name: 'Matabeleland South',
                },
                {
                    code: 'ZI02',
                    name: 'Midlands',
                },
            ],
        },
        {
            code: 'NONE',
            id: 2378,
            name: '- None Specified -',
            states: [],
        },
    ];
    /**
     * Gets all countries
     */
    function getCountries() {
        return COUNTRIES.map(function (country) { return country.name; });
    }
    /**
     * Gets a country by country ID
     */
    function findByCountryId(id) {
        return COUNTRIES.find(function (country) { return country.id === id; });
    }
    /**
     * Gets a country by country name
     * @param name - Name of country to find
     */
    function findByCountryName(name) {
        return COUNTRIES.find(function (country) { return country.name === name.trim(); });
    }
    /**
     * Gets a country by country code
     * @param code - Code of country to find
     */
    function findByCountryCode(code) {
        return COUNTRIES.find(function (country) { return country.code === code.trim(); });
    }
    /**
     * Gets states by country name
     * @param name - Name of the country to search by
     */
    function getStateObjects(name) {
        if (name) {
            var foundCountry = COUNTRIES.find(function (country) { return country.name === name.trim(); });
            return (foundCountry && foundCountry.states) || [];
        }
        return [];
    }
    /**
     * Gets state names by country name
     * @param name - Name of the country to search by
     */
    function getStates(name) {
        return getStateObjects(name).map(function (state) { return state.name; });
    }

    function BooleanInput() {
        return function (target, propertyKey) {
            var key = Symbol();
            return {
                get: function () {
                    return this[key] || false;
                },
                set: function (value) {
                    this[key] = coercion.coerceBooleanProperty(value);
                },
            };
        };
    }

    function Deferred() {
        var temp = {};
        var promise = new Promise(function (resolve, reject) {
            temp.resolve = resolve;
            temp.reject = reject;
        });
        promise.resolve = temp.resolve;
        promise.reject = temp.reject;
        return promise;
    }

    var notifications = {};
    function notify(message) {
        if (!i0.isDevMode() || message in notifications) {
            return;
        }
        notifications[message] = true;
        console.warn(message); // tslint:disable-line
    }

    var ControlConfig = /** @class */ (function () {
        function ControlConfig() {
            this.isEmbedded = false;
            this.isInlineEmbedded = false;
            this.highlighted = false;
        }
        return ControlConfig;
    }());
    var BaseControl = /** @class */ (function (_super) {
        __extends(BaseControl, _super);
        function BaseControl(type, config) {
            if (type === void 0) { type = 'BaseControl'; }
            if (config === void 0) { config = {}; }
            var _this = _super.call(this) || this;
            _this.__type = 'BaseControl';
            _this.__type = type;
            _this.__config = config;
            _this.alwaysActive = config.alwaysActive;
            _this.validators = config.validators || [];
            _this.asyncValidators = config.asyncValidators || [];
            _this.value = config.value;
            _this.key = config.key || '';
            _this.label = config.label || '';
            _this.checkboxLabel = config.checkboxLabel;
            _this.name = config.name || '';
            _this.required = !!config.required;
            _this.hidden = !!config.hidden;
            _this.encrypted = !!config.encrypted;
            _this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
            _this.controlType = config.controlType || '';
            _this.type = config.type;
            _this.subType = config.subType;
            _this.metaType = config.metaType;
            _this.placeholder = config.placeholder || '';
            _this.config = config.config || null;
            _this.dirty = !!(config.value !== undefined && config.value !== null);
            _this.multiple = !!config.multiple;
            _this.headerConfig = config.headerConfig || null;
            _this.currencyFormat = config.currencyFormat || null;
            _this.associatedEntity = config.associatedEntity || null;
            _this.optionsType = config.optionsType || null;
            _this.options = config.options || [];
            _this.forceClear = new i0.EventEmitter();
            _this.readOnly = !!config.readOnly || !!config.disabled;
            _this.disabled = !!config.disabled;
            _this.enabled = true;
            _this.layoutOptions = config.layoutOptions || {};
            _this.military = !!config.military;
            _this.dateFormat = config.dateFormat;
            _this.textMaskEnabled = config.textMaskEnabled;
            _this.maskOptions = config.maskOptions;
            _this.allowInvalidDate = config.allowInvalidDate;
            _this.startDate = config.startDate;
            _this.endDate = config.endDate;
            _this.restrictFieldInteractions = !!config.restrictFieldInteractions;
            _this.highlighted = !!config.highlighted;
            if (!Helpers.isEmpty(config.warning)) {
                _this.warning = config.warning;
            }
            if (_this.required) {
                _this.validators.push(forms.Validators.required);
            }
            if (!Helpers.isBlank(config.maxlength)) {
                _this.maxlength = config.maxlength;
                _this.validators.push(forms.Validators.maxLength(_this.maxlength));
            }
            if (!Helpers.isBlank(config.minlength)) {
                _this.minlength = config.minlength;
                _this.validators.push(forms.Validators.minLength(_this.minlength));
            }
            _this.closeOnSelect = !!config.closeOnSelect;
            _this.interactions = config.interactions;
            _this.dataSpecialization = config.dataSpecialization;
            _this.dataType = config.dataType;
            _this.appendToBody = !!config.appendToBody;
            if (_this.appendToBody) {
                notify("'appendToBody' has been deprecated. Please remove this attribute.");
            }
            _this.parentScrollSelector = config.parentScrollSelector;
            _this.description = config.description;
            if (config.tooltip) {
                _this.tooltip = config.tooltip;
                _this.tooltipPosition = config.tooltipPosition;
                _this.tooltipSize = config.tooltipSize;
                _this.tooltipPreline = config.tooltipPreline;
                _this.removeTooltipArrow = config.removeTooltipArrow;
                _this.tooltipAutoPosition = config.tooltipAutoPosition;
            }
            _this.template = config.template;
            _this.customControlConfig = config.customControlConfig;
            _this.tipWell = config.tipWell;
            _this.width = config.width;
            _this.startupFocus = !!config.startupFocus;
            if (config.fileBrowserImageUploadUrl) {
                _this.fileBrowserImageUploadUrl = config.fileBrowserImageUploadUrl;
            }
            if (config.isEmpty) {
                _this.isEmpty = config.isEmpty;
            }
            _this.weekStart = config.weekStart || 0;
            _this.disabledDateMessage = config.disabledDateMessage;
            return _this;
        }
        return BaseControl;
    }(ControlConfig));

    var AceEditorControl = /** @class */ (function (_super) {
        __extends(AceEditorControl, _super);
        function AceEditorControl(config) {
            var _this = _super.call(this, 'AceEditorControl', config) || this;
            _this.controlType = 'ace-editor';
            return _this;
        }
        return AceEditorControl;
    }(BaseControl));

    var MAX_INTEGER = 2147483647;
    var MIN_YEAR = 1753;
    var FormValidators = /** @class */ (function () {
        function FormValidators() {
        }
        FormValidators.prototype.showStateRequiredFlag = function (subfield, control) {
            return (subfield === 'state' &&
                !Helpers.isEmpty(control.config.state) &&
                control.config.state.required &&
                Helpers.isBlank(control.value.state) &&
                control.config.state.updated &&
                !Helpers.isBlank(control.value.countryName) &&
                control.config.state.pickerConfig &&
                control.config.state.pickerConfig.defaultOptions &&
                control.config.state.pickerConfig.defaultOptions.length > 0);
        };
        // Makes sure the control value does not exceed the max integer value
        FormValidators.maxInteger = function (control) {
            return control.value < MAX_INTEGER ? null : { integerTooLarge: true };
        };
        // Makes sure the control value is above the minimum year
        FormValidators.minYear = function (control) {
            if (!control.value) {
                return null;
            }
            return control.value >= MIN_YEAR ? null : { minYear: true };
        };
        // Makes sure the control value does not exceed the max number value
        FormValidators.maxDouble = function (control) {
            return control.value < Number.MAX_SAFE_INTEGER ? null : { doubleTooLarge: true };
        };
        // Make sure the control value is an email
        FormValidators.isEmail = function (control) {
            var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
            return !control.value || EMAIL_REGEXP.test(control.value) ? null : { invalidEmail: true };
        };
        // Makes sure the control value is a valid address
        FormValidators.isValidAddress = function (control) {
            var fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
            var invalidAddressFields = [];
            var maxlengthFields = [];
            var returnVal = null;
            var maxlengthError = false;
            var showCountryRequiredFlag = function (subfield, ctrl) {
                return (subfield === 'countryID' &&
                    !Helpers.isEmpty(ctrl.config.countryID) &&
                    ctrl.config.countryID.required &&
                    Helpers.isBlank(ctrl.value.countryName) &&
                    ctrl.config.countryID.updated);
            };
            var showStateRequiredFlag = function (subfield, ctrl) {
                return (subfield === 'state' &&
                    !Helpers.isEmpty(ctrl.config.state) &&
                    ctrl.config.state.required &&
                    Helpers.isBlank(ctrl.value.state) &&
                    ctrl.config.state.updated &&
                    !Helpers.isBlank(ctrl.value.countryName) &&
                    ctrl.config.state.pickerConfig &&
                    ctrl.config.state.pickerConfig.defaultOptions &&
                    ctrl.config.state.pickerConfig.defaultOptions.length > 0);
            };
            if (control.value && control.config) {
                var valid_1 = true;
                var formValidity_1 = true;
                fieldList.forEach(function (subfield) {
                    if (!Helpers.isEmpty(control.config[subfield])) {
                        if ((['countryID', 'state'].indexOf(subfield) === -1 &&
                            control.config[subfield].required &&
                            !Helpers.isBlank(control.value[subfield]) &&
                            Helpers.isEmpty(control.value[subfield])) ||
                            showCountryRequiredFlag(subfield, control) ||
                            showStateRequiredFlag(subfield, control)) {
                            valid_1 = false;
                            invalidAddressFields.push(control.config[subfield].label);
                        }
                        if (((subfield !== 'countryID' && control.config[subfield].required && Helpers.isEmpty(control.value[subfield])) ||
                            (subfield === 'countryID' &&
                                !Helpers.isEmpty(control.config.countryID) &&
                                control.config.countryID.required &&
                                Helpers.isEmpty(control.value.countryName))) &&
                            !(subfield === 'state' &&
                                !Helpers.isBlank(control.value.countryName) &&
                                control.config.state.pickerConfig &&
                                control.config.state.pickerConfig.defaultOptions &&
                                control.config.state.pickerConfig.defaultOptions.length === 0)) {
                            formValidity_1 = false;
                        }
                        if (!Helpers.isEmpty(control.config[subfield].maxlength) &&
                            !Helpers.isEmpty(control.value[subfield]) &&
                            control.value[subfield].length > control.config[subfield].maxlength) {
                            maxlengthError = true;
                            maxlengthFields.push(subfield);
                            formValidity_1 = false;
                        }
                    }
                });
                if (!valid_1 || !formValidity_1 || maxlengthError) {
                    returnVal = {};
                }
                if (!valid_1) {
                    returnVal.invalidAddress = true;
                    returnVal.invalidAddressFields = invalidAddressFields;
                }
                if (!formValidity_1) {
                    returnVal.invalidAddressForForm = true;
                }
                if (maxlengthError) {
                    returnVal.maxlength = true;
                    returnVal.maxlengthFields = maxlengthFields;
                }
                return returnVal;
            }
            return null;
        };
        return FormValidators;
    }());

    var AddressControl = /** @class */ (function (_super) {
        __extends(AddressControl, _super);
        function AddressControl(config) {
            var _this = _super.call(this, 'AddressControl', config) || this;
            _this.controlType = 'address';
            _this.validators.push(FormValidators.isValidAddress);
            return _this;
        }
        return AddressControl;
    }(BaseControl));

    var CheckListControl = /** @class */ (function (_super) {
        __extends(CheckListControl, _super);
        function CheckListControl(config) {
            var _this = _super.call(this, 'CheckListControl', config) || this;
            _this.controlType = 'checklist';
            _this.options = config.options || [];
            return _this;
        }
        return CheckListControl;
    }(BaseControl));

    var CheckboxControl = /** @class */ (function (_super) {
        __extends(CheckboxControl, _super);
        function CheckboxControl(config) {
            var _this = _super.call(this, 'CheckboxControl', config) || this;
            _this.controlType = 'checkbox';
            return _this;
        }
        return CheckboxControl;
    }(BaseControl));

    var CustomControl = /** @class */ (function (_super) {
        __extends(CustomControl, _super);
        function CustomControl(config) {
            var _this = _super.call(this, config.template, config) || this;
            _this.controlType = 'custom';
            _this.controlType = config.template;
            return _this;
        }
        return CustomControl;
    }(BaseControl));

    var DateControl = /** @class */ (function (_super) {
        __extends(DateControl, _super);
        function DateControl(config) {
            var _this = _super.call(this, 'DateControl', config) || this;
            _this.controlType = 'date';
            return _this;
        }
        return DateControl;
    }(BaseControl));

    var DateTimeControl = /** @class */ (function (_super) {
        __extends(DateTimeControl, _super);
        function DateTimeControl(config) {
            var _this = _super.call(this, 'DateTimeControl', config) || this;
            _this.controlType = 'date-time';
            return _this;
        }
        return DateTimeControl;
    }(BaseControl));

    var EditorControl = /** @class */ (function (_super) {
        __extends(EditorControl, _super);
        function EditorControl(config) {
            var _this = _super.call(this, 'EditorControl', config) || this;
            _this.controlType = 'editor';
            _this.minimal = false;
            return _this;
        }
        return EditorControl;
    }(BaseControl));

    var FileControl = /** @class */ (function (_super) {
        __extends(FileControl, _super);
        function FileControl(config) {
            var _this = _super.call(this, 'FileControl', config) || this;
            _this.controlType = 'file';
            // TODO - translate
            _this.placeholder = config.placeholder;
            _this.multiple = config.multiple;
            return _this;
        }
        return FileControl;
    }(BaseControl));

    var GroupedControl = /** @class */ (function () {
        function GroupedControl(config) {
            var _this = this;
            this.__type = 'GroupedControl';
            Object.keys(config).forEach(function (key) { return (_this[key] = config[key]); });
        }
        return GroupedControl;
    }());

    var NativeSelectControl = /** @class */ (function (_super) {
        __extends(NativeSelectControl, _super);
        function NativeSelectControl(config) {
            var _this = _super.call(this, 'NativeSelectControl', config) || this;
            _this.controlType = 'native-select';
            _this.options = [];
            _this.options = config.options || [];
            return _this;
        }
        return NativeSelectControl;
    }(BaseControl));

    var PickerControl = /** @class */ (function (_super) {
        __extends(PickerControl, _super);
        function PickerControl(config) {
            var _this = _super.call(this, 'PickerControl', config) || this;
            _this.controlType = 'picker';
            _this.options = [];
            _this.options = config.options || [];
            return _this;
        }
        return PickerControl;
    }(BaseControl));
    var TablePickerControl = /** @class */ (function (_super) {
        __extends(TablePickerControl, _super);
        function TablePickerControl(config) {
            var _this = _super.call(this, Object.assign(config, { parentScrollSelector: '.table-container' })) || this;
            _this.__type = 'TablePickerControl';
            return _this;
        }
        return TablePickerControl;
    }(PickerControl));

    var QuickNoteControl = /** @class */ (function (_super) {
        __extends(QuickNoteControl, _super);
        function QuickNoteControl(config) {
            var _this = _super.call(this, 'QuickNoteControl', config) || this;
            _this.controlType = 'quick-note';
            _this.options = [];
            _this.options = config.options || [];
            return _this;
        }
        return QuickNoteControl;
    }(BaseControl));

    var RadioControl = /** @class */ (function (_super) {
        __extends(RadioControl, _super);
        function RadioControl(config) {
            var _this = _super.call(this, 'RadioControl', config) || this;
            _this.controlType = 'radio';
            _this.options = [];
            _this.options = config.options || [];
            return _this;
        }
        return RadioControl;
    }(BaseControl));

    var ReadOnlyControl = /** @class */ (function (_super) {
        __extends(ReadOnlyControl, _super);
        function ReadOnlyControl(config) {
            var _this = _super.call(this, 'ReadOnlyControl', config) || this;
            _this.controlType = 'read-only';
            config.readOnly = true;
            return _this;
        }
        return ReadOnlyControl;
    }(BaseControl));

    var SelectControl = /** @class */ (function (_super) {
        __extends(SelectControl, _super);
        function SelectControl(config) {
            var _this = _super.call(this, 'SelectControl', config) || this;
            _this.controlType = 'select';
            _this.options = [];
            _this.options = config.options || [];
            _this.placeholder = config.placeholder || '';
            return _this;
        }
        return SelectControl;
    }(BaseControl));

    var SwitchControl = /** @class */ (function (_super) {
        __extends(SwitchControl, _super);
        function SwitchControl(config) {
            var _this = _super.call(this, 'SwitchControl', config) || this;
            _this.controlType = 'switch';
            return _this;
        }
        return SwitchControl;
    }(BaseControl));

    var TextAreaControl = /** @class */ (function (_super) {
        __extends(TextAreaControl, _super);
        function TextAreaControl(config) {
            var _this = _super.call(this, 'TextAreaControl', config) || this;
            _this.controlType = 'text-area';
            return _this;
        }
        return TextAreaControl;
    }(BaseControl));

    var TextBoxControl = /** @class */ (function (_super) {
        __extends(TextBoxControl, _super);
        function TextBoxControl(config) {
            var _this = _super.call(this, 'TextBoxControl', config) || this;
            _this.controlType = 'textbox';
            _this.type = _this.getTextboxType(config.type) || '';
            _this.subType = config.type || '';
            _this.setValidators(_this.subType);
            return _this;
        }
        TextBoxControl.prototype.setValidators = function (type) {
            switch (type) {
                case 'email':
                    this.validators.push(FormValidators.isEmail);
                    break;
                case 'number':
                case 'currency':
                    this.validators.push(FormValidators.maxInteger);
                    break;
                case 'float':
                case 'percentage':
                    this.validators.push(FormValidators.maxDouble);
                    break;
                case 'year':
                    this.validators.push(FormValidators.minYear);
                    break;
                default:
                    break;
            }
        };
        TextBoxControl.prototype.getTextboxType = function (type) {
            switch (type) {
                case 'percentage':
                case 'currency':
                case 'float':
                case 'year':
                    return 'number';
                default:
                    return type;
            }
        };
        return TextBoxControl;
    }(BaseControl));

    var TilesControl = /** @class */ (function (_super) {
        __extends(TilesControl, _super);
        function TilesControl(config) {
            var _this = _super.call(this, 'TilesControl', config) || this;
            _this.controlType = 'tiles';
            _this.options = [];
            _this.options = config.options || [];
            return _this;
        }
        return TilesControl;
    }(BaseControl));

    var TimeControl = /** @class */ (function (_super) {
        __extends(TimeControl, _super);
        function TimeControl(config) {
            var _this = _super.call(this, 'TimeControl', config) || this;
            _this.controlType = 'time';
            return _this;
        }
        return TimeControl;
    }(BaseControl));

    var TimezoneControl = /** @class */ (function (_super) {
        __extends(TimezoneControl, _super);
        function TimezoneControl(config) {
            var _this = _super.call(this, 'TimezoneControl', config) || this;
            _this.controlType = 'timezone';
            _this.options = [];
            _this.buildTimezones = function (compareDate) {
                var timezones = timezoneSupport.listTimeZones()
                    .map(function (zone) {
                    var timezone = timezoneSupport.findTimeZone(zone);
                    var zonedTime = timezoneSupport.getZonedTime(compareDate, timezone);
                    var formatted = parseFormat.formatZonedTime(zonedTime, "z - [" + zone + "] ([GMT] Z)").replace('_', ' ');
                    var option = {
                        value: zone,
                        label: formatted,
                        offset: zonedTime.zone.offset,
                    };
                    // if (this.props.mapLabels) {
                    //   option.label = this.props.mapLabels(option);
                    // }
                    return option;
                })
                    // Formats 'noisy' timezones without a letter acronym.
                    .map(function (option) {
                    var rgx = /(^(\+|-)\d+\s- )/;
                    var matches = option.label.match(rgx);
                    if (matches) {
                        var prefix = matches[0];
                        option.label = option.label.split(prefix)[1];
                    }
                    return option;
                })
                    // Sorts W -> E, prioritizes america. could be more nuanced based on system tz but simple for now
                    .sort(function (a, b) {
                    var offsetDelta = b.offset - a.offset;
                    if (offsetDelta !== 0) {
                        return offsetDelta;
                    }
                    if (a.label < b.label) {
                        return -1;
                    }
                    if (a.label > b.label) {
                        return 1;
                    }
                    return 0;
                });
                return timezones;
            };
            _this.options = _this.buildTimezones(new Date());
            _this.placeholder = config.placeholder || '';
            // current timezone
            var tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
            _this.value = tz;
            return _this;
        }
        return TimezoneControl;
    }(BaseControl));

    var ControlFactory = /** @class */ (function () {
        function ControlFactory() {
        }
        ControlFactory.create = function (type, config) {
            switch (type) {
                case 'AddressControl':
                    return new AddressControl(config);
                case 'CheckboxControl':
                    return new CheckboxControl(config);
                case 'CheckListControl':
                    return new CheckListControl(config);
                case 'CheckListControl':
                    return new CheckListControl(config);
                case 'DateTimeControl':
                    return new DateTimeControl(config);
                case 'EditorControl':
                    return new EditorControl(config);
                case 'FileControl':
                    return new FileControl(config);
                case 'NativeSelectControl':
                    return new NativeSelectControl(config);
                case 'PickerControl':
                    return new PickerControl(config);
                case 'TablePickerControl':
                    return new TablePickerControl(config);
                case 'QuickNoteControl':
                    return new QuickNoteControl(config);
                case 'RadioControl':
                    return new RadioControl(config);
                case 'ReadOnlyControl':
                    return new ReadOnlyControl(config);
                case 'TextAreaControl':
                    return new TextAreaControl(config);
                case 'TextBoxControl':
                    return new TextBoxControl(config);
                case 'SelectControl':
                    return new SelectControl(config);
                case 'SwitchControl':
                    return new SwitchControl(config);
                case 'TilesControl':
                    return new TilesControl(config);
                case 'TimeControl':
                    return new TimeControl(config);
                default:
                    console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                    return null;
            }
        };
        return ControlFactory;
    }());

    var NovoFormControl = /** @class */ (function (_super) {
        __extends(NovoFormControl, _super);
        function NovoFormControl(value, control) {
            var _this = _super.call(this, value, control.validators, control.asyncValidators) || this;
            _this.displayValueChanges = new i0.EventEmitter();
            _this.valueHistory = [];
            _this.validators = control.validators;
            _this.initialValue = value;
            _this.valueHistory.push(value);
            _this.key = control.key;
            _this.label = control.label;
            _this.readOnly = control.readOnly;
            _this.hidden = control.hidden;
            _this.encrypted = control.encrypted;
            _this.config = control.config;
            _this.type = control.type;
            _this.subType = control.subType;
            _this.required = control.required;
            _this.hasRequiredValidator = _this.required;
            _this.tooltip = control.tooltip;
            _this.tooltipPosition = control.tooltipPosition;
            _this.tooltipSize = control.tooltipSize;
            _this.tooltipPreline = control.tooltipPreline;
            _this.removeTooltipArrow = control.removeTooltipArrow;
            _this.tooltipAutoPosition = control.tooltipAutoPosition;
            _this.label = control.label;
            _this.name = control.name;
            _this.required = control.required;
            _this.sortOrder = control.sortOrder;
            _this.controlType = control.controlType;
            _this.placeholder = control.placeholder;
            _this.minimal = control.minimal;
            _this.multiple = control.multiple;
            _this.headerConfig = control.headerConfig;
            _this.optionsType = control.optionsType;
            _this.readOnly = control.readOnly;
            _this.layoutOptions = control.layoutOptions;
            _this.military = control.military;
            _this.dateFormat = control.dateFormat;
            _this.currencyFormat = control.currencyFormat;
            _this.startDate = control.startDate;
            _this.endDate = control.endDate;
            _this.weekStart = control.weekStart;
            _this.textMaskEnabled = control.textMaskEnabled;
            _this.textMaskEnabled = control.textMaskEnabled;
            _this.maskOptions = control.maskOptions;
            _this.allowInvalidDate = control.allowInvalidDate;
            _this.maxlength = control.maxlength;
            _this.minlength = control.minlength;
            _this.closeOnSelect = control.closeOnSelect;
            _this.interactions = control.interactions;
            _this.checkboxLabel = control.checkboxLabel;
            _this.restrictFieldInteractions = control.restrictFieldInteractions;
            _this.appendToBody = control.appendToBody;
            if (_this.appendToBody) {
                notify("'appendToBody' has been deprecated. Please remove this attribute.");
            }
            _this.parentScrollSelector = control.parentScrollSelector;
            _this.description = control.description;
            _this.options = control.options;
            _this.tipWell = control.tipWell;
            _this.customControlConfig = control.customControlConfig;
            _this.warning = control.warning;
            _this.disabledDateMessage = control.disabledDateMessage;
            // Reactive Form, need to enable/disable, can't bind to [disabled]
            if (_this.readOnly) {
                _this.disable();
            }
            else {
                _this.enable();
            }
            return _this;
        }
        /**
         * @param clearValue - flag to reset the control's value
         */
        NovoFormControl.prototype.hide = function (clearValue) {
            if (clearValue === void 0) { clearValue = true; }
            this.hidden = true;
            if (clearValue) {
                this.setValue(null);
            }
        };
        NovoFormControl.prototype.show = function () {
            this.hidden = false;
        };
        NovoFormControl.prototype.setRequired = function (isRequired) {
            this.required = isRequired;
            // Update validators to have the required
            if (this.required && !this.hasRequiredValidator) {
                var validators = __spread(this.validators);
                validators.push(forms.Validators.required);
                // TODO: duplicated below
                this.setValidators(validators);
                this.updateValueAndValidity({ emitEvent: false });
                this.hasRequiredValidator = this.required;
            }
            else if (!this.required && this.hasRequiredValidator) {
                var validators = __spread(this.validators);
                validators = validators.filter(function (val) { return val !== forms.Validators.required; });
                // TODO: duplicated above
                this.setValidators(validators);
                this.updateValueAndValidity({ emitEvent: false });
                this.hasRequiredValidator = this.required;
            }
        };
        NovoFormControl.prototype.setValue = function (value, _a) {
            var _this = this;
            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
            this.markAsDirty();
            this.markAsTouched();
            this.displayValueChanges.emit(value);
            _super.prototype.setValue.call(this, value, { onlySelf: onlySelf, emitEvent: emitEvent, emitModelToViewChange: emitModelToViewChange, emitViewToModelChange: emitViewToModelChange });
            // History
            clearTimeout(this.historyTimeout);
            this.historyTimeout = setTimeout(function () {
                _this.valueHistory.push(value);
            }, 300);
        };
        NovoFormControl.prototype.setReadOnly = function (isReadOnly) {
            this.readOnly = isReadOnly;
            if (this.readOnly) {
                this.disable();
            }
            else {
                this.enable();
            }
        };
        /**
         * Disables the control. This means the control will be exempt from validation checks and
         * excluded from the aggregate value of any parent. Its status is `DISABLED`.
         *
         * If the control has children, all children will be disabled to maintain the model.
         */
        NovoFormControl.prototype.disable = function (opts) {
            if (opts === void 0) { opts = { emitEvent: false }; }
            if (typeof opts.emitEvent === 'undefined') {
                opts.emitEvent = false;
            }
            _super.prototype.disable.call(this, opts);
        };
        NovoFormControl.prototype.enable = function (opts) {
            if (opts === void 0) { opts = { emitEvent: false }; }
            if (typeof opts.emitEvent === 'undefined') {
                opts.emitEvent = false;
            }
            _super.prototype.enable.call(this, opts);
        };
        NovoFormControl.prototype.markAsInvalid = function (message) {
            this.markAsDirty();
            this.markAsTouched();
            this.setErrors(Object.assign({}, this.errors, { custom: message }));
        };
        NovoFormControl.prototype.markAsValid = function () {
            this.setErrors(null);
        };
        return NovoFormControl;
    }(forms.FormControl));

    var NovoFormGroup = /** @class */ (function (_super) {
        __extends(NovoFormGroup, _super);
        function NovoFormGroup() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.fieldInteractionEvents = new i0.EventEmitter();
            return _this;
        }
        Object.defineProperty(NovoFormGroup.prototype, "value", {
            get: function () {
                return this.getRawValue(); // The value property on Angular form groups do not include disabled form control values.  Find way to address this.
            },
            set: function (v) {
                this._value = v;
            },
            enumerable: false,
            configurable: true
        });
        NovoFormGroup.prototype.enableAllControls = function () {
            for (var key in this.controls) {
                if (this.controls[key].readOnly) {
                    this.controls[key].readOnly = false;
                    this.controls[key].enable();
                }
            }
        };
        NovoFormGroup.prototype.disableAllControls = function () {
            for (var key in this.controls) {
                if (!this.controls[key].readOnly) {
                    this.controls[key].readOnly = true;
                    this.controls[key].disable();
                }
            }
        };
        return NovoFormGroup;
    }(forms.FormGroup));

    var NovoLabelService = /** @class */ (function () {
        function NovoLabelService(userLocale) {
            if (userLocale === void 0) { userLocale = 'en-US'; }
            this.userLocale = userLocale;
            this.filters = 'Filter';
            this.clear = 'Clear';
            this.sort = 'Sort';
            this.distributionListOwner = 'Owner';
            this.dateAdded = 'Date Added';
            this.emptyTableMessage = 'No Records to display...';
            this.noMatchingRecordsMessage = 'No Matching Records';
            this.erroredTableMessage = 'Oops! An error occurred.';
            this.pickerError = 'Oops! An error occurred.';
            this.pickerTextFieldEmpty = 'Begin typing to see results.';
            this.pickerEmpty = 'No results to display...';
            this.tabbedGroupPickerEmpty = 'No results found';
            this.quickNoteError = 'Oops! An error occurred.';
            this.quickNoteEmpty = 'No results to display...';
            this.required = 'Required';
            this.numberTooLarge = 'Number is too large';
            this.save = 'Save';
            this.cancel = 'Cancel';
            this.next = 'Next';
            this.itemsPerPage = 'Items per page:';
            this.select = 'Select...';
            this.selected = 'Selected';
            this.selectAllOnPage = 'Select all on page';
            this.deselectAll = 'Deselect all';
            this.refresh = 'Refresh';
            this.close = 'Close';
            this.move = 'Move';
            this.startDate = 'Start Date';
            this.endDate = 'End Date';
            this.rate = 'Rate';
            this.more = 'more';
            this.clearAll = 'CLEAR ALL';
            this.clearAllNormalCase = 'Clear All';
            this.clearSort = 'Clear Sort';
            this.clearFilter = 'Clear Filter';
            this.clearSelected = 'Clear Selected';
            this.today = 'Today';
            this.now = 'Now';
            this.isRequired = 'is required';
            this.notValidYear = 'is not a valid year';
            this.isTooLarge = 'is too large';
            this.invalidAddress = 'requires at least one field filled out';
            this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
            this.minLength = 'is required to be a minimum length of';
            this.past1Day = 'Past 1 Day';
            this.past7Days = 'Past 7 Days';
            this.past30Days = 'Past 30 Days';
            this.past90Days = 'Past 90 Days';
            this.past1Year = 'Past 1 Year';
            this.next1Day = 'Next 1 Day';
            this.next7Days = 'Next 7 Days';
            this.next30Days = 'Next 30 Days';
            this.next90Days = 'Next 90 Days';
            this.next1Year = 'Next 1 Year';
            this.customDateRange = 'Custom Date Range';
            this.backToPresetFilters = 'Back to Preset Filters';
            this.okGotIt = 'Ok, Got it';
            this.address = 'Address';
            this.address1 = 'Address';
            this.apt = 'Apt'; // TODO delete
            this.address2 = 'Apt';
            this.city = 'City / Locality';
            this.state = 'State / Region';
            this.zip = 'Postal Code';
            this.zipCode = 'Postal Code'; // TODO delete
            this.country = 'Country';
            this.or = 'or';
            this.clickToBrowse = 'click to browse';
            this.chooseAFile = 'Choose a file';
            this.no = 'No';
            this.yes = 'Yes';
            this.search = 'SEARCH';
            this.noItems = 'There are no items';
            this.dateFormat = 'MM/dd/yyyy';
            this.dateFormatPlaceholder = 'MM/DD/YYYY';
            this.localDatePlaceholder = 'mm/dd/yyyy';
            this.timeFormatPlaceholderAM = 'hh:mm AM';
            this.timeFormatPlaceholder24Hour = 'HH:mm';
            this.timeFormatAM = 'AM';
            this.timeFormatPM = 'PM';
            this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
            this.promptModalMessage = 'Do you want to perform the following changes?';
            this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
            this.previous = 'Previous';
            this.actions = 'Actions';
            this.all = 'All';
            this.groupedMultiPickerEmpty = 'No items to display';
            this.groupedMultiPickerSelectCategory = 'Select a category from the left to get started';
            this.add = 'Add';
            this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
            this.noStatesForCountry = 'No states available for the selected country';
            this.selectCountryFirst = 'Please select a country before selecting a state';
            this.invalidIntegerInput = 'Special characters are not allowed for';
            this.maxRecordsReached = 'Sorry, you have reached the maximum number of records allowed for this field';
            this.selectFilterOptions = 'Please select one or more filter options below.';
        }
        NovoLabelService.prototype.maxlengthMetWithField = function (field, maxlength) {
            return "Sorry, you have reached the maximum character count of " + maxlength + " for " + field + ".";
        };
        NovoLabelService.prototype.maxlengthMet = function (maxlength) {
            return "Sorry, you have reached the maximum character count of " + maxlength + " for this field.";
        };
        NovoLabelService.prototype.invalidMaxlengthWithField = function (field, maxlength) {
            return "Sorry, you have exceeded the maximum character count of " + maxlength + " for " + field + ".";
        };
        NovoLabelService.prototype.invalidMaxlength = function (maxlength) {
            return "Sorry, you have exceeded the maximum character count of " + maxlength + " for this field.";
        };
        NovoLabelService.prototype.getToManyPlusMore = function (toMany) {
            return "+" + toMany.quantity + " more";
        };
        NovoLabelService.prototype.selectedRecords = function (selected) {
            return selected + " records are selected.";
        };
        NovoLabelService.prototype.showingXofXResults = function (shown, total) {
            return "Showing " + shown + " of " + total + " Results.";
        };
        NovoLabelService.prototype.totalRecords = function (total, select) {
            if (select === void 0) { select = false; }
            return select ? "Select all " + total + " records." : "De-select remaining " + total + " records.";
        };
        NovoLabelService.prototype.dateFormatString = function () {
            return this.dateFormat;
        };
        NovoLabelService.prototype.localizedDatePlaceholder = function () {
            return this.localDatePlaceholder;
        };
        NovoLabelService.prototype.tabbedGroupClearSuggestion = function (tabLabelPlural) {
            return "Clear your search to see all " + tabLabelPlural + ".";
        };
        NovoLabelService.prototype.formatDateWithFormat = function (value, format) {
            var date = value instanceof Date ? value : new Date(value);
            if (date.getTime() !== date.getTime()) {
                return value;
            }
            return new Intl.DateTimeFormat(this.userLocale, format).format(date);
        };
        NovoLabelService.prototype.formatToTimeOnly = function (param) { };
        NovoLabelService.prototype.formatToDateOnly = function (param) { };
        NovoLabelService.prototype.formatTimeWithFormat = function (value, format) {
            var date = value instanceof Date ? value : new Date(value);
            if (date.getTime() !== date.getTime()) {
                return value;
            }
            var timeParts = Intl.DateTimeFormat(this.userLocale, format)
                .formatToParts(date)
                .reduce(function (obj, part) {
                obj[part.type] = part.value;
                return obj;
            }, {});
            var dayPeriod = timeParts.dayPeriod ? timeParts.dayPeriod : '';
            var res = timeParts.hour + ":" + timeParts.minute + " " + dayPeriod;
            return res;
        };
        NovoLabelService.prototype.getWeekdays = function (weekStartsOn) {
            var _this = this;
            if (weekStartsOn === void 0) { weekStartsOn = 0; }
            function getDay(dayOfWeek) {
                var dt = new Date();
                return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
            }
            var weekdays = [getDay(0), getDay(1), getDay(2), getDay(3), getDay(4), getDay(5), getDay(6)].reduce(function (weekdays, dt) {
                weekdays.push(new Intl.DateTimeFormat(_this.userLocale, { weekday: 'long' }).format(dt));
                return weekdays;
            }, []);
            if (weekStartsOn > 0 && weekStartsOn <= 6) {
                var newStart = weekdays.splice(weekStartsOn);
                weekdays = __spread(newStart, weekdays);
            }
            return weekdays;
        };
        NovoLabelService.prototype.getMonths = function () {
            var _this = this;
            function getMonth(month) {
                var dt = new Date();
                return dt.setMonth(month, 1);
            }
            return [
                getMonth(0),
                getMonth(1),
                getMonth(2),
                getMonth(3),
                getMonth(4),
                getMonth(5),
                getMonth(6),
                getMonth(7),
                getMonth(8),
                getMonth(9),
                getMonth(10),
                getMonth(11),
            ].reduce(function (months, dt) {
                months.push(new Intl.DateTimeFormat(_this.userLocale, { month: 'long' }).format(dt));
                return months;
            }, []);
        };
        NovoLabelService.prototype.getProperty = function (value) {
            return this[value];
        };
        NovoLabelService.prototype.getRangeText = function (page, pageSize, length, short) {
            if (length === 0 || pageSize === 0) {
                return "Displaying 0 of " + length;
            }
            length = Math.max(length, 0);
            var startIndex = page * pageSize;
            // If the start index exceeds the list length, do not try and fix the end index to the end.
            var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
            return short ? startIndex + 1 + " - " + endIndex + "/" + length : "Displaying " + (startIndex + 1) + " - " + endIndex + " of " + length;
        };
        NovoLabelService.prototype.formatCurrency = function (value) {
            var options = { style: 'currency', currency: 'USD' };
            return new Intl.NumberFormat(this.userLocale, options).format(value);
        };
        /**
         * Extends the Intl.numberFormat capability with two extra features:
         *  - Does NOT round values, but instead truncates to maximumFractionDigits
         *  - By default uses accounting format for negative numbers: (3.14) instead of -3.14.
         *
         * @param value           The number value to convert to string
         * @param overrideOptions Allows for overriding options used and passed to Intl.NumberFormat()
         */
        NovoLabelService.prototype.formatBigDecimal = function (value, overrideOptions) {
            var defaultOptions = {
                style: 'decimal',
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
                useAccountingFormat: true,
            };
            var options = Object.assign(defaultOptions, overrideOptions);
            var truncatedValue = this.truncateToPrecision(value, options.maximumFractionDigits);
            var _value = new Intl.NumberFormat(this.userLocale, options).format(truncatedValue);
            if (value < 0) {
                _value = options.useAccountingFormat ? "(" + _value.slice(1) + ")" : "-" + _value.slice(1);
            }
            return _value;
        };
        /**
         * Performs a string-based truncating of a number with no rounding
         */
        NovoLabelService.prototype.truncateToPrecision = function (value, precision) {
            var valueAsString = value ? value.toString() : '0';
            var decimalIndex = valueAsString.indexOf('.');
            if (decimalIndex > -1 && decimalIndex + precision + 1 < valueAsString.length) {
                valueAsString = valueAsString.substring(0, valueAsString.indexOf('.') + precision + 1);
            }
            return Number(valueAsString);
        };
        NovoLabelService.prototype.formatNumber = function (value, options) {
            return new Intl.NumberFormat(this.userLocale, options).format(value);
        };
        NovoLabelService.prototype.formatDateShort = function (value) {
            var options = {
                // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
                month: '2-digit',
                day: '2-digit',
                year: 'numeric',
                hour: 'numeric',
                minute: '2-digit',
            };
            var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
            return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
        };
        NovoLabelService.prototype.formatTime = function (value) {
            var options = {
                // HH:MM A - 1:17 PM
                hour: 'numeric',
                minute: '2-digit',
            };
            var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
            return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
        };
        NovoLabelService.prototype.formatDate = function (value) {
            var options = {
                // DD/MM/YYYY - 02/14/2017
                month: '2-digit',
                day: '2-digit',
                year: 'numeric',
            };
            var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
            return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
        };
        return NovoLabelService;
    }());
    NovoLabelService.decorators = [
        { type: i0.Injectable }
    ];
    NovoLabelService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    var NOVO_ELEMENTS_LABELS_PROVIDERS = [{ provide: NovoLabelService, useClass: NovoLabelService }];

    /**
     * @description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
     * overwritten if custom list options are needed.
     */
    var BasePickerResults = /** @class */ (function () {
        function BasePickerResults(element, ref) {
            this._term = '';
            this.selected = [];
            this.matches = [];
            this.hasError = false;
            this.isLoading = false;
            this.isStatic = true;
            this.page = 0;
            this.lastPage = false;
            this.autoSelectFirstOption = true;
            this.optionsFunctionHasChanged = false;
            this.selectingMatches = false;
            this.element = element;
            this.ref = ref;
            this.scrollHandler = this.onScrollDown.bind(this);
        }
        BasePickerResults.prototype.cleanUp = function () {
            var element = this.getListElement();
            if (element && element.hasAttribute('scrollListener')) {
                element.removeAttribute('scrollListener');
                element.removeEventListener('scroll', this.scrollHandler);
            }
        };
        BasePickerResults.prototype.onScrollDown = function (event) {
            var element = event.target;
            if (element) {
                var offset = element.offsetHeight + element.scrollTop;
                var bottom = element.scrollHeight - 300;
                if (offset >= bottom) {
                    event.stopPropagation();
                    if (!this.lastPage && !this.isLoading) {
                        this.processSearch();
                    }
                }
            }
        };
        Object.defineProperty(BasePickerResults.prototype, "term", {
            get: function () {
                return this._term;
            },
            set: function (value) {
                if (this.shouldSearch(value)) {
                    this._term = value;
                    this.page = 0;
                    this.optionsFunctionHasChanged = false;
                    this.matches = [];
                    this.processSearch(true);
                }
                else {
                    this.addScrollListener();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BasePickerResults.prototype, "config", {
            get: function () {
                return this._config;
            },
            set: function (value) {
                if (this.config && this.config.options !== value.options) {
                    this.optionsFunctionHasChanged = true; // reset page so that new options call is used to search
                }
                this._config = value;
            },
            enumerable: false,
            configurable: true
        });
        BasePickerResults.prototype.shouldSearch = function (value) {
            var termHasChanged = value !== this._term;
            var optionsNotYetCalled = this.page === 0;
            return termHasChanged || optionsNotYetCalled || this.optionsFunctionHasChanged;
        };
        BasePickerResults.prototype.addScrollListener = function () {
            if (this.config.enableInfiniteScroll) {
                var element = this.getListElement();
                if (element && !element.hasAttribute('scrollListener')) {
                    element.setAttribute('scrollListener', 'true');
                    element.addEventListener('scroll', this.scrollHandler);
                }
            }
        };
        BasePickerResults.prototype.processSearch = function (shouldReset) {
            var _this = this;
            this.hasError = false;
            this.isLoading = true;
            this.ref.markForCheck();
            this.search(this.term).subscribe(function (results) {
                if (shouldReset) {
                    _this.matches = [];
                }
                if (_this.isStatic) {
                    _this.matches = _this.filterData(results);
                }
                else {
                    _this.matches = _this.matches.concat(results);
                    _this.lastPage = results && !results.length;
                }
                if (_this.matches.length > 0 && _this.autoSelectFirstOption && !_this.selectingMatches) {
                    _this.nextActiveMatch();
                }
                _this.isLoading = false;
                _this.ref.markForCheck();
                setTimeout(function () {
                    _this.overlay.updatePosition();
                    _this.addScrollListener();
                }); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
            }, function (err) {
                _this.hasError = _this.term && _this.term.length !== 0;
                _this.isLoading = false;
                _this.lastPage = true;
                if (_this.term && _this.term.length !== 0) {
                    console.error(err); // tslint:disable-lineno
                }
                _this.ref.markForCheck();
            });
        };
        BasePickerResults.prototype.search = function (term, mode) {
            var _this = this;
            var options = this.config.options;
            return rxjs.from(new Promise(function (resolve, reject) {
                // Check if there is match data
                if (options) {
                    // Resolve the data
                    if (Array.isArray(options)) {
                        _this.isStatic = true;
                        // Arrays are returned immediately
                        resolve(_this.structureArray(options));
                    }
                    else if (_this.shouldCallOptionsFunction(term)) {
                        if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) ||
                            Object.getPrototypeOf(options).hasOwnProperty('then')) {
                            _this.isStatic = false;
                            // Promises (ES6 or Deferred) are resolved whenever they resolve
                            options.then(_this.structureArray.bind(_this)).then(resolve, reject);
                        }
                        else if (typeof options === 'function') {
                            _this.isStatic = false;
                            // Promises (ES6 or Deferred) are resolved whenever they resolve
                            options(term, ++_this.page)
                                .then(_this.structureArray.bind(_this))
                                .then(resolve, reject);
                        }
                        else {
                            // All other kinds of data are rejected
                            reject('The data provided is not an array or a promise');
                            throw new Error('The data provided is not an array or a promise');
                        }
                    }
                    else {
                        if (_this.config.defaultOptions) {
                            _this.isStatic = false;
                            if (typeof _this.config.defaultOptions === 'function') {
                                var defaultOptions = _this.config.defaultOptions(term, ++_this.page);
                                if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                    defaultOptions.then(_this.structureArray.bind(_this)).then(resolve, reject);
                                }
                                else {
                                    resolve(_this.structureArray(defaultOptions));
                                }
                            }
                            else {
                                resolve(_this.structureArray(_this.config.defaultOptions));
                            }
                        }
                        else {
                            // No search term gets rejected
                            reject('No search term');
                        }
                    }
                }
                else {
                    // No data gets rejected
                    reject('error');
                }
            }));
        };
        BasePickerResults.prototype.shouldCallOptionsFunction = function (term) {
            if (this.config && 'minSearchLength' in this.config && Number.isInteger(this.config.minSearchLength)) {
                return typeof term === 'string' && term.length >= this.config.minSearchLength;
            }
            else {
                return !!(term && term.length);
            }
        };
        /**
         * @param collection - the data once getData resolves it
         *
         * @description This function structures an array of nodes into an array of objects with a
         * 'name' field by default.
         */
        BasePickerResults.prototype.structureArray = function (collection) {
            var _this = this;
            var dataArray = collection.data ? collection.data : collection;
            if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
                return collection.map(function (item) {
                    return {
                        value: item,
                        label: item,
                    };
                });
            }
            return dataArray.map(function (data) {
                var value = _this.config.field ? data[_this.config.field] : data.value || data;
                if (_this.config.valueFormat) {
                    value = Helpers.interpolate(_this.config.valueFormat, data);
                }
                var label = _this.config.format ? Helpers.interpolate(_this.config.format, data) : data.label || String(value);
                return { value: value, label: label, data: data };
            });
        };
        /**
         * @param matches - Collection of objects=
         *
         * @description This function loops through the picker options and creates a filtered list of objects that contain
         * the newSearch.
         */
        BasePickerResults.prototype.filterData = function (matches) {
            var _this = this;
            if (this.term && matches) {
                return matches.filter(function (match) {
                    return ~String(match.label).toLowerCase().indexOf(_this.term.toLowerCase());
                });
            }
            // Show no recent results template
            return matches;
        };
        /**
         * @description This function is called when the user presses the enter key to call the selectMatch method.
         */
        BasePickerResults.prototype.selectActiveMatch = function () {
            this.selectMatch();
        };
        /**
         * @description This function sets activeMatch to the match before the current node.
         */
        BasePickerResults.prototype.prevActiveMatch = function () {
            var index = this.matches.indexOf(this.activeMatch);
            this.activeMatch = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
            this.scrollToActive();
            this.ref.markForCheck();
        };
        /**
         * @description This function sets activeMatch to the match after the current node.
         */
        BasePickerResults.prototype.nextActiveMatch = function () {
            var index = this.matches.indexOf(this.activeMatch);
            this.activeMatch = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
            this.scrollToActive();
            this.ref.markForCheck();
        };
        BasePickerResults.prototype.getListElement = function () {
            return this.element.nativeElement;
        };
        BasePickerResults.prototype.getChildrenOfListElement = function () {
            var children = [];
            if (this.getListElement()) {
                children = this.getListElement().children;
            }
            return children;
        };
        BasePickerResults.prototype.scrollToActive = function () {
            var list = this.getListElement();
            var items = this.getChildrenOfListElement();
            var index = this.matches.indexOf(this.activeMatch);
            var item = items[index];
            if (item) {
                list.scrollTop = item.offsetTop;
            }
        };
        /**
         * @description
         */
        BasePickerResults.prototype.selectActive = function (match) {
            this.activeMatch = match;
        };
        /**
         * @description
         */
        BasePickerResults.prototype.isActive = function (match) {
            return this.activeMatch === match;
        };
        /**
         * @description
         */
        BasePickerResults.prototype.selectMatch = function (event, item) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            var selected = this.activeMatch;
            if (selected && this.parent) {
                this.parent.value = selected;
                this.selectingMatches = true;
                if (this.parent.closeOnSelect) {
                    this.parent.hideResults();
                    this.selectingMatches = false;
                }
            }
            this.ref.markForCheck();
            return false;
        };
        /**
         * @description This function captures the whole query string and replace it with the string that will be used to
         * match.
         */
        BasePickerResults.prototype.escapeRegexp = function (queryToEscape) {
            // Ex: if the capture is "a" the result will be \a
            return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        };
        /**
         * @description This function should return a <strong>-tag wrapped HTML string.
         */
        BasePickerResults.prototype.highlight = function (match, query) {
            // Replaces the capture string with a the same string inside of a "strong" tag
            return query ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
        };
        BasePickerResults.prototype.preselected = function (match) {
            var selected = this.selected;
            if (this.config && this.config.selected) {
                selected = __spread(this.selected, this.config.selected);
            }
            if (this.config && this.config.preselected) {
                var preselectedFunc_1 = this.config.preselected;
                return (selected.findIndex(function (item) {
                    return preselectedFunc_1(match, item);
                }) !== -1);
            }
            return (selected.findIndex(function (item) {
                var isPreselected = false;
                if (item && item.value && match && match.value) {
                    if (item.value.id && match.value.id) {
                        isPreselected = item.value.id === match.value.id;
                    }
                    else if (item.value instanceof Object && item.value.hasOwnProperty('value')) {
                        isPreselected = item.value.value === match.value;
                    }
                    else {
                        isPreselected = item.value === match.value;
                    }
                }
                return isPreselected;
            }) !== -1);
        };
        return BasePickerResults;
    }());
    BasePickerResults.decorators = [
        { type: i0.Directive }
    ];
    BasePickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    BasePickerResults.propDecorators = {
        matches: [{ type: i0.Input }]
    };

    var EntityPickerResult = /** @class */ (function () {
        function EntityPickerResult(labels) {
            this.labels = labels;
            this.select = new i0.EventEmitter();
        }
        /**
         * @description This function captures the whole query string and replace it with the string that will be used to
         * match.
         */
        EntityPickerResult.prototype.escapeRegexp = function (queryToEscape) {
            // Ex: if the capture is "a" the result will be \a
            return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        };
        /**
         * @description This function should return a <strong>-tag wrapped HTML string.
         */
        EntityPickerResult.prototype.highlight = function (match, query) {
            // Replaces the capture string with a the same string inside of a "strong" tag
            return query && match ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
        };
        EntityPickerResult.prototype.getIconForResult = function (result) {
            if (result) {
                switch (result.searchEntity) {
                    case 'ClientContact':
                        return 'person contact';
                    case 'ClientCorporation':
                        return 'company';
                    case 'Opportunity':
                        return 'opportunity';
                    case 'Candidate':
                        return 'candidate';
                    case 'Lead':
                        return 'lead';
                    case 'JobOrder':
                        return 'job';
                    case 'Placement':
                        return 'star placement';
                    case 'CorporateUser':
                        return 'user';
                    case 'CorporationDepartment':
                        return 'department';
                    case 'JobShift':
                        return 'timetable contract';
                    default:
                        return '';
                }
            }
            return '';
        };
        EntityPickerResult.prototype.renderTimestamp = function (date) {
            var timestamp = '';
            if (date) {
                timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
            }
            return timestamp;
        };
        EntityPickerResult.prototype.renderTime = function (dateStr) {
            var timestamp = '';
            if (dateStr) {
                timestamp = this.labels.formatTime(new Date(dateStr));
            }
            return timestamp;
        };
        EntityPickerResult.prototype.renderTimeNoOffset = function (dateStr) {
            var timestamp = '';
            if (dateStr) {
                dateStr = dateStr.slice(0, 19);
                timestamp = this.labels.formatTime(dateStr);
            }
            return timestamp;
        };
        EntityPickerResult.prototype.getNameForResult = function (result) {
            var _a, _b, _c;
            if (result) {
                switch (result.searchEntity) {
                    case 'Lead':
                    case 'CorporateUser':
                    case 'ClientContact':
                    case 'Candidate':
                    case 'Person':
                        if ('firstName' in result) {
                            return (result.firstName + " " + result.lastName).trim();
                        }
                        return ("" + (result.name || '')).trim();
                    case 'ClientCorporation':
                        return ("" + (result.name || '')).trim();
                    case 'Opportunity':
                    case 'JobOrder':
                        return (result.id + " | " + (result.title || '')).trim();
                    case 'Placement':
                        var label = "" + result.id;
                        if (result.candidate || result.jobOrder) {
                            if (result.candidate && result.jobOrder) {
                                label = (label + " | " + result.candidate.firstName + " " + result.candidate.lastName + " - " + result.jobOrder.title).trim();
                            }
                            else if (result.jobOrder) {
                                label = (label + " | " + result.jobOrder.title).trim();
                            }
                            else {
                                label = (label + " | " + result.candidate.firstName + " " + result.candidate.lastName).trim();
                            }
                        }
                        return label;
                    case 'JobShift':
                        return (((_a = result.jobOrder) === null || _a === void 0 ? void 0 : _a.title) + " @ " + (((_c = (_b = result.jobOrder) === null || _b === void 0 ? void 0 : _b.clientCorporation) === null || _c === void 0 ? void 0 : _c.name) || '')).trim();
                    default:
                        return ("" + (result.name || '')).trim();
                }
            }
            return '';
        };
        return EntityPickerResult;
    }());
    EntityPickerResult.decorators = [
        { type: i0.Component, args: [{
                    selector: 'entity-picker-result',
                    template: "\n    <novo-list-item *ngIf=\"match.data\" (click)=\"select.next(match.data)\">\n      <novo-item-header>\n        <novo-item-avatar [icon]=\"getIconForResult(match.data)\"></novo-item-avatar>\n        <novo-item-title> <span [innerHtml]=\"highlight(getNameForResult(match.data), term)\"></span> </novo-item-title>\n      </novo-item-header>\n      <novo-item-content direction=\"horizontal\">\n        <!-- COMPANY 1 -->\n        <novo-text smaller class=\"company\" *ngIf=\"match.data.companyName || match.data?.clientCorporation?.name\">\n          <i class=\"bhi-company company\"></i>\n          <span [innerHtml]=\"highlight(match.data.companyName || match.data?.clientCorporation?.name, term)\"></span>\n        </novo-text>\n        <!-- CLIENT CONTACT -->\n        <novo-text smaller class=\"contact\" *ngIf=\"match.data?.clientContact?.firstName\">\n          <i class=\"bhi-person contact person\"></i>\n          <span [innerHtml]=\"highlight(match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName, term)\"></span>\n        </novo-text>\n        <!-- CANDIDATE -->\n        <novo-text smaller class=\"candidate\" *ngIf=\"match.data.candidate && match.data.searchEntity === 'Placement'\">\n          <i class=\"bhi-candidate candidate\"></i>\n          <span [innerHtml]=\"highlight(match.data.candidate.firstName + ' ' + match.data.candidate.lastName, term)\"></span>\n        </novo-text>\n        <!-- START & END DATE -->\n        <novo-text smaller class=\"start-date\" *ngIf=\"match.data.dateBegin && match.data.searchEntity === 'Placement'\">\n          <i class=\"bhi-calendar\"></i>\n          <span [innerHtml]=\"renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)\"></span>\n        </novo-text>\n        <!-- START Date -->\n        <novo-text smaller class=\"start-date\" *ngIf=\"match.data.startTime && match.data.searchEntity === 'JobShift'\">\n          <i class=\"bhi-calendar\"></i>\n          <span [innerHtml]=\"renderTimestamp(match.data.startTime)\"></span>\n        </novo-text>\n        <!-- START & END TIME -->\n        <novo-text smaller class=\"start-time\" *ngIf=\"match.data.startTime && match.data.searchEntity === 'JobShift'\">\n          <i class=\"bhi-clock\"></i>\n          <span [innerHtml]=\"renderTimeNoOffset(match.data.startTime) + ' - ' + renderTimeNoOffset(match.data.endTime)\"></span>\n        </novo-text>\n        <!-- JOBORDER -->\n        <novo-text smaller class=\"job\" *ngIf=\"match.data.jobOrder && match.data.searchEntity === 'JobShift'\">\n          <i class=\"bhi-job job\"></i>\n          <span [innerHtml]=\"highlight(match.data.jobOrder.title, term)\"></span>\n        </novo-text>\n        <!-- OPENINGS -->\n        <novo-text smaller class=\"openings\" *ngIf=\"match.data.openings && match.data.searchEntity === 'JobShift'\">\n          <i class=\"bhi-candidate\"></i>\n          <span>{{ match.data.numAssigned }} / {{ match.data.openings }}</span>\n        </novo-text>\n        <!-- EMAIL -->\n        <novo-text smaller class=\"email\" *ngIf=\"match.data.email\">\n          <i class=\"bhi-email\"></i> <span [innerHtml]=\"highlight(match.data.email, term)\"></span>\n        </novo-text>\n        <!-- PHONE -->\n        <novo-text smaller class=\"phone\" *ngIf=\"match.data.phone\">\n          <i class=\"bhi-phone\"></i> <span [innerHtml]=\"highlight(match.data.phone, term)\"></span>\n        </novo-text>\n        <!-- ADDRESS -->\n        <novo-text smaller class=\"location\" *ngIf=\"match.data.address && (match.data.address.city || match.data.address.state)\">\n          <i class=\"bhi-location\"></i> <span *ngIf=\"match.data.address.city\" [innerHtml]=\"highlight(match.data.address.city, term)\"></span>\n          <span *ngIf=\"match.data.address.city && match.data.address.state\">, </span>\n          <span *ngIf=\"match.data.address.state\" [innerHtml]=\"highlight(match.data.address.state, term)\"></span>\n        </novo-text>\n        <!-- STATUS -->\n        <novo-text smaller class=\"status\" *ngIf=\"match.data.status\">\n          <i class=\"bhi-info\"></i> <span [innerHtml]=\"highlight(match.data.status, term)\"></span>\n        </novo-text>\n        <!-- OWNER -->\n        <novo-text smaller class=\"owner\" *ngIf=\"match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'\">\n          <i class=\"bhi-person\"></i> <span [innerHtml]=\"highlight(match.data.owner.name, term)\"></span>\n        </novo-text>\n        <!-- PRIMARY DEPARTMENT -->\n        <novo-text\n          smaller\n          class=\"primary-department\"\n          *ngIf=\"match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'\"\n        >\n          <i class=\"bhi-department\"></i> <span [innerHtml]=\"highlight(match.data.primaryDepartment.name, term)\"></span>\n        </novo-text>\n        <!-- OCCUPATION -->\n        <novo-text smaller class=\"occupation\" *ngIf=\"match.data.occupation && match.data.searchEntity === 'CorporateUser'\">\n          <i class=\"bhi-occupation\"></i> <span [innerHtml]=\"highlight(match.data.occupation, term)\"></span>\n        </novo-text>\n      </novo-item-content>\n    </novo-list-item>\n  "
                },] }
    ];
    EntityPickerResult.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    EntityPickerResult.propDecorators = {
        match: [{ type: i0.Input }],
        term: [{ type: i0.Input }],
        select: [{ type: i0.Output }]
    };
    var EntityPickerResults = /** @class */ (function (_super) {
        __extends(EntityPickerResults, _super);
        function EntityPickerResults(element, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.labels = labels;
            _this.select = new i0.EventEmitter();
            return _this;
        }
        Object.defineProperty(EntityPickerResults.prototype, "hasNonErrorMessage", {
            get: function () {
                return !this.isLoading && !this.matches.length && !this.hasError;
            },
            enumerable: false,
            configurable: true
        });
        EntityPickerResults.prototype.getListElement = function () {
            return this.element.nativeElement.querySelector('novo-list');
        };
        EntityPickerResults.prototype.selectMatch = function (event, item) {
            this.select.next(item);
            return _super.prototype.selectMatch.call(this, event, item);
        };
        return EntityPickerResults;
    }(BasePickerResults));
    EntityPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'entity-picker-results',
                    template: "\n    <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n      <entity-picker-result\n        *ngFor=\"let match of matches\"\n        [match]=\"match\"\n        [term]=\"term\"\n        [ngClass]=\"{ active: isActive(match) }\"\n        (click)=\"selectMatch($event, match)\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n      </entity-picker-result>\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n    </novo-list>\n    <div class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</div>\n    <div class=\"picker-null-results\" *ngIf=\"hasNonErrorMessage && term !== ''\">{{ labels.pickerEmpty }}</div>\n    <div class=\"picker-null-results\" *ngIf=\"hasNonErrorMessage && term === ''\">{{ labels.pickerTextFieldEmpty }}</div>\n  ",
                    host: {
                        class: 'novo-entity-picker-results',
                    }
                },] }
    ];
    EntityPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    EntityPickerResults.propDecorators = {
        select: [{ type: i0.Output }]
    };

    // App
    var OptionsService = /** @class */ (function () {
        function OptionsService() {
        }
        OptionsService.prototype.getOptionsConfig = function (http, field, config) {
            return {
                field: 'value',
                format: '$label',
                options: function (query) {
                    return new Promise(function (resolve, reject) {
                        if (query && query.length) {
                            var exp = new RegExp('^(?:[a-z]+:)?//', 'i');
                            var endpoint = void 0;
                            if (exp.test(field.optionsUrl)) {
                                var url = new URL(field.optionsUrl);
                                url.searchParams.set('filter', query || '');
                                endpoint = url.toString();
                            }
                            else {
                                // Construct relative url (host will not be used but is required for construction)
                                var url = new URL("http://placeholder.com/" + field.optionsUrl);
                                url.searchParams.set('filter', query || '');
                                endpoint = "" + url.pathname + url.search;
                            }
                            http.get(endpoint).subscribe(resolve, reject);
                        }
                        else {
                            resolve([]);
                        }
                    });
                },
            };
        };
        return OptionsService;
    }());
    OptionsService.decorators = [
        { type: i0.Injectable }
    ];
    OptionsService.ctorParameters = function () { return []; };

    var FormUtils = /** @class */ (function () {
        function FormUtils(labels, optionsService) {
            this.labels = labels;
            this.optionsService = optionsService;
            this.ASSOCIATED_ENTITY_LIST = [
                'Candidate',
                'ClientContact',
                'ClientCorporation',
                'CorporationDepartment',
                'Lead',
                'Opportunity',
                'JobOrder',
                'CorporateUser',
                'Person',
                'Placement',
                'JobShift',
            ];
            this.ENTITY_PICKER_LIST = [
                'Candidate',
                'CandidateText',
                'Client',
                'ClientText',
                'ClientContact',
                'ClientContactText',
                'ClientCorporation',
                'ClientCorporationText',
                'Lead',
                'LeadText',
                'Opportunity',
                'OpportunityText',
                'JobOrder',
                'JobOrderText',
                'CorporateUser',
                'CorporateUserText',
                'Person',
                'PersonText',
                'Placement',
                'JobShift',
            ];
        }
        FormUtils.prototype.toFormGroup = function (controls) {
            var group = {};
            controls.forEach(function (control) {
                var value = Helpers.isBlank(control.value) ? '' : control.value;
                group[control.key] = new NovoFormControl(value, control);
            });
            return new NovoFormGroup(group);
        };
        FormUtils.prototype.emptyFormGroup = function () {
            return new NovoFormGroup({});
        };
        FormUtils.prototype.addControls = function (formGroup, controls) {
            controls.forEach(function (control) {
                var value = Helpers.isBlank(control.value) ? '' : control.value;
                var formControl = new NovoFormControl(value, control);
                formGroup.addControl(control.key, formControl);
            });
        };
        FormUtils.prototype.removeControls = function (formGroup, controls) {
            controls.forEach(function (control) {
                formGroup.removeControl(control.key);
            });
        };
        FormUtils.prototype.toFormGroupFromFieldset = function (fieldsets) {
            var controls = [];
            fieldsets.forEach(function (fieldset) {
                controls.push.apply(controls, __spread(fieldset.controls));
            });
            return this.toFormGroup(controls);
        };
        FormUtils.prototype.hasAssociatedEntity = function (field) {
            return !!(field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity));
        };
        FormUtils.prototype.determineInputType = function (field) {
            var type;
            var dataSpecializationTypeMap = {
                DATETIME: 'datetime',
                TIME: 'time',
                MONEY: 'currency',
                PERCENTAGE: 'percentage',
                HTML: 'editor',
                'HTML-MINIMAL': 'editor-minimal',
                YEAR: 'year',
                WORKFLOW_OPTIONS: 'select',
                SPECIALIZED_OPTIONS: 'select',
                ALL_WORKFLOW_OPTIONS: 'select',
                WorkflowOptionsLookup: 'select',
                SpecializedOptionsLookup: 'select',
                SimplifiedOptionsLookup: 'select',
                AllWorkflowOptionsLookup: 'select',
            };
            var dataTypeToTypeMap = {
                Timestamp: 'date',
                Date: 'date',
                Boolean: 'tiles',
            };
            var inputTypeToTypeMap = {
                CHECKBOX: 'radio',
                RADIO: 'radio',
                SELECT: 'select',
                TILES: 'tiles',
            };
            var inputTypeMultiToTypeMap = {
                CHECKBOX: 'checklist',
                RADIO: 'checklist',
                SELECT: 'chips',
            };
            var typeToTypeMap = {
                file: 'file',
                COMPOSITE: 'address',
            };
            var numberDataTypeToTypeMap = {
                Double: 'float',
                BigDecimal: 'float',
                Integer: 'number',
            };
            if (field.type === 'TO_MANY') {
                if (this.hasAssociatedEntity(field)) {
                    if (field.multiValue === false) {
                        type = 'entitypicker';
                    }
                    else {
                        type = 'entitychips';
                    }
                }
                else {
                    if (field.multiValue === false) {
                        type = 'picker';
                    }
                    else {
                        type = 'chips';
                    }
                }
            }
            else if (field.type === 'TO_ONE') {
                if ('SYSTEM' === field.dataSpecialization &&
                    ['WorkflowOptionsLookup', 'SpecializedOptionsLookup', 'AllWorkflowOptionsLookup'].includes(field.dataType)) {
                    type = dataSpecializationTypeMap[field.dataType];
                }
                else if (['WORKFLOW_OPTIONS', 'SPECIALIZED_OPTIONS', 'ALL_WORKFLOW_OPTIONS'].includes(field.dataSpecialization)) {
                    type = dataSpecializationTypeMap[field.dataSpecialization];
                }
                else if (['SimplifiedOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                    if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
                        type = inputTypeToTypeMap[field.inputType];
                    }
                    else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
                        type = inputTypeMultiToTypeMap[field.inputType];
                    }
                    else {
                        type = dataSpecializationTypeMap[field.dataType];
                    }
                }
                else if (this.hasAssociatedEntity(field)) {
                    type = 'entitypicker'; // TODO!
                }
                else {
                    type = 'picker';
                }
            }
            else if (field.optionsUrl && field.inputType === 'SELECT') {
                if (field.optionsType && ~this.ENTITY_PICKER_LIST.indexOf(field.optionsType)) {
                    type = 'entitypicker'; // TODO!
                }
                else {
                    type = 'picker';
                }
            }
            else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
                type = dataSpecializationTypeMap[field.dataSpecialization];
            }
            else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
                type = dataTypeToTypeMap[field.dataType];
            }
            else if (field.inputType === 'TEXTAREA') {
                type = 'textarea';
            }
            else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
                type = inputTypeToTypeMap[field.inputType];
            }
            else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
                type = inputTypeMultiToTypeMap[field.inputType];
            }
            else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
                type = typeToTypeMap[field.type];
            }
            else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
                type = numberDataTypeToTypeMap[field.dataType];
            } /* else {
                    throw new Error('FormUtils: This field type is unsupported.');
                }*/
            return type;
        };
        FormUtils.prototype.isFieldEncrypted = function (key) {
            return key.indexOf('customEncrypted') > -1;
        };
        FormUtils.prototype.getControlForField = function (field, http, config, overrides, forTable, fieldData) {
            var e_1, _b;
            if (forTable === void 0) { forTable = false; }
            // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
            // TODO: (cont.) as the setter of the field argument
            var type = this.determineInputType(field) || field.type;
            var control;
            var controlConfig = {
                metaType: field.type,
                type: type,
                key: field.name,
                label: field.label,
                placeholder: field.hint || '',
                required: field.required || field.systemRequired,
                hidden: !field.required,
                encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
                value: field.value || field.defaultValue,
                sortOrder: field.sortOrder,
                associatedEntity: field.associatedEntity,
                optionsType: field.optionsType,
                multiple: field.multiValue,
                readOnly: !!field.disabled || !!field.readOnly,
                disabled: field.disabled,
                maxlength: field.maxLength,
                interactions: field.interactions,
                dataSpecialization: field.dataSpecialization,
                dataType: field.dataType,
                description: field.description || '',
                tooltip: field.tooltip,
                tooltipPosition: field.tooltipPosition,
                customControl: field.customControl,
                template: field.template,
                customControlConfig: field.customControlConfig,
                restrictFieldInteractions: field.restrictFieldInteractions,
                validators: field.validators,
                warning: field.warning,
                config: field.config || {},
                closeOnSelect: field.closeOnSelect,
                layoutOptions: field.layoutOptions,
            };
            this.inferDateRange(controlConfig, field);
            // TODO: getControlOptions should always return the correct format
            var optionsConfig = this.getControlOptions(field, http, config, fieldData);
            if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
                controlConfig.options = optionsConfig;
            }
            else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
                controlConfig.config = {
                    options: optionsConfig,
                };
            }
            else if (optionsConfig) {
                controlConfig.config = Object.assign(Object.assign({}, optionsConfig), (controlConfig && controlConfig.config));
            }
            if (type === 'year') {
                controlConfig.maxlength = 4;
            }
            // TODO: Overrides should be an iterable of all properties (potentially a private method)
            var overrideResultsTemplate;
            var overridePreviewTemplate;
            if (overrides && overrides[field.name]) {
                if (overrides[field.name].resultsTemplate) {
                    overrideResultsTemplate = overrides[field.name].resultsTemplate;
                    controlConfig.config.resultsTemplate = overrideResultsTemplate;
                    delete overrides[field.name].resultsTemplate;
                }
                if (overrides[field.name].overridePreviewTemplate) {
                    overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                    controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                    delete overrides[field.name].overridePreviewTemplate;
                }
                if (overrides[field.name].pickerCallback) {
                    controlConfig.config.callback = overrides[field.name].pickerCallback;
                }
                if (overrides[field.name].type) {
                    type = overrides[field.name].type;
                }
                if (overrides[field.name].columns) {
                    controlConfig.config.columns = overrides[field.name].columns;
                    controlConfig.closeOnSelect = true;
                    delete controlConfig.label;
                }
                if (overrides[field.name].warning) {
                    controlConfig.warning = overrides[field.name].warning;
                }
                Object.assign(controlConfig, overrides[field.name]);
            }
            switch (type) {
                case 'entitychips':
                    // TODO: This doesn't belong in this codebase
                    controlConfig.multiple = true;
                    controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                    controlConfig.config.previewTemplate = overridePreviewTemplate || EntityPickerResult;
                    // TODO: When appendToBody picker works better in table/form
                    control = new PickerControl(controlConfig);
                    break;
                case 'chips':
                    controlConfig.multiple = true;
                    // TODO: When appendToBody picker works better in table/form
                    control = new PickerControl(controlConfig);
                    break;
                case 'entitypicker':
                    // TODO: This doesn't belong in this codebase
                    controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                    // TODO: When appendToBody picker works better in table/form
                    control = new PickerControl(controlConfig);
                    break;
                case 'picker':
                    // TODO: When appendToBody picker works better in table/form
                    control = new PickerControl(controlConfig);
                    break;
                case 'datetime':
                    controlConfig.military = config ? !!config.military : false;
                    controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                    control = new DateTimeControl(controlConfig);
                    break;
                case 'date':
                    controlConfig.dateFormat = field.dateFormat;
                    controlConfig.textMaskEnabled = field.textMaskEnabled;
                    controlConfig.allowInvalidDate = field.allowInvalidDate;
                    controlConfig.military = config ? !!config.military : false;
                    controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                    control = new DateControl(controlConfig);
                    break;
                case 'time':
                    controlConfig.military = config ? !!config.military : false;
                    control = new TimeControl(controlConfig);
                    break;
                case 'native-time':
                case 'native-date':
                case 'native-week':
                case 'native-year':
                case 'native-datetime-local':
                case 'native-tel':
                case 'native-email':
                case 'native-url':
                case 'native-number':
                    control = new CustomControl(Object.assign(Object.assign({}, controlConfig), { template: 'native-input', type: type.replace('native-', ''), alwaysActive: true }));
                    break;
                case 'timezone':
                    control = new TimezoneControl(controlConfig);
                    break;
                case 'currency':
                case 'money':
                case 'email':
                case 'percentage':
                case 'float':
                case 'number':
                case 'year':
                    // TODO: Only types from `determineInputType` should be used in this class
                    if (type === 'money') {
                        type = 'currency';
                    }
                    controlConfig.type = type;
                    control = new TextBoxControl(controlConfig);
                    break;
                case 'text':
                    control = new TextBoxControl(controlConfig);
                    break;
                case 'textarea':
                    control = new TextAreaControl(controlConfig);
                    break;
                case 'editor':
                    control = new EditorControl(controlConfig);
                    break;
                case 'editor-minimal':
                    control = new EditorControl(controlConfig);
                    control.minimal = true;
                    break;
                case 'tiles':
                    control = new TilesControl(controlConfig);
                    break;
                case 'checkbox':
                    controlConfig.checkboxLabel = field.checkboxLabel;
                    control = new CheckboxControl(controlConfig);
                    break;
                case 'switch':
                    control = new SwitchControl(controlConfig);
                    break;
                case 'checklist':
                    control = new CheckListControl(controlConfig);
                    break;
                case 'radio':
                    control = new RadioControl(controlConfig);
                    break;
                case 'select':
                    control = new SelectControl(controlConfig);
                    break;
                case 'address':
                    controlConfig.required = field.required || false;
                    if (Helpers.isBlank(controlConfig.config)) {
                        controlConfig.config = {};
                    }
                    controlConfig.config.required = field.required;
                    controlConfig.config.readOnly = controlConfig.readOnly;
                    if (field.fields && field.fields.length) {
                        try {
                            for (var _c = __values(field.fields), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var subfield = _d.value;
                                controlConfig.config[subfield.name] = {
                                    required: !!subfield.required,
                                    hidden: !!subfield.readOnly,
                                };
                                if (!Helpers.isEmpty(subfield.label)) {
                                    controlConfig.config[subfield.name].label = subfield.label;
                                }
                                if (!Helpers.isEmpty(subfield.maxLength)) {
                                    controlConfig.config[subfield.name].maxlength = subfield.maxLength;
                                }
                                controlConfig.required = controlConfig.required || subfield.required;
                                if (subfield.defaultValue) {
                                    if (Helpers.isBlank(controlConfig.value)) {
                                        controlConfig.value = {};
                                    }
                                    controlConfig.value[subfield.name] = subfield.defaultValue;
                                }
                                else if (subfield.name === 'countryID') {
                                    if (Helpers.isBlank(controlConfig.value)) {
                                        controlConfig.value = {};
                                    }
                                    controlConfig.value[subfield.name] = 1;
                                }
                                if (subfield.name === 'state' || subfield.name === 'countryID') {
                                    if (subfield.name === 'countryID') {
                                        subfield.optionsType = 'Country';
                                    }
                                    if (!subfield.optionsUrl) {
                                        subfield.optionsUrl = "options/" + subfield.optionsType;
                                    }
                                    controlConfig.config[subfield.name].pickerConfig = this.getControlOptions(subfield, http, config, fieldData);
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    controlConfig.isEmpty = this.isAddressEmpty;
                    control = new AddressControl(controlConfig);
                    break;
                case 'file':
                    control = new FileControl(controlConfig);
                    break;
                case 'custom':
                    control = new CustomControl(controlConfig);
                    break;
                default:
                    control = new TextBoxControl(controlConfig);
                    break;
            }
            return control;
        };
        FormUtils.prototype.shouldCreateControl = function (field) {
            if (field.systemRequired) {
                field.readOnly = false;
            }
            return (field.name !== 'id' &&
                (!['SYSTEM', 'SECTION_HEADER'].includes(field.dataSpecialization) ||
                    ['address', 'billingAddress', 'secondaryAddress'].includes(field.name)) &&
                !field.readOnly);
        };
        FormUtils.prototype.toControls = function (meta, currencyFormat, http, config, overrides, forTable) {
            var _this = this;
            if (forTable === void 0) { forTable = false; }
            var controls = [];
            if (meta && meta.fields) {
                var fields = meta.fields;
                fields.forEach(function (field) {
                    if (_this.shouldCreateControl(field)) {
                        var control = _this.getControlForField(field, http, config, overrides, forTable);
                        // Set currency format
                        if (control.subType === 'currency') {
                            control.currencyFormat = currencyFormat;
                        }
                        // Add to controls
                        controls.push(control);
                    }
                });
            }
            return controls;
        };
        FormUtils.prototype.toTableControls = function (meta, currencyFormat, http, config, overrides) {
            var controls = this.toControls(meta, currencyFormat, http, config, overrides, true);
            var ret = {};
            controls.forEach(function (control) {
                ret[control.key] = {
                    editorType: control.__type,
                    editorConfig: control.__config,
                };
            });
            return ret;
        };
        FormUtils.prototype.toFieldSets = function (meta, currencyFormat, http, config, overrides, data) {
            var _this = this;
            var fieldsets = [];
            var formFields = [];
            if (meta && meta.fields) {
                formFields = this.getFormFields(meta);
                formFields.forEach(function (field) {
                    if (_this.isHeader(field)) {
                        if (field.enabled) {
                            _this.insertHeaderToFieldsets(fieldsets, field);
                        }
                    }
                    else if (_this.isEmbeddedField(field)) {
                        _this.insertHeaderToFieldsets(fieldsets, field);
                        var embeddedFields = _this.getEmbeddedFields(field);
                        embeddedFields.forEach(function (embeddedField) {
                            if (_this.shouldCreateControl(embeddedField)) {
                                var control = _this.createControl(embeddedField, data, http, config, overrides, currencyFormat);
                                control = _this.markControlAsEmbedded(control, field.dataSpecialization ? field.dataSpecialization.toLowerCase() : null);
                                fieldsets[fieldsets.length - 1].controls.push(control);
                            }
                            else if (_this.isHeader(embeddedField)) {
                                _this.insertHeaderToFieldsets(fieldsets, embeddedField);
                            }
                        });
                    }
                    else if (_this.shouldCreateControl(field)) {
                        var control = _this.createControl(field, data, http, config, overrides, currencyFormat);
                        if (field.inlineEmbeddedAssociatedEntityField) {
                            control = _this.markControlAsEmbedded(control, 'inline_embedded');
                        }
                        if (fieldsets.length === 0) {
                            fieldsets.push({ controls: [] });
                        }
                        fieldsets[fieldsets.length - 1].controls.push(control);
                    }
                });
            }
            if (fieldsets.length > 0) {
                return fieldsets;
            }
            else {
                return [
                    {
                        controls: this.toControls(meta, currencyFormat, http, config),
                    },
                ];
            }
        };
        FormUtils.prototype.isEmbeddedField = function (field) {
            return field.dataSpecialization && ['embedded'].includes(field.dataSpecialization.toLowerCase()) && !field.readOnly;
        };
        FormUtils.prototype.createControl = function (field, data, http, config, overrides, currencyFormat) {
            var fieldData = this.isEmbeddedFieldData(field, data) ? this.getEmbeddedFieldData(field, data) : this.getFieldData(field, data);
            var control = this.getControlForField(field, http, config, overrides, undefined, fieldData);
            // Set currency format
            if (control.subType === 'currency') {
                control.currencyFormat = currencyFormat;
            }
            return control;
        };
        FormUtils.prototype.isEmbeddedFieldData = function (field, data) {
            return data && field.name.includes('.');
        };
        FormUtils.prototype.getFieldData = function (field, data) {
            return (data && data[field.name]) || null;
        };
        FormUtils.prototype.getEmbeddedFieldData = function (field, data) {
            var _b = __read(field.name.split('.'), 2), parentFieldName = _b[0], fieldName = _b[1];
            return (data && data[parentFieldName] && data[parentFieldName][fieldName]) || null;
        };
        FormUtils.prototype.getFormFields = function (meta) {
            var sectionHeaders = meta.sectionHeaders
                ? meta.sectionHeaders.map(function (element) {
                    element.isSectionHeader = true;
                    return element;
                })
                : [];
            var fields = meta.fields.map(function (field) {
                field.parentEntity = meta.entity;
                if (!field.hasOwnProperty('sortOrder')) {
                    field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
                }
                return field;
            });
            // build list of fields that should be displayed inline but belong to associated entities
            var inlineEmbeddedAssociatedEntityFields = this.getInlineEmbeddedFields(fields);
            // remove the inline embedded fields because the associated entity fields were extracted above
            // and will be added to the regular list of fields. This prevents the fields from being added multiple times.
            fields = fields.filter(function (f) { return !f.dataSpecialization || f.dataSpecialization.toLowerCase() !== 'inline_embedded'; });
            // sort fields
            return __spread(sectionHeaders, fields, inlineEmbeddedAssociatedEntityFields).sort(Helpers.sortByField(['sortOrder', 'name']));
        };
        FormUtils.prototype.getInlineEmbeddedFields = function (fields) {
            var _this = this;
            var inlineEmbeddedAssociatedEntityFields = [];
            fields
                .filter(function (f) { return f.dataSpecialization && f.dataSpecialization.toLowerCase() === 'inline_embedded'; })
                .forEach(function (f) {
                inlineEmbeddedAssociatedEntityFields = __spread(inlineEmbeddedAssociatedEntityFields, _this.getAssociatedFieldsForInlineEmbedded(f));
            });
            return inlineEmbeddedAssociatedEntityFields;
        };
        FormUtils.prototype.getAssociatedFieldsForInlineEmbedded = function (field) {
            var associatedEntityFields = [];
            associatedEntityFields = this.getEmbeddedFields(field).map(function (aef) {
                aef.inlineEmbeddedAssociatedEntityField = true;
                return aef;
            });
            return associatedEntityFields;
        };
        FormUtils.prototype.getEmbeddedFields = function (subHeader) {
            return subHeader.associatedEntity.fields
                .filter(function (field) { return field.name !== 'id'; })
                .map(function (field) {
                if (!field.name.startsWith(subHeader.name + ".")) {
                    field.name = subHeader.name + "." + field.name;
                }
                return field;
            })
                .sort(Helpers.sortByField(['sortOrder', 'name']));
        };
        FormUtils.prototype.isHeader = function (field) {
            return (!Helpers.isBlank(field) &&
                ((field.hasOwnProperty('isSectionHeader') && field.isSectionHeader) ||
                    (field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'section_header')));
        };
        FormUtils.prototype.insertHeaderToFieldsets = function (fieldsets, field) {
            var constantProperties = {
                controls: [],
                isEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'embedded',
                isInlineEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'inline_embedded',
                key: field.name,
            };
            if (field.name && field.name.startsWith('customObject') && field.associatedEntity && field.associatedEntity.label) {
                fieldsets.push(Object.assign({ title: field.associatedEntity.label || field.label, icon: field.icon || 'bhi-card-expand' }, constantProperties));
            }
            else {
                fieldsets.push(Object.assign({ title: field.label, icon: field.icon || 'bhi-section' }, constantProperties));
            }
        };
        FormUtils.prototype.markControlAsEmbedded = function (control, dataSpecialization) {
            if (Helpers.isBlank(control.config)) {
                control.config = {};
            }
            control.config.embedded = true;
            control.isEmbedded = dataSpecialization === 'embedded';
            control.isInlineEmbedded = dataSpecialization === 'inline_embedded';
            return control;
        };
        FormUtils.prototype.getControlOptions = function (field, http, config, fieldData) {
            // TODO: The token property of config is the only property used; just pass in `token: string`
            if (field.dataType === 'Boolean' && !field.options) {
                // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
                // TODO: (cont.) returns `tiles`
                return [
                    { value: false, label: this.labels.no },
                    { value: true, label: this.labels.yes },
                ];
            }
            else if (field.dataSpecialization === 'ALL_WORKFLOW_OPTIONS' && field.options) {
                return field.options;
            }
            else if (field.workflowOptions) {
                return this.getWorkflowOptions(field.workflowOptions, fieldData);
            }
            else if (field.dataSpecialization === 'SPECIALIZED_OPTIONS' ||
                (field.options && ['SpecializedOptionsLookup', 'SimplifiedOptionsLookup'].includes(field.dataType))) {
                return field.options;
            }
            else if (field.optionsUrl) {
                return this.optionsService.getOptionsConfig(http, field, config);
            }
            else if (Array.isArray(field.options) && field.type === 'chips') {
                var options = field.options;
                return {
                    field: 'value',
                    format: '$label',
                    options: options,
                };
            }
            else if (field.options) {
                return field.options;
            }
            return null;
        };
        FormUtils.prototype.getWorkflowOptions = function (workflowOptions, fieldData) {
            var currentValue = null;
            var currentWorkflowOption = 'initial';
            if (fieldData === null || fieldData === void 0 ? void 0 : fieldData.id) {
                currentValue = Object.assign(Object.assign({}, fieldData), { value: fieldData.id, label: fieldData.label || fieldData.id });
                currentWorkflowOption = fieldData.id;
            }
            var updateWorkflowOptions = workflowOptions[currentWorkflowOption] || [];
            // Ensure that the current value is added to the beginning of the options list
            if (currentValue && !updateWorkflowOptions.find(function (option) { return option.value === currentValue.value; })) {
                updateWorkflowOptions.unshift(currentValue);
            }
            return updateWorkflowOptions;
        };
        FormUtils.prototype.setInitialValues = function (controls, values, keepClean, keyOverride) {
            for (var i = 0; i < controls.length; i++) {
                var control = controls[i];
                var key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
                var value = values[key];
                if (Helpers.isBlank(value)) {
                    continue;
                }
                if (Array.isArray(value) && value.length === 0) {
                    continue;
                }
                if (Array.isArray(value) && value.length > 0) {
                    value = value.filter(function (val) { return !(Object.keys(val).length === 0 && val.constructor === Object); });
                    if (value.length === 0) {
                        continue;
                    }
                }
                if (value.data && value.data.length === 0) {
                    continue;
                }
                if (Object.keys(value).length === 0 && value.constructor === Object) {
                    continue;
                }
                if (control.dataType === 'Date' && typeof value === 'string' && control.optionsType !== 'skipConversion') {
                    value = dateFns.startOfDay(value);
                }
                control.value = value;
                // TODO: keepClean is not required, but is always used. It should default (to true?)
                control.dirty = !keepClean;
            }
        };
        FormUtils.prototype.setInitialValuesFieldsets = function (fieldsets, values, keepClean) {
            var _this = this;
            fieldsets.forEach(function (fieldset) {
                _this.setInitialValues(fieldset.controls, values, keepClean);
            });
        };
        FormUtils.prototype.forceShowAllControls = function (controls) {
            controls.forEach(function (control) {
                control.hidden = false;
            });
        };
        FormUtils.prototype.forceShowAllControlsInFieldsets = function (fieldsets) {
            fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    control.hidden = false;
                });
            });
        };
        FormUtils.prototype.forceValidation = function (form) {
            Object.keys(form.controls).forEach(function (key) {
                var control = form.controls[key];
                if (control.required && Helpers.isBlank(form.value[control.key])) {
                    control.markAsDirty();
                    control.markAsTouched();
                }
            });
        };
        FormUtils.prototype.isAddressEmpty = function (control) {
            var fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
            var valid = true;
            if (control.value && control.config) {
                fieldList.forEach(function (subfield) {
                    if (((subfield !== 'countryID' &&
                        !Helpers.isEmpty(control.config[subfield]) &&
                        control.config[subfield].required &&
                        (Helpers.isBlank(control.value[subfield]) || Helpers.isEmpty(control.value[subfield]))) ||
                        (subfield === 'countryID' &&
                            !Helpers.isEmpty(control.config.countryID) &&
                            control.config.countryID.required &&
                            Helpers.isEmpty(control.value.countryName))) &&
                        !(subfield === 'state' &&
                            !Helpers.isBlank(control.value.countryName) &&
                            control.config.state.pickerConfig &&
                            control.config.state.pickerConfig.defaultOptions &&
                            control.config.state.pickerConfig.defaultOptions.length === 0)) {
                        valid = false;
                    }
                });
            }
            return valid;
        };
        FormUtils.prototype.getStartDateFromRange = function (dateRange) {
            if (dateRange.minDate) {
                return dateFns.parse(dateRange.minDate);
            }
            else if (dateRange.minOffset) {
                return dateFns.addDays(dateFns.startOfToday(), dateRange.minOffset);
            }
        };
        FormUtils.prototype.getEndDateFromRange = function (dateRange) {
            if (dateRange.maxDate) {
                return dateFns.parse(dateRange.maxDate);
            }
            else if (dateRange.minOffset) {
                return dateFns.addDays(dateFns.startOfToday(), dateRange.minOffset);
            }
        };
        /**
         * Get the min start date and max end date of a Date base on field data.
         */
        FormUtils.prototype.inferDateRange = function (controlConfig, field) {
            var _a;
            if (field.dataType === 'Date' && field.allowedDateRange) {
                controlConfig.startDate = this.getStartDateFromRange(field.allowedDateRange);
                controlConfig.endDate = this.getEndDateFromRange(field.allowedDateRange);
                controlConfig.disabledDateMessage = (_a = field.allowedDateRange) === null || _a === void 0 ? void 0 : _a.disabledDateMessage;
            }
        };
        FormUtils.prototype.inflateEmbeddedProperties = function (data) {
            if (data) {
                Object.keys(data)
                    .filter(function (fieldName) { return fieldName.includes('.'); })
                    .forEach(function (field) {
                    var _b = __read(field.split('.'), 2), parentFieldName = _b[0], fieldName = _b[1];
                    if (!data[parentFieldName]) {
                        data[parentFieldName] = {};
                    }
                    data[parentFieldName][fieldName] = data[field];
                    delete data[field];
                });
            }
            return data;
        };
        return FormUtils;
    }());
    FormUtils.decorators = [
        { type: i0.Injectable }
    ];
    FormUtils.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: OptionsService }
    ]; };

    var isAlphaNumeric = function (letter) {
        return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'.includes(letter.toUpperCase());
    };

    // Helper to keep track of key codes
    var KeyCodes = {
        BACKSPACE: 8,
        TAB: 9,
        NUM_CENTER: 12,
        ENTER: 13,
        RETURN: 13,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PAUSE: 19,
        CAPS_LOCK: 20,
        ESC: 27,
        SPACE: 32,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        HASH_SYMBOL: 35,
        HOME: 36,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        PRINT_SCREEN: 44,
        INSERT: 45,
        DELETE: 46,
        ZERO: 48,
        ONE: 49,
        TWO: 50,
        THREE: 51,
        FOUR: 52,
        FIVE: 53,
        SIX: 54,
        SEVEN: 55,
        EIGHT: 56,
        NINE: 57,
        AT_SYMBOL: 64,
        A: 65,
        B: 66,
        C: 67,
        D: 68,
        E: 69,
        F: 70,
        G: 71,
        H: 72,
        I: 73,
        J: 74,
        K: 75,
        L: 76,
        M: 77,
        N: 78,
        O: 79,
        P: 80,
        Q: 81,
        R: 82,
        S: 83,
        T: 84,
        U: 85,
        V: 86,
        W: 87,
        X: 88,
        Y: 89,
        Z: 90,
        CONTEXT_MENU: 93,
        NUM_ZERO: 96,
        NUM_ONE: 97,
        NUM_TWO: 98,
        NUM_THREE: 99,
        NUM_FOUR: 100,
        NUM_FIVE: 101,
        NUM_SIX: 102,
        NUM_SEVEN: 103,
        NUM_EIGHT: 104,
        NUM_NINE: 105,
        NUM_MULTIPLY: 106,
        NUM_PLUS: 107,
        NUM_MINUS: 109,
        NUM_PERIOD: 110,
        NUM_DIVISION: 111,
        F1: 112,
        F2: 113,
        F3: 114,
        F4: 115,
        F5: 116,
        F6: 117,
        F7: 118,
        F8: 119,
        F9: 120,
        F10: 121,
        F11: 122,
        F12: 123,
        DASH: 189,
        PERIOD: 190,
        FORWARD_SLASH: 191,
    };

    // NG2
    /**
     * Outside click helper, makes to set the element as inactive when clicking outside of it
     */
    var OutsideClick = /** @class */ (function () {
        function OutsideClick(element) {
            this.active = false;
            this.onActiveChange = new i0.EventEmitter();
            // Component element
            this.element = element;
            // Outside click handler
            // Property because `this.func.bind(this)` returns a new function each time
            this.onOutsideClick = this.handleOutsideClick.bind(this);
        }
        /**
         * When the element is destroyed, make sure to remove the handler
         */
        OutsideClick.prototype.ngOnDestroy = function () {
            window.removeEventListener('click', this.onOutsideClick);
        };
        /**
         * Toggles the element as active and adds/removes the outside click handler
         */
        OutsideClick.prototype.toggleActive = function (event, forceValue) {
            // Reverse the active property (if forceValue, use that)
            this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
            // Bind window click events to hide on outside click
            if (this.active) {
                window.addEventListener('click', this.onOutsideClick);
            }
            else {
                window.removeEventListener('click', this.onOutsideClick);
            }
            // Fire the active change event
            this.onActiveChange.emit(this.active);
        };
        /**
         * When clicking outside, checks the element and closes if outside
         */
        OutsideClick.prototype.handleOutsideClick = function (event) {
            // If the elements doesn't contain the target element, it is an outside click
            var outsideClick = !this.element.nativeElement.contains(event.target);
            if (this.otherElement && outsideClick) {
                outsideClick = !this.otherElement.nativeElement.contains(event.target);
            }
            if (outsideClick) {
                this.toggleActive(event, false);
            }
        };
        return OutsideClick;
    }());
    OutsideClick.decorators = [
        { type: i0.Injectable }
    ];
    OutsideClick.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };

    var NovoButtonElement = /** @class */ (function () {
        function NovoButtonElement(element) {
            this.element = element;
            /**
             * The side of the button to display the icon.
             * @deprecated
             */
            this.side = 'right';
            /**
             * The base styling to apply to the button.
             */
            this.theme = 'dialogue';
            /**
             * Make the button non-interactive.
             */
            this.disabled = false;
        }
        Object.defineProperty(NovoButtonElement.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            /**
             * Optionally display `bullhorn-icon` with the button along with the text.
             * @deprecated
             */
            set: function (icon) {
                if (icon) {
                    this._icon = "bhi-" + icon;
                }
            },
            enumerable: false,
            configurable: true
        });
        /** Focuses the input. */
        NovoButtonElement.prototype.focus = function (options) {
            this.element.nativeElement.focus(options);
        };
        return NovoButtonElement;
    }());
    NovoButtonElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-button,button[theme]',
                    host: {
                        class: 'novo-button',
                        '[attr.theme]': 'theme',
                        '[attr.color]': 'color',
                        '[attr.icon]': 'icon',
                        '[attr.loading]': 'loading',
                        '[attr.side]': 'side',
                        '[attr.size]': 'size',
                        '[attr.role]': "'button'",
                    },
                    template: "\n    <!--Left Icon-->\n    <i *ngIf=\"icon && side === 'left' && !loading\" [ngClass]=\"icon\" class=\"novo-button-icon novo-button-icon-left\"></i>\n    <!--Transcluded Content-->\n    <span #textContent class=\"button-contents\"><ng-content></ng-content></span>\n    <!--Right Icon-->\n    <i *ngIf=\"icon && side === 'right' && !loading\" [ngClass]=\"icon\" class=\"novo-button-icon novo-button-icon-right\"></i>\n    <!--Loading-->\n    <i *ngIf=\"loading\" class=\"loading novo-button-loading\">\n      <svg\n        version=\"1.1\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n        x=\"0px\"\n        y=\"0px\"\n        width=\"18.2px\"\n        height=\"18.5px\"\n        viewBox=\"0 0 18.2 18.5\"\n        style=\"enable-background:new 0 0 18.2 18.5;\"\n        xml:space=\"preserve\"\n      >\n        <style type=\"text/css\">\n          .spinner {\n            fill: #ffffff;\n          }\n        </style>\n        <path\n          class=\"spinner\"\n          d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"\n        />\n      </svg>\n    </i>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [":host{-moz-user-select:none;-webkit-user-select:none;background:transparent;border:none;border-radius:3px;color:var(--text-main,#3d464d);cursor:pointer;flex:0 0 auto;flex-direction:row;font-size:var(--font-size-button);gap:1rem;height:3rem;justify-content:center;overflow:hidden;padding:0 1rem;text-overflow:clip;transition:all .2s ease-in-out;user-select:none;white-space:nowrap}:host,:host .button-contents{align-items:center;display:inline-flex;text-transform:uppercase}:host .button-contents{color:inherit}:host .button-contents,:host i{font-size:inherit;height:var(--font-size-button);line-height:1}:host[size=small]{font-size:1rem;gap:.5rem;height:2.4rem;padding:0 1rem}:host[size=small] .button-contents,:host[size=small] i{height:1rem}:host[size=large]{font-size:1.6rem;gap:1.25rem;height:3.6rem;padding:0 1.25rem}:host[size=large] .button-contents,:host[size=large] i{height:1.6rem}:host:focus{outline:none}:host.novo-button-disabled,:host[disabled]{cursor:not-allowed;opacity:.5;pointer-events:none}:host[disabled=false]{cursor:pointer;opacity:1;pointer-events:auto}:host[loading=true]{cursor:not-allowed;opacity:.5;pointer-events:none}:host[loading=true] i.loading{-webkit-animation:rotate 1.2s linear infinite;align-items:center;animation:rotate 1.2s linear infinite;display:flex;justify-content:center}:host[loading=true] i.loading svg{height:100%;max-height:15px;max-width:15px;width:100%}:host[loading=true] i.loading svg .spinner{fill:currentColor}@-webkit-keyframes rotate{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}@keyframes rotate{0%{transform:rotate(0deg)}to{transform:rotate(1turn)}}", ":host[theme=standard]{background:var(--button-background);color:var(--button-text)}:host[theme=standard][color=black]{background:#000;color:#fff}:host[theme=standard][color=white]{background:#fff;color:#3d464d}:host[theme=standard][color=gray],:host[theme=standard][color=grey]{background:#9e9e9e;color:#3d464d}:host[theme=standard][color=bright],:host[theme=standard][color=offWhite]{background:#f7f7f7;color:#3d464d}:host[theme=standard][color=light]{background:#dbdbdb;color:#3d464d}:host[theme=standard][color=neutral]{background:#4f5361;color:#fff}:host[theme=standard][color=dark]{background:#3d464d;color:#fff}:host[theme=standard][color=orange]{background:#ff6900;color:#3d464d}:host[theme=standard][color=navigation]{background:#202945;color:#fff}:host[theme=standard][color=skyBlue]{background:#009bdf;color:#fff}:host[theme=standard][color=steel]{background:#5b6770;color:#fff}:host[theme=standard][color=metal]{background:#637893;color:#fff}:host[theme=standard][color=sand]{background:#f4f4f4;color:#3d464d}:host[theme=standard][color=silver]{background:#e2e2e2;color:#3d464d}:host[theme=standard][color=stone]{background:#bebebe;color:#3d464d}:host[theme=standard][color=ash]{background:#a0a0a0;color:#3d464d}:host[theme=standard][color=slate]{background:#707070;color:#fff}:host[theme=standard][color=onyx]{background:#526980;color:#fff}:host[theme=standard][color=charcoal]{background:#282828;color:#fff}:host[theme=standard][color=moonlight]{background:#1a242f;color:#fff}:host[theme=standard][color=midnight]{background:#202945;color:#fff}:host[theme=standard][color=darkness]{background:#161f27;color:#fff}:host[theme=standard][color=navy]{background:#0d2d42;color:#fff}:host[theme=standard][color=aqua]{background:#3bafda;color:#3d464d}:host[theme=standard][color=ocean]{background:#4a89dc;color:#fff}:host[theme=standard][color=mint]{background:#37bc9b;color:#3d464d}:host[theme=standard][color=grass]{background:#8cc152;color:#fff}:host[theme=standard][color=sunflower]{background:#f6b042;color:#fff}:host[theme=standard][color=bittersweet]{background:#eb6845;color:#fff}:host[theme=standard][color=grapefruit]{background:#da4453;color:#fff}:host[theme=standard][color=carnation]{background:#d770ad;color:#fff}:host[theme=standard][color=lavender]{background:#967adc;color:#fff}:host[theme=standard][color=mountain]{background:#9678b6;color:#fff}:host[theme=standard][color=info],:host[theme=standard][color=positive]{background:#4a89dc;color:#fff}:host[theme=standard][color=success]{background:#8cc152;color:#fff}:host[theme=standard][color=danger],:host[theme=standard][color=error],:host[theme=standard][color=negative]{background:#da4453;color:#fff}:host[theme=standard][color=warning]{background:#f6b042;color:#fff}:host[theme=standard][color=empty]{background:#cccdcc;color:#3d464d}:host[theme=standard][color=disabled]{background:#bebebe;color:#3d464d}:host[theme=standard][color=background]{background:#f7f7f7;color:#3d464d}:host[theme=standard][color=backgroundDark]{background:#e2e2e2;color:#3d464d}:host[theme=standard][color=presentation]{background:#5b6770;color:#fff}:host[theme=standard][color=bullhorn]{background:#ff6900;color:#3d464d}:host[theme=standard][color=pulse]{background:#3bafda;color:#3d464d}:host[theme=standard][color=company]{background:#39d;color:#fff}:host[theme=standard][color=candidate]{background:#4b7;color:#fff}:host[theme=standard][color=lead]{background:#a69;color:#fff}:host[theme=standard][color=clientcontact],:host[theme=standard][color=contact]{background:#fa4;color:#fff}:host[theme=standard][color=opportunity]{background:#625;color:#fff}:host[theme=standard][color=job],:host[theme=standard][color=joborder]{background:#b56;color:#fff}:host[theme=standard][color=submission]{background:#a9adbb;color:#3d464d}:host[theme=standard][color=sendout]{background:#747884;color:#fff}:host[theme=standard][color=placement]{background:#0b344f;color:#fff}:host[theme=standard][color=note]{background:#747884;color:#fff}:host[theme=standard][color=contract]{background:#454ea0;color:#fff}:host[theme=standard][color=billableCharge],:host[theme=standard][color=corporateUser],:host[theme=standard][color=credential],:host[theme=standard][color=distributionList],:host[theme=standard][color=earnCode],:host[theme=standard][color=invoiceStatement],:host[theme=standard][color=jobCode],:host[theme=standard][color=payableCharge],:host[theme=standard][color=person],:host[theme=standard][color=user]{background:#696d79;color:#fff}:host[theme=standard]:focus,:host[theme=standard]:hover{box-shadow:0 3px 7px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.15)}:host[theme=standard]:active{box-shadow:0 1px 2px rgba(0,0,0,.15)}", ":host[theme=primary]{background:#4a89dc;color:#fff;text-align:left}:host[theme=primary][color=black]{background:#000;color:#fff}:host[theme=primary][color=white]{color:#3d464d}:host[theme=primary][color=gray],:host[theme=primary][color=grey]{background:#9e9e9e;color:#3d464d}:host[theme=primary][color=bright],:host[theme=primary][color=offWhite]{background:#f7f7f7;color:#3d464d}:host[theme=primary][color=light]{background:#dbdbdb;color:#3d464d}:host[theme=primary][color=neutral]{background:#4f5361;color:#fff}:host[theme=primary][color=dark]{background:#3d464d;color:#fff}:host[theme=primary][color=orange]{background:#ff6900;color:#3d464d}:host[theme=primary][color=navigation]{background:#202945;color:#fff}:host[theme=primary][color=skyBlue]{background:#009bdf;color:#fff}:host[theme=primary][color=steel]{background:#5b6770;color:#fff}:host[theme=primary][color=metal]{background:#637893;color:#fff}:host[theme=primary][color=sand]{background:#f4f4f4;color:#3d464d}:host[theme=primary][color=silver]{background:#e2e2e2;color:#3d464d}:host[theme=primary][color=stone]{background:#bebebe;color:#3d464d}:host[theme=primary][color=ash]{background:#a0a0a0;color:#3d464d}:host[theme=primary][color=slate]{background:#707070;color:#fff}:host[theme=primary][color=onyx]{background:#526980;color:#fff}:host[theme=primary][color=charcoal]{background:#282828;color:#fff}:host[theme=primary][color=moonlight]{background:#1a242f;color:#fff}:host[theme=primary][color=midnight]{background:#202945;color:#fff}:host[theme=primary][color=darkness]{background:#161f27;color:#fff}:host[theme=primary][color=navy]{background:#0d2d42;color:#fff}:host[theme=primary][color=aqua]{background:#3bafda;color:#3d464d}:host[theme=primary][color=ocean]{background:#4a89dc;color:#fff}:host[theme=primary][color=mint]{background:#37bc9b;color:#3d464d}:host[theme=primary][color=grass]{background:#8cc152;color:#fff}:host[theme=primary][color=sunflower]{background:#f6b042;color:#fff}:host[theme=primary][color=bittersweet]{background:#eb6845;color:#fff}:host[theme=primary][color=grapefruit]{background:#da4453;color:#fff}:host[theme=primary][color=carnation]{background:#d770ad;color:#fff}:host[theme=primary][color=lavender]{background:#967adc;color:#fff}:host[theme=primary][color=mountain]{background:#9678b6;color:#fff}:host[theme=primary][color=info],:host[theme=primary][color=positive]{background:#4a89dc;color:#fff}:host[theme=primary][color=success]{background:#8cc152;color:#fff}:host[theme=primary][color=danger],:host[theme=primary][color=error],:host[theme=primary][color=negative]{background:#da4453;color:#fff}:host[theme=primary][color=warning]{background:#f6b042;color:#fff}:host[theme=primary][color=empty]{background:#cccdcc;color:#3d464d}:host[theme=primary][color=disabled]{background:#bebebe;color:#3d464d}:host[theme=primary][color=background]{background:#f7f7f7;color:#3d464d}:host[theme=primary][color=backgroundDark]{background:#e2e2e2;color:#3d464d}:host[theme=primary][color=presentation]{background:#5b6770;color:#fff}:host[theme=primary][color=bullhorn]{background:#ff6900;color:#3d464d}:host[theme=primary][color=pulse]{background:#3bafda;color:#3d464d}:host[theme=primary][color=company]{background:#39d;color:#fff}:host[theme=primary][color=candidate]{background:#4b7;color:#fff}:host[theme=primary][color=lead]{background:#a69;color:#fff}:host[theme=primary][color=clientcontact],:host[theme=primary][color=contact]{background:#fa4;color:#fff}:host[theme=primary][color=opportunity]{background:#625;color:#fff}:host[theme=primary][color=job],:host[theme=primary][color=joborder]{background:#b56;color:#fff}:host[theme=primary][color=submission]{background:#a9adbb;color:#3d464d}:host[theme=primary][color=sendout]{background:#747884;color:#fff}:host[theme=primary][color=placement]{background:#0b344f;color:#fff}:host[theme=primary][color=note]{background:#747884;color:#fff}:host[theme=primary][color=contract]{background:#454ea0;color:#fff}:host[theme=primary][color=billableCharge],:host[theme=primary][color=corporateUser],:host[theme=primary][color=credential],:host[theme=primary][color=distributionList],:host[theme=primary][color=earnCode],:host[theme=primary][color=invoiceStatement],:host[theme=primary][color=jobCode],:host[theme=primary][color=payableCharge],:host[theme=primary][color=person],:host[theme=primary][color=user]{background:#696d79;color:#fff}:host[theme=primary]:focus,:host[theme=primary]:hover{box-shadow:0 3px 7px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.15);filter:brightness(1.15)}:host[theme=primary]:active{box-shadow:0 1px 2px rgba(0,0,0,.15);filter:brightness(.85)}:host[theme=primary][color=white]{background:#fff;color:#4a89dc}:host[theme=primary][color=white]:focus,:host[theme=primary][color=white]:hover{background:#f7f7f7}:host[theme=primary][color=white]:active{background:#eaeaea}:host[theme=primary][color=white] i{background:rgba(0,0,0,.05)}:host[theme=primary][size=large] i{margin-left:3px}", ":host[theme=secondary]{align-items:center;background:#fff;border:1px solid #4a89dc;color:#4a89dc;padding:0 calc(1rem - 1px);text-align:left}:host[theme=secondary][color=black],:host[theme=secondary][color=black] i{color:#000}:host[theme=secondary][color=white],:host[theme=secondary][color=white] i{color:#fff}:host[theme=secondary][color=gray],:host[theme=secondary][color=gray] i,:host[theme=secondary][color=grey],:host[theme=secondary][color=grey] i{color:#9e9e9e}:host[theme=secondary][color=bright],:host[theme=secondary][color=bright] i,:host[theme=secondary][color=offWhite],:host[theme=secondary][color=offWhite] i{color:#f7f7f7}:host[theme=secondary][color=light],:host[theme=secondary][color=light] i{color:#dbdbdb}:host[theme=secondary][color=neutral],:host[theme=secondary][color=neutral] i{color:#4f5361}:host[theme=secondary][color=dark],:host[theme=secondary][color=dark] i{color:#3d464d}:host[theme=secondary][color=orange],:host[theme=secondary][color=orange] i{color:#ff6900}:host[theme=secondary][color=navigation],:host[theme=secondary][color=navigation] i{color:#202945}:host[theme=secondary][color=skyBlue],:host[theme=secondary][color=skyBlue] i{color:#009bdf}:host[theme=secondary][color=steel],:host[theme=secondary][color=steel] i{color:#5b6770}:host[theme=secondary][color=metal],:host[theme=secondary][color=metal] i{color:#637893}:host[theme=secondary][color=sand],:host[theme=secondary][color=sand] i{color:#f4f4f4}:host[theme=secondary][color=silver],:host[theme=secondary][color=silver] i{color:#e2e2e2}:host[theme=secondary][color=stone],:host[theme=secondary][color=stone] i{color:#bebebe}:host[theme=secondary][color=ash],:host[theme=secondary][color=ash] i{color:#a0a0a0}:host[theme=secondary][color=slate],:host[theme=secondary][color=slate] i{color:#707070}:host[theme=secondary][color=onyx],:host[theme=secondary][color=onyx] i{color:#526980}:host[theme=secondary][color=charcoal],:host[theme=secondary][color=charcoal] i{color:#282828}:host[theme=secondary][color=moonlight],:host[theme=secondary][color=moonlight] i{color:#1a242f}:host[theme=secondary][color=midnight],:host[theme=secondary][color=midnight] i{color:#202945}:host[theme=secondary][color=darkness],:host[theme=secondary][color=darkness] i{color:#161f27}:host[theme=secondary][color=navy],:host[theme=secondary][color=navy] i{color:#0d2d42}:host[theme=secondary][color=aqua],:host[theme=secondary][color=aqua] i{color:#3bafda}:host[theme=secondary][color=ocean],:host[theme=secondary][color=ocean] i{color:#4a89dc}:host[theme=secondary][color=mint],:host[theme=secondary][color=mint] i{color:#37bc9b}:host[theme=secondary][color=grass],:host[theme=secondary][color=grass] i{color:#8cc152}:host[theme=secondary][color=sunflower],:host[theme=secondary][color=sunflower] i{color:#f6b042}:host[theme=secondary][color=bittersweet],:host[theme=secondary][color=bittersweet] i{color:#eb6845}:host[theme=secondary][color=grapefruit],:host[theme=secondary][color=grapefruit] i{color:#da4453}:host[theme=secondary][color=carnation],:host[theme=secondary][color=carnation] i{color:#d770ad}:host[theme=secondary][color=lavender],:host[theme=secondary][color=lavender] i{color:#967adc}:host[theme=secondary][color=mountain],:host[theme=secondary][color=mountain] i{color:#9678b6}:host[theme=secondary][color=info],:host[theme=secondary][color=info] i,:host[theme=secondary][color=positive],:host[theme=secondary][color=positive] i{color:#4a89dc}:host[theme=secondary][color=success],:host[theme=secondary][color=success] i{color:#8cc152}:host[theme=secondary][color=danger],:host[theme=secondary][color=danger] i,:host[theme=secondary][color=error],:host[theme=secondary][color=error] i,:host[theme=secondary][color=negative],:host[theme=secondary][color=negative] i{color:#da4453}:host[theme=secondary][color=warning],:host[theme=secondary][color=warning] i{color:#f6b042}:host[theme=secondary][color=empty],:host[theme=secondary][color=empty] i{color:#cccdcc}:host[theme=secondary][color=disabled],:host[theme=secondary][color=disabled] i{color:#bebebe}:host[theme=secondary][color=background],:host[theme=secondary][color=background] i{color:#f7f7f7}:host[theme=secondary][color=backgroundDark],:host[theme=secondary][color=backgroundDark] i{color:#e2e2e2}:host[theme=secondary][color=presentation],:host[theme=secondary][color=presentation] i{color:#5b6770}:host[theme=secondary][color=bullhorn],:host[theme=secondary][color=bullhorn] i{color:#ff6900}:host[theme=secondary][color=pulse],:host[theme=secondary][color=pulse] i{color:#3bafda}:host[theme=secondary][color=company],:host[theme=secondary][color=company] i{color:#39d}:host[theme=secondary][color=candidate],:host[theme=secondary][color=candidate] i{color:#4b7}:host[theme=secondary][color=lead],:host[theme=secondary][color=lead] i{color:#a69}:host[theme=secondary][color=clientcontact],:host[theme=secondary][color=clientcontact] i,:host[theme=secondary][color=contact],:host[theme=secondary][color=contact] i{color:#fa4}:host[theme=secondary][color=opportunity],:host[theme=secondary][color=opportunity] i{color:#625}:host[theme=secondary][color=job],:host[theme=secondary][color=job] i,:host[theme=secondary][color=joborder],:host[theme=secondary][color=joborder] i{color:#b56}:host[theme=secondary][color=submission],:host[theme=secondary][color=submission] i{color:#a9adbb}:host[theme=secondary][color=sendout],:host[theme=secondary][color=sendout] i{color:#747884}:host[theme=secondary][color=placement],:host[theme=secondary][color=placement] i{color:#0b344f}:host[theme=secondary][color=note],:host[theme=secondary][color=note] i{color:#747884}:host[theme=secondary][color=contract],:host[theme=secondary][color=contract] i{color:#454ea0}:host[theme=secondary][color=billableCharge],:host[theme=secondary][color=billableCharge] i,:host[theme=secondary][color=corporateUser],:host[theme=secondary][color=corporateUser] i,:host[theme=secondary][color=credential],:host[theme=secondary][color=credential] i,:host[theme=secondary][color=distributionList],:host[theme=secondary][color=distributionList] i,:host[theme=secondary][color=earnCode],:host[theme=secondary][color=earnCode] i,:host[theme=secondary][color=invoiceStatement],:host[theme=secondary][color=invoiceStatement] i,:host[theme=secondary][color=jobCode],:host[theme=secondary][color=jobCode] i,:host[theme=secondary][color=payableCharge],:host[theme=secondary][color=payableCharge] i,:host[theme=secondary][color=person],:host[theme=secondary][color=person] i,:host[theme=secondary][color=user],:host[theme=secondary][color=user] i{color:#696d79}:host[theme=secondary][color=black]{border:1px solid #000}:host[theme=secondary][color=white]{border:1px solid #fff}:host[theme=secondary][color=gray],:host[theme=secondary][color=grey]{border:1px solid #9e9e9e}:host[theme=secondary][color=bright],:host[theme=secondary][color=offWhite]{border:1px solid #f7f7f7}:host[theme=secondary][color=light]{border:1px solid #dbdbdb}:host[theme=secondary][color=neutral]{border:1px solid #4f5361}:host[theme=secondary][color=dark]{border:1px solid #3d464d}:host[theme=secondary][color=orange]{border:1px solid #ff6900}:host[theme=secondary][color=navigation]{border:1px solid #202945}:host[theme=secondary][color=skyBlue]{border:1px solid #009bdf}:host[theme=secondary][color=steel]{border:1px solid #5b6770}:host[theme=secondary][color=metal]{border:1px solid #637893}:host[theme=secondary][color=sand]{border:1px solid #f4f4f4}:host[theme=secondary][color=silver]{border:1px solid #e2e2e2}:host[theme=secondary][color=stone]{border:1px solid #bebebe}:host[theme=secondary][color=ash]{border:1px solid #a0a0a0}:host[theme=secondary][color=slate]{border:1px solid #707070}:host[theme=secondary][color=onyx]{border:1px solid #526980}:host[theme=secondary][color=charcoal]{border:1px solid #282828}:host[theme=secondary][color=moonlight]{border:1px solid #1a242f}:host[theme=secondary][color=midnight]{border:1px solid #202945}:host[theme=secondary][color=darkness]{border:1px solid #161f27}:host[theme=secondary][color=navy]{border:1px solid #0d2d42}:host[theme=secondary][color=aqua]{border:1px solid #3bafda}:host[theme=secondary][color=ocean]{border:1px solid #4a89dc}:host[theme=secondary][color=mint]{border:1px solid #37bc9b}:host[theme=secondary][color=grass]{border:1px solid #8cc152}:host[theme=secondary][color=sunflower]{border:1px solid #f6b042}:host[theme=secondary][color=bittersweet]{border:1px solid #eb6845}:host[theme=secondary][color=grapefruit]{border:1px solid #da4453}:host[theme=secondary][color=carnation]{border:1px solid #d770ad}:host[theme=secondary][color=lavender]{border:1px solid #967adc}:host[theme=secondary][color=mountain]{border:1px solid #9678b6}:host[theme=secondary][color=info],:host[theme=secondary][color=positive]{border:1px solid #4a89dc}:host[theme=secondary][color=success]{border:1px solid #8cc152}:host[theme=secondary][color=danger],:host[theme=secondary][color=error],:host[theme=secondary][color=negative]{border:1px solid #da4453}:host[theme=secondary][color=warning]{border:1px solid #f6b042}:host[theme=secondary][color=empty]{border:1px solid #cccdcc}:host[theme=secondary][color=disabled]{border:1px solid #bebebe}:host[theme=secondary][color=background]{border:1px solid #f7f7f7}:host[theme=secondary][color=backgroundDark]{border:1px solid #e2e2e2}:host[theme=secondary][color=presentation]{border:1px solid #5b6770}:host[theme=secondary][color=bullhorn]{border:1px solid #ff6900}:host[theme=secondary][color=pulse]{border:1px solid #3bafda}:host[theme=secondary][color=company]{border:1px solid #39d}:host[theme=secondary][color=candidate]{border:1px solid #4b7}:host[theme=secondary][color=lead]{border:1px solid #a69}:host[theme=secondary][color=clientcontact],:host[theme=secondary][color=contact]{border:1px solid #fa4}:host[theme=secondary][color=opportunity]{border:1px solid #625}:host[theme=secondary][color=job],:host[theme=secondary][color=joborder]{border:1px solid #b56}:host[theme=secondary][color=submission]{border:1px solid #a9adbb}:host[theme=secondary][color=sendout]{border:1px solid #747884}:host[theme=secondary][color=placement]{border:1px solid #0b344f}:host[theme=secondary][color=note]{border:1px solid #747884}:host[theme=secondary][color=contract]{border:1px solid #454ea0}:host[theme=secondary][color=billableCharge],:host[theme=secondary][color=corporateUser],:host[theme=secondary][color=credential],:host[theme=secondary][color=distributionList],:host[theme=secondary][color=earnCode],:host[theme=secondary][color=invoiceStatement],:host[theme=secondary][color=jobCode],:host[theme=secondary][color=payableCharge],:host[theme=secondary][color=person],:host[theme=secondary][color=user]{border:1px solid #696d79}:host[theme=secondary] i.loading{margin-left:.8rem}:host[theme=secondary] i.loading svg .spinner{fill:#4a89dc}:host[theme=secondary]:focus,:host[theme=secondary]:hover{background:#fff;box-shadow:0 3px 7px rgba(0,0,0,.15),0 1px 2px rgba(0,0,0,.15)}:host[theme=secondary]:active{box-shadow:0 1px 2px rgba(0,0,0,.15)}:host[theme=secondary][inverse]{background:rgba(0,0,0,.25);border:1px solid #fff;color:#fff}:host[theme=secondary][inverse]:focus,:host[theme=secondary][inverse]:hover{background:rgba(0,0,0,.35)}:host[theme=secondary][inverse]:active{background:rgba(0,0,0,.45)}:host[theme=secondary][inverse] i.loading svg .spinner{fill:#fff}", ":host[theme=fab]{align-items:center;border-radius:50%!important;display:inline-flex;font-size:1.2rem;height:3.2rem;justify-content:center;padding:0;width:3.2rem}:host[theme=fab][color=black]{background:#000;color:#fff}:host[theme=fab][color=white]{background:#fff;color:#3d464d}:host[theme=fab][color=gray],:host[theme=fab][color=grey]{background:#9e9e9e;color:#3d464d}:host[theme=fab][color=bright],:host[theme=fab][color=offWhite]{background:#f7f7f7;color:#3d464d}:host[theme=fab][color=light]{background:#dbdbdb;color:#3d464d}:host[theme=fab][color=neutral]{background:#4f5361;color:#fff}:host[theme=fab][color=dark]{background:#3d464d;color:#fff}:host[theme=fab][color=orange]{background:#ff6900;color:#3d464d}:host[theme=fab][color=navigation]{background:#202945;color:#fff}:host[theme=fab][color=skyBlue]{background:#009bdf;color:#fff}:host[theme=fab][color=steel]{background:#5b6770;color:#fff}:host[theme=fab][color=metal]{background:#637893;color:#fff}:host[theme=fab][color=sand]{background:#f4f4f4;color:#3d464d}:host[theme=fab][color=silver]{background:#e2e2e2;color:#3d464d}:host[theme=fab][color=stone]{background:#bebebe;color:#3d464d}:host[theme=fab][color=ash]{background:#a0a0a0;color:#3d464d}:host[theme=fab][color=slate]{background:#707070;color:#fff}:host[theme=fab][color=onyx]{background:#526980;color:#fff}:host[theme=fab][color=charcoal]{background:#282828;color:#fff}:host[theme=fab][color=moonlight]{background:#1a242f;color:#fff}:host[theme=fab][color=midnight]{background:#202945;color:#fff}:host[theme=fab][color=darkness]{background:#161f27;color:#fff}:host[theme=fab][color=navy]{background:#0d2d42;color:#fff}:host[theme=fab][color=aqua]{background:#3bafda;color:#3d464d}:host[theme=fab][color=ocean]{background:#4a89dc;color:#fff}:host[theme=fab][color=mint]{background:#37bc9b;color:#3d464d}:host[theme=fab][color=grass]{background:#8cc152;color:#fff}:host[theme=fab][color=sunflower]{background:#f6b042;color:#fff}:host[theme=fab][color=bittersweet]{background:#eb6845;color:#fff}:host[theme=fab][color=grapefruit]{background:#da4453;color:#fff}:host[theme=fab][color=carnation]{background:#d770ad;color:#fff}:host[theme=fab][color=lavender]{background:#967adc;color:#fff}:host[theme=fab][color=mountain]{background:#9678b6;color:#fff}:host[theme=fab][color=info],:host[theme=fab][color=positive]{background:#4a89dc;color:#fff}:host[theme=fab][color=success]{background:#8cc152;color:#fff}:host[theme=fab][color=danger],:host[theme=fab][color=error],:host[theme=fab][color=negative]{background:#da4453;color:#fff}:host[theme=fab][color=warning]{background:#f6b042;color:#fff}:host[theme=fab][color=empty]{background:#cccdcc;color:#3d464d}:host[theme=fab][color=disabled]{background:#bebebe;color:#3d464d}:host[theme=fab][color=background]{background:#f7f7f7;color:#3d464d}:host[theme=fab][color=backgroundDark]{background:#e2e2e2;color:#3d464d}:host[theme=fab][color=presentation]{background:#5b6770;color:#fff}:host[theme=fab][color=bullhorn]{background:#ff6900;color:#3d464d}:host[theme=fab][color=pulse]{background:#3bafda;color:#3d464d}:host[theme=fab][color=company]{background:#39d;color:#fff}:host[theme=fab][color=candidate]{background:#4b7;color:#fff}:host[theme=fab][color=lead]{background:#a69;color:#fff}:host[theme=fab][color=clientcontact],:host[theme=fab][color=contact]{background:#fa4;color:#fff}:host[theme=fab][color=opportunity]{background:#625;color:#fff}:host[theme=fab][color=job],:host[theme=fab][color=joborder]{background:#b56;color:#fff}:host[theme=fab][color=submission]{background:#a9adbb;color:#3d464d}:host[theme=fab][color=sendout]{background:#747884;color:#fff}:host[theme=fab][color=placement]{background:#0b344f;color:#fff}:host[theme=fab][color=note]{background:#747884;color:#fff}:host[theme=fab][color=contract]{background:#454ea0;color:#fff}:host[theme=fab][color=billableCharge],:host[theme=fab][color=corporateUser],:host[theme=fab][color=credential],:host[theme=fab][color=distributionList],:host[theme=fab][color=earnCode],:host[theme=fab][color=invoiceStatement],:host[theme=fab][color=jobCode],:host[theme=fab][color=payableCharge],:host[theme=fab][color=person],:host[theme=fab][color=user]{background:#696d79;color:#fff}:host[theme=fab][inverse]{color:#fff}:host[theme=fab]:active,:host[theme=fab]:focus,:host[theme=fab]:hover{box-shadow:0 1px 2px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}:host[theme=fab] .button-contents{display:contents}:host[theme=fab] i{margin:0;padding:0}:host[theme=fab] i:before{display:block}", ":host[theme=icon]{font-size:1.4rem;height:2.4rem;padding:.5rem}:host[theme=icon][color=black],:host[theme=icon][color=black] i{color:#000}:host[theme=icon][color=white],:host[theme=icon][color=white] i{color:#fff}:host[theme=icon][color=gray],:host[theme=icon][color=gray] i,:host[theme=icon][color=grey],:host[theme=icon][color=grey] i{color:#9e9e9e}:host[theme=icon][color=bright],:host[theme=icon][color=bright] i,:host[theme=icon][color=offWhite],:host[theme=icon][color=offWhite] i{color:#f7f7f7}:host[theme=icon][color=light],:host[theme=icon][color=light] i{color:#dbdbdb}:host[theme=icon][color=neutral],:host[theme=icon][color=neutral] i{color:#4f5361}:host[theme=icon][color=dark],:host[theme=icon][color=dark] i{color:#3d464d}:host[theme=icon][color=orange],:host[theme=icon][color=orange] i{color:#ff6900}:host[theme=icon][color=navigation],:host[theme=icon][color=navigation] i{color:#202945}:host[theme=icon][color=skyBlue],:host[theme=icon][color=skyBlue] i{color:#009bdf}:host[theme=icon][color=steel],:host[theme=icon][color=steel] i{color:#5b6770}:host[theme=icon][color=metal],:host[theme=icon][color=metal] i{color:#637893}:host[theme=icon][color=sand],:host[theme=icon][color=sand] i{color:#f4f4f4}:host[theme=icon][color=silver],:host[theme=icon][color=silver] i{color:#e2e2e2}:host[theme=icon][color=stone],:host[theme=icon][color=stone] i{color:#bebebe}:host[theme=icon][color=ash],:host[theme=icon][color=ash] i{color:#a0a0a0}:host[theme=icon][color=slate],:host[theme=icon][color=slate] i{color:#707070}:host[theme=icon][color=onyx],:host[theme=icon][color=onyx] i{color:#526980}:host[theme=icon][color=charcoal],:host[theme=icon][color=charcoal] i{color:#282828}:host[theme=icon][color=moonlight],:host[theme=icon][color=moonlight] i{color:#1a242f}:host[theme=icon][color=midnight],:host[theme=icon][color=midnight] i{color:#202945}:host[theme=icon][color=darkness],:host[theme=icon][color=darkness] i{color:#161f27}:host[theme=icon][color=navy],:host[theme=icon][color=navy] i{color:#0d2d42}:host[theme=icon][color=aqua],:host[theme=icon][color=aqua] i{color:#3bafda}:host[theme=icon][color=ocean],:host[theme=icon][color=ocean] i{color:#4a89dc}:host[theme=icon][color=mint],:host[theme=icon][color=mint] i{color:#37bc9b}:host[theme=icon][color=grass],:host[theme=icon][color=grass] i{color:#8cc152}:host[theme=icon][color=sunflower],:host[theme=icon][color=sunflower] i{color:#f6b042}:host[theme=icon][color=bittersweet],:host[theme=icon][color=bittersweet] i{color:#eb6845}:host[theme=icon][color=grapefruit],:host[theme=icon][color=grapefruit] i{color:#da4453}:host[theme=icon][color=carnation],:host[theme=icon][color=carnation] i{color:#d770ad}:host[theme=icon][color=lavender],:host[theme=icon][color=lavender] i{color:#967adc}:host[theme=icon][color=mountain],:host[theme=icon][color=mountain] i{color:#9678b6}:host[theme=icon][color=info],:host[theme=icon][color=info] i,:host[theme=icon][color=positive],:host[theme=icon][color=positive] i{color:#4a89dc}:host[theme=icon][color=success],:host[theme=icon][color=success] i{color:#8cc152}:host[theme=icon][color=danger],:host[theme=icon][color=danger] i,:host[theme=icon][color=error],:host[theme=icon][color=error] i,:host[theme=icon][color=negative],:host[theme=icon][color=negative] i{color:#da4453}:host[theme=icon][color=warning],:host[theme=icon][color=warning] i{color:#f6b042}:host[theme=icon][color=empty],:host[theme=icon][color=empty] i{color:#cccdcc}:host[theme=icon][color=disabled],:host[theme=icon][color=disabled] i{color:#bebebe}:host[theme=icon][color=background],:host[theme=icon][color=background] i{color:#f7f7f7}:host[theme=icon][color=backgroundDark],:host[theme=icon][color=backgroundDark] i{color:#e2e2e2}:host[theme=icon][color=presentation],:host[theme=icon][color=presentation] i{color:#5b6770}:host[theme=icon][color=bullhorn],:host[theme=icon][color=bullhorn] i{color:#ff6900}:host[theme=icon][color=pulse],:host[theme=icon][color=pulse] i{color:#3bafda}:host[theme=icon][color=company],:host[theme=icon][color=company] i{color:#39d}:host[theme=icon][color=candidate],:host[theme=icon][color=candidate] i{color:#4b7}:host[theme=icon][color=lead],:host[theme=icon][color=lead] i{color:#a69}:host[theme=icon][color=clientcontact],:host[theme=icon][color=clientcontact] i,:host[theme=icon][color=contact],:host[theme=icon][color=contact] i{color:#fa4}:host[theme=icon][color=opportunity],:host[theme=icon][color=opportunity] i{color:#625}:host[theme=icon][color=job],:host[theme=icon][color=job] i,:host[theme=icon][color=joborder],:host[theme=icon][color=joborder] i{color:#b56}:host[theme=icon][color=submission],:host[theme=icon][color=submission] i{color:#a9adbb}:host[theme=icon][color=sendout],:host[theme=icon][color=sendout] i{color:#747884}:host[theme=icon][color=placement],:host[theme=icon][color=placement] i{color:#0b344f}:host[theme=icon][color=note],:host[theme=icon][color=note] i{color:#747884}:host[theme=icon][color=contract],:host[theme=icon][color=contract] i{color:#454ea0}:host[theme=icon][color=billableCharge],:host[theme=icon][color=billableCharge] i,:host[theme=icon][color=corporateUser],:host[theme=icon][color=corporateUser] i,:host[theme=icon][color=credential],:host[theme=icon][color=credential] i,:host[theme=icon][color=distributionList],:host[theme=icon][color=distributionList] i,:host[theme=icon][color=earnCode],:host[theme=icon][color=earnCode] i,:host[theme=icon][color=invoiceStatement],:host[theme=icon][color=invoiceStatement] i,:host[theme=icon][color=jobCode],:host[theme=icon][color=jobCode] i,:host[theme=icon][color=payableCharge],:host[theme=icon][color=payableCharge] i,:host[theme=icon][color=person],:host[theme=icon][color=person] i,:host[theme=icon][color=user],:host[theme=icon][color=user] i{color:#696d79}:host[theme=icon][inverse]{color:#fff}:host[theme=icon] i{display:contents;margin:0!important}:host[theme=icon]:focus,:host[theme=icon]:hover{background:rgba(0,0,0,.1)}:host[theme=icon]:active{background:rgba(0,0,0,.25)}:host[theme=icon] .button-contents{display:contents}:host[theme=icon][size=small]{font-size:1.2rem;height:2rem;padding:.5rem}:host[theme=icon][size=large]{font-size:2rem;height:2.8rem;padding:1rem}", ":host[theme=dialogue]{background:transparent;color:#4a89dc}:host[theme=dialogue][color=black],:host[theme=dialogue][color=black] i{color:#000}:host[theme=dialogue][color=white],:host[theme=dialogue][color=white] i{color:#fff}:host[theme=dialogue][color=gray],:host[theme=dialogue][color=gray] i,:host[theme=dialogue][color=grey],:host[theme=dialogue][color=grey] i{color:#9e9e9e}:host[theme=dialogue][color=bright],:host[theme=dialogue][color=bright] i,:host[theme=dialogue][color=offWhite],:host[theme=dialogue][color=offWhite] i{color:#f7f7f7}:host[theme=dialogue][color=light],:host[theme=dialogue][color=light] i{color:#dbdbdb}:host[theme=dialogue][color=neutral],:host[theme=dialogue][color=neutral] i{color:#4f5361}:host[theme=dialogue][color=dark],:host[theme=dialogue][color=dark] i{color:#3d464d}:host[theme=dialogue][color=orange],:host[theme=dialogue][color=orange] i{color:#ff6900}:host[theme=dialogue][color=navigation],:host[theme=dialogue][color=navigation] i{color:#202945}:host[theme=dialogue][color=skyBlue],:host[theme=dialogue][color=skyBlue] i{color:#009bdf}:host[theme=dialogue][color=steel],:host[theme=dialogue][color=steel] i{color:#5b6770}:host[theme=dialogue][color=metal],:host[theme=dialogue][color=metal] i{color:#637893}:host[theme=dialogue][color=sand],:host[theme=dialogue][color=sand] i{color:#f4f4f4}:host[theme=dialogue][color=silver],:host[theme=dialogue][color=silver] i{color:#e2e2e2}:host[theme=dialogue][color=stone],:host[theme=dialogue][color=stone] i{color:#bebebe}:host[theme=dialogue][color=ash],:host[theme=dialogue][color=ash] i{color:#a0a0a0}:host[theme=dialogue][color=slate],:host[theme=dialogue][color=slate] i{color:#707070}:host[theme=dialogue][color=onyx],:host[theme=dialogue][color=onyx] i{color:#526980}:host[theme=dialogue][color=charcoal],:host[theme=dialogue][color=charcoal] i{color:#282828}:host[theme=dialogue][color=moonlight],:host[theme=dialogue][color=moonlight] i{color:#1a242f}:host[theme=dialogue][color=midnight],:host[theme=dialogue][color=midnight] i{color:#202945}:host[theme=dialogue][color=darkness],:host[theme=dialogue][color=darkness] i{color:#161f27}:host[theme=dialogue][color=navy],:host[theme=dialogue][color=navy] i{color:#0d2d42}:host[theme=dialogue][color=aqua],:host[theme=dialogue][color=aqua] i{color:#3bafda}:host[theme=dialogue][color=ocean],:host[theme=dialogue][color=ocean] i{color:#4a89dc}:host[theme=dialogue][color=mint],:host[theme=dialogue][color=mint] i{color:#37bc9b}:host[theme=dialogue][color=grass],:host[theme=dialogue][color=grass] i{color:#8cc152}:host[theme=dialogue][color=sunflower],:host[theme=dialogue][color=sunflower] i{color:#f6b042}:host[theme=dialogue][color=bittersweet],:host[theme=dialogue][color=bittersweet] i{color:#eb6845}:host[theme=dialogue][color=grapefruit],:host[theme=dialogue][color=grapefruit] i{color:#da4453}:host[theme=dialogue][color=carnation],:host[theme=dialogue][color=carnation] i{color:#d770ad}:host[theme=dialogue][color=lavender],:host[theme=dialogue][color=lavender] i{color:#967adc}:host[theme=dialogue][color=mountain],:host[theme=dialogue][color=mountain] i{color:#9678b6}:host[theme=dialogue][color=info],:host[theme=dialogue][color=info] i,:host[theme=dialogue][color=positive],:host[theme=dialogue][color=positive] i{color:#4a89dc}:host[theme=dialogue][color=success],:host[theme=dialogue][color=success] i{color:#8cc152}:host[theme=dialogue][color=danger],:host[theme=dialogue][color=danger] i,:host[theme=dialogue][color=error],:host[theme=dialogue][color=error] i,:host[theme=dialogue][color=negative],:host[theme=dialogue][color=negative] i{color:#da4453}:host[theme=dialogue][color=warning],:host[theme=dialogue][color=warning] i{color:#f6b042}:host[theme=dialogue][color=empty],:host[theme=dialogue][color=empty] i{color:#cccdcc}:host[theme=dialogue][color=disabled],:host[theme=dialogue][color=disabled] i{color:#bebebe}:host[theme=dialogue][color=background],:host[theme=dialogue][color=background] i{color:#f7f7f7}:host[theme=dialogue][color=backgroundDark],:host[theme=dialogue][color=backgroundDark] i{color:#e2e2e2}:host[theme=dialogue][color=presentation],:host[theme=dialogue][color=presentation] i{color:#5b6770}:host[theme=dialogue][color=bullhorn],:host[theme=dialogue][color=bullhorn] i{color:#ff6900}:host[theme=dialogue][color=pulse],:host[theme=dialogue][color=pulse] i{color:#3bafda}:host[theme=dialogue][color=company],:host[theme=dialogue][color=company] i{color:#39d}:host[theme=dialogue][color=candidate],:host[theme=dialogue][color=candidate] i{color:#4b7}:host[theme=dialogue][color=lead],:host[theme=dialogue][color=lead] i{color:#a69}:host[theme=dialogue][color=clientcontact],:host[theme=dialogue][color=clientcontact] i,:host[theme=dialogue][color=contact],:host[theme=dialogue][color=contact] i{color:#fa4}:host[theme=dialogue][color=opportunity],:host[theme=dialogue][color=opportunity] i{color:#625}:host[theme=dialogue][color=job],:host[theme=dialogue][color=job] i,:host[theme=dialogue][color=joborder],:host[theme=dialogue][color=joborder] i{color:#b56}:host[theme=dialogue][color=submission],:host[theme=dialogue][color=submission] i{color:#a9adbb}:host[theme=dialogue][color=sendout],:host[theme=dialogue][color=sendout] i{color:#747884}:host[theme=dialogue][color=placement],:host[theme=dialogue][color=placement] i{color:#0b344f}:host[theme=dialogue][color=note],:host[theme=dialogue][color=note] i{color:#747884}:host[theme=dialogue][color=contract],:host[theme=dialogue][color=contract] i{color:#454ea0}:host[theme=dialogue][color=billableCharge],:host[theme=dialogue][color=billableCharge] i,:host[theme=dialogue][color=corporateUser],:host[theme=dialogue][color=corporateUser] i,:host[theme=dialogue][color=credential],:host[theme=dialogue][color=credential] i,:host[theme=dialogue][color=distributionList],:host[theme=dialogue][color=distributionList] i,:host[theme=dialogue][color=earnCode],:host[theme=dialogue][color=earnCode] i,:host[theme=dialogue][color=invoiceStatement],:host[theme=dialogue][color=invoiceStatement] i,:host[theme=dialogue][color=jobCode],:host[theme=dialogue][color=jobCode] i,:host[theme=dialogue][color=payableCharge],:host[theme=dialogue][color=payableCharge] i,:host[theme=dialogue][color=person],:host[theme=dialogue][color=person] i,:host[theme=dialogue][color=user],:host[theme=dialogue][color=user] i{color:#696d79}:host[theme=dialogue]:focus,:host[theme=dialogue]:hover{background:#ededed}:host[theme=dialogue]:active{background:#e0e0e0}:host[theme=dialogue][inverse]:focus,:host[theme=dialogue][inverse]:hover{background:rgba(0,0,0,.2)}:host[theme=dialogue][inverse]:active{background:rgba(0,0,0,.35)}", ":host[theme=field]{background:transparent;border:none;border-bottom:1px solid var(--border);border-radius:0;color:#3d464d;font-size:1.2rem;height:1.8rem;margin-bottom:4px;padding:.25rem .5rem;text-align:left}:host[theme=field]:active,:host[theme=field]:focus,:host[theme=field]:hover{border-bottom:1px solid var(--selection)}:host[theme=select]{align-items:center;background-color:transparent;border:none;border-bottom:1px solid var(--border);border-radius:0;color:var(--text-main);cursor:pointer;display:flex;font-size:1.2rem;height:2rem;height:1.8rem;justify-content:space-between;min-height:2rem;padding:0 2px 0 0;position:relative;text-align:left;text-shadow:none;text-transform:none;width:100%;z-index:1}:host[theme=select].empty{color:var(--text-muted)}:host[theme=select]:focus,:host[theme=select]:hover{outline:none}:host[theme=select]:hover{border-bottom:1px solid #5f6d78}:host[theme=select]:hover i{opacity:.75}:host[theme=select]:focus{border-bottom:1px solid var(--selection)}:host[theme=select]:focus i{color:rgba(0,0,0,.73)}:host[theme=select] i{color:var(--text-main);font-size:.8rem;opacity:.45}"]
                },] }
    ];
    NovoButtonElement.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoButtonElement.propDecorators = {
        color: [{ type: i0.Input }],
        side: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        loading: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.novo-button-disabled',] }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoButtonElement.prototype, "disabled", void 0);

    // NG2
    var NovoButtonModule = /** @class */ (function () {
        function NovoButtonModule() {
        }
        return NovoButtonModule;
    }());
    NovoButtonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoButtonElement],
                    exports: [NovoButtonElement],
                },] }
    ];

    // NG2
    var NovoTooltip = /** @class */ (function () {
        function NovoTooltip() {
        }
        return NovoTooltip;
    }());
    NovoTooltip.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tooltip',
                    template: "<div *ngIf=\"this.isHTML\" [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n     [ngClass]=\"[tooltipType, this.rounded ? 'rounded' : '', size ? size : '', this.preline? 'preline' : '', position]\"\n     [innerHTML]=\"message\"></div>\n<div *ngIf=\"!this.isHTML\" [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n     [ngClass]=\"[tooltipType, this.rounded ? 'rounded' : '', size ? size : '', this.preline? 'preline' : '', position]\">{{message}}</div>",
                    animations: [
                        animations.trigger('state', [
                            animations.state('initial, void, hidden', animations.style({ opacity: '0' })),
                            animations.state('visible', animations.style({ opacity: '1' })),
                            animations.transition('* => visible', [
                                animations.style({
                                    opacity: 0,
                                }),
                                animations.animate('0.3s 0.1s ease-in'),
                            ]),
                            animations.transition('* => hidden', [
                                animations.style({
                                    opacity: 1,
                                }),
                                animations.animate('0.3s 0.1s ease-in'),
                            ]),
                        ]),
                    ],
                    styles: ["novo-tooltip div{background:var(--tooltip-background-color,#383838);border-radius:var(--tooltip-border-radius,4px);box-shadow:var(--shadow-2);color:var(--color-white,#fff);font-size:12px;line-height:12px;padding:8px 10px;white-space:nowrap}novo-tooltip div.error{background-color:var(--color-shade-error,#b34e4d)}novo-tooltip div.error.top-left:before,novo-tooltip div.error.top-right:before,novo-tooltip div.error.top:before{border-top-color:var(--color-shade-error,#b34e4d)}novo-tooltip div.error.bottom-left:before,novo-tooltip div.error.bottom-right:before,novo-tooltip div.error.bottom:before{border-bottom-color:var(--color-shade-error,#b34e4d)}novo-tooltip div.error.left:before{border-left-color:var(--color-shade-error,#b34e4d)}novo-tooltip div.error.right:before{border-right-color:var(--color-shade-error,#b34e4d)}novo-tooltip div.info{background-color:var(--color-shade-info,#3986ac)}novo-tooltip div.info.top-left:before,novo-tooltip div.info.top-right:before,novo-tooltip div.info.top:before{border-top-color:var(--color-shade-info,#3986ac)}novo-tooltip div.info.bottom-left:before,novo-tooltip div.info.bottom-right:before,novo-tooltip div.info.bottom:before{border-bottom-color:var(--color-shade-info,#3986ac)}novo-tooltip div.info.left:before{border-left-color:var(--color-shade-info,#3986ac)}novo-tooltip div.info.right:before{border-right-color:var(--color-shade-info,#3986ac)}novo-tooltip div.warning{background-color:var(--color-shade-warning,#c09854)}novo-tooltip div.warning.top-left:before,novo-tooltip div.warning.top-right:before,novo-tooltip div.warning.top:before{border-top-color:var(--color-shade-warning,#c09854)}novo-tooltip div.warning.bottom-left:before,novo-tooltip div.warning.bottom-right:before,novo-tooltip div.warning.bottom:before{border-bottom-color:var(--color-shade-warning,#c09854)}novo-tooltip div.warning.left:before{border-left-color:var(--color-shade-warning,#c09854)}novo-tooltip div.warning.right:before{border-right-color:var(--color-shade-warning,#c09854)}novo-tooltip div.success{background-color:var(--color-shade-success,#458746)}novo-tooltip div.success.top-left:before,novo-tooltip div.success.top-right:before,novo-tooltip div.success.top:before{border-top-color:var(--color-shade-success,#458746)}novo-tooltip div.success.bottom-left:before,novo-tooltip div.success.bottom-right:before,novo-tooltip div.success.bottom:before{border-bottom-color:var(--color-shade-success,#458746)}novo-tooltip div.success.left:before{border-left-color:var(--color-shade-success,#458746)}novo-tooltip div.success.right:before{border-right-color:var(--color-shade-success,#458746)}novo-tooltip div.top-left:before,novo-tooltip div.top-right:before,novo-tooltip div.top:before{border-top-color:var(--tooltip-background-color,#383838)}novo-tooltip div.bottom-left:before,novo-tooltip div.bottom-right:before,novo-tooltip div.bottom:before{border-bottom-color:var(--tooltip-background-color,#383838)}novo-tooltip div.left:before{border-left-color:var(--tooltip-background-color,#383838)}novo-tooltip div.right:before{border-right-color:var(--tooltip-background-color,#383838)}novo-tooltip div.top:before{bottom:0;left:calc(50% - 6px);margin-bottom:-11px}novo-tooltip div.top-left:before{bottom:0;margin-bottom:-11px;margin-right:0;right:1px}novo-tooltip div.top-right:before{bottom:0;left:1px;margin-bottom:-11px;margin-left:0}novo-tooltip div.bottom:before{left:calc(50% - 6px);margin-top:-11px;top:0}novo-tooltip div.bottom-left:before{margin-right:0;margin-top:-11px;right:1px;top:0}novo-tooltip div.bottom-right:before{left:1px;margin-left:0;margin-top:-11px;top:0}novo-tooltip div.left:before{bottom:50%;margin-bottom:-6px;margin-right:-11px;right:0}novo-tooltip div.right:before{bottom:50%;left:0;margin-bottom:-6px;margin-left:-11px}novo-tooltip div:before{background:0 0;border:6px solid transparent;box-sizing:border-box;content:\"\";position:absolute}novo-tooltip div.extra-large,novo-tooltip div.large,novo-tooltip div.medium,novo-tooltip div.small{line-height:1.4em;white-space:normal;word-wrap:break-word}novo-tooltip div.extra-large{font-size:1.2vh;width:400px}novo-tooltip div.large{width:300px}novo-tooltip div.medium{width:150px}novo-tooltip div.small{width:80px}novo-tooltip div.preline{white-space:pre-line}"]
                },] }
    ];

    // NG
    var TooltipDirective = /** @class */ (function () {
        function TooltipDirective(overlay, viewContainerRef, elementRef) {
            this.overlay = overlay;
            this.viewContainerRef = viewContainerRef;
            this.elementRef = elementRef;
            this.position = 'top';
            this.type = 'normal';
            this.active = true;
            this.removeArrow = false;
            this.autoPosition = false;
        }
        TooltipDirective.prototype.isPosition = function (position) {
            return position.toLowerCase() === (this.position || '').toLowerCase();
        };
        TooltipDirective.prototype.isType = function (type) {
            return type.toLowerCase() === (this.type || '').toLowerCase();
        };
        TooltipDirective.prototype.isSize = function (size) {
            return size.toLowerCase() === (this.size || '').toLowerCase();
        };
        TooltipDirective.prototype.onMouseEnter = function () {
            if (this.tooltip && this.active && !this.always) {
                this.show();
            }
        };
        TooltipDirective.prototype.onMouseLeave = function () {
            if (this.overlayRef && !this.always) {
                this.hide();
                this.overlayRef.dispose();
            }
        };
        TooltipDirective.prototype.ngOnInit = function () {
            if (this.tooltip && this.always && this.active) {
                this.show();
            }
        };
        TooltipDirective.prototype.ngOnDestroy = function () {
            if (this.overlayRef && !this.always) {
                this.hide();
                this.overlayRef.dispose();
            }
        };
        TooltipDirective.prototype.show = function () {
            var overlayState = new i1.OverlayConfig();
            overlayState.positionStrategy = this.getPosition();
            if (this.always) {
                overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
            }
            else {
                overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
            }
            overlayState.scrollStrategy.enable();
            this.overlayRef = this.overlay.create(overlayState);
            this.overlayRef.detach();
            this.portal = this.portal || new portal.ComponentPortal(NovoTooltip, this.viewContainerRef);
            var tooltipInstance = this.overlayRef.attach(this.portal).instance;
            tooltipInstance.message = this.tooltip;
            tooltipInstance.tooltipType = this.type;
            tooltipInstance.rounded = this.rounded;
            tooltipInstance.size = this.size;
            tooltipInstance.preline = this.preline;
            tooltipInstance.noAnimate = this.noAnimate;
            tooltipInstance.position = this.removeArrow ? 'no-arrow' : this.position;
            tooltipInstance.isHTML = this.isHTML;
        };
        TooltipDirective.prototype.hide = function () {
            if (this.overlayRef) {
                this.overlayRef.detach();
            }
        };
        TooltipDirective.prototype.getPosition = function () {
            var strategy;
            var originPosition;
            var overlayPosition;
            var offsetX;
            var offsetY;
            switch (this.position) {
                case 'right':
                    originPosition = { originX: 'end', originY: 'center' };
                    overlayPosition = { overlayX: 'start', overlayY: 'center' };
                    offsetX = 8;
                    offsetY = 0;
                    break;
                case 'bottom':
                    originPosition = { originX: 'center', originY: 'bottom' };
                    overlayPosition = { overlayX: 'center', overlayY: 'top' };
                    offsetX = 0;
                    offsetY = 8;
                    break;
                case 'top':
                    originPosition = { originX: 'center', originY: 'top' };
                    overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
                    offsetX = 0;
                    offsetY = -8;
                    break;
                case 'left':
                    originPosition = { originX: 'start', originY: 'center' };
                    overlayPosition = { overlayX: 'end', overlayY: 'center' };
                    offsetX = -8;
                    offsetY = 0;
                    break;
                case 'top-left':
                    originPosition = { originX: 'start', originY: 'top' };
                    overlayPosition = { overlayX: 'end', overlayY: 'bottom' };
                    offsetX = 8;
                    offsetY = -8;
                    break;
                case 'bottom-left':
                    originPosition = { originX: 'start', originY: 'bottom' };
                    overlayPosition = { overlayX: 'end', overlayY: 'top' };
                    offsetX = 8;
                    offsetY = 8;
                    break;
                case 'top-right':
                    originPosition = { originX: 'end', originY: 'top' };
                    overlayPosition = { overlayX: 'start', overlayY: 'bottom' };
                    offsetX = -8;
                    offsetY = -8;
                    break;
                case 'bottom-right':
                    originPosition = { originX: 'end', originY: 'bottom' };
                    overlayPosition = { overlayX: 'start', overlayY: 'top' };
                    offsetX = -8;
                    offsetY = 8;
                    break;
                default:
                    break;
            }
            strategy = this.overlay
                .position()
                .connectedTo(this.elementRef, originPosition, overlayPosition)
                .withOffsetX(offsetX)
                .withOffsetY(offsetY);
            return this.autoPosition ? this.withFallbackStrategy(strategy) : strategy;
        };
        TooltipDirective.prototype.withFallbackStrategy = function (strategy) {
            strategy
                .withFallbackPosition({ originX: 'center', originY: 'bottom' }, { overlayX: 'center', overlayY: 'top' }, 0, 8)
                .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 0, 8)
                .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' }, 8, 0)
                .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' }, -8, 0)
                .withFallbackPosition({ originX: 'center', originY: 'top' }, { overlayX: 'center', overlayY: 'bottom' }, 0, -8)
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, 0, 8)
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, 0, -8)
                .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 0, -8)
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 8, -8)
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 8, 8)
                .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, -8, -8)
                .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, -8, 8);
            return strategy;
        };
        return TooltipDirective;
    }());
    TooltipDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[tooltip]',
                    host: {
                        '[attr.data-hint]': 'tooltip',
                    },
                },] }
    ];
    TooltipDirective.ctorParameters = function () { return [
        { type: i1.Overlay },
        { type: i0.ViewContainerRef },
        { type: i0.ElementRef }
    ]; };
    TooltipDirective.propDecorators = {
        tooltip: [{ type: i0.Input }],
        position: [{ type: i0.Input, args: ['tooltipPosition',] }],
        type: [{ type: i0.Input, args: ['tooltipType',] }],
        size: [{ type: i0.Input, args: ['tooltipSize',] }],
        bounce: [{ type: i0.Input, args: ['tooltipBounce',] }],
        noAnimate: [{ type: i0.Input, args: ['tooltipNoAnimate',] }],
        rounded: [{ type: i0.Input, args: ['tooltipRounded',] }],
        always: [{ type: i0.Input, args: ['tooltipAlways',] }],
        active: [{ type: i0.Input, args: ['tooltipActive',] }],
        preline: [{ type: i0.Input, args: ['tooltipPreline',] }],
        removeArrow: [{ type: i0.Input, args: ['removeTooltipArrow',] }],
        autoPosition: [{ type: i0.Input, args: ['tooltipAutoPosition',] }],
        isHTML: [{ type: i0.Input, args: ['tooltipIsHTML',] }],
        onMouseEnter: [{ type: i0.HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave',] }]
    };

    // NG2
    var NovoTooltipModule = /** @class */ (function () {
        function NovoTooltipModule() {
        }
        return NovoTooltipModule;
    }());
    NovoTooltipModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [TooltipDirective, NovoTooltip],
                    exports: [TooltipDirective],
                    imports: [common.CommonModule],
                },] }
    ];

    var NovoAgendaDateChangeElement = /** @class */ (function () {
        function NovoAgendaDateChangeElement(locale) {
            /**
             * Called when the view date is changed
             */
            this.viewDateChange = new i0.EventEmitter();
            this.locale = locale;
        }
        /**
         * @hidden
         */
        NovoAgendaDateChangeElement.prototype.subtractDate = function () {
            this.changeDate(-1);
        };
        NovoAgendaDateChangeElement.prototype.addDate = function () {
            this.changeDate(1);
        };
        NovoAgendaDateChangeElement.prototype.changeDate = function (unit) {
            var addFn = {
                day: dateFns.addDays,
                week: dateFns.addWeeks,
                month: dateFns.addMonths,
            }[this.view];
            this.viewDateChange.emit(addFn(this.viewDate, unit));
        };
        Object.defineProperty(NovoAgendaDateChangeElement.prototype, "startOfWeek", {
            get: function () {
                return dateFns.startOfWeek(this.viewDate);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAgendaDateChangeElement.prototype, "endOfWeek", {
            get: function () {
                return dateFns.endOfWeek(this.viewDate);
            },
            enumerable: false,
            configurable: true
        });
        return NovoAgendaDateChangeElement;
    }());
    NovoAgendaDateChangeElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-date-change',
                    template: "\n    <div class=\"cal-date-change\">\n      <i class=\"bhi-arrow-left\" (click)=\"subtractDate()\"></i>\n      <span [ngSwitch]=\"view\">\n        <span *ngSwitchCase=\"'month'\">{{ (viewDate | month: locale) + ' ' + (viewDate | year: locale) }}</span>\n        <span *ngSwitchCase=\"'week'\">{{\n          (startOfWeek | monthday: locale:'long') + ' - ' + (endOfWeek | endofweekdisplay: startOfWeek:locale:'long')\n        }}</span>\n        <span *ngSwitchCase=\"'day'\">{{\n          (viewDate | weekday: locale:'long') + ', ' + (viewDate | month: locale) + ' ' + (viewDate | dayofmonth: locale)\n        }}</span>\n      </span>\n      <i class=\"bhi-arrow-right\" (click)=\"addDate()\"></i>\n    </div>\n  "
                },] }
    ];
    NovoAgendaDateChangeElement.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    NovoAgendaDateChangeElement.propDecorators = {
        view: [{ type: i0.Input }],
        viewDate: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        viewDateChange: [{ type: i0.Output }]
    };

    var NovoEventTypeLegendElement = /** @class */ (function () {
        function NovoEventTypeLegendElement() {
            this.eventTypeClicked = new i0.EventEmitter();
        }
        return NovoEventTypeLegendElement;
    }());
    NovoEventTypeLegendElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-event-type-legend',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-event-legend\">\n        <div\n          class=\"cal-event-type\"\n          *ngFor=\"let type of events | groupBy: 'type'\"\n          (click)=\"$event.stopPropagation(); eventTypeClicked.emit({ event: type?.key })\"\n        >\n          <div class=\"cal-event-type-swatch\"></div>\n          <div>{{ type?.key }}</div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{ events: events, eventTypeClicked: eventTypeClicked }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoEventTypeLegendElement.propDecorators = {
        events: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        eventTypeClicked: [{ type: i0.Output }]
    };

    var NovoAgendaAllDayEventElement = /** @class */ (function () {
        function NovoAgendaAllDayEventElement() {
            this.eventClicked = new i0.EventEmitter();
        }
        return NovoAgendaAllDayEventElement;
    }());
    NovoAgendaAllDayEventElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-all-day-event',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-all-day-event\" [style.backgroundColor]=\"event.color.secondary\" [style.borderColor]=\"event.color.primary\">\n        {{ event.title }}\n        <!--<novo-agenda-event-title\n          [event]=\"event\"\n          view=\"day\"\n          (click)=\"eventClicked.emit()\">\n        </novo-agenda-event-title>\n        <novo-agenda-event-actions [event]=\"event\"></novo-agenda-event-actions>-->\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        eventClicked: eventClicked\n      }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoAgendaAllDayEventElement.propDecorators = {
        event: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        eventClicked: [{ type: i0.Output }]
    };

    var NovoAgendaDayEventElement = /** @class */ (function () {
        function NovoAgendaDayEventElement() {
            this.eventClicked = new i0.EventEmitter();
        }
        return NovoAgendaDayEventElement;
    }());
    NovoAgendaDayEventElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-day-event',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [style.borderColor]=\"dayEvent.event.color.secondary\"\n        [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n        [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n        [ngClass]=\"dayEvent.event.cssClass\"\n        [tooltip]=\"dayEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({ event: dayEvent.event })\"\n      >\n        <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"dayEvent.event.color.primary\"></div>\n        <div class=\"cal-event-group\">\n          <div class=\"cal-event-title\">{{ dayEvent.event.title }}</div>\n          <div class=\"cal-event-description\">{{ dayEvent.event?.description }}</div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{ dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoAgendaDayEventElement.propDecorators = {
        dayEvent: [{ type: i0.Input }],
        tooltipPosition: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        eventClicked: [{ type: i0.Output }]
    };

    /**
     * @hidden
     */
    var SEGMENT_HEIGHT = 30;
    /**
     * @hidden
     */
    var MINUTES_IN_HOUR$1 = 60;
    /**
     * Shows all events on a given day. Example usage:
     *
     * ```typescript
     * &lt;novo-agenda-day
     *  [viewDate]="viewDate"
     *  [events]="events"&gt;
     * &lt;/novo-agenda-day&gt;
     * ```
     */
    var NovoAgendaDayViewElement = /** @class */ (function () {
        /**
         * @hidden
         */
        function NovoAgendaDayViewElement(cdr, locale) {
            this.cdr = cdr;
            /**
             * An array of events to display on view
             */
            this.events = [];
            /**
             * The number of segments in an hour. Must be <= 6
             */
            this.hourSegments = 2;
            /**
             * The day start hours in 24 hour time. Must be 0-23
             */
            this.dayStartHour = 0;
            /**
             * The day start minutes. Must be 0-59
             */
            this.dayStartMinute = 0;
            /**
             * The day end hours in 24 hour time. Must be 0-23
             */
            this.dayEndHour = 23;
            /**
             * The day end minutes. Must be 0-59
             */
            this.dayEndMinute = 59;
            /**
             * The width in pixels of each event on the view
             */
            this.eventWidth = 150;
            /**
             * The grid size to snap resizing and dragging of events to
             */
            this.eventSnapSize = 30;
            /**
             * The placement of the event tooltip
             */
            this.tooltipPosition = 'top';
            /**
             * Called when an event title is clicked
             */
            this.eventClicked = new i0.EventEmitter();
            /**
             * Called when an hour segment is clicked
             */
            this.hourSegmentClicked = new i0.EventEmitter();
            /**
             * Called when an event is resized or dragged and dropped
             */
            this.eventTimesChanged = new i0.EventEmitter();
            /**
             * @hidden
             */
            this.hours = [];
            /**
             * @hidden
             */
            this.width = 0;
            this.locale = locale;
        }
        /**
         * @hidden
         */
        NovoAgendaDayViewElement.prototype.ngOnInit = function () {
            var _this = this;
            if (this.refresh) {
                this.refreshSubscription = this.refresh.subscribe(function () {
                    _this.refreshAll();
                    _this.cdr.detectChanges();
                });
            }
        };
        /**
         * @hidden
         */
        NovoAgendaDayViewElement.prototype.ngOnDestroy = function () {
            if (this.refreshSubscription) {
                this.refreshSubscription.unsubscribe();
            }
        };
        /**
         * @hidden
         */
        NovoAgendaDayViewElement.prototype.ngOnChanges = function (changes) {
            if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
                this.refreshHourGrid();
            }
            if (changes.viewDate ||
                changes.events ||
                changes.dayStartHour ||
                changes.dayStartMinute ||
                changes.dayEndHour ||
                changes.dayEndMinute ||
                changes.eventWidth) {
                this.refreshView();
            }
        };
        /*
          eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
            if (dropEvent.dropData && dropEvent.dropData.event) {
              this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
            }
          }
      
          resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
            this.currentResize = {
              originalTop: event.top,
              originalHeight: event.height,
              edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
            };
            const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
            this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
            this.cdr.detectChanges();
          }
      
          resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
            if (resizeEvent.edges.top) {
              event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
              event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
            } else if (resizeEvent.edges.bottom) {
              event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
            }
          }
      
          resizeEnded(dayEvent: DayViewEvent): void {
      
            let pixelsMoved: number;
            if (this.currentResize.edge === 'top') {
              pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
            } else {
              pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
            }
      
            dayEvent.top = this.currentResize.originalTop;
            dayEvent.height = this.currentResize.originalHeight;
      
            const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
            const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
            let newStart: Date = dayEvent.event.start;
            let newEnd: Date = dayEvent.event.end;
            if (this.currentResize.edge === 'top') {
              newStart = addMinutes(newStart, minutesMoved);
            } else if (newEnd) {
              newEnd = addMinutes(newEnd, minutesMoved);
            }
      
            this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
            this.currentResize = null;
      
          }
      
          dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
            const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
            this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
            this.cdr.detectChanges();
          }
      
          eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
            const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
            const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
            const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
            let newEnd: Date;
            if (dayEvent.event.end) {
              newEnd = addMinutes(dayEvent.event.end, minutesMoved);
            }
            this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
          }
          */
        NovoAgendaDayViewElement.prototype.refreshHourGrid = function () {
            var _this = this;
            this.hours = getDayViewHourGrid({
                viewDate: this.viewDate,
                hourSegments: this.hourSegments,
                dayStart: {
                    hour: this.dayStartHour,
                    minute: this.dayStartMinute,
                },
                dayEnd: {
                    hour: this.dayEndHour,
                    minute: this.dayEndMinute,
                },
            });
            if (this.hourSegmentModifier) {
                this.hours.forEach(function (hour) {
                    hour.segments.forEach(function (segment) { return _this.hourSegmentModifier(segment); });
                });
            }
        };
        NovoAgendaDayViewElement.prototype.refreshView = function () {
            this.view = getDayView({
                events: this.events,
                viewDate: this.viewDate,
                hourSegments: this.hourSegments,
                dayStart: {
                    hour: this.dayStartHour,
                    minute: this.dayStartMinute,
                },
                dayEnd: {
                    hour: this.dayEndHour,
                    minute: this.dayEndMinute,
                },
                eventWidth: this.eventWidth,
                segmentHeight: SEGMENT_HEIGHT,
            });
        };
        NovoAgendaDayViewElement.prototype.refreshAll = function () {
            this.refreshHourGrid();
            this.refreshView();
        };
        return NovoAgendaDayViewElement;
    }());
    NovoAgendaDayViewElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-day',
                    template: "\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <novo-agenda-all-day-event\n        *ngFor=\"let event of view.allDayEvents\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        (eventClicked)=\"eventClicked.emit({ event: event })\"\n      >\n      </novo-agenda-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events\"\n            class=\"cal-event-container\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\"\n          >\n            <novo-agenda-day-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPosition]=\"tooltipPosition\"\n              [customTemplate]=\"eventTemplate\"\n              (eventClicked)=\"eventClicked.emit($event)\"\n            >\n            </novo-agenda-day-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\n          <novo-agenda-day-hour-segment\n            *ngFor=\"let segment of hour.segments\"\n            [segment]=\"segment\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({ date: segment.date })\"\n          >\n          </novo-agenda-day-hour-segment>\n        </div>\n      </div>\n    </div>\n  "
                },] }
    ];
    NovoAgendaDayViewElement.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    NovoAgendaDayViewElement.propDecorators = {
        viewDate: [{ type: i0.Input }],
        events: [{ type: i0.Input }],
        hourSegments: [{ type: i0.Input }],
        dayStartHour: [{ type: i0.Input }],
        dayStartMinute: [{ type: i0.Input }],
        dayEndHour: [{ type: i0.Input }],
        dayEndMinute: [{ type: i0.Input }],
        eventWidth: [{ type: i0.Input }],
        refresh: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        hourSegmentModifier: [{ type: i0.Input }],
        eventSnapSize: [{ type: i0.Input }],
        tooltipPosition: [{ type: i0.Input }],
        hourSegmentTemplate: [{ type: i0.Input }],
        allDayEventTemplate: [{ type: i0.Input }],
        eventTemplate: [{ type: i0.Input }],
        eventClicked: [{ type: i0.Output }],
        hourSegmentClicked: [{ type: i0.Output }],
        eventTimesChanged: [{ type: i0.Output }]
    };

    var NovoAgendaHourSegmentElement = /** @class */ (function () {
        function NovoAgendaHourSegmentElement() {
        }
        return NovoAgendaHourSegmentElement;
    }());
    NovoAgendaHourSegmentElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-day-hour-segment',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-hour-segment\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\"\n      >\n        <div class=\"cal-time\">\n          {{ segment.date | hours: locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale\n      }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoAgendaHourSegmentElement.propDecorators = {
        segment: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }]
    };

    var NovoAgendaMonthDayElement = /** @class */ (function () {
        function NovoAgendaMonthDayElement() {
            this.eventClicked = new i0.EventEmitter();
        }
        Object.defineProperty(NovoAgendaMonthDayElement.prototype, "accepted", {
            get: function () {
                if (!this.day) {
                    return [];
                }
                return this.day.events.filter(function (evt) {
                    return evt.response === exports.CalendarEventResponse.Accepted;
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAgendaMonthDayElement.prototype, "rejected", {
            get: function () {
                if (!this.day) {
                    return [];
                }
                return this.day.events.filter(function (evt) {
                    return evt.response === exports.CalendarEventResponse.Rejected;
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAgendaMonthDayElement.prototype, "maybes", {
            get: function () {
                if (!this.day) {
                    return [];
                }
                return this.day.events.filter(function (evt) {
                    return evt.response === exports.CalendarEventResponse.Maybe;
                });
            },
            enumerable: false,
            configurable: true
        });
        return NovoAgendaMonthDayElement;
    }());
    NovoAgendaMonthDayElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-month-day',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"agenda-day-top\">\n        <span class=\"agenda-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"agenda-day-number\">{{ day.date | dayofmonth: locale }}</span>\n      </div>\n      <div class=\"agenda-events\">\n        <div\n          class=\"agenda-event\"\n          *ngFor=\"let type of day.events | groupBy: 'type'\"\n          [style.backgroundColor]=\"type?.value[0]?.color.primary\"\n          [ngClass]=\"type?.value[0]?.cssClass\"\n          (click)=\"$event.stopPropagation(); eventClicked.emit({ event: type?.value[0] })\"\n        >\n          {{ type?.value.length }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        locale: locale,\n        tooltipPosition: tooltipPosition,\n        eventClicked: eventClicked,\n        accepted: accepted,\n        rejected: rejected,\n        maybes: maybes\n      }\"\n    >\n    </ng-template>\n  ",
                    host: {
                        '[class]': '"agenda-cell agenda-day-cell " + day?.cssClass',
                        '[class.agenda-day-accepted]': 'accepted.length',
                        '[class.agenda-day-rejected]': 'rejected.length',
                        '[class.agenda-past]': 'day.isPast',
                        '[class.agenda-today]': 'day.isToday',
                        '[class.agenda-future]': 'day.isFuture',
                        '[class.agenda-weekend]': 'day.isWeekend',
                        '[class.agenda-in-month]': 'day.inMonth',
                        '[class.agenda-out-month]': '!day.inMonth',
                        '[class.agenda-has-events]': 'day.events.length > 0',
                        '[style.backgroundColor]': 'day.backgroundColor',
                    }
                },] }
    ];
    NovoAgendaMonthDayElement.propDecorators = {
        day: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        tooltipPosition: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        eventClicked: [{ type: i0.Output }]
    };

    var NovoAgendaMonthHeaderElement = /** @class */ (function () {
        function NovoAgendaMonthHeaderElement() {
            /**
             * Called when the view date is changed
             */
            this.viewDateChange = new i0.EventEmitter();
        }
        NovoAgendaMonthHeaderElement.prototype.prevMonth = function (event) {
            this.viewDateChange.emit(dateFns.subMonths(this.viewDate, 1));
        };
        NovoAgendaMonthHeaderElement.prototype.nextMonth = function (event) {
            this.viewDateChange.emit(dateFns.addMonths(this.viewDate, 1));
        };
        return NovoAgendaMonthHeaderElement;
    }());
    NovoAgendaMonthHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-month-header',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"agenda-header\">\n        <div class=\"agenda-header-top\">\n          <novo-button theme=\"icon\" icon=\"previous\" (click)=\"prevMonth($event)\"></novo-button>\n          <div class=\"agenda-month\">{{ viewDate | month: locale }}</div>\n          <novo-button theme=\"icon\" icon=\"next\" (click)=\"nextMonth($event)\"></novo-button>\n        </div>\n        <div class=\"agenda-weekdays\">\n          <div\n            class=\"agenda-weekday\"\n            *ngFor=\"let day of days\"\n            [class.agenda-past]=\"day.isPast\"\n            [class.agenda-today]=\"day.isToday\"\n            [class.agenda-future]=\"day.isFuture\"\n            [class.agenda-weekend]=\"day.isWeekend\"\n          >\n            {{ day.date | weekday: locale }}\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{ days: days, locale: locale, viewDate: viewDate }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoAgendaMonthHeaderElement.propDecorators = {
        viewDate: [{ type: i0.Input }],
        days: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        viewDateChange: [{ type: i0.Output }]
    };

    /**
     * Shows all events on a given month. Example usage:
     *
     * ```
     * &lt;novo-agenda-month-view
     *  [viewDate]="viewDate"
     *  [events]="events"&gt;
     * &lt;/novo-agenda-month-view&gt;
     * ```
     */
    var NovoAgendaMonthViewElement = /** @class */ (function () {
        /**
         * @hidden
         */
        function NovoAgendaMonthViewElement(cdr, locale) {
            this.cdr = cdr;
            /**
             * An array of events to display on view
             */
            this.events = [];
            /**
             * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
             */
            this.excludeDays = [];
            /**
             * The locale used to format dates
             */
            this.locale = 'en-US';
            /**
             * The placement of the event tooltip
             */
            this.tooltipPosition = 'top';
            /**
             * Called when the day cell is clicked
             */
            this.dayClicked = new i0.EventEmitter();
            /**
             * Called when the event title is clicked
             */
            this.eventClicked = new i0.EventEmitter();
            /**
             * Called when an event is dragged and dropped
             */
            this.eventTimesChanged = new i0.EventEmitter();
            this.viewDateChange = new i0.EventEmitter();
            this.locale = locale;
        }
        /**
         * @hidden
         */
        NovoAgendaMonthViewElement.prototype.ngOnInit = function () {
            var _this = this;
            if (this.refresh) {
                this.refreshSubscription = this.refresh.subscribe(function () {
                    _this.refreshAll();
                    _this.cdr.markForCheck();
                });
            }
        };
        /**
         * @hidden
         */
        NovoAgendaMonthViewElement.prototype.ngOnChanges = function (changes) {
            if (changes.viewDate || changes.excludeDays) {
                this.refreshHeader();
            }
            if (changes.viewDate || changes.events || changes.excludeDays) {
                this.refreshBody();
            }
        };
        /**
         * @hidden
         */
        NovoAgendaMonthViewElement.prototype.ngOnDestroy = function () {
            if (this.refreshSubscription) {
                this.refreshSubscription.unsubscribe();
            }
        };
        /**
         * @hidden
         */
        NovoAgendaMonthViewElement.prototype.eventDropped = function (day, event) {
            var year = dateFns.getYear(day.date);
            var month = dateFns.getMonth(day.date);
            var date = dateFns.getDate(day.date);
            var newStart = dateFns.setYear(dateFns.setMonth(dateFns.setDate(event.start, date), month), year);
            var newEnd;
            if (event.end) {
                var secondsDiff = dateFns.differenceInSeconds(newStart, event.start);
                newEnd = dateFns.addSeconds(event.end, secondsDiff);
            }
            this.eventTimesChanged.emit({ event: event, newStart: newStart, newEnd: newEnd });
        };
        NovoAgendaMonthViewElement.prototype.refreshHeader = function () {
            this.columnHeaders = getWeekViewHeader({
                viewDate: this.viewDate,
                weekStartsOn: this.weekStartsOn,
                excluded: this.excludeDays,
            });
        };
        NovoAgendaMonthViewElement.prototype.refreshBody = function () {
            var _this = this;
            this.view = getMonthView({
                events: this.events,
                viewDate: this.viewDate,
                weekStartsOn: this.weekStartsOn,
                excluded: this.excludeDays,
            });
            if (this.dayModifier) {
                this.view.days.forEach(function (day) { return _this.dayModifier(day); });
            }
        };
        NovoAgendaMonthViewElement.prototype.refreshAll = function () {
            this.refreshHeader();
            this.refreshBody();
            this.viewDateChange.emit(this.viewDate);
        };
        return NovoAgendaMonthViewElement;
    }());
    NovoAgendaMonthViewElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-month',
                    template: "\n    <div class=\"agenda-month-view\">\n      <novo-agenda-month-header\n        [(viewDate)]=\"viewDate\"\n        [days]=\"columnHeaders\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (viewDateChange)=\"refreshAll()\"\n      >\n      </novo-agenda-month-header>\n      <div class=\"agenda-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets\">\n          <div class=\"agenda-cell-row\">\n            <novo-agenda-month-day\n              *ngFor=\"let day of view.days | slice: rowIndex:rowIndex + view.totalDaysVisibleInWeek\"\n              [day]=\"day\"\n              [locale]=\"locale\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"dayClicked.emit({ day: day })\"\n              (eventClicked)=\"eventClicked.emit({ day: day, event: $event.event })\"\n            >\n            </novo-agenda-month-day>\n          </div>\n        </div>\n      </div>\n    </div>\n  "
                },] }
    ];
    NovoAgendaMonthViewElement.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    NovoAgendaMonthViewElement.propDecorators = {
        viewDate: [{ type: i0.Input }],
        events: [{ type: i0.Input }],
        excludeDays: [{ type: i0.Input }],
        dayModifier: [{ type: i0.Input }],
        refresh: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        tooltipPosition: [{ type: i0.Input }],
        weekStartsOn: [{ type: i0.Input }],
        headerTemplate: [{ type: i0.Input }],
        cellTemplate: [{ type: i0.Input }],
        dayClicked: [{ type: i0.Output }],
        eventClicked: [{ type: i0.Output }],
        eventTimesChanged: [{ type: i0.Output }],
        viewDateChange: [{ type: i0.Output }]
    };

    var DayOfMonthPipe = /** @class */ (function () {
        function DayOfMonthPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        DayOfMonthPipe.prototype.transform = function (date, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'numeric'; }
            return new Intl.DateTimeFormat(locale, { day: method }).format(date);
        };
        return DayOfMonthPipe;
    }());
    DayOfMonthPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'dayofmonth' },] }
    ];
    DayOfMonthPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var EndOfWeekDisplayPipe = /** @class */ (function () {
        function EndOfWeekDisplayPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        EndOfWeekDisplayPipe.prototype.transform = function (endOfWeek, startOfWeek, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'short'; }
            if (endOfWeek.getMonth() === startOfWeek.getMonth()) {
                return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek);
            }
            return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek);
        };
        return EndOfWeekDisplayPipe;
    }());
    EndOfWeekDisplayPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'endofweekdisplay' },] }
    ];
    EndOfWeekDisplayPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var HoursPipe = /** @class */ (function () {
        function HoursPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        HoursPipe.prototype.transform = function (date, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'numeric'; }
            return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
        };
        return HoursPipe;
    }());
    HoursPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'hours' },] }
    ];
    HoursPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var MonthPipe = /** @class */ (function () {
        function MonthPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        MonthPipe.prototype.transform = function (date, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'long'; }
            return new Intl.DateTimeFormat(locale, { month: method }).format(date);
        };
        return MonthPipe;
    }());
    MonthPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'month' },] }
    ];
    MonthPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var MonthDayPipe = /** @class */ (function () {
        function MonthDayPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        MonthDayPipe.prototype.transform = function (date, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'short'; }
            return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
        };
        return MonthDayPipe;
    }());
    MonthDayPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'monthday' },] }
    ];
    MonthDayPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var WeekdayPipe = /** @class */ (function () {
        function WeekdayPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        WeekdayPipe.prototype.transform = function (date, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'short'; }
            return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
        };
        return WeekdayPipe;
    }());
    WeekdayPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'weekday' },] }
    ];
    WeekdayPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var YearPipe = /** @class */ (function () {
        function YearPipe(locale) {
            if (locale === void 0) { locale = 'en-US'; }
            this.locale = locale;
        }
        YearPipe.prototype.transform = function (date, locale, method) {
            if (locale === void 0) { locale = this.locale; }
            if (method === void 0) { method = 'numeric'; }
            return new Intl.DateTimeFormat(locale, { year: method }).format(date);
        };
        return YearPipe;
    }());
    YearPipe.decorators = [
        { type: i0.Pipe, args: [{ name: 'year' },] }
    ];
    YearPipe.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };

    var NovoAgendaWeekEventElement = /** @class */ (function () {
        function NovoAgendaWeekEventElement() {
            this.eventClicked = new i0.EventEmitter();
        }
        return NovoAgendaWeekEventElement;
    }());
    NovoAgendaWeekEventElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-week-event',
                    template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n        [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n        [ngClass]=\"weekEvent.event?.cssClass\"\n        [tooltip]=\"weekEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({ event: weekEvent.event })\"\n      >\n        <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"weekEvent.event.color.primary\"></div>\n        <div class=\"cal-event-title\">{{ weekEvent.event?.title }}</div>\n        <div class=\"cal-event-description\">{{ weekEvent.event?.description }}</div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{ weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoAgendaWeekEventElement.propDecorators = {
        weekEvent: [{ type: i0.Input }],
        tooltipPosition: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        eventClicked: [{ type: i0.Output }]
    };

    var NovoAgendaWeekHeaderElement = /** @class */ (function () {
        function NovoAgendaWeekHeaderElement() {
            this.dayClicked = new i0.EventEmitter();
            this.eventDropped = new i0.EventEmitter();
        }
        return NovoAgendaWeekHeaderElement;
    }());
    NovoAgendaWeekHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-week-header',
                    template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          (click)=\"dayClicked.emit({ date: day.date })\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({ event: $event.dropData.event, newStart: day.date })\"\n        >\n          <b>{{ day.date | weekday: locale:'long' }}</b\n          ><br />\n          <span>{{ day.date | monthday: locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{ days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped }\"\n    >\n    </ng-template>\n  "
                },] }
    ];
    NovoAgendaWeekHeaderElement.propDecorators = {
        days: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        customTemplate: [{ type: i0.Input }],
        dayClicked: [{ type: i0.Output }],
        eventDropped: [{ type: i0.Output }]
    };

    /**
     * @hidden
     */
    var SEGMENT_HEIGHT$1 = 30;
    /**
     * @hidden
     */
    var MINUTES_IN_HOUR$2 = 60;
    /**
     * Shows all events on a given week. Example usage:
     *
     * ```typescript
     * &lt;novo-agenda-week
     *  [viewDate]="viewDate"
     *  [events]="events"&gt;
     * &lt;/novo-agenda-week&gt;
     * ```
     */
    var NovoAgendaWeekViewElement = /** @class */ (function () {
        /**
         * @hidden
         */
        function NovoAgendaWeekViewElement(cdr, locale) {
            this.cdr = cdr;
            /**
             * An array of events to display on view
             */
            this.events = [];
            /**
             * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
             */
            this.excludeDays = [];
            /**
             * The placement of the event tooltip
             */
            this.tooltipPosition = 'bottom';
            /**
             * The precision to display events.
             * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
             */
            this.precision = 'days';
            /**
             * The number of segments in an hour. Must be <= 6
             */
            this.hourSegments = 2;
            /**
             * The day start hours in 24 hour time. Must be 0-23
             */
            this.dayStartHour = 0;
            /**
             * The day start minutes. Must be 0-59
             */
            this.dayStartMinute = 0;
            /**
             * The day end hours in 24 hour time. Must be 0-23
             */
            this.dayEndHour = 23;
            /**
             * The day end minutes. Must be 0-59
             */
            this.dayEndMinute = 59;
            /**
             * Called when an hour segment is clicked
             */
            this.hourSegmentClicked = new i0.EventEmitter();
            /**
             * Called when a header week day is clicked
             */
            this.dayClicked = new i0.EventEmitter();
            /**
             * Called when the event title is clicked
             */
            this.eventClicked = new i0.EventEmitter();
            /**
             * Called when an event is resized or dragged and dropped
             */
            this.eventTimesChanged = new i0.EventEmitter();
            /**
             * @hidden
             */
            this.hours = [];
            /**
             * @hidden
             */
            this.eventRows = [];
            this.locale = locale;
        }
        /**
         * @hidden
         */
        NovoAgendaWeekViewElement.prototype.ngOnInit = function () {
            var _this = this;
            if (this.refresh) {
                this.refreshSubscription = this.refresh.subscribe(function () {
                    _this.refreshAll();
                    _this.cdr.detectChanges();
                });
            }
        };
        /**
         * @hidden
         */
        NovoAgendaWeekViewElement.prototype.ngOnChanges = function (changes) {
            if (changes.viewDate || changes.excludeDays) {
                this.refreshHeader();
            }
            if (changes.events || changes.viewDate || changes.excludeDays) {
                this.refreshBody();
            }
            if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
                this.refreshHourGrid();
            }
        };
        /**
         * @hidden
         */
        NovoAgendaWeekViewElement.prototype.ngOnDestroy = function () {
            if (this.refreshSubscription) {
                this.refreshSubscription.unsubscribe();
            }
        };
        /*
          resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
            this.currentResize = {
              originalOffset: weekEvent.offset,
              originalSpan: weekEvent.span,
              edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
            };
            const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
            this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
            this.cdr.detectChanges();
          }
      
          resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
            if (resizeEvent.edges.left) {
              const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
              weekEvent.offset = this.currentResize.originalOffset + diff;
              weekEvent.span = this.currentResize.originalSpan - diff;
            } else if (resizeEvent.edges.right) {
              const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
              weekEvent.span = this.currentResize.originalSpan + diff;
            }
          }
      
          resizeEnded(weekEvent: WeekViewEvent): void {
      
            let daysDiff: number;
            if (this.currentResize.edge === 'left') {
              daysDiff = weekEvent.offset - this.currentResize.originalOffset;
            } else {
              daysDiff = weekEvent.span - this.currentResize.originalSpan;
            }
      
            weekEvent.offset = this.currentResize.originalOffset;
            weekEvent.span = this.currentResize.originalSpan;
      
            let newStart: Date = weekEvent.event.start;
            let newEnd: Date = weekEvent.event.end;
            if (this.currentResize.edge === 'left') {
              newStart = addDays(newStart, daysDiff);
            } else if (newEnd) {
              newEnd = addDays(newEnd, daysDiff);
            }
      
            this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
            this.currentResize = null;
      
          }
      
          eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
      
            const daysDragged: number = draggedByPx / dayWidth;
            const newStart: Date = addDays(weekEvent.event.start, daysDragged);
            let newEnd: Date;
            if (weekEvent.event.end) {
              newEnd = addDays(weekEvent.event.end, daysDragged);
            }
      
            this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
      
          }
      
          dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
            const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
            this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
            this.cdr.detectChanges();
          }
          */
        NovoAgendaWeekViewElement.prototype.getDayColumnWidth = function (eventRowContainer) {
            return Math.floor(eventRowContainer.offsetWidth / this.days.length);
        };
        NovoAgendaWeekViewElement.prototype.refreshHeader = function () {
            this.days = getWeekViewHeader({
                viewDate: this.viewDate,
                weekStartsOn: this.weekStartsOn,
                excluded: this.excludeDays,
            });
        };
        NovoAgendaWeekViewElement.prototype.refreshBody = function () {
            this.eventRows = getWeekView({
                events: this.events,
                viewDate: this.viewDate,
                weekStartsOn: this.weekStartsOn,
                excluded: this.excludeDays,
                hourSegments: this.hourSegments,
                segmentHeight: SEGMENT_HEIGHT$1,
                dayStart: {
                    hour: this.dayStartHour,
                    minute: this.dayStartMinute,
                },
                dayEnd: {
                    hour: this.dayEndHour,
                    minute: this.dayEndMinute,
                },
            });
        };
        NovoAgendaWeekViewElement.prototype.refreshHourGrid = function () {
            this.hours = getDayViewHourGrid({
                viewDate: this.viewDate,
                hourSegments: this.hourSegments,
                dayStart: {
                    hour: this.dayStartHour,
                    minute: this.dayStartMinute,
                },
                dayEnd: {
                    hour: this.dayEndHour,
                    minute: this.dayEndMinute,
                },
            });
            // if (this.hourSegmentModifier) {
            //   this.hours.forEach(hour => {
            //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
            //   });
            // }
        };
        NovoAgendaWeekViewElement.prototype.refreshAll = function () {
            this.refreshHeader();
            this.refreshHourGrid();
            this.refreshBody();
        };
        return NovoAgendaWeekViewElement;
    }());
    NovoAgendaWeekViewElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-agenda-week',
                    template: "\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <novo-agenda-week-header [days]=\"days\" [locale]=\"locale\" [customTemplate]=\"headerTemplate\" (dayClicked)=\"dayClicked.emit($event)\">\n      </novo-agenda-week-header>\n      <div *ngFor=\"let eventRow of eventRows\" #eventRowContainer>\n        <div\n          class=\"cal-event-container\"\n          #event\n          *ngFor=\"let weekEvent of eventRow.row\"\n          [style.width]=\"(100 / days.length) * weekEvent.span + '%'\"\n          [style.marginTop.px]=\"weekEvent.top\"\n          [style.height.px]=\"weekEvent.height\"\n          [style.marginLeft]=\"(100 / days.length) * weekEvent.offset + '%'\"\n        >\n          <novo-agenda-week-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPosition]=\"tooltipPosition\"\n            [customTemplate]=\"eventTemplate\"\n            (eventClicked)=\"eventClicked.emit($event)\"\n          >\n          </novo-agenda-week-event>\n        </div>\n      </div>\n      <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"70\">\n        <novo-agenda-day-hour-segment\n          *ngFor=\"let segment of hour.segments\"\n          [segment]=\"segment\"\n          [locale]=\"locale\"\n          [customTemplate]=\"hourSegmentTemplate\"\n          (click)=\"hourSegmentClicked.emit({ date: segment.date })\"\n        >\n        </novo-agenda-day-hour-segment>\n      </div>\n    </div>\n  "
                },] }
    ];
    NovoAgendaWeekViewElement.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    NovoAgendaWeekViewElement.propDecorators = {
        viewDate: [{ type: i0.Input }],
        events: [{ type: i0.Input }],
        excludeDays: [{ type: i0.Input }],
        refresh: [{ type: i0.Input }],
        locale: [{ type: i0.Input }],
        tooltipPosition: [{ type: i0.Input }],
        weekStartsOn: [{ type: i0.Input }],
        headerTemplate: [{ type: i0.Input }],
        eventTemplate: [{ type: i0.Input }],
        precision: [{ type: i0.Input }],
        hourSegments: [{ type: i0.Input }],
        dayStartHour: [{ type: i0.Input }],
        dayStartMinute: [{ type: i0.Input }],
        dayEndHour: [{ type: i0.Input }],
        dayEndMinute: [{ type: i0.Input }],
        hourSegmentTemplate: [{ type: i0.Input }],
        hourSegmentClicked: [{ type: i0.Output }],
        dayClicked: [{ type: i0.Output }],
        eventClicked: [{ type: i0.Output }],
        eventTimesChanged: [{ type: i0.Output }]
    };

    // NG2
    var NovoAgendaModule = /** @class */ (function () {
        function NovoAgendaModule() {
        }
        return NovoAgendaModule;
    }());
    NovoAgendaModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                    declarations: [
                        NovoEventTypeLegendElement,
                        NovoAgendaMonthViewElement,
                        NovoAgendaMonthHeaderElement,
                        NovoAgendaMonthDayElement,
                        NovoAgendaWeekViewElement,
                        NovoAgendaWeekHeaderElement,
                        NovoAgendaWeekEventElement,
                        NovoAgendaDayViewElement,
                        NovoAgendaDayEventElement,
                        NovoAgendaHourSegmentElement,
                        NovoAgendaAllDayEventElement,
                        NovoAgendaDateChangeElement,
                        WeekdayPipe,
                        DayOfMonthPipe,
                        MonthPipe,
                        MonthDayPipe,
                        YearPipe,
                        HoursPipe,
                        EndOfWeekDisplayPipe,
                    ],
                    exports: [
                        NovoEventTypeLegendElement,
                        NovoAgendaMonthViewElement,
                        NovoAgendaMonthHeaderElement,
                        NovoAgendaMonthDayElement,
                        NovoAgendaWeekViewElement,
                        NovoAgendaWeekHeaderElement,
                        NovoAgendaWeekEventElement,
                        NovoAgendaDayViewElement,
                        NovoAgendaDayEventElement,
                        NovoAgendaHourSegmentElement,
                        NovoAgendaAllDayEventElement,
                        NovoAgendaDateChangeElement,
                        WeekdayPipe,
                        DayOfMonthPipe,
                        MonthPipe,
                        MonthDayPipe,
                        YearPipe,
                        HoursPipe,
                        EndOfWeekDisplayPipe,
                    ],
                },] }
    ];

    var NovoAsideRef = /** @class */ (function () {
        function NovoAsideRef(component, params, overlayRef) {
            this.component = component;
            this.params = params;
            this.overlayRef = overlayRef;
            this._beforeClose = new rxjs.Subject();
            this._afterClosed = new rxjs.Subject();
            this.isClosed = false;
        }
        Object.defineProperty(NovoAsideRef.prototype, "onClosed", {
            // Gets a promise that is resolved when the dialog is closed.
            get: function () {
                return this._afterClosed.toPromise();
            },
            enumerable: false,
            configurable: true
        });
        NovoAsideRef.prototype.afterClosed = function () {
            return this._afterClosed.asObservable();
        };
        NovoAsideRef.prototype.beforeClose = function () {
            return this._beforeClose.asObservable();
        };
        NovoAsideRef.prototype.close = function (result) {
            var _this = this;
            // Listen for animation 'start' events
            this.componentInstance.animationStateChanged
                .pipe(operators.filter(function (event) { return event.phaseName === 'start'; }), operators.take(1))
                .subscribe(function () {
                _this._beforeClose.next(result);
                _this._beforeClose.complete();
                _this.overlayRef.detachBackdrop();
            });
            // Listen for animation 'done' events
            this.componentInstance.animationStateChanged
                .pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'leave'; }), operators.take(1))
                .subscribe(function () {
                _this.isClosed = true;
                _this.overlayRef.dispose();
                _this._afterClosed.next(result);
                _this._afterClosed.complete();
                // Make sure to also clear the reference to the
                // component instance to avoid memory leaks
                _this.componentInstance = null;
            });
            // Start exit animation
            this.componentInstance.startExitAnimation();
        };
        return NovoAsideRef;
    }());

    var slideInOut = animations.trigger('slideInOut', [
        animations.state('void', animations.style({ transform: 'translateX(100%)' })),
        animations.state('enter', animations.style({ transform: 'none' })),
        animations.state('leave', animations.style({ transform: 'translateX(100%)' })),
        animations.transition('* => *', animations.animate('800ms cubic-bezier(0.2, 1, 0.3, 1)')),
    ]);

    var AsideComponent = /** @class */ (function () {
        function AsideComponent(injector, asideRef) {
            this.injector = injector;
            this.asideRef = asideRef;
            this.animationStateChanged = new i0.EventEmitter();
            this.animationState = 'enter';
            this.component = new portal.ComponentPortal(asideRef.component, null, injector);
        }
        AsideComponent.prototype.onAnimationStart = function (event) {
            this.animationStateChanged.emit(event);
        };
        AsideComponent.prototype.onAnimationDone = function (event) {
            this.animationStateChanged.emit(event);
        };
        AsideComponent.prototype.startExitAnimation = function () {
            this.animationState = 'leave';
        };
        return AsideComponent;
    }());
    AsideComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-aside',
                    template: "<div class=\"aside-panel\" [@slideInOut]=\"animationState\" (@slideInOut.start)=\"onAnimationStart($event)\"\n  (@slideInOut.done)=\"onAnimationDone($event)\">\n  <ng-template [cdkPortalOutlet]=\"component\"></ng-template>\n</div>",
                    animations: [slideInOut],
                    styles: [":host .aside-panel{align-items:stretch;background-color:var(--background-bright,#fff);display:flex;height:100vh;justify-content:stretch;max-width:540px;min-width:-webkit-min-content;min-width:-moz-min-content;min-width:min-content;padding:0;position:absolute;right:0;top:0;width:50%}"]
                },] }
    ];
    AsideComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: NovoAsideRef }
    ]; };
    AsideComponent.propDecorators = {
        animationStateChanged: [{ type: i0.Output }]
    };

    var DEFAULT_CONFIG = {
        hasBackdrop: true,
        backdropClass: 'aside-overlay-backdrop',
        panelClass: 'aside-overlay-panel',
    };
    var NovoAsideService = /** @class */ (function () {
        function NovoAsideService(injector, overlay) {
            this.injector = injector;
            this.overlay = overlay;
        }
        NovoAsideService.prototype.open = function (component, params, config) {
            if (params === void 0) { params = {}; }
            if (config === void 0) { config = {}; }
            // Override default configuration
            var asideConfig = this.getOverlayConfig(Object.assign(Object.assign({}, DEFAULT_CONFIG), config));
            // Returns an OverlayRef which is a PortalHost
            var overlayRef = this.createOverlay(asideConfig);
            // Instantiate remote control
            var asideRef = new NovoAsideRef(component, params, overlayRef);
            var overlayComponent = this.attachAsideContainer(AsideComponent, overlayRef, asideConfig, asideRef);
            // Pass the instance of the overlay component to the remote control
            asideRef.componentInstance = overlayComponent;
            overlayRef.backdropClick().subscribe(function () { return asideRef.close(); });
            return asideRef;
        };
        NovoAsideService.prototype.createOverlay = function (config) {
            return this.overlay.create(config);
        };
        NovoAsideService.prototype.attachAsideContainer = function (component, overlayRef, config, asideRef) {
            var injector = this.createInjector(config, asideRef);
            var containerPortal = new portal.ComponentPortal(component, null, injector);
            var containerRef = overlayRef.attach(containerPortal);
            return containerRef.instance;
        };
        NovoAsideService.prototype.createInjector = function (config, asideRef) {
            var injectionTokens = new WeakMap();
            injectionTokens.set(NovoAsideRef, asideRef);
            return new portal.PortalInjector(this.injector, injectionTokens);
        };
        NovoAsideService.prototype.getOverlayConfig = function (config) {
            // const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
            var scrollStrategy = config.hasBackdrop ? this.overlay.scrollStrategies.block() : this.overlay.scrollStrategies.noop();
            return {
                scrollStrategy: scrollStrategy,
                hasBackdrop: config.hasBackdrop,
                backdropClass: config.backdropClass,
                panelClass: config.panelClass,
            };
        };
        return NovoAsideService;
    }());
    NovoAsideService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NovoAsideService_Factory() { return new NovoAsideService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Overlay)); }, token: NovoAsideService, providedIn: "root" });
    NovoAsideService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    NovoAsideService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Overlay }
    ]; };

    var NovoAsideModule = /** @class */ (function () {
        function NovoAsideModule() {
        }
        return NovoAsideModule;
    }());
    NovoAsideModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.OverlayModule, portal.PortalModule],
                    declarations: [AsideComponent],
                    providers: [NovoAsideService],
                    entryComponents: [AsideComponent],
                },] }
    ];

    // NG2
    var NovoAvatarElement = /** @class */ (function () {
        function NovoAvatarElement(sanitizer) {
            this.sanitizer = sanitizer;
            this.size = 'medium';
            this.shape = 'round';
        }
        Object.defineProperty(NovoAvatarElement.prototype, "hb_classBinding", {
            get: function () {
                return ["avatar-size-" + this.size, "avatar-shape-" + this.shape, "avatar-color-" + this.color];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAvatarElement.prototype, "background", {
            get: function () {
                if (!this.image && !this.source.profileImage)
                    return;
                return "url(" + (this.image || this.source.profileImage) + ")";
            },
            enumerable: false,
            configurable: true
        });
        NovoAvatarElement.prototype.ngOnInit = function () {
            var src;
            if ((this.source && this.source !== '') || this.label) {
                if (this.source.profileImage) {
                    // this.src = this.source.profileImage;
                    return;
                }
                else if (this.source.logo) {
                    src = this.source.logo;
                }
                else {
                    var first = this.label || this.source.firstName
                        ? this.source.firstName.charAt(0)
                        : this.source.name
                            ? this.source.name.charAt(0)
                            : this.source.username
                                ? this.source.username.charAt(0)
                                : '';
                    var last = this.source.lastName ? this.source.lastName.charAt(0) : '';
                    // Defining Colors
                    var colors = [
                        '#1abc9c',
                        '#16a085',
                        '#f1c40f',
                        '#f39c12',
                        '#2ecc71',
                        '#27ae60',
                        '#e67e22',
                        '#d35400',
                        '#3498db',
                        '#2980b9',
                        '#e74c3c',
                        '#c0392b',
                        '#9b59b6',
                        '#8e44ad',
                        '#bdc3c7',
                        '#34495e',
                        '#2c3e50',
                        '#95a5a6',
                        '#7f8c8d',
                        '#ec87bf',
                        '#d870ad',
                        '#f69785',
                        '#9ba37e',
                        '#b49255',
                        '#b49255',
                        '#a94136',
                    ];
                    var lighterColors = [
                        '#15D6B0',
                        '#16A069',
                        '#F1D60F',
                        '#F3AC12',
                        '#2ED85B',
                        '#28BC7F',
                        '#E66322',
                        '#D3002B',
                        '#6534DB',
                        '#29B2B9',
                        '#E73C63',
                        '#DB6D31',
                        '#CB48B5',
                        '#6944AD',
                        '#38536D',
                        '#3D6473',
                        '#394A6C',
                        '#92BCB7',
                        '#7D99A2',
                        '#F14F76',
                        '#CB5CDA',
                        '#FFB475',
                        '#B9CE6E',
                        '#DDAA4F',
                        '#CD6F45',
                        '#B9354A',
                    ];
                    var settings = {
                        // Default settings
                        textColor: '#ffffff',
                        height: 100,
                        width: 100,
                        fontSize: 50,
                        fontWeight: 400,
                        fontFamily: 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif',
                    };
                    // making the text object
                    var colorIndex = Math.floor((first.charCodeAt(0) - 65) % colors.length);
                    var cobj = document.createElement('text');
                    cobj.setAttribute('text-anchor', 'middle');
                    cobj.setAttribute('x', '50%');
                    cobj.setAttribute('y', '50%');
                    cobj.setAttribute('dy', '0.35em');
                    cobj.setAttribute('pointer-events', 'auto');
                    cobj.setAttribute('fill', settings.textColor);
                    cobj.setAttribute('font-family', settings.fontFamily);
                    cobj.style.fontWeight = settings.fontWeight;
                    cobj.style.fontSize = settings.fontSize + "px";
                    var ltrs = document.createTextNode(this.label || first + last);
                    cobj.appendChild(ltrs);
                    var svg = document.createElement('svg');
                    svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                    svg.setAttribute('pointer-events', 'none');
                    svg.setAttribute('width', settings.width);
                    svg.setAttribute('height', settings.height);
                    // this.setPrefixedValue(svg, 'background', colors[colorIndex]);
                    this.setPrefixedValue(svg, 'background', "linear-gradient(-45deg, " + colors[colorIndex] + " 0%, " + lighterColors[colorIndex] + " 100%)");
                    svg.style.width = settings.width + "px";
                    svg.style.height = settings.height + "px";
                    svg.appendChild(cobj);
                    var top = document.createElement('div');
                    top.appendChild(svg);
                    var svgHtml = window.btoa(unescape(encodeURIComponent(top.innerHTML)));
                    src = "data:image/svg+xml;base64, " + svgHtml;
                }
                this.src = this.sanitizer.bypassSecurityTrustUrl(src);
            }
        };
        NovoAvatarElement.prototype.setPrefixedValue = function (elm, prop, value) {
            var prefixes = ['-moz-', '-webkit-', '-o-', '-ms-', '-khtml-'];
            // Clear
            elm.style[prop] = '';
            var starting = elm.style[prop];
            // Try raw first
            try {
                elm.style[prop] = value;
                if (elm.style[prop] !== starting) {
                    return;
                }
            }
            catch (e) {
                // no op
            }
            // Try prefixes
            for (var i = 0; i < prefixes.length; ++i) {
                var v = prefixes[i] + value;
                try {
                    elm.style[prop] = v;
                    if (elm.style[prop] !== starting) {
                        return;
                    }
                }
                catch (e2) {
                    // no op
                }
            }
        };
        NovoAvatarElement.prototype._isValidURL = function (str) {
            var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
                '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
                '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
                '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
            return !!pattern.test(str);
        };
        return NovoAvatarElement;
    }());
    NovoAvatarElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-avatar',
                    template: '<img *ngIf="src" [src]="src"/>',
                    styles: [":host{background-color:var(--background-muted);background-position:50%;background-size:cover;display:inline-block;height:30px;overflow:hidden;position:relative;width:30px}:host img{border-radius:inherit;height:inherit;width:inherit}:host.avatar-size-small{height:20px;width:20px}:host.avatar-size-large{height:40px;width:40px}:host.avatar-shape-round{border-radius:2em}:host.avatar-shape-square{border-radius:.4em}:host.avatar-color-black{background-color:#000;color:#fff}:host.avatar-color-white{background-color:#fff;color:#3d464d}:host.avatar-color-gray,:host.avatar-color-grey{background-color:#9e9e9e;color:#3d464d}:host.avatar-color-bright,:host.avatar-color-offWhite{background-color:#f7f7f7;color:#3d464d}:host.avatar-color-light{background-color:#dbdbdb;color:#3d464d}:host.avatar-color-neutral{background-color:#4f5361;color:#fff}:host.avatar-color-dark{background-color:#3d464d;color:#fff}:host.avatar-color-orange{background-color:#ff6900;color:#3d464d}:host.avatar-color-navigation{background-color:#202945;color:#fff}:host.avatar-color-skyBlue{background-color:#009bdf;color:#fff}:host.avatar-color-steel{background-color:#5b6770;color:#fff}:host.avatar-color-metal{background-color:#637893;color:#fff}:host.avatar-color-sand{background-color:#f4f4f4;color:#3d464d}:host.avatar-color-silver{background-color:#e2e2e2;color:#3d464d}:host.avatar-color-stone{background-color:#bebebe;color:#3d464d}:host.avatar-color-ash{background-color:#a0a0a0;color:#3d464d}:host.avatar-color-slate{background-color:#707070;color:#fff}:host.avatar-color-onyx{background-color:#526980;color:#fff}:host.avatar-color-charcoal{background-color:#282828;color:#fff}:host.avatar-color-moonlight{background-color:#1a242f;color:#fff}:host.avatar-color-midnight{background-color:#202945;color:#fff}:host.avatar-color-darkness{background-color:#161f27;color:#fff}:host.avatar-color-navy{background-color:#0d2d42;color:#fff}:host.avatar-color-aqua{background-color:#3bafda;color:#3d464d}:host.avatar-color-ocean{background-color:#4a89dc;color:#fff}:host.avatar-color-mint{background-color:#37bc9b;color:#3d464d}:host.avatar-color-grass{background-color:#8cc152;color:#fff}:host.avatar-color-sunflower{background-color:#f6b042;color:#fff}:host.avatar-color-bittersweet{background-color:#eb6845;color:#fff}:host.avatar-color-grapefruit{background-color:#da4453;color:#fff}:host.avatar-color-carnation{background-color:#d770ad;color:#fff}:host.avatar-color-lavender{background-color:#967adc;color:#fff}:host.avatar-color-mountain{background-color:#9678b6;color:#fff}:host.avatar-color-info,:host.avatar-color-positive{background-color:#4a89dc;color:#fff}:host.avatar-color-success{background-color:#8cc152;color:#fff}:host.avatar-color-danger,:host.avatar-color-error,:host.avatar-color-negative{background-color:#da4453;color:#fff}:host.avatar-color-warning{background-color:#f6b042;color:#fff}:host.avatar-color-empty{background-color:#cccdcc;color:#3d464d}:host.avatar-color-disabled{background-color:#bebebe;color:#3d464d}:host.avatar-color-background{background-color:#f7f7f7;color:#3d464d}:host.avatar-color-backgroundDark{background-color:#e2e2e2;color:#3d464d}:host.avatar-color-presentation{background-color:#5b6770;color:#fff}:host.avatar-color-bullhorn{background-color:#ff6900;color:#3d464d}:host.avatar-color-pulse{background-color:#3bafda;color:#3d464d}:host.avatar-color-company{background-color:#39d;color:#fff}:host.avatar-color-candidate{background-color:#4b7;color:#fff}:host.avatar-color-lead{background-color:#a69;color:#fff}:host.avatar-color-clientcontact,:host.avatar-color-contact{background-color:#fa4;color:#fff}:host.avatar-color-opportunity{background-color:#625;color:#fff}:host.avatar-color-job,:host.avatar-color-joborder{background-color:#b56;color:#fff}:host.avatar-color-submission{background-color:#a9adbb;color:#3d464d}:host.avatar-color-sendout{background-color:#747884;color:#fff}:host.avatar-color-placement{background-color:#0b344f;color:#fff}:host.avatar-color-note{background-color:#747884;color:#fff}:host.avatar-color-contract{background-color:#454ea0;color:#fff}:host.avatar-color-billableCharge,:host.avatar-color-corporateUser,:host.avatar-color-credential,:host.avatar-color-distributionList,:host.avatar-color-earnCode,:host.avatar-color-invoiceStatement,:host.avatar-color-jobCode,:host.avatar-color-payableCharge,:host.avatar-color-person,:host.avatar-color-user{background-color:#696d79;color:#fff}:host(.menu-active){box-shadow:0 0 4px 1px var(--selection)}"]
                },] }
    ];
    NovoAvatarElement.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoAvatarElement.propDecorators = {
        source: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        image: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        shape: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        hb_classBinding: [{ type: i0.HostBinding, args: ['class',] }],
        background: [{ type: i0.HostBinding, args: ['style.backgroundImage',] }]
    };

    // NG2
    var NovoAvatarStackElement = /** @class */ (function () {
        function NovoAvatarStackElement() {
            this.total = 0;
            this.showTotal = false;
            this.remainingCount = 0;
        }
        NovoAvatarStackElement.prototype.ngAfterViewInit = function () {
            // viewChildren is set
            if (this.total - this.viewChildren.length > 0) {
                this.remainingCount = this.total - this.viewChildren.length;
                this.showTotal = true;
            }
        };
        return NovoAvatarStackElement;
    }());
    NovoAvatarStackElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-avatar-stack',
                    template: "\n    <ng-content></ng-content>\n    <novo-avatar *ngIf=\"showTotal\" label=\"+5\"></novo-avatar>\n  ",
                    styles: [":host{display:inline-flex;flex-flow:row nowrap}:host::ng-deep novo-avatar{transition:all .1s ease-in-out}:host::ng-deep novo-avatar img{border:1px solid #fff}:host::ng-deep novo-avatar+novo-avatar{margin-left:-15px}:host::ng-deep novo-avatar:first-child{z-index:5}:host::ng-deep novo-avatar:nth-child(2){z-index:4}:host::ng-deep novo-avatar:nth-child(3){z-index:3}:host::ng-deep novo-avatar:nth-child(4){z-index:2}:host::ng-deep novo-avatar:nth-child(5){z-index:1}:host::ng-deep novo-avatar:nth-child(n+6){display:none;margin-left:-15px;opacity:0;z-index:0}:host:hover::ng-deep novo-avatar{margin-left:0;margin-right:1px}:host:hover::ng-deep novo-avatar:nth-child(n+6){display:unset;opacity:1}"]
                },] }
    ];
    NovoAvatarStackElement.propDecorators = {
        total: [{ type: i0.Input }],
        viewChildren: [{ type: i0.ViewChildren, args: [NovoAvatarElement,] }]
    };

    // NG2
    var NovoAvatarModule = /** @class */ (function () {
        function NovoAvatarModule() {
        }
        return NovoAvatarModule;
    }());
    NovoAvatarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoAvatarElement, NovoAvatarStackElement],
                    exports: [NovoAvatarElement, NovoAvatarStackElement],
                },] }
    ];

    var BreadcrumbService = /** @class */ (function () {
        function BreadcrumbService(router) {
            this.router = router;
        }
        BreadcrumbService.prototype.navigateTo = function ($event, item) {
            if ($event.button !== 0 || $event.ctrlKey || $event.metaKey || $event.shiftKey) {
                return;
            }
            if (typeof item.target === 'string' && item.target !== '_self') {
                return;
            }
            $event.preventDefault();
            this.router.navigateByUrl(item.link);
        };
        return BreadcrumbService;
    }());
    BreadcrumbService.decorators = [
        { type: i0.Injectable }
    ];
    BreadcrumbService.ctorParameters = function () { return [
        { type: router.Router }
    ]; };

    var BreadcrumbElement = /** @class */ (function () {
        function BreadcrumbElement(breadcrumbService) {
            this.breadcrumbService = breadcrumbService;
            this.source = [];
        }
        BreadcrumbElement.prototype.navigateTo = function ($event, item) {
            this.breadcrumbService.navigateTo($event, item);
        };
        return BreadcrumbElement;
    }());
    BreadcrumbElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-breadcrumb',
                    template: "<ng-container *ngIf=\"source && source.length\">\n  <novo-breadcrumb-item *ngFor=\"let item of source\" [showMenu]=\"item.showMenu\" [isSearch]=\"item.isSearch\"\n    [menuList]=\"item.menuList\" [customMenuTemplate]=\"item.customMenuTemplate\">\n    <a *ngIf=\"!item.noNavigation && (!item.linkType || item.linkType === 'hrefLink')\" rel=\"noopener\" [href]=\"item.link\"\n      [target]=\"item.target ? item.target : '_self'\">{{ item.title }}</a>\n    <a *ngIf=\"!item.noNavigation && item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\"\n      [href]=\"item.link\" (click)=\"navigateTo($event, item)\">{{ item.title }}</a>\n    <span *ngIf=\"item.noNavigation\">{{ item.title }}</span>\n  </novo-breadcrumb-item>\n</ng-container>\n<ng-container *ngIf=\"!(source && source.length)\">\n  <ng-content></ng-content>\n</ng-container>",
                    styles: [":host{align-items:center;display:flex}:host ::ng-deep novo-breadcrumb-item:last-child .novo-breadcrumb-separator{display:none}"]
                },] }
    ];
    BreadcrumbElement.ctorParameters = function () { return [
        { type: BreadcrumbService }
    ]; };
    BreadcrumbElement.propDecorators = {
        separatorIcon: [{ type: i0.Input }],
        source: [{ type: i0.Input }]
    };

    var BreadcrumbItemElement = /** @class */ (function () {
        function BreadcrumbItemElement(breadcrumbComponent, breadcrumbService) {
            this.breadcrumbComponent = breadcrumbComponent;
            this.breadcrumbService = breadcrumbService;
            this.showMenu = false;
            this.isSearch = false;
            this.toggleEvent = new i0.EventEmitter();
        }
        BreadcrumbItemElement.prototype.ngOnInit = function () {
            this.menuListDisplay = this.menuList;
        };
        BreadcrumbItemElement.prototype.onToggle = function ($event) {
            this.isOpen = $event;
            this.toggleEvent.emit($event);
        };
        BreadcrumbItemElement.prototype.searchEvent = function ($event) {
            if (this.menuList) {
                this.menuListDisplay = this.menuList.filter(function (item) { return item.name.toLowerCase().includes($event.toLowerCase()); });
            }
        };
        BreadcrumbItemElement.prototype.navigateTo = function ($event, item) {
            this.breadcrumbService.navigateTo($event, item);
        };
        return BreadcrumbItemElement;
    }());
    BreadcrumbItemElement.decorators = [
        { type: i0.Component, args: [{
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'novo-breadcrumb-item',
                    template: "<ng-container *ngIf=\"showMenu; else breadcrumbContentTpl\">\n  <span [ngClass]=\"{ 'novo-breadcrumb-item-active': isOpen }\" #origin\n    class=\"novo-dropdown-no-border novo-dropdown-origin novo-breadcrumb-dropdown-origin\">\n    <ng-template [ngTemplateOutlet]=\"breadcrumbContentTpl\"></ng-template>\n    <novo-dropdown>\n      <novo-button theme=\"icon\" icon=\"collapse\" size=\"small\"></novo-button>\n      <novo-optgroup class=\"novo-breadcrumb-dropdown-menu\">\n        <div *ngIf=\"isSearch\" class=\"dropdown-search-container\">\n          <novo-search alwaysOpen=\"true\" (searchFn)=\"searchEvent($event)\" [class]=\"'search-in-dropdown'\"></novo-search>\n        </div>\n        <novo-option *ngFor=\"let item of menuListDisplay\" title=\"{{ item.name }}\">\n          <a *ngIf=\"!item.linkType || item.linkType === 'hrefLink'\" [href]=\"item.link\" rel=\"noopener\"\n            [target]=\"item.target ? item.target : '_self'\">{{ item.name }}</a>\n          <a *ngIf=\"item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\" [href]=\"item.link\"\n            (click)=\"navigateTo($event, item)\">{{ item.name }}</a>\n        </novo-option>\n      </novo-optgroup>\n    </novo-dropdown>\n  </span>\n</ng-container>\n\n<ng-template #breadcrumbContentTpl>\n  <span class=\"novo-breadcrumb-item\">\n    <ng-content></ng-content>\n  </span>\n</ng-template>\n\n<ng-template #dropDownMenuTpl>\n  <div>test</div>\n\n</ng-template>\n\n<span class=\"novo-breadcrumb-separator\">\n  <ng-template\n    [ngTemplateOutlet]=\"breadcrumbComponent.separatorIcon ? breadcrumbComponent.separatorIcon : defaultSeparator\"\n    [ngTemplateOutletContext]=\"{\n    $implicit: this\n  }\">\n  </ng-template>\n</span>\n\n<ng-template #defaultSeparator>\n  <span class=\"novo-breadcrumb-separator\">\n    /\n  </span>\n</ng-template>",
                    styles: [".novo-breadcrumb-font-style,:host .novo-breadcrumb-item,:host .novo-breadcrumb-item ::ng-deep a,:host .novo-breadcrumb-separator{color:inherit;display:inline;font-size:var(--font-size-text);font-weight:400;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}.novo-breadcrumb-font-style.text-nowrap,:host .novo-breadcrumb-item ::ng-deep a.text-nowrap,:host .text-nowrap.novo-breadcrumb-item,:host .text-nowrap.novo-breadcrumb-separator{white-space:nowrap}.novo-breadcrumb-font-style.text-ellipsis,:host .novo-breadcrumb-item ::ng-deep a.text-ellipsis,:host .text-ellipsis.novo-breadcrumb-item,:host .text-ellipsis.novo-breadcrumb-separator{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.novo-breadcrumb-font-style.text-size-default,:host .novo-breadcrumb-item ::ng-deep a.text-size-default,:host .text-size-default.novo-breadcrumb-item,:host .text-size-default.novo-breadcrumb-separator{font-size:inherit}.novo-breadcrumb-font-style.text-size-body,:host .novo-breadcrumb-item ::ng-deep a.text-size-body,:host .text-size-body.novo-breadcrumb-item,:host .text-size-body.novo-breadcrumb-separator{font-size:1.3rem}.novo-breadcrumb-font-style.text-size-xs,:host .novo-breadcrumb-item ::ng-deep a.text-size-xs,:host .text-size-xs.novo-breadcrumb-item,:host .text-size-xs.novo-breadcrumb-separator{font-size:1rem}.novo-breadcrumb-font-style.text-size-sm,:host .novo-breadcrumb-item ::ng-deep a.text-size-sm,:host .text-size-sm.novo-breadcrumb-item,:host .text-size-sm.novo-breadcrumb-separator{font-size:1.2rem}.novo-breadcrumb-font-style.text-size-md,:host .novo-breadcrumb-item ::ng-deep a.text-size-md,:host .text-size-md.novo-breadcrumb-item,:host .text-size-md.novo-breadcrumb-separator{font-size:1.3rem}.novo-breadcrumb-font-style.text-size-lg,:host .novo-breadcrumb-item ::ng-deep a.text-size-lg,:host .text-size-lg.novo-breadcrumb-item,:host .text-size-lg.novo-breadcrumb-separator{font-size:1.6rem}.novo-breadcrumb-font-style.text-size-xl,:host .novo-breadcrumb-item ::ng-deep a.text-size-xl,:host .text-size-xl.novo-breadcrumb-item,:host .text-size-xl.novo-breadcrumb-separator{font-size:2rem}.novo-breadcrumb-font-style.text-size-2xl,:host .novo-breadcrumb-item ::ng-deep a.text-size-2xl,:host .text-size-2xl.novo-breadcrumb-item,:host .text-size-2xl.novo-breadcrumb-separator{font-size:2.6rem}.novo-breadcrumb-font-style.text-size-3xl,:host .novo-breadcrumb-item ::ng-deep a.text-size-3xl,:host .text-size-3xl.novo-breadcrumb-item,:host .text-size-3xl.novo-breadcrumb-separator{font-size:3.2rem}.novo-breadcrumb-font-style.text-size-smaller,:host .novo-breadcrumb-item ::ng-deep a.text-size-smaller,:host .text-size-smaller.novo-breadcrumb-item,:host .text-size-smaller.novo-breadcrumb-separator{font-size:.8em}.novo-breadcrumb-font-style.text-size-larger,:host .novo-breadcrumb-item ::ng-deep a.text-size-larger,:host .text-size-larger.novo-breadcrumb-item,:host .text-size-larger.novo-breadcrumb-separator{font-size:1.2em}.novo-breadcrumb-font-style.text-color-black,:host .novo-breadcrumb-item ::ng-deep a.text-color-black,:host .text-color-black.novo-breadcrumb-item,:host .text-color-black.novo-breadcrumb-separator{color:#000}.novo-breadcrumb-font-style.text-color-white,:host .novo-breadcrumb-item ::ng-deep a.text-color-white,:host .text-color-white.novo-breadcrumb-item,:host .text-color-white.novo-breadcrumb-separator{color:#fff}.novo-breadcrumb-font-style.text-color-gray,.novo-breadcrumb-font-style.text-color-grey,:host .novo-breadcrumb-item ::ng-deep a.text-color-gray,:host .novo-breadcrumb-item ::ng-deep a.text-color-grey,:host .text-color-gray.novo-breadcrumb-item,:host .text-color-gray.novo-breadcrumb-separator,:host .text-color-grey.novo-breadcrumb-item,:host .text-color-grey.novo-breadcrumb-separator{color:#9e9e9e}.novo-breadcrumb-font-style.text-color-bright,.novo-breadcrumb-font-style.text-color-offWhite,:host .novo-breadcrumb-item ::ng-deep a.text-color-bright,:host .novo-breadcrumb-item ::ng-deep a.text-color-offWhite,:host .text-color-bright.novo-breadcrumb-item,:host .text-color-bright.novo-breadcrumb-separator,:host .text-color-offWhite.novo-breadcrumb-item,:host .text-color-offWhite.novo-breadcrumb-separator{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-light,:host .novo-breadcrumb-item ::ng-deep a.text-color-light,:host .text-color-light.novo-breadcrumb-item,:host .text-color-light.novo-breadcrumb-separator{color:#dbdbdb}.novo-breadcrumb-font-style.text-color-neutral,:host .novo-breadcrumb-item ::ng-deep a.text-color-neutral,:host .text-color-neutral.novo-breadcrumb-item,:host .text-color-neutral.novo-breadcrumb-separator{color:#4f5361}.novo-breadcrumb-font-style.text-color-dark,:host .novo-breadcrumb-item ::ng-deep a.text-color-dark,:host .text-color-dark.novo-breadcrumb-item,:host .text-color-dark.novo-breadcrumb-separator{color:#3d464d}.novo-breadcrumb-font-style.text-color-orange,:host .novo-breadcrumb-item ::ng-deep a.text-color-orange,:host .text-color-orange.novo-breadcrumb-item,:host .text-color-orange.novo-breadcrumb-separator{color:#ff6900}.novo-breadcrumb-font-style.text-color-navigation,:host .novo-breadcrumb-item ::ng-deep a.text-color-navigation,:host .text-color-navigation.novo-breadcrumb-item,:host .text-color-navigation.novo-breadcrumb-separator{color:#202945}.novo-breadcrumb-font-style.text-color-skyBlue,:host .novo-breadcrumb-item ::ng-deep a.text-color-skyBlue,:host .text-color-skyBlue.novo-breadcrumb-item,:host .text-color-skyBlue.novo-breadcrumb-separator{color:#009bdf}.novo-breadcrumb-font-style.text-color-steel,:host .novo-breadcrumb-item ::ng-deep a.text-color-steel,:host .text-color-steel.novo-breadcrumb-item,:host .text-color-steel.novo-breadcrumb-separator{color:#5b6770}.novo-breadcrumb-font-style.text-color-metal,:host .novo-breadcrumb-item ::ng-deep a.text-color-metal,:host .text-color-metal.novo-breadcrumb-item,:host .text-color-metal.novo-breadcrumb-separator{color:#637893}.novo-breadcrumb-font-style.text-color-sand,:host .novo-breadcrumb-item ::ng-deep a.text-color-sand,:host .text-color-sand.novo-breadcrumb-item,:host .text-color-sand.novo-breadcrumb-separator{color:#f4f4f4}.novo-breadcrumb-font-style.text-color-silver,:host .novo-breadcrumb-item ::ng-deep a.text-color-silver,:host .text-color-silver.novo-breadcrumb-item,:host .text-color-silver.novo-breadcrumb-separator{color:#e2e2e2}.novo-breadcrumb-font-style.text-color-stone,:host .novo-breadcrumb-item ::ng-deep a.text-color-stone,:host .text-color-stone.novo-breadcrumb-item,:host .text-color-stone.novo-breadcrumb-separator{color:#bebebe}.novo-breadcrumb-font-style.text-color-ash,:host .novo-breadcrumb-item ::ng-deep a.text-color-ash,:host .text-color-ash.novo-breadcrumb-item,:host .text-color-ash.novo-breadcrumb-separator{color:#a0a0a0}.novo-breadcrumb-font-style.text-color-slate,:host .novo-breadcrumb-item ::ng-deep a.text-color-slate,:host .text-color-slate.novo-breadcrumb-item,:host .text-color-slate.novo-breadcrumb-separator{color:#707070}.novo-breadcrumb-font-style.text-color-onyx,:host .novo-breadcrumb-item ::ng-deep a.text-color-onyx,:host .text-color-onyx.novo-breadcrumb-item,:host .text-color-onyx.novo-breadcrumb-separator{color:#526980}.novo-breadcrumb-font-style.text-color-charcoal,:host .novo-breadcrumb-item ::ng-deep a.text-color-charcoal,:host .text-color-charcoal.novo-breadcrumb-item,:host .text-color-charcoal.novo-breadcrumb-separator{color:#282828}.novo-breadcrumb-font-style.text-color-moonlight,:host .novo-breadcrumb-item ::ng-deep a.text-color-moonlight,:host .text-color-moonlight.novo-breadcrumb-item,:host .text-color-moonlight.novo-breadcrumb-separator{color:#1a242f}.novo-breadcrumb-font-style.text-color-midnight,:host .novo-breadcrumb-item ::ng-deep a.text-color-midnight,:host .text-color-midnight.novo-breadcrumb-item,:host .text-color-midnight.novo-breadcrumb-separator{color:#202945}.novo-breadcrumb-font-style.text-color-darkness,:host .novo-breadcrumb-item ::ng-deep a.text-color-darkness,:host .text-color-darkness.novo-breadcrumb-item,:host .text-color-darkness.novo-breadcrumb-separator{color:#161f27}.novo-breadcrumb-font-style.text-color-navy,:host .novo-breadcrumb-item ::ng-deep a.text-color-navy,:host .text-color-navy.novo-breadcrumb-item,:host .text-color-navy.novo-breadcrumb-separator{color:#0d2d42}.novo-breadcrumb-font-style.text-color-aqua,:host .novo-breadcrumb-item ::ng-deep a.text-color-aqua,:host .text-color-aqua.novo-breadcrumb-item,:host .text-color-aqua.novo-breadcrumb-separator{color:#3bafda}.novo-breadcrumb-font-style.text-color-ocean,:host .novo-breadcrumb-item ::ng-deep a.text-color-ocean,:host .text-color-ocean.novo-breadcrumb-item,:host .text-color-ocean.novo-breadcrumb-separator{color:#4a89dc}.novo-breadcrumb-font-style.text-color-mint,:host .novo-breadcrumb-item ::ng-deep a.text-color-mint,:host .text-color-mint.novo-breadcrumb-item,:host .text-color-mint.novo-breadcrumb-separator{color:#37bc9b}.novo-breadcrumb-font-style.text-color-grass,:host .novo-breadcrumb-item ::ng-deep a.text-color-grass,:host .text-color-grass.novo-breadcrumb-item,:host .text-color-grass.novo-breadcrumb-separator{color:#8cc152}.novo-breadcrumb-font-style.text-color-sunflower,:host .novo-breadcrumb-item ::ng-deep a.text-color-sunflower,:host .text-color-sunflower.novo-breadcrumb-item,:host .text-color-sunflower.novo-breadcrumb-separator{color:#f6b042}.novo-breadcrumb-font-style.text-color-bittersweet,:host .novo-breadcrumb-item ::ng-deep a.text-color-bittersweet,:host .text-color-bittersweet.novo-breadcrumb-item,:host .text-color-bittersweet.novo-breadcrumb-separator{color:#eb6845}.novo-breadcrumb-font-style.text-color-grapefruit,:host .novo-breadcrumb-item ::ng-deep a.text-color-grapefruit,:host .text-color-grapefruit.novo-breadcrumb-item,:host .text-color-grapefruit.novo-breadcrumb-separator{color:#da4453}.novo-breadcrumb-font-style.text-color-carnation,:host .novo-breadcrumb-item ::ng-deep a.text-color-carnation,:host .text-color-carnation.novo-breadcrumb-item,:host .text-color-carnation.novo-breadcrumb-separator{color:#d770ad}.novo-breadcrumb-font-style.text-color-lavender,:host .novo-breadcrumb-item ::ng-deep a.text-color-lavender,:host .text-color-lavender.novo-breadcrumb-item,:host .text-color-lavender.novo-breadcrumb-separator{color:#967adc}.novo-breadcrumb-font-style.text-color-mountain,:host .novo-breadcrumb-item ::ng-deep a.text-color-mountain,:host .text-color-mountain.novo-breadcrumb-item,:host .text-color-mountain.novo-breadcrumb-separator{color:#9678b6}.novo-breadcrumb-font-style.text-color-info,.novo-breadcrumb-font-style.text-color-positive,:host .novo-breadcrumb-item ::ng-deep a.text-color-info,:host .novo-breadcrumb-item ::ng-deep a.text-color-positive,:host .text-color-info.novo-breadcrumb-item,:host .text-color-info.novo-breadcrumb-separator,:host .text-color-positive.novo-breadcrumb-item,:host .text-color-positive.novo-breadcrumb-separator{color:#4a89dc}.novo-breadcrumb-font-style.text-color-success,:host .novo-breadcrumb-item ::ng-deep a.text-color-success,:host .text-color-success.novo-breadcrumb-item,:host .text-color-success.novo-breadcrumb-separator{color:#8cc152}.novo-breadcrumb-font-style.text-color-danger,.novo-breadcrumb-font-style.text-color-error,.novo-breadcrumb-font-style.text-color-negative,:host .novo-breadcrumb-item ::ng-deep a.text-color-danger,:host .novo-breadcrumb-item ::ng-deep a.text-color-error,:host .novo-breadcrumb-item ::ng-deep a.text-color-negative,:host .text-color-danger.novo-breadcrumb-item,:host .text-color-danger.novo-breadcrumb-separator,:host .text-color-error.novo-breadcrumb-item,:host .text-color-error.novo-breadcrumb-separator,:host .text-color-negative.novo-breadcrumb-item,:host .text-color-negative.novo-breadcrumb-separator{color:#da4453}.novo-breadcrumb-font-style.text-color-warning,:host .novo-breadcrumb-item ::ng-deep a.text-color-warning,:host .text-color-warning.novo-breadcrumb-item,:host .text-color-warning.novo-breadcrumb-separator{color:#f6b042}.novo-breadcrumb-font-style.text-color-empty,:host .novo-breadcrumb-item ::ng-deep a.text-color-empty,:host .text-color-empty.novo-breadcrumb-item,:host .text-color-empty.novo-breadcrumb-separator{color:#cccdcc}.novo-breadcrumb-font-style.text-color-disabled,:host .novo-breadcrumb-item ::ng-deep a.text-color-disabled,:host .text-color-disabled.novo-breadcrumb-item,:host .text-color-disabled.novo-breadcrumb-separator{color:#bebebe}.novo-breadcrumb-font-style.text-color-background,:host .novo-breadcrumb-item ::ng-deep a.text-color-background,:host .text-color-background.novo-breadcrumb-item,:host .text-color-background.novo-breadcrumb-separator{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-backgroundDark,:host .novo-breadcrumb-item ::ng-deep a.text-color-backgroundDark,:host .text-color-backgroundDark.novo-breadcrumb-item,:host .text-color-backgroundDark.novo-breadcrumb-separator{color:#e2e2e2}.novo-breadcrumb-font-style.text-color-presentation,:host .novo-breadcrumb-item ::ng-deep a.text-color-presentation,:host .text-color-presentation.novo-breadcrumb-item,:host .text-color-presentation.novo-breadcrumb-separator{color:#5b6770}.novo-breadcrumb-font-style.text-color-bullhorn,:host .novo-breadcrumb-item ::ng-deep a.text-color-bullhorn,:host .text-color-bullhorn.novo-breadcrumb-item,:host .text-color-bullhorn.novo-breadcrumb-separator{color:#ff6900}.novo-breadcrumb-font-style.text-color-pulse,:host .novo-breadcrumb-item ::ng-deep a.text-color-pulse,:host .text-color-pulse.novo-breadcrumb-item,:host .text-color-pulse.novo-breadcrumb-separator{color:#3bafda}.novo-breadcrumb-font-style.text-color-company,:host .novo-breadcrumb-item ::ng-deep a.text-color-company,:host .text-color-company.novo-breadcrumb-item,:host .text-color-company.novo-breadcrumb-separator{color:#39d}.novo-breadcrumb-font-style.text-color-candidate,:host .novo-breadcrumb-item ::ng-deep a.text-color-candidate,:host .text-color-candidate.novo-breadcrumb-item,:host .text-color-candidate.novo-breadcrumb-separator{color:#4b7}.novo-breadcrumb-font-style.text-color-lead,:host .novo-breadcrumb-item ::ng-deep a.text-color-lead,:host .text-color-lead.novo-breadcrumb-item,:host .text-color-lead.novo-breadcrumb-separator{color:#a69}.novo-breadcrumb-font-style.text-color-clientcontact,.novo-breadcrumb-font-style.text-color-contact,:host .novo-breadcrumb-item ::ng-deep a.text-color-clientcontact,:host .novo-breadcrumb-item ::ng-deep a.text-color-contact,:host .text-color-clientcontact.novo-breadcrumb-item,:host .text-color-clientcontact.novo-breadcrumb-separator,:host .text-color-contact.novo-breadcrumb-item,:host .text-color-contact.novo-breadcrumb-separator{color:#fa4}.novo-breadcrumb-font-style.text-color-opportunity,:host .novo-breadcrumb-item ::ng-deep a.text-color-opportunity,:host .text-color-opportunity.novo-breadcrumb-item,:host .text-color-opportunity.novo-breadcrumb-separator{color:#625}.novo-breadcrumb-font-style.text-color-job,.novo-breadcrumb-font-style.text-color-joborder,:host .novo-breadcrumb-item ::ng-deep a.text-color-job,:host .novo-breadcrumb-item ::ng-deep a.text-color-joborder,:host .text-color-job.novo-breadcrumb-item,:host .text-color-job.novo-breadcrumb-separator,:host .text-color-joborder.novo-breadcrumb-item,:host .text-color-joborder.novo-breadcrumb-separator{color:#b56}.novo-breadcrumb-font-style.text-color-submission,:host .novo-breadcrumb-item ::ng-deep a.text-color-submission,:host .text-color-submission.novo-breadcrumb-item,:host .text-color-submission.novo-breadcrumb-separator{color:#a9adbb}.novo-breadcrumb-font-style.text-color-sendout,:host .novo-breadcrumb-item ::ng-deep a.text-color-sendout,:host .text-color-sendout.novo-breadcrumb-item,:host .text-color-sendout.novo-breadcrumb-separator{color:#747884}.novo-breadcrumb-font-style.text-color-placement,:host .novo-breadcrumb-item ::ng-deep a.text-color-placement,:host .text-color-placement.novo-breadcrumb-item,:host .text-color-placement.novo-breadcrumb-separator{color:#0b344f}.novo-breadcrumb-font-style.text-color-note,:host .novo-breadcrumb-item ::ng-deep a.text-color-note,:host .text-color-note.novo-breadcrumb-item,:host .text-color-note.novo-breadcrumb-separator{color:#747884}.novo-breadcrumb-font-style.text-color-contract,:host .novo-breadcrumb-item ::ng-deep a.text-color-contract,:host .text-color-contract.novo-breadcrumb-item,:host .text-color-contract.novo-breadcrumb-separator{color:#454ea0}.novo-breadcrumb-font-style.text-color-billableCharge,.novo-breadcrumb-font-style.text-color-corporateUser,.novo-breadcrumb-font-style.text-color-credential,.novo-breadcrumb-font-style.text-color-distributionList,.novo-breadcrumb-font-style.text-color-earnCode,.novo-breadcrumb-font-style.text-color-invoiceStatement,.novo-breadcrumb-font-style.text-color-jobCode,.novo-breadcrumb-font-style.text-color-payableCharge,.novo-breadcrumb-font-style.text-color-person,.novo-breadcrumb-font-style.text-color-user,:host .novo-breadcrumb-item ::ng-deep a.text-color-billableCharge,:host .novo-breadcrumb-item ::ng-deep a.text-color-corporateUser,:host .novo-breadcrumb-item ::ng-deep a.text-color-credential,:host .novo-breadcrumb-item ::ng-deep a.text-color-distributionList,:host .novo-breadcrumb-item ::ng-deep a.text-color-earnCode,:host .novo-breadcrumb-item ::ng-deep a.text-color-invoiceStatement,:host .novo-breadcrumb-item ::ng-deep a.text-color-jobCode,:host .novo-breadcrumb-item ::ng-deep a.text-color-payableCharge,:host .novo-breadcrumb-item ::ng-deep a.text-color-person,:host .novo-breadcrumb-item ::ng-deep a.text-color-user,:host .text-color-billableCharge.novo-breadcrumb-item,:host .text-color-billableCharge.novo-breadcrumb-separator,:host .text-color-corporateUser.novo-breadcrumb-item,:host .text-color-corporateUser.novo-breadcrumb-separator,:host .text-color-credential.novo-breadcrumb-item,:host .text-color-credential.novo-breadcrumb-separator,:host .text-color-distributionList.novo-breadcrumb-item,:host .text-color-distributionList.novo-breadcrumb-separator,:host .text-color-earnCode.novo-breadcrumb-item,:host .text-color-earnCode.novo-breadcrumb-separator,:host .text-color-invoiceStatement.novo-breadcrumb-item,:host .text-color-invoiceStatement.novo-breadcrumb-separator,:host .text-color-jobCode.novo-breadcrumb-item,:host .text-color-jobCode.novo-breadcrumb-separator,:host .text-color-payableCharge.novo-breadcrumb-item,:host .text-color-payableCharge.novo-breadcrumb-separator,:host .text-color-person.novo-breadcrumb-item,:host .text-color-person.novo-breadcrumb-separator,:host .text-color-user.novo-breadcrumb-item,:host .text-color-user.novo-breadcrumb-separator{color:#696d79}.novo-breadcrumb-font-style.margin-before,:host .margin-before.novo-breadcrumb-item,:host .margin-before.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.margin-before{margin-top:.4rem}.novo-breadcrumb-font-style.margin-after,:host .margin-after.novo-breadcrumb-item,:host .margin-after.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.margin-after{margin-bottom:.8rem}.novo-breadcrumb-font-style.text-length-small,:host .novo-breadcrumb-item ::ng-deep a.text-length-small,:host .text-length-small.novo-breadcrumb-item,:host .text-length-small.novo-breadcrumb-separator{max-width:40ch}.novo-breadcrumb-font-style.text-length-medium,:host .novo-breadcrumb-item ::ng-deep a.text-length-medium,:host .text-length-medium.novo-breadcrumb-item,:host .text-length-medium.novo-breadcrumb-separator{max-width:55ch}.novo-breadcrumb-font-style.text-length-large,:host .novo-breadcrumb-item ::ng-deep a.text-length-large,:host .text-length-large.novo-breadcrumb-item,:host .text-length-large.novo-breadcrumb-separator{max-width:70ch}.novo-breadcrumb-font-style.text-weight-hairline,:host .novo-breadcrumb-item ::ng-deep a.text-weight-hairline,:host .text-weight-hairline.novo-breadcrumb-item,:host .text-weight-hairline.novo-breadcrumb-separator{font-weight:100}.novo-breadcrumb-font-style.text-weight-thin,:host .novo-breadcrumb-item ::ng-deep a.text-weight-thin,:host .text-weight-thin.novo-breadcrumb-item,:host .text-weight-thin.novo-breadcrumb-separator{font-weight:200}.novo-breadcrumb-font-style.text-weight-light,:host .novo-breadcrumb-item ::ng-deep a.text-weight-light,:host .text-weight-light.novo-breadcrumb-item,:host .text-weight-light.novo-breadcrumb-separator{font-weight:300}.novo-breadcrumb-font-style.text-weight-normal,:host .novo-breadcrumb-item ::ng-deep a.text-weight-normal,:host .text-weight-normal.novo-breadcrumb-item,:host .text-weight-normal.novo-breadcrumb-separator{font-weight:400}.novo-breadcrumb-font-style.text-weight-medium,:host .novo-breadcrumb-item ::ng-deep a.text-weight-medium,:host .text-weight-medium.novo-breadcrumb-item,:host .text-weight-medium.novo-breadcrumb-separator{font-weight:500}.novo-breadcrumb-font-style.text-weight-semibold,:host .novo-breadcrumb-item ::ng-deep a.text-weight-semibold,:host .text-weight-semibold.novo-breadcrumb-item,:host .text-weight-semibold.novo-breadcrumb-separator{font-weight:600}.novo-breadcrumb-font-style.text-weight-bold,:host .novo-breadcrumb-item ::ng-deep a.text-weight-bold,:host .text-weight-bold.novo-breadcrumb-item,:host .text-weight-bold.novo-breadcrumb-separator{font-weight:700}.novo-breadcrumb-font-style.text-weight-extrabold,:host .novo-breadcrumb-item ::ng-deep a.text-weight-extrabold,:host .text-weight-extrabold.novo-breadcrumb-item,:host .text-weight-extrabold.novo-breadcrumb-separator{font-weight:800}.novo-breadcrumb-font-style.text-weight-heavy,:host .novo-breadcrumb-item ::ng-deep a.text-weight-heavy,:host .text-weight-heavy.novo-breadcrumb-item,:host .text-weight-heavy.novo-breadcrumb-separator{font-weight:900}.novo-breadcrumb-font-style.text-weight-lighter,:host .novo-breadcrumb-item ::ng-deep a.text-weight-lighter,:host .text-weight-lighter.novo-breadcrumb-item,:host .text-weight-lighter.novo-breadcrumb-separator{font-weight:lighter}.novo-breadcrumb-font-style.text-weight-bolder,:host .novo-breadcrumb-item ::ng-deep a.text-weight-bolder,:host .text-weight-bolder.novo-breadcrumb-item,:host .text-weight-bolder.novo-breadcrumb-separator{font-weight:bolder}:host,:host .novo-breadcrumb-item{align-items:center;display:flex;flex-flow:row nowrap}:host .novo-breadcrumb-item{cursor:auto}:host .novo-breadcrumb-item ::ng-deep a:hover{text-decoration:none}:host .novo-breadcrumb-item ::ng-deep a{color:#4a89dc;cursor:pointer}:host .novo-breadcrumb-item ::ng-deep a:focus{text-decoration:none}:host .novo-breadcrumb-down-icon{cursor:pointer;display:inline-block;height:16px;margin-right:-5px;outline:none;text-align:center;vertical-align:middle;width:16px}:host .novo-breadcrumb-down-icon:hover svg g polygon{fill:var(--text-main,#3d464d)}:host .novo-breadcrumb-item-active{color:var(--text-main,#3d464d)}:host .novo-breadcrumb-item-active ::ng-deep a{color:var(--text-main,#3d464d);text-decoration:none}:host .novo-breadcrumb-item-active svg g polygon{fill:var(--text-main,#3d464d)}:host .novo-breadcrumb-item-active span{color:var(--text-main,#3d464d)}:host .novo-breadcrumb-separator{margin:0 3px}:host .novo-breadcrumb-dropdown-menu{max-width:200px;padding:10px 0}:host .novo-breadcrumb-dropdown-menu li{cursor:pointer;font-size:12px;line-height:36px;overflow:hidden;padding:0 15px;text-overflow:ellipsis;white-space:nowrap;width:200px}:host .novo-breadcrumb-dropdown-menu li a{color:#3d464d;display:inline-block;line-height:36px;width:170px}:host .novo-breadcrumb-dropdown-menu li a:focus{text-decoration:none}:host .novo-breadcrumb-dropdown-menu li:hover{background:#dbdbdb}:host .novo-breadcrumb-dropdown-menu li:hover a{text-decoration:none}:host .novo-search-container{max-width:200px}:host span.novo-breadcrumb-dropdown-origin{display:inline-flex;min-width:unset;padding:0}:host novo-search{width:100%}"]
                },] }
    ];
    BreadcrumbItemElement.ctorParameters = function () { return [
        { type: BreadcrumbElement },
        { type: BreadcrumbService }
    ]; };
    BreadcrumbItemElement.propDecorators = {
        showMenu: [{ type: i0.Input }],
        customMenuTemplate: [{ type: i0.Input }],
        menuList: [{ type: i0.Input }],
        isSearch: [{ type: i0.Input }],
        toggleEvent: [{ type: i0.Output }]
    };

    var NovoThemeOptions = /** @class */ (function () {
        function NovoThemeOptions() {
        }
        return NovoThemeOptions;
    }());
    var NovoTheme = /** @class */ (function () {
        function NovoTheme() {
            this._defaultTheme = { themeName: 'modern-light' };
            this.onThemeChange = new i0.EventEmitter();
        }
        Object.defineProperty(NovoTheme.prototype, "themeName", {
            /** Name of the theme being used. defaults to `modern-light` */
            get: function () {
                var _a;
                return ((_a = this._currentTheme) === null || _a === void 0 ? void 0 : _a.themeName) || this._defaultTheme.themeName;
            },
            set: function (value) {
                this._currentTheme = { themeName: value };
                this.changeTheme(this._currentTheme);
            },
            enumerable: false,
            configurable: true
        });
        NovoTheme.prototype.use = function (options) {
            // future: don't change the theme if the theme given is already selected
            this.changeTheme(options);
            // this might become async in future
            return rxjs.of(options);
        };
        /**
         * Changes the current theme
         */
        NovoTheme.prototype.changeTheme = function (theme) {
            this._currentTheme = theme;
            this.onThemeChange.emit({ themeName: theme.themeName, options: theme });
        };
        return NovoTheme;
    }());
    NovoTheme.ɵprov = i0.ɵɵdefineInjectable({ factory: function NovoTheme_Factory() { return new NovoTheme(); }, token: NovoTheme, providedIn: "root" });
    NovoTheme.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];

    // tslint:disable: directive-selector
    var AccentColorDirective = /** @class */ (function () {
        function AccentColorDirective(el, theme, cdr) {
            var _this = this;
            this.el = el;
            this.theme = theme;
            this.cdr = cdr;
            this.subscription = this.theme.onThemeChange.subscribe(function (event) {
                _this.cdr.markForCheck();
            });
        }
        Object.defineProperty(AccentColorDirective.prototype, "hb_textColor", {
            get: function () {
                // Support legacy classic theme... for now
                if (this.theme.themeName === 'classic') {
                    return "novo-theme-" + this.accent;
                }
                return "novo-accent-" + this.accent;
            },
            enumerable: false,
            configurable: true
        });
        AccentColorDirective.prototype.onDestroy = function () {
            this.subscription.unsubscribe();
        };
        return AccentColorDirective;
    }());
    AccentColorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[accent]',
                },] }
    ];
    AccentColorDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoTheme },
        { type: i0.ChangeDetectorRef }
    ]; };
    AccentColorDirective.propDecorators = {
        accent: [{ type: i0.Input }],
        hb_textColor: [{ type: i0.HostBinding, args: ['class',] }]
    };

    // tslint:disable: directive-selector
    var BackgroundColorDirective = /** @class */ (function () {
        function BackgroundColorDirective(el) {
            this.el = el;
        }
        Object.defineProperty(BackgroundColorDirective.prototype, "hb_bgColor", {
            get: function () {
                return isValidColor(this.bg) ? 'novo-background-custom' : "novo-background-" + this.bg;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BackgroundColorDirective.prototype, "hb_bgStyle", {
            get: function () {
                return isValidColor(this.bg) ? this.bg : null;
            },
            enumerable: false,
            configurable: true
        });
        return BackgroundColorDirective;
    }());
    BackgroundColorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[bg]',
                },] }
    ];
    BackgroundColorDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    BackgroundColorDirective.propDecorators = {
        bg: [{ type: i0.Input }],
        hb_bgColor: [{ type: i0.HostBinding, args: ['class',] }],
        hb_bgStyle: [{ type: i0.HostBinding, args: ['style.background-color',] }]
    };
    function isValidColor(color) {
        return color.startsWith('#') || color.startsWith('rgb');
    }

    // tslint:disable: directive-selector
    var BorderDirective = /** @class */ (function () {
        function BorderDirective(el) {
            this.el = el;
            this.borderStyle = 'solid';
            this.borderColor = '#eaecef';
            this.borderWidth = 1;
        }
        Object.defineProperty(BorderDirective.prototype, "hb_border", {
            // @HostBinding('style.borderStyle') get getBorderStyle() {
            //   return this.border;
            // }
            // @HostBinding('style.borderWidth') get getBorderWidth() {
            //   return this.width;
            // }
            // @HostBinding('style.borderColor') get getBorderColor() {
            //   return this.borderColor;
            // }
            get: function () {
                return "border-" + this.border;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BorderDirective.prototype, "hb_border_left", {
            get: function () {
                return this.borderLeft || this.bl || this.bx || this.borderX;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BorderDirective.prototype, "hb_border_right", {
            get: function () {
                return this.borderRight || this.bt || this.bx || this.borderX;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BorderDirective.prototype, "hb_border_top", {
            get: function () {
                return this.borderTop || this.bt || this.by || this.borderY;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(BorderDirective.prototype, "hb_border_bottom", {
            get: function () {
                return this.borderBottom || this.bt || this.by || this.borderY;
            },
            enumerable: false,
            configurable: true
        });
        return BorderDirective;
    }());
    BorderDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[border], [bb], [borderBottom], [bt], [borderTop], [bl], [borderLeft], [br], [borderRight], [bx], [borderX], [by], [borderY]',
                },] }
    ];
    BorderDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    BorderDirective.propDecorators = {
        borderStyle: [{ type: i0.Input }],
        borderColor: [{ type: i0.Input }],
        borderWidth: [{ type: i0.Input }],
        border: [{ type: i0.Input }],
        borderLeft: [{ type: i0.Input }],
        bl: [{ type: i0.Input }],
        borderRight: [{ type: i0.Input }],
        br: [{ type: i0.Input }],
        borderTop: [{ type: i0.Input }],
        bt: [{ type: i0.Input }],
        borderBottom: [{ type: i0.Input }],
        bb: [{ type: i0.Input }],
        borderX: [{ type: i0.Input }],
        bx: [{ type: i0.Input }],
        borderY: [{ type: i0.Input }],
        by: [{ type: i0.Input }],
        hb_border: [{ type: i0.HostBinding, args: ['class',] }],
        hb_border_left: [{ type: i0.HostBinding, args: ['style.border-left',] }],
        hb_border_right: [{ type: i0.HostBinding, args: ['style.border-right',] }],
        hb_border_top: [{ type: i0.HostBinding, args: ['style.border-top',] }],
        hb_border_bottom: [{ type: i0.HostBinding, args: ['style.border-bottom',] }]
    };

    // tslint:disable: directive-selector
    var TextColorDirective = /** @class */ (function () {
        function TextColorDirective(el) {
            this.el = el;
        }
        Object.defineProperty(TextColorDirective.prototype, "hb_textColor", {
            get: function () {
                return isValidColor$1(this.txc) ? 'novo-text-custom' : "novo-text-" + this.txc;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TextColorDirective.prototype, "hb_textStyle", {
            get: function () {
                return isValidColor$1(this.txc) ? this.txc : null;
            },
            enumerable: false,
            configurable: true
        });
        return TextColorDirective;
    }());
    TextColorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[txc]',
                },] }
    ];
    TextColorDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    TextColorDirective.propDecorators = {
        txc: [{ type: i0.Input }],
        hb_textColor: [{ type: i0.HostBinding, args: ['class',] }],
        hb_textStyle: [{ type: i0.HostBinding, args: ['style.color',] }]
    };
    function isValidColor$1(color) {
        return color.startsWith('#') || color.startsWith('rgb');
    }

    // tslint:disable: directive-selector
    var FillColorDirective = /** @class */ (function () {
        function FillColorDirective(el) {
            this.el = el;
        }
        Object.defineProperty(FillColorDirective.prototype, "hb_textColor", {
            get: function () {
                return "novo-fill-" + this.fill;
            },
            enumerable: false,
            configurable: true
        });
        return FillColorDirective;
    }());
    FillColorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[fill]',
                },] }
    ];
    FillColorDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    FillColorDirective.propDecorators = {
        fill: [{ type: i0.Input }],
        hb_textColor: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var FlexDirective = /** @class */ (function () {
        function FlexDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            // this.renderer.setStyle(this.el.nativeElement, 'display', 'flex');
        }
        Object.defineProperty(FlexDirective.prototype, "flex", {
            get: function () {
                return this._flex;
            },
            set: function (value) {
                if (!value) {
                    this._flex = '1 1 auto';
                }
                else {
                    this._flex = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        return FlexDirective;
    }());
    FlexDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: '[flex]',
                },] }
    ];
    FlexDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    FlexDirective.propDecorators = {
        flex: [{ type: i0.HostBinding, args: ['style.flex',] }, { type: i0.Input }]
    };

    // tslint:disable: directive-selector
    /*
    Prop	CSS Property	Theme Field
    m, margin	margin	space
    mt, marginTop	margin-top	space
    mr, marginRight	margin-right	space
    mb, marginBottom	margin-bottom	space
    ml, marginLeft	margin-left	space
    mx	margin-left and margin-right	space
    my	margin-top and margin-bottom	space
    p, padding	padding	space
    pt, paddingTop	padding-top	space
    pr, paddingRight	padding-right	space
    pb, paddingBottom	padding-bottom	space
    pl, paddingLeft	padding-left	space
    px	padding-left and padding-right	space
    py	padding-top and padding-bottom	space
    */
    /*
    // Selectors generated with the following code
    const directions = ['Top', 'Right', 'Bottom', 'Left', 'X', 'Y'];
    const abbrDirections = directions.map((d) => d.slice(0, 1).toLowerCase());
    const marginAttrs = [
      '[m]',
      '[margin]',
      ...directions.map((dir) => `[margin${dir}]`),
      ...abbrDirections.map((dir) => `[m${dir}]`),
    ];
    const paddingAttrs = [
      '[p]',
      '[padding]',
      ...directions.map((dir) => `[padding${dir}]`),
      ...abbrDirections.map((dir) => `[p${dir}]`),
    ];

    const selectors = [...marginAttrs, ...paddingAttrs];
    */
    var getSpacingToken = function (value) {
        if (Object.keys(tokens.spacing).includes(value)) {
            return tokens.spacing[value];
        }
        // TODO: Maybe Validate Value ie.(rem, px)
        return value;
    };
    var MarginDirective = /** @class */ (function () {
        function MarginDirective() {
        }
        Object.defineProperty(MarginDirective.prototype, "hb_margin", {
            // @HostBinding('style.margin') get hb_margin() {
            //   return getSpacingToken(this.margin || this.m);
            // }
            get: function () {
                return "margin-" + (this.margin || this.m);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarginDirective.prototype, "hb_margin_left", {
            get: function () {
                return getSpacingToken(this.marginLeft || this.ml || this.mx || this.marginX);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarginDirective.prototype, "hb_margin_right", {
            get: function () {
                return getSpacingToken(this.marginRight || this.mr || this.mx || this.marginX);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarginDirective.prototype, "hb_margin_top", {
            get: function () {
                return getSpacingToken(this.marginTop || this.mt || this.my || this.marginY);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MarginDirective.prototype, "hb_margin_bottom", {
            get: function () {
                return getSpacingToken(this.marginBottom || this.mb || this.my || this.marginY);
            },
            enumerable: false,
            configurable: true
        });
        return MarginDirective;
    }());
    MarginDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: max-line-length
                    selector: '[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]',
                },] }
    ];
    MarginDirective.propDecorators = {
        margin: [{ type: i0.Input }],
        m: [{ type: i0.Input }],
        marginLeft: [{ type: i0.Input }],
        ml: [{ type: i0.Input }],
        marginRight: [{ type: i0.Input }],
        mr: [{ type: i0.Input }],
        marginTop: [{ type: i0.Input }],
        mt: [{ type: i0.Input }],
        marginBottom: [{ type: i0.Input }],
        mb: [{ type: i0.Input }],
        marginX: [{ type: i0.Input }],
        mx: [{ type: i0.Input }],
        marginY: [{ type: i0.Input }],
        my: [{ type: i0.Input }],
        hb_margin: [{ type: i0.HostBinding, args: ['class',] }],
        hb_margin_left: [{ type: i0.HostBinding, args: ['style.margin-left',] }],
        hb_margin_right: [{ type: i0.HostBinding, args: ['style.margin-right',] }],
        hb_margin_top: [{ type: i0.HostBinding, args: ['style.margin-top',] }],
        hb_margin_bottom: [{ type: i0.HostBinding, args: ['style.margin-bottom',] }]
    };
    var PaddingDirective = /** @class */ (function () {
        function PaddingDirective() {
        }
        Object.defineProperty(PaddingDirective.prototype, "hb_padding", {
            get: function () {
                return "padding-" + (this.padding || this.p);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaddingDirective.prototype, "hb_padding_left", {
            // @HostBinding('class') get hb_padding() {
            //   return `padding-${this.padding || this.p}`;
            // }
            get: function () {
                return getSpacingToken(this.paddingLeft || this.pl || this.px || this.paddingX);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaddingDirective.prototype, "hb_padding_right", {
            get: function () {
                return getSpacingToken(this.paddingRight || this.pr || this.px || this.paddingX);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaddingDirective.prototype, "hb_padding_top", {
            get: function () {
                return getSpacingToken(this.paddingTop || this.pt || this.py || this.paddingY);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PaddingDirective.prototype, "hb_padding_bottom", {
            get: function () {
                return getSpacingToken(this.paddingBottom || this.pb || this.py || this.paddingY);
            },
            enumerable: false,
            configurable: true
        });
        return PaddingDirective;
    }());
    PaddingDirective.decorators = [
        { type: i0.Directive, args: [{
                    // tslint:disable-next-line: max-line-length
                    selector: '[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]',
                },] }
    ];
    PaddingDirective.propDecorators = {
        padding: [{ type: i0.Input }],
        p: [{ type: i0.Input }],
        paddingLeft: [{ type: i0.Input }],
        pl: [{ type: i0.Input }],
        paddingRight: [{ type: i0.Input }],
        pr: [{ type: i0.Input }],
        paddingTop: [{ type: i0.Input }],
        pt: [{ type: i0.Input }],
        paddingBottom: [{ type: i0.Input }],
        pb: [{ type: i0.Input }],
        paddingX: [{ type: i0.Input }],
        px: [{ type: i0.Input }],
        paddingY: [{ type: i0.Input }],
        py: [{ type: i0.Input }],
        hb_padding: [{ type: i0.HostBinding, args: ['class',] }],
        hb_padding_left: [{ type: i0.HostBinding, args: ['style.padding-left',] }],
        hb_padding_right: [{ type: i0.HostBinding, args: ['style.padding-right',] }],
        hb_padding_top: [{ type: i0.HostBinding, args: ['style.padding-top',] }],
        hb_padding_bottom: [{ type: i0.HostBinding, args: ['style.padding-bottom',] }]
    };
    var GapDirective = /** @class */ (function () {
        function GapDirective() {
        }
        Object.defineProperty(GapDirective.prototype, "hb_gap", {
            get: function () {
                return getSpacingToken(this.gap);
            },
            enumerable: false,
            configurable: true
        });
        return GapDirective;
    }());
    GapDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[gap]',
                },] }
    ];
    GapDirective.propDecorators = {
        gap: [{ type: i0.Input }],
        hb_gap: [{ type: i0.HostBinding, args: ['style.gap',] }]
    };

    // tslint:disable: directive-selector
    var ThemeColorDirective = /** @class */ (function () {
        function ThemeColorDirective(el) {
            this.el = el;
        }
        Object.defineProperty(ThemeColorDirective.prototype, "hb_textColor", {
            get: function () {
                return "novo-theme-" + this.theme;
            },
            enumerable: false,
            configurable: true
        });
        return ThemeColorDirective;
    }());
    ThemeColorDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[theme]',
                },] }
    ];
    ThemeColorDirective.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ThemeColorDirective.propDecorators = {
        theme: [{ type: i0.Input }],
        hb_textColor: [{ type: i0.HostBinding, args: ['class',] }]
    };

    var NovoTemplate = /** @class */ (function () {
        function NovoTemplate(template) {
            this.template = template;
        }
        NovoTemplate.prototype.getType = function () {
            return this.name;
        };
        return NovoTemplate;
    }());
    NovoTemplate.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoTemplate]',
                },] }
    ];
    NovoTemplate.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };
    NovoTemplate.propDecorators = {
        type: [{ type: i0.Input }],
        name: [{ type: i0.Input, args: ['novoTemplate',] }]
    };

    /**
     * Component that shows a simplified checkbox without including any kind of "real" checkbox.
     * Meant to be used when the checkbox is purely decorative and a large number of them will be
     * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
     * Note that theming is meant to be handled by the parent element, e.g.
     * `novo-primary .novo-pseudo-checkbox`.
     *
     * Note that this component will be completely invisible to screen-reader users. This is *not*
     * interchangeable with `<novo-checkbox>` and should *not* be used if the user would directly
     * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
     * of more complex components that appropriately handle selected / checked state.
     * @docs-private
     */
    var NovoPseudoCheckbox = /** @class */ (function () {
        function NovoPseudoCheckbox(_animationMode) {
            this._animationMode = _animationMode;
            /** Display state of the checkbox. */
            this.state = 'unchecked';
            /** Display state of the checkbox. */
            this.shape = 'box';
            /** Whether the checkbox is disabled. */
            this.disabled = false;
        }
        return NovoPseudoCheckbox;
    }());
    NovoPseudoCheckbox.decorators = [
        { type: i0.Component, args: [{
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    selector: 'novo-pseudo-checkbox',
                    template: " <i\n    [class.bhi-checkbox-empty]=\"state === 'unchecked' && shape === 'box'\"\n    [class.bhi-checkbox-filled]=\"state === 'checked' && shape === 'box'\"\n    [class.bhi-checkbox-indeterminate]=\"state === 'indeterminate' && shape === 'box'\"\n    [class.bhi-circle-o]=\"state === 'unchecked' && shape === 'circle'\"\n    [class.bhi-check-circle-filled]=\"state === 'checked' && shape === 'circle'\"\n    [class.bhi-circle]=\"state === 'indeterminate' && shape === 'circle'\"\n    [class.bhi-box-empty]=\"state === 'unchecked' && shape === 'line'\"\n    [class.bhi-check]=\"state === 'checked' && shape === 'line'\"\n    [class.bhi-box-minus-o]=\"state === 'indeterminate' && shape === 'line'\"\n  ></i>",
                    host: {
                        class: 'novo-pseudo-checkbox',
                        '[class.novo-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
                        '[class.novo-pseudo-checkbox-checked]': 'state === "checked"',
                        '[class.novo-pseudo-checkbox-disabled]': 'disabled',
                        '[class._novo-animation-noopable]': '_animationMode === "NoopAnimations"',
                    },
                    styles: [".novo-pseudo-checkbox{box-sizing:border-box;cursor:pointer;display:inline-block;flex-shrink:0;height:16px;position:relative;transition:color .3s ease-in-out;vertical-align:middle;width:16px}.novo-pseudo-checkbox.novo-pseudo-checkbox-checked,.novo-pseudo-checkbox.novo-pseudo-checkbox-indeterminate{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out;color:#4a89dc}.novo-pseudo-checkbox i{font-size:1.4rem;line-height:1rem}.novo-pseudo-checkbox-disabled{cursor:default}"]
                },] }
    ];
    NovoPseudoCheckbox.ctorParameters = function () { return [
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] }
    ]; };
    NovoPseudoCheckbox.propDecorators = {
        state: [{ type: i0.Input }],
        shape: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }]
    };

    // import {NovoCommonModule} from '../common-behaviors/common-module';
    var NovoPseudoCheckboxModule = /** @class */ (function () {
        function NovoPseudoCheckboxModule() {
        }
        return NovoPseudoCheckboxModule;
    }());
    NovoPseudoCheckboxModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                    exports: [NovoPseudoCheckbox],
                    declarations: [NovoPseudoCheckbox],
                },] }
    ];

    /** Mixin to augment a directive with a `disabled` property. */
    function mixinDisabled(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this._disabled = false;
                return _this;
            }
            Object.defineProperty(class_1.prototype, "disabled", {
                get: function () {
                    return this._disabled;
                },
                set: function (value) {
                    this._disabled = coercion.coerceBooleanProperty(value);
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    /**
     * Injection token used to provide the parent component to options.
     */
    var NOVO_OPTION_PARENT_COMPONENT = new i0.InjectionToken('NOVO_OPTION_PARENT_COMPONENT');

    // Notes on the accessibility pattern used for `novo-optgroup`.
    // The option group has two different "modes": regular and inert. The regular mode uses the
    // recommended a11y pattern which has `role="group"` on the group element with `aria-labelledby`
    // pointing to the label. This works for `novo-select`, but it seems to hit a bug for autocomplete
    // under VoiceOver where the group doesn't get read out at all. The bug appears to be that if
    // there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),
    // VoiceOver on Safari won't read it out.
    // We've introduced the `inert` mode as a workaround. Under this mode, all a11y attributes are
    // removed from the group, and we get the screen reader to read out the group label by mirroring it
    // inside an invisible element in the option. This is sub-optimal, because the screen reader will
    // repeat the group label on each navigation, whereas the default pattern only reads the group when
    // the user enters a new group. The following alternate approaches were considered:
    // 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control
    //    when the text will be read out so sometimes it comes in too late or never if the user
    //    navigates quickly.
    // 2. `<novo-option aria-describedby="groupLabel"` - This works on Safari, but VoiceOver in Chrome
    //    won't read out the description at all.
    // 3. `<novo-option aria-labelledby="optionLabel groupLabel"` - This works on Chrome, but Safari
    //     doesn't read out the text at all. Furthermore, on
    // Boilerplate for applying mixins to NovoOptgroup.
    var NovoOptgroupBase = /** @class */ (function () {
        function NovoOptgroupBase() {
            /** Unique id for the underlying label. */
            this._labelId = "novo-optgroup-label-" + _uniqueOptgroupIdCounter++;
        }
        return NovoOptgroupBase;
    }());
    NovoOptgroupBase.decorators = [
        { type: i0.Directive }
    ];
    var NovoOptgroupMixinBase = mixinDisabled(NovoOptgroupBase);
    // Counter for unique group ids.
    var _uniqueOptgroupIdCounter = 0;
    /**
     * Injection token that can be used to reference instances of `NovoOptgroup`. It serves as
     * alternative token to the actual `NovoOptgroup` class which could cause unnecessary
     * retention of the class and its component metadata.
     */
    var NOVO_OPTGROUP = new i0.InjectionToken('NovoOptgroup');
    /**
     * Component that is used to group instances of `novo-option`.
     */
    var NovoOptgroup = /** @class */ (function (_super) {
        __extends(NovoOptgroup, _super);
        function NovoOptgroup(parent) {
            var _this = this;
            var _a;
            _this = _super.call(this) || this;
            _this._inert = (_a = parent === null || parent === void 0 ? void 0 : parent.inertGroups) !== null && _a !== void 0 ? _a : false;
            return _this;
        }
        return NovoOptgroup;
    }(NovoOptgroupMixinBase));
    NovoOptgroup.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-optgroup',
                    exportAs: 'novoOptgroup',
                    template: "<span *ngIf=\"label\" class=\"novo-optgroup-label\" aria-hidden=\"true\" [id]=\"_labelId\">{{ label }}</span>\n<ng-content select=\"novo-option, ng-container, novo-divider, cdk-virtual-scroll-viewport\"></ng-content>",
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    inputs: ['disabled', 'label'],
                    host: {
                        class: 'novo-optgroup',
                        '[attr.role]': '_inert ? null : "group"',
                        '[attr.aria-disabled]': '_inert ? null : disabled.toString()',
                        '[attr.aria-labelledby]': '_inert ? null : _labelId',
                        '[class.novo-optgroup-disabled]': 'disabled',
                    },
                    providers: [{ provide: NOVO_OPTGROUP, useExisting: NovoOptgroup }],
                    styles: [".novo-optgroup-label{color:var(--text-muted);color:#9e9e9e;cursor:default;display:block;flex:1;font-size:var(--font-size-label);font-weight:500;line-height:1.375;overflow-wrap:break-word;padding:5px 10px;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle;word-break:word-break}.novo-optgroup-label.text-nowrap{white-space:nowrap}.novo-optgroup-label.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.novo-optgroup-label.text-size-default{font-size:inherit}.novo-optgroup-label.text-size-body{font-size:1.3rem}.novo-optgroup-label.text-size-xs{font-size:1rem}.novo-optgroup-label.text-size-sm{font-size:1.2rem}.novo-optgroup-label.text-size-md{font-size:1.3rem}.novo-optgroup-label.text-size-lg{font-size:1.6rem}.novo-optgroup-label.text-size-xl{font-size:2rem}.novo-optgroup-label.text-size-2xl{font-size:2.6rem}.novo-optgroup-label.text-size-3xl{font-size:3.2rem}.novo-optgroup-label.text-size-smaller{font-size:.8em}.novo-optgroup-label.text-size-larger{font-size:1.2em}.novo-optgroup-label.text-color-black{color:#000}.novo-optgroup-label.text-color-white{color:#fff}.novo-optgroup-label.text-color-gray,.novo-optgroup-label.text-color-grey{color:#9e9e9e}.novo-optgroup-label.text-color-bright,.novo-optgroup-label.text-color-offWhite{color:#f7f7f7}.novo-optgroup-label.text-color-light{color:#dbdbdb}.novo-optgroup-label.text-color-neutral{color:#4f5361}.novo-optgroup-label.text-color-dark{color:#3d464d}.novo-optgroup-label.text-color-orange{color:#ff6900}.novo-optgroup-label.text-color-navigation{color:#202945}.novo-optgroup-label.text-color-skyBlue{color:#009bdf}.novo-optgroup-label.text-color-steel{color:#5b6770}.novo-optgroup-label.text-color-metal{color:#637893}.novo-optgroup-label.text-color-sand{color:#f4f4f4}.novo-optgroup-label.text-color-silver{color:#e2e2e2}.novo-optgroup-label.text-color-stone{color:#bebebe}.novo-optgroup-label.text-color-ash{color:#a0a0a0}.novo-optgroup-label.text-color-slate{color:#707070}.novo-optgroup-label.text-color-onyx{color:#526980}.novo-optgroup-label.text-color-charcoal{color:#282828}.novo-optgroup-label.text-color-moonlight{color:#1a242f}.novo-optgroup-label.text-color-midnight{color:#202945}.novo-optgroup-label.text-color-darkness{color:#161f27}.novo-optgroup-label.text-color-navy{color:#0d2d42}.novo-optgroup-label.text-color-aqua{color:#3bafda}.novo-optgroup-label.text-color-ocean{color:#4a89dc}.novo-optgroup-label.text-color-mint{color:#37bc9b}.novo-optgroup-label.text-color-grass{color:#8cc152}.novo-optgroup-label.text-color-sunflower{color:#f6b042}.novo-optgroup-label.text-color-bittersweet{color:#eb6845}.novo-optgroup-label.text-color-grapefruit{color:#da4453}.novo-optgroup-label.text-color-carnation{color:#d770ad}.novo-optgroup-label.text-color-lavender{color:#967adc}.novo-optgroup-label.text-color-mountain{color:#9678b6}.novo-optgroup-label.text-color-info,.novo-optgroup-label.text-color-positive{color:#4a89dc}.novo-optgroup-label.text-color-success{color:#8cc152}.novo-optgroup-label.text-color-danger,.novo-optgroup-label.text-color-error,.novo-optgroup-label.text-color-negative{color:#da4453}.novo-optgroup-label.text-color-warning{color:#f6b042}.novo-optgroup-label.text-color-empty{color:#cccdcc}.novo-optgroup-label.text-color-disabled{color:#bebebe}.novo-optgroup-label.text-color-background{color:#f7f7f7}.novo-optgroup-label.text-color-backgroundDark{color:#e2e2e2}.novo-optgroup-label.text-color-presentation{color:#5b6770}.novo-optgroup-label.text-color-bullhorn{color:#ff6900}.novo-optgroup-label.text-color-pulse{color:#3bafda}.novo-optgroup-label.text-color-company{color:#39d}.novo-optgroup-label.text-color-candidate{color:#4b7}.novo-optgroup-label.text-color-lead{color:#a69}.novo-optgroup-label.text-color-clientcontact,.novo-optgroup-label.text-color-contact{color:#fa4}.novo-optgroup-label.text-color-opportunity{color:#625}.novo-optgroup-label.text-color-job,.novo-optgroup-label.text-color-joborder{color:#b56}.novo-optgroup-label.text-color-submission{color:#a9adbb}.novo-optgroup-label.text-color-sendout{color:#747884}.novo-optgroup-label.text-color-placement{color:#0b344f}.novo-optgroup-label.text-color-note{color:#747884}.novo-optgroup-label.text-color-contract{color:#454ea0}.novo-optgroup-label.text-color-billableCharge,.novo-optgroup-label.text-color-corporateUser,.novo-optgroup-label.text-color-credential,.novo-optgroup-label.text-color-distributionList,.novo-optgroup-label.text-color-earnCode,.novo-optgroup-label.text-color-invoiceStatement,.novo-optgroup-label.text-color-jobCode,.novo-optgroup-label.text-color-payableCharge,.novo-optgroup-label.text-color-person,.novo-optgroup-label.text-color-user{color:#696d79}.novo-optgroup-label.margin-before{margin-top:.4rem}.novo-optgroup-label.margin-after{margin-bottom:.8rem}.novo-optgroup-label.text-length-small{max-width:40ch}.novo-optgroup-label.text-length-medium{max-width:55ch}.novo-optgroup-label.text-length-large{max-width:70ch}.novo-optgroup-label.text-weight-hairline{font-weight:100}.novo-optgroup-label.text-weight-thin{font-weight:200}.novo-optgroup-label.text-weight-light{font-weight:300}.novo-optgroup-label.text-weight-normal{font-weight:400}.novo-optgroup-label.text-weight-medium{font-weight:500}.novo-optgroup-label.text-weight-semibold{font-weight:600}.novo-optgroup-label.text-weight-bold{font-weight:700}.novo-optgroup-label.text-weight-extrabold{font-weight:800}.novo-optgroup-label.text-weight-heavy{font-weight:900}.novo-optgroup-label.text-weight-lighter{font-weight:lighter}.novo-optgroup-label.text-weight-bolder{font-weight:bolder}"]
                },] }
    ];
    NovoOptgroup.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [NOVO_OPTION_PARENT_COMPONENT,] }, { type: i0.Optional }] }
    ]; };

    /**
     * Option IDs need to be unique across components, so this counter exists outside of
     * the component definition.
     */
    var _uniqueIdCounter = 0;
    /** Event object emitted by NovoOption when selected or deselected. */
    var NovoOptionSelectionChange = /** @class */ (function () {
        function NovoOptionSelectionChange(
        /** Reference to the option that emitted the event. */
        source, 
        /** Whether the change in the option's value was a result of a user action. */
        isUserInput) {
            if (isUserInput === void 0) { isUserInput = false; }
            this.source = source;
            this.isUserInput = isUserInput;
        }
        return NovoOptionSelectionChange;
    }());
    var NovoOptionBase = /** @class */ (function () {
        function NovoOptionBase(_element, _changeDetectorRef, _parent, group) {
            var _this = this;
            this._element = _element;
            this._changeDetectorRef = _changeDetectorRef;
            this._parent = _parent;
            this.group = group;
            this._selected = false;
            this._active = false;
            this._disabled = false;
            this._mostRecentViewValue = '';
            /** TODO: deprecate maybe, check support for table headers */
            this.keepOpen = false;
            this.inert = false;
            /** The unique ID of the option. */
            this.id = "novo-option-" + _uniqueIdCounter++;
            /** Event emitted when the option is selected or deselected. */
            // tslint:disable-next-line:no-output-on-prefix
            this.onSelectionChange = new i0.EventEmitter();
            /** Emits when the state of the option changes and any parents have to be notified. */
            this._stateChanges = new rxjs.Subject();
            // (click) is overridden when defined by user.
            this._clickCapture = rxjs.fromEvent(this._element.nativeElement, 'click', { capture: true }).subscribe(function (evt) {
                _this._handleDisabledClick(evt);
            });
            this._clickPassive = rxjs.fromEvent(this._element.nativeElement, 'click').subscribe(function (evt) {
                setTimeout(function () { return _this._handlePassiveClick(evt); });
            });
        }
        Object.defineProperty(NovoOptionBase.prototype, "selectable", {
            /** If there is no parent then nothing is managing the selection. */
            get: function () {
                return this._parent;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOptionBase.prototype, "multiple", {
            /** Whether the wrapping component is in multiple selection mode. */
            get: function () {
                return this._parent && this._parent.multiple;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOptionBase.prototype, "disabled", {
            /** Whether the option is disabled. */
            get: function () {
                return (this.group && this.group.disabled) || this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOptionBase.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOptionBase.prototype, "active", {
            /**
             * Whether or not the option is currently active and ready to be selected.
             * An active option displays styles as if it is focused, but the
             * focus is actually retained somewhere else. This comes in handy
             * for components like autocomplete where focus must remain on the input.
             */
            get: function () {
                return this._active;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOptionBase.prototype, "viewValue", {
            /**
             * The displayed value of the option. It is necessary to show the selected option in the
             * select's trigger.
             */
            get: function () {
                return (this._getHostElement().textContent || '').trim();
            },
            enumerable: false,
            configurable: true
        });
        /** Selects the option. */
        NovoOptionBase.prototype.select = function () {
            if (!this._selected) {
                this._selected = true;
                this._changeDetectorRef.markForCheck();
                this._emitSelectionChangeEvent();
            }
        };
        /** Deselects the option. */
        NovoOptionBase.prototype.deselect = function () {
            if (this._selected) {
                this._selected = false;
                this._changeDetectorRef.markForCheck();
                this._emitSelectionChangeEvent();
            }
        };
        /** Sets focus onto this option. */
        NovoOptionBase.prototype.focus = function (_origin, options) {
            // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
            // use `NovoOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
            var element = this._getHostElement();
            if (typeof element.focus === 'function') {
                element.focus(options);
            }
        };
        /**
         * This method sets display styles on the option to make it appear
         * active. This is used by the ActiveDescendantKeyManager so key
         * events will display the proper options as active on arrow key events.
         */
        NovoOptionBase.prototype.setActiveStyles = function () {
            if (!this._active) {
                this._active = true;
                this._changeDetectorRef.markForCheck();
            }
        };
        /**
         * This method removes display styles on the option that made it appear
         * active. This is used by the ActiveDescendantKeyManager so key
         * events will display the proper options as active on arrow key events.
         */
        NovoOptionBase.prototype.setInactiveStyles = function () {
            if (this._active) {
                this._active = false;
                this._changeDetectorRef.markForCheck();
            }
        };
        /** Gets the label to be used when determining whether the option should be focused. */
        NovoOptionBase.prototype.getLabel = function () {
            return this.viewValue;
        };
        NovoOptionBase.prototype._handleDisabledClick = function (event) {
            if (this.disabled) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
            }
        };
        NovoOptionBase.prototype._handlePassiveClick = function (event) {
            if (!this.inert) {
                this._selectViaInteraction();
            }
        };
        /** Ensures the option is selected when activated from the keyboard. */
        NovoOptionBase.prototype._handleKeydown = function (event) {
            if (event.target instanceof HTMLInputElement && event.key === "Enter" /* Enter */) {
                this._emitSelectionChangeEvent(!this.keepOpen);
            }
            else if (!(event.target instanceof HTMLInputElement) &&
                (event.key === "Enter" /* Enter */ || event.key === " " /* Space */) &&
                !keycodes.hasModifierKey(event)) {
                this._selectViaInteraction();
                // Prevent the page from scrolling down and form submits.
                event.preventDefault();
            }
        };
        /**
         * `Selects the option while indicating the selection came from the user. Used to
         * determine if the select's view -> model callback should be invoked.`
         */
        NovoOptionBase.prototype._selectViaInteraction = function () {
            if (!this.disabled) {
                this._selected = this.multiple ? !this._selected : true;
                this._changeDetectorRef.markForCheck();
                this._emitSelectionChangeEvent(!this.keepOpen);
            }
        };
        /**
         * Force a click event
         */
        NovoOptionBase.prototype._clickViaInteraction = function () {
            if (!this.disabled) {
                this._element.nativeElement.click();
            }
        };
        /**
         * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
         * attribute from single-selection, unselected options. Including the `aria-selected="false"`
         * attributes adds a significant amount of noise to screen-reader users without providing useful
         * information.
         */
        NovoOptionBase.prototype._getAriaSelected = function () {
            return this.selected || (this.multiple ? false : null);
        };
        /** Returns the correct tabindex for the option depending on disabled state. */
        NovoOptionBase.prototype._getTabIndex = function () {
            return this.disabled ? '-1' : '0';
        };
        /** Gets the host DOM element. */
        NovoOptionBase.prototype._getHostElement = function () {
            return this._element.nativeElement;
        };
        NovoOptionBase.prototype.ngAfterViewChecked = function () {
            // Since parent components could be using the option's label to display the selected values
            // (e.g. `novo-select`) and they don't have a way of knowing if the option's label has changed
            // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
            // relatively cheap, however we still limit them only to selected options in order to avoid
            // hitting the DOM too often.
            if (this._selected) {
                var viewValue = this.viewValue;
                if (viewValue !== this._mostRecentViewValue) {
                    this._mostRecentViewValue = viewValue;
                    this._stateChanges.next();
                }
            }
        };
        NovoOptionBase.prototype.ngOnDestroy = function () {
            this._stateChanges.complete();
            this._clickCapture.unsubscribe();
            this._clickPassive.unsubscribe();
        };
        /** Emits the selection change event. */
        NovoOptionBase.prototype._emitSelectionChangeEvent = function (isUserInput) {
            if (isUserInput === void 0) { isUserInput = false; }
            this.onSelectionChange.emit(new NovoOptionSelectionChange(this, isUserInput));
        };
        return NovoOptionBase;
    }());
    NovoOptionBase.decorators = [
        { type: i0.Directive }
    ];
    NovoOptionBase.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_OPTION_PARENT_COMPONENT,] }] },
        { type: NovoOptgroupBase, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_OPTGROUP,] }] }
    ]; };
    NovoOptionBase.propDecorators = {
        keepOpen: [{ type: i0.Input }],
        inert: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        onSelectionChange: [{ type: i0.Output }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoOptionBase.prototype, "keepOpen", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoOptionBase.prototype, "inert", void 0);
    /**
     * Single option inside of a `<novo-select>` element.
     */
    var NovoOption = /** @class */ (function (_super) {
        __extends(NovoOption, _super);
        function NovoOption(element, changeDetectorRef, parent, group) {
            return _super.call(this, element, changeDetectorRef, parent, group) || this;
        }
        return NovoOption;
    }(NovoOptionBase));
    NovoOption.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-option',
                    exportAs: 'novoOption',
                    host: {
                        role: 'option',
                        '[id]': 'id',
                        '[attr.tabindex]': '_getTabIndex()',
                        '[attr.aria-selected]': '_getAriaSelected()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[class.novo-active]': 'active',
                        '[class.novo-selected]': 'selectable && selected',
                        '[class.novo-option-multiple]': 'multiple',
                        '[class.novo-option-disabled]': 'disabled',
                        '[class.novo-option-inert]': 'inert',
                        '(keydown)': '_handleKeydown($event)',
                        class: 'novo-option novo-focus-indicator',
                    },
                    inputs: ['selected', 'keepOpen', 'inert', 'value', 'inert', 'disabled'],
                    template: "<novo-pseudo-checkbox *ngIf=\"selectable && multiple\" class=\"novo-option-pseudo-checkbox\"\n  [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></novo-pseudo-checkbox>\n\n<span class=\"novo-option-text\">\n  <ng-content></ng-content>\n</span>\n\n<novo-pseudo-checkbox *ngIf=\"selectable && !multiple && selected\" class=\"novo-option-pseudo-checkbox\" state=\"checked\"\n  shape=\"line\"\n  [disabled]=\"disabled\"></novo-pseudo-checkbox>\n\n<ng-content select=\"[novoSuffix]\"></ng-content>\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n<span class=\"cdk-visually-hidden\" *ngIf=\"group && group._inert\">({{ group.label }})</span>",
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-option{-webkit-tap-highlight-color:transparent;align-items:center;box-sizing:border-box;color:inherit;cursor:pointer;display:inline;display:flex;flex:1;flex-direction:row;font-size:var(--font-size-text);font-weight:400;gap:1rem;margin:0;max-width:100%;outline:none;padding:1rem 1rem 1rem 1.6rem;position:relative;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}.novo-option.text-nowrap{white-space:nowrap}.novo-option.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.novo-option.text-size-default{font-size:inherit}.novo-option.text-size-body{font-size:1.3rem}.novo-option.text-size-xs{font-size:1rem}.novo-option.text-size-sm{font-size:1.2rem}.novo-option.text-size-md{font-size:1.3rem}.novo-option.text-size-lg{font-size:1.6rem}.novo-option.text-size-xl{font-size:2rem}.novo-option.text-size-2xl{font-size:2.6rem}.novo-option.text-size-3xl{font-size:3.2rem}.novo-option.text-size-smaller{font-size:.8em}.novo-option.text-size-larger{font-size:1.2em}.novo-option.text-color-black{color:#000}.novo-option.text-color-white{color:#fff}.novo-option.text-color-gray,.novo-option.text-color-grey{color:#9e9e9e}.novo-option.text-color-bright,.novo-option.text-color-offWhite{color:#f7f7f7}.novo-option.text-color-light{color:#dbdbdb}.novo-option.text-color-neutral{color:#4f5361}.novo-option.text-color-dark{color:#3d464d}.novo-option.text-color-orange{color:#ff6900}.novo-option.text-color-navigation{color:#202945}.novo-option.text-color-skyBlue{color:#009bdf}.novo-option.text-color-steel{color:#5b6770}.novo-option.text-color-metal{color:#637893}.novo-option.text-color-sand{color:#f4f4f4}.novo-option.text-color-silver{color:#e2e2e2}.novo-option.text-color-stone{color:#bebebe}.novo-option.text-color-ash{color:#a0a0a0}.novo-option.text-color-slate{color:#707070}.novo-option.text-color-onyx{color:#526980}.novo-option.text-color-charcoal{color:#282828}.novo-option.text-color-moonlight{color:#1a242f}.novo-option.text-color-midnight{color:#202945}.novo-option.text-color-darkness{color:#161f27}.novo-option.text-color-navy{color:#0d2d42}.novo-option.text-color-aqua{color:#3bafda}.novo-option.text-color-ocean{color:#4a89dc}.novo-option.text-color-mint{color:#37bc9b}.novo-option.text-color-grass{color:#8cc152}.novo-option.text-color-sunflower{color:#f6b042}.novo-option.text-color-bittersweet{color:#eb6845}.novo-option.text-color-grapefruit{color:#da4453}.novo-option.text-color-carnation{color:#d770ad}.novo-option.text-color-lavender{color:#967adc}.novo-option.text-color-mountain{color:#9678b6}.novo-option.text-color-info,.novo-option.text-color-positive{color:#4a89dc}.novo-option.text-color-success{color:#8cc152}.novo-option.text-color-danger,.novo-option.text-color-error,.novo-option.text-color-negative{color:#da4453}.novo-option.text-color-warning{color:#f6b042}.novo-option.text-color-empty{color:#cccdcc}.novo-option.text-color-disabled{color:#bebebe}.novo-option.text-color-background{color:#f7f7f7}.novo-option.text-color-backgroundDark{color:#e2e2e2}.novo-option.text-color-presentation{color:#5b6770}.novo-option.text-color-bullhorn{color:#ff6900}.novo-option.text-color-pulse{color:#3bafda}.novo-option.text-color-company{color:#39d}.novo-option.text-color-candidate{color:#4b7}.novo-option.text-color-lead{color:#a69}.novo-option.text-color-clientcontact,.novo-option.text-color-contact{color:#fa4}.novo-option.text-color-opportunity{color:#625}.novo-option.text-color-job,.novo-option.text-color-joborder{color:#b56}.novo-option.text-color-submission{color:#a9adbb}.novo-option.text-color-sendout{color:#747884}.novo-option.text-color-placement{color:#0b344f}.novo-option.text-color-note{color:#747884}.novo-option.text-color-contract{color:#454ea0}.novo-option.text-color-billableCharge,.novo-option.text-color-corporateUser,.novo-option.text-color-credential,.novo-option.text-color-distributionList,.novo-option.text-color-earnCode,.novo-option.text-color-invoiceStatement,.novo-option.text-color-jobCode,.novo-option.text-color-payableCharge,.novo-option.text-color-person,.novo-option.text-color-user{color:#696d79}.novo-option.margin-before{margin-top:.4rem}.novo-option.margin-after{margin-bottom:.8rem}.novo-option.text-length-small{max-width:40ch}.novo-option.text-length-medium{max-width:55ch}.novo-option.text-length-large{max-width:70ch}.novo-option.text-weight-hairline{font-weight:100}.novo-option.text-weight-thin{font-weight:200}.novo-option.text-weight-light{font-weight:300}.novo-option.text-weight-normal{font-weight:400}.novo-option.text-weight-medium{font-weight:500}.novo-option.text-weight-semibold{font-weight:600}.novo-option.text-weight-bold{font-weight:700}.novo-option.text-weight-extrabold{font-weight:800}.novo-option.text-weight-heavy{font-weight:900}.novo-option.text-weight-lighter{font-weight:lighter}.novo-option.text-weight-bolder{font-weight:bolder}.novo-option:hover:not(.novo-option-inert){background:var(--background-main,rgba(74,137,220,.1))}.novo-option.novo-active:not(.novo-option-inert),.novo-option:active:not(.novo-option-inert){background:rgba(74,137,220,.3)}.novo-option.novo-selected{color:#4a89dc}.novo-option.disabled,.novo-option[aria-disabled=true]{color:#bebebe;cursor:not-allowed}.novo-option.disabled:hover,.novo-option[aria-disabled=true]:hover{background:rgba(218,68,83,.1)}.novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:1rem}[dir=rtl] .novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:.5rem;padding-right:1rem}.novo-option.novo-accent-black{border-left:4px solid #000}.novo-option.novo-fill-black:not(.novo-option-inert){background:#000;color:#fff}.novo-option.novo-fill-black:not(.novo-option-inert):focus,.novo-option.novo-fill-black:not(.novo-option-inert):hover{background:#333}.novo-option.novo-fill-black:not(.novo-option-inert):active{background:#000}.novo-option.novo-accent-white{border-left:4px solid #fff}.novo-option.novo-fill-white:not(.novo-option-inert){background:#fff;color:#3d464d}.novo-option.novo-fill-white:not(.novo-option-inert):focus,.novo-option.novo-fill-white:not(.novo-option-inert):hover{background:#fff}.novo-option.novo-fill-white:not(.novo-option-inert):active{background:#ccc}.novo-option.novo-accent-gray{border-left:4px solid #9e9e9e}.novo-option.novo-fill-gray:not(.novo-option-inert){background:#9e9e9e;color:#3d464d}.novo-option.novo-fill-gray:not(.novo-option-inert):focus,.novo-option.novo-fill-gray:not(.novo-option-inert):hover{background:#b1b1b1}.novo-option.novo-fill-gray:not(.novo-option-inert):active{background:#7e7e7e}.novo-option.novo-accent-grey{border-left:4px solid #9e9e9e}.novo-option.novo-fill-grey:not(.novo-option-inert){background:#9e9e9e;color:#3d464d}.novo-option.novo-fill-grey:not(.novo-option-inert):focus,.novo-option.novo-fill-grey:not(.novo-option-inert):hover{background:#b1b1b1}.novo-option.novo-fill-grey:not(.novo-option-inert):active{background:#7e7e7e}.novo-option.novo-accent-offWhite{border-left:4px solid #f7f7f7}.novo-option.novo-fill-offWhite:not(.novo-option-inert){background:#f7f7f7;color:#3d464d}.novo-option.novo-fill-offWhite:not(.novo-option-inert):focus,.novo-option.novo-fill-offWhite:not(.novo-option-inert):hover{background:#f8f8f8}.novo-option.novo-fill-offWhite:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-bright{border-left:4px solid #f7f7f7}.novo-option.novo-fill-bright:not(.novo-option-inert){background:#f7f7f7;color:#3d464d}.novo-option.novo-fill-bright:not(.novo-option-inert):focus,.novo-option.novo-fill-bright:not(.novo-option-inert):hover{background:#f8f8f8}.novo-option.novo-fill-bright:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-light{border-left:4px solid #dbdbdb}.novo-option.novo-fill-light:not(.novo-option-inert){background:#dbdbdb;color:#3d464d}.novo-option.novo-fill-light:not(.novo-option-inert):focus,.novo-option.novo-fill-light:not(.novo-option-inert):hover{background:#e2e2e2}.novo-option.novo-fill-light:not(.novo-option-inert):active{background:#afafaf}.novo-option.novo-accent-neutral{border-left:4px solid #4f5361}.novo-option.novo-fill-neutral:not(.novo-option-inert){background:#4f5361;color:#fff}.novo-option.novo-fill-neutral:not(.novo-option-inert):focus,.novo-option.novo-fill-neutral:not(.novo-option-inert):hover{background:#727580}.novo-option.novo-fill-neutral:not(.novo-option-inert):active{background:#3f424d}.novo-option.novo-accent-dark{border-left:4px solid #3d464d}.novo-option.novo-fill-dark:not(.novo-option-inert){background:#3d464d;color:#fff}.novo-option.novo-fill-dark:not(.novo-option-inert):focus,.novo-option.novo-fill-dark:not(.novo-option-inert):hover{background:#636b70}.novo-option.novo-fill-dark:not(.novo-option-inert):active{background:#30383d}.novo-option.novo-accent-orange{border-left:4px solid #ff6900}.novo-option.novo-fill-orange:not(.novo-option-inert){background:#ff6900;color:#3d464d}.novo-option.novo-fill-orange:not(.novo-option-inert):focus,.novo-option.novo-fill-orange:not(.novo-option-inert):hover{background:#ff8733}.novo-option.novo-fill-orange:not(.novo-option-inert):active{background:#cc5400}.novo-option.novo-accent-navigation{border-left:4px solid #202945}.novo-option.novo-fill-navigation:not(.novo-option-inert){background:#202945;color:#fff}.novo-option.novo-fill-navigation:not(.novo-option-inert):focus,.novo-option.novo-fill-navigation:not(.novo-option-inert):hover{background:#4c536a}.novo-option.novo-fill-navigation:not(.novo-option-inert):active{background:#192037}.novo-option.novo-accent-skyBlue{border-left:4px solid #009bdf}.novo-option.novo-fill-skyBlue:not(.novo-option-inert){background:#009bdf;color:#fff}.novo-option.novo-fill-skyBlue:not(.novo-option-inert):focus,.novo-option.novo-fill-skyBlue:not(.novo-option-inert):hover{background:#33afe5}.novo-option.novo-fill-skyBlue:not(.novo-option-inert):active{background:#007cb2}.novo-option.novo-accent-steel{border-left:4px solid #5b6770}.novo-option.novo-fill-steel:not(.novo-option-inert){background:#5b6770;color:#fff}.novo-option.novo-fill-steel:not(.novo-option-inert):focus,.novo-option.novo-fill-steel:not(.novo-option-inert):hover{background:#7b858c}.novo-option.novo-fill-steel:not(.novo-option-inert):active{background:#485259}.novo-option.novo-accent-metal{border-left:4px solid #637893}.novo-option.novo-fill-metal:not(.novo-option-inert){background:#637893;color:#fff}.novo-option.novo-fill-metal:not(.novo-option-inert):focus,.novo-option.novo-fill-metal:not(.novo-option-inert):hover{background:#8293a8}.novo-option.novo-fill-metal:not(.novo-option-inert):active{background:#4f6075}.novo-option.novo-accent-sand{border-left:4px solid #f4f4f4}.novo-option.novo-fill-sand:not(.novo-option-inert){background:#f4f4f4;color:#3d464d}.novo-option.novo-fill-sand:not(.novo-option-inert):focus,.novo-option.novo-fill-sand:not(.novo-option-inert):hover{background:#f6f6f6}.novo-option.novo-fill-sand:not(.novo-option-inert):active{background:#c3c3c3}.novo-option.novo-accent-silver{border-left:4px solid #e2e2e2}.novo-option.novo-fill-silver:not(.novo-option-inert){background:#e2e2e2;color:#3d464d}.novo-option.novo-fill-silver:not(.novo-option-inert):focus,.novo-option.novo-fill-silver:not(.novo-option-inert):hover{background:#e7e7e7}.novo-option.novo-fill-silver:not(.novo-option-inert):active{background:#b4b4b4}.novo-option.novo-accent-stone{border-left:4px solid #bebebe}.novo-option.novo-fill-stone:not(.novo-option-inert){background:#bebebe;color:#3d464d}.novo-option.novo-fill-stone:not(.novo-option-inert):focus,.novo-option.novo-fill-stone:not(.novo-option-inert):hover{background:#cbcbcb}.novo-option.novo-fill-stone:not(.novo-option-inert):active{background:#989898}.novo-option.novo-accent-ash{border-left:4px solid #a0a0a0}.novo-option.novo-fill-ash:not(.novo-option-inert){background:#a0a0a0;color:#3d464d}.novo-option.novo-fill-ash:not(.novo-option-inert):focus,.novo-option.novo-fill-ash:not(.novo-option-inert):hover{background:#b3b3b3}.novo-option.novo-fill-ash:not(.novo-option-inert):active{background:grey}.novo-option.novo-accent-slate{border-left:4px solid #707070}.novo-option.novo-fill-slate:not(.novo-option-inert){background:#707070;color:#fff}.novo-option.novo-fill-slate:not(.novo-option-inert):focus,.novo-option.novo-fill-slate:not(.novo-option-inert):hover{background:#8c8c8c}.novo-option.novo-fill-slate:not(.novo-option-inert):active{background:#595959}.novo-option.novo-accent-onyx{border-left:4px solid #526980}.novo-option.novo-fill-onyx:not(.novo-option-inert){background:#526980;color:#fff}.novo-option.novo-fill-onyx:not(.novo-option-inert):focus,.novo-option.novo-fill-onyx:not(.novo-option-inert):hover{background:#748799}.novo-option.novo-fill-onyx:not(.novo-option-inert):active{background:#415466}.novo-option.novo-accent-charcoal{border-left:4px solid #282828}.novo-option.novo-fill-charcoal:not(.novo-option-inert){background:#282828;color:#fff}.novo-option.novo-fill-charcoal:not(.novo-option-inert):focus,.novo-option.novo-fill-charcoal:not(.novo-option-inert):hover{background:#535353}.novo-option.novo-fill-charcoal:not(.novo-option-inert):active{background:#202020}.novo-option.novo-accent-moonlight{border-left:4px solid #1a242f}.novo-option.novo-fill-moonlight:not(.novo-option-inert){background:#1a242f;color:#fff}.novo-option.novo-fill-moonlight:not(.novo-option-inert):focus,.novo-option.novo-fill-moonlight:not(.novo-option-inert):hover{background:#474f58}.novo-option.novo-fill-moonlight:not(.novo-option-inert):active{background:#141c25}.novo-option.novo-accent-midnight{border-left:4px solid #202945}.novo-option.novo-fill-midnight:not(.novo-option-inert){background:#202945;color:#fff}.novo-option.novo-fill-midnight:not(.novo-option-inert):focus,.novo-option.novo-fill-midnight:not(.novo-option-inert):hover{background:#4c536a}.novo-option.novo-fill-midnight:not(.novo-option-inert):active{background:#192037}.novo-option.novo-accent-darkness{border-left:4px solid #161f27}.novo-option.novo-fill-darkness:not(.novo-option-inert){background:#161f27;color:#fff}.novo-option.novo-fill-darkness:not(.novo-option-inert):focus,.novo-option.novo-fill-darkness:not(.novo-option-inert):hover{background:#444b52}.novo-option.novo-fill-darkness:not(.novo-option-inert):active{background:#11181f}.novo-option.novo-accent-navy{border-left:4px solid #0d2d42}.novo-option.novo-fill-navy:not(.novo-option-inert){background:#0d2d42;color:#fff}.novo-option.novo-fill-navy:not(.novo-option-inert):focus,.novo-option.novo-fill-navy:not(.novo-option-inert):hover{background:#3d5767}.novo-option.novo-fill-navy:not(.novo-option-inert):active{background:#0a2434}.novo-option.novo-accent-aqua{border-left:4px solid #3bafda}.novo-option.novo-fill-aqua:not(.novo-option-inert){background:#3bafda;color:#3d464d}.novo-option.novo-fill-aqua:not(.novo-option-inert):focus,.novo-option.novo-fill-aqua:not(.novo-option-inert):hover{background:#62bfe1}.novo-option.novo-fill-aqua:not(.novo-option-inert):active{background:#2f8cae}.novo-option.novo-accent-ocean{border-left:4px solid #4a89dc}.novo-option.novo-fill-ocean:not(.novo-option-inert){background:#4a89dc;color:#fff}.novo-option.novo-fill-ocean:not(.novo-option-inert):focus,.novo-option.novo-fill-ocean:not(.novo-option-inert):hover{background:#6ea0e3}.novo-option.novo-fill-ocean:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-mint{border-left:4px solid #37bc9b}.novo-option.novo-fill-mint:not(.novo-option-inert){background:#37bc9b;color:#3d464d}.novo-option.novo-fill-mint:not(.novo-option-inert):focus,.novo-option.novo-fill-mint:not(.novo-option-inert):hover{background:#5fc9af}.novo-option.novo-fill-mint:not(.novo-option-inert):active{background:#2c967c}.novo-option.novo-accent-grass{border-left:4px solid #8cc152}.novo-option.novo-fill-grass:not(.novo-option-inert){background:#8cc152;color:#fff}.novo-option.novo-fill-grass:not(.novo-option-inert):focus,.novo-option.novo-fill-grass:not(.novo-option-inert):hover{background:#a3cd74}.novo-option.novo-fill-grass:not(.novo-option-inert):active{background:#709a41}.novo-option.novo-accent-sunflower{border-left:4px solid #f6b042}.novo-option.novo-fill-sunflower:not(.novo-option-inert){background:#f6b042;color:#fff}.novo-option.novo-fill-sunflower:not(.novo-option-inert):focus,.novo-option.novo-fill-sunflower:not(.novo-option-inert):hover{background:#f7bf67}.novo-option.novo-fill-sunflower:not(.novo-option-inert):active{background:#c48c34}.novo-option.novo-accent-bittersweet{border-left:4px solid #eb6845}.novo-option.novo-fill-bittersweet:not(.novo-option-inert){background:#eb6845;color:#fff}.novo-option.novo-fill-bittersweet:not(.novo-option-inert):focus,.novo-option.novo-fill-bittersweet:not(.novo-option-inert):hover{background:#ef866a}.novo-option.novo-fill-bittersweet:not(.novo-option-inert):active{background:#bc5337}.novo-option.novo-accent-grapefruit{border-left:4px solid #da4453}.novo-option.novo-fill-grapefruit:not(.novo-option-inert){background:#da4453;color:#fff}.novo-option.novo-fill-grapefruit:not(.novo-option-inert):focus,.novo-option.novo-fill-grapefruit:not(.novo-option-inert):hover{background:#e16975}.novo-option.novo-fill-grapefruit:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-carnation{border-left:4px solid #d770ad}.novo-option.novo-fill-carnation:not(.novo-option-inert){background:#d770ad;color:#fff}.novo-option.novo-fill-carnation:not(.novo-option-inert):focus,.novo-option.novo-fill-carnation:not(.novo-option-inert):hover{background:#df8cbd}.novo-option.novo-fill-carnation:not(.novo-option-inert):active{background:#ac598a}.novo-option.novo-accent-lavender{border-left:4px solid #967adc}.novo-option.novo-fill-lavender:not(.novo-option-inert){background:#967adc;color:#fff}.novo-option.novo-fill-lavender:not(.novo-option-inert):focus,.novo-option.novo-fill-lavender:not(.novo-option-inert):hover{background:#ab94e3}.novo-option.novo-fill-lavender:not(.novo-option-inert):active{background:#7861b0}.novo-option.novo-accent-mountain{border-left:4px solid #9678b6}.novo-option.novo-fill-mountain:not(.novo-option-inert){background:#9678b6;color:#fff}.novo-option.novo-fill-mountain:not(.novo-option-inert):focus,.novo-option.novo-fill-mountain:not(.novo-option-inert):hover{background:#ab93c4}.novo-option.novo-fill-mountain:not(.novo-option-inert):active{background:#786091}.novo-option.novo-accent-info{border-left:4px solid #4a89dc}.novo-option.novo-fill-info:not(.novo-option-inert){background:#4a89dc;color:#fff}.novo-option.novo-fill-info:not(.novo-option-inert):focus,.novo-option.novo-fill-info:not(.novo-option-inert):hover{background:#6ea0e3}.novo-option.novo-fill-info:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-positive{border-left:4px solid #4a89dc}.novo-option.novo-fill-positive:not(.novo-option-inert){background:#4a89dc;color:#fff}.novo-option.novo-fill-positive:not(.novo-option-inert):focus,.novo-option.novo-fill-positive:not(.novo-option-inert):hover{background:#6ea0e3}.novo-option.novo-fill-positive:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-success{border-left:4px solid #8cc152}.novo-option.novo-fill-success:not(.novo-option-inert){background:#8cc152;color:#fff}.novo-option.novo-fill-success:not(.novo-option-inert):focus,.novo-option.novo-fill-success:not(.novo-option-inert):hover{background:#a3cd74}.novo-option.novo-fill-success:not(.novo-option-inert):active{background:#709a41}.novo-option.novo-accent-negative{border-left:4px solid #da4453}.novo-option.novo-fill-negative:not(.novo-option-inert){background:#da4453;color:#fff}.novo-option.novo-fill-negative:not(.novo-option-inert):focus,.novo-option.novo-fill-negative:not(.novo-option-inert):hover{background:#e16975}.novo-option.novo-fill-negative:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-danger{border-left:4px solid #da4453}.novo-option.novo-fill-danger:not(.novo-option-inert){background:#da4453;color:#fff}.novo-option.novo-fill-danger:not(.novo-option-inert):focus,.novo-option.novo-fill-danger:not(.novo-option-inert):hover{background:#e16975}.novo-option.novo-fill-danger:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-error{border-left:4px solid #da4453}.novo-option.novo-fill-error:not(.novo-option-inert){background:#da4453;color:#fff}.novo-option.novo-fill-error:not(.novo-option-inert):focus,.novo-option.novo-fill-error:not(.novo-option-inert):hover{background:#e16975}.novo-option.novo-fill-error:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-warning{border-left:4px solid #f6b042}.novo-option.novo-fill-warning:not(.novo-option-inert){background:#f6b042;color:#fff}.novo-option.novo-fill-warning:not(.novo-option-inert):focus,.novo-option.novo-fill-warning:not(.novo-option-inert):hover{background:#f7bf67}.novo-option.novo-fill-warning:not(.novo-option-inert):active{background:#c48c34}.novo-option.novo-accent-empty{border-left:4px solid #cccdcc}.novo-option.novo-fill-empty:not(.novo-option-inert){background:#cccdcc;color:#3d464d}.novo-option.novo-fill-empty:not(.novo-option-inert):focus,.novo-option.novo-fill-empty:not(.novo-option-inert):hover{background:#d6d7d6}.novo-option.novo-fill-empty:not(.novo-option-inert):active{background:#a3a4a3}.novo-option.novo-accent-disabled{border-left:4px solid #bebebe}.novo-option.novo-fill-disabled:not(.novo-option-inert){background:#bebebe;color:#3d464d}.novo-option.novo-fill-disabled:not(.novo-option-inert):focus,.novo-option.novo-fill-disabled:not(.novo-option-inert):hover{background:#cbcbcb}.novo-option.novo-fill-disabled:not(.novo-option-inert):active{background:#989898}.novo-option.novo-accent-background{border-left:4px solid #f7f7f7}.novo-option.novo-fill-background:not(.novo-option-inert){background:#f7f7f7;color:#3d464d}.novo-option.novo-fill-background:not(.novo-option-inert):focus,.novo-option.novo-fill-background:not(.novo-option-inert):hover{background:#f8f8f8}.novo-option.novo-fill-background:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-backgroundDark{border-left:4px solid #e2e2e2}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert){background:#e2e2e2;color:#3d464d}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):focus,.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):hover{background:#e7e7e7}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):active{background:#b4b4b4}.novo-option.novo-accent-presentation{border-left:4px solid #5b6770}.novo-option.novo-fill-presentation:not(.novo-option-inert){background:#5b6770;color:#fff}.novo-option.novo-fill-presentation:not(.novo-option-inert):focus,.novo-option.novo-fill-presentation:not(.novo-option-inert):hover{background:#7b858c}.novo-option.novo-fill-presentation:not(.novo-option-inert):active{background:#485259}.novo-option.novo-accent-bullhorn{border-left:4px solid #ff6900}.novo-option.novo-fill-bullhorn:not(.novo-option-inert){background:#ff6900;color:#3d464d}.novo-option.novo-fill-bullhorn:not(.novo-option-inert):focus,.novo-option.novo-fill-bullhorn:not(.novo-option-inert):hover{background:#ff8733}.novo-option.novo-fill-bullhorn:not(.novo-option-inert):active{background:#cc5400}.novo-option.novo-accent-pulse{border-left:4px solid #3bafda}.novo-option.novo-fill-pulse:not(.novo-option-inert){background:#3bafda;color:#3d464d}.novo-option.novo-fill-pulse:not(.novo-option-inert):focus,.novo-option.novo-fill-pulse:not(.novo-option-inert):hover{background:#62bfe1}.novo-option.novo-fill-pulse:not(.novo-option-inert):active{background:#2f8cae}.novo-option.novo-accent-company{border-left:4px solid #39d}.novo-option.novo-fill-company:not(.novo-option-inert){background:#39d;color:#fff}.novo-option.novo-fill-company:not(.novo-option-inert):focus,.novo-option.novo-fill-company:not(.novo-option-inert):hover{background:#5bade3}.novo-option.novo-fill-company:not(.novo-option-inert):active{background:#287ab0}.novo-option.novo-accent-candidate{border-left:4px solid #4b7}.novo-option.novo-fill-candidate:not(.novo-option-inert){background:#4b7;color:#fff}.novo-option.novo-fill-candidate:not(.novo-option-inert):focus,.novo-option.novo-fill-candidate:not(.novo-option-inert):hover{background:#69c892}.novo-option.novo-fill-candidate:not(.novo-option-inert):active{background:#36955f}.novo-option.novo-accent-lead{border-left:4px solid #a69}.novo-option.novo-fill-lead:not(.novo-option-inert){background:#a69;color:#fff}.novo-option.novo-fill-lead:not(.novo-option-inert):focus,.novo-option.novo-fill-lead:not(.novo-option-inert):hover{background:#bb84ad}.novo-option.novo-fill-lead:not(.novo-option-inert):active{background:#88517a}.novo-option.novo-accent-contact{border-left:4px solid #fa4}.novo-option.novo-fill-contact:not(.novo-option-inert){background:#fa4;color:#fff}.novo-option.novo-fill-contact:not(.novo-option-inert):focus,.novo-option.novo-fill-contact:not(.novo-option-inert):hover{background:#ffbb69}.novo-option.novo-fill-contact:not(.novo-option-inert):active{background:#cc8836}.novo-option.novo-accent-clientcontact{border-left:4px solid #fa4}.novo-option.novo-fill-clientcontact:not(.novo-option-inert){background:#fa4;color:#fff}.novo-option.novo-fill-clientcontact:not(.novo-option-inert):focus,.novo-option.novo-fill-clientcontact:not(.novo-option-inert):hover{background:#ffbb69}.novo-option.novo-fill-clientcontact:not(.novo-option-inert):active{background:#cc8836}.novo-option.novo-accent-opportunity{border-left:4px solid #625}.novo-option.novo-fill-opportunity:not(.novo-option-inert){background:#625;color:#fff}.novo-option.novo-fill-opportunity:not(.novo-option-inert):focus,.novo-option.novo-fill-opportunity:not(.novo-option-inert):hover{background:#844e77}.novo-option.novo-fill-opportunity:not(.novo-option-inert):active{background:#511b44}.novo-option.novo-accent-job{border-left:4px solid #b56}.novo-option.novo-fill-job:not(.novo-option-inert){background:#b56;color:#fff}.novo-option.novo-fill-job:not(.novo-option-inert):focus,.novo-option.novo-fill-job:not(.novo-option-inert):hover{background:#c87784}.novo-option.novo-fill-job:not(.novo-option-inert):active{background:#954451}.novo-option.novo-accent-joborder{border-left:4px solid #b56}.novo-option.novo-fill-joborder:not(.novo-option-inert){background:#b56;color:#fff}.novo-option.novo-fill-joborder:not(.novo-option-inert):focus,.novo-option.novo-fill-joborder:not(.novo-option-inert):hover{background:#c87784}.novo-option.novo-fill-joborder:not(.novo-option-inert):active{background:#954451}.novo-option.novo-accent-submission{border-left:4px solid #a9adbb}.novo-option.novo-fill-submission:not(.novo-option-inert){background:#a9adbb;color:#3d464d}.novo-option.novo-fill-submission:not(.novo-option-inert):focus,.novo-option.novo-fill-submission:not(.novo-option-inert):hover{background:#babdc8}.novo-option.novo-fill-submission:not(.novo-option-inert):active{background:#878a95}.novo-option.novo-accent-sendout{border-left:4px solid #747884}.novo-option.novo-fill-sendout:not(.novo-option-inert){background:#747884;color:#fff}.novo-option.novo-fill-sendout:not(.novo-option-inert):focus,.novo-option.novo-fill-sendout:not(.novo-option-inert):hover{background:#8f939c}.novo-option.novo-fill-sendout:not(.novo-option-inert):active{background:#5c6069}.novo-option.novo-accent-placement{border-left:4px solid #0b344f}.novo-option.novo-fill-placement:not(.novo-option-inert){background:#0b344f;color:#fff}.novo-option.novo-fill-placement:not(.novo-option-inert):focus,.novo-option.novo-fill-placement:not(.novo-option-inert):hover{background:#3b5c72}.novo-option.novo-fill-placement:not(.novo-option-inert):active{background:#08293f}.novo-option.novo-accent-note{border-left:4px solid #747884}.novo-option.novo-fill-note:not(.novo-option-inert){background:#747884;color:#fff}.novo-option.novo-fill-note:not(.novo-option-inert):focus,.novo-option.novo-fill-note:not(.novo-option-inert):hover{background:#8f939c}.novo-option.novo-fill-note:not(.novo-option-inert):active{background:#5c6069}.novo-option.novo-accent-contract{border-left:4px solid #454ea0}.novo-option.novo-fill-contract:not(.novo-option-inert){background:#454ea0;color:#fff}.novo-option.novo-fill-contract:not(.novo-option-inert):focus,.novo-option.novo-fill-contract:not(.novo-option-inert):hover{background:#6a71b3}.novo-option.novo-fill-contract:not(.novo-option-inert):active{background:#373e80}.novo-option.novo-accent-jobCode{border-left:4px solid #696d79}.novo-option.novo-fill-jobCode:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-jobCode:not(.novo-option-inert):focus,.novo-option.novo-fill-jobCode:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-jobCode:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-earnCode{border-left:4px solid #696d79}.novo-option.novo-fill-earnCode:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-earnCode:not(.novo-option-inert):focus,.novo-option.novo-fill-earnCode:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-earnCode:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-invoiceStatement{border-left:4px solid #696d79}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):focus,.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-billableCharge{border-left:4px solid #696d79}.novo-option.novo-fill-billableCharge:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-billableCharge:not(.novo-option-inert):focus,.novo-option.novo-fill-billableCharge:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-billableCharge:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-payableCharge{border-left:4px solid #696d79}.novo-option.novo-fill-payableCharge:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-payableCharge:not(.novo-option-inert):focus,.novo-option.novo-fill-payableCharge:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-payableCharge:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-user{border-left:4px solid #696d79}.novo-option.novo-fill-user:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-user:not(.novo-option-inert):focus,.novo-option.novo-fill-user:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-user:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-corporateUser{border-left:4px solid #696d79}.novo-option.novo-fill-corporateUser:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-corporateUser:not(.novo-option-inert):focus,.novo-option.novo-fill-corporateUser:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-corporateUser:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-distributionList{border-left:4px solid #696d79}.novo-option.novo-fill-distributionList:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-distributionList:not(.novo-option-inert):focus,.novo-option.novo-fill-distributionList:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-distributionList:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-credential{border-left:4px solid #696d79}.novo-option.novo-fill-credential:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-credential:not(.novo-option-inert):focus,.novo-option.novo-fill-credential:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-credential:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-person{border-left:4px solid #696d79}.novo-option.novo-fill-person:not(.novo-option-inert){background:#696d79;color:#fff}.novo-option.novo-fill-person:not(.novo-option-inert):focus,.novo-option.novo-fill-person:not(.novo-option-inert):hover{background:#878a93}.novo-option.novo-fill-person:not(.novo-option-inert):active{background:#545760}.novo-option-text{align-items:center;display:inline-block;display:inline-flex;flex-direction:row;flex-grow:1;gap:1rem;overflow:hidden;text-overflow:ellipsis}.novo-option-pseudo-checkbox{margin-right:.25rem}[dir=rtl] .novo-option-pseudo-checkbox{margin-left:.25rem;margin-right:0}"]
                },] }
    ];
    NovoOption.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_OPTION_PARENT_COMPONENT,] }] },
        { type: NovoOptgroup, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_OPTGROUP,] }] }
    ]; };
    /**
     * Counts the amount of option group labels that precede the specified option.
     * @param optionIndex Index of the option at which to start counting.
     * @param options Flat list of all of the options.
     * @param optionGroups Flat list of all of the option groups.
     * @docs-private
     */
    function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
        if (optionGroups.length) {
            var optionsArray = options.toArray();
            var groups = optionGroups.toArray();
            var groupCounter = 0;
            for (var i = 0; i < optionIndex + 1; i++) {
                if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                    groupCounter++;
                }
            }
            return groupCounter;
        }
        return 0;
    }
    /**
     * Determines the position to which to scroll a panel in order for an option to be into view.
     * @param optionOffset Offset of the option from the top of the panel.
     * @param optionHeight Height of the options.
     * @param currentScrollPosition Current scroll position of the panel.
     * @param panelHeight Height of the panel.
     * @docs-private
     */
    function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
        if (optionOffset < currentScrollPosition) {
            return optionOffset;
        }
        if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
            return Math.max(0, optionOffset - panelHeight + optionHeight);
        }
        return currentScrollPosition;
    }

    var NovoOptionModule = /** @class */ (function () {
        function NovoOptionModule() {
        }
        return NovoOptionModule;
    }());
    NovoOptionModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoPseudoCheckboxModule],
                    exports: [NovoOption, NovoOptgroup],
                    declarations: [NovoOption, NovoOptgroup],
                },] }
    ];

    var NovoBaseTextElement = /** @class */ (function () {
        function NovoBaseTextElement(element) {
            this.element = element;
        }
        Object.defineProperty(NovoBaseTextElement.prototype, "hb_classBinding", {
            get: function () {
                return [
                    this.color ? "text-color-" + this.color : null,
                    this.lineLength ? "text-length-" + this.lineLength : null,
                    this.size ? "text-size-" + this.size : null,
                    this.weight ? "text-weight-" + this.weight : null,
                ]
                    .filter(Boolean)
                    .join(' ');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoBaseTextElement.prototype, "nativeElement", {
            get: function () {
                return this.element.nativeElement;
            },
            enumerable: false,
            configurable: true
        });
        return NovoBaseTextElement;
    }());
    NovoBaseTextElement.decorators = [
        { type: i0.Directive }
    ];
    NovoBaseTextElement.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoBaseTextElement.propDecorators = {
        size: [{ type: i0.Input }],
        weight: [{ type: i0.Input }],
        lineLength: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        hb_classBinding: [{ type: i0.HostBinding, args: ['class',] }],
        disabled: [{ type: i0.HostBinding, args: ['class.text-disabled',] }, { type: i0.Input }],
        muted: [{ type: i0.HostBinding, args: ['class.text-color-empty',] }, { type: i0.Input }],
        error: [{ type: i0.HostBinding, args: ['class.text-color-negative',] }, { type: i0.Input }],
        marginBefore: [{ type: i0.HostBinding, args: ['class.margin-before',] }, { type: i0.Input }],
        marginAfter: [{ type: i0.HostBinding, args: ['class.margin-after',] }, { type: i0.Input }],
        nowrap: [{ type: i0.HostBinding, args: ['class.text-nowrap',] }, { type: i0.Input }],
        smaller: [{ type: i0.HostBinding, args: ['class.text-size-smaller',] }, { type: i0.Input }],
        larger: [{ type: i0.HostBinding, args: ['class.text-size-larger',] }, { type: i0.Input }],
        thin: [{ type: i0.HostBinding, args: ['class.text-weight-thin',] }, { type: i0.Input }],
        lighter: [{ type: i0.HostBinding, args: ['class.text-weight-lighter',] }, { type: i0.Input }],
        light: [{ type: i0.HostBinding, args: ['class.text-weight-light',] }, { type: i0.Input }],
        medium: [{ type: i0.HostBinding, args: ['class.text-weight-medium',] }, { type: i0.Input }],
        bold: [{ type: i0.HostBinding, args: ['class.text-weight-bold',] }, { type: i0.Input }],
        bolder: [{ type: i0.HostBinding, args: ['class.text-weight-bolder',] }, { type: i0.Input }],
        extrabold: [{ type: i0.HostBinding, args: ['class.text-weight-extrabold',] }, { type: i0.Input }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "disabled", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "muted", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "error", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "marginBefore", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "marginAfter", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "nowrap", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "smaller", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "larger", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "thin", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "lighter", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "light", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "medium", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "bold", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "bolder", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoBaseTextElement.prototype, "extrabold", void 0);

    /**
     * Tag Example
     * <novo-title size="sm" disabled>Label</novo-title
     * <novo-title small disabled>Label</novo-title>
     * <novo-title large disabled>Label</novo-title>
     * <novo-title error>Label</novo-title>
     * <novo-title muted>Label</novo-title>
     * <novo-title class="tc-grapefruit">Label</novo-title>
     * <novo-title color="grapefruit">Label</novo-title>
     */
    var NovoCaption = /** @class */ (function (_super) {
        __extends(NovoCaption, _super);
        function NovoCaption() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoCaption;
    }(NovoBaseTextElement));
    NovoCaption.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-caption,[novo-caption]',
                    template: " <ng-content></ng-content> ",
                    host: {
                        class: 'novo-caption',
                    },
                    styles: [":host{color:var(--text-muted);display:inline;font-size:var(--font-size-caption);font-weight:400;line-height:1.375;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray,:host.text-color-grey{color:#9e9e9e}:host.text-color-bright,:host.text-color-offWhite{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info,:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-danger,:host.text-color-error,:host.text-color-negative{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-clientcontact,:host.text-color-contact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job,:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-billableCharge,:host.text-color-corporateUser,:host.text-color-credential,:host.text-color-distributionList,:host.text-color-earnCode,:host.text-color-invoiceStatement,:host.text-color-jobCode,:host.text-color-payableCharge,:host.text-color-person,:host.text-color-user{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}"]
                },] }
    ];

    /**
     * Tag Example
     * <novo-label size="sm" disabled>Label</novo-label
     * <novo-label small disabled>Label</novo-label>
     * <novo-label large disabled>Label</novo-label>
     * <novo-label error>Label</novo-label>
     * <novo-label muted>Label</novo-label>
     * <novo-label class="tc-grapefruit">Label</novo-label>
     * <novo-label color="grapefruit">Label</novo-label>
     */
    var NovoLabel = /** @class */ (function (_super) {
        __extends(NovoLabel, _super);
        function NovoLabel() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoLabel;
    }(NovoBaseTextElement));
    NovoLabel.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-label,[novo-label]',
                    template: " <ng-content></ng-content> ",
                    host: {
                        class: 'novo-label',
                    },
                    styles: [":host{color:var(--text-muted);display:inline-block;font-size:var(--font-size-label);font-weight:500;line-height:1.375;overflow-wrap:break-word;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle;word-break:word-break}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray,:host.text-color-grey{color:#9e9e9e}:host.text-color-bright,:host.text-color-offWhite{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info,:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-danger,:host.text-color-error,:host.text-color-negative{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-clientcontact,:host.text-color-contact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job,:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-billableCharge,:host.text-color-corporateUser,:host.text-color-credential,:host.text-color-distributionList,:host.text-color-earnCode,:host.text-color-invoiceStatement,:host.text-color-jobCode,:host.text-color-payableCharge,:host.text-color-person,:host.text-color-user{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}"]
                },] }
    ];

    /**
     * Tag Example
     * <novo-text size="small" disabled>Label</novo-text
     * <novo-text small disabled>Label</novo-text>
     * <novo-text large disabled>Label</novo-text>
     * <novo-text error>Label</novo-text>
     * <novo-text muted>Label</novo-text>
     * <novo-text class="tc-grapefruit">Label</novo-text>
     * <novo-text color="grapefruit">Label</novo-text>
     */
    var NovoLink = /** @class */ (function (_super) {
        __extends(NovoLink, _super);
        function NovoLink() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoLink;
    }(NovoBaseTextElement));
    NovoLink.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-link',
                    template: "<a [attr.href]=\"href\"><ng-content></ng-content></a>",
                    encapsulation: i0.ViewEncapsulation.None,
                    host: {
                        class: 'novo-link',
                    },
                    styles: [":host{color:inherit;display:inline;font-size:var(--font-size-text);font-weight:400;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray,:host.text-color-grey{color:#9e9e9e}:host.text-color-bright,:host.text-color-offWhite{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info,:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-danger,:host.text-color-error,:host.text-color-negative{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-clientcontact,:host.text-color-contact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job,:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-billableCharge,:host.text-color-corporateUser,:host.text-color-credential,:host.text-color-distributionList,:host.text-color-earnCode,:host.text-color-invoiceStatement,:host.text-color-jobCode,:host.text-color-payableCharge,:host.text-color-person,:host.text-color-user{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}:host::ng-deep novo-icon,:host novo-icon{font-size:1em}"]
                },] }
    ];
    NovoLink.propDecorators = {
        href: [{ type: i0.Input }]
    };

    /**
     * Tag Example
     * <novo-text size="small" disabled>Label</novo-text
     * <novo-text small disabled>Label</novo-text>
     * <novo-text large disabled>Label</novo-text>
     * <novo-text error>Label</novo-text>
     * <novo-text muted>Label</novo-text>
     * <novo-text class="tc-grapefruit">Label</novo-text>
     * <novo-text color="grapefruit">Label</novo-text>
     */
    var NovoText = /** @class */ (function (_super) {
        __extends(NovoText, _super);
        function NovoText() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoText;
    }(NovoBaseTextElement));
    NovoText.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-text,[novo-text]',
                    template: " <ng-content></ng-content> ",
                    encapsulation: i0.ViewEncapsulation.None,
                    host: {
                        class: 'novo-text',
                    },
                    styles: [".novo-text{color:inherit;display:inline;font-size:var(--font-size-text);font-weight:400;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}.novo-text.text-nowrap{white-space:nowrap}.novo-text.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.novo-text.text-size-default{font-size:inherit}.novo-text.text-size-body{font-size:1.3rem}.novo-text.text-size-xs{font-size:1rem}.novo-text.text-size-sm{font-size:1.2rem}.novo-text.text-size-md{font-size:1.3rem}.novo-text.text-size-lg{font-size:1.6rem}.novo-text.text-size-xl{font-size:2rem}.novo-text.text-size-2xl{font-size:2.6rem}.novo-text.text-size-3xl{font-size:3.2rem}.novo-text.text-size-smaller{font-size:.8em}.novo-text.text-size-larger{font-size:1.2em}.novo-text.text-color-black{color:#000}.novo-text.text-color-white{color:#fff}.novo-text.text-color-gray,.novo-text.text-color-grey{color:#9e9e9e}.novo-text.text-color-bright,.novo-text.text-color-offWhite{color:#f7f7f7}.novo-text.text-color-light{color:#dbdbdb}.novo-text.text-color-neutral{color:#4f5361}.novo-text.text-color-dark{color:#3d464d}.novo-text.text-color-orange{color:#ff6900}.novo-text.text-color-navigation{color:#202945}.novo-text.text-color-skyBlue{color:#009bdf}.novo-text.text-color-steel{color:#5b6770}.novo-text.text-color-metal{color:#637893}.novo-text.text-color-sand{color:#f4f4f4}.novo-text.text-color-silver{color:#e2e2e2}.novo-text.text-color-stone{color:#bebebe}.novo-text.text-color-ash{color:#a0a0a0}.novo-text.text-color-slate{color:#707070}.novo-text.text-color-onyx{color:#526980}.novo-text.text-color-charcoal{color:#282828}.novo-text.text-color-moonlight{color:#1a242f}.novo-text.text-color-midnight{color:#202945}.novo-text.text-color-darkness{color:#161f27}.novo-text.text-color-navy{color:#0d2d42}.novo-text.text-color-aqua{color:#3bafda}.novo-text.text-color-ocean{color:#4a89dc}.novo-text.text-color-mint{color:#37bc9b}.novo-text.text-color-grass{color:#8cc152}.novo-text.text-color-sunflower{color:#f6b042}.novo-text.text-color-bittersweet{color:#eb6845}.novo-text.text-color-grapefruit{color:#da4453}.novo-text.text-color-carnation{color:#d770ad}.novo-text.text-color-lavender{color:#967adc}.novo-text.text-color-mountain{color:#9678b6}.novo-text.text-color-info,.novo-text.text-color-positive{color:#4a89dc}.novo-text.text-color-success{color:#8cc152}.novo-text.text-color-danger,.novo-text.text-color-error,.novo-text.text-color-negative{color:#da4453}.novo-text.text-color-warning{color:#f6b042}.novo-text.text-color-empty{color:#cccdcc}.novo-text.text-color-disabled{color:#bebebe}.novo-text.text-color-background{color:#f7f7f7}.novo-text.text-color-backgroundDark{color:#e2e2e2}.novo-text.text-color-presentation{color:#5b6770}.novo-text.text-color-bullhorn{color:#ff6900}.novo-text.text-color-pulse{color:#3bafda}.novo-text.text-color-company{color:#39d}.novo-text.text-color-candidate{color:#4b7}.novo-text.text-color-lead{color:#a69}.novo-text.text-color-clientcontact,.novo-text.text-color-contact{color:#fa4}.novo-text.text-color-opportunity{color:#625}.novo-text.text-color-job,.novo-text.text-color-joborder{color:#b56}.novo-text.text-color-submission{color:#a9adbb}.novo-text.text-color-sendout{color:#747884}.novo-text.text-color-placement{color:#0b344f}.novo-text.text-color-note{color:#747884}.novo-text.text-color-contract{color:#454ea0}.novo-text.text-color-billableCharge,.novo-text.text-color-corporateUser,.novo-text.text-color-credential,.novo-text.text-color-distributionList,.novo-text.text-color-earnCode,.novo-text.text-color-invoiceStatement,.novo-text.text-color-jobCode,.novo-text.text-color-payableCharge,.novo-text.text-color-person,.novo-text.text-color-user{color:#696d79}.novo-text.margin-before{margin-top:.4rem}.novo-text.margin-after{margin-bottom:.8rem}.novo-text.text-length-small{max-width:40ch}.novo-text.text-length-medium{max-width:55ch}.novo-text.text-length-large{max-width:70ch}.novo-text.text-weight-hairline{font-weight:100}.novo-text.text-weight-thin{font-weight:200}.novo-text.text-weight-light{font-weight:300}.novo-text.text-weight-normal{font-weight:400}.novo-text.text-weight-medium{font-weight:500}.novo-text.text-weight-semibold{font-weight:600}.novo-text.text-weight-bold{font-weight:700}.novo-text.text-weight-extrabold{font-weight:800}.novo-text.text-weight-heavy{font-weight:900}.novo-text.text-weight-lighter{font-weight:lighter}.novo-text.text-weight-bolder{font-weight:bolder}.novo-text.text-block{display:block;line-height:1.375em;max-width:75ch;min-width:55ch}"]
                },] }
    ];
    NovoText.propDecorators = {
        block: [{ type: i0.HostBinding, args: ['class.text-block',] }, { type: i0.Input }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoText.prototype, "block", void 0);

    /**
     * Tag Example
     * <novo-title size="sm" disabled>Label</novo-title
     * <novo-title small disabled>Label</novo-title>
     * <novo-title large disabled>Label</novo-title>
     * <novo-title error>Label</novo-title>
     * <novo-title muted>Label</novo-title>
     * <novo-title class="tc-grapefruit">Label</novo-title>
     * <novo-title color="grapefruit">Label</novo-title>
     */
    var NovoTitle = /** @class */ (function (_super) {
        __extends(NovoTitle, _super);
        function NovoTitle() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.weight = 'medium';
            return _this;
        }
        return NovoTitle;
    }(NovoBaseTextElement));
    NovoTitle.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-title,[novo-title]',
                    template: " <ng-content></ng-content> ",
                    host: {
                        class: 'novo-title',
                    },
                    styles: [":host{color:var(--text-main,#3d464d);display:block;font-size:var(--font-size-title);font-weight:500;line-height:1.5;text-overflow:ellipsis;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}:host,:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray,:host.text-color-grey{color:#9e9e9e}:host.text-color-bright,:host.text-color-offWhite{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info,:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-danger,:host.text-color-error,:host.text-color-negative{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-clientcontact,:host.text-color-contact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job,:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-billableCharge,:host.text-color-corporateUser,:host.text-color-credential,:host.text-color-distributionList,:host.text-color-earnCode,:host.text-color-invoiceStatement,:host.text-color-jobCode,:host.text-color-payableCharge,:host.text-color-person,:host.text-color-user{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}"]
                },] }
    ];

    var NovoCommonModule = /** @class */ (function () {
        function NovoCommonModule() {
        }
        return NovoCommonModule;
    }());
    NovoCommonModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoOptionModule],
                    exports: [
                        NovoTemplate,
                        NovoText,
                        NovoTitle,
                        NovoCaption,
                        NovoLabel,
                        NovoLink,
                        MarginDirective,
                        PaddingDirective,
                        BackgroundColorDirective,
                        TextColorDirective,
                        BorderDirective,
                        GapDirective,
                        AccentColorDirective,
                        FillColorDirective,
                        FlexDirective,
                        ThemeColorDirective,
                    ],
                    declarations: [
                        NovoTemplate,
                        NovoText,
                        NovoTitle,
                        NovoCaption,
                        NovoLabel,
                        NovoLink,
                        MarginDirective,
                        PaddingDirective,
                        BackgroundColorDirective,
                        TextColorDirective,
                        BorderDirective,
                        GapDirective,
                        AccentColorDirective,
                        FillColorDirective,
                        FlexDirective,
                        ThemeColorDirective,
                    ],
                },] }
    ];

    /** Error state matcher that matches when a control is invalid and dirty. */
    var ShowOnDirtyErrorStateMatcher = /** @class */ (function () {
        function ShowOnDirtyErrorStateMatcher() {
        }
        ShowOnDirtyErrorStateMatcher.prototype.isErrorState = function (control, form) {
            return !!(control && control.invalid && (control.dirty || (form && form.submitted)));
        };
        return ShowOnDirtyErrorStateMatcher;
    }());
    ShowOnDirtyErrorStateMatcher.decorators = [
        { type: i0.Injectable }
    ];
    /** Provider that defines how form controls behave with regards to displaying error messages. */
    var ErrorStateMatcher = /** @class */ (function () {
        function ErrorStateMatcher() {
        }
        ErrorStateMatcher.prototype.isErrorState = function (control, form) {
            return !!(control && control.invalid && (control.touched || (form && form.submitted)));
        };
        return ErrorStateMatcher;
    }());
    ErrorStateMatcher.ɵprov = i0.ɵɵdefineInjectable({ factory: function ErrorStateMatcher_Factory() { return new ErrorStateMatcher(); }, token: ErrorStateMatcher, providedIn: "root" });
    ErrorStateMatcher.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    /** Mixin to augment a directive with a `color` property. */
    function mixinColor(base, defaultColor) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this.defaultColor = defaultColor;
                // Set the default color that can be specified from the mixin.
                _this.color = defaultColor;
                return _this;
            }
            Object.defineProperty(class_1.prototype, "color", {
                get: function () {
                    return this._color;
                },
                set: function (value) {
                    var colorPalette = value || this.defaultColor;
                    if (colorPalette !== this._color) {
                        if (this._color) {
                            this._elementRef.nativeElement.classList.remove("novo-color-" + this._color);
                        }
                        if (colorPalette) {
                            this._elementRef.nativeElement.classList.add("novo-color-" + colorPalette);
                        }
                        this._color = colorPalette;
                    }
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    /**
     * Mixin to augment a directive with updateErrorState method.
     * For component with `errorState` and need to update `errorState`.
     */
    function mixinErrorState(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                /** Whether the component is in an error state. */
                _this.errorState = false;
                /**
                 * Stream that emits whenever the state of the input changes such that the wrapping
                 * `MatFormField` needs to run change detection.
                 */
                _this.stateChanges = new rxjs.Subject();
                return _this;
            }
            class_1.prototype.updateErrorState = function () {
                var oldState = this.errorState;
                var parent = this._parentFormGroup || this._parentForm;
                var matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
                var control = this.ngControl ? this.ngControl.control : null;
                var newState = matcher.isErrorState(control, parent);
                if (newState !== oldState) {
                    this.errorState = newState;
                    this.stateChanges.next();
                }
            };
            return class_1;
        }(base));
    }

    /** Mixin to augment a directive with a `overlay` property. */
    function mixinOverlay(base) {
        // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
        // but given we `extend` it from another class, we can assume a constructor being accessible.
        var Mixin = /** @class */ (function (_super) {
            __extends(Mixin, _super);
            function Mixin() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return _super.apply(this, __spread(args)) || this;
            }
            Mixin.prototype.openPanel = function () {
                if (!this.disabled) {
                    this.overlay.openPanel();
                }
            };
            Mixin.prototype.closePanel = function () {
                this.overlay.closePanel();
            };
            Mixin.prototype.togglePanel = function () {
                if (this.panelOpen) {
                    this.closePanel();
                }
                else {
                    this.openPanel();
                }
            };
            Object.defineProperty(Mixin.prototype, "panelOpen", {
                get: function () {
                    return this.overlay && this.overlay.panelOpen;
                },
                enumerable: false,
                configurable: true
            });
            return Mixin;
        }(base));
        // Since we don't directly extend from `base` with it's original types, and we instruct
        // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
        // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
        return Mixin;
    }

    /** Mixin to augment a directive with a `required` property. */
    function mixinRequired(base) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this._required = false;
                return _this;
            }
            Object.defineProperty(class_1.prototype, "required", {
                get: function () {
                    return this._required;
                },
                set: function (value) {
                    this._required = coercion.coerceBooleanProperty(value);
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    /** Mixin to augment a directive with a `size` property. */
    function mixinSize(base, defaultSize) {
        return /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this.defaultSize = defaultSize;
                // Set the default size that can be specified from the mixin.
                _this.size = defaultSize;
                return _this;
            }
            Object.defineProperty(class_1.prototype, "size", {
                get: function () {
                    return this._size;
                },
                set: function (value) {
                    var size = value || this.defaultSize;
                    if (size !== this._size) {
                        if (this._size) {
                            this._elementRef.nativeElement.classList.remove("novo-size-" + this._size);
                        }
                        if (size) {
                            this._elementRef.nativeElement.classList.add("novo-size-" + size);
                        }
                        this._size = size;
                    }
                },
                enumerable: false,
                configurable: true
            });
            return class_1;
        }(base));
    }

    /** Mixin to augment a directive with a `tabIndex` property. */
    function mixinTabIndex(base, defaultTabIndex) {
        if (defaultTabIndex === void 0) { defaultTabIndex = 0; }
        // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
        // but given we `extend` it from another class, we can assume a constructor being accessible.
        var Mixin = /** @class */ (function (_super) {
            __extends(Mixin, _super);
            function Mixin() {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                var _this = _super.apply(this, __spread(args)) || this;
                _this._tabIndex = defaultTabIndex;
                _this.defaultTabIndex = defaultTabIndex;
                return _this;
            }
            Object.defineProperty(Mixin.prototype, "tabIndex", {
                get: function () {
                    return this.disabled ? -1 : this._tabIndex;
                },
                set: function (value) {
                    // If the specified tabIndex value is null or undefined, fall back to the default value.
                    this._tabIndex = value != null ? coercion.coerceNumberProperty(value) : this.defaultTabIndex;
                },
                enumerable: false,
                configurable: true
            });
            return Mixin;
        }(base));
        // Since we don't directly extend from `base` with it's original types, and we instruct
        // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
        // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
        return Mixin;
    }

    var NovoOverlayTemplateComponent = /** @class */ (function () {
        function NovoOverlayTemplateComponent(overlay, viewContainerRef, zone, changeDetectorRef, document) {
            this.overlay = overlay;
            this.viewContainerRef = viewContainerRef;
            this.zone = zone;
            this.changeDetectorRef = changeDetectorRef;
            this.document = document;
            this.id = "novo-overlay-" + Date.now();
            this.position = 'default';
            this.scrollStrategy = 'reposition';
            this.closeOnSelect = true;
            this.select = new i0.EventEmitter();
            this.opening = new i0.EventEmitter();
            this.closing = new i0.EventEmitter();
        }
        NovoOverlayTemplateComponent.prototype.ngOnDestroy = function () {
            this.destroyOverlay();
        };
        Object.defineProperty(NovoOverlayTemplateComponent.prototype, "panelOpen", {
            get: function () {
                return this.overlayRef && this.overlayRef.hasAttached();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOverlayTemplateComponent.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            set: function (value) {
                this._parent = value;
                this.checkSizes();
            },
            enumerable: false,
            configurable: true
        });
        NovoOverlayTemplateComponent.prototype.openPanel = function () {
            var _this = this;
            if (!this.overlayRef) {
                this.createOverlay(this.template);
            }
            else {
                this.checkSizes();
            }
            if (this.overlayRef && !this.overlayRef.hasAttached()) {
                this.overlayRef.attach(this.portal);
                this.closingActionsSubscription = this.subscribeToClosingActions();
            }
            this.changeDetectorRef.markForCheck();
            setTimeout(function () {
                if (_this.overlayRef) {
                    _this.overlayRef.updatePosition();
                    _this.opening.emit(true);
                    setTimeout(function () {
                        // TODO: @charlesabarnes Remove this once we remove table
                        if (_this.overlayRef) {
                            _this.overlayRef.updatePosition();
                        }
                    });
                }
            });
        };
        NovoOverlayTemplateComponent.prototype.closePanel = function () {
            var _this = this;
            this.zone.run(function () {
                if (_this.overlayRef && _this.overlayRef.hasAttached()) {
                    _this.overlayRef.detach();
                    _this.closingActionsSubscription.unsubscribe();
                }
                _this.closing.emit(false);
                if (_this.panelOpen) {
                    _this.changeDetectorRef.markForCheck();
                }
            });
        };
        NovoOverlayTemplateComponent.prototype.onClosingAction = function (event) {
            this.closePanel();
        };
        Object.defineProperty(NovoOverlayTemplateComponent.prototype, "panelClosingActions", {
            /**
             * A stream of actions that should close the autocomplete panel, including
             * when an option is selected, on blur, and when TAB is pressed.
             */
            get: function () {
                return rxjs.merge(
                // this.overlayTemplate._keyManager.tabOut,
                this.outsideClickStream);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoOverlayTemplateComponent.prototype, "outsideClickStream", {
            /** Stream of clicks outside of the autocomplete panel. */
            get: function () {
                var _this = this;
                if (!this.document) {
                    return rxjs.of();
                }
                return rxjs.merge(rxjs.fromEvent(this.document, 'mouseup'), rxjs.fromEvent(this.document, 'touchend')).pipe(operators.filter(function (event) {
                    var clickTarget = event.target;
                    var clicked = _this.panelOpen &&
                        clickTarget !== _this.getConnectedElement().nativeElement &&
                        !_this.getConnectedElement().nativeElement.contains(clickTarget) &&
                        !!_this.overlayRef &&
                        !_this.overlayRef.overlayElement.contains(clickTarget);
                    // &&!Array.from(document.querySelectorAll('.cdk-overlay-container')).some((el) => el.contains(clickTarget));
                    if (_this.panelOpen && !!_this.overlayRef && _this.overlayRef.overlayElement.contains(clickTarget) && _this.closeOnSelect) {
                        _this.select.emit(event);
                    }
                    return clicked;
                }));
            },
            enumerable: false,
            configurable: true
        });
        /**
         * This method listens to a stream of panel closing actions and resets the
         * stream every time the option list changes.
         */
        NovoOverlayTemplateComponent.prototype.subscribeToClosingActions = function () {
            var _this = this;
            var firstStable = this.zone.onStable.asObservable().pipe(operators.first());
            // const valueChanges = Observable.from(this.value);
            // When the zone is stable initially, and when the option list changes...
            return (rxjs.merge(firstStable)
                .pipe(
            // create a new stream of panelClosingActions, replacing any previous streams
            // that were created, and flatten it so our stream only emits closing events...
            operators.switchMap(function () {
                return _this.panelClosingActions;
            }), 
            // when the first closing event occurs...
            operators.first())
                // set the value, close the panel, and complete.
                .subscribe(function (event) { return _this.onClosingAction(event); }));
        };
        NovoOverlayTemplateComponent.prototype.createOverlay = function (template) {
            var _this = this;
            this.portal = new portal.TemplatePortal(template, this.viewContainerRef);
            this.overlayRef = this.overlay.create(this.getOverlayConfig());
            this.overlayRef.backdropClick().subscribe(function () { return _this.closePanel(); });
        };
        NovoOverlayTemplateComponent.prototype.destroyOverlay = function () {
            if (this.overlayRef) {
                this.closePanel();
                this.overlayRef.dispose();
                this.overlayRef = undefined;
            }
        };
        NovoOverlayTemplateComponent.prototype.getOverlayConfig = function () {
            var config = new i1.OverlayConfig();
            if (!this.width) {
                config.width = this.getHostWidth();
            }
            else {
                config.width = this.width;
            }
            if (this.height) {
                config.height = this.height;
            }
            config.positionStrategy = this.getPosition();
            config.hasBackdrop = false;
            config.direction = 'ltr';
            config.scrollStrategy = this.getScrollStrategy();
            return config;
        };
        /**
         * Supports the following position strategies:
         * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
         */
        NovoOverlayTemplateComponent.prototype.getPosition = function () {
            if (this.position === 'center') {
                return this.overlay
                    .position()
                    .connectedTo(this.getConnectedElement(), { originX: 'start', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' });
            }
            var _a = __read(this.position.includes('right') ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], fallbackX = _a[1];
            var _b = __read(this.position.includes('top') ? ['top', 'bottom'] : ['bottom', 'top'], 2), originY = _b[0], overlayY = _b[1];
            var strategy = this.overlay
                .position()
                .connectedTo(this.getConnectedElement(), { originX: originX, originY: originY }, { overlayX: originX, overlayY: overlayY })
                .withDirection('ltr');
            if (this.position === 'bottom') {
                strategy = strategy.withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' });
            }
            else if (this.position === 'right' || this.position === 'default' || this.position.includes('above-below')) {
                strategy = strategy
                    .withFallbackPosition({ originX: originX, originY: 'top' }, { overlayX: originX, overlayY: 'bottom' })
                    .withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' })
                    .withFallbackPosition({ originX: fallbackX, originY: 'top' }, { overlayX: fallbackX, overlayY: 'bottom' });
                if (!this.position.includes('above-below')) {
                    strategy = strategy
                        .withFallbackPosition({ originX: originX, originY: 'center' }, { overlayX: originX, overlayY: 'center' })
                        .withFallbackPosition({ originX: fallbackX, originY: 'center' }, { overlayX: fallbackX, overlayY: 'center' });
                }
            }
            return strategy;
        };
        NovoOverlayTemplateComponent.prototype.getScrollStrategy = function () {
            switch (this.scrollStrategy) {
                case 'block':
                    return this.overlay.scrollStrategies.block();
                case 'reposition':
                    return this.overlay.scrollStrategies.reposition();
                default:
                    return this.overlay.scrollStrategies.close();
            }
        };
        NovoOverlayTemplateComponent.prototype.checkSizes = function () {
            if (this.overlayRef) {
                if (!this.width) {
                    this.overlayRef.getConfig().width = this.getHostWidth();
                }
                if (this.height) {
                    this.overlayRef.getConfig().height = this.height;
                }
                this.overlayRef.updateSize(this.overlayRef.getConfig());
                this.overlayRef.updatePosition();
                this.changeDetectorRef.markForCheck();
            }
        };
        NovoOverlayTemplateComponent.prototype.getConnectedElement = function () {
            return this.parent;
        };
        NovoOverlayTemplateComponent.prototype.getHostWidth = function () {
            return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
        };
        return NovoOverlayTemplateComponent;
    }());
    NovoOverlayTemplateComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-overlay-template',
                    template: "\n    <ng-template>\n      <div class=\"novo-overlay-panel\" role=\"listbox\" [id]=\"id\" #panel><ng-content></ng-content></div>\n    </ng-template>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoOverlayTemplateComponent.ctorParameters = function () { return [
        { type: i1.Overlay },
        { type: i0.ViewContainerRef },
        { type: i0.NgZone },
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    NovoOverlayTemplateComponent.propDecorators = {
        template: [{ type: i0.ViewChild, args: [i0.TemplateRef,] }],
        panel: [{ type: i0.ViewChild, args: ['panel',] }],
        position: [{ type: i0.Input }],
        scrollStrategy: [{ type: i0.Input }],
        width: [{ type: i0.Input }],
        height: [{ type: i0.Input }],
        closeOnSelect: [{ type: i0.Input }],
        select: [{ type: i0.Output }],
        opening: [{ type: i0.Output }],
        closing: [{ type: i0.Output }],
        parent: [{ type: i0.Input }]
    };

    // NG2
    var NovoOverlayModule = /** @class */ (function () {
        function NovoOverlayModule() {
        }
        return NovoOverlayModule;
    }());
    NovoOverlayModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, i1.OverlayModule, scrolling.ScrollingModule],
                    declarations: [NovoOverlayTemplateComponent],
                    exports: [NovoOverlayTemplateComponent, scrolling.ScrollingModule],
                },] }
    ];

    var NovoDropDownTrigger = /** @class */ (function () {
        function NovoDropDownTrigger(element) {
            this.element = element;
        }
        return NovoDropDownTrigger;
    }());
    NovoDropDownTrigger.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[dropdownTrigger]',
                    host: {
                        class: 'novo-dropdown-trigger',
                    },
                },] }
    ];
    NovoDropDownTrigger.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    // Create Base Class from Mixins
    // Boilerplate for applying mixins
    var NovoDropdownBase = /** @class */ (function () {
        function NovoDropdownBase() {
        }
        return NovoDropdownBase;
    }());
    var NovoDropdowMixins = mixinOverlay(mixinTabIndex(mixinDisabled(NovoDropdownBase), 1));
    var NovoDropdownElement = /** @class */ (function (_super) {
        __extends(NovoDropdownElement, _super);
        function NovoDropdownElement(element, ref) {
            var _this = _super.call(this) || this;
            _this.element = element;
            _this.ref = ref;
            _this.parentScrollAction = 'close';
            _this.side = 'default';
            _this.scrollStrategy = 'reposition';
            /**
             * Keep dropdown open after an item is selected
             */
            _this.keepOpen = false;
            _this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
            _this.appendToBody = false; // Deprecated
            _this.toggled = new i0.EventEmitter();
            _this._selectedOptionChanges = rxjs.Subscription.EMPTY;
            /** The Subject to complete all subscriptions when destroyed. */
            _this._onDestroy = new rxjs.Subject();
            _this._multiple = false;
            _this.clickHandler = _this.togglePanel.bind(_this);
            _this.closeHandler = _this.closePanel.bind(_this);
            return _this;
        }
        Object.defineProperty(NovoDropdownElement.prototype, "multiple", {
            /** Whether the user should be allowed to select multiple options. */
            get: function () {
                return this._multiple;
            },
            set: function (value) {
                this._multiple = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDropdownElement.prototype, "button", {
            get: function () {
                return this._trigger || this._button;
            },
            enumerable: false,
            configurable: true
        });
        NovoDropdownElement.prototype.ngOnInit = function () {
            if (this.appendToBody) {
                notify("'appendToBody' has been deprecated. Please remove this attribute.");
            }
        };
        NovoDropdownElement.prototype.ngAfterContentInit = function () {
            var _this = this;
            // Add a click handler to the button to toggle the menu
            this.button.element.nativeElement.addEventListener('click', this.clickHandler);
            this.button.element.nativeElement.tabIndex = -1;
            this.options.changes.pipe(operators.takeUntil(this._onDestroy)).subscribe(function () {
                _this._initKeyManager();
                _this._watchSelectionEvents();
            });
            this._initKeyManager();
            this._watchSelectionEvents();
            this.focus();
        };
        NovoDropdownElement.prototype.ngAfterViewInit = function () {
            this._watchPanelEvents();
        };
        NovoDropdownElement.prototype.ngOnDestroy = function () {
            this._onDestroy.next();
            this._onDestroy.complete();
            // Remove listener
            if (this.button) {
                this.button.element.nativeElement.removeEventListener('click', this.clickHandler);
            }
        };
        NovoDropdownElement.prototype.focus = function (options) {
            if (!this.disabled) {
                this.element.nativeElement.focus(options);
            }
        };
        Object.defineProperty(NovoDropdownElement.prototype, "items", {
            set: function (items) {
                // this._items = items;
                // this.activeIndex = -1;
                // // Get the innerText of all the items to allow for searching
                // this._textItems = items.map((item: NovoItemElement) => {
                //   return item.element.nativeElement.innerText;
                // });
            },
            enumerable: false,
            configurable: true
        });
        /** Handles all keydown events on the select. */
        NovoDropdownElement.prototype._handleKeydown = function (event) {
            if (!this.disabled) {
                this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
            }
        };
        /** Handles keyboard events while the select is closed. */
        NovoDropdownElement.prototype._handleClosedKeydown = function (event) {
            var key = event.key;
            var isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */ || key === "ArrowLeft" /* ArrowLeft */ || key === "ArrowRight" /* ArrowRight */;
            var isOpenKey = key === "Enter" /* Enter */ || key === " " /* Space */;
            var manager = this._keyManager;
            // Open the select on ALT + arrow key to match the native <select>
            if ((!manager.isTyping() && isOpenKey && !keycodes.hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
                event.preventDefault(); // prevents the page from scrolling down when pressing space
                this.openPanel();
            }
        };
        /** Handles keyboard events when the selected is open. */
        NovoDropdownElement.prototype._handleOpenKeydown = function (event) {
            var manager = this._keyManager;
            var key = event.key;
            var isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */;
            var isTyping = manager.isTyping();
            var isInputField = event.target;
            if (isArrowKey && event.altKey) {
                // Close the select on ALT + arrow key to match the native <select>
                event.preventDefault();
                this.closePanel();
                // Don't do anything in this case if the user is typing,
                // because the typing sequence can include the space key.
            }
            else if (!isTyping && (key === "Enter" /* Enter */ || key === " " /* Space */) && manager.activeItem && !keycodes.hasModifierKey(event)) {
                event.preventDefault();
                this._multiple ? manager.activeItem._selectViaInteraction() : manager.activeItem._clickViaInteraction();
            }
            else if (!isTyping && this._multiple && ['a', 'A'].includes(key) && event.ctrlKey) {
                event.preventDefault();
                var hasDeselectedOptions_1 = this.options.some(function (opt) { return !opt.disabled && !opt.selected; });
                this.options.forEach(function (option) {
                    if (!option.disabled) {
                        hasDeselectedOptions_1 ? option.select() : option.deselect();
                    }
                });
            }
            else if ("Escape" /* Escape */ === key) {
                this.closePanel();
            }
            else {
                var previouslyFocusedIndex = manager.activeItemIndex;
                manager.onKeydown(event);
                if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                    manager.activeItem._selectViaInteraction();
                }
            }
        };
        NovoDropdownElement.prototype._watchPanelEvents = function () {
            var _this = this;
            var panelStateChanges = rxjs.merge(this.overlay.opening, this.overlay.closing);
            panelStateChanges.pipe(operators.takeUntil(this._onDestroy)).subscribe(function (event) { return _this.toggled.emit(event); });
        };
        NovoDropdownElement.prototype._watchSelectionEvents = function () {
            var _this = this;
            var selectionEvents = this.options ? rxjs.merge.apply(void 0, __spread(this.options.map(function (option) { return option.onSelectionChange; }))) : rxjs.of();
            this._selectedOptionChanges.unsubscribe();
            this._selectedOptionChanges = selectionEvents.pipe(operators.takeUntil(this._onDestroy)).subscribe(function (event) {
                // this.handleSelection(event.source, event.isUserInput);
                if (event.isUserInput && !_this.multiple) {
                    _this._clearPreviousSelectedOption(_this._keyManager.activeItem);
                    if (!_this.keepOpen && _this.panelOpen) {
                        _this.closePanel();
                        _this.focus();
                    }
                }
            });
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoDropdownElement.prototype._clearPreviousSelectedOption = function (skip) {
            this.options.forEach(function (option) {
                if (option !== skip && option.selected) {
                    option.deselect();
                }
            });
        };
        /** Sets up a key manager to listen to keyboard events on the overlay panel. */
        NovoDropdownElement.prototype._initKeyManager = function () {
            var _this = this;
            this._keyManager = new a11y.ActiveDescendantKeyManager(this.options).withTypeAhead(250).withHomeAndEnd();
            // .withAllowedModifierKeys(['shiftKey']);
            this._keyManager.tabOut.pipe(operators.takeUntil(this._onDestroy)).subscribe(function () {
                if (_this.panelOpen) {
                    // Restore focus to the trigger before closing. Ensures that the focus
                    // position won't be lost if the user got focus into the overlay.
                    _this.focus();
                    _this.closePanel();
                }
            });
            this._keyManager.change.pipe(operators.takeUntil(this._onDestroy)).subscribe(function () {
                if (_this.panelOpen && _this.overlay) {
                    _this._scrollOptionIntoView(_this._keyManager.activeItemIndex || 0);
                }
            });
        };
        /** Scrolls the active option into view. */
        NovoDropdownElement.prototype._scrollOptionIntoView = function (index) {
            var labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);
            var itemHeight = this._getItemHeight();
            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, this.panel.nativeElement.offsetHeight);
        };
        /** Calculates the height of the select's options. */
        NovoDropdownElement.prototype._getItemHeight = function () {
            var _a = __read(this.options, 1), first = _a[0];
            if (first) {
                return first._getHostElement().offsetHeight;
            }
            return 0;
        };
        return NovoDropdownElement;
    }(NovoDropdowMixins));
    NovoDropdownElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-dropdown',
                    template: "\n    <ng-content select=\"button,novo-button,[dropdownTrigger]\" #trigger></ng-content>\n    <novo-overlay-template [parent]=\"element\" [width]=\"width\" [position]=\"side\" [scrollStrategy]=\"scrollStrategy\">\n      <div #panel class=\"dropdown-container {{ containerClass }}\" [style.height.px]=\"height\" [class.has-height]=\"!!height\">\n        <ng-content></ng-content>\n      </div>\n    </novo-overlay-template>\n  ",
                    // providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoDropdownElement }],
                    host: {
                        '[attr.tabIndex]': 'disabled ? -1 : 0',
                    }
                },] }
    ];
    NovoDropdownElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoDropdownElement.propDecorators = {
        parentScrollSelector: [{ type: i0.Input }],
        parentScrollAction: [{ type: i0.Input }],
        containerClass: [{ type: i0.Input }],
        side: [{ type: i0.Input }],
        scrollStrategy: [{ type: i0.Input }],
        keepOpen: [{ type: i0.Input }],
        height: [{ type: i0.Input }],
        width: [{ type: i0.Input }],
        appendToBody: [{ type: i0.Input }],
        toggled: [{ type: i0.Output }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }],
        _button: [{ type: i0.ContentChild, args: [NovoButtonElement,] }],
        _trigger: [{ type: i0.ContentChild, args: [NovoDropDownTrigger,] }],
        optionGroups: [{ type: i0.ContentChildren, args: [NovoOptgroup, { descendants: true },] }],
        options: [{ type: i0.ContentChildren, args: [NovoOption, { descendants: true },] }],
        panel: [{ type: i0.ViewChild, args: ['panel',] }],
        multiple: [{ type: i0.Input }],
        _handleKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoDropdownElement.prototype, "keepOpen", void 0);
    // Deprecated below here ---------------------------
    var NovoItemElement = /** @class */ (function () {
        function NovoItemElement(dropdown, element) {
            this.dropdown = dropdown;
            this.element = element;
            this.keepOpen = false;
            this.action = new i0.EventEmitter();
            this.active = false;
            notify("'item' element has been deprecated. Please use 'novo-option' and 'novo-optgroup'.");
        }
        NovoItemElement.prototype.onClick = function (event) {
            // Poor man's disable
            if (!this.disabled) {
                // Close if keepOpen is false
                if (!this.keepOpen) {
                    this.dropdown.closePanel();
                }
                // Emit the action
                this.action.emit({ originalEvent: event });
            }
        };
        return NovoItemElement;
    }());
    NovoItemElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item',
                    template: '<novo-option><ng-content></ng-content></novo-option>',
                    host: {
                        '[class.disabled]': 'disabled',
                        '[class.active]': 'active',
                    }
                },] }
    ];
    NovoItemElement.ctorParameters = function () { return [
        { type: NovoDropdownElement },
        { type: i0.ElementRef }
    ]; };
    NovoItemElement.propDecorators = {
        disabled: [{ type: i0.Input }],
        keepOpen: [{ type: i0.Input }],
        action: [{ type: i0.Output }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };
    var NovoDropdownListElement = /** @class */ (function () {
        function NovoDropdownListElement(dropdown) {
            this.dropdown = dropdown;
            notify("'list' element has been deprecated. Please use novo-option and novo-optgroup.");
        }
        NovoDropdownListElement.prototype.ngAfterContentInit = function () {
            var _this = this;
            this.dropdown.items = this.items;
            this.items.changes.subscribe(function () {
                _this.dropdown.items = _this.items;
            });
        };
        return NovoDropdownListElement;
    }());
    NovoDropdownListElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'list',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NovoDropdownListElement.ctorParameters = function () { return [
        { type: NovoDropdownElement }
    ]; };
    NovoDropdownListElement.propDecorators = {
        items: [{ type: i0.ContentChildren, args: [NovoItemElement,] }]
    };
    var NovoDropDownItemHeaderElement = /** @class */ (function () {
        function NovoDropDownItemHeaderElement() {
            notify("'dropdown-item-header' element has been deprecated. Please use novo-option and novo-optgroup.");
        }
        return NovoDropDownItemHeaderElement;
    }());
    NovoDropDownItemHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'dropdown-item-header',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NovoDropDownItemHeaderElement.ctorParameters = function () { return []; };

    // NG2
    var NovoDropdownModule = /** @class */ (function () {
        function NovoDropdownModule() {
        }
        return NovoDropdownModule;
    }());
    NovoDropdownModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [NovoOverlayModule, NovoOptionModule],
                    declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoDropDownTrigger],
                    exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoDropDownTrigger],
                },] }
    ];

    var NovoIconComponent = /** @class */ (function () {
        function NovoIconComponent(element, cdr) {
            this.element = element;
            this.cdr = cdr;
            this.role = 'img';
        }
        Object.defineProperty(NovoIconComponent.prototype, "alt", {
            get: function () {
                return this.ariaLabel;
            },
            set: function (value) {
                this.ariaLabel = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoIconComponent.prototype, "name", {
            get: function () {
                return this.iconName;
            },
            set: function (iconName) {
                this.iconName = "bhi-" + iconName;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoIconComponent.prototype, "hb_classBinding", {
            get: function () {
                return [this.color ? "text-color-" + this.color : null, this.size ? "text-size-" + this.size : null].filter(Boolean).join(' ');
            },
            enumerable: false,
            configurable: true
        });
        NovoIconComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.element.nativeElement.textContent.trim()) {
                Promise.resolve().then(function () {
                    _this.name = _this.element.nativeElement.textContent.trim();
                    _this.cdr.markForCheck();
                });
            }
        };
        NovoIconComponent.prototype.projectContentChanged = function (record) {
            this.name = this.element.nativeElement.textContent.trim();
            this.cdr.detectChanges();
        };
        return NovoIconComponent;
    }());
    NovoIconComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-icon',
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    template: "\n    <i [class]=\"iconName\"\n      ><span (cdkObserveContent)=\"projectContentChanged($event)\"><ng-content></ng-content></span\n    ></i>\n  ",
                    host: {
                        class: 'novo-icon',
                    }
                },] }
    ];
    NovoIconComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoIconComponent.propDecorators = {
        raised: [{ type: i0.HostBinding, args: ['class.novo-icon-raised',] }, { type: i0.Input }],
        theme: [{ type: i0.HostBinding, args: ['attr.theme',] }, { type: i0.Input }],
        color: [{ type: i0.Input }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        ariaLabel: [{ type: i0.HostBinding, args: ['attr.aria-label',] }],
        size: [{ type: i0.Input }],
        smaller: [{ type: i0.HostBinding, args: ['class.text-size-smaller',] }, { type: i0.Input }],
        larger: [{ type: i0.HostBinding, args: ['class.text-size-larger',] }, { type: i0.Input }],
        alt: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        hb_classBinding: [{ type: i0.HostBinding, args: ['class',] }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoIconComponent.prototype, "smaller", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoIconComponent.prototype, "larger", void 0);

    var NovoIconModule = /** @class */ (function () {
        function NovoIconModule() {
        }
        return NovoIconModule;
    }());
    NovoIconModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [observers.ObserversModule],
                    exports: [NovoIconComponent],
                    declarations: [NovoIconComponent],
                },] }
    ];

    // NG2
    var NovoListElement = /** @class */ (function () {
        function NovoListElement(element) {
            this.element = element;
        }
        return NovoListElement;
    }());
    NovoListElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-list',
                    host: {
                        class: 'novo-list',
                        '[class.vertical-list]': 'direction === "vertical"',
                        '[class.horizontal-list]': 'direction === "horizontal"',
                        '[attr.theme]': 'theme',
                    },
                    template: " <ng-content></ng-content> "
                },] }
    ];
    NovoListElement.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoListElement.propDecorators = {
        theme: [{ type: i0.Input }],
        direction: [{ type: i0.Input }]
    };
    var NovoItemAvatarElement = /** @class */ (function () {
        function NovoItemAvatarElement() {
        }
        return NovoItemAvatarElement;
    }());
    NovoItemAvatarElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item-avatar, novo-item-avatar',
                    template: " <novo-icon *ngIf=\"icon\" [color]=\"color || icon\">{{ icon }}</novo-icon> ",
                    host: {
                        class: 'novo-item-avatar',
                    }
                },] }
    ];
    NovoItemAvatarElement.propDecorators = {
        icon: [{ type: i0.Input }],
        color: [{ type: i0.Input }]
    };
    var NovoItemTitleElement = /** @class */ (function () {
        function NovoItemTitleElement() {
        }
        return NovoItemTitleElement;
    }());
    NovoItemTitleElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item-title, novo-item-title',
                    template: "<ng-content></ng-content>",
                    host: {
                        class: 'novo-item-title',
                    }
                },] }
    ];
    var NovoItemHeaderElement = /** @class */ (function () {
        function NovoItemHeaderElement() {
        }
        return NovoItemHeaderElement;
    }());
    NovoItemHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item-header, novo-item-header',
                    template: "\n    <novo-title class=\"novo-item-header-container\" size=\"md\">\n      <ng-content select=\"item-avatar, novo-item-avatar\"></ng-content>\n      <ng-content select=\"item-title, novo-item-title\"></ng-content>\n      <ng-content select=\"item-header-end, novo-item-header-end\"></ng-content>\n    </novo-title>\n  ",
                    host: {
                        class: 'novo-item-header',
                    }
                },] }
    ];
    var NovoItemDateElement = /** @class */ (function () {
        function NovoItemDateElement() {
        }
        return NovoItemDateElement;
    }());
    NovoItemDateElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item-header-end, novo-item-header-end',
                    template: " <ng-content></ng-content> ",
                    host: {
                        class: 'novo-item-header-end',
                    }
                },] }
    ];
    var NovoItemContentElement = /** @class */ (function () {
        function NovoItemContentElement() {
        }
        return NovoItemContentElement;
    }());
    NovoItemContentElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item-content, novo-item-content',
                    host: {
                        class: 'novo-item-content',
                        '[class.vertical-list]': 'direction === "vertical"',
                        '[class.horizontal-list]': 'direction === "horizontal"',
                    },
                    template: " <ng-content></ng-content> "
                },] }
    ];
    NovoItemContentElement.propDecorators = {
        direction: [{ type: i0.Input }]
    };
    var NovoItemEndElement = /** @class */ (function () {
        function NovoItemEndElement() {
        }
        return NovoItemEndElement;
    }());
    NovoItemEndElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'item-end, novo-item-end',
                    template: " <ng-content></ng-content> ",
                    host: {
                        class: 'novo-item-end',
                    }
                },] }
    ];
    var NovoListItemElement = /** @class */ (function () {
        function NovoListItemElement(element) {
            this.element = element;
            this.avatar = false;
        }
        NovoListItemElement.prototype.ngOnInit = function () {
            this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
        };
        return NovoListItemElement;
    }());
    NovoListItemElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-list-item, a[list-item], button[list-item]',
                    template: "\n    <div class=\"list-item\" [ngClass]=\"{ avatar: avatar }\" *ngIf=\"_content || _header\">\n      <ng-content select=\"item-header, novo-item-header\"></ng-content>\n      <ng-content select=\"item-content, novo-item-content\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <ng-content select=\"item-end, novo-item-end\"></ng-content>\n  ",
                    host: {
                        class: 'novo-list-item',
                    }
                },] }
    ];
    NovoListItemElement.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoListItemElement.propDecorators = {
        _content: [{ type: i0.ContentChild, args: [NovoItemContentElement,] }],
        _header: [{ type: i0.ContentChild, args: [NovoItemHeaderElement,] }]
    };

    // NG2
    var NovoListModule = /** @class */ (function () {
        function NovoListModule() {
        }
        return NovoListModule;
    }());
    NovoListModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoCommonModule, NovoIconModule],
                    declarations: [
                        NovoListElement,
                        NovoListItemElement,
                        NovoItemAvatarElement,
                        NovoItemTitleElement,
                        NovoItemContentElement,
                        NovoItemEndElement,
                        NovoItemHeaderElement,
                        NovoItemDateElement,
                    ],
                    exports: [
                        NovoListElement,
                        NovoListItemElement,
                        NovoItemAvatarElement,
                        NovoItemTitleElement,
                        NovoItemHeaderElement,
                        NovoItemContentElement,
                        NovoItemEndElement,
                        NovoItemDateElement,
                    ],
                },] }
    ];

    var NovoLoadingElement = /** @class */ (function () {
        function NovoLoadingElement() {
            this.size = 'medium';
        }
        Object.defineProperty(NovoLoadingElement.prototype, "theme", {
            get: function () {
                return this.color;
            },
            /**
             * **deprecated** please use `color`.
             * @deprecated
             **/
            set: function (value) {
                console.warn("'theme' property is deprecated, please use 'color'.");
                this.color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoLoadingElement.prototype, "hb_class", {
            get: function () {
                return ["color-" + this.color, "size-" + this.size].join(' ');
            },
            enumerable: false,
            configurable: true
        });
        return NovoLoadingElement;
    }());
    NovoLoadingElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-loading',
                    template: "\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n    <span class=\"dot\"></span>\n  "
                },] }
    ];
    NovoLoadingElement.propDecorators = {
        theme: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        hb_class: [{ type: i0.HostBinding, args: ['class',] }]
    };
    var NovoSpinnerElement = /** @class */ (function () {
        function NovoSpinnerElement() {
            this.size = 'medium';
        }
        Object.defineProperty(NovoSpinnerElement.prototype, "theme", {
            get: function () {
                return this.color;
            },
            /**
             * **deprecated** please use `color`.
             * @deprecated
             **/
            set: function (value) {
                console.warn("'theme' property is deprecated, please use 'color'.");
                this.color = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSpinnerElement.prototype, "inverse", {
            get: function () {
                return this._inverse;
            },
            set: function (value) {
                this._inverse = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSpinnerElement.prototype, "hb_class", {
            get: function () {
                return [this.inverse ? 'color-white' : "color-" + this.color, "size-" + this.size].join(' ');
            },
            enumerable: false,
            configurable: true
        });
        return NovoSpinnerElement;
    }());
    NovoSpinnerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-spinner',
                    template: "\n    <div class=\"dot1 dot\"></div>\n    <div class=\"dot2 dot\"></div>\n    <div class=\"dot3 dot\"></div>\n    <div class=\"dot4 dot\"></div>\n    <div class=\"dot5 dot\"></div>\n    <div class=\"dot6 dot\"></div>\n    <div class=\"dot7 dot\"></div>\n    <div class=\"dot8 dot\"></div>\n    <div class=\"dot9 dot\"></div>\n    <div class=\"dot10 dot\"></div>\n    <div class=\"dot11 dot\"></div>\n    <div class=\"dot12 dot\"></div>\n  "
                },] }
    ];
    NovoSpinnerElement.propDecorators = {
        theme: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        inverse: [{ type: i0.Input }],
        hb_class: [{ type: i0.HostBinding, args: ['class',] }]
    };
    var NovoSkeletonDirective = /** @class */ (function () {
        function NovoSkeletonDirective() {
            this.skeleton = true;
        }
        return NovoSkeletonDirective;
    }());
    NovoSkeletonDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[skeleton]',
                },] }
    ];
    NovoSkeletonDirective.propDecorators = {
        skeleton: [{ type: i0.HostBinding, args: ['class.skeleton',] }]
    };
    var NovoLoadedDirective = /** @class */ (function () {
        function NovoLoadedDirective() {
        }
        return NovoLoadedDirective;
    }());
    NovoLoadedDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[loaded]',
                },] }
    ];
    var NovoIsLoadingDirective = /** @class */ (function () {
        function NovoIsLoadingDirective(viewContainer) {
            this.viewContainer = viewContainer;
            this.hasView = false;
            this.skeletonViews = [];
            this.loadedViews = [];
        }
        Object.defineProperty(NovoIsLoadingDirective.prototype, "isLoading", {
            set: function (condition) {
                if (!condition && !this.hasView) {
                    this.destroyViews(this.loadedViews);
                    this.skeletonViews = this.createViews(this.skeletonTemplates);
                    this.hasView = true;
                }
                else if (condition && this.hasView) {
                    this.destroyViews(this.skeletonViews);
                    this.loadedViews = this.createViews(this.loadedTemplates);
                    this.hasView = false;
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoIsLoadingDirective.prototype.createViews = function (templates) {
            var _this = this;
            return templates && templates.map(function (v, i) { return _this.viewContainer.createEmbeddedView(v, null, i); });
        };
        NovoIsLoadingDirective.prototype.destroyViews = function (views) {
            var e_1, _a;
            if (views) {
                try {
                    for (var views_1 = __values(views), views_1_1 = views_1.next(); !views_1_1.done; views_1_1 = views_1.next()) {
                        var view = views_1_1.value;
                        view.destroy();
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (views_1_1 && !views_1_1.done && (_a = views_1.return)) _a.call(views_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        return NovoIsLoadingDirective;
    }());
    NovoIsLoadingDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[isLoading]',
                },] }
    ];
    NovoIsLoadingDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef }
    ]; };
    NovoIsLoadingDirective.propDecorators = {
        skeletonTemplates: [{ type: i0.ContentChildren, args: [NovoSkeletonDirective, { read: i0.TemplateRef },] }],
        loadedTemplates: [{ type: i0.ContentChildren, args: [NovoLoadedDirective, { read: i0.TemplateRef },] }],
        isLoading: [{ type: i0.Input }]
    };

    // NG2
    var NovoLoadingModule = /** @class */ (function () {
        function NovoLoadingModule() {
        }
        return NovoLoadingModule;
    }());
    NovoLoadingModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                    exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                },] }
    ];

    // Value accessor for the component (supports ngModel)
    var SWITCH_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoSwitchElement; }),
        multi: true,
    };
    var NovoSwitchElement = /** @class */ (function () {
        function NovoSwitchElement(ref) {
            this.ref = ref;
            this.theme = 'ocean';
            this.icons = ['x', 'check'];
            this.disabled = false;
            this.onChange = new i0.EventEmitter();
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        Object.defineProperty(NovoSwitchElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        NovoSwitchElement.prototype.onKeydown = function (event) {
            if (event.key === " " /* Space */) {
                event.preventDefault();
                this.toggle(event);
            }
        };
        NovoSwitchElement.prototype.toggle = function (event) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.disabled) {
                return;
            }
            this.value = !this.value;
            this.onChange.next(this.value);
            this.onModelChange(this.value);
            this.ref.markForCheck();
        };
        NovoSwitchElement.prototype.writeValue = function (model) {
            this.value = model;
            this.ref.markForCheck();
        };
        NovoSwitchElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoSwitchElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        return NovoSwitchElement;
    }());
    NovoSwitchElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-switch',
                    providers: [SWITCH_VALUE_ACCESSOR],
                    template: "\n    <div (click)=\"toggle($event)\">\n      <div class=\"novo-switch-container\">\n        <div class=\"novo-switch-bar\"></div>\n        <div class=\"novo-switch-thumb-container\">\n          <div class=\"novo-switch-thumb\">\n            <novo-icon *ngIf=\"!value\" smaller>{{ icons[0] }}</novo-icon>\n            <novo-icon *ngIf=\"value\" smaller>{{ icons[1] }}</novo-icon>\n          </div>\n        </div>\n      </div>\n      <div class=\"novo-switch-label\"><ng-content></ng-content></div>\n    </div>\n  ",
                    host: {
                        role: 'checkbox',
                        class: 'novo-switch',
                        '[attr.aria-checked]': 'value',
                        '[attr.aria-disabled]': 'disabled',
                        '(keydown)': 'onKeydown($event)',
                        '[class]': 'theme',
                    }
                },] }
    ];
    NovoSwitchElement.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoSwitchElement.propDecorators = {
        theme: [{ type: i0.Input }],
        icons: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.novo-switch-disabled',] }],
        onChange: [{ type: i0.Output }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoSwitchElement.prototype, "disabled", void 0);

    var NovoSwitchModule = /** @class */ (function () {
        function NovoSwitchModule() {
        }
        return NovoSwitchModule;
    }());
    NovoSwitchModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoIconModule],
                    declarations: [NovoSwitchElement],
                    exports: [NovoSwitchElement],
                },] }
    ];

    /**
     * @description This is the actual list of matches that gets injected into the DOM.
     */
    var ChecklistPickerResults = /** @class */ (function (_super) {
        __extends(ChecklistPickerResults, _super);
        function ChecklistPickerResults(element, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.labels = labels;
            return _this;
        }
        ChecklistPickerResults.prototype.search = function () {
            var _this = this;
            var options = this.config.options;
            // only set this the first time
            return rxjs.from(new Promise(function (resolve, reject) {
                // Check if there is match data
                if (options) {
                    // Resolve the data
                    if (Array.isArray(options)) {
                        _this.isStatic = true;
                        // Arrays are returned immediately
                        resolve(options);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    // No data gets rejected
                    reject('error');
                }
            }));
        };
        /**
         * @param matches - Collection of objects=
         *
         * @description This function loops through the picker options and creates a filtered list of objects that contain
         * the newSearch.
         */
        ChecklistPickerResults.prototype.filterData = function (matches) {
            var _this = this;
            if (this.term && matches) {
                this.filteredMatches = matches.map(function (section) {
                    var items = section.originalData.filter(function (match) {
                        return ~String(match.label).toLowerCase().indexOf(_this.term.toLowerCase());
                    });
                    section.data = items;
                    return section;
                }, this);
                return this.filteredMatches;
            }
            else if (this.term === '') {
                matches.forEach(function (section) {
                    section.data = section.originalData;
                });
                return matches;
            }
            // Show no recent results template
            return matches;
        };
        ChecklistPickerResults.prototype.selectMatch = function (event, item) {
            Helpers.swallowEvent(event);
            if (item.indeterminate) {
                item.indeterminate = false;
                item.checked = true;
            }
            else {
                item.checked = !item.checked;
            }
            var selected = this.activeMatch;
            if (selected) {
                this.parent.value = selected;
            }
            this.ref.markForCheck();
            return false;
        };
        return ChecklistPickerResults;
    }(BasePickerResults));
    ChecklistPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'checklist-picker-results',
                    host: {
                        class: 'active picker-results',
                    },
                    template: "\n    <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n    <ul *ngIf=\"matches.length > 0\">\n      <span *ngFor=\"let section of matches; let i = index\">\n        <li class=\"header caption\" *ngIf=\"section.data.length > 0\">{{ section.label || section.type }}</li>\n        <li\n          *ngFor=\"let match of section.data; let i = index\"\n          [ngClass]=\"{ checked: match.checked }\"\n          (click)=\"selectMatch($event, match)\"\n          [class.active]=\"match === activeMatch\"\n          (mouseenter)=\"selectActive(match)\"\n        >\n          <label>\n            <i\n              [ngClass]=\"{\n                'bhi-checkbox-empty': !match.checked,\n                'bhi-checkbox-filled': match.checked,\n                'bhi-checkbox-indeterminate': match.indeterminate\n              }\"\n            ></i>\n            {{ match.label }}\n          </label>\n        </li>\n      </span>\n    </ul>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError && term !== ''\">{{ labels.pickerEmpty }}</p>\n  "
                },] }
    ];
    ChecklistPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };

    var DistributionListPickerResults = /** @class */ (function (_super) {
        __extends(DistributionListPickerResults, _super);
        function DistributionListPickerResults(element, sanitizer, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.sanitizer = sanitizer;
            _this.labels = labels;
            _this.active = true;
            _this.sanitizer = sanitizer;
            return _this;
        }
        Object.defineProperty(DistributionListPickerResults.prototype, "isHidden", {
            get: function () {
                return this.matches.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        DistributionListPickerResults.prototype.getListElement = function () {
            return this.element.nativeElement.querySelector('novo-list');
        };
        DistributionListPickerResults.prototype.sanitizeHTML = function (html) {
            return this.sanitizer.bypassSecurityTrustHtml(html);
        };
        return DistributionListPickerResults;
    }(BasePickerResults));
    DistributionListPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'distribution-list-picker-results',
                    template: "\n    <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n      <novo-loading theme=\"line\"></novo-loading>\n    </section>\n    <novo-list direction=\"vertical\" *ngIf=\"matches?.length > 0 && !hasError\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-header>\n          <item-title>\n            <span [innerHtml]=\"sanitizeHTML(match.label)\"></span>\n          </item-title>\n        </item-header>\n        <item-content direction=\"horizontal\">\n          <p>\n            <span class=\"label\">{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>\n          </p>\n          <p>\n            <span class=\"label\">{{ labels.dateAdded }}: </span\n            ><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n          </p>\n        </item-content>\n      </novo-list-item>\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches?.length > 0\"></novo-loading>\n    </novo-list>\n  "
                },] }
    ];
    DistributionListPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: platformBrowser.DomSanitizer },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    DistributionListPickerResults.propDecorators = {
        active: [{ type: i0.HostBinding, args: ['class.active',] }],
        isHidden: [{ type: i0.HostBinding, args: ['hidden',] }]
    };

    var GroupedMultiPickerResults = /** @class */ (function (_super) {
        __extends(GroupedMultiPickerResults, _super);
        function GroupedMultiPickerResults(element, renderer, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.renderer = renderer;
            _this.labels = labels;
            _this.customFilterEnabled = false;
            _this.placeholder = '';
            _this.internalMap = new Map();
            return _this;
        }
        Object.defineProperty(GroupedMultiPickerResults.prototype, "term", {
            set: function (value) {
                var _this = this;
                // Display all only will work for static categories
                if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
                    throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
                }
                // Custom filter
                if (this.config.customFilter) {
                    this.customFilterEnabled = true;
                    this.customFilterLabel = this.config.customFilter.label;
                    this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
                    this.ref.markForCheck();
                    if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                        throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
                    }
                }
                else {
                    this.customFilterEnabled = false;
                }
                // Configure ALL
                if (this.config.displayAll && !this.selectedCategory) {
                    this.setAllCategory();
                }
                // Placeholder
                if (this.config.placeholder) {
                    this.placeholder = this.config.placeholder;
                }
                // Focus
                setTimeout(function () {
                    _this.inputElement.nativeElement.focus();
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(GroupedMultiPickerResults.prototype, "categories", {
            get: function () {
                if (this.config.categories || this.config.categoryMap) {
                    return (this.config.categories ||
                        Array.from(this.config.categoryMap.values()).filter(function (category) {
                            return category.value !== 'all';
                        }));
                }
                return [];
            },
            enumerable: false,
            configurable: true
        });
        GroupedMultiPickerResults.prototype.ngOnInit = function () {
            var _this = this;
            // Subscribe to keyboard events and debounce
            this.keyboardSubscription = rxjs.fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(operators.debounceTime(350), operators.distinctUntilChanged())
                .subscribe(function (event) {
                _this.searchTerm = event.target.value;
                _this.matches = _this.filterData();
                _this.ref.markForCheck();
            });
        };
        GroupedMultiPickerResults.prototype.ngOnDestroy = function () {
            // Cleanup
            this.keyboardSubscription.unsubscribe();
        };
        GroupedMultiPickerResults.prototype.setAllCategory = function () {
            // If we have display all, set the all categories up
            if (this.config.displayAll) {
                this.selectedCategory = { value: 'all', label: 'all' };
                var allItems_1 = [];
                Array.from(this.config.categoryMap.values())
                    .filter(function (category) {
                    return category.value !== 'all';
                })
                    .forEach(function (v) { return allItems_1.push.apply(allItems_1, __spread(v.items)); });
                this.matches = this.filter(allItems_1);
                this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems_1 });
                this.ref.markForCheck();
            }
        };
        GroupedMultiPickerResults.prototype.selectCategory = function (category) {
            // Scroll to top
            this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
            // Set focus
            this.inputElement.nativeElement.focus();
            // Find new items
            var key = category.value;
            this.selectedCategory = category;
            // Clear
            this.matches = [];
            this.ref.markForCheck();
            // New matches
            this.getNewMatches(category, key);
        };
        GroupedMultiPickerResults.prototype.clearSearchTerm = function (event) {
            Helpers.swallowEvent(event);
            this.searchTerm = '';
            this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
            this.ref.markForCheck();
        };
        GroupedMultiPickerResults.prototype.selectMatch = function (event, item) {
            // Set focus
            this.inputElement.nativeElement.focus();
            return _super.prototype.selectMatch.call(this, event);
        };
        GroupedMultiPickerResults.prototype.fireCustomFilter = function (value) {
            var _this = this;
            this.customFilterValue = value;
            // Clear cache map
            this.internalMap.clear();
            // Only fire if we have a selected category
            if (this.selectCategory) {
                // Find new items
                var key = this.selectedCategory.value;
                // Get new matches
                this.getNewMatches(this.selectedCategory, key);
                this.ref.markForCheck();
            }
            // Focus
            setTimeout(function () {
                _this.inputElement.nativeElement.focus();
            });
        };
        GroupedMultiPickerResults.prototype.filterData = function () {
            if (this.selectedCategory) {
                if (this.config.categoryMap) {
                    return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
                }
                else {
                    return this.filter(this.internalMap.get(this.selectedCategory.value).items);
                }
            }
            return [];
        };
        GroupedMultiPickerResults.prototype.getNewMatches = function (category, key) {
            var _this = this;
            // Get new matches
            if (this.config.categoryMap) {
                this.matches = this.filter(this.config.categoryMap.get(key).items);
                this.ref.markForCheck();
            }
            else {
                if (!this.config.getItemsForCategoryAsync) {
                    throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
                }
                if (!this.internalMap.get(key)) {
                    this.isLoading = true;
                    this.config.getItemsForCategoryAsync(key, this.customFilterValue).then(function (items) {
                        _this.internalMap.set(key, { value: category.value, label: category.label, items: items });
                        _this.matches = _this.filter(items, true);
                        _this.isLoading = false;
                        _this.ref.markForCheck();
                        setTimeout(function () {
                            _this.inputElement.nativeElement.focus();
                        });
                    });
                }
                else {
                    this.matches = this.filter(this.internalMap.get(key).items);
                    this.ref.markForCheck();
                }
            }
        };
        GroupedMultiPickerResults.prototype.filter = function (array, ignoreCustomFilter) {
            var _this = this;
            if (ignoreCustomFilter === void 0) { ignoreCustomFilter = false; }
            var matches = array;
            if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
                matches = matches.filter(function (match) {
                    var searchTerm = _this.searchTerm.toLowerCase();
                    return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
                });
            }
            if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
                matches = matches.filter(function (match) { return _this.config.customFilter.matchFunction(match, _this.customFilterValue); });
            }
            return matches;
        };
        return GroupedMultiPickerResults;
    }(BasePickerResults));
    GroupedMultiPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'grouped-multi-picker-results',
                    template: "\n    <div class=\"grouped-multi-picker-groups\">\n      <novo-list direction=\"vertical\">\n        <novo-list-item\n          *ngIf=\"config.displayAll\"\n          (click)=\"selectCategory({ value: 'all', label: 'all' })\"\n          [class.active]=\"selectedCategory?.value === 'all'\"\n          data-automation-id=\"display-all\"\n          [class.disabled]=\"isLoading\"\n        >\n          <item-content>\n            <span data-automation-id=\"label\">{{ labels.all }}</span>\n          </item-content>\n          <item-end>\n            <i class=\"bhi-next\"></i>\n          </item-end>\n        </novo-list-item>\n        <novo-list-item\n          *ngFor=\"let category of categories\"\n          (click)=\"selectCategory(category)\"\n          [class.active]=\"selectedCategory?.value === category.value\"\n          [attr.data-automation-id]=\"category.label\"\n          [class.disabled]=\"isLoading\"\n        >\n          <item-content>\n            <i *ngIf=\"category.iconClass\" [class]=\"category.iconClass\"></i>\n            <span data-automation-id=\"label\">{{ category.label }}</span>\n          </item-content>\n          <item-end>\n            <i class=\"bhi-next\"></i>\n          </item-end>\n        </novo-list-item>\n      </novo-list>\n      <footer\n        class=\"grouped-multi-picker-groups-footer\"\n        *ngIf=\"customFilterEnabled\"\n        data-automation-id=\"footer\"\n        [class.disabled]=\"isLoading\"\n      >\n        <novo-switch [(ngModel)]=\"customFilterValue\" (onChange)=\"fireCustomFilter($event)\" data-automation-id=\"switch\"></novo-switch>\n        <label data-automation-id=\"label\">{{ customFilterLabel }}</label>\n      </footer>\n    </div>\n    <div class=\"grouped-multi-picker-matches\">\n      <div class=\"grouped-multi-picker-input-container\" [hidden]=\"!selectedCategory\" data-automation-id=\"input-container\">\n        <input autofocus #input [(ngModel)]=\"searchTerm\" [disabled]=\"isLoading\" data-automation-id=\"input\" [placeholder]=\"placeholder\" />\n        <i class=\"bhi-search\" *ngIf=\"!searchTerm\" [class.disabled]=\"isLoading\" data-automation-id=\"seach-icon\"></i>\n        <i\n          class=\"bhi-times\"\n          *ngIf=\"searchTerm\"\n          (click)=\"clearSearchTerm($event)\"\n          [class.disabled]=\"isLoading\"\n          data-automation-id=\"remove-icon\"\n        ></i>\n      </div>\n      <div class=\"grouped-multi-picker-list-container\">\n        <novo-list direction=\"vertical\" #list>\n          <novo-list-item\n            *ngFor=\"let match of matches\"\n            (click)=\"selectMatch($event)\"\n            [class.active]=\"match === activeMatch\"\n            (mouseenter)=\"selectActive(match)\"\n            [class.disabled]=\"preselected(match) || isLoading\"\n            [attr.data-automation-id]=\"match.label\"\n          >\n            <item-content>\n              <span>{{ match.label }}</span>\n            </item-content>\n          </novo-list-item>\n        </novo-list>\n        <div\n          class=\"grouped-multi-picker-no-results\"\n          *ngIf=\"matches.length === 0 && !isLoading && selectedCategory\"\n          data-automation-id=\"empty-message\"\n        >\n          {{ labels.groupedMultiPickerEmpty }}\n        </div>\n        <div\n          class=\"grouped-multi-picker-no-category\"\n          *ngIf=\"matches.length === 0 && !isLoading && !selectedCategory\"\n          data-automation-id=\"select-category-message\"\n        >\n          {{ labels.groupedMultiPickerSelectCategory }}\n        </div>\n        <div class=\"grouped-multi-picker-loading\" *ngIf=\"isLoading\" data-automation-id=\"loading-message\">\n          <novo-loading theme=\"line\"></novo-loading>\n        </div>\n      </div>\n    </div>\n  "
                },] }
    ];
    GroupedMultiPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    GroupedMultiPickerResults.propDecorators = {
        inputElement: [{ type: i0.ViewChild, args: ['input', { static: true },] }],
        listElement: [{ type: i0.ViewChild, args: ['list',] }]
    };

    var MixedMultiPickerResults = /** @class */ (function (_super) {
        __extends(MixedMultiPickerResults, _super);
        function MixedMultiPickerResults(element, renderer, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.renderer = renderer;
            _this.labels = labels;
            _this.placeholder = '';
            _this.emptyOptionsLabel = '';
            _this.internalMap = new Map();
            return _this;
        }
        Object.defineProperty(MixedMultiPickerResults.prototype, "term", {
            set: function (value) {
                var _this = this;
                if (this.config.placeholder) {
                    this.placeholder = this.config.placeholder;
                }
                // Focus
                setTimeout(function () {
                    _this.inputElement.nativeElement.focus();
                });
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(MixedMultiPickerResults.prototype, "options", {
            get: function () {
                return this.config.options || [];
            },
            enumerable: false,
            configurable: true
        });
        MixedMultiPickerResults.prototype.ngOnDestroy = function () {
            // Cleanup
            if (this.keyboardSubscription) {
                this.keyboardSubscription.unsubscribe();
            }
            if (this.config.options) {
                this.config.options.forEach(function (option) {
                    if (option.clearSecondaryOptions) {
                        option.clearSecondaryOptions.unsubscribe();
                    }
                });
            }
        };
        MixedMultiPickerResults.prototype.selectPrimaryOption = function (primaryOption, event) {
            var _this = this;
            if (this.keyboardSubscription) {
                this.keyboardSubscription.unsubscribe();
            }
            // Scroll to top
            this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
            // Set focus
            this.inputElement.nativeElement.focus();
            // Find new items
            var key = primaryOption.value;
            this.selectedPrimaryOption = primaryOption;
            // Clear
            this.matches = [];
            this.ref.markForCheck();
            // New matches
            if (this.optionHasSecondaryOptions(primaryOption)) {
                // Subscribe to keyboard events and debounce
                this.keyboardSubscription = rxjs.fromEvent(this.inputElement.nativeElement, 'keyup')
                    .pipe(operators.debounceTime(350), operators.distinctUntilChanged())
                    .subscribe(function (keyEvent) {
                    _this.searchTerm = keyEvent.target.value;
                    _this.matches = _this.filterData();
                    _this.ref.markForCheck();
                });
                this.getNewMatches(primaryOption);
            }
            else {
                this.selectActive(primaryOption);
                this.selectMatch(event);
            }
        };
        MixedMultiPickerResults.prototype.selectMatch = function (event) {
            // Set focus
            this.inputElement.nativeElement.focus();
            return _super.prototype.selectMatch.call(this, event);
        };
        MixedMultiPickerResults.prototype.clearSearchTerm = function (event) {
            Helpers.swallowEvent(event);
            this.searchTerm = '';
            this.selectPrimaryOption({ value: this.selectedPrimaryOption.value, label: this.selectedPrimaryOption.label });
            this.ref.markForCheck();
        };
        MixedMultiPickerResults.prototype.optionHasSecondaryOptions = function (primaryOption) {
            return !!(primaryOption && (primaryOption.secondaryOptions || primaryOption.getSecondaryOptionsAsync));
        };
        MixedMultiPickerResults.prototype.shouldShowSearchBox = function (primaryOption) {
            return !!(primaryOption && primaryOption.showSearchOnSecondaryOptions);
        };
        MixedMultiPickerResults.prototype.clearPrimaryOption = function (primaryOption) {
            var _a;
            if (this.internalMap.get(primaryOption.value)) {
                if (primaryOption.value === ((_a = this.selectedPrimaryOption) === null || _a === void 0 ? void 0 : _a.value)) {
                    this.activeMatch = null;
                    this.matches = [];
                    this.selectedPrimaryOption = null;
                }
                this.internalMap.delete(primaryOption.value);
                this.ref.markForCheck();
            }
        };
        MixedMultiPickerResults.prototype.filterData = function () {
            if (this.selectedPrimaryOption) {
                if (this.selectedPrimaryOption.secondaryOptions) {
                    return this.filter(this.selectedPrimaryOption.secondaryOptions);
                }
                else {
                    return this.filter(this.internalMap.get(this.selectedPrimaryOption.value).items);
                }
            }
            return [];
        };
        MixedMultiPickerResults.prototype.filter = function (array) {
            var _this = this;
            var matches = array;
            if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedPrimaryOption) {
                matches = matches.filter(function (match) {
                    var searchTerm = _this.searchTerm.toLowerCase();
                    return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
                });
            }
            return matches;
        };
        MixedMultiPickerResults.prototype.getNewMatches = function (primaryOption) {
            var _this = this;
            // Get new matches
            if (primaryOption.secondaryOptions) {
                this.matches = this.filter(primaryOption.secondaryOptions);
                this.ref.markForCheck();
            }
            else {
                if (!primaryOption.getSecondaryOptionsAsync) {
                    throw new Error('An option needs to have either an array of secondaryOptions or a function getSecondaryOptionsAsync');
                }
                if (!this.internalMap.get(primaryOption.value)) {
                    this.isLoading = true;
                    primaryOption.getSecondaryOptionsAsync().then(function (items) {
                        _this.internalMap.set(primaryOption.value, { value: primaryOption.value, label: primaryOption.label, items: items });
                        _this.matches = _this.filter(items);
                        _this.isLoading = false;
                        _this.ref.markForCheck();
                        setTimeout(function () {
                            _this.inputElement.nativeElement.focus();
                        });
                    });
                    if (primaryOption.clearSecondaryOptions) {
                        primaryOption.clearSecondaryOptions.subscribe(function () {
                            _this.clearPrimaryOption(primaryOption);
                        });
                    }
                }
                else {
                    this.matches = this.filter(this.internalMap.get(primaryOption.value).items);
                    this.ref.markForCheck();
                }
            }
        };
        return MixedMultiPickerResults;
    }(BasePickerResults));
    MixedMultiPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'mixed-multi-picker-results',
                    template: " <div class=\"mixed-multi-picker-groups\">\n      <novo-list direction=\"vertical\">\n        <novo-list-item\n          *ngFor=\"let option of options\"\n          (click)=\"selectPrimaryOption(option, $event)\"\n          [class.active]=\"selectedPrimaryOption?.value === option.value\"\n          [attr.data-automation-id]=\"option.label\"\n          [class.disabled]=\"isLoading\"\n        >\n          <item-content>\n            <i *ngIf=\"option.iconClass\" [class]=\"option.iconClass\"></i>\n            <span data-automation-id=\"label\">{{ option.label }}</span>\n          </item-content>\n          <item-end *ngIf=\"optionHasSecondaryOptions(option)\">\n            <i class=\"bhi-next\"></i>\n          </item-end>\n        </novo-list-item>\n      </novo-list>\n    </div>\n    <div class=\"mixed-multi-picker-matches\" [hidden]=\"!optionHasSecondaryOptions(selectedPrimaryOption)\">\n      <div\n        class=\"mixed-multi-picker-input-container\"\n        [hidden]=\"!shouldShowSearchBox(selectedPrimaryOption)\"\n        data-automation-id=\"input-container\"\n      >\n        <input autofocus #input [(ngModel)]=\"searchTerm\" [disabled]=\"isLoading\" data-automation-id=\"input\" [placeholder]=\"placeholder\" />\n        <i class=\"bhi-search\" *ngIf=\"!searchTerm\" [class.disabled]=\"isLoading\" data-automation-id=\"seach-icon\"></i>\n        <i\n          class=\"bhi-times\"\n          *ngIf=\"searchTerm\"\n          (click)=\"clearSearchTerm($event)\"\n          [class.disabled]=\"isLoading\"\n          data-automation-id=\"remove-icon\"\n        ></i>\n      </div>\n      <div class=\"mixed-multi-picker-list-container\">\n        <novo-list direction=\"vertical\" #list>\n          <novo-list-item\n            *ngFor=\"let match of matches\"\n            (click)=\"selectMatch($event)\"\n            [class.active]=\"match === activeMatch\"\n            (mouseenter)=\"selectActive(match)\"\n            [class.disabled]=\"preselected(match) || isLoading\"\n            [attr.data-automation-id]=\"match.label\"\n          >\n            <item-content>\n              <span>{{ match.label }}</span>\n            </item-content>\n          </novo-list-item>\n        </novo-list>\n        <div\n          class=\"mixed-multi-picker-no-results\"\n          *ngIf=\"matches.length === 0 && !isLoading && selectedPrimaryOption\"\n          data-automation-id=\"empty-message\"\n        >\n          {{ config.emptyOptionsLabel ? config.emptyOptionsLabel : labels.groupedMultiPickerEmpty }}\n        </div>\n        <div class=\"mixed-multi-picker-loading\" *ngIf=\"isLoading\" data-automation-id=\"loading-message\">\n          <novo-loading theme=\"line\"></novo-loading>\n        </div>\n      </div>\n    </div>"
                },] }
    ];
    MixedMultiPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    MixedMultiPickerResults.propDecorators = {
        inputElement: [{ type: i0.ViewChild, args: ['input', { static: true },] }],
        listElement: [{ type: i0.ViewChild, args: ['list',] }]
    };

    var PickerResults = /** @class */ (function (_super) {
        __extends(PickerResults, _super);
        function PickerResults(element, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.labels = labels;
            return _this;
        }
        Object.defineProperty(PickerResults.prototype, "hasNonErrorMessage", {
            get: function () {
                return !this.isLoading && !this.matches.length && !this.hasError;
            },
            enumerable: false,
            configurable: true
        });
        PickerResults.prototype.getEmptyMessage = function () {
            if (this.shouldShowMessageForZeroLengthSearch()) {
                // this property comes from Field Interactions
                return this.config.emptyPickerMessage;
            }
            else {
                return this.term === '' ? this.labels.pickerTextFieldEmpty : this.labels.pickerEmpty;
            }
        };
        PickerResults.prototype.shouldShowMessageForZeroLengthSearch = function () {
            return this.config && this.config.minSearchLength === 0 && this.term === '' && this.config.emptyPickerMessage;
        };
        PickerResults.prototype.getListElement = function () {
            return this.element.nativeElement.querySelector('novo-list');
        };
        return PickerResults;
    }(BasePickerResults));
    PickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'picker-results',
                    host: {
                        class: 'active',
                    },
                    template: "\n    <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-content> <span [innerHtml]=\"highlight(match.label, term)\"></span> </item-content>\n      </novo-list-item>\n      <novo-loading *ngIf=\"isLoading && matches.length > 0\" theme=\"line\"></novo-loading>\n    </novo-list>\n    <div class=\"picker-loader\" *ngIf=\"isLoading && matches.length === 0\"><novo-loading theme=\"line\"></novo-loading></div>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null-results\" *ngIf=\"hasNonErrorMessage\">{{ getEmptyMessage() }}</p>\n  "
                },] }
    ];
    PickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };

    var SkillsSpecialtyPickerResults = /** @class */ (function (_super) {
        __extends(SkillsSpecialtyPickerResults, _super);
        function SkillsSpecialtyPickerResults(element, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.element = element;
            _this.labels = labels;
            _this.active = true;
            _this.limitedTo = false;
            _this.limit = 200;
            return _this;
        }
        SkillsSpecialtyPickerResults.prototype.getListElement = function () {
            return this.element.nativeElement.querySelector('novo-list');
        };
        /**
         * @name structureArray
         * @param collection - the data once getData resolves it
         *
         * @description This function structures an array of nodes into an array of objects with a
         * 'name' field by default.
         */
        SkillsSpecialtyPickerResults.prototype.structureArray = function (collection) {
            var data = collection;
            if (collection.hasOwnProperty('data')) {
                this.limitedTo = collection.limitedTo200;
                this.total = collection.total;
                data = collection.data;
            }
            else if (data.length > this.limit) {
                this.limitedTo = true;
                this.total = data.length;
                data = data.slice(0, this.limit);
            }
            return _super.prototype.structureArray.call(this, data);
        };
        return SkillsSpecialtyPickerResults;
    }(BasePickerResults));
    SkillsSpecialtyPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'skill-specialty-picker-results',
                    template: "\n    <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\"><novo-loading theme=\"line\"></novo-loading></section>\n    <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-content>\n          <h6><span [innerHtml]=\"highlight(match.label, term)\"></span></h6>\n          <div class=\"category\">\n            <i class=\"bhi-category-tags\"></i\n            ><span [innerHtml]=\"highlight(match.data.categories || match.data.parentCategory.name, term)\"></span>\n          </div>\n        </item-content>\n      </novo-list-item>\n      <novo-list-item *ngIf=\"limitedTo\"\n        ><div>{{ labels.showingXofXResults(limit, total) }}</div></novo-list-item\n      >\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n    </novo-list>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n  "
                },] }
    ];
    SkillsSpecialtyPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    SkillsSpecialtyPickerResults.propDecorators = {
        active: [{ type: i0.HostBinding, args: ['class.active',] }]
    };

    var WorkersCompCodesPickerResults = /** @class */ (function (_super) {
        __extends(WorkersCompCodesPickerResults, _super);
        function WorkersCompCodesPickerResults(element, sanitizer, labels, ref) {
            var _this = _super.call(this, element, ref) || this;
            _this.sanitizer = sanitizer;
            _this.labels = labels;
            _this.active = true;
            _this.sanitizer = sanitizer;
            return _this;
        }
        Object.defineProperty(WorkersCompCodesPickerResults.prototype, "isHidden", {
            get: function () {
                return this.matches.length === 0;
            },
            enumerable: false,
            configurable: true
        });
        WorkersCompCodesPickerResults.prototype.getListElement = function () {
            return this.element.nativeElement.querySelector('novo-list');
        };
        WorkersCompCodesPickerResults.prototype.sanitizeHTML = function (compCode, name) {
            return this.sanitizer.bypassSecurityTrustHtml(compCode + " | " + name);
        };
        return WorkersCompCodesPickerResults;
    }(BasePickerResults));
    WorkersCompCodesPickerResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'workers-comp-codes-picker-results',
                    template: "\n    <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n      <novo-loading theme=\"line\"></novo-loading>\n    </section>\n    <novo-list direction=\"vertical\" *ngIf=\"matches?.length > 0 && !hasError\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-header>\n          <item-title>\n            <span [innerHtml]=\"sanitizeHTML(match?.data?.compensation?.code, match?.data?.compensation?.name)\"></span>\n          </item-title>\n        </item-header>\n        <item-content direction=\"horizontal\">\n          <p>\n            <span class=\"label\">{{ labels.state }}: </span><span>{{ match?.data?.compensation?.state }}</span>\n          </p>\n          <p>\n            <span class=\"label\">{{ labels.rate }}: </span><span>{{ labels.formatCurrency(match?.data?.rate) }}</span>\n          </p>\n        </item-content>\n        <item-content direction=\"horizontal\">\n          <p>\n            <span class=\"label\">{{ labels.startDate }}: </span\n            ><span>{{ labels.formatDateWithFormat(match?.data?.startDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n          </p>\n          <p>\n            <span class=\"label\">{{ labels.endDate }}: </span\n            ><span>{{ labels.formatDateWithFormat(match?.data?.endDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n          </p>\n        </item-content>\n      </novo-list-item>\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches?.length > 0\"></novo-loading>\n    </novo-list>\n  "
                },] }
    ];
    WorkersCompCodesPickerResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: platformBrowser.DomSanitizer },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    WorkersCompCodesPickerResults.propDecorators = {
        active: [{ type: i0.HostBinding, args: ['class.active',] }],
        isHidden: [{ type: i0.HostBinding, args: ['hidden',] }]
    };

    // NG2
    // Value accessor for the component (supports ngModel)
    var PICKER_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoPickerElement; }),
        multi: true,
    };
    /**
     * @description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
     * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
     * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
     * dynamically populate.
     */
    var NovoPickerElement = /** @class */ (function () {
        function NovoPickerElement(element, componentUtils, ref) {
            this.element = element;
            this.componentUtils = componentUtils;
            this.ref = ref;
            this.closeOnSelect = true;
            this.selected = [];
            // Deprecated
            this.appendToBody = false;
            // Deprecated
            this.parentScrollAction = 'close';
            // Side the dropdown will open
            this.side = 'left';
            // Autoselects the first option in the results
            this.autoSelectFirstOption = true;
            this._disablePickerInput = false;
            // Emitter for selects
            this.changed = new i0.EventEmitter();
            this.select = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.typing = new i0.EventEmitter();
            this.term = '';
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        Object.defineProperty(NovoPickerElement.prototype, "disablePickerInput", {
            get: function () {
                return this._disablePickerInput;
            },
            // Disable from typing into the picker (result template does everything)
            set: function (v) {
                this._disablePickerInput = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        NovoPickerElement.prototype.ngOnInit = function () {
            var _this = this;
            if (this.overrideElement) {
                this.element = this.overrideElement;
            }
            if (this.appendToBody) {
                notify("'appendToBody' has been deprecated. Please remove this attribute.");
            }
            // Custom results template
            this.resultsComponent = this.config.resultsTemplate || PickerResults;
            // Get all distinct key up events from the input and only fire if long enough and distinct
            // let input = this.element.nativeElement.querySelector('input');
            var pasteObserver = rxjs.fromEvent(this.input.nativeElement, 'paste').pipe(operators.debounceTime(250), operators.distinctUntilChanged());
            pasteObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
            var keyboardObserver = rxjs.fromEvent(this.input.nativeElement, 'keyup').pipe(operators.debounceTime(250), operators.distinctUntilChanged());
            keyboardObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
        };
        NovoPickerElement.prototype.onDebouncedKeyup = function (event) {
            if (["Escape" /* Escape */, "ArrowDown" /* ArrowDown */, "ArrowUp" /* ArrowUp */, "Enter" /* Enter */, "Tab" /* Tab */].some(function (key) { return key === event.key; })) {
                return;
            }
            this.show(event.target.value);
        };
        NovoPickerElement.prototype.openPanel = function () {
            this.container.openPanel();
        };
        NovoPickerElement.prototype.closePanel = function () {
            this.container.closePanel();
        };
        Object.defineProperty(NovoPickerElement.prototype, "panelOpen", {
            get: function () {
                return this.container && this.container.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        NovoPickerElement.prototype.show = function (term) {
            this.openPanel();
            // Show the results inside
            this.showResults(term);
        };
        NovoPickerElement.prototype.onKeyDown = function (event) {
            if (this.disablePickerInput) {
                Helpers.swallowEvent(event);
                return;
            }
            if (this.panelOpen && !this.disablePickerInput) {
                if (event.key === "Escape" /* Escape */ || event.key === "Tab" /* Tab */) {
                    this.hideResults();
                    return;
                }
                if (event.key === "ArrowUp" /* ArrowUp */) {
                    this.popup.instance.prevActiveMatch();
                    this.ref.markForCheck();
                    return;
                }
                if (event.key === "ArrowDown" /* ArrowDown */) {
                    this.popup.instance.nextActiveMatch();
                    this.ref.markForCheck();
                    return;
                }
                if (event.key === "Enter" /* Enter */) {
                    var activeMatch_1 = this.popup.instance.activeMatch;
                    if (!this.selected.find(function (selected) { return activeMatch_1 && activeMatch_1.value && selected.value === activeMatch_1.value; })) {
                        this.popup.instance.selectActiveMatch();
                        this.ref.markForCheck();
                    }
                    return;
                }
                if ((event.key === "Backspace" /* Backspace */ || event.key === "Delete" /* Delete */) && !Helpers.isBlank(this._value)) {
                    this.clearValue(false);
                    this.closePanel();
                }
                if (event.key === "Delete" /* Delete */ && Helpers.isBlank(this._value)) {
                    this.clearValue(true);
                }
            }
        };
        NovoPickerElement.prototype.clearValue = function (wipeTerm) {
            this._value = null;
            this.select.emit(this._value);
            this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
            this.onModelChange(this._value);
            if (wipeTerm) {
                this.term = '';
                this.hideResults();
            }
            this.ref.markForCheck();
        };
        /**
         * @description When the input's focus event is called this method calls the debounced function that displays the
         * results.
         */
        NovoPickerElement.prototype.onFocus = function (event) {
            if (!this.panelOpen) {
                this.show();
            }
            this.focus.emit(event);
        };
        // Creates an instance of the results (called popup) and adds all the bindings to that instance.
        NovoPickerElement.prototype.showResults = function (term) {
            // Update Matches
            if (this.popup) {
                // Update existing list or create the DOM element
                this.popup.instance.config = this.config;
                this.popup.instance.term = this.term;
                this.popup.instance.selected = this.selected;
                this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
                this.ref.markForCheck();
            }
            else {
                this.popup = this.componentUtils.append(this.resultsComponent, this.results);
                this.popup.instance.parent = this;
                this.popup.instance.config = this.config;
                this.popup.instance.term = this.term;
                this.popup.instance.selected = this.selected;
                this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
                this.popup.instance.overlay = this.container.overlayRef;
                this.ref.markForCheck();
            }
        };
        // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
        // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
        NovoPickerElement.prototype.hideResults = function (err) {
            this.closePanel();
            this.ref.markForCheck();
        };
        // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
        NovoPickerElement.prototype.onOverlayClosed = function () {
            if (this.popup && this.popup.instance && this.popup.instance.cleanUp) {
                this.popup.instance.cleanUp();
            }
        };
        Object.defineProperty(NovoPickerElement.prototype, "value", {
            // get accessor
            get: function () {
                return this._value;
            },
            // set accessor including call the onchange callback
            set: function (selected) {
                if (!selected) {
                    this.term = '';
                    this._value = null;
                    this.onModelChange(this._value);
                }
                else if (selected.value !== this._value) {
                    this.term = this.clearValueOnSelect ? '' : selected.label;
                    this._value = selected.value;
                    this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
                    this.select.emit(selected);
                    this.onModelChange(selected.value);
                    if (this.popup) {
                        this.popup.instance.selected = this.selected;
                    }
                }
                else {
                    this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
                    this.select.emit(selected);
                }
                this.ref.markForCheck();
            },
            enumerable: false,
            configurable: true
        });
        // Makes sure to clear the model if the user clears the text box
        NovoPickerElement.prototype.checkTerm = function (event) {
            this.typing.emit(event);
            if (!event || !event.length) {
                this._value = null;
                this.onModelChange(this._value);
            }
            this.ref.markForCheck();
        };
        // Set touched on blur
        NovoPickerElement.prototype.onTouched = function (event) {
            this.onModelTouched();
            this.blur.emit(event);
        };
        // From ControlValueAccessor interface
        NovoPickerElement.prototype.writeValue = function (value) {
            var _this = this;
            if (this.clearValueOnSelect) {
                this.term = '';
            }
            else {
                if (typeof value === 'string' && !this.config.useGetLabels) {
                    this.term = value;
                }
                else if (value && value.label) {
                    this.term = value.label;
                }
                else if (value && value.firstName) {
                    this.term = value.firstName + " " + value.lastName;
                }
                else if (value && value.name) {
                    this.term = value.name;
                }
                else if (typeof this.config.getLabels === 'function') {
                    this.config.getLabels(value).then(function (result) {
                        if (result) {
                            _this.term = result.length ? result[0].label || '' : result.label || '';
                        }
                        else {
                            _this.term = value;
                        }
                        _this.ref.markForCheck();
                    });
                }
                else if (value && value.title) {
                    this.term = value.title;
                }
                else {
                    this.term = value || '';
                }
            }
            this._value = value;
            this.ref.markForCheck();
        };
        NovoPickerElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoPickerElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoPickerElement.prototype.setDisabledState = function (disabled) {
            this._disablePickerInput = disabled;
        };
        return NovoPickerElement;
    }());
    NovoPickerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-picker',
                    providers: [PICKER_VALUE_ACCESSOR],
                    template: "\n    <i class=\"bhi-more\" *ngIf=\"config?.entityIcon && !_value\"></i>\n    <i class=\"bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}\" *ngIf=\"config?.entityIcon && _value\"></i>\n    <input\n      type=\"text\"\n      class=\"picker-input\"\n      [(ngModel)]=\"term\"\n      [class.entity-picker]=\"config?.entityIcon\"\n      [class.entity-selected]=\"config?.entityIcon && _value\"\n      (ngModelChange)=\"checkTerm($event)\"\n      [placeholder]=\"placeholder\"\n      (keydown)=\"onKeyDown($event)\"\n      (focus)=\"onFocus($event)\"\n      (click)=\"onFocus($event)\"\n      (blur)=\"onTouched($event)\"\n      autocomplete=\"off\"\n      #input\n      [disabled]=\"disablePickerInput\"\n    />\n    <i class=\"bhi-search\" *ngIf=\"(!_value || clearValueOnSelect) && !disablePickerInput\"></i>\n    <i\n      class=\"bhi-times\"\n      [class.entity-selected]=\"config?.entityIcon && _value\"\n      *ngIf=\"_value && !clearValueOnSelect && !disablePickerInput\"\n      (click)=\"clearValue(true)\"\n    ></i>\n    <novo-overlay-template class=\"picker-results-container\" [parent]=\"element\" position=\"above-below\" (closing)=\"onOverlayClosed()\">\n      <span #results></span>\n      <ng-content></ng-content>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoPickerElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ComponentUtils },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoPickerElement.propDecorators = {
        results: [{ type: i0.ViewChild, args: ['results', { read: i0.ViewContainerRef, static: true },] }],
        config: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        clearValueOnSelect: [{ type: i0.Input }],
        closeOnSelect: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        appendToBody: [{ type: i0.Input }],
        parentScrollSelector: [{ type: i0.Input }],
        parentScrollAction: [{ type: i0.Input }],
        containerClass: [{ type: i0.Input }],
        side: [{ type: i0.Input }],
        autoSelectFirstOption: [{ type: i0.Input }],
        overrideElement: [{ type: i0.Input }],
        disablePickerInput: [{ type: i0.Input }],
        changed: [{ type: i0.Output }],
        select: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        typing: [{ type: i0.Output }],
        container: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent, { static: true },] }],
        input: [{ type: i0.ViewChild, args: ['input', { static: true },] }]
    };

    // NG2
    var NovoPickerModule = /** @class */ (function () {
        function NovoPickerModule() {
        }
        return NovoPickerModule;
    }());
    NovoPickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoCommonModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule],
                    declarations: [
                        NovoPickerElement,
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        MixedMultiPickerResults,
                        DistributionListPickerResults,
                        WorkersCompCodesPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                    exports: [
                        NovoPickerElement,
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        MixedMultiPickerResults,
                        DistributionListPickerResults,
                        WorkersCompCodesPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                },] }
    ];

    // NG2
    // Value accessor for the component (supports ngModel)
    var SEARCH_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoSearchBoxElement; }),
        multi: true,
    };
    var NovoSearchBoxElement = /** @class */ (function () {
        function NovoSearchBoxElement(element, labels, _changeDetectorRef, _zone) {
            this.element = element;
            this.labels = labels;
            this._changeDetectorRef = _changeDetectorRef;
            this._zone = _zone;
            this.icon = 'search';
            this.position = 'bottom-left';
            this.placeholder = 'Search...';
            this.alwaysOpen = false;
            this.color = 'positive';
            this.closeOnSelect = true;
            this.searchChanged = new i0.EventEmitter();
            this.focused = false;
            /** View -> model callback called when value changes */
            this._onChange = function () { };
            /** View -> model callback called when autocomplete has been touched */
            this._onTouched = function () { };
        }
        /**
         * @name showFasterFind
         * @description This function shows the picker and adds the active class (for animation)
         */
        NovoSearchBoxElement.prototype.showSearch = function (event, forceClose) {
            var _this = this;
            if (forceClose === void 0) { forceClose = false; }
            if (!this.panelOpen) {
                // Reset search
                // Set focus on search
                setTimeout(function () {
                    var element = _this.input.nativeElement;
                    if (element) {
                        element.focus();
                    }
                }, 10);
            }
            else {
                this.closePanel();
            }
        };
        NovoSearchBoxElement.prototype.onFocus = function () {
            var _this = this;
            this._zone.run(function () {
                _this.focused = true;
                _this.openPanel();
            });
        };
        NovoSearchBoxElement.prototype.onBlur = function () {
            this.focused = false;
        };
        /** BEGIN: Convenient Panel Methods. */
        NovoSearchBoxElement.prototype.openPanel = function () {
            this.overlay.openPanel();
        };
        NovoSearchBoxElement.prototype.closePanel = function () {
            var _this = this;
            setTimeout(function () { return _this.overlay.closePanel(); });
        };
        Object.defineProperty(NovoSearchBoxElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSearchBoxElement.prototype, "active", {
            get: function () {
                return this.panelOpen || this.alwaysOpen;
            },
            enumerable: false,
            configurable: true
        });
        /** END: Convenient Panel Methods. */
        NovoSearchBoxElement.prototype._handleKeydown = function (event) {
            if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
                this.closePanel();
                event.stopPropagation();
            }
        };
        NovoSearchBoxElement.prototype._handleInput = function (event) {
            var _this = this;
            if (document.activeElement === event.target) {
                this.value = event.target.value;
                this._onChange(event.target.value);
                if (this.debounceSearchChange) {
                    clearTimeout(this.debounceSearchChange);
                }
                this.debounceSearchChange = setTimeout(function () {
                    _this.searchChanged.emit(event.target.value);
                }, 400);
            }
        };
        NovoSearchBoxElement.prototype.writeValue = function (value) {
            this._setValue(value);
        };
        NovoSearchBoxElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoSearchBoxElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        NovoSearchBoxElement.prototype._setValue = function (value) {
            this.value = value;
            var toDisplay = value;
            if (value && this.displayField) {
                toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
            }
            // Simply falling back to an empty string if the display value is falsy does not work properly.
            // The display value can also be the number zero and shouldn't fall back to an empty string.
            this.displayValue = toDisplay ? toDisplay : '';
            this.input.nativeElement.value = this.displayValue;
            this._changeDetectorRef.markForCheck();
        };
        /**
         * This method closes the panel, and if a value is specified, also sets the associated
         * control to that value. It will also mark the control as dirty if this interaction
         * stemmed from the user.
         */
        NovoSearchBoxElement.prototype.setValueAndClose = function (event) {
            if (event && event.value) {
                this._setValue(event.value);
                this._onChange(event.value);
            }
            this.closePanel();
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoSearchBoxElement.prototype.clearValue = function (skip) {
            this.writeValue(null);
            this._onChange(null);
        };
        return NovoSearchBoxElement;
    }());
    NovoSearchBoxElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-search',
                    providers: [SEARCH_VALUE_ACCESSOR],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    template: "\n    <!-- SEARCH ICON -->\n    <novo-icon (click)=\"showSearch($event)\" [tooltip]=\"hint\" tooltipPosition=\"bottom\">{{ icon }}</novo-icon>\n    <!-- SEARCH INPUT -->\n    <input\n      type=\"text\"\n      [attr.name]=\"name\"\n      [attr.value]=\"displayValue\"\n      [attr.placeholder]=\"placeholder\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (keydown)=\"_handleKeydown($event)\"\n      (input)=\"_handleInput($event)\"\n      #input\n      data-automation-id=\"novo-search-input\"\n    />\n    <!-- SEARCH OVERLAY -->\n    <novo-overlay-template\n      [parent]=\"element\"\n      [closeOnSelect]=\"closeOnSelect\"\n      [position]=\"position\"\n      (select)=\"closePanel()\"\n      (closing)=\"onBlur()\"\n    >\n      <ng-content></ng-content>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoSearchBoxElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: i0.NgZone }
    ]; };
    NovoSearchBoxElement.propDecorators = {
        name: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        position: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        alwaysOpen: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.always-open',] }],
        theme: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        closeOnSelect: [{ type: i0.Input }],
        displayField: [{ type: i0.Input }],
        displayValue: [{ type: i0.Input }],
        hint: [{ type: i0.Input }],
        searchChanged: [{ type: i0.Output }],
        focused: [{ type: i0.HostBinding, args: ['class.focused',] }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }],
        input: [{ type: i0.ViewChild, args: ['input', { static: true },] }],
        active: [{ type: i0.HostBinding, args: ['class.active',] }]
    };

    // NG2
    var NovoSearchBoxModule = /** @class */ (function () {
        function NovoSearchBoxModule() {
        }
        return NovoSearchBoxModule;
    }());
    NovoSearchBoxModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule],
                    declarations: [NovoSearchBoxElement],
                    exports: [NovoSearchBoxElement],
                },] }
    ];

    var NovoBreadcrumbModule = /** @class */ (function () {
        function NovoBreadcrumbModule() {
        }
        return NovoBreadcrumbModule;
    }());
    NovoBreadcrumbModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, router.RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule, NovoOptionModule],
                    exports: [BreadcrumbElement, BreadcrumbItemElement],
                    declarations: [BreadcrumbElement, BreadcrumbItemElement],
                    providers: [BreadcrumbService],
                },] }
    ];

    /** Injection token used to customize the date range selection behavior. */
    var NOVO_DATE_SELECTION_STRATEGY = new i0.InjectionToken('NOVO_DATE_SELECTION_STRATEGY');
    /** Provides the default date selection behavior. Single Date */
    var DefaultDateSelectionStrategy = /** @class */ (function () {
        function DefaultDateSelectionStrategy() {
        }
        DefaultDateSelectionStrategy.prototype.selectionFinished = function (date, currentValue, event) {
            return [date];
        };
        DefaultDateSelectionStrategy.prototype.createPreview = function (activeDate, _a) {
            var _b = __read(_a, 1), currentDate = _b[0];
            return [activeDate];
        };
        DefaultDateSelectionStrategy.prototype.isSelected = function (activeDate, _a) {
            var _b = __read(_a, 1), currentDate = _b[0];
            return dateFns.isSameDay(activeDate, currentDate);
        };
        return DefaultDateSelectionStrategy;
    }());
    DefaultDateSelectionStrategy.decorators = [
        { type: i0.Injectable }
    ];
    /** @docs-private */
    function NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY(parent) {
        return parent || new DefaultDateSelectionStrategy();
    }
    /** @docs-private */
    var NOVO_DATE_SELECTION_STRATEGY_PROVIDER = {
        provide: NOVO_DATE_SELECTION_STRATEGY,
        deps: [[new i0.Optional(), new i0.SkipSelf(), NOVO_DATE_SELECTION_STRATEGY]],
        useFactory: NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY,
    };

    var MultiDateSelectionStrategy = /** @class */ (function () {
        function MultiDateSelectionStrategy() {
        }
        MultiDateSelectionStrategy.prototype.selectionFinished = function (dateLike, currentValue, event) {
            var date = dateLike;
            var current = new Set(currentValue.map(function (c) { return c.getTime(); }));
            if (current.has(date.getTime())) {
                current.delete(date.getTime());
            }
            else {
                current.add(date.getTime());
            }
            return __spread(current).map(function (c) { return new Date(c); });
        };
        MultiDateSelectionStrategy.prototype.createPreview = function (activeDate, currentValue) {
            return [activeDate];
        };
        MultiDateSelectionStrategy.prototype.isSelected = function (activeDate, currentValue) {
            return currentValue && currentValue.includes(activeDate);
        };
        return MultiDateSelectionStrategy;
    }());
    MultiDateSelectionStrategy.decorators = [
        { type: i0.Injectable }
    ];

    var RangeSelectionStrategy = /** @class */ (function () {
        function RangeSelectionStrategy() {
        }
        RangeSelectionStrategy.prototype.selectionFinished = function (date, currentRange) {
            var _a = __read(currentRange, 2), start = _a[0], end = _a[1];
            if (start == null) {
                start = date;
            }
            else if (end == null && date && dateFns.differenceInCalendarDays(date, start) >= 0) {
                end = date;
            }
            else {
                start = date;
                end = null;
            }
            return [start, end];
        };
        RangeSelectionStrategy.prototype.createPreview = function (activeDate, currentRange) {
            var start = null;
            var end = null;
            var _a = __read(currentRange, 2), currStart = _a[0], currEnd = _a[1];
            if (currStart && !currEnd && activeDate) {
                start = currStart;
                end = activeDate;
            }
            return [start, end];
        };
        RangeSelectionStrategy.prototype.isSelected = function (activeDate, currentRange) {
            var _a = __read(currentRange, 2), start = _a[0], end = _a[1];
            return dateFns.isWithinRange(activeDate, start, end);
        };
        return RangeSelectionStrategy;
    }());
    RangeSelectionStrategy.decorators = [
        { type: i0.Injectable }
    ];

    var WeekSelectionStrategy = /** @class */ (function () {
        function WeekSelectionStrategy(weekStartsOn) {
            if (weekStartsOn === void 0) { weekStartsOn = 0; }
            this.weekStartsOn = weekStartsOn;
        }
        WeekSelectionStrategy.prototype.selectionFinished = function (date) {
            return this._createWeekRange(date);
        };
        WeekSelectionStrategy.prototype.createPreview = function (activeDate) {
            return this._createWeekRange(activeDate);
        };
        WeekSelectionStrategy.prototype._createWeekRange = function (date) {
            if (date) {
                var weekStartsOn = this.weekStartsOn;
                var start = dateFns.startOfWeek(date, { weekStartsOn: weekStartsOn });
                var end = dateFns.endOfWeek(date, { weekStartsOn: weekStartsOn });
                return [start, end];
            }
            return [null, null];
        };
        WeekSelectionStrategy.prototype.isSelected = function (activeDate, currentRange) {
            var _a = __read(currentRange, 2), start = _a[0], end = _a[1];
            return dateFns.isWithinRange(activeDate, start, end);
        };
        return WeekSelectionStrategy;
    }());

    var NovoCalendarElement = /** @class */ (function () {
        function NovoCalendarElement(labels, element, cdr, _sanitizer) {
            this.labels = labels;
            this.element = element;
            this.cdr = cdr;
            this._sanitizer = _sanitizer;
            // Default view mode (select days)
            this.activeView = 'days';
            this.layout = 'horizontal';
            this._selected = [];
            this.selectedChange = new i0.EventEmitter();
            this.preview = [];
            this.previewChange = new i0.EventEmitter();
            this.activeDateChange = new i0.EventEmitter();
            this.overlays = [];
            this._activeDate = new Date();
            this._mode = 'single';
            this._numberOfMonths = [0];
            this._weekStartsOn = 0;
            this._strategy = new DefaultDateSelectionStrategy();
        }
        Object.defineProperty(NovoCalendarElement.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = value ? value.filter(dateFns.isDate).map(function (d) { return dateFns.startOfDay(d); }) : [];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "activeDate", {
            get: function () {
                return this._activeDate;
            },
            set: function (value) {
                if (!dateFns.isSameDay(value, this._activeDate)) {
                    this._activeDate = value;
                    this.activeDateChange.next(value);
                    this.updateView(value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "weekStartsOn", {
            get: function () {
                return this._weekStartsOn;
            },
            set: function (value) {
                this._weekStartsOn = value;
                if (this.mode === 'week') {
                    this._strategy = new WeekSelectionStrategy(this.weekStartsOn);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "numberOfMonths", {
            get: function () {
                return this._numberOfMonths.length;
            },
            set: function (value) {
                this._numberOfMonths = Array.from(Array(Number(value)).keys());
                this.updateView(this.activeDate);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "mode", {
            get: function () {
                return this._mode;
            },
            set: function (value) {
                if (this._mode !== value) {
                    this._mode = value;
                    switch (value) {
                        case 'multiple':
                            this._strategy = new MultiDateSelectionStrategy();
                            break;
                        case 'range':
                            this._strategy = new RangeSelectionStrategy();
                            break;
                        case 'week':
                            this._strategy = new WeekSelectionStrategy(this.weekStartsOn);
                            break;
                        case 'single':
                        default:
                            this._strategy = new DefaultDateSelectionStrategy();
                            break;
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "hb_width", {
            get: function () {
                if (this.layout === 'vertical') {
                    return this._sanitizer.bypassSecurityTrustStyle("min-content");
                }
                return this._sanitizer.bypassSecurityTrustStyle("min-content");
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "hb_horiztonal", {
            get: function () {
                return this.layout !== 'vertical';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCalendarElement.prototype, "hb_vertical", {
            get: function () {
                return this.layout === 'vertical';
            },
            enumerable: false,
            configurable: true
        });
        NovoCalendarElement.prototype.ngOnInit = function () {
            if (!this.activeDate) {
                this.activeDate = this.selected.length ? this.selected[0] : new Date();
            }
            this.updateView(this.activeDate);
        };
        NovoCalendarElement.prototype.updateView = function (activeDate) {
            var e_1, _a;
            this.activeDate = new Date(activeDate ? new Date(activeDate) : new Date());
            this.months = [];
            var month = dateFns.startOfMonth(this.activeDate);
            try {
                for (var _b = __values(this._numberOfMonths), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var i = _c.value;
                    var date = dateFns.addMonths(month, i);
                    var label = this.labels.formatDateWithFormat(date, { month: 'short' });
                    this.months.push({ date: date, label: label });
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        NovoCalendarElement.prototype.setToday = function () {
            var tmp = new Date();
            this.updateView(tmp);
            // Go back to days
            this.openView(null, 'days');
        };
        NovoCalendarElement.prototype.monthSelected = function (_a) {
            var event = _a.event, month = _a.month;
            var date = this.activeDate ? this.activeDate : new Date().getMonth();
            var tmp = dateFns.setMonth(date, month);
            this.updateView(tmp);
            // Go back to days
            this.openView(null, 'days');
        };
        NovoCalendarElement.prototype.yearSelected = function (_a) {
            var event = _a.event, year = _a.year;
            var date = this.activeDate ? this.activeDate : new Date();
            var tmp = dateFns.setYear(date, year);
            this.updateView(tmp);
            // Go back to days
            this.openView(null, 'days');
        };
        NovoCalendarElement.prototype.dateSelected = function (_a) {
            var event = _a.event, day = _a.day;
            // Helpers.swallowEvent(event);
            this.selected = this._strategy.selectionFinished(day.date, this.selected, event);
            this.selectedChange.emit(this.selected);
            this.cdr.markForCheck();
        };
        NovoCalendarElement.prototype.updatePreview = function (_a) {
            var event = _a.event, day = _a.day;
            this.preview = this._strategy.createPreview(day.date, this.selected, event);
            this.previewChange.emit(this.preview);
        };
        NovoCalendarElement.prototype.prevMonth = function (event) {
            Helpers.swallowEvent(event);
            var tmp = dateFns.subMonths(this.activeDate, 1);
            this.updateView(tmp);
        };
        NovoCalendarElement.prototype.nextMonth = function (event) {
            Helpers.swallowEvent(event);
            var tmp = dateFns.addMonths(this.activeDate, 1);
            this.updateView(tmp);
        };
        NovoCalendarElement.prototype.openView = function (event, type) {
            var _this = this;
            Helpers.swallowEvent(event);
            // If they click the toggle two time in a row, close it (go back to days)
            if (type === this.activeView) {
                this.activeView = 'days';
            }
            else {
                this.activeView = type;
            }
            // Make sure to scroll the selected one into view
            if (this.activeView === 'years' || this.activeView === 'months') {
                setTimeout(function () {
                    var container = _this.element.nativeElement.querySelector(".calendar-content." + _this.activeView);
                    var selectedItem = _this.element.nativeElement.querySelector(".calendar-content." + _this.activeView + " ." + (_this.activeView === 'years' ? 'year' : 'month') + ".selected");
                    if (container && selectedItem) {
                        container.scrollTop = selectedItem.offsetTop - 100;
                    }
                });
            }
        };
        NovoCalendarElement.prototype._isRange = function () {
            return ['week', 'range'].includes(this.mode);
        };
        return NovoCalendarElement;
    }());
    NovoCalendarElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-calendar',
                    template: "<div class=\"calendar-header\">\n  <novo-button theme=\"icon\" icon=\"previous\" size=\"small\" (click)=\"prevMonth($event)\"\n    data-automation-id=\"calendar-previous\"></novo-button>\n  <ng-container *ngFor=\"let month of months; let i = index;\">\n    <span class=\"heading\" [class.secondary]=\"i > 0\">\n      <span class=\"month\" (click)=\"openView($event, 'months')\"\n        data-automation-id=\"header-month\">{{ month.label }}</span>\n      <span class=\"year\" (click)=\"openView($event, 'years')\"\n        data-automation-id=\"header-year\">{{ month.date?.getFullYear() }}</span>\n    </span>\n  </ng-container>\n  <novo-button theme=\"icon\" icon=\"next\" size=\"small\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\">\n  </novo-button>\n</div>\n<section class=\"calendar-content\" [ngSwitch]=\"activeView\">\n  <ng-container *ngSwitchCase=\"'days'\">\n    <ng-container *ngFor=\"let month of months; let i = index\">\n      <div class=\"calendar-header\" *ngIf=\"layout==='vertical' && i > 0\">\n        <span class=\"previous\" (click)=\"prevMonth($event)\" data-automation-id=\"calendar-previous\"></span>\n        <span class=\"heading\">\n          <span class=\"month\" (click)=\"openView($event, 'months')\"\n            data-automation-id=\"header-month\">{{ month.label }}</span>\n          <span class=\"year\" (click)=\"openView($event, 'years')\"\n            data-automation-id=\"header-year\">{{ month.date?.getFullYear() }}</span>\n        </span>\n        <span class=\"next\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\"></span>\n      </div>\n      <novo-month-view\n        class=\"month-view\"\n        [activeDate]=\"month.date\"\n        [selected]=\"selected\"\n        [preview]=\"preview\"\n        [overlays]=\"overlays\"\n        [isRange]=\"_isRange()\"\n        [hideOverflowDays]=\"months.length > 1\"\n        [weekStartsOn]=\"weekStartsOn\"\n        [disabledDateMessage]=\"disabledDateMessage\"\n        [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\"\n        (select)=\"dateSelected($event)\"\n        (hover)=\"updatePreview($event)\"></novo-month-view>\n    </ng-container>\n  </ng-container>\n  <novo-month-select\n    *ngSwitchCase=\"'months'\"\n    [activeDate]=\"activeDate\"\n    [selected]=\"selected\"\n    (select)=\"monthSelected($event)\">\n  </novo-month-select>\n  <novo-year-select\n    *ngSwitchCase=\"'years'\"\n    [activeDate]=\"activeDate\"\n    [selected]=\"selected\"\n    (select)=\"yearSelected($event)\">\n  </novo-year-select>\n</section>",
                    styles: [":host(.layout-horizontal){font-size:1.2rem}:host(.layout-horizontal) .calendar-content{flex-flow:row nowrap}:host(.layout-horizontal) .month-view+.month-view{border-collapse:unset;border-left:1px solid #dbdbdb;margin-left:.5rem;padding-left:.5rem}:host(.layout-vertical) .calendar-content{flex-flow:column nowrap}:host(.layout-vertical) .calendar-header .heading.secondary{display:none}:host{-moz-user-select:none;-webkit-user-select:none;background:var(--background-bright);color:var(--text-main);display:block;position:relative;text-align:center;user-select:none;width:100%}:host .calendar-content{display:flex;height:-webkit-min-content;height:-moz-min-content;height:min-content;left:0;overflow:hidden;position:static;top:0;width:100%}:host .calendar-header{-webkit-user-select:none;align-items:center;border-bottom:1px solid var(--border);border-collapse:collapse;cursor:default;display:flex;flex-flow:row nowrap;justify-content:space-between;padding:1rem .8rem;width:100%}:host .calendar-header .previous{cursor:pointer;display:inline-block;height:15px;width:30px}:host .calendar-header .previous:after{border-bottom:4px solid transparent;border-right:4px solid #aaa;border-top:4px solid transparent;content:\"\";display:inline-block;height:0;vertical-align:middle;width:0}:host .calendar-header .previous:hover:after{border-right:4px solid #4a89dc;cursor:pointer}:host .calendar-header .heading{color:#4a89dc;display:inline-block;flex:1;font-weight:600;vertical-align:middle}:host .calendar-header .heading .month{border-radius:2px;padding:3px 8px}:host .calendar-header .heading .month:hover{background:#4a89dc;color:#fff;cursor:pointer}:host .calendar-header .heading .year{border-radius:2px;padding:3px 8px}:host .calendar-header .heading .year:hover{background:#4a89dc;color:#fff;cursor:pointer}:host .calendar-header .next{cursor:pointer;display:inline-block;height:15px;width:30px}:host .calendar-header .next:before{border-bottom:4px solid transparent;border-left:4px solid #aaa;border-top:4px solid transparent;content:\"\";display:inline-block;height:0;vertical-align:middle;width:0}:host .calendar-header .next:hover:before{border-left:4px solid #4a89dc;cursor:pointer;opacity:1}"]
                },] }
    ];
    NovoCalendarElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoCalendarElement.propDecorators = {
        minYear: [{ type: i0.Input }],
        maxYear: [{ type: i0.Input }],
        minDate: [{ type: i0.Input }],
        maxDate: [{ type: i0.Input }],
        activeView: [{ type: i0.Input }],
        layout: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        selectedChange: [{ type: i0.Output }],
        preview: [{ type: i0.Input }],
        previewChange: [{ type: i0.Output }],
        activeDateChange: [{ type: i0.Output }],
        overlays: [{ type: i0.Input }],
        disabledDateMessage: [{ type: i0.Input }],
        activeDate: [{ type: i0.Input }],
        weekStartsOn: [{ type: i0.Input }],
        numberOfMonths: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        hb_width: [{ type: i0.HostBinding, args: ['style.width',] }],
        hb_horiztonal: [{ type: i0.HostBinding, args: ['class.layout-horizontal',] }],
        hb_vertical: [{ type: i0.HostBinding, args: ['class.layout-vertical',] }]
    };

    // NG2
    var NovoMonthSelectElement = /** @class */ (function () {
        function NovoMonthSelectElement(labels) {
            this.labels = labels;
            this.activeDate = new Date();
            this.selected = [];
            // Select callback for output
            this.select = new i0.EventEmitter(false);
            // List of all months
            this.monthNames = this.labels.getMonths();
        }
        NovoMonthSelectElement.prototype.ngOnInit = function () { };
        NovoMonthSelectElement.prototype.onSelect = function (event, month) {
            // Helpers.swallowEvent(event);
            this.select.next({ event: event, month: month });
        };
        NovoMonthSelectElement.prototype._isActive = function (month) {
            return this.activeDate && month === dateFns.getMonth(this.activeDate);
        };
        NovoMonthSelectElement.prototype._isSelected = function (month) {
            return this.selected && month === dateFns.getMonth(this.selected[0]);
        };
        return NovoMonthSelectElement;
    }());
    NovoMonthSelectElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-month-select',
                    template: "<div *ngFor=\"let month of monthNames; let i = index\" (click)=\"onSelect($event, i)\">\n  <div class=\"month\" [class.selected]=\"_isSelected(i)\" [attr.data-automation-id]=\"month\">\n    {{ month }}</div>\n</div>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:grid;flex:1;grid-template-columns:1fr 1fr 1fr}:host .month{border-radius:.4rem;cursor:pointer;padding:1rem}:host .month.selected,:host .month:hover{background-color:#4a89dc;color:#fff}"]
                },] }
    ];
    NovoMonthSelectElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    NovoMonthSelectElement.propDecorators = {
        activeDate: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        select: [{ type: i0.Output }]
    };

    var NovoMonthViewElement = /** @class */ (function () {
        function NovoMonthViewElement(labels, element, cdr, _sanitizer) {
            this.labels = labels;
            this.element = element;
            this.cdr = cdr;
            this._sanitizer = _sanitizer;
            this.activeDate = new Date();
            // Weekstart must be 0-6 (Sunday - Saturday)
            this.selected = [];
            this.preview = [];
            this.overlays = [];
            this.isRange = false;
            this.hideOverflowDays = false;
            this._weekStartsOn = 0;
            // Select callback for output
            this.select = new i0.EventEmitter(false);
            // Select callback for output
            this.hover = new i0.EventEmitter(false);
            // List of all the weekdays
            this.weekdays = this.labels.getWeekdays(this.weekStartsOn);
            // List of all months
            this.monthNames = this.labels.getMonths();
        }
        Object.defineProperty(NovoMonthViewElement.prototype, "weekStartsOn", {
            get: function () {
                return this._weekStartsOn;
            },
            set: function (value) {
                this._weekStartsOn = value;
                this.weekdays = this.labels.getWeekdays(value);
                this.updateView(this.activeDate);
            },
            enumerable: false,
            configurable: true
        });
        NovoMonthViewElement.prototype.ngOnInit = function () {
            // Set labels
            this.updateView(this.activeDate);
        };
        NovoMonthViewElement.prototype.updateView = function (date) {
            this.monthLabel = this.labels.formatDateWithFormat(this.activeDate, { month: 'short' });
            this.buildMonth(this.activeDate);
        };
        NovoMonthViewElement.prototype.onSelect = function (event, day) {
            // Helpers.swallowEvent(event);
            this.select.next({ event: event, day: day });
            this.cdr.markForCheck();
        };
        NovoMonthViewElement.prototype.onHover = function (event, day) {
            this.isRange && this.hover.next({ event: event, day: day });
        };
        NovoMonthViewElement.prototype.buildMonth = function (month) {
            // Reset the weeks
            this.weeks = [];
            var start = dateFns.startOfMonth(month);
            // House keeping variables to know when we are done building the month
            var done = false, date = dateFns.startOfWeek(start, { weekStartsOn: this.weekStartsOn }), monthIndex = date.getMonth(), count = 0;
            while (!done) {
                // Build the days for the weeks
                this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
                // Increment variables for the next iteration
                date = dateFns.addDays(date, 7);
                done = count++ > 2 && monthIndex !== date.getMonth();
                monthIndex = date.getMonth();
            }
        };
        NovoMonthViewElement.prototype.buildWeek = function (date, month) {
            // Build out of the days of the week
            var days = [];
            // Iterate over the days of the week
            for (var i = 0; i < 7; i++) {
                // Push a variable on the day array with lots of helpers to make the template easier
                days.push({
                    name: this.weekdays[i],
                    number: date.getDate(),
                    isToday: dateFns.isToday(date),
                    date: date,
                });
                // Increment for the next iteration
                date = dateFns.addDays(date, 1);
            }
            return days;
        };
        NovoMonthViewElement.prototype.isDisabled = function (day) {
            return (this.minDate && dateFns.isBefore(day, this.minDate)) || (this.maxDate && dateFns.isAfter(day, this.maxDate));
        };
        /** Returns whether a cell should be marked as selected. */
        NovoMonthViewElement.prototype._isSelected = function (value) {
            return this.selected && this.selected.find(function (d) { return dateFns.isSameDay(d, value); });
        };
        /** Returns whether a cell should be marked as preview. */
        NovoMonthViewElement.prototype._isPreview = function (value) {
            return this.preview && this.preview.find(function (d) { return dateFns.isSameDay(d, value); });
        };
        /** Returns whether a cell should be marked as an overlay. */
        NovoMonthViewElement.prototype._isOverlay = function (value) {
            return this.overlays && this.overlays.find(function (o) { return dateFns.isSameDay(o.date, value); });
        };
        /** Returns whether a cell should be marked as an overlay. */
        NovoMonthViewElement.prototype._hasOverlayType = function (value) {
            var overlay = this.overlays && this.overlays.find(function (o) { return dateFns.isSameDay(o.date, value); });
            return overlay ? overlay.type : null;
        };
        /** Gets whether a value is the start of the main range. */
        NovoMonthViewElement.prototype._isRangeStart = function (value) {
            return isStart(value, this.selected, this.isRange);
        };
        /** Gets whether a value is the end of the main range. */
        NovoMonthViewElement.prototype._isRangeEnd = function (value) {
            return isEnd(value, this.selected, this.isRange);
        };
        /** Gets whether a value is within the currently-selected range. */
        NovoMonthViewElement.prototype._isInRange = function (value) {
            return isInRange(value, this.selected, this.isRange);
        };
        /** Gets whether a value is the start of the preview range. */
        NovoMonthViewElement.prototype._isPreviewStart = function (value) {
            return isStart(value, this.preview, this.isRange);
        };
        /** Gets whether a value is the end of the preview range. */
        NovoMonthViewElement.prototype._isPreviewEnd = function (value) {
            return isEnd(value, this.preview, this.isRange);
        };
        /** Gets whether a value is inside the preview range. */
        NovoMonthViewElement.prototype._isInPreview = function (value) {
            return isInRange(value, this.preview, this.isRange);
        };
        return NovoMonthViewElement;
    }());
    NovoMonthViewElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-month-view',
                    template: "<div class=\"calendar-table\" cellspacing=\"0\" cellpadding=\"0\">\n  <div class=\"calendar-thead\">\n    <div class=\"calendar-th weekday\" *ngFor=\"let day of weekdays\" title=\"{{ day }}\"\n      [attr.data-automation-id]=\"day.substr(0, 2)\">\n      {{ day.substr(0, 2) }}\n    </div>\n  </div>\n  <div class=\"calendar-body\">\n    <div class=\"calendar-week\" *ngFor=\"let week of weeks\">\n      <div class=\"calendar-date\" *ngFor=\"let day of week.days\"\n        [class.today]=\"day.isToday\"\n        [class.notinmonth]=\"day.date.getMonth() !== activeDate.getMonth()\"\n        [class.selected]=\"_isSelected(day.date)\"\n        [class.preview]=\"_isPreview(day.date)\"\n        [class.overlay]=\"_isOverlay(day.date)\"\n        [class]=\"_hasOverlayType(day.date)\"\n        [class.inRange]=\"_isInRange(day.date)\"\n        [class.rangeStart]=\"_isRangeStart(day.date)\"\n        [class.rangeEnd]=\"_isRangeEnd(day.date)\"\n        [class.inPreview]=\"_isInPreview(day.date)\"\n        [class.previewStart]=\"_isPreviewStart(day.date)\"\n        [class.previewEnd]=\"_isPreviewEnd(day.date)\"\n        [class.calendar-date]=\"true\"\n        [attr.aria-label]=\"day.name\"\n        [attr.aria-disabled]=\"isDisabled(day.date)\"\n        [attr.aria-selected]=\"_isSelected(day.date)\"\n        [attr.data-automation-id]=\"day.number\"\n        [title]=\"isDisabled(day.date) ? disabledDateMessage : ''\"\n        (mouseover)=\"onHover($event, day)\">\n        <novo-button\n          class=\"day\"\n          [attr.data-automation-id]=\"day.number\"\n          [disabled]=\"isDisabled(day.date)\"\n          (click)=\"onSelect($event, day)\">\n          {{ day.number }}\n        </novo-button>\n      </div>\n    </div>\n  </div>\n</div>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [":host{background:var(--background-bright);height:-webkit-min-content;height:-moz-min-content;height:min-content;position:relative;width:100%}:host .calendar-table{display:table}:host .calendar-table .calendar-thead{display:table-header-group}:host .calendar-table .calendar-th{display:table-cell;padding:10px 0;width:30px}:host .calendar-table .calendar-body{display:table-row-group}:host .calendar-table .calendar-week{display:table-row}:host .calendar-table .month,:host .calendar-table .year{border-radius:3px;color:#666;font-weight:400;margin:5px;overflow-x:hidden;padding:4px 15px;text-align:center;text-overflow:ellipsis}:host .calendar-table .month.selected,:host .calendar-table .year.selected{background-color:var(--selection);color:#fff}:host .calendar-table .month:hover,:host .calendar-table .year:hover{background-color:var(--selection);color:#fff;cursor:pointer}:host .calendar-table .day{background-color:transparent;border:none;border-radius:50%;box-shadow:inset 0 0 0 2px transparent;color:var(--text-main,#3d464d);font-size:1.2rem;height:3.2rem;line-height:1;padding:1px;position:relative;transition:box-shadow .14s ease-in-out;width:3.2rem}:host .calendar-table .day:focus{outline:none}:host .calendar-table .day:disabled{box-shadow:none!important;color:var(--text-disabled);cursor:not-allowed!important}:host .calendar-table .calendar-date{display:table-cell}:host .calendar-table .calendar-date.notinmonth,:host .calendar-table .calendar-date.notinmonth:not(.selected)>.day{color:var(--text-disabled)}:host .calendar-table .calendar-date:hover .day{box-shadow:inset 0 0 0 2px var(--selection);cursor:pointer}:host .calendar-table .calendar-date.inRange:hover .day{box-shadow:inset 0 0 0 2px #fff}:host .calendar-table .calendar-date.inRange{background:var(--selection);border-radius:0;color:#fff;height:3.2rem;width:3.2rem}:host .calendar-table .calendar-date.inRange .day{color:#fff}:host .calendar-table .calendar-date.rangeStart{border-radius:50% 0 0 50%;box-shadow:none!important;position:relative}:host .calendar-table .calendar-date.rangeStart:before{background:#4a89dc;content:\"\";height:100%;position:absolute;right:-5px;top:0;width:10px;z-index:-1}:host .calendar-table .calendar-date.rangeEnd{border-radius:0 50% 50% 0;box-shadow:none!important;position:relative}:host .calendar-table .calendar-date.rangeEnd:before{background:var(--selection);content:\"\";height:100%;left:-5px;position:absolute;top:0;width:10px;z-index:-1}:host .calendar-table .calendar-date.selected .day{background:var(--selection);color:#fff}:host .calendar-table .calendar-date.preview:not(.previewStart):not(.previewEnd) .day{border:1px dashed var(--selection)}:host .calendar-table .calendar-date.preview:not(.previewStart):not(.previewEnd).selected .day{border:1px dashed #9dbeff}:host .calendar-table .calendar-date.today .day:after{border-radius:100%;box-shadow:inset 0 0 0 2px #dbdbdb;content:\"\";height:100%;left:0;margin:0 auto;max-width:3.2rem;position:absolute;top:0;width:100%}:host .calendar-table .calendar-date.today.inRange .day:after,:host .calendar-table .calendar-date.today.selected .day:after{box-shadow:inset 0 0 0 2px #9dbeff}:host .calendar-table .calendar-date.inPreview .day{border-bottom:1px dashed #4a89dc;border-radius:0;border-top:1px dashed #4a89dc}:host .calendar-table .calendar-date.previewStart .day{border-bottom-right-radius:0;border-left:1px dashed #4a89dc;border-radius:50%;border-top-right-radius:0;box-shadow:none!important}:host .calendar-table .calendar-date.previewEnd .day{border-bottom-left-radius:0;border-radius:50%;border-right:1px dashed #4a89dc;border-top-left-radius:0;box-shadow:none!important}"]
                },] }
    ];
    NovoMonthViewElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoMonthViewElement.propDecorators = {
        minDate: [{ type: i0.Input }],
        maxDate: [{ type: i0.Input }],
        activeDate: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        preview: [{ type: i0.Input }],
        overlays: [{ type: i0.Input }],
        disabledDateMessage: [{ type: i0.Input }],
        isRange: [{ type: i0.Input }],
        hideOverflowDays: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.hide-overflow-days',] }],
        weekStartsOn: [{ type: i0.Input }],
        select: [{ type: i0.Output }],
        hover: [{ type: i0.Output }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoMonthViewElement.prototype, "isRange", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoMonthViewElement.prototype, "hideOverflowDays", void 0);
    /** Checks whether a value is the start of a range. */
    function isStart(value, range, rangeEnabled) {
        var _a = __read(range !== null && range !== void 0 ? range : [], 2), start = _a[0], end = _a[1];
        return rangeEnabled && end !== null && !dateFns.isSameDay(start, end) && value < end && dateFns.isSameDay(value, start);
    }
    /** Checks whether a value is the end of a range. */
    function isEnd(value, range, rangeEnabled) {
        var _a = __read(range !== null && range !== void 0 ? range : [], 2), start = _a[0], end = _a[1];
        return rangeEnabled && start !== null && !dateFns.isSameDay(start, end) && value >= start && dateFns.isSameDay(value, end);
    }
    /** Checks whether a value is inside of a range. */
    function isInRange(value, range, rangeEnabled) {
        var _a = __read(range !== null && range !== void 0 ? range : [], 2), start = _a[0], end = _a[1];
        return rangeEnabled && start !== null && end !== null && !dateFns.isSameDay(start, end) && value >= start && value <= end;
    }

    // NG2
    var NovoYearSelectElement = /** @class */ (function () {
        function NovoYearSelectElement(labels) {
            this.labels = labels;
            this.activeDate = new Date();
            this.selected = [];
            // Select callback for output
            this.select = new i0.EventEmitter(false);
            // List of all years (generated in ngOnInit)
            this.years = [];
        }
        NovoYearSelectElement.prototype.ngOnInit = function () {
            // Determine the year array
            var now = new Date();
            var start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
            var end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
            var years = [];
            for (var i = start; i <= end; i++) {
                years.push(i);
            }
            this.years = years.reverse();
        };
        NovoYearSelectElement.prototype.onSelect = function (event, year) {
            // Helpers.swallowEvent(event);
            this.select.next({ event: event, year: year });
        };
        NovoYearSelectElement.prototype._isActive = function (year) {
            return this.activeDate && year === dateFns.getYear(this.activeDate);
        };
        NovoYearSelectElement.prototype._isSelected = function (year) {
            return this.selected && year === dateFns.getYear(this.selected[0]);
        };
        return NovoYearSelectElement;
    }());
    NovoYearSelectElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-year-select',
                    template: "<div *ngFor=\"let year of years\" (click)=\"onSelect($event, year)\">\n  <div class=\"year\" [class.selected]=\"_isSelected(year)\" [attr.data-automation-id]=\"year\">{{ year }}</div>\n</div>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [":host{display:grid;flex:1;grid-template-columns:1fr 1fr 1fr 1fr;max-height:320px;overflow-y:scroll}:host .year{border-radius:.4rem;cursor:pointer;padding:1rem}:host .year.selected,:host .year:hover{background-color:#4a89dc;color:#fff}"]
                },] }
    ];
    NovoYearSelectElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    NovoYearSelectElement.propDecorators = {
        minYear: [{ type: i0.Input }],
        maxYear: [{ type: i0.Input }],
        activeDate: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        select: [{ type: i0.Output }]
    };

    // NG2
    var NovoCalendarModule = /** @class */ (function () {
        function NovoCalendarModule() {
        }
        return NovoCalendarModule;
    }());
    NovoCalendarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoButtonModule, NovoPipesModule, angular2TextMask.TextMaskModule, NovoIconModule],
                    declarations: [NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement],
                    exports: [NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement],
                },] }
    ];

    var CardActionsElement = /** @class */ (function () {
        function CardActionsElement() {
        }
        return CardActionsElement;
    }());
    CardActionsElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-card-actions',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    /**
     * Content of a card, needed as it's used as a selector in the API.
     */
    var CardContentElement = /** @class */ (function () {
        function CardContentElement() {
            this.condensed = false;
        }
        return CardContentElement;
    }());
    CardContentElement.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-card-content, [novo-card-content], [novoCardContent]',
                    host: { class: 'novo-card-content', '[class.condensed]': 'condensed' },
                },] }
    ];
    CardContentElement.propDecorators = {
        condensed: [{ type: i0.Input }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], CardContentElement.prototype, "condensed", void 0);
    /**
     * Content of a card, needed as it's used as a selector in the API.
     */
    var CardHeaderElement = /** @class */ (function () {
        function CardHeaderElement() {
        }
        return CardHeaderElement;
    }());
    CardHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-card-header, [novo-card-header], [novoCardHeader]',
                    host: { class: 'novo-card-header' },
                    template: "\n    <ng-content select=\"novo-avatar, [novo-avatar], novo-icon\"></ng-content>\n    <div class=\"novo-card-header-text\">\n      <ng-content select=\"novo-title, [novo-title], novo-text, novo-label, novo-caption\"></ng-content>\n    </div>\n    <ng-content></ng-content>\n    <div class=\"novo-card-header-actions\">\n      <ng-content select=\"novo-action\"></ng-content>\n    </div>\n  "
                },] }
    ];
    var CardFooterElement = /** @class */ (function () {
        function CardFooterElement() {
        }
        return CardFooterElement;
    }());
    CardFooterElement.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-card-footer, [novo-card-footer], [novoCardFooter]',
                    host: { class: 'novo-card-footer' },
                },] }
    ];
    var CardElement = /** @class */ (function () {
        function CardElement(labels) {
            this.padding = true;
            this.config = {};
            this.inset = 'none';
            this.onClose = new i0.EventEmitter();
            this.onRefresh = new i0.EventEmitter();
            this.labels = labels;
        }
        Object.defineProperty(CardElement.prototype, "hbInset", {
            get: function () {
                return "novo-card-inset-" + this.inset;
            },
            enumerable: false,
            configurable: true
        });
        CardElement.prototype.ngOnInit = function () {
            this.config = this.config || {};
        };
        CardElement.prototype.ngOnChanges = function (changes) {
            this.config = this.config || {};
            this.cardAutomationId = (this.title || this.config.title || 'no-title').trim().toLowerCase().replace(/\s/g, '-') + "-card";
            var newIcon = this.icon || this.config.icon;
            var newMessageIcon = this.messageIcon || this.config.messageIcon;
            this.iconClass = newIcon ? "bhi-" + newIcon : null;
            this.messageIconClass = newMessageIcon ? "bhi-" + newMessageIcon : null;
        };
        CardElement.prototype.toggleClose = function () {
            if (!this.config.onClose) {
                this.onClose.next();
            }
            else {
                this.config.onClose();
            }
        };
        CardElement.prototype.toggleRefresh = function () {
            if (!this.config.onRefresh) {
                this.onRefresh.next();
            }
            else {
                this.config.onRefresh();
            }
        };
        return CardElement;
    }());
    CardElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-card',
                    host: {
                        class: 'novo-card',
                        '[attr.data-automation-id]': 'cardAutomationId',
                        '[class.loading]': 'loading || config.loading',
                    },
                    template: "\n    <!--Loading-->\n    <div class=\"card-loading-container\" *ngIf=\"loading || config.loading\">\n      <novo-loading theme=\"line\" [attr.data-automation-id]=\"cardAutomationId + '-loading'\"></novo-loading>\n    </div>\n    <!--Card Header-->\n    <header *ngIf=\"title || config.title\">\n      <div class=\"title\">\n        <!--Grabber Icon-->\n        <novo-icon\n          *ngIf=\"move || config.move\"\n          tooltip=\"{{ labels.move }}\"\n          tooltipPosition=\"bottom-right\"\n          [attr.data-automation-id]=\"cardAutomationId + '-move'\"\n          >move</novo-icon\n        >\n        <!--Card Title-->\n        <h3 [attr.data-automation-id]=\"cardAutomationId + '-title'\">\n          <span [tooltip]=\"iconTooltip\" tooltipPosition=\"right\"><i *ngIf=\"icon\" [ngClass]=\"iconClass\"></i></span>\n          {{ title || config.title }}\n        </h3>\n      </div>\n      <!--Card Actions-->\n      <div class=\"actions\" [attr.data-automation-id]=\"cardAutomationId + '-actions'\">\n        <ng-content select=\"novo-card-actions\"></ng-content>\n        <novo-button\n          theme=\"icon\"\n          icon=\"refresh\"\n          (click)=\"toggleRefresh()\"\n          *ngIf=\"refresh || config.refresh\"\n          [attr.data-automation-id]=\"cardAutomationId + '-refresh'\"\n          tooltip=\"{{ labels.refresh }}\"\n          tooltipPosition=\"bottom-left\"\n        ></novo-button>\n\n        <novo-button\n          theme=\"icon\"\n          icon=\"close-o\"\n          (click)=\"toggleClose()\"\n          *ngIf=\"close || config.close\"\n          [attr.data-automation-id]=\"cardAutomationId + '-close'\"\n          tooltip=\"{{ labels.close }}\"\n          tooltipPosition=\"bottom-left\"\n        ></novo-button>\n      </div>\n    </header>\n    <!--Content (transcluded)-->\n    <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\"></ng-content>\n    <!--Error/Empty Message-->\n    <p\n      class=\"card-message\"\n      *ngIf=\"!(loading || config.loading) && (message || config.message)\"\n      [attr.data-automation-id]=\"cardAutomationId + '-message'\"\n    >\n      <i *ngIf=\"messageIconClass\" [ngClass]=\"messageIconClass\"></i> <span [innerHtml]=\"message || config.message\"></span>\n    </p>\n    <!--Card Footer-->\n    <ng-content\n      *ngIf=\"!(loading || config.loading) && !(message || config.message)\"\n      select=\"footer,novo-card-footer,[novo-card-footer],[novoCardFooter]\"\n    ></ng-content>\n  "
                },] }
    ];
    CardElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    CardElement.propDecorators = {
        padding: [{ type: i0.Input }],
        config: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        message: [{ type: i0.Input }],
        messageIcon: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        iconTooltip: [{ type: i0.Input }],
        refresh: [{ type: i0.Input }],
        close: [{ type: i0.Input }],
        move: [{ type: i0.Input }],
        loading: [{ type: i0.Input }],
        inline: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.novo-card-inline',] }],
        inset: [{ type: i0.Input }],
        hbInset: [{ type: i0.HostBinding, args: ['class',] }],
        onClose: [{ type: i0.Output }],
        onRefresh: [{ type: i0.Output }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], CardElement.prototype, "inline", void 0);

    // NG2
    var NovoCardModule = /** @class */ (function () {
        function NovoCardModule() {
        }
        return NovoCardModule;
    }());
    NovoCardModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                    declarations: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement],
                    exports: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement],
                },] }
    ];

    var NovoCategoryDropdownElement = /** @class */ (function (_super) {
        __extends(NovoCategoryDropdownElement, _super);
        function NovoCategoryDropdownElement(element, labels) {
            var _this = _super.call(this, element) || this;
            _this.labels = labels;
            _this._query = '';
            _this._categoryMap = {};
            _this._categories = [];
            // Boolean to keep the selection persist when closing the dropdown
            _this.persistSelection = false;
            // Boolean to close the dropdown on selection
            _this.closeOnSelect = false;
            // Event that is emitted whenever an item is selected
            _this._select = new i0.EventEmitter();
            // Event that is emitted whenever a category is selected
            _this.categorySelected = new i0.EventEmitter();
            _this.clickHandler = _this.toggleActive.bind(_this);
            return _this;
        }
        Object.defineProperty(NovoCategoryDropdownElement.prototype, "categories", {
            set: function (categories) {
                this._masterCategoryMap = Object.assign({}, categories);
                this._categoryMap = Object.assign({}, categories);
                this._categories = Object.keys(categories);
            },
            enumerable: false,
            configurable: true
        });
        NovoCategoryDropdownElement.prototype.ngOnInit = function () {
            var button = this.element.nativeElement.querySelector('button');
            button.addEventListener('click', this.clickHandler);
        };
        NovoCategoryDropdownElement.prototype.ngOnDestroy = function () {
            var button = this.element.nativeElement.querySelector('button');
            if (button) {
                button.removeEventListener('click', this.clickHandler);
            }
        };
        NovoCategoryDropdownElement.prototype.onKeyDown = function (event) {
            if (this.active && (event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */)) {
                this.toggleActive();
            }
        };
        NovoCategoryDropdownElement.prototype.clearSelection = function () {
            var _this = this;
            this._categories.forEach(function (category) {
                _this._categoryMap[category].forEach(function (item) {
                    item.selected = false;
                });
            });
        };
        NovoCategoryDropdownElement.prototype.select = function (event, item) {
            Helpers.swallowEvent(event);
            // If we persist the selection, clear and show a check
            if (this.persistSelection) {
                this.clearSelection();
                item.selected = true;
            }
            // Emit the item
            this._select.emit(item);
            // Close, if input is set
            if (this.closeOnSelect) {
                this.toggleActive();
            }
        };
        NovoCategoryDropdownElement.prototype.onCategorySelected = function (category) {
            this.categorySelected.emit(category);
        };
        NovoCategoryDropdownElement.prototype.clearQuery = function (event) {
            var _this = this;
            Helpers.swallowEvent(event);
            this._query = '';
            // Reset the categories
            this._categories.forEach(function (category) {
                _this._categoryMap[category] = _this._masterCategoryMap[category];
            });
        };
        NovoCategoryDropdownElement.prototype.queryCategories = function (query) {
            var _this = this;
            // Save the query
            this._query = query;
            // Check timeout
            if (this._queryTimeout) {
                clearTimeout(this._queryTimeout);
            }
            // Store a timeout, to debounce user input
            this._queryTimeout = setTimeout(function () {
                _this._categories.forEach(function (category) {
                    if (_this.search.compare) {
                        _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return _this.search.compare(query, item); });
                    }
                    else {
                        _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return ~item.label.toLowerCase().indexOf(query.toLowerCase()); });
                    }
                });
            }, this.search.debounce || 300);
        };
        NovoCategoryDropdownElement.prototype.executeClickCallback = function (event, link) {
            link.callback(event);
            // Close, if input is set
            if (this.closeOnSelect) {
                this.toggleActive();
            }
        };
        return NovoCategoryDropdownElement;
    }(OutsideClick));
    NovoCategoryDropdownElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-category-dropdown',
                    template: "\n    <ng-content select=\"button\"></ng-content>\n    <div class=\"dropdown-container\" *ngIf=\"active\">\n      <div class=\"novo-category-dropdown-search\" *ngIf=\"search\" data-automation-id=\"novo-category-dropdown-search\">\n        <input\n          type=\"text\"\n          [placeholder]=\"search.placeholder || labels.search\"\n          [value]=\"_query\"\n          (input)=\"queryCategories($event.target.value)\"\n        />\n        <i class=\"bhi-search\" *ngIf=\"!_query\"></i>\n        <i class=\"bhi-times\" *ngIf=\"_query\" (click)=\"clearQuery($event)\"></i>\n      </div>\n      <novo-nav theme=\"white\" [outlet]=\"novoCategoryDropdownOutlet\" direction=\"vertical\">\n        <novo-tab *ngFor=\"let category of _categories\" [attr.data-automation-id]=\"category\" (activeChange)=\"onCategorySelected(category)\">\n          <span>{{ category }} ({{ _categoryMap[category].length }})</span>\n        </novo-tab>\n      </novo-nav>\n      <novo-nav-outlet #novoCategoryDropdownOutlet>\n        <novo-nav-content *ngFor=\"let category of _categories\">\n          <novo-list direction=\"vertical\">\n            <novo-list-item\n              *ngFor=\"let item of _categoryMap[category]\"\n              (click)=\"select($event, item)\"\n              [attr.data-automation-id]=\"item.label\"\n            >\n              <item-content>{{ item.label }}</item-content>\n              <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverText && !item.selected\">{{ item.hoverText }}</item-end>\n              <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverIcon && !item.selected\"\n                ><i class=\"bhi-{{ item.hoverIcon }}\"></i\n              ></item-end>\n              <item-end *ngIf=\"item.selected\"><i class=\"bhi-check\"></i></item-end>\n            </novo-list-item>\n            <novo-list-item *ngIf=\"_categoryMap[category].length === 0 && search\" class=\"novo-category-dropdown-empty-item\">\n              <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>\n            </novo-list-item>\n          </novo-list>\n        </novo-nav-content>\n      </novo-nav-outlet>\n      <footer *ngIf=\"footer\" class=\"novo-category-dropdown-footer-align-{{ footer.align || 'right' }}\">\n        <a *ngFor=\"let link of footer.links\" (click)=\"executeClickCallback($event, link)\">{{ link.label }}</a>\n      </footer>\n    </div>\n  ",
                    host: {
                        '(keydown)': 'onKeyDown($event)',
                        '[class.active]': 'active',
                    }
                },] }
    ];
    NovoCategoryDropdownElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService }
    ]; };
    NovoCategoryDropdownElement.propDecorators = {
        persistSelection: [{ type: i0.Input }],
        closeOnSelect: [{ type: i0.Input }],
        search: [{ type: i0.Input }],
        footer: [{ type: i0.Input }],
        _select: [{ type: i0.Output, args: ['itemSelected',] }],
        categorySelected: [{ type: i0.Output }],
        categories: [{ type: i0.Input }]
    };

    var NovoNavElement = /** @class */ (function () {
        function NovoNavElement() {
            this.theme = '';
            this.direction = '';
            this.condensed = false;
            this.items = [];
            this._selectedIndex = null;
            /** The tab index that should be selected after the content has been checked. */
            this._indexToSelect = 0;
            /** Output to enable support for two-way binding on `[(selectedIndex)]` */
            this.selectedIndexChange = new i0.EventEmitter();
        }
        Object.defineProperty(NovoNavElement.prototype, "selectedIndex", {
            /** The index of the active tab. */
            get: function () {
                return this._selectedIndex;
            },
            set: function (value) {
                this._indexToSelect = coercion.coerceNumberProperty(value, null);
            },
            enumerable: false,
            configurable: true
        });
        NovoNavElement.prototype.ngAfterContentChecked = function () {
            var _this = this;
            // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
            // the amount of tabs changes before the actual change detection runs.
            var indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));
            if (this._selectedIndex !== indexToSelect) {
                var isFirstRun_1 = this._selectedIndex == null;
                // Changing these values after change detection has run
                // since the checked content may contain references to them.
                Promise.resolve().then(function () {
                    _this._deactivateAllItems(_this.items);
                    _this._activateSelectedItem(indexToSelect);
                    _this._showActiveContent(indexToSelect);
                    if (!isFirstRun_1) {
                        _this.selectedIndexChange.emit(indexToSelect);
                    }
                });
                this._selectedIndex = indexToSelect;
            }
        };
        NovoNavElement.prototype.select = function (item) {
            var indexToSelect = this.items.indexOf(item);
            // Deactivate all other tabs
            this._deactivateAllItems(this.items);
            this._activateSelectedItem(indexToSelect);
            this._showActiveContent(indexToSelect);
            this.selectedIndexChange.emit(indexToSelect);
        };
        NovoNavElement.prototype.add = function (item) {
            if (this.items.length === 0) {
                item.active = true;
                // item.selected.next();
            }
            this.items.push(item);
        };
        NovoNavElement.prototype._activateSelectedItem = function (indexToSelect) {
            var item = this.items[indexToSelect];
            if (item) {
                item.active = true;
            }
        };
        NovoNavElement.prototype._showActiveContent = function (indexToSelect) {
            if (this.outlet) {
                this.outlet.show(indexToSelect);
            }
        };
        NovoNavElement.prototype._deactivateAllItems = function (items) {
            items.forEach(function (t) {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        };
        /** Clamps the given index to the bounds of 0 and the tabs length. */
        NovoNavElement.prototype._clampTabIndex = function (index) {
            return Math.min(this.items.length - 1, Math.max(index || 0, 0));
        };
        return NovoNavElement;
    }());
    NovoNavElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-nav',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NovoNavElement.propDecorators = {
        theme: [{ type: i0.Input }],
        direction: [{ type: i0.Input }],
        outlet: [{ type: i0.Input }],
        router: [{ type: i0.Input }],
        condensed: [{ type: i0.HostBinding, args: ['class.condensed',] }, { type: i0.Input }],
        selectedIndex: [{ type: i0.Input }],
        selectedIndexChange: [{ type: i0.Output }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoNavElement.prototype, "condensed", void 0);
    var NovoTabElement = /** @class */ (function () {
        function NovoTabElement(nav, el, cdr) {
            this.el = el;
            this.cdr = cdr;
            this.role = 'tab';
            this.active = false;
            this.disabled = false;
            this.activeChange = new i0.EventEmitter();
            this.onlyText = true;
            this.nav = nav;
            this.nav.add(this);
            var tablink = el.nativeElement.querySelector('.novo-tab-link');
            if (tablink) {
                for (var i = 0; i < tablink.childNodes.length; i++) {
                    if (tablink.childNodes[i].nodeType !== Node.TEXT_NODE)
                        this.onlyText = false;
                }
            }
        }
        Object.defineProperty(NovoTabElement.prototype, "hb_textOnly", {
            get: function () {
                return this.onlyText;
            },
            enumerable: false,
            configurable: true
        });
        NovoTabElement.prototype.select = function () {
            if (!this.disabled) {
                this.activeChange.emit(true);
                this.nav.select(this);
            }
            this.cdr.detectChanges();
        };
        return NovoTabElement;
    }());
    NovoTabElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tab',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                        '[attr.role]': 'tab',
                    },
                    template: "\n    <div #tablink class=\"novo-tab-link\">\n      <ng-content></ng-content>\n    </div>\n    <span class=\"indicator\"></span>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoTabElement.ctorParameters = function () { return [
        { type: NovoNavElement },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTabElement.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        active: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        activeChange: [{ type: i0.Output }],
        hb_textOnly: [{ type: i0.HostBinding, args: ['class.text-only',] }],
        tablink: [{ type: i0.ViewChild, args: ['tablink',] }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoTabElement.prototype, "disabled", void 0);
    var NovoTabButtonElement = /** @class */ (function () {
        function NovoTabButtonElement(nav) {
            this.role = 'tab';
            this.active = false;
            this.disabled = false;
            this.nav = nav;
            this.nav.add(this);
        }
        NovoTabButtonElement.prototype.select = function () {
            if (!this.disabled) {
                this.nav.select(this);
            }
        };
        return NovoTabButtonElement;
    }());
    NovoTabButtonElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tab-button',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NovoTabButtonElement.ctorParameters = function () { return [
        { type: NovoNavElement }
    ]; };
    NovoTabButtonElement.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        active: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }]
    };
    var NovoTabLinkElement = /** @class */ (function () {
        function NovoTabLinkElement(nav, router, cdr, link) {
            this.router = router;
            this.cdr = cdr;
            this.link = link;
            this.role = 'tab';
            this.active = false;
            this.disabled = false;
            this.nav = nav;
            this.nav.add(this);
        }
        NovoTabLinkElement.prototype.ngOnInit = function () {
            if (this.isLinkActive(this.link)) {
                this.nav.select(this);
            }
        };
        NovoTabLinkElement.prototype.select = function () {
            if (!this.disabled) {
                this.nav.select(this);
                if (this.spy) {
                    var el = document.querySelector("#" + this.spy);
                    el === null || el === void 0 ? void 0 : el.scrollIntoView(true);
                }
            }
        };
        NovoTabLinkElement.prototype.isLinkActive = function (link) {
            return link && link.urlTree ? this.router.isActive(link.urlTree, false) : false;
        };
        return NovoTabLinkElement;
    }());
    NovoTabLinkElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tab-link',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: "\n    <div class=\"novo-tab-link\">\n      <ng-content></ng-content>\n    </div>\n    <span class=\"indicator\"></span>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoTabLinkElement.ctorParameters = function () { return [
        { type: NovoNavElement },
        { type: router.Router },
        { type: i0.ChangeDetectorRef },
        { type: router.RouterLink, decorators: [{ type: i0.Optional }] }
    ]; };
    NovoTabLinkElement.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        active: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        spy: [{ type: i0.Input }]
    };
    var NovoNavOutletElement = /** @class */ (function () {
        function NovoNavOutletElement() {
            this.items = [];
        }
        NovoNavOutletElement.prototype.show = function (index) {
            var item = this.items[index];
            /**
             * Deactivates other tab items
             * @param items - deactivated items
             */
            function _deactivateAllItems(items) {
                items.forEach(function (t) {
                    if (t.active === true) {
                        // t.deselected.next();
                    }
                    t.active = false;
                });
            }
            _deactivateAllItems(this.items);
            item.active = true;
        };
        NovoNavOutletElement.prototype.add = function (item) {
            if (this.items.length === 0) {
                item.active = true;
            }
            this.items.push(item);
        };
        return NovoNavOutletElement;
    }());
    NovoNavOutletElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-nav-outlet',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    var NovoNavContentElement = /** @class */ (function () {
        function NovoNavContentElement(outlet) {
            this.active = false;
            outlet.add(this);
        }
        return NovoNavContentElement;
    }());
    NovoNavContentElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-nav-content',
                    host: {
                        '[class.active]': 'active',
                    },
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NovoNavContentElement.ctorParameters = function () { return [
        { type: NovoNavOutletElement }
    ]; };
    NovoNavContentElement.propDecorators = {
        active: [{ type: i0.Input }]
    };
    var NovoNavHeaderElement = /** @class */ (function () {
        function NovoNavHeaderElement(outlet) {
            this.role = 'tabpanel';
            this.active = false;
            this.active = this.active || false;
            this.outlet = outlet;
        }
        NovoNavHeaderElement.prototype.show = function (event) {
            try {
                var INDEX = this.outlet.items.indexOf(this.forElement);
                if (INDEX > -1) {
                    this.outlet.show(INDEX);
                }
            }
            catch (err) {
                // do nothing
            }
        };
        return NovoNavHeaderElement;
    }());
    NovoNavHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-nav-header',
                    host: {
                        '[class.active]': 'active',
                        '(click)': 'show($event)',
                    },
                    template: '<ng-content></ng-content>'
                },] }
    ];
    NovoNavHeaderElement.ctorParameters = function () { return [
        { type: NovoNavOutletElement }
    ]; };
    NovoNavHeaderElement.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        active: [{ type: i0.Input }],
        forElement: [{ type: i0.Input, args: ['for',] }]
    };

    // NG2
    var NovoTabModule = /** @class */ (function () {
        function NovoTabModule() {
        }
        return NovoTabModule;
    }());
    NovoTabModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [
                        NovoNavElement,
                        NovoTabElement,
                        NovoTabButtonElement,
                        NovoTabLinkElement,
                        NovoNavOutletElement,
                        NovoNavContentElement,
                        NovoNavHeaderElement,
                    ],
                    exports: [
                        NovoNavElement,
                        NovoTabElement,
                        NovoTabButtonElement,
                        NovoTabLinkElement,
                        NovoNavOutletElement,
                        NovoNavContentElement,
                        NovoNavHeaderElement,
                    ],
                },] }
    ];

    // NG2
    var NovoCategoryDropdownModule = /** @class */ (function () {
        function NovoCategoryDropdownModule() {
        }
        return NovoCategoryDropdownModule;
    }());
    NovoCategoryDropdownModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoTabModule, NovoListModule],
                    declarations: [NovoCategoryDropdownElement],
                    exports: [NovoCategoryDropdownElement],
                },] }
    ];

    // Value accessor for the component (supports ngModel)
    var CHECKBOX_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoCheckboxElement; }),
        multi: true,
    };
    /** Change event object emitted by NovoCheckbox. */
    var NovoCheckboxChange = /** @class */ (function () {
        function NovoCheckboxChange() {
        }
        return NovoCheckboxChange;
    }());
    var LAYOUT_DEFAULTS = { iconStyle: 'box' };
    var nextId = 0;
    var NovoCheckboxElement = /** @class */ (function () {
        function NovoCheckboxElement(_cdr, _focusMonitor, tabIndex) {
            this._cdr = _cdr;
            this._focusMonitor = _focusMonitor;
            /**
             * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will
             * take precedence so this may be omitted.
             */
            this.ariaLabel = '';
            /**
             * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
             */
            this.ariaLabelledby = null;
            this._uniqueId = "novo-checkbox-" + ++nextId;
            this.id = this._uniqueId;
            this.name = this._uniqueId;
            this.disabled = false;
            this._checked = false;
            this._indeterminate = false;
            /** Event emitted when the checkbox's `checked` value changes. */
            this.change = new i0.EventEmitter();
            /** Event emitted when the checkbox's `indeterminate` value changes. */
            this.indeterminateChange = new i0.EventEmitter();
            this.onSelect = new i0.EventEmitter();
            this.boxIcon = true;
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
            // this.color = this.defaultColor = this._options.color || defaults.color;
            this.tabIndex = parseInt(tabIndex, 10) || 0;
        }
        Object.defineProperty(NovoCheckboxElement.prototype, "required", {
            /** Whether the checkbox is required. */
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCheckboxElement.prototype, "checked", {
            /** Whether the checkbox is checked. */
            get: function () {
                return this._checked;
            },
            set: function (value) {
                if (value !== this.checked) {
                    this._checked = value;
                    this._cdr.markForCheck();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoCheckboxElement.prototype, "indeterminate", {
            get: function () {
                return this._indeterminate;
            },
            set: function (value) {
                var changed = value !== this._indeterminate;
                this._indeterminate = coercion.coerceBooleanProperty(value);
                if (changed) {
                    this.indeterminateChange.emit(this._indeterminate);
                }
                this._syncIndeterminate(this._indeterminate);
            },
            enumerable: false,
            configurable: true
        });
        NovoCheckboxElement.prototype.ngOnInit = function () {
            this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
            this.boxIcon = this.layoutOptions.iconStyle === 'box';
        };
        NovoCheckboxElement.prototype.select = function (event) {
            Helpers.swallowEvent(event);
            if (!this.disabled) {
                this.checked = !this.checked;
                this.onModelChange(this.checked);
                this.onSelect.emit({ originalEvent: event, value: this.checked });
            }
        };
        // Implemented as part of ControlValueAccessor.
        NovoCheckboxElement.prototype.writeValue = function (value) {
            this.checked = !!value;
        };
        NovoCheckboxElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoCheckboxElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoCheckboxElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoCheckboxElement.prototype._getAriaChecked = function () {
            if (this.checked) {
                return 'true';
            }
            return this.indeterminate ? 'mixed' : 'false';
        };
        NovoCheckboxElement.prototype._emitChangeEvent = function () {
            var event = new NovoCheckboxChange();
            event.source = this;
            event.checked = this.checked;
            this.onModelChange(this.checked);
            this.change.emit(event);
            // Assigning the value again here is redundant, but we have to do it in case it was
            // changed inside the `change` listener which will cause the input to be out of sync.
            if (this._inputElement) {
                this._inputElement.nativeElement.checked = this.checked;
            }
        };
        /** Toggles the `checked` state of the checkbox. */
        NovoCheckboxElement.prototype.toggle = function () {
            this.checked = !this.checked;
        };
        /**
         * Event handler for checkbox input element.
         * Toggles checked state if element is not disabled.
         * Do not toggle on (change) event since IE doesn't fire change event when
         *   indeterminate checkbox is clicked.
         * @param event
         */
        NovoCheckboxElement.prototype._onInputClick = function (event) {
            var _this = this;
            // We have to stop propagation for click events on the visual hidden input element.
            // By default, when a user clicks on a label element, a generated click event will be
            // dispatched on the associated input element. Since we are using a label element as our
            // root container, the click event on the `checkbox` will be executed twice.
            // The real click event will bubble up, and the generated click event also tries to bubble up.
            // This will lead to multiple click events.
            // Preventing bubbling for the second event will solve that issue.
            event.stopPropagation();
            if (!this.disabled) {
                // When user manually click on the checkbox, `indeterminate` is set to false.
                if (this.indeterminate) {
                    Promise.resolve().then(function () {
                        _this._indeterminate = false;
                        _this.indeterminateChange.emit(_this._indeterminate);
                    });
                }
                this.toggle();
                // Emit our custom change event if the native input emitted one.
                // It is important to only emit it, if the native input triggered one, because
                // we don't want to trigger a change event, when the `checked` variable changes for example.
                this._emitChangeEvent();
            }
        };
        /** Focuses the checkbox. */
        NovoCheckboxElement.prototype.focus = function (origin, options) {
            if (origin) {
                this._focusMonitor.focusVia(this._inputElement, origin, options);
            }
            else {
                this._inputElement.nativeElement.focus(options);
            }
        };
        NovoCheckboxElement.prototype._onInteractionEvent = function (event) {
            // We always have to stop propagation on the change event.
            // Otherwise the change event, from the input element, will bubble up and
            // emit its event object to the `change` output.
            event.stopPropagation();
        };
        NovoCheckboxElement.prototype._syncIndeterminate = function (value) {
            var nativeCheckbox = this._inputElement;
            if (nativeCheckbox) {
                nativeCheckbox.nativeElement.indeterminate = value;
            }
        };
        return NovoCheckboxElement;
    }());
    NovoCheckboxElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-checkbox',
                    providers: [CHECKBOX_VALUE_ACCESSOR],
                    template: "\n    <div class=\"novo-checkbox-group\" [class.checked]=\"checked\" [class.disabled]=\"disabled\">\n      <input\n        #input\n        type=\"checkbox\"\n        [required]=\"required\"\n        [checked]=\"checked\"\n        [id]=\"id\"\n        [attr.name]=\"name\"\n        [attr.value]=\"value\"\n        [disabled]=\"disabled\"\n        [tabIndex]=\"tabIndex\"\n        [attr.aria-label]=\"ariaLabel || null\"\n        [attr.aria-labelledby]=\"ariaLabelledby\"\n        [attr.aria-checked]=\"_getAriaChecked()\"\n        [attr.aria-describedby]=\"ariaDescribedby\"\n        (change)=\"_onInteractionEvent($event)\"\n        (click)=\"_onInputClick($event)\"\n      />\n      <label [attr.for]=\"name\" (click)=\"select($event)\" [class.disabled]=\"disabled\">\n        <i\n          [class.bhi-checkbox-empty]=\"!checked && !indeterminate && boxIcon\"\n          [class.bhi-checkbox-filled]=\"checked && !indeterminate && boxIcon\"\n          [class.bhi-checkbox-indeterminate]=\"indeterminate && boxIcon\"\n          [class.bhi-circle-o]=\"!checked && !indeterminate && !boxIcon\"\n          [class.bhi-check]=\"checked && !indeterminate && !boxIcon\"\n          [class.bhi-circle]=\"indeterminate && !boxIcon\"\n        ></i>\n        <span *ngIf=\"label\">{{ label }}</span>\n        <span *ngIf=\"!label\" class=\"novo-checkbox-text\"><ng-content></ng-content></span>\n      </label>\n    </div>\n  ",
                    host: {
                        class: 'novo-checkbox',
                        '[class.has-label]': 'label',
                    },
                    styles: [":host{display:flex;flex-flow:row wrap}:host.has-label [class*=-group]{margin-right:15px}:host .novo-checkbox-text{margin-left:15px}:host .novo-checkbox-group{cursor:pointer;position:relative}:host .novo-checkbox-group:hover label i:before{box-shadow:0 0 15px 3px rgba(74,137,220,.25)}:host .novo-checkbox-group:hover label i.bhi-checkbox-empty,:host .novo-checkbox-group:hover label i.bhi-radio-empty{color:#4a89dc}:host .novo-checkbox-group.checked label{color:#393939}:host .novo-checkbox-group.checked label i{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}:host .novo-checkbox-group.disabled{pointer-events:none}:host .novo-checkbox-group.disabled label>i{opacity:.7}:host .novo-checkbox-group input[type=checkbox]{-moz-appearance:none!important;-webkit-appearance:none!important;appearance:none!important;border:none!important;height:0!important;position:absolute}:host .novo-checkbox-group input[type=checkbox]:focus+label i:before{text-shadow:0 0 20px rgba(74,137,220,.5)}:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-empty,:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-filled{color:#4a89dc}:host .novo-checkbox-group label{align-items:baseline;color:#868686;cursor:pointer;display:flex;margin-left:0;transition:all .2s ease-in-out}:host .novo-checkbox-group label i{margin-right:5px;transition:all .2s ease-in-out}:host .novo-checkbox-group label i.bhi-checkbox-empty,:host .novo-checkbox-group label i.bhi-circle-o,:host .novo-checkbox-group label i.bhi-radio-empty{color:#d2d2d2}:host .novo-checkbox-group label i.bhi-check{background:#d2d2d2;border-radius:50%;color:#fff;font-size:1em;height:20px;padding:.15em 0 0 .3em;width:20px}:host .novo-checkbox-group label i.bhi-checkbox-filled,:host .novo-checkbox-group label i.bhi-radio-filled{color:#4a89dc}:host .novo-checkbox-group label span{display:inline-block}"]
                },] }
    ];
    NovoCheckboxElement.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: a11y.FocusMonitor },
        { type: String, decorators: [{ type: i0.Attribute, args: ['tabindex',] }] }
    ]; };
    NovoCheckboxElement.propDecorators = {
        ariaLabel: [{ type: i0.Input, args: ['aria-label',] }],
        ariaLabelledby: [{ type: i0.Input, args: ['aria-labelledby',] }],
        ariaDescribedby: [{ type: i0.Input, args: ['aria-describedby',] }],
        id: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        layoutOptions: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        tabIndex: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        checked: [{ type: i0.Input }],
        indeterminate: [{ type: i0.Input }],
        _inputElement: [{ type: i0.ViewChild, args: ['input',] }],
        change: [{ type: i0.Output }],
        indeterminateChange: [{ type: i0.Output }],
        onSelect: [{ type: i0.Output }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], NovoCheckboxElement.prototype, "checked", null);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean),
        __metadata("design:paramtypes", [Boolean])
    ], NovoCheckboxElement.prototype, "indeterminate", null);

    // NG2
    // Value accessor for the component (supports ngModel)
    var CHECKLIST_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoCheckListElement; }),
        multi: true,
    };
    var NovoCheckListElement = /** @class */ (function () {
        function NovoCheckListElement() {
            this.onSelect = new i0.EventEmitter();
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        NovoCheckListElement.prototype.ngOnInit = function () {
            this.setModel();
            this.setupOptions();
        };
        NovoCheckListElement.prototype.select = function (event, item) {
            Helpers.swallowEvent(event);
            if (!this.disabled) {
                item.checked = !item.checked;
                this.model = this._options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
                this.onModelChange(this.model.length > 0 ? this.model : '');
                this.onSelect.emit({ selected: this.model });
            }
        };
        NovoCheckListElement.prototype.setupOptions = function () {
            var _this = this;
            this.options = this.options || [];
            this._options = [];
            if (this.options.length && !this.options[0].value) {
                this.options.forEach(function (option) {
                    var formattedOption = {
                        value: option,
                        label: option,
                        checked: _this.model && _this.model.length && _this.model.indexOf(option.value) !== -1,
                    };
                    _this._options.push(formattedOption);
                });
            }
            else {
                this.options.forEach(function (option) {
                    var formattedOption = option;
                    formattedOption.checked = _this.model && _this.model.length && _this.model.indexOf(option.value) !== -1;
                    _this._options.push(formattedOption);
                });
            }
        };
        NovoCheckListElement.prototype.setModel = function () {
            var checkedOptions = this.options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
            this.writeValue(checkedOptions);
        };
        NovoCheckListElement.prototype.writeValue = function (model) {
            this.model = model || [];
            if (model) {
                this.setupOptions();
            }
        };
        NovoCheckListElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoCheckListElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoCheckListElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        return NovoCheckListElement;
    }());
    NovoCheckListElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-check-list',
                    providers: [CHECKLIST_VALUE_ACCESSOR],
                    template: "\n    <div\n      class=\"novo-checkbox-group\"\n      *ngFor=\"let option of _options; let i = index\"\n      [ngClass]=\"{ checked: option.checked }\"\n      [class.disabled]=\"disabled\"\n      [attr.data-automation-id]=\"option.label\"\n    >\n      <input\n        [name]=\"name\"\n        type=\"checkbox\"\n        [ngModel]=\"option.checked\"\n        [attr.id]=\"name + i\"\n        [value]=\"option.checked\"\n        (change)=\"select($event, option)\"\n        [disabled]=\"disabled\"\n      />\n      <label [attr.for]=\"name + i\" (click)=\"select($event, option)\">\n        <i [ngClass]=\"{ 'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }\"></i>\n        <span>{{ option.label }}</span>\n      </label>\n    </div>\n  ",
                    styles: [":host{display:flex;flex-flow:row wrap;gap:1rem}:host.hasLabel [class*=-group]{margin-right:15px}:host .novo-checkbox-group{cursor:pointer;position:relative}:host .novo-checkbox-group:hover label i:before{box-shadow:0 0 15px 3px rgba(74,137,220,.25)}:host .novo-checkbox-group:hover label i.bhi-checkbox-empty,:host .novo-checkbox-group:hover label i.bhi-radio-empty{color:#4a89dc}:host .novo-checkbox-group.checked label{color:var(--text-main)}:host .novo-checkbox-group.checked label i{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}:host .novo-checkbox-group.disabled{pointer-events:none}:host .novo-checkbox-group.disabled label>i{opacity:.7}:host .novo-checkbox-group input[type=checkbox]{-moz-appearance:none!important;-webkit-appearance:none!important;appearance:none!important;border:none!important;height:0!important;position:absolute}:host .novo-checkbox-group input[type=checkbox]:focus+label i:before{text-shadow:0 0 20px rgba(74,137,220,.5)}:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-empty,:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-filled{color:#4a89dc}:host .novo-checkbox-group label{align-items:baseline;color:#868686;cursor:pointer;display:flex;margin-left:0;transition:all .2s ease-in-out}:host .novo-checkbox-group label i{margin-right:5px;transition:all .2s ease-in-out}:host .novo-checkbox-group label i.bhi-checkbox-empty,:host .novo-checkbox-group label i.bhi-circle-o,:host .novo-checkbox-group label i.bhi-radio-empty{color:#d2d2d2}:host .novo-checkbox-group label i.bhi-check{background:#d2d2d2;border-radius:50%;color:#fff;font-size:1em;height:20px;padding:.15em 0 0 .3em;width:20px}:host .novo-checkbox-group label i.bhi-checkbox-filled,:host .novo-checkbox-group label i.bhi-radio-filled{color:#4a89dc}:host .novo-checkbox-group label span{display:inline-block}"]
                },] }
    ];
    NovoCheckListElement.propDecorators = {
        name: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }]
    };

    var NovoCheckboxModule = /** @class */ (function () {
        function NovoCheckboxModule() {
        }
        return NovoCheckboxModule;
    }());
    NovoCheckboxModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, a11y.A11yModule, forms.FormsModule],
                    declarations: [NovoCheckboxElement, NovoCheckListElement],
                    exports: [NovoCheckboxElement, NovoCheckListElement],
                },] }
    ];

    var REMOVABLE_REF = new i0.InjectionToken('REMOVABLE_REF');
    /** Event object emitted by NovoChip when selected or deselected. */
    var NovoChipSelectionChange = /** @class */ (function () {
        function NovoChipSelectionChange(
        /** Reference to the chip that emitted the event. */
        source, 
        /** Whether the chip that emitted the event is selected. */
        selected, 
        /** Whether the selection change was a result of a user interaction. */
        isUserInput) {
            if (isUserInput === void 0) { isUserInput = false; }
            this.source = source;
            this.selected = selected;
            this.isUserInput = isUserInput;
        }
        return NovoChipSelectionChange;
    }());
    // Boilerplate for applying mixins to NovoChipElement.
    /** @docs-private */
    var NovoChipBase = /** @class */ (function () {
        // abstract disabled: boolean;
        function NovoChipBase(_elementRef) {
            this._elementRef = _elementRef;
        }
        return NovoChipBase;
    }());
    var NovoChipMixinBase = mixinSize(mixinTabIndex(mixinColor(NovoChipBase, null), -1), 'md');
    /**
     * Dummy directive to add CSS class to chip avatar.
     * @docs-private
     */
    var NovoChipAvatar = /** @class */ (function () {
        function NovoChipAvatar() {
        }
        return NovoChipAvatar;
    }());
    NovoChipAvatar.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-chip-avatar, [novoChipAvatar]',
                    host: { class: 'novo-chip-avatar' },
                },] }
    ];
    /**
     * Applies proper (click) support and adds styling for use with Bullhorn's "x" icon *
     * Example:
     *
     *     `<novo-chip>
     *       <novo-icon novoChipRemove>x</novo-icon>
     *     </novo-chip>`
     *
     * You *may* use a custom icon, but you may need to override the `novo-chip-remove` positioning
     * styles to properly center the icon within the chip.
     */
    var NovoChipRemove = /** @class */ (function () {
        function NovoChipRemove(_parentChip, elementRef) {
            this._parentChip = _parentChip;
            if (elementRef.nativeElement.nodeName === 'BUTTON') {
                elementRef.nativeElement.setAttribute('type', 'button');
            }
        }
        /** Calls the parent chip's public `remove()` method if applicable. */
        NovoChipRemove.prototype._handleClick = function (event) {
            var parentChip = this._parentChip;
            if (parentChip.removable && !parentChip.disabled) {
                parentChip.remove();
            }
            // We need to stop event propagation because otherwise the event will bubble up to the
            // form field and cause the `onContainerClick` method to be invoked. This method would then
            // reset the focused chip that has been focused after chip removal. Usually the parent
            // the parent click listener of the `NovoChip` would prevent propagation, but it can happen
            // that the chip is being removed before the event bubbles up.
            event.stopPropagation();
        };
        return NovoChipRemove;
    }());
    NovoChipRemove.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoChipRemove]',
                    host: {
                        class: 'novo-chip-remove',
                        '(click)': '_handleClick($event)',
                    },
                },] }
    ];
    NovoChipRemove.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [REMOVABLE_REF,] }] },
        { type: i0.ElementRef }
    ]; };
    /**
     * Chip component. Used inside the NovoChipList component.
     */
    var NovoChipElement = /** @class */ (function (_super) {
        __extends(NovoChipElement, _super);
        function NovoChipElement(_elementRef, _ngZone, platform, _changeDetectorRef, _document, animationMode, tabIndex) {
            var _this = _super.call(this, _elementRef) || this;
            _this._elementRef = _elementRef;
            _this._ngZone = _ngZone;
            _this._changeDetectorRef = _changeDetectorRef;
            /** Whether the chip has focus. */
            _this._hasFocus = false;
            /** Whether the chip list is selectable */
            _this._chipListSelectable = true;
            /** Whether the chip list is in multi-selection mode. */
            _this._chipListMultiple = false;
            /** Whether the chip list as a whole is disabled. */
            _this._chipListDisabled = false;
            _this._selected = false;
            _this._selectable = false;
            _this._disabled = false;
            _this._removable = true;
            /** Emits when the chip is focused. */
            _this._onFocus = new rxjs.Subject();
            /** Emits when the chip is blured. */
            _this._onBlur = new rxjs.Subject();
            /** Emitted when the chip is selected or deselected. */
            _this.selectionChange = new i0.EventEmitter();
            /** Emitted when the chip is destroyed. */
            _this.destroyed = new i0.EventEmitter();
            /** Emitted when a chip is to be removed. */
            _this.removed = new i0.EventEmitter();
            _this._animationsDisabled = animationMode === 'NoopAnimations';
            _this.tabIndex = tabIndex != null ? parseInt(tabIndex, 10) || -1 : -1;
            return _this;
        }
        Object.defineProperty(NovoChipElement.prototype, "selected", {
            /** Whether the chip is selected. */
            get: function () {
                return this._selected;
            },
            set: function (value) {
                var coercedValue = coercion.coerceBooleanProperty(value);
                if (coercedValue !== this._selected) {
                    this._selected = coercedValue;
                    this._dispatchSelectionChange();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipElement.prototype, "value", {
            /** The value of the chip. Defaults to the content inside `<novo-chip>` tags. */
            get: function () {
                return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipElement.prototype, "selectable", {
            /**
             * Whether or not the chip is selectable. When a chip is not selectable,
             * changes to its selected state are always ignored. By default a chip is
             * selectable, and it becomes non-selectable if its parent chip list is
             * not selectable.
             */
            get: function () {
                return this._selectable && this._chipListSelectable;
            },
            set: function (value) {
                this._selectable = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipElement.prototype, "disabled", {
            /** Whether the chip is disabled. */
            get: function () {
                return this._chipListDisabled || this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipElement.prototype, "removable", {
            /**
             * Determines whether or not the chip displays the remove styling and emits (removed) events.
             */
            get: function () {
                return this._removable;
            },
            set: function (value) {
                this._removable = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipElement.prototype, "ariaSelected", {
            /** The ARIA selected applied to the chip. */
            get: function () {
                // Remove the `aria-selected` when the chip is deselected in single-selection mode, because
                // it adds noise to NVDA users where "not selected" will be read out for each chip.
                return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;
            },
            enumerable: false,
            configurable: true
        });
        NovoChipElement.prototype.ngOnDestroy = function () {
            this.destroyed.emit({ chip: this });
        };
        /** Selects the chip. */
        NovoChipElement.prototype.select = function () {
            if (!this._selected) {
                this._selected = true;
                this._dispatchSelectionChange();
                this._changeDetectorRef.markForCheck();
            }
        };
        /** Deselects the chip. */
        NovoChipElement.prototype.deselect = function () {
            if (this._selected) {
                this._selected = false;
                this._dispatchSelectionChange();
                this._changeDetectorRef.markForCheck();
            }
        };
        /** Select this chip and emit selected event */
        NovoChipElement.prototype.selectViaInteraction = function () {
            if (!this._selected) {
                this._selected = true;
                this._dispatchSelectionChange(true);
                this._changeDetectorRef.markForCheck();
            }
        };
        /** Toggles the current selected state of this chip. */
        NovoChipElement.prototype.toggleSelected = function (isUserInput) {
            if (isUserInput === void 0) { isUserInput = false; }
            this._selected = !this.selected;
            this._dispatchSelectionChange(isUserInput);
            this._changeDetectorRef.markForCheck();
            return this.selected;
        };
        /** Allows for programmatic focusing of the chip. */
        NovoChipElement.prototype.focus = function () {
            if (!this._hasFocus) {
                this._elementRef.nativeElement.focus();
                this._onFocus.next({ chip: this });
            }
            this._hasFocus = true;
        };
        /**
         * Allows for programmatic removal of the chip. Called by the NovoChipList when the DELETE or
         * BACKSPACE keys are pressed.
         *
         * Informs any listeners of the removal request. Does not remove the chip from the DOM.
         */
        NovoChipElement.prototype.remove = function () {
            if (this.removable) {
                this.removed.emit({ chip: this });
            }
        };
        /** Handles click events on the chip. */
        NovoChipElement.prototype._handleClick = function (event) {
            if (this.disabled) {
                event.preventDefault();
            }
            else {
                event.stopPropagation();
            }
            this.toggleSelected(true);
        };
        /** Handle custom key presses. */
        NovoChipElement.prototype._handleKeydown = function (event) {
            if (this.disabled) {
                return;
            }
            switch (event.key) {
                case "Delete" /* Delete */:
                case "Backspace" /* Backspace */:
                    // If we are removable, remove the focused chip
                    this.remove();
                    // Always prevent so page navigation does not occur
                    event.preventDefault();
                    break;
                case " " /* Space */:
                    // If we are selectable, toggle the focused chip
                    if (this.selectable) {
                        this.toggleSelected(true);
                    }
                    // Always prevent space from scrolling the page since the list has focus
                    event.preventDefault();
                    break;
            }
        };
        NovoChipElement.prototype._blur = function () {
            var _this = this;
            // When animations are enabled, Angular may end up removing the chip from the DOM a little
            // earlier than usual, causing it to be blurred and throwing off the logic in the chip list
            // that moves focus not the next item. To work around the issue, we defer marking the chip
            // as not focused until the next time the zone stabilizes.
            this._ngZone.onStable.pipe(operators.take(1)).subscribe(function () {
                _this._ngZone.run(function () {
                    _this._hasFocus = false;
                    _this._onBlur.next({ chip: _this });
                });
            });
        };
        NovoChipElement.prototype._dispatchSelectionChange = function (isUserInput) {
            if (isUserInput === void 0) { isUserInput = false; }
            this.selectionChange.emit({
                source: this,
                isUserInput: isUserInput,
                selected: this._selected,
            });
        };
        return NovoChipElement;
    }(NovoChipMixinBase));
    NovoChipElement.decorators = [
        { type: i0.Component, args: [{
                    selector: "novo-chip, [novo-chip]",
                    template: "<ng-content></ng-content>",
                    encapsulation: i0.ViewEncapsulation.None,
                    inputs: ['color', 'tabIndex', 'size'],
                    providers: [{ provide: REMOVABLE_REF, useExisting: NovoChipElement }],
                    host: {
                        class: 'novo-chip novo-focus-indicator',
                        role: 'option',
                        '[class.novo-chip-selectable]': 'selectable',
                        '[class.novo-chip-selected]': 'selected',
                        '[class.novo-chip-with-avatar]': 'avatar',
                        '[class.novo-chip-with-trailing-icon]': 'removeIcon',
                        '[class.novo-chip-disabled]': 'disabled',
                        '[class._novo-animation-noopable]': '_animationsDisabled',
                        '[attr.tabindex]': 'disabled ? null : tabIndex',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-selected]': 'ariaSelected',
                        '(click)': '_handleClick($event)',
                        // '(mouseenter)': '_handleActivate($event)',
                        // '(mouseleave)': '_handleDeactivate($event)',
                        '(keydown)': '_handleKeydown($event)',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                    },
                    styles: [".novo-chip{-moz-appearance:none;-webkit-appearance:none;-webkit-tap-highlight-color:transparent;align-items:center;background:var(--background-main);border:none;border:1px solid transparent;border-radius:.4rem;box-sizing:border-box;color:inherit;cursor:default;display:inline;display:inline-flex;font-size:var(--font-size-text);font-weight:400;gap:1rem;height:1px;min-height:2.4rem;padding:0 1rem;position:relative;transition:.2s ease-out;transition:all .2s ease-in-out;transition-property:color,opacity;vertical-align:middle}.novo-chip.text-nowrap{white-space:nowrap}.novo-chip.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.novo-chip.text-size-default{font-size:inherit}.novo-chip.text-size-body{font-size:1.3rem}.novo-chip.text-size-xs{font-size:1rem}.novo-chip.text-size-sm{font-size:1.2rem}.novo-chip.text-size-md{font-size:1.3rem}.novo-chip.text-size-lg{font-size:1.6rem}.novo-chip.text-size-xl{font-size:2rem}.novo-chip.text-size-2xl{font-size:2.6rem}.novo-chip.text-size-3xl{font-size:3.2rem}.novo-chip.text-size-smaller{font-size:.8em}.novo-chip.text-size-larger{font-size:1.2em}.novo-chip.text-color-black{color:#000}.novo-chip.text-color-white{color:#fff}.novo-chip.text-color-gray,.novo-chip.text-color-grey{color:#9e9e9e}.novo-chip.text-color-bright,.novo-chip.text-color-offWhite{color:#f7f7f7}.novo-chip.text-color-light{color:#dbdbdb}.novo-chip.text-color-neutral{color:#4f5361}.novo-chip.text-color-dark{color:#3d464d}.novo-chip.text-color-orange{color:#ff6900}.novo-chip.text-color-navigation{color:#202945}.novo-chip.text-color-skyBlue{color:#009bdf}.novo-chip.text-color-steel{color:#5b6770}.novo-chip.text-color-metal{color:#637893}.novo-chip.text-color-sand{color:#f4f4f4}.novo-chip.text-color-silver{color:#e2e2e2}.novo-chip.text-color-stone{color:#bebebe}.novo-chip.text-color-ash{color:#a0a0a0}.novo-chip.text-color-slate{color:#707070}.novo-chip.text-color-onyx{color:#526980}.novo-chip.text-color-charcoal{color:#282828}.novo-chip.text-color-moonlight{color:#1a242f}.novo-chip.text-color-midnight{color:#202945}.novo-chip.text-color-darkness{color:#161f27}.novo-chip.text-color-navy{color:#0d2d42}.novo-chip.text-color-aqua{color:#3bafda}.novo-chip.text-color-ocean{color:#4a89dc}.novo-chip.text-color-mint{color:#37bc9b}.novo-chip.text-color-grass{color:#8cc152}.novo-chip.text-color-sunflower{color:#f6b042}.novo-chip.text-color-bittersweet{color:#eb6845}.novo-chip.text-color-grapefruit{color:#da4453}.novo-chip.text-color-carnation{color:#d770ad}.novo-chip.text-color-lavender{color:#967adc}.novo-chip.text-color-mountain{color:#9678b6}.novo-chip.text-color-info,.novo-chip.text-color-positive{color:#4a89dc}.novo-chip.text-color-success{color:#8cc152}.novo-chip.text-color-danger,.novo-chip.text-color-error,.novo-chip.text-color-negative{color:#da4453}.novo-chip.text-color-warning{color:#f6b042}.novo-chip.text-color-empty{color:#cccdcc}.novo-chip.text-color-disabled{color:#bebebe}.novo-chip.text-color-background{color:#f7f7f7}.novo-chip.text-color-backgroundDark{color:#e2e2e2}.novo-chip.text-color-presentation{color:#5b6770}.novo-chip.text-color-bullhorn{color:#ff6900}.novo-chip.text-color-pulse{color:#3bafda}.novo-chip.text-color-company{color:#39d}.novo-chip.text-color-candidate{color:#4b7}.novo-chip.text-color-lead{color:#a69}.novo-chip.text-color-clientcontact,.novo-chip.text-color-contact{color:#fa4}.novo-chip.text-color-opportunity{color:#625}.novo-chip.text-color-job,.novo-chip.text-color-joborder{color:#b56}.novo-chip.text-color-submission{color:#a9adbb}.novo-chip.text-color-sendout{color:#747884}.novo-chip.text-color-placement{color:#0b344f}.novo-chip.text-color-note{color:#747884}.novo-chip.text-color-contract{color:#454ea0}.novo-chip.text-color-billableCharge,.novo-chip.text-color-corporateUser,.novo-chip.text-color-credential,.novo-chip.text-color-distributionList,.novo-chip.text-color-earnCode,.novo-chip.text-color-invoiceStatement,.novo-chip.text-color-jobCode,.novo-chip.text-color-payableCharge,.novo-chip.text-color-person,.novo-chip.text-color-user{color:#696d79}.novo-chip.margin-before{margin-top:.4rem}.novo-chip.margin-after{margin-bottom:.8rem}.novo-chip.text-length-small{max-width:40ch}.novo-chip.text-length-medium{max-width:55ch}.novo-chip.text-length-large{max-width:70ch}.novo-chip.text-weight-hairline{font-weight:100}.novo-chip.text-weight-thin{font-weight:200}.novo-chip.text-weight-light{font-weight:300}.novo-chip.text-weight-normal{font-weight:400}.novo-chip.text-weight-medium{font-weight:500}.novo-chip.text-weight-semibold{font-weight:600}.novo-chip.text-weight-bold{font-weight:700}.novo-chip.text-weight-extrabold{font-weight:800}.novo-chip.text-weight-heavy{font-weight:900}.novo-chip.text-weight-lighter{font-weight:lighter}.novo-chip.text-weight-bolder{font-weight:bolder}.novo-chip.novo-chip-selectable{color:var(--selection)}.novo-chip.novo-chip-selectable:after{background-color:#000;border-radius:inherit;bottom:0;content:\"\";left:0;opacity:0;pointer-events:none;position:absolute;right:0;top:0;transition:opacity .2s ease-in-out}.novo-chip.novo-chip-selectable:focus{border:1px solid var(--selection);outline:none}.novo-chip.novo-chip-selectable:focus:after{opacity:.16}.novo-chip.novo-chip-selectable:hover{border:1px solid var(--selection)}.novo-chip.novo-chip-disabled{opacity:.4;pointer-events:none}.novo-chip.novo-chip-disabled:after{opacity:0}.novo-chip.novo-chip-disabled .novo-chip-remove,.novo-chip.novo-chip-disabled .novo-chip-trailing-icon{cursor:default}.novo-chip .novo-chip-avatar::not(novo-icon){height:24px;width:24px}.novo-chip .novo-chip-avatar{-o-object-fit:cover;align-items:center;border-radius:50%;display:flex;justify-content:center;margin-left:0;margin-right:0;object-fit:cover;overflow:hidden}.novo-chip .novo-chip-remove,.novo-chip .novo-chip-trailing-icon{cursor:pointer;height:18px;margin-left:0;margin-right:0;width:18px}.novo-chip .novo-chip-remove{color:#dbdbdb}.novo-chip:not(.novo-chip-disabled) .novo-chip-remove:hover{color:#8f8f8f}.novo-chip.novo-size-xs{border-radius:.4rem;font-size:.8rem;gap:.25rem;min-height:1.6rem;padding:0 .25rem}.novo-chip.novo-size-xs.novo-chip-with-avatar{padding-left:.125rem}.novo-chip.novo-size-xs.novo-chip-with-trailing-icon{padding-right:.125rem}.novo-chip.novo-size-xs .novo-text{font-size:inherit}.novo-chip.novo-size-sm{border-radius:.4rem;font-size:1rem;gap:.5rem;min-height:2rem;padding:0 .5rem}.novo-chip.novo-size-sm.novo-chip-with-avatar{padding-left:.25rem}.novo-chip.novo-size-sm.novo-chip-with-trailing-icon{padding-right:.25rem}.novo-chip.novo-size-sm .novo-text{font-size:inherit}.novo-chip.novo-size-md{border-radius:.4rem;font-size:1.2rem;gap:1rem;min-height:2.8rem;padding:0 1rem}.novo-chip.novo-size-md.novo-chip-with-avatar{padding-left:.5rem}.novo-chip.novo-size-md.novo-chip-with-trailing-icon{padding-right:.5rem}.novo-chip.novo-size-md .novo-text{font-size:inherit}.novo-chip.novo-size-lg{border-radius:.4rem;font-size:1.4rem;gap:1.25rem;min-height:3.2rem;padding:0 1.25rem}.novo-chip.novo-size-lg.novo-chip-with-avatar{padding-left:.625rem}.novo-chip.novo-size-lg.novo-chip-with-trailing-icon{padding-right:.625rem}.novo-chip.novo-size-lg .novo-text{font-size:inherit}.novo-chip.novo-size-xl{border-radius:.4rem;font-size:1.8rem;gap:1.5rem;min-height:3.6rem;padding:0 1.5rem}.novo-chip.novo-size-xl.novo-chip-with-avatar{padding-left:.75rem}.novo-chip.novo-size-xl.novo-chip-with-trailing-icon{padding-right:.75rem}.novo-chip.novo-size-xl .novo-text{font-size:inherit}.novo-chip.novo-color-black{background:#000;color:#fff}.novo-chip.novo-color-black>*{color:inherit}.novo-chip.novo-accent-black{border:1px solid #000;color:#000}.novo-chip.novo-color-white{background:#fff;color:#3d464d}.novo-chip.novo-color-white>*{color:inherit}.novo-chip.novo-accent-white{border:1px solid #fff;color:#fff}.novo-chip.novo-color-gray{background:#9e9e9e;color:#3d464d}.novo-chip.novo-color-gray>*{color:inherit}.novo-chip.novo-accent-gray{border:1px solid #9e9e9e;color:#9e9e9e}.novo-chip.novo-color-grey{background:#9e9e9e;color:#3d464d}.novo-chip.novo-color-grey>*{color:inherit}.novo-chip.novo-accent-grey{border:1px solid #9e9e9e;color:#9e9e9e}.novo-chip.novo-color-offWhite{background:#f7f7f7;color:#3d464d}.novo-chip.novo-color-offWhite>*{color:inherit}.novo-chip.novo-accent-offWhite{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-bright{background:#f7f7f7;color:#3d464d}.novo-chip.novo-color-bright>*{color:inherit}.novo-chip.novo-accent-bright{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-light{background:#dbdbdb;color:#3d464d}.novo-chip.novo-color-light>*{color:inherit}.novo-chip.novo-accent-light{border:1px solid #dbdbdb;color:#dbdbdb}.novo-chip.novo-color-neutral{background:#4f5361;color:#fff}.novo-chip.novo-color-neutral>*{color:inherit}.novo-chip.novo-accent-neutral{border:1px solid #4f5361;color:#4f5361}.novo-chip.novo-color-dark{background:#3d464d;color:#fff}.novo-chip.novo-color-dark>*{color:inherit}.novo-chip.novo-accent-dark{border:1px solid #3d464d;color:#3d464d}.novo-chip.novo-color-orange{background:#ff6900;color:#3d464d}.novo-chip.novo-color-orange>*{color:inherit}.novo-chip.novo-accent-orange{border:1px solid #ff6900;color:#ff6900}.novo-chip.novo-color-navigation{background:#202945;color:#fff}.novo-chip.novo-color-navigation>*{color:inherit}.novo-chip.novo-accent-navigation{border:1px solid #202945;color:#202945}.novo-chip.novo-color-skyBlue{background:#009bdf;color:#fff}.novo-chip.novo-color-skyBlue>*{color:inherit}.novo-chip.novo-accent-skyBlue{border:1px solid #009bdf;color:#009bdf}.novo-chip.novo-color-steel{background:#5b6770;color:#fff}.novo-chip.novo-color-steel>*{color:inherit}.novo-chip.novo-accent-steel{border:1px solid #5b6770;color:#5b6770}.novo-chip.novo-color-metal{background:#637893;color:#fff}.novo-chip.novo-color-metal>*{color:inherit}.novo-chip.novo-accent-metal{border:1px solid #637893;color:#637893}.novo-chip.novo-color-sand{background:#f4f4f4;color:#3d464d}.novo-chip.novo-color-sand>*{color:inherit}.novo-chip.novo-accent-sand{border:1px solid #f4f4f4;color:#f4f4f4}.novo-chip.novo-color-silver{background:#e2e2e2;color:#3d464d}.novo-chip.novo-color-silver>*{color:inherit}.novo-chip.novo-accent-silver{border:1px solid #e2e2e2;color:#e2e2e2}.novo-chip.novo-color-stone{background:#bebebe;color:#3d464d}.novo-chip.novo-color-stone>*{color:inherit}.novo-chip.novo-accent-stone{border:1px solid #bebebe;color:#bebebe}.novo-chip.novo-color-ash{background:#a0a0a0;color:#3d464d}.novo-chip.novo-color-ash>*{color:inherit}.novo-chip.novo-accent-ash{border:1px solid #a0a0a0;color:#a0a0a0}.novo-chip.novo-color-slate{background:#707070;color:#fff}.novo-chip.novo-color-slate>*{color:inherit}.novo-chip.novo-accent-slate{border:1px solid #707070;color:#707070}.novo-chip.novo-color-onyx{background:#526980;color:#fff}.novo-chip.novo-color-onyx>*{color:inherit}.novo-chip.novo-accent-onyx{border:1px solid #526980;color:#526980}.novo-chip.novo-color-charcoal{background:#282828;color:#fff}.novo-chip.novo-color-charcoal>*{color:inherit}.novo-chip.novo-accent-charcoal{border:1px solid #282828;color:#282828}.novo-chip.novo-color-moonlight{background:#1a242f;color:#fff}.novo-chip.novo-color-moonlight>*{color:inherit}.novo-chip.novo-accent-moonlight{border:1px solid #1a242f;color:#1a242f}.novo-chip.novo-color-midnight{background:#202945;color:#fff}.novo-chip.novo-color-midnight>*{color:inherit}.novo-chip.novo-accent-midnight{border:1px solid #202945;color:#202945}.novo-chip.novo-color-darkness{background:#161f27;color:#fff}.novo-chip.novo-color-darkness>*{color:inherit}.novo-chip.novo-accent-darkness{border:1px solid #161f27;color:#161f27}.novo-chip.novo-color-navy{background:#0d2d42;color:#fff}.novo-chip.novo-color-navy>*{color:inherit}.novo-chip.novo-accent-navy{border:1px solid #0d2d42;color:#0d2d42}.novo-chip.novo-color-aqua{background:#3bafda;color:#3d464d}.novo-chip.novo-color-aqua>*{color:inherit}.novo-chip.novo-accent-aqua{border:1px solid #3bafda;color:#3bafda}.novo-chip.novo-color-ocean{background:#4a89dc;color:#fff}.novo-chip.novo-color-ocean>*{color:inherit}.novo-chip.novo-accent-ocean{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-mint{background:#37bc9b;color:#3d464d}.novo-chip.novo-color-mint>*{color:inherit}.novo-chip.novo-accent-mint{border:1px solid #37bc9b;color:#37bc9b}.novo-chip.novo-color-grass{background:#8cc152;color:#fff}.novo-chip.novo-color-grass>*{color:inherit}.novo-chip.novo-accent-grass{border:1px solid #8cc152;color:#8cc152}.novo-chip.novo-color-sunflower{background:#f6b042;color:#fff}.novo-chip.novo-color-sunflower>*{color:inherit}.novo-chip.novo-accent-sunflower{border:1px solid #f6b042;color:#f6b042}.novo-chip.novo-color-bittersweet{background:#eb6845;color:#fff}.novo-chip.novo-color-bittersweet>*{color:inherit}.novo-chip.novo-accent-bittersweet{border:1px solid #eb6845;color:#eb6845}.novo-chip.novo-color-grapefruit{background:#da4453;color:#fff}.novo-chip.novo-color-grapefruit>*{color:inherit}.novo-chip.novo-accent-grapefruit{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-carnation{background:#d770ad;color:#fff}.novo-chip.novo-color-carnation>*{color:inherit}.novo-chip.novo-accent-carnation{border:1px solid #d770ad;color:#d770ad}.novo-chip.novo-color-lavender{background:#967adc;color:#fff}.novo-chip.novo-color-lavender>*{color:inherit}.novo-chip.novo-accent-lavender{border:1px solid #967adc;color:#967adc}.novo-chip.novo-color-mountain{background:#9678b6;color:#fff}.novo-chip.novo-color-mountain>*{color:inherit}.novo-chip.novo-accent-mountain{border:1px solid #9678b6;color:#9678b6}.novo-chip.novo-color-info{background:#4a89dc;color:#fff}.novo-chip.novo-color-info>*{color:inherit}.novo-chip.novo-accent-info{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-positive{background:#4a89dc;color:#fff}.novo-chip.novo-color-positive>*{color:inherit}.novo-chip.novo-accent-positive{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-success{background:#8cc152;color:#fff}.novo-chip.novo-color-success>*{color:inherit}.novo-chip.novo-accent-success{border:1px solid #8cc152;color:#8cc152}.novo-chip.novo-color-negative{background:#da4453;color:#fff}.novo-chip.novo-color-negative>*{color:inherit}.novo-chip.novo-accent-negative{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-danger{background:#da4453;color:#fff}.novo-chip.novo-color-danger>*{color:inherit}.novo-chip.novo-accent-danger{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-error{background:#da4453;color:#fff}.novo-chip.novo-color-error>*{color:inherit}.novo-chip.novo-accent-error{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-warning{background:#f6b042;color:#fff}.novo-chip.novo-color-warning>*{color:inherit}.novo-chip.novo-accent-warning{border:1px solid #f6b042;color:#f6b042}.novo-chip.novo-color-empty{background:#cccdcc;color:#3d464d}.novo-chip.novo-color-empty>*{color:inherit}.novo-chip.novo-accent-empty{border:1px solid #cccdcc;color:#cccdcc}.novo-chip.novo-color-disabled{background:#bebebe;color:#3d464d}.novo-chip.novo-color-disabled>*{color:inherit}.novo-chip.novo-accent-disabled{border:1px solid #bebebe;color:#bebebe}.novo-chip.novo-color-background{background:#f7f7f7;color:#3d464d}.novo-chip.novo-color-background>*{color:inherit}.novo-chip.novo-accent-background{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-backgroundDark{background:#e2e2e2;color:#3d464d}.novo-chip.novo-color-backgroundDark>*{color:inherit}.novo-chip.novo-accent-backgroundDark{border:1px solid #e2e2e2;color:#e2e2e2}.novo-chip.novo-color-presentation{background:#5b6770;color:#fff}.novo-chip.novo-color-presentation>*{color:inherit}.novo-chip.novo-accent-presentation{border:1px solid #5b6770;color:#5b6770}.novo-chip.novo-color-bullhorn{background:#ff6900;color:#3d464d}.novo-chip.novo-color-bullhorn>*{color:inherit}.novo-chip.novo-accent-bullhorn{border:1px solid #ff6900;color:#ff6900}.novo-chip.novo-color-pulse{background:#3bafda;color:#3d464d}.novo-chip.novo-color-pulse>*{color:inherit}.novo-chip.novo-accent-pulse{border:1px solid #3bafda;color:#3bafda}.novo-chip.novo-color-company{background:#39d;color:#fff}.novo-chip.novo-color-company>*{color:inherit}.novo-chip.novo-accent-company{border:1px solid #39d;color:#39d}.novo-chip.novo-color-candidate{background:#4b7;color:#fff}.novo-chip.novo-color-candidate>*{color:inherit}.novo-chip.novo-accent-candidate{border:1px solid #4b7;color:#4b7}.novo-chip.novo-color-lead{background:#a69;color:#fff}.novo-chip.novo-color-lead>*{color:inherit}.novo-chip.novo-accent-lead{border:1px solid #a69;color:#a69}.novo-chip.novo-color-contact{background:#fa4;color:#fff}.novo-chip.novo-color-contact>*{color:inherit}.novo-chip.novo-accent-contact{border:1px solid #fa4;color:#fa4}.novo-chip.novo-color-clientcontact{background:#fa4;color:#fff}.novo-chip.novo-color-clientcontact>*{color:inherit}.novo-chip.novo-accent-clientcontact{border:1px solid #fa4;color:#fa4}.novo-chip.novo-color-opportunity{background:#625;color:#fff}.novo-chip.novo-color-opportunity>*{color:inherit}.novo-chip.novo-accent-opportunity{border:1px solid #625;color:#625}.novo-chip.novo-color-job{background:#b56;color:#fff}.novo-chip.novo-color-job>*{color:inherit}.novo-chip.novo-accent-job{border:1px solid #b56;color:#b56}.novo-chip.novo-color-joborder{background:#b56;color:#fff}.novo-chip.novo-color-joborder>*{color:inherit}.novo-chip.novo-accent-joborder{border:1px solid #b56;color:#b56}.novo-chip.novo-color-submission{background:#a9adbb;color:#3d464d}.novo-chip.novo-color-submission>*{color:inherit}.novo-chip.novo-accent-submission{border:1px solid #a9adbb;color:#a9adbb}.novo-chip.novo-color-sendout{background:#747884;color:#fff}.novo-chip.novo-color-sendout>*{color:inherit}.novo-chip.novo-accent-sendout{border:1px solid #747884;color:#747884}.novo-chip.novo-color-placement{background:#0b344f;color:#fff}.novo-chip.novo-color-placement>*{color:inherit}.novo-chip.novo-accent-placement{border:1px solid #0b344f;color:#0b344f}.novo-chip.novo-color-note{background:#747884;color:#fff}.novo-chip.novo-color-note>*{color:inherit}.novo-chip.novo-accent-note{border:1px solid #747884;color:#747884}.novo-chip.novo-color-contract{background:#454ea0;color:#fff}.novo-chip.novo-color-contract>*{color:inherit}.novo-chip.novo-accent-contract{border:1px solid #454ea0;color:#454ea0}.novo-chip.novo-color-jobCode{background:#696d79;color:#fff}.novo-chip.novo-color-jobCode>*{color:inherit}.novo-chip.novo-accent-jobCode{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-earnCode{background:#696d79;color:#fff}.novo-chip.novo-color-earnCode>*{color:inherit}.novo-chip.novo-accent-earnCode{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-invoiceStatement{background:#696d79;color:#fff}.novo-chip.novo-color-invoiceStatement>*{color:inherit}.novo-chip.novo-accent-invoiceStatement{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-billableCharge{background:#696d79;color:#fff}.novo-chip.novo-color-billableCharge>*{color:inherit}.novo-chip.novo-accent-billableCharge{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-payableCharge{background:#696d79;color:#fff}.novo-chip.novo-color-payableCharge>*{color:inherit}.novo-chip.novo-accent-payableCharge{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-user{background:#696d79;color:#fff}.novo-chip.novo-color-user>*{color:inherit}.novo-chip.novo-accent-user{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-corporateUser{background:#696d79;color:#fff}.novo-chip.novo-color-corporateUser>*{color:inherit}.novo-chip.novo-accent-corporateUser{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-distributionList{background:#696d79;color:#fff}.novo-chip.novo-color-distributionList>*{color:inherit}.novo-chip.novo-accent-distributionList{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-credential{background:#696d79;color:#fff}.novo-chip.novo-color-credential>*{color:inherit}.novo-chip.novo-accent-credential{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-person{background:#696d79;color:#fff}.novo-chip.novo-color-person>*{color:inherit}.novo-chip.novo-accent-person{border:1px solid #696d79;color:#696d79}"]
                },] }
    ];
    NovoChipElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.NgZone },
        { type: platform.Platform },
        { type: i0.ChangeDetectorRef, decorators: [{ type: i0.Optional }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [common.DOCUMENT,] }] },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] },
        { type: String, decorators: [{ type: i0.Attribute, args: ['tabindex',] }] }
    ]; };
    NovoChipElement.propDecorators = {
        avatar: [{ type: i0.ContentChild, args: [NovoChipAvatar,] }],
        removeIcon: [{ type: i0.ContentChild, args: [NovoChipRemove,] }],
        type: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        selectable: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        removable: [{ type: i0.Input }],
        selectionChange: [{ type: i0.Output }],
        destroyed: [{ type: i0.Output }],
        removed: [{ type: i0.Output }]
    };

    /** Injection token to be used to override the default options for the chips module. */
    var NOVO_CHIPS_DEFAULT_OPTIONS = new i0.InjectionToken('novo-chips-default-options');

    // NG2
    var NovoErrorElement = /** @class */ (function () {
        function NovoErrorElement(sanitizer) {
            this.sanitizer = sanitizer;
        }
        NovoErrorElement.prototype.ngOnInit = function () { };
        return NovoErrorElement;
    }());
    NovoErrorElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-error',
                    template: "<ng-content></ng-content>",
                    styles: [":host{color:#da4453;display:flex;flex:1;font-size:.8em;padding-bottom:5px}"]
                },] }
    ];
    NovoErrorElement.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };

    /** An interface which allows a control to work inside of a `NovoField`. */
    var NovoFieldControl = /** @class */ (function () {
        function NovoFieldControl() {
        }
        return NovoFieldControl;
    }());
    NovoFieldControl.decorators = [
        { type: i0.Directive }
    ];

    // NG2
    var nextUniqueId = 0;
    var NovoHintElement = /** @class */ (function () {
        function NovoHintElement() {
            /** Whether to align the hint label at the start or end of the line. */
            this.align = 'start';
            /** Unique ID for the hint. Used for the aria-describedby on the form field control. */
            this.id = "novo-hint-" + nextUniqueId++;
        }
        NovoHintElement.prototype.ngOnInit = function () { };
        return NovoHintElement;
    }());
    NovoHintElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-hint',
                    template: "<ng-content></ng-content>",
                    host: {
                        class: 'novo-hint',
                        '[class.novo-field-hint-end]': 'align === "end"',
                        '[attr.id]': 'id',
                        // Remove align attribute to prevent it from interfering with layout.
                        '[attr.align]': 'null',
                    },
                    styles: [":host{color:var(--text-muted);color:#9e9e9e;display:flex;flex:1 0 auto;font-size:var(--font-size-caption);font-weight:400;line-height:1.375;padding-bottom:.4rem;padding-top:.4rem;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle;width:-webkit-max-content;width:-moz-max-content;width:max-content}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray,:host.text-color-grey{color:#9e9e9e}:host.text-color-bright,:host.text-color-offWhite{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info,:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-danger,:host.text-color-error,:host.text-color-negative{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-clientcontact,:host.text-color-contact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job,:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-billableCharge,:host.text-color-corporateUser,:host.text-color-credential,:host.text-color-distributionList,:host.text-color-earnCode,:host.text-color-invoiceStatement,:host.text-color-jobCode,:host.text-color-payableCharge,:host.text-color-person,:host.text-color-user{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}:host.novo-field-hint-end{align-content:end;justify-content:flex-end;order:1;text-align:right}"]
                },] }
    ];
    NovoHintElement.propDecorators = {
        align: [{ type: i0.Input }],
        id: [{ type: i0.Input }]
    };

    // NG2
    var NovoFieldPrefixDirective = /** @class */ (function () {
        function NovoFieldPrefixDirective() {
        }
        return NovoFieldPrefixDirective;
    }());
    NovoFieldPrefixDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[novoPrefix]' },] }
    ];
    var NovoFieldSuffixDirective = /** @class */ (function () {
        function NovoFieldSuffixDirective() {
        }
        return NovoFieldSuffixDirective;
    }());
    NovoFieldSuffixDirective.decorators = [
        { type: i0.Directive, args: [{ selector: '[novoSuffix]' },] }
    ];
    var NOVO_INPUT_UNDERLINED_TYPES = [
        'text',
        'date',
        'time',
        'datetime-local',
        'password',
        'email',
        'tel',
        'select',
        'textarea',
        'number',
        'novo-chip-list',
        'chip-list',
    ];
    var NOVO_FORM_FIELD = new i0.InjectionToken('NovoFormField');
    var NovoFieldElement = /** @class */ (function () {
        function NovoFieldElement(_elementRef, _changeDetectorRef) {
            this._elementRef = _elementRef;
            this._changeDetectorRef = _changeDetectorRef;
            this._labelClicks = rxjs.Subscription.EMPTY;
            this.layout = 'vertical';
            this.appearance = 'standard';
            this._destroyed = new rxjs.Subject();
        }
        /**
         * Gets an ElementRef for the element that a overlay attached to the form-field should be
         * positioned relative to.
         */
        NovoFieldElement.prototype.getConnectedOverlayOrigin = function () {
            return this._inputContainerRef || this._elementRef;
        };
        NovoFieldElement.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._validateControlChild();
            var control = this._control;
            if (control.controlType) {
                this._elementRef.nativeElement.classList.add("novo-field-type-" + control.controlType);
            }
            // Subscribe to changes in the child control state in order to update the form field UI.
            // tslint:disable-next-line:deprecation
            control.stateChanges.pipe(operators.startWith(null)).subscribe(function () {
                _this._changeDetectorRef.markForCheck();
            });
            // Run change detection if the value changes.
            if (control.ngControl && control.ngControl.valueChanges) {
                control.ngControl.valueChanges.pipe(operators.takeUntil(this._destroyed)).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
            }
            if (this._hasLabel()) {
                this._labelClicks = rxjs.fromEvent(this._labelElement.nativeElement, 'click').subscribe(function () { return _this._control.focus(); });
            }
        };
        NovoFieldElement.prototype.ngOnDestroy = function () {
            this._destroyed.next();
            this._destroyed.complete();
            this._labelClicks.unsubscribe();
        };
        /** Throws an error if the form field's control is missing. */
        NovoFieldElement.prototype._validateControlChild = function () {
            if (!this._control) {
                throw new Error('Missing Novo Control');
            }
        };
        NovoFieldElement.prototype._isUnderlinedInput = function () {
            return NOVO_INPUT_UNDERLINED_TYPES.includes(this._control.controlType);
        };
        /** Determines whether to display hints or errors. */
        NovoFieldElement.prototype._getDisplayedMessages = function () {
            return this._errorElements && this._errorElements.length > 0 && this._control.errorState ? 'error' : 'hint';
        };
        /** Determines whether a class from the NgControl should be forwarded to the host element. */
        NovoFieldElement.prototype._shouldForward = function (prop) {
            var ngControl = this._control ? this._control.ngControl : null;
            return ngControl && ngControl[prop];
        };
        NovoFieldElement.prototype._hasLabel = function () {
            return !!this._labelElement;
        };
        return NovoFieldElement;
    }());
    NovoFieldElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-field',
                    template: "<div class=\"novo-field-label\">\n  <ng-content select=\"novo-label\"></ng-content>\n</div>\n<div class=\"novo-field-input\" [style.width]=\"width\" #inputContainer>\n  <div class=\"novo-field-prefix\">\n    <ng-content select=\"[novoPrefix]\"></ng-content>\n  </div>\n  <div class=\"novo-field-infix\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"novo-field-suffix\">\n    <ng-content select=\"[novoSuffix]\"></ng-content>\n  </div>\n</div>\n<div class=\"novo-field-messages\" [ngSwitch]=\"_getDisplayedMessages()\">\n  <div class=\"novo-field-hint-wrapper\" *ngSwitchCase=\"'error'\">\n    <ng-content select=\"novo-error\"></ng-content>\n  </div>\n  <div class=\"novo-field-hint-wrapper\" *ngSwitchCase=\"'hint'\">\n    <ng-content select=\"novo-hint\"></ng-content>\n    <ng-content select=\"novo-hint[align=end]\"></ng-content>\n  </div>\n</div>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    host: {
                        class: 'novo-field',
                        '[class.novo-field-layout-horizontal]': 'layout=="horizontal"',
                        '[class.novo-field-layout-vertical]': 'layout=="vertical"',
                        '[class.novo-field-appearance-standard]': 'appearance == "standard"',
                        '[class.novo-field-appearance-fill]': 'appearance == "fill"',
                        '[class.novo-field-appearance-outline]': 'appearance == "outline"',
                        '[class.novo-field-appearance-list]': 'appearance == "list"',
                        '[class.novo-field-appearance-underlined]': '_isUnderlinedInput()',
                        '[class.novo-field-invalid]': '_control.errorState',
                        '[class.novo-field-has-label]': '_hasLabel()',
                        '[class.novo-field-no-label]': '!_hasLabel()',
                        // '[class.novo-field-hide-placeholder]': '_hideControlPlaceholder()',
                        '[class.novo-field-disabled]': '_control.disabled',
                        '[class.novo-field-autofilled]': '_control.autofilled',
                        '[class.novo-focused]': '_control.focused',
                        // '[class.novo-accent]': 'color == "accent"',
                        // '[class.novo-warn]': 'color == "warn"',
                        '[class.ng-untouched]': '_shouldForward("untouched")',
                        '[class.ng-touched]': '_shouldForward("touched")',
                        '[class.ng-pristine]': '_shouldForward("pristine")',
                        '[class.ng-dirty]': '_shouldForward("dirty")',
                        '[class.ng-valid]': '_shouldForward("valid")',
                        '[class.ng-invalid]': '_shouldForward("invalid")',
                        '[class.ng-pending]': '_shouldForward("pending")',
                    },
                    providers: [{ provide: NOVO_FORM_FIELD, useExisting: NovoFieldElement }],
                    styles: [":host{display:grid;position:relative}:host.novo-field-layout-horizontal{grid-gap:0 1rem;grid-template-areas:\"label input\" \". messages\";grid-template-columns:150px minmax(-webkit-min-content,-webkit-max-content);grid-template-columns:150px minmax(min-content,max-content)}:host.novo-field-layout-vertical{grid-template-areas:\"label\" \"input\" \"messages\";grid-template-columns:minmax(-webkit-min-content,100%);grid-template-columns:minmax(min-content,100%);grid-template-rows:repeat(3,minmax(-webkit-min-content,-webkit-max-content));grid-template-rows:repeat(3,minmax(min-content,max-content));width:-webkit-max-content;width:-moz-max-content;width:max-content}:host .novo-field-label{-ms-grid-column:1;-ms-grid-row:1;align-items:center;display:grid;grid-area:label}:host.novo-field-type-color .novo-field-input::ng-deep .novo-input-element{padding:0}:host .novo-field-input{-ms-grid-column:3;-ms-grid-row:1;display:grid;flex:1 1 100%;grid-area:input;grid-template-columns:minmax(auto,-webkit-max-content) 1fr minmax(auto,-webkit-max-content);grid-template-columns:minmax(auto,max-content) 1fr minmax(auto,max-content)}:host .novo-field-input::ng-deep .novo-input-element{background-color:transparent;background-image:none;border:none;border-bottom:none!important;box-shadow:none;color:inherit;display:inline;font-size:var(--font-size-text);font-weight:400;padding:.4rem .2rem;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}:host .novo-field-input::ng-deep .novo-input-element.text-nowrap{white-space:nowrap}:host .novo-field-input::ng-deep .novo-input-element.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host .novo-field-input::ng-deep .novo-input-element.text-size-default{font-size:inherit}:host .novo-field-input::ng-deep .novo-input-element.text-size-body{font-size:1.3rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-xs{font-size:1rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-sm{font-size:1.2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-md{font-size:1.3rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-lg{font-size:1.6rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-xl{font-size:2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-2xl{font-size:2.6rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-3xl{font-size:3.2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-smaller{font-size:.8em}:host .novo-field-input::ng-deep .novo-input-element.text-size-larger{font-size:1.2em}:host .novo-field-input::ng-deep .novo-input-element.text-color-black{color:#000}:host .novo-field-input::ng-deep .novo-input-element.text-color-white{color:#fff}:host .novo-field-input::ng-deep .novo-input-element.text-color-gray,:host .novo-field-input::ng-deep .novo-input-element.text-color-grey{color:#9e9e9e}:host .novo-field-input::ng-deep .novo-input-element.text-color-bright,:host .novo-field-input::ng-deep .novo-input-element.text-color-offWhite{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-light{color:#dbdbdb}:host .novo-field-input::ng-deep .novo-input-element.text-color-neutral{color:#4f5361}:host .novo-field-input::ng-deep .novo-input-element.text-color-dark{color:#3d464d}:host .novo-field-input::ng-deep .novo-input-element.text-color-orange{color:#ff6900}:host .novo-field-input::ng-deep .novo-input-element.text-color-navigation{color:#202945}:host .novo-field-input::ng-deep .novo-input-element.text-color-skyBlue{color:#009bdf}:host .novo-field-input::ng-deep .novo-input-element.text-color-steel{color:#5b6770}:host .novo-field-input::ng-deep .novo-input-element.text-color-metal{color:#637893}:host .novo-field-input::ng-deep .novo-input-element.text-color-sand{color:#f4f4f4}:host .novo-field-input::ng-deep .novo-input-element.text-color-silver{color:#e2e2e2}:host .novo-field-input::ng-deep .novo-input-element.text-color-stone{color:#bebebe}:host .novo-field-input::ng-deep .novo-input-element.text-color-ash{color:#a0a0a0}:host .novo-field-input::ng-deep .novo-input-element.text-color-slate{color:#707070}:host .novo-field-input::ng-deep .novo-input-element.text-color-onyx{color:#526980}:host .novo-field-input::ng-deep .novo-input-element.text-color-charcoal{color:#282828}:host .novo-field-input::ng-deep .novo-input-element.text-color-moonlight{color:#1a242f}:host .novo-field-input::ng-deep .novo-input-element.text-color-midnight{color:#202945}:host .novo-field-input::ng-deep .novo-input-element.text-color-darkness{color:#161f27}:host .novo-field-input::ng-deep .novo-input-element.text-color-navy{color:#0d2d42}:host .novo-field-input::ng-deep .novo-input-element.text-color-aqua{color:#3bafda}:host .novo-field-input::ng-deep .novo-input-element.text-color-ocean{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-mint{color:#37bc9b}:host .novo-field-input::ng-deep .novo-input-element.text-color-grass{color:#8cc152}:host .novo-field-input::ng-deep .novo-input-element.text-color-sunflower{color:#f6b042}:host .novo-field-input::ng-deep .novo-input-element.text-color-bittersweet{color:#eb6845}:host .novo-field-input::ng-deep .novo-input-element.text-color-grapefruit{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-carnation{color:#d770ad}:host .novo-field-input::ng-deep .novo-input-element.text-color-lavender{color:#967adc}:host .novo-field-input::ng-deep .novo-input-element.text-color-mountain{color:#9678b6}:host .novo-field-input::ng-deep .novo-input-element.text-color-info,:host .novo-field-input::ng-deep .novo-input-element.text-color-positive{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-success{color:#8cc152}:host .novo-field-input::ng-deep .novo-input-element.text-color-danger,:host .novo-field-input::ng-deep .novo-input-element.text-color-error,:host .novo-field-input::ng-deep .novo-input-element.text-color-negative{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-warning{color:#f6b042}:host .novo-field-input::ng-deep .novo-input-element.text-color-empty{color:#cccdcc}:host .novo-field-input::ng-deep .novo-input-element.text-color-disabled{color:#bebebe}:host .novo-field-input::ng-deep .novo-input-element.text-color-background{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-backgroundDark{color:#e2e2e2}:host .novo-field-input::ng-deep .novo-input-element.text-color-presentation{color:#5b6770}:host .novo-field-input::ng-deep .novo-input-element.text-color-bullhorn{color:#ff6900}:host .novo-field-input::ng-deep .novo-input-element.text-color-pulse{color:#3bafda}:host .novo-field-input::ng-deep .novo-input-element.text-color-company{color:#39d}:host .novo-field-input::ng-deep .novo-input-element.text-color-candidate{color:#4b7}:host .novo-field-input::ng-deep .novo-input-element.text-color-lead{color:#a69}:host .novo-field-input::ng-deep .novo-input-element.text-color-clientcontact,:host .novo-field-input::ng-deep .novo-input-element.text-color-contact{color:#fa4}:host .novo-field-input::ng-deep .novo-input-element.text-color-opportunity{color:#625}:host .novo-field-input::ng-deep .novo-input-element.text-color-job,:host .novo-field-input::ng-deep .novo-input-element.text-color-joborder{color:#b56}:host .novo-field-input::ng-deep .novo-input-element.text-color-submission{color:#a9adbb}:host .novo-field-input::ng-deep .novo-input-element.text-color-sendout{color:#747884}:host .novo-field-input::ng-deep .novo-input-element.text-color-placement{color:#0b344f}:host .novo-field-input::ng-deep .novo-input-element.text-color-note{color:#747884}:host .novo-field-input::ng-deep .novo-input-element.text-color-contract{color:#454ea0}:host .novo-field-input::ng-deep .novo-input-element.text-color-billableCharge,:host .novo-field-input::ng-deep .novo-input-element.text-color-corporateUser,:host .novo-field-input::ng-deep .novo-input-element.text-color-credential,:host .novo-field-input::ng-deep .novo-input-element.text-color-distributionList,:host .novo-field-input::ng-deep .novo-input-element.text-color-earnCode,:host .novo-field-input::ng-deep .novo-input-element.text-color-invoiceStatement,:host .novo-field-input::ng-deep .novo-input-element.text-color-jobCode,:host .novo-field-input::ng-deep .novo-input-element.text-color-payableCharge,:host .novo-field-input::ng-deep .novo-input-element.text-color-person,:host .novo-field-input::ng-deep .novo-input-element.text-color-user{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.margin-before{margin-top:.4rem}:host .novo-field-input::ng-deep .novo-input-element.margin-after{margin-bottom:.8rem}:host .novo-field-input::ng-deep .novo-input-element.text-length-small{max-width:40ch}:host .novo-field-input::ng-deep .novo-input-element.text-length-medium{max-width:55ch}:host .novo-field-input::ng-deep .novo-input-element.text-length-large{max-width:70ch}:host .novo-field-input::ng-deep .novo-input-element.text-weight-hairline{font-weight:100}:host .novo-field-input::ng-deep .novo-input-element.text-weight-thin{font-weight:200}:host .novo-field-input::ng-deep .novo-input-element.text-weight-light{font-weight:300}:host .novo-field-input::ng-deep .novo-input-element.text-weight-normal{font-weight:400}:host .novo-field-input::ng-deep .novo-input-element.text-weight-medium{font-weight:500}:host .novo-field-input::ng-deep .novo-input-element.text-weight-semibold{font-weight:600}:host .novo-field-input::ng-deep .novo-input-element.text-weight-bold{font-weight:700}:host .novo-field-input::ng-deep .novo-input-element.text-weight-extrabold{font-weight:800}:host .novo-field-input::ng-deep .novo-input-element.text-weight-heavy{font-weight:900}:host .novo-field-input::ng-deep .novo-input-element.text-weight-lighter{font-weight:lighter}:host .novo-field-input::ng-deep .novo-input-element.text-weight-bolder{font-weight:bolder}:host .novo-field-input::ng-deep .novo-input-element:focus{outline:none}:host .novo-field-input::ng-deep .novo-radio-group{padding:.5rem 0}:host .novo-field-input .novo-field-infix,:host .novo-field-input .novo-field-prefix{align-items:center;display:flex}:host .novo-field-input .novo-field-infix::ng-deep .novo-input-element,:host .novo-field-input .novo-field-infix select{width:100%}:host .novo-field-input .novo-field-suffix{align-items:center;display:flex}:host .novo-field-messages{-ms-grid-column:3;-ms-grid-row:3;display:grid;grid-area:messages}:host .novo-field-hint-wrapper{display:flex;flex-direction:column}", ":host.novo-field-appearance-standard.novo-field-appearance-underlined .novo-field-input{border-bottom:1px solid #afb9c0!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{border-bottom:1px solid #3d464d!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined.novo-focused .novo-field-input{border-bottom:1px solid #4a89dc!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined.novo-field-invalid .novo-field-input{border-bottom:1px solid #da4453!important}", ":host.novo-field-appearance-fill.novo-field-layout-horizontal .novo-field-input,:host.novo-field-appearance-fill.novo-field-layout-vertical{background:var(--background-main)}:host.novo-field-appearance-fill.novo-field-layout-vertical .novo-field-label{padding-left:.5em;padding-right:.5em;padding-top:.5em}:host.novo-field-appearance-fill.novo-field-layout-vertical .novo-field-input{padding:0 .5em}:host.novo-field-appearance-fill.novo-field-appearance-underlined .novo-field-input{border-bottom:1px solid #afb9c0!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{border-bottom:1px solid #3d464d!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused .novo-field-label{color:#4a89dc!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused .novo-field-input{border-bottom:1px solid #4a89dc!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-field-invalid .novo-field-input{border-bottom:1px solid #da4453!important}", ":host.novo-field-appearance-outline{border:1px solid #afb9c0!important;border-radius:.4rem;padding:.5rem}:host.novo-field-appearance-outline.novo-field-layout-vertical .novo-field-label{background:#fff;margin-left:.5rem;margin-top:-1.5rem;padding:.5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content}:host.novo-field-appearance-outline:not(.novo-focused):hover{border:1px solid #3d464d!important}:host.novo-field-appearance-outline.novo-focused{border:1px solid #4a89dc!important}:host.novo-field-appearance-outline.novo-field-invalid{border:1px solid #da4453!important}", ":host.novo-field-appearance-list.novo-field-layout-horizontal{border-bottom:1px solid #f7f7f7!important;min-height:4.2rem;padding:.5rem 1.2rem}:host.novo-field-appearance-list.novo-field-layout-horizontal .novo-field-label{align-items:start;margin-top:.9rem}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-no-label{gap:0;grid-template-columns:0 minmax(300px,600px)}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{background:rgba(74,137,220,.15)}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-focused .novo-field-label{color:#4a89dc!important}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-field-invalid .novo-field-label{color:#da4453!important}"]
                },] }
    ];
    NovoFieldElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoFieldElement.propDecorators = {
        _inputContainerRef: [{ type: i0.ViewChild, args: ['inputContainer',] }],
        _labelElement: [{ type: i0.ContentChild, args: [NovoLabel,] }],
        _hintElements: [{ type: i0.ContentChildren, args: [NovoHintElement,] }],
        _errorElements: [{ type: i0.ContentChildren, args: [NovoErrorElement,] }],
        _prefixElements: [{ type: i0.ContentChildren, args: [NovoFieldPrefixDirective,] }],
        _suffixElements: [{ type: i0.ContentChildren, args: [NovoFieldSuffixDirective,] }],
        _control: [{ type: i0.ContentChild, args: [NovoFieldControl,] }],
        layout: [{ type: i0.Input }],
        appearance: [{ type: i0.Input }],
        width: [{ type: i0.Input }]
    };

    /** Event object that is emitted when an autocomplete option is selected. */
    var NovoOptionSelectedEvent = /** @class */ (function () {
        function NovoOptionSelectedEvent(
        /** Reference to the autocomplete panel that emitted the event. */
        source, 
        /** Option that was selected. */
        option) {
            this.source = source;
            this.option = option;
        }
        return NovoOptionSelectedEvent;
    }());
    // Boilerplate for applying mixins
    var NovoAutocompleteBase = /** @class */ (function () {
        function NovoAutocompleteBase() {
        }
        return NovoAutocompleteBase;
    }());
    var NovoAutocompleteMixins = mixinOverlay(mixinDisabled(NovoAutocompleteBase));
    var NovoAutocompleteElement = /** @class */ (function (_super) {
        __extends(NovoAutocompleteElement, _super);
        function NovoAutocompleteElement(_elementRef, cdr, defaultTabIndex, _formField) {
            var _this = _super.call(this) || this;
            _this._elementRef = _elementRef;
            _this.cdr = cdr;
            _this._formField = _formField;
            _this._stateChanges = rxjs.Subscription.EMPTY;
            _this._activeOptionChanges = rxjs.Subscription.EMPTY;
            _this._selectedOptionChanges = rxjs.Subscription.EMPTY;
            _this._keyDownChanges = rxjs.Subscription.EMPTY;
            /** Event that is emitted whenever an option from the list is selected. */
            _this.optionSelected = new i0.EventEmitter();
            /** Emits whenever an option is activated using the keyboard. */
            _this.optionActivated = new i0.EventEmitter();
            /** Key to use to trigger autocomplete. used for textarea. */
            _this.triggerOn = function (control) { return control.focused; };
            /** Function that maps an option's control value to its display value in the trigger. */
            _this.displayWith = null;
            _this._multiple = false;
            var parsedTabIndex = Number(defaultTabIndex);
            _this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
            return _this;
        }
        Object.defineProperty(NovoAutocompleteElement.prototype, "multiple", {
            /** Whether the user should be allowed to select multiple options. */
            get: function () {
                var _a, _b;
                return this._multiple || !!((_a = this._formField._control) === null || _a === void 0 ? void 0 : _a.multiple) || ((_b = this._formField._control) === null || _b === void 0 ? void 0 : _b.controlType) === 'chip-list';
            },
            set: function (value) {
                this._multiple = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoAutocompleteElement.prototype, "disabled", {
            /** Whether the toggle button is disabled. */
            get: function () {
                var _a;
                if (this._disabled === undefined && ((_a = this._formField) === null || _a === void 0 ? void 0 : _a._control)) {
                    return this._formField._control.disabled;
                }
                return !!this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        NovoAutocompleteElement.prototype.ngOnChanges = function (changes) {
            this._watchStateChanges();
            this._watchSelectionEvents();
        };
        NovoAutocompleteElement.prototype.ngOnDestroy = function () {
            this._stateChanges.unsubscribe();
            this._activeOptionChanges.unsubscribe();
            this._selectedOptionChanges.unsubscribe();
            this._keyDownChanges.unsubscribe();
        };
        NovoAutocompleteElement.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._keyManager = new a11y.ActiveDescendantKeyManager(this.options).withWrap();
            this._activeOptionChanges = this._keyManager.change.subscribe(function (index) {
                _this.optionActivated.emit({ source: _this, option: _this.options.toArray()[index] || null });
            });
            this.element = this._formField.getConnectedOverlayOrigin() || this._elementRef;
            this._keyDownChanges = rxjs.fromEvent(this.element.nativeElement, 'keydown').subscribe(function (event) { return _this._handleKeydown(event); });
            this.options.changes.subscribe(function () {
                _this._watchStateChanges();
                _this._watchSelectionEvents();
            });
        };
        NovoAutocompleteElement.prototype.ngAfterViewInit = function () {
            this._watchStateChanges();
            this._watchSelectionEvents();
        };
        NovoAutocompleteElement.prototype.checkPanel = function () {
            var isTriggered = this.triggerOn(this._formField._control);
            if (isTriggered && this.element) {
                this.openPanel();
            }
        };
        NovoAutocompleteElement.prototype._setTriggerValue = function (value) {
            var toDisplay = this.displayWith ? this.displayWith(value) : value;
            // Simply falling back to an empty string if the display value is falsy does not work properly.
            // The display value can also be the number zero and shouldn't fall back to an empty string.
            var inputValue = toDisplay != null ? toDisplay : '';
            // If it's used within a `NovoField`, we should set it through the property so it can go
            // through change detection.
            if (this._formField) {
                var _c = this._formField._control, controlType = _c.controlType, _d = _c.lastCaretPosition, lastCaretPosition = _d === void 0 ? 0 : _d;
                if (controlType === 'textarea') {
                    var currentValue = this._formField._control.value.split('');
                    currentValue.splice(lastCaretPosition, 0, inputValue);
                    this._formField._control.value = currentValue.join('');
                }
                else {
                    var valueToEmit = inputValue;
                    if (this.multiple) {
                        var currentValue = this._formField._control.value;
                        if (Array.isArray(currentValue)) {
                            valueToEmit = __spread(currentValue, [inputValue]);
                        }
                        else {
                            valueToEmit = [currentValue, inputValue];
                        }
                    }
                    this._formField._control.value = valueToEmit;
                }
            }
            else {
                // this._element.nativeElement.value = inputValue;
                console.warn("AutoComplete only intended to be used within a NovoField");
            }
            this._previousValue = inputValue;
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoAutocompleteElement.prototype._clearPreviousSelectedOption = function (skip) {
            this.options.forEach(function (option) {
                if (option !== skip && option.selected) {
                    option.deselect();
                }
            });
        };
        /** Emits the `select` event. */
        NovoAutocompleteElement.prototype._emitSelectEvent = function (option) {
            var event = new NovoOptionSelectedEvent(this, option);
            this.optionSelected.emit(event);
        };
        /**
         * This method closes the panel, and if a value is specified, also sets the associated
         * control to that value. It will also mark the control as dirty if this interaction
         * stemmed from the user.
         */
        NovoAutocompleteElement.prototype._setValueAndClose = function (event) {
            if (event && event.source) {
                this._clearPreviousSelectedOption(event.source);
                this._setTriggerValue(event.source.value);
                // this._onChange(event.source.value);
                // this._element.nativeElement.focus();
                this._formField._control.focus();
                this._emitSelectEvent(event.source);
                this._watchSelectionEvents();
            }
            if (!this._multiple)
                this.closePanel();
        };
        NovoAutocompleteElement.prototype._watchSelectionEvents = function () {
            var _this = this;
            var selectionEvents = this.options ? rxjs.merge.apply(void 0, __spread(this.options.map(function (option) { return option.onSelectionChange; }))) : rxjs.of();
            this._selectedOptionChanges.unsubscribe();
            this._selectedOptionChanges = selectionEvents.pipe(operators.take(1)).subscribe(function (evt) {
                _this._setValueAndClose(evt);
            });
        };
        NovoAutocompleteElement.prototype._watchStateChanges = function () {
            var _this = this;
            var inputStateChanged = this._formField && this._formField._control ? this._formField._control.stateChanges : rxjs.of();
            this._stateChanges.unsubscribe();
            this._stateChanges = rxjs.merge(inputStateChanged).subscribe(function () {
                _this.checkPanel();
                _this.cdr.markForCheck();
            });
        };
        Object.defineProperty(NovoAutocompleteElement.prototype, "activeOption", {
            /** The currently active option, coerced to MatOption type. */
            get: function () {
                if (this._keyManager) {
                    return this._keyManager.activeItem;
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        NovoAutocompleteElement.prototype._handleKeydown = function (event) {
            var key = event.key;
            // Prevent the default action on all escape key presses. This is here primarily to bring IE
            // in line with other browsers. By default, pressing escape on IE will cause it to revert
            // the input value to the one that it had on focus, however it won't dispatch any events
            // which means that the model value will be out of sync with the view.
            if (key === "Escape" /* Escape */ && !keycodes.hasModifierKey(event)) {
                event.preventDefault();
            }
            if (this.activeOption && key === "Enter" /* Enter */ && this.panelOpen) {
                this.activeOption._selectViaInteraction();
                // this._resetActiveItem();
                event.preventDefault();
            }
            else {
                var prevActiveItem = this._keyManager.activeItem;
                var isArrowKey = key === "ArrowUp" /* ArrowUp */ || key === "ArrowDown" /* ArrowDown */;
                if (this.panelOpen || key === "Tab" /* Tab */) {
                    this._keyManager.onKeydown(event);
                }
                else if (isArrowKey && !this.overlay.panelOpen) {
                    this.openPanel();
                }
                // if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
                //   this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);
                // }
            }
        };
        return NovoAutocompleteElement;
    }(NovoAutocompleteMixins));
    NovoAutocompleteElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-autocomplete',
                    template: "<novo-overlay-template [parent]=\"element\" position=\"above-below\">\n  <div class=\"novo-autocomplete-options\" cdk-scrollable>\n    <ng-content></ng-content>\n  </div>\n</novo-overlay-template>",
                    host: {
                        class: 'novo-autocomplete',
                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                        // consumer may have provided, while still being able to receive focus.
                        '[attr.tabindex]': 'disabled ? null : -1',
                    },
                    providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoAutocompleteElement }],
                    exportAs: 'novoAutocomplete',
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-autocomplete-options{-webkit-padding-start:0!important;background-color:var(--background-bright);box-shadow:0 -1px 3px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);cursor:default;list-style:none;padding-inline-start:0!important}"]
                },] }
    ];
    NovoAutocompleteElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: String, decorators: [{ type: i0.Attribute, args: ['tabindex',] }] },
        { type: NovoFieldElement, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_FORM_FIELD,] }] }
    ]; };
    NovoAutocompleteElement.propDecorators = {
        optionGroups: [{ type: i0.ContentChildren, args: [NovoOptgroup, { descendants: true },] }],
        options: [{ type: i0.ContentChildren, args: [NovoOption, { descendants: true },] }],
        optionSelected: [{ type: i0.Output }],
        optionActivated: [{ type: i0.Output }],
        tabIndex: [{ type: i0.Input }],
        triggerOn: [{ type: i0.Input }],
        displayWith: [{ type: i0.Input }],
        ariaLabel: [{ type: i0.Input, args: ['aria-label',] }],
        multiple: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }]
    };

    var NovoFieldsElement = /** @class */ (function () {
        function NovoFieldsElement() {
            this._layout = 'horizontal';
            this._appearance = 'standard';
            this.fullWidth = false;
        }
        Object.defineProperty(NovoFieldsElement.prototype, "layout", {
            get: function () {
                return this._layout;
            },
            set: function (value) {
                if (this._layout !== value) {
                    this._layout = value;
                    this._updateFieldLayout();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFieldsElement.prototype, "appearance", {
            get: function () {
                return this._appearance;
            },
            set: function (value) {
                if (this._appearance !== value) {
                    this._appearance = value;
                    this._updateFieldAppearance();
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoFieldsElement.prototype.ngAfterContentInit = function () {
            this._updateFieldLayout();
            this._updateFieldAppearance();
        };
        NovoFieldsElement.prototype._updateFieldLayout = function () {
            var _this = this;
            if (this._fields) {
                this._fields.forEach(function (field) {
                    field.layout = _this.layout;
                });
            }
        };
        NovoFieldsElement.prototype._updateFieldAppearance = function () {
            var _this = this;
            if (this._fields) {
                this._fields.forEach(function (field) {
                    field.appearance = _this.appearance;
                });
            }
        };
        return NovoFieldsElement;
    }());
    NovoFieldsElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-fields',
                    template: "<ng-content></ng-content>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    host: {
                        class: 'novo-field',
                        '[class.novo-fieldset-appearance-standard]': 'appearance == "standard"',
                        '[class.novo-fieldset-appearance-fill]': 'appearance == "fill"',
                        '[class.novo-fieldset-appearance-outline]': 'appearance == "outline"',
                        '[class.novo-fieldset-appearance-list]': 'appearance == "list"',
                    },
                    styles: [":host{display:grid;grid-gap:2.8rem 2rem}:host.novo-fieldset-appearance-list{grid-gap:0}:host.full-width::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(300px,1fr);width:-webkit-fill-available}:host.full-width::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host.full-width::ng-deep novo-field.novo-field-layout-horizontal{grid-template-columns:150px minmax(150px,1fr)}:host.full-width::ng-deep novo-field.novo-field-layout-horizontal .novo-input-element{width:100%}"]
                },] }
    ];
    NovoFieldsElement.propDecorators = {
        _fields: [{ type: i0.ContentChildren, args: [NovoFieldElement,] }],
        layout: [{ type: i0.Input }],
        appearance: [{ type: i0.Input }],
        fullWidth: [{ type: i0.HostBinding, args: ['class.full-width',] }, { type: i0.Input }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoFieldsElement.prototype, "fullWidth", void 0);

    var NOVO_INPUT_FORMAT = new i0.InjectionToken('NovoInputFormat');

    var DATEFORMAT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoDateFormatDirective; }),
        multi: true,
    };
    (function (DATE_FORMATS) {
        DATE_FORMATS["DATE"] = "date";
        DATE_FORMATS["ISO8601"] = "iso8601";
        DATE_FORMATS["STRING"] = "string";
    })(exports.DATE_FORMATS || (exports.DATE_FORMATS = {}));
    var NovoDateFormatDirective = /** @class */ (function (_super) {
        __extends(NovoDateFormatDirective, _super);
        function NovoDateFormatDirective(_element, _renderer, _factory, _compositionMode, labels) {
            var _this = _super.call(this, _element, _renderer, _factory, _compositionMode) || this;
            _this._element = _element;
            _this.labels = labels;
            _this.valueChange = new i0.EventEmitter();
            _this.dateFormat = exports.DATE_FORMATS.DATE;
            var dateFormat = _this.labels.dateFormat.toUpperCase();
            _this.unmask = 'typed';
            _this.imask = {
                mask: Date,
                pattern: 'm{/}`d{/}`Y',
                overwrite: true,
                autofix: true,
                lazy: false,
                min: new Date(1970, 0, 1),
                max: new Date(2030, 0, 1),
                prepare: function (str) { return str.toUpperCase(); },
                format: function (date) { return _this.formatValue(date); },
                parse: function (str) {
                    return dateFns.parse(str);
                },
                blocks: {
                    d: {
                        mask: IMask.MaskedRange,
                        placeholderChar: 'D',
                        from: 1,
                        to: 31,
                        maxLength: 2,
                    },
                    m: {
                        mask: IMask.MaskedRange,
                        placeholderChar: 'M',
                        from: 1,
                        to: 12,
                        maxLength: 2,
                    },
                    Y: {
                        mask: IMask.MaskedRange,
                        placeholderChar: 'Y',
                        from: 1900,
                        to: 9999,
                    },
                },
            };
            return _this;
        }
        NovoDateFormatDirective.prototype.normalize = function (value) {
            var pattern = this.labels.dateFormat.toUpperCase();
            return dateFns.format(dateFns.parse(value), pattern);
        };
        NovoDateFormatDirective.prototype.formatAsIso = function (date) {
            if (date && dateFns.isValid(date)) {
                return date.toISOString().slice(0, 10);
            }
            return null;
        };
        NovoDateFormatDirective.prototype.formatValue = function (value) {
            if (value == null)
                return '';
            // Use `parse` because it keeps dates in locale
            var date = dateFns.parse(value);
            if (dateFns.isValid(date)) {
                var dateFormat = this.labels.dateFormat.toUpperCase();
                return dateFns.format(date, dateFormat);
            }
            return this.normalize(value);
        };
        NovoDateFormatDirective.prototype.writeValue = function (value) {
            _super.prototype.writeValue.call(this, this.formatValue(value));
        };
        NovoDateFormatDirective.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (date) {
                var formatted = date;
                switch (_this.dateFormat) {
                    case exports.DATE_FORMATS.ISO8601:
                        formatted = _this.formatAsIso(date);
                        break;
                    case exports.DATE_FORMATS.STRING:
                        formatted = _this.formatValue(date);
                        break;
                    default:
                        formatted = date;
                        break;
                }
                _this.valueChange.emit(date);
                fn(formatted);
            };
        };
        return NovoDateFormatDirective;
    }(angularImask.IMaskDirective));
    NovoDateFormatDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[dateFormat]',
                    host: {
                        class: 'novo-date-format',
                    },
                    providers: [DATEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateFormatDirective }],
                },] }
    ];
    NovoDateFormatDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: angularImask.IMaskFactory },
        { type: Boolean, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] },
        { type: NovoLabelService }
    ]; };
    NovoDateFormatDirective.propDecorators = {
        dateFormat: [{ type: i0.Input }]
    };

    var TIMEFORMAT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoTimeFormatDirective; }),
        multi: true,
    };
    (function (TIME_FORMATS) {
        TIME_FORMATS["DATE"] = "date";
        TIME_FORMATS["ISO8601"] = "iso8601";
        TIME_FORMATS["STRING"] = "string";
    })(exports.TIME_FORMATS || (exports.TIME_FORMATS = {}));
    var NovoTimeFormatDirective = /** @class */ (function (_super) {
        __extends(NovoTimeFormatDirective, _super);
        function NovoTimeFormatDirective(_element, _renderer, _factory, _compositionMode, labels, cdr) {
            var _this = _super.call(this, _element, _renderer, _factory, _compositionMode) || this;
            _this._element = _element;
            _this.labels = labels;
            _this.cdr = cdr;
            _this.valueChange = new i0.EventEmitter();
            _this.military = false;
            _this.timeFormat = exports.TIME_FORMATS.DATE;
            _this.initFormatOptions();
            return _this;
        }
        NovoTimeFormatDirective.prototype.ngOnChanges = function (changes) {
            if (Object.keys(changes).some(function (key) { return ['military', 'timeFormat'].includes(key); })) {
                this.initFormatOptions();
            }
        };
        NovoTimeFormatDirective.prototype.initFormatOptions = function () {
            var _this = this;
            // const pattern = this.military ? 'HH:mm' : 'hh:mm A';
            var amFormat = this.labels.timeFormatAM.toUpperCase();
            var pmFormat = this.labels.timeFormatPM.toUpperCase();
            this.unmask = 'typed';
            this.imask = {
                mask: Date,
                pattern: this.military ? 'HH:mm' : 'hh:mm aa',
                overwrite: true,
                autofix: true,
                lazy: false,
                min: new Date(1970, 0, 1),
                max: new Date(2030, 0, 1),
                prepare: function (str) { return str.toUpperCase(); },
                format: function (value) { return _this.formatValue(value); },
                parse: function (str) {
                    var time = _this.convertTime12to24(str);
                    return dateFns.parse(dateFns.format(Date.now(), 'YYYY-MM-DD') + "T" + time);
                },
                blocks: {
                    HH: {
                        mask: IMask.MaskedRange,
                        placeholderChar: '-',
                        maxLength: 2,
                        from: 0,
                        to: 23,
                    },
                    hh: {
                        mask: IMask.MaskedRange,
                        placeholderChar: '-',
                        maxLength: 2,
                        from: 1,
                        to: 12,
                    },
                    mm: {
                        mask: IMask.MaskedRange,
                        placeholderChar: '-',
                        maxLength: 2,
                        from: 0,
                        to: 59,
                    },
                    aa: {
                        mask: IMask.MaskedEnum,
                        placeholderChar: '-',
                        enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                    },
                },
            };
        };
        NovoTimeFormatDirective.prototype._checkInput = function (event) {
            if (document.activeElement === event.target) {
                var text = event.target.value;
                var hour = text.slice(0, 2);
                if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                    event.preventDefault();
                    var value = "0" + text;
                    event.target.value = value;
                    // this.onChange(value);
                }
                if (!this.military) {
                    var input_1 = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                    var timePeriod = this.imask.blocks.aa.enum.find(function (it) { return it[0] === input_1[0]; });
                    if (timePeriod) {
                        event.target.value = text.slice(0, 5) + " " + timePeriod;
                    }
                    if (event.target.selectionStart >= 3 && this.hourOneFormatRequired(hour)) {
                        event.target.value = "01:" + event.target.value.slice(3, event.target.value.length);
                    }
                }
            }
        };
        NovoTimeFormatDirective.prototype._handleBlur = function (event) {
            var text = event.target.value;
            var hour = text.slice(0, 2);
            if (!this.military) {
                var input_2 = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                var timePeriod = this.imask.blocks.aa.enum.find(function (it) { return it[0] === input_2[0]; });
                if (this.hourOneFormatRequired(hour)) {
                    event.target.value = "01:" + text.slice(3, text.length);
                }
                if (!timePeriod) {
                    event.target.value = text.slice(0, 5) + " --";
                }
            }
        };
        NovoTimeFormatDirective.prototype._handleKeydown = function (event) {
            var input = event.target;
            var hour = input.value.slice(0, 2);
            if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
                event.target.value = input.value.slice(0, 5) + " --";
            }
            else if (event.key === "Tab" /* Tab */ && input.selectionStart <= 2 && this.hourOneFormatRequired(hour)) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                input.value = "01:" + input.value.slice(3, input.value.length);
                input.setSelectionRange(3, 3);
            }
            else if (event.key === "ArrowRight" /* ArrowRight */ && input.selectionStart >= 2 && this.hourOneFormatRequired(hour)) {
                input.value = "01:" + input.value.slice(3, input.value.length);
                input.setSelectionRange(2, 2);
            }
        };
        NovoTimeFormatDirective.prototype.normalize = function (value) {
            if (this.military) {
                return this.convertTime12to24(value);
            }
            return this.convertTime24to12(value);
        };
        NovoTimeFormatDirective.prototype.formatValue = function (value) {
            var date = dateFns.parse(value);
            if (dateFns.isValid(date)) {
                var pattern = this.military ? 'HH:mm' : 'hh:mm A';
                return dateFns.format(date, pattern);
            }
            return this.normalize(value);
        };
        NovoTimeFormatDirective.prototype.formatAsIso = function (date) {
            if (date && dateFns.isValid(date)) {
                return dateFns.format(date, 'HH:mm');
            }
            return null;
        };
        NovoTimeFormatDirective.prototype.convertTime12to24 = function (time12h) {
            var pmFormat = this.labels.timeFormatPM.toUpperCase();
            var _a = __read(time12h.split(' '), 2), time = _a[0], meridian = _a[1];
            var _b = __read(time.split(':'), 2), hours = _b[0], minutes = _b[1];
            if (hours === '12') {
                hours = '00';
            }
            if (['PM', pmFormat].includes(meridian)) {
                hours = ("" + (parseInt(hours, 10) + 12)).padStart(2, '0');
            }
            return hours + ":" + minutes;
        };
        NovoTimeFormatDirective.prototype.convertTime24to12 = function (time24h) {
            if (time24h.length === 5) {
                var date = dateFns.parse("2020-01-01T" + time24h);
                return dateFns.format(date, 'hh:mm A');
            }
            return time24h;
        };
        NovoTimeFormatDirective.prototype.writeValue = function (value) {
            _super.prototype.writeValue.call(this, this.formatValue(value));
        };
        NovoTimeFormatDirective.prototype.registerOnChange = function (fn) {
            var _this = this;
            this.onChange = function (date) {
                var formatted = date;
                switch (_this.timeFormat) {
                    case exports.TIME_FORMATS.ISO8601:
                        formatted = _this.formatAsIso(date);
                        break;
                    case exports.TIME_FORMATS.STRING:
                        formatted = _this.formatValue(date);
                        break;
                    default:
                        formatted = date;
                        break;
                }
                _this.valueChange.emit(date);
                fn(formatted);
            };
        };
        NovoTimeFormatDirective.prototype.hourOneFormatRequired = function (hourInput) {
            return hourInput === '-1' || hourInput === '1-';
        };
        return NovoTimeFormatDirective;
    }(angularImask.IMaskDirective));
    NovoTimeFormatDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[timeFormat]',
                    host: {
                        class: 'novo-time-format',
                        '(input)': '_checkInput($event)',
                        '(blur)': '_handleBlur($event)',
                        '(keydown)': '_handleKeydown($event)',
                    },
                    providers: [TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }],
                },] }
    ];
    NovoTimeFormatDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: angularImask.IMaskFactory },
        { type: Boolean, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [forms.COMPOSITION_BUFFER_MODE,] }] },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTimeFormatDirective.propDecorators = {
        military: [{ type: i0.Input }],
        timeFormat: [{ type: i0.Input }]
    };

    /**
     * This token is used to inject the object whose value should be set into `NovoInput`. If none is
     * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide
     * themselves for this token, in order to make `NovoInput` delegate the getting and setting of the
     * value to them.
     */
    var NOVO_INPUT_VALUE_ACCESSOR = new i0.InjectionToken('NOVO_INPUT_VALUE_ACCESSOR');
    // Invalid input type. Using one of these will throw an NovoInputUnsupportedTypeError.
    var NOVO_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit'];
    var nextUniqueId$1 = 0;
    // Boilerplate for applying mixins to NovoInput.
    var NovoInputBase = /** @class */ (function () {
        function NovoInputBase(_parentForm, _parentFormGroup, 
        /** @docs-private */
        ngControl) {
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return NovoInputBase;
    }());
    /** Directive that allows a native input to work inside a `NovoField`. */
    // tslint:disable: no-conflicting-lifecycle member-ordering
    var NovoInput = /** @class */ (function (_super) {
        __extends(NovoInput, _super);
        function NovoInput(_elementRef, _platform, 
        /** @docs-private */
        ngControl, _parentForm, _parentFormGroup, inputValueAccessor, _autofillMonitor, ngZone) {
            var _this = _super.call(this, _parentForm, _parentFormGroup, ngControl) || this;
            _this._elementRef = _elementRef;
            _this._platform = _platform;
            _this.ngControl = ngControl;
            _this._autofillMonitor = _autofillMonitor;
            _this._uid = "novo-input-" + nextUniqueId$1++;
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            _this.focused = false;
            _this.errorState = false;
            /** @docs-private Implemented as part of NovoFieldControl. */
            _this.lastKeyValue = null;
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            _this.stateChanges = new rxjs.Subject();
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            _this.controlType = 'novo-input';
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            _this.autofilled = false;
            _this._disabled = false;
            _this._required = false;
            _this._type = 'text';
            _this._readonly = false;
            _this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter(function (t) { return platform.getSupportedInputTypes().has(t); });
            var element = _this._elementRef.nativeElement;
            var nodeName = element.nodeName.toLowerCase();
            // If no input value accessor was explicitly specified, use the element as the input value
            // accessor.
            _this._inputValueAccessor = inputValueAccessor || element;
            _this._previousNativeValue = _this.value;
            // Force setter to be called in case id was not specified.
            _this.id = _this.id;
            // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete
            // key. In order to get around this we need to "jiggle" the caret loose. Since this bug only
            // exists on iOS, we only bother to install the listener on iOS.
            if (_platform.IOS) {
                ngZone.runOutsideAngular(function () {
                    _elementRef.nativeElement.addEventListener('keyup', function (event) {
                        var el = event.target;
                        if (!el.value && !el.selectionStart && !el.selectionEnd) {
                            // Note: Just setting `0, 0` doesn't fix the issue. Setting
                            // `1, 1` fixes it for the first time that you type text and
                            // then hold delete. Toggling to `1, 1` and then back to
                            // `0, 0` seems to completely fix it.
                            el.setSelectionRange(1, 1);
                            el.setSelectionRange(0, 0);
                        }
                    });
                });
            }
            _this._isServer = !_this._platform.isBrowser;
            _this._isNativeSelect = nodeName === 'select';
            _this._isTextarea = nodeName === 'textarea';
            _this.controlType = _this._elementRef.nativeElement.type;
            if (_this._isNativeSelect) {
                _this.controlType = element.multiple ? 'select-multiple' : 'select';
            }
            else if (_this._isTextarea) {
                _this.controlType = 'textarea';
            }
            return _this;
        }
        Object.defineProperty(NovoInput.prototype, "disabled", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                if (this.ngControl && this.ngControl.disabled !== null) {
                    return this.ngControl.disabled;
                }
                return this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                // Browsers may not fire the blur event if the input is disabled too quickly.
                // Reset from here to ensure that the element doesn't become stuck.
                if (this.focused) {
                    this.focused = false;
                    this.stateChanges.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoInput.prototype, "id", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._id;
            },
            set: function (value) {
                this._id = value || this._uid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoInput.prototype, "required", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoInput.prototype, "type", {
            /** Input type of the element. */
            get: function () {
                return this._type;
            },
            set: function (value) {
                this._type = value || 'text';
                this._validateType();
                // When using Angular inputs, developers are no longer able to set the properties on the native
                // input element. To ensure that bindings for `type` work, we need to sync the setter
                // with the native property. Textarea elements don't support the type property or attribute.
                if (!this._isTextarea && platform.getSupportedInputTypes().has(this._type)) {
                    this._elementRef.nativeElement.type = this._type;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoInput.prototype, "value", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._inputValueAccessor.value;
            },
            set: function (value) {
                if (value !== this.value) {
                    this._inputValueAccessor.value = value;
                    this.stateChanges.next();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoInput.prototype, "readonly", {
            /** Whether the element is readonly. */
            get: function () {
                return this._readonly;
            },
            set: function (value) {
                this._readonly = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        NovoInput.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this._platform.isBrowser) {
                this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {
                    _this.autofilled = event.isAutofilled;
                    _this.stateChanges.next();
                });
            }
        };
        NovoInput.prototype.ngOnChanges = function () {
            this.stateChanges.next();
        };
        NovoInput.prototype.ngOnDestroy = function () {
            this.stateChanges.complete();
            if (this._platform.isBrowser) {
                this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);
            }
        };
        NovoInput.prototype.ngDoCheck = function () {
            if (this.ngControl) {
                // We need to re-evaluate this on every change detection cycle, because there are some
                // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                // that whatever logic is in here has to be super lean or we risk destroying the performance.
                // this.updateErrorState();
            }
            // We need to dirty-check the native element's value, because there are some cases where
            // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
            // updating the value using `emitEvent: false`).
            this._dirtyCheckNativeValue();
        };
        /** Focuses the input. */
        NovoInput.prototype.focus = function (options) {
            this._elementRef.nativeElement.focus(options);
        };
        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
        // In Ivy the `host` bindings will be merged when this class is extended, whereas in
        // ViewEngine they're overwritten.
        NovoInput.prototype._focusChanged = function (isFocused) {
            if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
                this.focused = isFocused;
                this.stateChanges.next();
            }
        };
        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
        // In Ivy the `host` bindings will be merged when this class is extended, whereas in
        // ViewEngine they're overwritten.
        NovoInput.prototype._onInput = function (event) {
            // Listening to the input event wouldn't be necessary when the input is using the
            // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
            this.lastKeyValue = event.data;
            if (this._isTextarea) {
                this.lastCaretPosition = this._elementRef.nativeElement.selectionStart;
            }
        };
        /** Does some manual dirty checking on the native input `value` property. */
        NovoInput.prototype._dirtyCheckNativeValue = function () {
            var newValue = this._elementRef.nativeElement.value;
            if (this._previousNativeValue !== newValue) {
                this._previousNativeValue = newValue;
                this.stateChanges.next();
            }
        };
        /** Make sure the input is a supported type. */
        NovoInput.prototype._validateType = function () {
            if (NOVO_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
                throw new Error("Invalid Input Type: " + this._type);
            }
        };
        /** Checks whether the input type is one of the types that are never empty. */
        NovoInput.prototype._isNeverEmpty = function () {
            return this._neverEmptyInputTypes.indexOf(this._type) > -1;
        };
        /** Checks whether the input is invalid based on the native validation. */
        NovoInput.prototype._isBadInput = function () {
            // The `validity` property won't be present on platform-server.
            var validity = this._elementRef.nativeElement.validity;
            return validity && validity.badInput;
        };
        Object.defineProperty(NovoInput.prototype, "empty", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoInput.prototype, "shouldLabelFloat", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                if (this._isNativeSelect) {
                    // For a single-selection `<select>`, the label should float when the selected option has
                    // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid
                    // overlapping the label with the options.
                    var selectElement = this._elementRef.nativeElement;
                    var firstOption = selectElement.options[0];
                    // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be
                    // -1 if the `value` is set to something, that isn't in the list of options, at a later point.
                    return (this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));
                }
                else {
                    return this.focused || !this.empty;
                }
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        NovoInput.prototype.setDescribedByIds = function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        NovoInput.prototype.onContainerClick = function () {
            // Do not re-focus the input element if the element is already focused. Otherwise it can happen
            // that someone clicks on a time input and the cursor resets to the "hours" field while the
            // "minutes" field was actually clicked. See: https://github.com/angular/components/issues/12849
            if (!this.focused) {
                this.focus();
            }
        };
        return NovoInput;
    }(NovoInputBase));
    NovoInput.decorators = [
        { type: i0.Directive, args: [{
                    selector: "input[novoInput], textarea[novoInput], select[novoInput]",
                    host: {
                        class: 'novo-input-element',
                        '[attr.id]': 'id',
                        '[attr.placeholder]': 'placeholder',
                        '[disabled]': 'disabled',
                        '[required]': 'required',
                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.aria-required]': 'required.toString()',
                        '[attr.autocomplete]': "'off'",
                    },
                    providers: [{ provide: NovoFieldControl, useExisting: NovoInput }],
                },] }
    ];
    NovoInput.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: platform.Platform },
        { type: forms.NgControl, decorators: [{ type: i0.Optional }, { type: i0.Self }] },
        { type: forms.NgForm, decorators: [{ type: i0.Optional }] },
        { type: forms.FormGroupDirective, decorators: [{ type: i0.Optional }] },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Self }, { type: i0.Inject, args: [NOVO_INPUT_VALUE_ACCESSOR,] }] },
        { type: textField.AutofillMonitor },
        { type: i0.NgZone }
    ]; };
    NovoInput.propDecorators = {
        _ariaDescribedby: [{ type: i0.HostBinding, args: ['attr.aria-describedby',] }],
        disabled: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        readonly: [{ type: i0.Input }],
        _focusChanged: [{ type: i0.HostListener, args: ['focus', ['true'],] }, { type: i0.HostListener, args: ['blur', ['false'],] }],
        _onInput: [{ type: i0.HostListener, args: ['input', ['$event'],] }]
    };

    /** Directive used to connect an input to a MatDatepicker. */
    var NovoPickerDirective = /** @class */ (function () {
        function NovoPickerDirective(_elementRef, formatter) {
            var _this = this;
            var _a;
            this._elementRef = _elementRef;
            this.formatter = formatter;
            /**
             * `autocomplete` attribute to be set on the input element.
             * @docs-private
             */
            this.autocompleteAttribute = 'off';
            if (!this.formatter) {
                console.warn('Picker directive is missing required formatter');
            }
            (_a = this.formatter) === null || _a === void 0 ? void 0 : _a.valueChange.subscribe(function (value) {
                _this.updatePicker(value);
            });
        }
        Object.defineProperty(NovoPickerDirective.prototype, "picker", {
            /** The datepicker that this input is associated with. */
            set: function (picker) {
                var _this = this;
                if (picker) {
                    this._picker = picker;
                    picker.registerOnChange(function (value) { return _this.updateValue(value); });
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoPickerDirective.prototype.updateValue = function (value) {
            this.formatter.writeValue(value);
        };
        NovoPickerDirective.prototype.updatePicker = function (value) {
            if (this._picker) {
                this._picker.writeValue(value);
            }
        };
        return NovoPickerDirective;
    }());
    NovoPickerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[picker]',
                    host: {
                        class: 'novo-has-picker',
                        '[attr.autocomplete]': 'autocompleteAttribute',
                    },
                },] }
    ];
    NovoPickerDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Self }, { type: i0.Inject, args: [NOVO_INPUT_FORMAT,] }] }
    ]; };
    NovoPickerDirective.propDecorators = {
        picker: [{ type: i0.Input }],
        autocompleteAttribute: [{ type: i0.Input, args: ['autocomplete',] }]
    };

    var NovoPickerToggleElement = /** @class */ (function () {
        function NovoPickerToggleElement(_elementRef, cdr, defaultTabIndex, _formField) {
            this._elementRef = _elementRef;
            this.cdr = cdr;
            this._formField = _formField;
            this._stateChanges = rxjs.Subscription.EMPTY;
            var parsedTabIndex = Number(defaultTabIndex);
            this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
        }
        Object.defineProperty(NovoPickerToggleElement.prototype, "disabled", {
            /** Whether the toggle button is disabled. */
            get: function () {
                if (this._disabled === undefined && this.picker) {
                    return this.picker.disabled;
                }
                return !!this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        NovoPickerToggleElement.prototype.ngOnChanges = function (changes) {
            if (changes.picker) {
                this._watchStateChanges();
            }
        };
        NovoPickerToggleElement.prototype.ngOnDestroy = function () {
            this._stateChanges.unsubscribe();
        };
        NovoPickerToggleElement.prototype.ngAfterContentInit = function () {
            this._watchStateChanges();
        };
        NovoPickerToggleElement.prototype.ngAfterViewInit = function () {
            this.element = this._formField.getConnectedOverlayOrigin() || this._elementRef;
        };
        NovoPickerToggleElement.prototype.togglePanel = function (event) {
            this.cdr.detectChanges();
            if (!this.overlay.panelOpen) {
                this.openPanel(event);
            }
            else {
                this.closePanel(event);
            }
        };
        /** BEGIN: Convenient Panel Methods. */
        NovoPickerToggleElement.prototype.openPanel = function (event) {
            if (!this.overlay.panelOpen) {
                this.overlay.openPanel();
            }
        };
        NovoPickerToggleElement.prototype.closePanel = function (event) {
            this.overlay.closePanel();
        };
        Object.defineProperty(NovoPickerToggleElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        NovoPickerToggleElement.prototype._watchStateChanges = function () {
            // const pickerStateChanged = this.picker ? this.picker.stateChanges : observableOf();
            // const inputStateChanged = this.picker && this.picker.pickerInput ? this.picker.pickerInput.stateChanges : observableOf();
            // const pickerToggled = this.picker ? merge(this.picker.openedStream, this.picker.closedStream) : observableOf();
            // this._stateChanges.unsubscribe();
            // this._stateChanges = merge(pickerStateChanged, inputStateChanged, pickerToggled).subscribe(() => this.cdr.markForCheck());
        };
        return NovoPickerToggleElement;
    }());
    NovoPickerToggleElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-picker-toggle',
                    template: "<novo-button\n  #button\n  theme=\"icon\"\n  [icon]=\"icon\"\n  [attr.aria-haspopup]=\"'dialog'\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n  (click)=\"togglePanel($event)\"></novo-button>\n\n<novo-overlay-template [parent]=\"element\" position=\"above-below\">\n  <ng-content></ng-content>\n</novo-overlay-template>",
                    host: {
                        class: 'novo-picker-toggle',
                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                        // consumer may have provided, while still being able to receive focus.
                        '[attr.tabindex]': 'disabled ? null : -1',
                        '[class.novo-toggle-active]': 'picker && picker.opened',
                        '[class.novo-accent]': 'picker && picker.color === "accent"',
                        '[class.novo-warn]': 'picker && picker.color === "warn"',
                        '(focus)': '_button.focus()',
                    },
                    exportAs: 'novoPickerToggle',
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [""]
                },] }
    ];
    NovoPickerToggleElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: String, decorators: [{ type: i0.Attribute, args: ['tabindex',] }] },
        { type: NovoFieldElement, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_FORM_FIELD,] }] }
    ]; };
    NovoPickerToggleElement.propDecorators = {
        picker: [{ type: i0.Input, args: ['for',] }],
        icon: [{ type: i0.Input }],
        tabIndex: [{ type: i0.Input }],
        ariaLabel: [{ type: i0.Input, args: ['aria-label',] }],
        disabled: [{ type: i0.Input }],
        _button: [{ type: i0.ViewChild, args: ['button',] }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }]
    };

    // NG2
    var NovoFieldModule = /** @class */ (function () {
        function NovoFieldModule() {
        }
        return NovoFieldModule;
    }());
    NovoFieldModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule, NovoCommonModule],
                    declarations: [
                        NovoFieldElement,
                        // NovoLabelElement,
                        NovoHintElement,
                        NovoErrorElement,
                        NovoInput,
                        NovoFieldPrefixDirective,
                        NovoFieldSuffixDirective,
                        NovoFieldsElement,
                        NovoTimeFormatDirective,
                        NovoDateFormatDirective,
                        NovoPickerToggleElement,
                        NovoPickerDirective,
                        NovoAutocompleteElement,
                    ],
                    exports: [
                        NovoFieldElement,
                        // NovoLabelElement,
                        NovoHintElement,
                        NovoErrorElement,
                        NovoInput,
                        NovoFieldPrefixDirective,
                        NovoFieldSuffixDirective,
                        NovoFieldsElement,
                        NovoTimeFormatDirective,
                        NovoDateFormatDirective,
                        NovoPickerToggleElement,
                        NovoPickerDirective,
                        NovoAutocompleteElement,
                    ],
                },] }
    ];

    // Boilerplate for applying mixins to NovoChipList.
    /** @docs-private */
    var NovoChipListBase = /** @class */ (function () {
        function NovoChipListBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, 
        /** @docs-private */
        ngControl) {
            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return NovoChipListBase;
    }());
    var _NovoChipListMixinBase = mixinErrorState(NovoChipListBase);
    // Increasing integer for generating unique ids for chip-list components.
    var nextUniqueId$2 = 0;
    /** Change event object that is emitted when the chip list value has changed. */
    var NovoChipListChange = /** @class */ (function () {
        function NovoChipListChange(
        /** Chip list that emitted the event. */
        source, 
        /** Value of the chip list when the event was emitted. */
        value) {
            this.source = source;
            this.value = value;
        }
        return NovoChipListChange;
    }());
    /**
     * A material design chips component (named ChipList for its similarity to the List component).
     */
    var NovoChipList = /** @class */ (function (_super) {
        __extends(NovoChipList, _super);
        function NovoChipList(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, 
        /** @docs-private */
        ngControl) {
            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
            _this._elementRef = _elementRef;
            _this._changeDetectorRef = _changeDetectorRef;
            _this._dir = _dir;
            _this.ngControl = ngControl;
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            _this.controlType = 'chip-list';
            /**
             * When a chip is destroyed, we store the index of the destroyed chip until the chips
             * query list notifies about the update. This is necessary because we cannot determine an
             * appropriate chip that should receive focus until the array of chips updated completely.
             */
            _this._lastDestroyedChipIndex = null;
            /** Subject that emits when the component has been destroyed. */
            _this._destroyed = new rxjs.Subject();
            /** Uid of the chip list */
            _this._uid = "novo-chip-list-" + nextUniqueId$2++;
            /** Tab index for the chip list. */
            _this._tabIndex = 0;
            /**
             * User defined tab index.
             * When it is not null, use user defined tab index. Otherwise use _tabIndex
             */
            _this._userTabIndex = null;
            /** Function when touched */
            _this._onTouched = function () { };
            /** Function when changed */
            _this._onChange = function () { };
            _this._multiple = false;
            _this._stacked = false;
            _this._compareWith = function (o1, o2) { return o1 === o2; };
            _this._required = false;
            _this._disabled = false;
            /** Orientation of the chip list. */
            _this.ariaOrientation = 'horizontal';
            _this._selectable = true;
            /** Event emitted when the selected chip list value has been changed by the user. */
            _this.change = new i0.EventEmitter();
            /**
             * Event that emits whenever the raw value of the chip-list changes. This is here primarily
             * to facilitate the two-way binding for the `value` input.
             * @docs-private
             */
            _this.valueChange = new i0.EventEmitter();
            /** @docs-private Implemented as part of NovoFieldControl. */
            _this.lastKeyValue = null;
            if (_this.ngControl) {
                _this.ngControl.valueAccessor = _this;
            }
            return _this;
        }
        Object.defineProperty(NovoChipList.prototype, "selected", {
            /** The array of selected chips inside chip list. */
            get: function () {
                return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "role", {
            /** The ARIA role applied to the chip list. */
            get: function () {
                return this.empty ? null : 'listbox';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "multiple", {
            /** Whether the user should be allowed to select multiple chips. */
            get: function () {
                return this._multiple;
            },
            set: function (value) {
                this._multiple = coercion.coerceBooleanProperty(value);
                this._syncChipsState();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "stacked", {
            /** Whether the chips should appear stacked instead of a row. */
            get: function () {
                return this._stacked;
            },
            set: function (value) {
                this._stacked = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "compareWith", {
            /**
             * A function to compare the option values with the selected values. The first argument
             * is a value from an option. The second is a value from the selection. A boolean
             * should be returned.
             */
            get: function () {
                return this._compareWith;
            },
            set: function (fn) {
                this._compareWith = fn;
                if (this._selectionModel) {
                    // A different comparator means the selection could change.
                    this._initializeSelection();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "value", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._value;
            },
            set: function (value) {
                this.writeValue(value);
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "id", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._chipInput ? this._chipInput.id : this._uid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "required", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = coercion.coerceBooleanProperty(value);
                this.stateChanges.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "placeholder", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._chipInput ? this._chipInput.placeholder : this._placeholder;
            },
            set: function (value) {
                this._placeholder = value;
                this.stateChanges.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "focused", {
            /** Whether any chips or the novoChipInput inside of this chip-list has focus. */
            get: function () {
                return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "empty", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "shouldLabelFloat", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return !this.empty || this.focused;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "disabled", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this.ngControl ? !!this.ngControl.disabled : this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this._syncChipsState();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "selectable", {
            /**
             * Whether or not this chip list is selectable. When a chip list is not selectable,
             * the selected states for all the chips inside the chip list are always ignored.
             */
            get: function () {
                return this._selectable;
            },
            set: function (value) {
                var _this = this;
                this._selectable = coercion.coerceBooleanProperty(value);
                if (this.chips) {
                    this.chips.forEach(function (chip) { return (chip._chipListSelectable = _this._selectable); });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "tabIndex", {
            set: function (value) {
                this._userTabIndex = value;
                this._tabIndex = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "chipSelectionChanges", {
            /** Combined stream of all of the child chips' selection change events. */
            get: function () {
                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip.selectionChange; })));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "chipFocusChanges", {
            /** Combined stream of all of the child chips' focus change events. */
            get: function () {
                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip._onFocus; })));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "chipBlurChanges", {
            /** Combined stream of all of the child chips' blur change events. */
            get: function () {
                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip._onBlur; })));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipList.prototype, "chipRemoveChanges", {
            /** Combined stream of all of the child chips' remove change events. */
            get: function () {
                return rxjs.merge.apply(void 0, __spread(this.chips.map(function (chip) { return chip.destroyed; })));
            },
            enumerable: false,
            configurable: true
        });
        NovoChipList.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._keyManager = new a11y.FocusKeyManager(this.chips)
                .withWrap()
                .withVerticalOrientation()
                .withHomeAndEnd()
                .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');
            if (this._dir) {
                this._dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function (dir) { return _this._keyManager.withHorizontalOrientation(dir); });
            }
            this._keyManager.tabOut.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {
                _this._allowFocusEscape();
            });
            // When the list changes, re-subscribe
            this.chips.changes.pipe(operators.startWith(null), operators.takeUntil(this._destroyed)).subscribe(function () {
                if (_this.disabled) {
                    // Since this happens after the content has been
                    // checked, we need to defer it to the next tick.
                    Promise.resolve().then(function () {
                        _this._syncChipsState();
                    });
                }
                _this._resetChips();
                // Reset chips selected/deselected status
                _this._initializeSelection();
                // Check to see if we need to update our tab index
                _this._updateTabIndex();
                // Check to see if we have a destroyed chip and need to refocus
                _this._updateFocusForDestroyedChips();
                _this.stateChanges.next();
            });
        };
        NovoChipList.prototype.ngOnInit = function () {
            this._selectionModel = new collections.SelectionModel(this.multiple, undefined, false);
            this.stateChanges.next();
        };
        NovoChipList.prototype.ngDoCheck = function () {
            if (this.ngControl) {
                // We need to re-evaluate this on every change detection cycle, because there are some
                // error triggers that we can't subscribe to (e.g. parent form submissions). This means
                // that whatever logic is in here has to be super lean or we risk destroying the performance.
                this.updateErrorState();
                if (this.ngControl.disabled !== this._disabled) {
                    this.disabled = !!this.ngControl.disabled;
                }
            }
        };
        NovoChipList.prototype.ngOnDestroy = function () {
            this._destroyed.next();
            this._destroyed.complete();
            this.stateChanges.complete();
            this._dropSubscriptions();
        };
        /** Associates an HTML input element with this chip list. */
        NovoChipList.prototype.registerInput = function (inputElement) {
            this._chipInput = inputElement;
            // We use this attribute to match the chip list to its input in test harnesses.
            // Set the attribute directly here to avoid "changed after checked" errors.
            this._elementRef.nativeElement.setAttribute('data-novo-chip-input', inputElement.id);
        };
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        NovoChipList.prototype.setDescribedByIds = function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        // Implemented as part of ControlValueAccessor.
        NovoChipList.prototype.writeValue = function (value) {
            if (this.chips) {
                this._setSelectionByValue(value, false);
            }
        };
        // Implemented as part of ControlValueAccessor.
        NovoChipList.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        // Implemented as part of ControlValueAccessor.
        NovoChipList.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        // Implemented as part of ControlValueAccessor.
        NovoChipList.prototype.setDisabledState = function (isDisabled) {
            this.disabled = isDisabled;
            this.stateChanges.next();
        };
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        NovoChipList.prototype.onContainerClick = function (event) {
            if (!this._originatesFromChip(event)) {
                this.focus();
            }
        };
        /**
         * Focuses the first non-disabled chip in this chip list, or the associated input when there
         * are no eligible chips.
         */
        NovoChipList.prototype.focus = function (options) {
            if (this.disabled) {
                return;
            }
            // TODO: ARIA says this should focus the first `selected` chip if any are selected.
            // Focus on first element if there's no chipInput inside chip-list
            if (this._chipInput && this._chipInput.focused) {
                // do nothing
            }
            else if (this._chipInput) {
                this._focusInput(options);
                this.stateChanges.next();
            }
            else if (this.chips.length > 0) {
                this._keyManager.setFirstItemActive();
                this.stateChanges.next();
            }
        };
        /** Attempt to focus an input if we have one. */
        NovoChipList.prototype._focusInput = function (options) {
            if (this._chipInput) {
                this._chipInput.focus(options);
            }
        };
        /**
         * Pass events to the keyboard manager. Available here for tests.
         */
        NovoChipList.prototype._keydown = function (event) {
            var target = event.target;
            // If they are on an empty input and hit backspace, focus the last chip
            if (event.key === "Backspace" /* Backspace */ && this._isInputEmpty(target)) {
                this._keyManager.setLastItemActive();
                event.preventDefault();
            }
            else if (target && target.classList.contains('novo-chip')) {
                this._keyManager.onKeydown(event);
                this.stateChanges.next();
            }
        };
        /**
         * Check the tab index as you should not be allowed to focus an empty list.
         */
        NovoChipList.prototype._updateTabIndex = function () {
            // If we have 0 chips, we should not allow keyboard focus
            this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);
        };
        /**
         * If the amount of chips changed, we need to update the
         * key manager state and focus the next closest chip.
         */
        NovoChipList.prototype._updateFocusForDestroyedChips = function () {
            // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.
            if (this._lastDestroyedChipIndex != null) {
                if (this.chips.length) {
                    var newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);
                    this._keyManager.setActiveItem(newChipIndex);
                }
                else {
                    this.focus();
                }
            }
            this._lastDestroyedChipIndex = null;
        };
        /**
         * Utility to ensure all indexes are valid.
         *
         * @param index The index to be checked.
         * @returns True if the index is valid for our list of chips.
         */
        NovoChipList.prototype._isValidIndex = function (index) {
            return index >= 0 && index < this.chips.length;
        };
        NovoChipList.prototype._isInputEmpty = function (element) {
            if (element && element.nodeName.toLowerCase() === 'input') {
                var input = element;
                return !input.value;
            }
            return false;
        };
        NovoChipList.prototype._setSelectionByValue = function (value, isUserInput) {
            var _this = this;
            if (isUserInput === void 0) { isUserInput = true; }
            this._clearSelection();
            this.chips.forEach(function (chip) { return chip.deselect(); });
            if (Array.isArray(value)) {
                value.forEach(function (currentValue) { return _this._selectValue(currentValue, isUserInput); });
                this._sortValues();
            }
            else {
                var correspondingChip = this._selectValue(value, isUserInput);
                // Shift focus to the active item. Note that we shouldn't do this in multiple
                // mode, because we don't know what chip the user interacted with last.
                if (correspondingChip) {
                    if (isUserInput) {
                        this._keyManager.setActiveItem(correspondingChip);
                    }
                }
            }
        };
        /**
         * Finds and selects the chip based on its value.
         * @returns Chip that has the corresponding value.
         */
        NovoChipList.prototype._selectValue = function (value, isUserInput) {
            var _this = this;
            if (isUserInput === void 0) { isUserInput = true; }
            var correspondingChip = this.chips.find(function (chip) {
                return chip.value != null && _this._compareWith(chip.value, value);
            });
            if (correspondingChip) {
                isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();
                this._selectionModel.select(correspondingChip);
            }
            return correspondingChip;
        };
        NovoChipList.prototype._initializeSelection = function () {
            var _this = this;
            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(function () {
                if (_this.ngControl || _this._value) {
                    _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value, false);
                    _this.stateChanges.next();
                }
            });
        };
        /**
         * Deselects every chip in the list.
         * @param skip Chip that should not be deselected.
         */
        NovoChipList.prototype._clearSelection = function (skip) {
            this._selectionModel.clear();
            this.chips.forEach(function (chip) {
                if (chip !== skip) {
                    chip.deselect();
                }
            });
            this.stateChanges.next();
        };
        /**
         * Sorts the model values, ensuring that they keep the same
         * order that they have in the panel.
         */
        NovoChipList.prototype._sortValues = function () {
            var _this = this;
            if (this._multiple) {
                this._selectionModel.clear();
                this.chips.forEach(function (chip) {
                    if (chip.selected) {
                        _this._selectionModel.select(chip);
                    }
                });
                this.stateChanges.next();
            }
        };
        /** Emits change event to set the model value. */
        NovoChipList.prototype._propagateChanges = function (fallbackValue) {
            var valueToEmit = null;
            if (Array.isArray(this.selected)) {
                valueToEmit = this.selected.map(function (chip) { return chip.value; });
            }
            else {
                valueToEmit = this.selected ? this.selected.value : fallbackValue;
            }
            this._value = valueToEmit;
            this.change.emit(new NovoChipListChange(this, valueToEmit));
            this.valueChange.emit(valueToEmit);
            this._onChange(valueToEmit);
            this._changeDetectorRef.markForCheck();
        };
        /** When blurred, mark the field as touched when focus moved outside the chip list. */
        NovoChipList.prototype._blur = function () {
            var _this = this;
            if (!this._hasFocusedChip()) {
                this._keyManager.setActiveItem(-1);
            }
            if (!this.disabled) {
                if (this._chipInput) {
                    // If there's a chip input, we should check whether the focus moved to chip input.
                    // If the focus is not moved to chip input, mark the field as touched. If the focus moved
                    // to chip input, do nothing.
                    // Timeout is needed to wait for the focus() event trigger on chip input.
                    setTimeout(function () {
                        if (!_this.focused) {
                            _this._markAsTouched();
                        }
                    });
                }
                else {
                    // If there's no chip input, then mark the field as touched.
                    this._markAsTouched();
                }
            }
        };
        /** Mark the field as touched */
        NovoChipList.prototype._markAsTouched = function () {
            this._onTouched();
            this._changeDetectorRef.markForCheck();
            this.stateChanges.next();
        };
        /**
         * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the
         * user to tab out of it. This prevents the list from capturing focus and redirecting
         * it back to the first chip, creating a focus trap, if it user tries to tab away.
         */
        NovoChipList.prototype._allowFocusEscape = function () {
            var _this = this;
            if (this._tabIndex !== -1) {
                this._tabIndex = -1;
                setTimeout(function () {
                    _this._tabIndex = _this._userTabIndex || 0;
                    _this._changeDetectorRef.markForCheck();
                });
            }
        };
        NovoChipList.prototype._resetChips = function () {
            this._dropSubscriptions();
            this._listenToChipsFocus();
            this._listenToChipsSelection();
            this._listenToChipsRemoved();
        };
        NovoChipList.prototype._dropSubscriptions = function () {
            if (this._chipFocusSubscription) {
                this._chipFocusSubscription.unsubscribe();
                this._chipFocusSubscription = null;
            }
            if (this._chipBlurSubscription) {
                this._chipBlurSubscription.unsubscribe();
                this._chipBlurSubscription = null;
            }
            if (this._chipSelectionSubscription) {
                this._chipSelectionSubscription.unsubscribe();
                this._chipSelectionSubscription = null;
            }
            if (this._chipRemoveSubscription) {
                this._chipRemoveSubscription.unsubscribe();
                this._chipRemoveSubscription = null;
            }
        };
        /** Listens to user-generated selection events on each chip. */
        NovoChipList.prototype._listenToChipsSelection = function () {
            var _this = this;
            this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(function (event) {
                event.source.selected ? _this._selectionModel.select(event.source) : _this._selectionModel.deselect(event.source);
                // For single selection chip list, make sure the deselected value is unselected.
                if (!_this.multiple) {
                    _this.chips.forEach(function (chip) {
                        if (!_this._selectionModel.isSelected(chip) && chip.selected) {
                            chip.deselect();
                        }
                    });
                }
                if (event.isUserInput) {
                    _this._propagateChanges();
                }
            });
        };
        /** Listens to user-generated selection events on each chip. */
        NovoChipList.prototype._listenToChipsFocus = function () {
            var _this = this;
            this._chipFocusSubscription = this.chipFocusChanges.subscribe(function (event) {
                var chipIndex = _this.chips.toArray().indexOf(event.chip);
                if (_this._isValidIndex(chipIndex)) {
                    _this._keyManager.updateActiveItem(chipIndex);
                }
                _this.stateChanges.next();
            });
            this._chipBlurSubscription = this.chipBlurChanges.subscribe(function () {
                _this._blur();
                _this.stateChanges.next();
            });
        };
        NovoChipList.prototype._listenToChipsRemoved = function () {
            var _this = this;
            this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(function (event) {
                var chip = event.chip;
                var chipIndex = _this.chips.toArray().indexOf(event.chip);
                // In case the chip that will be removed is currently focused, we temporarily store
                // the index in order to be able to determine an appropriate sibling chip that will
                // receive focus.
                if (_this._isValidIndex(chipIndex) && chip._hasFocus) {
                    _this._lastDestroyedChipIndex = chipIndex;
                }
            });
        };
        /** Checks whether an event comes from inside a chip element. */
        NovoChipList.prototype._originatesFromChip = function (event) {
            var currentElement = event.target;
            while (currentElement && currentElement !== this._elementRef.nativeElement) {
                if (currentElement.classList.contains('novo-chip')) {
                    return true;
                }
                currentElement = currentElement.parentElement;
            }
            return false;
        };
        /** Checks whether any of the chips is focused. */
        NovoChipList.prototype._hasFocusedChip = function () {
            return this.chips && this.chips.some(function (chip) { return chip._hasFocus; });
        };
        /** Syncs the list's state with the individual chips. */
        NovoChipList.prototype._syncChipsState = function () {
            var _this = this;
            if (this.chips) {
                this.chips.forEach(function (chip) {
                    chip._chipListDisabled = _this._disabled;
                    chip._chipListMultiple = _this.multiple;
                    chip._chipListSelectable = _this.selectable;
                });
            }
        };
        return NovoChipList;
    }(_NovoChipListMixinBase));
    NovoChipList.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-chip-list',
                    template: "<div class=\"novo-chip-list-wrapper\"><ng-content></ng-content></div>",
                    exportAs: 'novoChipList',
                    host: {
                        '[attr.tabindex]': 'disabled ? null : _tabIndex',
                        '[attr.aria-describedby]': '_ariaDescribedby || null',
                        '[attr.aria-required]': 'role ? required : null',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.aria-multiselectable]': 'multiple',
                        '[attr.role]': 'role',
                        '[class.novo-chip-list-stacked]': 'stacked',
                        '[class.novo-chip-list-focused]': 'focused',
                        '[class.novo-chip-list-disabled]': 'disabled',
                        '[class.novo-chip-list-invalid]': 'errorState',
                        '[class.novo-chip-list-required]': 'required',
                        '[attr.aria-orientation]': 'ariaOrientation',
                        class: 'novo-chip-list',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                        '(keydown)': '_keydown($event)',
                        '[id]': '_uid',
                    },
                    providers: [
                        { provide: NovoFieldControl, useExisting: NovoChipList },
                        { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoChipList },
                    ],
                    // styleUrls: ['./ChipList.scss'],
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoChipList.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },
        { type: forms.NgForm, decorators: [{ type: i0.Optional }] },
        { type: forms.FormGroupDirective, decorators: [{ type: i0.Optional }] },
        { type: ErrorStateMatcher },
        { type: forms.NgControl, decorators: [{ type: i0.Optional }, { type: i0.Self }] }
    ]; };
    NovoChipList.propDecorators = {
        errorStateMatcher: [{ type: i0.Input }],
        multiple: [{ type: i0.Input }],
        stacked: [{ type: i0.Input }],
        compareWith: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        ariaOrientation: [{ type: i0.Input, args: ['aria-orientation',] }],
        selectable: [{ type: i0.Input }],
        tabIndex: [{ type: i0.Input }],
        change: [{ type: i0.Output }],
        valueChange: [{ type: i0.Output }],
        chips: [{ type: i0.ContentChildren, args: [NovoChipElement, {
                        // We need to use `descendants: true`, because Ivy will no longer match
                        // indirect descendants if it's left as false.
                        descendants: true,
                    },] }]
    };

    // Increasing integer for generating unique ids.
    var nextUniqueId$3 = 0;
    /**
     * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.
     * May be placed inside or outside of an `<mat-chip-list>`.
     */
    var NovoChipInput = /** @class */ (function () {
        function NovoChipInput(_elementRef, _defaultOptions, _chipList) {
            this._elementRef = _elementRef;
            this._defaultOptions = _defaultOptions;
            this._chipList = _chipList;
            /** Whether the control is focused. */
            this.focused = false;
            this._addOnBlur = false;
            /**
             * The list of key codes that will trigger a chipEnd event.
             *
             * Defaults to `[Key.Enter]`.
             */
            this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;
            /** Emitted when a chip is to be added. */
            this.chipEnd = new i0.EventEmitter();
            /** The input's placeholder text. */
            this.placeholder = '';
            /** Unique id for the input. */
            this.id = "mat-chip-list-input-" + nextUniqueId$3++;
            this._disabled = false;
            this._inputElement = this._elementRef.nativeElement;
            this._chipList.registerInput(this);
        }
        Object.defineProperty(NovoChipInput.prototype, "addOnBlur", {
            /**
             * Whether or not the chipEnd event will be emitted when the input is blurred.
             */
            get: function () {
                return this._addOnBlur;
            },
            set: function (value) {
                this._addOnBlur = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipInput.prototype, "disabled", {
            /** Whether the input is disabled. */
            get: function () {
                return this._disabled || (this._chipList && this._chipList.disabled);
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoChipInput.prototype, "empty", {
            /** Whether the input is empty. */
            get: function () {
                return !this._inputElement.value;
            },
            enumerable: false,
            configurable: true
        });
        NovoChipInput.prototype.ngOnChanges = function () {
            this._chipList.stateChanges.next();
        };
        /** Utility method to make host definition/tests more clear. */
        NovoChipInput.prototype._keydown = function (event) {
            // Allow the user's focus to escape when they're tabbing forward. Note that we don't
            // want to do this when going backwards, because focus should go back to the first chip.
            if (event && event.key === "Tab" /* Tab */ && !keycodes.hasModifierKey(event, 'shiftKey')) {
                this._chipList._allowFocusEscape();
            }
            this._emitChipEnd(event);
        };
        /** Checks to see if the blur should emit the (chipEnd) event. */
        NovoChipInput.prototype._blur = function () {
            if (this.addOnBlur) {
                this._emitChipEnd();
            }
            this.focused = false;
            // Blur the chip list if it is not focused
            if (!this._chipList.focused) {
                this._chipList._blur();
            }
            this._chipList.stateChanges.next();
        };
        NovoChipInput.prototype._focus = function () {
            this.focused = true;
            this._chipList.stateChanges.next();
        };
        /** Checks to see if the (chipEnd) event needs to be emitted. */
        NovoChipInput.prototype._emitChipEnd = function (event) {
            if (!this._inputElement.value && !!event) {
                this._chipList._keydown(event);
            }
            if (!event || this._isSeparatorKey(event)) {
                this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });
                if (event) {
                    event.preventDefault();
                }
            }
        };
        NovoChipInput.prototype._onInput = function () {
            // Let chip list know whenever the value changes.
            this._chipList.stateChanges.next();
        };
        /** Focuses the input. */
        NovoChipInput.prototype.focus = function (options) {
            this._inputElement.focus(options);
        };
        /** Checks whether a keycode is one of the configured separators. */
        NovoChipInput.prototype._isSeparatorKey = function (event) {
            return !keycodes.hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.key);
        };
        return NovoChipInput;
    }());
    NovoChipInput.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[novoChipInput]',
                    exportAs: 'novoChipInput, novoChipInputFor',
                    host: {
                        class: 'novo-chip-input novo-input-element',
                        '(keydown)': '_keydown($event)',
                        '(blur)': '_blur()',
                        '(focus)': '_focus()',
                        '(input)': '_onInput()',
                        '[id]': 'id',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.placeholder]': 'placeholder || null',
                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',
                        '[attr.aria-required]': '_chipList && _chipList.required || null',
                    },
                },] }
    ];
    NovoChipInput.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [NOVO_CHIPS_DEFAULT_OPTIONS,] }] },
        { type: NovoChipList, decorators: [{ type: i0.Inject, args: [i0.forwardRef(function () { return NovoChipList; }),] }] }
    ]; };
    NovoChipInput.propDecorators = {
        addOnBlur: [{ type: i0.Input, args: ['novoChipInputAddOnBlur',] }],
        separatorKeyCodes: [{ type: i0.Input, args: ['novoChipInputSeparatorKeyCodes',] }],
        chipEnd: [{ type: i0.Output, args: ['novoChipInputTokenEnd',] }],
        placeholder: [{ type: i0.Input }],
        id: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }]
    };

    // Value accessor for the component (supports ngModel)
    var CHIPS_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoChipsElement; }),
        multi: true,
    };
    var NovoChipsElement = /** @class */ (function () {
        function NovoChipsElement(element, componentUtils, labels) {
            this.element = element;
            this.componentUtils = componentUtils;
            this.labels = labels;
            this.closeOnSelect = false;
            this.placeholder = '';
            this._disablePickerInput = false;
            this.changed = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.typing = new i0.EventEmitter();
            this.items = [];
            this.selected = null;
            this.config = {};
            // private data model
            this._value = '';
            this._items = new rxjs.ReplaySubject(1);
            // Placeholders for the callbacks
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        Object.defineProperty(NovoChipsElement.prototype, "disablePickerInput", {
            get: function () {
                return this._disablePickerInput;
            },
            set: function (v) {
                this._disablePickerInput = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        NovoChipsElement.prototype.ngOnInit = function () {
            this.setItems();
        };
        Object.defineProperty(NovoChipsElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (selected) {
                this.itemToAdd = '';
                this._value = selected;
            },
            enumerable: false,
            configurable: true
        });
        NovoChipsElement.prototype.clearValue = function () {
            this.items = [];
            this._items.next(this.items);
            this.value = null;
            this._propagateChanges();
        };
        NovoChipsElement.prototype.setItems = function () {
            var e_1, _b;
            var _this = this;
            this.items = [];
            if (this.model && Array.isArray(this.model)) {
                var noLabels = [];
                try {
                    for (var _c = __values(this.model), _d = _c.next(); !_d.done; _d = _c.next()) {
                        var value = _d.value;
                        var label = void 0;
                        if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                            label = Helpers.interpolate(this.source.format, value);
                        }
                        if (this.source && label && label !== this.source.format) {
                            this.items.push({
                                value: value,
                                label: label,
                            });
                        }
                        else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                            noLabels.push(value);
                        }
                        else if (this.source.options && Array.isArray(this.source.options)) {
                            this.items.push(this.getLabelFromOptions(value));
                        }
                        else if (this.source.categoryMap && this.source.categoryMap.size) {
                            this.items.push(value);
                        }
                        else {
                            this.items.push({
                                value: value,
                                label: value,
                            });
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                    this.source.getLabels(noLabels).then(function (result) {
                        var e_2, _b;
                        try {
                            for (var result_1 = __values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                                var value = result_1_1.value;
                                if (value.hasOwnProperty('label')) {
                                    _this.items.push({
                                        value: value,
                                        label: value.label,
                                    });
                                }
                                else if (_this.source.options && Array.isArray(_this.source.options)) {
                                    _this.items.push(_this.getLabelFromOptions(value));
                                }
                                else {
                                    _this.items.push(value);
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (result_1_1 && !result_1_1.done && (_b = result_1.return)) _b.call(result_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        _this._items.next(_this.items);
                    });
                }
            }
            this._items.next(this.items);
            var valueToSet = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
            if (Helpers.isBlank(this.value) !== Helpers.isBlank(valueToSet) || JSON.stringify(this.value) !== JSON.stringify(valueToSet)) {
                this.value = valueToSet;
                this._propagateChanges();
            }
        };
        NovoChipsElement.prototype.getLabelFromOptions = function (value) {
            var id = value;
            var optLabel = this.source.options.find(function (val) { return val.value === value; });
            if (!optLabel && value.hasOwnProperty('id')) {
                optLabel = this.source.options.find(function (val) { return val.value === value.id; });
                id = value.id;
            }
            return {
                value: id,
                label: optLabel ? optLabel.label : value,
            };
        };
        NovoChipsElement.prototype.getAvatarType = function (item) {
            var _a;
            return (this.type || ((_a = item === null || item === void 0 ? void 0 : item.value) === null || _a === void 0 ? void 0 : _a.searchEntity) || '').toLowerCase();
        };
        NovoChipsElement.prototype.deselectAll = function (event) {
            this.selected = null;
            this.hidePreview();
        };
        NovoChipsElement.prototype.select = function (event, item) {
            this.blur.emit(event);
            this.deselectAll();
            this.selected = item;
            this.showPreview();
        };
        NovoChipsElement.prototype.deselect = function (event, item) {
            this.blur.emit(event);
            this.deselectAll();
        };
        NovoChipsElement.prototype.onTyping = function (event) {
            this.typing.emit(event);
        };
        NovoChipsElement.prototype.onFocus = function (event) {
            this.deselectAll();
            this.element.nativeElement.classList.add('selected');
            this.focus.emit(event);
        };
        NovoChipsElement.prototype.add = function (event) {
            if (event && !(event instanceof Event)) {
                this.items.push(event);
                this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
                // Set focus on the picker
                var input = this.element.nativeElement.querySelector('novo-picker > input');
                if (input) {
                    input.focus();
                }
            }
            this._items.next(this.items);
            this._propagateChanges();
        };
        NovoChipsElement.prototype.remove = function (event, item) {
            this.items.splice(this.items.indexOf(item), 1);
            this.deselectAll();
            this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
            this._items.next(this.items);
            this._propagateChanges();
        };
        NovoChipsElement.prototype.onKeyDown = function (event) {
            if (event.key === "Backspace" /* Backspace */) {
                if (event.target && event.target.value.length === 0 && this.items.length) {
                    if (event) {
                        event.stopPropagation();
                        event.preventDefault();
                    }
                    if (this.selected) {
                        this.remove(event, this.selected);
                    }
                    else {
                        this.select(event, this.items[this.items.length - 1]);
                    }
                }
            }
        };
        // Set touched on blur
        NovoChipsElement.prototype.onTouched = function (e) {
            this.element.nativeElement.classList.remove('selected');
            this.onModelTouched();
            this.blur.emit(e);
        };
        NovoChipsElement.prototype.writeValue = function (model) {
            this.model = model;
            this.setItems();
        };
        NovoChipsElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoChipsElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoChipsElement.prototype.setDisabledState = function (disabled) {
            this._disablePickerInput = disabled;
        };
        /** Emits change event to set the model value. */
        NovoChipsElement.prototype._propagateChanges = function (fallbackValue) {
            var _a;
            this.changed.emit({ value: ((_a = this.value) === null || _a === void 0 ? void 0 : _a.length) ? this.value : '', rawValue: this.items });
            this.onModelChange(this.value);
        };
        /**
         * @name showPreview
         *
         * @description This method creates an instance of the preview (called popup) and adds all the bindings to that
         * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
         * a previewTemplate given in the config.
         */
        NovoChipsElement.prototype.showPreview = function () {
            var _a;
            if (this.source.previewTemplate) {
                if (!this.popup) {
                    this.popup = this.componentUtils.append(this.source.previewTemplate, this.preview);
                }
                this.popup.instance.match = { data: (_a = this.selected.data) !== null && _a !== void 0 ? _a : this.selected.value };
            }
        };
        /**
         * @name hidePreview
         *
         * @description - This method deletes the preview popup from the DOM.
         */
        NovoChipsElement.prototype.hidePreview = function () {
            if (this.popup) {
                this.popup.destroy();
                this.popup = null;
            }
        };
        return NovoChipsElement;
    }());
    NovoChipsElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'chips,novo-chips',
                    providers: [CHIPS_VALUE_ACCESSOR],
                    template: "\n    <div class=\"novo-chip-container\">\n      <novo-chip\n        *ngFor=\"let item of _items | async\"\n        [class.selected]=\"item == selected\"\n        [selectable]=\"true\"\n        [disabled]=\"disablePickerInput\"\n        (removed)=\"remove($event, item)\"\n        (selectionChange)=\"select($event, item)\"\n        (deselect)=\"deselect($event, item)\"\n      >\n        <novo-icon *ngIf=\"getAvatarType(item)\" class=\"txc-{{ getAvatarType(item) }}\" novoChipAvatar>circle</novo-icon>\n        {{ item.label }}\n        <novo-icon novoChipRemove>x</novo-icon>\n      </novo-chip>\n    </div>\n    <div class=\"chip-input-container\" *ngIf=\"!maxlength || (maxlength && items.length < maxlength)\">\n      <novo-picker\n        clearValueOnSelect=\"true\"\n        [closeOnSelect]=\"closeOnSelect\"\n        [config]=\"source\"\n        [disablePickerInput]=\"disablePickerInput\"\n        [placeholder]=\"placeholder\"\n        [(ngModel)]=\"itemToAdd\"\n        (select)=\"add($event)\"\n        (keydown)=\"onKeyDown($event)\"\n        (focus)=\"onFocus($event)\"\n        (typing)=\"onTyping($event)\"\n        (blur)=\"onTouched($event)\"\n        [selected]=\"items\"\n        [overrideElement]=\"element\"\n      >\n      </novo-picker>\n    </div>\n    <div class=\"preview-container\">\n      <span #preview></span>\n    </div>\n    <i class=\"bhi-search\" [class.has-value]=\"items.length\" *ngIf=\"!disablePickerInput\"></i>\n    <label class=\"clear-all\" *ngIf=\"items.length && !disablePickerInput\" (click)=\"clearValue()\"\n      >{{ labels.clearAll }} <i class=\"bhi-times\"></i\n    ></label>\n  ",
                    host: {
                        '[class.with-value]': 'items.length > 0',
                        '[class.disabled]': 'disablePickerInput',
                    }
                },] }
    ];
    NovoChipsElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ComponentUtils },
        { type: NovoLabelService }
    ]; };
    NovoChipsElement.propDecorators = {
        closeOnSelect: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        source: [{ type: i0.Input }],
        maxlength: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        disablePickerInput: [{ type: i0.Input }],
        changed: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        typing: [{ type: i0.Output }],
        preview: [{ type: i0.ViewChild, args: ['preview', { read: i0.ViewContainerRef },] }],
        value: [{ type: i0.Input }]
    };

    // Value accessor for the component (supports ngModel)
    var CHIPS_VALUE_ACCESSOR$1 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoRowChipsElement; }),
        multi: true,
    };
    var NovoRowChipElement = /** @class */ (function (_super) {
        __extends(NovoRowChipElement, _super);
        function NovoRowChipElement() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NovoRowChipElement.prototype.onSelect = function (e) {
            return false;
        };
        return NovoRowChipElement;
    }(NovoChipElement));
    NovoRowChipElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-row-chip',
                    template: "\n    <div class=\"novo-row-chips-columns\">\n      <ng-content></ng-content>\n      <i class=\"bhi-delete-o\" *ngIf=\"!disabled\" (click)=\"remove()\"></i>\n    </div>\n  ",
                    host: {
                        class: 'novo-row-chip novo-focus-indicator',
                        '[attr.tabindex]': 'disabled ? null : tabIndex',
                        role: 'option',
                        '[class.novo-row-chip-selected]': 'selected',
                        '[class.novo-row-chip-with-trailing-icon]': 'removeIcon',
                        '[class.novo-row-chip-disabled]': 'disabled',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-selected]': 'ariaSelected',
                        '(click)': '_handleClick($event)',
                        '(keydown)': '_handleKeydown($event)',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                    }
                },] }
    ];
    var NovoRowChipsElement = /** @class */ (function (_super) {
        __extends(NovoRowChipsElement, _super);
        function NovoRowChipsElement(element, componentUtils, labels) {
            var _this = _super.call(this, element, componentUtils, labels) || this;
            _this.closeOnSelect = true;
            return _this;
        }
        NovoRowChipsElement.prototype.onKeyDown = function (event) {
            return;
        };
        return NovoRowChipsElement;
    }(NovoChipsElement));
    NovoRowChipsElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-row-chips',
                    providers: [CHIPS_VALUE_ACCESSOR$1],
                    host: {
                        '[class.with-value]': 'items.length > 0',
                    },
                    template: "\n    <div class=\"novo-row-chips-columns\" *ngIf=\"items.length > 0\">\n      <div class=\"column-label\" [style.flexBasis.px]=\"column.width || 200\" *ngFor=\"let column of source.columns\">{{ column.label }}</div>\n    </div>\n    <div class=\"novo-row-chips-empty-message\" *ngIf=\"source.emptyReadOnlyMessage && disablePickerInput && items.length === 0\">\n      {{ source.emptyReadOnlyMessage }}\n    </div>\n    <novo-row-chip\n      *ngFor=\"let item of _items | async\"\n      [type]=\"type || item?.value?.searchEntity\"\n      [class.selected]=\"item == selected\"\n      [disabled]=\"disablePickerInput\"\n      (removed)=\"remove($event, item)\"\n      (selectionChange)=\"select($event, item)\"\n    >\n      <div\n        class=\"column-data\"\n        [class.editable]=\"column.editable\"\n        [style.flexBasis.px]=\"column.width || 200\"\n        *ngFor=\"let column of source.columns\"\n      >\n        <ng-container *ngIf=\"column.editable\">\n          <novo-field>\n            <input novoInput [type]=\"column.type || 'text'\" [(ngModel)]=\"item.value[column.name]\" />\n          </novo-field>\n        </ng-container>\n        <ng-container *ngIf=\"!column.editable\">\n          <span>{{ column.data(item) }}</span>\n        </ng-container>\n      </div>\n    </novo-row-chip>\n    <novo-picker\n      clearValueOnSelect=\"true\"\n      [closeOnSelect]=\"closeOnSelect\"\n      [config]=\"source\"\n      [disablePickerInput]=\"disablePickerInput\"\n      [hidden]=\"disablePickerInput\"\n      [placeholder]=\"placeholder\"\n      [(ngModel)]=\"itemToAdd\"\n      (select)=\"add($event)\"\n      (keydown)=\"onKeyDown($event)\"\n      (focus)=\"onFocus($event)\"\n      (typing)=\"onTyping($event)\"\n      (blur)=\"onTouched($event)\"\n      [selected]=\"items\"\n      *ngIf=\"!maxlength || (maxlength && items.length < maxlength)\"\n    >\n    </novo-picker>\n    <div class=\"preview-container\">\n      <span #preview></span>\n    </div>\n  "
                },] }
    ];
    NovoRowChipsElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ComponentUtils },
        { type: NovoLabelService }
    ]; };
    NovoRowChipsElement.propDecorators = {
        closeOnSelect: [{ type: i0.Input }]
    };

    // NG2
    var ɵ0 = {
        separatorKeyCodes: ["Enter" /* Enter */],
    };
    var NovoChipsModule = /** @class */ (function () {
        function NovoChipsModule() {
        }
        return NovoChipsModule;
    }());
    NovoChipsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoPickerModule, NovoIconModule, NovoFieldModule],
                    declarations: [
                        NovoChipElement,
                        NovoChipAvatar,
                        NovoChipRemove,
                        NovoChipInput,
                        NovoChipList,
                        NovoChipsElement,
                        NovoRowChipElement,
                        NovoRowChipsElement,
                    ],
                    exports: [
                        NovoChipElement,
                        NovoChipAvatar,
                        NovoChipRemove,
                        NovoChipInput,
                        NovoChipList,
                        NovoChipsElement,
                        NovoRowChipElement,
                        NovoRowChipsElement,
                    ],
                    providers: [
                        ErrorStateMatcher,
                        {
                            provide: NOVO_CHIPS_DEFAULT_OPTIONS,
                            useValue: ɵ0,
                        },
                    ],
                },] }
    ];

    // NG2
    // Value accessor for the component (supports ngModel)
    var CKEDITOR_CONTROL_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoCKEditorElement; }),
        multi: true,
    };
    /**
     * CKEditor component
     * Usage :
     *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
     */
    var NovoCKEditorElement = /** @class */ (function () {
        function NovoCKEditorElement(zone) {
            this.zone = zone;
            this.startupFocus = false;
            this.fileBrowserImageUploadUrl = '';
            this.disabled = false;
            this.change = new i0.EventEmitter();
            this.ready = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this.paste = new i0.EventEmitter();
            this.loaded = new i0.EventEmitter();
            this._value = '';
        }
        Object.defineProperty(NovoCKEditorElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (v) {
                if (v !== this._value) {
                    this._value = v;
                    this.onChange(v);
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoCKEditorElement.prototype.ngOnDestroy = function () {
            var _this = this;
            if (this.instance) {
                this.instance.focusManager.blur(true); // Remove focus from editor
                setTimeout(function () {
                    _this.instance.removeAllListeners();
                    var aInstance = CKEDITOR.instances[_this.instance.name];
                    if (aInstance) {
                        aInstance.destroy();
                    }
                    _this.instance.destroy();
                    _this.instance = null;
                });
            }
        };
        NovoCKEditorElement.prototype.ngAfterViewInit = function () {
            var config = Object.assign(this.getBaseConfig(), this.config);
            if (this.startupFocus) {
                config.startupFocus = true;
            }
            if (this.disabled) {
                config.readOnly = true;
            }
            this.ckeditorInit(config);
        };
        NovoCKEditorElement.prototype.updateValue = function (value) {
            var _this = this;
            this.zone.run(function () {
                _this.value = value;
                _this.onChange(value);
                _this.onTouched();
                _this.change.emit(value);
            });
        };
        NovoCKEditorElement.prototype.ckeditorInit = function (config) {
            var _this = this;
            if (!CKEDITOR) {
                console.error('Make sure to include CKEditor sources in your dependencies!');
                return;
            }
            // CKEditor replace textarea
            this.instance = CKEDITOR.replace(this.host.nativeElement, config);
            // Set initial value
            this.instance.setData(this.value);
            // listen for instanceReady event
            this.instance.on('instanceReady', function (evt) {
                // send the evt to the EventEmitter
                _this.ready.emit(evt);
            });
            // CKEditor change event
            this.instance.on('change', function () {
                _this.onTouched();
                var value = _this.instance.getData();
                // Debounce update
                if (_this.debounce) {
                    if (_this.debounceTimeout) {
                        clearTimeout(_this.debounceTimeout);
                    }
                    _this.debounceTimeout = setTimeout(function () {
                        _this.updateValue(value);
                        _this.debounceTimeout = null;
                    }, parseInt(_this.debounce, 10));
                }
                else {
                    _this.updateValue(value);
                }
            });
            this.instance.on('blur', function (event) {
                _this.blur.emit(event);
            });
            this.instance.on('focus', function (event) {
                _this.focus.emit(event);
            });
            this.instance.on('paste', function (event) {
                _this.paste.emit(event);
            });
            this.instance.on('loaded', function (event) {
                _this.loaded.emit(event);
            });
        };
        NovoCKEditorElement.prototype.getBaseConfig = function () {
            var baseConfig = {
                enterMode: CKEDITOR.ENTER_BR,
                shiftEnterMode: CKEDITOR.ENTER_P,
                disableNativeSpellChecker: false,
                removePlugins: 'liststyle,tabletools,contextmenu',
                extraAllowedContent: '*(*){*};table tbody tr td th[*];',
                font_names: 'Arial/Arial, Helvetica, sans-serif;' +
                    'Calibri/Calibri, Verdana, Geneva, sans-serif;' +
                    'Comic Sans MS/Comic Sans MS, cursive;' +
                    'Courier New/Courier New, Courier, monospace;' +
                    'Georgia/Georgia, serif;' +
                    'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;' +
                    'Tahoma/Tahoma, Geneva, sans-serif;' +
                    'Times New Roman/Times New Roman, Times, serif;' +
                    'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;' +
                    'Verdana/Verdana, Geneva, sans-serif',
            };
            var minimalConfig = {
                toolbar: [
                    {
                        name: 'basicstyles',
                        items: [
                            'Styles',
                            'FontSize',
                            'Bold',
                            'Italic',
                            'Underline',
                            'TextColor',
                            '-',
                            'NumberedList',
                            'BulletedList',
                            'Outdent',
                            'Indent',
                            'Link',
                        ],
                    },
                ],
            };
            var extendedConfig = {
                toolbar: [
                    { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                    {
                        name: 'paragraph',
                        items: [
                            'NumberedList',
                            'BulletedList',
                            'Outdent',
                            'Indent',
                            'Blockquote',
                            'JustifyLeft',
                            'JustifyCenter',
                            'JustifyRight',
                            'JustifyBlock',
                            'BidiLtr',
                            'BidiRtl',
                        ],
                    },
                    { name: 'links', items: ['Link'] },
                    { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                    { name: 'tools', items: ['Maximize', 'Source'] },
                    '/',
                    { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                    { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                    { name: 'colors', items: ['TextColor', 'BGColor'] },
                ],
                filebrowserImageUploadUrl: this.fileBrowserImageUploadUrl,
            };
            return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
        };
        NovoCKEditorElement.prototype.writeValue = function (value) {
            this._value = value;
            if (this.instance) {
                this.instance.setData(value);
            }
        };
        NovoCKEditorElement.prototype.onChange = function (value) { };
        NovoCKEditorElement.prototype.onTouched = function (event) { };
        NovoCKEditorElement.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        NovoCKEditorElement.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        NovoCKEditorElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
            if (this.instance) {
                CKEDITOR.instances[this.instance.name].setReadOnly(disabled);
            }
        };
        NovoCKEditorElement.prototype.insertText = function (text) {
            var trimmedText = text.trim();
            this.instance.insertText(trimmedText);
        };
        return NovoCKEditorElement;
    }());
    NovoCKEditorElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-editor',
                    providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                    template: '<textarea [name]="name" [id]="name" #host></textarea>'
                },] }
    ];
    NovoCKEditorElement.ctorParameters = function () { return [
        { type: i0.NgZone }
    ]; };
    NovoCKEditorElement.propDecorators = {
        config: [{ type: i0.Input }],
        debounce: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        minimal: [{ type: i0.Input }],
        startupFocus: [{ type: i0.Input }],
        fileBrowserImageUploadUrl: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        change: [{ type: i0.Output }],
        ready: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        paste: [{ type: i0.Output }],
        loaded: [{ type: i0.Output }],
        host: [{ type: i0.ViewChild, args: ['host',] }],
        value: [{ type: i0.Input }]
    };

    // NG2
    var NovoNovoCKEditorModule = /** @class */ (function () {
        function NovoNovoCKEditorModule() {
        }
        return NovoNovoCKEditorModule;
    }());
    NovoNovoCKEditorModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule],
                    declarations: [NovoCKEditorElement],
                    exports: [NovoCKEditorElement],
                },] }
    ];

    // NG
    // Value accessor for the component (supports ngModel)
    var COLOR_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoColorInputElement; }),
        multi: true,
    };
    var NovoColorInputElement = /** @class */ (function () {
        function NovoColorInputElement(element, labels, cdr) {
            this.element = element;
            this.labels = labels;
            this.cdr = cdr;
            this.placeholder = '#ffffff';
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
            this.change = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this._value = '';
            this.lastValidValue = '';
            this._disabled = false;
            this.onChangeCallback = function (_) {
                // placeholder
            };
            this.onTouchedCallback = function () {
                // placeholder
            };
        }
        Object.defineProperty(NovoColorInputElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this.value !== value) {
                    this._value = value;
                    this._setFormValue(value);
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoColorInputElement.prototype, "disabled", {
            // Disabled State
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        NovoColorInputElement.prototype.ngOnInit = function () { };
        /** BEGIN: Convenient Panel Methods. */
        NovoColorInputElement.prototype.openPanel = function () {
            if (!this.disabled) {
                this.panelOpen ? this.overlay.closePanel() : this.overlay.openPanel();
            }
        };
        NovoColorInputElement.prototype.closePanel = function () {
            this.overlay && this.overlay.closePanel();
        };
        Object.defineProperty(NovoColorInputElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        /** END: Convenient Panel Methods. */
        NovoColorInputElement.prototype._handleKeydown = function (event) {
            if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
                this.closePanel();
                event.stopPropagation();
            }
        };
        NovoColorInputElement.prototype._handleInput = function (event) {
            if (document.activeElement === event.target) {
                // this._handleEvent(event, false);
            }
        };
        NovoColorInputElement.prototype._handleBlur = function (event) {
            this.blurEvent.emit(event);
        };
        NovoColorInputElement.prototype._handleFocus = function (event) {
            this.openPanel();
            this.focusEvent.emit(event);
        };
        NovoColorInputElement.prototype.writeValue = function (value) {
            this.value = value;
            this.cdr.markForCheck();
        };
        NovoColorInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoColorInputElement.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NovoColorInputElement.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NovoColorInputElement.prototype._setFormValue = function (value) {
            if (this.value) {
                // hmm...
            }
        };
        /**
         * This method closes the panel, and if a value is specified, also sets the associated
         * control to that value. It will also mark the control as dirty if this interaction
         * stemmed from the user.
         */
        NovoColorInputElement.prototype.setValueAndClose = function (event) {
            if (event) {
                this.value = event.color.hex;
                this.change.emit(this.value);
                this.closePanel();
            }
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoColorInputElement.prototype.clearValue = function () {
            this.value = '';
            this.change.emit(this.value);
        };
        Object.defineProperty(NovoColorInputElement.prototype, "hasValue", {
            get: function () {
                return !Helpers.isEmpty(this.value);
            },
            enumerable: false,
            configurable: true
        });
        return NovoColorInputElement;
    }());
    NovoColorInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-color-input',
                    providers: [COLOR_VALUE_ACCESSOR],
                    template: "\n    <novo-field>\n      <input\n        novoInput\n        type=\"text\"\n        [name]=\"name\"\n        [placeholder]=\"placeholder\"\n        [disabled]=\"disabled\"\n        [style.color]=\"value\"\n        (focus)=\"_handleFocus($event)\"\n        (keydown)=\"_handleKeydown($event)\"\n        (input)=\"_handleInput($event)\"\n        (blur)=\"_handleBlur($event)\"\n        [(ngModel)]=\"value\"\n        #input\n      />\n      <novo-icon *ngIf=\"!hasValue\" (click)=\"openPanel()\">complex</novo-icon>\n      <novo-icon *ngIf=\"hasValue\" smaller (click)=\"clearValue()\">x</novo-icon>\n    </novo-field>\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-color-picker [(color)]=\"value\" (onChange)=\"setValueAndClose($event)\"></novo-color-picker>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoColorInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoColorInputElement.propDecorators = {
        name: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        blurEvent: [{ type: i0.Output }],
        focusEvent: [{ type: i0.Output }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }],
        change: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.disabled',] }]
    };

    var Color = /** @class */ (function () {
        function Color(value) {
            this.isValid = true;
            if (Color.isHSL(value)) {
                // let { h, s, l, a = 1 } = value as HSLA;
                this.source = rgbToHex(hslToRgb(value));
            }
            else if (Color.isHSV(value)) {
                this.source = rgbToHex(hsvToRgb(value));
            }
            else if (Color.isRGB(value)) {
                this.source = rgbToHex(value);
            }
            else if (Color.isValidHex(value.toString())) {
                this.source = value;
            }
            else {
                this.isValid = false;
                console.error("Invalid color: " + value);
            }
        }
        Object.defineProperty(Color.prototype, "hex", {
            get: function () {
                return this.source;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "rgb", {
            get: function () {
                return hexToRgb(this.source);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "hsl", {
            get: function () {
                return rgbToHsl(hexToRgb(this.source));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(Color.prototype, "hsv", {
            get: function () {
                return rgbToHsv(hexToRgb(this.source));
            },
            enumerable: false,
            configurable: true
        });
        Color.isValidHex = function (h) {
            var clean = h.replace('#', '').toLowerCase();
            var a = parseInt(clean, 16);
            return a.toString(16).padStart(6, '0') === clean;
        };
        Color.isRGB = function (obj) {
            var keys = ['r', 'g', 'b'];
            return keys.every(function (item) { return obj.hasOwnProperty(item); });
        };
        Color.isRGBA = function (obj) {
            var keys = ['r', 'g', 'b', 'a'];
            return keys.every(function (item) { return obj.hasOwnProperty(item); });
        };
        Color.isHSL = function (obj) {
            var keys = ['h', 's', 'l'];
            return keys.every(function (item) { return obj.hasOwnProperty(item); });
        };
        Color.isHSLA = function (obj) {
            var keys = ['h', 's', 'l', 'a'];
            return keys.every(function (item) { return obj.hasOwnProperty(item); });
        };
        Color.isHSV = function (obj) {
            var keys = ['h', 's', 'v'];
            return keys.every(function (item) { return obj.hasOwnProperty(item); });
        };
        Color.isHSVA = function (obj) {
            var keys = ['h', 's', 'v', 'a'];
            return keys.every(function (item) { return obj.hasOwnProperty(item); });
        };
        return Color;
    }());
    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    }
    function rgbToHex(_a) {
        var r = _a.r, g = _a.g, b = _a.b;
        return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
    }
    function hexToRgb(hex) {
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result
            ? {
                r: parseInt(result[1], 16),
                g: parseInt(result[2], 16),
                b: parseInt(result[3], 16),
            }
            : null;
    }
    /**
     * Converts an RGB color value to HSL. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h, s, and l in the set [0, 1].
     *
     * @param   Number  r       The red color value
     * @param   Number  g       The green color value
     * @param   Number  b       The blue color value
     * @return  Array           The HSL representation
     */
    function rgbToHsl(_a) {
        var r = _a.r, g = _a.g, b = _a.b;
        (r /= 255), (g /= 255), (b /= 255);
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h;
        var s;
        var l = (max + min) / 2;
        if (max === min) {
            h = s = 0; // achromatic
        }
        else {
            var d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { h: h, s: s, l: l };
    }
    /**
     * Converts an HSL color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
     * Assumes h, s, and l are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * @param   Number  h       The hue
     * @param   Number  s       The saturation
     * @param   Number  l       The lightness
     * @return  Array           The RGB representation
     */
    function hslToRgb(_a) {
        var h = _a.h, s = _a.s, l = _a.l;
        var r, g, b;
        if (s === 0) {
            r = g = b = l; // achromatic
        }
        else {
            function hue2rgb(p1, q1, t1) {
                if (t1 < 0) {
                    t1 += 1;
                }
                if (t1 > 1) {
                    t1 -= 1;
                }
                if (t1 < 1 / 6) {
                    return p1 + (q1 - p1) * 6 * t1;
                }
                if (t1 < 1 / 2) {
                    return q1;
                }
                if (t1 < 2 / 3) {
                    return p1 + (q1 - p1) * (2 / 3 - t1) * 6;
                }
                return p1;
            }
            var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            var p = 2 * l - q;
            r = hue2rgb(p, q, h + 1 / 3);
            g = hue2rgb(p, q, h);
            b = hue2rgb(p, q, h - 1 / 3);
        }
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255,
        };
    }
    /**
     * Converts an RGB color value to HSV. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
     * Assumes r, g, and b are contained in the set [0, 255] and
     * returns h, s, and v in the set [0, 1].
     *
     * @param   Number  r       The red color value
     * @param   Number  g       The green color value
     * @param   Number  b       The blue color value
     * @return  Array           The HSV representation
     */
    function rgbToHsv(_a) {
        var r = _a.r, g = _a.g, b = _a.b;
        (r = r / 255), (g = g / 255), (b = b / 255);
        var max = Math.max(r, g, b);
        var min = Math.min(r, g, b);
        var h;
        var s;
        var v = max;
        var d = max - min;
        s = max === 0 ? 0 : d / max;
        if (max === min) {
            h = 0; // achromatic
        }
        else {
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return { h: h, s: s, v: v };
    }
    /**
     * Converts an HSV color value to RGB. Conversion formula
     * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
     * Assumes h, s, and v are contained in the set [0, 1] and
     * returns r, g, and b in the set [0, 255].
     *
     * @param   Number  h       The hue
     * @param   Number  s       The saturation
     * @param   Number  v       The value
     * @return  Array           The RGB representation
     */
    function hsvToRgb(_a) {
        var h = _a.h, s = _a.s, v = _a.v;
        var r, g, b;
        var i = Math.floor(h * 6);
        var f = h * 6 - i;
        var p = v * (1 - s);
        var q = v * (1 - f * s);
        var t = v * (1 - (1 - f) * s);
        switch (i % 6) {
            case 0:
                (r = v), (g = t), (b = p);
                break;
            case 1:
                (r = q), (g = v), (b = p);
                break;
            case 2:
                (r = p), (g = v), (b = t);
                break;
            case 3:
                (r = p), (g = q), (b = v);
                break;
            case 4:
                (r = t), (g = p), (b = v);
                break;
            case 5:
                (r = v), (g = p), (b = q);
                break;
        }
        return {
            r: r * 255,
            g: g * 255,
            b: b * 255,
        };
    }

    var NovoColorPickerComponent = /** @class */ (function () {
        function NovoColorPickerComponent() {
            /** Pixel value for picker width */
            this.width = 276;
            /** Color squares to display */
            this.colors = ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'];
            this.color = {
                h: 250,
                s: 0.5,
                l: 0.2,
                a: 1,
            };
            this.onChange = new i0.EventEmitter();
            this.onChangeComplete = new i0.EventEmitter();
            this.onSwatchHover = new i0.EventEmitter();
            this.swatchStyle = {
                width: '30px',
                height: '30px',
                borderRadius: '4px',
                fontSize: '0',
            };
            this.input = {
                borderRadius: '4px',
                borderBottomLeftRadius: '0',
                borderTopLeftRadius: '0',
                border: '1px solid #e6ecf0',
                boxSizing: 'border-box',
                display: 'inline',
                fontSize: '14px',
                height: '30px',
                padding: '0',
                paddingLeft: '6px',
                width: '100%',
                color: '#657786',
            };
        }
        NovoColorPickerComponent.prototype.focus = function (color) {
            return { boxShadow: "0 0 4px " + color };
        };
        NovoColorPickerComponent.prototype.handleBlockChange = function (_a) {
            var hex = _a.hex, $event = _a.$event;
            if (Color.isValidHex(hex)) {
                // this.hex = hex;
                this.handleChange({ hex: hex, source: 'hex' }, $event);
            }
        };
        NovoColorPickerComponent.prototype.handleValueChange = function (_a) {
            var data = _a.data, $event = _a.$event;
            this.handleBlockChange({ hex: data, $event: $event });
        };
        NovoColorPickerComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.changes = this.onChange.pipe(operators.debounceTime(100)).subscribe(function (x) { return _this.onChangeComplete.emit(x); });
            this.setState(new Color(this.color));
        };
        NovoColorPickerComponent.prototype.ngOnChanges = function () {
            this.setState(new Color(this.color));
        };
        NovoColorPickerComponent.prototype.ngOnDestroy = function () {
            this.changes.unsubscribe();
        };
        NovoColorPickerComponent.prototype.setState = function (data) {
            this.currentColor = data;
            this.hsl = data.hsl;
            this.hsv = data.hsv;
            this.rgb = data.rgb;
            this.hex = data.hex;
            this.afterValidChange();
        };
        NovoColorPickerComponent.prototype.handleChange = function (data, $event) {
            var color = new Color(data.hex);
            if (color.isValid) {
                this.setState(color);
                this.onChange.emit({ color: color, $event: $event });
                this.afterValidChange();
            }
        };
        /** hook for components after a complete change */
        NovoColorPickerComponent.prototype.afterValidChange = function () { };
        NovoColorPickerComponent.prototype.handleSwatchHover = function ($event) {
            var color = new Color($event.hex);
            if (color.isValid) {
                this.setState(color);
                this.onSwatchHover.emit({ color: color, $event: $event });
            }
        };
        return NovoColorPickerComponent;
    }());
    NovoColorPickerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-color-picker',
                    template: "\n    <div class=\"novo-color-preview\" [style.backgroundColor]=\"currentColor.hex\">\n      <div class=\"novo-color-preview-text\">{{ hex }}</div>\n    </div>\n    <div class=\"novo-color-swatches\">\n      <novo-color-swatch\n        *ngFor=\"let color of colors\"\n        [color]=\"color\"\n        (onClick)=\"handleBlockChange($event)\"\n        (onHover)=\"handleSwatchHover($event)\"\n      ></novo-color-swatch>\n    </div>\n    <div class=\"novo-color-input\">\n      <input [value]=\"hex.replace('#', '')\" (onChange)=\"handleValueChange($event)\" />\n    </div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    preserveWhitespaces: false,
                    styles: [":host{background-color:var(--background-bright,#fff);border-radius:.4rem;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);cursor:default;display:grid;grid-template-rows:6rem 1fr -webkit-min-content;grid-template-rows:6rem 1fr min-content;overflow:auto;transform:translateY(0);transition:all .15s cubic-bezier(.35,0,.25,1);width:18rem}:host .novo-color-preview{align-items:center;display:flex;justify-content:center}:host .novo-color-swatches{display:grid;grid-auto-rows:2.4rem;grid-gap:.4rem;grid-template-columns:repeat(6,2.4rem);justify-content:center;margin:.4rem 0}:host .novo-color-input{padding:.4rem .8rem}"]
                },] }
    ];
    NovoColorPickerComponent.propDecorators = {
        width: [{ type: i0.Input }],
        colors: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        onChange: [{ type: i0.Output }],
        onChangeComplete: [{ type: i0.Output }],
        onSwatchHover: [{ type: i0.Output }]
    };

    var NovoColorSwatchComponent = /** @class */ (function () {
        function NovoColorSwatchComponent() {
            this.style = {};
            this.focusStyle = {};
            this.onClick = new i0.EventEmitter();
            this.onHover = new i0.EventEmitter();
            this.divStyles = {};
            this.focusStyles = {};
            this.inFocus = false;
        }
        NovoColorSwatchComponent.prototype.ngOnInit = function () {
            this.divStyles = Object.assign({ background: this.color, height: '100%', width: '100%', cursor: 'pointer', position: 'relative', outline: 'none' }, this.style);
        };
        NovoColorSwatchComponent.prototype.currentStyles = function () {
            this.focusStyles = Object.assign(Object.assign({}, this.divStyles), this.focusStyle);
            return this.focus || this.inFocus ? this.focusStyles : this.divStyles;
        };
        NovoColorSwatchComponent.prototype.handleFocusOut = function () {
            this.inFocus = false;
        };
        NovoColorSwatchComponent.prototype.handleFocus = function () {
            this.inFocus = true;
        };
        NovoColorSwatchComponent.prototype.handleHover = function (hex, $event) {
            this.onHover.emit({ hex: hex, $event: $event });
        };
        NovoColorSwatchComponent.prototype.handleClick = function (hex, $event) {
            this.onClick.emit({ hex: hex, $event: $event });
        };
        return NovoColorSwatchComponent;
    }());
    NovoColorSwatchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-color-swatch',
                    template: "\n    <div\n      class=\"swatch\"\n      [ngStyle]=\"currentStyles()\"\n      [attr.title]=\"color\"\n      (click)=\"handleClick(color, $event)\"\n      (keydown.enter)=\"handleClick(color, $event)\"\n      (focus)=\"handleFocus()\"\n      (blur)=\"handleFocusOut()\"\n      (mouseover)=\"handleHover(color, $event)\"\n      tabindex=\"0\"\n    >\n      <ng-content></ng-content>\n    </div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: ["\n      .swatch {\n        border-radius: 0.4rem;\n      }\n    "]
                },] }
    ];
    NovoColorSwatchComponent.propDecorators = {
        color: [{ type: i0.Input }],
        style: [{ type: i0.Input }],
        focusStyle: [{ type: i0.Input }],
        focus: [{ type: i0.Input }],
        onClick: [{ type: i0.Output }],
        onHover: [{ type: i0.Output }]
    };

    // NG2
    var NovoColorPickerModule = /** @class */ (function () {
        function NovoColorPickerModule() {
        }
        return NovoColorPickerModule;
    }());
    NovoColorPickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule],
                    declarations: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent],
                    exports: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent],
                },] }
    ];

    // NG2
    var NovoToastElement = /** @class */ (function () {
        function NovoToastElement(sanitizer) {
            this.sanitizer = sanitizer;
            this.appearance = 'banner';
            this.theme = 'danger';
            this.icon = 'caution';
            this.hasDialogue = false;
            this.isCloseable = false;
            this.closed = new i0.EventEmitter();
            this.show = false;
            this.animate = false;
            this.parent = null;
            this.launched = false;
            this.onActionPromise = Deferred();
        }
        Object.defineProperty(NovoToastElement.prototype, "message", {
            set: function (m) {
                this._message = this.sanitizer.bypassSecurityTrustHtml(m);
            },
            enumerable: false,
            configurable: true
        });
        NovoToastElement.prototype.ngOnInit = function () {
            if (!this.launched) {
                // clear position and time
                this.position = null;
                this.time = null;
                // set icon and styling
                this.iconClass = "bhi-" + this.icon;
                this.alertTheme = this.theme + " toast-container embedded";
                if (this.hasDialogue) {
                    this.alertTheme += ' dialogue';
                }
            }
        };
        NovoToastElement.prototype.ngOnChanges = function (changes) {
            // set icon and styling
            this.iconClass = "bhi-" + this.icon;
            this.alertTheme = this.theme + " toast-container embedded";
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        };
        NovoToastElement.prototype.clickHandler = function (event) {
            if (!this.isCloseable) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.parent) {
                    this.parent.hide(this);
                }
                else {
                    this.closed.emit({ closed: true });
                }
            }
        };
        NovoToastElement.prototype.close = function (event) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
            else {
                this.closed.emit({ closed: true });
            }
        };
        NovoToastElement.prototype.actionHandler = function (event) {
            this.onActionPromise.resolve(event);
        };
        NovoToastElement.prototype.onAction = function (fn) {
            return this.onActionPromise.then(fn);
        };
        return NovoToastElement;
    }());
    NovoToastElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-toast',
                    host: {
                        '[class]': 'alertTheme',
                        '[class.growl]': 'appearance == "growl"',
                        '[class.banner]': 'appearance == "banner"',
                        '[class.show]': 'show',
                        '[class.animate]': 'animate',
                        '[class.embedded]': 'embedded',
                        '[attr.theme]': 'theme',
                        '(click)': '!isCloseable && clickHandler($event)',
                    },
                    template: "\n    <div class=\"toast-icon\">\n      <i [ngClass]=\"iconClass\"></i>\n    </div>\n    <div class=\"toast-content\">\n      <h5 *ngIf=\"title\">{{ title }}</h5>\n      <p *ngIf=\"_message\" [class.message-only]=\"!title\" [innerHtml]=\"_message\"></p>\n      <div *ngIf=\"link\" class=\"link-generated\">\n        <input type=\"text\" [value]=\"link\" onfocus=\"this.select();\" />\n      </div>\n      <div class=\"dialogue\">\n        <ng-content></ng-content>\n      </div>\n      <div *ngIf=\"action\" class=\"action\">\n        <button theme=\"dialogue\" color=\"white\" (click)=\"actionHandler($event)\">{{ action }}</button>\n      </div>\n    </div>\n    <div class=\"close-icon\" *ngIf=\"isCloseable\" (click)=\"close($event)\">\n      <i class=\"bhi-times\"></i>\n    </div>\n  "
                },] }
    ];
    NovoToastElement.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoToastElement.propDecorators = {
        appearance: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        action: [{ type: i0.Input }],
        hasDialogue: [{ type: i0.Input }],
        link: [{ type: i0.Input }],
        isCloseable: [{ type: i0.Input }],
        message: [{ type: i0.Input }],
        closed: [{ type: i0.Output }]
    };

    // NG2
    var NovoToastService = /** @class */ (function () {
        function NovoToastService(componentUtils) {
            this.componentUtils = componentUtils;
            this.references = [];
            this.icons = { default: 'bell', success: 'check', info: 'info', warning: 'warning', danger: 'remove' };
            this.defaults = { hideDelay: 3500, position: 'growlTopRight', theme: 'default' };
        }
        Object.defineProperty(NovoToastService.prototype, "parentViewContainer", {
            set: function (view) {
                this._parentViewContainer = view;
            },
            enumerable: false,
            configurable: true
        });
        NovoToastService.prototype.alert = function (options, toastElement) {
            var _this = this;
            if (toastElement === void 0) { toastElement = NovoToastElement; }
            return new Promise(function (resolve) {
                if (!_this._parentViewContainer) {
                    console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                    return;
                }
                var toast = _this.componentUtils.append(toastElement, _this._parentViewContainer);
                _this.references.push(toast);
                _this.handleAlert(toast.instance, options);
                resolve(toast.instance);
            });
        };
        NovoToastService.prototype.isVisible = function (toast) {
            return toast.show;
        };
        NovoToastService.prototype.hide = function (toast) {
            var _this = this;
            toast.animate = false;
            setTimeout(function () {
                toast.show = false;
                var REF = _this.references.filter(function (x) { return x.instance === toast; })[0];
                if (REF) {
                    _this.references.splice(_this.references.indexOf(REF), 1);
                    REF.destroy();
                }
            }, 300);
        };
        NovoToastService.prototype.handleAlert = function (toast, options) {
            var _this = this;
            this.setToastOnSession(toast, options);
            setTimeout(function () {
                _this.show(toast);
            }, 20);
            if (!toast.isCloseable) {
                this.toastTimer(toast);
            }
        };
        NovoToastService.prototype.setToastOnSession = function (toast, opts) {
            var OPTIONS = typeof opts === 'object' ? opts : {};
            toast.parent = this;
            toast.title = OPTIONS.title || '';
            toast.message = OPTIONS.message || '';
            toast.action = OPTIONS.action || null;
            toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
            toast.link = OPTIONS.link || '';
            toast.isCloseable = OPTIONS.isCloseable || false;
            var CUSTOM_CLASS = OPTIONS.customClass || '';
            var ALERT_STYLE = OPTIONS.accent ? "novo-accent-" + OPTIONS.accent : OPTIONS.theme || this.defaults.theme;
            var ALERT_POSITION = OPTIONS.position || this.defaults.position;
            var ALERT_ICON = OPTIONS.icon || this.icons.default;
            toast.iconClass = "bhi-" + ALERT_ICON;
            toast.launched = true;
            toast.alertTheme = ALERT_STYLE + " " + ALERT_POSITION + " " + CUSTOM_CLASS + " toast-container launched";
        };
        NovoToastService.prototype.show = function (toast) {
            toast.show = true;
            setTimeout(addClass, 25);
            /**
             * Adds animate class to be called after a timeout
             **/
            function addClass() {
                toast.animate = true;
            }
        };
        NovoToastService.prototype.toastTimer = function (toast) {
            var _this = this;
            if (toast.hideDelay < 0) {
                return;
            }
            setTimeout(function () {
                _this.hide(toast);
            }, toast.hideDelay);
        };
        return NovoToastService;
    }());
    NovoToastService.decorators = [
        { type: i0.Injectable }
    ];
    NovoToastService.ctorParameters = function () { return [
        { type: ComponentUtils }
    ]; };

    var NovoDataTableFilterUtils = /** @class */ (function () {
        function NovoDataTableFilterUtils() {
        }
        NovoDataTableFilterUtils.constructFilter = function (filter, type, multiSelect) {
            var actualFilter = filter;
            if (filter) {
                if (type && type === 'date') {
                    if (filter.startDate && filter.endDate) {
                        actualFilter = {
                            min: dateFns.startOfDay(filter.startDate.date),
                            max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(filter.endDate.date), 1)),
                        };
                    }
                    else {
                        actualFilter = {
                            min: filter.min ? dateFns.addDays(dateFns.startOfToday(), filter.min) : dateFns.startOfToday(),
                            max: filter.max ? dateFns.addDays(dateFns.endOfToday(), filter.max) : dateFns.endOfToday(),
                        };
                    }
                }
                if (multiSelect && Array.isArray(filter)) {
                    actualFilter = filter.map(function (filterItem) {
                        if (filterItem && filterItem.hasOwnProperty('value')) {
                            return filterItem.value;
                        }
                        return filterItem;
                    });
                }
                else if (actualFilter && actualFilter.hasOwnProperty('value')) {
                    actualFilter = filter.value;
                }
            }
            return actualFilter;
        };
        return NovoDataTableFilterUtils;
    }());

    var DataTableState = /** @class */ (function () {
        function DataTableState() {
            this.selectionSource = new rxjs.Subject();
            this.paginationSource = new rxjs.Subject();
            this.sortFilterSource = new rxjs.Subject();
            this.resetSource = new rxjs.Subject();
            this.expandSource = new rxjs.Subject();
            this.allMatchingSelectedSource = new rxjs.Subject();
            this.dataLoaded = new rxjs.Subject();
            this.sort = undefined;
            this.filter = undefined;
            this.page = 0;
            this.pageSize = undefined;
            this.globalSearch = undefined;
            this.selectedRows = new Map();
            this.expandedRows = new Set();
            this.isForceRefresh = false;
            this.updates = new i0.EventEmitter();
            this.retainSelected = false;
        }
        Object.defineProperty(DataTableState.prototype, "userFiltered", {
            get: function () {
                return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataTableState.prototype, "userFilteredInternal", {
            get: function () {
                return !!(this.filter || this.sort || this.globalSearch);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataTableState.prototype, "selected", {
            get: function () {
                return Array.from(this.selectedRows.values());
            },
            enumerable: false,
            configurable: true
        });
        DataTableState.prototype.reset = function (fireUpdate, persistUserFilters) {
            if (fireUpdate === void 0) { fireUpdate = true; }
            if (!persistUserFilters) {
                this.sort = undefined;
                this.globalSearch = undefined;
                this.filter = undefined;
            }
            this.page = 0;
            if (!this.retainSelected) {
                this.selectedRows.clear();
                this.resetSource.next();
            }
            this.onSortFilterChange();
            this.retainSelected = false;
            if (fireUpdate) {
                this.updates.emit({
                    sort: this.sort,
                    filter: this.filter,
                    globalSearch: this.globalSearch,
                });
            }
        };
        DataTableState.prototype.clearSort = function (fireUpdate) {
            if (fireUpdate === void 0) { fireUpdate = true; }
            this.sort = undefined;
            this.page = 0;
            this.checkRetainment('sort');
            this.reset(fireUpdate, true);
            this.onSortFilterChange();
            if (fireUpdate) {
                this.updates.emit({
                    sort: this.sort,
                    filter: this.filter,
                    globalSearch: this.globalSearch,
                });
            }
        };
        DataTableState.prototype.clearFilter = function (fireUpdate) {
            if (fireUpdate === void 0) { fireUpdate = true; }
            this.filter = undefined;
            this.globalSearch = undefined;
            this.page = 0;
            this.checkRetainment('filter');
            this.reset(fireUpdate, true);
            this.onSortFilterChange();
            if (fireUpdate) {
                this.updates.emit({
                    sort: this.sort,
                    filter: this.filter,
                    globalSearch: this.globalSearch,
                });
            }
        };
        DataTableState.prototype.clearSelected = function (fireUpdate) {
            if (fireUpdate === void 0) { fireUpdate = true; }
            this.allMatchingSelectedSource.next(false);
            this.globalSearch = undefined;
            this.page = 0;
            this.reset(fireUpdate, true);
            this.onSelectionChange();
            if (fireUpdate) {
                this.updates.emit({
                    sort: this.sort,
                    filter: this.filter,
                    globalSearch: this.globalSearch,
                });
            }
        };
        DataTableState.prototype.onSelectionChange = function () {
            this.selectionSource.next();
        };
        DataTableState.prototype.onExpandChange = function (targetId) {
            this.expandSource.next(targetId);
        };
        DataTableState.prototype.onPaginationChange = function (isPageSizeChange, pageSize) {
            this.checkRetainment('page');
            this.paginationSource.next({ isPageSizeChange: isPageSizeChange, pageSize: pageSize });
        };
        DataTableState.prototype.onSortFilterChange = function () {
            this.checkRetainment('sort');
            this.checkRetainment('filter');
            this.sortFilterSource.next({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        };
        DataTableState.prototype.setInitialSortFilter = function (preferences) {
            if (preferences) {
                if (preferences.sort) {
                    this.sort = preferences.sort;
                }
                if (preferences.filter) {
                    var filters = Helpers.convertToArray(preferences.filter);
                    filters.forEach(function (filter) {
                        filter.value =
                            filter.selectedOption && filter.type
                                ? NovoDataTableFilterUtils.constructFilter(filter.selectedOption, filter.type)
                                : filter.value;
                    });
                    this.filter = filters;
                }
            }
        };
        DataTableState.prototype.checkRetainment = function (caller, allMatchingSelected) {
            if (allMatchingSelected === void 0) { allMatchingSelected = false; }
            var _a;
            this.retainSelected = ((_a = this.selectionOptions) === null || _a === void 0 ? void 0 : _a.some(function (option) { return option.label === caller; })) || this.retainSelected || allMatchingSelected;
        };
        return DataTableState;
    }());
    DataTableState.decorators = [
        { type: i0.Injectable }
    ];

    (function (SortDirection) {
        SortDirection["ASC"] = "ascending";
        SortDirection["DESC"] = "descending";
        SortDirection["NONE"] = "none";
    })(exports.SortDirection || (exports.SortDirection = {}));

    var activeStyle = { opacity: 1, pointerEvents: 'all', top: 0 };
    var inactiveStyle = { opacity: 0, pointerEvents: 'none' };
    /** Animation that moves the sort indicator. */
    var sortAscAnim = animations.trigger('sortAsc', [
        // ...
        animations.state(exports.SortDirection.ASC, animations.style(activeStyle)),
        animations.state(exports.SortDirection.DESC, animations.style(inactiveStyle)),
        animations.state(exports.SortDirection.NONE, animations.style(inactiveStyle)),
        animations.transition('* => ascending', [animations.animate('1s')]),
        animations.transition('ascending => *', [animations.animate('0.5s')]),
    ]);
    var sortDescAnim = animations.trigger('sortDesc', [
        // ...
        animations.state(exports.SortDirection.ASC, animations.style(inactiveStyle)),
        animations.state(exports.SortDirection.DESC, animations.style(activeStyle)),
        animations.state(exports.SortDirection.NONE, animations.style(inactiveStyle)),
        animations.transition('* => descending', [animations.animate('1s')]),
        animations.transition('descending => *', [animations.animate('0.5s')]),
    ]);
    var sortNoneAnim = animations.trigger('sortNone', [
        // ...
        animations.state(exports.SortDirection.ASC, animations.style(inactiveStyle)),
        animations.state(exports.SortDirection.DESC, animations.style(inactiveStyle)),
        animations.state(exports.SortDirection.NONE, animations.style(activeStyle)),
        animations.transition('* => none', [animations.animate('1s')]),
        animations.transition('none => *', [animations.animate('0.5s')]),
    ]);

    var NovoDataTableSortButton = /** @class */ (function () {
        function NovoDataTableSortButton(state, ref, labels) {
            this.state = state;
            this.ref = ref;
            this.labels = labels;
            this.sortChange = new i0.EventEmitter();
            this.SortDirection = exports.SortDirection;
            this._value = exports.SortDirection.NONE;
        }
        Object.defineProperty(NovoDataTableSortButton.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTableSortButton.prototype, "isActive", {
            get: function () {
                return this.value !== exports.SortDirection.NONE;
            },
            enumerable: false,
            configurable: true
        });
        NovoDataTableSortButton.prototype.changeSort = function (dir) {
            this.value = dir;
            this.sortChange.emit(dir);
        };
        NovoDataTableSortButton.prototype.clearSort = function () {
            this.state.clearSort();
            this.sortChange.emit(exports.SortDirection.NONE);
        };
        return NovoDataTableSortButton;
    }());
    NovoDataTableSortButton.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-sort-button',
                    template: "<novo-icon\n  class=\"novo-sort-asc-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortAsc]=\"value\"\n  (click)=\"changeSort(SortDirection.DESC)\">arrow-up</novo-icon>\n<novo-icon\n  class=\"novo-sort-desc-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortDesc]=\"value\"\n  (click)=\"changeSort(SortDirection.NONE)\">arrow-down</novo-icon>\n<novo-icon\n  class=\"novo-sortable-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortNone]=\"value\"\n  (click)=\"changeSort(SortDirection.ASC)\">sortable</novo-icon>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    animations: [sortAscAnim, sortDescAnim, sortNoneAnim],
                    styles: [":host{cursor:pointer;display:inline-flex;height:1.6rem;position:relative;width:1.6rem}:host novo-icon{color:var(--text-muted);opacity:0;position:absolute}:host novo-icon:hover{color:var(--selection)}:host .novo-sort-asc-icon{color:var(--selection);top:10px}:host .novo-sort-desc-icon{color:var(--selection);top:-10px}"]
                },] }
    ];
    NovoDataTableSortButton.ctorParameters = function () { return [
        { type: DataTableState },
        { type: i0.ChangeDetectorRef },
        { type: NovoLabelService }
    ]; };
    NovoDataTableSortButton.propDecorators = {
        sortChange: [{ type: i0.Output }],
        value: [{ type: i0.Input }]
    };

    var NovoDataTableSortFilter = /** @class */ (function () {
        function NovoDataTableSortFilter(state) {
            this.state = state;
        }
        NovoDataTableSortFilter.prototype.filter = function (id, type, value, transform, allowMultipleFilters, selectedOption) {
            if (allowMultipleFilters === void 0) { allowMultipleFilters = false; }
            var filter;
            if (allowMultipleFilters) {
                filter = this.resolveMultiFilter(id, type, value, transform, selectedOption);
            }
            else {
                if (!Helpers.isBlank(value)) {
                    filter = Object.assign({ id: id, type: type, value: value, transform: transform }, (selectedOption && { selectedOption: selectedOption }));
                }
                else {
                    filter = undefined;
                }
            }
            this.state.filter = filter;
            this.state.checkRetainment('filter');
            this.state.reset(false, true);
            this.state.updates.next({ filter: filter, sort: this.state.sort });
            this.state.onSortFilterChange();
        };
        NovoDataTableSortFilter.prototype.sort = function (id, value, transform) {
            var sort = { id: id, value: value, transform: transform };
            this.state.sort = sort;
            this.state.checkRetainment('sort');
            this.state.reset(false, true);
            this.state.updates.next({ sort: sort, filter: this.state.filter });
            this.state.onSortFilterChange();
        };
        NovoDataTableSortFilter.prototype.resolveMultiFilter = function (id, type, value, transform, selectedOption) {
            var filter;
            filter = Helpers.convertToArray(this.state.filter);
            var filterIndex = filter.findIndex(function (aFilter) { return aFilter && aFilter.id === id; });
            if (filterIndex > -1) {
                filter.splice(filterIndex, 1);
            }
            if (!Helpers.isBlank(value)) {
                filter = __spread(filter, [Object.assign({ id: id, type: type, value: value, transform: transform }, (selectedOption && { selectedOption: selectedOption }))]);
            }
            if (filter.length < 1) {
                filter = undefined;
            }
            return filter;
        };
        return NovoDataTableSortFilter;
    }());
    NovoDataTableSortFilter.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoDataTableSortFilter]',
                },] }
    ];
    NovoDataTableSortFilter.ctorParameters = function () { return [
        { type: DataTableState }
    ]; };

    var NovoDataTableCellHeader = /** @class */ (function () {
        function NovoDataTableCellHeader(changeDetectorRef, labels, state, renderer, elementRef, _sort, _cdkColumnDef) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.labels = labels;
            this.state = state;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this._sort = _sort;
            this._cdkColumnDef = _cdkColumnDef;
            this.allowMultipleFilters = false;
            this.icon = 'sortable';
            this.filterActive = false;
            this.sortActive = false;
            this.sortValue = exports.SortDirection.NONE;
            this.showCustomRange = false;
            this.multiSelect = false;
            this.multiSelectedOptions = [];
            this.multiSelectedOptionIsHidden = [];
            this.optionFilter = '';
            this.error = false;
            this.subscriptions = [];
            this._rerenderSubscription = state.updates.subscribe(function (change) { return _this.checkSortFilterState(change); });
        }
        Object.defineProperty(NovoDataTableCellHeader.prototype, "column", {
            set: function (column) {
                this._column = column;
                this.label = column.type === 'action' ? '' : column.label;
                this.labelIcon = column.labelIcon;
                this.config = {
                    sortable: !!column.sortable,
                    filterable: !!column.filterable,
                    resizable: !!column.resizable,
                };
                this.resizable = this.config.resizable;
                var transforms = {};
                if (column.filterable && Helpers.isObject(column.filterable)) {
                    this.config.filterConfig = column.filterable;
                    if (!this.config.filterConfig.type) {
                        this.config.filterConfig = { type: 'text' };
                    }
                    if (column.filterable.transform) {
                        transforms.filter = column.filterable.transform;
                    }
                }
                else {
                    this.config.filterConfig = { type: 'text' };
                }
                if (column.sortable && Helpers.isObject(column.sortable)) {
                    if (column.sortable.transform) {
                        transforms.sort = column.sortable.transform;
                    }
                }
                if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
                    this.config.filterConfig.options = this.getDefaultDateFilterOptions();
                }
                this.config.transforms = transforms;
            },
            enumerable: false,
            configurable: true
        });
        NovoDataTableCellHeader.prototype.ngOnInit = function () {
            if (this._cdkColumnDef) {
                this.id = this._cdkColumnDef.name;
            }
            this.setupFilterOptions();
            this.changeDetectorRef.markForCheck();
        };
        NovoDataTableCellHeader.prototype.setupFilterOptions = function () {
            this.checkSortFilterState({ filter: this.state.filter, sort: this.state.sort }, true);
            this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
            if (this.multiSelect) {
                this.multiSelectedOptions = this.filter ? __spread(this.filter) : [];
            }
        };
        NovoDataTableCellHeader.prototype.ngOnDestroy = function () {
            this._rerenderSubscription.unsubscribe();
            this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        };
        NovoDataTableCellHeader.prototype.checkSortFilterState = function (sortFilterState, initialConfig) {
            var _this = this;
            if (initialConfig === void 0) { initialConfig = false; }
            if (sortFilterState.sort && sortFilterState.sort.id === this.id) {
                this.icon = "sort-" + sortFilterState.sort.value;
                this.sortValue = sortFilterState.sort.value === 'asc' ? exports.SortDirection.ASC : exports.SortDirection.DESC;
                this.sortActive = true;
            }
            else {
                this.icon = 'sortable';
                this.sortValue = exports.SortDirection.NONE;
                this.sortActive = false;
            }
            var tableFilter = Helpers.convertToArray(sortFilterState.filter);
            var thisFilter = tableFilter.find(function (filter) { return filter && filter.id === _this.id; });
            if (thisFilter) {
                this.filterActive = true;
                if (initialConfig && thisFilter.type === 'date' && thisFilter.selectedOption) {
                    this.activeDateFilter = thisFilter.selectedOption.label || this.labels.customDateRange;
                }
                this.filter = thisFilter.value;
            }
            else {
                this.filterActive = false;
                this.filter = undefined;
                this.activeDateFilter = undefined;
                this.multiSelectedOptions = [];
            }
            if (this.defaultSort && this.id === this.defaultSort.id) {
                this.icon = "sort-" + this.defaultSort.value;
                this.sortActive = true;
            }
            this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
            if (this.multiSelect) {
                this.multiSelectedOptions = this.filter ? __spread(this.filter) : [];
                if (this.config.filterConfig.options) {
                    if (typeof this.config.filterConfig.options[0] === 'string') {
                        this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map(function (option) { return ({ option: option, hidden: false }); });
                    }
                    else {
                        this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map(function (option) { return ({
                            option: option,
                            hidden: false,
                        }); });
                    }
                }
            }
            this.changeDetectorRef.markForCheck();
        };
        NovoDataTableCellHeader.prototype.isSelected = function (option, optionsList) {
            var _this = this;
            if (optionsList) {
                var optionValue_1 = option.hasOwnProperty('value') ? option.value : option;
                var found = optionsList.find(function (item) { return _this.optionPresentCheck(item, optionValue_1); });
                return found !== undefined;
            }
            return false;
        };
        NovoDataTableCellHeader.prototype.toggleSelection = function (option) {
            var _this = this;
            var optionValue = option.hasOwnProperty('value') ? option.value : option;
            var optionIndex = this.multiSelectedOptions.findIndex(function (item) { return _this.optionPresentCheck(item, optionValue); });
            this.error = false;
            if (optionIndex > -1) {
                this.multiSelectedOptions.splice(optionIndex, 1);
                if (this.optionFilter && !this.getOptionText(option).toLowerCase().startsWith(this.optionFilter.toLowerCase())) {
                    this.multiSelectedOptionIsHidden[this.multiSelectedOptionIsHidden.findIndex(function (record) { return record.option === option; })].hidden = true;
                }
            }
            else {
                this.multiSelectedOptions.push(optionValue);
            }
        };
        NovoDataTableCellHeader.prototype.optionPresentCheck = function (item, optionValue) {
            if (item.hasOwnProperty('value')) {
                return item.value === optionValue;
            }
            else {
                return item === optionValue;
            }
        };
        NovoDataTableCellHeader.prototype.cancel = function () {
            this.multiSelectedOptions = this.filter ? __spread(this.filter) : [];
            this.dropdown.closePanel();
            this.clearOptionFilter();
        };
        NovoDataTableCellHeader.prototype.filterMultiSelect = function () {
            if (this.multiSelectedOptions.length === 0 && !this.filter) {
                this.multiSelectHasVisibleOptions() && this.dropdown ? (this.error = true) : null;
            }
            else {
                this.clearOptionFilter();
                var actualFilter = this.multiSelectedOptions.length > 0 ? __spread(this.multiSelectedOptions) : undefined;
                this.filterData(actualFilter);
                this.dropdown.closePanel();
            }
        };
        NovoDataTableCellHeader.prototype.multiSelectOptionFilter = function (optionFilter) {
            var _this = this;
            this.multiSelectedOptionIsHidden.forEach(function (record) {
                if (record.option) {
                    record.hidden = !(_this.getOptionText(record.option).toLowerCase().startsWith(optionFilter.toLowerCase()) ||
                        _this.isSelected(record.option, _this.multiSelectedOptions));
                }
            });
        };
        NovoDataTableCellHeader.prototype.multiSelectOptionIsHidden = function (option) {
            return this.multiSelectedOptionIsHidden.find(function (record) { return record.option === option; }).hidden;
        };
        NovoDataTableCellHeader.prototype.multiSelectHasVisibleOptions = function () {
            return this.multiSelectedOptionIsHidden.some(function (record) { return !record.hidden; });
        };
        NovoDataTableCellHeader.prototype.getOptionText = function (option) {
            if (typeof option !== 'object') {
                return option.toString();
            }
            else {
                var opt = option;
                return (opt.label.length > 0 ? opt.label : opt.value).toString();
            }
        };
        NovoDataTableCellHeader.prototype.multiSelectOptionFilterHandleKeydown = function (event) {
            if (this.multiSelect) {
                this.error = false;
                if (this.dropdown.panelOpen && event.key === "Escape" /* Escape */) {
                    // escape = clear text box and close
                    Helpers.swallowEvent(event);
                    this.clearOptionFilter();
                    this.dropdown.closePanel();
                }
                else if (event.key === "Enter" /* Enter */) {
                    Helpers.swallowEvent(event);
                    this.filterMultiSelect();
                }
                else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
                    (event.keyCode >= 96 && event.keyCode <= 105) ||
                    (event.keyCode >= 48 && event.keyCode <= 57)) {
                    this.optionFilterInput.nativeElement.focus();
                }
            }
        };
        NovoDataTableCellHeader.prototype.handleEscapeKeydown = function (event) {
            if (!this.multiSelect) {
                this.error = false;
                this.dropdown.closePanel();
            }
        };
        NovoDataTableCellHeader.prototype.clearOptionFilter = function () {
            this.error = false;
            if (this.optionFilter.length > 0) {
                this.optionFilter = '';
                this.multiSelectedOptionIsHidden.forEach(function (record) {
                    record.hidden = false;
                });
            }
        };
        NovoDataTableCellHeader.prototype.startResize = function (mouseDownEvent) {
            var _this = this;
            mouseDownEvent.preventDefault();
            var minimumWidth = 60 + (this.config.filterable ? 30 : 0) + (this.config.sortable ? 30 : 0);
            var startingWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
            var mouseMoveSubscription = rxjs.fromEvent(window.document, 'mousemove').subscribe(function (middleMouseEvent) {
                var differenceWidth = middleMouseEvent.clientX - mouseDownEvent.clientX;
                var width = startingWidth + differenceWidth;
                if (width < minimumWidth) {
                    width = minimumWidth;
                }
                _this._column.width = width;
                _this.renderer.setStyle(_this.elementRef.nativeElement, 'min-width', _this._column.width + "px");
                _this.renderer.setStyle(_this.elementRef.nativeElement, 'max-width', _this._column.width + "px");
                _this.renderer.setStyle(_this.elementRef.nativeElement, 'width', _this._column.width + "px");
                _this.changeDetectorRef.markForCheck();
                _this.resized.next(_this._column);
            });
            var mouseUpSubscription = rxjs.fromEvent(window.document, 'mouseup').subscribe(function () {
                mouseUpSubscription.unsubscribe();
                mouseMoveSubscription.unsubscribe();
                _this.changeDetectorRef.markForCheck();
            });
            this.subscriptions.push(mouseMoveSubscription);
            this.subscriptions.push(mouseUpSubscription);
        };
        NovoDataTableCellHeader.prototype.toggleCustomRange = function (event, value) {
            Helpers.swallowEvent(event);
            this.showCustomRange = value;
            this.changeDetectorRef.markForCheck();
            this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
        };
        NovoDataTableCellHeader.prototype.focusInput = function () {
            var _this = this;
            if (this.filterInput && this.filterInput.nativeElement) {
                setTimeout(function () { return _this.filterInput.nativeElement.focus(); }, 0);
            }
            if (this.multiSelect && this.dropdown) {
                this.dropdown._handleKeydown = function (event) {
                    _this.multiSelectOptionFilterHandleKeydown(event);
                };
                // setTimeout(() => this.optionFilterInput.nativeElement.focus(), 0);
                this.changeDetectorRef.markForCheck();
            }
        };
        NovoDataTableCellHeader.prototype.sort = function () {
            var _this = this;
            if (this.changeTimeout) {
                clearTimeout(this.changeTimeout);
            }
            this.changeTimeout = setTimeout(function () {
                _this.direction = _this.getNextSortDirection(_this.direction);
                _this._sort.sort(_this.id, _this.direction, _this.config.transforms.sort);
                _this.changeDetectorRef.markForCheck();
            }, 300);
        };
        NovoDataTableCellHeader.prototype.filterData = function (filter) {
            var _this = this;
            var actualFilter = NovoDataTableFilterUtils.constructFilter(filter, this.config.filterConfig.type, this.multiSelect);
            var selectedOption = this.config.filterConfig.type === 'date' && filter ? filter : undefined;
            this.activeDateFilter = selectedOption ? selectedOption.label : undefined;
            if (this.changeTimeout) {
                clearTimeout(this.changeTimeout);
            }
            this.changeTimeout = setTimeout(function () {
                if (actualFilter === '') {
                    actualFilter = undefined;
                }
                _this._sort.filter(_this.id, _this.config.filterConfig.type, actualFilter, _this.config.transforms.filter, _this.allowMultipleFilters, selectedOption);
                _this.changeDetectorRef.markForCheck();
            }, 300);
        };
        NovoDataTableCellHeader.prototype.clearFilter = function () {
            this.filter = undefined;
            this.multiSelectedOptions = [];
            this.activeDateFilter = undefined;
            this.filterData(undefined);
            this.clearOptionFilter();
            this.dropdown.closePanel();
        };
        NovoDataTableCellHeader.prototype.getNextSortDirection = function (direction) {
            if (!direction) {
                return 'asc';
            }
            if (direction === 'asc') {
                return 'desc';
            }
            return 'asc';
        };
        NovoDataTableCellHeader.prototype.getDefaultDateFilterOptions = function () {
            var opts = [
                { label: this.labels.past1Day, min: -1, max: 0 },
                { label: this.labels.past7Days, min: -7, max: 0 },
                { label: this.labels.past30Days, min: -30, max: 0 },
                { label: this.labels.past90Days, min: -90, max: 0 },
                { label: this.labels.past1Year, min: -366, max: 0 },
                { label: this.labels.next1Day, min: 0, max: 1 },
                { label: this.labels.next7Days, min: 0, max: 7 },
                { label: this.labels.next30Days, min: 0, max: 30 },
                { label: this.labels.next90Days, min: 0, max: 90 },
                { label: this.labels.next1Year, min: 0, max: 366 },
            ];
            return opts;
        };
        return NovoDataTableCellHeader;
    }());
    NovoDataTableCellHeader.decorators = [
        { type: i0.Component, args: [{
                    selector: '[novo-data-table-cell-config]',
                    template: "\n    <i class=\"bhi-{{ labelIcon }} label-icon\" *ngIf=\"labelIcon\" data-automation-id=\"novo-data-table-header-icon\"></i>\n    <label data-automation-id=\"novo-data-table-label\">{{ label }}</label>\n    <div>\n      <novo-sort-button\n        *ngIf=\"config.sortable\"\n        data-automation-id=\"novo-data-table-sort\"\n        tooltipPosition=\"left\"\n        [tooltip]=\"labels.sort\"\n        [attr.data-feature-id]=\"'novo-data-table-sort-' + this.id\"\n        (sortChange)=\"sort()\"\n        [value]=\"sortValue\"\n      ></novo-sort-button>\n      <novo-dropdown\n        *ngIf=\"config.filterable\"\n        side=\"right\"\n        parentScrollSelector=\".novo-data-table-container\"\n        containerClass=\"data-table-dropdown\"\n        data-automation-id=\"novo-data-table-filter\"\n        [multiple]=\"multiSelect\"\n      >\n        <novo-icon\n          dropdownTrigger\n          class=\"filter-button\"\n          [class.filter-active]=\"filterActive\"\n          [tooltip]=\"labels.filters\"\n          [tooltipPosition]=\"'left'\"\n          [attr.data-feature-id]=\"'novo-data-table-filter-' + this.id\"\n          (click)=\"focusInput()\"\n          >filter</novo-icon\n        >\n        <div class=\"header\">\n          <novo-label>{{ labels.filters }}</novo-label>\n          <novo-button\n            theme=\"dialogue\"\n            color=\"negative\"\n            size=\"small\"\n            icon=\"times\"\n            (click)=\"clearFilter()\"\n            *ngIf=\"filter !== null && filter !== undefined && filter !== ''\"\n            data-automation-id=\"novo-data-table-filter-clear\"\n          >\n            {{ labels.clear }}\n          </novo-button>\n        </div>\n        <div class=\"optgroup-container\">\n          <ng-container [ngSwitch]=\"config.filterConfig.type\">\n            <novo-optgroup *ngSwitchCase=\"'date'\" (keydown.escape)=\"handleEscapeKeydown($event)\">\n              <ng-container *ngIf=\"!showCustomRange\">\n                <novo-option\n                  [class.active]=\"activeDateFilter === option.label\"\n                  *ngFor=\"let option of config.filterConfig.options\"\n                  (click)=\"filterData(option)\"\n                  [attr.data-automation-id]=\"'novo-data-table-filter-' + option.label\"\n                >\n                  <span>{{ option.label }}</span>\n                  <novo-icon novoSuffix color=\"positive\" *ngIf=\"activeDateFilter === option.label\">check</novo-icon>\n                </novo-option>\n              </ng-container>\n              <novo-option\n                [class.active]=\"labels.customDateRange === activeDateFilter\"\n                (click)=\"toggleCustomRange($event, true)\"\n                *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\"\n              >\n                <span>{{ labels.customDateRange }}</span>\n                <novo-icon novoSuffix color=\"positive\" *ngIf=\"labels.customDateRange === activeDateFilter\">check</novo-icon>\n              </novo-option>\n              <novo-option class=\"calendar-container\" *ngIf=\"showCustomRange\" keepOpen>\n                <novo-stack>\n                  <div class=\"back-link\" (click)=\"toggleCustomRange($event, false)\">\n                    <i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}\n                  </div>\n                  <novo-date-picker\n                    (onSelect)=\"filterData($event)\"\n                    [(ngModel)]=\"filter\"\n                    range=\"true\"\n                    (keydown.escape)=\"handleEscapeKeydown($event)\"\n                  ></novo-date-picker>\n                </novo-stack>\n              </novo-option>\n            </novo-optgroup>\n            <novo-optgroup *ngSwitchCase=\"'select'\">\n              <novo-option\n                [class.active]=\"filter === option\"\n                *ngFor=\"let option of config.filterConfig.options\"\n                (click)=\"filterData(option)\"\n                [attr.data-automation-id]=\"'novo-data-table-filter-' + (option?.label || option)\"\n              >\n                <span>{{ option?.label || option }}</span>\n                <novo-icon novoSuffix color=\"positive\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"\n                  >check</novo-icon\n                >\n              </novo-option>\n            </novo-optgroup>\n            <ng-container *ngSwitchCase=\"'multi-select'\">\n              <novo-optgroup class=\"dropdown-list-filter\" (keydown)=\"multiSelectOptionFilterHandleKeydown($event)\">\n                <novo-option class=\"filter-search\" inert>\n                  <novo-field flex>\n                    <input\n                      novoInput\n                      [(ngModel)]=\"optionFilter\"\n                      (ngModelChange)=\"multiSelectOptionFilter($event)\"\n                      #optionFilterInput\n                      data-automation-id=\"novo-data-table-multi-select-option-filter-input\"\n                    />\n                    <novo-icon novoSuffix>search</novo-icon>\n                    <novo-error class=\"error-text\" [hidden]=\"!error || !multiSelectHasVisibleOptions()\">{{\n                      labels.selectFilterOptions\n                    }}</novo-error>\n                  </novo-field>\n                </novo-option>\n              </novo-optgroup>\n              <novo-optgroup class=\"dropdown-list-options\" (keydown.escape)=\"handleEscapeKeydown($event)\">\n                <novo-option\n                  *ngFor=\"let option of config.filterConfig.options\"\n                  [hidden]=\"multiSelectOptionIsHidden(option)\"\n                  (click)=\"toggleSelection(option)\"\n                  [attr.data-automation-id]=\"'novo-data-table-filter-' + (option?.label || option)\"\n                >\n                  <span>{{ option?.label || option }}</span>\n                  <novo-icon novoSuffix color=\"positive\">{{\n                    isSelected(option, multiSelectedOptions) ? 'checkbox-filled' : 'checkbox-empty'\n                  }}</novo-icon>\n                </novo-option>\n              </novo-optgroup>\n              <novo-option class=\"filter-null-results\" [hidden]=\"multiSelectHasVisibleOptions()\">{{ labels.pickerEmpty }}</novo-option>\n            </ng-container>\n            <novo-optgroup *ngSwitchCase=\"'custom'\">\n              <novo-option class=\"filter-search\" inert>\n                <ng-container *ngTemplateOutlet=\"filterTemplate; context: { $implicit: config }\"></ng-container>\n              </novo-option>\n            </novo-optgroup>\n            <novo-optgroup *ngSwitchDefault (keydown.escape)=\"handleEscapeKeydown($event)\">\n              <novo-option class=\"filter-search\" inert>\n                <novo-field flex fullWidth>\n                  <input\n                    novoInput\n                    [type]=\"config.filterConfig.type\"\n                    [(ngModel)]=\"filter\"\n                    (ngModelChange)=\"filterData($event)\"\n                    #filterInput\n                    data-automation-id=\"novo-data-table-filter-input\"\n                    (keydown.escape)=\"handleEscapeKeydown($event)\"\n                  />\n                  <novo-icon novoSuffix>search</novo-icon>\n                </novo-field>\n              </novo-option>\n            </novo-optgroup>\n          </ng-container>\n        </div>\n        <div class=\"footer\" *ngIf=\"multiSelect\">\n          <novo-button theme=\"dialogue\" color=\"dark\" (click)=\"cancel()\" data-automation-id=\"novo-data-table-multi-select-cancel\">\n            {{ labels.cancel }}\n          </novo-button>\n          <novo-button\n            theme=\"dialogue\"\n            color=\"positive\"\n            (click)=\"filterMultiSelect()\"\n            data-automation-id=\"novo-data-table-multi-select-filter\"\n          >\n            {{ labels.filters }}\n          </novo-button>\n        </div>\n      </novo-dropdown>\n    </div>\n    <div class=\"spacer\"></div>\n    <div class=\"data-table-header-resizable\" *ngIf=\"config.resizable\"><span (mousedown)=\"startResize($event)\">&nbsp;</span></div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableCellHeader.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: NovoLabelService },
        { type: DataTableState },
        { type: i0.Renderer2 },
        { type: i0.ElementRef },
        { type: NovoDataTableSortFilter, decorators: [{ type: i0.Optional }] },
        { type: table.CdkColumnDef, decorators: [{ type: i0.Optional }] }
    ]; };
    NovoDataTableCellHeader.propDecorators = {
        filterInput: [{ type: i0.ViewChild, args: ['filterInput',] }],
        dropdown: [{ type: i0.ViewChild, args: [NovoDropdownElement,] }],
        optionFilterInput: [{ type: i0.ViewChild, args: ['optionFilterInput',] }],
        defaultSort: [{ type: i0.Input }],
        allowMultipleFilters: [{ type: i0.Input }],
        resized: [{ type: i0.Input }],
        filterTemplate: [{ type: i0.Input }],
        resizable: [{ type: i0.HostBinding, args: ['class.resizable',] }],
        column: [{ type: i0.Input, args: ['novo-data-table-cell-config',] }],
        multiSelectOptionFilterHandleKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
        handleEscapeKeydown: [{ type: i0.HostListener, args: ['keydown.escape', ['$event'],] }]
    };

    var DataTableSource = /** @class */ (function (_super) {
        __extends(DataTableSource, _super);
        function DataTableSource(tableService, state, ref) {
            var _this = _super.call(this) || this;
            _this.tableService = tableService;
            _this.state = state;
            _this.ref = ref;
            _this.total = 0;
            _this.currentTotal = 0;
            _this.current = 0;
            _this.loading = false;
            _this.pristine = true;
            _this.totalSet = false;
            return _this;
        }
        Object.defineProperty(DataTableSource.prototype, "totallyEmpty", {
            get: function () {
                return this.total === 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(DataTableSource.prototype, "currentlyEmpty", {
            get: function () {
                return this.current === 0;
            },
            enumerable: false,
            configurable: true
        });
        DataTableSource.prototype.connect = function () {
            var _this = this;
            var displayDataChanges = [this.state.updates];
            return rxjs.merge.apply(void 0, __spread(displayDataChanges)).pipe(operators.startWith(null), operators.switchMap(function () {
                _this.pristine = false;
                _this.loading = true;
                return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
            }), operators.map(function (data) {
                if (!_this.totalSet || _this.state.isForceRefresh) {
                    _this.total = data.total;
                    _this.totalSet = true;
                    _this.state.isForceRefresh = false;
                }
                else if (data.total > _this.total) {
                    _this.total = data.total;
                }
                _this.currentTotal = data.total;
                _this.current = data.results.length;
                _this.data = data.results;
                // Clear selection
                if (!_this.state.retainSelected) {
                    _this.state.selectedRows.clear();
                }
                _this.state.retainSelected = false;
                _this.state.onSelectionChange();
                // Mark changes
                setTimeout(function () {
                    _this.ref.markForCheck();
                    setTimeout(function () {
                        _this.loading = false;
                        _this.state.dataLoaded.next();
                        _this.ref.markForCheck();
                    });
                });
                return data.results;
            }), operators.catchError(function (err, caught) {
                console.error(err, caught); // tslint: disable-line
                _this.loading = false;
                return rxjs.of(null);
            }));
        };
        DataTableSource.prototype.disconnect = function () { };
        return DataTableSource;
    }(table.DataSource));

    var StaticDataTableService = /** @class */ (function () {
        function StaticDataTableService(currentData) {
            if (currentData === void 0) { currentData = []; }
            this.currentData = currentData;
            this.originalData = __spread(currentData);
        }
        StaticDataTableService.prototype.getTableResults = function (sort, filter, page, pageSize, globalSearch, outsideFilter) {
            if (page === void 0) { page = 0; }
            this.currentData = __spread(this.originalData);
            var total = this.originalData.length;
            if (this.currentData.length !== 0) {
                if (globalSearch) {
                    this.currentData = this.currentData.filter(function (item) { return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); }); });
                    total = this.currentData.length;
                }
                if (filter) {
                    this.currentData = this.filterData(this.currentData, filter);
                    total = this.currentData.length;
                }
                if (sort) {
                    this.currentData = this.currentData.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                    total = this.currentData.length;
                }
                if (!sort && !filter && !globalSearch && !outsideFilter) {
                    this.currentData = __spread(this.originalData);
                }
                if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                    this.currentData = this.currentData.slice(page * pageSize, (page + 1) * pageSize);
                }
            }
            return rxjs.of({ results: this.currentData, total: total });
        };
        StaticDataTableService.prototype.filterData = function (currentData, filter) {
            var filters = Helpers.convertToArray(filter);
            filters.forEach(function (aFilter) {
                if (Array.isArray(aFilter.value)) {
                    var values = Helpers.convertToArray(aFilter.value).map(Helpers.escapeString);
                    currentData = currentData.filter(Helpers.filterByField(aFilter.id, values));
                }
                else {
                    var value = Helpers.escapeString(aFilter.value);
                    currentData = currentData.filter(Helpers.filterByField(aFilter.id, value));
                }
            });
            return currentData;
        };
        return StaticDataTableService;
    }());

    var NovoDataTable = /** @class */ (function () {
        function NovoDataTable(labels, ref, state) {
            var _this = this;
            this.labels = labels;
            this.ref = ref;
            this.state = state;
            this.globalSearchHiddenClassToggle = false;
            this.resized = new i0.EventEmitter();
            this.name = 'novo-data-table';
            this.allowMultipleFilters = false;
            this.rowIdentifier = 'id';
            this.activeRowIdentifier = '';
            // prettier-ignore
            this.trackByFn = function (index, item) { return item.id; };
            this.templates = {};
            this.fixedHeader = false;
            this.maxSelected = undefined;
            this.canSelectAll = false;
            this.allMatchingSelected = false;
            this._hideGlobalSearch = true;
            this.preferencesChanged = new i0.EventEmitter();
            this.allSelected = new i0.EventEmitter();
            this.loading = true;
            this.columnToTemplate = {};
            this.columnsLoaded = false;
            this.selection = new Set();
            this.scrollLeft = 0;
            this.expandable = false;
            this.initialized = false;
            this.scrollListenerHandler = this.scrollListener.bind(this);
            this.sortFilterSubscription = this.state.sortFilterSource.subscribe(function (event) {
                if (_this.name !== 'novo-data-table') {
                    _this.preferencesChanged.emit({ name: _this.name, sort: event.sort, filter: event.filter, globalSearch: event.globalSearch });
                    _this.performInteractions('change');
                }
                else {
                    notify('Must have [name] set on data-table to use preferences!');
                }
            });
            this.paginationSubscription = this.state.paginationSource.subscribe(function (event) {
                if (_this.name !== 'novo-data-table') {
                    if (event.isPageSizeChange) {
                        _this.preferencesChanged.emit({ name: _this.name, pageSize: event.pageSize });
                    }
                }
                else {
                    notify('Must have [name] set on data-table to use preferences!');
                }
            });
            this.resetSubscription = this.state.resetSource.subscribe(function () {
                setTimeout(function () {
                    _this.ref.detectChanges();
                }, 300);
            });
            this.allMatchingSelectedSubscription = this.state.allMatchingSelectedSource.subscribe(function (event) {
                _this.allMatchingSelected = event;
            });
        }
        Object.defineProperty(NovoDataTable.prototype, "displayedColumns", {
            get: function () {
                return this._disabledColumns;
            },
            set: function (displayedColumns) {
                var _this = this;
                if (this.displayedColumns && this.displayedColumns.length !== 0) {
                    if (this.name !== 'novo-data-table') {
                        this.preferencesChanged.emit({
                            name: this.name,
                            displayedColumns: displayedColumns,
                        });
                    }
                    else {
                        notify('Must have [name] set on data-table to use preferences!');
                    }
                }
                this._disabledColumns = displayedColumns;
                this.configureLastDisplayedColumn();
                if (this.initialized) {
                    setTimeout(function () {
                        _this.scrollListener();
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "dataTableService", {
            set: function (service) {
                this.loading = false;
                if (!service) {
                    service = new StaticDataTableService([]);
                }
                this.dataSource = new DataTableSource(service, this.state, this.ref);
                this.ref.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "rows", {
            set: function (rows) {
                this.loading = false;
                var service = new StaticDataTableService(rows);
                this.dataSource = new DataTableSource(service, this.state, this.ref);
                this.ref.detectChanges();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "outsideFilter", {
            set: function (outsideFilter) {
                var _this = this;
                // Unsubscribe
                if (this.outsideFilterSubscription) {
                    this.outsideFilterSubscription.unsubscribe();
                }
                if (outsideFilter) {
                    // Re-subscribe
                    this.outsideFilterSubscription = outsideFilter.subscribe(function (filter) {
                        _this.state.outsideFilter = filter;
                        _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                        _this.ref.markForCheck();
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "refreshSubject", {
            set: function (refreshSubject) {
                var _this = this;
                // Unsubscribe
                if (this.refreshSubscription) {
                    this.refreshSubscription.unsubscribe();
                }
                if (refreshSubject) {
                    // Re-subscribe
                    this.refreshSubscription = refreshSubject.subscribe(function (filter) {
                        _this.state.isForceRefresh = true;
                        _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                        _this.ref.markForCheck();
                    });
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "columns", {
            get: function () {
                return this._columns;
            },
            set: function (columns) {
                this._columns = columns;
                this.configureColumns();
                this.performInteractions('init');
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "customFilter", {
            get: function () {
                return this._customFilter;
            },
            set: function (v) {
                this._customFilter = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "hasExandedRows", {
            get: function () {
                return this._hasExandedRows;
            },
            set: function (v) {
                this._hasExandedRows = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "forceShowHeader", {
            get: function () {
                return this._forceShowHeader;
            },
            set: function (v) {
                this._forceShowHeader = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "hideGlobalSearch", {
            get: function () {
                return this._hideGlobalSearch;
            },
            set: function (v) {
                this._hideGlobalSearch = coercion.coerceBooleanProperty(v);
                this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "empty", {
            get: function () {
                return this.dataSource && this.dataSource.totallyEmpty;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTable.prototype, "loadingClass", {
            get: function () {
                return this.loading || (this.dataSource && this.dataSource.loading);
            },
            enumerable: false,
            configurable: true
        });
        NovoDataTable.prototype.modifyCellHeaderMultiSelectFilterOptions = function (column, newOptions) {
            var header = this.cellHeaders.find(function (cellHeader) { return cellHeader.id === column; });
            if (header && header.config && header.config.filterConfig && header.config.filterConfig.options) {
                var filterOptions = header.config.filterConfig.options;
                var optionsToKeep = filterOptions.filter(function (opt) { return header.isSelected(opt, header.multiSelectedOptions) &&
                    !newOptions.find(function (newOpt) { return opt.value && newOpt.value && newOpt.value === opt.value; }); });
                header.config.filterConfig.options = __spread(optionsToKeep, newOptions);
            }
            else {
                header.config.filterConfig.options = newOptions;
            }
            header.setupFilterOptions();
            header.changeDetectorRef.markForCheck();
        };
        NovoDataTable.prototype.ngOnDestroy = function () {
            if (this.outsideFilterSubscription) {
                this.outsideFilterSubscription.unsubscribe();
            }
            if (this.novoDataTableContainer) {
                this.novoDataTableContainer.nativeElement.removeEventListener('scroll', this.scrollListenerHandler);
            }
            if (this.refreshSubscription) {
                this.refreshSubscription.unsubscribe();
            }
            if (this.resetSubscription) {
                this.resetSubscription.unsubscribe();
            }
            if (this.sortFilterSubscription) {
                this.sortFilterSubscription.unsubscribe();
            }
            if (this.allMatchingSelectedSubscription) {
                this.allMatchingSelectedSubscription.unsubscribe();
            }
        };
        NovoDataTable.prototype.ngAfterContentInit = function () {
            var _this = this;
            var _a;
            if (this.displayedColumns && this.displayedColumns.length) {
                this.expandable = this.displayedColumns.includes('expand');
            }
            // Default templates defined here
            this.defaultTemplates.forEach(function (item) {
                // Only override if it doesn't already exist
                if (!_this.templates[item.getType()]) {
                    _this.templates[item.getType()] = item.template;
                }
            });
            // Custom templates passed in
            this.customTemplates.forEach(function (item) {
                // Override anything that is custom and in HTML
                _this.templates[item.getType()] = item.template;
            });
            // Load columns
            this.configureColumns();
            // State
            if (this.paginationOptions && !this.paginationOptions.page) {
                this.paginationOptions.page = 0;
            }
            if (this.paginationOptions && !this.paginationOptions.pageSize) {
                this.paginationOptions.pageSize = 50;
            }
            if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
                this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
            }
            this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
            this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
            this.state.selectionOptions = (_a = this.selectionOptions) !== null && _a !== void 0 ? _a : undefined;
            // Scrolling inside table
            this.novoDataTableContainer.nativeElement.addEventListener('scroll', this.scrollListenerHandler);
            this.initialized = true;
            this.ref.markForCheck();
        };
        NovoDataTable.prototype.onSearchChange = function (term) {
            this.state.globalSearch = term;
            this.state.reset(false, true);
            this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
        };
        NovoDataTable.prototype.trackColumnsBy = function (index, item) {
            return item.id;
        };
        NovoDataTable.prototype.isDisabled = function (check, row) {
            if (check.disabled === true) {
                return true;
            }
            if (check.disabledFunc) {
                return check.disabledFunc(row);
            }
            return false;
        };
        NovoDataTable.prototype.isExpanded = function (row) {
            if (!row) {
                return false;
            }
            return this.state.expandedRows.has("" + row[this.rowIdentifier]);
        };
        NovoDataTable.prototype.expandRow = function (row) {
            var expanded = this.isExpanded(row);
            if (expanded) {
                this.state.expandedRows.delete("" + row[this.rowIdentifier]);
            }
            else {
                this.state.expandedRows.add("" + row[this.rowIdentifier]);
            }
            this.state.onExpandChange(row.id);
        };
        NovoDataTable.prototype.expandRows = function (expand) {
            var _this = this;
            (this.dataSource.data || []).forEach(function (row) {
                if (!expand) {
                    _this.state.expandedRows.delete("" + row[_this.rowIdentifier]);
                }
                else {
                    _this.state.expandedRows.add("" + row[_this.rowIdentifier]);
                }
            });
            this.state.onExpandChange();
        };
        NovoDataTable.prototype.allCurrentRowsExpanded = function () {
            for (var i = 0; i < (this.dataSource.data || []).length; i++) {
                if (!this.isExpanded((this.dataSource.data || [])[i])) {
                    return false;
                }
            }
            return true;
        };
        NovoDataTable.prototype.isSelected = function (row) {
            if (!row) {
                return false;
            }
            return this.state.selectedRows.has("" + row[this.rowIdentifier]);
        };
        NovoDataTable.prototype.selectRow = function (row, origin) {
            var selected = this.isSelected(row);
            if (selected) {
                this.state.selectedRows.delete("" + row[this.rowIdentifier]);
            }
            else {
                if (this.canSelectAll && this.allMatchingSelected && ['onClick'].includes(origin)) {
                    // When all matching records are selected the user could be on another page where all rows only appear selected
                    // Need to reset the rows that are actually selected, select rows on the current page and deselect the chosen record
                    this.state.selectedRows.clear();
                    this.selectRows(true);
                    this.state.selectedRows.delete("" + row[this.rowIdentifier]);
                }
                else {
                    this.state.selectedRows.set("" + row[this.rowIdentifier], row);
                }
            }
            this.state.allMatchingSelectedSource.next(false);
            this.state.onSelectionChange();
        };
        NovoDataTable.prototype.selectRows = function (selected) {
            var _this = this;
            (this.dataSource.data || []).forEach(function (row) {
                if (!selected) {
                    _this.state.selectedRows.delete("" + row[_this.rowIdentifier]);
                }
                else {
                    _this.state.selectedRows.set("" + row[_this.rowIdentifier], row);
                }
            });
            this.state.onSelectionChange();
        };
        NovoDataTable.prototype.allCurrentRowsSelected = function () {
            var _a, _b;
            if (this.allMatchingSelected) {
                return true;
            }
            if (!((_b = (_a = this.dataSource) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length)) {
                return false;
            }
            for (var i = 0; i < (this.dataSource.data || []).length; i++) {
                if (!this.isSelected((this.dataSource.data || [])[i])) {
                    return false;
                }
            }
            return true;
        };
        NovoDataTable.prototype.configureLastDisplayedColumn = function () {
            var _this = this;
            if (this.columns && this.displayedColumns && 0 !== this.columns.length && 0 !== this.displayedColumns.length) {
                this.columns.forEach(function (column) {
                    if (column.initialResizable) {
                        column.resizable = column.initialResizable.resizable;
                        column.width = column.initialResizable.width;
                        column.initialResizable = undefined;
                    }
                });
                var resizableColumns_1 = this.displayedColumns.filter(function (name) {
                    return (_this.columns.findIndex(function (column) {
                        return column.resizable && column.id === name;
                    }) !== -1);
                });
                if (resizableColumns_1 && resizableColumns_1.length > 0) {
                    var lastResizableColumn = this.columns.find(function (column) {
                        return column.id === resizableColumns_1[resizableColumns_1.length - 1];
                    });
                    lastResizableColumn.initialResizable = {
                        resizable: lastResizableColumn.resizable,
                        width: lastResizableColumn.width,
                    };
                    lastResizableColumn.width = undefined;
                    lastResizableColumn.resizable = false;
                }
            }
        };
        NovoDataTable.prototype.configureColumns = function () {
            var _this = this;
            if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
                // Figure the column templates
                this.columns.forEach(function (column) {
                    // Figure the template
                    var templateName;
                    if (column.template) {
                        // Pass it in as template
                        templateName = column.template;
                    }
                    else if (!!_this.templates[column.id]) {
                        // Custom template for the column id
                        templateName = column.id;
                    }
                    else {
                        // Default to the defaulCellTemplate
                        if (column.type === 'action') {
                            if (column.action && column.action.options) {
                                if (!column.action.icon) {
                                    column.action.icon = 'collapse';
                                }
                                templateName = 'dropdownCellTemplate';
                            }
                            else {
                                templateName = 'buttonCellTemplate';
                            }
                        }
                        else {
                            if (column.type === 'link:tel' || column.type === 'link:mailto') {
                                templateName = column.type.split(':')[1] + "CellTemplate";
                            }
                            else {
                                templateName = column.type + "CellTemplate";
                            }
                        }
                    }
                    _this.columnToTemplate[column.id] = _this.templates[templateName];
                });
                this.configureLastDisplayedColumn();
                this.columnsLoaded = true;
            }
        };
        NovoDataTable.prototype.scrollListener = function () {
            var target = this.novoDataTableContainer.nativeElement;
            var left = target.scrollLeft;
            if (left !== this.scrollLeft) {
                this.scrollLeft = target.scrollLeft;
            }
            this.ref.markForCheck();
        };
        NovoDataTable.prototype.performInteractions = function (event) {
            var e_1, _c;
            if (this.listInteractions) {
                try {
                    for (var _d = __values(this.columns), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var column = _e.value;
                        var allListColumnInteractions = this.listInteractions[column.id];
                        var listColumnInteraction = allListColumnInteractions && allListColumnInteractions.find(function (int) { return int.event.includes(event); });
                        if (listColumnInteraction) {
                            listColumnInteraction.script(this, column.id);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        };
        return NovoDataTable;
    }());
    NovoDataTable.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table',
                    animations: [
                        animations.trigger('expand', [
                            animations.state('void', animations.style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                            animations.state('*', animations.style({ height: '*', visibility: 'visible' })),
                            animations.transition('void <=> *', animations.animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ],
                    template: "\n    <header\n      *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\"\n      [class.empty]=\"hideGlobalSearch && !paginationOptions && !templates['customActions']\"\n    >\n      <ng-container *ngTemplateOutlet=\"templates['customHeader']\"></ng-container>\n      <novo-search\n        alwaysOpen=\"true\"\n        (searchChanged)=\"onSearchChange($event)\"\n        [(ngModel)]=\"state.globalSearch\"\n        *ngIf=\"!hideGlobalSearch\"\n        [placeholder]=\"searchOptions?.placeholder\"\n        [hint]=\"searchOptions?.tooltip\"\n      >\n      </novo-search>\n      <novo-data-table-pagination\n        *ngIf=\"paginationOptions\"\n        [theme]=\"paginationOptions.theme\"\n        [length]=\"dataSource?.currentTotal\"\n        [page]=\"paginationOptions.page\"\n        [pageSize]=\"paginationOptions.pageSize\"\n        [pageSizeOptions]=\"paginationOptions.pageSizeOptions\"\n        [dataFeatureId]=\"paginatorDataFeatureId\"\n        [canSelectAll]=\"canSelectAll\"\n        [allMatchingSelected]=\"allMatchingSelected\"\n      >\n      </novo-data-table-pagination>\n      <div class=\"novo-data-table-actions\" *ngIf=\"templates['customActions']\">\n        <ng-container *ngTemplateOutlet=\"templates['customActions']\"></ng-container>\n      </div>\n    </header>\n    <div class=\"novo-data-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-data-table-loading\">\n      <novo-loading></novo-loading>\n    </div>\n    <div class=\"novo-data-table-outside-container\" [ngClass]=\"{ 'novo-data-table-outside-container-fixed': fixedHeader }\">\n      <div class=\"novo-data-table-custom-filter\" *ngIf=\"customFilter\">\n        <ng-container *ngTemplateOutlet=\"templates['customFilter']\"></ng-container>\n      </div>\n      <div\n        #novoDataTableContainer\n        class=\"novo-data-table-container\"\n        [ngClass]=\"{ 'novo-data-table-container-fixed': fixedHeader }\"\n        [class.empty-user-filtered]=\"dataSource?.currentlyEmpty && state.userFiltered\"\n        [class.empty]=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\"\n      >\n        <cdk-table\n          *ngIf=\"columns?.length > 0 && columnsLoaded && dataSource\"\n          [dataSource]=\"dataSource\"\n          [trackBy]=\"trackByFn\"\n          novoDataTableSortFilter\n          [class.expandable]=\"expandable\"\n          [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\"\n          [hidden]=\"dataSource?.totallyEmpty && !state.userFiltered\"\n        >\n          <ng-container cdkColumnDef=\"selection\">\n            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef [maxSelected]=\"maxSelected\"></novo-data-table-checkbox-header-cell>\n            <novo-data-table-checkbox-cell\n              *cdkCellDef=\"let row; let i = index\"\n              [row]=\"row\"\n              [maxSelected]=\"maxSelected\"\n            ></novo-data-table-checkbox-cell>\n          </ng-container>\n          <ng-container cdkColumnDef=\"expand\">\n            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>\n            <novo-data-table-expand-cell *cdkCellDef=\"let row; let i = index\" [row]=\"row\"></novo-data-table-expand-cell>\n          </ng-container>\n          <ng-container *ngFor=\"let column of columns; trackBy: trackColumnsBy\" [cdkColumnDef]=\"column.id\">\n            <novo-data-table-header-cell\n              *cdkHeaderCellDef\n              [column]=\"column\"\n              [filterTemplate]=\"templates['column-filter-' + column.id]\"\n              [novo-data-table-cell-config]=\"column\"\n              [resized]=\"resized\"\n              [defaultSort]=\"defaultSort\"\n              [allowMultipleFilters]=\"allowMultipleFilters\"\n              [class.empty]=\"column?.type === 'action' && !column?.label\"\n              [class.button-header-cell]=\"column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)\"\n              [class.dropdown-header-cell]=\"column?.type === 'action' && column?.action?.options\"\n              [class.fixed-header]=\"fixedHeader\"\n            ></novo-data-table-header-cell>\n            <novo-data-table-cell\n              *cdkCellDef=\"let row\"\n              [resized]=\"resized\"\n              [column]=\"column\"\n              [row]=\"row\"\n              [template]=\"columnToTemplate[column.id]\"\n              [class.empty]=\"column?.type === 'action' && !column?.label\"\n              [class.button-cell]=\"column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)\"\n              [class.dropdown-cell]=\"column?.type === 'action' && column?.action?.options\"\n            ></novo-data-table-cell>\n          </ng-container>\n          <novo-data-table-header-row\n            *cdkHeaderRowDef=\"displayedColumns\"\n            [fixedHeader]=\"fixedHeader\"\n            data-automation-id=\"novo-data-table-header-row\"\n          ></novo-data-table-header-row>\n          <novo-data-table-row\n            *cdkRowDef=\"let row; columns: displayedColumns\"\n            [ngClass]=\"{ active: row[rowIdentifier] == activeRowIdentifier }\"\n            [novoDataTableExpand]=\"detailRowTemplate\"\n            [row]=\"row\"\n            [id]=\"name + '-' + row[rowIdentifier]\"\n            [dataAutomationId]=\"row[rowIdentifier]\"\n          ></novo-data-table-row>\n        </cdk-table>\n        <div class=\"novo-data-table-footer\" *ngIf=\"templates['footer']\">\n          <ng-container *ngTemplateOutlet=\"templates['footer']; context: { $implicit: columns, data: dataSource.data }\"></ng-container>\n        </div>\n        <div\n          class=\"novo-data-table-no-results-container\"\n          [style.left.px]=\"scrollLeft\"\n          *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\"\n        >\n          <div class=\"novo-data-table-empty-message\">\n            <ng-container *ngTemplateOutlet=\"templates['noResultsMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"novo-data-table-empty-container\"\n        *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\"\n      >\n        <div class=\"novo-data-table-empty-message\">\n          <ng-container *ngTemplateOutlet=\"templates['emptyMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <!-- DEFAULT CELL TEMPLATE -->\n    <ng-template novoTemplate=\"textCellTemplate\" let-row let-col=\"col\">\n      <span [style.width.px]=\"col?.width\" [style.min-width.px]=\"col?.width\" [style.max-width.px]=\"col?.width\">{{\n        row[col.id] | dataTableInterpolate: col\n      }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"dateCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"datetimeCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateTimeRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"timeCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableTimeRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"currencyCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableCurrencyRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"bigdecimalCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableBigDecimalRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"numberCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"percentCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col:true }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"linkCellTemplate\" let-row let-col=\"col\">\n      <a\n        [attr.data-feature-id]=\"col?.attributes?.dataFeatureId\"\n        (click)=\"col.handlers?.click({ originalEvent: $event, row: row })\"\n        [style.width.px]=\"col?.width\"\n        [style.min-width.px]=\"col?.width\"\n        [style.max-width.px]=\"col?.width\"\n        >{{ row[col.id] | dataTableInterpolate: col }}</a\n      >\n    </ng-template>\n    <ng-template novoTemplate=\"telCellTemplate\" let-row let-col=\"col\">\n      <a href=\"tel:{{ row[col.id] | dataTableInterpolate: col }}\" [target]=\"col?.attributes?.target\">{{\n        row[col.id] | dataTableInterpolate: col\n      }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"mailtoCellTemplate\" let-row let-col=\"col\">\n      <a href=\"mailto:{{ row[col.id] | dataTableInterpolate: col }}\" [target]=\"col?.attributes?.target\">{{\n        row[col.id] | dataTableInterpolate: col\n      }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"buttonCellTemplate\" let-row let-col=\"col\">\n      <novo-button\n        size=\"small\"\n        theme=\"icon\"\n        [tooltip]=\"col?.action?.tooltip\"\n        tooltipPosition=\"right\"\n        [attr.data-feature-id]=\"col?.attributes?.dataFeatureId\"\n        [disabled]=\"isDisabled(col, row)\"\n        (click)=\"col.handlers?.click({ originalEvent: $event, row: row })\"\n      >\n        <novo-icon>{{ col?.action?.icon }}</novo-icon>\n      </novo-button>\n    </ng-template>\n    <ng-template novoTemplate=\"dropdownCellTemplate\" let-row let-col=\"col\">\n      <novo-dropdown parentScrollSelector=\".novo-data-table-container\" containerClass=\"novo-data-table-dropdown\">\n        <novo-button type=\"button\" theme=\"dialogue\" [icon]=\"col.action.icon\" inverse>{{ col.label }}</novo-button>\n        <novo-optgroup>\n          <novo-option\n            *ngFor=\"let option of col?.action?.options\"\n            (click)=\"option.handlers.click({ originalEvent: $event?.originalEvent, row: row })\"\n            [disabled]=\"isDisabled(option, row)\"\n          >\n            <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n          </novo-option>\n        </novo-optgroup>\n      </novo-dropdown>\n    </ng-template>\n    <ng-template novoTemplate=\"defaultNoResultsMessage\">\n      <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n    </ng-template>\n    <ng-template novoTemplate=\"defaultEmptyMessage\">\n      <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n    </ng-template>\n    <ng-template novoTemplate=\"expandedRow\"> You did not provide an \"expandedRow\" template! </ng-template>\n    <ng-template #detailRowTemplate let-row>\n      <div class=\"novo-data-table-detail-row\" [@expand] style=\"overflow: hidden\">\n        <ng-container *ngTemplateOutlet=\"templates['expandedRow']; context: { $implicit: row }\"></ng-container>\n      </div>\n    </ng-template>\n    <!-- CUSTOM CELLS PASSED IN -->\n    <ng-content></ng-content>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [DataTableState]
                },] }
    ];
    NovoDataTable.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: DataTableState }
    ]; };
    NovoDataTable.propDecorators = {
        globalSearchHiddenClassToggle: [{ type: i0.HostBinding, args: ['class.global-search-hidden',] }],
        customTemplates: [{ type: i0.ContentChildren, args: [NovoTemplate,] }],
        defaultTemplates: [{ type: i0.ViewChildren, args: [NovoTemplate,] }],
        cellHeaders: [{ type: i0.ViewChildren, args: [NovoDataTableCellHeader,] }],
        novoDataTableContainer: [{ type: i0.ViewChild, args: ['novoDataTableContainer',] }],
        resized: [{ type: i0.Output }],
        displayedColumns: [{ type: i0.Input }],
        paginationOptions: [{ type: i0.Input }],
        searchOptions: [{ type: i0.Input }],
        selectionOptions: [{ type: i0.Input }],
        defaultSort: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        allowMultipleFilters: [{ type: i0.Input }],
        rowIdentifier: [{ type: i0.Input }],
        activeRowIdentifier: [{ type: i0.Input }],
        trackByFn: [{ type: i0.Input }],
        templates: [{ type: i0.Input }],
        fixedHeader: [{ type: i0.Input }],
        paginatorDataFeatureId: [{ type: i0.Input }],
        maxSelected: [{ type: i0.Input }],
        canSelectAll: [{ type: i0.Input }],
        allMatchingSelected: [{ type: i0.Input }],
        dataTableService: [{ type: i0.Input }],
        rows: [{ type: i0.Input }],
        outsideFilter: [{ type: i0.Input }],
        refreshSubject: [{ type: i0.Input }],
        columns: [{ type: i0.Input }],
        customFilter: [{ type: i0.Input }],
        hasExandedRows: [{ type: i0.Input }],
        forceShowHeader: [{ type: i0.Input }],
        hideGlobalSearch: [{ type: i0.Input }],
        preferencesChanged: [{ type: i0.Output }],
        allSelected: [{ type: i0.Output }],
        empty: [{ type: i0.HostBinding, args: ['class.empty',] }],
        loadingClass: [{ type: i0.HostBinding, args: ['class.loading',] }],
        listInteractions: [{ type: i0.Input }]
    };

    var NovoDataTableCheckboxHeaderCell = /** @class */ (function (_super) {
        __extends(NovoDataTableCheckboxHeaderCell, _super);
        function NovoDataTableCheckboxHeaderCell(columnDef, elementRef, renderer, dataTable, ref, toaster) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.dataTable = dataTable;
            _this.ref = ref;
            _this.toaster = toaster;
            _this.role = 'columnheader';
            _this.maxSelected = undefined;
            _this.checked = false;
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
            _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
                var _a, _b, _c;
                _this.checked = _this.dataTable.allCurrentRowsSelected() || (((_a = _this.dataTable) === null || _a === void 0 ? void 0 : _a.canSelectAll) && ((_b = _this.dataTable) === null || _b === void 0 ? void 0 : _b.allMatchingSelected));
                if ((_c = _this.dataTable) === null || _c === void 0 ? void 0 : _c.canSelectAll) {
                    _this.selectAllChanged();
                }
                _this.ref.markForCheck();
            });
            _this.paginationSubscription = _this.dataTable.state.paginationSource.subscribe(function (event) {
                var _a, _b, _c, _d;
                if (event.isPageSizeChange) {
                    _this.checked = false;
                    if ((_a = _this.dataTable) === null || _a === void 0 ? void 0 : _a.canSelectAll) {
                        _this.selectAllChanged();
                    }
                    _this.dataTable.selectRows(false);
                    _this.dataTable.state.checkRetainment('pageSize');
                    _this.dataTable.state.reset(false, true);
                }
                else {
                    _this.checked = _this.dataTable.allCurrentRowsSelected() || (((_b = _this.dataTable) === null || _b === void 0 ? void 0 : _b.canSelectAll) && ((_c = _this.dataTable) === null || _c === void 0 ? void 0 : _c.allMatchingSelected));
                    if ((_d = _this.dataTable) === null || _d === void 0 ? void 0 : _d.canSelectAll) {
                        _this.selectAllChanged();
                    }
                }
                _this.ref.markForCheck();
            });
            _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
                var _a;
                _this.checked = false;
                if ((_a = _this.dataTable) === null || _a === void 0 ? void 0 : _a.canSelectAll) {
                    _this.resetAllMatchingSelected();
                }
                _this.ref.markForCheck();
            });
            return _this;
        }
        Object.defineProperty(NovoDataTableCheckboxHeaderCell.prototype, "isAtLimit", {
            get: function () {
                return (this.maxSelected && this.dataTable.state.selectedRows.size + this.dataTable.dataSource.data.length > this.maxSelected && !this.checked);
            },
            enumerable: false,
            configurable: true
        });
        NovoDataTableCheckboxHeaderCell.prototype.ngOnDestroy = function () {
            if (this.selectionSubscription) {
                this.selectionSubscription.unsubscribe();
            }
            if (this.paginationSubscription) {
                this.paginationSubscription.unsubscribe();
            }
            if (this.resetSubscription) {
                this.resetSubscription.unsubscribe();
            }
        };
        NovoDataTableCheckboxHeaderCell.prototype.onClick = function () {
            var _a;
            if (this.isAtLimit) {
                this.toaster.alert({
                    theme: 'danger',
                    position: 'fixedTop',
                    message: 'Error, more than 500 items are not able to be selected at one time',
                    icon: 'caution',
                });
            }
            else {
                this.dataTable.selectRows(!this.checked);
            }
            if ((_a = this.dataTable) === null || _a === void 0 ? void 0 : _a.canSelectAll) {
                if (this.checked) {
                    this.resetAllMatchingSelected();
                }
                else {
                    this.selectAllChanged();
                }
            }
        };
        NovoDataTableCheckboxHeaderCell.prototype.resetAllMatchingSelected = function () {
            var _a, _b, _c;
            (_b = (_a = this.dataTable.state) === null || _a === void 0 ? void 0 : _a.allMatchingSelectedSource) === null || _b === void 0 ? void 0 : _b.next(false);
            (_c = this.dataTable.state) === null || _c === void 0 ? void 0 : _c.onSelectionChange();
        };
        NovoDataTableCheckboxHeaderCell.prototype.selectAllChanged = function () {
            var _a, _b, _c, _d;
            var allSelectedEvent = {
                allSelected: this.checked,
                selectedCount: (_c = (_b = (_a = this.dataTable) === null || _a === void 0 ? void 0 : _a.state) === null || _b === void 0 ? void 0 : _b.selected) === null || _c === void 0 ? void 0 : _c.length,
                allMatchingSelected: (_d = this.dataTable) === null || _d === void 0 ? void 0 : _d.allMatchingSelected,
            };
            this.dataTable.allSelected.emit(allSelectedEvent);
        };
        return NovoDataTableCheckboxHeaderCell;
    }(table.CdkHeaderCell));
    NovoDataTableCheckboxHeaderCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-checkbox-header-cell',
                    template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\" />\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\" [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableCheckboxHeaderCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoDataTable },
        { type: i0.ChangeDetectorRef },
        { type: NovoToastService }
    ]; };
    NovoDataTableCheckboxHeaderCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        maxSelected: [{ type: i0.Input }]
    };

    var NovoDataTableExpandHeaderCell = /** @class */ (function (_super) {
        __extends(NovoDataTableExpandHeaderCell, _super);
        function NovoDataTableExpandHeaderCell(columnDef, elementRef, renderer, dataTable, ref) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.dataTable = dataTable;
            _this.ref = ref;
            _this.role = 'columnheader';
            _this.expanded = false;
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-expand-column-header-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-expand-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-header-cell');
            _this.expandSubscription = _this.dataTable.state.expandSource.subscribe(function () {
                _this.expanded = _this.dataTable.allCurrentRowsExpanded();
                _this.ref.markForCheck();
            });
            return _this;
        }
        NovoDataTableExpandHeaderCell.prototype.ngOnDestroy = function () {
            if (this.expandSubscription) {
                this.expandSubscription.unsubscribe();
            }
        };
        NovoDataTableExpandHeaderCell.prototype.expandAll = function () {
            this.dataTable.expandRows(!this.expanded);
        };
        return NovoDataTableExpandHeaderCell;
    }(table.CdkHeaderCell));
    NovoDataTableExpandHeaderCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-expand-header-cell',
                    template: " <i class=\"bhi-next data-table-icon\" novo-data-table-expander=\"true\" (click)=\"expandAll()\" [class.expanded]=\"expanded\"></i> ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableExpandHeaderCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoDataTable },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoDataTableExpandHeaderCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var NovoDataTableHeaderCell = /** @class */ (function (_super) {
        __extends(NovoDataTableHeaderCell, _super);
        function NovoDataTableHeaderCell(columnDef, elementRef, renderer) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.role = 'columnheader';
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
            return _this;
        }
        NovoDataTableHeaderCell.prototype.ngOnInit = function () {
            if (this.column.width) {
                this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
            }
        };
        return NovoDataTableHeaderCell;
    }(table.CdkHeaderCell));
    NovoDataTableHeaderCell.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-data-table-header-cell',
                },] }
    ];
    NovoDataTableHeaderCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    NovoDataTableHeaderCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        column: [{ type: i0.Input }]
    };

    var NovoDataTableCell = /** @class */ (function (_super) {
        __extends(NovoDataTableCell, _super);
        function NovoDataTableCell(columnDef, elementRef, renderer) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.role = 'gridcell';
            _this.subscriptions = [];
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
            return _this;
        }
        NovoDataTableCell.prototype.ngOnInit = function () {
            var _this = this;
            if (this.column.cellClass) {
                this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
            }
            if (this.column.rightAlignCellContent) {
                this.renderer.addClass(this.elementRef.nativeElement, 'novo-data-table-cell-align-right');
            }
            this.calculateWidths();
            this.subscriptions.push(this.resized.subscribe(function (column) {
                if (column === _this.column) {
                    _this.calculateWidths();
                }
            }));
        };
        NovoDataTableCell.prototype.ngOnDestroy = function () {
            this.subscriptions.forEach(function (subscription) {
                subscription.unsubscribe();
            });
        };
        NovoDataTableCell.prototype.calculateWidths = function () {
            if (this.column.width) {
                this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
            }
        };
        return NovoDataTableCell;
    }(table.CdkCell));
    NovoDataTableCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-cell',
                    template: " <ng-container *ngTemplateOutlet=\"template; context: { $implicit: row, col: column }\"></ng-container> ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    NovoDataTableCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        row: [{ type: i0.Input }],
        template: [{ type: i0.Input }],
        column: [{ type: i0.Input }],
        resized: [{ type: i0.Input }]
    };

    var NovoDataTableCheckboxCell = /** @class */ (function (_super) {
        __extends(NovoDataTableCheckboxCell, _super);
        function NovoDataTableCheckboxCell(columnDef, elementRef, renderer, dataTable, ref) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.columnDef = columnDef;
            _this.dataTable = dataTable;
            _this.ref = ref;
            _this.role = 'gridcell';
            _this.maxSelected = undefined;
            _this.checked = false;
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
            _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
                var _a, _b;
                _this.checked = _this.dataTable.isSelected(_this.row) || (((_a = _this.dataTable) === null || _a === void 0 ? void 0 : _a.canSelectAll) && ((_b = _this.dataTable) === null || _b === void 0 ? void 0 : _b.allMatchingSelected));
                _this.ref.markForCheck();
            });
            _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
                _this.checked = false;
                _this.ref.markForCheck();
            });
            return _this;
        }
        Object.defineProperty(NovoDataTableCheckboxCell.prototype, "isAtLimit", {
            get: function () {
                return this.maxSelected && this.dataTable.state.selectedRows.size >= this.maxSelected && !this.checked;
            },
            enumerable: false,
            configurable: true
        });
        NovoDataTableCheckboxCell.prototype.ngOnInit = function () {
            var _a, _b;
            this.checked = this.dataTable.isSelected(this.row) || (((_a = this.dataTable) === null || _a === void 0 ? void 0 : _a.canSelectAll) && ((_b = this.dataTable) === null || _b === void 0 ? void 0 : _b.allMatchingSelected));
        };
        NovoDataTableCheckboxCell.prototype.onClick = function () {
            if (!this.isAtLimit) {
                this.dataTable.selectRow(this.row, 'onClick');
            }
        };
        NovoDataTableCheckboxCell.prototype.getTooltip = function () {
            return this.isAtLimit ? 'More than ' + this.maxSelected + ' items are not able to be selected at one time' : '';
        };
        NovoDataTableCheckboxCell.prototype.ngOnDestroy = function () {
            if (this.selectionSubscription) {
                this.selectionSubscription.unsubscribe();
            }
            if (this.resetSubscription) {
                this.resetSubscription.unsubscribe();
            }
        };
        return NovoDataTableCheckboxCell;
    }(table.CdkCell));
    NovoDataTableCheckboxCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-checkbox-cell',
                    template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\" [tooltip]=\"getTooltip()\" tooltipPosition=\"right\">\n      <input type=\"checkbox\" [checked]=\"checked\" />\n      <label>\n        <i [class.bhi-checkbox-disabled]=\"isAtLimit\" [class.bhi-checkbox-empty]=\"!checked\" [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableCheckboxCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoDataTable },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoDataTableCheckboxCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        row: [{ type: i0.Input }],
        maxSelected: [{ type: i0.Input }]
    };

    var NovoDataTableExpandCell = /** @class */ (function (_super) {
        __extends(NovoDataTableExpandCell, _super);
        function NovoDataTableExpandCell(columnDef, elementRef, renderer, dataTable, ref) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.columnDef = columnDef;
            _this.dataTable = dataTable;
            _this.ref = ref;
            _this.role = 'gridcell';
            _this.expanded = false;
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-expand-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-expand-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-cell');
            _this.expandSubscription = _this.dataTable.state.expandSource.subscribe(function () {
                _this.expanded = _this.dataTable.isExpanded(_this.row);
                _this.ref.markForCheck();
            });
            return _this;
        }
        NovoDataTableExpandCell.prototype.ngOnInit = function () {
            this.expanded = this.dataTable.isExpanded(this.row);
        };
        NovoDataTableExpandCell.prototype.onClick = function () {
            this.dataTable.expandRow(this.row);
        };
        NovoDataTableExpandCell.prototype.ngOnDestroy = function () {
            if (this.expandSubscription) {
                this.expandSubscription.unsubscribe();
            }
        };
        return NovoDataTableExpandCell;
    }(table.CdkCell));
    NovoDataTableExpandCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-expand-cell',
                    template: " <i class=\"bhi-next data-table-icon\" novo-data-table-expander=\"true\" [class.expanded]=\"expanded\"></i> ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableExpandCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoDataTable },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoDataTableExpandCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        row: [{ type: i0.Input }]
    };

    var NovoDataTableClearButton = /** @class */ (function () {
        function NovoDataTableClearButton(state, ref, labels) {
            this.state = state;
            this.ref = ref;
            this.labels = labels;
            this.selectedClear = new i0.EventEmitter();
            this.sortClear = new i0.EventEmitter();
            this.filterClear = new i0.EventEmitter();
            this.allClear = new i0.EventEmitter();
        }
        NovoDataTableClearButton.prototype.clearSort = function () {
            this.state.clearSort();
            this.sortClear.emit(true);
        };
        NovoDataTableClearButton.prototype.clearFilter = function () {
            this.state.clearFilter();
            this.filterClear.emit(true);
        };
        NovoDataTableClearButton.prototype.clearSelected = function () {
            this.state.clearSelected();
            this.selectedClear.emit(true);
        };
        NovoDataTableClearButton.prototype.clearAll = function () {
            this.state.reset();
            this.allClear.emit(true);
            this.selectedClear.emit(true);
            this.sortClear.emit(true);
            this.filterClear.emit(true);
        };
        return NovoDataTableClearButton;
    }());
    NovoDataTableClearButton.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-clear-button',
                    template: "\n    <novo-dropdown side=\"bottom-right\" class=\"novo-data-table-clear-button\" data-automation-id=\"novo-data-table-clear-dropdown\">\n      <novo-button type=\"button\" theme=\"primary\" color=\"negative\" icon=\"collapse\" data-automation-id=\"novo-data-table-clear-dropdown-btn\">\n        {{ labels.clear }}\n      </novo-button>\n      <list>\n        <item\n          *ngIf=\"state.selected.length > 0\"\n          (click)=\"clearSelected()\"\n          data-automation-id=\"novo-data-table-clear-dropdown-clear-selected\"\n          >{{ labels.clearSelected }}</item\n        >\n        <item *ngIf=\"state.sort\" (click)=\"clearSort()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-sort\">{{\n          labels.clearSort\n        }}</item>\n        <item *ngIf=\"state.filter\" (click)=\"clearFilter()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-filter\">{{\n          labels.clearFilter\n        }}</item>\n        <item *ngIf=\"state.sort && state.filter\" (click)=\"clearAll()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-all\">{{\n          labels.clearAllNormalCase\n        }}</item>\n      </list>\n    </novo-dropdown>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableClearButton.ctorParameters = function () { return [
        { type: DataTableState },
        { type: i0.ChangeDetectorRef },
        { type: NovoLabelService }
    ]; };
    NovoDataTableClearButton.propDecorators = {
        selectedClear: [{ type: i0.Output }],
        sortClear: [{ type: i0.Output }],
        filterClear: [{ type: i0.Output }],
        allClear: [{ type: i0.Output }]
    };

    var NovoDataTableExpandDirective = /** @class */ (function () {
        function NovoDataTableExpandDirective(vcRef, state, dataTable) {
            var _this = this;
            this.vcRef = vcRef;
            this.state = state;
            this.dataTable = dataTable;
            this.shouldExpandAllRows = function (targetId) { return targetId === undefined; };
            this.shouldExpandOneRow = function (targetId) { return targetId === _this.row.id; };
            this.subscription = this.state.expandSource.subscribe(function (targetId) {
                if (_this.shouldExpandAllRows(targetId) || _this.shouldExpandOneRow(targetId)) {
                    if (dataTable.isExpanded(_this.row)) {
                        _this.render();
                    }
                    else {
                        _this.clear();
                    }
                }
            });
        }
        NovoDataTableExpandDirective.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        NovoDataTableExpandDirective.prototype.onClick = function (event) {
            if (event.target.hasAttribute('novo-data-table-expander')) {
                Helpers.swallowEvent(event);
                this.dataTable.expandRow(this.row);
            }
        };
        NovoDataTableExpandDirective.prototype.clear = function () {
            this.vcRef.clear();
        };
        NovoDataTableExpandDirective.prototype.render = function () {
            this.vcRef.clear();
            if (this.template && this.row) {
                this.vcRef.createEmbeddedView(this.template, { $implicit: this.row });
            }
        };
        return NovoDataTableExpandDirective;
    }());
    NovoDataTableExpandDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoDataTableExpand]',
                },] }
    ];
    NovoDataTableExpandDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: DataTableState },
        { type: NovoDataTable }
    ]; };
    NovoDataTableExpandDirective.propDecorators = {
        row: [{ type: i0.Input }],
        template: [{ type: i0.Input, args: ['novoDataTableExpand',] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    // Value accessor for the component (supports ngModel)
    var DATE_PICKER_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoDatePickerElement; }),
        multi: true,
    };
    var NovoDatePickerElement = /** @class */ (function () {
        function NovoDatePickerElement(labels, element, cdr, _sanitizer) {
            this.labels = labels;
            this.element = element;
            this.cdr = cdr;
            this._sanitizer = _sanitizer;
            /**
             * Day of the week the calendar should display first, Sunday=0...Saturday=6
             **/
            this.weekStart = 0;
            /**
             * Certain dates that are already selected.
             **/
            this.preselected = [];
            /**
             * Whether the days for the previous and next month should be hidden.
             **/
            this.hideOverflowDays = false;
            /**
             * Whether the footer which contains `today` button should be hidden.
             **/
            this.hideFooter = false;
            // Select callback for output
            this.onSelect = new i0.EventEmitter(false);
            this._mode = 'single';
            this._numberOfMonths = [0];
            this._selection = [];
            this.preview = [];
            this.rangeSelectMode = 'startDate';
            this._onChange = function () { };
            this._onTouched = function () { };
        }
        Object.defineProperty(NovoDatePickerElement.prototype, "numberOfMonths", {
            /**
             * Number of months to display at once.
             * @default 1
             **/
            get: function () {
                return this._numberOfMonths.length;
            },
            set: function (value) {
                this._numberOfMonths = Array.from(Array(Number(value)).keys());
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDatePickerElement.prototype, "mode", {
            /**
             * How the date selection should work.
             * @default single
             **/
            get: function () {
                return this._mode;
            },
            set: function (value) {
                if (this._mode !== value) {
                    this._mode = value;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDatePickerElement.prototype, "range", {
            /**
             * **deprecated** please use `mode="range"`.
             **/
            get: function () {
                return ['range', 'week'].includes(this.mode) || this._range;
            },
            set: function (value) {
                console.warn("'range' property is deprecated, please use 'mode=\"range\"'.");
                if (this._range !== value) {
                    this._range = value;
                    this.mode = 'range';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDatePickerElement.prototype, "weekRangeSelect", {
            /**
             * **deprecated** please use `mode="week"`.
             **/
            get: function () {
                return this._mode === 'week' || this._weekRangeSelect;
            },
            set: function (value) {
                console.warn("'weekRangeSelect' property is deprecated, please use 'mode=\"week\"'.");
                if (this._weekRangeSelect !== value) {
                    this._weekRangeSelect = value;
                    this.mode = 'week';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDatePickerElement.prototype, "selection", {
            get: function () {
                return this._selection;
            },
            set: function (value) {
                this._selection = value ? value.filter(dateFns.isDate).map(function (d) { return dateFns.startOfDay(d); }) : [];
            },
            enumerable: false,
            configurable: true
        });
        NovoDatePickerElement.prototype.ngOnInit = function () {
            // Determine the year array
            var now = new Date();
            // Set labels
            if (this.model) {
                this.modelToSelection(this.model);
            }
            if (this.selection && this.selection.length) {
                this.updateView(this.selection[0]);
            }
        };
        NovoDatePickerElement.prototype.updateView = function (date) {
            var value = date ? new Date(date) : new Date();
            this.activeDate = new Date(value);
        };
        NovoDatePickerElement.prototype.updateSelection = function (selected, fireEvents) {
            if (fireEvents === void 0) { fireEvents = true; }
            // Helpers.swallowEvent(event);
            this.selection = selected;
            this.startDateLabel = this.labels.formatDateWithFormat(this.selection[0], {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
            this.endDateLabel = this.labels.formatDateWithFormat(this.selection[1], {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
            if (fireEvents) {
                switch (this.mode) {
                    case 'multiple':
                        this.fireSelect();
                        // Also, update the ngModel
                        this._onChange(this.selection);
                        this.model = this.selection;
                        break;
                    case 'range':
                    case 'week':
                        if (this.selection.filter(Boolean).length === 2) {
                            this.fireRangeSelect();
                            // Also, update the ngModel
                            var model = {
                                startDate: this.selection[0],
                                endDate: this.selection[1],
                            };
                            this._onChange(model);
                            this.model = model;
                        }
                        break;
                    case 'single':
                    default:
                        this.fireSelect();
                        // Also, update the ngModel
                        this._onChange(this.selection[0]);
                        this.model = this.selection[0];
                        break;
                }
            }
            this.cdr.markForCheck();
        };
        NovoDatePickerElement.prototype.eventData = function (date) {
            return {
                year: date.getFullYear(),
                month: this.labels.formatDateWithFormat(date, { month: 'long' }),
                day: this.labels.formatDateWithFormat(date, { weekday: 'long' }),
                date: date,
            };
        };
        NovoDatePickerElement.prototype.fireSelect = function () {
            if (this.mode === 'multiple') {
                this.onSelect.next(this.selection);
            }
            else {
                this.onSelect.next(this.eventData(this.selection[0]));
            }
        };
        NovoDatePickerElement.prototype.fireRangeSelect = function () {
            // Make sure the start date is before the end date
            if (this.selection.filter(Boolean).length === 2) {
                var _a = __read(this.selection, 2), start = _a[0], end = _a[1];
                this.onSelect.next({
                    startDate: this.eventData(start),
                    endDate: this.eventData(end),
                });
            }
        };
        NovoDatePickerElement.prototype.setToday = function () {
            var tmp = new Date();
            this.updateView(tmp);
            this.updateSelection(Array.of(tmp));
        };
        NovoDatePickerElement.prototype.toggleRangeSelect = function (range) {
            this.rangeSelectMode = range;
            if (range === 'startDate' && this.selection.length) {
                this.updateView(this.selection[0]);
            }
            if (range === 'endDate' && this.selection.length === 2) {
                this.updateView(this.selection[1]);
            }
        };
        NovoDatePickerElement.prototype.modelToSelection = function (model) {
            // this.selection = this._strategy.selectionFinished();
            switch (this.mode) {
                case 'multiple':
                    this.selection = model;
                    break;
                case 'range':
                case 'week':
                    var range = this.model;
                    this.selection = [range.startDate, range.endDate].filter(Boolean);
                    break;
                case 'single':
                default:
                    this.selection = [model];
                    break;
            }
        };
        // ValueAccessor Functions
        NovoDatePickerElement.prototype.writeValue = function (model) {
            this.model = model;
            if (this.mode === 'multiple') {
                this.selection = this.model;
            }
            if (Helpers.isDate(model)) {
                this.updateView(model);
                this.modelToSelection(model);
            }
            else if (Helpers.isString(model)) {
                var date = dateFns.parse(model);
                if (dateFns.isValid(date)) {
                    this.updateView(date);
                    this.modelToSelection(date);
                }
            }
        };
        NovoDatePickerElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoDatePickerElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        return NovoDatePickerElement;
    }());
    NovoDatePickerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-date-picker',
                    providers: [DATE_PICKER_VALUE_ACCESSOR],
                    animations: [
                        animations.trigger('startDateTextState', [
                            animations.state('startDate', animations.style({
                                opacity: '1.0',
                            })),
                            animations.state('endDate', animations.style({
                                opacity: '0.6',
                            })),
                            animations.transition('startDate <=> endDate', animations.animate('200ms ease-in')),
                        ]),
                        animations.trigger('endDateTextState', [
                            animations.state('startDate', animations.style({
                                opacity: '0.6',
                            })),
                            animations.state('endDate', animations.style({
                                opacity: '1.0',
                            })),
                            animations.transition('startDate <=> endDate', animations.animate('200ms ease-in')),
                        ]),
                        animations.trigger('indicatorState', [
                            animations.state('startDate', animations.style({
                                transform: 'translateX(0%)',
                            })),
                            animations.state('endDate', animations.style({
                                transform: 'translateX(100%)',
                            })),
                            animations.transition('startDate <=> endDate', animations.animate('200ms ease-in')),
                        ]),
                    ],
                    template: "\n    <div class=\"date-picker-container\">\n      <div class=\"date-range-tabs\" *ngIf=\"range\" [class.week-select-mode]=\"weekRangeSelect\">\n        <span\n          class=\"range-tab\"\n          (click)=\"toggleRangeSelect('startDate')\"\n          [@startDateTextState]=\"rangeSelectMode\"\n          data-automation-id=\"calendar-start-date\"\n          >{{ startDateLabel }}</span\n        >\n        <span\n          class=\"range-tab\"\n          (click)=\"toggleRangeSelect('endDate')\"\n          [@endDateTextState]=\"rangeSelectMode\"\n          data-automation-id=\"calendar-end-date\"\n          >{{ endDateLabel }}</span\n        >\n        <i class=\"indicator\" [@indicatorState]=\"rangeSelectMode\"></i>\n      </div>\n\n      <novo-calendar\n        [activeDate]=\"activeDate\"\n        [(selected)]=\"selection\"\n        (selectedChange)=\"updateSelection($event)\"\n        [mode]=\"mode\"\n        [numberOfMonths]=\"numberOfMonths\"\n        [weekStartsOn]=\"weekStart\"\n        [disabledDateMessage]=\"disabledDateMessage\"\n        [minDate]=\"start\"\n        [maxDate]=\"end\"\n      ></novo-calendar>\n\n      <div class=\"calendar-footer\" [hidden]=\"hideFooter\">\n        <novo-button (click)=\"setToday()\" class=\"today\" size=\"small\" data-automation-id=\"calendar-today\">{{ labels.today }}</novo-button>\n      </div>\n    </div>\n  "
                },] }
    ];
    NovoDatePickerElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef },
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoDatePickerElement.propDecorators = {
        minYear: [{ type: i0.Input }],
        maxYear: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        end: [{ type: i0.Input }],
        inline: [{ type: i0.Input }],
        weekStart: [{ type: i0.Input }],
        preselected: [{ type: i0.Input }],
        hideOverflowDays: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.hide-overflow-days',] }],
        hideFooter: [{ type: i0.Input }],
        disabledDateMessage: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }],
        numberOfMonths: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        range: [{ type: i0.Input }],
        weekRangeSelect: [{ type: i0.Input }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoDatePickerElement.prototype, "inline", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoDatePickerElement.prototype, "hideOverflowDays", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoDatePickerElement.prototype, "hideFooter", void 0);

    var DateFormatService = /** @class */ (function () {
        function DateFormatService(labels) {
            this.labels = labels;
        }
        DateFormatService.prototype.getTimeMask = function (militaryTime) {
            var e_1, _a;
            var mask = [/\d/, /\d/, /:/, /\d/, /\d/];
            var timeFormatArray = [];
            var timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
            if (militaryTime) {
                return mask;
            }
            else {
                timeFormatArray = timeFormat.split('hh:mm');
                if (timeFormatArray && timeFormatArray.length) {
                    mask = [];
                    try {
                        for (var timeFormatArray_1 = __values(timeFormatArray), timeFormatArray_1_1 = timeFormatArray_1.next(); !timeFormatArray_1_1.done; timeFormatArray_1_1 = timeFormatArray_1.next()) {
                            var timeFormatPart = timeFormatArray_1_1.value;
                            if (timeFormatPart === '') {
                                mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                            }
                            else if (timeFormatPart.length) {
                                for (var i = 0; i < timeFormatPart.length; i++) {
                                    mask.push(/\s|\w|\d|\./);
                                }
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (timeFormatArray_1_1 && !timeFormatArray_1_1.done && (_a = timeFormatArray_1.return)) _a.call(timeFormatArray_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            return mask;
        };
        DateFormatService.prototype.getDateMask = function () {
            return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
        };
        DateFormatService.prototype.getDateTimeMask = function (militaryTime) {
            if (militaryTime === void 0) { militaryTime = false; }
            return __spread(this.getDateMask(), [/\,?/, /\s/], this.getTimeMask(militaryTime));
        };
        DateFormatService.prototype.getTimePlaceHolder = function (militaryTime) {
            if (militaryTime) {
                return this.labels.timeFormatPlaceholder24Hour;
            }
            return this.labels.timeFormatPlaceholderAM;
        };
        DateFormatService.prototype.parseDateString = function (dateString) {
            var dateFormat = this.labels.dateFormatString();
            var dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi;
            var dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi;
            var dateFormatTokens;
            var dateValueTokens;
            var year;
            var month;
            var day;
            var date = new Date();
            var isInvalidDate = true;
            if (Helpers.isEmpty(dateFormat)) {
                // Default to MM/dd/yyyy
                dateFormat = 'mm/dd/yyyy';
            }
            else {
                dateFormat = dateFormat.toLowerCase();
            }
            dateFormatTokens = dateFormatRegex.exec(dateFormat);
            dateValueTokens = dateValueRegex.exec(dateString);
            if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
                for (var i = 1; i < 4; i++) {
                    if (dateFormatTokens[i].includes('m')) {
                        month = parseInt(dateValueTokens[i], 10) - 1;
                    }
                    else if (dateFormatTokens[i].includes('d')) {
                        day = parseInt(dateValueTokens[i], 10);
                    }
                    else {
                        year = parseInt(dateValueTokens[i], 10);
                    }
                }
                if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                    date = new Date(year, month, day);
                    isInvalidDate = false;
                }
            }
            else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
                var twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
                var oneToken = /^(\d{1,4})$/.exec(dateString);
                var delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
                var dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
                if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                    dateString = "" + dateString + delimiter[1];
                }
                else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                    dateString = "" + dateString + delimiter[1];
                }
            }
            return [date, dateString, isInvalidDate];
        };
        DateFormatService.prototype.parseTimeString = function (timeString, militaryTime) {
            var e_2, _a;
            var value = new Date();
            var timeStringParts;
            var amFormat = this.labels.timeFormatAM;
            var pmFormat = this.labels.timeFormatPM;
            if (!(timeString && timeString.includes(':'))) {
                return [value, timeString];
            }
            if (!militaryTime && amFormat && pmFormat) {
                var splits = [];
                var pm = false;
                amFormat = this.labels.timeFormatAM.toLowerCase();
                pmFormat = this.labels.timeFormatPM.toLowerCase();
                timeString = timeString.toLowerCase();
                if (timeString.includes(amFormat)) {
                    splits = timeString.split(amFormat);
                }
                else if (timeString.includes(pmFormat)) {
                    splits = timeString.split(pmFormat);
                    pm = true;
                }
                if (splits && splits.length) {
                    try {
                        for (var splits_1 = __values(splits), splits_1_1 = splits_1.next(); !splits_1_1.done; splits_1_1 = splits_1.next()) {
                            var item = splits_1_1.value;
                            if (item && item.trim().includes(':')) {
                                timeStringParts = item.trim().split(':');
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (splits_1_1 && !splits_1_1.done && (_a = splits_1.return)) _a.call(splits_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                    var hours = parseInt(timeStringParts[0], 10);
                    if (hours === 12 && pm) {
                        hours = 12;
                    }
                    else if (pm) {
                        hours = hours + 12;
                    }
                    else if (hours === 12) {
                        hours = 0;
                    }
                    value.setHours(hours);
                    value.setMinutes(parseInt(timeStringParts[1], 10));
                    value.setSeconds(0);
                }
            }
            else {
                timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
                if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                    value.setHours(parseInt(timeStringParts[1], 10));
                    value.setMinutes(parseInt(timeStringParts[2], 10));
                    value.setSeconds(0);
                }
            }
            return [value, timeString];
        };
        DateFormatService.prototype.parseString = function (dateTimeString, militaryTime, type) {
            switch (type) {
                case 'datetime':
                    var str = dateTimeString.replace(/-/g, '/');
                    var parts = str.split(' ');
                    var _a = __read(this.parseDateString(parts[0]), 2), dt = _a[0], dts = _a[1];
                    if (parts.length > 1) {
                        var _b = __read(this.parseTimeString(parts[1], militaryTime), 2), tm = _b[0], tms = _b[1];
                        return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), dts + " " + tms];
                    }
                    return [dt, dts];
                case 'date':
                    return this.parseDateString(dateTimeString);
                case 'time':
                    return this.parseTimeString(dateTimeString, militaryTime);
                default:
                    return;
            }
        };
        DateFormatService.prototype.isValidDatePart = function (value, format) {
            var datePart = parseInt(value, 10);
            if (format.includes('m') && (datePart >= 2 || value.length === 2)) {
                return true;
            }
            else if (format.includes('d') && (datePart >= 4 || value.length === 2)) {
                return true;
            }
            else if (format.includes('y') && datePart >= 1000) {
                return true;
            }
            return false;
        };
        return DateFormatService;
    }());
    DateFormatService.decorators = [
        { type: i0.Injectable }
    ];
    DateFormatService.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };

    // Value accessor for the component (supports ngModel)
    var DATE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoDatePickerInputElement; }),
        multi: true,
    };
    var NovoDatePickerInputElement = /** @class */ (function () {
        function NovoDatePickerInputElement(element, labels, _changeDetectorRef, dateFormatService) {
            this.element = element;
            this.labels = labels;
            this._changeDetectorRef = _changeDetectorRef;
            this.dateFormatService = dateFormatService;
            this.formattedValue = '';
            this.invalidDateErrorMessage = '';
            /** View -> model callback called when value changes */
            this._onChange = function () { };
            /** View -> model callback called when autocomplete has been touched */
            this._onTouched = function () { };
            this.textMaskEnabled = true;
            this.allowInvalidDate = false;
            /**
             * Sets the field as to appear disabled, users will not be able to interact with the text field.
             **/
            this.disabled = false;
            /**
             * Day of the week the calendar should display first, Sunday=0...Saturday=6
             **/
            this.weekStart = 0;
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
            this.changeEvent = new i0.EventEmitter();
            this.placeholder = this.labels.localizedDatePlaceholder();
        }
        NovoDatePickerInputElement.prototype.ngOnInit = function () {
            this._initFormatOptions();
        };
        NovoDatePickerInputElement.prototype.ngOnChanges = function (changes) {
            if (Object.keys(changes).some(function (key) { return ['format'].includes(key); })) {
                this._initFormatOptions();
            }
        };
        NovoDatePickerInputElement.prototype._initFormatOptions = function () {
            this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
            if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
                this.maskOptions = this.maskOptions || {
                    mask: this.dateFormatService.getDateMask(),
                    pipe: createAutoCorrectedDatePipe__default['default']((this.format || this.labels.dateFormatString()).toLowerCase()),
                    keepCharPositions: false,
                    guide: true,
                };
            }
            else {
                this.maskOptions = { mask: false };
            }
            this.setupInvalidDateErrorMessage();
        };
        /** BEGIN: Convenient Panel Methods. */
        NovoDatePickerInputElement.prototype.openPanel = function () {
            if (!this.disabled) {
                this.overlay.openPanel();
            }
        };
        NovoDatePickerInputElement.prototype.closePanel = function () {
            this.overlay.closePanel();
        };
        Object.defineProperty(NovoDatePickerInputElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        /** END: Convenient Panel Methods. */
        NovoDatePickerInputElement.prototype._handleKeydown = function (event) {
            if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
                this._handleEvent(event, true);
                this.closePanel();
                event.stopPropagation();
            }
        };
        NovoDatePickerInputElement.prototype._handleInput = function (event) {
            if (document.activeElement === event.target) {
                this._handleEvent(event, false);
            }
        };
        NovoDatePickerInputElement.prototype._handleBlur = function (event) {
            this.handleInvalidDate();
            this.blurEvent.emit(event);
        };
        NovoDatePickerInputElement.prototype._handleFocus = function (event) {
            this.showInvalidDateError = false;
            this.openPanel();
            this.focusEvent.emit(event);
        };
        NovoDatePickerInputElement.prototype._handleEvent = function (event, blur) {
            var value = event.target.value;
            if (value === '') {
                this.clearValue();
                this.closePanel();
            }
            else {
                this.formatDate(value, blur);
                this.openPanel();
            }
        };
        NovoDatePickerInputElement.prototype.formatDate = function (value, blur) {
            try {
                var _a = __read(this.dateFormatService.parseString(value, false, 'date'), 3), dateTimeValue = _a[0], formatted = _a[1], isInvalidDate = _a[2];
                this.isInvalidDate = isInvalidDate;
                if (!isNaN(dateTimeValue.getUTCDate())) {
                    var dt = new Date(dateTimeValue);
                    this.dispatchOnChange(dt, blur);
                }
                else {
                    this.dispatchOnChange(null, blur);
                }
            }
            catch (err) { }
        };
        NovoDatePickerInputElement.prototype.writeValue = function (value) {
            var _this = this;
            Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
        };
        NovoDatePickerInputElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoDatePickerInputElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        NovoDatePickerInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoDatePickerInputElement.prototype.handleInvalidDate = function () {
            if (this.isInvalidDate && this.value) {
                this.showInvalidDateError = true;
                this.clearValue();
                this.closePanel();
            }
        };
        NovoDatePickerInputElement.prototype.setupInvalidDateErrorMessage = function () {
            var dateFormat = this.labels.dateFormatString();
            if (Helpers.isEmpty(dateFormat)) {
                // Default to mm/dd/yyyy
                dateFormat = 'mm/dd/yyyy';
            }
            else {
                dateFormat = dateFormat.toLowerCase();
            }
            this.invalidDateErrorMessage = "Invalid date field entered. Date format of " + dateFormat + " is required.";
        };
        NovoDatePickerInputElement.prototype.dispatchOnChange = function (newValue, blur, skip) {
            if (blur === void 0) { blur = false; }
            if (skip === void 0) { skip = false; }
            if (newValue !== this.value) {
                this._onChange(newValue);
                this.changeEvent.emit(newValue);
                if (blur) {
                    !skip && this.writeValue(newValue);
                }
                else {
                    !skip && this._setCalendarValue(newValue);
                }
            }
        };
        NovoDatePickerInputElement.prototype._setTriggerValue = function (value) {
            this._setCalendarValue(value);
            this._setFormValue(value);
            this._changeDetectorRef.markForCheck();
        };
        NovoDatePickerInputElement.prototype._setCalendarValue = function (value) {
            if (value instanceof Date && this.value instanceof Date) {
                var newDate = new Date(value);
                newDate.setHours(0, 0, 0, 0);
                this.value = newDate;
                return;
            }
            this.value = value;
        };
        NovoDatePickerInputElement.prototype._setFormValue = function (value) {
            if (value) {
                var test = this.formatDateValue(value);
                this.formattedValue = test;
            }
            else {
                this.formattedValue = '';
            }
        };
        /**
         * This method closes the panel, and if a value is specified, also sets the associated
         * control to that value. It will also mark the control as dirty if this interaction
         * stemmed from the user.
         */
        NovoDatePickerInputElement.prototype.setValueAndClose = function (event) {
            if (event && event.date) {
                this.dispatchOnChange(event.date, true);
            }
            this.closePanel();
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoDatePickerInputElement.prototype.clearValue = function () {
            this.formattedValue = '';
            this.dispatchOnChange(null);
        };
        NovoDatePickerInputElement.prototype.formatDateValue = function (value) {
            var originalValue = value;
            try {
                if (!value) {
                    return '';
                }
                if (this.userDefinedFormat && dateFns.isValid(value)) {
                    return dateFns.format(value, this.format);
                }
                if (!(value instanceof Date)) {
                    value = new Date(value);
                }
                if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                    return this.labels.formatDateWithFormat(value, {
                        month: '2-digit',
                        day: '2-digit',
                        year: 'numeric',
                    });
                }
                else {
                    return originalValue;
                }
            }
            catch (err) {
                return '';
            }
        };
        Object.defineProperty(NovoDatePickerInputElement.prototype, "hasValue", {
            get: function () {
                return !Helpers.isEmpty(this.value);
            },
            enumerable: false,
            configurable: true
        });
        return NovoDatePickerInputElement;
    }());
    NovoDatePickerInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-date-picker-input',
                    providers: [DATE_VALUE_ACCESSOR],
                    template: "\n    <input\n      type=\"text\"\n      [name]=\"name\"\n      [(ngModel)]=\"formattedValue\"\n      [textMask]=\"maskOptions\"\n      [placeholder]=\"placeholder\"\n      (focus)=\"_handleFocus($event)\"\n      (keydown)=\"_handleKeydown($event)\"\n      (input)=\"_handleInput($event)\"\n      (blur)=\"_handleBlur($event)\"\n      #input\n      data-automation-id=\"date-input\"\n      [disabled]=\"disabled\"\n    />\n    <span class=\"error-text\" *ngIf=\"showInvalidDateError\">{{ invalidDateErrorMessage }}</span>\n    <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-calendar\"></i>\n    <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-date-picker\n        [start]=\"start\"\n        [end]=\"end\"\n        inline=\"true\"\n        (onSelect)=\"setValueAndClose($event)\"\n        [disabledDateMessage]=\"disabledDateMessage\"\n        [ngModel]=\"value\"\n        [weekStart]=\"weekStart\"\n      ></novo-date-picker>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoDatePickerInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: DateFormatService }
    ]; };
    NovoDatePickerInputElement.propDecorators = {
        name: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        end: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        maskOptions: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        textMaskEnabled: [{ type: i0.Input }],
        allowInvalidDate: [{ type: i0.Input }],
        disabled: [{ type: i0.HostBinding, args: ['class.disabled',] }, { type: i0.Input }],
        disabledDateMessage: [{ type: i0.Input }],
        weekStart: [{ type: i0.Input }],
        blurEvent: [{ type: i0.Output }],
        focusEvent: [{ type: i0.Output }],
        changeEvent: [{ type: i0.Output }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }]
    };

    // Value accessor for the component (supports ngModel)
    var DATE_VALUE_ACCESSOR$1 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoDateRangeInputElement; }),
        multi: true,
    };
    var NovoDateRangeInputElement = /** @class */ (function () {
        function NovoDateRangeInputElement(element, labels, cdr, dateFormatService) {
            this.element = element;
            this.labels = labels;
            this.cdr = cdr;
            this.dateFormatService = dateFormatService;
            this.formattedStartDate = '';
            this.formattedEndDate = '';
            this.weekRangeSelect = false;
            this.mode = 'range';
            this.textMaskEnabled = true;
            this.allowInvalidDate = false;
            this.weekStart = 0;
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
            this.change = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this._value = { startDate: null, endDate: null };
            this._disabled = false;
            this.onChangeCallback = function (_) {
                // placeholder
            };
            this.onTouchedCallback = function () {
                // placeholder
            };
            this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
        }
        Object.defineProperty(NovoDateRangeInputElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this.value !== value) {
                    this._value = value;
                    this._setFormValue(value);
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDateRangeInputElement.prototype, "disabled", {
            // Disabled State
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        NovoDateRangeInputElement.prototype.ngOnInit = function () {
            this._initFormatOptions();
        };
        NovoDateRangeInputElement.prototype.ngOnChanges = function (changes) {
            if (Object.keys(changes).some(function (key) { return ['format'].includes(key); })) {
                this._initFormatOptions();
            }
        };
        NovoDateRangeInputElement.prototype._initFormatOptions = function () {
            this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
            if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
                this.maskOptions = this.maskOptions || {
                    mask: this.dateFormatService.getDateMask(),
                    pipe: createAutoCorrectedDatePipe__default['default']((this.format || this.labels.dateFormatString()).toLowerCase()),
                    keepCharPositions: false,
                    guide: true,
                };
            }
            else {
                this.maskOptions = { mask: false };
            }
        };
        /** BEGIN: Convenient Panel Methods. */
        NovoDateRangeInputElement.prototype.openPanel = function () {
            if (!this.disabled) {
                this.overlay.openPanel();
            }
        };
        NovoDateRangeInputElement.prototype.closePanel = function () {
            this.overlay && this.overlay.closePanel();
        };
        Object.defineProperty(NovoDateRangeInputElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        /** END: Convenient Panel Methods. */
        NovoDateRangeInputElement.prototype._handleKeydown = function (event) {
            if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
                this.closePanel();
                event.stopPropagation();
            }
        };
        NovoDateRangeInputElement.prototype._handleBlur = function (event) {
            this.blurEvent.emit(event);
        };
        NovoDateRangeInputElement.prototype._handleFocus = function (event) {
            this.openPanel();
            this.focusEvent.emit(event);
        };
        NovoDateRangeInputElement.prototype.formatDate = function (value) {
            try {
                var _b = __read(this.dateFormatService.parseString(value, false, 'date'), 1), dateTimeValue = _b[0];
                return new Date(dateTimeValue);
            }
            catch (err) {
                return null;
            }
        };
        NovoDateRangeInputElement.prototype.writeValue = function (value) {
            this.value = value;
            this.cdr.markForCheck();
        };
        NovoDateRangeInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoDateRangeInputElement.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NovoDateRangeInputElement.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NovoDateRangeInputElement.prototype._onStartInputChange = function (event) {
            this._handleKeydown(event);
            if (document.activeElement === event.target) {
                event.stopPropagation();
                var startDate = this.formatDate(event.target.value);
                if (startDate) {
                    this.value = Object.assign(Object.assign({}, this.value), { startDate: startDate });
                    this.change.emit(this.value);
                }
            }
        };
        NovoDateRangeInputElement.prototype._onEndInputChange = function (event) {
            this._handleKeydown(event);
            if (document.activeElement === event.target) {
                event.stopPropagation();
                var endDate = this.formatDate(event.target.value);
                if (endDate) {
                    this.value = Object.assign(Object.assign({}, this.value), { endDate: endDate });
                    this.change.emit(this.value);
                }
            }
        };
        NovoDateRangeInputElement.prototype._setFormValue = function (value) {
            if (this.value) {
                this.formattedStartDate = this.formatDateValue(this.value.startDate);
                this.formattedEndDate = this.formatDateValue(this.value.endDate);
            }
        };
        /**
         * This method closes the panel, and if a value is specified, also sets the associated
         * control to that value. It will also mark the control as dirty if this interaction
         * stemmed from the user.
         */
        NovoDateRangeInputElement.prototype.setValueAndClose = function (event) {
            if (event && event.startDate && event.endDate) {
                var startDate = event.startDate.date;
                var endDate = event.endDate.date;
                this.value = { startDate: startDate, endDate: endDate };
                this.change.emit(this.value);
            }
            this.closePanel();
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoDateRangeInputElement.prototype.clearStartValue = function () {
            this.formattedStartDate = '';
            this.value = Object.assign(Object.assign({}, this.value), { startDate: null });
            this.change.emit(this.value);
        };
        NovoDateRangeInputElement.prototype.clearEndValue = function () {
            this.formattedEndDate = '';
            this.value = Object.assign(Object.assign({}, this.value), { endDate: null });
            this.change.emit(this.value);
        };
        NovoDateRangeInputElement.prototype.formatDateValue = function (value) {
            var originalValue = value;
            try {
                if (!value) {
                    return '';
                }
                if (this.userDefinedFormat && dateFns.isValid(value)) {
                    return dateFns.format(value, this.format);
                }
                if (!(value instanceof Date)) {
                    value = new Date(value);
                }
                if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                    return this.labels.formatDateWithFormat(value, {
                        month: '2-digit',
                        day: '2-digit',
                        year: 'numeric',
                    });
                }
                else {
                    return originalValue;
                }
            }
            catch (err) {
                return '';
            }
        };
        Object.defineProperty(NovoDateRangeInputElement.prototype, "hasStartValue", {
            get: function () {
                var _a;
                return !Helpers.isEmpty((_a = this.value) === null || _a === void 0 ? void 0 : _a.startDate);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDateRangeInputElement.prototype, "hasEndValue", {
            get: function () {
                var _a;
                return !Helpers.isEmpty((_a = this.value) === null || _a === void 0 ? void 0 : _a.endDate);
            },
            enumerable: false,
            configurable: true
        });
        return NovoDateRangeInputElement;
    }());
    NovoDateRangeInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-date-range-input',
                    providers: [DATE_VALUE_ACCESSOR$1],
                    template: "\n    <div class=\"date-range-input-container\">\n      <input\n        type=\"text\"\n        [name]=\"name\"\n        [(ngModel)]=\"formattedStartDate\"\n        [textMask]=\"maskOptions\"\n        [placeholder]=\"placeholder\"\n        (keydown)=\"_onStartInputChange($event)\"\n        (input)=\"_onStartInputChange($event)\"\n        (focus)=\"_handleFocus($event)\"\n        (blur)=\"_handleBlur($event)\"\n        #startDate\n        data-automation-id=\"date-range-input-start\"\n        [disabled]=\"disabled\"\n      />\n      <novo-icon *ngIf=\"!hasStartValue\" (click)=\"openPanel()\">calendar</novo-icon>\n      <novo-icon *ngIf=\"hasStartValue\" (click)=\"clearStartValue()\">x</novo-icon>\n    </div>\n    <div class=\"date-range-input-divider\">-</div>\n    <div class=\"date-range-input-container\">\n      <input\n        type=\"text\"\n        [name]=\"name\"\n        [(ngModel)]=\"formattedEndDate\"\n        [textMask]=\"maskOptions\"\n        [placeholder]=\"placeholder\"\n        (keydown)=\"_onEndInputChange($event)\"\n        (input)=\"_onEndInputChange($event)\"\n        (focus)=\"_handleFocus($event)\"\n        (blur)=\"_handleBlur($event)\"\n        #endDate\n        data-automation-id=\"date-range-input-end\"\n        [disabled]=\"disabled\"\n      />\n      <novo-icon *ngIf=\"!hasEndValue\" (click)=\"openPanel()\">calendar</novo-icon>\n      <novo-icon *ngIf=\"hasEndValue\" (click)=\"clearEndValue()\">x</novo-icon>\n    </div>\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-date-picker\n        [start]=\"start\"\n        [end]=\"end\"\n        [mode]=\"mode\"\n        range=\"true\"\n        inline=\"true\"\n        (onSelect)=\"setValueAndClose($event)\"\n        [ngModel]=\"value\"\n        [weekStart]=\"weekStart\"\n      ></novo-date-picker>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoDateRangeInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: DateFormatService }
    ]; };
    NovoDateRangeInputElement.propDecorators = {
        name: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        end: [{ type: i0.Input }],
        weekRangeSelect: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        maskOptions: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        textMaskEnabled: [{ type: i0.Input }],
        allowInvalidDate: [{ type: i0.Input }],
        weekStart: [{ type: i0.Input }],
        blurEvent: [{ type: i0.Output }],
        focusEvent: [{ type: i0.Output }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }],
        change: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.disabled',] }]
    };

    // Value accessor for the component (supports ngModel)
    var MULTI_DATE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoMultiDateInputElement; }),
        multi: true,
    };
    var NovoMultiDateInputElement = /** @class */ (function () {
        function NovoMultiDateInputElement(element, labels, cdr, dateFormatService) {
            this.element = element;
            this.labels = labels;
            this.cdr = cdr;
            this.dateFormatService = dateFormatService;
            this.formattedStartDate = '';
            this.formattedEndDate = '';
            this.format = 'shortDate';
            this.allowInvalidDate = false;
            this.weekStart = 0;
            this.chipsCount = 5;
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
            this.change = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this._value = [];
            this._disabled = false;
            this.notShown = {};
            this.onChangeCallback = function (_) {
                // placeholder
            };
            this.onTouchedCallback = function () {
                // placeholder
            };
            this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
        }
        Object.defineProperty(NovoMultiDateInputElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this.value !== value) {
                    this._value = value;
                    this._setFormValue(value);
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoMultiDateInputElement.prototype, "disabled", {
            // Disabled State
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        NovoMultiDateInputElement.prototype.ngOnInit = function () {
            this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
            // if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            //   this.maskOptions = this.maskOptions || {
            //     mask: this.dateFormatService.getDateMask(),
            //     pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormatString().toLowerCase()),
            //     keepCharPositions: false,
            //     guide: true,
            //   };
            // } else {
            //   this.maskOptions = { mask: false };
            // }
        };
        NovoMultiDateInputElement.prototype.formatter = function (value) {
            var _a = __read(this.dateFormatService.parseString(value, false, 'date'), 2), dateTimeValue = _a[0], formatted = _a[1];
            return formatted;
        };
        /** BEGIN: Convenient Panel Methods. */
        NovoMultiDateInputElement.prototype.openPanel = function () {
            if (!this.disabled) {
                this.panelOpen ? this.overlay.closePanel() : this.overlay.openPanel();
            }
        };
        NovoMultiDateInputElement.prototype.closePanel = function () {
            this.overlay && this.overlay.closePanel();
        };
        Object.defineProperty(NovoMultiDateInputElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        /** END: Convenient Panel Methods. */
        NovoMultiDateInputElement.prototype._handleKeydown = function (event) {
            if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
                this.closePanel();
                event.stopPropagation();
            }
        };
        NovoMultiDateInputElement.prototype._handleBlur = function (event) {
            this.blurEvent.emit(event);
        };
        NovoMultiDateInputElement.prototype._handleFocus = function (event) {
            this.openPanel();
            this.focusEvent.emit(event);
        };
        NovoMultiDateInputElement.prototype.remove = function (event, date) {
            var current = new Set(this.value);
            if (current.has(date)) {
                current.delete(date);
            }
            this.value = __spread(current);
        };
        NovoMultiDateInputElement.prototype.writeValue = function (value) {
            this.value = value;
            this.cdr.markForCheck();
        };
        NovoMultiDateInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoMultiDateInputElement.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NovoMultiDateInputElement.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NovoMultiDateInputElement.prototype._setFormValue = function (value) {
            if (this.value) {
                // this.formattedStartDate = this.formatDateValue(this.value.startDate);
            }
        };
        /**
         * This method closes the panel, and if a value is specified, also sets the associated
         * control to that value. It will also mark the control as dirty if this interaction
         * stemmed from the user.
         */
        NovoMultiDateInputElement.prototype.setValueAndClose = function (event) {
            if (event === void 0) { event = []; }
            if (event) {
                this.value = event;
                this.change.emit(this.value);
            }
            // this.closePanel();
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoMultiDateInputElement.prototype.clearValue = function () {
            this.value = [];
            this.change.emit(this.value);
        };
        Object.defineProperty(NovoMultiDateInputElement.prototype, "hasValue", {
            get: function () {
                return !Helpers.isEmpty(this.value);
            },
            enumerable: false,
            configurable: true
        });
        return NovoMultiDateInputElement;
    }());
    NovoMultiDateInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-multi-date-input',
                    providers: [MULTI_DATE_VALUE_ACCESSOR],
                    template: "\n    <novo-chip-list>\n      <novo-chip *ngFor=\"let date of value | default: []\" (removed)=\"remove($event, date)\">\n        {{ date | date: format }}\n        <novo-icon novoChipRemove>close</novo-icon>\n      </novo-chip>\n    </novo-chip-list>\n    <!-- <div *ngIf=\"value.length > chipsCount\">\n      <ul class=\"summary\">\n        <li *ngFor=\"let type of notShown\">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>\n      </ul>\n    </div> -->\n    <div class=\"chip-input-container\" (click)=\"_handleFocus($event)\">\n      <span class=\"placeholder\" *ngIf=\"!value.length\" data-automation-id=\"multi-date-input\">{{ placeholder }}</span>\n    </div>\n    <novo-icon class=\"panel-toggle\" [class.selected]=\"panelOpen\" (click)=\"openPanel()\">calendar</novo-icon>\n    <label class=\"clear-all\" *ngIf=\"value.length\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-date-picker\n        [start]=\"start\"\n        [end]=\"end\"\n        inline=\"true\"\n        mode=\"multiple\"\n        (onSelect)=\"setValueAndClose($event)\"\n        [(ngModel)]=\"value\"\n        [weekStart]=\"weekStart\"\n      ></novo-date-picker>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoMultiDateInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: DateFormatService }
    ]; };
    NovoMultiDateInputElement.propDecorators = {
        name: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        end: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        allowInvalidDate: [{ type: i0.Input }],
        weekStart: [{ type: i0.Input }],
        chipsCount: [{ type: i0.Input }],
        blurEvent: [{ type: i0.Output }],
        focusEvent: [{ type: i0.Output }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }],
        change: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.disabled',] }]
    };

    // NG2
    var NovoDatePickerModule = /** @class */ (function () {
        function NovoDatePickerModule() {
        }
        return NovoDatePickerModule;
    }());
    NovoDatePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        NovoButtonModule,
                        NovoPipesModule,
                        NovoOverlayModule,
                        angular2TextMask.TextMaskModule,
                        NovoIconModule,
                        NovoChipsModule,
                        NovoCalendarModule,
                    ],
                    declarations: [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement],
                    exports: [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement],
                },] }
    ];

    // NG2
    var NovoBoxElement = /** @class */ (function () {
        function NovoBoxElement() {
            this.direction = 'row';
            this.align = 'center';
            this.justify = 'flex-start';
            this.wrap = 'nowrap';
            // get hb_gridCols() {
            //   return this._sanitizer.bypassSecurityTrustStyle(`repeat(${this.columns}, ${ResourceSettings.eventWidth})`);
            // }
        }
        Object.defineProperty(NovoBoxElement.prototype, "display", {
            get: function () {
                return 'block';
            },
            enumerable: false,
            configurable: true
        });
        return NovoBoxElement;
    }());
    NovoBoxElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-box',
                    template: " <ng-content></ng-content> "
                },] }
    ];
    NovoBoxElement.propDecorators = {
        display: [{ type: i0.HostBinding, args: ['style.display',] }],
        direction: [{ type: i0.HostBinding, args: ['style.flex-direction',] }, { type: i0.Input }],
        align: [{ type: i0.HostBinding, args: ['style.align-items',] }, { type: i0.Input }],
        justify: [{ type: i0.HostBinding, args: ['style.justify-content',] }, { type: i0.Input }],
        wrap: [{ type: i0.HostBinding, args: ['style.flex-wrap',] }, { type: i0.Input }],
        gap: [{ type: i0.HostBinding, args: ['style.gap',] }, { type: i0.Input }]
    };

    var NovoFlexElement = /** @class */ (function () {
        function NovoFlexElement() {
            this.direction = 'row';
            this.align = 'center';
            this.justify = 'flex-start';
            this.wrap = 'nowrap';
            // get hb_gridCols() {
            //   return this._sanitizer.bypassSecurityTrustStyle(`repeat(${this.columns}, ${ResourceSettings.eventWidth})`);
            // }
        }
        Object.defineProperty(NovoFlexElement.prototype, "display", {
            get: function () {
                return 'flex';
            },
            enumerable: false,
            configurable: true
        });
        return NovoFlexElement;
    }());
    NovoFlexElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-flex,novo-row',
                    template: " <ng-content></ng-content> "
                },] }
    ];
    NovoFlexElement.propDecorators = {
        display: [{ type: i0.HostBinding, args: ['style.display',] }],
        direction: [{ type: i0.HostBinding, args: ['style.flex-direction',] }, { type: i0.Input }],
        align: [{ type: i0.HostBinding, args: ['style.align-items',] }, { type: i0.Input }],
        justify: [{ type: i0.HostBinding, args: ['style.justify-content',] }, { type: i0.Input }],
        wrap: [{ type: i0.HostBinding, args: ['style.flex-wrap',] }, { type: i0.Input }],
        gap: [{ type: i0.HostBinding, args: ['style.gap',] }, { type: i0.Input }]
    };
    var NovoStackElement = /** @class */ (function (_super) {
        __extends(NovoStackElement, _super);
        function NovoStackElement() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.direction = 'column';
            _this.align = 'start';
            return _this;
        }
        return NovoStackElement;
    }(NovoFlexElement));
    NovoStackElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-stack,novo-column',
                    template: " <ng-content></ng-content> "
                },] }
    ];
    NovoStackElement.propDecorators = {
        direction: [{ type: i0.HostBinding, args: ['style.flex-direction',] }, { type: i0.Input }],
        align: [{ type: i0.HostBinding, args: ['style.align-items',] }, { type: i0.Input }]
    };

    // NG2
    var NovoGridElement = /** @class */ (function () {
        function NovoGridElement(_sanitizer) {
            this._sanitizer = _sanitizer;
            this.direction = 'row';
            this.align = 'start';
            this.justify = 'flex-start';
            this.columns = '1';
        }
        Object.defineProperty(NovoGridElement.prototype, "display", {
            get: function () {
                return 'grid';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoGridElement.prototype, "hb_gridCols", {
            get: function () {
                if (coercion._isNumberValue(this.columns)) {
                    return this._sanitizer.bypassSecurityTrustStyle("repeat(" + this.columns + ", 1fr)");
                }
                return this._sanitizer.bypassSecurityTrustStyle("" + this.columns);
            },
            enumerable: false,
            configurable: true
        });
        return NovoGridElement;
    }());
    NovoGridElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-grid',
                    template: " <ng-content></ng-content> "
                },] }
    ];
    NovoGridElement.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoGridElement.propDecorators = {
        display: [{ type: i0.HostBinding, args: ['style.display',] }],
        direction: [{ type: i0.HostBinding, args: ['style.flex-direction',] }, { type: i0.Input }],
        align: [{ type: i0.HostBinding, args: ['style.align-items',] }, { type: i0.Input }],
        justify: [{ type: i0.HostBinding, args: ['style.justify-content',] }, { type: i0.Input }],
        columns: [{ type: i0.Input }],
        hb_gridCols: [{ type: i0.HostBinding, args: ['style.grid-template-columns',] }]
    };

    var NovoFlexModule = /** @class */ (function () {
        function NovoFlexModule() {
        }
        return NovoFlexModule;
    }());
    NovoFlexModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoFlexElement, NovoStackElement, NovoGridElement, NovoBoxElement],
                    exports: [NovoFlexElement, NovoStackElement, NovoGridElement, NovoBoxElement],
                },] }
    ];

    // NG2
    var dragula = dragulaImported__namespace;
    var NovoDragulaService = /** @class */ (function () {
        function NovoDragulaService() {
            this.cancel = new i0.EventEmitter();
            this.cloned = new i0.EventEmitter();
            this.drag = new i0.EventEmitter();
            this.dragend = new i0.EventEmitter();
            this.drop = new i0.EventEmitter();
            this.out = new i0.EventEmitter();
            this.over = new i0.EventEmitter();
            this.remove = new i0.EventEmitter();
            this.shadow = new i0.EventEmitter();
            this.dropModel = new i0.EventEmitter();
            this.removeModel = new i0.EventEmitter();
            this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
            this.bags = [];
        }
        NovoDragulaService.prototype.add = function (name, drake) {
            var bag = this.find(name);
            if (bag) {
                throw new Error("Bag named: " + name + " already exists.");
            }
            bag = {
                name: name,
                drake: drake,
            };
            this.bags.push(bag);
            if (drake.models) {
                // models to sync with (must have same structure as containers)
                this.handleModels(name, drake);
            }
            if (!bag.initEvents) {
                this.setupEvents(bag);
            }
            return bag;
        };
        NovoDragulaService.prototype.find = function (name) {
            for (var i = 0; i < this.bags.length; i++) {
                if (this.bags[i].name === name) {
                    return this.bags[i];
                }
            }
            return null;
        };
        NovoDragulaService.prototype.destroy = function (name) {
            var bag = this.find(name);
            var i = this.bags.indexOf(bag);
            this.bags.splice(i, 1);
            bag.drake.destroy();
        };
        NovoDragulaService.prototype.setOptions = function (name, options) {
            var bag = this.add(name, dragula(options));
            this.handleModels(name, bag.drake);
        };
        NovoDragulaService.prototype.handleModels = function (name, drake) {
            var _this = this;
            var dragElm;
            var dragIndex;
            var dropIndex;
            var sourceModel;
            drake.on('remove', function (el, source) {
                if (!drake.models) {
                    return;
                }
                sourceModel = drake.models[drake.containers.indexOf(source)];
                sourceModel.splice(dragIndex, 1);
                _this.removeModel.emit([name, el, source]);
            });
            drake.on('drag', function (el, source) {
                dragElm = el;
                dragIndex = _this.domIndexOf(el, source);
            });
            drake.on('drop', function (dropElm, target, source) {
                if (!drake.models) {
                    return;
                }
                dropIndex = _this.domIndexOf(dropElm, target);
                sourceModel = drake.models[drake.containers.indexOf(source)];
                if (target === source) {
                    sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
                }
                else {
                    var notCopy = dragElm === dropElm;
                    var targetModel = drake.models[drake.containers.indexOf(target)];
                    var dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                    if (notCopy) {
                        sourceModel.splice(dragIndex, 1);
                    }
                    targetModel.splice(dropIndex, 0, dropElmModel);
                    target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
                }
                _this.dropModel.emit([name, dropElm, target, source]);
            });
        };
        NovoDragulaService.prototype.setupEvents = function (bag) {
            bag.initEvents = true;
            var that = this;
            var emitter = function (type) {
                function replicate() {
                    var args = Array.prototype.slice.call(arguments);
                    that[type].emit([bag.name].concat(args));
                }
                bag.drake.on(type, replicate);
            };
            this.events.forEach(emitter);
        };
        NovoDragulaService.prototype.domIndexOf = function (child, parent) {
            return Array.prototype.indexOf.call(parent.children, child);
        };
        return NovoDragulaService;
    }());
    NovoDragulaService.decorators = [
        { type: i0.Injectable }
    ];

    // NG2
    var dragula$1 = dragulaImported__namespace;
    var NovoDragulaElement = /** @class */ (function () {
        function NovoDragulaElement(element, dragulaService) {
            this.dragulaService = dragulaService;
            this.drake = null;
            this.container = element.nativeElement;
        }
        NovoDragulaElement.prototype.ngOnInit = function () {
            var bag = this.dragulaService.find(this.bag);
            if (bag) {
                this.drake = bag.drake;
                this.checkModel();
                this.drake.containers.push(this.container);
            }
            else {
                this.drake = dragula$1({
                    containers: [this.container],
                });
                this.checkModel();
                this.dragulaService.add(this.bag, this.drake);
            }
        };
        NovoDragulaElement.prototype.checkModel = function () {
            if (this.dragulaModel) {
                if (this.drake.models) {
                    this.drake.models.push(this.dragulaModel);
                }
                else {
                    this.drake.models = [this.dragulaModel];
                }
            }
        };
        NovoDragulaElement.prototype.ngOnChanges = function (changes) {
            if (changes && changes.dragulaModel) {
                if (this.drake) {
                    if (this.drake.models) {
                        var modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                        this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                    }
                    else {
                        this.drake.models = [changes.dragulaModel.currentValue];
                    }
                }
            }
        };
        return NovoDragulaElement;
    }());
    NovoDragulaElement.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[dragula]',
                },] }
    ];
    NovoDragulaElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoDragulaService }
    ]; };
    NovoDragulaElement.propDecorators = {
        bag: [{ type: i0.Input, args: ['dragula',] }],
        dragulaModel: [{ type: i0.Input }]
    };

    // NG2
    var NovoDragulaModule = /** @class */ (function () {
        function NovoDragulaModule() {
        }
        return NovoDragulaModule;
    }());
    NovoDragulaModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [NovoDragulaElement],
                    exports: [NovoDragulaElement],
                },] }
    ];

    var NovoDividerComponent = /** @class */ (function () {
        function NovoDividerComponent() {
            this._vertical = false;
            this._inset = false;
        }
        Object.defineProperty(NovoDividerComponent.prototype, "vertical", {
            /** Whether the divider is vertically aligned. */
            get: function () {
                return this._vertical;
            },
            set: function (value) {
                this._vertical = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDividerComponent.prototype, "inset", {
            /** Whether the divider is an inset divider. */
            get: function () {
                return this._inset;
            },
            set: function (value) {
                this._inset = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        return NovoDividerComponent;
    }());
    NovoDividerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-divider',
                    host: {
                        role: 'separator',
                        '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                        '[class.novo-divider-vertical]': 'vertical',
                        '[class.novo-divider-horizontal]': '!vertical',
                        '[class.novo-divider-inset]': 'inset',
                        class: 'novo-divider',
                    },
                    template: '',
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-divider{border-top:1px solid var(--border);display:block;margin:0}.novo-divider.novo-divider-vertical{border-right:1px solid var(--border);border-top:0;display:inline;margin-left:1rem;margin-right:1rem}.novo-divider.novo-divider-inset{margin-left:80px}[dir=rtl] .novo-divider.novo-divider-inset{margin-left:auto;margin-right:80px}"]
                },] }
    ];
    NovoDividerComponent.propDecorators = {
        vertical: [{ type: i0.Input }],
        inset: [{ type: i0.Input }]
    };

    var NovoDividerModule = /** @class */ (function () {
        function NovoDividerModule() {
        }
        return NovoDividerModule;
    }());
    NovoDividerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                    exports: [NovoDividerComponent],
                    declarations: [NovoDividerComponent],
                },] }
    ];

    // Value accessor for the component (supports ngModel)
    // const SELECT_VALUE_ACCESSOR = {
    //   provide: NG_VALUE_ACCESSOR,
    //   useExisting: forwardRef(() => NovoSelectElement),
    //   multi: true,
    // };
    /** Change event object that is emitted when the select value has changed. */
    var NovoSelectChange = /** @class */ (function () {
        function NovoSelectChange(
        /** Reference to the select that emitted the change event. */
        source, 
        /** Current value of the select that emitted the event. */
        value) {
            this.source = source;
            this.value = value;
        }
        return NovoSelectChange;
    }());
    // Create Base Class from Mixins
    // Boilerplate for applying mixins
    var NovoSelectBase = /** @class */ (function () {
        function NovoSelectBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return NovoSelectBase;
    }());
    var NovoSelectMixins = mixinOverlay(mixinTabIndex(mixinRequired(mixinDisabled(mixinErrorState(NovoSelectBase)))));
    var nextId$1 = 0;
    var NovoSelectElement = /** @class */ (function (_super) {
        __extends(NovoSelectElement, _super);
        function NovoSelectElement(elementRef, labels, ref, focusMonitor, ngZone, defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
            var _this = _super.call(this, defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;
            _this.elementRef = elementRef;
            _this.labels = labels;
            _this.ref = ref;
            _this.focusMonitor = focusMonitor;
            _this.ngZone = ngZone;
            _this._uniqueId = "novo-select-" + ++nextId$1;
            _this._stateChanges = rxjs.Subscription.EMPTY;
            _this._activeOptionChanges = rxjs.Subscription.EMPTY;
            _this._selectedOptionChanges = rxjs.Subscription.EMPTY;
            _this._destroy = new rxjs.Subject();
            _this.controlType = 'select';
            /** @docs-private Implemented as part of NovoFieldControl. */
            _this.lastKeyValue = null;
            /** Tab index for the chip list. */
            _this._tabIndex = 0;
            /** User defined tab index. */
            _this._userTabIndex = null;
            _this.id = _this._uniqueId;
            _this.name = _this._uniqueId;
            _this.placeholder = 'Select...';
            _this.position = 'above-below';
            _this.onSelect = new i0.EventEmitter();
            /** Event emitted when the selected value has been changed by the user. */
            _this.selectionChange = new i0.EventEmitter();
            /** Event that emits whenever the raw value of the select changes.*/
            _this.valueChange = new i0.EventEmitter();
            /** Event emitted when the select panel has been toggled. */
            _this.openedChange = new i0.EventEmitter();
            /** Event emitted when the select has been opened. */
            _this._openedStream = _this.openedChange.pipe(operators.filter(function (o) { return o; }), operators.map(function () { }));
            /** Event emitted when the select has been closed. */
            _this._closedStream = _this.openedChange.pipe(operators.filter(function (o) { return !o; }), operators.map(function () { }));
            /** Function that maps an option's control value to its display value in the trigger. */
            _this.displayWith = null;
            /** * Function to compare the option values with the selected values. */
            _this.compareWith = function (o1, o2) { return o1 === o2 || o1 === o2.id || (!Helpers.isEmpty(o1.id) && !Helpers.isEmpty(o2.id) && o1.id === o2.id); };
            _this.header = {
                open: false,
                valid: true,
                value: '',
            };
            _this.onModelChange = function () { };
            _this.onModelTouched = function () { };
            _this.filterTerm = '';
            _this.disabled = false;
            _this._value = null;
            _this._multiple = false;
            _this._focused = false;
            if (ngControl) {
                ngControl.valueAccessor = _this;
            }
            _this._selectionModel = new collections.SelectionModel(_this.multiple);
            return _this;
        }
        Object.defineProperty(NovoSelectElement.prototype, "value", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._value;
            },
            set: function (newValue) {
                // Always re-assign an array, because it might have been mutated.
                if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {
                    if (this.options) {
                        this._setSelectionByValue(newValue);
                    }
                    this._value = newValue;
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectElement.prototype, "multiple", {
            /** Whether the user should be allowed to select multiple options. */
            get: function () {
                return this._multiple;
            },
            set: function (value) {
                this._multiple = coercion.coerceBooleanProperty(value);
                this.position = 'above-below';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectElement.prototype, "focused", {
            /** Whether the select is focused. */
            get: function () {
                return this._focused || this.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectElement.prototype, "empty", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return this._value === null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectElement.prototype, "selected", {
            /** The currently selected option. */
            get: function () {
                return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectElement.prototype, "displayValue", {
            /** The value displayed in the trigger. */
            get: function () {
                var _this = this;
                if (this.empty) {
                    return '';
                }
                if (this._multiple) {
                    var selectedOptions = this._selectionModel.selected.map(function (option) { return _this._getDisplayValue(option); });
                    return selectedOptions.join(', ');
                }
                return this._getDisplayValue(this._selectionModel.selected[0]);
            },
            enumerable: false,
            configurable: true
        });
        NovoSelectElement.prototype.ngOnInit = function () {
            var _this = this;
            this.stateChanges.next();
            this._initLegacyOptions();
            this.focusMonitor.monitor(this.dropdown.nativeElement).subscribe(function (origin) { return _this.ngZone.run(function () {
                if (origin === 'keyboard' && !_this.disabled) {
                    _this.openPanel();
                }
                _this._focused = !!origin;
                _this.stateChanges.next();
            }); });
        };
        NovoSelectElement.prototype.ngOnChanges = function (changes) {
            // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
            // the parent form field know to run change detection when the disabled state changes.
            if (changes === null || changes === void 0 ? void 0 : changes.disabled) {
                this.stateChanges.next();
            }
            if (changes === null || changes === void 0 ? void 0 : changes.multiple) {
                // TODO: copy selection over??
                this._selectionModel = new collections.SelectionModel(this.multiple);
            }
            this._initLegacyOptions();
        };
        NovoSelectElement.prototype.ngAfterViewInit = function () {
            var _this = this;
            // Initialize KeyManager to manage keyboard events
            this._initKeyManager();
            // Subscribe to NovoOption selections
            this._watchSelectionEvents();
            // Set initial value
            this._initializeSelection();
            // Listen to selection changes to select and deselect options
            this._selectionModel.changed.pipe(operators.takeUntil(this._destroy)).subscribe(function (event) {
                event.added.forEach(function (option) {
                    if (option.select) {
                        option.select();
                    }
                });
                event.removed.forEach(function (option) {
                    if (option.deselect) {
                        option.deselect();
                    }
                });
            });
            // Listen to QueryList changes
            rxjs.merge(this.contentOptions.changes, this.viewOptions.changes)
                .pipe(operators.takeUntil(this._destroy))
                .subscribe(function () {
                _this._watchSelectionEvents();
                _this._initializeSelection();
            });
            rxjs.merge(this.overlay.opening, this.overlay.closing)
                .pipe(operators.takeUntil(this._destroy))
                .subscribe(function () {
                _this.openedChange.emit(_this.panelOpen);
            });
        };
        NovoSelectElement.prototype.ngOnDestroy = function () {
            this._destroy.next();
            this._destroy.complete();
            this._stateChanges.unsubscribe();
            this._activeOptionChanges.unsubscribe();
            this._selectedOptionChanges.unsubscribe();
            this.focusMonitor.stopMonitoring(this.dropdown.nativeElement);
        };
        NovoSelectElement.prototype.openPanel = function () {
            _super.prototype.openPanel.call(this);
            this._highlightCorrectOption();
        };
        NovoSelectElement.prototype._initializeSelection = function () {
            var _this = this;
            // Defer setting the value in order to avoid the "Expression
            // has changed after it was checked" errors from Angular.
            Promise.resolve().then(function () {
                _this._setSelectionByValue(_this.ngControl ? _this.ngControl.value : _this._value);
                _this.stateChanges.next();
            });
        };
        /**
         * Sets the selected option based on a value. If no option can be
         * found with the designated value, the select trigger is cleared.
         */
        NovoSelectElement.prototype._setSelectionByValue = function (value) {
            var _this = this;
            this._selectionModel.selected.forEach(function (option) {
                if (option.setInactiveStyles) {
                    option.setInactiveStyles();
                }
            });
            this._selectionModel.clear();
            if (this.multiple && value) {
                value.forEach(function (currentValue) { return _this._selectValue(currentValue); });
                this._sortValues();
            }
            else if (this._keyManager) {
                var correspondingOption = this._selectValue(value);
                // Shift focus to the active item. Note that we shouldn't do this in multiple
                // mode, because we don't know what option the user interacted with last.
                if (correspondingOption) {
                    this._keyManager.updateActiveItem(correspondingOption);
                }
                else if (!this.panelOpen) {
                    // Otherwise reset the highlighted option. Note that we only want to do this while
                    // closed, because doing it while open can shift the user's focus unnecessarily.
                    this._keyManager.updateActiveItem(-1);
                }
            }
            this.ref.markForCheck();
        };
        /**
         * Finds and selects and option based on its value.
         * @returns Option that has the corresponding value.
         */
        NovoSelectElement.prototype._selectValue = function (value) {
            var _this = this;
            var allOptions = this._getOptions();
            var correspondingOption = allOptions.find(function (option) {
                // Skip options that are already in the model. This allows us to handle cases
                // where the same primitive value is selected multiple times.
                if (_this._selectionModel.isSelected(option)) {
                    return false;
                }
                return !Helpers.isEmpty(value) && !Helpers.isEmpty(option.value) && _this.compareWith(option.value, value);
            });
            if (correspondingOption) {
                this._selectionModel.select(correspondingOption);
            }
            else if (value && !correspondingOption) {
                // Double Check option not already added.
                var legacyOption = this.filteredOptions.find(function (it) { return it.value === value; });
                if (!legacyOption) {
                    // Add a disabled option to the list and select it
                    this.filteredOptions.push({
                        disabled: true,
                        tooltip: 'Value is not provided in list of valid options.',
                        label: (value === null || value === void 0 ? void 0 : value.label) || value,
                        value: value,
                    });
                    this.ref.detectChanges();
                }
            }
            return correspondingOption;
        };
        NovoSelectElement.prototype.select = function (option, i, fireEvents) {
            if (fireEvents === void 0) { fireEvents = true; }
            console.warn('select() method is deprecated');
        };
        NovoSelectElement.prototype.clear = function () {
            console.warn('clear() method is deprecated');
        };
        /**
         * If the item is not disabled, this method closes the panel, and if a value is specified,
         * also sets the associated control to that value. It will also mark the control as dirty
         * if this interaction stemmed from the user.
         */
        NovoSelectElement.prototype.handleSelection = function (option, isUserInput) {
            if (isUserInput === void 0) { isUserInput = false; }
            var wasSelected = this._selectionModel.isSelected(option);
            if (option.value == null && !this._multiple) {
                option.deselect();
                this._selectionModel.clear();
                if (this.value != null) {
                    this._propagateChanges(option.value);
                }
            }
            else {
                if (wasSelected !== option.selected) {
                    option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);
                }
                if (isUserInput) {
                    this._keyManager.setActiveItem(option);
                }
                if (this.multiple) {
                    this._sortValues();
                    if (isUserInput) {
                        this.focus();
                    }
                }
            }
            if (wasSelected !== this._selectionModel.isSelected(option)) {
                this._propagateChanges();
            }
            this.stateChanges.next();
            this._watchSelectionEvents();
        };
        NovoSelectElement.prototype._getDisplayValue = function (option) {
            if (!option) {
                return '';
            }
            var toDisplay = option.viewValue;
            if (this.displayWith) {
                toDisplay = this.displayWith(option.value);
            }
            // Simply falling back to an empty string if the display value is falsy does not work properly.
            // The display value can also be the number zero and shouldn't fall back to an empty string.
            var displayValue = toDisplay != null ? toDisplay : '';
            return displayValue;
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoSelectElement.prototype._clearPreviousSelectedOption = function (skip) {
            this._getOptions().forEach(function (option) {
                if (option !== skip && option.selected) {
                    option.deselect();
                }
            });
        };
        NovoSelectElement.prototype._watchSelectionEvents = function () {
            var _this = this;
            var options = this._getOptions();
            var selectionEvents = options ? rxjs.merge.apply(void 0, __spread(options.map(function (option) { return option.onSelectionChange; }))) : rxjs.of();
            this._selectedOptionChanges.unsubscribe();
            this._selectedOptionChanges = selectionEvents.pipe(operators.take(1)).subscribe(function (event) {
                _this.onModelTouched();
                _this.handleSelection(event.source, event.isUserInput);
                if (event.isUserInput && !_this.multiple && _this.panelOpen) {
                    _this.closePanel();
                    _this.focus();
                }
            });
        };
        /** Handles all keydown events on the select. */
        NovoSelectElement.prototype._handleKeydown = function (event) {
            if (!this.disabled) {
                this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
            }
        };
        /** Handles keyboard events while the select is closed. */
        NovoSelectElement.prototype._handleClosedKeydown = function (event) {
            var key = event.key;
            var isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */ || key === "ArrowLeft" /* ArrowLeft */ || key === "ArrowRight" /* ArrowRight */;
            var isOpenKey = key === "Enter" /* Enter */ || key === " " /* Space */;
            var manager = this._keyManager;
            // Open the select on ALT + arrow key to match the native <select>
            if ((!manager.isTyping() && isOpenKey && !keycodes.hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
                event.preventDefault(); // prevents the page from scrolling down when pressing space
                this.openPanel();
            }
            // Allow changing value with arrow keys.
            // else if (!this.multiple) {
            //   const previouslySelectedOption = this.selected;
            //   manager.onKeydown(event);
            //   const selectedOption = this.selected;
            // }
        };
        /** Handles keyboard events when the selected is open. */
        NovoSelectElement.prototype._handleOpenKeydown = function (event) {
            var manager = this._keyManager;
            var key = event.key;
            var isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */;
            var isTyping = manager.isTyping();
            if (isArrowKey && event.altKey) {
                // Close the select on ALT + arrow key to match the native <select>
                event.preventDefault();
                this.closePanel();
                // Don't do anything in this case if the user is typing,
                // because the typing sequence can include the space key.
            }
            else if (!isTyping && (key === "Enter" /* Enter */ || key === " " /* Space */) && manager.activeItem && !keycodes.hasModifierKey(event)) {
                event.preventDefault();
                manager.activeItem._selectViaInteraction();
            }
            else if (!isTyping && this._multiple && ['a', 'A'].includes(key) && event.ctrlKey) {
                event.preventDefault();
                var hasDeselectedOptions_1 = this.options.some(function (opt) { return !opt.disabled && !opt.selected; });
                this.options.forEach(function (option) {
                    if (!option.disabled) {
                        hasDeselectedOptions_1 ? option.select() : option.deselect();
                    }
                });
            }
            else if ("Escape" /* Escape */ === key) {
                this.closePanel();
            }
            else {
                var previouslyFocusedIndex = manager.activeItemIndex;
                manager.onKeydown(event);
                if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                    manager.activeItem._selectViaInteraction();
                }
            }
        };
        NovoSelectElement.prototype.writeValue = function (value) {
            this.value = value;
        };
        NovoSelectElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoSelectElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoSelectElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        /** Implemented as part of NovoFieldControl. */
        NovoSelectElement.prototype.setDescribedByIds = function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        /** Implemented as part of NovoFieldControl. */
        NovoSelectElement.prototype.onContainerClick = function (event) {
            this.focus();
        };
        /**
         * Focuses the first non-disabled chip in this chip list, or the associated input when there
         * are no eligible chips.
         */
        NovoSelectElement.prototype.focus = function (options) {
            if (!this.disabled) {
                this.dropdown.nativeElement.focus(options);
            }
        };
        NovoSelectElement.prototype._getOptions = function () {
            return __spread((this.viewOptions || []), (this.contentOptions || []));
        };
        /** Sorts the selected values in the selected based on their order in the panel. */
        NovoSelectElement.prototype._sortValues = function () {
            if (this.multiple) {
                // TODO.
            }
        };
        /** Emits change event to set the model value. */
        NovoSelectElement.prototype._propagateChanges = function (fallbackValue) {
            var valueToEmit = null;
            if (this.multiple) {
                valueToEmit = this.selected.map(function (option) { return option.value; });
            }
            else {
                valueToEmit = this.selected ? this.selected.value : fallbackValue;
            }
            this._value = valueToEmit;
            this.valueChange.emit(valueToEmit);
            this.onModelChange(valueToEmit);
            this.onSelect.emit({ selected: valueToEmit });
            this.selectionChange.emit(this._makeChangeEvent(valueToEmit));
            this.ref.markForCheck();
        };
        NovoSelectElement.prototype._makeChangeEvent = function (value) {
            return new NovoSelectChange(this, value);
        };
        /** Scrolls the active option into view. */
        NovoSelectElement.prototype._scrollOptionIntoView = function (index) {
            var options = new i0.QueryList();
            options.reset(this._getOptions());
            var labelCount = _countGroupLabelsBeforeOption(index, options, this.optionGroups);
            var itemHeight = this._getItemHeight();
            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, this.panel.nativeElement.offsetHeight);
        };
        /** Sets up a key manager to listen to keyboard events on the overlay panel. */
        NovoSelectElement.prototype._initKeyManager = function () {
            var _this = this;
            this._keyManager = new a11y.ActiveDescendantKeyManager(this._getOptions()).withTypeAhead(250).withHomeAndEnd();
            // .withAllowedModifierKeys(['shiftKey']);
            this._keyManager.tabOut.pipe(operators.takeUntil(this._destroy)).subscribe(function () {
                if (_this.panelOpen) {
                    // Select the active item when tabbing away. This is consistent with how the native
                    // select behaves. Note that we only want to do this in single selection mode.
                    if (!_this.multiple && _this._keyManager.activeItem) {
                        _this._keyManager.activeItem._selectViaInteraction();
                    }
                    // Restore focus to the trigger before closing. Ensures that the focus
                    // position won't be lost if the user got focus into the overlay.
                    _this.focus();
                    _this.closePanel();
                }
            });
            this._keyManager.change.pipe(operators.takeUntil(this._destroy)).subscribe(function () {
                if (_this.panelOpen && _this.overlay) {
                    _this._scrollOptionIntoView(_this._keyManager.activeItemIndex || 0);
                }
                else if (!_this.panelOpen && !_this.multiple && _this._keyManager.activeItem) {
                    _this._keyManager.activeItem._selectViaInteraction();
                }
            });
        };
        /**
         * Highlights the selected item. If no option is selected, it will highlight
         * the first item instead.
         */
        NovoSelectElement.prototype._highlightCorrectOption = function () {
            if (this._keyManager) {
                if (this.empty) {
                    this._keyManager.setFirstItemActive();
                }
                else {
                    this._keyManager.setActiveItem(this._value);
                }
            }
        };
        /** Calculates the height of the select's options. */
        NovoSelectElement.prototype._getItemHeight = function () {
            var _a = __read(this._getOptions(), 1), first = _a[0];
            if (first) {
                return first._getHostElement().offsetHeight;
            }
            return 0;
        };
        // TODO: Deprecate this
        NovoSelectElement.prototype._initLegacyOptions = function () {
            if (this.options && this.options.length && typeof this.options[0] === 'string') {
                this.filteredOptions = this.options.map(function (item) {
                    return { value: item, label: item };
                });
            }
            else {
                this.filteredOptions = (this.options || [])
                    .map(function (item) {
                    return Object.assign(Object.assign({}, item), { disabled: item.readOnly || item.disabled });
                })
                    .map(function (item) {
                    return Object.assign(Object.assign({}, item), { active: false });
                });
            }
        };
        /**
         * TODO: Deprecate all header methods
         */
        NovoSelectElement.prototype.toggleHeader = function (event, forceValue) {
            if (forceValue === void 0) { forceValue = false; }
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            // Reverse the active property (if forceValue, use that)
            this.header = {
                open: forceValue !== undefined ? forceValue : !this.header.open,
                value: '',
                valid: true,
            };
        };
        NovoSelectElement.prototype.highlight = function (match, query) {
            // Replaces the capture string with a the same string inside of a "strong" tag
            return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
        };
        NovoSelectElement.prototype.escapeRegexp = function (queryToEscape) {
            // Ex: if the capture is "a" the result will be \a
            return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
        };
        NovoSelectElement.prototype.saveHeader = function () {
            if (this.header.value) {
                this.headerConfig.onSave(this.header.value);
                this.createdItem = this.header.value;
                this.closePanel();
            }
            else {
                this.header.valid = false;
            }
        };
        /** Determines the `aria-activedescendant` to be set on the host. */
        NovoSelectElement.prototype._getAriaActiveDescendant = function () {
            if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
                return this._keyManager.activeItem.id;
            }
            return null;
        };
        return NovoSelectElement;
    }(NovoSelectMixins));
    NovoSelectElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-select',
                    inputs: ['disabled', 'required', 'tabIndex'],
                    providers: [
                        { provide: NovoFieldControl, useExisting: NovoSelectElement },
                        { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoSelectElement },
                    ],
                    template: "\n    <div class=\"novo-select-trigger\" #dropdownElement (click)=\"togglePanel(); (false)\" tabIndex=\"{{ disabled ? -1 : 0 }}\" type=\"button\">\n      <span class=\"novo-select-placeholder\" *ngIf=\"empty\">{{ placeholder }}</span>\n      <span class=\"novo-select-display-value\" *ngIf=\"!empty\">{{ displayValue }}</span>\n      <i class=\"bhi-collapse\"></i>\n    </div>\n    <novo-overlay-template\n      [parent]=\"elementRef\"\n      [position]=\"position\"\n      [width]=\"overlayWidth\"\n      [height]=\"overlayHeight\"\n      (closing)=\"dropdown.nativeElement.focus()\"\n    >\n      <div #panel class=\"novo-select-list\" tabIndex=\"-1\" [class.has-header]=\"headerConfig\" [class.active]=\"panelOpen\">\n        <novo-option *ngIf=\"headerConfig\" class=\"select-header\" [class.open]=\"header.open\">\n          <novo-button *ngIf=\"!header.open\" icon=\"add-thin\" (click)=\"toggleHeader($event); (false)\" tabIndex=\"-1\" class=\"header\">\n            {{ headerConfig.label }}\n          </novo-button>\n          <div *ngIf=\"header.open\" [ngClass]=\"{ active: header.open }\">\n            <input\n              autofocus\n              type=\"text\"\n              [placeholder]=\"headerConfig.placeholder\"\n              [attr.id]=\"name\"\n              autocomplete=\"off\"\n              [value]=\"header.value\"\n              [ngClass]=\"{ invalid: !header.valid }\"\n            />\n            <footer>\n              <novo-button (click)=\"toggleHeader($event, false)\">{{ labels.cancel }}</novo-button>\n              <novo-button (click)=\"saveHeader()\" class=\"primary\">{{ labels.save }}</novo-button>\n            </footer>\n          </div>\n        </novo-option>\n        <!-- Declarative Content Goes Here -->\n        <ng-content></ng-content>\n        <!-- Data Driven Content Goes Here -->\n        <ng-container *ngFor=\"let option of filteredOptions; let i = index\">\n          <novo-option\n            *ngIf=\"!option.divider; else divider\"\n            class=\"select-item\"\n            [disabled]=\"option.disabled\"\n            [class.active]=\"option.active\"\n            [attr.data-automation-value]=\"option.label\"\n            [value]=\"option.value\"\n            [tooltip]=\"option.tooltip\"\n            [tooltipPosition]=\"option.tooltipPosition || 'right'\"\n          >\n            <span [innerHtml]=\"highlight(option.label, filterTerm)\"></span> <i *ngIf=\"option.active\" class=\"bhi-check\"></i>\n          </novo-option>\n          <ng-template #divider>\n            <novo-divider class=\"select-item-divider\" [class.with-label]=\"option.label\" [class.without-label]=\"!option.label\">\n              {{ option?.label }}\n            </novo-divider>\n          </ng-template>\n        </ng-container>\n      </div>\n    </novo-overlay-template>\n  ",
                    host: {
                        class: 'novo-select',
                        role: 'combobox',
                        'aria-autocomplete': 'none',
                        'aria-haspopup': 'true',
                        '[attr.id]': 'id',
                        '[attr.aria-controls]': 'panelOpen ? id + "-panel" : null',
                        '[attr.aria-expanded]': 'panelOpen',
                        '[attr.aria-required]': 'required.toString()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.aria-describedby]': '_ariaDescribedby || null',
                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',
                        '[class.novo-select-disabled]': 'disabled',
                        '[class.novo-select-invalid]': 'errorState',
                        '[class.novo-select-required]': 'required',
                        '[class.novo-select-empty]': 'empty',
                        '[class.novo-select-multiple]': 'multiple',
                    }
                },] }
    ];
    NovoSelectElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: a11y.FocusMonitor },
        { type: i0.NgZone },
        { type: ErrorStateMatcher },
        { type: forms.NgControl, decorators: [{ type: i0.Optional }, { type: i0.Self }] },
        { type: forms.NgForm, decorators: [{ type: i0.Optional }] },
        { type: forms.FormGroupDirective, decorators: [{ type: i0.Optional }] }
    ]; };
    NovoSelectElement.propDecorators = {
        id: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        readonly: [{ type: i0.Input }],
        headerConfig: [{ type: i0.Input }],
        position: [{ type: i0.Input }],
        overlayWidth: [{ type: i0.Input }],
        overlayHeight: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }],
        selectionChange: [{ type: i0.Output }],
        valueChange: [{ type: i0.Output }],
        openedChange: [{ type: i0.Output }],
        _openedStream: [{ type: i0.Output, args: ['opened',] }],
        _closedStream: [{ type: i0.Output, args: ['closed',] }],
        displayWith: [{ type: i0.Input }],
        compareWith: [{ type: i0.Input }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent, { static: true },] }],
        dropdown: [{ type: i0.ViewChild, args: ['dropdownElement', { static: true },] }],
        optionGroups: [{ type: i0.ContentChildren, args: [NovoOptgroup, { descendants: true },] }],
        contentOptions: [{ type: i0.ContentChildren, args: [NovoOption, { descendants: true },] }],
        viewOptions: [{ type: i0.ViewChildren, args: [NovoOption,] }],
        panel: [{ type: i0.ViewChild, args: ['panel',] }],
        value: [{ type: i0.Input }],
        multiple: [{ type: i0.Input }],
        _handleKeydown: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }]
    };

    // NG
    var NovoSelectModule = /** @class */ (function () {
        function NovoSelectModule() {
        }
        return NovoSelectModule;
    }());
    NovoSelectModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        a11y.A11yModule,
                        common.CommonModule,
                        forms.FormsModule,
                        NovoButtonModule,
                        NovoDividerModule,
                        NovoOptionModule,
                        NovoOverlayModule,
                        NovoTooltipModule,
                    ],
                    declarations: [NovoSelectElement],
                    exports: [NovoSelectElement],
                },] }
    ];

    // NG2
    // Value accessor for the component (supports ngModel)
    var ADDRESS_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoAddressElement; }),
        multi: true,
    };
    var NovoAddressElement = /** @class */ (function () {
        function NovoAddressElement(labels) {
            this.labels = labels;
            this._readOnly = false;
            this.states = [];
            this.fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
            this.focused = {};
            this.invalid = {};
            this.disabled = {};
            this.invalidMaxlength = {};
            this.valid = {};
            this.tooltip = {};
            this.initComplete = false;
            this.change = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.validityChange = new i0.EventEmitter();
        }
        Object.defineProperty(NovoAddressElement.prototype, "readOnly", {
            get: function () {
                return this._readOnly;
            },
            set: function (readOnly) {
                var _this = this;
                this._readOnly = readOnly;
                this.fieldList.forEach(function (field) {
                    _this.disabled[field] = _this._readOnly;
                });
                if (this.model) {
                    this.updateStates();
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoAddressElement.prototype.ngOnInit = function () {
            if (!this.config) {
                this.config = {};
            }
            this.initConfig();
            if (this.model) {
                this.writeValue(this.model);
                this.updateControl();
            }
            else if (!this.model) {
                this.model = {};
            }
            if (Helpers.isBlank(this.model.countryID)) {
                this.updateStates();
            }
        };
        NovoAddressElement.prototype.initConfig = function () {
            var _this = this;
            this.fieldList.forEach(function (field) {
                if (!_this.config.hasOwnProperty(field)) {
                    _this.config[field] = {
                        hidden: true,
                    };
                }
                if (!_this.config[field].hasOwnProperty('label')) {
                    _this.config[field].label = _this.labels[field];
                }
                if (_this.config.required) {
                    _this.config[field].required = true;
                }
                if (_this.config[field].readOnly || _this.config.readOnly) {
                    _this.config[field].readOnly = true;
                    _this.disabled[field] = true;
                }
                if (field === 'countryID') {
                    if (!_this.config[field].pickerConfig) {
                        _this.config.countryID.pickerConfig = _this.getDefaultCountryConfig();
                    }
                    _this.config[field].pickerConfig.defaultOptions = _this.config.countryID.pickerConfig.options;
                }
                if (field === 'state') {
                    if (!_this.config[field].pickerConfig) {
                        _this.config.state.pickerConfig = _this.getDefaultStateConfig();
                        _this.config[field].pickerConfig.defaultOptions = _this.config[field].pickerConfig.options;
                    }
                    _this.stateOptions = _this.config[field].pickerConfig.options;
                    _this.config[field].pickerConfig.options = function (query) {
                        if (query === void 0) { query = ''; }
                        return _this.stateOptions(query, _this.model.countryID);
                    };
                    _this.config[field].pickerConfig.defaultOptions = _this.stateOptions;
                }
            });
        };
        NovoAddressElement.prototype.isValid = function (field) {
            var valid = true;
            if (((this.config[field].required && (Helpers.isBlank(this.model[field]) || Helpers.isEmpty(this.model[field]))) ||
                !this.config[field].required) &&
                !(field === 'countryID' && this.config[field].required && !Helpers.isBlank(this.model.countryID)) &&
                !(field === 'state' &&
                    this.config[field].required &&
                    (!Helpers.isEmpty(this.model.state) ||
                        ((Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                            !Helpers.isBlank(this.model.countryName) &&
                            this.config.state.pickerConfig &&
                            this.config.state.pickerConfig.defaultOptions &&
                            this.config.state.pickerConfig.defaultOptions.length === 0)))) {
                valid = false;
            }
            else if (!Helpers.isEmpty(this.model[field]) &&
                !Helpers.isBlank(this.config[field].maxlength) &&
                this.config[field].maxlength < this.model[field].length) {
                valid = false;
            }
            this.valid[field] = valid;
        };
        NovoAddressElement.prototype.isInvalid = function (field) {
            var _a, _b, _c, _d, _e, _f, _g;
            var invalid = false;
            var invalidMaxlength = false;
            if ((field !== 'countryID' &&
                field !== 'state' && ((_a = this.config[field]) === null || _a === void 0 ? void 0 : _a.required) &&
                Helpers.isEmpty(this.model[field]) &&
                !Helpers.isBlank(this.model[field])) ||
                (field === 'countryID' && ((_b = this.config[field]) === null || _b === void 0 ? void 0 : _b.required) && Helpers.isBlank(this.model.countryName) && ((_c = this.config[field]) === null || _c === void 0 ? void 0 : _c.updated)) ||
                (field === 'state' && ((_d = this.config[field]) === null || _d === void 0 ? void 0 : _d.required) &&
                    (Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                    !Helpers.isBlank(this.model.countryID) && ((_e = this.config[field]) === null || _e === void 0 ? void 0 : _e.updated) &&
                    this.config.state.pickerConfig &&
                    this.config.state.pickerConfig.defaultOptions &&
                    this.config.state.pickerConfig.defaultOptions.length > 0)) {
                invalid = true;
            }
            else if (!Helpers.isEmpty(this.model[field]) &&
                !Helpers.isBlank((_f = this.config[field]) === null || _f === void 0 ? void 0 : _f.maxlength) &&
                ((_g = this.config[field]) === null || _g === void 0 ? void 0 : _g.maxlength) < this.model[field].length) {
                invalid = true;
                invalidMaxlength = true;
            }
            this.invalid[field] = invalid;
            this.invalidMaxlength[field] = invalidMaxlength;
        };
        NovoAddressElement.prototype.onInput = function (event, field) {
            this.isInvalid(field);
            this.isValid(field);
            if (event) {
                this.change.emit({ value: this.model[field], field: field });
            }
        };
        NovoAddressElement.prototype.isFocused = function (event, field) {
            this.focused[field] = true;
            this.focus.emit({ event: event, field: field });
        };
        NovoAddressElement.prototype.isBlurred = function (event, field) {
            this.focused[field] = false;
            this.blur.emit({ event: event, field: field });
        };
        NovoAddressElement.prototype.onCountryChange = function (evt) {
            var country = evt && evt.rawValue ? evt.rawValue : null;
            var field;
            var statesUpdatable = false;
            this.config.countryID.updated = true;
            if (this.config.countryID.pickerConfig) {
                field = this.config.countryID.pickerConfig.field;
            }
            if (country && field && !Helpers.isBlank(country[field]) && this.model.countryID !== country[field]) {
                this.model.countryID = country[field];
                this.model.countryName = Helpers.interpolate(this.config.countryID.pickerConfig.format, country);
                this.disabled.state = false;
                this.tooltip.state = undefined;
                statesUpdatable = true;
            }
            else if (Helpers.isBlank(country) || Helpers.isBlank(country[field])) {
                this.model.countryID = undefined;
                this.model.countryName = undefined;
                this.disabled.state = true;
                this.tooltip.state = this.labels.selectCountryFirst;
                this.invalid.state = false;
                statesUpdatable = true;
            }
            // Update state
            if (statesUpdatable) {
                this.model.state = undefined;
                this.updateStates();
            }
            this.updateControl();
            this.onInput(null, 'countryID');
            this.onInput(null, 'state');
        };
        NovoAddressElement.prototype.onStateChange = function (evt) {
            var state = evt && evt.value ? evt.value : null;
            this.config.state.updated = true;
            this.model.state = state;
            this.updateControl();
            this.onInput(null, 'state');
        };
        NovoAddressElement.prototype.setStateLabel = function (model) {
            var state = model.state;
            if (!Helpers.isBlank(state)) {
                if (this.config.state.required) {
                    this.valid.state = true;
                }
                this.model.state = state;
            }
            else {
                this.model.state = undefined;
                if (this.config.state.required) {
                    this.valid.state = false;
                }
            }
        };
        NovoAddressElement.prototype.updateStates = function () {
            var _this = this;
            if (this.config.state.pickerConfig.options && !Helpers.isBlank(this.model.countryID)) {
                this.config.state.pickerConfig.options = function (query) {
                    if (query === void 0) { query = ''; }
                    return _this.stateOptions(query, _this.model.countryID);
                };
                this.stateOptions('', this.model.countryID).then(function (results) {
                    _this.config.state.pickerConfig.defaultOptions = results;
                    if (results.length) {
                        _this.tooltip.state = undefined;
                        _this.disabled.state = _this._readOnly;
                        _this.setStateLabel(_this.model);
                    }
                    else {
                        _this.disabled.state = true;
                        _this.tooltip.state = _this.labels.noStatesForCountry;
                        if (_this.config.state.required) {
                            _this.valid.state = true;
                        }
                    }
                    _this.validityChange.emit();
                    _this.onInput(null, 'state');
                });
            }
            else {
                this.config.state.pickerConfig.defaultOptions = [];
                this.disabled.state = true;
                this.tooltip.state = this.labels.selectCountryFirst;
                if (this.config.state.required) {
                    this.valid.state = false;
                }
            }
        };
        NovoAddressElement.prototype.getStateOptions = function (filter, countryID) {
            if (filter === void 0) { filter = ''; }
            if (countryID) {
                var country = findByCountryId(countryID);
                var states = getStates(country.name);
                if (filter) {
                    return states.filter(function (name) { return new RegExp("" + filter, 'gi').test(name); });
                }
                return states;
            }
            else {
                return [];
            }
        };
        NovoAddressElement.prototype.updateControl = function () {
            this.onModelChange(this.model);
            this.onInput(null, 'countryID');
            this.onInput(null, 'state');
        };
        NovoAddressElement.prototype.writeValue = function (model) {
            var _this = this;
            var loadingCountries = false;
            if (model) {
                var countryName_1;
                if (model.countryName && model.countryID) {
                    countryName_1 = model.countryName;
                }
                else if (model.countryID) {
                    if (this.config.countryID.pickerConfig && this.config.countryID.pickerConfig.getLabels) {
                        if (Helpers.isFunction(this.config.countryID.pickerConfig.getLabels)) {
                            var promise = this.config.countryID.pickerConfig.getLabels(model.countryID);
                            loadingCountries = true;
                            if (promise.then) {
                                promise.then(function (result) {
                                    loadingCountries = false;
                                    countryName_1 = Helpers.interpolateWithFallback(_this.config.countryID.pickerConfig.format, result);
                                    _this.model = Object.assign(model, { countryName: countryName_1 });
                                    _this.updateStates();
                                });
                            }
                        }
                    }
                }
                if (countryName_1) {
                    countryName_1 = countryName_1.trim();
                    model.state = model.state || '';
                    this.model = Object.assign(model, { countryName: countryName_1 });
                }
                else {
                    this.model = model;
                }
                if (!loadingCountries && !Helpers.isBlank(this.model.countryID)) {
                    this.updateStates();
                }
            }
            this.fieldList.forEach(function (field) {
                _this.onInput(null, field);
            });
        };
        NovoAddressElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoAddressElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoAddressElement.prototype.getDefaultStateConfig = function () {
            var _this = this;
            return {
                field: 'value',
                format: '$label',
                options: function (query, countryID) {
                    if (query === void 0) { query = ''; }
                    return Promise.resolve(_this.getStateOptions(query, countryID));
                },
                getLabels: function (state) {
                    return Promise.resolve(state);
                },
            };
        };
        NovoAddressElement.prototype.getDefaultCountryConfig = function () {
            return {
                field: 'value',
                format: '$label',
                options: function (query) {
                    if (query === void 0) { query = ''; }
                    return new Promise(function (resolve) {
                        var countries = COUNTRIES;
                        if (query) {
                            countries = countries.filter(function (country) { return new RegExp("" + query, 'gi').test(country.name); });
                        }
                        return resolve(countries.map(function (country) { return ({ value: country.id, label: country.name }); }));
                    });
                },
                getLabels: function (countryID) {
                    return new Promise(function (resolve) {
                        var country = findByCountryId(countryID);
                        if (country) {
                            resolve({ value: country.id, label: country.name });
                        }
                        else {
                            resolve('');
                        }
                    });
                },
            };
        };
        return NovoAddressElement;
    }());
    NovoAddressElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-address',
                    providers: [ADDRESS_VALUE_ACCESSOR],
                    template: "\n    <span\n      *ngIf=\"!config?.address1?.hidden\"\n      class=\"street-address\"\n      [class.invalid]=\"invalid.address1\"\n      [class.focus]=\"focused.address1\"\n      [class.disabled]=\"disabled.address1\"\n    >\n      <i\n        *ngIf=\"config.address1.required\"\n        class=\"required-indicator address1\"\n        [ngClass]=\"{ 'bhi-circle': !valid.address1, 'bhi-check': valid.address1 }\"\n      >\n      </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.address1\"\n        type=\"text\"\n        id=\"address1\"\n        name=\"address1\"\n        [placeholder]=\"config.address1.label\"\n        [maxlength]=\"config?.address1?.maxlength\"\n        autocomplete=\"shipping street-address address-line-1\"\n        [(ngModel)]=\"model.address1\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'address1')\"\n        (blur)=\"isBlurred($event, 'address1')\"\n        (input)=\"onInput($event, 'address1')\"\n        [disabled]=\"disabled.address1\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.address2?.hidden\"\n      class=\"apt suite\"\n      [class.invalid]=\"invalid.address2\"\n      [class.focus]=\"focused.address2\"\n      [class.disabled]=\"disabled.address2\"\n    >\n      <i\n        *ngIf=\"config.address2.required\"\n        class=\"required-indicator address2\"\n        [ngClass]=\"{ 'bhi-circle': !valid.address2, 'bhi-check': valid.address2 }\"\n      >\n      </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.address2\"\n        type=\"text\"\n        id=\"address2\"\n        name=\"address2\"\n        [placeholder]=\"config.address2.label\"\n        [maxlength]=\"config?.address2?.maxlength\"\n        autocomplete=\"shipping address-line-2\"\n        [(ngModel)]=\"model.address2\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'address2')\"\n        (blur)=\"isBlurred($event, 'address2')\"\n        (input)=\"onInput($event, 'address2')\"\n        [disabled]=\"disabled.address2\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.city?.hidden\"\n      class=\"city locality\"\n      [class.invalid]=\"invalid.city\"\n      [class.focus]=\"focused.city\"\n      [class.disabled]=\"disabled.city\"\n    >\n      <i *ngIf=\"config.city.required\" class=\"required-indicator\" [ngClass]=\"{ 'bhi-circle': !valid.city, 'bhi-check': valid.city }\"> </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.city\"\n        type=\"text\"\n        id=\"city\"\n        name=\"city\"\n        [placeholder]=\"config.city.label\"\n        autocomplete=\"shipping city locality\"\n        [maxlength]=\"config?.city?.maxlength\"\n        [(ngModel)]=\"model.city\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'city')\"\n        (blur)=\"isBlurred($event, 'city')\"\n        (input)=\"onInput($event, 'city')\"\n        [disabled]=\"disabled.city\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.state?.hidden\"\n      class=\"state region\"\n      [class.invalid]=\"invalid.state\"\n      [class.focus]=\"focused.state\"\n      [class.disabled]=\"disabled.state\"\n      [tooltip]=\"tooltip.state\"\n    >\n      <i *ngIf=\"config.state.required\" class=\"required-indicator\" [ngClass]=\"{ 'bhi-circle': !valid.state, 'bhi-check': valid.state }\"> </i>\n      <novo-picker\n        [config]=\"config?.state?.pickerConfig\"\n        [placeholder]=\"config?.state?.label\"\n        (changed)=\"onStateChange($event)\"\n        autocomplete=\"shipping region\"\n        [(ngModel)]=\"model.state\"\n        [disablePickerInput]=\"disabled.state\"\n      ></novo-picker>\n    </span>\n    <span\n      *ngIf=\"!config?.zip?.hidden\"\n      class=\"zip postal-code\"\n      [class.invalid]=\"invalid.zip\"\n      [class.focus]=\"focused.zip\"\n      [class.disabled]=\"disabled.zip\"\n    >\n      <i *ngIf=\"config.zip.required\" class=\"required-indicator\" [ngClass]=\"{ 'bhi-circle': !valid.zip, 'bhi-check': valid.zip }\"> </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.zip\"\n        type=\"text\"\n        id=\"zip\"\n        name=\"zip\"\n        [placeholder]=\"config.zip.label\"\n        autocomplete=\"shipping postal-code\"\n        [maxlength]=\"config?.zip?.maxlength\"\n        [(ngModel)]=\"model.zip\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'zip')\"\n        (blur)=\"isBlurred($event, 'zip')\"\n        (input)=\"onInput($event, 'zip')\"\n        [disabled]=\"disabled.zip\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.countryID?.hidden\"\n      class=\"country-name\"\n      [class.invalid]=\"invalid.countryID\"\n      [class.focus]=\"focused.countryID\"\n      [class.disabled]=\"disabled.countryID\"\n    >\n      <i\n        *ngIf=\"config.countryID.required\"\n        class=\"required-indicator\"\n        [ngClass]=\"{ 'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID }\"\n      >\n      </i>\n      <novo-picker\n        [config]=\"config?.countryID?.pickerConfig\"\n        [placeholder]=\"config.countryID.label\"\n        (changed)=\"onCountryChange($event)\"\n        autocomplete=\"shipping country\"\n        [(ngModel)]=\"model.countryID\"\n        [disablePickerInput]=\"disabled.countryID\"\n      ></novo-picker>\n    </span>\n  "
                },] }
    ];
    NovoAddressElement.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    NovoAddressElement.propDecorators = {
        config: [{ type: i0.Input }],
        readOnly: [{ type: i0.Input }],
        change: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        validityChange: [{ type: i0.Output }]
    };

    var NovoFile = /** @class */ (function () {
        function NovoFile(file) {
            var _this = this;
            this.name = '';
            this.contentType = '';
            this.lastModified = 0;
            this.size = 0;
            this.loaded = false;
            this.reader = new FileReader();
            this.name = "" + encodeURIComponent(file.name || '');
            this.contentType = file.type;
            this.lastModified = file.lastModified;
            this.size = file.size;
            this.file = file;
            this.reader.onload = function (event) {
                _this.fileContents = event.target.result.split(',')[1];
                _this.dataURL = event.target.result;
                _this.loaded = true;
                if (_this.readPromise) {
                    _this.readPromise(_this);
                }
            };
        }
        NovoFile.prototype.read = function () {
            var _this = this;
            return new Promise(function (resolve) {
                _this.readPromise = resolve;
                // when the file is read it triggers the onload event above.
                _this.reader.readAsDataURL(_this.file);
            });
        };
        NovoFile.prototype.toJSON = function () {
            return {
                name: this.name,
                contentType: this.type,
                lastModified: this.lastModified,
                size: this.size,
                fileContents: this.fileContents,
            };
        };
        return NovoFile;
    }());

    // Value accessor for the component (supports ngModel)
    // const FILE_VALUE_ACCESSOR = {
    //   provide: NG_VALUE_ACCESSOR,
    //   useExisting: forwardRef(() => NovoFileInputElement),
    //   multi: true,
    // };
    var LAYOUT_DEFAULTS$1 = { order: 'default', download: true, removable: true, labelStyle: 'default', draggable: false };
    // make file-input ids unique
    var nextId$2 = 0;
    var NovoFileInputBase = /** @class */ (function () {
        function NovoFileInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return NovoFileInputBase;
    }());
    var NovoFileInputMixins = mixinErrorState(NovoFileInputBase);
    var NovoFileInputElement = /** @class */ (function (_super) {
        __extends(NovoFileInputElement, _super);
        function NovoFileInputElement(element, labels, dragula, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, _ngControl) {
            var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, _ngControl) || this;
            _this.element = element;
            _this.labels = labels;
            _this.dragula = dragula;
            _this._uniqueId = "novo-file-input-" + ++nextId$2;
            /** Tab index for the chip list. */
            _this._tabIndex = 0;
            /** User defined tab index. */
            _this._userTabIndex = null;
            _this.controlType = 'file-input';
            /** @docs-private Implemented as part of NovoFieldControl. */
            _this.lastKeyValue = null;
            _this.id = _this._uniqueId;
            _this.tabindex = 0;
            _this.multiple = false;
            _this.value = [];
            _this.edit = new i0.EventEmitter();
            _this.save = new i0.EventEmitter();
            _this.delete = new i0.EventEmitter();
            _this.upload = new i0.EventEmitter();
            _this.elements = [];
            _this.files = [];
            _this.active = false;
            _this.onModelChange = function () { };
            _this.onModelTouched = function () { };
            _this._name = _this._uniqueId;
            _this._value = false;
            _this._required = false;
            _this._disabled = false;
            if (_ngControl) {
                _ngControl.valueAccessor = _this;
            }
            _this.commands = {
                dragenter: _this.dragEnterHandler.bind(_this),
                dragleave: _this.dragLeaveHandler.bind(_this),
                dragover: _this.dragOverHandler.bind(_this),
                drop: _this.dropHandler.bind(_this),
            };
            return _this;
        }
        Object.defineProperty(NovoFileInputElement.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFileInputElement.prototype, "disabled", {
            get: function () {
                return this.ngControl ? !!this.ngControl.disabled : this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFileInputElement.prototype, "required", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = coercion.coerceBooleanProperty(value);
                this.stateChanges.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFileInputElement.prototype, "placeholder", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return this._placeholder;
            },
            set: function (value) {
                this._placeholder = value;
            },
            enumerable: false,
            configurable: true
        });
        NovoFileInputElement.prototype.ngOnInit = function () {
            var _this = this;
            ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
                _this.element.nativeElement.addEventListener(type, _this.commands[type]);
            });
            this.updateLayout();
            this.initializeDragula();
            this.setInitialFileList();
            this.dataFeatureId = this.dataFeatureId ? this.dataFeatureId : this.name;
        };
        NovoFileInputElement.prototype.ngOnDestroy = function () {
            var _this = this;
            ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
                _this.element.nativeElement.removeEventListener(type, _this.commands[type]);
            });
            var dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter(function (x) { return x.name === _this.fileOutputBag; }).length > 0;
            if (dragulaHasFileOutputBag) {
                this.dragula.destroy(this.fileOutputBag);
            }
        };
        NovoFileInputElement.prototype.ngOnChanges = function (changes) {
            // Removed 6.0.5, not sure why this was here
            // this.onModelChange(this.model);}
        };
        NovoFileInputElement.prototype.updateLayout = function () {
            this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
            this.insertTemplatesBasedOnLayout();
        };
        NovoFileInputElement.prototype.insertTemplatesBasedOnLayout = function () {
            var _this = this;
            var order;
            switch (this.layoutOptions.order) {
                case 'displayFilesBelow':
                    order = ['fileInput', 'fileOutput'];
                    break;
                default:
                    order = ['fileOutput', 'fileInput'];
            }
            order.forEach(function (template) {
                _this.container.createEmbeddedView(_this[template], 0);
            });
            return order;
        };
        NovoFileInputElement.prototype.initializeDragula = function () {
            var _this = this;
            this.fileOutputBag = "file-output-" + this.dragula.bags.length;
            this.dragula.setOptions(this.fileOutputBag, {
                moves: function (el, container, handle) {
                    return _this.layoutOptions.draggable;
                },
            });
        };
        NovoFileInputElement.prototype.setInitialFileList = function () {
            if (this.value) {
                this.files = this.value;
            }
        };
        NovoFileInputElement.prototype.dragEnterHandler = function (event) {
            event.preventDefault();
            event.dataTransfer.dropEffect = 'copy';
            this.target = event.target;
            this.active = true;
        };
        NovoFileInputElement.prototype.dragLeaveHandler = function (event) {
            event.preventDefault();
            if (this.target === event.target) {
                this.active = false;
            }
        };
        NovoFileInputElement.prototype.dragOverHandler = function (event) {
            event.preventDefault();
            // no-op
        };
        NovoFileInputElement.prototype.dropHandler = function (event) {
            event.preventDefault();
            this.visible = false;
            if (event.dataTransfer.types[0] !== 'Files') {
                return;
            }
            var options = this.layoutOptions;
            var filelist = Array.from(event.dataTransfer.files);
            if (options.customActions) {
                this.upload.emit(this.multiple ? filelist : [filelist[0]]);
            }
            else {
                this.process(this.multiple ? filelist : [filelist[0]]);
            }
            this.active = false;
        };
        NovoFileInputElement.prototype.writeValue = function (model) {
            this.model = model;
        };
        NovoFileInputElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoFileInputElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoFileInputElement.prototype.check = function (event) {
            this.process(Array.from(event.target.files));
        };
        NovoFileInputElement.prototype.validate = function (files) {
            var passedValidation = true;
            if (this.layoutOptions.customValidation) {
                this.layoutOptions.customValidation
                    .filter(function (validation) { return validation.action === 'upload'; })
                    .forEach(function (uploadValidation) {
                    passedValidation = uploadValidation.fn(files) && passedValidation;
                });
            }
            return passedValidation;
        };
        NovoFileInputElement.prototype.process = function (filelist) {
            var _this = this;
            if (this.validate(filelist)) {
                Promise.all(filelist.map(function (file) { return _this.readFile(file); })).then(function (files) {
                    var _a;
                    if (_this.multiple) {
                        (_a = _this.files).push.apply(_a, __spread(files));
                    }
                    else {
                        _this.files = files;
                    }
                    _this.model = _this.files;
                    _this.onModelChange(_this.model);
                });
            }
        };
        NovoFileInputElement.prototype.download = function (file) {
            window.open(file.dataURL, '_blank');
        };
        NovoFileInputElement.prototype.remove = function (file) {
            this.files.splice(this.files.findIndex(function (f) { return f.name === file.name && f.size === file.size; }), 1);
            this.model = this.files;
            this.onModelChange(this.model);
        };
        NovoFileInputElement.prototype.readFile = function (file) {
            return new NovoFile(file).read();
        };
        NovoFileInputElement.prototype.customEdit = function (file) {
            this.edit.emit(file);
        };
        NovoFileInputElement.prototype.customSave = function (file) {
            this.save.emit(file);
        };
        NovoFileInputElement.prototype.customDelete = function (file) {
            this.delete.emit(file);
        };
        NovoFileInputElement.prototype.customCheck = function (event) {
            this.upload.emit(event);
        };
        NovoFileInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        Object.defineProperty(NovoFileInputElement.prototype, "focused", {
            /** Whether any radio buttons has focus. */
            get: function () {
                // todo: implement this.
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFileInputElement.prototype, "empty", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return this.value === null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFileInputElement.prototype, "shouldLabelFloat", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return !this.empty || this.focused;
            },
            enumerable: false,
            configurable: true
        });
        /** Implemented as part of NovoFieldControl. */
        NovoFileInputElement.prototype.setDescribedByIds = function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        /** Implemented as part of NovoFieldControl. */
        NovoFileInputElement.prototype.onContainerClick = function (event) {
            this.focus();
        };
        /**
         * Focuses the first non-disabled chip in this chip list, or the associated input when there
         * are no eligible chips.
         */
        NovoFileInputElement.prototype.focus = function (options) {
            if (this.disabled) {
                return;
            }
            // TODO
        };
        return NovoFileInputElement;
    }(NovoFileInputMixins));
    NovoFileInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-file-input',
                    providers: [{ provide: NovoFieldControl, useExisting: NovoFileInputElement }],
                    template: "\n    <div #container></div>\n    <ng-template #fileInput>\n      <div class=\"file-input-group\" [class.disabled]=\"disabled\" [class.active]=\"active\">\n        <input\n          *ngIf=\"!layoutOptions.customActions\"\n          type=\"file\"\n          [name]=\"name\"\n          [attr.id]=\"name\"\n          (change)=\"check($event)\"\n          [attr.multiple]=\"multiple\"\n          tabindex=\"-1\"\n          [attr.data-feature-id]=\"dataFeatureId\"\n        />\n        <input\n          *ngIf=\"layoutOptions.customActions\"\n          type=\"file\"\n          [name]=\"name\"\n          [attr.id]=\"name\"\n          (change)=\"customCheck($event)\"\n          [attr.multiple]=\"multiple\"\n          tabindex=\"-1\"\n          [attr.data-feature-id]=\"dataFeatureId\"\n        />\n        <section [ngSwitch]=\"layoutOptions.labelStyle\">\n          <label *ngSwitchCase=\"'no-box'\" [attr.for]=\"name\" class=\"no-box\">\n            <div>\n              <i class=\"bhi-dropzone\"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }}\n              <strong class=\"link\">{{ labels.clickToBrowse }}</strong>\n            </div>\n          </label>\n          <label *ngSwitchDefault [attr.for]=\"name\" class=\"boxed\">\n            <span>{{ placeholder || labels.chooseAFile }}</span>\n            <small\n              >{{ labels.or }} <strong class=\"link\">{{ labels.clickToBrowse }}</strong></small\n            >\n          </label>\n        </section>\n      </div>\n    </ng-template>\n    <ng-template #fileOutput>\n      <div class=\"file-output-group\" [dragula]=\"fileOutputBag\" [dragulaModel]=\"files\">\n        <div class=\"file-item\" *ngFor=\"let file of files\" [class.disabled]=\"disabled\">\n          <i *ngIf=\"layoutOptions.draggable\" class=\"bhi-move\"></i>\n          <label *ngIf=\"file.link\"\n            ><span\n              ><a href=\"{{ file.link }}\" target=\"_blank\">{{ file.name | decodeURI }}</a></span\n            ><span *ngIf=\"file.description\">||</span><span>{{ file.description }}</span></label\n          >\n          <label *ngIf=\"!file.link\">{{ file.name | decodeURI }}</label>\n          <div class=\"actions\" [attr.data-automation-id]=\"'file-actions'\" *ngIf=\"file.loaded\">\n            <div *ngIf=\"!layoutOptions.customActions\">\n              <button\n                *ngIf=\"layoutOptions.download\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"save\"\n                (click)=\"download(file)\"\n                [attr.data-automation-id]=\"'file-download'\"\n                tabindex=\"-1\"\n              ></button>\n              <button\n                *ngIf=\"!disabled && (layoutOptions.removable || (!layoutOptions.removable && layoutOptions.removableWhenNew && !file.link))\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"close\"\n                (click)=\"remove(file)\"\n                [attr.data-automation-id]=\"'file-remove'\"\n                tabindex=\"-1\"\n              ></button>\n            </div>\n            <div *ngIf=\"layoutOptions.customActions\">\n              <button\n                *ngIf=\"layoutOptions.edit && !disabled\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"edit\"\n                (click)=\"customEdit(file)\"\n                [attr.data-automation-id]=\"'file-edit'\"\n                tabindex=\"-1\"\n              ></button>\n              <button\n                *ngIf=\"layoutOptions.download\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"save\"\n                (click)=\"customSave(file)\"\n                [attr.data-automation-id]=\"'file-download'\"\n                tabindex=\"-1\"\n              ></button>\n              <button\n                *ngIf=\"!disabled\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"close\"\n                (click)=\"customDelete(file)\"\n                [attr.data-automation-id]=\"'file-remove'\"\n                tabindex=\"-1\"\n              ></button>\n            </div>\n          </div>\n          <novo-loading *ngIf=\"!file.loaded\"></novo-loading>\n        </div>\n      </div>\n    </ng-template>\n  "
                },] }
    ];
    NovoFileInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: NovoDragulaService },
        { type: ErrorStateMatcher },
        { type: forms.NgForm, decorators: [{ type: i0.Optional }] },
        { type: forms.FormGroupDirective, decorators: [{ type: i0.Optional }] },
        { type: forms.NgControl, decorators: [{ type: i0.Optional }, { type: i0.Self }] }
    ]; };
    NovoFileInputElement.propDecorators = {
        id: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        errorStateMatcher: [{ type: i0.Input }],
        fileInput: [{ type: i0.ViewChild, args: ['fileInput', { static: true },] }],
        fileOutput: [{ type: i0.ViewChild, args: ['fileOutput', { static: true },] }],
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        multiple: [{ type: i0.Input }],
        layoutOptions: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        dataFeatureId: [{ type: i0.Input }],
        edit: [{ type: i0.Output }],
        save: [{ type: i0.Output }],
        delete: [{ type: i0.Output }],
        upload: [{ type: i0.Output }],
        name: [{ type: i0.Input }],
        disabled: [{ type: i0.HostBinding, args: ['class.disabled',] }, { type: i0.Input }],
        required: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }]
    };

    // NG2
    var NovoFormExtrasModule = /** @class */ (function () {
        function NovoFormExtrasModule() {
        }
        return NovoFormExtrasModule;
    }());
    NovoFormExtrasModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        NovoPipesModule,
                        NovoButtonModule,
                        NovoSelectModule,
                        NovoPickerModule,
                        NovoLoadingModule,
                        NovoDragulaModule,
                        NovoTooltipModule,
                        NovoCheckboxModule,
                    ],
                    declarations: [NovoAddressElement, NovoFileInputElement],
                    exports: [NovoAddressElement, NovoFileInputElement],
                },] }
    ];

    // Value accessor for the component (supports ngModel)
    var TILES_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoTilesElement; }),
        multi: true,
    };
    var NovoTilesElement = /** @class */ (function () {
        function NovoTilesElement(element, ref) {
            this.element = element;
            this.ref = ref;
            this.name = new Date().getTime().toString();
            this.disabled = false;
            this.onChange = new i0.EventEmitter();
            this.onSelectedOptionClick = new i0.EventEmitter();
            this.onDisabledOptionClick = new i0.EventEmitter();
            this._options = [];
            this.activeTile = null;
            this.focused = false;
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
        }
        NovoTilesElement.prototype.setFocus = function (focus) {
            this.focused = focus;
        };
        NovoTilesElement.prototype.ngAfterContentInit = function () {
            this.name = this.name || '';
            this.setupOptions();
        };
        NovoTilesElement.prototype.ngOnChanges = function (change) {
            if (change.options && change.options.currentValue && !change.options.firstChange) {
                this.name = this.name || '';
                this._options = [];
                this.setupOptions();
            }
        };
        NovoTilesElement.prototype.setupOptions = function () {
            var _this = this;
            if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
                this._options = this.options.map(function (x) {
                    var item = { value: x, label: x, checked: _this.model === x };
                    if (item.checked) {
                        _this.setTile(item);
                    }
                    return item;
                });
            }
            else {
                this._options = this.options.map(function (x) {
                    x.checked = _this.model === x.value || (_this.model && _this.model.id === x.value);
                    if (x.checked) {
                        _this.setTile(x);
                    }
                    return x;
                });
            }
            this.ref.markForCheck();
        };
        NovoTilesElement.prototype.select = function (event, item) {
            var e_1, _a;
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (!item.disabled) {
                if (item.checked) {
                    this.onSelectedOptionClick.emit(item);
                    return;
                }
                try {
                    for (var _b = __values(this._options), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var option = _c.value;
                        option.checked = false;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                item.checked = !item.checked;
                this.onChange.emit(item.value);
                this.onModelChange(item.value);
                this.setTile(item);
                this.model = item.value;
            }
            else {
                this.onDisabledOptionClick.emit(item);
            }
            this.ref.markForCheck();
        };
        NovoTilesElement.prototype.setTile = function (item) {
            if (item) {
                this.activeTile = item.value;
                this.ref.markForCheck();
            }
        };
        NovoTilesElement.prototype.writeValue = function (model) {
            this.model = model;
            if (!Helpers.isBlank(model)) {
                this.setupOptions();
            }
        };
        NovoTilesElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoTilesElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        NovoTilesElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        return NovoTilesElement;
    }());
    NovoTilesElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tiles',
                    providers: [TILES_VALUE_ACCESSOR],
                    template: "\n    <div class=\"tile-container\" [class.active]=\"focused\" [class.disabled]=\"disabled\">\n      <div\n        class=\"tile\"\n        *ngFor=\"let option of _options; let i = index\"\n        [ngClass]=\"{ active: option.checked, disabled: option.disabled }\"\n        (click)=\"select($event, option)\"\n        [attr.data-automation-id]=\"option.label || option\"\n      >\n        <input\n          class=\"tiles-input\"\n          [name]=\"name\"\n          type=\"radio\"\n          [value]=\"option.checked || option.value || option\"\n          [attr.id]=\"name + i\"\n          (change)=\"select($event, option)\"\n          (focus)=\"setFocus(true)\"\n          (blur)=\"setFocus(false)\"\n          [disabled]=\"disabled\"\n        />\n        <label [attr.for]=\"name + i\" [attr.data-automation-id]=\"option.label || option\">\n          {{ option.label || option }}\n        </label>\n      </div>\n    </div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoTilesElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTilesElement.propDecorators = {
        name: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        disabled: [{ type: i0.Input, args: ['controlDisabled',] }],
        onChange: [{ type: i0.Output }],
        onSelectedOptionClick: [{ type: i0.Output }],
        onDisabledOptionClick: [{ type: i0.Output }]
    };

    // NG2
    var NovoTilesModule = /** @class */ (function () {
        function NovoTilesModule() {
        }
        return NovoTilesModule;
    }());
    NovoTilesModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.ReactiveFormsModule],
                    declarations: [NovoTilesElement],
                    exports: [NovoTilesElement],
                },] }
    ];

    function interpolateCell(value, col) {
        if (col.format) {
            return Helpers.interpolateWithFallback(col.format, value);
        }
        return value;
    }
    var DataTableInterpolatePipe = /** @class */ (function () {
        function DataTableInterpolatePipe() {
        }
        DataTableInterpolatePipe.prototype.transform = function (value, column) {
            if (!Helpers.isEmpty(value)) {
                return interpolateCell(value, column);
            }
            return '';
        };
        return DataTableInterpolatePipe;
    }());
    DataTableInterpolatePipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableInterpolate',
                    pure: true,
                },] }
    ];
    var DateTableDateRendererPipe = /** @class */ (function () {
        function DateTableDateRendererPipe(labels) {
            this.labels = labels;
        }
        DateTableDateRendererPipe.prototype.transform = function (value, column) {
            if (!Helpers.isEmpty(value)) {
                return column.format ? value : this.labels.formatDate(interpolateCell(value, column));
            }
            return '';
        };
        return DateTableDateRendererPipe;
    }());
    DateTableDateRendererPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableDateRenderer',
                    pure: true,
                },] }
    ];
    DateTableDateRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    var DateTableDateTimeRendererPipe = /** @class */ (function () {
        function DateTableDateTimeRendererPipe(labels) {
            this.labels = labels;
        }
        DateTableDateTimeRendererPipe.prototype.transform = function (value, column) {
            if (!Helpers.isEmpty(value)) {
                return column.format ? value : this.labels.formatDateShort(interpolateCell(value, column));
            }
            return '';
        };
        return DateTableDateTimeRendererPipe;
    }());
    DateTableDateTimeRendererPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableDateTimeRenderer',
                    pure: true,
                },] }
    ];
    DateTableDateTimeRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    var DateTableTimeRendererPipe = /** @class */ (function () {
        function DateTableTimeRendererPipe(labels) {
            this.labels = labels;
        }
        DateTableTimeRendererPipe.prototype.transform = function (value, column) {
            if (!Helpers.isEmpty(value)) {
                return column.format ? value : this.labels.formatTime(interpolateCell(value, column));
            }
            return '';
        };
        return DateTableTimeRendererPipe;
    }());
    DateTableTimeRendererPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableTimeRenderer',
                    pure: true,
                },] }
    ];
    DateTableTimeRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    var DateTableNumberRendererPipe = /** @class */ (function () {
        function DateTableNumberRendererPipe(labels) {
            this.labels = labels;
        }
        DateTableNumberRendererPipe.prototype.transform = function (value, column, isPercent) {
            if (isPercent === void 0) { isPercent = false; }
            if (!Helpers.isEmpty(value)) {
                var val = interpolateCell(value, column);
                if (isPercent && Helpers.isNumber(val)) {
                    val = "" + Number(val) * 100;
                }
                return "" + this.labels.formatNumber(val) + (isPercent ? '%' : '');
            }
            return '';
        };
        return DateTableNumberRendererPipe;
    }());
    DateTableNumberRendererPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableNumberRenderer',
                    pure: true,
                },] }
    ];
    DateTableNumberRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    var DataTableBigDecimalRendererPipe = /** @class */ (function () {
        function DataTableBigDecimalRendererPipe(labels) {
            this.labels = labels;
        }
        DataTableBigDecimalRendererPipe.prototype.transform = function (value, column) {
            if (!Helpers.isEmpty(value)) {
                var val = interpolateCell(value, column);
                return this.labels.formatBigDecimal(Number(val), column.configuration);
            }
            return '';
        };
        return DataTableBigDecimalRendererPipe;
    }());
    DataTableBigDecimalRendererPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableBigDecimalRenderer',
                    pure: true,
                },] }
    ];
    DataTableBigDecimalRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    var DateTableCurrencyRendererPipe = /** @class */ (function () {
        function DateTableCurrencyRendererPipe(labels) {
            this.labels = labels;
        }
        DateTableCurrencyRendererPipe.prototype.transform = function (value, column) {
            if (!Helpers.isEmpty(value)) {
                var val = interpolateCell(value, column);
                return this.labels.formatCurrency(Number(val));
            }
            return '';
        };
        return DateTableCurrencyRendererPipe;
    }());
    DateTableCurrencyRendererPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'dataTableCurrencyRenderer',
                    pure: true,
                },] }
    ];
    DateTableCurrencyRendererPipe.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };

    var MAX_PAGES_DISPLAYED = 5;
    var NovoDataTablePagination = /** @class */ (function () {
        function NovoDataTablePagination(changeDetectorRef, labels, state) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.labels = labels;
            this.state = state;
            this.theme = 'standard';
            this._page = 0;
            this._pageSizeOptions = [];
            this.canSelectAll = false;
            this.allMatchingSelected = false;
            this._length = 0;
            this.pageChange = new i0.EventEmitter();
            this.resetSubscription = this.state.resetSource.subscribe(function () {
                _this.page = 0;
                _this.changeDetectorRef.markForCheck();
            });
        }
        Object.defineProperty(NovoDataTablePagination.prototype, "page", {
            get: function () {
                return this._page;
            },
            set: function (page) {
                this._page = page;
                this.changeDetectorRef.markForCheck();
                this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
                this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
                this.state.page = this._page;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTablePagination.prototype, "pageSize", {
            get: function () {
                return this._pageSize;
            },
            set: function (pageSize) {
                this._pageSize = pageSize;
                this.updateDisplayedPageSizeOptions();
                this.state.pageSize = this._pageSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTablePagination.prototype, "pageSizeOptions", {
            get: function () {
                return this._pageSizeOptions;
            },
            set: function (pageSizeOptions) {
                this._pageSizeOptions = pageSizeOptions;
                this.updateDisplayedPageSizeOptions();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDataTablePagination.prototype, "length", {
            get: function () {
                return this._length;
            },
            set: function (length) {
                this._length = length;
                this.changeDetectorRef.markForCheck();
                this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
                this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
                this.totalPages = this.calculateTotalPages();
                this.pages = this.getPages(this.page, this.totalPages);
            },
            enumerable: false,
            configurable: true
        });
        NovoDataTablePagination.prototype.ngOnInit = function () {
            this._initialized = true;
            this.updateDisplayedPageSizeOptions();
        };
        NovoDataTablePagination.prototype.ngOnDestroy = function () {
            this.resetSubscription.unsubscribe();
        };
        NovoDataTablePagination.prototype.selectPage = function (page) {
            this.state.checkRetainment('page', this.canSelectAll && this.allMatchingSelected);
            this.page = page;
            this.emitPageEvent();
        };
        NovoDataTablePagination.prototype.nextPage = function () {
            this.state.checkRetainment('page', this.canSelectAll && this.allMatchingSelected);
            if (!this.hasNextPage()) {
                return;
            }
            this.page++;
            this.pages = this.getPages(this.page, this.totalPages);
            this.emitPageEvent();
        };
        NovoDataTablePagination.prototype.previousPage = function () {
            this.state.checkRetainment('page', this.canSelectAll && this.allMatchingSelected);
            if (!this.hasPreviousPage()) {
                return;
            }
            this.page--;
            this.pages = this.getPages(this.page, this.totalPages);
            this.emitPageEvent();
        };
        NovoDataTablePagination.prototype.hasPreviousPage = function () {
            return this.page >= 1 && this.pageSize !== 0;
        };
        NovoDataTablePagination.prototype.hasNextPage = function () {
            var numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
            return this.page < numberOfPages && this.pageSize !== 0;
        };
        NovoDataTablePagination.prototype.changePageSize = function (pageSize) {
            this.page = 0;
            this.pageSize = pageSize;
            this.emitPageEvent(true);
        };
        NovoDataTablePagination.prototype.updateDisplayedPageSizeOptions = function () {
            var _this = this;
            if (!this._initialized) {
                return;
            }
            if (!this.displayedPageSizeOptions) {
                this.displayedPageSizeOptions = [];
                this.pageSizeOptions.forEach(function (option) {
                    if (option.hasOwnProperty('value')) {
                        _this.displayedPageSizeOptions.push(option);
                    }
                    else {
                        _this.displayedPageSizeOptions.push({
                            value: option,
                            label: option,
                        });
                    }
                });
            }
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
            this.changeDetectorRef.detectChanges();
        };
        NovoDataTablePagination.prototype.emitPageEvent = function (isPageSizeChange) {
            if (isPageSizeChange === void 0) { isPageSizeChange = false; }
            var event = {
                page: this.page,
                pageSize: this.pageSize,
                length: this.length,
                filter: this.state.filter,
                sort: this.state.sort,
            };
            this.pageChange.next(event);
            this.state.page = this.page;
            this.state.pageSize = this.pageSize;
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
            this.state.updates.next(event);
            this.state.onPaginationChange(isPageSizeChange, this.pageSize);
        };
        NovoDataTablePagination.prototype.calculateTotalPages = function () {
            var totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
            return Math.max(totalPages || 0, 1);
        };
        NovoDataTablePagination.prototype.makePage = function (number, text, isActive) {
            return {
                number: number,
                text: text,
                active: isActive,
            };
        };
        NovoDataTablePagination.prototype.getPages = function (currentPage, totalPages) {
            var pages = [];
            // Default page limits
            var startPage = 1;
            var endPage = totalPages;
            var isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
            // Recompute if maxPagesDisplayed
            if (isMaxSized) {
                // Current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
                endPage = startPage + MAX_PAGES_DISPLAYED - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - MAX_PAGES_DISPLAYED + 1;
                }
            }
            // Add page number links
            for (var number = startPage; number <= endPage; number++) {
                var page = this.makePage(number, number.toString(), number === currentPage);
                pages.push(page);
            }
            return pages;
        };
        return NovoDataTablePagination;
    }());
    NovoDataTablePagination.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-pagination',
                    template: "\n    <ng-container *ngIf=\"theme === 'basic' || theme === 'basic-wide'\">\n      <div class=\"novo-data-table-pagination-size\">\n        <novo-tiles\n          *ngIf=\"displayedPageSizeOptions.length > 1\"\n          [(ngModel)]=\"pageSize\"\n          [options]=\"displayedPageSizeOptions\"\n          (onChange)=\"changePageSize($event)\"\n          data-automation-id=\"novo-data-table-pagination-tiles\"\n        >\n        </novo-tiles>\n        <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n      </div>\n\n      <div class=\"novo-data-table-range-label-long\" data-automation-id=\"novo-data-table-pagination-range-label-long\">\n        {{ longRangeLabel }}\n      </div>\n      <div class=\"novo-data-table-range-label-short\" data-automation-id=\"novo-data-table-pagination-range-label-short\">\n        {{ shortRangeLabel }}\n      </div>\n      <span class=\"spacer novo-data-table-spacer\" *ngIf=\"theme === 'basic-wide'\"></span>\n      <novo-button\n        theme=\"dialogue\"\n        type=\"button\"\n        class=\"novo-data-table-pagination-navigation-previous\"\n        (click)=\"previousPage()\"\n        icon=\"previous\"\n        side=\"left\"\n        [disabled]=\"!hasPreviousPage()\"\n        data-automation-id=\"novo-data-table-pagination-previous\"\n      >\n        <span>{{ labels.previous }}</span>\n      </novo-button>\n      <novo-button\n        theme=\"dialogue\"\n        type=\"button\"\n        class=\"novo-data-table-pagination-navigation-next\"\n        (click)=\"nextPage()\"\n        icon=\"next\"\n        side=\"right\"\n        [disabled]=\"!hasNextPage()\"\n        data-automation-id=\"novo-data-table-pagination-next\"\n      >\n        <span>{{ labels.next }}</span>\n      </novo-button>\n    </ng-container>\n    <ng-container *ngIf=\"theme === 'standard'\">\n      <h5 class=\"rows\">{{ labels.itemsPerPage }}</h5>\n      <novo-select\n        [options]=\"displayedPageSizeOptions\"\n        [placeholder]=\"labels.select\"\n        [(ngModel)]=\"pageSize\"\n        (onSelect)=\"changePageSize($event.selected)\"\n        data-automation-id=\"pager-select\"\n        [attr.data-feature-id]=\"dataFeatureId\"\n      >\n      </novo-select>\n      <span class=\"spacer\"></span>\n      <ul class=\"pager\" data-automation-id=\"pager\">\n        <li class=\"page\" (click)=\"selectPage(page - 1)\" [ngClass]=\"{ disabled: page === 0 }\">\n          <i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i>\n        </li>\n        <li class=\"page\" [ngClass]=\"{ active: p.number === page + 1 }\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.number - 1)\">\n          {{ p.text }}\n        </li>\n        <li class=\"page\" (click)=\"selectPage(page + 1)\" [ngClass]=\"{ disabled: page + 1 === totalPages }\">\n          <i class=\"bhi-next\" data-automation-id=\"pager-next\"></i>\n        </li>\n      </ul>\n    </ng-container>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTablePagination.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: NovoLabelService },
        { type: DataTableState }
    ]; };
    NovoDataTablePagination.propDecorators = {
        theme: [{ type: i0.HostBinding, args: ['class',] }, { type: i0.Input }],
        page: [{ type: i0.Input }],
        pageSize: [{ type: i0.Input }],
        dataFeatureId: [{ type: i0.Input }],
        pageSizeOptions: [{ type: i0.Input }],
        canSelectAll: [{ type: i0.Input }],
        allMatchingSelected: [{ type: i0.Input }],
        length: [{ type: i0.Input }],
        pageChange: [{ type: i0.Output }]
    };

    var NovoDataTableHeaderRow = /** @class */ (function (_super) {
        __extends(NovoDataTableHeaderRow, _super);
        function NovoDataTableHeaderRow() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.rowClass = 'novo-data-table-header-row';
            _this.fixedHeader = false;
            _this.role = 'row';
            return _this;
        }
        return NovoDataTableHeaderRow;
    }(table.CdkHeaderRow));
    NovoDataTableHeaderRow.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-header-row',
                    template: table.CDK_ROW_TEMPLATE,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableHeaderRow.propDecorators = {
        rowClass: [{ type: i0.HostBinding, args: ['class',] }],
        fixedHeader: [{ type: i0.HostBinding, args: ['class.fixed-header',] }, { type: i0.Input }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var NovoDataTableRow = /** @class */ (function (_super) {
        __extends(NovoDataTableRow, _super);
        function NovoDataTableRow() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.rowClass = 'novo-data-table-row';
            _this.role = 'row';
            return _this;
        }
        return NovoDataTableRow;
    }(table.CdkRow));
    NovoDataTableRow.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-data-table-row',
                    template: table.CDK_ROW_TEMPLATE,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoDataTableRow.propDecorators = {
        rowClass: [{ type: i0.HostBinding, args: ['class',] }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        id: [{ type: i0.HostBinding, args: ['attr.id',] }, { type: i0.Input }],
        dataAutomationId: [{ type: i0.HostBinding, args: ['attr.data-automation-id',] }, { type: i0.Input }]
    };

    var NovoDataTableModule = /** @class */ (function () {
        function NovoDataTableModule() {
        }
        return NovoDataTableModule;
    }());
    NovoDataTableModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        NovoDatePickerModule,
                        table.CdkTableModule,
                        common.CommonModule,
                        forms.FormsModule,
                        NovoIconModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoFormExtrasModule,
                        NovoLoadingModule,
                        NovoTilesModule,
                        NovoSearchBoxModule,
                        NovoOptionModule,
                        NovoCommonModule,
                        NovoSelectModule,
                        NovoTooltipModule,
                        NovoCheckboxModule,
                        NovoFlexModule,
                        NovoFieldModule,
                    ],
                    declarations: [
                        DataTableInterpolatePipe,
                        DateTableDateRendererPipe,
                        DateTableCurrencyRendererPipe,
                        DateTableDateTimeRendererPipe,
                        DateTableNumberRendererPipe,
                        DateTableTimeRendererPipe,
                        DataTableBigDecimalRendererPipe,
                        NovoDataTableCellHeader,
                        NovoDataTableSortFilter,
                        NovoDataTableHeaderCell,
                        NovoDataTableCell,
                        NovoDataTableHeaderRow,
                        NovoDataTableRow,
                        NovoDataTablePagination,
                        NovoDataTableCheckboxCell,
                        NovoDataTableCheckboxHeaderCell,
                        NovoDataTableExpandCell,
                        NovoDataTableExpandHeaderCell,
                        NovoDataTable,
                        NovoDataTableExpandDirective,
                        NovoDataTableClearButton,
                        NovoDataTableSortButton,
                    ],
                    providers: [DataTableState],
                    exports: [
                        NovoDataTable,
                        DataTableInterpolatePipe,
                        DateTableDateRendererPipe,
                        DateTableCurrencyRendererPipe,
                        DateTableDateTimeRendererPipe,
                        DateTableNumberRendererPipe,
                        DateTableTimeRendererPipe,
                        DataTableBigDecimalRendererPipe,
                        NovoDataTableClearButton,
                        NovoDataTableSortButton,
                    ],
                },] }
    ];

    var RemoteDataTableService = /** @class */ (function () {
        function RemoteDataTableService() {
        }
        return RemoteDataTableService;
    }());

    // NG2
    // Value accessor for the component (supports ngModel)
    var DATE_TIME_PICKER_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoDateTimePickerElement; }),
        multi: true,
    };
    var NovoDateTimePickerElement = /** @class */ (function () {
        function NovoDateTimePickerElement(labels, element) {
            this.labels = labels;
            this.element = element;
            this.weekStart = 0;
            // Select callback for output
            this.onSelect = new i0.EventEmitter(false);
            this.componentTabState = 'date';
            this.datePickerValue = new Date();
            this.timePickerValue = new Date();
            this._onChange = function () { };
            this._onTouched = function () { };
        }
        NovoDateTimePickerElement.prototype.toggleView = function (tab) {
            this.componentTabState = tab;
        };
        NovoDateTimePickerElement.prototype.setDateLabels = function (value) {
            this.selectedLabel = this.labels.formatDateWithFormat(value, {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
        };
        NovoDateTimePickerElement.prototype.setTimeLabels = function (value) {
            var hours = value.getHours();
            var minutes = value.getMinutes();
            this.meridian = value.toLocaleTimeString().slice(-2);
            if (!this.military) {
                hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
                // Special case for 12
                if (this.meridian === 'PM' && hours === 24) {
                    hours = 12;
                }
                else if (this.meridian === 'AM' && hours === 0) {
                    hours = 12;
                }
            }
            this.hours = hours.toString();
            this.minutes = minutes.toString().length === 1 ? "0" + minutes.toString() : minutes.toString();
        };
        NovoDateTimePickerElement.prototype.onDateSelected = function (event) {
            this.datePickerValue = event.date;
            this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
            this.setDateLabels(this.model);
            this.onSelect.emit({ date: this.model });
            this._onChange(this.model);
            this.toggleView('time');
        };
        NovoDateTimePickerElement.prototype.onTimeSelected = function (event) {
            this.timePickerValue = event.date;
            this.model = this.createFullDateValue(this.model, this.timePickerValue);
            this.setTimeLabels(this.model);
            this.onSelect.emit({ date: this.model });
            this._onChange(this.model);
        };
        NovoDateTimePickerElement.prototype.createFullDateValue = function (datePickerValue, timePickerValue) {
            return dateFns.setMilliseconds(dateFns.setSeconds(dateFns.setMinutes(dateFns.setHours(datePickerValue, dateFns.getHours(timePickerValue)), dateFns.getMinutes(timePickerValue)), dateFns.getSeconds(timePickerValue)), dateFns.getMilliseconds(timePickerValue));
        };
        // ValueAccessor Functions
        NovoDateTimePickerElement.prototype.writeValue = function (model) {
            this.model = model;
            if (Helpers.isEmpty(model)) {
                this.model = new Date();
            }
            else if (!isNaN(model)) {
                this.model = new Date(model);
            }
            this.datePickerValue = this.model;
            this.timePickerValue = this.model;
            if (Helpers.isDate(this.model)) {
                this.setDateLabels(this.model);
                this.setTimeLabels(this.model);
            }
        };
        NovoDateTimePickerElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoDateTimePickerElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        return NovoDateTimePickerElement;
    }());
    NovoDateTimePickerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-date-time-picker',
                    providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                    animations: [
                        animations.trigger('dateTextState', [
                            animations.state('date', animations.style({
                                opacity: '1.0',
                            })),
                            animations.state('time', animations.style({
                                opacity: '0.6',
                            })),
                            animations.transition('date <=> time', animations.animate('200ms ease-in')),
                        ]),
                        animations.trigger('timeTextState', [
                            animations.state('date', animations.style({
                                opacity: '0.6',
                            })),
                            animations.state('time', animations.style({
                                opacity: '1.0',
                            })),
                            animations.transition('date <=> time', animations.animate('200ms ease-in')),
                        ]),
                        animations.trigger('indicatorState', [
                            animations.state('date', animations.style({
                                transform: 'translateX(0%)',
                            })),
                            animations.state('time', animations.style({
                                transform: 'translateX(100%)',
                            })),
                            animations.transition('date <=> time', animations.animate('200ms ease-in')),
                        ]),
                        animations.trigger('containerState', [
                            animations.state('date', animations.style({
                                transform: 'translateX(0%)',
                            })),
                            animations.state('time', animations.style({
                                transform: 'translateX(-100%)',
                            })),
                            animations.transition('date <=> time', animations.animate('200ms ease-in')),
                        ]),
                    ],
                    template: "\n    <div class=\"date-time-container\">\n      <div class=\"date-time-tabs\">\n        <span\n          class=\"date-tab\"\n          (click)=\"toggleView('date')\"\n          [@dateTextState]=\"componentTabState\"\n          data-automation-id=\"novo-date-time-date-tab\"\n          >{{ selectedLabel }}</span\n        >\n        <span\n          class=\"time-tab\"\n          (click)=\"toggleView('time')\"\n          [@timeTextState]=\"componentTabState\"\n          data-automation-id=\"novo-date-time-time-tab\"\n        >\n          <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{ hours }}</span\n          >:<span class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{ minutes }}</span>\n          <span *ngIf=\"!military\" class=\"meridian\"> {{ meridian }}</span>\n        </span>\n        <i class=\"date-time-indicator\" [@indicatorState]=\"componentTabState\"></i>\n      </div>\n      <div class=\"view-container\" [@containerState]=\"componentTabState\">\n        <div class=\"calendar\">\n          <novo-date-picker\n            (onSelect)=\"onDateSelected($event)\"\n            [(ngModel)]=\"model\"\n            inline=\"true\"\n            [minYear]=\"minYear\"\n            [maxYear]=\"maxYear\"\n            [start]=\"start\"\n            [end]=\"end\"\n            [disabledDateMessage]=\"disabledDateMessage\"\n            [weekStart]=\"weekStart\"\n          ></novo-date-picker>\n        </div>\n        <div class=\"time-picker\">\n          <novo-time-picker (onSelect)=\"onTimeSelected($event)\" [(ngModel)]=\"model\" [military]=\"military\" inline=\"true\"></novo-time-picker>\n        </div>\n      </div>\n    </div>\n  "
                },] }
    ];
    NovoDateTimePickerElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ElementRef }
    ]; };
    NovoDateTimePickerElement.propDecorators = {
        minYear: [{ type: i0.Input }],
        maxYear: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        end: [{ type: i0.Input }],
        military: [{ type: i0.Input }],
        weekStart: [{ type: i0.Input }],
        disabledDateMessage: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }]
    };

    var CollectionEvent = /** @class */ (function () {
        function CollectionEvent(type, data) {
            if (type === void 0) { type = 'Collection.REFRESH'; }
            if (data === void 0) { data = []; }
            this.type = '';
            this.data = [];
            this.type = type;
            this.data = data;
        }
        return CollectionEvent;
    }());
    CollectionEvent.REFRESH = 'Collection.REFRESH';
    CollectionEvent.ADD = 'Collection.ADD';
    CollectionEvent.REMOVE = 'Collection.REMOVE';
    CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
    CollectionEvent.REPLACE = 'Collection.REPLACE';
    CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
    CollectionEvent.SORT = 'Collection.SORT';
    CollectionEvent.FILTER = 'Collection.FILTER';
    CollectionEvent.CHANGE = 'Collection.CHANGE';
    CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
    CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
    CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';

    /**
     * Base Class for all Collection based data providers
     *
     * @example
     *  var dp:DataProvider = new DataProvider();
     *  dp.addItem({label:"Item 1"});
     *  dp.addItem({label:"Item 2"});
     *  dp.addItem({label:"Item 3"});
     *  dp.addItem({label:"Item 4"});

     *  var myList:List = new List();
     *  myList.dataProvider = dp;
     */
    var ArrayCollection = /** @class */ (function () {
        function ArrayCollection(source) {
            if (source === void 0) { source = []; }
            this.dataChange = new i0.EventEmitter();
            this.source = [];
            this.editData = [];
            this.isEditing = false;
            this.filterData = [];
            this._filter = {};
            this._sort = [];
            this.source = source;
            this.editData = this.copy(this.source);
            this.filterData = this.source.slice();
        }
        Object.defineProperty(ArrayCollection.prototype, "length", {
            get: function () {
                return this.filterData.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ArrayCollection.prototype, "total", {
            get: function () {
                return this.filterData.length;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ArrayCollection.prototype, "list", {
            get: function () {
                return this.filterData;
            },
            enumerable: false,
            configurable: true
        });
        ArrayCollection.prototype.isEmpty = function () {
            return this.length <= 0 && !this.isLoading() && !this.hasErrors();
        };
        ArrayCollection.prototype.hasErrors = function () {
            return false;
        };
        ArrayCollection.prototype.isLoading = function () {
            return false;
        };
        ArrayCollection.prototype.isFiltered = function () {
            return Object.keys(this._filter).length > 0;
        };
        /**
         * Method to switch the isEditingflag for the data source
         */
        ArrayCollection.prototype.edit = function () {
            this.isEditing = true;
            this.editData = this.copy(this.source);
        };
        /**
         * Method to leave edit mode and reset source
         */
        ArrayCollection.prototype.undo = function () {
            this.isEditing = false;
            this.source = this.copy(this.editData);
            this.refresh();
        };
        /**
         * Method to leave edit mode and save editData
         */
        ArrayCollection.prototype.commit = function () {
            this.isEditing = false;
            this.source = this.filterData.slice();
            this.refresh();
        };
        /**
         * Appends an item to the end of the data provider.
         *
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.addItem = function (item) {
            this.isEditing ? this.editData.push(item) : this.source.push(item);
            this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
            this.refresh();
        };
        /**
         * Adds a new item to the data provider at the specified index.
         *
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.addItemAt = function (item, index) {
            this.isEditing ? this.editData.splice(index, 0, item) : this.source.splice(index, 0, item);
            this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
            this.refresh();
        };
        /**
         *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.addItems = function (items) {
            var _a, _b;
            this.isEditing ? (_a = this.editData).push.apply(_a, __spread(items)) : (_b = this.source).push.apply(_b, __spread(items));
            this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
            this.refresh();
        };
        /**
         * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.addItemsAt = function (items, index) {
            var _a, _b;
            this.isEditing ? (_a = this.editData).splice.apply(_a, __spread([index, 0], items)) : (_b = this.source).splice.apply(_b, __spread([index, 0], items));
        };
        /**
         * Creates a copy of the current ArrayCollection any.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.clone = function () {
            return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
        };
        /**
         * Creates a copy of the current ArrayCollection any.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.copy = function (array) {
            return Helpers.deepClone(array);
        };
        /**
         * Concatenates the specified items to the end of the current data provider.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.concat = function (items) {
            this.addItems(items);
        };
        /**
         * Returns the item at the specified index.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.getItemAt = function (index) {
            return this.isEditing ? this.editData[index] : this.source[index];
        };
        /**
         *  Returns the index of the specified item.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.getItemIndex = function (item) {
            return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
        };
        /**
         * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.invalidate = function () {
            this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
        };
        /**
         * Invalidates the specified item.
         *
         * @memberOf ArrayCollection
         */
        // invalidateItem(item:any):void {}
        /**
         * Invalidates the item at the specified index.
         *
         * @memberOf ArrayCollection
         */
        // invalidateItemAt(index:number):void {}
        /**
         * Appends the specified data into the data that the data provider contains and removes any duplicate items.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.merge = function (newData) {
            var e_1, _a;
            try {
                for (var newData_1 = __values(newData), newData_1_1 = newData_1.next(); !newData_1_1.done; newData_1_1 = newData_1.next()) {
                    var obj = newData_1_1.value;
                    var existing = ~this.getItemIndex(obj);
                    if (existing) {
                        this.replaceItem(obj, existing);
                    }
                    else {
                        this.addItem(obj);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (newData_1_1 && !newData_1_1.done && (_a = newData_1.return)) _a.call(newData_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        /**
         * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.removeAll = function () {
            this.source = [];
            this.editData = [];
            this.filterData = [];
            this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
            this.refresh();
        };
        /**
         * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.removeItem = function (item) {
            var index = this.getItemIndex(item);
            return this.removeItemAt(index);
        };
        /**
         * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.removeItemAt = function (index) {
            var success = !!this.source.splice(index, 1);
            this.refresh();
            return success;
        };
        /**
         * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.replaceItem = function (newItem, oldItem) {
            var index = this.getItemIndex(oldItem);
            if (index >= 0) {
                this.replaceItemAt(newItem, index);
            }
        };
        /**
         * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.replaceItemAt = function (newItem, index) {
            this.filterData.splice(index, 1, newItem);
        };
        Object.defineProperty(ArrayCollection.prototype, "sort", {
            /**
             * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
             *
             * @memberOf ArrayCollection
             */
            get: function () {
                return this._sort;
            },
            set: function (value) {
                this._sort = value;
                this.refresh();
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.sortOn = function (fieldName, reverse) {
            if (reverse === void 0) { reverse = false; }
            this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
            this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
            return this.filterData;
        };
        Object.defineProperty(ArrayCollection.prototype, "filter", {
            get: function () {
                return this._filter;
            },
            set: function (value) {
                this._filter = value;
                this.refresh();
            },
            enumerable: false,
            configurable: true
        });
        ArrayCollection.prototype.filterOn = function (fieldName, value) {
            if (value === void 0) { value = null; }
            this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
            return this.filterData;
        };
        ArrayCollection.prototype.onDataChange = function (event) {
            this.dataChange.emit(event);
        };
        ArrayCollection.prototype.refresh = function () {
            var e_2, _a;
            this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
            try {
                for (var _b = __values(this._sort.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    this.sortOn(item.field, item.reverse);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_2) throw e_2.error; }
            }
            for (var key in this._filter) {
                if (key) {
                    this.filterOn(key, this._filter[key]);
                }
            }
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        };
        /**
         * Creates an Array any representation of the data that the data provider contains.
         *
         * @memberOf ArrayCollection
         */
        ArrayCollection.prototype.toArray = function () {
            return this.isEditing ? this.editData : this.source;
        };
        ArrayCollection.prototype.toJSON = function () {
            return this.isEditing ? this.editData : this.source;
        };
        return ArrayCollection;
    }());

    var PagedArrayCollection = /** @class */ (function (_super) {
        __extends(PagedArrayCollection, _super);
        function PagedArrayCollection(source) {
            if (source === void 0) { source = []; }
            var _this = _super.call(this, source) || this;
            _this._page = 1;
            _this._numberOfPages = 1;
            _this._pageSize = 10;
            return _this;
        }
        Object.defineProperty(PagedArrayCollection.prototype, "numberOfPages", {
            get: function () {
                var result = this.source.length / this.pageSize;
                result = Math.ceil(result);
                return result;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PagedArrayCollection.prototype, "page", {
            get: function () {
                return this._page;
            },
            set: function (value) {
                this._page = value;
                this.refresh();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(PagedArrayCollection.prototype, "pageSize", {
            get: function () {
                return this._pageSize;
            },
            set: function (value) {
                this._pageSize = value;
                this.refresh();
            },
            enumerable: false,
            configurable: true
        });
        PagedArrayCollection.prototype.next = function () {
            if (this.page === this.numberOfPages) {
                return this.page;
            }
            this.page++;
            return this.page;
        };
        PagedArrayCollection.prototype.prev = function () {
            if (this._page === 1) {
                return this.page;
            }
            this.page--;
            return this.page;
        };
        PagedArrayCollection.prototype.first = function () {
            if (this.page === 1) {
                return this.page;
            }
            this.page = 1;
            return this.page;
        };
        PagedArrayCollection.prototype.last = function () {
            if (this.page === this.numberOfPages) {
                return this.page;
            }
            this.page = this.numberOfPages;
            return this.page;
        };
        PagedArrayCollection.prototype.refresh = function () {
            var e_1, _a;
            this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
            try {
                for (var _b = __values(this._sort.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var item = _c.value;
                    this.sortOn(item.field, item.reverse);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            for (var key in this._filter) {
                if (key) {
                    this.filterOn(key, this._filter[key]);
                }
            }
            if (this.page >= 0) {
                var start = (this.page - 1) * this.pageSize;
                var end = start + this.pageSize;
                var result = this.filterData.slice(start, end);
                this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
            }
            else {
                this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
            }
        };
        return PagedArrayCollection;
    }(ArrayCollection));

    var GlobalRef = /** @class */ (function () {
        function GlobalRef() {
        }
        return GlobalRef;
    }());
    var BrowserGlobalRef = /** @class */ (function (_super) {
        __extends(BrowserGlobalRef, _super);
        function BrowserGlobalRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(BrowserGlobalRef.prototype, "nativeGlobal", {
            get: function () {
                return window;
            },
            enumerable: false,
            configurable: true
        });
        return BrowserGlobalRef;
    }(GlobalRef));
    BrowserGlobalRef.decorators = [
        { type: i0.Injectable }
    ];
    var NodeGlobalRef = /** @class */ (function (_super) {
        __extends(NodeGlobalRef, _super);
        function NodeGlobalRef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NodeGlobalRef.prototype, "nativeGlobal", {
            get: function () {
                throw new Error("global doesn't compile for some reason");
                // return global as Global;
            },
            enumerable: false,
            configurable: true
        });
        return NodeGlobalRef;
    }(GlobalRef));

    var Security = /** @class */ (function () {
        function Security() {
            this.credentials = [];
            this.change = new i0.EventEmitter();
        }
        Security.prototype.grant = function (data) {
            var e_1, _a, e_2, _b;
            var parsed = [];
            if (data instanceof Array) {
                try {
                    for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                        var permission = data_1_1.value;
                        parsed.push(permission.replace(/\s/gi, ''));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else if (typeof data === 'object') {
                for (var key in data) {
                    if (data[key] instanceof Array) {
                        try {
                            for (var _c = (e_2 = void 0, __values(data[key])), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var permission = _d.value;
                                parsed.push(key + "." + permission);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                }
            }
            this.credentials = [].concat(this.credentials, parsed);
            this.change.emit(this.credentials);
        };
        Security.prototype.has = function (value) {
            return this.credentials.indexOf(value) > -1;
        };
        Security.prototype.revoke = function (value) {
            var i = this.credentials.indexOf(value);
            this.credentials.splice(i, 1);
            this.change.emit(this.credentials);
        };
        Security.prototype.clear = function () {
            this.credentials = [];
            this.change.emit(this.credentials);
        };
        Security.prototype.subscribe = function (fn) {
            this.change.subscribe(fn);
        };
        Security.prototype.checkRoutes = function (routes, options) {
            var e_3, _a;
            var _this = this;
            var filtered = [];
            try {
                for (var routes_1 = __values(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {
                    var route = routes_1_1.value;
                    if (route.entities && ~route.entities.indexOf(options.entityType)) {
                        if (route.permissions instanceof Function) {
                            if (route.permissions(options, this)) {
                                filtered.push(route);
                            }
                        }
                        else if (route.permissions && route.permissions.length) {
                            if (route.permissions.every(function (perm) { return _this.has(perm); })) {
                                filtered.push(route);
                            }
                        }
                        else {
                            filtered.push(route);
                        }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return filtered;
        };
        return Security;
    }());
    Security.ɵprov = i0.ɵɵdefineInjectable({ factory: function Security_Factory() { return new Security(); }, token: Security, providedIn: "root" });
    Security.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];

    var LocalStorageService = /** @class */ (function () {
        function LocalStorageService() {
        }
        LocalStorageService.prototype.setItem = function (key, value) {
            localStorage.setItem(key, value);
        };
        LocalStorageService.prototype.getItem = function (key) {
            return localStorage.getItem(key);
        };
        LocalStorageService.prototype.removeItem = function (key) {
            localStorage.removeItem(key);
        };
        return LocalStorageService;
    }());
    LocalStorageService.decorators = [
        { type: i0.Injectable }
    ];

    // NG2
    var NovoTemplateService = /** @class */ (function () {
        function NovoTemplateService() {
            this.templates = {
                default: {},
                custom: {},
            };
        }
        NovoTemplateService.prototype.getAll = function () {
            var _this = this;
            var templates = {};
            var customTemplateTypes = Object.keys(this.templates.custom);
            var defaultTemplateTypes = Object.keys(this.templates.default);
            defaultTemplateTypes.forEach(function (type) {
                templates[type] = _this.templates.default[type];
            });
            customTemplateTypes.forEach(function (type) {
                templates[type] = _this.templates.custom[type];
            });
            return templates;
        };
        NovoTemplateService.prototype.addDefault = function (key, template) {
            this.templates.default[key] = template;
        };
        NovoTemplateService.prototype.addCustom = function (key, template) {
            this.templates.custom[key] = template;
        };
        return NovoTemplateService;
    }());
    NovoTemplateService.decorators = [
        { type: i0.Injectable }
    ];
    NovoTemplateService.ctorParameters = function () { return []; };

    // Value accessor for the component (supports ngModel)
    var TIME_PICKER_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoTimePickerElement; }),
        multi: true,
    };
    (function (TIME_VALUE_FORMATS) {
        TIME_VALUE_FORMATS["iso8601"] = "iso8601";
        TIME_VALUE_FORMATS["Date"] = "Date";
    })(exports.TIME_VALUE_FORMATS || (exports.TIME_VALUE_FORMATS = {}));
    var NovoTimePickerElement = /** @class */ (function () {
        function NovoTimePickerElement(element, labels, dateFormatService, cdr) {
            this.element = element;
            this.labels = labels;
            this.dateFormatService = dateFormatService;
            this.cdr = cdr;
            this.military = false;
            this.analog = false;
            this.inline = false;
            this.step = 1;
            this.onSelect = new i0.EventEmitter();
            this.hours = 12;
            this.minutes = 0;
            this.value = null;
            this.increments = [];
            this.MERIDIANS = ['am', 'pm'];
            this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
            this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
            this._onChange = function () { };
            this._onTouched = function () { };
        }
        NovoTimePickerElement.prototype.flatten = function (arr) {
            var _a;
            return (_a = Array.prototype).concat.apply(_a, __spread(arr));
        };
        NovoTimePickerElement.prototype.ngOnInit = function () {
            var _this = this;
            if (this.military) {
                this.HOURS = __spread(['0'], this.HOURS, ['13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']);
            }
            if (!this.analog) {
                var mins = Array.from(Array(60 / this.step).keys()).map(function (i) { return i * _this.step; });
                this.MINUTES = mins.map(function (m) { return ("" + m).padStart(2, '0'); });
            }
            this.ngOnChanges();
        };
        NovoTimePickerElement.prototype.ngOnChanges = function (changes) {
            if (this.model) {
                this.init(this.model, false);
            }
            else {
                this.selected = null;
                this.init(new Date(), false);
            }
        };
        NovoTimePickerElement.prototype.init = function (value, dispatch) {
            var _value = new Date(value);
            var hours = _value.getHours();
            var minutes = _value.getMinutes();
            if (!this.military) {
                this.meridian = hours >= 12 ? 'pm' : 'am';
                hours = hours % 12;
                hours = hours || 12;
            }
            minutes = minutes < 10 ? "0" + minutes : minutes;
            this.setHours(null, hours, dispatch);
            this.setMinutes(null, minutes, dispatch);
            this.checkBetween(minutes);
        };
        NovoTimePickerElement.prototype.checkBetween = function (value) {
            this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
        };
        NovoTimePickerElement.prototype.setValue = function (event, value) {
            Helpers.swallowEvent(event);
            this.selected = value;
            var _a = __read(value.split(' '), 2), time = _a[0], meridian = _a[1];
            var _b = __read(time.split(':'), 2), hours = _b[0], minutes = _b[1];
            this.hours = hours;
            this.minutes = minutes;
            this.meridian = meridian;
            this.dispatchChange();
        };
        NovoTimePickerElement.prototype.setHours = function (event, hours, dispatch) {
            Helpers.swallowEvent(event);
            this.hours = hours;
            this.hoursClass = "hour-" + hours;
            this.activeHour = hours;
            if (dispatch) {
                this.dispatchChange();
            }
        };
        NovoTimePickerElement.prototype.setMinutes = function (event, minutes, dispatch) {
            Helpers.swallowEvent(event);
            this.minutes = minutes;
            this.minutesClass = "min-" + minutes;
            this.activeMinute = minutes;
            this.checkBetween(minutes);
            if (dispatch) {
                this.dispatchChange();
            }
        };
        NovoTimePickerElement.prototype.setPeriod = function (event, period, dispatch) {
            Helpers.swallowEvent(event);
            this.meridian = period;
            if (dispatch) {
                this.dispatchChange();
            }
        };
        NovoTimePickerElement.prototype.dispatchChange = function () {
            var hours = Number(this.hours);
            if (!this.military) {
                hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
                // Special case for 12
                if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                    hours = 12;
                }
                else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                    hours = 0;
                }
            }
            var value = new Date();
            value.setHours(hours);
            value.setMinutes(this.minutes);
            value.setSeconds(0);
            this.value = this.hours + ":" + this.minutes + " " + this.meridian;
            this.onSelect.next({
                hours: hours,
                minutes: this.minutes,
                meridian: this.meridian,
                date: value,
                text: this.value,
            });
            this._onChange(value);
        };
        // ValueAccessor Functions
        NovoTimePickerElement.prototype.writeValue = function (model) {
            this.model = model;
            if (Helpers.isDate(model)) {
                this.init(model, false);
                // this.dispatchChange();
            }
            if (Helpers.isString(model)) {
                var time = this.military ? model : this.convertTime12to24(model);
                var date = dateFns.parse(dateFns.format(Date.now(), 'YYYY-MM-DD') + "T" + time);
                if (dateFns.isValid(date)) {
                    this.init(date, false);
                    // this.dispatchChange();
                }
            }
        };
        NovoTimePickerElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoTimePickerElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        NovoTimePickerElement.prototype.convertTime12to24 = function (time12h) {
            var pmFormat = this.labels.timeFormatPM.toUpperCase();
            var _a = __read(time12h.split(' '), 2), time = _a[0], modifier = _a[1];
            var _b = __read(time.split(':'), 2), hours = _b[0], minutes = _b[1];
            if (hours === '12') {
                hours = '00';
            }
            if (['PM', pmFormat].includes(modifier)) {
                hours = ("" + (parseInt(hours, 10) + 12)).padStart(2, '0');
            }
            return hours + ":" + minutes;
        };
        return NovoTimePickerElement;
    }());
    NovoTimePickerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-time-picker',
                    providers: [TIME_PICKER_VALUE_ACCESSOR],
                    template: "\n    <!-- <div class=\"digital\" [class.inline]=\"inline\" [class.military]=\"military\" *ngIf=\"inline\">\n      <div class=\"digital--inner\">\n        <span class=\"digital--clock\" *ngIf=\"analog\">\n          <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{ hours }}</span\n          >:<span class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{ minutes }}</span>\n        </span>\n        <div class=\"control-block\" *ngIf=\"!military && analog\">\n          <span\n            *ngFor=\"let period of MERIDIANS\"\n            class=\"digital--period\"\n            [class.active]=\"meridian == period\"\n            (click)=\"setPeriod($event, period, true)\"\n            [attr.data-automation-id]=\"period\"\n            >{{ period }}</span\n          >\n        </div>\n      </div>\n    </div> -->\n    <div class=\"increments\" *ngIf=\"!analog\">\n      <novo-list class=\"increments--hours\" direction=\"vertical\" data-automation-id=\"novo-time-picker-hours\">\n        <novo-list-item\n          class=\"increments--hour\"\n          *ngFor=\"let increment of HOURS\"\n          (click)=\"setHours($event, increment, true)\"\n          [class.active]=\"increment == activeHour\"\n          [attr.data-automation-id]=\"increment\"\n        >\n          <item-content>{{ increment }}</item-content>\n        </novo-list-item>\n      </novo-list>\n      <novo-list class=\"increments--minutes\" direction=\"vertical\" data-automation-id=\"novo-time-picker-minutes\">\n        <novo-list-item\n          class=\"increments--minute\"\n          *ngFor=\"let increment of MINUTES\"\n          (click)=\"setMinutes($event, increment, true)\"\n          [class.active]=\"increment == activeMinute\"\n          [attr.data-automation-id]=\"increment\"\n        >\n          <item-content>{{ increment }}</item-content>\n        </novo-list-item>\n      </novo-list>\n      <novo-list class=\"increments--meridians\" direction=\"vertical\" *ngIf=\"!military\" data-automation-id=\"novo-time-picker-meridians\">\n        <novo-list-item\n          class=\"increments--meridian\"\n          *ngFor=\"let period of MERIDIANS\"\n          (click)=\"setPeriod($event, period, true)\"\n          [class.active]=\"meridian == period\"\n          [attr.data-automation-id]=\"period\"\n        >\n          <item-content>{{ period }}</item-content>\n        </novo-list-item>\n      </novo-list>\n    </div>\n    <div class=\"analog\" *ngIf=\"analog\">\n      <div class=\"analog--inner\">\n        <div class=\"analog--face\">\n          <span class=\"analog--center\"></span>\n          <span class=\"analog--hand--hours\" [ngClass]=\"hoursClass\">\n            <span class=\"analog--ball\"></span>\n          </span>\n          <span class=\"analog--hand--minutes\" [ngClass]=\"minutesClass\">\n            <span class=\"analog--ball\" [ngClass]=\"{ between: inBetween }\"></span>\n          </span>\n        </div>\n        <div class=\"analog--hours\">\n          <span\n            *ngFor=\"let hour of HOURS\"\n            class=\"analog--hour\"\n            [ngClass]=\"{ active: activeHour == hour }\"\n            (click)=\"setHours($event, hour, true)\"\n            [attr.data-automation-id]=\"hour\"\n            >{{ hour }}</span\n          >\n        </div>\n        <div class=\"analog--minutes\">\n          <span\n            *ngFor=\"let minute of MINUTES\"\n            class=\"analog--minute\"\n            [ngClass]=\"{ active: activeMinute == minute }\"\n            (click)=\"setMinutes($event, minute, true)\"\n            [attr.data-automation-id]=\"minute\"\n            >{{ minute }}</span\n          >\n        </div>\n      </div>\n    </div>\n  ",
                    host: {
                        class: 'novo-time-picker',
                        '[class.military]': 'military',
                    }
                },] }
    ];
    NovoTimePickerElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: DateFormatService },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTimePickerElement.propDecorators = {
        military: [{ type: i0.Input }],
        analog: [{ type: i0.Input }],
        inline: [{ type: i0.Input }],
        step: [{ type: i0.Input }],
        onSelect: [{ type: i0.Output }]
    };

    // Value accessor for the component (supports ngModel)
    var DATE_VALUE_ACCESSOR$2 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoTimePickerInputElement; }),
        multi: true,
    };
    var NovoTimePickerInputElement = /** @class */ (function () {
        function NovoTimePickerInputElement(element, labels, dateFormatService, _changeDetectorRef) {
            this.element = element;
            this.labels = labels;
            this.dateFormatService = dateFormatService;
            this._changeDetectorRef = _changeDetectorRef;
            /** View -> model callback called when value changes */
            this._onChange = function () { };
            /** View -> model callback called when autocomplete has been touched */
            this._onTouched = function () { };
            this.military = false;
            this.disabled = false;
            /**
             * @deprecated don't use
             */
            this.analog = false;
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
        }
        NovoTimePickerInputElement.prototype.ngOnInit = function () {
            this.initFormatOptions();
        };
        NovoTimePickerInputElement.prototype.ngOnChanges = function (changes) {
            // set icon and styling
            if (Object.keys(changes).some(function (key) { return ['military', 'maskOptions'].includes(key); })) {
                this.initFormatOptions();
            }
        };
        NovoTimePickerInputElement.prototype.initFormatOptions = function () {
            var _this = this;
            this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
            var timeFormat = this.military ? 'HH:mm' : 'hh:mm A';
            var amFormat = this.labels.timeFormatAM.toUpperCase();
            var pmFormat = this.labels.timeFormatPM.toUpperCase();
            this.maskOptions = {
                mask: Date,
                pattern: this.military ? 'HH:mm' : 'hh:mm aa',
                overwrite: true,
                autofix: true,
                lazy: false,
                min: new Date(1970, 0, 1),
                max: new Date(2030, 0, 1),
                prepare: function (str) {
                    return str.toUpperCase();
                },
                format: function (date) {
                    return dateFns.format(date, timeFormat);
                },
                parse: function (str) {
                    var time = _this.military ? str : _this.convertTime12to24(str);
                    return dateFns.parse(dateFns.format(Date.now(), 'YYYY-MM-DD') + "T" + time);
                },
                blocks: {
                    HH: {
                        mask: IMask.MaskedRange,
                        placeholderChar: 'H',
                        maxLength: 2,
                        from: 0,
                        to: 23,
                    },
                    hh: {
                        mask: IMask.MaskedRange,
                        placeholderChar: 'h',
                        maxLength: 2,
                        from: 1,
                        to: 12,
                    },
                    mm: {
                        mask: IMask.MaskedRange,
                        placeholderChar: 'm',
                        maxLength: 2,
                        from: 0,
                        to: 59,
                    },
                    aa: {
                        mask: IMask.MaskedEnum,
                        placeholderChar: 'x',
                        enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                    },
                },
            };
        };
        NovoTimePickerInputElement.prototype.onComplete = function (dt) {
            if (this.value instanceof Date && dt instanceof Date) {
                if (this.value.getTime() !== dt.getTime()) {
                    this.dispatchOnChange(dt);
                }
            }
            else if (this.value !== dt) {
                this.dispatchOnChange(dt);
            }
        };
        /** BEGIN: Convenient Panel Methods. */
        NovoTimePickerInputElement.prototype.openPanel = function () {
            var _this = this;
            if (!this.overlay.panelOpen) {
                this.overlay.openPanel();
                var hour_1 = new Date().getHours();
                Promise.resolve(null).then(function () { return _this.scrollToIndex(hour_1 * 4); });
            }
        };
        NovoTimePickerInputElement.prototype.closePanel = function () {
            this.overlay.closePanel();
        };
        Object.defineProperty(NovoTimePickerInputElement.prototype, "panelOpen", {
            get: function () {
                return this.overlay && this.overlay.panelOpen;
            },
            enumerable: false,
            configurable: true
        });
        /** END: Convenient Panel Methods. */
        NovoTimePickerInputElement.prototype._handleKeydown = function (event) {
            var input = event.target;
            var hour = input.value.slice(0, 2);
            if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */) && this.panelOpen) {
                this.closePanel();
                event.stopPropagation();
                event.stopImmediatePropagation();
                if (this.hourOneFormatRequired(hour)) {
                    input.value = "01:" + input.value.slice(3, input.value.length);
                }
            }
            else if (event.key === "Tab" /* Tab */ && input.selectionStart <= 2 && this.hourOneFormatRequired(hour)) {
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                input.value = "01:" + input.value.slice(3, input.value.length);
                input.setSelectionRange(3, 3);
            }
            else if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
                input.value = input.value.slice(0, 5) + " xx";
            }
            else if (event.key === "Tab" /* Tab */ && this.panelOpen) {
                this.closePanel();
                event.stopPropagation();
                event.stopImmediatePropagation();
            }
            else if (event.key === "ArrowRight" /* ArrowRight */ && input.selectionStart >= 2 && this.hourOneFormatRequired(hour)) {
                input.value = "01:" + input.value.slice(3, input.value.length);
                input.setSelectionRange(2, 2);
            }
        };
        NovoTimePickerInputElement.prototype._handleInput = function (event) {
            if (document.activeElement === event.target) {
                var text = event.target.value;
                var hour = text.slice(0, 2);
                this.openPanel();
                if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                    event.preventDefault();
                    event.target.value = "0" + text;
                }
                if (!this.military) {
                    var test_1 = text.substr(5, 4).replace(/x/g, '').trim().slice(0, 2);
                    var timePeriod = this.maskOptions.blocks.aa.enum.find(function (it) { return it[0] === test_1[0]; });
                    if (timePeriod) {
                        event.target.value = event.target.value.slice(0, 5) + " " + timePeriod;
                    }
                    if (event.target.selectionStart >= 3 && this.hourOneFormatRequired(hour)) {
                        event.target.value = "01:" + event.target.value.slice(3, event.target.value.length);
                    }
                }
            }
        };
        NovoTimePickerInputElement.prototype._handleBlur = function (event) {
            var text = event.target.value;
            var hour = text.slice(0, 2);
            if (!this.military) {
                var test_2 = text.substr(5, 4).replace(/x/g, '').trim().slice(0, 2);
                var timePeriod = this.maskOptions.blocks.aa.enum.find(function (it) { return it[0] === test_2[0]; });
                if (this.hourOneFormatRequired(hour)) {
                    event.target.value = "01:" + text.slice(3, text.length);
                }
                if (!timePeriod) {
                    event.target.value = event.target.value.slice(0, 5) + " xx";
                }
            }
        };
        NovoTimePickerInputElement.prototype._handleFocus = function (event) {
            this.openPanel();
            this.focusEvent.emit(event);
        };
        NovoTimePickerInputElement.prototype.writeValue = function (value) {
            var _this = this;
            Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
        };
        NovoTimePickerInputElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoTimePickerInputElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        NovoTimePickerInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoTimePickerInputElement.prototype.dispatchOnChange = function (newValue, skip) {
            if (skip === void 0) { skip = false; }
            if (newValue !== this.value) {
                this._onChange(newValue);
                !skip && this.writeValue(newValue);
            }
        };
        NovoTimePickerInputElement.prototype._setTriggerValue = function (value) {
            if (value instanceof Date && this.value instanceof Date) {
                value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
            }
            this.value = value;
            this._changeDetectorRef.markForCheck();
        };
        NovoTimePickerInputElement.prototype.setValue = function (event) {
            if (event && event.date) {
                this.dispatchOnChange(event.date);
            }
        };
        NovoTimePickerInputElement.prototype.setValueAndClose = function (event) {
            this.setValue(event);
            this.closePanel();
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoTimePickerInputElement.prototype.clearValue = function () {
            this.dispatchOnChange(null);
        };
        Object.defineProperty(NovoTimePickerInputElement.prototype, "hasValue", {
            get: function () {
                return !Helpers.isEmpty(this.value);
            },
            enumerable: false,
            configurable: true
        });
        NovoTimePickerInputElement.prototype.scrollToIndex = function (index) {
            var element = this.overlay.overlayRef.overlayElement;
            var list = element.querySelector('.increments');
            var items = list.querySelectorAll('novo-list-item');
            var item = items[index];
            if (item) {
                list.scrollTop = item.offsetTop;
            }
        };
        NovoTimePickerInputElement.prototype.convertTime12to24 = function (time12h) {
            var pmFormat = this.labels.timeFormatPM.toUpperCase();
            var _a = __read(time12h.split(' '), 2), time = _a[0], modifier = _a[1];
            var _b = __read(time.split(':'), 2), hours = _b[0], minutes = _b[1];
            if (hours === '12') {
                hours = '00';
            }
            if (['PM', pmFormat].includes(modifier)) {
                hours = ("" + (parseInt(hours, 10) + 12)).padStart(2, '0');
            }
            return hours + ":" + minutes;
        };
        NovoTimePickerInputElement.prototype.hourOneFormatRequired = function (hourInput) {
            return hourInput === 'h1' || hourInput === '1h';
        };
        return NovoTimePickerInputElement;
    }());
    NovoTimePickerInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-time-picker-input',
                    providers: [DATE_VALUE_ACCESSOR$2],
                    template: "\n    <input\n      type=\"text\"\n      [name]=\"name\"\n      [(ngModel)]=\"value\"\n      [imask]=\"maskOptions\"\n      [unmask]=\"'typed'\"\n      (complete)=\"onComplete($event)\"\n      [placeholder]=\"placeholder\"\n      (focus)=\"_handleFocus($event)\"\n      (keydown)=\"_handleKeydown($event)\"\n      (input)=\"_handleInput($event)\"\n      (blur)=\"_handleBlur($event)\"\n      #input\n      data-automation-id=\"time-input\"\n      [disabled]=\"disabled\"\n    />\n    <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-clock\"></i> <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-time-picker\n        inline=\"true\"\n        [analog]=\"analog\"\n        (onSelect)=\"setValue($event)\"\n        [ngModel]=\"value\"\n        [military]=\"military\"\n      ></novo-time-picker>\n    </novo-overlay-template>\n  "
                },] }
    ];
    NovoTimePickerInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: DateFormatService },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTimePickerInputElement.propDecorators = {
        name: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        military: [{ type: i0.Input }],
        maskOptions: [{ type: i0.Input }],
        disabled: [{ type: i0.HostBinding, args: ['class.disabled',] }, { type: i0.Input }],
        analog: [{ type: i0.Input }],
        blurEvent: [{ type: i0.Output }],
        focusEvent: [{ type: i0.Output }],
        overlay: [{ type: i0.ViewChild, args: [NovoOverlayTemplateComponent,] }],
        input: [{ type: i0.ViewChild, args: ['input',] }]
    };

    // NG2
    var NovoTimePickerModule = /** @class */ (function () {
        function NovoTimePickerModule() {
        }
        return NovoTimePickerModule;
    }());
    NovoTimePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, angularImask.IMaskDirectiveModule, angular2TextMask.TextMaskModule, NovoOverlayModule, NovoListModule],
                    declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                    exports: [NovoTimePickerElement, NovoTimePickerInputElement],
                },] }
    ];

    // NG
    // Value accessor for the component (supports ngModel)
    var DATE_VALUE_ACCESSOR$3 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoDateTimePickerInputElement; }),
        multi: true,
    };
    var NovoDateTimePickerInputElement = /** @class */ (function () {
        function NovoDateTimePickerInputElement(element, labels, _changeDetectorRef) {
            this.element = element;
            this.labels = labels;
            this._changeDetectorRef = _changeDetectorRef;
            /** View -> model callback called when value changes */
            this._onChange = function () { };
            /** View -> model callback called when autocomplete has been touched */
            this._onTouched = function () { };
            this.military = false;
            this.disabled = false;
            this.weekStart = 0;
            this.blurEvent = new i0.EventEmitter();
            this.focusEvent = new i0.EventEmitter();
            this.changeEvent = new i0.EventEmitter();
        }
        NovoDateTimePickerInputElement.prototype.writeValue = function (value) {
            var _this = this;
            this.datePart = dateFns.isDate(value) ? dateFns.parse(value) : value;
            this.timePart = dateFns.isDate(value) ? dateFns.parse(value) : value;
            Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
        };
        NovoDateTimePickerInputElement.prototype.updateDate = function (event) {
            this.datePart = event;
            this.checkParts();
        };
        NovoDateTimePickerInputElement.prototype.updateTime = function (event) {
            this.timePart = event;
            this.checkParts();
        };
        NovoDateTimePickerInputElement.prototype.handleBlur = function (event) {
            this.blurEvent.emit(event);
            this.changeEvent.emit(event);
        };
        NovoDateTimePickerInputElement.prototype.handleFocus = function (event) {
            this.focusEvent.emit(event);
        };
        NovoDateTimePickerInputElement.prototype.checkParts = function () {
            try {
                if (this.datePart instanceof Date && this.timePart instanceof Date) {
                    this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
                }
                else if (this.datePart instanceof Date) {
                    this.timePart = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), 12, 0);
                    this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
                }
                else {
                    this.dispatchOnChange(null);
                }
            }
            catch (err) {
                // Date not valid
                this.dispatchOnChange(null);
            }
        };
        NovoDateTimePickerInputElement.prototype.registerOnChange = function (fn) {
            this._onChange = fn;
        };
        NovoDateTimePickerInputElement.prototype.registerOnTouched = function (fn) {
            this._onTouched = fn;
        };
        NovoDateTimePickerInputElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoDateTimePickerInputElement.prototype.dispatchOnChange = function (newValue) {
            if (newValue !== this.value) {
                this._onChange(newValue);
                this._setTriggerValue(newValue);
            }
        };
        NovoDateTimePickerInputElement.prototype._setTriggerValue = function (value) {
            this.value = value;
            this._changeDetectorRef.markForCheck();
        };
        NovoDateTimePickerInputElement.prototype.setValue = function (event) {
            if (event && event.date) {
                this.dispatchOnChange(event.date);
            }
        };
        NovoDateTimePickerInputElement.prototype.setValueAndClose = function (event) {
            this.setValue(event);
        };
        /**
         * Clear any previous selected option and emit a selection change event for this option
         */
        NovoDateTimePickerInputElement.prototype.clearValue = function () {
            this.dispatchOnChange(null);
        };
        Object.defineProperty(NovoDateTimePickerInputElement.prototype, "hasValue", {
            get: function () {
                return !Helpers.isEmpty(this.value);
            },
            enumerable: false,
            configurable: true
        });
        return NovoDateTimePickerInputElement;
    }());
    NovoDateTimePickerInputElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-date-time-picker-input',
                    providers: [DATE_VALUE_ACCESSOR$3],
                    template: "\n    <novo-date-picker-input\n      [ngModel]=\"datePart\"\n      (ngModelChange)=\"updateDate($event)\"\n      [start]=\"start\"\n      [end]=\"end\"\n      [disabledDateMessage]=\"disabledDateMessage\"\n      [maskOptions]=\"maskOptions\"\n      (blurEvent)=\"handleBlur($event)\"\n      (focusEvent)=\"handleFocus($event)\"\n      [disabled]=\"disabled\"\n      [weekStart]=\"weekStart\"\n    ></novo-date-picker-input>\n    <novo-time-picker-input\n      [ngModel]=\"timePart\"\n      (ngModelChange)=\"updateTime($event)\"\n      [military]=\"military\"\n      (blurEvent)=\"handleBlur($event)\"\n      (focusEvent)=\"handleFocus($event)\"\n      [disabled]=\"disabled\"\n    ></novo-time-picker-input>\n  "
                },] }
    ];
    NovoDateTimePickerInputElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoDateTimePickerInputElement.propDecorators = {
        name: [{ type: i0.Input }],
        start: [{ type: i0.Input }],
        end: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        maskOptions: [{ type: i0.Input }],
        military: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        format: [{ type: i0.Input }],
        weekStart: [{ type: i0.Input }],
        disabledDateMessage: [{ type: i0.Input }],
        blurEvent: [{ type: i0.Output }],
        focusEvent: [{ type: i0.Output }],
        changeEvent: [{ type: i0.Output }]
    };

    // NG2
    var NovoDateTimePickerModule = /** @class */ (function () {
        function NovoDateTimePickerModule() {
        }
        return NovoDateTimePickerModule;
    }());
    NovoDateTimePickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoDatePickerModule, NovoTimePickerModule, angularImask.IMaskDirectiveModule, angular2TextMask.TextMaskModule, NovoOverlayModule],
                    declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                    exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                },] }
    ];

    /**
     * Directive for a Material Design Accordion.
     */
    var NovoAccordion = /** @class */ (function (_super) {
        __extends(NovoAccordion, _super);
        function NovoAccordion() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this._hideToggle = false;
            /**
             * The display mode used for all expansion panels in the accordion. Currently two display
             * modes exist:
             *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
             *     panel at a different elevation from the reset of the accordion.
             *  flat - no spacing is placed around expanded panels, showing all panels at the same
             *     elevation.
             */
            _this.displayMode = 'default';
            return _this;
        }
        Object.defineProperty(NovoAccordion.prototype, "hideToggle", {
            /** Whether the expansion indicator should be hidden. */
            get: function () {
                return this._hideToggle;
            },
            set: function (show) {
                this._hideToggle = coercion.coerceBooleanProperty(show);
            },
            enumerable: false,
            configurable: true
        });
        return NovoAccordion;
    }(accordion.CdkAccordion));
    NovoAccordion.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-accordion',
                    exportAs: 'novoAccordion',
                    host: {
                        class: 'novo-accordion',
                    },
                },] }
    ];
    NovoAccordion.propDecorators = {
        hideToggle: [{ type: i0.Input }],
        displayMode: [{ type: i0.Input }]
    };

    /** Time and timing curve for expansion panel animations. */
    var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
    /** Animations used by the Material expansion panel. */
    var novoExpansionAnimations = {
        /** Animation that rotates the indicator arrow. */
        indicatorRotate: animations.trigger('indicatorRotate', [
            animations.state('collapsed', animations.style({ transform: 'rotate(0deg)' })),
            animations.state('expanded', animations.style({ transform: 'rotate(180deg)' })),
            animations.transition('expanded <=> collapsed', animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)),
        ]),
        /** Animation that expands and collapses the panel header height. */
        expansionHeaderHeight: animations.trigger('expansionHeight', [
            animations.state('collapsed', animations.style({
                height: '{{collapsedHeight}}',
            }), {
                params: { collapsedHeight: '48px' },
            }),
            animations.state('expanded', animations.style({
                height: '{{expandedHeight}}',
            }), {
                params: { expandedHeight: '56px' },
            }),
            animations.transition('expanded <=> collapsed', animations.group([animations.query('@indicatorRotate', animations.animateChild(), { optional: true }), animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)])),
        ]),
        /** Animation that expands and collapses the panel content. */
        bodyExpansion: animations.trigger('bodyExpansion', [
            animations.state('collapsed', animations.style({ height: '0px', visibility: 'hidden' })),
            animations.state('expanded', animations.style({ height: '*', visibility: 'visible' })),
            animations.transition('expanded <=> collapsed', animations.animate(EXPANSION_PANEL_ANIMATION_TIMING)),
        ]),
    };

    /**
     * Expansion panel content that will be rendered lazily
     * after the panel is opened for the first time.
     */
    var NovoExpansionPanelContent = /** @class */ (function () {
        function NovoExpansionPanelContent(_template) {
            this._template = _template;
        }
        return NovoExpansionPanelContent;
    }());
    NovoExpansionPanelContent.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'ng-template[matExpansionPanelContent]',
                },] }
    ];
    NovoExpansionPanelContent.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    /** Counter for generating unique element ids. */
    var uniqueId = 0;
    /**
     * `<novo-expansion-panel>`
     *
     * This component can be used as a single element to show expandable content, or as one of
     * multiple children of an element with the NovoAccordion directive attached.
     */
    var NovoExpansionPanel = /** @class */ (function (_super) {
        __extends(NovoExpansionPanel, _super);
        function NovoExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
            var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
            _this._viewContainerRef = _viewContainerRef;
            _this._hideToggle = false;
            _this._padding = true;
            _this.opened = new i0.EventEmitter();
            _this.closed = new i0.EventEmitter();
            _this.expandedChange = new i0.EventEmitter();
            /** Stream that emits for changes in `@Input` properties. */
            _this._inputChanges = new rxjs.Subject();
            /** ID for the associated header element. Used for a11y labelling. */
            _this._headerId = "novo-expansion-panel-header-" + uniqueId++;
            _this.accordion = accordion;
            return _this;
        }
        Object.defineProperty(NovoExpansionPanel.prototype, "hideToggle", {
            /** Whether the toggle indicator should be hidden. */
            get: function () {
                return this._hideToggle;
            },
            set: function (value) {
                this._hideToggle = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoExpansionPanel.prototype, "padding", {
            get: function () {
                return this._padding;
            },
            set: function (value) {
                this._padding = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        /** Whether the expansion indicator should be hidden. */
        NovoExpansionPanel.prototype._getHideToggle = function () {
            if (this.accordion) {
                return this.accordion.hideToggle;
            }
            return this.hideToggle;
        };
        /** Determines whether the expansion panel should have spacing between it and its siblings. */
        NovoExpansionPanel.prototype._hasSpacing = function () {
            if (this.accordion) {
                return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
            }
            return false;
        };
        /** Gets the expanded state string. */
        NovoExpansionPanel.prototype._getExpandedState = function () {
            return this.expanded ? 'expanded' : 'collapsed';
        };
        NovoExpansionPanel.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this._lazyContent) {
                // Render the content as soon as the panel becomes open.
                this.opened
                    .pipe(operators.startWith(null), operators.filter(function () { return _this.expanded && !_this._portal; }), operators.take(1))
                    .subscribe(function () {
                    _this._portal = new portal.TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);
                });
            }
        };
        NovoExpansionPanel.prototype.ngOnChanges = function (changes) {
            this._inputChanges.next(changes);
        };
        NovoExpansionPanel.prototype.ngOnDestroy = function () {
            _super.prototype.ngOnDestroy.call(this);
            this._inputChanges.complete();
        };
        NovoExpansionPanel.prototype._bodyAnimation = function (event) {
            var classList = event.element.classList;
            var cssClass = 'novo-expanded';
            var phaseName = event.phaseName, toState = event.toState;
            // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
            // order to prevent the cases where switching too early would cause the animation to jump.
            // Note that we do it directly on the DOM element to avoid the slight delay that comes
            // with doing it via change detection.
            if (phaseName === 'done' && toState === 'expanded') {
                classList.add(cssClass);
            }
            else if (phaseName === 'start' && toState === 'collapsed') {
                classList.remove(cssClass);
            }
        };
        return NovoExpansionPanel;
    }(accordion.CdkAccordionItem));
    NovoExpansionPanel.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-expansion-panel',
                    exportAs: 'novoExpansionPanel',
                    template: "<ng-content select=\"novo-expansion-panel-header\"></ng-content>\n<div class=\"novo-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimation($event)\"\n     (@bodyExpansion.start)=\"_bodyAnimation($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"novo-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"novo-action-row\"></ng-content>\n</div>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    animations: [novoExpansionAnimations.bodyExpansion],
                    host: {
                        class: 'novo-expansion-panel',
                        '[class.novo-expanded]': 'expanded',
                        '[class.novo-expansion-panel-spacing]': '_hasSpacing()',
                        '[class.novo-expansion-panel-padding]': 'padding',
                    },
                    styles: [".novo-expansion-panel{background:var(--background-bright,#fff);color:var(--text-main,#3d464d)}.novo-action-row{border-top-color:var(--border,#3d464d)}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:var(--text-main,#3d464d)}.novo-expansion-indicator:after,.novo-expansion-panel-header-description{color:#9e9e9e}.novo-expansion-panel-header[aria-disabled=true]{color:#9e9e9e;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title{color:inherit}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #fff}.novo-expansion-panel.novo-expanded[theme=gray],.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #9e9e9e}.novo-expansion-panel.novo-expanded[theme=bright],.novo-expansion-panel.novo-expanded[theme=offWhite]{border-top:3px solid #f7f7f7}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #dbdbdb}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=orange]{border-top:3px solid #ff6900}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #202945}.novo-expansion-panel.novo-expanded[theme=skyBlue]{border-top:3px solid #009bdf}.novo-expansion-panel.novo-expanded[theme=steel]{border-top:3px solid #5b6770}.novo-expansion-panel.novo-expanded[theme=metal]{border-top:3px solid #637893}.novo-expansion-panel.novo-expanded[theme=sand]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=silver]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=stone]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=ash]{border-top:3px solid #a0a0a0}.novo-expansion-panel.novo-expanded[theme=slate]{border-top:3px solid #707070}.novo-expansion-panel.novo-expanded[theme=onyx]{border-top:3px solid #526980}.novo-expansion-panel.novo-expanded[theme=charcoal]{border-top:3px solid #282828}.novo-expansion-panel.novo-expanded[theme=moonlight]{border-top:3px solid #1a242f}.novo-expansion-panel.novo-expanded[theme=midnight]{border-top:3px solid #202945}.novo-expansion-panel.novo-expanded[theme=darkness]{border-top:3px solid #161f27}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=info],.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=danger],.novo-expansion-panel.novo-expanded[theme=error],.novo-expansion-panel.novo-expanded[theme=negative]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=disabled]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f7f7f7}.novo-expansion-panel.novo-expanded[theme=backgroundDark]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=presentation]{border-top:3px solid #5b6770}.novo-expansion-panel.novo-expanded[theme=bullhorn]{border-top:3px solid #ff6900}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #39d}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #4b7}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #a69}.novo-expansion-panel.novo-expanded[theme=clientcontact],.novo-expansion-panel.novo-expanded[theme=contact]{border-top:3px solid #fa4}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #625}.novo-expansion-panel.novo-expanded[theme=job],.novo-expansion-panel.novo-expanded[theme=joborder]{border-top:3px solid #b56}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=corporateUser],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=invoiceStatement],.novo-expansion-panel.novo-expanded[theme=jobCode],.novo-expansion-panel.novo-expanded[theme=payableCharge],.novo-expansion-panel.novo-expanded[theme=person],.novo-expansion-panel.novo-expanded[theme=user]{border-top:3px solid #696d79}.novo-expansion-panel{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);box-sizing:content-box;display:block;margin:0 16px;transition:margin 225ms ease-in-out}.novo-expansion-panel.novo-expanded{margin:16px 4px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}"]
                },] }
    ];
    NovoExpansionPanel.ctorParameters = function () { return [
        { type: NovoAccordion, decorators: [{ type: i0.Optional }, { type: i0.Host }] },
        { type: i0.ChangeDetectorRef },
        { type: collections.UniqueSelectionDispatcher },
        { type: i0.ViewContainerRef }
    ]; };
    NovoExpansionPanel.propDecorators = {
        hideToggle: [{ type: i0.Input }],
        padding: [{ type: i0.Input }],
        opened: [{ type: i0.Output }],
        closed: [{ type: i0.Output }],
        expandedChange: [{ type: i0.Output }],
        _lazyContent: [{ type: i0.ContentChild, args: [NovoExpansionPanelContent,] }]
    };
    var NovoExpansionPanelActionRow = /** @class */ (function () {
        function NovoExpansionPanelActionRow() {
        }
        return NovoExpansionPanelActionRow;
    }());
    NovoExpansionPanelActionRow.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-action-row',
                    host: {
                        class: 'novo-action-row',
                    },
                },] }
    ];

    /**
     * `<novo-expansion-panel-header>`
     *
     * This component corresponds to the header element of an `<novo-expansion-panel>`.
     */
    var NovoExpansionPanelHeader = /** @class */ (function () {
        function NovoExpansionPanelHeader(panel, _element, 
        // private _focusMonitor: FocusMonitor,
        _changeDetectorRef) {
            var _this = this;
            this.panel = panel;
            this._element = _element;
            this._changeDetectorRef = _changeDetectorRef;
            this._parentChangeSubscription = rxjs.Subscription.EMPTY;
            // Since the toggle state depends on an @Input on the panel, we
            // need to  subscribe and trigger change detection manually.
            this._parentChangeSubscription = rxjs.merge(panel.opened, panel.closed, panel._inputChanges.pipe(operators.filter(function (changes) { return !!(changes.hideToggle || changes.disabled); }))).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
            // _focusMonitor.monitor(_element.nativeElement);
        }
        /** Toggles the expanded state of the panel. */
        NovoExpansionPanelHeader.prototype._toggle = function () {
            this.panel.toggle();
        };
        /** Gets whether the panel is expanded. */
        NovoExpansionPanelHeader.prototype._isExpanded = function () {
            return this.panel.expanded;
        };
        /** Gets the expanded state string of the panel. */
        NovoExpansionPanelHeader.prototype._getExpandedState = function () {
            return this.panel._getExpandedState();
        };
        /** Gets the panel id. */
        NovoExpansionPanelHeader.prototype._getPanelId = function () {
            return this.panel.id;
        };
        /** Gets whether the expand indicator should be shown. */
        NovoExpansionPanelHeader.prototype._showToggle = function () {
            return !this.panel.hideToggle && !this.panel.disabled;
        };
        /** Handle keydown event calling to toggle() if appropriate. */
        NovoExpansionPanelHeader.prototype._keydown = function (event) {
            switch (event.key) {
                // Toggle for space and enter keys.
                case " " /* Space */:
                case "Enter" /* Enter */:
                    event.preventDefault();
                    this._toggle();
                    break;
                default:
                    return;
            }
        };
        NovoExpansionPanelHeader.prototype.ngOnDestroy = function () {
            this._parentChangeSubscription.unsubscribe();
            // this._focusMonitor.stopMonitoring(this._element.nativeElement);
        };
        return NovoExpansionPanelHeader;
    }());
    NovoExpansionPanelHeader.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-expansion-panel-header',
                    template: "<span class=\"novo-content\">\n  <ng-content select=\"novo-panel-title\"></ng-content>\n  <ng-content select=\"novo-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"novo-expansion-indicator\"></span>\n",
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight],
                    host: {
                        class: 'novo-expansion-panel-header',
                        role: 'button',
                        '[attr.id]': 'panel._headerId',
                        '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                        '[attr.aria-controls]': '_getPanelId()',
                        '[attr.aria-expanded]': '_isExpanded()',
                        '[attr.aria-disabled]': 'panel.disabled',
                        '[class.novo-expanded]': '_isExpanded()',
                        '(click)': '_toggle()',
                        '(keydown)': '_keydown($event)',
                        '[@expansionHeight]': "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }",
                    },
                    styles: [".novo-expansion-panel-header{align-items:center;display:flex;flex-direction:row;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:none}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-description,.novo-expansion-panel-header-title{align-items:center;display:flex;flex-grow:1;gap:1rem;margin-right:16px}[dir=rtl] .novo-expansion-panel-header-description,[dir=rtl] .novo-expansion-panel-header-title{margin-left:16px;margin-right:0}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator:after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"]
                },] }
    ];
    NovoExpansionPanelHeader.ctorParameters = function () { return [
        { type: NovoExpansionPanel, decorators: [{ type: i0.Host }] },
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoExpansionPanelHeader.propDecorators = {
        expandedHeight: [{ type: i0.Input }],
        collapsedHeight: [{ type: i0.Input }]
    };
    /**
     * `<novo-panel-description>`
     *
     * This direction is to be used inside of the NovoExpansionPanelHeader component.
     */
    var NovoExpansionPanelDescription = /** @class */ (function () {
        function NovoExpansionPanelDescription() {
        }
        return NovoExpansionPanelDescription;
    }());
    NovoExpansionPanelDescription.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-panel-description',
                    host: {
                        class: 'novo-expansion-panel-header-description',
                    },
                },] }
    ];
    /**
     * `<novo-panel-title>`
     *
     * This direction is to be used inside of the NovoExpansionPanelHeader component.
     */
    var NovoExpansionPanelTitle = /** @class */ (function () {
        function NovoExpansionPanelTitle() {
        }
        return NovoExpansionPanelTitle;
    }());
    NovoExpansionPanelTitle.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-panel-title',
                    host: {
                        class: 'novo-expansion-panel-header-title',
                    },
                },] }
    ];

    var NovoExpansionModule = /** @class */ (function () {
        function NovoExpansionModule() {
        }
        return NovoExpansionModule;
    }());
    NovoExpansionModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, accordion.CdkAccordionModule, portal.PortalModule],
                    exports: [
                        NovoAccordion,
                        NovoExpansionPanel,
                        NovoExpansionPanelActionRow,
                        NovoExpansionPanelHeader,
                        NovoExpansionPanelTitle,
                        NovoExpansionPanelDescription,
                        NovoExpansionPanelContent,
                    ],
                    declarations: [
                        NovoAccordion,
                        NovoExpansionPanel,
                        NovoExpansionPanelActionRow,
                        NovoExpansionPanelHeader,
                        NovoExpansionPanelTitle,
                        NovoExpansionPanelDescription,
                        NovoExpansionPanelContent,
                    ],
                },] }
    ];

    var NovoModalParams = /** @class */ (function () {
        function NovoModalParams() {
        }
        return NovoModalParams;
    }());
    var NovoModalRef = /** @class */ (function () {
        function NovoModalRef(component, params, overlayRef) {
            this.component = component;
            this.params = params;
            this.overlayRef = overlayRef;
            this._beforeClose = new rxjs.Subject();
            this._afterClosed = new rxjs.Subject();
            this.isClosed = false;
        }
        Object.defineProperty(NovoModalRef.prototype, "onClosed", {
            // Gets a promise that is resolved when the dialog is closed.
            get: function () {
                return this._afterClosed.toPromise();
            },
            enumerable: false,
            configurable: true
        });
        NovoModalRef.prototype.afterClosed = function () {
            return this._afterClosed.asObservable();
        };
        NovoModalRef.prototype.beforeClose = function () {
            return this._beforeClose.asObservable();
        };
        NovoModalRef.prototype.close = function (result) {
            var _this = this;
            // Listen for animation 'start' events
            this.componentInstance.animationStateChanged
                .pipe(operators.filter(function (event) { return event.phaseName === 'start'; }), operators.take(1))
                .subscribe(function () {
                _this._beforeClose.next(result);
                _this._beforeClose.complete();
                _this.overlayRef.detachBackdrop();
            });
            // Listen for animation 'done' events
            this.componentInstance.animationStateChanged
                .pipe(operators.filter(function (event) { return event.phaseName === 'done' && event.toState === 'leave'; }), operators.take(1))
                .subscribe(function () {
                _this.isClosed = true;
                _this.overlayRef.dispose();
                _this._afterClosed.next(result);
                _this._afterClosed.complete();
                // Make sure to also clear the reference to the
                // component instance to avoid memory leaks
                _this.componentInstance = null;
            });
            // Start exit animation
            this.componentInstance.startExitAnimation();
        };
        return NovoModalRef;
    }());

    var zoomInOut = animations.trigger('zoomInOut', [
        animations.transition('void => *', [animations.style({ transform: 'scale3d(.3, .3, .3)' }), animations.animate(50)]),
        animations.transition('* => void', [animations.animate(50, animations.style({ transform: 'scale3d(.0, .0, .0)' }))]),
    ]);

    var NovoModalContainerComponent = /** @class */ (function () {
        function NovoModalContainerComponent(injector, modalRef) {
            this.injector = injector;
            this.modalRef = modalRef;
            this.animationStateChanged = new i0.EventEmitter();
            this.animationState = 'enter';
            this.component = new portal.ComponentPortal(modalRef.component, null, injector);
        }
        NovoModalContainerComponent.prototype.onAnimationStart = function (event) {
            this.animationStateChanged.emit(event);
        };
        NovoModalContainerComponent.prototype.onAnimationDone = function (event) {
            this.animationStateChanged.emit(event);
        };
        NovoModalContainerComponent.prototype.startExitAnimation = function () {
            this.animationState = 'leave';
        };
        return NovoModalContainerComponent;
    }());
    NovoModalContainerComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-modal-container',
                    template: "<div class=\"modal-container\" [@zoomInOut]=\"animationState\" (@zoomInOut.start)=\"onAnimationStart($event)\"\n  (@zoomInOut.done)=\"onAnimationDone($event)\">\n  <ng-template [cdkPortalOutlet]=\"component\"></ng-template>\n</div>",
                    animations: [zoomInOut],
                    styles: [":host{background:rgba(0,0,0,.25)}:host .modal-container{align-items:center;bottom:0;display:flex;justify-content:center;left:0;position:fixed;right:0;top:0;z-index:z(modal)}"]
                },] }
    ];
    NovoModalContainerComponent.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: NovoModalRef }
    ]; };
    NovoModalContainerComponent.propDecorators = {
        animationStateChanged: [{ type: i0.Output }]
    };

    // NG2
    var DEFAULT_CONFIG$1 = {
        hasBackdrop: true,
        backdropClass: 'modal-overlay-backdrop',
        panelClass: 'modal-overlay-panel',
    };
    var NovoModalService = /** @class */ (function () {
        function NovoModalService(injector, overlay) {
            this.injector = injector;
            this.overlay = overlay;
        }
        Object.defineProperty(NovoModalService.prototype, "parentViewContainer", {
            set: function (view) {
                console.warn('parentViewContainer is deprecated');
                this._parentViewContainer = view;
            },
            enumerable: false,
            configurable: true
        });
        NovoModalService.prototype.open = function (component, params) {
            if (params === void 0) { params = {}; }
            // Override default configuration
            var modalConfig = DEFAULT_CONFIG$1;
            // Returns an OverlayRef which is a PortalHost
            var overlayRef = this.createOverlay(modalConfig);
            // Instantiate remote control
            var modalRef = new NovoModalRef(component, params, overlayRef);
            var overlayComponent = this.attachModalContainer(NovoModalContainerComponent, overlayRef, modalConfig, modalRef);
            // Pass the instance of the overlay component to the remote control
            modalRef.componentInstance = overlayComponent;
            overlayRef.backdropClick().subscribe(function () { return modalRef.close(); });
            return modalRef;
        };
        NovoModalService.prototype.createOverlay = function (config) {
            var overlayConfig = this.getOverlayConfig(config);
            return this.overlay.create(overlayConfig);
        };
        NovoModalService.prototype.attachModalContainer = function (component, overlayRef, config, modalRef) {
            var injector = this.createInjector(config, modalRef);
            var containerPortal = new portal.ComponentPortal(component, null, injector);
            var containerRef = overlayRef.attach(containerPortal);
            return containerRef.instance;
        };
        NovoModalService.prototype.createInjector = function (config, modalRef) {
            var injectionTokens = new WeakMap();
            injectionTokens.set(NovoModalRef, modalRef);
            // Support backwards compatability
            injectionTokens.set(NovoModalParams, modalRef.params);
            return new portal.PortalInjector(this.injector, injectionTokens);
        };
        NovoModalService.prototype.getOverlayConfig = function (config) {
            var positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
            var overlayConfig = new i1.OverlayConfig({
                positionStrategy: positionStrategy,
                hasBackdrop: config.hasBackdrop,
                backdropClass: config.backdropClass,
                panelClass: config.panelClass,
            });
            return overlayConfig;
        };
        return NovoModalService;
    }());
    NovoModalService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NovoModalService_Factory() { return new NovoModalService(i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i1.Overlay)); }, token: NovoModalService, providedIn: "root" });
    NovoModalService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    NovoModalService.ctorParameters = function () { return [
        { type: i0.Injector },
        { type: i1.Overlay }
    ]; };

    // NG2
    var ControlConfirmModal = /** @class */ (function () {
        function ControlConfirmModal(modalRef, params, labels) {
            this.modalRef = modalRef;
            this.params = params;
            this.labels = labels;
        }
        ControlConfirmModal.prototype.close = function (result) {
            this.modalRef.close(result);
        };
        return ControlConfirmModal;
    }());
    ControlConfirmModal.decorators = [
        { type: i0.Component, args: [{
                    selector: 'control-confirm-modal',
                    template: "\n    <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n      <h1>{{ labels.confirmChangesModalMessage }}</h1>\n      <h2 *ngIf=\"!params['message']\">\n        <label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class=\"bhi-arrow-right\"></i> {{ params['newValue'] }}\n      </h2>\n      <h2 *ngIf=\"params['message']\">{{ params['message'] }}</h2>\n      <novo-button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">\n        {{ labels.cancel }}\n      </novo-button>\n      <novo-button\n        theme=\"primary\"\n        icon=\"check\"\n        (click)=\"close(true)\"\n        autofocus\n        [attr.data-automation-id]=\"'field-interaction-modal-save-' + params['key']\"\n      >\n        {{ labels.save }}\n      </novo-button>\n    </novo-notification>\n  "
                },] }
    ];
    ControlConfirmModal.ctorParameters = function () { return [
        { type: NovoModalRef },
        { type: NovoModalParams },
        { type: NovoLabelService }
    ]; };
    var ControlPromptModal = /** @class */ (function () {
        function ControlPromptModal(modalRef, params, labels) {
            this.modalRef = modalRef;
            this.params = params;
            this.labels = labels;
        }
        ControlPromptModal.prototype.close = function (result) {
            this.modalRef.close(result);
        };
        return ControlPromptModal;
    }());
    ControlPromptModal.decorators = [
        { type: i0.Component, args: [{
                    selector: 'control-prompt-modal',
                    template: "\n    <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n      <h1>{{ labels.promptModalMessage }}</h1>\n      <p *ngFor=\"let change of params['changes']\">{{ change }}</p>\n      <novo-button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">\n        {{ labels.cancel }}\n      </novo-button>\n      <novo-button\n        theme=\"primary\"\n        icon=\"check\"\n        (click)=\"close(true)\"\n        autofocus\n        [attr.data-automation-id]=\"'field-interaction-modal-yes-' + params['key']\"\n      >\n        {{ labels.yes }}\n      </novo-button>\n    </novo-notification>\n  "
                },] }
    ];
    ControlPromptModal.ctorParameters = function () { return [
        { type: NovoModalRef },
        { type: NovoModalParams },
        { type: NovoLabelService }
    ]; };

    var CustomHttpImpl = /** @class */ (function () {
        function CustomHttpImpl(http) {
            this.http = http;
            this.mapFn = function (x) { return x; };
        }
        CustomHttpImpl.prototype.get = function (url, options) {
            this.url = url;
            this.options = options;
            return this;
        };
        CustomHttpImpl.prototype.map = function (mapFn) {
            this.mapFn = mapFn;
            return this;
        };
        CustomHttpImpl.prototype.subscribe = function (resolve, reject) {
            return this.http.get(this.url, this.options).pipe(operators.map(this.mapFn)).subscribe(resolve, reject);
        };
        return CustomHttpImpl;
    }());
    var FieldInteractionApi = /** @class */ (function () {
        function FieldInteractionApi(toaster, modalService, formUtils, http, labels) {
            var _this = this;
            this.toaster = toaster;
            this.modalService = modalService;
            this.formUtils = formUtils;
            this.http = http;
            this.labels = labels;
            this._isInvokedOnInit = false;
            this.getOptionsConfig = function (args, mapper, filteredOptionsCreator, pickerConfigFormat) {
                if (filteredOptionsCreator || 'optionsUrl' in args || 'optionsUrlBuilder' in args || 'optionsPromise' in args) {
                    var format = ('format' in args && args.format) || pickerConfigFormat;
                    return Object.assign(Object.assign({ options: _this.createOptionsFunction(args, mapper, filteredOptionsCreator) }, ('emptyPickerMessage' in args && { emptyPickerMessage: args.emptyPickerMessage })), (format && { format: format }));
                }
                else if ('options' in args && Array.isArray(args.options)) {
                    return {
                        options: __spread(args.options),
                    };
                }
                else {
                    return undefined;
                }
            };
            this.createOptionsFunction = function (config, mapper, filteredOptionsCreator) { return function (query, page) {
                if ('optionsPromise' in config && config.optionsPromise) {
                    return config.optionsPromise(query, new CustomHttpImpl(_this.http), page);
                }
                else if (('optionsUrlBuilder' in config && config.optionsUrlBuilder) || ('optionsUrl' in config && config.optionsUrl)) {
                    return new Promise(function (resolve, reject) {
                        var url = 'optionsUrlBuilder' in config ? config.optionsUrlBuilder(query) : config.optionsUrl + "?filter=" + (query || '');
                        _this.http
                            .get(url)
                            .pipe(operators.map(function (results) {
                            if (mapper) {
                                return results.map(mapper);
                            }
                            return results;
                        }))
                            .subscribe(resolve, reject);
                    });
                }
                else if (filteredOptionsCreator) {
                    if ('where' in config) {
                        return filteredOptionsCreator(config.where)(query, page);
                    }
                    else {
                        return filteredOptionsCreator()(query, page);
                    }
                }
            }; };
        }
        Object.defineProperty(FieldInteractionApi.prototype, "associations", {
            get: function () {
                return this.form.hasOwnProperty('associations') ? this.form.associations : {};
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "currentEntity", {
            get: function () {
                return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "currentEntityId", {
            get: function () {
                return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "isEdit", {
            get: function () {
                return this.form.hasOwnProperty('edit') ? this.form.edit : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "isAdd", {
            get: function () {
                return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "globals", {
            get: function () {
                return this._globals;
            },
            set: function (globals) {
                this._globals = globals;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "currentKey", {
            get: function () {
                return this._currentKey;
            },
            set: function (key) {
                this._currentKey = key;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FieldInteractionApi.prototype, "isInvokedOnInit", {
            get: function () {
                return this._isInvokedOnInit;
            },
            set: function (isOnInit) {
                this._isInvokedOnInit = isOnInit;
            },
            enumerable: false,
            configurable: true
        });
        FieldInteractionApi.prototype.isActiveControlValid = function () {
            return !!this.getValue(this.currentKey);
        };
        FieldInteractionApi.prototype.getActiveControl = function () {
            return this.getControl(this.currentKey);
        };
        FieldInteractionApi.prototype.getActiveKey = function () {
            return this.currentKey;
        };
        FieldInteractionApi.prototype.getActiveValue = function () {
            return this.getValue(this.currentKey);
        };
        FieldInteractionApi.prototype.getActiveInitialValue = function () {
            return this.getInitialValue(this.currentKey);
        };
        FieldInteractionApi.prototype.getFieldSet = function (key, otherForm) {
            if (!key) {
                console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
                return null;
            }
            var form = otherForm || this.form;
            var fieldSet = form.fieldsets.find(function (fs) { return fs.key && fs.key.toLowerCase() === key.toLowerCase(); });
            if (!fieldSet) {
                console.error('[FieldInteractionAPI] - could not find a fieldset in the form by the key --', key); // tslint:disable-line
                return null;
            }
            return fieldSet;
        };
        FieldInteractionApi.prototype.getControl = function (key, otherForm) {
            if (!key) {
                console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
                return null;
            }
            var form = otherForm || this.form;
            var control = form.controls[key];
            if (!control) {
                console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
                return null;
            }
            return control;
        };
        FieldInteractionApi.prototype.getFormGroupArray = function (key, otherForm) {
            if (!key) {
                console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
                return null;
            }
            var form = otherForm || this.form;
            var formArray = form.controls[key];
            if (!formArray || !formArray.controls) {
                console.error('[FieldInteractionAPI] - could not find a form array in the form by the key --', key); // tslint:disable-line
                return null;
            }
            return formArray.controls;
        };
        FieldInteractionApi.prototype.getValue = function (key, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control) {
                return control.value;
            }
            return null;
        };
        FieldInteractionApi.prototype.getRawValue = function (key, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control) {
                return control.rawValue;
            }
            return null;
        };
        FieldInteractionApi.prototype.getInitialValue = function (key, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control) {
                return control.initialValue;
            }
            return null;
        };
        FieldInteractionApi.prototype.setValue = function (key, value, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.setValue(value, options);
                this.triggerEvent({ controlKey: key, prop: 'value', value: value }, otherForm);
            }
        };
        FieldInteractionApi.prototype.patchValue = function (key, value, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.setValue(value, options);
                this.triggerEvent({ controlKey: key, prop: 'value', value: value }, otherForm);
            }
        };
        FieldInteractionApi.prototype.setReadOnly = function (key, isReadOnly, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.setReadOnly(isReadOnly);
                this.triggerEvent({ controlKey: key, prop: 'readOnly', value: isReadOnly }, otherForm);
            }
        };
        FieldInteractionApi.prototype.setRequired = function (key, required, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.setRequired(required);
                this.triggerEvent({ controlKey: key, prop: 'required', value: required }, otherForm);
            }
        };
        FieldInteractionApi.prototype.highlight = function (key, isHighlighted, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.highlighted = isHighlighted;
                this.triggerEvent({ controlKey: key, prop: 'highlight', value: isHighlighted }, otherForm);
            }
        };
        FieldInteractionApi.prototype.hide = function (key, clearValue, otherForm) {
            if (clearValue === void 0) { clearValue = true; }
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.hide(clearValue);
                this.disable(key, { emitEvent: false });
                this.triggerEvent({ controlKey: key, prop: 'hidden', value: true }, otherForm);
            }
            return control;
        };
        FieldInteractionApi.prototype.show = function (key, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.show();
                this.enable(key, { emitEvent: false });
                this.triggerEvent({ controlKey: key, prop: 'hidden', value: false }, otherForm);
            }
        };
        FieldInteractionApi.prototype.hideFieldSetHeader = function (key) {
            var fieldSet = this.getFieldSet(key);
            if (fieldSet) {
                fieldSet.hidden = true;
            }
        };
        FieldInteractionApi.prototype.showFieldSetHeader = function (key) {
            var fieldSet = this.getFieldSet(key);
            if (fieldSet) {
                fieldSet.hidden = false;
            }
        };
        FieldInteractionApi.prototype.disable = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.disable(options);
                this.triggerEvent({ controlKey: key, prop: 'readOnly', value: true }, otherForm);
            }
        };
        FieldInteractionApi.prototype.enable = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.enable(options);
                this.triggerEvent({ controlKey: key, prop: 'readOnly', value: false }, otherForm);
            }
        };
        FieldInteractionApi.prototype.markAsInvalid = function (key, validationMessage, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control) {
                if (control && !control.restrictFieldInteractions) {
                    control.markAsInvalid(validationMessage);
                    this.triggerEvent({ controlKey: key, prop: 'errors', value: validationMessage }, otherForm);
                }
            }
        };
        FieldInteractionApi.prototype.markAsValid = function (key, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control) {
                if (control && !control.restrictFieldInteractions) {
                    control.markAsValid();
                    this.triggerEvent({ controlKey: key, prop: 'errors', value: null }, otherForm);
                }
            }
        };
        FieldInteractionApi.prototype.markAsDirty = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.markAsDirty(options);
            }
        };
        FieldInteractionApi.prototype.markAsPending = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.markAsPending(options);
            }
        };
        FieldInteractionApi.prototype.markAsPristine = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.markAsPristine(options);
            }
        };
        FieldInteractionApi.prototype.markAsTouched = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.markAsTouched(options);
            }
        };
        FieldInteractionApi.prototype.markAsUntouched = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.markAsUntouched(options);
            }
        };
        FieldInteractionApi.prototype.updateValueAndValidity = function (key, options, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.updateValueAndValidity(options);
            }
        };
        FieldInteractionApi.prototype.displayToast = function (toastConfig) {
            if (this.toaster) {
                this.toaster.alert(toastConfig);
            }
        };
        FieldInteractionApi.prototype.displayTip = function (key, tip, icon, allowDismiss, sanitize, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.tipWell = {
                    tip: tip,
                    icon: icon,
                    button: allowDismiss,
                    sanitize: sanitize !== false,
                };
                this.triggerEvent({ controlKey: key, prop: 'tipWell', value: tip }, otherForm);
            }
        };
        FieldInteractionApi.prototype.clearTip = function (key, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.tipWell = null;
                this.triggerEvent({ controlKey: key, prop: 'tipWell', value: null }, otherForm);
            }
        };
        FieldInteractionApi.prototype.setTooltip = function (key, tooltip, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control.tooltip = tooltip;
                if (tooltip.length >= 40 && tooltip.length <= 400) {
                    control.tooltipSize = 'large';
                    control.tooltipPreline = true;
                }
                else if (tooltip.length > 400) {
                    control.tooltipSize = 'extra-large';
                }
                this.triggerEvent({ controlKey: key, prop: 'tooltip', value: tooltip }, otherForm);
            }
        };
        FieldInteractionApi.prototype.confirmChanges = function (key, message) {
            var _this = this;
            var history = this.getProperty(key, 'valueHistory');
            var oldValue = history[history.length - 2];
            var newValue = this.getValue(key);
            var label = this.getProperty(key, 'label');
            document.activeElement.blur();
            return this.modalService.open(ControlConfirmModal, { oldValue: oldValue, newValue: newValue, label: label, message: message, key: key }).onClosed.then(function (result) {
                if (!result) {
                    _this.setValue(key, oldValue, { emitEvent: false });
                }
                return true;
            });
        };
        FieldInteractionApi.prototype.promptUser = function (key, changes) {
            document.activeElement.blur();
            return this.modalService.open(ControlPromptModal, { changes: changes, key: key }).onClosed;
        };
        FieldInteractionApi.prototype.setProperty = function (key, prop, value, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                control[prop] = value;
                this.triggerEvent({ controlKey: key, prop: prop, value: value }, otherForm);
            }
        };
        FieldInteractionApi.prototype.getProperty = function (key, prop, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                return control[prop];
            }
            return null;
        };
        FieldInteractionApi.prototype.isValueEmpty = function (key) {
            var value = this.getValue(key);
            return Helpers.isEmpty(value);
        };
        FieldInteractionApi.prototype.isValueBlank = function (key) {
            var value = this.getValue(key);
            return Helpers.isBlank(value);
        };
        FieldInteractionApi.prototype.hasField = function (key, otherForm) {
            var form = otherForm || this.form;
            return !!form.controls[key];
        };
        FieldInteractionApi.prototype.addStaticOption = function (key, newOption, otherForm) {
            var control = this.getControl(key, otherForm);
            var optionToAdd = newOption;
            var isUnique = true;
            if (control && !control.restrictFieldInteractions) {
                var currentOptions = this.getProperty(key, 'options');
                if (!currentOptions || !currentOptions.length) {
                    var config = this.getProperty(key, 'config');
                    if (config) {
                        currentOptions = config.options;
                        if (currentOptions && Array.isArray(currentOptions)) {
                            if (currentOptions[0].value && !optionToAdd.value) {
                                optionToAdd = { value: newOption, label: newOption };
                            }
                            config.options = __spread(currentOptions, [optionToAdd]);
                            this.setProperty(key, 'config', config);
                        }
                    }
                }
                else {
                    if (currentOptions[0].value && !optionToAdd.value) {
                        optionToAdd = { value: newOption, label: newOption };
                    }
                    // Ensure duplicate values are not added
                    currentOptions.forEach(function (option) {
                        if ((option.value && option.value === optionToAdd.value) || option === optionToAdd) {
                            isUnique = false;
                        }
                    });
                    if (isUnique) {
                        this.setProperty(key, 'options', __spread(currentOptions, [optionToAdd]));
                    }
                }
                if (isUnique) {
                    this.triggerEvent({ controlKey: key, prop: 'options', value: __spread(currentOptions, [optionToAdd]) }, otherForm);
                }
            }
        };
        FieldInteractionApi.prototype.removeStaticOption = function (key, optionToRemove, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                var currentOptions = this.getProperty(key, 'options', otherForm);
                if (!currentOptions || !currentOptions.length) {
                    var config = this.getProperty(key, 'config', otherForm);
                    if (config) {
                        currentOptions = config.options;
                        if (currentOptions && Array.isArray(currentOptions)) {
                            var index_1 = -1;
                            currentOptions.forEach(function (opt, i) {
                                if (opt.value || opt.label) {
                                    if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                        index_1 = i;
                                    }
                                }
                                else {
                                    if (opt === optionToRemove) {
                                        index_1 = i;
                                    }
                                }
                            });
                            if (index_1 !== -1) {
                                currentOptions.splice(index_1, 1);
                            }
                            config.options = __spread(currentOptions);
                            this.setProperty(key, 'config', config, otherForm);
                        }
                    }
                }
                else {
                    var index_2 = -1;
                    currentOptions.forEach(function (opt, i) {
                        if (opt.value || opt.label) {
                            if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                index_2 = i;
                            }
                        }
                        else {
                            if (opt === optionToRemove) {
                                index_2 = i;
                            }
                        }
                    });
                    if (index_2 !== -1) {
                        currentOptions.splice(index_2, 1);
                    }
                    this.setProperty(key, 'options', __spread(currentOptions), otherForm);
                }
                this.triggerEvent({ controlKey: key, prop: 'options', value: control.options }, otherForm);
            }
        };
        FieldInteractionApi.prototype.modifyPickerConfig = function (key, config, mapper) {
            // call another method to avoid a breaking change but still enable stricter types
            this.mutatePickerConfig(key, config, mapper);
        };
        FieldInteractionApi.prototype.mutatePickerConfig = function (key, args, mapper, otherForm) {
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                var _a = control.config, minSearchLength = _a.minSearchLength, enableInfiniteScroll = _a.enableInfiniteScroll, filteredOptionsCreator = _a.filteredOptionsCreator, format = _a.format, getLabels = _a.getLabels, emptyPickerMessage = _a.emptyPickerMessage;
                var optionsConfig = this.getOptionsConfig(args, mapper, filteredOptionsCreator, format);
                var newConfig = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (emptyPickerMessage && { emptyPickerMessage: emptyPickerMessage })), (Number.isInteger(minSearchLength) && { minSearchLength: minSearchLength })), (enableInfiniteScroll && { enableInfiniteScroll: enableInfiniteScroll })), (filteredOptionsCreator && { filteredOptionsCreator: filteredOptionsCreator })), (getLabels && { getLabels: getLabels })), (optionsConfig && optionsConfig)), { resultsTemplate: control.config.resultsTemplate || ('resultsTemplateType' in args && this.getAppropriateResultsTemplate(args.resultsTemplateType)) });
                this.setProperty(key, 'config', newConfig);
                this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: args }, otherForm);
            }
        };
        FieldInteractionApi.prototype.addPropertiesToPickerConfig = function (key, properties, otherForm) {
            var control = this.getControl(key, otherForm);
            if (!control || control.restrictFieldInteractions) {
                return;
            }
            var config = Object.assign(Object.assign({}, control.config), properties);
            this.setProperty(key, 'config', config);
            this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: properties }, otherForm);
        };
        FieldInteractionApi.prototype.getAppropriateResultsTemplate = function (resultsTemplateType) {
            switch (resultsTemplateType) {
                case 'entity-picker':
                    return EntityPickerResults;
                default:
                    return undefined;
            }
        };
        FieldInteractionApi.prototype.setLoading = function (key, loading, otherForm) {
            var _this = this;
            var form = otherForm || this.form;
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                if (loading) {
                    form.controls[key].fieldInteractionloading = true;
                    control.setErrors({ loading: true });
                    // History
                    clearTimeout(this.asyncBlockTimeout);
                    this.asyncBlockTimeout = setTimeout(function () {
                        _this.setLoading(key, false);
                        _this.displayTip(key, _this.labels.asyncFailure, 'info', false);
                        _this.setProperty(key, '_displayedAsyncFailure', true);
                    }, 10000);
                }
                else {
                    form.controls[key].fieldInteractionloading = false;
                    clearTimeout(this.asyncBlockTimeout);
                    control.setErrors({ loading: null });
                    control.updateValueAndValidity({ emitEvent: false });
                    if (this.getProperty(key, '_displayedAsyncFailure')) {
                        this.setProperty(key, 'tipWell', null);
                    }
                }
                this.triggerEvent({ controlKey: key, prop: 'loading', value: loading }, otherForm);
            }
        };
        FieldInteractionApi.prototype.addControl = function (key, metaForNewField, position, initialValue, otherForm) {
            if (position === void 0) { position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD; }
            if (!metaForNewField.key && !metaForNewField.name) {
                console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
                return null;
            }
            if (!metaForNewField.key) {
                // If key is not explicitly declared, use name as key
                metaForNewField.key = metaForNewField.name;
            }
            var form = otherForm || this.form;
            if (form.controls[metaForNewField.key]) {
                // Field is already on the form
                return null;
            }
            var control = form.controls[key];
            var fieldsetIndex;
            var controlIndex;
            if (control) {
                fieldsetIndex = -1;
                controlIndex = -1;
                form.fieldsets.forEach(function (fieldset, fi) {
                    fieldset.controls.forEach(function (fieldsetControl, ci) {
                        if (fieldsetControl.key === key) {
                            fieldsetIndex = fi;
                            controlIndex = ci;
                        }
                    });
                });
                // Change the position of the newly added field
                switch (position) {
                    case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                        // Adding field above active field
                        // index can stay the same
                        break;
                    case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                        // Adding field below active field
                        controlIndex += 1;
                        break;
                    case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                        // Adding field to the top of the form
                        controlIndex = 0;
                        fieldsetIndex = 0;
                        break;
                    case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                        // Adding field to the bottom of the form
                        fieldsetIndex = form.fieldsets.length - 1;
                        controlIndex = form.fieldsets[fieldsetIndex].controls.length;
                        break;
                    default:
                        break;
                }
                if (fieldsetIndex !== -1 && controlIndex !== -1) {
                    var novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                    novoControl.hidden = false;
                    var formControl = new NovoFormControl(initialValue, novoControl);
                    form.addControl(novoControl.key, formControl);
                    form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
                    this.triggerEvent({ controlKey: key, prop: 'addControl', value: formControl }, otherForm);
                }
            }
        };
        FieldInteractionApi.prototype.removeControl = function (key, otherForm) {
            var form = otherForm || this.form;
            if (!form.controls[key]) {
                // Field is not on the form
                return null;
            }
            var control = this.getControl(key, otherForm);
            if (control && !control.restrictFieldInteractions) {
                var fieldsetIndex_1 = -1;
                var controlIndex_1 = -1;
                form.fieldsets.forEach(function (fieldset, fi) {
                    fieldset.controls.forEach(function (fieldsetControl, ci) {
                        if (fieldsetControl.key === key) {
                            fieldsetIndex_1 = fi;
                            controlIndex_1 = ci;
                        }
                    });
                });
                if (fieldsetIndex_1 !== -1 && controlIndex_1 !== -1) {
                    form.removeControl(key);
                    form.fieldsets[fieldsetIndex_1].controls.splice(controlIndex_1, 1);
                    this.triggerEvent({ controlKey: key, prop: 'removeControl', value: key }, otherForm);
                }
            }
        };
        FieldInteractionApi.prototype.debounce = function (func, wait) {
            if (wait === void 0) { wait = 50; }
            var h;
            clearTimeout(h);
            h = setTimeout(function () { return func(); }, wait);
        };
        /**
         * Allows traversing nested forms by accessing the parent form.
         *
         * @param otherForm optional parameter for getting the parent of a different form.
         * If not provided will default to the parent of the current form.
         */
        FieldInteractionApi.prototype.getParent = function (otherForm) {
            var form = otherForm || this.form;
            return form.parent;
        };
        /**
         * The index is assigned as a property on the form's associations object when the form is part of a NovoControlGroup array.
         *
         * @param otherForm optional parameter for getting the index of a different form. If not provided will default to the current form.
         * @returns the index if it exists for the current or form, or null otherwise.
         */
        FieldInteractionApi.prototype.getIndex = function (otherForm) {
            var form = otherForm || this.form;
            return form.associations && form.associations.hasOwnProperty('index') ? form.associations.index : null;
        };
        FieldInteractionApi.prototype.triggerEvent = function (event, otherForm) {
            var form = otherForm || this.form;
            if (form && form.fieldInteractionEvents) {
                form.fieldInteractionEvents.emit(event);
            }
        };
        return FieldInteractionApi;
    }());
    FieldInteractionApi.FIELD_POSITIONS = {
        ABOVE_FIELD: 'ABOVE_FIELD',
        BELOW_FIELD: 'BELOW_FIELD',
        TOP_OF_FORM: 'TOP_OF_FORM',
        BOTTOM_OF_FORM: 'BOTTOM_OF_FORM',
    };
    FieldInteractionApi.decorators = [
        { type: i0.Injectable }
    ];
    FieldInteractionApi.ctorParameters = function () { return [
        { type: NovoToastService },
        { type: NovoModalService },
        { type: FormUtils },
        { type: http.HttpClient },
        { type: NovoLabelService }
    ]; };

    var NovoAutoSize = /** @class */ (function () {
        function NovoAutoSize(element) {
            this.element = element;
        }
        NovoAutoSize.prototype.onInput = function (textArea) {
            this.adjust();
        };
        NovoAutoSize.prototype.ngAfterContentInit = function () {
            var _this = this;
            setTimeout(function () {
                _this.adjust();
            });
        };
        NovoAutoSize.prototype.adjust = function () {
            var nativeElement = this.element.nativeElement;
            nativeElement.style.height = nativeElement.style.minHeight;
            nativeElement.style.height = nativeElement.scrollHeight + "px";
        };
        return NovoAutoSize;
    }());
    NovoAutoSize.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'textarea[autosize]',
                },] }
    ];
    NovoAutoSize.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoAutoSize.propDecorators = {
        onInput: [{ type: i0.HostListener, args: ['input', ['$event.target'],] }]
    };
    // undo all template context references!
    var NovoControlElement = /** @class */ (function (_super) {
        __extends(NovoControlElement, _super);
        function NovoControlElement(element, labels, dateFormatService, fieldInteractionApi, templateService, changeDetectorRef, locale) {
            if (locale === void 0) { locale = 'en-US'; }
            var _this = _super.call(this, element) || this;
            _this.labels = labels;
            _this.dateFormatService = dateFormatService;
            _this.fieldInteractionApi = fieldInteractionApi;
            _this.templateService = templateService;
            _this.changeDetectorRef = changeDetectorRef;
            _this.locale = locale;
            _this.condensed = false;
            _this.autoFocus = false;
            _this.change = new i0.EventEmitter();
            _this.edit = new i0.EventEmitter();
            _this.save = new i0.EventEmitter();
            _this.delete = new i0.EventEmitter();
            _this.upload = new i0.EventEmitter();
            _this.formattedValue = '';
            _this.maxLengthMet = false;
            _this.itemCount = 0;
            _this._blurEmitter = new i0.EventEmitter();
            _this._focusEmitter = new i0.EventEmitter();
            _this._focused = false;
            _this._enteredText = '';
            _this._showCount = false;
            _this.maxLengthMetErrorfields = [];
            _this.templates = {};
            _this.loading = false;
            return _this;
        }
        Object.defineProperty(NovoControlElement.prototype, "onBlur", {
            get: function () {
                return this._blurEmitter.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "onFocus", {
            get: function () {
                return this._focusEmitter.asObservable();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "maxlengthMetField", {
            get: function () {
                var _this = this;
                if (this.maxLengthMetErrorfields && this.maxLengthMetErrorfields.length) {
                    return this.maxLengthMetErrorfields.find(function (field) { return field === _this.focusedField; }) || '';
                }
                else {
                    return '';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "maxlengthErrorField", {
            get: function () {
                var _this = this;
                if (this.errors && this.errors.maxlengthFields && this.errors.maxlengthFields.length) {
                    return this.errors.maxlengthFields.find(function (field) { return field === _this.focusedField; }) || '';
                }
                else {
                    return '';
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "showFieldMessage", {
            get: function () {
                return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "showMaxLengthMetMessage", {
            get: function () {
                return ((this.isDirty && this.maxLengthMet && this.focused && (!this.errors || (this.errors && !this.errors.maxlength))) ||
                    (this.isDirty &&
                        this.maxlengthMetField &&
                        this.focused &&
                        (!this.errors || (this.errors && !this.errors.maxlengthFields.includes(this.maxlengthMetField)))));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "showErrorState", {
            get: function () {
                return ((this.isDirty && this.errors) ||
                    (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields) ||
                    (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields && this.maxlengthErrorField));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "showCount", {
            get: function () {
                var MAX_LENGTH_CONTROL_TYPES = ['textbox', 'picker', 'text-area'];
                var charCount = this.focused &&
                    !!this.form.controls[this.control.key].maxlength &&
                    MAX_LENGTH_CONTROL_TYPES.includes(this.form.controls[this.control.key].controlType);
                return this._showCount || charCount;
            },
            set: function (value) {
                this._showCount = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "showMessages", {
            get: function () {
                return (this.showCount ||
                    !Helpers.isEmpty(this.form.controls[this.control.key].warning) ||
                    !Helpers.isEmpty(this.form.controls[this.control.key].description));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "decimalSeparator", {
            get: function () {
                return new Intl.NumberFormat(this.locale).format(1.2)[1];
            },
            enumerable: false,
            configurable: true
        });
        NovoControlElement.prototype.ngAfterViewInit = function () {
            var _this = this;
            var DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
            if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
                setTimeout(function () {
                    var input = _this.element.nativeElement.querySelector('input');
                    if (input) {
                        input.focus();
                    }
                });
            }
        };
        NovoControlElement.prototype.ngAfterContentInit = function () {
            var e_1, _a;
            var _this = this;
            // Subscribe to control interactions
            if (this.control.interactions && !this.form.controls[this.control.key].restrictFieldInteractions) {
                var _loop_1 = function (interaction) {
                    switch (interaction.event) {
                        case 'blur':
                            this_1.valueChangeSubscription = this_1.onBlur.pipe(operators.debounceTime(300)).subscribe(function () {
                                if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                    _this.executeInteraction(interaction);
                                }
                            });
                            break;
                        case 'focus':
                            this_1.valueChangeSubscription = this_1.onFocus.pipe(operators.debounceTime(300)).subscribe(function () {
                                if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                    _this.executeInteraction(interaction);
                                }
                            });
                            break;
                        case 'change':
                            this_1.valueChangeSubscription = this_1.form.controls[this_1.control.key].valueChanges.pipe(operators.debounceTime(300)).subscribe(function () {
                                if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                    _this.executeInteraction(interaction);
                                }
                            });
                            break;
                        case 'init':
                            interaction.invokeOnInit = true;
                            break;
                        default:
                            break;
                    }
                    if (interaction.invokeOnInit) {
                        if (!this_1.form.controls[this_1.control.key].restrictFieldInteractions) {
                            this_1.executeInteraction(interaction, true);
                        }
                    }
                };
                var this_1 = this;
                try {
                    for (var _b = __values(this.control.interactions), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var interaction = _c.value;
                        _loop_1(interaction);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            setTimeout(function () {
                _this.templates = _this.templateService.getAll();
                _this.loading = false;
                _this.changeDetectorRef.markForCheck();
            });
        };
        NovoControlElement.prototype.ngOnInit = function () {
            var _this = this;
            this.loading = true;
            // Make sure to initially format the time controls
            if (this.control && this.form.controls[this.control.key].value) {
                if (this.form.controls[this.control.key].controlType === 'textbox' ||
                    this.form.controls[this.control.key].controlType === 'text-area') {
                    this.itemCount = this.form.controls[this.control.key].value.length;
                }
            }
            if (this.control) {
                // Listen to clear events
                this.forceClearSubscription = this.control.forceClear.subscribe(function () {
                    _this.clearValue();
                });
                // For Asynchronous validations
                this.statusChangeSubscription = this.form.controls[this.control.key].statusChanges.subscribe(function (validity) {
                    _this.form.controls[_this.control.key] = _this.templateContext.$implicit;
                    if (validity !== 'PENDING' && _this.form.updateValueAndValidity) {
                        _this.form.updateValueAndValidity();
                    }
                });
            }
            this.templateContext = {
                $implicit: this.form.controls[this.control.key],
                methods: {
                    restrictKeys: this.restrictKeys.bind(this),
                    emitChange: this.emitChange.bind(this),
                    handleFocus: this.handleFocus.bind(this),
                    handlePercentChange: this.handlePercentChange.bind(this),
                    handleBlur: this.handleBlur.bind(this),
                    handleTextAreaInput: this.handleTextAreaInput.bind(this),
                    handleEdit: this.handleEdit.bind(this),
                    handleSave: this.handleSave.bind(this),
                    handleDelete: this.handleDelete.bind(this),
                    handleUpload: this.handleUpload.bind(this),
                    modelChange: this.modelChange.bind(this),
                    modelChangeWithRaw: this.modelChangeWithRaw.bind(this),
                    handleAddressChange: this.handleAddressChange.bind(this),
                    handleTyping: this.handleTyping.bind(this),
                    updateValidity: this.updateValidity.bind(this),
                    toggleActive: this.toggleActive.bind(this),
                    validateIntegerInput: this.validateIntegerInput.bind(this),
                    validateNumberOnBlur: this.validateNumberOnBlur.bind(this),
                },
                form: this.form,
            };
            this.templateContext.$implicit.tooltipPosition = this.tooltipPosition;
            this.templateContext.$implicit.tooltip = this.tooltip;
            this.templateContext.$implicit.tooltipSize = this.tooltipSize;
            this.templateContext.$implicit.tooltipPreline = this.tooltipPreline;
            this.templateContext.$implicit.removeTooltipArrow = this.removeTooltipArrow;
            this.templateContext.$implicit.startupFocus = this.form.controls[this.control.key].startupFocus;
            this.templateContext.$implicit.fileBrowserImageUploadUrl = this.form.controls[this.control.key].fileBrowserImageUploadUrl;
            this.templateContext.$implicit.minimal = this.form.controls[this.control.key].minimal;
            this.templateContext.$implicit.currencyFormat = this.form.controls[this.control.key].currencyFormat;
            this.templateContext.$implicit.percentValue = this.form.controls[this.control.key].percentValue;
            this.templateContext.$implicit.config = this.form.controls[this.control.key].config;
            if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
                if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                    this.templateContext.$implicit.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
                this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe(function (value) {
                    if (!Helpers.isEmpty(value) && !isNaN(value)) {
                        _this.templateContext.$implicit.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                    }
                    else if (Helpers.isEmpty(value)) {
                        _this.templateContext.$implicit.percentValue = undefined;
                    }
                });
            }
        };
        NovoControlElement.prototype.ngOnDestroy = function () {
            // Unsubscribe from control interactions
            if (this.valueChangeSubscription) {
                this.valueChangeSubscription.unsubscribe();
            }
            // if (this.dateChangeSubscription) {
            //     this.dateChangeSubscription.unsubscribe();
            // }
            if (this.forceClearSubscription) {
                // Un-listen for clear events
                this.forceClearSubscription.unsubscribe();
            }
            if (this.percentChangeSubscription) {
                // Un-listen for clear events
                this.percentChangeSubscription.unsubscribe();
            }
            if (this.dateChangeSubscription) {
                this.dateChangeSubscription.unsubscribe();
            }
            if (this.statusChangeSubscription) {
                this.statusChangeSubscription.unsubscribe();
            }
            _super.prototype.ngOnDestroy.call(this);
        };
        Object.defineProperty(NovoControlElement.prototype, "errors", {
            get: function () {
                return this.form.controls[this.control.key].errors;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "isValid", {
            get: function () {
                return this.form.controls[this.control.key].valid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "isDirty", {
            get: function () {
                return this.form.controls[this.control.key].dirty || this.control.dirty;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "hasValue", {
            get: function () {
                return !Helpers.isEmpty(this.form.value[this.control.key]);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "focused", {
            get: function () {
                return this._focused;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "tooltip", {
            get: function () {
                return this.form.controls[this.control.key].tooltip;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "tooltipPosition", {
            get: function () {
                if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
                    return 'right';
                }
                return this.form.controls[this.control.key].tooltipPosition;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "tooltipSize", {
            get: function () {
                if (Helpers.isBlank(this.form.controls[this.control.key].tooltipSize)) {
                    return '';
                }
                return this.form.controls[this.control.key].tooltipSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "tooltipPreline", {
            get: function () {
                if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPreline)) {
                    return false;
                }
                return this.form.controls[this.control.key].tooltipPreline;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "removeTooltipArrow", {
            get: function () {
                if (Helpers.isBlank(this.form.controls[this.control.key].removeTooltipArrow)) {
                    return false;
                }
                return this.form.controls[this.control.key].removeTooltipArrow;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "alwaysActive", {
            get: function () {
                // Controls that have the label active if there is any user entered text in the field
                if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
                    return true;
                }
                if (this.form.controls[this.control.key].alwaysActive) {
                    return true;
                }
                // Controls that always have the label active
                return ([
                    'tiles',
                    'checklist',
                    'checkbox',
                    'date',
                    'time',
                    'date-time',
                    'address',
                    'file',
                    'editor',
                    'ace-editor',
                    'radio',
                    'text-area',
                    'quick-note',
                    'date',
                    'custom',
                    'switch',
                    'native-select',
                    'native-input',
                ].indexOf(this.form.controls[this.control.key].controlType) !== -1);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlElement.prototype, "requiresExtraSpacing", {
            get: function () {
                // Chips
                if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
                    return true;
                }
                return false;
            },
            enumerable: false,
            configurable: true
        });
        NovoControlElement.prototype.executeInteraction = function (interaction, isInvokedOnInit) {
            var _this = this;
            if (isInvokedOnInit === void 0) { isInvokedOnInit = false; }
            if (interaction.script && Helpers.isFunction(interaction.script)) {
                setTimeout(function () {
                    _this.fieldInteractionApi.form = _this.form;
                    _this.fieldInteractionApi.currentKey = _this.control.key;
                    _this.fieldInteractionApi.isInvokedOnInit = isInvokedOnInit;
                    try {
                        interaction.script(_this.fieldInteractionApi, _this.control.key);
                    }
                    catch (err) {
                        console.info('Field Interaction Error!', _this.control.key); // tslint:disable-line
                        console.error(err); // tslint:disable-line
                    }
                });
            }
        };
        NovoControlElement.prototype.handleTyping = function (event) {
            this._focused = event && event.length;
            this._enteredText = event;
        };
        NovoControlElement.prototype.handleFocus = function (event, field) {
            this._focused = true;
            this.focusedField = field;
            if (!Helpers.isBlank(this.characterCountField) && this.characterCountField === field) {
                this.showCount = true;
            }
            else if (this.form.controls[this.control.key].controlType === 'address' &&
                field &&
                !Helpers.isEmpty(this.form.value[this.control.key]) &&
                !Helpers.isBlank(this.form.value[this.control.key][field])) {
                this.handleAddressChange({ value: this.form.value[this.control.key][field], field: field });
            }
            this._focusEmitter.emit(event);
        };
        NovoControlElement.prototype.handleBlur = function (event) {
            this._focused = false;
            this.focusedField = '';
            this.showCount = false;
            this._blurEmitter.emit(event);
        };
        NovoControlElement.prototype.clearValue = function () {
            this.form.controls[this.control.key].setValue(null);
            this.formattedValue = null;
        };
        NovoControlElement.prototype.handleTextAreaInput = function (event) {
            this.emitChange(event);
            this.restrictKeys(event);
        };
        NovoControlElement.prototype.checkMaxLength = function (event) {
            if (this.control && this.form.controls[this.control.key].maxlength) {
                this.itemCount = event.target.value.length;
                this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
            }
        };
        NovoControlElement.prototype.modelChangeWithRaw = function (event) {
            if (Helpers.isEmpty(event.value)) {
                this._focused = false;
                this._enteredText = '';
            }
            if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].maxlength) {
                this.itemCount = event.value ? event.value.length : 0;
                this.maxLengthMet = this.itemCount >= this.form.controls[this.control.key].maxlength ? true : false;
            }
            this.form.controls[this.control.key].rawValue = event.rawValue;
            this.change.emit(event.value);
        };
        NovoControlElement.prototype.modelChange = function (value) {
            if (Helpers.isEmpty(value)) {
                this._focused = false;
                this._enteredText = '';
            }
            this.change.emit(value);
        };
        NovoControlElement.prototype.validateNumberOnBlur = function (event) {
            this._focused = false;
            this.focusedField = '';
            this.showCount = false;
            if (this.form.controls[this.control.key].subType === 'number') {
                this.validateIntegerInput();
            }
            this._blurEmitter.emit(event);
        };
        NovoControlElement.prototype.validateIntegerInput = function () {
            var NUMBERS_ONLY = /^[\d\-]\d*$/;
            if (this.form.controls[this.control.key].value && !NUMBERS_ONLY.test(this.form.controls[this.control.key].value)) {
                this.form.controls[this.control.key].markAsInvalid(this.labels.invalidIntegerInput + " " + this.form.controls[this.control.key].label.toUpperCase());
            }
        };
        NovoControlElement.prototype.restrictKeys = function (event) {
            var NUMBERS_ONLY = /[0-9\-]/;
            var NUMBERS_WITH_DECIMAL_DOT = /[0-9\.\-]/;
            var NUMBERS_WITH_DECIMAL_DOT_AND_COMMA = /[0-9\.\,\-]/;
            var UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
            var key = event.key;
            // Numbers or numbers and decimal characters only
            if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
                event.preventDefault();
            }
            else if (['currency', 'float', 'percentage'].includes(this.form.controls[this.control.key].subType) &&
                !((this.decimalSeparator === '.' && NUMBERS_WITH_DECIMAL_DOT.test(key)) ||
                    (this.decimalSeparator === ',' && NUMBERS_WITH_DECIMAL_DOT_AND_COMMA.test(key)) ||
                    UTILITY_KEYS.includes(key))) {
                event.preventDefault();
            }
            // Max Length
            if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
                event.preventDefault();
            }
        };
        NovoControlElement.prototype.handlePercentChange = function (event) {
            var value = event.target.value || event.data;
            var percent = Helpers.isEmpty(value) || isNaN(value) ? value : Number((Number(value) / 100).toFixed(6).replace(/\.?0*$/, ''));
            if (!Helpers.isEmpty(percent)) {
                this.change.emit(percent);
                this.form.controls[this.control.key].setValue(percent);
            }
            else {
                this.change.emit(null);
                this.form.controls[this.control.key].setValue(null);
            }
        };
        NovoControlElement.prototype.handleTabForPickers = function (event) {
            if (this.active && event && event.key) {
                if (event.key === "Escape" /* Escape */ || event.key === "Tab" /* Tab */) {
                    this.toggleActive(event, false);
                }
            }
        };
        NovoControlElement.prototype.emitChange = function (value) {
            this.change.emit(value);
            this.checkMaxLength(value);
        };
        NovoControlElement.prototype.handleEdit = function (value) {
            this.edit.emit(value);
        };
        NovoControlElement.prototype.handleSave = function (value) {
            this.save.emit(value);
        };
        NovoControlElement.prototype.handleDelete = function (value) {
            this.delete.emit(value);
        };
        NovoControlElement.prototype.handleUpload = function (value) {
            this.upload.emit(value);
        };
        NovoControlElement.prototype.handleAddressChange = function (data) {
            if (data &&
                !Helpers.isBlank(data.value) &&
                data.field &&
                this.control.config[data.field] &&
                !Helpers.isEmpty(this.control.config[data.field].maxlength)) {
                this.itemCount = data.value.length;
                this.characterCountField = data.field;
                this.maxLength = this.control.config[data.field].maxlength;
                this.showCount = true;
                if (this.maxLength === this.itemCount) {
                    this.maxLengthMetErrorfields.push(data.field);
                }
                else {
                    this.maxLengthMetErrorfields = this.maxLengthMetErrorfields.filter(function (field) { return field !== data.field; });
                }
            }
        };
        NovoControlElement.prototype.updateValidity = function (shouldEventBeEmitted) {
            var emitEvent = shouldEventBeEmitted ? true : false;
            this.form.controls[this.control.key].updateValueAndValidity({ emitEvent: emitEvent });
        };
        return NovoControlElement;
    }(OutsideClick));
    NovoControlElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-control',
                    template: "\n    <div\n      class=\"novo-control-container\"\n      [hidden]=\"\n        form.controls[control.key].hidden ||\n        form.controls[control.key].type === 'hidden' ||\n        form.controls[control.key].controlType === 'hidden'\n      \"\n    >\n      <!--Encrypted Field-->\n      <span [tooltip]=\"labels.encryptedFieldTooltip\" [tooltipPosition]=\"'right'\"\n        ><i [hidden]=\"!form.controls[control.key].encrypted\" class=\"bhi-lock\"></i\n      ></span>\n      <!--Label (for horizontal)-->\n      <label\n        [attr.for]=\"control.key\"\n        *ngIf=\"form.layout !== 'vertical' && form.controls[control.key].label && !condensed\"\n        [ngClass]=\"{ encrypted: form.controls[control.key].encrypted }\"\n      >\n        {{ form.controls[control.key].label }}\n      </label>\n      <div class=\"novo-control-outer-container\">\n        <!--Label (for vertical)-->\n        <label\n          *ngIf=\"form.layout === 'vertical' && form.controls[control.key].label && !condensed\"\n          class=\"novo-control-label\"\n          [attr.for]=\"control.key\"\n          [class.novo-control-empty]=\"!hasValue\"\n          [class.novo-control-focused]=\"focused\"\n          [class.novo-control-filled]=\"hasValue\"\n          [class.novo-control-always-active]=\"alwaysActive || form.controls[control.key].placeholder\"\n          [class.novo-control-extra-spacing]=\"requiresExtraSpacing\"\n        >\n          {{ form.controls[control.key].label }}\n        </label>\n        <div\n          class=\"novo-control-inner-container\"\n          [class.required]=\"form.controls[control.key].required && !form.controls[control.key].readOnly\"\n        >\n          <div class=\"novo-control-inner-input-container\" [class.novo-control-filled]=\"hasValue\" [class.novo-control-empty]=\"!hasValue\">\n            <!--Required Indicator-->\n            <i\n              [hidden]=\"!form.controls[control.key].required || form.controls[control.key].readOnly\"\n              class=\"required-indicator {{ form.controls[control.key].controlType }}\"\n              [ngClass]=\"{ 'bhi-circle': !isValid, 'bhi-check': isValid }\"\n              *ngIf=\"!condensed || form.controls[control.key].required\"\n            >\n            </i>\n            <!--Form Controls-->\n            <div\n              class=\"novo-control-input {{ form.controls[control.key].controlType }}\"\n              [attr.data-automation-id]=\"control.key\"\n              [class.control-disabled]=\"form.controls[control.key].disabled\"\n              [class.highlighted]=\"form.controls[control.key].highlighted\"\n            >\n              <!--TODO prefix/suffix on the control-->\n              <ng-container *ngIf=\"templates\">\n                <ng-container\n                  *ngTemplateOutlet=\"templates[form.controls[control.key].controlType]; context: templateContext\"\n                ></ng-container>\n              </ng-container>\n              <ng-container *ngIf=\"!templates || loading\">\n                <div class=\"novo-control-input-container novo-control-input-with-label\">\n                  <input type=\"text\" />\n                </div>\n              </ng-container>\n            </div>\n          </div>\n          <!--Error Message-->\n          <div\n            class=\"field-message {{ form.controls[control.key].controlType }}\"\n            *ngIf=\"!condensed\"\n            [class.has-tip]=\"form.controls[control.key].tipWell\"\n            [ngClass]=\"showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'\"\n          >\n            <div class=\"messages\" [ngClass]=\"showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'\">\n              <span class=\"error-text\" *ngIf=\"showFieldMessage\"></span>\n              <span class=\"error-text\" *ngIf=\"isDirty && errors?.required && form.controls[control.key].controlType !== 'address'\"\n                >{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span\n              >\n              <span class=\"error-text\" *ngIf=\"isDirty && errors?.minlength\"\n                >{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span\n              >\n              <span\n                class=\"error-text\"\n                *ngIf=\"isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'\"\n                >{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span\n              >\n              <span class=\"error-text\" *ngIf=\"errors?.maxlength && focused && !errors?.maxlengthFields\">{{\n                labels.invalidMaxlength(form.controls[control.key].maxlength)\n              }}</span>\n              <span class=\"error-text\" *ngIf=\"maxLengthMet && form.controls[control.key].controlType === 'picker'\">{{\n                labels.maxRecordsReached\n              }}</span>\n              <span class=\"error-text\" *ngIf=\"isDirty && errors?.invalidEmail\"\n                >{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span\n              >\n              <span class=\"error-text\" *ngIf=\"isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)\"\n                >{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span\n              >\n              <span *ngIf=\"isDirty && errors?.minYear\">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>\n              <span class=\"error-text\" *ngIf=\"isDirty && errors?.custom\">{{ errors.custom }}</span>\n              <span class=\"error-text\" *ngIf=\"errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused\">\n                {{\n                  labels.invalidMaxlengthWithField(\n                    control.config[maxlengthErrorField]?.label,\n                    control.config[maxlengthErrorField]?.maxlength\n                  )\n                }}\n              </span>\n              <span\n                class=\"error-text\"\n                *ngIf=\"isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)\"\n              >\n                {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}\n              </span>\n              <span *ngIf=\"isDirty && errors?.invalidAddress\">\n                <span class=\"error-text\" *ngFor=\"let invalidAddressField of errors?.invalidAddressFields\"\n                  >{{ invalidAddressField | uppercase }} {{ labels.isRequired }}\n                </span>\n              </span>\n              <!--Field Hint-->\n              <span class=\"description\" *ngIf=\"form.controls[control.key].description\">\n                {{ form.controls[control.key].description }}\n              </span>\n              <span class=\"warning-text\" *ngIf=\"form.controls[control.key].warning\">{{ form.controls[control.key].warning }}</span>\n            </div>\n            <span\n              class=\"character-count\"\n              [class.error]=\"\n                (errors?.maxlength && !errors?.maxlengthFields) ||\n                (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField))\n              \"\n              *ngIf=\"showCount && form.controls[control.key].controlType !== 'picker'\"\n              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span\n            >\n            <span\n              class=\"record-count\"\n              [class.zero-count]=\"itemCount === 0\"\n              [class.row-picker]=\"form.controls[this.control.key].config.columns\"\n              *ngIf=\"showCount && form.controls[control.key].controlType === 'picker'\"\n              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span\n            >\n          </div>\n          <!--Tip Wel-->\n          <novo-tip-well\n            *ngIf=\"form.controls[control.key].tipWell\"\n            [name]=\"control.key\"\n            [tip]=\"form.controls[control.key]?.tipWell?.tip\"\n            [icon]=\"form.controls[control.key]?.tipWell?.icon\"\n            [button]=\"form.controls[control.key]?.tipWell?.button\"\n            [sanitize]=\"form.controls[control.key]?.tipWell?.sanitize\"\n          ></novo-tip-well>\n        </div>\n        <i *ngIf=\"form.controls[control.key].fieldInteractionloading\" class=\"loading\">\n          <svg\n            version=\"1.1\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n            xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n            x=\"0px\"\n            y=\"0px\"\n            width=\"18.2px\"\n            height=\"18.5px\"\n            viewBox=\"0 0 18.2 18.5\"\n            style=\"enable-background:new 0 0 18.2 18.5;\"\n            xml:space=\"preserve\"\n          >\n            <style type=\"text/css\">\n              .spinner {\n                fill: #ffffff;\n              }\n            </style>\n            <path\n              class=\"spinner\"\n              d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"\n            />\n          </svg>\n        </i>\n      </div>\n    </div>\n  ",
                    host: {
                        '[class]': 'form.controls[control.key].controlType',
                        '[attr.data-control-type]': 'form.controls[control.key].controlType',
                        '[class.disabled]': 'form.controls[control.key].readOnly',
                        '[class.hidden]': 'form.controls[control.key].hidden',
                        '[attr.data-control-key]': 'control.key',
                        '[class.inline-embedded]': 'control.isInlineEmbedded',
                        '[class.embedded]': 'control.isEmbedded',
                    }
                },] }
    ];
    NovoControlElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: DateFormatService },
        { type: FieldInteractionApi },
        { type: NovoTemplateService },
        { type: i0.ChangeDetectorRef },
        { type: String, decorators: [{ type: i0.Inject, args: [i0.LOCALE_ID,] }] }
    ]; };
    NovoControlElement.propDecorators = {
        control: [{ type: i0.Input }],
        form: [{ type: i0.Input }],
        condensed: [{ type: i0.Input }],
        autoFocus: [{ type: i0.Input }],
        change: [{ type: i0.Output }],
        edit: [{ type: i0.Output }],
        save: [{ type: i0.Output }],
        delete: [{ type: i0.Output }],
        upload: [{ type: i0.Output }],
        onBlur: [{ type: i0.Output, args: ['blur',] }],
        onFocus: [{ type: i0.Output, args: ['focus',] }]
    };

    // NG
    (function (EditState) {
        EditState["EDITING"] = "editing";
        EditState["NOT_EDITING"] = "notediting";
    })(exports.EditState || (exports.EditState = {}));
    var NovoControlGroup = /** @class */ (function () {
        function NovoControlGroup(formUtils, fb, ref) {
            this.formUtils = formUtils;
            this.fb = fb;
            this.ref = ref;
            this._appearance = 'none';
            this._vertical = false;
            this._stacked = false;
            this._remove = false;
            this._edit = false;
            this._collapsible = false;
            // Edit icon at the end of each row (no bhi- prefix)
            this.editIcon = 'edit';
            // Remove icon at the end of each row (no bhi- prefix)
            this.removeIcon = 'delete-o';
            this.onRemove = new i0.EventEmitter();
            this.onEdit = new i0.EventEmitter();
            this.onAdd = new i0.EventEmitter();
            this.change = new i0.EventEmitter();
            this.controlLabels = [];
            this.toggled = false;
            this.disabledArray = [];
            this.editState = exports.EditState.NOT_EDITING;
            this.currentIndex = 0;
        }
        Object.defineProperty(NovoControlGroup.prototype, "appearance", {
            get: function () {
                return this._appearance;
            },
            set: function (value) {
                this._appearance = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlGroup.prototype, "vertical", {
            get: function () {
                return this._vertical;
            },
            // Sets the display of the group to either be row (default) or vertical via flex-box
            set: function (v) {
                this._vertical = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlGroup.prototype, "stacked", {
            get: function () {
                return this._stacked;
            },
            set: function (v) {
                this._stacked = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlGroup.prototype, "remove", {
            get: function () {
                return this._remove;
            },
            // Hide/shows the remove button for removing a control
            set: function (v) {
                this._remove = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlGroup.prototype, "edit", {
            get: function () {
                return this._edit;
            },
            // Hide/shows the edit button for editing a control
            set: function (v) {
                this._edit = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlGroup.prototype, "collapsible", {
            get: function () {
                return this._collapsible;
            },
            // Allows the control to collapse or not
            set: function (v) {
                this._collapsible = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoControlGroup.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            // Icon of the control group (can have bhi prefix or not)
            set: function (v) {
                this._icon = v && v.indexOf('bhi') !== -1 ? v : "bhi-" + v;
            },
            enumerable: false,
            configurable: true
        });
        NovoControlGroup.prototype.ngAfterContentInit = function () {
            if (!this.key) {
                throw new Error('novo-control-group must have the [key] attribute provided!');
            }
        };
        NovoControlGroup.prototype.ngOnChanges = function (changes) {
            var _this = this;
            var initialValueChange = changes.initialValue;
            // If initial value changes, clear the controls
            if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
                this.clearControls();
            }
            // Check for array, add a control for each value
            if (this.initialValue && Array.isArray(this.initialValue)) {
                if (this.initialValue.length !== 0) {
                    this.currentIndex = 0;
                    this.initialValue.forEach(function (value) { return _this.addNewControl(value); });
                }
            }
            else if (this.initialValue) {
                // If value is an object, just add one control
                this.addNewControl(this.initialValue);
            }
            // If we are horizontal, grab the labels to help with layout
            if (!this.vertical) {
                this.controlLabels = (this.controls || []).map(function (control) {
                    return {
                        value: control.label,
                        width: control.width,
                        required: control.required,
                        key: control.key,
                        hidden: control.hidden,
                    };
                });
                this.ref.markForCheck();
            }
        };
        NovoControlGroup.prototype.ngOnDestroy = function () {
            this.clearControls();
        };
        NovoControlGroup.prototype.onChange = function () {
            this.change.emit(this);
        };
        NovoControlGroup.prototype.onClickAdd = function () {
            this.addNewControl();
            // this.editState = EditState.EDITING;
        };
        NovoControlGroup.prototype.onClickCancel = function () {
            this.editState = exports.EditState.NOT_EDITING;
        };
        NovoControlGroup.prototype.onClickSave = function () {
            this.disabledArray[this.currentIndex - 1].state = exports.EditState.NOT_EDITING;
            this.editState = exports.EditState.NOT_EDITING;
            var control = this.form.controls[this.key];
            if (control) {
                var fg = control.at(this.currentIndex - 1);
                fg.disableAllControls();
            }
        };
        NovoControlGroup.prototype.resetAddRemove = function () {
            var _this = this;
            this.disabledArray.forEach(function (item, idx) {
                item.edit = _this.checkCanEdit(idx);
                item.remove = _this.checkCanRemove(idx);
                if (!item.edit) {
                    item.state = exports.EditState.NOT_EDITING;
                }
            });
            this.ref.markForCheck();
        };
        NovoControlGroup.prototype.addNewControl = function (value) {
            var controlsArray = this.form.controls[this.key];
            var nestedFormGroup = this.buildNestedFormGroup(value);
            if (controlsArray) {
                controlsArray.push(nestedFormGroup);
            }
            else {
                this.form.addControl(this.key, this.fb.array([nestedFormGroup]));
            }
            this.disabledArray.push({
                state: exports.EditState.EDITING,
                edit: true,
                remove: true,
            });
            this.resetAddRemove();
            if (!value) {
                this.onAdd.emit(nestedFormGroup);
            }
            this.currentIndex++;
            this.assignIndexes();
            // Ensure that field interaction changes for nested forms originating from outside the form will be reflected in the nested elements
            nestedFormGroup.fieldInteractionEvents.subscribe(this.onFieldInteractionEvent.bind(this));
            this.ref.markForCheck();
        };
        /**
         * Will remove the control, and optionally, if the event is to be publicized (emitEvent = true) and there is a
         * shouldRemove callback, then call the shouldRemove() callback to determine if the doRemoveControl should be called.
         */
        NovoControlGroup.prototype.removeControl = function (index, emitEvent) {
            var _this = this;
            if (emitEvent === void 0) { emitEvent = true; }
            if (emitEvent && Helpers.isFunction(this.shouldRemove)) {
                this.shouldRemove(index).then(function (shouldRemove) {
                    if (shouldRemove) {
                        _this.doRemoveControl(index, emitEvent);
                    }
                });
            }
            else {
                this.doRemoveControl(index, emitEvent);
            }
        };
        NovoControlGroup.prototype.doRemoveControl = function (index, emitEvent) {
            var controlsArray = this.form.controls[this.key];
            var nestedFormGroup = controlsArray.at(index);
            nestedFormGroup.fieldInteractionEvents.unsubscribe();
            if (emitEvent) {
                this.onRemove.emit({ value: nestedFormGroup.value, index: index });
            }
            controlsArray.removeAt(index);
            this.disabledArray = this.disabledArray.filter(function (value, idx) { return idx !== index; });
            this.resetAddRemove();
            this.currentIndex--;
            this.assignIndexes();
            this.ref.markForCheck();
        };
        NovoControlGroup.prototype.editControl = function (index) {
            var controlsArray = this.form.controls[this.key];
            var fg = controlsArray.at(index);
            fg.enableAllControls();
            this.onEdit.emit({ value: controlsArray.at(index).value, index: index });
        };
        NovoControlGroup.prototype.toggle = function (event) {
            Helpers.swallowEvent(event);
            if (this.collapsible) {
                this.toggled = !this.toggled;
                this.ref.markForCheck();
            }
        };
        NovoControlGroup.prototype.buildNestedFormGroup = function (value) {
            var newControls = this.getNewControls();
            if (value) {
                this.formUtils.setInitialValues(newControls, value);
            }
            return this.formUtils.toFormGroup(newControls);
        };
        NovoControlGroup.prototype.clearControls = function () {
            var controlsArray = this.form.controls[this.key];
            if (controlsArray) {
                for (var i = controlsArray.length - 1; i >= 0; i--) {
                    this.removeControl(i, false);
                }
                this.currentIndex = 0;
            }
        };
        NovoControlGroup.prototype.checkCanEdit = function (index) {
            if (this.canEdit) {
                var controlsArray = this.form.controls[this.key];
                return this.canEdit(controlsArray.at(index).value, index);
            }
            return true;
        };
        NovoControlGroup.prototype.checkCanRemove = function (index) {
            if (this.canRemove) {
                var controlsArray = this.form.controls[this.key];
                if (controlsArray.at(index)) {
                    return this.canRemove(controlsArray.at(index).value, index);
                }
                return true;
            }
            return true;
        };
        NovoControlGroup.prototype.getNewControls = function () {
            var ret = [];
            (this.controls || []).forEach(function (control) {
                ret.push(new BaseControl(control.__type, control));
            });
            return ret;
        };
        NovoControlGroup.prototype.assignIndexes = function () {
            var controlsArray = this.form.controls[this.key];
            if (controlsArray) {
                for (var i = 0; i < controlsArray.length; i++) {
                    var form = controlsArray.at(i);
                    form.associations = Object.assign(Object.assign({}, form.associations), { index: i });
                }
            }
        };
        NovoControlGroup.prototype.onFieldInteractionEvent = function () {
            this.ref.markForCheck();
        };
        return NovoControlGroup;
    }());
    NovoControlGroup.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-control-group',
                    template: "<h6 class=\"novo-section-header\" *ngIf=\"label\">\n  <span (click)=\"toggle($event)\" [class.clickable]=\"collapsible\">\n    <i *ngIf=\"icon && !collapsible\" [ngClass]=\"icon\" [attr.data-automation-id]=\"'novo-control-group-icon-' + key\"></i>\n    <i *ngIf=\"collapsible\" class=\"bhi-next\" [class.toggled]=\"toggled\"\n      [attr.data-automation-id]=\"'novo-control-group-collapse-' + key\"></i>\n    <span [attr.data-automation-id]=\"'novo-control-group-label-' + key\">{{ label }}</span>\n  </span>\n  <label class=\"novo-control-group-description\" *ngIf=\"description\"\n    [attr.data-automation-id]=\"'novo-control-group-description-' + key\">{{ description }}</label>\n</h6>\n<div class=\"novo-control-group-controls\" [class.vertical]=\"vertical\" [class.horizontal]=\"!vertical\"\n  [class.hidden]=\"collapsible && !toggled\">\n\n  <ng-template #defaultTemplate let-index=\"index\" let-form=\"form\" let-key=\"key\">\n    <div class=\"novo-control-group-control\">\n      <div *ngFor=\"let c of controls\" class=\"novo-control-container {{c.key}}\"\n        [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n        <novo-control (change)=\"onChange()\" [form]=\"(form?.controls)[key]['controls'][index]\" [control]=\"c\"\n          [condensed]=\"!vertical || c.controlType === 'read-only'\"></novo-control>\n      </div>\n      <div class=\"novo-control-container edit last\" *ngIf=\"edit && !vertical\">\n        <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].edit\" type=\"button\"\n          *ngIf=\"edit && !vertical\" theme=\"icon\" [icon]=\"editIcon\"\n          (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\">\n        </novo-button>\n      </div>\n      <div class=\"novo-control-container remove last\" *ngIf=\"remove && !vertical\">\n        <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].remove\" type=\"button\"\n          *ngIf=\"remove && !vertical\" theme=\"icon\"\n          [icon]=\"removeIcon\" (click)=\"removeControl(index)\"\n          [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n          index=\"-1\">\n        </novo-button>\n      </div>\n    </div>\n    <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].edit\" type=\"button\"\n      *ngIf=\"edit && vertical\"\n      theme=\"icon\" [icon]=\"editIcon\"\n      (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\">\n    </novo-button>\n    <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].remove\" type=\"button\"\n      *ngIf=\"remove && vertical\" theme=\"icon\"\n      [icon]=\"removeIcon\" (click)=\"removeControl(index)\"\n      [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n      index=\"-1\">\n    </novo-button>\n  </ng-template>\n\n  <ng-template #defaultColumnLabelTemplate let-form=\"form\" let-key=\"key\">\n    <div *ngFor=\"let label of controlLabels\"\n      class=\"novo-control-group-control-label {{ label.key }}\"\n      [class.novo-control-group-control-hidden]=\"label.hidden\"\n      [style.max-width.px]=\"label.width\" [class.column-required]=\"label.required\">\n      <span [attr.data-automation-id]=\"'novo-control-group-label-' + label.value\">{{ label.value }}</span>\n    </div>\n    <div class=\"novo-control-group-control-label edit last\" *ngIf=\"edit\"\n      [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"></div>\n    <div class=\"novo-control-group-control-label remove last\" *ngIf=\"remove\"\n      [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"></div>\n  </ng-template>\n\n  <ng-container *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n    <div class=\"novo-control-group-labels\"\n      *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n      <ng-template [ngTemplateOutlet]=\"columnLabelTemplate || defaultColumnLabelTemplate\"\n        [ngTemplateOutletContext]=\"{ form: form, key: key, controlLabels: controlLabels }\">\n      </ng-template>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"(form?.controls)[key]\">\n    <div class=\"novo-control-group-row\"\n      *ngFor=\"let control of (form?.controls)[key]['controls']; let index = index\">\n      <ng-template [ngTemplateOutlet]=\"rowTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{ form: form, formGroup: control, index: index, key: key, controls: controls }\">\n      </ng-template>\n    </div>\n  </ng-container>\n\n  <div class=\"novo-control-group-empty\"\n    *ngIf=\"(form?.controls)[key] && (form?.controls)[key]['controls'].length === 0\"\n    [attr.data-automation-id]=\"'novo-control-group-empty-' + key\">\n    {{ emptyMessage }}\n  </div>\n\n  <div *ngIf=\"add\" class=\"novo-control-group-footer\">\n    <novo-button type=\"button\" theme=\"dialogue\" icon=\"add-thin\" side=\"left\" (click)=\"onClickAdd()\"\n      [attr.data-automation-id]=\"'novo-control-group-bottom-add-' + key\" index=\"-1\">\n      {{ add?.label }}\n    </novo-button>\n    <!-- <novo-button *ngIf=\"editState==='editing'\" type=\"button\" theme=\"dialogue\" icon=\"close\" side=\"left\"\n                  (click)=\"onClickCancel()\" [attr.data-automation-id]=\"'novo-control-group-bottom-cancel-' + key\"\n                  index=\"-1\">\n                {{ 'cancel' }}\n                </novo-button>\n                  <novo-button *ngIf=\"editState==='editing'\" type=\"button\" theme=\"dialogue\" icon=\"check\" side=\"left\"\n                  (click)=\"onClickSave()\" [attr.data-automation-id]=\"'novo-control-group-bottom-save-' + key\"\n                  index=\"-1\">\n                {{ add?.label }}\n                </novo-button> -->\n  </div>\n</div>\n",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    host: {
                        '[class.novo-control-group-appearance-card]': "appearance=='card'",
                        '[class.novo-control-group-appearance-none]': "appearance=='none'",
                    }
                },] }
    ];
    NovoControlGroup.ctorParameters = function () { return [
        { type: FormUtils },
        { type: forms.FormBuilder },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoControlGroup.propDecorators = {
        appearance: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        stacked: [{ type: i0.Input }],
        add: [{ type: i0.Input }],
        remove: [{ type: i0.Input }],
        edit: [{ type: i0.Input }],
        collapsible: [{ type: i0.Input }],
        form: [{ type: i0.Input }],
        controls: [{ type: i0.Input }],
        key: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        description: [{ type: i0.Input }],
        emptyMessage: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        editIcon: [{ type: i0.Input }],
        removeIcon: [{ type: i0.Input }],
        initialValue: [{ type: i0.Input }],
        canEdit: [{ type: i0.Input }],
        canRemove: [{ type: i0.Input }],
        shouldRemove: [{ type: i0.Input }],
        rowTemplate: [{ type: i0.Input }],
        columnLabelTemplate: [{ type: i0.Input }],
        onRemove: [{ type: i0.Output }],
        onEdit: [{ type: i0.Output }],
        onAdd: [{ type: i0.Output }],
        change: [{ type: i0.Output }]
    };

    var NovoControlTemplates = /** @class */ (function () {
        function NovoControlTemplates(templates) {
            this.templates = templates;
        }
        NovoControlTemplates.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.defaultTemplates && this.defaultTemplates.length) {
                this.defaultTemplates.forEach(function (template) {
                    _this.templates.addDefault(template.name, template.template);
                });
            }
        };
        return NovoControlTemplates;
    }());
    NovoControlTemplates.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-control-templates',
                    template: "\n    <!---Readonly--->\n    <ng-template novoTemplate=\"read-only\" let-form=\"form\" let-control>\n      <div>{{ form.value[control.key] }}</div>\n    </ng-template>\n    <!--Textbox--->\n    <ng-template novoTemplate=\"textbox\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div\n        [formGroup]=\"form\"\n        class=\"novo-control-input-container novo-control-input-with-label\"\n        [tooltip]=\"control?.tooltip\"\n        [tooltipPosition]=\"control?.tooltipPosition\"\n        [tooltipSize]=\"control?.tooltipSize\"\n        [tooltipPreline]=\"control?.tooltipPreline\"\n        [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n        [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n      >\n        <input\n          *ngIf=\"control?.type !== 'number' && control?.textMaskEnabled\"\n          [textMask]=\"control.maskOptions\"\n          [formControlName]=\"control.key\"\n          [id]=\"control.key\"\n          [type]=\"control?.type\"\n          [placeholder]=\"control?.placeholder\"\n          (input)=\"methods.emitChange($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          autocomplete\n        />\n        <input\n          *ngIf=\"control?.type !== 'number' && !control?.textMaskEnabled\"\n          [class.maxlength-error]=\"errors?.maxlength\"\n          [formControlName]=\"control.key\"\n          [id]=\"control.key\"\n          [type]=\"control?.type\"\n          [placeholder]=\"control?.placeholder\"\n          (input)=\"methods.emitChange($event)\"\n          [maxlength]=\"control?.maxlength\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          autocomplete\n        />\n        <input\n          *ngIf=\"control?.type === 'number' && control?.subType !== 'percentage'\"\n          [class.maxlength-error]=\"errors?.maxlength\"\n          [formControlName]=\"control.key\"\n          [id]=\"control.key\"\n          [type]=\"control?.type\"\n          [placeholder]=\"control?.placeholder\"\n          (keydown)=\"methods.restrictKeys($event)\"\n          (input)=\"methods.emitChange($event)\"\n          [maxlength]=\"control?.maxlength\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          step=\"any\"\n          (mousewheel)=\"numberInput.blur()\"\n          #numberInput\n        />\n        <!-- the percentage input does not use formControlName like a normal reactive input because instead of\n          setting the floating point value directly, it is multiplied by 100 into a percentage value -->\n        <input\n          *ngIf=\"control?.type === 'number' && control?.subType === 'percentage'\"\n          [id]=\"control.key\"\n          [type]=\"control?.type\"\n          [placeholder]=\"control?.placeholder\"\n          (keydown)=\"methods.restrictKeys($event)\"\n          [value]=\"control?.percentValue\"\n          [disabled]=\"control?.readOnly\"\n          (input)=\"methods.handlePercentChange($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          step=\"any\"\n          (mousewheel)=\"percentInput.blur()\"\n          #percentInput\n        />\n        <label class=\"input-label\" *ngIf=\"control?.subType === 'currency'\">{{ control.currencyFormat }}</label>\n        <label class=\"input-label\" *ngIf=\"control?.subType === 'percentage'\">%</label>\n      </div>\n    </ng-template>\n\n    <!--Textarea--->\n    <ng-template novoTemplate=\"text-area\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div\n        class=\"textarea-container\"\n        [formGroup]=\"form\"\n        [tooltip]=\"control?.tooltip\"\n        [tooltipPosition]=\"control?.tooltipPosition\"\n        [tooltipSize]=\"control?.tooltipSize\"\n        [tooltipPreline]=\"control?.tooltipPreline\"\n        [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n        [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n      >\n        <textarea\n          [class.maxlength-error]=\"errors?.maxlength\"\n          [name]=\"control.key\"\n          [attr.id]=\"control.key\"\n          [placeholder]=\"control.placeholder\"\n          [formControlName]=\"control.key\"\n          autosize\n          (input)=\"methods.handleTextAreaInput($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          [maxlength]=\"control?.maxlength\"\n        ></textarea>\n      </div>\n    </ng-template>\n\n    <!--Editor-->\n    <ng-template novoTemplate=\"editor\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-editor\n          [name]=\"control.key\"\n          [formControlName]=\"control.key\"\n          [startupFocus]=\"control.startupFocus\"\n          [minimal]=\"control.minimal\"\n          [fileBrowserImageUploadUrl]=\"control.fileBrowserImageUploadUrl\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          [config]=\"control.config\"\n        ></novo-editor>\n      </div>\n    </ng-template>\n\n    <!--AceEditor-->\n    <ng-template novoTemplate=\"ace-editor\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-ace-editor\n          [name]=\"control.key\"\n          [formControlName]=\"control.key\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n        ></novo-ace-editor>\n      </div>\n    </ng-template>\n\n    <!--HTML5 Select-->\n    <ng-template novoTemplate=\"native-select\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <select\n          [id]=\"control.key\"\n          [formControlName]=\"control.key\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n        >\n          <option *ngIf=\"control.placeholder\" value=\"\" disabled selected hidden>{{ control.placeholder }}</option>\n          <option *ngFor=\"let opt of control.options\" [value]=\"opt.key\">{{ opt.value }}</option>\n        </select>\n      </div>\n    </ng-template>\n\n    <!--File-->\n    <ng-template novoTemplate=\"file\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-file-input\n          [formControlName]=\"control.key\"\n          [id]=\"control.key\"\n          [name]=\"control.key\"\n          [placeholder]=\"control.placeholder\"\n          [value]=\"control.value\"\n          [multiple]=\"control.multiple\"\n          [layoutOptions]=\"control.layoutOptions\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          (edit)=\"methods.handleEdit($event)\"\n          (save)=\"methods.handleSave($event)\"\n          (delete)=\"methods.handleDelete($event)\"\n          (upload)=\"methods.handleUpload($event)\"\n        ></novo-file-input>\n      </div>\n    </ng-template>\n\n    <!--Tiles-->\n    <ng-template novoTemplate=\"tiles\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-tiles\n          [options]=\"control.options\"\n          [formControlName]=\"control.key\"\n          (onChange)=\"methods.modelChange($event)\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          [controlDisabled]=\"control.disabled\"\n        ></novo-tiles>\n      </div>\n    </ng-template>\n\n    <!--Picker-->\n    <ng-template novoTemplate=\"picker\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\" class=\"novo-control-input-container\">\n        <novo-picker\n          [config]=\"control.config\"\n          [formControlName]=\"control.key\"\n          [placeholder]=\"control.placeholder\"\n          [parentScrollSelector]=\"control.parentScrollSelector\"\n          *ngIf=\"!control.multiple\"\n          (select)=\"methods.modelChange($event)\"\n          (changed)=\"methods.modelChangeWithRaw($event)\"\n          (typing)=\"methods.handleTyping($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n        ></novo-picker>\n        <novo-chips\n          [source]=\"control.config\"\n          [type]=\"control.config.type\"\n          [formControlName]=\"control.key\"\n          [placeholder]=\"control.placeholder\"\n          [maxlength]=\"control?.maxlength\"\n          *ngIf=\"control.multiple && !control.config.columns\"\n          [closeOnSelect]=\"control.closeOnSelect\"\n          (changed)=\"methods.modelChangeWithRaw($event)\"\n          (typing)=\"methods.handleTyping($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n        ></novo-chips>\n        <novo-row-chips\n          [source]=\"control.config\"\n          [type]=\"control.config.type\"\n          [formControlName]=\"control.key\"\n          [placeholder]=\"control.placeholder\"\n          *ngIf=\"control.multiple && control.config.columns\"\n          [closeOnSelect]=\"control.closeOnSelect\"\n          (changed)=\"methods.modelChangeWithRaw($event)\"\n          (typing)=\"methods.handleTyping($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n        ></novo-row-chips>\n      </div>\n    </ng-template>\n\n    <!--Novo Select-->\n    <ng-template novoTemplate=\"select\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-select\n          [options]=\"control.options\"\n          [headerConfig]=\"control.headerConfig\"\n          [placeholder]=\"control.placeholder\"\n          [formControlName]=\"control.key\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          (onSelect)=\"methods.modelChange($event)\"\n        ></novo-select>\n      </div>\n    </ng-template>\n\n    <!--Timezone -->\n    <ng-template novoTemplate=\"timezone\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-select\n          [options]=\"control.options\"\n          [headerConfig]=\"control.headerConfig\"\n          [placeholder]=\"control.placeholder\"\n          [formControlName]=\"control.key\"\n          [tooltip]=\"control.tooltip\"\n          [tooltipPosition]=\"control.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          position=\"bottom\"\n          (onSelect)=\"methods.modelChange($event)\"\n        ></novo-select>\n      </div>\n    </ng-template>\n\n    <!--Radio-->\n    <ng-template novoTemplate=\"radio\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\" class=\"novo-control-input-container\">\n        <novo-radio-group [name]=\"control.key\" [formControlName]=\"control.key\">\n          <novo-radio\n            *ngFor=\"let option of control.options\"\n            [value]=\"option.value\"\n            [label]=\"option.label\"\n            [checked]=\"option.value === form.value[control.key] || (form.value[control.key] && option.value === form.value[control.key].id)\"\n            [tooltip]=\"control.tooltip\"\n            [tooltipPosition]=\"control.tooltipPosition\"\n            [tooltipSize]=\"control?.tooltipSize\"\n            [tooltipPreline]=\"control?.tooltipPreline\"\n            [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n            [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n            [button]=\"!!option.icon\"\n            [icon]=\"option.icon\"\n            [color]=\"option.color\"\n            [theme]=\"!!option.icon && !option.label ? 'icon' : 'secondary'\"\n            [attr.data-automation-id]=\"control.key + '-' + (option?.label || option?.value)\"\n          ></novo-radio>\n        </novo-radio-group>\n      </div>\n    </ng-template>\n\n    <!--Time-->\n    <ng-template novoTemplate=\"time\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div\n        [formGroup]=\"form\"\n        class=\"novo-control-input-container\"\n        [tooltip]=\"control?.tooltip\"\n        [tooltipPosition]=\"control?.tooltipPosition\"\n        [tooltipSize]=\"control?.tooltipSize\"\n        [tooltipPreline]=\"control?.tooltipPreline\"\n        [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n        [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n      >\n        <novo-time-picker-input\n          [attr.id]=\"control.key\"\n          [name]=\"control.key\"\n          [formControlName]=\"control.key\"\n          [placeholder]=\"control.placeholder\"\n          [military]=\"control.military\"\n        ></novo-time-picker-input>\n      </div>\n    </ng-template>\n\n    <!--Native Input--->\n    <ng-template novoTemplate=\"native-input\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div\n        [formGroup]=\"form\"\n        class=\"novo-control-input-container novo-control-input-with-label\"\n        [tooltip]=\"control?.tooltip\"\n        [tooltipPosition]=\"control?.tooltipPosition\"\n        [tooltipSize]=\"control?.tooltipSize\"\n        [tooltipPreline]=\"control?.tooltipPreline\"\n        [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n        [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n      >\n        <input\n          [formControlName]=\"control.key\"\n          [id]=\"control.key\"\n          [type]=\"control.type\"\n          [placeholder]=\"control?.placeholder\"\n          (input)=\"methods.emitChange($event)\"\n          (focus)=\"methods.handleFocus($event)\"\n          (blur)=\"methods.handleBlur($event)\"\n        />\n      </div>\n    </ng-template>\n\n    <!--Date-->\n    <ng-template novoTemplate=\"date\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div\n        [formGroup]=\"form\"\n        class=\"novo-control-input-container\"\n        [tooltip]=\"control.tooltip\"\n        [tooltipPosition]=\"control.tooltipPosition\"\n        [tooltipSize]=\"control?.tooltipSize\"\n        [tooltipPreline]=\"control?.tooltipPreline\"\n        [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n        [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n      >\n        <novo-date-picker-input\n          [attr.id]=\"control.key\"\n          [name]=\"control.key\"\n          [formControlName]=\"control.key\"\n          [start]=\"control.startDate\"\n          [end]=\"control.endDate\"\n          [format]=\"control.dateFormat\"\n          [allowInvalidDate]=\"control.allowInvalidDate\"\n          [textMaskEnabled]=\"control.textMaskEnabled\"\n          [placeholder]=\"control.placeholder\"\n          [weekStart]=\"control.weekStart\"\n          [disabledDateMessage]=\"control.disabledDateMessage\"\n          (focusEvent)=\"methods.handleFocus($event)\"\n          (blurEvent)=\"methods.handleBlur($event)\"\n          (changeEvent)=\"methods.emitChange($event)\"\n        ></novo-date-picker-input>\n      </div>\n    </ng-template>\n\n    <!--Date and Time-->\n    <ng-template novoTemplate=\"date-time\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div\n        [formGroup]=\"form\"\n        class=\"novo-control-input-container\"\n        [tooltip]=\"control.tooltip\"\n        [tooltipPosition]=\"control.tooltipPosition\"\n        [tooltipSize]=\"control?.tooltipSize\"\n        [tooltipPreline]=\"control?.tooltipPreline\"\n        [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n        [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n      >\n        <novo-date-time-picker-input\n          [attr.id]=\"control.key\"\n          [name]=\"control.key\"\n          [formControlName]=\"control.key\"\n          [start]=\"control.startDate\"\n          [end]=\"control.endDate\"\n          [placeholder]=\"control.placeholder\"\n          [military]=\"control.military\"\n          [weekStart]=\"control.weekStart\"\n          (focusEvent)=\"methods.handleFocus($event)\"\n          (blurEvent)=\"methods.handleBlur($event)\"\n          (changeEvent)=\"methods.emitChange($event)\"\n        ></novo-date-time-picker-input>\n      </div>\n    </ng-template>\n\n    <!--Address-->\n    <ng-template novoTemplate=\"address\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-address\n          [formControlName]=\"control.key\"\n          [config]=\"control?.config\"\n          [readOnly]=\"control?.readOnly\"\n          (change)=\"methods.handleAddressChange($event)\"\n          (focus)=\"methods.handleFocus($event.event, $event.field)\"\n          (blur)=\"methods.handleBlur($event.event, $event.field)\"\n          (validityChange)=\"methods.updateValidity()\"\n        ></novo-address>\n      </div>\n    </ng-template>\n\n    <!--Checkbox-->\n    <ng-template novoTemplate=\"checkbox\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-checkbox\n          [formControlName]=\"control?.key\"\n          [name]=\"control?.key\"\n          [label]=\"control?.checkboxLabel\"\n          [tooltip]=\"control?.tooltip\"\n          [tooltipPosition]=\"control?.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          [layoutOptions]=\"control?.layoutOptions\"\n        ></novo-checkbox>\n      </div>\n    </ng-template>\n\n    <!--Switch-->\n    <ng-template novoTemplate=\"switch\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-switch\n          [formControlName]=\"control?.key\"\n          [tooltip]=\"control?.tooltip\"\n          [tooltipPosition]=\"control?.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n        ></novo-switch>\n      </div>\n    </ng-template>\n\n    <!--Checklist-->\n    <ng-template novoTemplate=\"checklist\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-check-list\n          [formControlName]=\"control.key\"\n          [name]=\"control.key\"\n          [options]=\"control?.options\"\n          [tooltip]=\"control?.tooltip\"\n          [tooltipPosition]=\"control?.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          (onSelect)=\"methods.modelChange($event)\"\n        ></novo-check-list>\n      </div>\n    </ng-template>\n\n    <!--QuickNote-->\n    <ng-template novoTemplate=\"quick-note\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n      <div [formGroup]=\"form\">\n        <novo-quick-note\n          [formControlName]=\"control.key\"\n          [startupFocus]=\"control?.startupFocus\"\n          [placeholder]=\"control?.placeholder\"\n          [config]=\"control?.config\"\n          (change)=\"methods.modelChange($event)\"\n          [tooltip]=\"control?.tooltip\"\n          [tooltipPosition]=\"control?.tooltipPosition\"\n          [tooltipSize]=\"control?.tooltipSize\"\n          [removeTooltipArrow]=\"control?.removeTooltipArrow\"\n          [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"\n          [tooltipPreline]=\"control?.tooltipPreline\"\n        ></novo-quick-note>\n      </div>\n    </ng-template>\n  "
                },] }
    ];
    NovoControlTemplates.ctorParameters = function () { return [
        { type: NovoTemplateService }
    ]; };
    NovoControlTemplates.propDecorators = {
        defaultTemplates: [{ type: i0.ViewChildren, args: [NovoTemplate,] }]
    };

    var NovoFieldsetHeaderElement = /** @class */ (function () {
        function NovoFieldsetHeaderElement() {
            this.icon = 'section';
        }
        return NovoFieldsetHeaderElement;
    }());
    NovoFieldsetHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-fieldset-header',
                    template: "\n    <novo-title smaller>\n      <novo-icon>{{ icon?.replace('bhi-', '') }}</novo-icon\n      >{{ title }}\n    </novo-title>\n  ",
                    host: {
                        class: 'novo-fieldset-header',
                    }
                },] }
    ];
    NovoFieldsetHeaderElement.propDecorators = {
        title: [{ type: i0.Input }],
        icon: [{ type: i0.Input }]
    };
    var NovoFieldsetElement = /** @class */ (function () {
        function NovoFieldsetElement() {
            this.controls = [];
            this.isEmbedded = false;
            this.isInlineEmbedded = false;
            this.hidden = false;
        }
        return NovoFieldsetElement;
    }());
    NovoFieldsetElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-fieldset',
                    template: "\n    <div class=\"novo-fieldset-container\">\n      <novo-fieldset-header\n        [icon]=\"icon\"\n        [title]=\"title\"\n        *ngIf=\"title\"\n        [class.embedded]=\"isEmbedded\"\n        [class.inline-embedded]=\"isInlineEmbedded\"\n        [class.hidden]=\"hidden\"\n      ></novo-fieldset-header>\n      <ng-container *ngFor=\"let control of controls; let controlIndex = index\">\n        <div class=\"novo-form-row\" [class.disabled]=\"control.disabled\" *ngIf=\"control.__type !== 'GroupedControl'\">\n          <novo-control [autoFocus]=\"autoFocus && index === 0 && controlIndex === 0\" [control]=\"control\" [form]=\"form\"></novo-control>\n        </div>\n        <div *ngIf=\"control.__type === 'GroupedControl'\">TODO - GroupedControl</div>\n      </ng-container>\n    </div>\n  "
                },] }
    ];
    NovoFieldsetElement.propDecorators = {
        controls: [{ type: i0.Input }],
        form: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        autoFocus: [{ type: i0.Input }],
        isEmbedded: [{ type: i0.Input }],
        isInlineEmbedded: [{ type: i0.Input }],
        hidden: [{ type: i0.Input }]
    };
    var NovoDynamicFormElement = /** @class */ (function () {
        function NovoDynamicFormElement(element, templates) {
            this.element = element;
            this.templates = templates;
            this.controls = [];
            this.fieldsets = [];
            this.hideNonRequiredFields = true;
            this.autoFocusFirstField = false;
            this.allFieldsRequired = false;
            this.allFieldsNotRequired = false;
            this.showingAllFields = false;
            this.showingRequiredFields = true;
            this.numControls = 0;
        }
        NovoDynamicFormElement.prototype.ngOnInit = function () {
            this.ngOnChanges();
        };
        NovoDynamicFormElement.prototype.ngOnChanges = function (changes) {
            var _this = this;
            this.form.layout = this.layout;
            if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
                this.fieldsets = [
                    {
                        controls: this.controls,
                    },
                ];
                this.numControls = this.controls.length;
            }
            else if (this.fieldsets) {
                this.fieldsets.forEach(function (fieldset) {
                    _this.numControls = _this.numControls + fieldset.controls.length;
                });
            }
            var requiredFields = [];
            var nonRequiredFields = [];
            this.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    if (control.required) {
                        requiredFields.push(control);
                    }
                    else {
                        nonRequiredFields.push(control);
                    }
                });
            });
            this.allFieldsRequired = requiredFields.length === this.numControls;
            this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
            if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
                this.fieldsets.forEach(function (fieldset) {
                    fieldset.controls.forEach(function (control) {
                        _this.form.controls[control.key].hidden = false;
                    });
                });
            }
            this.form.fieldsets = __spread(this.fieldsets);
        };
        NovoDynamicFormElement.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.customTemplates && this.customTemplates.length) {
                this.customTemplates.forEach(function (template) {
                    _this.templates.addCustom(template.name, template.template);
                });
            }
        };
        NovoDynamicFormElement.prototype.showAllFields = function () {
            var _this = this;
            this.form.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    var ctl = _this.form.controls[control.key];
                    if (!_this.fieldsAlreadyHidden.includes(control.key)) {
                        ctl.hidden = false;
                    }
                });
            });
            this.showingAllFields = true;
            this.showingRequiredFields = false;
        };
        NovoDynamicFormElement.prototype.showOnlyRequired = function (hideRequiredWithValue) {
            var _this = this;
            this.fieldsAlreadyHidden = [];
            this.form.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    var ctl = _this.form.controls[control.key];
                    if (ctl.hidden) {
                        _this.fieldsAlreadyHidden.push(control.key);
                    }
                    // Hide any non-required fields
                    if (!control.required) {
                        ctl.hidden = true;
                    }
                    // Hide required fields that have been successfully filled out
                    if (hideRequiredWithValue &&
                        !Helpers.isBlank(_this.form.value[control.key]) &&
                        (!control.isEmpty || (control.isEmpty && control.isEmpty(ctl)))) {
                        ctl.hidden = true;
                    }
                    // Don't hide fields with errors
                    if (ctl.errors) {
                        ctl.hidden = false;
                    }
                });
            });
            this.showingAllFields = false;
            this.showingRequiredFields = true;
            this.forceValidation();
        };
        Object.defineProperty(NovoDynamicFormElement.prototype, "values", {
            get: function () {
                return this.form ? this.form.value : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoDynamicFormElement.prototype, "isValid", {
            get: function () {
                return this.form ? this.form.valid : false;
            },
            enumerable: false,
            configurable: true
        });
        NovoDynamicFormElement.prototype.updatedValues = function () {
            var _this = this;
            var ret = null;
            this.form.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    if (_this.form.controls[control.key].dirty || control.dirty) {
                        if (!ret) {
                            ret = {};
                        }
                        ret[control.key] = _this.form.value[control.key];
                    }
                });
            });
            return ret;
        };
        NovoDynamicFormElement.prototype.forceValidation = function () {
            var _this = this;
            Object.keys(this.form.controls).forEach(function (key) {
                var control = _this.form.controls[key];
                if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                    control.markAsDirty();
                    control.markAsTouched();
                }
            });
        };
        return NovoDynamicFormElement;
    }());
    NovoDynamicFormElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-dynamic-form',
                    template: "\n    <novo-control-templates></novo-control-templates>\n    <div class=\"novo-form-container\">\n      <header>\n        <ng-content select=\"form-title\"></ng-content>\n        <ng-content select=\"form-subtitle\"></ng-content>\n      </header>\n      <form class=\"novo-form\" [formGroup]=\"form\">\n        <ng-container *ngFor=\"let fieldset of form.fieldsets; let i = index\">\n          <novo-fieldset\n            *ngIf=\"fieldset.controls.length\"\n            [index]=\"i\"\n            [autoFocus]=\"autoFocusFirstField\"\n            [icon]=\"fieldset.icon\"\n            [controls]=\"fieldset.controls\"\n            [title]=\"fieldset.title\"\n            [form]=\"form\"\n            [isEmbedded]=\"fieldset.isEmbedded\"\n            [isInlineEmbedded]=\"fieldset.isInlineEmbedded\"\n            [hidden]=\"fieldset.hidden\"\n          ></novo-fieldset>\n        </ng-container>\n      </form>\n    </div>\n  ",
                    providers: [NovoTemplateService]
                },] }
    ];
    NovoDynamicFormElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoTemplateService }
    ]; };
    NovoDynamicFormElement.propDecorators = {
        controls: [{ type: i0.Input }],
        fieldsets: [{ type: i0.Input }],
        form: [{ type: i0.Input }],
        layout: [{ type: i0.Input }],
        hideNonRequiredFields: [{ type: i0.Input }],
        autoFocusFirstField: [{ type: i0.Input }],
        customTemplates: [{ type: i0.ContentChildren, args: [NovoTemplate,] }]
    };

    // NG
    var NovoFormElement = /** @class */ (function () {
        function NovoFormElement(templates) {
            this.templates = templates;
            this.hideHeader = false;
            this.showingAllFields = false;
            this.showingRequiredFields = true;
        }
        Object.defineProperty(NovoFormElement.prototype, "value", {
            get: function () {
                return this.form.getRawValue();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoFormElement.prototype, "isValid", {
            get: function () {
                return this.form.valid;
            },
            enumerable: false,
            configurable: true
        });
        NovoFormElement.prototype.ngOnInit = function () {
            this.form.layout = this.layout;
        };
        NovoFormElement.prototype.ngAfterContentInit = function () {
            var _this = this;
            if (this.customTemplates && this.customTemplates.length) {
                this.customTemplates.forEach(function (template) {
                    _this.templates.addCustom(template.name, template.template);
                });
            }
        };
        NovoFormElement.prototype.showAllFields = function () {
            var _this = this;
            Object.keys(this.form.controls).forEach(function (key) {
                _this.form.controls[key].hidden = false;
            });
            this.showingAllFields = true;
            this.showingRequiredFields = false;
        };
        NovoFormElement.prototype.showOnlyRequired = function (hideRequiredWithValue) {
            var _this = this;
            Object.keys(this.form.controls).forEach(function (key) {
                // Hide any non-required fields
                if (!_this.form.controls[key].required) {
                    _this.form.controls[key].hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue && !Helpers.isBlank(_this.form.value[key])) {
                    _this.form.controls[key].hidden = true;
                }
                // Don't hide fields with errors
                if (_this.form.controls[key].errors) {
                    _this.form.controls[key].hidden = false;
                }
            });
            this.showingAllFields = false;
            this.showingRequiredFields = true;
            this.forceValidation();
        };
        NovoFormElement.prototype.forceValidation = function () {
            var _this = this;
            Object.keys(this.form.controls).forEach(function (key) {
                var control = _this.form.controls[key];
                if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                    control.markAsDirty();
                    control.markAsTouched();
                }
            });
        };
        return NovoFormElement;
    }());
    NovoFormElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-form',
                    template: "\n    <novo-control-templates></novo-control-templates>\n    <div class=\"novo-form-container\">\n      <header *ngIf=\"!hideHeader\">\n        <ng-content select=\"form-title\"></ng-content>\n        <ng-content select=\"form-subtitle\"></ng-content>\n      </header>\n      <form class=\"novo-form\" [formGroup]=\"form\">\n        <ng-content></ng-content>\n      </form>\n    </div>\n  ",
                    providers: [NovoTemplateService]
                },] }
    ];
    NovoFormElement.ctorParameters = function () { return [
        { type: NovoTemplateService }
    ]; };
    NovoFormElement.propDecorators = {
        form: [{ type: i0.Input }],
        layout: [{ type: i0.Input }],
        hideHeader: [{ type: i0.Input }],
        customTemplates: [{ type: i0.ContentChildren, args: [NovoTemplate,] }]
    };

    var NovoHeaderSpacer = /** @class */ (function () {
        function NovoHeaderSpacer() {
        }
        return NovoHeaderSpacer;
    }());
    NovoHeaderSpacer.decorators = [
        { type: i0.Component, args: [{
                    selector: 'header-spacer',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    var NovoUtilsComponent = /** @class */ (function () {
        function NovoUtilsComponent() {
        }
        return NovoUtilsComponent;
    }());
    NovoUtilsComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'utils',
                    template: "<ng-content></ng-content>"
                },] }
    ];
    var NovoUtilActionComponent = /** @class */ (function () {
        function NovoUtilActionComponent() {
        }
        return NovoUtilActionComponent;
    }());
    NovoUtilActionComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'util-action, novo-action',
                    template: "\n    <novo-button theme=\"icon\" [icon]=\"icon\" [attr.inverse]=\"inverse\" [disabled]=\"disabled\">\n      <ng-content></ng-content>\n    </novo-button>\n  ",
                    host: {
                        class: 'novo-action',
                    }
                },] }
    ];
    NovoUtilActionComponent.propDecorators = {
        icon: [{ type: i0.Input }],
        inverse: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }]
    };
    var NovoHeaderComponent = /** @class */ (function () {
        function NovoHeaderComponent() {
            this.role = 'heading';
            this.headerClass = 'novo-header';
            this.condensed = false;
            this.inverse = 'inverse';
        }
        Object.defineProperty(NovoHeaderComponent.prototype, "hb_isSizeSmall", {
            get: function () {
                return this.size === 'small';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoHeaderComponent.prototype, "hb_isSizeLarge", {
            get: function () {
                return this.size === 'large';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoHeaderComponent.prototype, "hb_isSizeDefault", {
            get: function () {
                return !['small', 'large'].includes(this.size);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoHeaderComponent.prototype, "theme", {
            get: function () {
                return this._theme;
            },
            set: function (theme) {
                this._theme = theme;
                this.inverse = theme === 'white' || theme === 'off-white' || theme === 'light' ? undefined : 'inverse';
            },
            enumerable: false,
            configurable: true
        });
        return NovoHeaderComponent;
    }());
    NovoHeaderComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-header,header[theme],header[accent]',
                    template: "\n    <section>\n      <div class=\"header-title\">\n        <ng-content select=\"[prefix]\"></ng-content>\n        <ng-container *ngIf=\"title\">\n          <novo-icon class=\"header-icon\" *ngIf=\"icon\">{{ icon }}</novo-icon>\n          <div class=\"header-titles\">\n            <novo-title size=\"xl\">{{ title }}</novo-title>\n            <novo-title size=\"md\" *ngIf=\"subTitle\">{{ subTitle }}</novo-title>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"!title\">\n          <ng-content select=\"novo-icon, [novo-icon]\"></ng-content>\n          <div class=\"header-titles\">\n            <ng-content select=\"h1, h2, h3, h4, h5, h6, small, novo-title, [novo-title], [novo-subtitle]\"></ng-content>\n          </div>\n        </ng-container>\n      </div>\n      <ng-content select=\"section\"></ng-content>\n      <span class=\"spacer\"></span>\n      <div class=\"header-actions\">\n        <ng-content select=\"novo-action,[novo-action]\"></ng-content>\n      </div>\n      <ng-content select=\"utils\"></ng-content>\n      <ng-content select=\"[suffix]\"></ng-content>\n    </section>\n    <ng-content></ng-content>\n  "
                },] }
    ];
    NovoHeaderComponent.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        headerClass: [{ type: i0.HostBinding, args: ['class',] }],
        condensed: [{ type: i0.HostBinding, args: ['class.condensed',] }, { type: i0.Input }],
        title: [{ type: i0.Input }],
        subTitle: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        hb_isSizeSmall: [{ type: i0.HostBinding, args: ['class.header-size-small',] }],
        hb_isSizeLarge: [{ type: i0.HostBinding, args: ['class.header-size-large',] }],
        hb_isSizeDefault: [{ type: i0.HostBinding, args: ['class.header-size-default',] }],
        theme: [{ type: i0.HostBinding, args: ['attr.theme',] }, { type: i0.Input }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoHeaderComponent.prototype, "condensed", void 0);

    var NovoHeaderModule = /** @class */ (function () {
        function NovoHeaderModule() {
        }
        return NovoHeaderModule;
    }());
    NovoHeaderModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule],
                    declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                    exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                },] }
    ];

    // NG2
    var NovoModalElement = /** @class */ (function () {
        function NovoModalElement(modalRef) {
            this.modalRef = modalRef;
        }
        return NovoModalElement;
    }());
    NovoModalElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-modal',
                    template: "\n    <ng-content select=\"header,novo-header,novo-card-header\"></ng-content>\n    <ng-content select=\"section,novo-card-content\"></ng-content>\n    <footer class=\"novo-modal-footer\"><ng-content select=\"button,novo-button\"></ng-content></footer>\n  ",
                    host: {
                        class: 'novo-modal',
                    }
                },] }
    ];
    NovoModalElement.ctorParameters = function () { return [
        { type: NovoModalRef }
    ]; };
    var NovoModalNotificationElement = /** @class */ (function () {
        function NovoModalNotificationElement(modalRef) {
            this.modalRef = modalRef;
            this.cancel = new i0.EventEmitter();
            this.modalRef = modalRef;
        }
        NovoModalNotificationElement.prototype.close = function () {
            this.cancel.emit();
            this.modalRef.close();
        };
        NovoModalNotificationElement.prototype.ngOnInit = function () {
            switch (this.type) {
                case 'success':
                    this.iconType = 'bhi-check';
                    break;
                case 'warning':
                    this.iconType = 'bhi-caution-o';
                    break;
                case 'error':
                    this.iconType = 'bhi-caution-o';
                    break;
                case 'custom':
                    this.iconType = "bhi-" + this.icon;
                    break;
                default:
                    break;
            }
        };
        return NovoModalNotificationElement;
    }());
    NovoModalNotificationElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-notification',
                    template: "\n    <novo-button class=\"modal-close\" theme=\"icon\" icon=\"x\" (click)=\"close()\"></novo-button>\n    <header class=\"novo-notification-header\"><ng-content select=\"label,novo-label\"></ng-content></header>\n    <section class=\"novo-notification-body notification-body\">\n      <i class=\"indicator\" [ngClass]=\"iconType\" *ngIf=\"iconType\"></i>\n      <ng-content select=\"h1\"></ng-content>\n      <ng-content select=\"h2\"></ng-content>\n      <ng-content select=\"p\"></ng-content>\n    </section>\n    <footer class=\"novo-notification-footer\"><ng-content select=\"button,novo-button\"></ng-content></footer>\n  ",
                    host: {
                        class: 'novo-notification',
                    }
                },] }
    ];
    NovoModalNotificationElement.ctorParameters = function () { return [
        { type: NovoModalRef }
    ]; };
    NovoModalNotificationElement.propDecorators = {
        type: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        cancel: [{ type: i0.Output }]
    };

    // NG2
    var NovoModalModule = /** @class */ (function () {
        function NovoModalModule() {
        }
        return NovoModalModule;
    }());
    NovoModalModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [i1.OverlayModule, portal.PortalModule, common.CommonModule, NovoButtonModule],
                    declarations: [NovoModalContainerComponent, NovoModalElement, NovoModalNotificationElement],
                    exports: [NovoModalElement, NovoModalNotificationElement],
                    providers: [NovoModalService],
                },] }
    ];

    var QuickNoteResults = /** @class */ (function (_super) {
        __extends(QuickNoteResults, _super);
        function QuickNoteResults(element, labels, ref) {
            var _this = _super.call(this, element, labels, ref) || this;
            _this.labels = labels;
            // Mode that the quick note is in for tagging
            _this.taggingMode = '';
            return _this;
        }
        Object.defineProperty(QuickNoteResults.prototype, "term", {
            get: function () {
                return this._term;
            },
            set: function (value) {
                var _this = this;
                this._term = value.searchTerm;
                this.taggingMode = value.taggingMode;
                this.hasError = false;
                this.isLoading = true;
                this.search(value, this.taggingMode).subscribe(function (results) {
                    _this.matches = _this.isStatic ? _this.filterData(results) : results;
                    _this.isLoading = false;
                }, function () {
                    _this.hasError = true;
                    _this.isLoading = false;
                });
            },
            enumerable: false,
            configurable: true
        });
        QuickNoteResults.prototype.search = function (term, taggingMode) {
            var _this = this;
            var searchCall = this.config.options[taggingMode];
            return rxjs.from(new Promise(function (resolve, reject) {
                // Check if there is match data
                if (searchCall) {
                    // Resolve the data
                    if (Array.isArray(searchCall)) {
                        _this.isStatic = true;
                        // Arrays are returned immediately
                        resolve(_this.structureArray(searchCall));
                    }
                    else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) ||
                        Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        searchCall.then(_this.structureArray.bind(_this)).then(resolve, reject);
                    }
                    else if (typeof searchCall === 'function') {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        searchCall(term).then(_this.structureArray.bind(_this)).then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    // No data gets rejected
                    reject('error');
                }
            }));
        };
        /**
         * @name structureArray
         * @param collection - the data once getData resolves it
         *
         * @description This function structures an array of nodes into an array of objects with a
         * 'name' field by default.
         */
        QuickNoteResults.prototype.structureArray = function (collection) {
            var _this = this;
            if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
                return collection.map(function (item) {
                    return {
                        value: item,
                        label: item,
                    };
                });
            }
            return collection.map(function (data) {
                var value = _this.config.field ? data[_this.config.field[_this.taggingMode]] : data.value || data;
                var label = _this.config.format ? Helpers.interpolate(_this.config.format[_this.taggingMode], data) : data.label || String(value);
                return { value: value, label: label, data: data };
            });
        };
        /**
         * @name selectMatch
         * @param event
         *
         * @description
         */
        QuickNoteResults.prototype.selectMatch = function (event) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            var selected = this.activeMatch;
            if (selected) {
                this.parent.onSelected(this.taggingMode, selected);
                this.parent.hideResults();
            }
            return false;
        };
        return QuickNoteResults;
    }(PickerResults));
    QuickNoteResults.decorators = [
        { type: i0.Component, args: [{
                    selector: 'quick-note-results',
                    host: {
                        class: 'active',
                    },
                    template: "\n    <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n    <novo-list *ngIf=\"matches.length > 0\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n      >\n        <item-content>\n          <p [innerHtml]=\"highlight(match.label, term)\"></p>\n        </item-content>\n      </novo-list-item>\n    </novo-list>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.quickNoteError }}</p>\n    <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.quickNoteEmpty }}</p>\n  "
                },] }
    ];
    QuickNoteResults.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };

    // Value accessor for the component (supports ngModel)
    var QUICK_NOTE_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return QuickNoteElement; }),
        multi: true,
    };
    var QuickNoteElement = /** @class */ (function (_super) {
        __extends(QuickNoteElement, _super);
        function QuickNoteElement(zone, element, componentUtils) {
            var _this = _super.call(this, element) || this;
            _this.zone = zone;
            _this.componentUtils = componentUtils;
            _this.startupFocus = false;
            // Emitter for selects
            _this.focus = new i0.EventEmitter();
            _this.blur = new i0.EventEmitter();
            _this.change = new i0.EventEmitter();
            _this.placeholderVisible = false;
            _this._placeholderElement = null;
            _this.onModelChange = function () { };
            _this.onModelTouched = function () { };
            // Bind to the active change event from the OutsideClick
            _this.onActiveChange.subscribe(function (active) {
                if (!active) {
                    setTimeout(function () {
                        _this.hideResults();
                    });
                }
            });
            return _this;
        }
        QuickNoteElement.prototype.ngOnInit = function () {
            // Make sure we have a proper config
            if (!this.config) {
                throw new Error('No config set for QuickNote!');
            }
            // Make sure that we have triggers
            if (!this.config.triggers) {
                throw new Error('QuickNote config must supply triggers!');
            }
            // Make sure that we have options
            if (!this.config.options) {
                throw new Error('QuickNote config must supply options!');
            }
            // Allow for callers to use a custom results template class in the config
            this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
        };
        QuickNoteElement.prototype.ngOnDestroy = function () {
            var _this = this;
            // Tear down the CKEditor instance
            if (this.ckeInstance) {
                this.ckeInstance.focusManager.blur(true); // Remove focus from editor
                setTimeout(function () {
                    _this.ckeInstance.removeAllListeners();
                    CKEDITOR.instances[_this.ckeInstance.name].destroy();
                    _this.ckeInstance.destroy();
                    _this.ckeInstance = null;
                });
            }
        };
        /**
         * Connect to key/mouse events from CKEditor after the editor has been initialized
         */
        QuickNoteElement.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (!CKEDITOR) {
                console.error('Make sure to include CKEditor sources in your dependencies!');
                return;
            }
            // Replace the textarea with an instance of CKEditor
            this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
            // Set initial value of the note in the editor
            this.writeValue(this.model);
            // Connect to the key event in CKEditor for showing results dropdown
            this.ckeInstance.on('key', function (event) {
                if (!_this.onKey(event.data.domEvent.$)) {
                    event.cancel();
                }
            });
            // Connect to the change event in CKEditor for debouncing user modifications
            this.ckeInstance.on('change', function () {
                // Debounce update
                if (_this.debounceTimeout) {
                    clearTimeout(_this.debounceTimeout);
                }
                _this.debounceTimeout = setTimeout(function () {
                    // Run within the context of this angular element since we don't need to cancel event
                    _this.zone.run(function () {
                        _this.onValueChange();
                    });
                    _this.debounceTimeout = null;
                }, 250);
            });
            // Propagate blur events from CKEditor to the Element's listeners
            this.ckeInstance.on('blur', function (event) {
                _this.showPlaceholder();
                _this.blur.emit(event);
            });
            // Propagate blur events from CKEditor to the Element's listeners
            this.ckeInstance.on('focus', function (event) {
                _this.hidePlaceholder();
                _this.focus.emit(event);
            });
            // Show placeholder if the note is empty, after the editor is instantiated
            this.ckeInstance.on('instanceReady', function (event) {
                _this.showPlaceholder();
                // Set editor to readOnly
                if (_this.config.readOnly) {
                    _this.ckeInstance.setReadOnly(_this.config.readOnly);
                }
            });
        };
        // Set touched on blur
        QuickNoteElement.prototype.onTouched = function (event) {
            this.onModelTouched();
        };
        /**
         * Handles setting the model and the view from the outside caller or the user's typing
         *
         * @param model A model that has a note (html content) and references (array of objects)
         */
        QuickNoteElement.prototype.writeValue = function (model) {
            // Set value of the model
            if (model && (model.references || model.note)) {
                this.model = {
                    note: model.note || '',
                    references: model.references || {},
                };
            }
            else {
                this.model = {
                    note: model,
                    references: {},
                };
            }
            // Set the note html value in the editor
            if (this.ckeInstance) {
                this.ckeInstance.setData(this.model.note);
            }
        };
        QuickNoteElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        QuickNoteElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        /**
         * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
         */
        QuickNoteElement.defaultRenderer = function (symbol, item) {
            return "<a>" + symbol + item.label + "</a>";
        };
        /**
         * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
         */
        QuickNoteElement.prototype.getRenderer = function (taggingMode) {
            return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
        };
        /**
         * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
         * to handle certain behaviors of the picker.
         *
         * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
         * Angular zone of this class.
         *
         * @param event The key press event
         * @return true to allow the event to occur, false to cancel the event
         */
        QuickNoteElement.prototype.onKey = function (event) {
            var _this = this;
            if (event.key) {
                if (this.quickNoteResults) {
                    // Hide results on escape key
                    if (event.key === "Escape" /* Escape */) {
                        this.zone.run(function () {
                            _this.hideResults();
                        });
                        return false;
                    }
                    // Navigation inside the results
                    if (event.key === "ArrowUp" /* ArrowUp */) {
                        this.zone.run(function () {
                            _this.quickNoteResults.instance.prevActiveMatch();
                        });
                        return false;
                    }
                    if (event.key === "ArrowDown" /* ArrowDown */) {
                        this.zone.run(function () {
                            _this.quickNoteResults.instance.nextActiveMatch();
                        });
                        return false;
                    }
                    if (event.key === "Enter" /* Enter */) {
                        this.zone.run(function () {
                            _this.quickNoteResults.instance.selectActiveMatch();
                        });
                        return false;
                    }
                }
                else {
                    // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                    var triggers_1 = this.config.triggers || {};
                    Object.keys(triggers_1).forEach(function (key) {
                        var trigger = triggers_1[key] || {};
                        if (event.key === trigger) {
                            _this.isTagging = true;
                            _this.taggingMode = key;
                        }
                    });
                }
            }
            return true;
        };
        /**
         * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
         * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
         */
        QuickNoteElement.prototype.onValueChange = function () {
            // Get the html text in CKEditor
            var value = this.ckeInstance.getData();
            // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
            var regex = new RegExp(String.fromCharCode(8203), 'g');
            value = value.replace(regex, '');
            // Make sure that any references in the model are still valid
            this.validateReferences();
            // Possibly show results if the user has entered a search term
            this.showResults();
            // Propagate change to ngModel for form validation, and send null if the note is empty
            var newModel = null;
            if (value) {
                newModel = {
                    note: value,
                    references: this.model.references,
                };
            }
            // Inform listeners to the ngModel change event that something has changed
            this.onModelChange(newModel);
            // Inform listeners of the `@Output() change` event that the model has been updated
            this.change.emit(newModel);
            // Inform listeners to the ngModel touched event that something has changed
            this.onTouched();
        };
        /**
         * Creates an instance of the results (called popup) and adds all the bindings to that instance.
         */
        QuickNoteElement.prototype.showResults = function () {
            if (this.isTagging) {
                var searchTerm = this.getSearchTerm();
                if (searchTerm.length) {
                    // Update Matches
                    if (this.quickNoteResults) {
                        // Update existing list
                        this.quickNoteResults.instance.term = {
                            searchTerm: searchTerm,
                            taggingMode: this.taggingMode,
                        };
                    }
                    else {
                        // Create the results DOM element
                        this.quickNoteResults = this.componentUtils.append(this.resultsComponent, this.results);
                        this.quickNoteResults.instance.parent = this;
                        this.quickNoteResults.instance.config = this.config;
                        this.quickNoteResults.instance.term = {
                            searchTerm: searchTerm,
                            taggingMode: this.taggingMode,
                        };
                        this.positionResultsDropdown();
                    }
                }
                else if (this.quickNoteResults) {
                    this.quickNoteResults.destroy();
                    this.quickNoteResults = null;
                }
                // Tell the OutsideClick base class to start listening for an outside clicks
                this.toggleActive(null, true);
            }
        };
        /**
         * Deletes the picker results from the DOM.
         */
        QuickNoteElement.prototype.hideResults = function () {
            this.isTagging = false;
            if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
        };
        /**
         * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
         * parent (this element).
         *
         * @param taggingMode - type of tags we are looking for
         * @param selected - selected object from the picker that has a label and value
         */
        QuickNoteElement.prototype.onSelected = function (taggingMode, selected) {
            // Turn off tagging
            this.isTagging = false;
            // Replace searchTerm with link
            var symbol = this.config.triggers[taggingMode];
            var renderer = this.getRenderer(taggingMode);
            var renderedText = renderer(symbol, selected);
            this.replaceWordAtCursor(renderedText);
            // Add the new reference, if it doesn't already exist
            this.model.references = this.model.references || {};
            this.model.references[taggingMode] = this.model.references[taggingMode] || [];
            var matchingItems = this.model.references[taggingMode].filter(function (item) { return JSON.stringify(item) === JSON.stringify(selected); });
            if (matchingItems.length === 0) {
                this.model.references[taggingMode].push(selected);
            }
            // Update the quick note with the changes due to the user's selection of an item in the dropdown
            this.onValueChange();
        };
        /**
         * Convenience method that gets the current word that the cursor is on, minus the tag.
         * Also, trims any whitespace before/after the term to aid in searching.
         */
        QuickNoteElement.prototype.getSearchTerm = function () {
            var word = this.getWordAtCursor().trim();
            if (this.isTagging) {
                var symbol = this.config.triggers[this.taggingMode];
                if (!word.includes(symbol)) {
                    this.hideResults();
                    return '';
                }
                word = word.slice(word.indexOf(symbol) + symbol.length);
            }
            return word;
        };
        /**
         * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
         * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
         *
         * @returns plain text string (removes all html formatting)
         */
        QuickNoteElement.prototype.getWordAtCursor = function () {
            var range = this.ckeInstance.getSelection().getRanges()[0];
            var start = range.startContainer;
            if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
                var text = start.getText();
                var symbol = this.config.triggers[this.taggingMode];
                var wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
                if (wordStart > 0) {
                    var beforeSymbol = text.charAt(wordStart - 1);
                    // We don't want to trigger the lookup call unless the symbol was preceded by whitespace
                    if (beforeSymbol !== '\u200B' && /\S/.test(beforeSymbol)) {
                        return '';
                    }
                }
                else if (start.hasPrevious() && /\S$/.test(start.getPrevious().getText())) {
                    // When wordStart is <= 0, we need to check the previous node's text to see if it ended with whitespace or not
                    return '';
                }
                var wordEnd = text.indexOf(' ', range.startOffset + 1);
                if (wordStart === -1) {
                    wordStart = 0;
                }
                if (wordEnd === -1) {
                    wordEnd = text.length;
                }
                return text.substring(wordStart, wordEnd);
            }
            // Selection starts at the 0 index of the text node or there's no previous text node in contents
            return '';
        };
        /**
         * Replaces the word that the user is on with the given html.
         *
         * CKEditor gives us access to the current line of html in the editor, so we replace the content of
         * the line, replacing only the current word.
         */
        QuickNoteElement.prototype.replaceWordAtCursor = function (newWord) {
            var originalWord = this.getWordAtCursor().trim();
            var range = this.ckeInstance.getSelection().getRanges()[0];
            var start = range.startContainer;
            var parentNode = start.getParent();
            if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
                var line = parentNode.getHtml();
                var index = line.lastIndexOf(originalWord);
                if (index >= 0) {
                    // Add a space after the replaced word so that multiple references can be added back to back
                    var newLine = line.substring(0, index) + newWord + ' ' + line.substring(index + originalWord.length);
                    parentNode.setHtml(newLine);
                    // Place selection at the end of the line
                    range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                    this.ckeInstance.getSelection().selectRanges([range]);
                }
            }
        };
        /**
         * Returns current references, minus any from the model that have been removed from the editor.
         */
        QuickNoteElement.prototype.validateReferences = function () {
            var _this = this;
            var html = this.ckeInstance.document.getBody().getHtml();
            // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
            // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
            var ampRegex = new RegExp('&amp;', 'g');
            html = html.replace(ampRegex, '&');
            Object.keys(this.model.references).forEach(function (taggingMode) {
                var array = _this.model.references[taggingMode] || [];
                var symbol = _this.config.triggers[taggingMode];
                var renderer = _this.getRenderer(taggingMode);
                _this.model.references[taggingMode] = array.filter(function (item) {
                    var renderedText = renderer(symbol, item);
                    return html.includes(renderedText);
                });
                // If no references, then delete the key
                if (_this.model.references[taggingMode].length === 0) {
                    delete _this.model.references[taggingMode];
                }
            });
        };
        /**
         * Configures the CKEditor for QuickNote functionality.
         *
         * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
         * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
         * Removes plugins and turns off setting to allow browser based spell checking.
         */
        QuickNoteElement.prototype.getCKEditorConfig = function () {
            // Use the height of the wrapper element to set the initial height of the editor, then
            // set it to 100% to allow the editor to resize using the grippy.
            var editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
            this.wrapper.nativeElement.style.setProperty('height', '100%');
            return {
                enterMode: CKEDITOR.ENTER_BR,
                shiftEnterMode: CKEDITOR.ENTER_P,
                disableNativeSpellChecker: false,
                height: editorHeight,
                startupFocus: this.startupFocus,
                removePlugins: 'liststyle,tabletools,contextmenu',
                toolbar: [
                    {
                        name: 'basicstyles',
                        items: [
                            'Styles',
                            'FontSize',
                            'Bold',
                            'Italic',
                            'Underline',
                            'TextColor',
                            '-',
                            'NumberedList',
                            'BulletedList',
                            'Outdent',
                            'Indent',
                            'Link',
                        ],
                    },
                ],
            };
        };
        /**
         * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
         */
        QuickNoteElement.prototype.getCursorPosition = function () {
            var range = this.ckeInstance.getSelection().getRanges()[0];
            var parentElement = range.startContainer.$.parentElement;
            var editorElement = this.ckeInstance.editable().$;
            // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
            // be inserted in order to locate the cursor position.
            var cursorElement = document.createElement('img');
            cursorElement.setAttribute('src', 'null');
            cursorElement.setAttribute('width', '0');
            cursorElement.setAttribute('height', '0');
            parentElement.appendChild(cursorElement);
            var cursorPosition = {
                top: cursorElement.offsetTop - editorElement.scrollTop,
                left: cursorElement.offsetLeft - editorElement.scrollLeft,
            };
            cursorElement.remove();
            return cursorPosition;
        };
        /**
         * Positions the results dropdown based on the location of the cursor in the text field
         */
        QuickNoteElement.prototype.positionResultsDropdown = function () {
            var MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
            var MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
            var cursorPosition = this.getCursorPosition();
            var marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
            // Check that the margin is within the visible bounds
            marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
            marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
            // Set the margin-top of the dropdown
            this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
        };
        /**
         * Returns the height in pixels of the content area - the text that the user has entered.
         */
        QuickNoteElement.prototype.getContentHeight = function () {
            var contentHeight = 0;
            if (this.ckeInstance.ui &&
                this.ckeInstance.ui.contentsElement &&
                this.ckeInstance.ui.contentsElement.$ &&
                this.ckeInstance.ui.contentsElement.$.style) {
                var cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
                if (cssText.indexOf('height: ') !== -1) {
                    var height = cssText.split('height: ')[1];
                    height = height.split('px')[0];
                    contentHeight = parseInt(height, 10);
                }
            }
            return contentHeight;
        };
        /**
         * Show the placeholder text if the editor is empty
         */
        QuickNoteElement.prototype.showPlaceholder = function () {
            if (!this.ckeInstance.getData() && !this.startupFocus) {
                this.ckeInstance.editable().getParent().$.appendChild(this.placeholderElement);
                this.placeholderVisible = true;
            }
        };
        /**
         * Hide the placeholder text by removing the placeholder element from the DOM
         */
        QuickNoteElement.prototype.hidePlaceholder = function () {
            if (this.placeholderVisible) {
                this.ckeInstance.editable().getParent().$.removeChild(this.placeholderElement);
                this.placeholderVisible = false;
            }
        };
        Object.defineProperty(QuickNoteElement.prototype, "placeholderElement", {
            /**
             * Get or create the single placeholder object that is constructed only when needed.
             */
            get: function () {
                if (!this._placeholderElement) {
                    this._placeholderElement = document.createElement('div');
                    this._placeholderElement.className = 'placeholder';
                    this._placeholderElement.style.cssText =
                        'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
                    this._placeholderElement.textContent = this.placeholder;
                }
                return this._placeholderElement;
            },
            enumerable: false,
            configurable: true
        });
        return QuickNoteElement;
    }(OutsideClick));
    QuickNoteElement.TOOLBAR_HEIGHT = 40; // in pixels - configured by stylesheet
    QuickNoteElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-quick-note',
                    providers: [QUICK_NOTE_VALUE_ACCESSOR],
                    template: " <div class=\"quick-note-wrapper\" #wrapper><textarea #host></textarea> <span #results></span></div> "
                },] }
    ];
    QuickNoteElement.ctorParameters = function () { return [
        { type: i0.NgZone },
        { type: i0.ElementRef },
        { type: ComponentUtils }
    ]; };
    QuickNoteElement.propDecorators = {
        wrapper: [{ type: i0.ViewChild, args: ['wrapper', { static: true },] }],
        host: [{ type: i0.ViewChild, args: ['host', { static: true },] }],
        results: [{ type: i0.ViewChild, args: ['results', { read: i0.ViewContainerRef, static: true },] }],
        config: [{ type: i0.Input }],
        startupFocus: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        focus: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        change: [{ type: i0.Output }]
    };

    // NG2
    var NovoQuickNoteModule = /** @class */ (function () {
        function NovoQuickNoteModule() {
        }
        return NovoQuickNoteModule;
    }());
    NovoQuickNoteModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoLoadingModule, NovoListModule],
                    declarations: [QuickNoteElement, QuickNoteResults],
                    exports: [QuickNoteElement, QuickNoteResults],
                },] }
    ];

    var NOVO_RADIO_GROUP = new i0.InjectionToken('RadioGroupComponent');

    // NG2
    // make radio-buttons ids unique
    var nextId$3 = 0;
    // Value accessor for the component (supports ngModel)
    var RADIO_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoRadioElement; }),
        multi: true,
    };
    var NovoRadioElement = /** @class */ (function () {
        function NovoRadioElement(radioGroup, ref) {
            this.radioGroup = radioGroup;
            this.ref = ref;
            this._uniqueId = "novo-radio-" + ++nextId$3;
            this.id = this._uniqueId;
            this.name = this._uniqueId;
            this.tabindex = 0;
            this.vertical = false;
            this.button = false;
            this.theme = 'secondary';
            this.change = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this._checked = false;
            this._value = false;
            this._disabled = false;
            this.onChangeCallback = function (_) {
                // placeholder
            };
            this.onTouchedCallback = function () {
                // placeholder
            };
            this.radioGroup = radioGroup;
        }
        Object.defineProperty(NovoRadioElement.prototype, "checked", {
            get: function () {
                return this._checked;
            },
            set: function (value) {
                value = !!value;
                if (this._checked !== value) {
                    this._checked = value;
                    if (this._checked && this.radioGroup && this.radioGroup.value !== this.value) {
                        this.radioGroup.value = this.value;
                    }
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this.value !== value) {
                    this._value = value;
                    if (this.radioGroup) {
                        this._checked = this.radioGroup.value === this.value;
                    }
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioElement.prototype, "disabled", {
            // Disabled State
            get: function () {
                return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
            },
            set: function (value) {
                this._disabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        NovoRadioElement.prototype.ngOnInit = function () {
            if (this.radioGroup) {
                this.checked = this.radioGroup.value === this._value;
                this.vertical = this.radioGroup.appearance === 'vertical';
                this.name = this.radioGroup.name;
            }
        };
        NovoRadioElement.prototype._onInputChange = function (event) {
            event.stopPropagation();
            this.change.emit(event);
            this.checked = true;
            if (this.radioGroup) {
                this.radioGroup.value = this.value;
            }
        };
        NovoRadioElement.prototype.writeValue = function (value) {
            this.value = value;
            this.ref.markForCheck();
        };
        NovoRadioElement.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NovoRadioElement.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NovoRadioElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        return NovoRadioElement;
    }());
    NovoRadioElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-radio',
                    providers: [RADIO_VALUE_ACCESSOR],
                    template: "\n    <input\n      type=\"radio\"\n      [id]=\"id\"\n      [name]=\"name\"\n      [checked]=\"checked\"\n      [tabIndex]=\"tabindex\"\n      [disabled]=\"disabled\"\n      (focus)=\"focus.emit($event)\"\n      (blur)=\"blur.emit($event)\"\n      (change)=\"_onInputChange($event)\"\n    />\n    <label [attr.for]=\"id\" [class.disabled]=\"disabled\">\n      <novo-button\n        *ngIf=\"button\"\n        [ngClass]=\"{ unchecked: !checked, checked: checked, 'has-icon': !!icon }\"\n        [theme]=\"theme\"\n        [color]=\"checked ? color : null\"\n        [icon]=\"icon\"\n        [size]=\"size\"\n      >\n        {{ label }}\n      </novo-button>\n      <div *ngIf=\"!button\" class=\"novo-radio-button-label\">\n        <i [ngClass]=\"{ 'bhi-radio-empty': !checked, 'bhi-radio-filled': checked }\"></i>\n        {{ label }}\n        <ng-content></ng-content>\n      </div>\n    </label>\n  ",
                    host: {
                        '[class.vertical]': 'vertical',
                    }
                },] }
    ];
    NovoRadioElement.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: i0.Inject, args: [NOVO_RADIO_GROUP,] }, { type: i0.Optional }] },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoRadioElement.propDecorators = {
        id: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        vertical: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        button: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        size: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        change: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        checked: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.disabled',] }]
    };

    // make radio-button-group ids unique
    var nextId$4 = 0;
    // Value accessor for the component (supports ngModel)
    var RADIOGROUP_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoRadioGroup; }),
        multi: true,
    };
    // Boilerplate for applying mixins
    var NovoRadioGroupBase = /** @class */ (function () {
        function NovoRadioGroupBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
            this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
            this._parentForm = _parentForm;
            this._parentFormGroup = _parentFormGroup;
            this.ngControl = ngControl;
        }
        return NovoRadioGroupBase;
    }());
    var NovoRadioGroupMixins = mixinErrorState(NovoRadioGroupBase);
    var NovoRadioGroup = /** @class */ (function (_super) {
        __extends(NovoRadioGroup, _super);
        function NovoRadioGroup() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this._uniqueId = "novo-radio-group-" + ++nextId$4;
            /** Tab index for the chip list. */
            _this._tabIndex = 0;
            /** User defined tab index. */
            _this._userTabIndex = null;
            _this.controlType = 'radio-group';
            /** @docs-private Implemented as part of NovoFieldControl. */
            _this.lastKeyValue = null;
            _this.id = _this._uniqueId;
            _this.tabindex = 0;
            _this.change = new i0.EventEmitter();
            _this.blur = new i0.EventEmitter();
            _this._name = _this._uniqueId;
            _this._value = false;
            _this._required = false;
            _this._disabled = false;
            _this._appearance = 'horizontal';
            _this.onChangeCallback = function (_) {
                // placeholder
            };
            _this.onTouchedCallback = function () {
                // placeholder
            };
            return _this;
        }
        Object.defineProperty(NovoRadioGroup.prototype, "appearance", {
            get: function () {
                return this._appearance;
            },
            set: function (value) {
                if (this._appearance !== value) {
                    this._appearance = value;
                    this._updateRadioButtonAppearance();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this._value !== value) {
                    this._value = value;
                    this._updateSelectedRadioFromValue();
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                if (this._name !== value) {
                    this._updateRadioButtonNames();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "disabled", {
            get: function () {
                return this.ngControl ? !!this.ngControl.disabled : this._disabled;
            },
            set: function (value) {
                this._disabled = coercion.coerceBooleanProperty(value);
                this._updateRadioButtonDisabled();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "required", {
            /**
             * Implemented as part of NovoFieldControl.
             * @docs-private
             */
            get: function () {
                return this._required;
            },
            set: function (value) {
                this._required = coercion.coerceBooleanProperty(value);
                this.stateChanges.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "placeholder", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return this._placeholder;
            },
            set: function (value) {
                this._placeholder = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            enumerable: false,
            configurable: true
        });
        NovoRadioGroup.prototype.ngAfterContentInit = function () {
            this._updateRadioButtonAppearance();
            this._updateRadioButtonNames();
            this._updateSelectedRadioFromValue();
        };
        NovoRadioGroup.prototype.writeValue = function (value) {
            this.value = value;
        };
        NovoRadioGroup.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NovoRadioGroup.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NovoRadioGroup.prototype._updateRadioButtonAppearance = function () {
            var _this = this;
            if (this._radios) {
                this._radios.forEach(function (radio) {
                    radio.vertical = _this.appearance === 'vertical';
                });
            }
        };
        NovoRadioGroup.prototype._updateRadioButtonNames = function () {
            var _this = this;
            if (this._radios) {
                this._radios.forEach(function (radio) {
                    radio.name = _this.name;
                });
            }
        };
        NovoRadioGroup.prototype._updateRadioButtonDisabled = function () {
            var _this = this;
            if (this._radios) {
                this._radios.forEach(function (radio) {
                    radio.disabled = _this.disabled;
                });
            }
        };
        NovoRadioGroup.prototype._updateSelectedRadioFromValue = function () {
            var _this = this;
            if (this._radios) {
                this._radios.forEach(function (radio) {
                    radio.checked = _this.value === radio.value;
                    if (radio.checked) {
                        _this._selected = radio;
                    }
                });
            }
        };
        Object.defineProperty(NovoRadioGroup.prototype, "focused", {
            /** Whether any radio buttons has focus. */
            get: function () {
                // todo: implement this.
                return false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "empty", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return this.value === null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoRadioGroup.prototype, "shouldLabelFloat", {
            /** Implemented as part of NovoFieldControl. */
            get: function () {
                return !this.empty || this.focused;
            },
            enumerable: false,
            configurable: true
        });
        /** Implemented as part of NovoFieldControl. */
        NovoRadioGroup.prototype.setDescribedByIds = function (ids) {
            this._ariaDescribedby = ids.join(' ');
        };
        /** Implemented as part of NovoFieldControl. */
        NovoRadioGroup.prototype.onContainerClick = function (event) {
            this.focus();
        };
        /**
         * Focuses the first non-disabled chip in this chip list, or the associated input when there
         * are no eligible chips.
         */
        NovoRadioGroup.prototype.focus = function (options) {
            if (this.disabled) {
                return;
            }
            // TODO
        };
        return NovoRadioGroup;
    }(NovoRadioGroupMixins));
    NovoRadioGroup.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-radio-group',
                    providers: [
                        RADIOGROUP_VALUE_ACCESSOR,
                        { provide: NOVO_RADIO_GROUP, useExisting: NovoRadioGroup },
                        { provide: NovoFieldControl, useExisting: NovoRadioGroup },
                    ],
                    template: '<ng-content></ng-content>',
                    host: {
                        class: 'novo-radio-group',
                        '[class.novo-radio-group-appearance-horizontal]': 'appearance=="horizontal"',
                        '[class.novo-radio-group-appearance-vertical]': 'appearance=="vertical"',
                    }
                },] }
    ];
    NovoRadioGroup.propDecorators = {
        id: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        errorStateMatcher: [{ type: i0.Input }],
        change: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        _radios: [{ type: i0.ContentChildren, args: [i0.forwardRef(function () { return NovoRadioElement; }), { descendants: true },] }],
        appearance: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        disabled: [{ type: i0.HostBinding, args: ['class.disabled',] }, { type: i0.Input }],
        required: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }]
    };

    // NG2
    var NovoRadioModule = /** @class */ (function () {
        function NovoRadioModule() {
        }
        return NovoRadioModule;
    }());
    NovoRadioModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoButtonModule],
                    declarations: [NovoRadioElement, NovoRadioGroup],
                    exports: [NovoRadioElement, NovoRadioGroup],
                },] }
    ];

    // NG2
    var NovoTipWellElement = /** @class */ (function () {
        function NovoTipWellElement(labels, sanitizer) {
            this.labels = labels;
            this.sanitizer = sanitizer;
            this.button = true;
            this.sanitize = true;
            this.confirmed = new i0.EventEmitter();
            this.isActive = true;
            this.isActive = true;
            // Check if localStorage is enabled
            this.isLocalStorageEnabled = (function () {
                var isEnabled = false;
                if (typeof localStorage === 'object') {
                    try {
                        localStorage.setItem('lsTest', '1');
                        localStorage.removeItem('lsTest');
                        isEnabled = true;
                    }
                    catch (e) {
                        console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                    }
                }
                return isEnabled;
            })();
        }
        Object.defineProperty(NovoTipWellElement.prototype, "tipWithStyles", {
            // Trusts the HTML in order to show CSS styles
            get: function () {
                if (!this._tipWithStyles || this._lastTipStyled !== this.tip) {
                    this._tipWithStyles = this.sanitizer.bypassSecurityTrustHtml(this.tip);
                    this._lastTipStyled = this.tip;
                }
                return this._tipWithStyles;
            },
            enumerable: false,
            configurable: true
        });
        NovoTipWellElement.prototype.ngOnInit = function () {
            this.tip = this.tip || '';
            this.buttonText = this.buttonText || this.labels.okGotIt;
            this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
            this.icon = this.icon || null;
            // Set a (semi) unique name for the tip-well
            this.name = this.name || Math.round(Math.random() * 100);
            this.localStorageKey = "novo-tw_" + this.name;
            // Check localStorage for state
            if (this.isLocalStorageEnabled) {
                var storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
                this.isActive = storedValue !== false;
            }
        };
        NovoTipWellElement.prototype.hideTip = function () {
            if (this.isLocalStorageEnabled) {
                localStorage.setItem(this.localStorageKey, JSON.stringify(false));
            }
            this.isActive = false;
            this.confirmed.emit();
        };
        return NovoTipWellElement;
    }());
    NovoTipWellElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tip-well',
                    template: "\n    <div *ngIf=\"isActive\">\n      <div>\n        <i class=\"bhi-{{ icon }}\" *ngIf=\"icon\" [attr.data-automation-id]=\"'novo-tip-well-icon-' + name\"></i>\n        <p *ngIf=\"sanitize\" [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\">{{ tip }}</p>\n        <p *ngIf=\"!sanitize\" [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\" [innerHTML]=\"tipWithStyles\"></p>\n      </div>\n      <button theme=\"dialogue\" size=\"small\" (click)=\"hideTip()\" *ngIf=\"button\" [attr.data-automation-id]=\"'novo-tip-well-button-' + name\">\n        {{ buttonText }}\n      </button>\n    </div>\n  ",
                    host: {
                        '[class.active]': 'isActive',
                    }
                },] }
    ];
    NovoTipWellElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: platformBrowser.DomSanitizer }
    ]; };
    NovoTipWellElement.propDecorators = {
        name: [{ type: i0.Input }],
        tip: [{ type: i0.Input }],
        buttonText: [{ type: i0.Input }],
        button: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        sanitize: [{ type: i0.Input }],
        confirmed: [{ type: i0.Output }]
    };

    // NG2
    var NovoTipWellModule = /** @class */ (function () {
        function NovoTipWellModule() {
        }
        return NovoTipWellModule;
    }());
    NovoTipWellModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoButtonModule],
                    declarations: [NovoTipWellElement],
                    exports: [NovoTipWellElement],
                },] }
    ];

    // NG2
    var NovoFormModule = /** @class */ (function () {
        function NovoFormModule() {
        }
        return NovoFormModule;
    }());
    NovoFormModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        i1.OverlayModule,
                        forms.ReactiveFormsModule,
                        NovoRadioModule,
                        NovoTilesModule,
                        NovoSelectModule,
                        NovoPickerModule,
                        NovoChipsModule,
                        NovoDatePickerModule,
                        NovoTimePickerModule,
                        NovoNovoCKEditorModule,
                        NovoFormExtrasModule,
                        NovoQuickNoteModule,
                        NovoDateTimePickerModule,
                        NovoHeaderModule,
                        NovoTooltipModule,
                        NovoDragulaModule,
                        angularImask.IMaskDirectiveModule,
                        angular2TextMask.TextMaskModule,
                        NovoTipWellModule,
                        NovoModalModule,
                        NovoButtonModule,
                        NovoAceEditorModule,
                        NovoCommonModule,
                        NovoCheckboxModule,
                        NovoIconModule,
                        NovoRadioModule,
                        NovoSwitchModule,
                    ],
                    declarations: [
                        NovoAutoSize,
                        NovoControlElement,
                        NovoDynamicFormElement,
                        NovoFormElement,
                        NovoFieldsetElement,
                        NovoFieldsetHeaderElement,
                        ControlConfirmModal,
                        ControlPromptModal,
                        NovoControlGroup,
                        NovoControlTemplates,
                    ],
                    exports: [
                        NovoAutoSize,
                        NovoDynamicFormElement,
                        NovoControlElement,
                        NovoFormElement,
                        NovoFieldsetHeaderElement,
                        NovoControlGroup,
                        NovoControlTemplates,
                    ],
                    providers: [NovoTemplateService],
                },] }
    ];

    /**
     * Throws an exception when two NovoSidenav are matching the same position.
     * @docs-private
     */
    function throwNovoDuplicatedSidenavError(position) {
        throw Error("A drawer was already declared for 'position=\"" + position + "\"'");
    }
    /** Configures whether drawers should use auto sizing by default. */
    var NOVO_LAYOUT_DEFAULT_AUTOSIZE = new i0.InjectionToken('NOVO_LAYOUT_DEFAULT_AUTOSIZE', {
        providedIn: 'root',
        factory: NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY,
    });
    /**
     * Used to provide a drawer container to a drawer while avoiding circular references.
     * @docs-private
     */
    var NOVO_LAYOUT_CONTAINER = new i0.InjectionToken('NOVO_LAYOUT_CONTAINER');
    /** @docs-private */
    function NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY() {
        return false;
    }

    var NovoLayoutContent = /** @class */ (function (_super) {
        __extends(NovoLayoutContent, _super);
        function NovoLayoutContent(_changeDetectorRef, _container, // NovoLayoutContainer
        elementRef, scrollDispatcher, ngZone) {
            var _this = _super.call(this, elementRef, scrollDispatcher, ngZone) || this;
            _this._changeDetectorRef = _changeDetectorRef;
            _this._container = _container;
            return _this;
        }
        NovoLayoutContent.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._container._contentMarginChanges.subscribe(function () {
                _this._changeDetectorRef.markForCheck();
            });
        };
        NovoLayoutContent.prototype.getHostElement = function () {
            return this.elementRef.nativeElement;
        };
        return NovoLayoutContent;
    }(i1.CdkScrollable));
    NovoLayoutContent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-layout-content',
                    exportAs: 'novoLayoutContent',
                    template: '<ng-content></ng-content>',
                    host: {
                        class: 'novo-layout-content',
                    },
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None
                },] }
    ];
    NovoLayoutContent.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Inject, args: [NOVO_LAYOUT_CONTAINER,] }] },
        { type: i0.ElementRef },
        { type: i1.ScrollDispatcher },
        { type: i0.NgZone }
    ]; };

    var NovoRailComponent = /** @class */ (function (_super) {
        __extends(NovoRailComponent, _super);
        function NovoRailComponent(elementRef, scrollDispatcher, ngZone) {
            return _super.call(this, elementRef, scrollDispatcher, ngZone) || this;
        }
        NovoRailComponent.prototype.ngAfterContentInit = function () { };
        return NovoRailComponent;
    }(i1.CdkScrollable));
    NovoRailComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-rail',
                    template: "\n    <div class=\"novo-rail-contents\">\n      <ng-content></ng-content>\n    </div>\n  ",
                    host: {
                        class: 'novo-rail',
                    },
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None
                },] }
    ];
    NovoRailComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i1.ScrollDispatcher },
        { type: i0.NgZone }
    ]; };

    /**
     * Animations used by the Material drawers.
     * @docs-private
     */
    var novoSidenavAnimations = {
        /** Animation that slides a drawer in and out. */
        transformDrawer: animations.trigger('transform', [
            // We remove the `transform` here completely, rather than setting it to zero, because:
            // 1. Having a transform can cause elements with ripples or an animated
            //    transform to shift around in Chrome with an RTL layout (see #10023).
            // 2. 3d transforms causes text to appear blurry on IE and Edge.
            animations.state('open, open-instant', animations.style({
                transform: 'none',
                visibility: 'visible',
            })),
            animations.state('void', animations.style({
                // Avoids the shadow showing up when closed in SSR.
                'box-shadow': 'none',
                visibility: 'hidden',
            })),
            animations.transition('void => open-instant', animations.animate('0ms')),
            animations.transition('void <=> open, open-instant => void', animations.animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
        ]),
    };

    var NovoSidenavComponent = /** @class */ (function () {
        function NovoSidenavComponent(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {
            var _this = this;
            this._elementRef = _elementRef;
            this._focusTrapFactory = _focusTrapFactory;
            this._focusMonitor = _focusMonitor;
            this._platform = _platform;
            this._ngZone = _ngZone;
            this._doc = _doc;
            this._container = _container;
            this._fixedInViewport = false;
            this._fixedTopGap = 0;
            this._fixedBottomGap = 0;
            this._elementFocusedBeforeDrawerWasOpened = null;
            /** Whether the drawer is initialized. Used for disabling the initial animation. */
            this._enableAnimations = false;
            this._position = 'start';
            this._mode = 'over';
            this._disableClose = false;
            this._opened = false;
            /** Emits whenever the drawer has started animating. */
            this._animationStarted = new rxjs.Subject();
            /** Emits whenever the drawer is done animating. */
            this._animationEnd = new rxjs.Subject();
            /** Current state of the sidenav animation. */
            // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator
            // metadata is not inherited by child classes, instead the host binding data is defined in a way
            // that can be inherited.
            // tslint:disable:no-host-decorator-in-concrete
            this._animationState = 'void';
            /** Event emitted when the drawer open state is changed. */
            this.openedChange =
                // Note this has to be async in order to avoid some issues with two-bindings (see #8872).
                new i0.EventEmitter(/* isAsync */ true);
            /** Event emitted when the drawer has been opened. */
            this._openedStream = this.openedChange.pipe(operators.filter(function (o) { return o; }), operators.map(function () { }));
            /** Event emitted when the drawer has started opening. */
            this.openedStart = this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState.indexOf('open') === 0; }), operators.mapTo(undefined));
            /** Event emitted when the drawer has been closed. */
            this._closedStream = this.openedChange.pipe(operators.filter(function (o) { return !o; }), operators.map(function () { }));
            /** Event emitted when the drawer has started closing. */
            this.closedStart = this._animationStarted.pipe(operators.filter(function (e) { return e.fromState !== e.toState && e.toState === 'void'; }), operators.mapTo(undefined));
            /** Emits when the component is destroyed. */
            this._destroyed = new rxjs.Subject();
            /** Event emitted when the drawer's position changes. */
            // tslint:disable-next-line:no-output-on-prefix
            this.onPositionChanged = new i0.EventEmitter();
            /**
             * An observable that emits when the drawer mode changes. This is used by the drawer container to
             * to know when to when the mode changes so it can adapt the margins on the content.
             */
            this._modeChanged = new rxjs.Subject();
            this.openedChange.subscribe(function (opened) {
                if (opened) {
                    if (_this._doc) {
                        _this._elementFocusedBeforeDrawerWasOpened = _this._doc.activeElement;
                    }
                    _this._takeFocus();
                }
                else if (_this._isFocusWithinDrawer()) {
                    _this._restoreFocus();
                }
            });
            /**
             * Listen to `keydown` events outside the zone so that change detection is not run every
             * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed
             * and we don't have close disabled.
             */
            this._ngZone.runOutsideAngular(function () {
                rxjs.fromEvent(_this._elementRef.nativeElement, 'keydown')
                    .pipe(operators.filter(function (event) {
                    return event.key === "Escape" /* Escape */ && !_this.disableClose && !keycodes.hasModifierKey(event);
                }), operators.takeUntil(_this._destroyed))
                    .subscribe(function (event) { return _this._ngZone.run(function () {
                    _this.close();
                    event.stopPropagation();
                    event.preventDefault();
                }); });
            });
            // We need a Subject with distinctUntilChanged, because the `done` event
            // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
            this._animationEnd
                .pipe(operators.distinctUntilChanged(function (x, y) {
                return x.fromState === y.fromState && x.toState === y.toState;
            }))
                .subscribe(function (event) {
                var fromState = event.fromState, toState = event.toState;
                if ((toState.indexOf('open') === 0 && fromState === 'void') || (toState === 'void' && fromState.indexOf('open') === 0)) {
                    _this.openedChange.emit(_this._opened);
                }
            });
        }
        Object.defineProperty(NovoSidenavComponent.prototype, "fixedInViewport", {
            /** Whether the sidenav is fixed in the viewport. */
            get: function () {
                return this._fixedInViewport;
            },
            set: function (value) {
                this._fixedInViewport = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "fixedTopGap", {
            /**
             * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed
             * mode.
             */
            get: function () {
                return this._fixedTopGap;
            },
            set: function (value) {
                this._fixedTopGap = coercion.coerceNumberProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "fixedBottomGap", {
            /**
             * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in
             * fixed mode.
             */
            get: function () {
                return this._fixedBottomGap;
            },
            set: function (value) {
                this._fixedBottomGap = coercion.coerceNumberProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "position", {
            /** The side that the drawer is attached to. */
            get: function () {
                return this._position;
            },
            set: function (value) {
                // Make sure we have a valid value.
                value = value === 'end' ? 'end' : 'start';
                if (value !== this._position) {
                    this._position = value;
                    this.onPositionChanged.emit();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "mode", {
            /** Mode of the drawer; one of 'over', 'push' or 'side'. */
            get: function () {
                return this._mode;
            },
            set: function (value) {
                this._mode = value;
                this._updateFocusTrapState();
                this._modeChanged.next();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "disableClose", {
            /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */
            get: function () {
                return this._disableClose;
            },
            set: function (value) {
                this._disableClose = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "autoFocus", {
            /**
             * Whether the drawer should focus the first focusable element automatically when opened.
             * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly
             * enabled, focus will be moved into the sidenav in `side` mode as well.
             */
            get: function () {
                var value = this._autoFocus;
                // Note that usually we disable auto focusing in `side` mode, because we don't know how the
                // sidenav is being used, but in some cases it still makes sense to do it. If the consumer
                // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.
                return value == null ? this.mode !== 'side' : value;
            },
            set: function (value) {
                this._autoFocus = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSidenavComponent.prototype, "opened", {
            /**
             * Whether the drawer is opened. We overload this because we trigger an event when it
             * starts or end.
             */
            get: function () {
                return this._opened;
            },
            set: function (value) {
                this.toggle(coercion.coerceBooleanProperty(value));
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Moves focus into the drawer. Note that this works even if
         * the focus trap is disabled in `side` mode.
         */
        NovoSidenavComponent.prototype._takeFocus = function () {
            var _this = this;
            if (!this.autoFocus || !this._focusTrap) {
                return;
            }
            this._focusTrap.focusInitialElementWhenReady().then(function (hasMovedFocus) {
                // If there were no focusable elements, focus the sidenav itself so the keyboard navigation
                // still works. We need to check that `focus` is a function due to Universal.
                if (!hasMovedFocus && typeof _this._elementRef.nativeElement.focus === 'function') {
                    _this._elementRef.nativeElement.focus();
                }
            });
        };
        /**
         * Restores focus to the element that was originally focused when the drawer opened.
         * If no element was focused at that time, the focus will be restored to the drawer.
         */
        NovoSidenavComponent.prototype._restoreFocus = function () {
            if (!this.autoFocus) {
                return;
            }
            // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.
            if (this._elementFocusedBeforeDrawerWasOpened) {
                this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);
            }
            else {
                this._elementRef.nativeElement.blur();
            }
            this._elementFocusedBeforeDrawerWasOpened = null;
            this._openedVia = null;
        };
        /** Whether focus is currently within the drawer. */
        NovoSidenavComponent.prototype._isFocusWithinDrawer = function () {
            var _a;
            var activeEl = (_a = this._doc) === null || _a === void 0 ? void 0 : _a.activeElement;
            return !!activeEl && this._elementRef.nativeElement.contains(activeEl);
        };
        NovoSidenavComponent.prototype.ngAfterContentInit = function () {
            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
            this._updateFocusTrapState();
        };
        NovoSidenavComponent.prototype.ngAfterContentChecked = function () {
            // Enable the animations after the lifecycle hooks have run, in order to avoid animating
            // drawers that are open by default. When we're on the server, we shouldn't enable the
            // animations, because we don't want the drawer to animate the first time the user sees
            // the page.
            if (this._platform.isBrowser) {
                this._enableAnimations = true;
            }
        };
        NovoSidenavComponent.prototype.ngOnDestroy = function () {
            if (this._focusTrap) {
                this._focusTrap.destroy();
            }
            this._animationStarted.complete();
            this._animationEnd.complete();
            this._modeChanged.complete();
            this._destroyed.next();
            this._destroyed.complete();
        };
        /**
         * Open the drawer.
         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
         * Used for focus management after the sidenav is closed.
         */
        NovoSidenavComponent.prototype.open = function (openedVia) {
            return this.toggle(true, openedVia);
        };
        /** Close the drawer. */
        NovoSidenavComponent.prototype.close = function () {
            return this.toggle(false);
        };
        /** Closes the drawer with context that the backdrop was clicked. */
        NovoSidenavComponent.prototype._closeViaBackdropClick = function () {
            // If the drawer is closed upon a backdrop click, we always want to restore focus. We
            // don't need to check whether focus is currently in the drawer, as clicking on the
            // backdrop causes blurring of the active element.
            return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);
        };
        /**
         * Toggle this drawer.
         * @param isOpen Whether the drawer should be open.
         * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
         * Used for focus management after the sidenav is closed.
         */
        NovoSidenavComponent.prototype.toggle = function (isOpen, openedVia) {
            if (isOpen === void 0) { isOpen = !this.opened; }
            // If the focus is currently inside the drawer content and we are closing the drawer,
            // restore the focus to the initially focused element (when the drawer opened).
            return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);
        };
        /**
         * Toggles the opened state of the drawer.
         * @param isOpen Whether the drawer should open or close.
         * @param restoreFocus Whether focus should be restored on close.
         * @param openedVia Focus origin that can be optionally set when opening a drawer. The
         *   origin will be used later when focus is restored on drawer close.
         */
        NovoSidenavComponent.prototype._setOpen = function (isOpen, restoreFocus, openedVia) {
            var _this = this;
            if (openedVia === void 0) { openedVia = 'program'; }
            this._opened = isOpen;
            if (isOpen) {
                this._animationState = this._enableAnimations ? 'open' : 'open-instant';
                this._openedVia = openedVia;
            }
            else {
                this._animationState = 'void';
                if (restoreFocus) {
                    this._restoreFocus();
                }
            }
            this._updateFocusTrapState();
            return new Promise(function (resolve) {
                _this.openedChange.pipe(operators.take(1)).subscribe(function (open) { return resolve(open ? 'open' : 'close'); });
            });
        };
        NovoSidenavComponent.prototype._getWidth = function () {
            return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;
        };
        /** Updates the enabled state of the focus trap. */
        NovoSidenavComponent.prototype._updateFocusTrapState = function () {
            if (this._focusTrap) {
                // The focus trap is only enabled when the drawer is open in any mode other than side.
                this._focusTrap.enabled = this.opened && this.mode !== 'side';
            }
        };
        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
        // In Ivy the `host` bindings will be merged when this class is extended, whereas in
        // ViewEngine they're overwritten.
        NovoSidenavComponent.prototype._animationStartListener = function (event) {
            this._animationStarted.next(event);
        };
        // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
        // In Ivy the `host` bindings will be merged when this class is extended, whereas in
        // ViewEngine they're overwritten.
        NovoSidenavComponent.prototype._animationDoneListener = function (event) {
            this._animationEnd.next(event);
        };
        return NovoSidenavComponent;
    }());
    NovoSidenavComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-sidenav',
                    exportAs: 'novoSidenav',
                    template: "<div class=\"novo-sidenav-inner-container\">\n  <ng-content></ng-content>\n</div>",
                    animations: [novoSidenavAnimations.transformDrawer],
                    host: {
                        class: 'novo-sidenav',
                        tabIndex: '-1',
                        // must prevent the browser from aligning text based on value
                        '[attr.align]': 'null',
                        '[class.novo-sidenav-end]': 'position === "end"',
                        '[class.novo-sidenav-over]': 'mode === "over"',
                        '[class.novo-sidenav-push]': 'mode === "push"',
                        '[class.novo-sidenav-side]': 'mode === "side"',
                        '[class.novo-sidenav-opened]': 'opened',
                        '[class.novo-sidenav-fixed]': 'fixedInViewport',
                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',
                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',
                    },
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".novo-sidenav-inner-container{-webkit-overflow-scrolling:touch;height:100%;overflow:auto;width:100%}.novo-sidenav-fixed{position:fixed}.novo-sidenav{bottom:0;box-sizing:border-box;display:block;outline:0;overflow-y:auto;position:relative;position:absolute;top:0;transform:translate3d(-100%,0,0);z-index:4;z-index:3}.novo-sidenav[theme=black]{background:#000;color:#fff}.novo-sidenav[theme=white]{background:#fff;color:#3d464d}.novo-sidenav[theme=gray],.novo-sidenav[theme=grey]{background:#9e9e9e;color:#3d464d}.novo-sidenav[theme=bright],.novo-sidenav[theme=offWhite]{background:#f7f7f7;color:#3d464d}.novo-sidenav[theme=light]{background:#dbdbdb;color:#3d464d}.novo-sidenav[theme=neutral]{background:#4f5361;color:#fff}.novo-sidenav[theme=dark]{background:#3d464d;color:#fff}.novo-sidenav[theme=orange]{background:#ff6900;color:#3d464d}.novo-sidenav[theme=navigation]{background:#202945;color:#fff}.novo-sidenav[theme=skyBlue]{background:#009bdf;color:#fff}.novo-sidenav[theme=steel]{background:#5b6770;color:#fff}.novo-sidenav[theme=metal]{background:#637893;color:#fff}.novo-sidenav[theme=sand]{background:#f4f4f4;color:#3d464d}.novo-sidenav[theme=silver]{background:#e2e2e2;color:#3d464d}.novo-sidenav[theme=stone]{background:#bebebe;color:#3d464d}.novo-sidenav[theme=ash]{background:#a0a0a0;color:#3d464d}.novo-sidenav[theme=slate]{background:#707070;color:#fff}.novo-sidenav[theme=onyx]{background:#526980;color:#fff}.novo-sidenav[theme=charcoal]{background:#282828;color:#fff}.novo-sidenav[theme=moonlight]{background:#1a242f;color:#fff}.novo-sidenav[theme=midnight]{background:#202945;color:#fff}.novo-sidenav[theme=darkness]{background:#161f27;color:#fff}.novo-sidenav[theme=navy]{background:#0d2d42;color:#fff}.novo-sidenav[theme=aqua]{background:#3bafda;color:#3d464d}.novo-sidenav[theme=ocean]{background:#4a89dc;color:#fff}.novo-sidenav[theme=mint]{background:#37bc9b;color:#3d464d}.novo-sidenav[theme=grass]{background:#8cc152;color:#fff}.novo-sidenav[theme=sunflower]{background:#f6b042;color:#fff}.novo-sidenav[theme=bittersweet]{background:#eb6845;color:#fff}.novo-sidenav[theme=grapefruit]{background:#da4453;color:#fff}.novo-sidenav[theme=carnation]{background:#d770ad;color:#fff}.novo-sidenav[theme=lavender]{background:#967adc;color:#fff}.novo-sidenav[theme=mountain]{background:#9678b6;color:#fff}.novo-sidenav[theme=info],.novo-sidenav[theme=positive]{background:#4a89dc;color:#fff}.novo-sidenav[theme=success]{background:#8cc152;color:#fff}.novo-sidenav[theme=danger],.novo-sidenav[theme=error],.novo-sidenav[theme=negative]{background:#da4453;color:#fff}.novo-sidenav[theme=warning]{background:#f6b042;color:#fff}.novo-sidenav[theme=empty]{background:#cccdcc;color:#3d464d}.novo-sidenav[theme=disabled]{background:#bebebe;color:#3d464d}.novo-sidenav[theme=background]{background:#f7f7f7;color:#3d464d}.novo-sidenav[theme=backgroundDark]{background:#e2e2e2;color:#3d464d}.novo-sidenav[theme=presentation]{background:#5b6770;color:#fff}.novo-sidenav[theme=bullhorn]{background:#ff6900;color:#3d464d}.novo-sidenav[theme=pulse]{background:#3bafda;color:#3d464d}.novo-sidenav[theme=company]{background:#39d;color:#fff}.novo-sidenav[theme=candidate]{background:#4b7;color:#fff}.novo-sidenav[theme=lead]{background:#a69;color:#fff}.novo-sidenav[theme=clientcontact],.novo-sidenav[theme=contact]{background:#fa4;color:#fff}.novo-sidenav[theme=opportunity]{background:#625;color:#fff}.novo-sidenav[theme=job],.novo-sidenav[theme=joborder]{background:#b56;color:#fff}.novo-sidenav[theme=submission]{background:#a9adbb;color:#3d464d}.novo-sidenav[theme=sendout]{background:#747884;color:#fff}.novo-sidenav[theme=placement]{background:#0b344f;color:#fff}.novo-sidenav[theme=note]{background:#747884;color:#fff}.novo-sidenav[theme=contract]{background:#454ea0;color:#fff}.novo-sidenav[theme=billableCharge],.novo-sidenav[theme=corporateUser],.novo-sidenav[theme=credential],.novo-sidenav[theme=distributionList],.novo-sidenav[theme=earnCode],.novo-sidenav[theme=invoiceStatement],.novo-sidenav[theme=jobCode],.novo-sidenav[theme=payableCharge],.novo-sidenav[theme=person],.novo-sidenav[theme=user]{background:#696d79;color:#fff}.novo-sidenav,[dir=rtl] .novo-sidenav.novo-sidenav-end{border-right:1px solid var(--border)}.novo-sidenav.novo-sidenav-end,[dir=rtl] .novo-sidenav{border-left:1px solid var(--border);border-right:none}.novo-sidenav.novo-sidenav-side{z-index:2}.novo-sidenav.novo-sidenav-end{right:0}.novo-sidenav.novo-sidenav-end,[dir=rtl] .novo-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .novo-sidenav.novo-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}"]
                },] }
    ];
    NovoSidenavComponent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: a11y.FocusTrapFactory },
        { type: a11y.FocusMonitor },
        { type: platform.Platform },
        { type: i0.NgZone },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [common.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_LAYOUT_CONTAINER,] }] }
    ]; };
    NovoSidenavComponent.propDecorators = {
        fixedInViewport: [{ type: i0.Input }],
        fixedTopGap: [{ type: i0.Input }],
        fixedBottomGap: [{ type: i0.Input }],
        position: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        disableClose: [{ type: i0.Input }],
        autoFocus: [{ type: i0.Input }],
        opened: [{ type: i0.Input }],
        _animationState: [{ type: i0.HostBinding, args: ['@transform',] }],
        openedChange: [{ type: i0.Output }],
        _openedStream: [{ type: i0.Output, args: ['opened',] }],
        openedStart: [{ type: i0.Output }],
        _closedStream: [{ type: i0.Output, args: ['closed',] }],
        closedStart: [{ type: i0.Output }],
        onPositionChanged: [{ type: i0.Output, args: ['positionChanged',] }],
        _animationStartListener: [{ type: i0.HostListener, args: ['@transform.start', ['$event'],] }],
        _animationDoneListener: [{ type: i0.HostListener, args: ['@transform.done', ['$event'],] }]
    };

    var NovoLayoutContainer = /** @class */ (function () {
        function NovoLayoutContainer(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize, _animationMode) {
            var _this = this;
            if (defaultAutosize === void 0) { defaultAutosize = false; }
            this._dir = _dir;
            this._element = _element;
            this._ngZone = _ngZone;
            this._changeDetectorRef = _changeDetectorRef;
            this._animationMode = _animationMode;
            /** Drawers that belong to this container. */
            this._drawers = new i0.QueryList();
            /** Event emitted when the drawer backdrop is clicked. */
            this.backdropClick = new i0.EventEmitter();
            /** Emits when the component is destroyed. */
            this._destroyed = new rxjs.Subject();
            /** Emits on every ngDoCheck. Used for debouncing reflows. */
            this._doCheckSubject = new rxjs.Subject();
            /**
             * Margins to be applied to the content. These are used to push / shrink the drawer content when a
             * drawer is open. We use margin rather than transform even for push mode because transform breaks
             * fixed position elements inside of the transformed element.
             */
            this._contentMargins = { left: null, right: null };
            this._contentMarginChanges = new rxjs.Subject();
            // If a `Dir` directive exists up the tree, listen direction changes
            // and update the left/right properties to point to the proper start/end.
            if (_dir) {
                _dir.change.pipe(operators.takeUntil(this._destroyed)).subscribe(function () {
                    _this._validateDrawers();
                    _this.updateContentMargins();
                });
            }
            // Since the minimum width of the sidenav depends on the viewport width,
            // we need to recompute the margins if the viewport changes.
            viewportRuler
                .change()
                .pipe(operators.takeUntil(this._destroyed))
                .subscribe(function () { return _this.updateContentMargins(); });
            this._autosize = defaultAutosize;
        }
        Object.defineProperty(NovoLayoutContainer.prototype, "start", {
            /** The drawer child with the `start` position. */
            get: function () {
                return this._start;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoLayoutContainer.prototype, "end", {
            /** The drawer child with the `end` position. */
            get: function () {
                return this._end;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoLayoutContainer.prototype, "autosize", {
            /**
             * Whether to automatically resize the container whenever
             * the size of any of its drawers changes.
             *
             * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring
             * the drawers on every change detection cycle. Can be configured globally via the
             * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.
             */
            get: function () {
                return this._autosize;
            },
            set: function (value) {
                this._autosize = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoLayoutContainer.prototype, "hasBackdrop", {
            /**
             * Whether the drawer container should have a backdrop while one of the sidenavs is open.
             * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`
             * mode as well.
             */
            get: function () {
                if (this._backdropOverride == null) {
                    return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';
                }
                return this._backdropOverride;
            },
            set: function (value) {
                this._backdropOverride = value == null ? null : coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoLayoutContainer.prototype, "scrollable", {
            /** Reference to the CdkScrollable instance that wraps the scrollable content. */
            get: function () {
                return this._userContent || this._content;
            },
            enumerable: false,
            configurable: true
        });
        NovoLayoutContainer.prototype.ngAfterContentInit = function () {
            var _this = this;
            this._allDrawers.changes
                .pipe(operators.startWith(this._allDrawers), operators.takeUntil(this._destroyed))
                .subscribe(function (drawer) {
                _this._drawers.reset(drawer.filter(function (item) { return !item._container || item._container === _this; }));
                _this._drawers.notifyOnChanges();
            });
            this._drawers.changes.pipe(operators.startWith(null)).subscribe(function () {
                _this._validateDrawers();
                _this._drawers.forEach(function (drawer) {
                    _this._watchDrawerToggle(drawer);
                    _this._watchDrawerPosition(drawer);
                    _this._watchDrawerMode(drawer);
                });
                if (!_this._drawers.length || _this._isDrawerOpen(_this._start) || _this._isDrawerOpen(_this._end)) {
                    _this.updateContentMargins();
                }
                _this._changeDetectorRef.markForCheck();
            });
            // Avoid hitting the NgZone through the debounce timeout.
            this._ngZone.runOutsideAngular(function () {
                _this._doCheckSubject
                    .pipe(operators.debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps
                operators.takeUntil(_this._destroyed))
                    .subscribe(function () { return _this.updateContentMargins(); });
            });
        };
        NovoLayoutContainer.prototype.ngOnDestroy = function () {
            this._contentMarginChanges.complete();
            this._doCheckSubject.complete();
            this._drawers.destroy();
            this._destroyed.next();
            this._destroyed.complete();
        };
        /** Calls `open` of both start and end drawers */
        NovoLayoutContainer.prototype.open = function () {
            this._drawers.forEach(function (drawer) { return drawer.open(); });
        };
        /** Calls `close` of both start and end drawers */
        NovoLayoutContainer.prototype.close = function () {
            this._drawers.forEach(function (drawer) { return drawer.close(); });
        };
        /**
         * Recalculates and updates the inline styles for the content. Note that this should be used
         * sparingly, because it causes a reflow.
         */
        NovoLayoutContainer.prototype.updateContentMargins = function () {
            var _this = this;
            // 1. For drawers in `over` mode, they don't affect the content.
            // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the
            //    left margin (for left drawer) or right margin (for right the drawer).
            // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by
            //    adding to the left or right margin and simultaneously subtracting the same amount of
            //    margin from the other side.
            var left = 0;
            var right = 0;
            if (this._left && this._left.opened) {
                if (this._left.mode === 'side') {
                    left += this._left._getWidth();
                }
                else if (this._left.mode === 'push') {
                    var width = this._left._getWidth();
                    left += width;
                    right -= width;
                }
            }
            if (this._right && this._right.opened) {
                if (this._right.mode === 'side') {
                    right += this._right._getWidth();
                }
                else if (this._right.mode === 'push') {
                    var width = this._right._getWidth();
                    right += width;
                    left -= width;
                }
            }
            // If either `right` or `left` is zero, don't set a style to the element. This
            // allows users to specify a custom size via CSS class in SSR scenarios where the
            // measured widths will always be zero. Note that we reset to `null` here, rather
            // than below, in order to ensure that the types in the `if` below are consistent.
            left = left || null;
            right = right || null;
            if (left !== this._contentMargins.left || right !== this._contentMargins.right) {
                this._contentMargins = { left: left, right: right };
                // Pull back into the NgZone since in some cases we could be outside. We need to be careful
                // to do it only when something changed, otherwise we can end up hitting the zone too often.
                this._ngZone.run(function () { return _this._contentMarginChanges.next(_this._contentMargins); });
            }
        };
        NovoLayoutContainer.prototype.ngDoCheck = function () {
            var _this = this;
            // If users opted into autosizing, do a check every change detection cycle.
            if (this._autosize && this._isPushed()) {
                // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.
                this._ngZone.runOutsideAngular(function () { return _this._doCheckSubject.next(); });
            }
        };
        /**
         * Subscribes to drawer events in order to set a class on the main container element when the
         * drawer is open and the backdrop is visible. This ensures any overflow on the container element
         * is properly hidden.
         */
        NovoLayoutContainer.prototype._watchDrawerToggle = function (drawer) {
            var _this = this;
            drawer._animationStarted
                .pipe(operators.filter(function (event) { return event.fromState !== event.toState; }), operators.takeUntil(this._drawers.changes))
                .subscribe(function (event) {
                // Set the transition class on the container so that the animations occur. This should not
                // be set initially because animations should only be triggered via a change in state.
                if (event.toState !== 'open-instant' && _this._animationMode !== 'NoopAnimations') {
                    _this._element.nativeElement.classList.add('mat-drawer-transition');
                }
                _this.updateContentMargins();
                _this._changeDetectorRef.markForCheck();
            });
            if (drawer.mode !== 'side') {
                drawer.openedChange.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () { return _this._setContainerClass(drawer.opened); });
            }
        };
        /**
         * Subscribes to drawer onPositionChanged event in order to
         * re-validate drawers when the position changes.
         */
        NovoLayoutContainer.prototype._watchDrawerPosition = function (drawer) {
            var _this = this;
            if (!drawer) {
                return;
            }
            // NOTE: We need to wait for the microtask queue to be empty before validating,
            // since both drawers may be swapping positions at the same time.
            drawer.onPositionChanged.pipe(operators.takeUntil(this._drawers.changes)).subscribe(function () {
                _this._ngZone.onMicrotaskEmpty.pipe(operators.take(1)).subscribe(function () {
                    _this._validateDrawers();
                });
            });
        };
        /** Subscribes to changes in drawer mode so we can run change detection. */
        NovoLayoutContainer.prototype._watchDrawerMode = function (drawer) {
            var _this = this;
            if (drawer) {
                drawer._modeChanged.pipe(operators.takeUntil(rxjs.merge(this._drawers.changes, this._destroyed))).subscribe(function () {
                    _this.updateContentMargins();
                    _this._changeDetectorRef.markForCheck();
                });
            }
        };
        /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */
        NovoLayoutContainer.prototype._setContainerClass = function (isAdd) {
            var classList = this._element.nativeElement.classList;
            var className = 'mat-drawer-container-has-open';
            if (isAdd) {
                classList.add(className);
            }
            else {
                classList.remove(className);
            }
        };
        /** Validate the state of the drawer children components. */
        NovoLayoutContainer.prototype._validateDrawers = function () {
            var _this = this;
            this._start = this._end = null;
            // Ensure that we have at most one start and one end drawer.
            this._drawers.forEach(function (drawer) {
                if (drawer.position === 'end') {
                    if (_this._end != null) {
                        throw new Error('Duplication drawers at end');
                        // throwMatDuplicatedDrawerError('end');
                    }
                    _this._end = drawer;
                }
                else {
                    if (_this._start != null) {
                        throw new Error('Duplication drawers at start');
                    }
                    _this._start = drawer;
                }
            });
            this._right = this._left = null;
            // Detect if we're LTR or RTL.
            if (this._dir && this._dir.value === 'rtl') {
                this._left = this._end;
                this._right = this._start;
            }
            else {
                this._left = this._start;
                this._right = this._end;
            }
        };
        /** Whether the container is being pushed to the side by one of the drawers. */
        NovoLayoutContainer.prototype._isPushed = function () {
            return (this._isDrawerOpen(this._start) && this._start.mode !== 'over') || (this._isDrawerOpen(this._end) && this._end.mode !== 'over');
        };
        NovoLayoutContainer.prototype._onBackdropClicked = function () {
            this.backdropClick.emit();
            this._closeModalDrawersViaBackdrop();
        };
        NovoLayoutContainer.prototype._closeModalDrawersViaBackdrop = function () {
            var _this = this;
            // Close all open drawers where closing is not disabled and the mode is not `side`.
            [this._start, this._end]
                .filter(function (drawer) { return drawer && !drawer.disableClose && _this._canHaveBackdrop(drawer); })
                .forEach(function (drawer) { return drawer._closeViaBackdropClick(); });
        };
        NovoLayoutContainer.prototype._isShowingBackdrop = function () {
            return ((this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||
                (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end)));
        };
        NovoLayoutContainer.prototype._canHaveBackdrop = function (drawer) {
            return drawer.mode !== 'side' || !!this._backdropOverride;
        };
        NovoLayoutContainer.prototype._isDrawerOpen = function (drawer) {
            return drawer != null && drawer.opened;
        };
        return NovoLayoutContainer;
    }());
    NovoLayoutContainer.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-layout-container',
                    exportAs: 'novoLayoutContainer',
                    template: "<div class=\"novo-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\"\n  [class.novo-drawer-shown]=\"_isShowingBackdrop()\"></div>\n\n<ng-content select=\"novo-sidenav\"></ng-content>\n\n<div class=\"novo-layout-content-container\"\n  [class.and-has-rail]=\"_rail\"\n  [style.margin-left.px]=\"_contentMargins.left\"\n  [style.margin-right.px]=\"_contentMargins.right\">\n  <ng-content select=\"novo-rail\"></ng-content>\n\n  <ng-content select=\"novo-layout-content\">\n  </ng-content>\n\n  <novo-layout-content *ngIf=\"!_content\" cdkScrollable>\n    <ng-content></ng-content>\n  </novo-layout-content>\n</div>",
                    host: {
                        class: 'novo-layout-container',
                        '[class.novo-layout-container-explicit-backdrop]': '_backdropOverride',
                    },
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None,
                    providers: [
                        {
                            provide: NOVO_LAYOUT_CONTAINER,
                            useExisting: NovoLayoutContainer,
                        },
                    ],
                    styles: [".novo-layout-container{-webkit-overflow-scrolling:touch;box-sizing:border-box;display:block;height:100%;overflow:hidden;position:relative;z-index:1}.novo-layout-container[fullscreen].novo-layout-container-has-open{overflow:hidden}.novo-layout-container.novo-layout-container-explicit-backdrop .novo-drawer-side{z-index:3}.ng-animate-disabled .novo-layout-container .novo-drawer-backdrop,.ng-animate-disabled .novo-layout-container .novo-layout-content,.novo-layout-container.ng-animate-disabled .novo-drawer-backdrop,.novo-layout-container.ng-animate-disabled .novo-layout-content{transition:none}.novo-drawer-backdrop{background:#000;bottom:0;display:block;left:0;opacity:.5;position:absolute;right:0;top:0;visibility:hidden;z-index:3}.novo-drawer-backdrop.novo-drawer-shown{visibility:visible}.novo-drawer-transition .novo-drawer-backdrop{transition-duration:.1s;transition-property:background-color,visibility;transition-timing-function:ease-out}.novo-layout-content{display:block;height:100%;overflow:auto;position:relative;z-index:1}.novo-drawer-transition .novo-layout-content{transition-duration:.1s;transition-property:transform,margin-left,margin-right;transition-timing-function:ease-out}.novo-rail{align-items:flex-start;background:var(--background-bright);display:inline-flex;flex-direction:column;height:inherit;height:100%;justify-content:flex-start;min-width:5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content}.novo-rail .novo-rail-contents{display:inline-flex;flex-direction:column;width:-webkit-fill-available}.novo-layout-content-container{display:grid;grid-template-columns:1fr;height:100%}.novo-layout-content-container.and-has-rail{grid-template-columns:auto 1fr}"]
                },] }
    ];
    NovoLayoutContainer.ctorParameters = function () { return [
        { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },
        { type: i0.ElementRef },
        { type: i0.NgZone },
        { type: i0.ChangeDetectorRef },
        { type: i1.ViewportRuler },
        { type: undefined, decorators: [{ type: i0.Inject, args: [NOVO_LAYOUT_DEFAULT_AUTOSIZE,] }] },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [animations$1.ANIMATION_MODULE_TYPE,] }] }
    ]; };
    NovoLayoutContainer.propDecorators = {
        _allDrawers: [{ type: i0.ContentChildren, args: [NovoSidenavComponent, {
                        // We need to use `descendants: true`, because Ivy will no longer match
                        // indirect descendants if it's left as false.
                        descendants: true,
                    },] }],
        _rail: [{ type: i0.ContentChild, args: [NovoRailComponent,] }],
        _content: [{ type: i0.ContentChild, args: [NovoLayoutContent,] }],
        _userContent: [{ type: i0.ViewChild, args: [NovoLayoutContent,] }],
        autosize: [{ type: i0.Input }],
        hasBackdrop: [{ type: i0.Input }],
        backdropClick: [{ type: i0.Output }]
    };

    // NG2
    var NovoLayoutModule = /** @class */ (function () {
        function NovoLayoutModule() {
        }
        return NovoLayoutModule;
    }());
    NovoLayoutModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent, NovoRailComponent],
                    exports: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent, NovoRailComponent],
                },] }
    ];

    var MenuContentComponent = /** @class */ (function () {
        function MenuContentComponent() {
            this.menuItems = [];
            this.isLeaf = false;
            ///
            this.openSubMenu = new i0.EventEmitter();
            this.closeLeafMenu = new i0.EventEmitter();
            this.closeAllMenus = new i0.EventEmitter();
            // @ViewChild('menu') public menuElement: ElementRef;
            // @ViewChildren('li') public menuItemElements: QueryList<ElementRef>;
            this.autoFocus = false;
            this.subscription = new rxjs.Subscription();
        }
        MenuContentComponent.prototype.ngOnInit = function () { };
        MenuContentComponent.prototype.ngAfterViewInit = function () {
            var _this = this;
            if (this.autoFocus) {
                setTimeout(function () { return _this.focus(); });
            }
            this.overlay.updatePosition();
            this._keyManager = new a11y.ActiveDescendantKeyManager(this.menu.menuOptions).withWrap();
        };
        MenuContentComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        MenuContentComponent.prototype.focus = function () {
            if (this.autoFocus) {
                // this.menuElement.nativeElement.focus();
            }
        };
        MenuContentComponent.prototype.stopEvent = function ($event) {
            $event.stopPropagation();
        };
        MenuContentComponent.prototype.isMenuItemEnabled = function (menuItem) {
            return this.evaluateIfFunction(menuItem && menuItem.menuItemEnabled);
        };
        MenuContentComponent.prototype.isMenuItemVisible = function (menuItem) {
            return this.evaluateIfFunction(menuItem && menuItem.menuItemVisible);
        };
        MenuContentComponent.prototype.evaluateIfFunction = function (value) {
            if (value instanceof Function) {
                return value(this.item);
            }
            return value;
        };
        MenuContentComponent.prototype.isDisabled = function (link) {
            return link.enabled && !link.enabled(this.item);
        };
        MenuContentComponent.prototype.onKeyEvent = function (event) {
            if (!this.isLeaf) {
                return;
            }
            this._keyManager.onKeydown(event);
        };
        MenuContentComponent.prototype.keyboardOpenSubMenu = function (event) {
            if (!this.isLeaf) {
                return;
            }
            this.cancelEvent(event);
            var menuItem = this.menuItems[this._keyManager.activeItemIndex];
            if (menuItem) {
                this.onOpenSubMenu(menuItem);
            }
        };
        MenuContentComponent.prototype.keyboardMenuItemSelect = function (event) {
            if (!this.isLeaf) {
                return;
            }
            this.cancelEvent(event);
            var menuItem = this.menuItems[this._keyManager.activeItemIndex];
            var option = this._keyManager.activeItem;
            option._clickViaInteraction();
            // if (menuItem) {
            //   this.onMenuItemSelect(menuItem, event);
            // }
        };
        MenuContentComponent.prototype.onCloseLeafMenu = function (event) {
            if (!this.isLeaf) {
                return;
            }
            this.cancelEvent(event);
            this.closeLeafMenu.emit({ exceptRootMenu: event.key === "ArrowLeft" /* ArrowLeft */, event: event });
        };
        // @HostListener('document:contextmenu', ['$event'])
        MenuContentComponent.prototype.closeMenu = function (event) {
            if (event.type === 'click' && event.button === 2) {
                return;
            }
            this.closeAllMenus.emit({ event: event });
        };
        MenuContentComponent.prototype.onMouseLeave = function (event) {
            if (this.isLeaf) {
                this.closeLeafMenu.emit({ exceptRootMenu: true, event: event });
            }
        };
        MenuContentComponent.prototype.onOpenSubMenu = function (menuItem, event) {
            // const anchorElementRef = this.menuItemElements.toArray()[this._keyManager.activeItemIndex];
            // const anchorElement = anchorElementRef && anchorElementRef.nativeElement;
            // this.openSubMenu.emit({
            //   anchorElement,
            //   menu: menuItem.subMenu,
            //   event,
            //   item: this.item,
            //   // parentMenu: this,
            // });
        };
        MenuContentComponent.prototype.onMenuItemSelect = function (menuItem, event) {
            event.preventDefault();
            event.stopPropagation();
            this.onOpenSubMenu(menuItem, event);
            // if (!menuItem.subMenu) {
            //   menuItem.triggerExecute(this.item, event);
            // }
        };
        MenuContentComponent.prototype.cancelEvent = function (event) {
            if (!event) {
                return;
            }
            var target = event.target;
            if (['INPUT', 'TEXTAREA', 'SELECT'].indexOf(target.tagName) > -1 || target.isContentEditable) {
                return;
            }
            event.preventDefault();
            event.stopPropagation();
        };
        return MenuContentComponent;
    }());
    MenuContentComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'menu-content',
                    template: "<div class=\"menu-container novo-menu\" [ngClass]=\"menuClass\" tabindex=\"0\">\n    <ul #menu class=\"menu\" style=\"position: static; float: none;\" tabindex=\"0\">\n      <ng-container *ngFor=\"let menuItem of menuItems; let i = index\">\n        <ng-template [ngTemplateOutlet]=\"menuItem.template\" [ngTemplateOutletContext]=\"{ $implicit: item }\"></ng-template>\n        <!-- <novo-icon class=\"sub-menu-caret\" suffix *ngIf=\"!!menuItem.subMenu\" size=\"small\" color=\"ash\">expand</novo-icon> -->\n      </ng-container>\n    </ul>\n  </div> ",
                    styles: [":host .passive{clear:both;display:block;font-weight:400;padding:3px 20px;white-space:nowrap}:host .menu-container{width:180px}:host .menu-container .menu{-webkit-padding-start:0!important;background-color:var(--background-bright);box-shadow:0 -1px 3px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);cursor:default;list-style:none;padding-inline-start:0!important}:host .menu-container .menu :hover{background:rgba(74,137,220,.1);color:#3d464d}:host .menu-container .menu :active{background:rgba(74,137,220,.4)}:host .menu-container .menu .menu-item-container{align-items:center;display:flex;position:relative}:host .menu-container .menu .menu-item-container .sub-menu-caret{position:absolute;right:.5rem}:host .menu-container .menu .menu-item{align-items:center;box-sizing:border-box;color:inherit;cursor:pointer;display:inline;display:flex;flex:1;font-size:var(--font-size-text);font-weight:400;gap:1rem;margin:0;padding:1rem 1rem 1rem 1.25rem;transition:.2s ease-out;transition-property:color,opacity;vertical-align:middle}:host .menu-container .menu .menu-item.text-nowrap{white-space:nowrap}:host .menu-container .menu .menu-item.text-ellipsis{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}:host .menu-container .menu .menu-item.text-size-default{font-size:inherit}:host .menu-container .menu .menu-item.text-size-body{font-size:1.3rem}:host .menu-container .menu .menu-item.text-size-xs{font-size:1rem}:host .menu-container .menu .menu-item.text-size-sm{font-size:1.2rem}:host .menu-container .menu .menu-item.text-size-md{font-size:1.3rem}:host .menu-container .menu .menu-item.text-size-lg{font-size:1.6rem}:host .menu-container .menu .menu-item.text-size-xl{font-size:2rem}:host .menu-container .menu .menu-item.text-size-2xl{font-size:2.6rem}:host .menu-container .menu .menu-item.text-size-3xl{font-size:3.2rem}:host .menu-container .menu .menu-item.text-size-smaller{font-size:.8em}:host .menu-container .menu .menu-item.text-size-larger{font-size:1.2em}:host .menu-container .menu .menu-item.text-color-black{color:#000}:host .menu-container .menu .menu-item.text-color-white{color:#fff}:host .menu-container .menu .menu-item.text-color-gray,:host .menu-container .menu .menu-item.text-color-grey{color:#9e9e9e}:host .menu-container .menu .menu-item.text-color-bright,:host .menu-container .menu .menu-item.text-color-offWhite{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-light{color:#dbdbdb}:host .menu-container .menu .menu-item.text-color-neutral{color:#4f5361}:host .menu-container .menu .menu-item.text-color-dark{color:#3d464d}:host .menu-container .menu .menu-item.text-color-orange{color:#ff6900}:host .menu-container .menu .menu-item.text-color-navigation{color:#202945}:host .menu-container .menu .menu-item.text-color-skyBlue{color:#009bdf}:host .menu-container .menu .menu-item.text-color-steel{color:#5b6770}:host .menu-container .menu .menu-item.text-color-metal{color:#637893}:host .menu-container .menu .menu-item.text-color-sand{color:#f4f4f4}:host .menu-container .menu .menu-item.text-color-silver{color:#e2e2e2}:host .menu-container .menu .menu-item.text-color-stone{color:#bebebe}:host .menu-container .menu .menu-item.text-color-ash{color:#a0a0a0}:host .menu-container .menu .menu-item.text-color-slate{color:#707070}:host .menu-container .menu .menu-item.text-color-onyx{color:#526980}:host .menu-container .menu .menu-item.text-color-charcoal{color:#282828}:host .menu-container .menu .menu-item.text-color-moonlight{color:#1a242f}:host .menu-container .menu .menu-item.text-color-midnight{color:#202945}:host .menu-container .menu .menu-item.text-color-darkness{color:#161f27}:host .menu-container .menu .menu-item.text-color-navy{color:#0d2d42}:host .menu-container .menu .menu-item.text-color-aqua{color:#3bafda}:host .menu-container .menu .menu-item.text-color-ocean{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-mint{color:#37bc9b}:host .menu-container .menu .menu-item.text-color-grass{color:#8cc152}:host .menu-container .menu .menu-item.text-color-sunflower{color:#f6b042}:host .menu-container .menu .menu-item.text-color-bittersweet{color:#eb6845}:host .menu-container .menu .menu-item.text-color-grapefruit{color:#da4453}:host .menu-container .menu .menu-item.text-color-carnation{color:#d770ad}:host .menu-container .menu .menu-item.text-color-lavender{color:#967adc}:host .menu-container .menu .menu-item.text-color-mountain{color:#9678b6}:host .menu-container .menu .menu-item.text-color-info,:host .menu-container .menu .menu-item.text-color-positive{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-success{color:#8cc152}:host .menu-container .menu .menu-item.text-color-danger,:host .menu-container .menu .menu-item.text-color-error,:host .menu-container .menu .menu-item.text-color-negative{color:#da4453}:host .menu-container .menu .menu-item.text-color-warning{color:#f6b042}:host .menu-container .menu .menu-item.text-color-empty{color:#cccdcc}:host .menu-container .menu .menu-item.text-color-disabled{color:#bebebe}:host .menu-container .menu .menu-item.text-color-background{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-backgroundDark{color:#e2e2e2}:host .menu-container .menu .menu-item.text-color-presentation{color:#5b6770}:host .menu-container .menu .menu-item.text-color-bullhorn{color:#ff6900}:host .menu-container .menu .menu-item.text-color-pulse{color:#3bafda}:host .menu-container .menu .menu-item.text-color-company{color:#39d}:host .menu-container .menu .menu-item.text-color-candidate{color:#4b7}:host .menu-container .menu .menu-item.text-color-lead{color:#a69}:host .menu-container .menu .menu-item.text-color-clientcontact,:host .menu-container .menu .menu-item.text-color-contact{color:#fa4}:host .menu-container .menu .menu-item.text-color-opportunity{color:#625}:host .menu-container .menu .menu-item.text-color-job,:host .menu-container .menu .menu-item.text-color-joborder{color:#b56}:host .menu-container .menu .menu-item.text-color-submission{color:#a9adbb}:host .menu-container .menu .menu-item.text-color-sendout{color:#747884}:host .menu-container .menu .menu-item.text-color-placement{color:#0b344f}:host .menu-container .menu .menu-item.text-color-note{color:#747884}:host .menu-container .menu .menu-item.text-color-contract{color:#454ea0}:host .menu-container .menu .menu-item.text-color-billableCharge,:host .menu-container .menu .menu-item.text-color-corporateUser,:host .menu-container .menu .menu-item.text-color-credential,:host .menu-container .menu .menu-item.text-color-distributionList,:host .menu-container .menu .menu-item.text-color-earnCode,:host .menu-container .menu .menu-item.text-color-invoiceStatement,:host .menu-container .menu .menu-item.text-color-jobCode,:host .menu-container .menu .menu-item.text-color-payableCharge,:host .menu-container .menu .menu-item.text-color-person,:host .menu-container .menu .menu-item.text-color-user{color:#696d79}:host .menu-container .menu .menu-item.margin-before{margin-top:.4rem}:host .menu-container .menu .menu-item.margin-after{margin-bottom:.8rem}:host .menu-container .menu .menu-item.text-length-small{max-width:40ch}:host .menu-container .menu .menu-item.text-length-medium{max-width:55ch}:host .menu-container .menu .menu-item.text-length-large{max-width:70ch}:host .menu-container .menu .menu-item.text-weight-hairline{font-weight:100}:host .menu-container .menu .menu-item.text-weight-thin{font-weight:200}:host .menu-container .menu .menu-item.text-weight-light{font-weight:300}:host .menu-container .menu .menu-item.text-weight-normal{font-weight:400}:host .menu-container .menu .menu-item.text-weight-medium{font-weight:500}:host .menu-container .menu .menu-item.text-weight-semibold{font-weight:600}:host .menu-container .menu .menu-item.text-weight-bold{font-weight:700}:host .menu-container .menu .menu-item.text-weight-extrabold{font-weight:800}:host .menu-container .menu .menu-item.text-weight-heavy{font-weight:900}:host .menu-container .menu .menu-item.text-weight-lighter{font-weight:lighter}:host .menu-container .menu .menu-item.text-weight-bolder{font-weight:bolder}:host .menu-container .menu .divider{background:#e2e2e2;height:1px;order:none}:host .menu-container .menu a.disabled{color:#bebebe;cursor:not-allowed}"]
                },] }
    ];
    MenuContentComponent.ctorParameters = function () { return []; };
    MenuContentComponent.propDecorators = {
        menuItems: [{ type: i0.Input }],
        item: [{ type: i0.Input }],
        event: [{ type: i0.Input }],
        menu: [{ type: i0.Input }],
        parentMenu: [{ type: i0.Input }],
        menuClass: [{ type: i0.Input }],
        overlay: [{ type: i0.Input }],
        isLeaf: [{ type: i0.Input }],
        openSubMenu: [{ type: i0.Output }],
        closeLeafMenu: [{ type: i0.Output }],
        closeAllMenus: [{ type: i0.Output }],
        onKeyEvent: [{ type: i0.HostListener, args: ['window:keydown.ArrowDown', ['$event'],] }, { type: i0.HostListener, args: ['window:keydown.ArrowUp', ['$event'],] }],
        keyboardOpenSubMenu: [{ type: i0.HostListener, args: ['window:keydown.ArrowRight', ['$event'],] }],
        keyboardMenuItemSelect: [{ type: i0.HostListener, args: ['window:keydown.Enter', ['$event'],] }, { type: i0.HostListener, args: ['window:keydown.Space', ['$event'],] }],
        onCloseLeafMenu: [{ type: i0.HostListener, args: ['window:keydown.Escape', ['$event'],] }, { type: i0.HostListener, args: ['window:keydown.ArrowLeft', ['$event'],] }],
        closeMenu: [{ type: i0.HostListener, args: ['document:click', ['$event'],] }],
        onMouseLeave: [{ type: i0.HostListener, args: ['mouseleave', ['$event'],] }]
    };

    /**
     * This is a structural directive now.  Should only be used on `novo-options`
     */
    var MenuItemDirective = /** @class */ (function () {
        function MenuItemDirective(template, elementRef) {
            this.template = template;
            this.elementRef = elementRef;
            this.menuItemEnabled = true;
            this.menuItemVisible = true;
        }
        return MenuItemDirective;
    }());
    MenuItemDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[menuItem]',
                },] }
    ];
    MenuItemDirective.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ElementRef }
    ]; };
    MenuItemDirective.propDecorators = {
        menuItemEnabled: [{ type: i0.Input }],
        menuItemVisible: [{ type: i0.Input }],
        optionRef: [{ type: i0.ContentChild, args: [NovoOption,] }]
    };

    var NovoMenuService = /** @class */ (function () {
        function NovoMenuService(overlay, scrollStrategy) {
            this.overlay = overlay;
            this.scrollStrategy = scrollStrategy;
            this.isDestroyingLeafMenu = false;
            this.show = new rxjs.Subject();
            this.triggerClose = new rxjs.Subject();
            this.close = new rxjs.Subject();
            this.overlays = [];
            this.fakeElement = {
                getBoundingClientRect: function () { return ({
                    bottom: 0,
                    height: 0,
                    left: 0,
                    right: 0,
                    top: 0,
                    width: 0,
                }); },
            };
        }
        NovoMenuService.prototype.openMenu = function (context) {
            var anchorElement = context.anchorElement, event = context.event, parentMenu = context.parentMenu;
            if (!parentMenu) {
                var mouseEvent_1 = event;
                this.fakeElement.getBoundingClientRect = function () { return ({
                    bottom: mouseEvent_1.clientY,
                    height: 0,
                    left: mouseEvent_1.clientX,
                    right: mouseEvent_1.clientX,
                    top: mouseEvent_1.clientY,
                    width: 0,
                }); };
                this.closeAllMenus({ eventType: 'cancel', event: event });
                var positionStrategy = this.overlay
                    .position()
                    .connectedTo(new i0.ElementRef(anchorElement || this.fakeElement), { originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' })
                    .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                    .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' });
                this.overlays = [
                    this.overlay.create({
                        positionStrategy: positionStrategy,
                        panelClass: 'novo-menu',
                        scrollStrategy: this.scrollStrategy.close(),
                    }),
                ];
                this.attachMenu(this.overlays[0], context);
            }
            else {
                var positionStrategy = this.overlay
                    .position()
                    .connectedTo(new i0.ElementRef(event ? event.target : anchorElement), { originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'top' })
                    .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' })
                    .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'bottom' });
                var newOverlay = this.overlay.create({
                    positionStrategy: positionStrategy,
                    panelClass: 'novo-menu',
                    scrollStrategy: this.scrollStrategy.close(),
                });
                // this.destroySubMenus(parentMenu);
                this.overlays = this.overlays.concat(newOverlay);
                this.attachMenu(newOverlay, context);
            }
        };
        NovoMenuService.prototype.attachMenu = function (overlay, context) {
            var _this = this;
            var event = context.event, item = context.item, menu = context.menu, menuItems = context.menuItems, menuClass = context.menuClass, menuTrigger = context.menuTrigger;
            var menuContent = overlay.attach(new portal.ComponentPortal(MenuContentComponent));
            menuContent.instance.event = event;
            menuContent.instance.item = item;
            menuContent.instance.menu = menu;
            menuContent.instance.menuItems = menuItems;
            menuContent.instance.overlay = overlay;
            menuContent.instance.isLeaf = true;
            menuContent.instance.menuClass = menuClass;
            overlay.menu = menuContent.instance;
            if (!!menuTrigger) {
                menuTrigger.menuContent = menuContent.instance;
            }
            var subscriptions = new rxjs.Subscription();
            // subscriptions.add(
            //   menuContent.instance.execute
            //     .asObservable()
            //     .subscribe((executeEvent) => this.closeAllMenus({ eventType: 'execute', ...executeEvent })),
            // );
            subscriptions.add(menuContent.instance.closeAllMenus
                .asObservable()
                .subscribe(function (closeAllEvent) { return _this.closeAllMenus(Object.assign({ eventType: 'cancel' }, closeAllEvent)); }));
            subscriptions.add(menuContent.instance.closeLeafMenu.asObservable().subscribe(function (closeLeafMenuEvent) { return _this.destroyLeafMenu(closeLeafMenuEvent); }));
            subscriptions.add(menuContent.instance.openSubMenu.asObservable().subscribe(function (subMenuEvent) {
                _this.destroySubMenus(menuContent.instance);
                if (!subMenuEvent.menu) {
                    menuContent.instance.isLeaf = true;
                    return;
                }
                menuContent.instance.isLeaf = false;
                _this.show.next(subMenuEvent);
            }));
            menuContent.onDestroy(function () {
                // menuItems.forEach((menuItem) => (menuItem.isActive = false));
                subscriptions.unsubscribe();
            });
            menuContent.changeDetectorRef.detectChanges();
        };
        NovoMenuService.prototype.closeAllMenus = function (closeEvent) {
            if (this.overlays) {
                this.close.next(closeEvent);
                this.overlays.forEach(function (overlay, index) {
                    overlay.detach();
                    overlay.dispose();
                });
            }
            this.overlays = [];
        };
        NovoMenuService.prototype.hasOpenMenus = function () {
            var _a;
            return ((_a = this.overlays) === null || _a === void 0 ? void 0 : _a.length) > 0;
        };
        NovoMenuService.prototype.getLastAttachedOverlay = function () {
            var overlay = this.overlays[this.overlays.length - 1];
            while (this.overlays.length > 1 && overlay && !overlay.hasAttached()) {
                overlay.detach();
                overlay.dispose();
                this.overlays = this.overlays.slice(0, -1);
                overlay = this.overlays[this.overlays.length - 1];
            }
            return overlay;
        };
        NovoMenuService.prototype.destroyLeafMenu = function (_b) {
            var _this = this;
            var _c = _b === void 0 ? {} : _b, exceptRootMenu = _c.exceptRootMenu, event = _c.event;
            if (this.isDestroyingLeafMenu) {
                return;
            }
            this.isDestroyingLeafMenu = true;
            setTimeout(function () {
                var overlay = _this.getLastAttachedOverlay();
                if (_this.overlays.length > 1 && overlay) {
                    overlay.detach();
                    overlay.dispose();
                }
                if (!exceptRootMenu && _this.overlays.length > 0 && overlay) {
                    _this.close.next({ eventType: 'cancel', event: event });
                    overlay.detach();
                    overlay.dispose();
                }
                var newLeaf = _this.getLastAttachedOverlay();
                if (newLeaf) {
                    newLeaf.menu.isLeaf = true;
                }
                _this.isDestroyingLeafMenu = false;
            });
        };
        NovoMenuService.prototype.destroySubMenus = function (menu) {
            var overlay = menu.overlay;
            var index = this.overlays.indexOf(overlay);
            this.overlays.slice(index + 1).forEach(function (subMenuOverlay) {
                subMenuOverlay.detach();
                subMenuOverlay.dispose();
            });
        };
        NovoMenuService.prototype.isLeafMenu = function (menuContent) {
            var overlay = this.getLastAttachedOverlay();
            return menuContent.overlay === overlay;
        };
        return NovoMenuService;
    }());
    NovoMenuService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NovoMenuService_Factory() { return new NovoMenuService(i0.ɵɵinject(i1.Overlay), i0.ɵɵinject(i1.ScrollStrategyOptions)); }, token: NovoMenuService, providedIn: "root" });
    NovoMenuService.decorators = [
        { type: i0.Injectable, args: [{ providedIn: 'root' },] }
    ];
    NovoMenuService.ctorParameters = function () { return [
        { type: i1.Overlay },
        { type: i1.ScrollStrategyOptions }
    ]; };

    var MENU_OPTIONS = new i0.InjectionToken('MENU_OPTIONS');
    var PARENT_MENU = new i0.InjectionToken('PARENT_MENU');

    var MenuComponent = /** @class */ (function () {
        function MenuComponent(menuService, changeDetector, elementRef, options) {
            var _this = this;
            this.menuService = menuService;
            this.changeDetector = changeDetector;
            this.elementRef = elementRef;
            this.options = options;
            this.menuClass = '';
            this.autoFocus = false;
            this.disabled = false;
            this.close = new i0.EventEmitter();
            this.open = new i0.EventEmitter();
            this.visibleMenuItems = [];
            this.links = [];
            this.subscription = new rxjs.Subscription();
            if (options) {
                this.autoFocus = options.autoFocus;
            }
            this.subscription.add(menuService.show.subscribe(function (menuEvent) {
                _this.onMenuEvent(menuEvent);
            }));
        }
        MenuComponent.prototype.ngOnDestroy = function () {
            this.subscription.unsubscribe();
        };
        MenuComponent.prototype.onMenuEvent = function (menuEvent) {
            var _this = this;
            if (this.disabled) {
                return;
            }
            var menu = menuEvent.menu, event = menuEvent.event, item = menuEvent.item;
            if (menu && menu !== this) {
                return;
            }
            this.event = event;
            this.item = item;
            this.setVisibleMenuItems();
            this.menuService.openMenu(Object.assign(Object.assign({}, menuEvent), { menuItems: this.visibleMenuItems, menuClass: this.menuClass }));
            this.menuService.close
                .asObservable()
                .pipe(operators.first())
                .subscribe(function (closeEvent) { return _this.close.emit(closeEvent); });
            this.open.next(menuEvent);
        };
        MenuComponent.prototype.isMenuItemVisible = function (menuItem) {
            return this.evaluateIfFunction(menuItem.menuItemVisible);
        };
        MenuComponent.prototype.setVisibleMenuItems = function () {
            var _this = this;
            this.visibleMenuItems = this.menuItems.filter(function (menuItem) { return _this.isMenuItemVisible(menuItem); });
        };
        MenuComponent.prototype.evaluateIfFunction = function (value) {
            if (value instanceof Function) {
                return value(this.item);
            }
            return value;
        };
        return MenuComponent;
    }());
    MenuComponent.decorators = [
        { type: i0.Component, args: [{
                    encapsulation: i0.ViewEncapsulation.None,
                    selector: 'novo-menu',
                    template: "",
                    providers: [{ provide: PARENT_MENU, useExisting: MenuComponent }],
                    styles: ["\n      .cdk-overlay-container {\n        position: fixed;\n        z-index: z(overlay);\n        pointer-events: none;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n      }\n      .novo-menu.cdk-overlay-pane {\n        position: absolute;\n        pointer-events: auto;\n        box-sizing: border-box;\n      }\n    "]
                },] }
    ];
    MenuComponent.ctorParameters = function () { return [
        { type: NovoMenuService },
        { type: i0.ChangeDetectorRef },
        { type: i0.ElementRef },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [MENU_OPTIONS,] }] }
    ]; };
    MenuComponent.propDecorators = {
        menuClass: [{ type: i0.Input }],
        autoFocus: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        close: [{ type: i0.Output }],
        open: [{ type: i0.Output }],
        menuItems: [{ type: i0.ContentChildren, args: [MenuItemDirective,] }],
        menuOptions: [{ type: i0.ContentChildren, args: [NovoOption,] }],
        menuElement: [{ type: i0.ViewChild, args: ['menu',] }]
    };

    var MenuDirective = /** @class */ (function () {
        function MenuDirective(element, menuService, cdr, _parentMenu) {
            this.element = element;
            this.menuService = menuService;
            this.cdr = cdr;
            this._parentMenu = _parentMenu;
            this.waitWhenOpen = false;
            this.capture = false;
            this.anchor = false;
            this.trigger = 'click';
            this.isSubMenu = false;
            this.isActive = false;
            if (!!this._parentMenu) {
                this.isSubMenu = true;
                this.trigger = 'mouseenter';
            }
        }
        Object.defineProperty(MenuDirective.prototype, "hb_menuActive", {
            get: function () {
                return this.isActive;
            },
            enumerable: false,
            configurable: true
        });
        MenuDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.subscription = this.menuService.close.subscribe(function () {
                _this.isActive = false;
                _this.cdr.detectChanges();
            });
        };
        MenuDirective.prototype.ngOnDestroy = function () {
            this.isActive = false;
            this.subscription.unsubscribe();
        };
        MenuDirective.prototype.onMenuClick = function (event) {
            if (this.trigger !== event.type) {
                return;
            }
            if (this.trigger === 'click' && event.button !== 0) {
                return;
            }
            else if (this.trigger === 'contextmenu' && event.button !== 2) {
                return;
            }
            else if (this.waitWhenOpen && this.menuService.hasOpenMenus()) {
                return;
            }
            if (!this.menu.disabled) {
                this.menuService.show.next({
                    menu: this.menu,
                    event: event,
                    item: this.menuContext,
                    anchorElement: this.anchor ? this.element.nativeElement : null,
                    parentMenu: this._parentMenu,
                    menuTrigger: this,
                });
                this.isActive = true;
                event.preventDefault();
                event.stopPropagation();
                this.cdr.detectChanges();
            }
        };
        return MenuDirective;
    }());
    MenuDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[menu]',
                },] }
    ];
    MenuDirective.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoMenuService },
        { type: i0.ChangeDetectorRef },
        { type: MenuComponent, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [PARENT_MENU,] }] }
    ]; };
    MenuDirective.propDecorators = {
        menuContext: [{ type: i0.Input }],
        menu: [{ type: i0.Input }],
        menuContent: [{ type: i0.Input }],
        waitWhenOpen: [{ type: i0.Input }],
        capture: [{ type: i0.Input }],
        anchor: [{ type: i0.Input }],
        trigger: [{ type: i0.Input }],
        hb_menuActive: [{ type: i0.HostBinding, args: ['class.menu-active',] }],
        onMenuClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }, { type: i0.HostListener, args: ['contextmenu', ['$event'],] }, { type: i0.HostListener, args: ['mouseenter', ['$event'],] }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], MenuDirective.prototype, "waitWhenOpen", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], MenuDirective.prototype, "capture", void 0);
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], MenuDirective.prototype, "anchor", void 0);

    var NovoMenuModule = /** @class */ (function () {
        function NovoMenuModule() {
        }
        NovoMenuModule.forRoot = function (options) {
            return {
                ngModule: NovoMenuModule,
                providers: [
                    NovoMenuService,
                    {
                        provide: MENU_OPTIONS,
                        useValue: options,
                    },
                    { provide: i1.OverlayContainer, useClass: i1.FullscreenOverlayContainer },
                ],
            };
        };
        return NovoMenuModule;
    }());
    NovoMenuModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [MenuDirective, MenuComponent, MenuContentComponent, MenuItemDirective],
                    entryComponents: [MenuContentComponent],
                    exports: [MenuDirective, MenuComponent, MenuItemDirective],
                    imports: [common.CommonModule, i1.OverlayModule, NovoCommonModule, NovoIconModule],
                },] }
    ];

    /*
     * Public API Surface of ngx-contextmenu
     */

    // Value accessor for the component (supports ngModel)
    var CHIPS_VALUE_ACCESSOR$2 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoMultiPickerElement; }),
        multi: true,
    };
    var NovoMultiPickerElement = /** @class */ (function () {
        function NovoMultiPickerElement(element, labels) {
            this.element = element;
            this.labels = labels;
            this.placeholder = '';
            this.changed = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.items = [];
            this._items = new rxjs.ReplaySubject(1);
            this.selected = null;
            this.config = {};
            // private data model
            this._value = {};
            this.notShown = {};
            this.onModelChange = function () { };
            this.onModelTouched = function () { };
            this.chipsCount = 4;
        }
        Object.defineProperty(NovoMultiPickerElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (selectedItems) {
                var _this = this;
                if (selectedItems) {
                    this.types.forEach(function (x) { return (_this._value[x.value] = selectedItems[x.value]); });
                }
                else {
                    this._value = {};
                    this.types.forEach(function (x) { return (_this._value[x.value] = []); });
                }
                this.changed.emit(selectedItems);
                this.onModelChange(selectedItems);
            },
            enumerable: false,
            configurable: true
        });
        NovoMultiPickerElement.prototype.ngOnInit = function () {
            this.selectAllOption = this.source.selectAllOption || false;
            this.chipsCount = this.source.chipsCount || 4;
            this.strictRelationship = this.source.strictRelationship || false;
            this.setupOptions();
        };
        NovoMultiPickerElement.prototype.clearValue = function () {
            var _this = this;
            this.types.forEach(function (type) { return _this.modifyAllOfType(type.value, 'unselect'); });
            this.items = [];
            this._items.next(this.items);
            this.setInitialValue(null);
            this.onModelChange(this.value);
        };
        NovoMultiPickerElement.prototype.removeFromDisplay = function (event, item) {
            this.remove(true, item);
            this.modifyAffectedParentsOrChildren(false, item);
        };
        NovoMultiPickerElement.prototype.setupOptions = function () {
            var _this = this;
            this.options = this.source.options || [];
            this._options = [];
            if (this.options) {
                this.options.forEach(function (option) {
                    var formattedOption = _this.setupOptionsByType(option);
                    _this._options.push(formattedOption);
                });
            }
            this.source.options = this._options;
        };
        NovoMultiPickerElement.prototype.setupOptionsByType = function (section) {
            var _this = this;
            var formattedSection = {
                type: section.type,
                label: section.label || section.type,
            };
            formattedSection.data = section.data.map(function (item) {
                return _this.formatOption(section, item);
            });
            if (this.selectAllOption) {
                var selectAll = this.createSelectAllOption(section);
                formattedSection.data.splice(0, 0, selectAll);
            }
            formattedSection.originalData = formattedSection.data.slice();
            return formattedSection;
        };
        NovoMultiPickerElement.prototype.formatOption = function (section, item) {
            var obj = {
                value: section.field ? item[section.field] : item.value || item,
                label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
                type: section.type,
                checked: undefined,
                isParentOf: section.isParentOf,
                isChildOf: section.isChildOf,
            };
            if (obj.isChildOf) {
                obj[section.isChildOf] = item[section.isChildOf];
            }
            return obj;
        };
        NovoMultiPickerElement.prototype.createSelectAllOption = function (section) {
            var selectAll = {
                value: 'ALL',
                label: "All " + section.type,
                type: section.type,
                checked: this.model && this.model.length && this.model.indexOf('ALL') !== -1,
                isParentOf: section.isParentOf,
                isChildOf: section.isChildOf,
            };
            if (section.isChildOf) {
                var allParents = section.data.reduce(function (accum, next) {
                    return accum.concat(next[section.isChildOf]);
                }, []);
                selectAll[section.isChildOf] = allParents;
            }
            return selectAll;
        };
        NovoMultiPickerElement.prototype.deselectAll = function () {
            this.selected = null;
        };
        NovoMultiPickerElement.prototype.select = function (event, item) {
            this.blur.emit(event);
            this.deselectAll();
            this.selected = item;
        };
        NovoMultiPickerElement.prototype.onFocus = function (e) {
            this.element.nativeElement.classList.add('selected');
            this.focus.emit(e);
        };
        NovoMultiPickerElement.prototype.clickOption = function (event) {
            if (event && !(event instanceof Event)) {
                if (event.checked === false) {
                    this.remove(null, event);
                }
                else {
                    this.add(event);
                }
                this.modifyAffectedParentsOrChildren(event.checked, event);
                // Set focus on the picker
                var input = this.element.nativeElement.querySelector('novo-picker > input');
                if (input) {
                    input.focus();
                }
            }
        };
        NovoMultiPickerElement.prototype.add = function (event) {
            if (event.value === 'ALL') {
                this.modifyAllOfType(event.type, 'select');
            }
            else {
                this.updateDisplayItems(event, 'add');
                this.value[event.type].push(event.value);
                this.updateAllItemState(event.type);
                this.triggerValueUpdate();
            }
            this.updateParentOrChildren(event, 'select');
            this.select(null, event);
        };
        NovoMultiPickerElement.prototype.updateAllItemState = function (type) {
            var allOfType = this.getAllOfType(type);
            var allOfTypeSelected = this.allItemsSelected(allOfType, type);
            if (allOfTypeSelected) {
                this.selectAll(allOfType, type);
            }
            return { allOfType: allOfType, allOfTypeSelected: allOfTypeSelected };
        };
        NovoMultiPickerElement.prototype.setIndeterminateState = function (allOfType, status) {
            if (!this.selectAllOption) {
                return;
            }
            var allItem = allOfType[0];
            allItem.indeterminate = status;
        };
        NovoMultiPickerElement.prototype.updateDisplayItems = function (item, action) {
            var adding = action === 'add';
            if (adding) {
                this.items.push(item);
            }
            else {
                if (this.items.indexOf(item) > -1) {
                    this.items.splice(this.items.indexOf(item), 1);
                }
            }
            this.updateDisplayText(this.items);
            this._items.next(this.items);
        };
        NovoMultiPickerElement.prototype.updateDisplayText = function (items) {
            var _this = this;
            this.notShown = [];
            var notShown = items.slice(this.chipsCount);
            if (notShown.length > 0) {
                this.types.forEach(function (type) {
                    var count;
                    var selectedOfType = notShown.filter(function (x) { return x.type === type.value; });
                    if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                        count = _this.getAllOfType(type.value).length - 1;
                    }
                    else {
                        count = selectedOfType.length;
                    }
                    var displayType = count === 1 ? type.singular : type.plural || type.value;
                    if (count > 0) {
                        _this.notShown.push({ type: displayType, count: count });
                    }
                });
            }
        };
        NovoMultiPickerElement.prototype.remove = function (event, item) {
            var triggeredByEvent;
            if (event) {
                triggeredByEvent = true;
            }
            var itemToRemove = item;
            if (itemToRemove.value === 'ALL') {
                triggeredByEvent = false;
                this.modifyAllOfType(itemToRemove.type, 'unselect');
            }
            else if (this.allOfTypeSelected(itemToRemove.type)) {
                this.handleRemoveItemIfAllSelected(itemToRemove);
            }
            this.removeItem(item, triggeredByEvent);
        };
        NovoMultiPickerElement.prototype.removeItem = function (item, triggeredByEvent) {
            item.checked = false;
            this.deselectAll();
            this.removeValue(item);
            if (item.value !== 'ALL') {
                this.updateParentOrChildren(item, 'unselect');
            }
            if (triggeredByEvent) {
                this.modifyAffectedParentsOrChildren(false, item);
            }
        };
        NovoMultiPickerElement.prototype.removeValue = function (item) {
            var updatedValues = this.value[item.type].filter(function (x) { return x !== item.value; });
            this.value[item.type] = updatedValues;
            this.triggerValueUpdate();
            this.updateDisplayItems(item, 'remove');
        };
        NovoMultiPickerElement.prototype.onKeyDown = function (event) {
            if (event.key === "Backspace" /* Backspace */) {
                if (event.target && event.target.value.length === 0 && this.items.length) {
                    if (event) {
                        event.stopPropagation();
                        event.preventDefault();
                    }
                    if (this.selected) {
                        this.remove(null, this.selected);
                    }
                    else {
                        this.select(event, this.items[this.items.length - 1]);
                    }
                }
            }
        };
        NovoMultiPickerElement.prototype.allOfTypeSelected = function (type) {
            return this.items.filter(function (x) { return x.type === type && x.value === 'ALL'; }).length > 0;
        };
        NovoMultiPickerElement.prototype.modifyAllOfType = function (type, action) {
            var selecting = action === 'select';
            var allOfType = this.getAllOfType(type);
            allOfType.forEach(function (item) {
                item.checked = selecting;
                item.indeterminate = false;
            });
            if (selecting) {
                this.selectAll(allOfType, type);
            }
            else {
                this.items = __spread(this.items.filter(function (x) { return x.type !== type; }));
                this._items.next(this.items);
                this.value[type] = [];
            }
            if (this.selectAllOption) {
                this.updateAllParentsOrChildren(allOfType[0], action);
            }
            this.triggerValueUpdate();
        };
        NovoMultiPickerElement.prototype.triggerValueUpdate = function () {
            var _this = this;
            var updatedObject = {};
            this.types.forEach(function (x) { return (updatedObject[x.value] = _this.value[x.value]); });
            this.value = updatedObject;
        };
        NovoMultiPickerElement.prototype.selectAll = function (allOfType, type) {
            if (!this.selectAllOption) {
                return;
            }
            allOfType[0].checked = true;
            var values = allOfType.map(function (i) {
                return i.value;
            });
            // remove 'ALL' value
            values.splice(0, 1);
            this.value[type] = values;
            var updatedItems = this.items.filter(function (x) { return x.type !== type; });
            this.items = updatedItems;
            this.updateDisplayItems(allOfType[0], 'add');
        };
        NovoMultiPickerElement.prototype.handleRemoveItemIfAllSelected = function (item) {
            if (!this.selectAllOption) {
                return;
            }
            var type = item.type;
            var allOfType = this.getAllOfType(type);
            var allItem = allOfType[0];
            this.removeItem(allItem);
            allItem.indeterminate = true;
            var selectedItems = allOfType.filter(function (i) { return i.checked === true; });
            this.items = __spread(this.items, selectedItems);
            var values = selectedItems.map(function (i) {
                return i.value;
            });
            this.value[type] = __spread(values);
        };
        NovoMultiPickerElement.prototype.handleOutsideClick = function (event) {
            // If the elements doesn't contain the target element, it is an outside click
            if (!this.element.nativeElement.contains(event.target)) {
                this.blur.emit(event);
                this.deselectAll();
            }
        };
        NovoMultiPickerElement.prototype.getAllOfType = function (type) {
            return this._options.filter(function (x) { return x.type === type; })[0].originalData;
        };
        NovoMultiPickerElement.prototype.updateParentOrChildren = function (item, action) {
            if (this.strictRelationship && item.isParentOf) {
                this.updateChildrenValue(item, action);
            }
            else if (item.isChildOf && this.selectAllOption) {
                this.updateParentValue(item, action);
            }
        };
        NovoMultiPickerElement.prototype.modifyAffectedParentsOrChildren = function (selecting, itemChanged) {
            var _this = this;
            if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
                return;
            }
            var parent = this.types.filter(function (x) { return !!x.isParentOf; })[0];
            var parentType = parent.value;
            var allParentType = this.getAllOfType(parentType);
            var childType = allParentType[0].isParentOf;
            var allChildren = this.getAllOfType(childType);
            var allCheckedChildren = allChildren.filter(function (x) { return !!x.checked; });
            allParentType.forEach(function (obj) {
                if (obj.value === 'ALL') {
                    return;
                }
                var selectedChildrenOfParent = allCheckedChildren.filter(function (x) {
                    return x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
                });
                if (selecting) {
                    if (obj.checked) {
                        return;
                    }
                    obj.indeterminate = selectedChildrenOfParent.length > 0;
                }
                else {
                    var allChildrenOfParent = allChildren.filter(function (x) {
                        return x.value !== 'ALL' && x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
                    });
                    if (selectedChildrenOfParent.length > 0) {
                        if (obj.checked) {
                            if (_this.strictRelationship && allChildrenOfParent.length !== selectedChildrenOfParent.length) {
                                obj.indeterminate = true;
                                obj.checked = false;
                                _this.removeValue(obj);
                                _this.addIndividualChildren(selectedChildrenOfParent);
                            }
                        }
                        else {
                            obj.indeterminate = true;
                        }
                        if (_this.strictRelationship && itemChanged.type !== parentType) {
                            if (obj.checked) {
                                obj.checked = false;
                                _this.removeValue(obj);
                                _this.addIndividualChildren(selectedChildrenOfParent);
                            }
                        }
                    }
                    else {
                        obj.indeterminate = false;
                        if (allChildrenOfParent.length === 0) {
                            // if it has no children and is checked, it should stay checked
                            return;
                        }
                        else if (_this.strictRelationship && itemChanged.type !== parentType) {
                            _this.remove(null, obj);
                        }
                    }
                }
            });
            if (this.selectAllOption) {
                this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
            }
        };
        NovoMultiPickerElement.prototype.updateAllParentsOrChildren = function (allItem, action) {
            if (allItem.isParentOf) {
                this.updateAllChildrenValue(allItem, action);
            }
            else if (allItem.isChildOf) {
                this.updateAllParentValue(allItem, action);
            }
        };
        NovoMultiPickerElement.prototype.updateAllChildrenValue = function (item, action) {
            var _this = this;
            var selecting = action === 'select';
            var childType = item.isParentOf;
            var potentialChildren = this.getAllOfType(childType);
            if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
                this.remove(null, potentialChildren[0]);
                return;
            }
            potentialChildren.forEach(function (x) {
                if (x.value === 'ALL' && !x.checked) {
                    if (selecting) {
                        x.checked = true;
                    }
                    x.indeterminate = selecting;
                }
                else {
                    if (x.checked && !selecting) {
                        _this.remove(null, x);
                    }
                    x.checked = selecting;
                }
            });
        };
        NovoMultiPickerElement.prototype.updateAllParentValue = function (item, action) {
            var selecting = action === 'select';
            var parentType = item.isChildOf;
            var potentialParents = this.getAllOfType(parentType);
            potentialParents.forEach(function (x) {
                if (!x.checked) {
                    x.indeterminate = selecting;
                }
            });
        };
        NovoMultiPickerElement.prototype.updateIndeterminateStates = function (allParentType, allChildren, allCheckedChildren) {
            var allCheckedOrIndeterminateParents = allParentType.filter(function (x) { return (!!x.checked || !!x.indeterminate) && x.value !== 'ALL'; });
            var isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
            var isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
            this.setIndeterminateState(allParentType, isParentIndeterminate);
            this.setIndeterminateState(allChildren, isChildIndeterminate);
        };
        NovoMultiPickerElement.prototype.updateChildrenValue = function (parent, action) {
            var _this = this;
            var selecting = action === 'select';
            var childType = parent.isParentOf;
            var potentialChildren = this.getAllOfType(childType);
            potentialChildren.forEach(function (x) {
                if (x.value === 'ALL') {
                    return;
                }
                if (x[parent.type].filter(function (y) { return y === parent.value; }).length > 0) {
                    if (x.checked && !selecting) {
                        x.checked = false;
                        if (_this.allOfTypeSelected(childType)) {
                            _this.handleRemoveItemIfAllSelected(x);
                        }
                        else {
                            _this.removeValue(x);
                        }
                    }
                    x.checked = selecting;
                }
            });
        };
        NovoMultiPickerElement.prototype.updateParentValue = function (child, action) {
            var allParentType = this.getAllOfType(child.isChildOf);
            if (allParentType[0].checked && action !== 'select') {
                this.handleRemoveItemIfAllSelected(allParentType[0]);
            }
        };
        NovoMultiPickerElement.prototype.addIndividualChildren = function (children) {
            var _this = this;
            var parentAlreadySelected = false;
            children.forEach(function (x) {
                if (x.isChildOf) {
                    // only add children if their parents are not already selected
                    x[x.isChildOf].forEach(function (parent) {
                        if (_this.value[x.isChildOf].filter(function (p) { return p === parent; }).length > 0) {
                            parentAlreadySelected = true;
                        }
                    });
                }
                if (_this.value[x.type].filter(function (item) { return item === x.value; }).length === 0 && !parentAlreadySelected) {
                    _this.add(x);
                }
            });
        };
        NovoMultiPickerElement.prototype.setInitialValue = function (model) {
            var _this = this;
            this.items = [];
            this.value = model || {};
            if (!this.types) {
                return;
            }
            this.types.forEach(function (typeObj) {
                var type = typeObj.value;
                if (_this.value[type]) {
                    var indeterminateIsSet_1 = false;
                    var options = _this.updateAllItemState(type);
                    var optionsByType_1 = options.allOfType;
                    var allSelected_1 = options.allOfTypeSelected;
                    _this.value[type].forEach(function (item) {
                        if (!allSelected_1 && !indeterminateIsSet_1) {
                            indeterminateIsSet_1 = true;
                            _this.setIndeterminateState(optionsByType_1, true);
                        }
                        var value = optionsByType_1.filter(function (x) { return x.value === item; })[0];
                        value.checked = true;
                        if (!allSelected_1) {
                            _this.updateDisplayItems(value, 'add');
                        }
                        if (_this.strictRelationship && value.isParentOf) {
                            _this.updateChildrenValue(value, 'select');
                        }
                    });
                    if (typeObj.isChildOf) {
                        _this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                    }
                }
                else {
                    _this.value[type] = [];
                }
            });
        };
        NovoMultiPickerElement.prototype.allItemsSelected = function (optionsByType, type) {
            return this.value[type].length === optionsByType.length - 1;
        };
        // Set touched on blur
        NovoMultiPickerElement.prototype.onTouched = function (e) {
            this.element.nativeElement.classList.remove('selected');
            this.onModelTouched();
            this.blur.emit(e);
        };
        NovoMultiPickerElement.prototype.writeValue = function (model) {
            this.model = model;
            this.setInitialValue(model);
        };
        NovoMultiPickerElement.prototype.registerOnChange = function (fn) {
            this.onModelChange = fn;
        };
        NovoMultiPickerElement.prototype.registerOnTouched = function (fn) {
            this.onModelTouched = fn;
        };
        return NovoMultiPickerElement;
    }());
    NovoMultiPickerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'multi-picker',
                    providers: [CHIPS_VALUE_ACCESSOR$2],
                    template: "\n    <novo-chip\n      *ngFor=\"let item of _items | async | slice: 0:chipsCount\"\n      [type]=\"item.type\"\n      [class.selected]=\"item == selected\"\n      (removed)=\"removeFromDisplay($event, item)\"\n      (selectionChange)=\"select($event, item)\"\n    >\n      {{ item.label }}\n    </novo-chip>\n    <div *ngIf=\"items.length > chipsCount\">\n      <ul class=\"summary\">\n        <li *ngFor=\"let type of notShown\">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>\n      </ul>\n    </div>\n    <div class=\"chip-input-container\">\n      <novo-picker\n        clearValueOnSelect=\"true\"\n        [config]=\"source\"\n        [placeholder]=\"placeholder\"\n        (select)=\"clickOption($event)\"\n        (keydown)=\"onKeyDown($event)\"\n        (focus)=\"onFocus($event)\"\n        (blur)=\"onTouched($event)\"\n        [overrideElement]=\"element\"\n      >\n      </novo-picker>\n    </div>\n    <i class=\"bhi-search\" [class.has-value]=\"items.length\"></i>\n    <label class=\"clear-all\" *ngIf=\"items.length\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n  ",
                    host: {
                        '[class.with-value]': 'items.length > 0',
                    }
                },] }
    ];
    NovoMultiPickerElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService }
    ]; };
    NovoMultiPickerElement.propDecorators = {
        source: [{ type: i0.Input }],
        placeholder: [{ type: i0.Input }],
        types: [{ type: i0.Input }],
        changed: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        value: [{ type: i0.Input }]
    };

    // NG2
    var NovoMultiPickerModule = /** @class */ (function () {
        function NovoMultiPickerModule() {
        }
        return NovoMultiPickerModule;
    }());
    NovoMultiPickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoPickerModule, NovoChipsModule],
                    declarations: [NovoMultiPickerElement],
                    exports: [NovoMultiPickerElement],
                },] }
    ];

    // NG2
    var NonIdealStateElement = /** @class */ (function () {
        function NonIdealStateElement() {
            this.hb_class = 'novo-non-ideal-state';
            this.theme = 'light';
        }
        return NonIdealStateElement;
    }());
    NonIdealStateElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-non-ideal-state',
                    template: "\n    <novo-icon class=\"novo-non-ideal-state-icon\" *ngIf=\"icon\" [color]=\"theme\">{{ icon }}</novo-icon>\n    <novo-title class=\"novo-non-ideal-state-title\" *ngIf=\"title\" marginBefore>{{ title }}</novo-title>\n    <novo-text *ngIf=\"description\" block marginBefore marginAfter>{{ description }}</novo-text>\n    <ng-content></ng-content>\n  ",
                    styles: [":host{align-items:center;display:flex;flex-direction:column;justify-content:center;padding:2rem;text-align:center}:host .novo-non-ideal-state-icon{font-size:xx-large}:host button{display:inline-block}"]
                },] }
    ];
    NonIdealStateElement.propDecorators = {
        hb_class: [{ type: i0.HostBinding, args: ['class',] }],
        theme: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        description: [{ type: i0.Input }]
    };

    // NG2
    var NovoNonIdealStateModule = /** @class */ (function () {
        function NovoNonIdealStateModule() {
        }
        return NovoNonIdealStateModule;
    }());
    NovoNonIdealStateModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoIconModule, NovoCommonModule],
                    declarations: [NonIdealStateElement],
                    exports: [NonIdealStateElement],
                },] }
    ];

    var GooglePlacesService = /** @class */ (function () {
        function GooglePlacesService(_http, platformId, _global, _localStorageService) {
            this._http = _http;
            this.platformId = platformId;
            this._global = _global;
            this._localStorageService = _localStorageService;
        }
        GooglePlacesService.prototype.getPredictions = function (url, query) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._http.get(url + '?query=' + query).subscribe(function (data) {
                    if (data) {
                        resolve(data);
                    }
                    else {
                        resolve(false);
                    }
                });
            });
        };
        GooglePlacesService.prototype.getLatLngDetail = function (url, lat, lng) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._http.get(url + '?lat=' + lat + '&lng=' + lng).subscribe(function (data) {
                    if (data) {
                        resolve(data);
                    }
                    else {
                        resolve(false);
                    }
                });
            });
        };
        GooglePlacesService.prototype.getPlaceDetails = function (url, placeId) {
            var _this = this;
            return new Promise(function (resolve) {
                _this._http.get(url + '?query=' + placeId).subscribe(function (data) {
                    if (data) {
                        resolve(data);
                    }
                    else {
                        resolve(false);
                    }
                });
            });
        };
        GooglePlacesService.prototype.getGeoCurrentLocation = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (common.isPlatformBrowser(_this.platformId)) {
                    var _window = _this._global.nativeGlobal;
                    if (_window.navigator.geolocation) {
                        _window.navigator.geolocation.getCurrentPosition(function (pos) {
                            var latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                            resolve(latlng);
                        });
                    }
                    else {
                        resolve(false);
                    }
                }
                else {
                    resolve(false);
                }
            });
        };
        GooglePlacesService.prototype.getGeoLatLngDetail = function (latlng) {
            var _this = this;
            return new Promise(function (resolve) {
                if (common.isPlatformBrowser(_this.platformId)) {
                    var _window = _this._global.nativeGlobal;
                    var geocoder = new _window.google.maps.Geocoder();
                    geocoder.geocode({ location: latlng }, function (results, status) {
                        if (status === 'OK') {
                            _this.getGeoPlaceDetail(results[0].place_id).then(function (result) {
                                if (result) {
                                    resolve(result);
                                }
                                else {
                                    resolve(false);
                                }
                            });
                        }
                        else {
                            resolve(false);
                        }
                    });
                }
                else {
                    resolve(false);
                }
            });
        };
        GooglePlacesService.prototype.getGeoPrediction = function (params) {
            var _this = this;
            return new Promise(function (resolve) {
                if (common.isPlatformBrowser(_this.platformId)) {
                    var _window = _this._global.nativeGlobal;
                    var placesService = new _window.google.maps.places.AutocompleteService();
                    var queryInput = {};
                    var promiseArr = [];
                    if (params.countryRestriction.length) {
                        queryInput = {
                            input: params.query,
                            componentRestrictions: { country: params.countryRestriction },
                        };
                    }
                    else {
                        queryInput = {
                            input: params.query,
                        };
                    }
                    if (params.geoLocation) {
                        queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                        queryInput.radius = params.radius;
                    }
                    if (params.geoTypes.length) {
                        for (var i = 0; i < params.geoTypes.length; i++) {
                            var _tempQuery = queryInput;
                            _tempQuery.types = new Array(params.geoTypes[i]);
                            promiseArr.push(_this.geoPredictionCall(placesService, _tempQuery));
                        }
                    }
                    else {
                        promiseArr.push(_this.geoPredictionCall(placesService, queryInput));
                    }
                    Promise.all(promiseArr).then(function (values) {
                        var val = values;
                        if (val.length > 1) {
                            var _tempArr = [];
                            for (var j = 0; j < val.length; j++) {
                                if (val[j] && val[j].length) {
                                    _tempArr = _tempArr.concat(val[j]);
                                }
                            }
                            _tempArr = _this.getUniqueResults(_tempArr);
                            resolve(_tempArr);
                        }
                        else {
                            resolve(values[0]);
                        }
                    });
                }
                else {
                    resolve(false);
                }
            });
        };
        GooglePlacesService.prototype.getGeoPlaceDetail = function (placeId) {
            var _this = this;
            return new Promise(function (resolve) {
                if (common.isPlatformBrowser(_this.platformId)) {
                    var _window = _this._global.nativeGlobal;
                    var placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                    placesService.getDetails({ placeId: placeId }, function (result, status) {
                        if (result === null || result.length === 0) {
                            _this.getGeoPaceDetailByReferance(result.referance).then(function (referanceData) {
                                if (!referanceData) {
                                    resolve(false);
                                }
                                else {
                                    resolve(referanceData);
                                }
                            });
                        }
                        else {
                            resolve(result);
                        }
                    });
                }
                else {
                    resolve(false);
                }
            });
        };
        GooglePlacesService.prototype.getGeoPaceDetailByReferance = function (referance) {
            var _this = this;
            return new Promise(function (resolve) {
                if (common.isPlatformBrowser(_this.platformId)) {
                    var _window_1 = _this._global.nativeGlobal;
                    var placesService = new _window_1.google.maps.places.PlacesService();
                    placesService.getDetails({ reference: referance }, function (result, status) {
                        if (status === _window_1.google.maps.places.PlacesServiceStatus.OK) {
                            resolve(result);
                        }
                        else {
                            resolve(false);
                        }
                    });
                }
                else {
                    resolve(false);
                }
            });
        };
        GooglePlacesService.prototype.addRecentList = function (localStorageName, result, itemSavedLength) {
            var _this = this;
            this.getRecentList(localStorageName).then(function (data) {
                if (data) {
                    for (var i = 0; i < data.length; i++) {
                        if (data[i].description === result.description) {
                            data.splice(i, 1);
                            break;
                        }
                    }
                    data.unshift(result);
                    if (data.length > itemSavedLength) {
                        data.pop();
                    }
                    _this._localStorageService.setItem(localStorageName, JSON.stringify(data));
                }
            });
        };
        GooglePlacesService.prototype.getRecentList = function (localStorageName) {
            var _this = this;
            return new Promise(function (resolve) {
                var value = _this._localStorageService.getItem(localStorageName);
                if (value) {
                    value = JSON.parse(value);
                }
                else {
                    value = [];
                }
                resolve(value);
            });
        };
        GooglePlacesService.prototype.getUniqueResults = function (arr) {
            return Array.from(arr.reduce(function (m, t) { return m.set(t.place_id, t); }, new Map()).values());
        };
        GooglePlacesService.prototype.geoPredictionCall = function (placesService, queryInput) {
            var _window = this._global.nativeGlobal;
            return new Promise(function (resolve) {
                placesService.getPlacePredictions(queryInput, function (result, status) {
                    if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                });
            });
        };
        return GooglePlacesService;
    }());
    GooglePlacesService.decorators = [
        { type: i0.Injectable }
    ];
    GooglePlacesService.ctorParameters = function () { return [
        { type: http.HttpClient },
        { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
        { type: GlobalRef },
        { type: LocalStorageService }
    ]; };

    var PlacesListComponent = /** @class */ (function () {
        function PlacesListComponent(platformId, _elmRef, _global, _googlePlacesService) {
            this.platformId = platformId;
            this._elmRef = _elmRef;
            this._global = _global;
            this._googlePlacesService = _googlePlacesService;
            this.term = '';
            this.termChange = new i0.EventEmitter();
            this.select = new i0.EventEmitter();
            this.locationInput = '';
            this.gettingCurrentLocationFlag = false;
            this.dropdownOpen = false;
            this.recentDropdownOpen = false;
            this.queryItems = [];
            this.isSettingsError = false;
            this.settingsErrorMsg = '';
            this.settings = {};
            this.moduleinit = false;
            this.selectedDataIndex = -1;
            this.recentSearchData = [];
            this.userSelectedOption = '';
            this.defaultSettings = {
                geoPredictionServerUrl: '',
                geoLatLangServiceUrl: '',
                geoLocDetailServerUrl: '',
                geoCountryRestriction: [],
                geoTypes: [],
                geoLocation: [],
                geoRadius: 0,
                serverResponseListHierarchy: [],
                serverResponseatLangHierarchy: [],
                serverResponseDetailHierarchy: [],
                resOnSearchButtonClickOnly: false,
                useGoogleGeoApi: true,
                inputPlaceholderText: 'Enter Area Name',
                inputString: '',
                showSearchButton: true,
                showRecentSearch: true,
                showCurrentLocation: true,
                recentStorageName: 'recentSearches',
                noOfRecentSearchSave: 5,
                currentLocIconUrl: '',
                searchIconUrl: '',
                locationIconUrl: '',
            };
        }
        PlacesListComponent.prototype.ngOnInit = function () {
            if (!this.moduleinit) {
                this.moduleInit();
            }
        };
        PlacesListComponent.prototype.ngOnChanges = function () {
            this.moduleinit = true;
            this.moduleInit();
            this.searchinputCallback(null);
        };
        // function called when click event happens in input box. (Binded with view)
        PlacesListComponent.prototype.searchinputClickCallback = function (event) {
            event.target.select();
            this.searchinputCallback(event);
        };
        // function called when there is a change in input. (Binded with view)
        PlacesListComponent.prototype.searchinputCallback = function (event) {
            var inputVal = this.locationInput;
            if (inputVal) {
                this.getListQuery(inputVal);
            }
            else {
                this.queryItems = [];
                if (this.userSelectedOption) {
                    this.userQuerySubmit('false');
                }
                this.userSelectedOption = '';
                if (this.settings.showRecentSearch) {
                    this.showRecentSearch();
                }
                else {
                    this.dropdownOpen = false;
                }
            }
        };
        // function to execute when user hover over autocomplete list.(binded with view)
        PlacesListComponent.prototype.activeListNode = function (index) {
            for (var i = 0; i < this.queryItems.length; i++) {
                if (index === i) {
                    this.queryItems[i].active = true;
                    this.selectedDataIndex = index;
                }
                else {
                    this.queryItems[i].active = false;
                }
            }
        };
        // function to execute when user select the autocomplete list.(binded with view)
        PlacesListComponent.prototype.selectedListNode = function (event, index) {
            this.dropdownOpen = false;
            if (this.recentDropdownOpen) {
                this.setRecentLocation(this.queryItems[index]);
            }
            else {
                this.getPlaceLocationInfo(this.queryItems[index]);
            }
        };
        // function to close the autocomplete list when clicked outside. (binded with view)
        PlacesListComponent.prototype.closeAutocomplete = function (event) {
            if (!this._elmRef.nativeElement.contains(event.target)) {
                this.selectedDataIndex = -1;
                this.dropdownOpen = false;
            }
        };
        // function to manually trigger the callback to parent component when clicked search button.
        PlacesListComponent.prototype.userQuerySubmit = function (selectedOption) {
            var _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
            if (_userOption) {
                this.select.emit(this.userSelectedOption);
            }
            else {
                // this.select.emit(false);
            }
        };
        // function to get user current location from the device.
        PlacesListComponent.prototype.currentLocationSelected = function () {
            var _this = this;
            if (common.isPlatformBrowser(this.platformId)) {
                this.gettingCurrentLocationFlag = true;
                this.dropdownOpen = false;
                this._googlePlacesService.getGeoCurrentLocation().then(function (result) {
                    if (!result) {
                        _this.gettingCurrentLocationFlag = false;
                    }
                    else {
                        _this.getCurrentLocationInfo(result);
                    }
                });
            }
        };
        // module initialization happens. function called by ngOninit and ngOnChange
        PlacesListComponent.prototype.moduleInit = function () {
            this.settings = this.setUserSettings();
            // condition to check if Radius is set without location detail.
            if (this.settings.geoRadius) {
                if (this.settings.geoLocation.length !== 2) {
                    this.isSettingsError = true;
                    this.settingsErrorMsg =
                        this.settingsErrorMsg + 'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
                }
            }
            // condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
            if (this.settings.geoLocation.length === 2 && !this.settings.geoRadius) {
                this.settings.geoRadius = 20000000;
            }
            if (this.settings.showRecentSearch) {
                this.getRecentLocations();
            }
            if (!this.settings.useGoogleGeoApi) {
                if (!this.settings.geoPredictionServerUrl) {
                    this.isSettingsError = true;
                    this.settingsErrorMsg =
                        this.settingsErrorMsg + 'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
                }
                if (!this.settings.geoLatLangServiceUrl) {
                    this.isSettingsError = true;
                    this.settingsErrorMsg =
                        this.settingsErrorMsg + 'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
                }
                if (!this.settings.geoLocDetailServerUrl) {
                    this.isSettingsError = true;
                    this.settingsErrorMsg =
                        this.settingsErrorMsg + 'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
                }
            }
            this.locationInput = this.term;
        };
        // function to process the search query when pressed enter.
        PlacesListComponent.prototype.processSearchQuery = function () {
            if (this.queryItems.length) {
                if (this.selectedDataIndex > -1) {
                    this.selectedListNode(null, this.selectedDataIndex);
                }
                else {
                    this.selectedListNode(null, 0);
                }
            }
        };
        // function to set user settings if it is available.
        PlacesListComponent.prototype.setUserSettings = function () {
            var e_1, _a;
            var _tempObj = {};
            if (this.userSettings && typeof this.userSettings === 'object') {
                var keys = Object.keys(this.defaultSettings);
                try {
                    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                        var value = keys_1_1.value;
                        _tempObj[value] = this.userSettings[value] !== undefined ? this.userSettings[value] : this.defaultSettings[value];
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return _tempObj;
            }
            else {
                return this.defaultSettings;
            }
        };
        // function to get the autocomplete list based on user input.
        PlacesListComponent.prototype.getListQuery = function (value) {
            var _this = this;
            this.recentDropdownOpen = false;
            if (this.settings.useGoogleGeoApi) {
                var _tempParams = {
                    query: value,
                    countryRestriction: this.settings.geoCountryRestriction,
                    geoTypes: this.settings.geoTypes,
                };
                if (this.settings.geoLocation.length === 2) {
                    _tempParams.geoLocation = this.settings.geoLocation;
                    _tempParams.radius = this.settings.geoRadius;
                }
                this._googlePlacesService.getGeoPrediction(_tempParams).then(function (result) {
                    _this.updateListItem(result);
                });
            }
            else {
                this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then(function (result) {
                    result = _this.extractServerList(_this.settings.serverResponseListHierarchy, result);
                    _this.updateListItem(result);
                });
            }
        };
        // function to extratc custom data which is send by the server.
        PlacesListComponent.prototype.extractServerList = function (arrayList, data) {
            var e_2, _a;
            if (arrayList.length) {
                var _tempData = data;
                try {
                    for (var arrayList_1 = __values(arrayList), arrayList_1_1 = arrayList_1.next(); !arrayList_1_1.done; arrayList_1_1 = arrayList_1.next()) {
                        var key = arrayList_1_1.value;
                        _tempData = _tempData[key];
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (arrayList_1_1 && !arrayList_1_1.done && (_a = arrayList_1.return)) _a.call(arrayList_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return _tempData;
            }
            else {
                return data;
            }
        };
        // function to update the predicted list.
        PlacesListComponent.prototype.updateListItem = function (listData) {
            this.queryItems = listData ? listData : [];
            this.dropdownOpen = true;
        };
        // function to show the recent search result.
        PlacesListComponent.prototype.showRecentSearch = function () {
            var _this = this;
            this.recentDropdownOpen = true;
            this.dropdownOpen = true;
            this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (result) {
                if (result) {
                    _this.queryItems = result;
                }
                else {
                    _this.queryItems = [];
                }
            });
        };
        // function to execute to get location detail based on latitude and longitude.
        PlacesListComponent.prototype.getCurrentLocationInfo = function (latlng) {
            var _this = this;
            if (this.settings.useGoogleGeoApi) {
                this._googlePlacesService.getGeoLatLngDetail(latlng).then(function (result) {
                    if (result) {
                        _this.setRecentLocation(result);
                    }
                    _this.gettingCurrentLocationFlag = false;
                });
            }
            else {
                this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then(function (result) {
                    if (result) {
                        result = _this.extractServerList(_this.settings.serverResponseatLangHierarchy, result);
                        _this.setRecentLocation(result);
                    }
                    _this.gettingCurrentLocationFlag = false;
                });
            }
        };
        // function to retrive the location info based on goovle place id.
        PlacesListComponent.prototype.getPlaceLocationInfo = function (selectedData) {
            var _this = this;
            if (this.settings.useGoogleGeoApi) {
                this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then(function (data) {
                    if (data) {
                        _this.setRecentLocation(data);
                    }
                });
            }
            else {
                this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then(function (result) {
                    if (result) {
                        result = _this.extractServerList(_this.settings.serverResponseDetailHierarchy, result);
                        _this.setRecentLocation(result);
                    }
                });
            }
        };
        // function to store the selected user search in the localstorage.
        PlacesListComponent.prototype.setRecentLocation = function (data) {
            data = JSON.parse(JSON.stringify(data));
            data.description = data.description ? data.description : data.formatted_address;
            data.active = false;
            this.selectedDataIndex = -1;
            this.locationInput = data.description;
            if (this.settings.showRecentSearch) {
                this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
                this.getRecentLocations();
            }
            this.userSelectedOption = data;
            // below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
            if (!this.settings.resOnSearchButtonClickOnly) {
                this.select.emit(data);
                this.termChange.emit(data);
            }
        };
        // function to retrive the stored recent user search from the localstorage.
        PlacesListComponent.prototype.getRecentLocations = function () {
            var _this = this;
            this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (data) {
                _this.recentSearchData = data && data.length ? data : [];
            });
        };
        return PlacesListComponent;
    }());
    PlacesListComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'google-places-list',
                    template: "\n    <novo-list direction=\"vertical\">\n      <novo-list-item *ngFor=\"let data of queryItems; let $index = index\" (click)=\"selectedListNode($event, $index)\">\n        <item-header>\n          <item-avatar icon=\"location\"></item-avatar>\n          <item-title>{{ data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description }}</item-title>\n        </item-header>\n        <item-content>{{ data.structured_formatting?.secondary_text }}</item-content>\n      </novo-list-item>\n    </novo-list>\n  "
                },] }
    ];
    PlacesListComponent.ctorParameters = function () { return [
        { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
        { type: i0.ElementRef },
        { type: GlobalRef },
        { type: GooglePlacesService }
    ]; };
    PlacesListComponent.propDecorators = {
        userSettings: [{ type: i0.Input }],
        term: [{ type: i0.Input }],
        termChange: [{ type: i0.Output }],
        select: [{ type: i0.Output }]
    };

    var GooglePlacesModule = /** @class */ (function () {
        function GooglePlacesModule() {
        }
        return GooglePlacesModule;
    }());
    GooglePlacesModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PlacesListComponent],
                    imports: [common.CommonModule, http.HttpClientModule, forms.FormsModule, NovoListModule],
                    exports: [PlacesListComponent],
                    providers: [GooglePlacesService],
                },] }
    ];

    var PopOverContent = /** @class */ (function () {
        function PopOverContent(element, cdr) {
            this.element = element;
            this.cdr = cdr;
            this.placement = 'top';
            this.animation = true;
            this.onCloseFromOutside = new i0.EventEmitter();
            this.top = -10000;
            this.left = -10000;
            this.displayType = 'none';
            this.isHidden = false;
        }
        PopOverContent.prototype.ngAfterViewInit = function () {
            this.show();
            this.cdr.detectChanges();
        };
        PopOverContent.prototype.toggle = function () {
            if (this.isHidden) {
                this.show();
            }
            else {
                this.hide();
            }
        };
        PopOverContent.prototype.show = function () {
            if (!this.popover || !this.popover.getElement()) {
                return;
            }
            var p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
            this.displayType = 'block';
            this.top = p.top;
            this.left = p.left;
            this.isHidden = false;
        };
        PopOverContent.prototype.hide = function () {
            this.top = -10000;
            this.left = -10000;
            this.isHidden = true;
            this.popover.hide();
        };
        PopOverContent.prototype.hideFromPopover = function () {
            this.top = -10000;
            this.left = -10000;
        };
        PopOverContent.prototype.positionElements = function (hostEl, targetEl, positionStr, appendToBody) {
            if (appendToBody === void 0) { appendToBody = false; }
            var positionStrParts = positionStr.split('-');
            var mainSide = (this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl));
            var orientation = (this.effectiveAlignment = positionStrParts[1] || 'center');
            var hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
            var targetElWidth = targetEl.offsetWidth;
            var targetElHeight = targetEl.offsetHeight;
            var shiftWidth = {
                center: function () {
                    return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
                },
                right: function () {
                    return hostElPos.left;
                },
                left: function () {
                    return hostElPos.left + (hostElPos.width - targetElWidth);
                },
            };
            var shiftHeight = {
                center: function () {
                    return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
                },
                bottom: function () {
                    return hostElPos.top;
                },
                top: function () {
                    return hostElPos.top + (hostElPos.height - targetElHeight);
                },
            };
            var targetElPos;
            switch (mainSide) {
                case 'right':
                    targetElPos = {
                        top: shiftHeight[orientation](),
                        left: hostElPos.left + hostElPos.width,
                    };
                    break;
                case 'left':
                    targetElPos = {
                        top: shiftHeight[orientation](),
                        left: hostElPos.left - targetElWidth,
                    };
                    break;
                case 'bottom':
                    targetElPos = {
                        top: hostElPos.top + hostElPos.height,
                        left: shiftWidth[orientation](),
                    };
                    break;
                default:
                    targetElPos = {
                        top: hostElPos.top - targetElHeight,
                        left: shiftWidth[orientation](),
                    };
                    break;
            }
            return targetElPos;
        };
        PopOverContent.prototype.position = function (nativeEl) {
            var offsetParentBCR = { top: 0, left: 0 };
            var elBCR = this.offset(nativeEl);
            var offsetParentEl = this.parentOffsetEl(nativeEl);
            if (offsetParentEl !== window.document) {
                offsetParentBCR = this.offset(offsetParentEl);
                offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
                offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
            }
            var boundingClientRect = nativeEl.getBoundingClientRect();
            return {
                width: boundingClientRect.width || nativeEl.offsetWidth,
                height: boundingClientRect.height || nativeEl.offsetHeight,
                top: elBCR.top - offsetParentBCR.top,
                left: elBCR.left - offsetParentBCR.left,
            };
        };
        PopOverContent.prototype.offset = function (nativeEl) {
            var boundingClientRect = nativeEl.getBoundingClientRect();
            return {
                width: boundingClientRect.width || nativeEl.offsetWidth,
                height: boundingClientRect.height || nativeEl.offsetHeight,
                top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
                left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft),
            };
        };
        PopOverContent.prototype.getStyle = function (nativeEl, cssProp) {
            if (nativeEl.currentStyle) {
                return nativeEl.currentStyle[cssProp];
            }
            if (window.getComputedStyle) {
                return window.getComputedStyle(nativeEl)[cssProp];
            }
            return nativeEl.style[cssProp];
        };
        PopOverContent.prototype.isStaticPositioned = function (nativeEl) {
            return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
        };
        PopOverContent.prototype.parentOffsetEl = function (nativeEl) {
            var offsetParent = nativeEl.offsetParent || window.document;
            while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
                offsetParent = offsetParent.offsetParent;
            }
            return offsetParent || window.document;
        };
        PopOverContent.prototype.getEffectivePlacement = function (desiredPlacement, hostElement, targetElement) {
            var hostElBoundingRect = hostElement.getBoundingClientRect();
            if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
                return 'bottom';
            }
            if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
                return 'top';
            }
            if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
                return 'right';
            }
            if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
                return 'left';
            }
            return desiredPlacement;
        };
        return PopOverContent;
    }());
    PopOverContent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'popover-content',
                    template: "\n    <div\n      #popoverDiv\n      class=\"popover {{ effectivePlacement }}\"\n      [style.top]=\"top + 'px'\"\n      [style.left]=\"left + 'px'\"\n      [class.fade]=\"animation\"\n      style=\"display: block\"\n      role=\"popover\"\n    >\n      <div class=\"arrow {{ effectiveAlignment }}\"></div>\n      <div class=\"popover-title\" [hidden]=\"!title\">{{ title }}</div>\n      <div class=\"popover-content\">\n        <ng-content></ng-content>\n        <div class=\"popover-content-text\">{{ content }}</div>\n      </div>\n    </div>\n  "
                },] }
    ];
    PopOverContent.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.ChangeDetectorRef }
    ]; };
    PopOverContent.propDecorators = {
        content: [{ type: i0.Input }],
        placement: [{ type: i0.Input }],
        title: [{ type: i0.Input }],
        animation: [{ type: i0.Input }],
        popoverDiv: [{ type: i0.ViewChild, args: ['popoverDiv',] }]
    };

    // NG2
    var PopOverDirective = /** @class */ (function () {
        function PopOverDirective(viewContainerRef, resolver) {
            this.viewContainerRef = viewContainerRef;
            this.resolver = resolver;
            this.PopoverComponent = PopOverContent;
            this.popoverOnHover = false;
            this.popoverDismissTimeout = 0;
            this.onShown = new i0.EventEmitter();
            this.onHidden = new i0.EventEmitter();
        }
        // ---------------------------------------------------
        // Event listeners
        // ---------------------------------------------------
        PopOverDirective.prototype.showOrHideOnClick = function () {
            if (this.popoverOnHover || this.popoverDisabled) {
                return;
            }
            this.toggle();
        };
        PopOverDirective.prototype.showOnHover = function () {
            if (!this.popoverOnHover || this.popoverDisabled) {
                return;
            }
            this.show();
        };
        PopOverDirective.prototype.hideOnHover = function () {
            if (!this.popoverOnHover || this.popoverDisabled) {
                return;
            }
            this.hide();
        };
        PopOverDirective.prototype.ngOnChanges = function (changes) {
            if (changes.popoverDisabled) {
                if (changes.popoverDisabled.currentValue) {
                    this.hide();
                }
            }
            if (changes.popoverAlways) {
                if (changes.popoverAlways.currentValue) {
                    this.show();
                }
            }
        };
        PopOverDirective.prototype.toggle = function () {
            if (!this.visible) {
                this.show();
            }
            else {
                this.hide();
            }
        };
        PopOverDirective.prototype.show = function () {
            var _this = this;
            if (this.visible) {
                return;
            }
            this.visible = true;
            if (typeof this.content === 'string') {
                var factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
                if (!this.visible) {
                    return;
                }
                this.popover = this.viewContainerRef.createComponent(factory);
                var popover = this.popover.instance;
                popover.popover = this;
                popover.content = this.content;
                if (this.popoverPlacement !== undefined) {
                    popover.placement = this.popoverPlacement;
                }
                if (this.popoverAnimation !== undefined) {
                    popover.animation = this.popoverAnimation;
                }
                if (this.popoverTitle !== undefined) {
                    popover.title = this.popoverTitle;
                }
                popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
                if (this.popoverDismissTimeout > 0) {
                    setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
                }
            }
            else {
                var popover = this.content;
                popover.popover = this;
                if (this.popoverPlacement !== undefined) {
                    popover.placement = this.popoverPlacement;
                }
                if (this.popoverAnimation !== undefined) {
                    popover.animation = this.popoverAnimation;
                }
                if (this.popoverTitle !== undefined) {
                    popover.title = this.popoverTitle;
                }
                popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
                if (this.popoverDismissTimeout > 0) {
                    setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
                }
                popover.show();
            }
            this.onShown.emit(this);
        };
        PopOverDirective.prototype.hide = function () {
            if (!this.visible) {
                return;
            }
            this.visible = false;
            if (this.popover) {
                this.popover.destroy();
            }
            if (this.content instanceof PopOverContent) {
                this.content.hideFromPopover();
            }
            this.onHidden.emit(this);
        };
        PopOverDirective.prototype.getElement = function () {
            return this.viewContainerRef.element.nativeElement;
        };
        return PopOverDirective;
    }());
    PopOverDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[popover]',
                },] }
    ];
    PopOverDirective.ctorParameters = function () { return [
        { type: i0.ViewContainerRef },
        { type: i0.ComponentFactoryResolver }
    ]; };
    PopOverDirective.propDecorators = {
        content: [{ type: i0.Input, args: ['popover',] }],
        popoverDisabled: [{ type: i0.Input }],
        popoverAlways: [{ type: i0.Input }],
        popoverAnimation: [{ type: i0.Input }],
        popoverPlacement: [{ type: i0.Input }],
        popoverTitle: [{ type: i0.Input }],
        popoverOnHover: [{ type: i0.Input }],
        popoverDismissTimeout: [{ type: i0.Input }],
        onShown: [{ type: i0.Output }],
        onHidden: [{ type: i0.Output }],
        showOrHideOnClick: [{ type: i0.HostListener, args: ['click',] }],
        showOnHover: [{ type: i0.HostListener, args: ['focusin',] }, { type: i0.HostListener, args: ['mouseenter',] }],
        hideOnHover: [{ type: i0.HostListener, args: ['focusout',] }, { type: i0.HostListener, args: ['mouseleave',] }]
    };

    // NG2
    var NovoPopOverModule = /** @class */ (function () {
        function NovoPopOverModule() {
        }
        return NovoPopOverModule;
    }());
    NovoPopOverModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [PopOverContent, PopOverDirective],
                    exports: [PopOverContent, PopOverDirective],
                },] }
    ];

    (function (ProgressAppearance) {
        ProgressAppearance["LINEAR"] = "linear";
        ProgressAppearance["RADIAL"] = "radial";
    })(exports.ProgressAppearance || (exports.ProgressAppearance = {}));
    /**
     * Used to provide a progress container to a progress bar while avoiding circular references.
     * @docs-private
     */
    var NOVO_PROGRESS_CONTAINER = new i0.InjectionToken('NOVO_PROGRESS_CONTAINER');

    // NG2
    // make radio-button-group ids unique
    var nextId$5 = 0;
    // Value accessor for the component (supports ngModel)
    var PROGRESS_BAR_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(function () { return NovoProgressBarElement; }),
        multi: true,
    };
    var NovoProgressBarElement = /** @class */ (function () {
        function NovoProgressBarElement(ref, progress) {
            this.ref = ref;
            this.progress = progress;
            this._uniqueId = "novo-progress-" + ++nextId$5;
            this.appearance = exports.ProgressAppearance.LINEAR;
            this.id = this._uniqueId;
            this.name = this._uniqueId;
            this.tabindex = 0;
            this.indeterminate = false;
            // Radial Value
            this.radius = 54;
            this.circumference = 2 * Math.PI * this.radius;
            this.striped = false;
            this.animated = false;
            this.change = new i0.EventEmitter();
            this.blur = new i0.EventEmitter();
            this.focus = new i0.EventEmitter();
            this._percent = 0;
            this._value = 0;
            this._disabled = false;
            this.onChangeCallback = function (_) {
                // placeholder
            };
            this.onTouchedCallback = function () {
                // placeholder
            };
            // NovoProgressElement
            this.progress = progress;
        }
        Object.defineProperty(NovoProgressBarElement.prototype, "width", {
            get: function () {
                if (this.isRadial()) {
                    return "100%";
                }
                return this._percent * 100 + "%";
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoProgressBarElement.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                if (this.value !== value) {
                    this._value = value;
                    if (this.progress) {
                        this._percent = this.value / this.progress.total;
                    }
                    else {
                        this._percent = value;
                    }
                    this.dashoffset = this.circumference * (1 - this._percent);
                    this.onChangeCallback(this._value);
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoProgressBarElement.prototype, "disabled", {
            // Disabled State
            get: function () {
                return this._disabled || (this.progress != null && this.progress.disabled);
            },
            set: function (value) {
                this._disabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        NovoProgressBarElement.prototype.ngOnInit = function () {
            var _a;
            if (this.indeterminate) {
                this.striped = true;
                this.animated = true;
                this._value = ((_a = this.progress) === null || _a === void 0 ? void 0 : _a.total) || 100;
            }
            if (this.progress) {
                this._percent = this._value / this.progress.total;
                this.appearance = this.progress.appearance;
            }
        };
        NovoProgressBarElement.prototype.writeValue = function (value) {
            this.value = value;
            this.ref.markForCheck();
        };
        NovoProgressBarElement.prototype.registerOnChange = function (fn) {
            this.onChangeCallback = fn;
        };
        NovoProgressBarElement.prototype.registerOnTouched = function (fn) {
            this.onTouchedCallback = fn;
        };
        NovoProgressBarElement.prototype.setDisabledState = function (disabled) {
            this.disabled = disabled;
        };
        NovoProgressBarElement.prototype.isLinear = function () {
            return this.appearance === exports.ProgressAppearance.LINEAR;
        };
        NovoProgressBarElement.prototype.isRadial = function () {
            return this.appearance === exports.ProgressAppearance.RADIAL;
        };
        return NovoProgressBarElement;
    }());
    NovoProgressBarElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-progress-bar',
                    providers: [PROGRESS_BAR_VALUE_ACCESSOR],
                    template: "\n    <div *ngIf=\"isLinear()\" class=\"progress-bar\"></div>\n    <svg *ngIf=\"isRadial()\" width=\"120\" height=\"120\">\n      <circle\n        [style.strokeDasharray]=\"circumference\"\n        [style.strokeDashoffset]=\"dashoffset\"\n        [attr.r]=\"radius\"\n        cx=\"60\"\n        cy=\"60\"\n        stroke-width=\"4\"\n        fill=\"transparent\"\n        class=\"progress__value\"\n      />\n      <!-- <text x=\"18\" y=\"20.35\" class=\"percentage\">30%</text> -->\n    </svg>\n  ",
                    styles: [":host{display:flex;height:100%}:host.linear{background-color:#4a89dc}:host.linear[color=black]{background:#000;color:#fff}:host.linear[color=white]{background:#fff;color:#3d464d}:host.linear[color=gray],:host.linear[color=grey]{background:#9e9e9e;color:#3d464d}:host.linear[color=bright],:host.linear[color=offWhite]{background:#f7f7f7;color:#3d464d}:host.linear[color=light]{background:#dbdbdb;color:#3d464d}:host.linear[color=neutral]{background:#4f5361;color:#fff}:host.linear[color=dark]{background:#3d464d;color:#fff}:host.linear[color=orange]{background:#ff6900;color:#3d464d}:host.linear[color=navigation]{background:#202945;color:#fff}:host.linear[color=skyBlue]{background:#009bdf;color:#fff}:host.linear[color=steel]{background:#5b6770;color:#fff}:host.linear[color=metal]{background:#637893;color:#fff}:host.linear[color=sand]{background:#f4f4f4;color:#3d464d}:host.linear[color=silver]{background:#e2e2e2;color:#3d464d}:host.linear[color=stone]{background:#bebebe;color:#3d464d}:host.linear[color=ash]{background:#a0a0a0;color:#3d464d}:host.linear[color=slate]{background:#707070;color:#fff}:host.linear[color=onyx]{background:#526980;color:#fff}:host.linear[color=charcoal]{background:#282828;color:#fff}:host.linear[color=moonlight]{background:#1a242f;color:#fff}:host.linear[color=midnight]{background:#202945;color:#fff}:host.linear[color=darkness]{background:#161f27;color:#fff}:host.linear[color=navy]{background:#0d2d42;color:#fff}:host.linear[color=aqua]{background:#3bafda;color:#3d464d}:host.linear[color=ocean]{background:#4a89dc;color:#fff}:host.linear[color=mint]{background:#37bc9b;color:#3d464d}:host.linear[color=grass]{background:#8cc152;color:#fff}:host.linear[color=sunflower]{background:#f6b042;color:#fff}:host.linear[color=bittersweet]{background:#eb6845;color:#fff}:host.linear[color=grapefruit]{background:#da4453;color:#fff}:host.linear[color=carnation]{background:#d770ad;color:#fff}:host.linear[color=lavender]{background:#967adc;color:#fff}:host.linear[color=mountain]{background:#9678b6;color:#fff}:host.linear[color=info],:host.linear[color=positive]{background:#4a89dc;color:#fff}:host.linear[color=success]{background:#8cc152;color:#fff}:host.linear[color=danger],:host.linear[color=error],:host.linear[color=negative]{background:#da4453;color:#fff}:host.linear[color=warning]{background:#f6b042;color:#fff}:host.linear[color=empty]{background:#cccdcc;color:#3d464d}:host.linear[color=disabled]{background:#bebebe;color:#3d464d}:host.linear[color=background]{background:#f7f7f7;color:#3d464d}:host.linear[color=backgroundDark]{background:#e2e2e2;color:#3d464d}:host.linear[color=presentation]{background:#5b6770;color:#fff}:host.linear[color=bullhorn]{background:#ff6900;color:#3d464d}:host.linear[color=pulse]{background:#3bafda;color:#3d464d}:host.linear[color=company]{background:#39d;color:#fff}:host.linear[color=candidate]{background:#4b7;color:#fff}:host.linear[color=lead]{background:#a69;color:#fff}:host.linear[color=clientcontact],:host.linear[color=contact]{background:#fa4;color:#fff}:host.linear[color=opportunity]{background:#625;color:#fff}:host.linear[color=job],:host.linear[color=joborder]{background:#b56;color:#fff}:host.linear[color=submission]{background:#a9adbb;color:#3d464d}:host.linear[color=sendout]{background:#747884;color:#fff}:host.linear[color=placement]{background:#0b344f;color:#fff}:host.linear[color=note]{background:#747884;color:#fff}:host.linear[color=contract]{background:#454ea0;color:#fff}:host.linear[color=billableCharge],:host.linear[color=corporateUser],:host.linear[color=credential],:host.linear[color=distributionList],:host.linear[color=earnCode],:host.linear[color=invoiceStatement],:host.linear[color=jobCode],:host.linear[color=payableCharge],:host.linear[color=person],:host.linear[color=user]{background:#696d79;color:#fff}:host.linear:first-child{border-radius:.2em 0 0 .2em}:host.linear:last-child{border-radius:0 .2em .2em 0}:host.linear.striped{background-image:linear-gradient(45deg,hsla(0,0%,100%,.15) 25%,transparent 0,transparent 50%,hsla(0,0%,100%,.15) 0,hsla(0,0%,100%,.15) 75%,transparent 0,transparent);background-size:40px 40px}:host.linear.animated{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}:host.radial{position:absolute}:host.radial[color=black] svg circle{stroke:#000}:host.radial[color=white] svg circle{stroke:#fff}:host.radial[color=gray] svg circle,:host.radial[color=grey] svg circle{stroke:#9e9e9e}:host.radial[color=bright] svg circle,:host.radial[color=offWhite] svg circle{stroke:#f7f7f7}:host.radial[color=light] svg circle{stroke:#dbdbdb}:host.radial[color=neutral] svg circle{stroke:#4f5361}:host.radial[color=dark] svg circle{stroke:#3d464d}:host.radial[color=orange] svg circle{stroke:#ff6900}:host.radial[color=navigation] svg circle{stroke:#202945}:host.radial[color=skyBlue] svg circle{stroke:#009bdf}:host.radial[color=steel] svg circle{stroke:#5b6770}:host.radial[color=metal] svg circle{stroke:#637893}:host.radial[color=sand] svg circle{stroke:#f4f4f4}:host.radial[color=silver] svg circle{stroke:#e2e2e2}:host.radial[color=stone] svg circle{stroke:#bebebe}:host.radial[color=ash] svg circle{stroke:#a0a0a0}:host.radial[color=slate] svg circle{stroke:#707070}:host.radial[color=onyx] svg circle{stroke:#526980}:host.radial[color=charcoal] svg circle{stroke:#282828}:host.radial[color=moonlight] svg circle{stroke:#1a242f}:host.radial[color=midnight] svg circle{stroke:#202945}:host.radial[color=darkness] svg circle{stroke:#161f27}:host.radial[color=navy] svg circle{stroke:#0d2d42}:host.radial[color=aqua] svg circle{stroke:#3bafda}:host.radial[color=ocean] svg circle{stroke:#4a89dc}:host.radial[color=mint] svg circle{stroke:#37bc9b}:host.radial[color=grass] svg circle{stroke:#8cc152}:host.radial[color=sunflower] svg circle{stroke:#f6b042}:host.radial[color=bittersweet] svg circle{stroke:#eb6845}:host.radial[color=grapefruit] svg circle{stroke:#da4453}:host.radial[color=carnation] svg circle{stroke:#d770ad}:host.radial[color=lavender] svg circle{stroke:#967adc}:host.radial[color=mountain] svg circle{stroke:#9678b6}:host.radial[color=info] svg circle,:host.radial[color=positive] svg circle{stroke:#4a89dc}:host.radial[color=success] svg circle{stroke:#8cc152}:host.radial[color=danger] svg circle,:host.radial[color=error] svg circle,:host.radial[color=negative] svg circle{stroke:#da4453}:host.radial[color=warning] svg circle{stroke:#f6b042}:host.radial[color=empty] svg circle{stroke:#cccdcc}:host.radial[color=disabled] svg circle{stroke:#bebebe}:host.radial[color=background] svg circle{stroke:#f7f7f7}:host.radial[color=backgroundDark] svg circle{stroke:#e2e2e2}:host.radial[color=presentation] svg circle{stroke:#5b6770}:host.radial[color=bullhorn] svg circle{stroke:#ff6900}:host.radial[color=pulse] svg circle{stroke:#3bafda}:host.radial[color=company] svg circle{stroke:#39d}:host.radial[color=candidate] svg circle{stroke:#4b7}:host.radial[color=lead] svg circle{stroke:#a69}:host.radial[color=clientcontact] svg circle,:host.radial[color=contact] svg circle{stroke:#fa4}:host.radial[color=opportunity] svg circle{stroke:#625}:host.radial[color=job] svg circle,:host.radial[color=joborder] svg circle{stroke:#b56}:host.radial[color=submission] svg circle{stroke:#a9adbb}:host.radial[color=sendout] svg circle{stroke:#747884}:host.radial[color=placement] svg circle{stroke:#0b344f}:host.radial[color=note] svg circle{stroke:#747884}:host.radial[color=contract] svg circle{stroke:#454ea0}:host.radial[color=billableCharge] svg circle,:host.radial[color=corporateUser] svg circle,:host.radial[color=credential] svg circle,:host.radial[color=distributionList] svg circle,:host.radial[color=earnCode] svg circle,:host.radial[color=invoiceStatement] svg circle,:host.radial[color=jobCode] svg circle,:host.radial[color=payableCharge] svg circle,:host.radial[color=person] svg circle,:host.radial[color=user] svg circle{stroke:#696d79}:host.radial svg circle{stroke:#4a89dc;transform:rotate(-90deg);transform-origin:50% 50%;transition:stroke-dashoffset .35s}:host.radial svg text{fill:#666;font-family:sans-serif;font-size:.5em;text-anchor:middle}@-webkit-keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}@keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}"]
                },] }
    ];
    NovoProgressBarElement.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NOVO_PROGRESS_CONTAINER,] }] }
    ]; };
    NovoProgressBarElement.propDecorators = {
        appearance: [{ type: i0.HostBinding, args: ['class',] }],
        id: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        tabindex: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        indeterminate: [{ type: i0.Input }],
        striped: [{ type: i0.HostBinding, args: ['class.striped',] }, { type: i0.Input }],
        animated: [{ type: i0.HostBinding, args: ['class.animated',] }, { type: i0.Input }],
        width: [{ type: i0.HostBinding, args: ['style.width',] }],
        change: [{ type: i0.Output }],
        blur: [{ type: i0.Output }],
        focus: [{ type: i0.Output }],
        value: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.disabled',] }]
    };

    // NG2
    var NovoProgressElement = /** @class */ (function () {
        function NovoProgressElement() {
            this.total = 100;
            this.radius = 54;
            this.striped = false;
            // Private vars for getters
            this._appearance = exports.ProgressAppearance.LINEAR;
            this._disabled = false;
        }
        Object.defineProperty(NovoProgressElement.prototype, "appearance", {
            get: function () {
                return this._appearance;
            },
            set: function (value) {
                if (this._appearance !== value) {
                    this._appearance = value;
                    this._updateBarAppearance();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoProgressElement.prototype, "disabled", {
            // Disabled State
            get: function () {
                return this._disabled;
            },
            set: function (value) {
                this._disabled = !!value;
            },
            enumerable: false,
            configurable: true
        });
        NovoProgressElement.prototype.ngAfterContentInit = function () {
            this._updateBarRadius();
        };
        NovoProgressElement.prototype._updateBarAppearance = function () {
            var _this = this;
            if (this._bars) {
                this._bars.forEach(function (bar) {
                    bar.appearance = _this.appearance;
                });
            }
        };
        NovoProgressElement.prototype._updateBarRadius = function () {
            var _this = this;
            if (this._bars) {
                this._bars.forEach(function (bar, i) {
                    bar.radius = _this.radius - i * 5;
                });
            }
        };
        return NovoProgressElement;
    }());
    NovoProgressElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-progress',
                    template: " <ng-content></ng-content> ",
                    providers: [
                        {
                            provide: NOVO_PROGRESS_CONTAINER,
                            useExisting: NovoProgressElement,
                        },
                    ],
                    styles: [":host{border-radius:.2em;display:flex;position:relative}:host.striped{background-image:linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 0,transparent 50%,rgba(0,0,0,.25) 0,rgba(0,0,0,.25) 75%,transparent 0,transparent);background-size:20px 20px}:host.linear{background-color:#f7f7f7;border:1px solid #cccdcc;height:1.2em;width:200px}:host.radial{height:9.2em;width:9.2em}"]
                },] }
    ];
    NovoProgressElement.propDecorators = {
        color: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        total: [{ type: i0.Input }],
        radius: [{ type: i0.Input }],
        striped: [{ type: i0.HostBinding, args: ['class.striped',] }, { type: i0.Input }],
        appearance: [{ type: i0.HostBinding, args: ['class',] }, { type: i0.Input }],
        disabled: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.disabled',] }],
        _bars: [{ type: i0.ContentChildren, args: [i0.forwardRef(function () { return NovoProgressBarElement; }), { descendants: true },] }]
    };

    // NG2
    var NovoProgressModule = /** @class */ (function () {
        function NovoProgressModule() {
        }
        return NovoProgressModule;
    }());
    NovoProgressModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoProgressBarElement, NovoProgressElement],
                    exports: [NovoProgressBarElement, NovoProgressElement],
                },] }
    ];

    /**
     * Directive for providing a custom clear-icon.
     * e.g.
     * <novo-select-search [formControl]="bankFilterCtrl">
     *   <novo-icon novoSelectSearchClear>x</novo-icon>
     * </novo-select-search>
     */
    var NovoSelectSearchClearDirective = /** @class */ (function () {
        function NovoSelectSearchClearDirective() {
        }
        return NovoSelectSearchClearDirective;
    }());
    NovoSelectSearchClearDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSelectSearchClear]',
                },] }
    ];

    /** The max height of the select's overlay panel. */
    var SELECT_PANEL_MAX_HEIGHT = 256;
    var autoIncrement = 1;
    /* tslint:disable:member-ordering component-selector */
    /**
     * Component providing an input field for searching NovoSelectElement options.
     *
     * Example usage:
     *
     * interface Bank {
     *  id: string;
     *  name: string;
     * }
     *
     * @Component({
     *   selector: 'my-app-data-selection',
     *   template: `
     *     <novo-form-field>
     *       <novo-select [formControl]="bankCtrl" placeholder="Bank">
     *         <novo-option>
     *           <ngx-novo-select-search [formControl]="bankFilterCtrl"></ngx-novo-select-search>
     *         </novo-option>
     *         <novo-option *ngFor="let bank of filteredBanks | async" [value]="bank.id">
     *           {{bank.name}}
     *         </novo-option>
     *       </novo-select>
     *     </novo-form-field>
     *   `
     * })
     * export class DataSelectionComponent implements OnInit, OnDestroy {
     *
     *   // control for the selected bank
     *   public bankCtrl: FormControl = new FormControl();
     *   // control for the NovoSelectElement filter keyword
     *   public bankFilterCtrl: FormControl = new FormControl();
     *
     *   // list of banks
     *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];
     *   // list of banks filtered by search keyword
     *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);
     *
     *   // Subject that emits when the component has been destroyed.
     *   private _onDestroy = new Subject<void>();
     *
     *
     *   ngOnInit() {
     *     // load the initial bank list
     *     this.filteredBanks.next(this.banks.slice());
     *     // listen for search field value changes
     *     this.bankFilterCtrl.valueChanges
     *       .pipe(takeUntil(this._onDestroy))
     *       .subscribe(() => {
     *         this.filterBanks();
     *       });
     *   }
     *
     *   ngOnDestroy() {
     *     this._onDestroy.next();
     *     this._onDestroy.complete();
     *   }
     *
     *   private filterBanks() {
     *     if (!this.banks) {
     *       return;
     *     }
     *
     *     // get the search keyword
     *     let search = this.bankFilterCtrl.value;
     *     if (!search) {
     *       this.filteredBanks.next(this.banks.slice());
     *       return;
     *     } else {
     *       search = search.toLowerCase();
     *     }
     *
     *     // filter the banks
     *     this.filteredBanks.next(
     *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)
     *     );
     *   }
     * }
     */
    var NovoSelectSearchComponent = /** @class */ (function () {
        function NovoSelectSearchComponent(novoSelect, changeDetectorRef, _viewportRuler, novoOption, liveAnnouncer, matFormField) {
            var _this = this;
            if (novoOption === void 0) { novoOption = null; }
            if (matFormField === void 0) { matFormField = null; }
            this.novoSelect = novoSelect;
            this.changeDetectorRef = changeDetectorRef;
            this._viewportRuler = _viewportRuler;
            this.novoOption = novoOption;
            this.liveAnnouncer = liveAnnouncer;
            this.matFormField = matFormField;
            this.name = 'select-search-' + autoIncrement++;
            /** Label of the search placeholder */
            this.placeholderLabel = 'Search';
            /** Type of the search input field */
            this.type = 'text';
            /** Label to be shown when no entries are found. Set to null if no message should be shown. */
            this.noEntriesFoundLabel = 'No Records Found';
            /**
             *  Text that is appended to the currently active item label announced by screen readers,
             *  informing the user of the current index, value and total options.
             *  eg: Bank R (Germany) 1 of 6
             */
            this.indexAndLengthScreenReaderText = ' of ';
            /**
             * Whether or not the search field should be cleared after the dropdown menu is closed.
             * Useful for server-side filtering.
             */
            this.clearSearchInput = true;
            /** Whether to show the search-in-progress indicator */
            this.searching = false;
            /** Disables initial focusing of the input field */
            this.disableInitialFocus = false;
            /** Enable clear input on escape pressed */
            this.enableClearOnEscapePressed = false;
            /**
             * Prevents home / end key being propagated to novo-select,
             * allowing to move the cursor within the search input instead of navigating the options
             */
            this.preventHomeEndKeyPropagation = false;
            /** Disables scrolling to active options when option list changes. Useful for server-side search */
            this.disableScrollToActiveOnOptionsChanged = false;
            /** Adds 508 screen reader support for search box */
            this.ariaLabel = 'dropdown search';
            /** Whether to show Select All Checkbox (for novo-select[multi=true]) */
            this.showToggleAllCheckbox = false;
            /** select all checkbox checked state */
            this.toggleAllCheckboxChecked = false;
            /** select all checkbox indeterminate state */
            this.toggleAllCheckboxIndeterminate = false;
            /** Display a message in a tooltip on the toggle-all checkbox */
            this.toggleAllCheckboxTooltipMessage = '';
            /** Define the position of the tooltip on the toggle-all checkbox. */
            this.toogleAllCheckboxTooltipPosition = 'below';
            /** Show/Hide the search clear button of the search input */
            this.hideClearSearchButton = false;
            /**
             * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).
             * Defaults to false, so selected options are only restored while filtering is active.
             */
            this.alwaysRestoreSelectedOptionsMulti = false;
            /** Output emitter to send to parent component with the toggle all boolean */
            this.toggleAll = new i0.EventEmitter();
            this.onTouched = function (_) { };
            this._options$ = new rxjs.BehaviorSubject(null);
            this.optionsList$ = this._options$.pipe(operators.switchMap(function (_options) { return _options
                ? _options.changes.pipe(operators.map(function (options) { return options.toArray(); }), operators.startWith(_options.toArray()))
                : rxjs.of(null); }));
            this.optionsLength$ = this.optionsList$.pipe(operators.map(function (options) { return (options ? options.length : 0); }));
            this._formControl = new forms.FormControl('');
            /** whether to show the no entries found message */
            this._showNoEntriesFound$ = rxjs.combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(operators.map(function (_a) {
                var _b = __read(_a, 2), value = _b[0], optionsLength = _b[1];
                return _this.noEntriesFoundLabel && value && optionsLength === _this.getOptionsLengthOffset();
            }));
            /** Subject that emits when the component has been destroyed. */
            this._onDestroy = new rxjs.Subject();
        }
        Object.defineProperty(NovoSelectSearchComponent.prototype, "isInsideNovoOption", {
            get: function () {
                return !!this.novoOption;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectSearchComponent.prototype, "value", {
            /** Current search value */
            get: function () {
                return this._formControl.value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSelectSearchComponent.prototype, "_options", {
            get: function () {
                return this._options$.getValue();
            },
            /** Reference to the NovoSelectElement options */
            set: function (_options) {
                this._options$.next(_options);
            },
            enumerable: false,
            configurable: true
        });
        NovoSelectSearchComponent.prototype.ngOnInit = function () {
            var _this = this;
            // set custom panel class
            // const panelClass = 'novo-select-search-panel';
            // if (this.novoSelect.panelClass) {
            //   if (Array.isArray(this.novoSelect.panelClass)) {
            //     (<string[]>this.novoSelect.panelClass).push(panelClass);
            //   } else if (typeof this.novoSelect.panelClass === 'string') {
            //     this.novoSelect.panelClass = [this.novoSelect.panelClass, panelClass];
            //   } else if (typeof this.novoSelect.panelClass === 'object') {
            //     this.novoSelect.panelClass[panelClass] = true;
            //   }
            // } else {
            //   this.novoSelect.panelClass = panelClass;
            // }
            // set custom novo-option class if the component was placed inside a novo-option
            if (this.novoOption) {
                this.novoOption.disabled = true;
                this.novoOption._getHostElement().classList.add('contains-novo-select-search');
            }
            else {
                console.error('<ngx-novo-select-search> must be placed inside a <novo-option> element');
            }
            // when the select dropdown panel is opened or closed
            this.novoSelect.openedChange.pipe(operators.delay(1), operators.takeUntil(this._onDestroy)).subscribe(function (opened) {
                if (opened) {
                    _this.updateInputWidth();
                    // focus the search field when opening
                    if (!_this.disableInitialFocus) {
                        _this._focus();
                    }
                }
                else {
                    // clear it when closing
                    if (_this.clearSearchInput) {
                        _this._reset();
                    }
                }
            });
            // set the first item active after the options changed
            this.novoSelect.openedChange
                .pipe(operators.take(1))
                .pipe(operators.takeUntil(this._onDestroy))
                .subscribe(function () {
                if (_this.novoSelect._keyManager) {
                    _this.novoSelect._keyManager.change
                        .pipe(operators.takeUntil(_this._onDestroy))
                        .subscribe(function () { return _this.adjustScrollTopToFitActiveOptionIntoView(); });
                }
                else {
                    console.log('_keyManager was not initialized.');
                }
                _this._options = _this.novoSelect.contentOptions;
                // Closure variable for tracking the most recent first option.
                // In order to avoid avoid causing the list to
                // scroll to the top when options are added to the bottom of
                // the list (eg: infinite scroll), we compare only
                // the changes to the first options to determine if we
                // should set the first item as active.
                // This prevents unnecessary scrolling to the top of the list
                // when options are appended, but allows the first item
                // in the list to be set as active by default when there
                // is no active selection
                var previousFirstOption = _this._options.toArray()[_this.getOptionsLengthOffset()];
                _this._options.changes.pipe(operators.takeUntil(_this._onDestroy)).subscribe(function () {
                    // avoid "expression has been changed" error
                    setTimeout(function () {
                        // Convert the QueryList to an array
                        var options = _this._options.toArray();
                        // The true first item is offset by 1
                        var currentFirstOption = options[_this.getOptionsLengthOffset()];
                        var keyManager = _this.novoSelect._keyManager;
                        if (keyManager && _this.novoSelect.panelOpen) {
                            // set first item active and input width
                            // Check to see if the first option in these changes is different from the previous.
                            var firstOptionIsChanged = !_this.novoSelect.compareWith(previousFirstOption, currentFirstOption);
                            // CASE: The first option is different now.
                            // Indiciates we should set it as active and scroll to the top.
                            if (firstOptionIsChanged ||
                                !keyManager.activeItem ||
                                !options.find(function (option) { return _this.novoSelect.compareWith(option, keyManager.activeItem); })) {
                                keyManager.setFirstItemActive();
                            }
                            // wait for panel width changes
                            setTimeout(function () {
                                _this.updateInputWidth();
                            });
                            if (!_this.disableScrollToActiveOnOptionsChanged) {
                                _this.adjustScrollTopToFitActiveOptionIntoView();
                            }
                        }
                        // Update our reference
                        previousFirstOption = currentFirstOption;
                    });
                });
            });
            // add or remove css class depending on whether to show the no entries found message
            // note: this is hacky
            this._showNoEntriesFound$.pipe(operators.takeUntil(this._onDestroy)).subscribe(function (showNoEntriesFound) {
                // set no entries found class on mat option
                if (_this.novoOption) {
                    if (showNoEntriesFound) {
                        _this.novoOption._getHostElement().classList.add('novo-select-search-no-entries-found');
                    }
                    else {
                        _this.novoOption._getHostElement().classList.remove('novo-select-search-no-entries-found');
                    }
                }
            });
            // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized
            this._viewportRuler
                .change()
                .pipe(operators.takeUntil(this._onDestroy))
                .subscribe(function () {
                if (_this.novoSelect.panelOpen) {
                    _this.updateInputWidth();
                }
            });
            this.initMultipleHandling();
            this.optionsList$.pipe(operators.takeUntil(this._onDestroy)).subscribe(function () {
                // update view when available options change
                _this.changeDetectorRef.markForCheck();
            });
        };
        NovoSelectSearchComponent.prototype._emitSelectAllBooleanToParent = function (state) {
            this.toggleAll.emit(state);
        };
        NovoSelectSearchComponent.prototype.ngOnDestroy = function () {
            this._onDestroy.next();
            this._onDestroy.complete();
        };
        NovoSelectSearchComponent.prototype._isToggleAllCheckboxVisible = function () {
            return this.novoSelect.multiple && this.showToggleAllCheckbox;
        };
        /**
         * Handles the key down event with NovoSelectElement.
         * Allows e.g. selecting with enter key, navigation with arrow keys, etc.
         * @param event
         */
        NovoSelectSearchComponent.prototype._handleKeydown = function (event) {
            var _this = this;
            // Prevent propagation for all alphanumeric characters in order to avoid selection issues
            if ((event.key && event.key.length === 1) ||
                isAlphaNumeric(event.key) ||
                event.key === " " /* Space */ ||
                (this.preventHomeEndKeyPropagation && (event.key === "Home" /* Home */ || event.key === "End" /* End */))) {
                event.stopPropagation();
            }
            if (this.novoSelect.multiple && event.key && event.key === "Enter" /* Enter */) {
                // Regain focus after multiselect, so we can further type
                setTimeout(function () { return _this._focus(); });
            }
            // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field
            if (this.enableClearOnEscapePressed === true && event.key === "Escape" /* Escape */ && this.value) {
                this._reset(true);
                event.stopPropagation();
            }
        };
        /**
         * Handles the key up event with NovoSelectElement.
         * Allows e.g. the announcing of the currently activeDescendant by screen readers.
         */
        NovoSelectSearchComponent.prototype._handleKeyup = function (event) {
            if (event.key === "ArrowUp" /* ArrowUp */ || event.key === "ArrowDown" /* ArrowDown */) {
                var ariaActiveDescendantId_1 = this.novoSelect._getAriaActiveDescendant();
                var index = this._options.toArray().findIndex(function (item) { return item.id === ariaActiveDescendantId_1; });
                if (index !== -1) {
                    var activeDescendant = this._options.toArray()[index];
                    this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());
                }
            }
        };
        /**
         * Calculate the index of the current option, taking the offset to length into account.
         * examples:
         *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.
         *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.
         */
        NovoSelectSearchComponent.prototype.getAriaIndex = function (optionIndex) {
            if (this.getOptionsLengthOffset() === 0) {
                return optionIndex + 1;
            }
            return optionIndex;
        };
        /**
         * Calculate the length of the options, taking the offset to length into account.
         * examples:
         *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.
         *    Case 2 [1, 2, 3] will have length of options.length.
         */
        NovoSelectSearchComponent.prototype.getAriaLength = function () {
            return this._options.toArray().length - this.getOptionsLengthOffset();
        };
        NovoSelectSearchComponent.prototype.writeValue = function (value) {
            this._lastExternalInputValue = value;
            this._formControl.setValue(value);
            this.changeDetectorRef.markForCheck();
        };
        NovoSelectSearchComponent.prototype.onBlur = function () {
            this.onTouched();
        };
        NovoSelectSearchComponent.prototype.registerOnChange = function (fn) {
            var _this = this;
            this._formControl.valueChanges
                .pipe(operators.filter(function (value) { return value !== _this._lastExternalInputValue; }), operators.tap(function () { return (_this._lastExternalInputValue = undefined); }), operators.takeUntil(this._onDestroy))
                .subscribe(fn);
        };
        NovoSelectSearchComponent.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        /**
         * Focuses the search input field
         */
        NovoSelectSearchComponent.prototype._focus = function () {
            if (!this.searchSelectInput || !this.novoSelect.panel) {
                return;
            }
            // save and restore scrollTop of panel, since it will be reset by focus()
            // note: this is hacky
            var panel = this.novoSelect.panel.nativeElement;
            var scrollTop = panel.scrollTop;
            // focus
            this.searchSelectInput.nativeElement.focus();
            panel.scrollTop = scrollTop;
        };
        /**
         * Resets the current search value
         * @param focus whether to focus after resetting
         */
        NovoSelectSearchComponent.prototype._reset = function (focus) {
            this._formControl.setValue('');
            if (focus) {
                this._focus();
            }
        };
        /**
         * Initializes handling <novo-select [multiple]="true">
         * Note: to improve this code, novo-select should be extended to allow disabling resetting the selection while filtering.
         */
        NovoSelectSearchComponent.prototype.initMultipleHandling = function () {
            var _this = this;
            if (!this.novoSelect.ngControl) {
                if (this.novoSelect.multiple) {
                    // note: the access to novoSelect.ngControl (instead of novoSelect.value / novoSelect.valueChanges)
                    // is necessary to properly work in multi-selection mode.
                    console.error('the novo-select containing ngx-novo-select-search must have a ngModel or formControl directive when multiple=true');
                }
                return;
            }
            // if <novo-select [multiple]="true">
            // store previously selected values and restore them when they are deselected
            // because the option is not available while we are currently filtering
            this.previousSelectedValues = this.novoSelect.ngControl.value;
            this.novoSelect.ngControl.valueChanges.pipe(operators.takeUntil(this._onDestroy)).subscribe(function (values) {
                var restoreSelectedValues = false;
                if (_this.novoSelect.multiple) {
                    if ((_this.alwaysRestoreSelectedOptionsMulti || (_this._formControl.value && _this._formControl.value.length)) &&
                        _this.previousSelectedValues &&
                        Array.isArray(_this.previousSelectedValues)) {
                        if (!values || !Array.isArray(values)) {
                            values = [];
                        }
                        var optionValues_1 = _this.novoSelect.options.map(function (option) { return option.value; });
                        _this.previousSelectedValues.forEach(function (previousValue) {
                            if (!values.some(function (v) { return _this.novoSelect.compareWith(v, previousValue); }) &&
                                !optionValues_1.some(function (v) { return _this.novoSelect.compareWith(v, previousValue); })) {
                                // if a value that was selected before is deselected and not found in the options, it was deselected
                                // due to the filtering, so we restore it.
                                values.push(previousValue);
                                restoreSelectedValues = true;
                            }
                        });
                    }
                }
                _this.previousSelectedValues = values;
                if (restoreSelectedValues) {
                    // TODO: Fix this
                    // this.novoSelect._onChange(values);
                }
            });
        };
        /**
         * Scrolls the currently active option into the view if it is not yet visible.
         */
        NovoSelectSearchComponent.prototype.adjustScrollTopToFitActiveOptionIntoView = function () {
            if (this.novoSelect.panel && this.novoSelect.contentOptions.length > 0) {
                var novoOptionHeight = this.getNovoOptionHeight();
                var activeOptionIndex = this.novoSelect._keyManager.activeItemIndex || 0;
                var labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.novoSelect.contentOptions, this.novoSelect.optionGroups);
                // If the component is in a NovoOption, the activeItemIndex will be offset by one.
                var indexOfOptionToFitIntoView = (this.novoOption ? -1 : 0) + labelCount + activeOptionIndex;
                var currentScrollTop = this.novoSelect.panel.nativeElement.scrollTop;
                var searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;
                var amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / novoOptionHeight);
                var indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / novoOptionHeight) - 1;
                if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {
                    this.novoSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * novoOptionHeight;
                }
                else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {
                    this.novoSelect.panel.nativeElement.scrollTop =
                        (indexOfOptionToFitIntoView + 1) * novoOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);
                }
            }
        };
        /**
         *  Set the width of the innerSelectSearch to fit even custom scrollbars
         *  And support all Operation Systems
         */
        NovoSelectSearchComponent.prototype.updateInputWidth = function () {
            if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {
                return;
            }
            var element = this.innerSelectSearch.nativeElement;
            var panelElement;
            while ((element = element.parentElement)) {
                if (element.classList.contains('novo-select-panel')) {
                    panelElement = element;
                    break;
                }
            }
            if (panelElement) {
                this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';
            }
        };
        NovoSelectSearchComponent.prototype.getNovoOptionHeight = function () {
            if (this.novoSelect.contentOptions.length > 0) {
                return this.novoSelect.contentOptions.first._getHostElement().getBoundingClientRect().height;
            }
            return 0;
        };
        /**
         * Determine the offset to length that can be caused by the optional novoOption used as a search input.
         */
        NovoSelectSearchComponent.prototype.getOptionsLengthOffset = function () {
            if (this.novoOption) {
                return 1;
            }
            else {
                return 0;
            }
        };
        return NovoSelectSearchComponent;
    }());
    NovoSelectSearchComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-select-search',
                    template: "<!-- Placeholder to adjust vertical offset of the novo-option elements -->\n<input novoInput class=\"novo-select-search-input novo-select-search-hidden\" />\n\n<!-- Note: the  novo-datepicker-content novo-tab-header are needed to inherit the novoerial theme colors, see PR #22 -->\n<div\n  #innerSelectSearch\n  class=\"novo-select-search-inner novo-typography novo-datepicker-content novo-tab-header\"\n  [ngClass]=\"{'novo-select-search-inner-multiple': novoSelect.multiple, 'novo-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\">\n\n  <novo-checkbox *ngIf=\"_isToggleAllCheckboxVisible()\"\n    [color]=\"'primary'\"\n    class=\"novo-select-search-toggle-all-checkbox\"\n    [checked]=\"toggleAllCheckboxChecked\"\n    [indeterminate]=\"toggleAllCheckboxIndeterminate\"\n    [tooltip]=\"toggleAllCheckboxTooltipMessage\"\n    tooltipClass=\"ngx-novo-select-search-toggle-all-tooltip\"\n    [tooltipPosition]=\"toogleAllCheckboxTooltipPosition\"\n    (change)=\"_emitSelectAllBooleanToParent($event.checked)\"></novo-checkbox>\n\n  <novo-icon class=\"novo-select-search-icon-prefix\">search</novo-icon>\n\n  <input class=\"novo-select-search-input novo-input-element\"\n    #searchSelectInput\n    [name]=\"name\"\n    autocomplete=\"off\"\n    [type]=\"type\"\n    [formControl]=\"_formControl\"\n    (keydown)=\"_handleKeydown($event)\"\n    (keyup)=\"_handleKeyup($event)\"\n    (blur)=\"onBlur()\"\n    [placeholder]=\"placeholderLabel\"\n    [attr.aria-label]=\"ariaLabel\" />\n  <novo-spinner *ngIf=\"searching\"\n    class=\"novo-select-search-spinner\"\n    diameter=\"16\"></novo-spinner>\n\n  <novo-button\n    *ngIf=\"!hideClearSearchButton && value && !searching\"\n    aria-label=\"Clear\"\n    (click)=\"_reset(true)\"\n    theme=\"icon\"\n    size=\"small\"\n    class=\"novo-select-search-clear\">\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[novoSelectSearchClear]\"></ng-content>\n    <ng-template #defaultIcon>\n      <novo-icon>close</novo-icon>\n    </ng-template>\n  </novo-button>\n\n  <ng-content select=\".novo-select-search-custom-header-content\"></ng-content>\n\n</div>\n\n<div *ngIf=\"_showNoEntriesFound$ | async\"\n  class=\"novo-select-search-no-entries-found\">\n  {{noEntriesFoundLabel}}\n</div>",
                    providers: [
                        {
                            provide: forms.NG_VALUE_ACCESSOR,
                            useExisting: i0.forwardRef(function () { return NovoSelectSearchComponent; }),
                            multi: true,
                        },
                    ],
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-select-search-hidden{visibility:hidden}.novo-select-search-inner{-webkit-transform:translateZ(0);border-bottom-style:solid;border-bottom-width:1px;border-radius:0;box-shadow:none;font-size:inherit;min-width:190px;position:absolute;top:0;width:100%;z-index:100}.novo-select-search-inner.novo-select-search-inner-multiple{width:100%}.novo-select-search-inner.novo-select-search-inner-multiple.novo-select-search-inner-toggle-all{align-items:center;display:flex}.novo-select-search-inner .novo-input-element{border:none;flex-basis:auto}.novo-select-search-inner .novo-input-element:focus{border-radius:0!important;outline:none}.novo-select-search-inner .novo-input-element:-ms-input-placeholder{-ms-user-select:text}::ng-deep .novo-select-search-panel{overflow-x:hidden;transform:none!important}.novo-select-search-input{box-sizing:border-box;padding:1rem 24px 1rem 40px;width:100%}:host-context([dir=rtl]) .novo-select-search-input{padding-left:24px;padding-right:16px}.novo-select-search-no-entries-found{padding:16px}.novo-select-search-icon-prefix{left:16px;position:absolute;top:7px}.novo-select-search-clear{position:absolute;right:4px;top:5px}:host-context([dir=rtl]) .novo-select-search-clear{left:4px;right:auto}.novo-select-search-spinner{position:absolute;right:16px;top:calc(50% - 8px)}:host-context([dir=rtl]) .novo-select-search-spinner{left:16px;right:auto}:host.novo-select-search-inside-novo-option .novo-select-search-input{height:3em;line-height:3em;padding-bottom:0;padding-top:0}:host.novo-select-search-inside-novo-option .novo-select-search-clear{top:6px}:host.novo-select-search-inside-novo-option .novo-select-search-icon-prefix{left:16px;top:7px}::ng-deep .novo-option[aria-disabled=true].contains-novo-select-search{padding:0;position:static}::ng-deep .novo-option[aria-disabled=true].contains-novo-select-search .novo-icon{margin-left:0;margin-right:0}::ng-deep .novo-option[aria-disabled=true].contains-novo-select-search .novo-option-pseudo-checkbox{display:none}::ng-deep .novo-option[aria-disabled=true].contains-novo-select-search.novo-select-search-no-entries-found{height:6em}.novo-select-search-toggle-all-checkbox{padding-bottom:2px;padding-left:16px}:host-context([dir=rtl]) .novo-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}"]
                },] }
    ];
    NovoSelectSearchComponent.ctorParameters = function () { return [
        { type: NovoSelectElement, decorators: [{ type: i0.Inject, args: [NovoSelectElement,] }] },
        { type: i0.ChangeDetectorRef },
        { type: scrolling.ViewportRuler },
        { type: NovoOption, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NovoOption,] }] },
        { type: a11y.LiveAnnouncer },
        { type: NovoFieldElement, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [NovoFieldElement,] }] }
    ]; };
    NovoSelectSearchComponent.propDecorators = {
        name: [{ type: i0.Input }],
        placeholderLabel: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        noEntriesFoundLabel: [{ type: i0.Input }],
        indexAndLengthScreenReaderText: [{ type: i0.Input }],
        clearSearchInput: [{ type: i0.Input }],
        searching: [{ type: i0.Input }],
        disableInitialFocus: [{ type: i0.Input }],
        enableClearOnEscapePressed: [{ type: i0.Input }],
        preventHomeEndKeyPropagation: [{ type: i0.Input }],
        disableScrollToActiveOnOptionsChanged: [{ type: i0.Input }],
        ariaLabel: [{ type: i0.Input }],
        showToggleAllCheckbox: [{ type: i0.Input }],
        toggleAllCheckboxChecked: [{ type: i0.Input }],
        toggleAllCheckboxIndeterminate: [{ type: i0.Input }],
        toggleAllCheckboxTooltipMessage: [{ type: i0.Input }],
        toogleAllCheckboxTooltipPosition: [{ type: i0.Input }],
        hideClearSearchButton: [{ type: i0.Input }],
        alwaysRestoreSelectedOptionsMulti: [{ type: i0.Input }],
        toggleAll: [{ type: i0.Output }],
        searchSelectInput: [{ type: i0.ViewChild, args: ['searchSelectInput', { read: i0.ElementRef, static: true },] }],
        innerSelectSearch: [{ type: i0.ViewChild, args: ['innerSelectSearch', { read: i0.ElementRef, static: true },] }],
        clearIcon: [{ type: i0.ContentChild, args: [NovoSelectSearchClearDirective, { static: false },] }],
        isInsideNovoOption: [{ type: i0.HostBinding, args: ['class.novo-select-search-inside-novo-option',] }]
    };

    // export const NovoSelectSearchVersion = '3.3.0';
    var NovoSelectSearchModule = /** @class */ (function () {
        function NovoSelectSearchModule() {
        }
        return NovoSelectSearchModule;
    }());
    NovoSelectSearchModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.ReactiveFormsModule,
                        NovoCheckboxModule,
                        NovoButtonModule,
                        NovoCommonModule,
                        NovoIconModule,
                        NovoLoadingModule,
                        NovoTooltipModule,
                    ],
                    declarations: [NovoSelectSearchComponent, NovoSelectSearchClearDirective],
                    exports: [NovoSelectSearchComponent, NovoSelectSearchClearDirective],
                },] }
    ];

    var ActivityTableRenderers = /** @class */ (function () {
        function ActivityTableRenderers() {
        }
        ActivityTableRenderers.propertyRenderer = function (prop) {
            var ret = function (data) {
                // TODO - allow for dots and sub props
                return data[prop];
            };
            return ret;
        };
        ActivityTableRenderers.dateRenderer = function (prop) {
            var ret = function (data) {
                return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
            };
            return ret;
        };
        return ActivityTableRenderers;
    }());

    var NovoActivityTableState = /** @class */ (function () {
        function NovoActivityTableState() {
            this.id = Math.random();
            this.sort = undefined;
            this.filter = undefined;
            this.page = 0;
            this.pageSize = undefined;
            this.globalSearch = undefined;
            this.selectedRows = new Map();
            this.updates = new i0.EventEmitter();
            this.onReset = new i0.EventEmitter();
        }
        Object.defineProperty(NovoActivityTableState.prototype, "userFiltered", {
            get: function () {
                return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
            },
            enumerable: false,
            configurable: true
        });
        NovoActivityTableState.prototype.reset = function (fireUpdate, persistUserFilters) {
            if (fireUpdate === void 0) { fireUpdate = true; }
            if (!persistUserFilters) {
                this.sort = undefined;
                this.globalSearch = undefined;
                this.filter = undefined;
            }
            this.page = 0;
            this.selectedRows.clear();
            this.onReset.emit(true);
            if (fireUpdate) {
                this.updates.emit({
                    sort: this.sort,
                    filter: this.filter,
                    globalSearch: this.globalSearch,
                });
            }
        };
        return NovoActivityTableState;
    }());
    NovoActivityTableState.decorators = [
        { type: i0.Injectable }
    ];

    var NovoSortFilter = /** @class */ (function () {
        function NovoSortFilter(state) {
            this.state = state;
        }
        NovoSortFilter.prototype.filter = function (id, value, transform) {
            var filter;
            if (!Helpers.isBlank(value)) {
                filter = { id: id, value: value, transform: transform };
            }
            else {
                filter = undefined;
            }
            this.state.filter = filter;
            this.state.reset(false, true);
            this.state.updates.next({ filter: filter, sort: this.state.sort });
        };
        NovoSortFilter.prototype.sort = function (id, value, transform) {
            var sort = { id: id, value: value, transform: transform };
            this.state.sort = sort;
            this.state.reset(false, true);
            this.state.updates.next({ sort: sort, filter: this.state.filter });
        };
        return NovoSortFilter;
    }());
    NovoSortFilter.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSortFilter]',
                },] }
    ];
    NovoSortFilter.ctorParameters = function () { return [
        { type: NovoActivityTableState }
    ]; };
    var NovoSelection = /** @class */ (function () {
        function NovoSelection(state) {
            this.state = state;
            this.novoSelectAllToggle = new i0.EventEmitter();
            this.allRows = new Map();
        }
        NovoSelection.prototype.register = function (id, row) {
            this.allRows.set(id, row);
        };
        NovoSelection.prototype.deregister = function (id) {
            var _this = this;
            this.allRows.delete(id);
            this.state.selectedRows.delete(id);
            clearTimeout(this.throttleTimeout);
            this.throttleTimeout = setTimeout(function () {
                if (_this.state.selectedRows.size === 0) {
                    _this.novoSelectAllToggle.emit(false);
                }
            });
        };
        NovoSelection.prototype.ngOnDestroy = function () {
            this.allRows.clear();
            this.state.selectedRows.clear();
        };
        NovoSelection.prototype.toggle = function (id, selected, row) {
            if (selected) {
                this.state.selectedRows.set(id, row);
            }
            else {
                this.state.selectedRows.delete(id);
            }
        };
        NovoSelection.prototype.selectAll = function (value) {
            if (value) {
                this.state.selectedRows = new Map(this.allRows);
            }
            else {
                this.state.selectedRows.clear();
            }
            this.novoSelectAllToggle.emit(value);
        };
        return NovoSelection;
    }());
    NovoSelection.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSelection]',
                },] }
    ];
    NovoSelection.ctorParameters = function () { return [
        { type: NovoActivityTableState }
    ]; };
    NovoSelection.propDecorators = {
        novoSelectAllToggle: [{ type: i0.Output }]
    };

    /** Workaround for https://github.com/angular/angular/issues/17849 */
    var _NovoCellDef = table.CdkCellDef;
    var _NovoHeaderCellDef = table.CdkHeaderCellDef;
    var _NovoColumnDef = table.CdkColumnDef;
    var _NovoHeaderCell = table.CdkHeaderCell;
    var _NovoCell = table.CdkCell;
    var NovoSimpleCellDef = /** @class */ (function (_super) {
        __extends(NovoSimpleCellDef, _super);
        function NovoSimpleCellDef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoSimpleCellDef;
    }(_NovoCellDef));
    NovoSimpleCellDef.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSimpleCellDef]',
                    providers: [{ provide: table.CdkCellDef, useExisting: NovoSimpleCellDef }],
                },] }
    ];
    var NovoSimpleHeaderCellDef = /** @class */ (function (_super) {
        __extends(NovoSimpleHeaderCellDef, _super);
        function NovoSimpleHeaderCellDef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoSimpleHeaderCellDef;
    }(_NovoHeaderCellDef));
    NovoSimpleHeaderCellDef.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSimpleHeaderCellDef]',
                    providers: [{ provide: table.CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }],
                },] }
    ];
    var NovoSimpleColumnDef = /** @class */ (function (_super) {
        __extends(NovoSimpleColumnDef, _super);
        function NovoSimpleColumnDef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(NovoSimpleColumnDef.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (name) {
                this._setNameInput(name);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * This has been extracted to a util because of TS 4 and VE.
         * View Engine doesn't support property rename inheritance.
         * TS 4.0 doesn't allow properties to override accessors or vice-versa.
         * @docs-private
         */
        NovoSimpleColumnDef.prototype._setNameInput = function (value) {
            // If the directive is set without a name (updated programatically), then this setter will
            // trigger with an empty string and should not overwrite the programatically set value.
            if (value) {
                this._name = value;
                this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');
                this._updateColumnCssClassName();
            }
        };
        return NovoSimpleColumnDef;
    }(_NovoColumnDef));
    NovoSimpleColumnDef.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSimpleColumnDef]',
                    providers: [{ provide: table.CdkColumnDef, useExisting: NovoSimpleColumnDef }],
                },] }
    ];
    NovoSimpleColumnDef.propDecorators = {
        name: [{ type: i0.Input, args: ['novoSimpleColumnDef',] }]
    };
    var NovoSimpleHeaderCell = /** @class */ (function (_super) {
        __extends(NovoSimpleHeaderCell, _super);
        function NovoSimpleHeaderCell(columnDef, elementRef, renderer) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.role = 'columnheader';
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
            return _this;
        }
        NovoSimpleHeaderCell.prototype.ngOnInit = function () {
            if (this.column.width) {
                this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
            }
        };
        return NovoSimpleHeaderCell;
    }(_NovoHeaderCell));
    NovoSimpleHeaderCell.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-simple-header-cell',
                },] }
    ];
    NovoSimpleHeaderCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    NovoSimpleHeaderCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        column: [{ type: i0.Input }]
    };
    var NovoSimpleEmptyHeaderCell = /** @class */ (function (_super) {
        __extends(NovoSimpleEmptyHeaderCell, _super);
        function NovoSimpleEmptyHeaderCell(columnDef, elementRef, renderer) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.role = 'columnheader';
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
            return _this;
        }
        return NovoSimpleEmptyHeaderCell;
    }(_NovoHeaderCell));
    NovoSimpleEmptyHeaderCell.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-simple-empty-header-cell',
                },] }
    ];
    NovoSimpleEmptyHeaderCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    NovoSimpleEmptyHeaderCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };
    var NovoSimpleCheckboxHeaderCell = /** @class */ (function (_super) {
        __extends(NovoSimpleCheckboxHeaderCell, _super);
        function NovoSimpleCheckboxHeaderCell(columnDef, elementRef, renderer, ref, _selection) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this._selection = _selection;
            _this.role = 'columnheader';
            _this.selectAll = false;
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
            _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
                _this.selectAll = value;
                ref.markForCheck();
            });
            return _this;
        }
        NovoSimpleCheckboxHeaderCell.prototype.ngOnDestroy = function () {
            this.selectAllSubscription.unsubscribe();
        };
        NovoSimpleCheckboxHeaderCell.prototype.toggle = function (value) {
            this._selection.selectAll(value);
        };
        return NovoSimpleCheckboxHeaderCell;
    }(_NovoHeaderCell));
    NovoSimpleCheckboxHeaderCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-checkbox-header-cell',
                    template: "<novo-checkbox [(ngModel)]=\"selectAll\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>"
                },] }
    ];
    NovoSimpleCheckboxHeaderCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i0.ChangeDetectorRef },
        { type: NovoSelection, decorators: [{ type: i0.Optional }] }
    ]; };
    NovoSimpleCheckboxHeaderCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };
    var NovoSimpleCell = /** @class */ (function (_super) {
        __extends(NovoSimpleCell, _super);
        function NovoSimpleCell(columnDef, elementRef, renderer) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.role = 'gridcell';
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
            return _this;
        }
        NovoSimpleCell.prototype.ngOnInit = function () {
            if (this.column.customClass) {
                this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
            }
            if (this.column.width) {
                this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
                this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
                // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
                // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
                // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
                // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
            }
            // else {
            //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
            //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
            //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
            // }
        };
        NovoSimpleCell.prototype.onClick = function (event) {
            Helpers.swallowEvent(event);
            if (this.column.onClick) {
                this.column.onClick(this.row);
            }
            return;
        };
        return NovoSimpleCell;
    }(_NovoCell));
    NovoSimpleCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-cell',
                    template: " <span [class.clickable]=\"!!column.onClick\" (click)=\"onClick($event)\" #span>{{ column.renderer(row) }}</span> ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoSimpleCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    NovoSimpleCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        row: [{ type: i0.Input }],
        column: [{ type: i0.Input }]
    };
    var NovoSimpleCheckboxCell = /** @class */ (function (_super) {
        __extends(NovoSimpleCheckboxCell, _super);
        function NovoSimpleCheckboxCell(columnDef, elementRef, renderer, _selection) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.columnDef = columnDef;
            _this._selection = _selection;
            _this.role = 'gridcell';
            _this.selected = false;
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
            renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
            _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
                _this.selected = value;
            });
            return _this;
        }
        NovoSimpleCheckboxCell.prototype.ngOnInit = function () {
            this._selection.register(this.row.id || this.index, this.row);
            this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
        };
        NovoSimpleCheckboxCell.prototype.ngOnDestroy = function () {
            this._selection.deregister(this.row.id || this.index);
            this.selectAllSubscription.unsubscribe();
        };
        NovoSimpleCheckboxCell.prototype.toggle = function (value) {
            this._selection.toggle(this.row.id || this.index, value, this.row);
        };
        return NovoSimpleCheckboxCell;
    }(_NovoCell));
    NovoSimpleCheckboxCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-checkbox-cell',
                    template: " <novo-checkbox [ngModel]=\"selected\" (ngModelChange)=\"toggle($event)\"></novo-checkbox> "
                },] }
    ];
    NovoSimpleCheckboxCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoSelection, decorators: [{ type: i0.Optional }] }
    ]; };
    NovoSimpleCheckboxCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        row: [{ type: i0.Input }],
        index: [{ type: i0.Input }]
    };
    var NovoSimpleActionCell = /** @class */ (function (_super) {
        __extends(NovoSimpleActionCell, _super);
        function NovoSimpleActionCell(columnDef, elementRef, renderer, labels) {
            var _this = _super.call(this, columnDef, elementRef) || this;
            _this.elementRef = elementRef;
            _this.renderer = renderer;
            _this.labels = labels;
            _this.role = 'gridcell';
            renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-action-column-" + columnDef.cssClassFriendlyName);
            return _this;
        }
        NovoSimpleActionCell.prototype.ngOnInit = function () {
            if (this.column.options) {
                this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
            }
            else {
                this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
            }
        };
        NovoSimpleActionCell.prototype.isDisabled = function (check, row) {
            if (check.disabled === true) {
                return true;
            }
            if (check.disabledCheck) {
                return check.disabledCheck(row);
            }
            return false;
        };
        return NovoSimpleActionCell;
    }(_NovoCell));
    NovoSimpleActionCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-action-cell',
                    template: "\n    <ng-container *ngIf=\"!column.options\">\n      <novo-button theme=\"icon\" [icon]=\"column.icon\" (click)=\"column.onClick(row)\" [disabled]=\"isDisabled(column, row)\"></novo-button>\n    </ng-container>\n    <ng-container *ngIf=\"column.options\">\n      <novo-dropdown parentScrollSelector=\".novo-simple-table\" containerClass=\"novo-table-dropdown-cell\">\n        <novo-button type=\"button\" theme=\"dialogue\" icon=\"collapse\" inverse>{{ column.label || labels.actions }}</novo-button>\n        <list>\n          <item *ngFor=\"let option of column.options\" (action)=\"option.onClick(row)\" [disabled]=\"isDisabled(option, row)\">\n            <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n          </item>\n        </list>\n      </novo-dropdown>\n    </ng-container>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoSimpleActionCell.ctorParameters = function () { return [
        { type: table.CdkColumnDef },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: NovoLabelService }
    ]; };
    NovoSimpleActionCell.propDecorators = {
        role: [{ type: i0.HostBinding, args: ['attr.role',] }],
        row: [{ type: i0.Input }],
        column: [{ type: i0.Input }]
    };

    var NovoSimpleFilterFocus = /** @class */ (function () {
        function NovoSimpleFilterFocus(element) {
            this.element = element;
        }
        NovoSimpleFilterFocus.prototype.ngAfterViewInit = function () {
            this.element.nativeElement.focus();
        };
        return NovoSimpleFilterFocus;
    }());
    NovoSimpleFilterFocus.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSimpleFilterFocus]',
                },] }
    ];
    NovoSimpleFilterFocus.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    var NovoSimpleCellHeader = /** @class */ (function () {
        function NovoSimpleCellHeader(changeDetectorRef, labels, state, _sort, _cdkColumnDef) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.labels = labels;
            this.state = state;
            this._sort = _sort;
            this._cdkColumnDef = _cdkColumnDef;
            this.icon = 'sortable';
            this.filterActive = false;
            this.sortActive = false;
            this.showCustomRange = false;
            this._rerenderSubscription = state.updates.subscribe(function (change) {
                if (change.sort && change.sort.id === _this.id) {
                    _this.icon = "sort-" + change.sort.value;
                    _this.sortActive = true;
                }
                else {
                    _this.icon = 'sortable';
                    _this.sortActive = false;
                }
                if (change.filter && change.filter.id === _this.id) {
                    _this.filterActive = true;
                    _this.filter = change.filter.value;
                }
                else {
                    _this.filterActive = false;
                    _this.filter = undefined;
                }
                changeDetectorRef.markForCheck();
            });
        }
        Object.defineProperty(NovoSimpleCellHeader.prototype, "config", {
            get: function () {
                return this._config;
            },
            set: function (v) {
                if (!v) {
                    this._config = {
                        sortable: false,
                        filterable: false,
                        filterConfig: {
                            type: 'text',
                        },
                    };
                }
                else {
                    this._config = {
                        sortable: coercion.coerceBooleanProperty(v.sortable),
                        filterable: coercion.coerceBooleanProperty(v.filterable),
                        transforms: v.transforms || {},
                        filterConfig: v.filterConfig || {
                            type: 'text',
                        },
                    };
                    if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                        this._config.filterConfig.options = this.getDefaultDateFilterOptions();
                    }
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoSimpleCellHeader.prototype.ngOnInit = function () {
            if (this._cdkColumnDef) {
                this.id = this._cdkColumnDef.name;
            }
            if (this.defaultSort && this.id === this.defaultSort.id) {
                this.icon = "sort-" + this.defaultSort.value;
                this.sortActive = true;
                this.changeDetectorRef.markForCheck();
            }
        };
        NovoSimpleCellHeader.prototype.ngOnDestroy = function () {
            this._rerenderSubscription.unsubscribe();
        };
        NovoSimpleCellHeader.prototype.sort = function () {
            var _this = this;
            if (this.changeTimeout) {
                clearTimeout(this.changeTimeout);
            }
            this.changeTimeout = setTimeout(function () {
                _this.direction = _this.getNextSortDirection(_this.direction);
                _this._sort.sort(_this.id, _this.direction, _this._config.transforms.sort);
                _this.changeDetectorRef.markForCheck();
            }, 300);
        };
        NovoSimpleCellHeader.prototype.toggleCustomRange = function (event, value) {
            Helpers.swallowEvent(event);
            this.showCustomRange = value;
            this.changeDetectorRef.markForCheck();
            this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
        };
        NovoSimpleCellHeader.prototype.filterData = function (filter) {
            var _this = this;
            var actualFilter = filter;
            if (this.config.filterConfig.type === 'date' && filter) {
                this.activeDateFilter = filter.label || this.labels.customDateRange;
                if (filter.startDate && filter.endDate) {
                    actualFilter = {
                        min: dateFns.startOfDay(filter.startDate.date),
                        max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(filter.endDate.date), 1)),
                    };
                }
                else {
                    actualFilter = {
                        min: filter.min ? dateFns.addDays(dateFns.startOfToday(), filter.min) : dateFns.startOfToday(),
                        max: filter.max ? dateFns.addDays(dateFns.startOfTomorrow(), filter.max) : dateFns.startOfTomorrow(),
                    };
                }
            }
            if (actualFilter && actualFilter.hasOwnProperty('value')) {
                actualFilter = filter.value;
            }
            if (this.changeTimeout) {
                clearTimeout(this.changeTimeout);
            }
            this.changeTimeout = setTimeout(function () {
                if (actualFilter === '') {
                    actualFilter = undefined;
                }
                _this._sort.filter(_this.id, actualFilter, _this.config.transforms.filter);
                _this.changeDetectorRef.markForCheck();
            }, 300);
        };
        NovoSimpleCellHeader.prototype.clearFilter = function () {
            this.filter = undefined;
            this.activeDateFilter = undefined;
            this.filterData();
        };
        NovoSimpleCellHeader.prototype.getNextSortDirection = function (direction) {
            if (!direction) {
                return 'asc';
            }
            if (direction === 'asc') {
                return 'desc';
            }
            return 'asc';
        };
        NovoSimpleCellHeader.prototype.getDefaultDateFilterOptions = function () {
            var opts = [
                { label: this.labels.past1Day, min: -1, max: 0 },
                { label: this.labels.past7Days, min: -7, max: 0 },
                { label: this.labels.past30Days, min: -30, max: 0 },
                { label: this.labels.past90Days, min: -90, max: 0 },
                { label: this.labels.past1Year, min: -366, max: 0 },
                { label: this.labels.next1Day, min: 0, max: 1 },
                { label: this.labels.next7Days, min: 0, max: 7 },
                { label: this.labels.next30Days, min: 0, max: 30 },
                { label: this.labels.next90Days, min: 0, max: 90 },
                { label: this.labels.next1Year, min: 0, max: 366 },
            ];
            return opts;
        };
        return NovoSimpleCellHeader;
    }());
    NovoSimpleCellHeader.decorators = [
        { type: i0.Component, args: [{
                    selector: '[novo-simple-cell-config]',
                    template: "\n    <label (click)=\"sort()\" data-automation-id=\"novo-activity-table-label\" [class.sort-disabled]=\"!config.sortable\">\n      <ng-content></ng-content>\n    </label>\n    <div>\n      <novo-button\n        *ngIf=\"config.sortable\"\n        theme=\"icon\"\n        [icon]=\"icon\"\n        (click)=\"sort()\"\n        [class.active]=\"sortActive\"\n        data-automation-id=\"novo-activity-table-sort\"\n      ></novo-button>\n      <novo-dropdown\n        *ngIf=\"config.filterable\"\n        side=\"right\"\n        parentScrollSelector=\".novo-simple-table\"\n        containerClass=\"simple-table-dropdown\"\n        data-automation-id=\"novo-activity-table-filter\"\n      >\n        <novo-button type=\"button\" theme=\"icon\" icon=\"filter\" [class.active]=\"filterActive\"></novo-button>\n        <div class=\"header\">\n          <span>{{ labels.filters }}</span>\n          <novo-button\n            theme=\"dialogue\"\n            color=\"negative\"\n            icon=\"times\"\n            (click)=\"clearFilter()\"\n            *ngIf=\"filter\"\n            data-automation-id=\"novo-activity-table-filter-clear\"\n          >\n            {{ labels.clear }}\n          </novo-button>\n        </div>\n        <ng-container [ngSwitch]=\"config.filterConfig.type\">\n          <novo-optgroup *ngSwitchCase=\"'date'\">\n            <ng-container *ngIf=\"!showCustomRange\">\n              <novo-option\n                [class.active]=\"activeDateFilter === option.label\"\n                *ngFor=\"let option of config.filterConfig.options\"\n                (click)=\"filterData(option)\"\n                [attr.data-automation-id]=\"'novo-activity-table-filter-' + option.label\"\n              >\n                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n              </novo-option>\n            </ng-container>\n            <novo-option\n              [class.active]=\"labels.customDateRange === activeDateFilter\"\n              (click)=\"toggleCustomRange($event, true)\"\n              *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\"\n              [keepOpen]=\"true\"\n            >\n              {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n            </novo-option>\n            <div class=\"calendar-container\" *ngIf=\"showCustomRange\">\n              <div (click)=\"toggleCustomRange($event, false)\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n              <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n            </div>\n          </novo-optgroup>\n          <novo-optgroup *ngSwitchCase=\"'select'\">\n            <novo-option\n              [class.active]=\"filter === option\"\n              *ngFor=\"let option of config.filterConfig.options\"\n              (click)=\"filterData(option)\"\n              [attr.data-automation-id]=\"'novo-activity-table-filter-' + (option?.label || option)\"\n            >\n              <span>{{ option?.label || option }}</span>\n              <i class=\"bhi-check\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n            </novo-option>\n          </novo-optgroup>\n          <novo-optgroup *ngSwitchDefault>\n            <novo-option class=\"filter-search\" keepOpen>\n              <input\n                type=\"text\"\n                [(ngModel)]=\"filter\"\n                (ngModelChange)=\"filterData($event)\"\n                novoSimpleFilterFocus\n                data-automation-id=\"novo-activity-table-filter-input\"\n              />\n            </novo-option>\n          </novo-optgroup>\n        </ng-container>\n      </novo-dropdown>\n    </div>\n  ",
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoSimpleCellHeader.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: NovoLabelService },
        { type: NovoActivityTableState },
        { type: NovoSortFilter, decorators: [{ type: i0.Optional }] },
        { type: table.CdkColumnDef, decorators: [{ type: i0.Optional }] }
    ]; };
    NovoSimpleCellHeader.propDecorators = {
        dropdown: [{ type: i0.ViewChild, args: [NovoDropdownElement,] }],
        defaultSort: [{ type: i0.Input }],
        config: [{ type: i0.Input, args: ['novo-simple-cell-config',] }]
    };

    var DEFAULT_PAGE_SIZE = 50;
    var NovoSimpleTablePagination = /** @class */ (function () {
        function NovoSimpleTablePagination(changeDetectorRef, labels, state) {
            var _this = this;
            this.changeDetectorRef = changeDetectorRef;
            this.labels = labels;
            this.state = state;
            this._page = 0;
            this._length = 0;
            this._pageSizeOptions = [];
            this.pageChange = new i0.EventEmitter();
            if (state && state.onReset) {
                this.resetSubscription = this.state.onReset.subscribe(function (clear) {
                    if (clear) {
                        _this.page = 0;
                        _this.changeDetectorRef.markForCheck();
                    }
                });
            }
        }
        Object.defineProperty(NovoSimpleTablePagination.prototype, "page", {
            get: function () {
                return this._page;
            },
            set: function (page) {
                this._page = page;
                this.changeDetectorRef.markForCheck();
                this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
                this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
                this.state.page = this._page;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSimpleTablePagination.prototype, "length", {
            get: function () {
                return this._length;
            },
            set: function (length) {
                this._length = length;
                this.changeDetectorRef.markForCheck();
                this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
                this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSize", {
            get: function () {
                return this._pageSize;
            },
            set: function (pageSize) {
                this._pageSize = pageSize;
                this.updateDisplayedPageSizeOptions();
                this.state.pageSize = this._pageSize;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSizeOptions", {
            get: function () {
                return this._pageSizeOptions;
            },
            set: function (pageSizeOptions) {
                this._pageSizeOptions = pageSizeOptions;
                this.updateDisplayedPageSizeOptions();
            },
            enumerable: false,
            configurable: true
        });
        NovoSimpleTablePagination.prototype.ngOnInit = function () {
            this._initialized = true;
            this.updateDisplayedPageSizeOptions();
        };
        NovoSimpleTablePagination.prototype.ngOnDestroy = function () {
            this.resetSubscription.unsubscribe();
        };
        NovoSimpleTablePagination.prototype.nextPage = function () {
            if (!this.hasNextPage()) {
                return;
            }
            this.page++;
            this.emitPageEvent();
        };
        NovoSimpleTablePagination.prototype.previousPage = function () {
            if (!this.hasPreviousPage()) {
                return;
            }
            this.page--;
            this.emitPageEvent();
        };
        NovoSimpleTablePagination.prototype.hasPreviousPage = function () {
            return this.page >= 1 && this.pageSize !== 0;
        };
        NovoSimpleTablePagination.prototype.hasNextPage = function () {
            var numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
            return this.page < numberOfPages && this.pageSize !== 0;
        };
        NovoSimpleTablePagination.prototype.changePageSize = function (pageSize) {
            this.page = 0;
            this.pageSize = pageSize;
            this.emitPageEvent();
        };
        NovoSimpleTablePagination.prototype.updateDisplayedPageSizeOptions = function () {
            if (!this._initialized) {
                return;
            }
            if (!this.pageSize) {
                this._pageSize = this.pageSizeOptions.length !== 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;
            }
            this.displayedPageSizeOptions = this.pageSizeOptions.slice();
            if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
                this.displayedPageSizeOptions.push(this.pageSize);
            }
            this.displayedPageSizeOptions.sort(function (a, b) { return a - b; });
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        };
        NovoSimpleTablePagination.prototype.emitPageEvent = function () {
            var event = {
                page: this.page,
                pageSize: this.pageSize,
                length: this.length,
            };
            this.pageChange.next(event);
            this.state.page = this.page;
            this.state.pageSize = this.pageSize;
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.updates.next(event);
        };
        return NovoSimpleTablePagination;
    }());
    NovoSimpleTablePagination.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-table-pagination',
                    template: "\n    <div class=\"novo-simple-table-pagination-size\">\n      <novo-tiles\n        *ngIf=\"displayedPageSizeOptions.length > 1\"\n        [(ngModel)]=\"pageSize\"\n        [options]=\"displayedPageSizeOptions\"\n        (onChange)=\"changePageSize($event)\"\n        data-automation-id=\"novo-simple-table-pagination-tiles\"\n      >\n      </novo-tiles>\n      <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n    </div>\n\n    <div class=\"novo-simple-table-range-label-long\" data-automation-id=\"novo-simple-table-pagination-range-label-long\">\n      {{ longRangeLabel }}\n    </div>\n    <div class=\"novo-simple-table-range-label-short\" data-automation-id=\"novo-simple-table-pagination-range-label-short\">\n      {{ shortRangeLabel }}\n    </div>\n\n    <novo-button\n      theme=\"dialogue\"\n      type=\"button\"\n      class=\"novo-simple-table-pagination-navigation-previous\"\n      (click)=\"previousPage()\"\n      icon=\"previous\"\n      side=\"left\"\n      [disabled]=\"!hasPreviousPage()\"\n      data-automation-id=\"novo-simple-table-pagination-previous\"\n    >\n      <span>{{ labels.previous }}</span>\n    </novo-button>\n    <novo-button\n      theme=\"dialogue\"\n      type=\"button\"\n      class=\"novo-simple-table-pagination-navigation-next\"\n      (click)=\"nextPage()\"\n      icon=\"next\"\n      side=\"right\"\n      [disabled]=\"!hasNextPage()\"\n      data-automation-id=\"novo-simple-table-pagination-next\"\n    >\n      <span>{{ labels.next }}</span>\n    </novo-button>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoSimpleTablePagination.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: NovoLabelService },
        { type: NovoActivityTableState }
    ]; };
    NovoSimpleTablePagination.propDecorators = {
        page: [{ type: i0.Input }],
        length: [{ type: i0.Input }],
        pageSize: [{ type: i0.Input }],
        pageSizeOptions: [{ type: i0.Input }],
        pageChange: [{ type: i0.Output }]
    };

    /** Workaround for https://github.com/angular/angular/issues/17849 */
    var _NovoHeaderRowDef = table.CdkHeaderRowDef;
    var _NovoCdkRowDef = table.CdkRowDef;
    var _NovoHeaderRow = table.CdkHeaderRow;
    var _NovoRow = table.CdkRow;
    var NovoSimpleHeaderRowDef = /** @class */ (function (_super) {
        __extends(NovoSimpleHeaderRowDef, _super);
        function NovoSimpleHeaderRowDef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoSimpleHeaderRowDef;
    }(_NovoHeaderRowDef));
    NovoSimpleHeaderRowDef.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSimpleHeaderRowDef]',
                    providers: [{ provide: table.CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }],
                },] }
    ];
    NovoSimpleHeaderRowDef.propDecorators = {
        columns: [{ type: i0.Input, args: ['novoSimpleHeaderRowDef',] }]
    };
    var NovoSimpleRowDef = /** @class */ (function (_super) {
        __extends(NovoSimpleRowDef, _super);
        function NovoSimpleRowDef() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoSimpleRowDef;
    }(_NovoCdkRowDef));
    NovoSimpleRowDef.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoSimpleRowDef]',
                    providers: [{ provide: table.CdkRowDef, useExisting: NovoSimpleRowDef }],
                },] }
    ];
    NovoSimpleRowDef.propDecorators = {
        columns: [{ type: i0.Input, args: ['novoSimpleRowDefColumns',] }]
    };
    var NovoSimpleHeaderRow = /** @class */ (function (_super) {
        __extends(NovoSimpleHeaderRow, _super);
        function NovoSimpleHeaderRow() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.rowClass = 'novo-simple-header-row';
            _this.role = 'row';
            return _this;
        }
        return NovoSimpleHeaderRow;
    }(_NovoHeaderRow));
    NovoSimpleHeaderRow.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-header-row',
                    template: table.CDK_ROW_TEMPLATE,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoSimpleHeaderRow.propDecorators = {
        rowClass: [{ type: i0.HostBinding, args: ['class',] }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };
    var NovoSimpleRow = /** @class */ (function (_super) {
        __extends(NovoSimpleRow, _super);
        function NovoSimpleRow() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            _this.rowClass = 'novo-simple-row';
            _this.role = 'row';
            return _this;
        }
        return NovoSimpleRow;
    }(_NovoRow));
    NovoSimpleRow.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-row',
                    template: table.CDK_ROW_TEMPLATE,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    NovoSimpleRow.propDecorators = {
        rowClass: [{ type: i0.HostBinding, args: ['class',] }],
        role: [{ type: i0.HostBinding, args: ['attr.role',] }]
    };

    var RemoteActivityTableService = /** @class */ (function () {
        function RemoteActivityTableService() {
        }
        return RemoteActivityTableService;
    }());
    var StaticActivityTableService = /** @class */ (function () {
        function StaticActivityTableService(data) {
            if (data === void 0) { data = []; }
            this.data = data;
        }
        StaticActivityTableService.prototype.getTableResults = function (sort, filter, page, pageSize, globalSearch, outsideFilter) {
            if (page === void 0) { page = 0; }
            var ret = Helpers.deepClone(this.data);
            if (ret.length !== 0) {
                if (globalSearch) {
                    ret = ret.filter(function (item) { return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); }); });
                }
                if (filter) {
                    var value = Helpers.isString(filter.value) ? filter.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter.value;
                    ret = ret.filter(Helpers.filterByField(filter.id, value));
                }
                if (sort) {
                    ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                }
                if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                    ret = ret.slice(page * pageSize, (page + 1) * pageSize);
                }
            }
            return rxjs.of({ results: ret, total: this.data.length });
        };
        return StaticActivityTableService;
    }());
    var ActivityTableDataSource = /** @class */ (function (_super) {
        __extends(ActivityTableDataSource, _super);
        function ActivityTableDataSource(tableService, state, ref) {
            var _this = _super.call(this) || this;
            _this.tableService = tableService;
            _this.state = state;
            _this.ref = ref;
            _this.total = 0;
            _this.current = 0;
            _this.loading = false;
            _this.pristine = true;
            return _this;
        }
        Object.defineProperty(ActivityTableDataSource.prototype, "totallyEmpty", {
            get: function () {
                return this.total === 0;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(ActivityTableDataSource.prototype, "currentlyEmpty", {
            get: function () {
                return this.current === 0;
            },
            enumerable: false,
            configurable: true
        });
        ActivityTableDataSource.prototype.connect = function () {
            var _this = this;
            var displayDataChanges = [this.state.updates];
            return rxjs.merge.apply(void 0, __spread(displayDataChanges)).pipe(operators.startWith(null), operators.switchMap(function () {
                _this.pristine = false;
                _this.loading = true;
                return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
            }), operators.map(function (data) {
                _this.loading = false;
                _this.total = data.total;
                _this.current = data.results.length;
                setTimeout(function () {
                    _this.ref.markForCheck();
                });
                return data.results;
            }), operators.catchError(function (error) {
                console.error(error); // tslint: disable-line
                _this.loading = false;
                return rxjs.of(null);
            }));
        };
        ActivityTableDataSource.prototype.disconnect = function () { };
        return ActivityTableDataSource;
    }(table.DataSource));

    /** Workaround for https://github.com/angular/angular/issues/17849 */
    var _NovoTable = table.CdkTable;
    var NovoTable = /** @class */ (function (_super) {
        __extends(NovoTable, _super);
        function NovoTable() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoTable;
    }(_NovoTable));
    NovoTable.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-simple-table',
                    template: table.CDK_TABLE_TEMPLATE,
                    encapsulation: i0.ViewEncapsulation.None,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush
                },] }
    ];
    var NovoActivityTableActions = /** @class */ (function () {
        function NovoActivityTableActions() {
        }
        return NovoActivityTableActions;
    }());
    NovoActivityTableActions.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-activity-table-actions',
                },] }
    ];
    var NovoActivityTableCustomHeader = /** @class */ (function () {
        function NovoActivityTableCustomHeader() {
        }
        return NovoActivityTableCustomHeader;
    }());
    NovoActivityTableCustomHeader.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-activity-table-custom-header',
                },] }
    ];
    var NovoActivityTableCustomFilter = /** @class */ (function () {
        function NovoActivityTableCustomFilter() {
        }
        return NovoActivityTableCustomFilter;
    }());
    NovoActivityTableCustomFilter.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-activity-table-custom-filter',
                },] }
    ];
    var NovoActivityTableEmptyMessage = /** @class */ (function () {
        function NovoActivityTableEmptyMessage() {
        }
        return NovoActivityTableEmptyMessage;
    }());
    NovoActivityTableEmptyMessage.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-activity-table-empty-message',
                },] }
    ];
    var NovoActivityTableNoResultsMessage = /** @class */ (function () {
        function NovoActivityTableNoResultsMessage() {
        }
        return NovoActivityTableNoResultsMessage;
    }());
    NovoActivityTableNoResultsMessage.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-activity-table-no-results-message',
                },] }
    ];
    var NovoActivityTable = /** @class */ (function () {
        function NovoActivityTable(labels, ref, state) {
            this.labels = labels;
            this.ref = ref;
            this.state = state;
            this.globalSearchHiddenClassToggle = false;
            this.loading = true;
            notify('[Deprecated]: The simple table is deprecated. Please migrate to novo-data-tables!');
        }
        Object.defineProperty(NovoActivityTable.prototype, "customFilter", {
            get: function () {
                return this._customFilter;
            },
            set: function (v) {
                this._customFilter = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoActivityTable.prototype, "forceShowHeader", {
            get: function () {
                return this._forceShowHeader;
            },
            set: function (v) {
                this._forceShowHeader = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoActivityTable.prototype, "hideGlobalSearch", {
            get: function () {
                return this._hideGlobalSearch;
            },
            set: function (v) {
                this._hideGlobalSearch = coercion.coerceBooleanProperty(v);
                this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoActivityTable.prototype, "debug", {
            get: function () {
                return this._debug;
            },
            set: function (v) {
                this._debug = coercion.coerceBooleanProperty(v);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoActivityTable.prototype, "empty", {
            get: function () {
                return this.dataSource && this.dataSource.totallyEmpty;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoActivityTable.prototype, "loadingClass", {
            get: function () {
                return this.loading || (this.dataSource && this.dataSource.loading);
            },
            enumerable: false,
            configurable: true
        });
        NovoActivityTable.prototype.ngOnChanges = function (changes) {
            var _this = this;
            this.loading = changes.activityService && !changes.activityService.currentValue;
            this.ref.detectChanges();
            if (changes.activityService && changes.activityService.currentValue) {
                this.loading = false;
                this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
                this.ref.detectChanges();
            }
            if (changes.outsideFilter && changes.outsideFilter.currentValue) {
                if (!this.outsideFilterSubscription) {
                    this.outsideFilterSubscription = this.outsideFilter.subscribe(function (filter) {
                        _this.state.outsideFilter = filter;
                        _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                        _this.ref.markForCheck();
                    });
                }
            }
        };
        NovoActivityTable.prototype.ngOnDestroy = function () {
            if (this.outsideFilterSubscription) {
                this.outsideFilterSubscription.unsubscribe();
            }
        };
        NovoActivityTable.prototype.ngAfterContentInit = function () {
            if (this.paginationOptions && !this.paginationOptions.page) {
                this.paginationOptions.page = 0;
            }
            if (this.paginationOptions && !this.paginationOptions.pageSize) {
                this.paginationOptions.pageSize = 50;
            }
            if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
                this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
            }
            this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
            this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
            this.ref.markForCheck();
        };
        NovoActivityTable.prototype.onSearchChange = function (term) {
            this.state.globalSearch = term;
            this.state.reset(false, true);
            this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
        };
        return NovoActivityTable;
    }());
    NovoActivityTable.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-activity-table',
                    template: "\n    <div *ngIf=\"debug\">\n      <p>Total: {{ dataSource?.total }}</p>\n      <p>Current: {{ dataSource?.current }}</p>\n      <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>\n      <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>\n      <p>Loading (DataSource): {{ dataSource?.loading }}</p>\n      <p>User Filtered: {{ state.userFiltered }}</p>\n      <p>Loading (Table): {{ loading }}</p>\n    </div>\n    <header *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\">\n      <ng-content select=\"[novo-activity-table-custom-header]\"></ng-content>\n      <novo-search\n        alwaysOpen=\"true\"\n        (searchChanged)=\"onSearchChange($event)\"\n        [(ngModel)]=\"state.globalSearch\"\n        *ngIf=\"!hideGlobalSearch\"\n        [placeholder]=\"searchOptions?.placeholder\"\n        [hint]=\"searchOptions?.tooltip\"\n      >\n      </novo-search>\n      <novo-simple-table-pagination\n        *ngIf=\"paginationOptions\"\n        [length]=\"dataSource?.total\"\n        [page]=\"paginationOptions.page\"\n        [pageSize]=\"paginationOptions.pageSize\"\n        [pageSizeOptions]=\"paginationOptions.pageSizeOptions\"\n      >\n      </novo-simple-table-pagination>\n      <div class=\"novo-activity-table-actions\">\n        <ng-content select=\"[novo-activity-table-actions]\"></ng-content>\n      </div>\n    </header>\n    <div class=\"novo-activity-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-activity-table-loading\">\n      <novo-loading></novo-loading>\n    </div>\n    <div class=\"novo-activity-table-filter-container\">\n      <div class=\"novo-activity-table-custom-filter\" *ngIf=\"customFilter\">\n        <ng-content select=\"[novo-activity-table-custom-filter]\"></ng-content>\n      </div>\n      <div class=\"novo-activity-table-container\">\n        <novo-simple-table\n          *ngIf=\"columns?.length > 0\"\n          [dataSource]=\"dataSource\"\n          novoSortFilter\n          novoSelection\n          [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\"\n          [hidden]=\"dataSource?.totallyEmpty && !state.userFiltered\"\n        >\n          <ng-content></ng-content>\n          <ng-container novoSimpleColumnDef=\"selection\">\n            <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>\n            <novo-simple-checkbox-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [index]=\"i\"></novo-simple-checkbox-cell>\n          </ng-container>\n          <ng-container *ngFor=\"let column of actionColumns\" [novoSimpleColumnDef]=\"column.id\">\n            <novo-simple-empty-header-cell\n              [class.button-header-cell]=\"!column.options\"\n              [class.dropdown-header-cell]=\"column.options\"\n              *novoSimpleHeaderCellDef\n            ></novo-simple-empty-header-cell>\n            <novo-simple-action-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [column]=\"column\"></novo-simple-action-cell>\n          </ng-container>\n          <ng-container *ngFor=\"let column of columns\" [novoSimpleColumnDef]=\"column.id\">\n            <novo-simple-header-cell\n              *novoSimpleHeaderCellDef\n              [column]=\"column\"\n              [novo-simple-cell-config]=\"column.config\"\n              [defaultSort]=\"defaultSort\"\n              >{{ column.label }}</novo-simple-header-cell\n            >\n            <novo-simple-cell *novoSimpleCellDef=\"let row\" [column]=\"column\" [row]=\"row\"></novo-simple-cell>\n          </ng-container>\n          <novo-simple-header-row *novoSimpleHeaderRowDef=\"displayedColumns\"></novo-simple-header-row>\n          <novo-simple-row *novoSimpleRowDef=\"let row; columns: displayedColumns\"></novo-simple-row>\n        </novo-simple-table>\n        <div\n          class=\"novo-activity-table-no-results-container\"\n          *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\"\n        >\n          <div #filtered><ng-content select=\"[novo-activity-table-no-results-message]\"></ng-content></div>\n          <div class=\"novo-activity-table-empty-message\" *ngIf=\"filtered.childNodes.length == 0\">\n            <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n          </div>\n        </div>\n        <div\n          class=\"novo-activity-table-empty-container\"\n          *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\"\n        >\n          <div #empty><ng-content select=\"[novo-activity-table-empty-message]\"></ng-content></div>\n          <div class=\"novo-activity-table-empty-message\" *ngIf=\"empty.childNodes.length == 0\">\n            <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [NovoActivityTableState]
                },] }
    ];
    NovoActivityTable.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef },
        { type: NovoActivityTableState }
    ]; };
    NovoActivityTable.propDecorators = {
        globalSearchHiddenClassToggle: [{ type: i0.HostBinding, args: ['class.global-search-hidden',] }],
        activityService: [{ type: i0.Input }],
        columns: [{ type: i0.Input }],
        displayedColumns: [{ type: i0.Input }],
        actionColumns: [{ type: i0.Input }],
        paginationOptions: [{ type: i0.Input }],
        searchOptions: [{ type: i0.Input }],
        defaultSort: [{ type: i0.Input }],
        outsideFilter: [{ type: i0.Input }],
        customFilter: [{ type: i0.Input }],
        forceShowHeader: [{ type: i0.Input }],
        hideGlobalSearch: [{ type: i0.Input }],
        debug: [{ type: i0.Input }],
        empty: [{ type: i0.HostBinding, args: ['class.empty',] }],
        loadingClass: [{ type: i0.HostBinding, args: ['class.loading',] }]
    };

    var NovoSimpleTableModule = /** @class */ (function () {
        function NovoSimpleTableModule() {
        }
        return NovoSimpleTableModule;
    }());
    NovoSimpleTableModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        NovoDatePickerModule,
                        table.CdkTableModule,
                        common.CommonModule,
                        forms.FormsModule,
                        NovoCommonModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoFormExtrasModule,
                        NovoLoadingModule,
                        NovoTilesModule,
                        NovoSearchBoxModule,
                        NovoCheckboxModule,
                        NovoOptionModule,
                    ],
                    exports: [
                        NovoTable,
                        NovoSimpleCellDef,
                        NovoSimpleHeaderCellDef,
                        NovoSimpleColumnDef,
                        NovoActivityTableEmptyMessage,
                        NovoActivityTableNoResultsMessage,
                        NovoSimpleHeaderRowDef,
                        NovoSimpleRowDef,
                        NovoSimpleCellHeader,
                        NovoSortFilter,
                        NovoSimpleActionCell,
                        NovoSimpleEmptyHeaderCell,
                        NovoSimpleHeaderCell,
                        NovoSimpleCell,
                        NovoSimpleHeaderRow,
                        NovoSimpleRow,
                        NovoSimpleFilterFocus,
                        NovoSimpleTablePagination,
                        NovoActivityTableCustomHeader,
                        NovoSimpleCheckboxCell,
                        NovoSimpleCheckboxHeaderCell,
                        NovoSelection,
                        NovoActivityTable,
                        NovoActivityTableActions,
                        NovoActivityTableCustomFilter,
                    ],
                    declarations: [
                        NovoTable,
                        NovoSimpleCellDef,
                        NovoSimpleHeaderCellDef,
                        NovoSimpleColumnDef,
                        NovoActivityTableEmptyMessage,
                        NovoActivityTableNoResultsMessage,
                        NovoSimpleHeaderRowDef,
                        NovoSimpleRowDef,
                        NovoSimpleCellHeader,
                        NovoSortFilter,
                        NovoSimpleActionCell,
                        NovoSimpleEmptyHeaderCell,
                        NovoSimpleHeaderCell,
                        NovoSimpleCell,
                        NovoSimpleHeaderRow,
                        NovoSimpleRow,
                        NovoSimpleFilterFocus,
                        NovoSimpleTablePagination,
                        NovoActivityTableCustomHeader,
                        NovoSimpleCheckboxCell,
                        NovoSimpleCheckboxHeaderCell,
                        NovoSelection,
                        NovoActivityTable,
                        NovoActivityTableActions,
                        NovoActivityTableCustomFilter,
                    ],
                    providers: [NovoActivityTableState],
                },] }
    ];

    // NG2
    var NovoSliderElement = /** @class */ (function () {
        function NovoSliderElement(element, labels) {
            this.element = element;
            this.labels = labels;
            this.currentSlide = 0;
            this.start = true;
            this.end = true;
            this.currSlides = ['active'];
            this.handleKeyDownFunc = this.handleKeyDown.bind(this);
        }
        NovoSliderElement.prototype.ngOnInit = function () {
            for (var i = 0; i < this.slides; i++) {
                this.currSlides[i] = i > 0 ? 'inactive' : 'active';
            }
            // Catch Tab Events
            this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
        };
        NovoSliderElement.prototype.ngOnDestroy = function () {
            this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
        };
        NovoSliderElement.prototype.handleKeyDown = function (event) {
            if (event.key === "Tab" /* Tab */) {
                event.stopImmediatePropagation();
                event.preventDefault();
            }
        };
        NovoSliderElement.prototype.changeSlide = function (direction) {
            if (direction === 'next') {
                if (this.currentSlide === this.slides - 1) {
                    return;
                }
                this.currentSlide++;
            }
            else {
                if (this.currentSlide === 0) {
                    return;
                }
                this.currentSlide--;
            }
            for (var i = 0; i < this.slides; i++) {
                this.currSlides[i] = 'inactive';
            }
            this.currSlides[this.currentSlide] = 'active';
            this.start = this.currentSlide === 0;
            this.end = this.currentSlide === this.slides - 1;
            this.currentClass = "slide-" + this.currentSlide;
        };
        return NovoSliderElement;
    }());
    NovoSliderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-slider',
                    template: "\n    <section class=\"slides\">\n      <ng-content select=\"div[slide]\"></ng-content>\n    </section>\n    <div class=\"controls\">\n      <button *ngIf=\"!start\" theme=\"icon\" icon=\"previous\" (click)=\"changeSlide('back')\"></button>\n      <div class=\"indicators\">\n        <div class=\"indicator-circle\" *ngFor=\"let indicator of currSlides; let i = index\" [ngClass]=\"indicator\"></div>\n      </div>\n      <button *ngIf=\"!end\" theme=\"primary\" icon=\"next\" (click)=\"changeSlide('next')\">{{ labels.next }}</button>\n      <ng-content select=\"button\" *ngIf=\"end\"></ng-content>\n    </div>\n  ",
                    host: {
                        '[class]': 'currentClass',
                    }
                },] }
    ];
    NovoSliderElement.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: NovoLabelService }
    ]; };
    NovoSliderElement.propDecorators = {
        slides: [{ type: i0.Input }]
    };

    // NG2
    var NovoSliderModule = /** @class */ (function () {
        function NovoSliderModule() {
        }
        return NovoSliderModule;
    }());
    NovoSliderModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoButtonModule],
                    declarations: [NovoSliderElement],
                    exports: [NovoSliderElement],
                },] }
    ];

    var NovoStepLabel = /** @class */ (function (_super) {
        __extends(NovoStepLabel, _super);
        function NovoStepLabel(template) {
            return _super.call(this, template) || this;
        }
        return NovoStepLabel;
    }(stepper.CdkStepLabel));
    NovoStepLabel.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoStepLabel]',
                },] }
    ];
    NovoStepLabel.ctorParameters = function () { return [
        { type: i0.TemplateRef }
    ]; };

    var NovoStepHeader = /** @class */ (function (_super) {
        __extends(NovoStepHeader, _super);
        function NovoStepHeader(_focusMonitor, _element) {
            var _this = _super.call(this, _element) || this;
            _this._focusMonitor = _focusMonitor;
            _this._element = _element;
            _focusMonitor.monitor(_element.nativeElement, true);
            return _this;
        }
        Object.defineProperty(NovoStepHeader.prototype, "index", {
            /** Index of the given step. */
            get: function () {
                return this._index;
            },
            set: function (value) {
                this._index = coercion.coerceNumberProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoStepHeader.prototype, "selected", {
            /** Whether the given step is selected. */
            get: function () {
                return this._selected;
            },
            set: function (value) {
                this._selected = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoStepHeader.prototype, "active", {
            /** Whether the given step label is active. */
            get: function () {
                return this._active;
            },
            set: function (value) {
                this._active = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoStepHeader.prototype, "touched", {
            /** Whether the given step label is active. */
            get: function () {
                return this.selected || this.state === 'edit' || this.state === 'done';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoStepHeader.prototype, "optional", {
            /** Whether the given step is optional. */
            get: function () {
                return this._optional;
            },
            set: function (value) {
                this._optional = coercion.coerceBooleanProperty(value);
            },
            enumerable: false,
            configurable: true
        });
        NovoStepHeader.prototype.ngOnDestroy = function () {
            this._focusMonitor.stopMonitoring(this._element.nativeElement);
        };
        /** Returns string label of given step if it is a text label. */
        NovoStepHeader.prototype._stringLabel = function () {
            return this.label instanceof NovoStepLabel ? null : this.label;
        };
        /** Returns NovoStepLabel if the label of given step is a template label. */
        NovoStepHeader.prototype._templateLabel = function () {
            return this.label instanceof NovoStepLabel ? this.label : null;
        };
        /** Returns the host HTML element. */
        NovoStepHeader.prototype._getHostElement = function () {
            return this._element.nativeElement;
        };
        return NovoStepHeader;
    }(stepper.CdkStepHeader));
    NovoStepHeader.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-step-header',
                    template: "<div [class.novo-step-icon]=\"touched\"\n  [class.novo-step-icon-not-touched]=\"!touched\">\n  <ng-container *ngIf=\"icon\">\n    <novo-icon raised=\"true\" [theme]=\"theme\">{{icon}}</novo-icon>\n  </ng-container>\n  <ng-container *ngIf=\"!icon\">\n    <span class=\"novo-step-number\">{{index + 1}}</span>\n  </ng-container>\n</div>\n<div class=\"novo-step-label\"\n  [class.novo-step-label-active]=\"active\"\n  [class.novo-step-label-selected]=\"selected\">\n  <!-- If there is a label template, use it. -->\n  <ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\">\n  </ng-container>\n  <!-- It there is no label template, fall back to the text label. -->\n  <div class=\"novo-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div>\n</div>\n<novo-step-status [state]=\"state\"></novo-step-status>",
                    host: {
                        class: 'novo-step-header',
                        role: 'tab',
                    },
                    preserveWhitespaces: false,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-step-header{cursor:pointer;outline:none;overflow:visible;position:relative}.novo-step-optional{font-size:12px}.novo-step-icon,.novo-step-icon-not-touched{align-items:center;border-radius:50%;display:flex;height:24px;justify-content:center;width:24px}.novo-step-icon-not-touched .novo-step-number,.novo-step-icon .novo-step-number{align-items:center;border-radius:4px;box-shadow:2px 2px 0 rgba(0,0,0,.2);display:flex;font-size:1em;height:1.6em;justify-content:center;min-width:1.6em}.novo-step-icon .novo-step-number{background:#4a89dc;color:#fff}.novo-step-icon-not-touched .novo-step-number{background:#a9adbb;color:#fff}.novo-step-label{display:inline-block;min-width:50px;padding:4px 0;vertical-align:middle;white-space:nowrap}.novo-step-label,.novo-step-text-label{overflow:hidden;text-align:center;text-overflow:ellipsis}"]
                },] }
    ];
    NovoStepHeader.ctorParameters = function () { return [
        { type: a11y.FocusMonitor },
        { type: i0.ElementRef }
    ]; };
    NovoStepHeader.propDecorators = {
        theme: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        state: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        iconOverrides: [{ type: i0.Input }],
        index: [{ type: i0.Input }],
        selected: [{ type: i0.Input }],
        active: [{ type: i0.Input }],
        optional: [{ type: i0.Input }]
    };

    /** Animations used by the Novo steppers. */
    var novoStepperAnimations = {
        /** Animation that transitions the step along the X axis in a horizontal stepper. */
        horizontalStepTransition: animations.trigger('stepTransition', [
            animations.state('previous', animations.style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
            animations.state('current', animations.style({ transform: 'none', visibility: 'visible' })),
            animations.state('next', animations.style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
            animations.transition('* => *', animations.animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
        ]),
        /** Animation that transitions the step along the Y axis in a vertical stepper. */
        verticalStepTransition: animations.trigger('stepTransition', [
            animations.state('previous', animations.style({ height: '0px', visibility: 'hidden' })),
            animations.state('next', animations.style({ height: '0px', visibility: 'hidden' })),
            animations.state('current', animations.style({ height: '*', visibility: 'visible' })),
            animations.transition('* <=> current', animations.animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
        ]),
    };

    var NovoStep = /** @class */ (function (_super) {
        __extends(NovoStep, _super);
        function NovoStep(stepper) {
            return _super.call(this, stepper) || this;
        }
        return NovoStep;
    }(stepper.CdkStep));
    NovoStep.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-step',
                    template: "<ng-template><ng-content></ng-content></ng-template>\n",
                    preserveWhitespaces: false,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: stepper.CdkStep, useExisting: NovoStep }]
                },] }
    ];
    NovoStep.ctorParameters = function () { return [
        { type: stepper.CdkStepper, decorators: [{ type: i0.Inject, args: [i0.forwardRef(function () { return NovoStepper; }),] }] }
    ]; };
    NovoStep.propDecorators = {
        stepLabel: [{ type: i0.ContentChild, args: [NovoStepLabel,] }],
        theme: [{ type: i0.Input }],
        color: [{ type: i0.Input }],
        icon: [{ type: i0.Input }]
    };
    var NovoStepper = /** @class */ (function (_super) {
        __extends(NovoStepper, _super);
        function NovoStepper() {
            var _this = _super.apply(this, __spread(arguments)) || this;
            /** Consumer-specified template-refs to be used to override the header icons. */
            _this._iconOverrides = {};
            return _this;
        }
        Object.defineProperty(NovoStepper.prototype, "steps", {
            /** Steps that belong to the current stepper, excluding ones from nested steppers. */
            get: function () {
                return this._steps;
            },
            set: function (value) {
                this._steps = value;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoStepper.prototype, "completed", {
            get: function () {
                try {
                    var steps = this._steps.toArray();
                    var length = steps.length - 1;
                    return steps[length].completed && length === this.selectedIndex;
                }
                catch (err) {
                    return false;
                }
            },
            enumerable: false,
            configurable: true
        });
        NovoStepper.prototype.ngAfterContentInit = function () {
            var _this = this;
            // Mark the component for change detection whenever the content children query changes
            this._steps.changes.pipe(operators.takeUntil(this._destroyed)).subscribe(function () { return _this._stateChanged(); });
        };
        NovoStepper.prototype.complete = function () {
            try {
                var steps = this._steps.toArray();
                steps[this.selectedIndex].completed = true;
                this.next();
                this._stateChanged();
            }
            catch (err) {
                // do nothing
            }
        };
        NovoStepper.prototype.getIndicatorType = function (index) {
            var steps = this._steps.toArray();
            if (index === this.selectedIndex) {
                if (steps[index] && index === steps.length - 1 && steps[index].completed) {
                    return 'done';
                }
                return 'edit';
            }
            if (index < this.selectedIndex) {
                return 'done';
            }
            return 'none';
        };
        return NovoStepper;
    }(stepper.CdkStepper));
    NovoStepper.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoStepper]',
                    providers: [
                        { provide: stepper.CdkStep, useExisting: NovoStep },
                        { provide: stepper.CdkStepper, useExisting: NovoStepper },
                    ],
                },] }
    ];
    NovoStepper.propDecorators = {
        _stepHeader: [{ type: i0.ViewChildren, args: [NovoStepHeader,] }],
        _steps: [{ type: i0.ContentChildren, args: [NovoStep, { descendants: true },] }],
        _icons: [{ type: i0.ContentChildren, args: [NovoIconComponent,] }]
    };
    var NovoHorizontalStepper = /** @class */ (function (_super) {
        __extends(NovoHorizontalStepper, _super);
        function NovoHorizontalStepper() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoHorizontalStepper;
    }(NovoStepper));
    NovoHorizontalStepper.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-horizontal-stepper',
                    exportAs: 'novoHorizontalStepper',
                    template: "<div class=\"novo-horizontal-stepper-header-container\">\n  <div class=\"novo-stepper-horizontal-line complete\"></div>\n  <ng-container *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header class=\"novo-horizontal-stepper-header\"\n      (click)=\"step.select()\"\n      (keydown)=\"_onKeydown($event)\"\n      [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n      [id]=\"_getStepLabelId(i)\"\n      [attr.aria-controls]=\"_getStepContentId(i)\"\n      [attr.aria-selected]=\"selectedIndex == i\"\n      [index]=\"i\"\n      [theme]=\"step.theme\"\n      [color]=\"step.color\"\n      [icon]=\"step.icon\"\n      [state]=\"getIndicatorType(i)\"\n      [label]=\"step.stepLabel || step.label\"\n      [selected]=\"selectedIndex === i\"\n      [active]=\"step.completed || selectedIndex === i || !linear\"\n      [optional]=\"step.optional\"\n      [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n  </ng-container>\n  <div class=\"novo-stepper-horizontal-line\" [class.complete]=\"completed\"></div>\n</div>\n\n<div class=\"novo-horizontal-content-container\">\n  <div *ngFor=\"let step of _steps; let i = index\"\n    class=\"novo-horizontal-stepper-content\" role=\"tabpanel\"\n    [@stepTransition]=\"_getAnimationDirection(i)\"\n    [id]=\"_getStepContentId(i)\"\n    [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n    [attr.aria-expanded]=\"selectedIndex === i\">\n    <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n  </div>\n</div>",
                    host: {
                        class: 'novo-stepper-horizontal',
                        'aria-orientation': 'horizontal',
                        role: 'tablist',
                    },
                    animations: [novoStepperAnimations.horizontalStepTransition],
                    providers: [
                        { provide: NovoStepper, useExisting: NovoHorizontalStepper },
                        { provide: stepper.CdkStepper, useExisting: NovoHorizontalStepper },
                    ],
                    // encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-stepper-horizontal,.novo-stepper-vertical{display:block}.novo-horizontal-stepper-header-container{align-items:center;background:#f7f7f7;display:flex;justify-content:center;margin-bottom:1em;white-space:nowrap}.novo-stepper-horizontal-line{border-bottom:1px solid #dbdbdb;flex:auto;height:80px;min-width:0}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{align-items:center;display:flex;flex-flow:column;height:80px;justify-content:center;overflow:visible;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{align-items:center;bottom:0;display:flex;height:1px;justify-content:center;position:absolute;width:100%}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{position:absolute;width:100%}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{border-bottom:1px solid #dbdbdb;content:\"\";display:block;margin-right:8px;width:calc(50% - 8px)}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{border-top:1px solid #dbdbdb;content:\"\";display:block;margin-left:calc(50% + 8px);margin-top:-1px;width:calc(50% - 8px)}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before,.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{background:#fff;border-radius:50%;bottom:1px;content:\"\";display:block;left:1px;position:absolute;right:1px;top:1px;z-index:0}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{align-items:center;display:flex;max-height:24px;padding:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-left:12px;margin-right:0}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{border:0;margin-left:36px;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{border-left:1px solid #dbdbdb;bottom:-16px;content:\"\";left:0;position:absolute;top:-16px;z-index:-1}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.done:after,.novo-stepper-vertical-line.done:before,.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{left:35px;position:absolute;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}"]
                },] }
    ];
    var NovoVerticalStepper = /** @class */ (function (_super) {
        __extends(NovoVerticalStepper, _super);
        function NovoVerticalStepper(dir, changeDetectorRef) {
            var _this = _super.call(this, dir, changeDetectorRef) || this;
            _this._orientation = 'vertical';
            return _this;
        }
        return NovoVerticalStepper;
    }(NovoStepper));
    NovoVerticalStepper.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-vertical-stepper',
                    exportAs: 'novoVerticalStepper',
                    template: "<div class=\"novo-step\" *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n  <novo-step-header class=\"novo-vertical-stepper-header\"\n    (click)=\"step.select()\"\n    (keydown)=\"_onKeydown($event)\"\n    [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\"\n    [id]=\"_getStepLabelId(i)\"\n    [attr.aria-controls]=\"_getStepContentId(i)\"\n    [attr.aria-selected]=\"selectedIndex === i\"\n    [index]=\"i\"\n    [theme]=\"step.theme\"\n    [color]=\"step.color\"\n    [icon]=\"step.icon\"\n    [state]=\"getIndicatorType(i)\"\n    [label]=\"step.stepLabel || step.label\"\n    [selected]=\"selectedIndex === i\"\n    [active]=\"step.completed || selectedIndex === i || !linear\"\n    [optional]=\"step.optional\"\n    [iconOverrides]=\"_iconOverrides\">\n  </novo-step-header>\n\n  <div class=\"novo-vertical-content-container\" [class.novo-stepper-vertical-line]=\"!isLast\"\n    [ngClass]=\"getIndicatorType(i)\">\n    <div class=\"novo-vertical-stepper-content\" role=\"tabpanel\"\n      [@stepTransition]=\"_getAnimationDirection(i)\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n      <div class=\"novo-vertical-content\">\n        <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n      </div>\n    </div>\n  </div>\n</div>",
                    host: {
                        class: 'novo-stepper-vertical',
                        'aria-orientation': 'vertical',
                        role: 'tablist',
                    },
                    animations: [novoStepperAnimations.verticalStepTransition],
                    providers: [
                        { provide: NovoStepper, useExisting: NovoVerticalStepper },
                        { provide: stepper.CdkStepper, useExisting: NovoVerticalStepper },
                    ],
                    preserveWhitespaces: false,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    styles: [".novo-stepper-horizontal,.novo-stepper-vertical{display:block}.novo-horizontal-stepper-header-container{align-items:center;background:#f7f7f7;display:flex;justify-content:center;margin-bottom:1em;white-space:nowrap}.novo-stepper-horizontal-line{border-bottom:1px solid #dbdbdb;flex:auto;height:80px;min-width:0}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{align-items:center;display:flex;flex-flow:column;height:80px;justify-content:center;overflow:visible;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{align-items:center;bottom:0;display:flex;height:1px;justify-content:center;position:absolute;width:100%}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{position:absolute;width:100%}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{border-bottom:1px solid #dbdbdb;content:\"\";display:block;margin-right:8px;width:calc(50% - 8px)}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{border-top:1px solid #dbdbdb;content:\"\";display:block;margin-left:calc(50% + 8px);margin-top:-1px;width:calc(50% - 8px)}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before,.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{background:#fff;border-radius:50%;bottom:1px;content:\"\";display:block;left:1px;position:absolute;right:1px;top:1px;z-index:0}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{align-items:center;display:flex;max-height:24px;padding:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-left:12px;margin-right:0}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{border:0;margin-left:36px;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{border-left:1px solid #dbdbdb;bottom:-16px;content:\"\";left:0;position:absolute;top:-16px;z-index:-1}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.done:after,.novo-stepper-vertical-line.done:before,.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{left:35px;position:absolute;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}"]
                },] }
    ];
    NovoVerticalStepper.ctorParameters = function () { return [
        { type: bidi.Directionality, decorators: [{ type: i0.Optional }] },
        { type: i0.ChangeDetectorRef }
    ]; };

    var NovoStepStatus = /** @class */ (function () {
        function NovoStepStatus(stepper, step) {
        }
        return NovoStepStatus;
    }());
    NovoStepStatus.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-step-status',
                    template: "<div class=\"novo-stepper-status-line\" [ngClass]=\"state\"></div>\n<div [ngSwitch]=\"state\" class=\"novo-stepper-status-icon\">\n  <novo-icon color=\"positive\" *ngSwitchCase=\"'edit'\">check-circle</novo-icon>\n  <novo-icon color=\"positive\" *ngSwitchCase=\"'done'\">check-circle-filled</novo-icon>\n  <novo-icon color=\"positive\" *ngSwitchDefault>circle-o</novo-icon>\n</div>",
                    // encapsulation: ViewEncapsulation.None,
                    preserveWhitespaces: false,
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    host: {
                        class: 'novo-step-status',
                    }
                },] }
    ];
    NovoStepStatus.ctorParameters = function () { return [
        { type: NovoStepper, decorators: [{ type: i0.Inject, args: [i0.forwardRef(function () { return NovoStepper; }),] }] },
        { type: NovoStepHeader, decorators: [{ type: i0.Inject, args: [i0.forwardRef(function () { return NovoStepHeader; }),] }] }
    ]; };
    NovoStepStatus.propDecorators = {
        state: [{ type: i0.Input }]
    };

    /** Button that moves to the next step in a stepper workflow. */
    var NovoStepperNext = /** @class */ (function (_super) {
        __extends(NovoStepperNext, _super);
        function NovoStepperNext() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoStepperNext;
    }(stepper.CdkStepperNext));
    NovoStepperNext.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'button[novoStepperNext],novo-button[novoStepperNext]',
                    host: {
                        class: 'novo-stepper-next',
                        '[type]': 'type',
                    },
                    inputs: ['type'],
                },] }
    ];
    /** Button that moves to the previous step in a stepper workflow. */
    var NovoStepperPrevious = /** @class */ (function (_super) {
        __extends(NovoStepperPrevious, _super);
        function NovoStepperPrevious() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return NovoStepperPrevious;
    }(stepper.CdkStepperPrevious));
    NovoStepperPrevious.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'button[novoStepperPrevious],novo-button[novoStepperPrevious]',
                    host: {
                        class: 'novo-stepper-previous',
                        '[type]': 'type',
                    },
                    inputs: ['type'],
                },] }
    ];

    var NovoStepperModule = /** @class */ (function () {
        function NovoStepperModule() {
        }
        return NovoStepperModule;
    }());
    NovoStepperModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, portal.PortalModule, NovoButtonModule, stepper.CdkStepperModule, NovoIconModule, a11y.A11yModule],
                    exports: [
                        NovoHorizontalStepper,
                        NovoVerticalStepper,
                        NovoStep,
                        NovoStepLabel,
                        NovoStepper,
                        NovoStepHeader,
                        NovoStepStatus,
                        NovoStepperNext,
                        NovoStepperPrevious,
                    ],
                    declarations: [
                        NovoHorizontalStepper,
                        NovoVerticalStepper,
                        NovoStep,
                        NovoStepLabel,
                        NovoStepper,
                        NovoStepHeader,
                        NovoStepStatus,
                        NovoStepperNext,
                        NovoStepperPrevious,
                    ],
                },] }
    ];

    var NovoTabbedGroupPickerElement = /** @class */ (function () {
        function NovoTabbedGroupPickerElement(labelService, ref) {
            var _this = this;
            this.labelService = labelService;
            this.ref = ref;
            this.multiple = true;
            this.selectionChange = new i0.EventEmitter();
            this.displayTabIndex = 0;
            this.filterText = new rxjs.BehaviorSubject('');
            this.loading = true;
            this.showClearAll = false;
            // Initial height based on 13 px font rendered in chrome. Actual height retrieved onDropdownToggled.
            this.scrollViewportHeight = 351;
            this.virtualScrollItemSize = 39;
            this.getSelectedState = function (childArray) {
                var numberOfSelectedItems = childArray.filter(function (_a) {
                    var selected = _a.selected;
                    return selected;
                }).length;
                if (!numberOfSelectedItems) {
                    return undefined;
                }
                return numberOfSelectedItems === childArray.length ? 'selected' : 'indeterminate';
            };
            this.filter = function (searchTerm) {
                _this.displayTabs.forEach(function (displayTab, i) { return (displayTab.data = _this.tabs[i].data.filter(function (item) { return item[displayTab.labelField].toLowerCase().includes(searchTerm.toLowerCase()); })); });
                _this.ref.markForCheck();
            };
        }
        Object.defineProperty(NovoTabbedGroupPickerElement.prototype, "displayTab", {
            get: function () {
                return this.displayTabs[this.displayTabIndex];
            },
            set: function (tab) {
                this.displayTabIndex = this.tabs.map(function (_a) {
                    var typeName = _a.typeName;
                    return typeName;
                }).indexOf(tab.typeName);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoTabbedGroupPickerElement.prototype, "minBufferPx", {
            get: function () {
                return this.scrollViewportHeight; // render at least 2x the number of items visible (viewport + min buffer)
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoTabbedGroupPickerElement.prototype, "maxBufferPx", {
            get: function () {
                return 2 * this.scrollViewportHeight; // render at most 3x the number of items visible (viewport + max buffer)
            },
            enumerable: false,
            configurable: true
        });
        NovoTabbedGroupPickerElement.prototype.ngOnInit = function () {
            this.setupDisplayData();
            this.createChildrenReferences();
            this.initializeDescendantSelection();
            this.updateParentsAndQuickSelect();
            this.updateClearAll();
            this.loading = false;
            this.filterTextSubscription = this.filterText.pipe(operators.debounceTime(300)).subscribe({
                next: this.filter,
            });
        };
        NovoTabbedGroupPickerElement.prototype.ngOnDestroy = function () {
            if (this.filterTextSubscription) {
                this.filterTextSubscription.unsubscribe();
            }
        };
        NovoTabbedGroupPickerElement.prototype.changeTab = function (tab) {
            this.displayTab = tab;
            if (this.scrollableInstance) {
                this.scrollableInstance.scrollTo({ behavior: 'auto', top: 0 });
            }
        };
        NovoTabbedGroupPickerElement.prototype.getPixelHeight = function (element) {
            return Number(getComputedStyle(element, '').height.match(/(\d+(\.\d+)?)px$/)[1]);
        };
        NovoTabbedGroupPickerElement.prototype.setupDisplayData = function () {
            // shallow copy here so that reassigning displayTabs[i].data doesn't mutate tabs[i].data
            // but both data values point to the same items
            this.displayTabs = this.tabs.map(function (tab) { return (Object.assign({}, tab)); });
            this.displayTab = this.tabs[0];
        };
        // Replace each parent's child object with a reference to the child to avoid
        // a child lookup for selected status; linking references allows M x N
        // time complexity instead of M x N^2
        NovoTabbedGroupPickerElement.prototype.createChildrenReferences = function () {
            var _this = this;
            this.tabs.forEach(function (tab) {
                // would rather filter but TypeScript still wants a type narrowing here
                if ('childTypeName' in tab) {
                    var childTab = _this.tabs.find(function (_a) {
                        var typeName = _a.typeName;
                        return typeName === tab.childTypeName;
                    });
                    var compareFunction_1 = _this.makeCompareFunction(childTab.valueField);
                    var warnFunction_1 = _this.makeWarningFunction(tab.typeName, childTab.typeName, childTab.valueField);
                    var sortedChildren_1 = childTab.data.slice().sort(compareFunction_1);
                    tab.data
                        .filter(function (_a) {
                        var children = _a.children;
                        return children && children.length;
                    })
                        .forEach(function (parent) { return _this.replaceChildrenWithReferences(parent, sortedChildren_1, compareFunction_1, warnFunction_1); });
                }
            });
            if (this.quickSelectConfig) {
                this.quickSelectConfig.items
                    .filter(function (parent) { return 'all' in parent; })
                    .forEach(function (parent) {
                    parent.children = _this.tabs.find(function (_a) {
                        var typeName = _a.typeName;
                        return parent.childTypeName === typeName;
                    }).data;
                });
                this.quickSelectConfig.items
                    .filter(function (parent) { return !('all' in parent); })
                    .forEach(function (parent) {
                    var childTab = _this.tabs.find(function (_a) {
                        var typeName = _a.typeName;
                        return typeName === parent.childTypeName;
                    });
                    var compareFunction = _this.makeCompareFunction(childTab.valueField);
                    var warnFunction = _this.makeWarningFunction(parent.label, childTab.typeName, childTab.valueField);
                    var sortedChildren = childTab.data.slice().sort(compareFunction);
                    _this.replaceChildrenWithReferences(parent, sortedChildren, compareFunction, warnFunction);
                });
            }
        };
        NovoTabbedGroupPickerElement.prototype.makeCompareFunction = function (key) {
            return function (a, b) {
                var aValue = (a && a[key]) || a;
                var bValue = (b && b[key]) || b;
                if (aValue < bValue) {
                    return -1;
                }
                else if (aValue > bValue) {
                    return 1;
                }
                else if (aValue === bValue) {
                    return 0;
                }
                else {
                    return undefined;
                }
            };
        };
        NovoTabbedGroupPickerElement.prototype.replaceChildrenWithReferences = function (parent, sortedData, compareFunction, warnFunction) {
            parent.children = parent.children
                .map(function (child) { return binarySearch(child, sortedData, compareFunction) || warnFunction(child); })
                .filter(Boolean); // since map can return undefined, remove undefined elements
        };
        NovoTabbedGroupPickerElement.prototype.makeWarningFunction = function (parentLabel, childLabel, childValueField) {
            return function (child) {
                var childValue = child[childValueField] || child;
                console.warn("No " + childLabel + " found with value " + childValue + " for parent " + parentLabel);
            };
        };
        NovoTabbedGroupPickerElement.prototype.onDropdownToggle = function (event) {
            if (event) {
                this.scrollViewportHeight = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement);
                this.virtualScrollItemSize = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement.querySelector('novo-list-item'));
            }
        };
        NovoTabbedGroupPickerElement.prototype.onItemToggled = function (item) {
            if (Array.isArray(item.children)) {
                this.updateDescendants(item.selected, item.children);
            }
            this.updateParentsAndQuickSelect();
            this.updateClearAll(item.selected);
            this.emitSelectedValues();
            this.ref.markForCheck();
        };
        NovoTabbedGroupPickerElement.prototype.initializeDescendantSelection = function () {
            this.tabs.forEach(function (tab) {
                if ('childTypeName' in tab && tab.data && tab.data.length) {
                    tab.data.forEach(function (parent) {
                        if (parent.selected && parent.children && parent.children.length) {
                            parent.children.forEach(function (child) {
                                child.selected = true;
                            });
                        }
                    });
                }
            });
        };
        NovoTabbedGroupPickerElement.prototype.updateDescendants = function (parentIsSelected, children) {
            var _this = this;
            children.forEach(function (item) {
                parentIsSelected ? (item.selected = true) : delete item.selected;
                if (Array.isArray(item.children)) {
                    _this.updateDescendants(item.selected, item.children);
                }
            });
        };
        NovoTabbedGroupPickerElement.prototype.updateClearAll = function (itemWasJustSelected) {
            this.showClearAll = itemWasJustSelected
                ? true
                : this.tabs.some(function (tab) {
                    if (tab.childTypeName) {
                        return tab.data.some(function (_a) {
                            var selected = _a.selected, indeterminate = _a.indeterminate;
                            return selected || indeterminate;
                        });
                    }
                    else {
                        return tab.data.some(function (_a) {
                            var selected = _a.selected;
                            return selected;
                        });
                    }
                });
        };
        NovoTabbedGroupPickerElement.prototype.updateParentsAndQuickSelect = function () {
            var _this = this;
            // mutate here to avoid dereferencing the objects in displayTabs
            this.tabs
                .filter(function (tab) { return 'childTypeName' in tab && !!tab.childTypeName; })
                .forEach(function (tab) {
                var parents = tab.data.filter(function (_a) {
                    var children = _a.children;
                    return children && children.length;
                });
                parents.forEach(function (parent) {
                    ['indeterminate', 'selected'].forEach(function (selectedStateOption) { return delete parent[selectedStateOption]; });
                    var selectedState = _this.getSelectedState(parent.children);
                    if (selectedState) {
                        parent[selectedState] = true;
                    }
                });
            });
            if (this.quickSelectConfig) {
                this.quickSelectConfig.items.forEach(function (quickSelect) {
                    delete quickSelect.selected;
                    var selectedState = _this.getSelectedState(quickSelect.children);
                    if (selectedState) {
                        quickSelect[selectedState] = true;
                    }
                });
            }
        };
        NovoTabbedGroupPickerElement.prototype.emitSelectedValues = function () {
            var selectedValues = this.tabs.map(function (tab) { return (Object.assign(Object.assign({}, tab), { data: tab.data.filter(function (_a) {
                    var selected = _a.selected;
                    return selected;
                }) })); });
            this.selectionChange.emit(selectedValues);
        };
        NovoTabbedGroupPickerElement.prototype.deselectEverything = function (event) {
            Helpers.swallowEvent(event);
            this.showClearAll = false;
            if (this.quickSelectConfig) {
                this.quickSelectConfig.items.forEach(function (quickSelect) {
                    delete quickSelect.selected;
                });
            }
            this.tabs.forEach(function (tab) {
                if (tab.childTypeName) {
                    tab.data.forEach(function (item) {
                        delete item.selected;
                        delete item.indeterminate;
                        item.children.forEach(function (child) { return delete child.selected; });
                    });
                }
                else {
                    tab.data.forEach(function (item) { return delete item.selected; });
                }
            });
            this.emitSelectedValues();
            this.ref.markForCheck();
        };
        NovoTabbedGroupPickerElement.prototype.onClearFilter = function (event) {
            Helpers.swallowEvent(event);
            this.filterText.next('');
        };
        NovoTabbedGroupPickerElement.prototype.onFilter = function (event) {
            this.filterText.next(event.target.value);
        };
        return NovoTabbedGroupPickerElement;
    }());
    NovoTabbedGroupPickerElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-tabbed-group-picker',
                    template: "<novo-dropdown (toggled)=\"onDropdownToggle($event)\" multiple>\n  <novo-button\n    class=\"tabbed-group-picker-button\"\n    [theme]=\"buttonConfig.theme\"\n    [side]=\"buttonConfig.side\"\n    [icon]=\"buttonConfig.icon\"\n    [loading]=\"loading\">\n    <div class=\"tabbed-group-picker-button-label\">{{ buttonConfig.label }}</div>\n  </novo-button>\n  <div class=\"tabbed-group-picker-search\" data-automation-id=\"tabbed-group-picker-search\">\n    <input type=\"text\" [placeholder]=\"labelService.search\" [value]=\"filterText | async\" (input)=\"onFilter($event)\" />\n    <i class=\"bhi-search\" *ngIf=\"!(filterText | async)\"></i>\n    <i class=\"bhi-times\" *ngIf=\"(filterText | async)\" (click)=\"onClearFilter($event)\"></i>\n  </div>\n  <div class=\"tabbed-group-picker-column-container\">\n    <div class=\"tabbed-group-picker-column left\">\n      <novo-nav theme=\"white\" direction=\"vertical\">\n        <novo-tab *ngFor=\"let tab of displayTabs\" [attr.data-automation-id]=\"tab.typeName\"\n          (activeChange)=\"changeTab(tab)\">\n          <span>{{ tab.typeLabel }} ({{ tab.data.length }})</span><i class=\"bhi-next\"></i>\n        </novo-tab>\n      </novo-nav>\n      <novo-button *ngIf=\"showClearAll\" class=\"clear-all-button\" theme=\"dialogue\" icon=\"times\" side=\"right\"\n        color=\"grapefruit\" (click)=\"deselectEverything($event)\">{{ labelService.clear }}</novo-button>\n    </div>\n    <div class=\"tabbed-group-picker-column right\">\n      <div class=\"quick-select\" *ngIf=\"quickSelectConfig && !(filterText | async)\">\n        <!-- <div class=\"quick-select-label\">{{ quickSelectConfig.label }}</div> -->\n        <novo-optgroup class=\"quick-select-list\" [label]=\"quickSelectConfig.label\">\n          <novo-option\n            class=\"quick-select-item\"\n            *ngFor=\"let quickSelect of quickSelectConfig.items\"\n            [attr.data-automation-id]=\"quickSelect.label\"\n            [selected]=\"quickSelect.selected\"\n            (click)=\"quickSelect.selected = !quickSelect.selected; onItemToggled(quickSelect)\"\n            inert>\n            {{quickSelect.label}}\n            <!-- <novo-checkbox\n              [label]=\"quickSelect.label\"\n              [name]=\"'selected'\"\n              [(ngModel)]=\"quickSelect.selected\"\n              (ngModelChange)=\"onItemToggled(quickSelect)\"></novo-checkbox> -->\n          </novo-option>\n        </novo-optgroup>\n      </div>\n      <novo-optgroup *ngIf=\"displayTab.data.length\">\n        <cdk-virtual-scroll-viewport\n          [itemSize]=\"virtualScrollItemSize\"\n          [maxBufferPx]=\"maxBufferPx\"\n          [minBufferPx]=\"minBufferPx\"\n          #tabbedGroupPickerVirtualScrollViewport>\n          <novo-option\n            *cdkVirtualFor=\"let item of displayTab.data\"\n            [attr.data-automation-id]=\"item[displayTab.labelField]\"\n            [selected]=\"item.selected\"\n            (click)=\"item.selected = !item.selected; onItemToggled(item)\"\n            inert>\n            {{item[displayTab.labelField]}}\n\n            <!-- <novo-checkbox\n              [label]=\"item[displayTab.labelField]\"\n              [name]=\"'selected'\"\n              [indeterminate]=\"item.indeterminate\"\n              [(ngModel)]=\"item.selected\"\n              (ngModelChange)=\"onItemToggled(item)\">\n            </novo-checkbox> -->\n          </novo-option>\n        </cdk-virtual-scroll-viewport>\n      </novo-optgroup>\n      <div class=\"tabbed-group-picker-empty-item\" *ngIf=\"!displayTab.data.length && (filterText | async)\">\n        <i class=\"{{ displayTab.icon || 'bhi-search' }}\"></i>\n        <div class=\"empty-item-main-message\">{{ labelService.tabbedGroupPickerEmpty }}</div>\n        <div class=\"empty-item-sub-message\">{{ labelService.tabbedGroupClearSuggestion(displayTab.typeLabel) }}\n        </div>\n      </div>\n    </div>\n  </div>\n</novo-dropdown>",
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoTabbedGroupPickerElement }]
                },] }
    ];
    NovoTabbedGroupPickerElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTabbedGroupPickerElement.propDecorators = {
        scrollableInstance: [{ type: i0.ViewChild, args: ['tabbedGroupPickerVirtualScrollViewport',] }],
        buttonConfig: [{ type: i0.Input }],
        tabs: [{ type: i0.Input }],
        quickSelectConfig: [{ type: i0.Input }],
        selectionChange: [{ type: i0.Output }]
    };

    // NG2
    var NovoTabbedGroupPickerModule = /** @class */ (function () {
        function NovoTabbedGroupPickerModule() {
        }
        return NovoTabbedGroupPickerModule;
    }());
    NovoTabbedGroupPickerModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        scrolling.ScrollingModule,
                        NovoTabModule,
                        NovoListModule,
                        NovoFormExtrasModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoOptionModule,
                        NovoCheckboxModule,
                    ],
                    providers: [NovoLabelService],
                    declarations: [NovoTabbedGroupPickerElement],
                    exports: [NovoTabbedGroupPickerElement],
                },] }
    ];

    var BaseRenderer = /** @class */ (function () {
        function BaseRenderer() {
            this.data = {};
            this.value = '';
            this.meta = {};
        }
        return BaseRenderer;
    }());

    var DateCell = /** @class */ (function (_super) {
        __extends(DateCell, _super);
        function DateCell(labels) {
            var _this = _super.call(this) || this;
            _this.labels = labels;
            return _this;
        }
        DateCell.prototype.getFormattedDate = function () {
            return this.labels.formatDate(this.value);
        };
        return DateCell;
    }(BaseRenderer));
    DateCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'date-cell',
                    template: "\n    <div class=\"date-cell\">\n      <label>{{ getFormattedDate() }}</label>\n    </div>\n  "
                },] }
    ];
    DateCell.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    DateCell.propDecorators = {
        value: [{ type: i0.Input }]
    };

    var NovoDropdownCell = /** @class */ (function (_super) {
        __extends(NovoDropdownCell, _super);
        function NovoDropdownCell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        NovoDropdownCell.prototype.ngOnInit = function () {
            // Check for and fix bad config
            if (!this.meta.dropdownCellConfig) {
                throw new Error('Missing "dropdownCellConfig" on the column setup');
            }
        };
        NovoDropdownCell.prototype.onClick = function (config, option, value) {
            var callback = option.callback || config.callback;
            callback(this.data, value || option);
        };
        return NovoDropdownCell;
    }(BaseRenderer));
    NovoDropdownCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-dropdown-cell',
                    template: "\n    <novo-dropdown parentScrollSelector=\".table-container\" containerClass=\"novo-table-dropdown-cell\">\n      <novo-button type=\"button\" theme=\"secondary\" icon=\"collapse\" inverse>\n        <span data-automation-id=\"novo-dropdown-cell-value\">{{ value }}</span>\n      </novo-button>\n      <list>\n        <ng-container *ngFor=\"let config of meta.dropdownCellConfig; let i = index\">\n          <dropdown-item-header *ngIf=\"config.category\">{{ config.category }}</dropdown-item-header>\n          <item\n            *ngFor=\"let option of config.options\"\n            (action)=\"onClick(config, option, option.value)\"\n            [class.active]=\"(option || option.value) === value\"\n          >\n            <span [attr.data-automation-id]=\"option.label || option\">{{ option.label || option }}</span>\n            <i *ngIf=\"(option || option.value) === value\" class=\"bhi-check\"></i>\n          </item>\n          <hr *ngIf=\"i < meta.dropdownCellConfig.length - 1\" />\n        </ng-container>\n      </list>\n    </novo-dropdown>\n  "
                },] }
    ];
    NovoDropdownCell.propDecorators = {
        meta: [{ type: i0.Input }],
        value: [{ type: i0.Input }]
    };

    // NG2
    var NovoTableKeepFilterFocus = /** @class */ (function () {
        function NovoTableKeepFilterFocus(element) {
            this.element = element;
        }
        NovoTableKeepFilterFocus.prototype.ngAfterViewInit = function () {
            this.element.nativeElement.focus();
        };
        return NovoTableKeepFilterFocus;
    }());
    NovoTableKeepFilterFocus.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[keepFilterFocused]',
                },] }
    ];
    NovoTableKeepFilterFocus.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };

    // NG2
    var Pagination = /** @class */ (function () {
        function Pagination(labels) {
            this.labels = labels;
            this.itemsPerPage = 10;
            this.pageChange = new i0.EventEmitter();
            this.itemsPerPageChange = new i0.EventEmitter();
            this.onPageChange = new i0.EventEmitter();
            this.maxPagesDisplayed = 5;
        }
        Object.defineProperty(Pagination.prototype, "disablePageSelection", {
            get: function () {
                return this.pageSelectDisabled;
            },
            set: function (val) {
                this.pageSelectDisabled = coercion.coerceBooleanProperty(val);
            },
            enumerable: false,
            configurable: true
        });
        Pagination.prototype.ngOnInit = function () {
            this.label = this.label || this.labels.itemsPerPage;
            this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
        };
        Pagination.prototype.ngOnChanges = function (changes) {
            this.page = this.page || 1;
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
        };
        Pagination.prototype.getDefaultRowOptions = function () {
            return [
                { value: 10, label: '10' },
                { value: 25, label: '25' },
                { value: 50, label: '50' },
                { value: 100, label: '100' },
            ];
        };
        Pagination.prototype.onPageSizeChanged = function (event) {
            this.page = 1;
            this.itemsPerPage = event.selected;
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
            this.pageChange.emit(this.page);
            this.itemsPerPageChange.emit(this.itemsPerPage);
            this.onPageChange.emit({
                page: this.page,
                itemsPerPage: this.itemsPerPage,
            });
        };
        Pagination.prototype.selectPage = function (page, event) {
            if (event) {
                event.preventDefault();
            }
            this.page = page;
            this.pages = this.getPages(this.page, this.totalPages);
            this.pageChange.emit(this.page);
            this.onPageChange.emit({
                page: this.page,
                itemsPerPage: this.itemsPerPage,
            });
        };
        Pagination.prototype.noPrevious = function () {
            return this.page === 1;
        };
        Pagination.prototype.noNext = function () {
            return this.page === this.totalPages;
        };
        // Create page object used in template
        Pagination.prototype.makePage = function (num, text, isActive) {
            return { num: num, text: text, active: isActive };
        };
        Pagination.prototype.getPages = function (currentPage, totalPages) {
            var pages = [];
            // Default page limits
            var startPage = 1;
            var endPage = totalPages;
            var isMaxSized = this.maxPagesDisplayed < totalPages;
            // recompute if maxPagesDisplayed
            if (isMaxSized) {
                // Current page is displayed in the middle of the visible ones
                startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
                endPage = startPage + this.maxPagesDisplayed - 1;
                // Adjust if limit is exceeded
                if (endPage > totalPages) {
                    endPage = totalPages;
                    startPage = endPage - this.maxPagesDisplayed + 1;
                }
            }
            // Add page number links
            for (var num = startPage; num <= endPage; num++) {
                var page = this.makePage(num, num.toString(), num === currentPage);
                pages.push(page);
            }
            return pages;
        };
        Pagination.prototype.calculateTotalPages = function () {
            var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
            return Math.max(totalPages || 0, 1);
        };
        return Pagination;
    }());
    Pagination.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-pagination',
                    template: "\n    <ng-container *ngIf=\"rowOptions.length > 1\">\n      <h5 class=\"rows\">{{ label }}</h5>\n      <novo-select\n        [options]=\"rowOptions\"\n        [placeholder]=\"labels.select\"\n        [(ngModel)]=\"itemsPerPage\"\n        (onSelect)=\"onPageSizeChanged($event)\"\n        data-automation-id=\"pager-select\"\n      ></novo-select>\n      <span class=\"spacer\"></span>\n    </ng-container>\n    <ul class=\"pager\" data-automation-id=\"pager\">\n      <li class=\"page\" (click)=\"selectPage(page - 1)\" [ngClass]=\"{ disabled: noPrevious() }\">\n        <i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i>\n      </li>\n      <li\n        class=\"page\"\n        [ngClass]=\"{ active: p.active }\"\n        [class.disabled]=\"disablePageSelection\"\n        *ngFor=\"let p of pages\"\n        (click)=\"selectPage(p.num, $event)\"\n      >\n        {{ p.text }}\n      </li>\n      <li class=\"page\" (click)=\"selectPage(page + 1)\" [ngClass]=\"{ disabled: noNext() }\">\n        <i class=\"bhi-next\" data-automation-id=\"pager-next\"></i>\n      </li>\n    </ul>\n  "
                },] }
    ];
    Pagination.ctorParameters = function () { return [
        { type: NovoLabelService }
    ]; };
    Pagination.propDecorators = {
        page: [{ type: i0.Input }],
        totalItems: [{ type: i0.Input }],
        itemsPerPage: [{ type: i0.Input }],
        rowOptions: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        disablePageSelection: [{ type: i0.Input }],
        pageChange: [{ type: i0.Output }],
        itemsPerPageChange: [{ type: i0.Output }],
        onPageChange: [{ type: i0.Output }]
    };

    var PercentageCell = /** @class */ (function (_super) {
        __extends(PercentageCell, _super);
        function PercentageCell() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return PercentageCell;
    }(BaseRenderer));
    PercentageCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'percentage-cell',
                    template: " <div class=\"percentage\" *ngIf=\"value || value === 0\">{{ value | percent: '1.0-2' }}</div> "
                },] }
    ];

    // NG2
    var RowDetails = /** @class */ (function () {
        function RowDetails(element, componentUtils) {
            this.element = element;
            this.componentUtils = componentUtils;
            this.value = '';
        }
        RowDetails.prototype.ngOnInit = function () {
            if (this.renderer) {
                if (this.renderer.prototype instanceof BaseRenderer) {
                    var componentRef = this.componentUtils.append(this.renderer, this.container);
                    componentRef.instance.data = this.data;
                }
                else {
                    this.value = this.renderer(this.data);
                }
            }
            else {
                // this.value = this.row[this.column.name];
            }
        };
        return RowDetails;
    }());
    RowDetails.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-row-details',
                    template: " <span #container></span> <span>{{ value }}</span> "
                },] }
    ];
    RowDetails.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ComponentUtils }
    ]; };
    RowDetails.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        data: [{ type: i0.Input }],
        renderer: [{ type: i0.Input }]
    };

    // NG2
    var NovoTableActionsElement = /** @class */ (function () {
        function NovoTableActionsElement() {
        }
        return NovoTableActionsElement;
    }());
    NovoTableActionsElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-table-actions',
                    template: '<ng-content></ng-content>'
                },] }
    ];

    // NG2
    var TableCell = /** @class */ (function () {
        function TableCell(element, componentUtils) {
            this.element = element;
            this.componentUtils = componentUtils;
            this.value = '';
            this.element = element;
            this.componentUtils = componentUtils;
        }
        TableCell.prototype.ngOnInit = function () {
            var _this = this;
            this.column._type = this.column.type || 'text';
            if (this.column.renderer) {
                if (this.column.renderer.prototype instanceof BaseRenderer) {
                    this.column._type = 'custom';
                    var componentRef = this.componentUtils.append(this.column.renderer, this.container);
                    componentRef.instance.meta = this.column;
                    componentRef.instance.data = this.row;
                    componentRef.instance.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
                    // TODO - save ref to this and update in the valueChanges below!!
                }
                else {
                    // TODO - wtf to do here?
                    this.value = this.column.renderer(this.row);
                }
            }
            else {
                this.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
            }
            if (this.form && this.hasEditor) {
                this.valueChangeSubscription = this.form.valueChanges.pipe(operators.debounceTime(300), operators.distinctUntilChanged()).subscribe(function (value) {
                    _this.value = value[_this.column.name];
                });
            }
        };
        TableCell.prototype.ngOnDestroy = function () {
            if (this.valueChangeSubscription) {
                this.valueChangeSubscription.unsubscribe();
            }
        };
        TableCell.prototype.onClick = function (event) {
            if (event) {
                event.preventDefault();
                event.stopPropagation();
            }
            if (this.column.onClick) {
                this.column.onClick(this.row);
            }
        };
        return TableCell;
    }());
    TableCell.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-table-cell',
                    template: "\n    <div [ngSwitch]=\"column._type\">\n      <span #container></span>\n      <date-cell *ngSwitchCase=\"'date'\" [value]=\"value\"></date-cell>\n      <a *ngSwitchCase=\"'link'\" (click)=\"onClick($event)\">{{ value }}</a> <span *ngSwitchDefault>{{ value }}</span>\n    </div>\n  "
                },] }
    ];
    TableCell.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: ComponentUtils }
    ]; };
    TableCell.propDecorators = {
        container: [{ type: i0.ViewChild, args: ['container', { read: i0.ViewContainerRef, static: true },] }],
        column: [{ type: i0.Input }],
        row: [{ type: i0.Input }],
        form: [{ type: i0.Input }],
        hasEditor: [{ type: i0.Input }]
    };

    // NG2
    var TableFilter = /** @class */ (function () {
        function TableFilter(element, renderer) {
            this.element = element;
            this.renderer = renderer;
            this.onFilterChange = new i0.EventEmitter();
            this.element = element;
            this.renderer = renderer;
        }
        TableFilter.prototype.ngOnInit = function () {
            this.ngOnChanges();
        };
        TableFilter.prototype.ngOnChanges = function (changes) {
            var label = '';
            if (this.config.freetextFilter) {
                label = this.config.freetextFilter;
            }
            else if (this.config.filter) {
                label = this.config.filter;
            }
            this.renderer.setProperty(this.element, 'value', label);
        };
        TableFilter.prototype.onChangeFilter = function (event) {
            var _this = this;
            clearTimeout(this.filterThrottle);
            if ("Enter" /* Enter */ === event.key) {
                this.config.filter = event.target.value;
                this.onFilterChange.emit({ filtering: this.config });
            }
            else {
                this.filterThrottle = setTimeout(function () {
                    _this.config.filter = event.target.value;
                    _this.onFilterChange.emit({ filtering: _this.config });
                }, 300);
            }
        };
        TableFilter.prototype.onClick = function (event) {
            Helpers.swallowEvent(event);
        };
        return TableFilter;
    }());
    TableFilter.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoTableFilter]',
                },] }
    ];
    TableFilter.ctorParameters = function () { return [
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    TableFilter.propDecorators = {
        config: [{ type: i0.Input, args: ['novoTableFilter',] }],
        onFilterChange: [{ type: i0.Output }],
        onChangeFilter: [{ type: i0.HostListener, args: ['keydown', ['$event'],] }],
        onClick: [{ type: i0.HostListener, args: ['click', ['$event'],] }]
    };

    // NG2
    var NovoTableFooterElement = /** @class */ (function () {
        function NovoTableFooterElement() {
        }
        return NovoTableFooterElement;
    }());
    NovoTableFooterElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-table-footer',
                    template: '<ng-content></ng-content>'
                },] }
    ];

    // NG2
    var NovoTableHeaderElement = /** @class */ (function () {
        function NovoTableHeaderElement() {
        }
        return NovoTableHeaderElement;
    }());
    NovoTableHeaderElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-table-header',
                    template: '<ng-content></ng-content>'
                },] }
    ];

    // NG2
    var ThOrderable = /** @class */ (function () {
        function ThOrderable(element) {
            this.element = element;
            this.onOrderChange = new i0.EventEmitter();
            this.element = element;
        }
        Object.defineProperty(ThOrderable.prototype, "index", {
            get: function () {
                var index = null;
                if (this.element.nativeElement && this.element.nativeElement.parentNode) {
                    var children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
                    index = children.indexOf(this.element.nativeElement);
                }
                return index;
            },
            enumerable: false,
            configurable: true
        });
        ThOrderable.prototype.ngOnInit = function () {
            if (this.column.ordering) {
                this.element.nativeElement.setAttribute('draggable', true);
                this.table = this.findTable(this.element.nativeElement);
            }
        };
        ThOrderable.prototype.onDragStart = function (event) {
            if (this.column.ordering) {
                this.element.nativeElement.classList.add('dragging');
                event.dataTransfer.effectAllowed = 'move';
                event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
                this.clone = this.table.cloneNode(true);
                this.clone.style.position = 'absolute';
                this.clone.style.left = '100%';
                this.clone.style.width = '150px';
                this.deleteColumns(this.clone);
                document.body.appendChild(this.clone);
                event.dataTransfer.setDragImage(this.clone, 75, 30);
            }
        };
        ThOrderable.prototype.deleteColumns = function (table) {
            // TODO: `table` should be immutable and this method should return the modified data to its caller
            if (table.rows.length > 0) {
                var allRows = table.rows;
                for (var i = 0; i < allRows.length; i++) {
                    if (i > 10) {
                        table.deleteRow(-1);
                    }
                    else {
                        var cellLength = allRows[i].cells.length;
                        for (var c = 0; c < cellLength; c++) {
                            if (c < this.index) {
                                allRows[i].deleteCell(0);
                            }
                            else if (c > this.index) {
                                allRows[i].deleteCell(-1);
                            }
                        }
                    }
                }
            }
        };
        ThOrderable.prototype.findTable = function (start) {
            var htmlElementNode = start;
            while (htmlElementNode) {
                htmlElementNode = htmlElementNode.parentNode;
                if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                    return htmlElementNode;
                }
            }
            return undefined;
        };
        ThOrderable.prototype.onDrag = function (event) {
            Helpers.swallowEvent(event);
            return false;
        };
        ThOrderable.prototype.onDragEnd = function (event) {
            Helpers.swallowEvent(event);
            this.element.nativeElement.classList.remove('over');
            this.element.nativeElement.classList.remove('dragging');
            document.body.removeChild(this.clone);
            return false;
        };
        ThOrderable.prototype.onDrop = function (event) {
            Helpers.swallowEvent(event);
            this.element.nativeElement.classList.remove('over');
            var data = JSON.parse(event.dataTransfer.getData('text/plain'));
            this.onOrderChange.emit({
                first: data,
                second: this.column,
            });
            return false;
        };
        ThOrderable.prototype.onDragOver = function (event) {
            Helpers.swallowEvent(event);
            event.dataTransfer.dropEffect = 'move';
            return false;
        };
        ThOrderable.prototype.onDragEnter = function (event) {
            this.element.nativeElement.classList.add('over');
            this.target = event.target;
        };
        ThOrderable.prototype.onDragLeave = function (event) {
            this.element.nativeElement.classList.remove('over');
        };
        return ThOrderable;
    }());
    ThOrderable.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoThOrderable]',
                    host: {
                        '(dragstart)': 'onDragStart($event)',
                        '(dragover)': 'onDragOver($event)',
                        '(dragenter)': 'onDragEnter($event)',
                        '(dragleave)': 'onDragLeave($event)',
                        '(dragend)': 'onDragEnd($event)',
                        '(drop)': 'onDrop($event)',
                    },
                },] }
    ];
    ThOrderable.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    ThOrderable.propDecorators = {
        column: [{ type: i0.Input, args: ['novoThOrderable',] }],
        onOrderChange: [{ type: i0.Output }]
    };

    // NG2
    var ThSortable = /** @class */ (function () {
        function ThSortable() {
            this.onSortChange = new i0.EventEmitter();
        }
        ThSortable.prototype.onToggleSort = function (event) {
            if (event) {
                // event.preventDefault();
            }
            if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
                switch (this.column.sort) {
                    case 'asc':
                        this.column.sort = 'desc';
                        break;
                    default:
                        this.column.sort = 'asc';
                        break;
                }
                this.onSortChange.emit(this.column);
            }
        };
        return ThSortable;
    }());
    ThSortable.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[novoThSortable]',
                    host: {
                        '(click)': 'onToggleSort($event)',
                    },
                },] }
    ];
    ThSortable.propDecorators = {
        config: [{ type: i0.Input, args: ['novoThSortable',] }],
        column: [{ type: i0.Input }],
        onSortChange: [{ type: i0.Output }]
    };

    // NG2
    var NovoTableExtrasModule = /** @class */ (function () {
        function NovoTableExtrasModule() {
        }
        return NovoTableExtrasModule;
    }());
    NovoTableExtrasModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule, NovoCommonModule],
                    declarations: [
                        NovoTableHeaderElement,
                        NovoTableFooterElement,
                        NovoTableActionsElement,
                        NovoTableKeepFilterFocus,
                        Pagination,
                        RowDetails,
                        TableCell,
                        TableFilter,
                        ThOrderable,
                        ThSortable,
                        DateCell,
                        PercentageCell,
                        NovoDropdownCell,
                    ],
                    exports: [
                        NovoTableHeaderElement,
                        NovoTableFooterElement,
                        NovoTableActionsElement,
                        NovoTableKeepFilterFocus,
                        Pagination,
                        RowDetails,
                        TableCell,
                        TableFilter,
                        ThOrderable,
                        ThSortable,
                        DateCell,
                        PercentageCell,
                        NovoDropdownCell,
                    ],
                },] }
    ];

    (function (NovoTableMode) {
        NovoTableMode[NovoTableMode["VIEW"] = 1] = "VIEW";
        NovoTableMode[NovoTableMode["EDIT"] = 2] = "EDIT";
    })(exports.NovoTableMode || (exports.NovoTableMode = {}));
    var NovoTableElement = /** @class */ (function () {
        function NovoTableElement(labels, formUtils, builder, cdr) {
            this.labels = labels;
            this.formUtils = formUtils;
            this.builder = builder;
            this.cdr = cdr;
            this.config = {};
            this.columns = [];
            this.skipSortAndFilterClear = false;
            this.mode = exports.NovoTableMode.VIEW;
            this.editable = false;
            this.rowIdentifier = 'id';
            this.name = 'table';
            this.onRowClick = new i0.EventEmitter();
            this.onRowSelect = new i0.EventEmitter();
            this.onTableChange = new i0.EventEmitter();
            this._rows = [];
            this.selected = [];
            this.activeId = 0;
            this.master = false;
            this.expandAll = false;
            this.indeterminate = false;
            this.lastPage = 0;
            this.selectedPageCount = 0;
            this.showSelectAllMessage = false;
            this.pagedData = [];
            // Map to keep track of what dropdowns are toggled
            // Used to properly *ngIf the <novo-optgroup> so that the keepFilterFocused Directive
            // will properly fire the ngAfterViewInit event
            this.toggledDropdownMap = {};
            this.NovoTableMode = exports.NovoTableMode;
            this.tableForm = new forms.FormGroup({});
            this.footers = [];
            this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
            this.loading = false;
            notify('[Deprecated]: The table is deprecated. Please migrate to novo-data-tables!');
        }
        Object.defineProperty(NovoTableElement.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            set: function (rows) {
                this.dataProvider = rows;
                if (rows && rows.length > 0) {
                    this.setupColumnDefaults();
                }
                // this is a temporary/hacky fix until async dataloading is handled within the table
                if (!this.skipSortAndFilterClear) {
                    this.clearAllSortAndFilters();
                }
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoTableElement.prototype, "dataProvider", {
            get: function () {
                return this._dataProvider;
            },
            set: function (dp) {
                var _this = this;
                this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
                this._dataProvider.dataChange.pipe(operators.debounceTime(100)).subscribe(function (event) {
                    switch (event.type) {
                        case CollectionEvent.CHANGE:
                            _this._rows = event.data;
                            // Setup form
                            _this.tableForm = _this.builder.group({
                                rows: _this.builder.array([]),
                            });
                            // Remove all selection on sort change if selection is on
                            if (_this.config.rowSelectionStyle === 'checkbox') {
                                _this.pagedData = event.data;
                                _this.pageSelected = _this.pagedData.filter(function (r) { return r._selected; });
                                _this.rowSelectHandler();
                            }
                            // Find that columns we might need to sum up via the footer
                            var columnsToSum_1 = [];
                            var columnSums_1 = {};
                            if (_this.config.footers) {
                                _this.config.footers.forEach(function (config) {
                                    columnsToSum_1.push.apply(columnsToSum_1, __spread(config.columns));
                                });
                                // Only have unique columns, filter out duplicates
                                columnsToSum_1 = columnsToSum_1.filter(function (item, index, array) { return array.indexOf(item) === index; });
                            }
                            // Make a form for each row
                            var tableFormRows_1 = _this.tableForm.controls.rows;
                            _this._rows.forEach(function (row, index) {
                                var rowControls = [];
                                row.controls = {};
                                row._editing = {};
                                row._expanded = _this.config.expandAll;
                                row.rowId = _this._rows.length;
                                _this.columns.forEach(function (column) {
                                    // Use the control passed or use a ReadOnlyControl so that the form has the values
                                    var control = column.editorConfig
                                        ? ControlFactory.create(column.editorType, column.editorConfig)
                                        : new ReadOnlyControl({ key: column.name });
                                    row.controls[column.name] = control;
                                    rowControls.push(control);
                                });
                                _this.formUtils.setInitialValues(rowControls, row, false);
                                tableFormRows_1.push(_this.formUtils.toFormGroup(rowControls));
                                // Setup the total footer if configured
                                // Array of keys to total
                                if (columnsToSum_1.length !== 0) {
                                    columnsToSum_1.forEach(function (column) {
                                        if (Helpers.isBlank(columnSums_1[column])) {
                                            columnSums_1[column] = 0;
                                        }
                                        columnSums_1[column] += row[column];
                                    });
                                }
                            });
                            if (_this.mode === exports.NovoTableMode.EDIT) {
                                _this.setTableEdit();
                            }
                            // Setup the footers (if any)
                            if (_this.config.footers) {
                                _this.footers = [];
                                _this.config.footers.forEach(function (footerConfig, footerConfigIndex) {
                                    var footer = {};
                                    footer[footerConfig.labelColumn] = footerConfig.label;
                                    footerConfig.columns.forEach(function (column) {
                                        if (footerConfig.method === 'AVG' && _this._rows.length !== 0) {
                                            footer[column] = columnSums_1[column] / _this._rows.length;
                                        }
                                        else {
                                            footer[column] = columnSums_1[column];
                                        }
                                    });
                                    _this.footers.push(footer);
                                });
                            }
                            break;
                        default:
                            break;
                    }
                });
                if (this.config.paging) {
                    this._dataProvider.page = this.config.paging.current;
                    this._dataProvider.pageSize = this.config.paging.itemsPerPage;
                }
                else {
                    // Paging turned off, return basically all of the data
                    this._dataProvider.page = 1;
                    this._dataProvider.pageSize = 500;
                }
                if (dp && dp.length > 0) {
                    this.setupColumnDefaults();
                }
                this._dataProvider.refresh();
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoTableElement.prototype, "editing", {
            get: function () {
                return this.mode === exports.NovoTableMode.EDIT;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoTableElement.prototype, "formValue", {
            get: function () {
                return this.tableForm.value;
            },
            enumerable: false,
            configurable: true
        });
        NovoTableElement.prototype.onDropdownToggled = function (event, column) {
            this.toggledDropdownMap[column] = event;
            this.cdr.markForCheck();
        };
        NovoTableElement.prototype.focusInput = function () {
            if (this.filterInputs && this.filterInputs.length) {
                this.filterInputs.forEach(function (filterInput) {
                    if (filterInput.nativeElement) {
                        setTimeout(function () { return filterInput.nativeElement.focus(); }, 0);
                    }
                });
            }
        };
        NovoTableElement.prototype.onPageChange = function (event) {
            // this.dataProvider.page = event.page;
            // this.dataProvider.pageSize = event.itemsPerPage;
        };
        NovoTableElement.prototype.getOptionDataAutomationId = function (option) {
            if (!Helpers.isBlank(option.value)) {
                return option.value;
            }
            return option;
        };
        NovoTableElement.prototype.setupColumnDefaults = function () {
            var _this = this;
            // Check columns for cell option types
            this.columns.forEach(function (column) {
                if (column && column.type) {
                    switch (column.type) {
                        case 'date':
                            // Set options based on dates if there are none
                            column.options = column.options || _this.getDefaultOptions(column);
                            break;
                        default:
                            break;
                    }
                }
            });
        };
        NovoTableElement.prototype.ngDoCheck = function () {
            if (this.config.paging && this.config.paging.current !== this.lastPage) {
                this.rowSelectHandler();
                this.showSelectAllMessage = false;
            }
            this.lastPage = this.config.paging ? this.config.paging.current : 1;
        };
        NovoTableElement.prototype.getPageStart = function () {
            return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
        };
        NovoTableElement.prototype.getPageEnd = function () {
            return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
        };
        NovoTableElement.prototype.getRowControlForm = function (i) {
            var tableFormRows = this.tableForm.controls.rows;
            return tableFormRows.controls[i];
        };
        NovoTableElement.prototype.onFilterClick = function (column, filter) {
            if (filter.range && !column.calendarShow) {
                column.calenderShow = true;
                return;
            }
            if (Array.isArray(column.filter) && column.multiple) {
                if (~column.filter.indexOf(filter)) {
                    // Remove filter
                    column.filter.splice(column.filter.indexOf(filter), 1);
                    if (filter.range) {
                        column.calenderShow = false;
                    }
                    if (column.filter.length === 0) {
                        column.filter = null;
                    }
                }
                else {
                    // Add filter
                    column.filter.push(filter);
                }
            }
            else if (column.multiple) {
                column.filter = new Array();
                column.filter.push(Helpers.isBlank(filter.value) ? filter : filter.value);
            }
            else {
                column.filter = Helpers.isBlank(filter.value) ? filter : filter.value;
            }
            this.onFilterChange();
        };
        NovoTableElement.prototype.onFilterClear = function (column) {
            var _this = this;
            setTimeout(function () {
                column.filter = null;
                column.freetextFilter = null;
                _this.onFilterChange();
                if (column.originalOptions) {
                    column.options = column.originalOptions;
                }
            });
        };
        NovoTableElement.prototype.clearAllSortAndFilters = function () {
            if (this.config.filtering) {
                this.columns.forEach(function (column) {
                    column.filter = null;
                    column.sort = null;
                });
            }
        };
        /**
         * @description This method updates the row data to reflect the active filters.
         */
        NovoTableElement.prototype.onFilterChange = function (event) {
            var e_1, _a;
            if (this.config.filtering) {
                // Array of filters
                var filters = this.columns.filter(function (col) { return !Helpers.isEmpty(col.filter); });
                if (filters.length) {
                    var query = {};
                    var _loop_1 = function (column) {
                        if (Helpers.isFunction(column.match)) {
                            query[column.name] = function (value, record) {
                                return column.match(record, column.filter);
                            };
                        }
                        else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                            query = Object.assign({}, query, column.preFilter(this_1.escapeCharacters(column.filter)));
                        }
                        else if (Array.isArray(column.filter)) {
                            // The filters are an array (multi-select), check value
                            var options = column.filter;
                            // We have an array of {value: '', labels: ''}
                            if (options[0].value || options[0].label) {
                                options = column.filter.map(function (opt) { return opt.value; });
                            }
                            query[column.name] = { any: options };
                        }
                        else if (column.type && column.type === 'date') {
                            if (column.filter.startDate && column.filter.endDate) {
                                query[column.name] = {
                                    min: dateFns.startOfDay(column.filter.startDate),
                                    max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(column.filter.endDate), 1)),
                                };
                            }
                            else {
                                query[column.name] = {
                                    min: column.filter.min ? dateFns.addDays(dateFns.startOfToday(), column.filter.min) : dateFns.startOfToday(),
                                    max: column.filter.max ? dateFns.addDays(dateFns.startOfTomorrow(), column.filter.max) : dateFns.startOfTomorrow(),
                                };
                            }
                        }
                        else {
                            query[column.name] = column.filter;
                        }
                    };
                    var this_1 = this;
                    try {
                        for (var filters_1 = __values(filters), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
                            var column = filters_1_1.value;
                            _loop_1(column);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (filters_1_1 && !filters_1_1.done && (_a = filters_1.return)) _a.call(filters_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    if (Helpers.isFunction(this.config.filtering)) {
                        this.config.filtering(query);
                    }
                    else {
                        this._dataProvider.filter = query;
                    }
                }
                else {
                    this._dataProvider.filter = {};
                }
                // Trickle down to keep sort
                // this.onSortChange(this.currentSortColumn);
                this.fireTableChangeEvent();
                // If paging, reset page
                if (this.config.paging) {
                    this.config.paging.current = 1;
                }
                // Remove all selection on sort change if selection is on
                if (this.config.rowSelectionStyle === 'checkbox') {
                    this.selectAll(false);
                }
            }
        };
        NovoTableElement.prototype.escapeCharacters = function (filter) {
            if (typeof filter === 'string') {
                return filter.replace(/'/g, "''");
            }
            return filter;
        };
        NovoTableElement.prototype.isFilterActive = function (column, filter) {
            // TODO: This needs to be refactored
            var isActive = false;
            if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter)) {
                if (Array.isArray(column.filter)) {
                    if (typeof filter !== 'string') {
                        isActive = column.filter.some(function (item) {
                            return item.label === filter.label;
                        });
                    }
                    else {
                        isActive = column.filter.includes(filter);
                    }
                }
                else {
                    if (typeof column.filter === typeof filter) {
                        isActive = column.filter === filter;
                    }
                    else {
                        isActive = column.filter === filter.value;
                    }
                }
            }
            return isActive;
        };
        NovoTableElement.prototype.onSortChange = function (column) {
            var e_2, _a;
            var _this = this;
            this.currentSortColumn = column;
            var sortedColumns = this.columns.filter(function (thisColumn) {
                return thisColumn.sort && thisColumn !== _this.currentSortColumn;
            });
            try {
                for (var sortedColumns_1 = __values(sortedColumns), sortedColumns_1_1 = sortedColumns_1.next(); !sortedColumns_1_1.done; sortedColumns_1_1 = sortedColumns_1.next()) {
                    var sortedColumn = sortedColumns_1_1.value;
                    sortedColumn.sort = null;
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (sortedColumns_1_1 && !sortedColumns_1_1.done && (_a = sortedColumns_1.return)) _a.call(sortedColumns_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            if (column) {
                if (Helpers.isFunction(this.config.sorting)) {
                    this.config.sorting();
                }
                else if (Helpers.isFunction(column.preSort)) {
                    this._dataProvider.sort = [].concat(column.preSort(column));
                }
                else {
                    this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
                }
            }
            // Fire table change event
            // this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        };
        NovoTableElement.prototype.fireTableChangeEvent = function () {
            // Construct a table change object
            var onTableChange = {};
            var filters = this.columns.filter(function (col) { return col.filter && col.filter.length; });
            onTableChange.filter = filters.length ? filters : false;
            onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
            onTableChange.rows = this.rows;
            // Emit event
            this.onTableChange.emit(onTableChange);
        };
        NovoTableElement.prototype.findColumnIndex = function (value) {
            for (var i = 0; i < this.columns.length; i += 1) {
                if (this.columns[i].name === value) {
                    return i;
                }
            }
            return null;
        };
        NovoTableElement.prototype.onOrderChange = function (event) {
            var oldIndex = this.findColumnIndex(event.first.name);
            var newIndex = this.findColumnIndex(event.second.name);
            this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
            this.onSortChange(this.currentSortColumn);
        };
        NovoTableElement.prototype.expandAllOnPage = function (expanded) {
            var e_3, _a;
            this.config.expandAll = !expanded;
            try {
                for (var _b = __values(this.dataProvider.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    row._expanded = this.config.expandAll;
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_3) throw e_3.error; }
            }
        };
        NovoTableElement.prototype.selectPage = function (data) {
            var e_4, _a;
            if (!this.master) {
                this.selectAll(false);
                // Only show the select all message when there is only one new page selected at a time
                this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
                this.showSelectAllMessage = false;
            }
            else {
                this.indeterminate = false;
                try {
                    // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
                    for (var _b = __values(this.pagedData), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var row = _c.value;
                        row._selected = this.master;
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
                this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
                this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
                this.emitSelected(this.selected);
                // Only show the select all message when there is only one new page selected at a time
                this.selectedPageCount++;
                this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
            }
            this.cdr.detectChanges();
        };
        NovoTableElement.prototype.selectAll = function (value) {
            var e_5, _a;
            this.master = value;
            this.indeterminate = false;
            try {
                for (var _b = __values(this.dataProvider.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    row._selected = value;
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_5) throw e_5.error; }
            }
            this.selected = value ? this.dataProvider.list : [];
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.rowSelectHandler();
        };
        NovoTableElement.prototype.rowSelectHandler = function (data) {
            // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
            this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
            this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
            if (this.pageSelected.length === 0) {
                this.master = false;
                this.indeterminate = false;
            }
            else if (this.pageSelected.length === this.pagedData.length) {
                this.master = true;
                this.indeterminate = false;
            }
            else {
                this.master = false;
                this.indeterminate = true;
                // Breaking the selected page count
                this.showSelectAllMessage = false;
                this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            }
            this.emitSelected(this.selected);
        };
        NovoTableElement.prototype.emitSelected = function (selected) {
            this.onRowSelect.emit({ length: selected.length, selected: selected });
        };
        NovoTableElement.prototype.rowClickHandler = function (row) {
            if (this.config.rowSelect) {
                this.activeId = row.id || 0;
                this.onRowClick.emit(row);
            }
        };
        NovoTableElement.prototype.getDefaultOptions = function (column) {
            // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
            var opts = [
                { label: this.labels.past1Day, min: -1, max: 0 },
                { label: this.labels.past7Days, min: -7, max: 0 },
                { label: this.labels.past30Days, min: -30, max: 0 },
                { label: this.labels.past90Days, min: -90, max: 0 },
                { label: this.labels.past1Year, min: -366, max: 0 },
                { label: this.labels.next1Day, min: 0, max: 1 },
                { label: this.labels.next7Days, min: 0, max: 7 },
                { label: this.labels.next30Days, min: 0, max: 30 },
                { label: this.labels.next90Days, min: 0, max: 90 },
                { label: this.labels.next1Year, min: 0, max: 366 },
            ];
            if (column && column.range) {
                opts.push({
                    label: this.labels.customDateRange,
                    range: true,
                });
            }
            return opts;
        };
        NovoTableElement.prototype.onCalenderSelect = function (column, event) {
            var _this = this;
            setTimeout(function () {
                if (event.startDate && event.endDate) {
                    _this.onFilterChange();
                }
            }, 10);
        };
        NovoTableElement.prototype.onFilterKeywords = function (config) {
            if (config && config.filtering && config.filtering.freetextFilter) {
                var filterKeywords_1 = config.filtering.freetextFilter.toLowerCase();
                if (!config.filtering.originalOptions) {
                    config.filtering.originalOptions = config.filtering.options;
                }
                var newOptions = config.filtering.originalOptions.filter(function (option) {
                    var value = option && option.label ? option.label : option;
                    value = value.toLowerCase() ? value.toLowerCase() : value;
                    if (value === filterKeywords_1) {
                        return true;
                    }
                    else if (~value.indexOf(filterKeywords_1) || ~value.indexOf(filterKeywords_1)) {
                        return true;
                    }
                    return false;
                });
                config.filtering.options = newOptions;
                config.filtering.filter = config.filtering.freetextFilter;
            }
            else {
                config.filtering.options = config.filtering.originalOptions;
            }
            this.onFilterChange();
        };
        /**
         * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
         * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
         * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
         * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.setTableEdit = function (rowNumber, columnNumber) {
            var _this = this;
            this.mode = exports.NovoTableMode.EDIT;
            this._dataProvider.edit();
            this._rows.forEach(function (row, rowIndex) {
                row._editing = row._editing || {};
                _this.columns.forEach(function (column, columnIndex) {
                    if (column.viewOnly) {
                        row._editing[column.name] = false;
                    }
                    else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                        row._editing[column.name] = true;
                    }
                    else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                        row._editing[column.name] = true;
                    }
                    else if (!Helpers.isEmpty(rowNumber) &&
                        !Helpers.isEmpty(columnNumber) &&
                        rowIndex === Number(rowNumber) &&
                        columnIndex === Number(columnNumber)) {
                        row._editing[column.name] = true;
                    }
                    else {
                        row._editing[column.name] = false;
                    }
                });
            });
        };
        /**
         * @description Leaves edit mode for the Table and puts everything back to VIEW only
         * @memberOf NovoTableElement
         * @param cancel - whether or not to save data or undo
         */
        NovoTableElement.prototype.leaveEditMode = function (cancel) {
            var _this = this;
            this.mode = exports.NovoTableMode.VIEW;
            this._rows.forEach(function (row) {
                row._editing = row._editing || {};
                _this.columns.forEach(function (column) {
                    row._editing[column.name] = false;
                });
            });
            if (cancel) {
                this._dataProvider.undo();
            }
            else {
                this._dataProvider.commit();
            }
            this.hideToastMessage();
        };
        /**
         * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.addEditableRow = function (defaultValue) {
            if (defaultValue === void 0) { defaultValue = {}; }
            var tableFormRows = this.tableForm.controls.rows;
            var row = {};
            var rowControls = [];
            row.controls = {};
            row._editing = {};
            row.rowId = this._rows.length + 1;
            this.columns.forEach(function (column) {
                // Use the control passed or use a ReadOnlyControl so that the form has the values
                var control = column.editorConfig
                    ? ControlFactory.create(column.editorType, column.editorConfig)
                    : new ReadOnlyControl({ key: column.name });
                control.value = null; // remove copied column value
                row.controls[column.name] = control;
                row._editing[column.name] = !column.viewOnly;
                rowControls.push(control);
            });
            this.formUtils.setInitialValues(rowControls, defaultValue, false);
            tableFormRows.push(this.formUtils.toFormGroup(rowControls));
            this._rows.push(row);
        };
        /**
         * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
         * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
         * { id: ID_OF_RECORD, key: value } -- data that was updated
         * { id: undefined, key: value } -- data that was added
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.validateAndGetUpdatedData = function () {
            var _this = this;
            if (this.tableForm && this.tableForm.controls && this.tableForm.controls.rows) {
                var changedRows_1 = [];
                var errors_1 = [];
                // Go over the FormArray's controls
                this.tableForm.controls.rows.controls.forEach(function (formGroup, index) {
                    var changedRow = null;
                    var error = null;
                    // Go over the form group controls
                    Object.keys(formGroup.controls).forEach(function (key) {
                        var control = formGroup.controls[key];
                        // Handle value changing
                        if (control && control.dirty && !control.errors) {
                            if (!changedRow) {
                                // Append the ID, so we have some key to save against
                                changedRow = {};
                                if (_this._rows[index].id) {
                                    changedRow.id = _this._rows[index].id;
                                }
                            }
                            // If dirty, grab value off the form
                            changedRow[key] = _this.tableForm.value.rows[index][key];
                            // Set value back to row (should be already done via the server call, but do it anyway)
                            _this._rows[index][key] = changedRow[key];
                        }
                        else if (control && control.errors) {
                            // Handle errors
                            if (!error) {
                                error = {};
                            }
                            error[key] = control.errors;
                            control.markAsDirty();
                            control.markAsTouched();
                        }
                    });
                    if (changedRow) {
                        changedRows_1.push(changedRow);
                    }
                    if (error) {
                        errors_1.push({ errors: error, row: _this._rows[index], index: index });
                    }
                });
                // Return errors if any, otherwise return the changed rows
                if (errors_1.length === 0) {
                    return { changed: changedRows_1 };
                }
                return { errors: errors_1 };
            }
        };
        /**
         * @description Refresh the data provider and leave edit mode
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.cancelEditing = function () {
            this.leaveEditMode(true);
        };
        /**
         * @description Refresh the data provider and leave edit mode
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.saveChanges = function () {
            this.leaveEditMode(false);
        };
        /**
         * @description Displays a toast message inside of the table
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.displayToastMessage = function (toast, hideDelay) {
            var _this = this;
            this.loading = false;
            this.toast = toast;
            if (hideDelay) {
                setTimeout(function () { return _this.hideToastMessage(); }, hideDelay);
            }
        };
        /**
         * @description Force hide the toast message
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.hideToastMessage = function () {
            var _this = this;
            this.toast = null;
            // Hack to make the table display properly after hiding the toast
            this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
            setTimeout(function () {
                _this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
            });
        };
        /**
         * @description display the loading overlay on the table
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.toggleLoading = function (show) {
            this.loading = show;
        };
        /**
         * @description hide a column in edit or view mode
         * @memberOf NovoTableElement
         */
        NovoTableElement.prototype.isColumnHidden = function (column) {
            return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
        };
        return NovoTableElement;
    }());
    NovoTableElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-table',
                    host: {
                        class: 'novo-table',
                        '[attr.theme]': 'theme',
                        '[class.editing]': 'mode === NovoTableMode.EDIT',
                        '[class.novo-table-loading]': 'loading',
                    },
                    // directives: [],
                    template: "\n    <header *ngIf=\"columns.length\">\n      <ng-content select=\"novo-table-header\"></ng-content>\n      <div class=\"header-actions\">\n        <novo-pagination\n          *ngIf=\"config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())\"\n          [rowOptions]=\"config.paging.rowOptions\"\n          [disablePageSelection]=\"config.paging.disablePageSelection\"\n          [(page)]=\"dataProvider.page\"\n          [(itemsPerPage)]=\"dataProvider.pageSize\"\n          [totalItems]=\"dataProvider.total\"\n          (onPageChange)=\"onPageChange($event)\"\n        >\n        </novo-pagination>\n        <ng-content select=\"novo-table-actions\"></ng-content>\n      </div>\n    </header>\n    <div class=\"novo-table-loading-overlay\" *ngIf=\"loading || dataProvider.isLoading()\">\n      <novo-loading></novo-loading>\n    </div>\n    <novo-toast *ngIf=\"toast\" [theme]=\"toast?.theme\" [icon]=\"toast?.icon\" [message]=\"toast?.message\"></novo-toast>\n    <div class=\"table-container\" *ngIf=\"!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast\">\n      <novo-form hideHeader=\"true\" [form]=\"tableForm\">\n        <table class=\"table table-striped dataTable\" [class.table-details]=\"config.hasDetails\" role=\"grid\">\n          <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->\n          <thead *ngIf=\"columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)\">\n            <tr role=\"row\">\n              <!-- DETAILS -->\n              <th class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                <novo-button\n                  theme=\"icon\"\n                  icon=\"next\"\n                  (click)=\"expandAllOnPage(config.expandAll)\"\n                  *ngIf=\"!config.expandAll\"\n                  data-automation-id=\"expand-all\"\n                ></novo-button>\n                <novo-button\n                  theme=\"icon\"\n                  icon=\"sort-desc\"\n                  (click)=\"expandAllOnPage(config.expandAll)\"\n                  *ngIf=\"config.expandAll\"\n                  data-automation-id=\"collapse-all\"\n                ></novo-button>\n              </th>\n              <!-- CHECKBOX -->\n              <th class=\"row-actions checkbox mass-action\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                <novo-checkbox\n                  [(ngModel)]=\"master\"\n                  [indeterminate]=\"pageSelected.length > 0 && pageSelected.length < pagedData.length\"\n                  (ngModelChange)=\"selectPage($event)\"\n                  data-automation-id=\"select-all-checkbox\"\n                  [tooltip]=\"master ? labels.deselectAll : labels.selectAllOnPage\"\n                  tooltipPosition=\"right\"\n                ></novo-checkbox>\n              </th>\n              <!-- TABLE HEADERS -->\n              <th\n                *ngFor=\"let column of columns\"\n                [ngClass]=\"{\n                  'mass-action': config?.rowSelectionStyle === 'checkbox',\n                  actions: column?.actions?.items?.length > 0,\n                  preview: column?.name === 'preview'\n                }\"\n                [novoThOrderable]=\"column\"\n                (onOrderChange)=\"onOrderChange($event)\"\n                [hidden]=\"isColumnHidden(column)\"\n              >\n                <div class=\"th-group\" [attr.data-automation-id]=\"column.id || column.name\" *ngIf=\"!column.hideHeader\">\n                  <!-- LABEL & SORT ARROWS -->\n                  <div\n                    class=\"th-title\"\n                    [ngClass]=\"config.sorting !== false && column.sorting !== false ? 'sortable' : ''\"\n                    [novoThSortable]=\"config\"\n                    [column]=\"column\"\n                    (onSortChange)=\"onSortChange($event)\"\n                  >\n                    <label>{{ column.title || column.label }}</label>\n                    <div\n                      class=\"table-sort-icons\"\n                      tooltipPosition=\"bottom\"\n                      [tooltip]=\"labels.sort\"\n                      [ngClass]=\"column.sort || ''\"\n                      *ngIf=\"config.sorting !== false && column.sorting !== false\"\n                    >\n                      <i class=\"bhi-arrow-up\"></i>\n                      <i class=\"bhi-arrow-down\"></i>\n                    </div>\n                  </div>\n                  <!-- FILTER DROP-DOWN -->\n                  <novo-dropdown\n                    side=\"default\"\n                    *ngIf=\"config.filtering !== false && column.filtering !== false\"\n                    class=\"column-filters\"\n                    (toggled)=\"onDropdownToggled($event, column.name)\"\n                    parentScrollSelector=\".table-container\"\n                    containerClass=\"table-dropdown\"\n                  >\n                    <novo-button\n                      type=\"button\"\n                      theme=\"icon\"\n                      icon=\"filter\"\n                      tooltipPosition=\"bottom\"\n                      [tooltip]=\"labels.filters\"\n                      [class.filtered]=\"column.filter || column.filter === false\"\n                      (click)=\"focusInput()\"\n                    ></novo-button>\n                    <!-- FILTER OPTIONS LIST -->\n                    <novo-optgroup\n                      *ngIf=\"\n                        (column?.options?.length || column?.originalOptions?.length) &&\n                        column?.type !== 'date' &&\n                        toggledDropdownMap[column.name]\n                      \"\n                    >\n                      <novo-option class=\"filter-search\" inert>\n                        <div class=\"header\">\n                          <span>{{ labels.filters }}</span>\n                          <novo-button\n                            theme=\"dialogue\"\n                            color=\"negative\"\n                            icon=\"times\"\n                            (click)=\"onFilterClear(column)\"\n                            *ngIf=\"column.filter || column.filter === false\"\n                          >\n                            {{ labels.clear }}\n                          </novo-button>\n                        </div>\n                        <input\n                          type=\"text\"\n                          *ngIf=\"!!column.allowCustomTextOption\"\n                          [attr.id]=\"column.name + '-input'\"\n                          [novoTableFilter]=\"column\"\n                          (onFilterChange)=\"onFilterKeywords($event)\"\n                          [(ngModel)]=\"column.freetextFilter\"\n                          keepFilterFocused\n                          #filterInput\n                        />\n                      </novo-option>\n                      <novo-option\n                        [ngClass]=\"{ active: isFilterActive(column, option) }\"\n                        *ngFor=\"let option of column.options\"\n                        (click)=\"onFilterClick(column, option)\"\n                        [attr.data-automation-id]=\"getOptionDataAutomationId(option)\"\n                      >\n                        <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                      </novo-option>\n                    </novo-optgroup>\n                    <!-- FILTER SEARCH INPUT -->\n                    <novo-optgroup *ngIf=\"!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]\">\n                      <novo-option class=\"filter-search\" inert>\n                        <div class=\"header\">\n                          <span>{{ labels.filters }}</span>\n                          <novo-button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">\n                            {{ labels.clear }}\n                          </novo-button>\n                        </div>\n                        <input\n                          type=\"text\"\n                          [attr.id]=\"column.name + '-input'\"\n                          [novoTableFilter]=\"column\"\n                          (onFilterChange)=\"onFilterChange($event)\"\n                          [(ngModel)]=\"column.filter\"\n                          keepFilterFocused\n                          #filterInput\n                        />\n                      </novo-option>\n                    </novo-optgroup>\n                    <!-- FILTER DATE OPTIONS -->\n                    <novo-optgroup *ngIf=\"column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]\">\n                      <novo-option class=\"filter-search\" *ngIf=\"!column.calenderShow\" inert>\n                        <div class=\"header\">\n                          <span>{{ labels.filters }}</span>\n                          <novo-button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">\n                            {{ labels.clear }}\n                          </novo-button>\n                        </div>\n                      </novo-option>\n                      <novo-option\n                        [class.active]=\"isFilterActive(column, option)\"\n                        *ngFor=\"let option of column.options\"\n                        (click)=\"onFilterClick(column, option)\"\n                        [keepOpen]=\"option.range\"\n                        [hidden]=\"column.calenderShow\"\n                        [attr.data-automation-id]=\"option?.label || option\"\n                      >\n                        {{ option?.label || option }}\n                        <novo-icon novoSuffix color=\"positive\" *ngIf=\"isFilterActive(column, option)\">check</novo-icon>\n                      </novo-option>\n                      <novo-option class=\"calendar-container\" *ngIf=\"column.calenderShow\" keepOpen inert>\n                        <novo-stack>\n                          <div class=\"back-link\" (click)=\"column.calenderShow = false\">\n                            <i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}\n                          </div>\n                          <novo-date-picker\n                            (onSelect)=\"onCalenderSelect(column, $event)\"\n                            [(ngModel)]=\"column.filter\"\n                            mode=\"range\"\n                          ></novo-date-picker>\n                        </novo-stack>\n                      </novo-option>\n                    </novo-optgroup>\n                  </novo-dropdown>\n                </div>\n              </th>\n            </tr>\n          </thead>\n          <!-- TABLE DATA -->\n          <tbody *ngIf=\"!dataProvider.isEmpty() || editing\">\n            <tr\n              class=\"table-selection-row\"\n              *ngIf=\"config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled\"\n              data-automation-id=\"table-selection-row\"\n            >\n              <td colspan=\"100%\">\n                {{ labels.selectedRecords(selected.length) }}\n                <a (click)=\"selectAll(true)\" data-automation-id=\"all-matching-records\">{{ labels.totalRecords(dataProvider.total) }}</a>\n              </td>\n            </tr>\n            <ng-template ngFor let-row=\"$implicit\" let-i=\"index\" [ngForOf]=\"rows\">\n              <tr\n                class=\"table-row\"\n                [ngClass]=\"row.customClass || ''\"\n                [id]=\"name + '-' + row[rowIdentifier]\"\n                [attr.data-automation-id]=\"row.id\"\n                (click)=\"rowClickHandler(row)\"\n                [class.active]=\"row.id === activeId\"\n              >\n                <td class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                  <novo-button theme=\"icon\" icon=\"next\" (click)=\"row._expanded = !row._expanded\" *ngIf=\"!row._expanded\"></novo-button>\n                  <novo-button theme=\"icon\" icon=\"sort-desc\" (click)=\"row._expanded = !row._expanded\" *ngIf=\"row._expanded\"></novo-button>\n                </td>\n                <td class=\"row-actions checkbox\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                  <novo-checkbox\n                    [(ngModel)]=\"row._selected\"\n                    (ngModelChange)=\"rowSelectHandler(row)\"\n                    data-automation-id=\"select-row-checkbox\"\n                  ></novo-checkbox>\n                </td>\n                <td\n                  *ngFor=\"let column of columns\"\n                  [attr.data-automation-id]=\"column.id || column.name\"\n                  [class.novo-form-row]=\"editable\"\n                  [hidden]=\"isColumnHidden(column)\"\n                >\n                  <novo-table-cell\n                    *ngIf=\"row._editing && !row._editing[column.name]\"\n                    [hasEditor]=\"editable\"\n                    [column]=\"column\"\n                    [row]=\"row\"\n                    [form]=\"getRowControlForm(i)\"\n                  ></novo-table-cell>\n                  <novo-control\n                    *ngIf=\"row._editing && row._editing[column.name]\"\n                    condensed=\"true\"\n                    [form]=\"getRowControlForm(i)\"\n                    [control]=\"row.controls[column.name]\"\n                  ></novo-control>\n                </td>\n              </tr>\n              <tr\n                class=\"details-row\"\n                *ngIf=\"config.hasDetails\"\n                [hidden]=\"!row._expanded\"\n                [attr.data-automation-id]=\"'details-row-' + row.id\"\n              >\n                <td class=\"row-actions\"></td>\n                <td [attr.colspan]=\"config.rowSelectionStyle === 'checkbox' ? columns.length + 1 : columns.length\">\n                  <novo-row-details [data]=\"row\" [renderer]=\"config.detailsRenderer\"></novo-row-details>\n                </td>\n              </tr>\n            </ng-template>\n          </tbody>\n          <!-- NO TABLE DATA PLACEHOLDER -->\n          <tbody\n            class=\"table-message\"\n            *ngIf=\"dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing\"\n            data-automation-id=\"empty-table\"\n          >\n            <tr>\n              <td colspan=\"100%\">\n                <div #emptymessage><ng-content select=\"[table-empty-message]\"></ng-content></div>\n                <div class=\"table-empty-message\" *ngIf=\"emptymessage.childNodes.length == 0\">\n                  <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n          <!-- NO MATCHING RECORDS -->\n          <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && dataProvider.isFiltered()\" data-automation-id=\"empty-table\">\n            <tr>\n              <td colspan=\"100%\">\n                <div #nomatchmessage><ng-content select=\"[table-no-matching-records-message]\"></ng-content></div>\n                <div class=\"no-matching-records\" *ngIf=\"nomatchmessage.childNodes.length == 0\">\n                  <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n          <!-- TABLE DATA ERROR PLACEHOLDER -->\n          <tbody class=\"table-message\" *ngIf=\"dataProvider.hasErrors()\" data-automation-id=\"table-errors\">\n            <tr>\n              <td colspan=\"100%\">\n                <div #errormessage><ng-content select=\"[table-error-message]\"></ng-content></div>\n                <div class=\"table-error-message\" *ngIf=\"errormessage.childNodes.length == 0\">\n                  <h4><i class=\"bhi-caution\"></i> {{ labels.erroredTableMessage }}</h4>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n          <tfoot *ngIf=\"!config.footers\" [ngClass]=\"dataProvider.length % 2 == 0 ? 'odd' : 'even'\">\n            <tr>\n              <td colspan=\"100%\">\n                <ng-content select=\"novo-table-footer\"></ng-content>\n              </td>\n            </tr>\n          </tfoot>\n          <tfoot *ngFor=\"let footer of footers; let i = index\" class=\"novo-table-total-footer\">\n            <tr>\n              <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"(column.id || column.name) + '-total-' + i\">\n                {{ footer[column.name] }}\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </novo-form>\n    </div>\n  "
                },] }
    ];
    NovoTableElement.ctorParameters = function () { return [
        { type: NovoLabelService },
        { type: FormUtils },
        { type: forms.FormBuilder },
        { type: i0.ChangeDetectorRef }
    ]; };
    NovoTableElement.propDecorators = {
        filterInputs: [{ type: i0.ViewChildren, args: ['filterInput', { read: i0.ElementRef },] }],
        config: [{ type: i0.Input }],
        columns: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        skipSortAndFilterClear: [{ type: i0.Input }],
        mode: [{ type: i0.Input }],
        editable: [{ type: i0.Input }],
        rowIdentifier: [{ type: i0.Input }],
        name: [{ type: i0.Input }],
        onRowClick: [{ type: i0.Output }],
        onRowSelect: [{ type: i0.Output }],
        onTableChange: [{ type: i0.Output }],
        rows: [{ type: i0.Input }],
        dataProvider: [{ type: i0.Input }]
    };

    // NG2
    var NovoToastModule = /** @class */ (function () {
        function NovoToastModule() {
        }
        return NovoToastModule;
    }());
    NovoToastModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoButtonModule],
                    declarations: [NovoToastElement],
                    exports: [NovoToastElement],
                },] }
    ];

    // NG2
    var NovoTableModule = /** @class */ (function () {
        function NovoTableModule() {
        }
        return NovoTableModule;
    }());
    NovoTableModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                        forms.FormsModule,
                        NovoFormModule,
                        NovoTableExtrasModule,
                        NovoToastModule,
                        NovoButtonModule,
                        NovoTooltipModule,
                        NovoDropdownModule,
                        NovoLoadingModule,
                        NovoDatePickerModule,
                        NovoFormExtrasModule,
                        NovoCheckboxModule,
                        angular2TextMask.TextMaskModule,
                        angularImask.IMaskDirectiveModule,
                        NovoOptionModule,
                        NovoCommonModule,
                        NovoFlexModule,
                        NovoIconModule,
                    ],
                    declarations: [NovoTableElement],
                    exports: [NovoTableElement],
                },] }
    ];

    // Boilerplate for applying mixins to NovoToolbar.
    /** @docs-private */
    var _NovoToolbarBase = mixinColor(/** @class */ (function () {
        function class_1(_elementRef) {
            this._elementRef = _elementRef;
        }
        return class_1;
    }()));
    var NovoToolbarRow = /** @class */ (function (_super) {
        __extends(NovoToolbarRow, _super);
        function NovoToolbarRow(elementRef) {
            return _super.call(this, elementRef) || this;
        }
        return NovoToolbarRow;
    }(_NovoToolbarBase));
    NovoToolbarRow.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'novo-toolbar-row',
                    host: { class: 'novo-toolbar-row' },
                    inputs: ['color', 'gap'],
                },] }
    ];
    NovoToolbarRow.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    var NovoToolbar = /** @class */ (function (_super) {
        __extends(NovoToolbar, _super);
        function NovoToolbar(elementRef) {
            return _super.call(this, elementRef) || this;
        }
        return NovoToolbar;
    }(_NovoToolbarBase));
    NovoToolbar.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-toolbar',
                    template: "<ng-content></ng-content>\n<ng-content select=\"novo-toolbar-row\"></ng-content>",
                    inputs: ['color', 'gap'],
                    host: {
                        class: 'novo-toolbar',
                        '[class.novo-toolbar-multiple-rows]': '_toolbarRows.length > 0',
                        '[class.novo-toolbar-single-row]': '_toolbarRows.length === 0',
                    },
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    encapsulation: i0.ViewEncapsulation.None,
                    styles: [".novo-toolbar .novo-toolbar-row,.novo-toolbar.novo-toolbar-single-row{align-items:center;background-color:var(--background-bright);box-sizing:border-box;color:var(--text-main);display:flex;flex-direction:row;min-height:5rem;padding:0 1rem;white-space:nowrap;width:100%}.novo-toolbar .novo-toolbar-row .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row novo-nav,.novo-toolbar .novo-toolbar-row novo-tab,.novo-toolbar.novo-toolbar-single-row .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row novo-nav,.novo-toolbar.novo-toolbar-single-row novo-tab{height:inherit;min-height:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black,.novo-toolbar .novo-toolbar-row.novo-theme-black,.novo-toolbar.novo-toolbar-single-row.novo-color-black,.novo-toolbar.novo-toolbar-single-row.novo-theme-black{background:#000;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-black .links button,.novo-toolbar .novo-toolbar-row.novo-color-black .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-black novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-black novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-black novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-black .links button,.novo-toolbar .novo-toolbar-row.novo-theme-black .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-black .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-black .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-black .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-black .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-black,.novo-toolbar.novo-toolbar-single-row.novo-accent-black{border-bottom:2px solid #000}.novo-toolbar .novo-toolbar-row.novo-color-white,.novo-toolbar .novo-toolbar-row.novo-theme-white,.novo-toolbar.novo-toolbar-single-row.novo-color-white,.novo-toolbar.novo-toolbar-single-row.novo-theme-white{background:#fff;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-white .links button,.novo-toolbar .novo-toolbar-row.novo-color-white .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-white novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-white novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-white novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-white .links button,.novo-toolbar .novo-toolbar-row.novo-theme-white .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-white .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-white .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-white .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-white .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-white .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-white,.novo-toolbar.novo-toolbar-single-row.novo-accent-white{border-bottom:2px solid #fff}.novo-toolbar .novo-toolbar-row.novo-color-gray,.novo-toolbar .novo-toolbar-row.novo-theme-gray,.novo-toolbar.novo-toolbar-single-row.novo-color-gray,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray{background:#9e9e9e;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-gray .links button,.novo-toolbar .novo-toolbar-row.novo-color-gray .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-gray .links button,.novo-toolbar .novo-toolbar-row.novo-theme-gray .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-gray .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-gray .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-gray,.novo-toolbar.novo-toolbar-single-row.novo-accent-gray{border-bottom:2px solid #9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-grey,.novo-toolbar .novo-toolbar-row.novo-theme-grey,.novo-toolbar.novo-toolbar-single-row.novo-color-grey,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey{background:#9e9e9e;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-grey .links button,.novo-toolbar .novo-toolbar-row.novo-color-grey .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grey .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grey .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grey .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grey .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-grey,.novo-toolbar.novo-toolbar-single-row.novo-accent-grey{border-bottom:2px solid #9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-offWhite,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite{background:#f7f7f7;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-offWhite .links button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .links button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-accent-offWhite{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-bright,.novo-toolbar .novo-toolbar-row.novo-theme-bright,.novo-toolbar.novo-toolbar-single-row.novo-color-bright,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright{background:#f7f7f7;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-bright .links button,.novo-toolbar .novo-toolbar-row.novo-color-bright .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bright .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bright .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bright .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bright .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-bright,.novo-toolbar.novo-toolbar-single-row.novo-accent-bright{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-light,.novo-toolbar .novo-toolbar-row.novo-theme-light,.novo-toolbar.novo-toolbar-single-row.novo-color-light,.novo-toolbar.novo-toolbar-single-row.novo-theme-light{background:#dbdbdb;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-light .links button,.novo-toolbar .novo-toolbar-row.novo-color-light .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-light novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-light novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-light novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-light .links button,.novo-toolbar .novo-toolbar-row.novo-theme-light .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-light .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-light .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-light .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-light .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-light .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-light,.novo-toolbar.novo-toolbar-single-row.novo-accent-light{border-bottom:2px solid #dbdbdb}.novo-toolbar .novo-toolbar-row.novo-color-neutral,.novo-toolbar .novo-toolbar-row.novo-theme-neutral,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral{background:#4f5361;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-neutral .links button,.novo-toolbar .novo-toolbar-row.novo-color-neutral .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .links button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-neutral .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-neutral,.novo-toolbar.novo-toolbar-single-row.novo-accent-neutral{border-bottom:2px solid #4f5361}.novo-toolbar .novo-toolbar-row.novo-color-dark,.novo-toolbar .novo-toolbar-row.novo-theme-dark,.novo-toolbar.novo-toolbar-single-row.novo-color-dark,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark{background:#3d464d;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-dark .links button,.novo-toolbar .novo-toolbar-row.novo-color-dark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-dark .links button,.novo-toolbar .novo-toolbar-row.novo-theme-dark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-dark .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-dark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-dark,.novo-toolbar.novo-toolbar-single-row.novo-accent-dark{border-bottom:2px solid #3d464d}.novo-toolbar .novo-toolbar-row.novo-color-orange,.novo-toolbar .novo-toolbar-row.novo-theme-orange,.novo-toolbar.novo-toolbar-single-row.novo-color-orange,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange{background:#ff6900;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-orange .links button,.novo-toolbar .novo-toolbar-row.novo-color-orange .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-orange .links button,.novo-toolbar .novo-toolbar-row.novo-theme-orange .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-orange .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-orange .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-orange,.novo-toolbar.novo-toolbar-single-row.novo-accent-orange{border-bottom:2px solid #ff6900}.novo-toolbar .novo-toolbar-row.novo-color-navigation,.novo-toolbar .novo-toolbar-row.novo-theme-navigation,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation{background:#202945;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-navigation .links button,.novo-toolbar .novo-toolbar-row.novo-color-navigation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navigation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-navigation,.novo-toolbar.novo-toolbar-single-row.novo-accent-navigation{border-bottom:2px solid #202945}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue{background:#009bdf;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .links button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .links button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-accent-skyBlue{border-bottom:2px solid #009bdf}.novo-toolbar .novo-toolbar-row.novo-color-steel,.novo-toolbar .novo-toolbar-row.novo-theme-steel,.novo-toolbar.novo-toolbar-single-row.novo-color-steel,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel{background:#5b6770;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-steel .links button,.novo-toolbar .novo-toolbar-row.novo-color-steel .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-steel .links button,.novo-toolbar .novo-toolbar-row.novo-theme-steel .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-steel .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-steel .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-steel,.novo-toolbar.novo-toolbar-single-row.novo-accent-steel{border-bottom:2px solid #5b6770}.novo-toolbar .novo-toolbar-row.novo-color-metal,.novo-toolbar .novo-toolbar-row.novo-theme-metal,.novo-toolbar.novo-toolbar-single-row.novo-color-metal,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal{background:#637893;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-metal .links button,.novo-toolbar .novo-toolbar-row.novo-color-metal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-metal .links button,.novo-toolbar .novo-toolbar-row.novo-theme-metal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-metal .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-metal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-metal,.novo-toolbar.novo-toolbar-single-row.novo-accent-metal{border-bottom:2px solid #637893}.novo-toolbar .novo-toolbar-row.novo-color-sand,.novo-toolbar .novo-toolbar-row.novo-theme-sand,.novo-toolbar.novo-toolbar-single-row.novo-color-sand,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand{background:#f4f4f4;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-sand .links button,.novo-toolbar .novo-toolbar-row.novo-color-sand .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sand .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sand .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sand .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sand .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-sand,.novo-toolbar.novo-toolbar-single-row.novo-accent-sand{border-bottom:2px solid #f4f4f4}.novo-toolbar .novo-toolbar-row.novo-color-silver,.novo-toolbar .novo-toolbar-row.novo-theme-silver,.novo-toolbar.novo-toolbar-single-row.novo-color-silver,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver{background:#e2e2e2;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-silver .links button,.novo-toolbar .novo-toolbar-row.novo-color-silver .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-silver .links button,.novo-toolbar .novo-toolbar-row.novo-theme-silver .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-silver .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-silver .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-silver,.novo-toolbar.novo-toolbar-single-row.novo-accent-silver{border-bottom:2px solid #e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-stone,.novo-toolbar .novo-toolbar-row.novo-theme-stone,.novo-toolbar.novo-toolbar-single-row.novo-color-stone,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone{background:#bebebe;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-stone .links button,.novo-toolbar .novo-toolbar-row.novo-color-stone .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-stone .links button,.novo-toolbar .novo-toolbar-row.novo-theme-stone .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-stone .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-stone .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-stone,.novo-toolbar.novo-toolbar-single-row.novo-accent-stone{border-bottom:2px solid #bebebe}.novo-toolbar .novo-toolbar-row.novo-color-ash,.novo-toolbar .novo-toolbar-row.novo-theme-ash,.novo-toolbar.novo-toolbar-single-row.novo-color-ash,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash{background:#a0a0a0;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-ash .links button,.novo-toolbar .novo-toolbar-row.novo-color-ash .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-ash .links button,.novo-toolbar .novo-toolbar-row.novo-theme-ash .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ash .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-ash .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-ash,.novo-toolbar.novo-toolbar-single-row.novo-accent-ash{border-bottom:2px solid #a0a0a0}.novo-toolbar .novo-toolbar-row.novo-color-slate,.novo-toolbar .novo-toolbar-row.novo-theme-slate,.novo-toolbar.novo-toolbar-single-row.novo-color-slate,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate{background:#707070;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-slate .links button,.novo-toolbar .novo-toolbar-row.novo-color-slate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-slate .links button,.novo-toolbar .novo-toolbar-row.novo-theme-slate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-slate .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-slate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-slate,.novo-toolbar.novo-toolbar-single-row.novo-accent-slate{border-bottom:2px solid #707070}.novo-toolbar .novo-toolbar-row.novo-color-onyx,.novo-toolbar .novo-toolbar-row.novo-theme-onyx,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx{background:#526980;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-onyx .links button,.novo-toolbar .novo-toolbar-row.novo-color-onyx .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .links button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-onyx .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-onyx,.novo-toolbar.novo-toolbar-single-row.novo-accent-onyx{border-bottom:2px solid #526980}.novo-toolbar .novo-toolbar-row.novo-color-charcoal,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal{background:#282828;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-charcoal .links button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .links button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-accent-charcoal{border-bottom:2px solid #282828}.novo-toolbar .novo-toolbar-row.novo-color-moonlight,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight{background:#1a242f;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-moonlight .links button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .links button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-accent-moonlight{border-bottom:2px solid #1a242f}.novo-toolbar .novo-toolbar-row.novo-color-midnight,.novo-toolbar .novo-toolbar-row.novo-theme-midnight,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight{background:#202945;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-midnight .links button,.novo-toolbar .novo-toolbar-row.novo-color-midnight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .links button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-midnight .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-midnight,.novo-toolbar.novo-toolbar-single-row.novo-accent-midnight{border-bottom:2px solid #202945}.novo-toolbar .novo-toolbar-row.novo-color-darkness,.novo-toolbar .novo-toolbar-row.novo-theme-darkness,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness{background:#161f27;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-darkness .links button,.novo-toolbar .novo-toolbar-row.novo-color-darkness .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .links button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-darkness .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-darkness,.novo-toolbar.novo-toolbar-single-row.novo-accent-darkness{border-bottom:2px solid #161f27}.novo-toolbar .novo-toolbar-row.novo-color-navy,.novo-toolbar .novo-toolbar-row.novo-theme-navy,.novo-toolbar.novo-toolbar-single-row.novo-color-navy,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy{background:#0d2d42;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-navy .links button,.novo-toolbar .novo-toolbar-row.novo-color-navy .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-navy .links button,.novo-toolbar .novo-toolbar-row.novo-theme-navy .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navy .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-navy .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-navy,.novo-toolbar.novo-toolbar-single-row.novo-accent-navy{border-bottom:2px solid #0d2d42}.novo-toolbar .novo-toolbar-row.novo-color-aqua,.novo-toolbar .novo-toolbar-row.novo-theme-aqua,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua{background:#3bafda;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-aqua .links button,.novo-toolbar .novo-toolbar-row.novo-color-aqua .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .links button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-aqua .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-aqua,.novo-toolbar.novo-toolbar-single-row.novo-accent-aqua{border-bottom:2px solid #3bafda}.novo-toolbar .novo-toolbar-row.novo-color-ocean,.novo-toolbar .novo-toolbar-row.novo-theme-ocean,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean{background:#4a89dc;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-ocean .links button,.novo-toolbar .novo-toolbar-row.novo-color-ocean .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .links button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ocean .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-ocean,.novo-toolbar.novo-toolbar-single-row.novo-accent-ocean{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-mint,.novo-toolbar .novo-toolbar-row.novo-theme-mint,.novo-toolbar.novo-toolbar-single-row.novo-color-mint,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint{background:#37bc9b;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-mint .links button,.novo-toolbar .novo-toolbar-row.novo-color-mint .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-mint .links button,.novo-toolbar .novo-toolbar-row.novo-theme-mint .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mint .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-mint .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-mint,.novo-toolbar.novo-toolbar-single-row.novo-accent-mint{border-bottom:2px solid #37bc9b}.novo-toolbar .novo-toolbar-row.novo-color-grass,.novo-toolbar .novo-toolbar-row.novo-theme-grass,.novo-toolbar.novo-toolbar-single-row.novo-color-grass,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass{background:#8cc152;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-grass .links button,.novo-toolbar .novo-toolbar-row.novo-color-grass .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grass .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grass .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grass .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grass .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-grass,.novo-toolbar.novo-toolbar-single-row.novo-accent-grass{border-bottom:2px solid #8cc152}.novo-toolbar .novo-toolbar-row.novo-color-sunflower,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower{background:#f6b042;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-sunflower .links button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-accent-sunflower{border-bottom:2px solid #f6b042}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet{background:#eb6845;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .links button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-accent-bittersweet{border-bottom:2px solid #eb6845}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit{background:#da4453;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .links button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-accent-grapefruit{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-carnation,.novo-toolbar .novo-toolbar-row.novo-theme-carnation,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation{background:#d770ad;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-carnation .links button,.novo-toolbar .novo-toolbar-row.novo-color-carnation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-carnation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-carnation,.novo-toolbar.novo-toolbar-single-row.novo-accent-carnation{border-bottom:2px solid #d770ad}.novo-toolbar .novo-toolbar-row.novo-color-lavender,.novo-toolbar .novo-toolbar-row.novo-theme-lavender,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender{background:#967adc;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-lavender .links button,.novo-toolbar .novo-toolbar-row.novo-color-lavender .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .links button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lavender .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-lavender,.novo-toolbar.novo-toolbar-single-row.novo-accent-lavender{border-bottom:2px solid #967adc}.novo-toolbar .novo-toolbar-row.novo-color-mountain,.novo-toolbar .novo-toolbar-row.novo-theme-mountain,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain{background:#9678b6;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-mountain .links button,.novo-toolbar .novo-toolbar-row.novo-color-mountain .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .links button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mountain .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-mountain,.novo-toolbar.novo-toolbar-single-row.novo-accent-mountain{border-bottom:2px solid #9678b6}.novo-toolbar .novo-toolbar-row.novo-color-info,.novo-toolbar .novo-toolbar-row.novo-theme-info,.novo-toolbar.novo-toolbar-single-row.novo-color-info,.novo-toolbar.novo-toolbar-single-row.novo-theme-info{background:#4a89dc;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-info .links button,.novo-toolbar .novo-toolbar-row.novo-color-info .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-info novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-info novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-info novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-info .links button,.novo-toolbar .novo-toolbar-row.novo-theme-info .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-info .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-info .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-info .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-info .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-info .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-info,.novo-toolbar.novo-toolbar-single-row.novo-accent-info{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-positive,.novo-toolbar .novo-toolbar-row.novo-theme-positive,.novo-toolbar.novo-toolbar-single-row.novo-color-positive,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive{background:#4a89dc;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-positive .links button,.novo-toolbar .novo-toolbar-row.novo-color-positive .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-positive .links button,.novo-toolbar .novo-toolbar-row.novo-theme-positive .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-positive .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-positive .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-positive,.novo-toolbar.novo-toolbar-single-row.novo-accent-positive{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-success,.novo-toolbar .novo-toolbar-row.novo-theme-success,.novo-toolbar.novo-toolbar-single-row.novo-color-success,.novo-toolbar.novo-toolbar-single-row.novo-theme-success{background:#8cc152;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-success .links button,.novo-toolbar .novo-toolbar-row.novo-color-success .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-success novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-success novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-success novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-success .links button,.novo-toolbar .novo-toolbar-row.novo-theme-success .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-success .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-success .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-success .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-success .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-success .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-success,.novo-toolbar.novo-toolbar-single-row.novo-accent-success{border-bottom:2px solid #8cc152}.novo-toolbar .novo-toolbar-row.novo-color-negative,.novo-toolbar .novo-toolbar-row.novo-theme-negative,.novo-toolbar.novo-toolbar-single-row.novo-color-negative,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative{background:#da4453;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-negative .links button,.novo-toolbar .novo-toolbar-row.novo-color-negative .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-negative .links button,.novo-toolbar .novo-toolbar-row.novo-theme-negative .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-negative .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-negative .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-negative,.novo-toolbar.novo-toolbar-single-row.novo-accent-negative{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-danger,.novo-toolbar .novo-toolbar-row.novo-theme-danger,.novo-toolbar.novo-toolbar-single-row.novo-color-danger,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger{background:#da4453;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-danger .links button,.novo-toolbar .novo-toolbar-row.novo-color-danger .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-danger .links button,.novo-toolbar .novo-toolbar-row.novo-theme-danger .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-danger .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-danger .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-danger,.novo-toolbar.novo-toolbar-single-row.novo-accent-danger{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-error,.novo-toolbar .novo-toolbar-row.novo-theme-error,.novo-toolbar.novo-toolbar-single-row.novo-color-error,.novo-toolbar.novo-toolbar-single-row.novo-theme-error{background:#da4453;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-error .links button,.novo-toolbar .novo-toolbar-row.novo-color-error .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-error novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-error novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-error novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-error .links button,.novo-toolbar .novo-toolbar-row.novo-theme-error .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-error .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-error .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-error .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-error .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-error .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-error,.novo-toolbar.novo-toolbar-single-row.novo-accent-error{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-warning,.novo-toolbar .novo-toolbar-row.novo-theme-warning,.novo-toolbar.novo-toolbar-single-row.novo-color-warning,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning{background:#f6b042;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-warning .links button,.novo-toolbar .novo-toolbar-row.novo-color-warning .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-warning .links button,.novo-toolbar .novo-toolbar-row.novo-theme-warning .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-warning .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-warning .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-warning,.novo-toolbar.novo-toolbar-single-row.novo-accent-warning{border-bottom:2px solid #f6b042}.novo-toolbar .novo-toolbar-row.novo-color-empty,.novo-toolbar .novo-toolbar-row.novo-theme-empty,.novo-toolbar.novo-toolbar-single-row.novo-color-empty,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty{background:#cccdcc;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-empty .links button,.novo-toolbar .novo-toolbar-row.novo-color-empty .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-empty .links button,.novo-toolbar .novo-toolbar-row.novo-theme-empty .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-empty .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-empty .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-empty,.novo-toolbar.novo-toolbar-single-row.novo-accent-empty{border-bottom:2px solid #cccdcc}.novo-toolbar .novo-toolbar-row.novo-color-disabled,.novo-toolbar .novo-toolbar-row.novo-theme-disabled,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled{background:#bebebe;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-disabled .links button,.novo-toolbar .novo-toolbar-row.novo-color-disabled .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .links button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-disabled .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-disabled,.novo-toolbar.novo-toolbar-single-row.novo-accent-disabled{border-bottom:2px solid #bebebe}.novo-toolbar .novo-toolbar-row.novo-color-background,.novo-toolbar .novo-toolbar-row.novo-theme-background,.novo-toolbar.novo-toolbar-single-row.novo-color-background,.novo-toolbar.novo-toolbar-single-row.novo-theme-background{background:#f7f7f7;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-background .links button,.novo-toolbar .novo-toolbar-row.novo-color-background .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-background novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-background novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-background novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-background .links button,.novo-toolbar .novo-toolbar-row.novo-theme-background .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-background .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-background .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-background .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-background .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-background .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-background,.novo-toolbar.novo-toolbar-single-row.novo-accent-background{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark{background:#e2e2e2;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .links button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .links button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-accent-backgroundDark{border-bottom:2px solid #e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-presentation,.novo-toolbar .novo-toolbar-row.novo-theme-presentation,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation{background:#5b6770;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-presentation .links button,.novo-toolbar .novo-toolbar-row.novo-color-presentation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-presentation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-presentation,.novo-toolbar.novo-toolbar-single-row.novo-accent-presentation{border-bottom:2px solid #5b6770}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn{background:#ff6900;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .links button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-accent-bullhorn{border-bottom:2px solid #ff6900}.novo-toolbar .novo-toolbar-row.novo-color-pulse,.novo-toolbar .novo-toolbar-row.novo-theme-pulse,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse{background:#3bafda;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-pulse .links button,.novo-toolbar .novo-toolbar-row.novo-color-pulse .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .links button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-pulse .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-pulse,.novo-toolbar.novo-toolbar-single-row.novo-accent-pulse{border-bottom:2px solid #3bafda}.novo-toolbar .novo-toolbar-row.novo-color-company,.novo-toolbar .novo-toolbar-row.novo-theme-company,.novo-toolbar.novo-toolbar-single-row.novo-color-company,.novo-toolbar.novo-toolbar-single-row.novo-theme-company{background:#39d;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-company .links button,.novo-toolbar .novo-toolbar-row.novo-color-company .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-company novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-company novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-company novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-company .links button,.novo-toolbar .novo-toolbar-row.novo-theme-company .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-company .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-company .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-company .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-company .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-company .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-company,.novo-toolbar.novo-toolbar-single-row.novo-accent-company{border-bottom:2px solid #39d}.novo-toolbar .novo-toolbar-row.novo-color-candidate,.novo-toolbar .novo-toolbar-row.novo-theme-candidate,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate{background:#4b7;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-candidate .links button,.novo-toolbar .novo-toolbar-row.novo-color-candidate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .links button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-candidate .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-candidate,.novo-toolbar.novo-toolbar-single-row.novo-accent-candidate{border-bottom:2px solid #4b7}.novo-toolbar .novo-toolbar-row.novo-color-lead,.novo-toolbar .novo-toolbar-row.novo-theme-lead,.novo-toolbar.novo-toolbar-single-row.novo-color-lead,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead{background:#a69;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-lead .links button,.novo-toolbar .novo-toolbar-row.novo-color-lead .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-lead .links button,.novo-toolbar .novo-toolbar-row.novo-theme-lead .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lead .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-lead .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-lead,.novo-toolbar.novo-toolbar-single-row.novo-accent-lead{border-bottom:2px solid #a69}.novo-toolbar .novo-toolbar-row.novo-color-contact,.novo-toolbar .novo-toolbar-row.novo-theme-contact,.novo-toolbar.novo-toolbar-single-row.novo-color-contact,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact{background:#fa4;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-contact .links button,.novo-toolbar .novo-toolbar-row.novo-color-contact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-contact .links button,.novo-toolbar .novo-toolbar-row.novo-theme-contact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contact .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-contact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-contact,.novo-toolbar.novo-toolbar-single-row.novo-accent-contact{border-bottom:2px solid #fa4}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact{background:#fa4;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .links button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .links button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-accent-clientcontact{border-bottom:2px solid #fa4}.novo-toolbar .novo-toolbar-row.novo-color-opportunity,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity{background:#625;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-opportunity .links button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .links button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-accent-opportunity{border-bottom:2px solid #625}.novo-toolbar .novo-toolbar-row.novo-color-job,.novo-toolbar .novo-toolbar-row.novo-theme-job,.novo-toolbar.novo-toolbar-single-row.novo-color-job,.novo-toolbar.novo-toolbar-single-row.novo-theme-job{background:#b56;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-job .links button,.novo-toolbar .novo-toolbar-row.novo-color-job .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-job novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-job novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-job novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-job .links button,.novo-toolbar .novo-toolbar-row.novo-theme-job .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-job .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-job .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-job .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-job .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-job .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-job,.novo-toolbar.novo-toolbar-single-row.novo-accent-job{border-bottom:2px solid #b56}.novo-toolbar .novo-toolbar-row.novo-color-joborder,.novo-toolbar .novo-toolbar-row.novo-theme-joborder,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder{background:#b56;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-joborder .links button,.novo-toolbar .novo-toolbar-row.novo-color-joborder .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .links button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-joborder .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-joborder,.novo-toolbar.novo-toolbar-single-row.novo-accent-joborder{border-bottom:2px solid #b56}.novo-toolbar .novo-toolbar-row.novo-color-submission,.novo-toolbar .novo-toolbar-row.novo-theme-submission,.novo-toolbar.novo-toolbar-single-row.novo-color-submission,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission{background:#a9adbb;color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-submission .links button,.novo-toolbar .novo-toolbar-row.novo-color-submission .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-submission .links button,.novo-toolbar .novo-toolbar-row.novo-theme-submission .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-submission .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-submission .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-submission,.novo-toolbar.novo-toolbar-single-row.novo-accent-submission{border-bottom:2px solid #a9adbb}.novo-toolbar .novo-toolbar-row.novo-color-sendout,.novo-toolbar .novo-toolbar-row.novo-theme-sendout,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout{background:#747884;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-sendout .links button,.novo-toolbar .novo-toolbar-row.novo-color-sendout .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sendout .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-sendout,.novo-toolbar.novo-toolbar-single-row.novo-accent-sendout{border-bottom:2px solid #747884}.novo-toolbar .novo-toolbar-row.novo-color-placement,.novo-toolbar .novo-toolbar-row.novo-theme-placement,.novo-toolbar.novo-toolbar-single-row.novo-color-placement,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement{background:#0b344f;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-placement .links button,.novo-toolbar .novo-toolbar-row.novo-color-placement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-placement .links button,.novo-toolbar .novo-toolbar-row.novo-theme-placement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-placement .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-placement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-placement,.novo-toolbar.novo-toolbar-single-row.novo-accent-placement{border-bottom:2px solid #0b344f}.novo-toolbar .novo-toolbar-row.novo-color-note,.novo-toolbar .novo-toolbar-row.novo-theme-note,.novo-toolbar.novo-toolbar-single-row.novo-color-note,.novo-toolbar.novo-toolbar-single-row.novo-theme-note{background:#747884;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-note .links button,.novo-toolbar .novo-toolbar-row.novo-color-note .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-note novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-note novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-note novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-note .links button,.novo-toolbar .novo-toolbar-row.novo-theme-note .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-note .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-note .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-note .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-note .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-note .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-note,.novo-toolbar.novo-toolbar-single-row.novo-accent-note{border-bottom:2px solid #747884}.novo-toolbar .novo-toolbar-row.novo-color-contract,.novo-toolbar .novo-toolbar-row.novo-theme-contract,.novo-toolbar.novo-toolbar-single-row.novo-color-contract,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract{background:#454ea0;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-contract .links button,.novo-toolbar .novo-toolbar-row.novo-color-contract .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-contract .links button,.novo-toolbar .novo-toolbar-row.novo-theme-contract .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contract .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-contract .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-contract,.novo-toolbar.novo-toolbar-single-row.novo-accent-contract{border-bottom:2px solid #454ea0}.novo-toolbar .novo-toolbar-row.novo-color-jobCode,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-jobCode .links button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .links button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-accent-jobCode{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-earnCode,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-earnCode .links button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .links button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-accent-earnCode{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .links button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .links button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-accent-invoiceStatement{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-accent-billableCharge{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-accent-payableCharge{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-user,.novo-toolbar .novo-toolbar-row.novo-theme-user,.novo-toolbar.novo-toolbar-single-row.novo-color-user,.novo-toolbar.novo-toolbar-single-row.novo-theme-user{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-user .links button,.novo-toolbar .novo-toolbar-row.novo-color-user .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-user novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-user novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-user novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-user .links button,.novo-toolbar .novo-toolbar-row.novo-theme-user .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-user .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-user .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-user .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-user .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-user .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-user,.novo-toolbar.novo-toolbar-single-row.novo-accent-user{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .links button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .links button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-accent-corporateUser{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-distributionList,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-distributionList .links button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .links button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-accent-distributionList{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-credential,.novo-toolbar .novo-toolbar-row.novo-theme-credential,.novo-toolbar.novo-toolbar-single-row.novo-color-credential,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-credential .links button,.novo-toolbar .novo-toolbar-row.novo-color-credential .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-credential .links button,.novo-toolbar .novo-toolbar-row.novo-theme-credential .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-credential .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-credential .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-credential,.novo-toolbar.novo-toolbar-single-row.novo-accent-credential{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-person,.novo-toolbar .novo-toolbar-row.novo-theme-person,.novo-toolbar.novo-toolbar-single-row.novo-color-person,.novo-toolbar.novo-toolbar-single-row.novo-theme-person{background:#696d79;color:#fff}.novo-toolbar .novo-toolbar-row.novo-color-person .links button,.novo-toolbar .novo-toolbar-row.novo-color-person .links novo-button,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-person novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-person novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-person novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-person .links button,.novo-toolbar .novo-toolbar-row.novo-theme-person .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-person .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-person .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-person .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-person .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-person .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-person,.novo-toolbar.novo-toolbar-single-row.novo-accent-person{border-bottom:2px solid #696d79}.novo-toolbar.novo-toolbar-multiple-rows{box-sizing:border-box;display:flex;flex-direction:column;width:100%}"]
                },] }
    ];
    NovoToolbar.ctorParameters = function () { return [
        { type: i0.ElementRef }
    ]; };
    NovoToolbar.propDecorators = {
        _toolbarRows: [{ type: i0.ContentChildren, args: [NovoToolbarRow, { descendants: true },] }]
    };

    // NG2
    var NovoToolbarModule = /** @class */ (function () {
        function NovoToolbarModule() {
        }
        return NovoToolbarModule;
    }());
    NovoToolbarModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [NovoToolbar, NovoToolbarRow],
                    exports: [NovoToolbar, NovoToolbarRow],
                },] }
    ];

    var Unless = /** @class */ (function () {
        function Unless(templateRef, viewContainer, security) {
            this.templateRef = templateRef;
            this.viewContainer = viewContainer;
            this.security = security;
            this.permissions = '';
            this.isDisplayed = false;
            this.security.subscribe(this.check.bind(this));
        }
        Object.defineProperty(Unless.prototype, "bhUnless", {
            set: function (value) {
                this.permissions = value || '';
                this.check();
            },
            enumerable: false,
            configurable: true
        });
        Unless.prototype.check = function () {
            var e_1, _a;
            var _this = this;
            var display = false;
            if (~this.permissions.indexOf('||')) {
                var ps = this.permissions.split('||');
                try {
                    for (var ps_1 = __values(ps), ps_1_1 = ps_1.next(); !ps_1_1.done; ps_1_1 = ps_1.next()) {
                        var p = ps_1_1.value;
                        if (this.security.has(p.trim())) {
                            display = true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (ps_1_1 && !ps_1_1.done && (_a = ps_1.return)) _a.call(ps_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            else {
                display = this.permissions.split('&&').every(function (p) { return _this.security.has(p.trim()); });
            }
            if (display) {
                if (!this.isDisplayed) {
                    this.isDisplayed = true;
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
            }
            else {
                this.isDisplayed = false;
                this.viewContainer.clear();
            }
        };
        return Unless;
    }());
    Unless.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[bhUnless]',
                },] }
    ];
    Unless.ctorParameters = function () { return [
        { type: i0.TemplateRef },
        { type: i0.ViewContainerRef },
        { type: Security }
    ]; };
    Unless.propDecorators = {
        bhUnless: [{ type: i0.Input }]
    };

    // NG2
    var UnlessModule = /** @class */ (function () {
        function UnlessModule() {
        }
        return UnlessModule;
    }());
    UnlessModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule],
                    declarations: [Unless],
                    exports: [Unless],
                },] }
    ];

    var EntityList = /** @class */ (function () {
        function EntityList() {
            this.baseEntity = '';
            this.ENTITY_SHORT_NAMES = {
                Lead: 'lead',
                ClientContact: 'contact',
                ClientContact1: 'contact',
                ClientContact2: 'contact',
                ClientContact3: 'contact',
                ClientContact4: 'contact',
                ClientContact5: 'contact',
                ClientCorporation: 'company',
                ClientCorporation1: 'company',
                ClientCorporation2: 'company',
                ClientCorporation3: 'company',
                ClientCorporation4: 'company',
                ClientCorporation5: 'company',
                Opportunity: 'opportunity',
                Task: 'task',
                Note: 'note',
                CorporateUser: 'user',
                Candidate: 'candidate',
                JobOrder: 'job',
                JobOrder1: 'job',
                JobOrder2: 'job',
                JobOrder3: 'job',
                JobOrder4: 'job',
                JobOrder5: 'job',
                Placement: 'placement',
                JobSubmission: 'submission',
                CandidateReference: 'references',
                DistributionList: 'distributionList',
                Appointment: 'appointment',
            };
        }
        EntityList.prototype.ngOnInit = function () {
            var e_1, _a;
            // use a local copy of the meta to set the type to TO_ONE for proper display
            // without changing the input object
            this.metaDisplay = Helpers.deepClone(this.meta);
            this.metaDisplay.type = 'TO_ONE';
            this.baseEntity = this.meta.associatedEntity.entity;
            try {
                for (var _b = __values(this.data.data), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var entity = _c.value;
                    entity.isLinkable = this.isLinkable(entity);
                    entity.class = this.getClass(entity);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        };
        EntityList.prototype.getClass = function (entity) {
            return this.ENTITY_SHORT_NAMES[entity.personSubtype];
        };
        EntityList.prototype.openLink = function (entity) {
            entity.openLink(entity);
        };
        EntityList.prototype.isLinkable = function (entity) {
            return entity.openLink;
        };
        return EntityList;
    }());
    EntityList.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-entity-list',
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    template: "\n    <div *ngFor=\"let entity of data.data\" class=\"entity\">\n      <a *ngIf=\"entity.isLinkable\" (click)=\"openLink(entity)\">\n        <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render: metaDisplay }}\n      </a>\n      <span *ngIf=\"!entity.isLinkable && entity.personSubtype\">\n        <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render: metaDisplay }}\n      </span>\n      <span *ngIf=\"!entity.isLinkable && !entity.personSubtype\">\n        {{ entity | render: metaDisplay }}\n      </span>\n    </div>\n  "
                },] }
    ];
    EntityList.ctorParameters = function () { return []; };
    EntityList.propDecorators = {
        data: [{ type: i0.Input }],
        meta: [{ type: i0.Input }]
    };

    /**
     * @classdesc
     * Renders data appropriately based on the data type found in Meta
     * All data types defined by bullhorn should be supported:
     *
     * - **String**: trims value and returns
     * - **Integer**: return value
     * - **Double**: return value fixed to 2 decimals
     * - **BigDecimal**: return value fixed to 2 decimals
     * - **Address**: only city and/or state returned
     * - **Address1**: only city and/or state returned
     * - **AddressWithoutCountry**: only city and/or state returned
     * - **Currency**: put a $ in front
     * - **Percentage**: divide by 100 fix to 2 decimals place and return
     * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
     * - **Array**: returns list comma separated
     * - **DateTime**: formats the date
     * - **TimeStamp**: formats the date
     * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
     * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
     *
     * @example
     * ```
     * {{ expression | render:field }}
     * ```
     */
    var RenderPipe = /** @class */ (function () {
        function RenderPipe(changeDetector, sanitizationService, labels) {
            this.changeDetector = changeDetector;
            this.sanitizationService = sanitizationService;
            this.labels = labels;
        }
        RenderPipe.prototype.equals = function (objectOne, objectTwo) {
            if (objectOne === objectTwo) {
                return true;
            }
            if (objectOne === null || objectTwo === null) {
                return false;
            }
            if (objectOne !== objectOne && objectTwo !== objectTwo) {
                return true;
            }
            var t1 = typeof objectOne;
            var t2 = typeof objectTwo;
            var length;
            var key;
            var keySet;
            if (t1 === t2 && t1 === 'object') {
                if (Array.isArray(objectOne)) {
                    if (!Array.isArray(objectTwo)) {
                        return false;
                    }
                    length = objectOne.length;
                    if (length === objectTwo.length) {
                        for (key = 0; key < length; key++) {
                            if (!this.equals(objectOne[key], objectTwo[key])) {
                                return false;
                            }
                        }
                        return true;
                    }
                }
                else {
                    if (Array.isArray(objectTwo)) {
                        return false;
                    }
                    keySet = Object.create(null);
                    for (key in objectOne) {
                        if (objectOne[key]) {
                            if (!this.equals(objectOne[key], objectTwo[key])) {
                                return false;
                            }
                            keySet[key] = true;
                        }
                    }
                    for (key in objectTwo) {
                        if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                            return false;
                        }
                    }
                    return true;
                }
            }
            return false;
        };
        RenderPipe.prototype.getEntityLabel = function (item, entity) {
            switch (entity) {
                case 'CorporateUser':
                case 'ClientContact':
                case 'ClientContact1':
                case 'ClientContact2':
                case 'ClientContact3':
                case 'ClientContact4':
                case 'ClientContact5':
                case 'Lead':
                case 'Candidate':
                case 'Person':
                    return ((item.firstName || '') + " " + (item.lastName || '')).trim();
                case 'ClientCorporation':
                case 'ClientCorporation1':
                case 'ClientCorporation2':
                case 'ClientCorporation3':
                case 'ClientCorporation4':
                case 'ClientCorporation5':
                    return ("" + (item.name || '')).trim();
                case 'JobOrder':
                case 'JobOrder1':
                case 'JobOrder2':
                case 'JobOrder3':
                case 'JobOrder4':
                case 'JobOrder5':
                case 'Opportunity':
                    return ("" + (item.title || '')).trim();
                case 'Placement':
                    var label = '';
                    if (item.candidate) {
                        label = (item.candidate.firstName + " " + item.candidate.lastName).trim();
                    }
                    if (item.jobOrder) {
                        label = (label + " - " + item.jobOrder.title).trim();
                    }
                    return label;
                default:
                    return '';
            }
        };
        /**
         * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
         * be set up on the entity once the fields are defined.
         * @param args - fields can either be sent as a list of arguments or as an Array
         * @return text
         */
        RenderPipe.prototype.render = function (value, args) {
            var type = null;
            var text = value;
            // Handle when we don't have meta, but passing an entity
            if (value && value._subtype && !args) {
                return this.getEntityLabel(value, value._subtype);
            }
            // Stop logic for nulls
            if (value === undefined || value === null || !args) {
                return text;
            }
            if (args.formatter && typeof args.formatter === 'function') {
                return args.formatter(value, args);
            }
            // TODO move this to a service
            // Determine TYPE because its not just 1 value that determines this.
            if (args.type === 'TO_MANY') {
                type = 'ToMany';
            }
            else if (args.type === 'TO_ONE') {
                type = args.associatedEntity.entity;
            }
            else if (args.dataSpecialization === 'DATETIME') {
                type = 'DateTime';
            }
            else if (args.dataSpecialization === 'YEAR') {
                type = 'Year';
            }
            else if (args.dataSpecialization === 'TIME') {
                type = 'Time';
            }
            else if (args.dataSpecialization === 'DATE' && args.dataType === 'Date') {
                type = 'Date';
            }
            else if (args.dataType === 'Timestamp') {
                type = 'Timestamp';
            }
            else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
                type = 'Phone';
            }
            else if (args.name && args.name.substring(0, 5) === 'email') {
                type = 'Email';
            }
            else if ((args.name && args.name === 'address.countryID') || args.optionsType === 'Country') {
                type = 'Country';
            }
            else if (args.optionsType === 'SkillText') {
                type = 'SkillText';
            }
            else if (args.options || args.inputType === 'SELECT' || args.inputType === 'CHECKBOX') {
                type = 'Options';
            }
            else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
                type = this.capitalize(args.dataSpecialization.toLowerCase());
            }
            else {
                type = args.dataType || 'default';
            }
            // Transform data here
            try {
                switch (type) {
                    case 'Address':
                    case 'Address1':
                    case 'AddressWithoutCountry':
                    case 'SecondaryAddress':
                    case 'BillingAddress':
                        var country = findByCountryId(Number(value.countryName));
                        text = '';
                        if (value.address1 || value.address2) {
                            text += (value.address1 || '') + " " + (value.address2 || '') + "<br />\n";
                        }
                        text += (value.city || '') + " " + (value.state || '') + " " + (value.zip || '') + (value.city || value.state || value.zip ? '<br />\n' : '');
                        text += "" + (country ? country.name : value.countryName || '') + (country || value.countryName ? '<br />\n' : '');
                        text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                        break;
                    case 'DateTime':
                    case 'Timestamp':
                        text = this.labels.formatDateShort(value);
                        break;
                    case 'Date':
                        text = this.labels.formatDate(new Date(value));
                        break;
                    case 'Year':
                        text = new Date(value).getFullYear();
                        break;
                    case 'Time':
                        text = this.labels.formatTimeWithFormat(value, { hour: 'numeric', minute: 'numeric' });
                        break;
                    case 'Phone':
                    case 'Email':
                        text = value;
                        break;
                    case 'Money':
                        text = this.labels.formatCurrency(value);
                        break;
                    case 'Percentage':
                        text = this.labels.formatNumber(parseFloat(value).toString(), { style: 'percent', minimumFractionDigits: 2 });
                        break;
                    case 'Double':
                    case 'BigDecimal':
                        text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                        break;
                    case 'Integer':
                        text = value;
                        break;
                    case 'BusinessSector':
                    case 'Category':
                    case 'Certification':
                    case 'ClientCorporation':
                    case 'CorporationDepartment':
                    case 'DistributionList':
                    case 'Skill':
                    case 'Tearsheet':
                    case 'Specialty':
                        text = value.label || value.name || '';
                        break;
                    case 'SkillText':
                        text = Array.isArray(value) ? value.join(', ') : value;
                        break;
                    case 'Lead':
                    case 'Candidate':
                    case 'ClientContact':
                    case 'CorporateUser':
                    case 'Person':
                        text = value.label || (value.firstName || '') + " " + (value.lastName || '');
                        break;
                    case 'Opportunity':
                    case 'JobOrder':
                        text = value.label || value.title || '';
                        break;
                    case 'Placement':
                        if (value.candidate) {
                            text = (value.candidate.firstName || '') + " " + (value.candidate.lastName || '');
                        }
                        if (value.jobOrder) {
                            text = value.candidate ? text + " - " + (value.jobOrder.title || '') : "" + (value.jobOrder.title || '');
                        }
                        break;
                    case 'JobSubmission':
                        text =
                            value.label ||
                                (value.jobOrder ? value.jobOrder.title + " - " : '') + " " + (value.candidate ? value.candidate.firstName : '') + " " + (value.candidate ? value.candidate.lastName : '');
                        break;
                    case 'WorkersCompensationRate':
                        text = (value.compensation ? value.compensation.code + " - " : '') + " " + (value.compensation ? value.compensation.name : '');
                        break;
                    case 'Options':
                        text = this.options(value, args.options, args);
                        break;
                    case 'ToMany':
                        if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                            text = this.concat(value.data, 'firstName', 'lastName');
                            if (value.data.length < value.total) {
                                text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                            }
                        }
                        else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                            text = this.concat(value.data, 'name');
                            if (value.data.length < value.total) {
                                text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                            }
                        }
                        else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                            text = this.concat(value.data, 'externalListName');
                        }
                        else {
                            text = "" + (value.total || '');
                        }
                        break;
                    case 'Country':
                        var countryObj = findByCountryId(Number(value));
                        text = countryObj ? countryObj.name : value;
                        break;
                    case 'Html':
                        if (Array.isArray(value)) {
                            value = value.join(' ');
                        }
                        if (typeof text === 'string') {
                            text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                        }
                        break;
                    case 'CandidateComment':
                        text = value.comments ? this.labels.formatDateShort(value.dateLastModified) + " (" + value.name + ") - " + value.comments : '';
                        break;
                    default:
                        text = value.trim ? value.trim() : value;
                        break;
                }
                return text;
            }
            catch (e) {
                console.error("WARNING: There was a problem rendering the value of the field: " + args.label + ". Please check the configuration");
                console.error(e);
                return text;
            }
        };
        RenderPipe.prototype.updateValue = function (value, args) {
            this.value = this.render(value, args);
            this.changeDetector.markForCheck();
        };
        RenderPipe.prototype.transform = function (value, args) {
            if (value === undefined || value === null) {
                return '';
            }
            if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
                return this.value;
            }
            this.lastValue = value;
            this.lastArgs = args;
            this.updateValue(this.lastValue, this.lastArgs);
            return this.value;
        };
        /**
         * Simple function concat a list of fields from a list of objects
         * @param list - the list of values to use
         * @param fields - list of fields to extract
         */
        RenderPipe.prototype.concat = function (list) {
            var e_1, _a, e_2, _b;
            var fields = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                fields[_i - 1] = arguments[_i];
            }
            var data = [];
            try {
                for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                    var item = list_1_1.value;
                    var label = [];
                    try {
                        for (var fields_1 = (e_2 = void 0, __values(fields)), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                            var field = fields_1_1.value;
                            label.push("" + item[field]);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (fields_1_1 && !fields_1_1.done && (_b = fields_1.return)) _b.call(fields_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    data.push(label.join(' '));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return data.join(', ');
        };
        /**
         * Simple function to look up the **label** to display from options
         * @param value - the value to find
         * @param list - list of options (label/value pairs)
         */
        RenderPipe.prototype.options = function (value, list, args) {
            if (!Array.isArray(value)) {
                value = [value];
            }
            try {
                return value.map(function (item) {
                    var e_3, _a;
                    try {
                        for (var list_2 = __values(list), list_2_1 = list_2.next(); !list_2_1.done; list_2_1 = list_2.next()) {
                            var option = list_2_1.value;
                            if (option.value === item) {
                                return option.label;
                            }
                        }
                    }
                    catch (e_3_1) { e_3 = { error: e_3_1 }; }
                    finally {
                        try {
                            if (list_2_1 && !list_2_1.done && (_a = list_2.return)) _a.call(list_2);
                        }
                        finally { if (e_3) throw e_3.error; }
                    }
                    return item;
                });
            }
            catch (e) {
                if (!args.optionsType) {
                    throw Error(e);
                }
                return value;
            }
        };
        RenderPipe.prototype.getNumberDecimalPlaces = function (value) {
            var decimalPlaces;
            if (value) {
                var numberString = parseFloat(value).toString();
                var decimalPlace = (numberString || '').split('.')[1] || '';
                decimalPlaces = decimalPlace.length;
            }
            return decimalPlaces || 1;
        };
        /**
         * Capitalizes the first letter
         */
        RenderPipe.prototype.capitalize = function (value) {
            return value.charAt(0).toUpperCase() + value.slice(1);
        };
        return RenderPipe;
    }());
    RenderPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'render',
                    pure: false,
                },] },
        { type: i0.Injectable }
    ];
    RenderPipe.ctorParameters = function () { return [
        { type: i0.ChangeDetectorRef },
        { type: platformBrowser.DomSanitizer },
        { type: NovoLabelService }
    ]; };

    (function (NOVO_VALUE_TYPE) {
        NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["DEFAULT"] = 0] = "DEFAULT";
        NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["ENTITY_LIST"] = 1] = "ENTITY_LIST";
        NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["LINK"] = 2] = "LINK";
        NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["INTERNAL_LINK"] = 3] = "INTERNAL_LINK";
    })(exports.NOVO_VALUE_TYPE || (exports.NOVO_VALUE_TYPE = {}));
    (function (NOVO_VALUE_THEME) {
        NOVO_VALUE_THEME[NOVO_VALUE_THEME["DEFAULT"] = 0] = "DEFAULT";
        NOVO_VALUE_THEME[NOVO_VALUE_THEME["MOBILE"] = 1] = "MOBILE";
    })(exports.NOVO_VALUE_THEME || (exports.NOVO_VALUE_THEME = {}));
    var NovoValueElement = /** @class */ (function () {
        function NovoValueElement() {
            this.meta = { type: 'SCALAR', label: '' }; // TODO use interface
            this.theme = exports.NOVO_VALUE_THEME.DEFAULT;
            this.row = false;
            this.NOVO_VALUE_TYPE = exports.NOVO_VALUE_TYPE;
            this.NOVO_VALUE_THEME = exports.NOVO_VALUE_THEME;
            this.customClass = '';
        }
        Object.defineProperty(NovoValueElement.prototype, "label", {
            get: function () {
                return this.meta.label;
            },
            set: function (lbl) {
                this.meta.label = lbl;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoValueElement.prototype, "type", {
            get: function () {
                return this.meta.type;
            },
            set: function (typ) {
                this.meta.type = typ;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoValueElement.prototype, "icon", {
            get: function () {
                return this.meta.icon;
            },
            set: function (value) {
                this.meta.icon = value;
            },
            enumerable: false,
            configurable: true
        });
        NovoValueElement.prototype.ngOnInit = function () {
            if (Helpers.isEmpty(this.meta)) {
                this.meta = {
                    label: '',
                };
            }
        };
        Object.defineProperty(NovoValueElement.prototype, "isMobile", {
            get: function () {
                return this.theme === exports.NOVO_VALUE_THEME.MOBILE;
            },
            enumerable: false,
            configurable: true
        });
        NovoValueElement.prototype.iconClass = function (icon) {
            var iconClass = '';
            if (icon && icon.iconCls) {
                iconClass = "bhi-" + icon.iconCls + " actions";
                if (icon.onIconClick) {
                    iconClass = iconClass + " clickable";
                }
                return iconClass;
            }
            return iconClass;
        };
        Object.defineProperty(NovoValueElement.prototype, "isDefault", {
            get: function () {
                return true;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoValueElement.prototype, "showLabel", {
            get: function () {
                return (this._type === exports.NOVO_VALUE_TYPE.INTERNAL_LINK || this._type === exports.NOVO_VALUE_TYPE.LINK || this._type === exports.NOVO_VALUE_TYPE.ENTITY_LIST);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NovoValueElement.prototype, "showIcon", {
            get: function () {
                return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
            },
            enumerable: false,
            configurable: true
        });
        NovoValueElement.prototype.onValueClick = function (icon) {
            if (icon.onIconClick && typeof icon.onIconClick === 'function') {
                icon.onIconClick(this.data, this.meta);
            }
        };
        NovoValueElement.prototype.openLink = function () {
            if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
                this.meta.openLink(this.data, this.meta);
            }
        };
        NovoValueElement.prototype.ngOnChanges = function (changes) {
            if (this.meta && this.isLinkField(this.meta, this.data)) {
                this._type = exports.NOVO_VALUE_TYPE.LINK;
                // Make sure the value has a protocol, otherwise the URL will be relative
                var hasProtocol = new RegExp('^(http|https)://', 'i');
                if (!hasProtocol.test(this.data)) {
                    this.url = "http://" + this.data;
                }
                else {
                    this.url = this.data;
                }
            }
            else if (this.isEntityList(this.meta.type)) {
                this._type = exports.NOVO_VALUE_TYPE.ENTITY_LIST;
            }
            else if (this.isHTMLField(this.meta)) {
                this.customClass = this.meta.customClass ? this.meta.customClass : '';
                if (this.meta.stripHTML && this.data && this.data.replace) {
                    this.data = this.data.replace(/<(?!style|\/style).+?>/gi, '').trim();
                }
            }
            else if (this.meta && this.meta.associatedEntity) {
                switch (this.meta.associatedEntity.entity) {
                    case 'ClientCorporation':
                    case 'ClientContact':
                    case 'Candidate':
                    case 'Opportunity':
                    case 'JobOrder':
                    case 'Placement':
                    case 'Lead':
                        this._type = exports.NOVO_VALUE_TYPE.INTERNAL_LINK;
                        break;
                    default:
                        break;
                }
            }
        };
        NovoValueElement.prototype.isLinkField = function (field, data) {
            var linkFields = ['companyURL', 'clientCorporationCompanyURL'];
            var regex = new RegExp('^(https?://(?:www.|(?!www))[^s.]+.[^s]{2,}|www.[^s]+.[^s]{2,})$', 'gi');
            var isURL = Helpers.isString(data) && regex.exec(data.trim());
            return linkFields.indexOf(field.name) > -1 || !!isURL || field.type === exports.NOVO_VALUE_TYPE.LINK;
        };
        NovoValueElement.prototype.isEntityList = function (type) {
            return type === 'TO_MANY';
        };
        NovoValueElement.prototype.isHTMLField = function (meta) {
            return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
        };
        return NovoValueElement;
    }());
    NovoValueElement.decorators = [
        { type: i0.Component, args: [{
                    selector: 'novo-value',
                    template: "\n    <div class=\"value-outer\" [ngClass]=\"customClass\">\n      <novo-label>{{ meta.label }}</novo-label>\n      <span class=\"value\">\n        <i *ngIf=\"meta.showEntityIcon\" class=\"bhi-circle {{ meta.entityIconClass }}\"></i>\n        <novo-icon *ngIf=\"meta?.icon\">{{ meta.icon }}</novo-icon>\n        <ng-container [ngSwitch]=\"_type\">\n          <a *ngSwitchCase=\"NOVO_VALUE_TYPE.INTERNAL_LINK\" (click)=\"openLink()\" [innerHTML]=\"data | render: meta\"></a>\n          <a *ngSwitchCase=\"NOVO_VALUE_TYPE.LINK\" class=\"value\" [href]=\"url\" target=\"_blank\" [innerHTML]=\"data | render: meta\"></a>\n          <novo-entity-list *ngSwitchCase=\"NOVO_VALUE_TYPE.ENTITY_LIST\" [data]=\"data\" [meta]=\"meta\"></novo-entity-list>\n          <novo-text *ngSwitchDefault [innerHTML]=\"data | render: meta\"></novo-text>\n        </ng-container>\n      </span>\n    </div>\n    <div class=\"actions\" *ngIf=\"showIcon\">\n      <i *ngFor=\"let icon of meta.icons\" [class]=\"iconClass(icon)\" (click)=\"onValueClick(icon)\"></i>\n    </div>\n  "
                },] }
    ];
    NovoValueElement.propDecorators = {
        data: [{ type: i0.Input }],
        meta: [{ type: i0.Input }],
        theme: [{ type: i0.Input }],
        row: [{ type: i0.HostBinding, args: ['class.horizontal',] }, { type: i0.Input }],
        label: [{ type: i0.Input }],
        type: [{ type: i0.Input }],
        icon: [{ type: i0.Input }],
        isMobile: [{ type: i0.HostBinding, args: ['class.mobile',] }]
    };
    __decorate([
        BooleanInput(),
        __metadata("design:type", Boolean)
    ], NovoValueElement.prototype, "row", void 0);

    // NG2
    var NovoValueModule = /** @class */ (function () {
        function NovoValueModule() {
        }
        return NovoValueModule;
    }());
    NovoValueModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, NovoCommonModule, NovoIconModule],
                    declarations: [NovoValueElement, RenderPipe, EntityList],
                    exports: [NovoValueElement, RenderPipe, EntityList],
                },] }
    ];

    // NG2
    var NovoElementsModule = /** @class */ (function () {
        function NovoElementsModule() {
        }
        return NovoElementsModule;
    }());
    NovoElementsModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [forms.ReactiveFormsModule],
                    exports: [
                        NovoAsideModule,
                        NovoAvatarModule,
                        NovoPipesModule,
                        NovoButtonModule,
                        NovoLoadingModule,
                        NovoCardModule,
                        NovoAgendaModule,
                        NovoCalendarModule,
                        NovoCheckboxModule,
                        NovoFlexModule,
                        NovoLayoutModule,
                        NovoDividerModule,
                        NovoToastModule,
                        NovoTooltipModule,
                        NovoHeaderModule,
                        NovoTabModule,
                        NovoTilesModule,
                        NovoModalModule,
                        NovoQuickNoteModule,
                        NovoRadioModule,
                        NovoDropdownModule,
                        NovoSelectModule,
                        NovoListModule,
                        NovoSwitchModule,
                        NovoDragulaModule,
                        NovoSliderModule,
                        NovoPickerModule,
                        NovoChipsModule,
                        NovoDatePickerModule,
                        NovoTimePickerModule,
                        NovoDateTimePickerModule,
                        NovoNovoCKEditorModule,
                        NovoTipWellModule,
                        NovoSimpleTableModule,
                        NovoTableModule,
                        NovoTableExtrasModule,
                        NovoFormModule,
                        NovoFormExtrasModule,
                        NovoCategoryDropdownModule,
                        NovoMultiPickerModule,
                        NovoPopOverModule,
                        NovoDataTableModule,
                        NovoSearchBoxModule,
                        NovoProgressModule,
                        NovoOverlayModule,
                        GooglePlacesModule,
                        NovoValueModule,
                        NovoAceEditorModule,
                        NovoIconModule,
                        NovoExpansionModule,
                        UnlessModule,
                        NovoCommonModule,
                        NovoOptionModule,
                        NovoStepperModule,
                        NovoToolbarModule,
                        scrolling.ScrollingModule,
                        NovoTabbedGroupPickerModule,
                        NovoNonIdealStateModule,
                        NovoBreadcrumbModule,
                        NovoFieldModule,
                        NovoColorPickerModule,
                        NovoMenuModule,
                        NovoSelectSearchModule,
                    ],
                    providers: [
                        { provide: ComponentUtils, useClass: ComponentUtils },
                        { provide: DateFormatService, useClass: DateFormatService },
                        { provide: NovoLabelService, useClass: NovoLabelService },
                        { provide: NovoDragulaService, useClass: NovoDragulaService },
                        { provide: GooglePlacesService, useClass: GooglePlacesService },
                        { provide: GlobalRef, useClass: BrowserGlobalRef },
                        { provide: LocalStorageService, useClass: LocalStorageService },
                        { provide: OptionsService, useClass: OptionsService },
                        { provide: FormUtils, useClass: FormUtils },
                    ],
                },] }
    ];

    var NOVO_ELEMENTS_PROVIDERS = [
        { provide: NovoDragulaService, useClass: NovoDragulaService },
        // { provide: NovoAsideRef, useClass: NovoAsideRef },
        { provide: NovoAsideService, useClass: NovoAsideService },
        // { provide: NovoModalRef, useClass: NovoModalRef },
        { provide: NovoModalService, useClass: NovoModalService },
        { provide: GooglePlacesService, useClass: GooglePlacesService },
        { provide: NovoToastService, useClass: NovoToastService },
        { provide: ComponentUtils, useClass: ComponentUtils },
        { provide: GlobalRef, useClass: BrowserGlobalRef },
        { provide: LocalStorageService, useClass: LocalStorageService },
        { provide: OptionsService, useClass: OptionsService },
        FieldInteractionApi,
        DateFormatService,
        NovoTemplateService,
    ];
    var NovoElementProviders = /** @class */ (function () {
        function NovoElementProviders() {
        }
        NovoElementProviders.forRoot = function (options) {
            return {
                ngModule: NovoElementProviders,
                providers: __spread(NOVO_ELEMENTS_PROVIDERS, [
                    {
                        provide: MENU_OPTIONS,
                        useValue: options && options.menu,
                    },
                ]),
            };
        };
        NovoElementProviders.forChild = function () {
            return {
                ngModule: NovoElementProviders,
            };
        };
        return NovoElementProviders;
    }());
    NovoElementProviders.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AccentColorDirective = AccentColorDirective;
    exports.AceEditorControl = AceEditorControl;
    exports.ActivityTableDataSource = ActivityTableDataSource;
    exports.ActivityTableRenderers = ActivityTableRenderers;
    exports.AddressControl = AddressControl;
    exports.AppBridge = AppBridge;
    exports.AppBridgeService = AppBridgeService;
    exports.ArrayCollection = ArrayCollection;
    exports.AsideComponent = AsideComponent;
    exports.BackgroundColorDirective = BackgroundColorDirective;
    exports.BaseControl = BaseControl;
    exports.BasePickerResults = BasePickerResults;
    exports.BaseRenderer = BaseRenderer;
    exports.BooleanInput = BooleanInput;
    exports.BorderDirective = BorderDirective;
    exports.BreadcrumbElement = BreadcrumbElement;
    exports.BreadcrumbItemElement = BreadcrumbItemElement;
    exports.BreadcrumbService = BreadcrumbService;
    exports.BrowserGlobalRef = BrowserGlobalRef;
    exports.COUNTRIES = COUNTRIES;
    exports.Can = Can;
    exports.CardActionsElement = CardActionsElement;
    exports.CardContentElement = CardContentElement;
    exports.CardElement = CardElement;
    exports.CardFooterElement = CardFooterElement;
    exports.CardHeaderElement = CardHeaderElement;
    exports.CheckListControl = CheckListControl;
    exports.CheckboxControl = CheckboxControl;
    exports.ChecklistPickerResults = ChecklistPickerResults;
    exports.CollectionEvent = CollectionEvent;
    exports.ComponentUtils = ComponentUtils;
    exports.ControlConfirmModal = ControlConfirmModal;
    exports.ControlFactory = ControlFactory;
    exports.ControlPromptModal = ControlPromptModal;
    exports.CustomControl = CustomControl;
    exports.DATEFORMAT_VALUE_ACCESSOR = DATEFORMAT_VALUE_ACCESSOR;
    exports.DataTableBigDecimalRendererPipe = DataTableBigDecimalRendererPipe;
    exports.DataTableInterpolatePipe = DataTableInterpolatePipe;
    exports.DataTableSource = DataTableSource;
    exports.DataTableState = DataTableState;
    exports.DateCell = DateCell;
    exports.DateControl = DateControl;
    exports.DateFormatService = DateFormatService;
    exports.DateTableCurrencyRendererPipe = DateTableCurrencyRendererPipe;
    exports.DateTableDateRendererPipe = DateTableDateRendererPipe;
    exports.DateTableDateTimeRendererPipe = DateTableDateTimeRendererPipe;
    exports.DateTableNumberRendererPipe = DateTableNumberRendererPipe;
    exports.DateTableTimeRendererPipe = DateTableTimeRendererPipe;
    exports.DateTimeControl = DateTimeControl;
    exports.DayOfMonthPipe = DayOfMonthPipe;
    exports.DecodeURIPipe = DecodeURIPipe;
    exports.DefaultDateSelectionStrategy = DefaultDateSelectionStrategy;
    exports.DefaultPipe = DefaultPipe;
    exports.Deferred = Deferred;
    exports.DevAppBridge = DevAppBridge;
    exports.DevAppBridgeService = DevAppBridgeService;
    exports.DistributionListPickerResults = DistributionListPickerResults;
    exports.EXPANSION_PANEL_ANIMATION_TIMING = EXPANSION_PANEL_ANIMATION_TIMING;
    exports.EditorControl = EditorControl;
    exports.EndOfWeekDisplayPipe = EndOfWeekDisplayPipe;
    exports.EntityList = EntityList;
    exports.EntityPickerResult = EntityPickerResult;
    exports.EntityPickerResults = EntityPickerResults;
    exports.ErrorStateMatcher = ErrorStateMatcher;
    exports.FieldInteractionApi = FieldInteractionApi;
    exports.FileControl = FileControl;
    exports.FillColorDirective = FillColorDirective;
    exports.FlexDirective = FlexDirective;
    exports.FormUtils = FormUtils;
    exports.FormValidators = FormValidators;
    exports.GapDirective = GapDirective;
    exports.GlobalRef = GlobalRef;
    exports.GooglePlacesModule = GooglePlacesModule;
    exports.GooglePlacesService = GooglePlacesService;
    exports.GroupByPipe = GroupByPipe;
    exports.GroupedControl = GroupedControl;
    exports.GroupedMultiPickerResults = GroupedMultiPickerResults;
    exports.Helpers = Helpers;
    exports.HoursPipe = HoursPipe;
    exports.IsoDatePipe = IsoDatePipe;
    exports.IsoDateRangePipe = IsoDateRangePipe;
    exports.IsoTimePipe = IsoTimePipe;
    exports.IsoTimeRangePipe = IsoTimeRangePipe;
    exports.KeyCodes = KeyCodes;
    exports.LocalStorageService = LocalStorageService;
    exports.MarginDirective = MarginDirective;
    exports.MenuComponent = MenuComponent;
    exports.MenuContentComponent = MenuContentComponent;
    exports.MenuDirective = MenuDirective;
    exports.MenuItemDirective = MenuItemDirective;
    exports.MixedMultiPickerResults = MixedMultiPickerResults;
    exports.MonthDayPipe = MonthDayPipe;
    exports.MonthPipe = MonthPipe;
    exports.MultiDateSelectionStrategy = MultiDateSelectionStrategy;
    exports.NOVO_CHIPS_DEFAULT_OPTIONS = NOVO_CHIPS_DEFAULT_OPTIONS;
    exports.NOVO_DATE_SELECTION_STRATEGY = NOVO_DATE_SELECTION_STRATEGY;
    exports.NOVO_DATE_SELECTION_STRATEGY_PROVIDER = NOVO_DATE_SELECTION_STRATEGY_PROVIDER;
    exports.NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY = NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY;
    exports.NOVO_ELEMENTS_LABELS_PROVIDERS = NOVO_ELEMENTS_LABELS_PROVIDERS;
    exports.NOVO_FORM_FIELD = NOVO_FORM_FIELD;
    exports.NOVO_INPUT_FORMAT = NOVO_INPUT_FORMAT;
    exports.NOVO_INPUT_VALUE_ACCESSOR = NOVO_INPUT_VALUE_ACCESSOR;
    exports.NOVO_LAYOUT_CONTAINER = NOVO_LAYOUT_CONTAINER;
    exports.NOVO_LAYOUT_DEFAULT_AUTOSIZE = NOVO_LAYOUT_DEFAULT_AUTOSIZE;
    exports.NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY = NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY;
    exports.NOVO_OPTGROUP = NOVO_OPTGROUP;
    exports.NOVO_OPTION_PARENT_COMPONENT = NOVO_OPTION_PARENT_COMPONENT;
    exports.NOVO_PROGRESS_CONTAINER = NOVO_PROGRESS_CONTAINER;
    exports.NOVO_RADIO_GROUP = NOVO_RADIO_GROUP;
    exports.NativeSelectControl = NativeSelectControl;
    exports.NodeGlobalRef = NodeGlobalRef;
    exports.NonIdealStateElement = NonIdealStateElement;
    exports.NovoAccordion = NovoAccordion;
    exports.NovoAceEditor = NovoAceEditor;
    exports.NovoAceEditorModule = NovoAceEditorModule;
    exports.NovoActivityTable = NovoActivityTable;
    exports.NovoActivityTableActions = NovoActivityTableActions;
    exports.NovoActivityTableCustomFilter = NovoActivityTableCustomFilter;
    exports.NovoActivityTableCustomHeader = NovoActivityTableCustomHeader;
    exports.NovoActivityTableEmptyMessage = NovoActivityTableEmptyMessage;
    exports.NovoActivityTableNoResultsMessage = NovoActivityTableNoResultsMessage;
    exports.NovoActivityTableState = NovoActivityTableState;
    exports.NovoAddressElement = NovoAddressElement;
    exports.NovoAgendaAllDayEventElement = NovoAgendaAllDayEventElement;
    exports.NovoAgendaDateChangeElement = NovoAgendaDateChangeElement;
    exports.NovoAgendaDayEventElement = NovoAgendaDayEventElement;
    exports.NovoAgendaDayViewElement = NovoAgendaDayViewElement;
    exports.NovoAgendaHourSegmentElement = NovoAgendaHourSegmentElement;
    exports.NovoAgendaModule = NovoAgendaModule;
    exports.NovoAgendaMonthDayElement = NovoAgendaMonthDayElement;
    exports.NovoAgendaMonthHeaderElement = NovoAgendaMonthHeaderElement;
    exports.NovoAgendaMonthViewElement = NovoAgendaMonthViewElement;
    exports.NovoAgendaWeekEventElement = NovoAgendaWeekEventElement;
    exports.NovoAgendaWeekHeaderElement = NovoAgendaWeekHeaderElement;
    exports.NovoAgendaWeekViewElement = NovoAgendaWeekViewElement;
    exports.NovoAsideModule = NovoAsideModule;
    exports.NovoAsideRef = NovoAsideRef;
    exports.NovoAsideService = NovoAsideService;
    exports.NovoAutoSize = NovoAutoSize;
    exports.NovoAutocompleteElement = NovoAutocompleteElement;
    exports.NovoAvatarElement = NovoAvatarElement;
    exports.NovoAvatarModule = NovoAvatarModule;
    exports.NovoAvatarStackElement = NovoAvatarStackElement;
    exports.NovoBaseTextElement = NovoBaseTextElement;
    exports.NovoBoxElement = NovoBoxElement;
    exports.NovoBreadcrumbModule = NovoBreadcrumbModule;
    exports.NovoButtonElement = NovoButtonElement;
    exports.NovoButtonModule = NovoButtonModule;
    exports.NovoCKEditorElement = NovoCKEditorElement;
    exports.NovoCalendarElement = NovoCalendarElement;
    exports.NovoCalendarModule = NovoCalendarModule;
    exports.NovoCaption = NovoCaption;
    exports.NovoCardModule = NovoCardModule;
    exports.NovoCategoryDropdownElement = NovoCategoryDropdownElement;
    exports.NovoCategoryDropdownModule = NovoCategoryDropdownModule;
    exports.NovoCheckListElement = NovoCheckListElement;
    exports.NovoCheckboxChange = NovoCheckboxChange;
    exports.NovoCheckboxElement = NovoCheckboxElement;
    exports.NovoCheckboxModule = NovoCheckboxModule;
    exports.NovoChipAvatar = NovoChipAvatar;
    exports.NovoChipElement = NovoChipElement;
    exports.NovoChipInput = NovoChipInput;
    exports.NovoChipList = NovoChipList;
    exports.NovoChipListChange = NovoChipListChange;
    exports.NovoChipRemove = NovoChipRemove;
    exports.NovoChipSelectionChange = NovoChipSelectionChange;
    exports.NovoChipsElement = NovoChipsElement;
    exports.NovoChipsModule = NovoChipsModule;
    exports.NovoColorInputElement = NovoColorInputElement;
    exports.NovoColorPickerComponent = NovoColorPickerComponent;
    exports.NovoColorPickerModule = NovoColorPickerModule;
    exports.NovoColorSwatchComponent = NovoColorSwatchComponent;
    exports.NovoCommonModule = NovoCommonModule;
    exports.NovoControlElement = NovoControlElement;
    exports.NovoControlGroup = NovoControlGroup;
    exports.NovoControlTemplates = NovoControlTemplates;
    exports.NovoDataTable = NovoDataTable;
    exports.NovoDataTableCell = NovoDataTableCell;
    exports.NovoDataTableCellHeader = NovoDataTableCellHeader;
    exports.NovoDataTableCheckboxCell = NovoDataTableCheckboxCell;
    exports.NovoDataTableCheckboxHeaderCell = NovoDataTableCheckboxHeaderCell;
    exports.NovoDataTableClearButton = NovoDataTableClearButton;
    exports.NovoDataTableExpandCell = NovoDataTableExpandCell;
    exports.NovoDataTableExpandDirective = NovoDataTableExpandDirective;
    exports.NovoDataTableExpandHeaderCell = NovoDataTableExpandHeaderCell;
    exports.NovoDataTableFilterUtils = NovoDataTableFilterUtils;
    exports.NovoDataTableHeaderCell = NovoDataTableHeaderCell;
    exports.NovoDataTableHeaderRow = NovoDataTableHeaderRow;
    exports.NovoDataTableModule = NovoDataTableModule;
    exports.NovoDataTablePagination = NovoDataTablePagination;
    exports.NovoDataTableRow = NovoDataTableRow;
    exports.NovoDataTableSortButton = NovoDataTableSortButton;
    exports.NovoDataTableSortFilter = NovoDataTableSortFilter;
    exports.NovoDateFormatDirective = NovoDateFormatDirective;
    exports.NovoDatePickerElement = NovoDatePickerElement;
    exports.NovoDatePickerInputElement = NovoDatePickerInputElement;
    exports.NovoDatePickerModule = NovoDatePickerModule;
    exports.NovoDateRangeInputElement = NovoDateRangeInputElement;
    exports.NovoDateTimePickerElement = NovoDateTimePickerElement;
    exports.NovoDateTimePickerInputElement = NovoDateTimePickerInputElement;
    exports.NovoDateTimePickerModule = NovoDateTimePickerModule;
    exports.NovoDividerComponent = NovoDividerComponent;
    exports.NovoDividerModule = NovoDividerModule;
    exports.NovoDragulaElement = NovoDragulaElement;
    exports.NovoDragulaModule = NovoDragulaModule;
    exports.NovoDragulaService = NovoDragulaService;
    exports.NovoDropDownItemHeaderElement = NovoDropDownItemHeaderElement;
    exports.NovoDropDownTrigger = NovoDropDownTrigger;
    exports.NovoDropdownCell = NovoDropdownCell;
    exports.NovoDropdownElement = NovoDropdownElement;
    exports.NovoDropdownListElement = NovoDropdownListElement;
    exports.NovoDropdownModule = NovoDropdownModule;
    exports.NovoDynamicFormElement = NovoDynamicFormElement;
    exports.NovoElementProviders = NovoElementProviders;
    exports.NovoElementsModule = NovoElementsModule;
    exports.NovoErrorElement = NovoErrorElement;
    exports.NovoEventTypeLegendElement = NovoEventTypeLegendElement;
    exports.NovoExpansionModule = NovoExpansionModule;
    exports.NovoExpansionPanel = NovoExpansionPanel;
    exports.NovoExpansionPanelActionRow = NovoExpansionPanelActionRow;
    exports.NovoExpansionPanelContent = NovoExpansionPanelContent;
    exports.NovoExpansionPanelDescription = NovoExpansionPanelDescription;
    exports.NovoExpansionPanelHeader = NovoExpansionPanelHeader;
    exports.NovoExpansionPanelTitle = NovoExpansionPanelTitle;
    exports.NovoFieldControl = NovoFieldControl;
    exports.NovoFieldElement = NovoFieldElement;
    exports.NovoFieldModule = NovoFieldModule;
    exports.NovoFieldPrefixDirective = NovoFieldPrefixDirective;
    exports.NovoFieldSuffixDirective = NovoFieldSuffixDirective;
    exports.NovoFieldsElement = NovoFieldsElement;
    exports.NovoFieldsetElement = NovoFieldsetElement;
    exports.NovoFieldsetHeaderElement = NovoFieldsetHeaderElement;
    exports.NovoFile = NovoFile;
    exports.NovoFileInputElement = NovoFileInputElement;
    exports.NovoFlexElement = NovoFlexElement;
    exports.NovoFlexModule = NovoFlexModule;
    exports.NovoFormControl = NovoFormControl;
    exports.NovoFormElement = NovoFormElement;
    exports.NovoFormExtrasModule = NovoFormExtrasModule;
    exports.NovoFormGroup = NovoFormGroup;
    exports.NovoFormModule = NovoFormModule;
    exports.NovoGridElement = NovoGridElement;
    exports.NovoHeaderComponent = NovoHeaderComponent;
    exports.NovoHeaderModule = NovoHeaderModule;
    exports.NovoHeaderSpacer = NovoHeaderSpacer;
    exports.NovoHintElement = NovoHintElement;
    exports.NovoHorizontalStepper = NovoHorizontalStepper;
    exports.NovoIconComponent = NovoIconComponent;
    exports.NovoIconModule = NovoIconModule;
    exports.NovoInput = NovoInput;
    exports.NovoIsLoadingDirective = NovoIsLoadingDirective;
    exports.NovoItemAvatarElement = NovoItemAvatarElement;
    exports.NovoItemContentElement = NovoItemContentElement;
    exports.NovoItemDateElement = NovoItemDateElement;
    exports.NovoItemElement = NovoItemElement;
    exports.NovoItemEndElement = NovoItemEndElement;
    exports.NovoItemHeaderElement = NovoItemHeaderElement;
    exports.NovoItemTitleElement = NovoItemTitleElement;
    exports.NovoLabel = NovoLabel;
    exports.NovoLabelService = NovoLabelService;
    exports.NovoLayoutContainer = NovoLayoutContainer;
    exports.NovoLayoutContent = NovoLayoutContent;
    exports.NovoLayoutModule = NovoLayoutModule;
    exports.NovoLink = NovoLink;
    exports.NovoListElement = NovoListElement;
    exports.NovoListItemElement = NovoListItemElement;
    exports.NovoListModule = NovoListModule;
    exports.NovoLoadedDirective = NovoLoadedDirective;
    exports.NovoLoadingElement = NovoLoadingElement;
    exports.NovoLoadingModule = NovoLoadingModule;
    exports.NovoMenuModule = NovoMenuModule;
    exports.NovoMenuService = NovoMenuService;
    exports.NovoModalContainerComponent = NovoModalContainerComponent;
    exports.NovoModalElement = NovoModalElement;
    exports.NovoModalModule = NovoModalModule;
    exports.NovoModalNotificationElement = NovoModalNotificationElement;
    exports.NovoModalParams = NovoModalParams;
    exports.NovoModalRef = NovoModalRef;
    exports.NovoModalService = NovoModalService;
    exports.NovoMonthSelectElement = NovoMonthSelectElement;
    exports.NovoMonthViewElement = NovoMonthViewElement;
    exports.NovoMultiDateInputElement = NovoMultiDateInputElement;
    exports.NovoMultiPickerElement = NovoMultiPickerElement;
    exports.NovoMultiPickerModule = NovoMultiPickerModule;
    exports.NovoNavContentElement = NovoNavContentElement;
    exports.NovoNavElement = NovoNavElement;
    exports.NovoNavHeaderElement = NovoNavHeaderElement;
    exports.NovoNavOutletElement = NovoNavOutletElement;
    exports.NovoNonIdealStateModule = NovoNonIdealStateModule;
    exports.NovoNovoCKEditorModule = NovoNovoCKEditorModule;
    exports.NovoOptgroup = NovoOptgroup;
    exports.NovoOptgroupBase = NovoOptgroupBase;
    exports.NovoOptgroupMixinBase = NovoOptgroupMixinBase;
    exports.NovoOption = NovoOption;
    exports.NovoOptionBase = NovoOptionBase;
    exports.NovoOptionModule = NovoOptionModule;
    exports.NovoOptionSelectedEvent = NovoOptionSelectedEvent;
    exports.NovoOptionSelectionChange = NovoOptionSelectionChange;
    exports.NovoOverlayModule = NovoOverlayModule;
    exports.NovoOverlayTemplateComponent = NovoOverlayTemplateComponent;
    exports.NovoPickerDirective = NovoPickerDirective;
    exports.NovoPickerElement = NovoPickerElement;
    exports.NovoPickerModule = NovoPickerModule;
    exports.NovoPickerToggleElement = NovoPickerToggleElement;
    exports.NovoPipesModule = NovoPipesModule;
    exports.NovoPopOverModule = NovoPopOverModule;
    exports.NovoProgressBarElement = NovoProgressBarElement;
    exports.NovoProgressElement = NovoProgressElement;
    exports.NovoProgressModule = NovoProgressModule;
    exports.NovoPseudoCheckbox = NovoPseudoCheckbox;
    exports.NovoPseudoCheckboxModule = NovoPseudoCheckboxModule;
    exports.NovoQuickNoteModule = NovoQuickNoteModule;
    exports.NovoRadioElement = NovoRadioElement;
    exports.NovoRadioGroup = NovoRadioGroup;
    exports.NovoRadioModule = NovoRadioModule;
    exports.NovoRailComponent = NovoRailComponent;
    exports.NovoRowChipElement = NovoRowChipElement;
    exports.NovoRowChipsElement = NovoRowChipsElement;
    exports.NovoSearchBoxElement = NovoSearchBoxElement;
    exports.NovoSearchBoxModule = NovoSearchBoxModule;
    exports.NovoSelectChange = NovoSelectChange;
    exports.NovoSelectElement = NovoSelectElement;
    exports.NovoSelectModule = NovoSelectModule;
    exports.NovoSelectSearchClearDirective = NovoSelectSearchClearDirective;
    exports.NovoSelectSearchComponent = NovoSelectSearchComponent;
    exports.NovoSelectSearchModule = NovoSelectSearchModule;
    exports.NovoSelection = NovoSelection;
    exports.NovoSidenavComponent = NovoSidenavComponent;
    exports.NovoSimpleActionCell = NovoSimpleActionCell;
    exports.NovoSimpleCell = NovoSimpleCell;
    exports.NovoSimpleCellDef = NovoSimpleCellDef;
    exports.NovoSimpleCellHeader = NovoSimpleCellHeader;
    exports.NovoSimpleCheckboxCell = NovoSimpleCheckboxCell;
    exports.NovoSimpleCheckboxHeaderCell = NovoSimpleCheckboxHeaderCell;
    exports.NovoSimpleColumnDef = NovoSimpleColumnDef;
    exports.NovoSimpleEmptyHeaderCell = NovoSimpleEmptyHeaderCell;
    exports.NovoSimpleFilterFocus = NovoSimpleFilterFocus;
    exports.NovoSimpleHeaderCell = NovoSimpleHeaderCell;
    exports.NovoSimpleHeaderCellDef = NovoSimpleHeaderCellDef;
    exports.NovoSimpleHeaderRow = NovoSimpleHeaderRow;
    exports.NovoSimpleHeaderRowDef = NovoSimpleHeaderRowDef;
    exports.NovoSimpleRow = NovoSimpleRow;
    exports.NovoSimpleRowDef = NovoSimpleRowDef;
    exports.NovoSimpleTableModule = NovoSimpleTableModule;
    exports.NovoSimpleTablePagination = NovoSimpleTablePagination;
    exports.NovoSkeletonDirective = NovoSkeletonDirective;
    exports.NovoSliderElement = NovoSliderElement;
    exports.NovoSliderModule = NovoSliderModule;
    exports.NovoSortFilter = NovoSortFilter;
    exports.NovoSpinnerElement = NovoSpinnerElement;
    exports.NovoStackElement = NovoStackElement;
    exports.NovoStep = NovoStep;
    exports.NovoStepHeader = NovoStepHeader;
    exports.NovoStepLabel = NovoStepLabel;
    exports.NovoStepStatus = NovoStepStatus;
    exports.NovoStepper = NovoStepper;
    exports.NovoStepperModule = NovoStepperModule;
    exports.NovoStepperNext = NovoStepperNext;
    exports.NovoStepperPrevious = NovoStepperPrevious;
    exports.NovoSwitchElement = NovoSwitchElement;
    exports.NovoSwitchModule = NovoSwitchModule;
    exports.NovoTabButtonElement = NovoTabButtonElement;
    exports.NovoTabElement = NovoTabElement;
    exports.NovoTabLinkElement = NovoTabLinkElement;
    exports.NovoTabModule = NovoTabModule;
    exports.NovoTabbedGroupPickerElement = NovoTabbedGroupPickerElement;
    exports.NovoTabbedGroupPickerModule = NovoTabbedGroupPickerModule;
    exports.NovoTable = NovoTable;
    exports.NovoTableActionsElement = NovoTableActionsElement;
    exports.NovoTableElement = NovoTableElement;
    exports.NovoTableExtrasModule = NovoTableExtrasModule;
    exports.NovoTableFooterElement = NovoTableFooterElement;
    exports.NovoTableHeaderElement = NovoTableHeaderElement;
    exports.NovoTableKeepFilterFocus = NovoTableKeepFilterFocus;
    exports.NovoTableModule = NovoTableModule;
    exports.NovoTemplate = NovoTemplate;
    exports.NovoTemplateService = NovoTemplateService;
    exports.NovoText = NovoText;
    exports.NovoTheme = NovoTheme;
    exports.NovoThemeOptions = NovoThemeOptions;
    exports.NovoTilesElement = NovoTilesElement;
    exports.NovoTilesModule = NovoTilesModule;
    exports.NovoTimeFormatDirective = NovoTimeFormatDirective;
    exports.NovoTimePickerElement = NovoTimePickerElement;
    exports.NovoTimePickerInputElement = NovoTimePickerInputElement;
    exports.NovoTimePickerModule = NovoTimePickerModule;
    exports.NovoTipWellElement = NovoTipWellElement;
    exports.NovoTipWellModule = NovoTipWellModule;
    exports.NovoTitle = NovoTitle;
    exports.NovoToastElement = NovoToastElement;
    exports.NovoToastModule = NovoToastModule;
    exports.NovoToastService = NovoToastService;
    exports.NovoToolbar = NovoToolbar;
    exports.NovoToolbarModule = NovoToolbarModule;
    exports.NovoToolbarRow = NovoToolbarRow;
    exports.NovoTooltip = NovoTooltip;
    exports.NovoTooltipModule = NovoTooltipModule;
    exports.NovoUtilActionComponent = NovoUtilActionComponent;
    exports.NovoUtilsComponent = NovoUtilsComponent;
    exports.NovoValueElement = NovoValueElement;
    exports.NovoValueModule = NovoValueModule;
    exports.NovoVerticalStepper = NovoVerticalStepper;
    exports.NovoYearSelectElement = NovoYearSelectElement;
    exports.OptionsService = OptionsService;
    exports.OutsideClick = OutsideClick;
    exports.PaddingDirective = PaddingDirective;
    exports.PagedArrayCollection = PagedArrayCollection;
    exports.Pagination = Pagination;
    exports.PercentageCell = PercentageCell;
    exports.PickerControl = PickerControl;
    exports.PickerResults = PickerResults;
    exports.PlacesListComponent = PlacesListComponent;
    exports.PluralPipe = PluralPipe;
    exports.PopOverContent = PopOverContent;
    exports.PopOverDirective = PopOverDirective;
    exports.QuickNoteControl = QuickNoteControl;
    exports.QuickNoteElement = QuickNoteElement;
    exports.QuickNoteResults = QuickNoteResults;
    exports.REMOVABLE_REF = REMOVABLE_REF;
    exports.RadioControl = RadioControl;
    exports.RangeSelectionStrategy = RangeSelectionStrategy;
    exports.ReadOnlyControl = ReadOnlyControl;
    exports.RemoteActivityTableService = RemoteActivityTableService;
    exports.RemoteDataTableService = RemoteDataTableService;
    exports.RenderPipe = RenderPipe;
    exports.RowDetails = RowDetails;
    exports.Security = Security;
    exports.SelectControl = SelectControl;
    exports.ShowOnDirtyErrorStateMatcher = ShowOnDirtyErrorStateMatcher;
    exports.SkillsSpecialtyPickerResults = SkillsSpecialtyPickerResults;
    exports.StaticActivityTableService = StaticActivityTableService;
    exports.StaticDataTableService = StaticDataTableService;
    exports.SwitchControl = SwitchControl;
    exports.TIMEFORMAT_VALUE_ACCESSOR = TIMEFORMAT_VALUE_ACCESSOR;
    exports.TableCell = TableCell;
    exports.TableFilter = TableFilter;
    exports.TablePickerControl = TablePickerControl;
    exports.TextAreaControl = TextAreaControl;
    exports.TextBoxControl = TextBoxControl;
    exports.TextColorDirective = TextColorDirective;
    exports.ThOrderable = ThOrderable;
    exports.ThSortable = ThSortable;
    exports.ThemeColorDirective = ThemeColorDirective;
    exports.TilesControl = TilesControl;
    exports.TimeControl = TimeControl;
    exports.TimezoneControl = TimezoneControl;
    exports.TooltipDirective = TooltipDirective;
    exports.Unless = Unless;
    exports.UnlessModule = UnlessModule;
    exports.WeekSelectionStrategy = WeekSelectionStrategy;
    exports.WeekdayPipe = WeekdayPipe;
    exports.WorkersCompCodesPickerResults = WorkersCompCodesPickerResults;
    exports.YearPipe = YearPipe;
    exports._NovoCdkRowDef = _NovoCdkRowDef;
    exports._NovoCell = _NovoCell;
    exports._NovoCellDef = _NovoCellDef;
    exports._NovoColumnDef = _NovoColumnDef;
    exports._NovoHeaderCell = _NovoHeaderCell;
    exports._NovoHeaderCellDef = _NovoHeaderCellDef;
    exports._NovoHeaderRow = _NovoHeaderRow;
    exports._NovoHeaderRowDef = _NovoHeaderRowDef;
    exports._NovoRow = _NovoRow;
    exports._NovoTable = _NovoTable;
    exports._countGroupLabelsBeforeOption = _countGroupLabelsBeforeOption;
    exports._getOptionScrollPosition = _getOptionScrollPosition;
    exports.binarySearch = binarySearch;
    exports.can = can;
    exports.findByCountryCode = findByCountryCode;
    exports.findByCountryId = findByCountryId;
    exports.findByCountryName = findByCountryName;
    exports.getCountries = getCountries;
    exports.getDayView = getDayView;
    exports.getDayViewHourGrid = getDayViewHourGrid;
    exports.getMonthView = getMonthView;
    exports.getSpacingToken = getSpacingToken;
    exports.getStateObjects = getStateObjects;
    exports.getStates = getStates;
    exports.getWeekView = getWeekView;
    exports.getWeekViewEventOffset = getWeekViewEventOffset;
    exports.getWeekViewHeader = getWeekViewHeader;
    exports.interpolateCell = interpolateCell;
    exports.isAlphaNumeric = isAlphaNumeric;
    exports.mixinColor = mixinColor;
    exports.mixinDisabled = mixinDisabled;
    exports.mixinErrorState = mixinErrorState;
    exports.mixinOverlay = mixinOverlay;
    exports.mixinRequired = mixinRequired;
    exports.mixinSize = mixinSize;
    exports.mixinTabIndex = mixinTabIndex;
    exports.notify = notify;
    exports.novoExpansionAnimations = novoExpansionAnimations;
    exports.novoStepperAnimations = novoStepperAnimations;
    exports.slideInOut = slideInOut;
    exports.throwNovoDuplicatedSidenavError = throwNovoDuplicatedSidenavError;
    exports.zoomInOut = zoomInOut;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=novo-elements.umd.js.map
