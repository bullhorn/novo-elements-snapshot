import { EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { IDataTableChangeEvent, IDataTableFilter, IDataTableSelectionOption, IDataTableSort } from '../interfaces';
export declare class DataTableState<T> {
    selectionSource: Subject<unknown>;
    paginationSource: Subject<unknown>;
    sortFilterSource: Subject<unknown>;
    resetSource: Subject<unknown>;
    expandSource: Subject<unknown>;
    dataLoaded: Subject<unknown>;
    sort: IDataTableSort;
    filter: IDataTableFilter | IDataTableFilter[];
    page: number;
    pageSize: number;
    globalSearch: string;
    selectedRows: Map<string, T>;
    expandedRows: Set<string>;
    outsideFilter: any;
    isForceRefresh: boolean;
    selectionOptions: IDataTableSelectionOption[];
    updates: EventEmitter<IDataTableChangeEvent>;
    retainSelected: boolean;
    get userFiltered(): boolean;
    get userFilteredInternal(): boolean;
    get selected(): T[];
    reset(fireUpdate?: boolean, persistUserFilters?: any): void;
    clearSort(fireUpdate?: boolean): void;
    clearFilter(fireUpdate?: boolean): void;
    clearSelected(fireUpdate?: boolean): void;
    onSelectionChange(): void;
    onExpandChange(targetId?: number): void;
    onPaginationChange(isPageSizeChange: boolean, pageSize: number): void;
    onSortFilterChange(): void;
    setInitialSortFilter(preferences: any): void;
    checkRetainment(caller: string): void;
}
