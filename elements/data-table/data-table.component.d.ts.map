{"version":3,"file":"data-table.component.d.ts","sources":["data-table.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef } from '@angular/core';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { NovoTemplate } from '../common/novo-template/novo-template.directive';\nimport { DataTableSource } from './data-table.source';\nimport { IDataTableColumn, IDataTablePaginationOptions, IDataTablePreferences, IDataTableSearchOptions, IDataTableService } from './interfaces';\nimport { DataTableState } from './state/data-table-state.service';\nimport { NovoDataTableCellHeader } from './cell-headers/data-table-header-cell.component';\nimport { ListInteractionDictionary, ListInteractionEvent } from './ListInteractionTypes';\nexport declare class NovoDataTable<T> implements AfterContentInit, OnDestroy {\n    labels: NovoLabelService;\n    private ref;\n    state: DataTableState<T>;\n    globalSearchHiddenClassToggle: boolean;\n    customTemplates: QueryList<NovoTemplate>;\n    defaultTemplates: QueryList<NovoTemplate>;\n    cellHeaders: QueryList<NovoDataTableCellHeader<T>>;\n    novoDataTableContainer: ElementRef;\n    resized: EventEmitter<IDataTableColumn<T>>;\n    set displayedColumns(displayedColumns: string[]);\n    get displayedColumns(): string[];\n    private _disabledColumns;\n    paginationOptions: IDataTablePaginationOptions;\n    searchOptions: IDataTableSearchOptions;\n    defaultSort: {\n        id: string;\n        value: string;\n    };\n    name: string;\n    allowMultipleFilters: boolean;\n    rowIdentifier: string;\n    activeRowIdentifier: string;\n    trackByFn: (index: any, item: any) => any;\n    templates: {\n        [key: string]: TemplateRef<any>;\n    };\n    fixedHeader: boolean;\n    paginatorDataFeatureId: string;\n    set dataTableService(service: IDataTableService<T>);\n    set rows(rows: T[]);\n    set outsideFilter(outsideFilter: EventEmitter<any>);\n    set refreshSubject(refreshSubject: EventEmitter<any>);\n    set columns(columns: IDataTableColumn<T>[]);\n    get columns(): IDataTableColumn<T>[];\n    set customFilter(v: boolean);\n    get customFilter(): boolean;\n    private _customFilter;\n    set hasExandedRows(v: boolean);\n    get hasExandedRows(): boolean;\n    private _hasExandedRows;\n    set forceShowHeader(v: boolean);\n    get forceShowHeader(): boolean;\n    private _forceShowHeader;\n    set hideGlobalSearch(v: boolean);\n    get hideGlobalSearch(): boolean;\n    private _hideGlobalSearch;\n    preferencesChanged: EventEmitter<IDataTablePreferences>;\n    dataSource: DataTableSource<T>;\n    loading: boolean;\n    columnToTemplate: {\n        [key: string]: TemplateRef<any>;\n    };\n    columnsLoaded: boolean;\n    selection: Set<string>;\n    scrollLeft: number;\n    expandable: boolean;\n    private outsideFilterSubscription;\n    private refreshSubscription;\n    private resetSubscription;\n    private paginationSubscription;\n    private sortFilterSubscription;\n    private _columns;\n    private scrollListenerHandler;\n    private initialized;\n    get empty(): boolean;\n    get loadingClass(): boolean;\n    listInteractions: ListInteractionDictionary;\n    constructor(labels: NovoLabelService, ref: ChangeDetectorRef, state: DataTableState<T>);\n    modifyCellHeaderMultiSelectFilterOptions(column: string, newOptions: {\n        value: any;\n        label: string;\n    }[]): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    onSearchChange(term: string): void;\n    trackColumnsBy(index: number, item: IDataTableColumn<T>): string;\n    isDisabled(check: any, row: T): boolean;\n    isExpanded(row: T): boolean;\n    expandRow(row: T): void;\n    expandRows(expand: boolean): void;\n    allCurrentRowsExpanded(): boolean;\n    isSelected(row: T): boolean;\n    selectRow(row: T): void;\n    selectRows(selected: boolean): void;\n    allCurrentRowsSelected(): boolean;\n    private configureLastDisplayedColumn;\n    private configureColumns;\n    private scrollListener;\n    performInteractions(event: ListInteractionEvent): void;\n}\n"]}