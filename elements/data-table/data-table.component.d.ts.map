{"version":3,"file":"data-table.component.d.ts","sources":["data-table.component.d.ts"],"names":[],"mappingssourcesContent":["import { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef } from '@angular/core';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { NovoTemplate } from '../common/novo-template/novo-template.directive';\r\nimport { DataTableSource } from './data-table.source';\r\nimport { IDataTableColumn, IDataTablePaginationOptions, IDataTablePreferences, IDataTableSearchOptions, IDataTableService } from './interfaces';\r\nimport { DataTableState } from './state/data-table-state.service';\r\nimport { NovoDataTableCellHeader } from './cell-headers/data-table-header-cell.component';\r\nimport { ListInteractionDictionary, ListInteractionEvent } from './ListInteractionTypes';\r\nexport declare class NovoDataTable<T> implements AfterContentInit, OnDestroy {\r\n    labels: NovoLabelService;\r\n    private ref;\r\n    state: DataTableState<T>;\r\n    globalSearchHiddenClassToggle: boolean;\r\n    customTemplates: QueryList<NovoTemplate>;\r\n    defaultTemplates: QueryList<NovoTemplate>;\r\n    cellHeaders: QueryList<NovoDataTableCellHeader<T>>;\r\n    novoDataTableContainer: ElementRef;\r\n    resized: EventEmitter<IDataTableColumn<T>>;\r\n    set displayedColumns(displayedColumns: string[]);\r\n    get displayedColumns(): string[];\r\n    private _disabledColumns;\r\n    paginationOptions: IDataTablePaginationOptions;\r\n    searchOptions: IDataTableSearchOptions;\r\n    defaultSort: {\r\n        id: string;\r\n        value: string;\r\n    };\r\n    name: string;\r\n    allowMultipleFilters: boolean;\r\n    rowIdentifier: string;\r\n    activeRowIdentifier: string;\r\n    trackByFn: (index: any, item: any) => any;\r\n    templates: {\r\n        [key: string]: TemplateRef<any>;\r\n    };\r\n    fixedHeader: boolean;\r\n    paginatorDataFeatureId: string;\r\n    set dataTableService(service: IDataTableService<T>);\r\n    set rows(rows: T[]);\r\n    set outsideFilter(outsideFilter: EventEmitter<any>);\r\n    set refreshSubject(refreshSubject: EventEmitter<any>);\r\n    set columns(columns: IDataTableColumn<T>[]);\r\n    get columns(): IDataTableColumn<T>[];\r\n    set customFilter(v: boolean);\r\n    get customFilter(): boolean;\r\n    private _customFilter;\r\n    set hasExandedRows(v: boolean);\r\n    get hasExandedRows(): boolean;\r\n    private _hasExandedRows;\r\n    set forceShowHeader(v: boolean);\r\n    get forceShowHeader(): boolean;\r\n    private _forceShowHeader;\r\n    set hideGlobalSearch(v: boolean);\r\n    get hideGlobalSearch(): boolean;\r\n    private _hideGlobalSearch;\r\n    preferencesChanged: EventEmitter<IDataTablePreferences>;\r\n    dataSource: DataTableSource<T>;\r\n    loading: boolean;\r\n    columnToTemplate: {\r\n        [key: string]: TemplateRef<any>;\r\n    };\r\n    columnsLoaded: boolean;\r\n    selection: Set<string>;\r\n    scrollLeft: number;\r\n    expandable: boolean;\r\n    private outsideFilterSubscription;\r\n    private refreshSubscription;\r\n    private resetSubscription;\r\n    private paginationSubscription;\r\n    private sortFilterSubscription;\r\n    private _columns;\r\n    private scrollListenerHandler;\r\n    private initialized;\r\n    get empty(): boolean;\r\n    get loadingClass(): boolean;\r\n    listInteractions: ListInteractionDictionary;\r\n    constructor(labels: NovoLabelService, ref: ChangeDetectorRef, state: DataTableState<T>);\r\n    modifyCellHeaderMultiSelectFilterOptions(column: string, newOptions: {\r\n        value: any;\r\n        label: string;\r\n    }[]): void;\r\n    ngOnDestroy(): void;\r\n    ngAfterContentInit(): void;\r\n    onSearchChange(term: string): void;\r\n    trackColumnsBy(index: number, item: IDataTableColumn<T>): string;\r\n    isDisabled(check: any, row: T): boolean;\r\n    isExpanded(row: T): boolean;\r\n    expandRow(row: T): void;\r\n    expandRows(expand: boolean): void;\r\n    allCurrentRowsExpanded(): boolean;\r\n    isSelected(row: T): boolean;\r\n    selectRow(row: T): void;\r\n    selectRows(selected: boolean): void;\r\n    allCurrentRowsSelected(): boolean;\r\n    private configureLastDisplayedColumn;\r\n    private configureColumns;\r\n    private scrollListener;\r\n    performInteractions(event: ListInteractionEvent): void;\r\n}\r\n"]}