{"version":3,"file":"Chips.d.ts","sources":["Chips.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { ComponentUtils } from '../../utils/component-utils/ComponentUtils';\r\nexport declare class NovoChipElement {\r\n    set type(type: string);\r\n    disabled: boolean;\r\n    select: EventEmitter<any>;\r\n    remove: EventEmitter<any>;\r\n    deselect: EventEmitter<any>;\r\n    entity: string;\r\n    _type: string;\r\n    onRemove(e: any): boolean;\r\n    onSelect(e: any): boolean;\r\n    onDeselect(e: any): boolean;\r\n}\r\nexport declare class NovoChipsElement implements OnInit, ControlValueAccessor {\r\n    element: ElementRef;\r\n    private componentUtils;\r\n    labels: NovoLabelService;\r\n    closeOnSelect: boolean;\r\n    placeholder: string;\r\n    source: any;\r\n    maxlength: any;\r\n    type: any;\r\n    set disablePickerInput(v: boolean);\r\n    get disablePickerInput(): boolean;\r\n    private _disablePickerInput;\r\n    changed: EventEmitter<any>;\r\n    focus: EventEmitter<any>;\r\n    blur: EventEmitter<any>;\r\n    typing: EventEmitter<any>;\r\n    preview: ViewContainerRef;\r\n    items: Array<any>;\r\n    selected: any;\r\n    config: any;\r\n    model: any;\r\n    itemToAdd: any;\r\n    popup: any;\r\n    _value: any;\r\n    _items: ReplaySubject<unknown>;\r\n    onModelChange: Function;\r\n    onModelTouched: Function;\r\n    constructor(element: ElementRef, componentUtils: ComponentUtils, labels: NovoLabelService);\r\n    ngOnInit(): void;\r\n    get value(): any;\r\n    set value(selected: any);\r\n    clearValue(): void;\r\n    setItems(): void;\r\n    getLabelFromOptions(value: any): {\r\n        value: any;\r\n        label: any;\r\n    };\r\n    deselectAll(event?: any): void;\r\n    select(event?: any, item?: any): void;\r\n    deselect(event?: any, item?: any): void;\r\n    onTyping(event?: any): void;\r\n    onFocus(event?: any): void;\r\n    add(event: any): void;\r\n    remove(event: any, item: any): void;\r\n    onKeyDown(event: any): void;\r\n    onTouched(e: any): void;\r\n    writeValue(model: any): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    /**\r\n     * @description This method creates an instance of the preview (called popup) and adds all the bindings to that\r\n     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is\r\n     * a previewTemplate given in the config.\r\n     */\r\n    showPreview(): void;\r\n    /**\r\n     * @description - This method deletes the preview popup from the DOM.\r\n     */\r\n    hidePreview(): void;\r\n}\r\n"]}