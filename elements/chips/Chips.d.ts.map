{"version":3,"file":"Chips.d.ts","sources":["Chips.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, OnInit, ViewContainerRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { ReplaySubject } from 'rxjs';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { ComponentUtils } from '../../utils/component-utils/ComponentUtils';\nexport declare class NovoChipElement {\n    set type(type: string);\n    disabled: boolean;\n    select: EventEmitter<any>;\n    remove: EventEmitter<any>;\n    deselect: EventEmitter<any>;\n    entity: string;\n    _type: string;\n    onRemove(e: any): boolean;\n    onSelect(e: any): boolean;\n    onDeselect(e: any): boolean;\n}\nexport declare class NovoChipsElement implements OnInit, ControlValueAccessor {\n    element: ElementRef;\n    private componentUtils;\n    labels: NovoLabelService;\n    closeOnSelect: boolean;\n    placeholder: string;\n    source: any;\n    maxlength: any;\n    type: any;\n    set disablePickerInput(v: boolean);\n    get disablePickerInput(): boolean;\n    private _disablePickerInput;\n    changed: EventEmitter<any>;\n    focus: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    typing: EventEmitter<any>;\n    preview: ViewContainerRef;\n    items: Array<any>;\n    selected: any;\n    config: any;\n    model: any;\n    itemToAdd: any;\n    popup: any;\n    _value: any;\n    _items: ReplaySubject<unknown>;\n    onModelChange: Function;\n    onModelTouched: Function;\n    constructor(element: ElementRef, componentUtils: ComponentUtils, labels: NovoLabelService);\n    ngOnInit(): void;\n    get value(): any;\n    set value(selected: any);\n    clearValue(): void;\n    setItems(): void;\n    getLabelFromOptions(value: any): {\n        value: any;\n        label: any;\n    };\n    deselectAll(event?: any): void;\n    select(event?: any, item?: any): void;\n    deselect(event?: any, item?: any): void;\n    onTyping(event?: any): void;\n    onFocus(event?: any): void;\n    add(event: any): void;\n    remove(event: any, item: any): void;\n    onKeyDown(event: any): void;\n    onTouched(e: any): void;\n    writeValue(model: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(disabled: boolean): void;\n    /**\n     * @description This method creates an instance of the preview (called popup) and adds all the bindings to that\n     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is\n     * a previewTemplate given in the config.\n     */\n    showPreview(): void;\n    /**\n     * @description - This method deletes the preview popup from the DOM.\n     */\n    hidePreview(): void;\n}\n"]}