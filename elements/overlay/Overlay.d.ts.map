{"version":3,"file":"Overlay.d.ts","sources":["Overlay.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { ConnectedPositionStrategy, Overlay, OverlayConfig, OverlayRef, ScrollStrategy } from '@angular/cdk/overlay';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { Observable, Subscription } from 'rxjs';\r\nexport declare class NovoOverlayTemplateComponent implements OnDestroy {\r\n    protected overlay: Overlay;\r\n    protected viewContainerRef: ViewContainerRef;\r\n    protected zone: NgZone;\r\n    protected changeDetectorRef: ChangeDetectorRef;\r\n    protected document: any;\r\n    id: string;\r\n    template: TemplateRef<any>;\r\n    panel: ElementRef;\r\n    position: 'default' | 'right' | 'above-below' | 'right-above-below' | 'center' | 'bottom' | 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\r\n    scrollStrategy: 'reposition' | 'block' | 'close';\r\n    width: number;\r\n    height: number;\r\n    closeOnSelect: boolean;\r\n    select: EventEmitter<any>;\r\n    closing: EventEmitter<any>;\r\n    overlayRef: OverlayRef | null;\r\n    portal: TemplatePortal<any>;\r\n    protected closingActionsSubscription: Subscription;\r\n    private _parent;\r\n    constructor(overlay: Overlay, viewContainerRef: ViewContainerRef, zone: NgZone, changeDetectorRef: ChangeDetectorRef, document: any);\r\n    ngOnDestroy(): void;\r\n    get panelOpen(): boolean;\r\n    set parent(value: ElementRef);\r\n    get parent(): ElementRef;\r\n    openPanel(): void;\r\n    closePanel(): void;\r\n    onClosingAction(event: any): void;\r\n    /**\r\n     * A stream of actions that should close the autocomplete panel, including\r\n     * when an option is selected, on blur, and when TAB is pressed.\r\n     */\r\n    get panelClosingActions(): Observable<any>;\r\n    /** Stream of clicks outside of the autocomplete panel. */\r\n    protected get outsideClickStream(): Observable<any>;\r\n    /**\r\n     * This method listens to a stream of panel closing actions and resets the\r\n     * stream every time the option list changes.\r\n     */\r\n    protected subscribeToClosingActions(): Subscription;\r\n    protected createOverlay(template: TemplateRef<any>): void;\r\n    protected destroyOverlay(): void;\r\n    protected getOverlayConfig(): OverlayConfig;\r\n    /**\r\n     * Supports the following position strategies:\r\n     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'\r\n     */\r\n    protected getPosition(): ConnectedPositionStrategy;\r\n    protected getScrollStrategy(): ScrollStrategy;\r\n    protected checkSizes(): void;\r\n    protected getConnectedElement(): ElementRef;\r\n    protected getHostWidth(): number;\r\n}\r\n"]}