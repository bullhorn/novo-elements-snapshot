{"version":3,"file":"TimePickerInput.d.ts","sources":["TimePickerInput.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnInit, EventEmitter } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NovoOverlayTemplateComponent } from '../overlay/Overlay';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { DateFormatService } from '../../services/date-format/DateFormat';\r\nexport declare class NovoTimePickerInputElement implements OnInit, ControlValueAccessor {\r\n    element: ElementRef;\r\n    labels: NovoLabelService;\r\n    dateFormatService: DateFormatService;\r\n    protected _changeDetectorRef: ChangeDetectorRef;\r\n    value: any;\r\n    formattedValue: string;\r\n    /** View -> model callback called when value changes */\r\n    _onChange: (value: any) => void;\r\n    /** View -> model callback called when autocomplete has been touched */\r\n    _onTouched: () => void;\r\n    name: string;\r\n    placeholder: string;\r\n    military: boolean;\r\n    maskOptions: any;\r\n    disabled: boolean;\r\n    blurEvent: EventEmitter<FocusEvent>;\r\n    focusEvent: EventEmitter<FocusEvent>;\r\n    /** Element for the panel containing the autocomplete options. */\r\n    overlay: NovoOverlayTemplateComponent;\r\n    constructor(element: ElementRef, labels: NovoLabelService, dateFormatService: DateFormatService, _changeDetectorRef: ChangeDetectorRef);\r\n    ngOnInit(): void;\r\n    /** BEGIN: Convenient Panel Methods. */\r\n    openPanel(): void;\r\n    closePanel(): void;\r\n    get panelOpen(): boolean;\r\n    /** END: Convenient Panel Methods. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    _handleInput(event: KeyboardEvent): void;\r\n    _handleBlur(event: FocusEvent): void;\r\n    _handleFocus(event: FocusEvent): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: (value: any) => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    dispatchOnChange(newValue?: any, skip?: boolean): void;\r\n    private _setTriggerValue;\r\n    setValue(event: any | null): void;\r\n    setValueAndClose(event: any | null): void;\r\n    /**\r\n     * Clear any previous selected option and emit a selection change event for this option\r\n     */\r\n    clearValue(): void;\r\n    formatDateValue(value: any): string;\r\n    get hasValue(): boolean;\r\n    scrollToIndex(index: number): void;\r\n}\r\n"]}