{"version":3,"file":"expansion-panel.d.ts","sources":["expansion-panel.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["import { AnimationEvent } from '@angular/animations';\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { NovoAccordion } from './accordion';\nimport { NovoExpansionPanelContent } from './expansion-panel-content';\n/** NovoExpansionPanel's states. */\nexport declare type NovoExpansionPanelState = 'expanded' | 'collapsed';\n/**\n * `<novo-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the NovoAccordion directive attached.\n */\nexport declare class NovoExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\n    private _viewContainerRef;\n    disabled: boolean;\n    expanded: boolean;\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle(): boolean;\n    set hideToggle(value: boolean);\n    private _hideToggle;\n    get padding(): boolean;\n    set padding(value: boolean);\n    private _padding;\n    opened: EventEmitter<void>;\n    closed: EventEmitter<void>;\n    expandedChange: EventEmitter<boolean>;\n    /** Stream that emits for changes in `@Input` properties. */\n    readonly _inputChanges: Subject<SimpleChanges>;\n    /** Optionally defined accordion the expansion panel belongs to. */\n    accordion: NovoAccordion;\n    /** Content that will be rendered lazily. */\n    _lazyContent: NovoExpansionPanelContent;\n    /** Portal holding the user's content. */\n    _portal: TemplatePortal;\n    /** ID for the associated header element. Used for a11y labelling. */\n    _headerId: string;\n    constructor(accordion: NovoAccordion, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef);\n    /** Whether the expansion indicator should be hidden. */\n    _getHideToggle(): boolean;\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing(): boolean;\n    /** Gets the expanded state string. */\n    _getExpandedState(): NovoExpansionPanelState;\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    _bodyAnimation(event: AnimationEvent): void;\n}\nexport declare class NovoExpansionPanelActionRow {\n}\n"]}