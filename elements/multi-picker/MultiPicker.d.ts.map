{"version":3,"file":"MultiPicker.d.ts","sources":["MultiPicker.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnInit } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NovoLabelService } from '../../services/novo-label-service';\ninterface Item {\n    type: any;\n    label: any;\n    value: any;\n}\nexport declare class NovoMultiPickerElement implements OnInit {\n    element: ElementRef;\n    labels: NovoLabelService;\n    source: {\n        options: [];\n        resultsTemplate: any;\n        selectAllOption: boolean;\n        chipsCount: any;\n        strictRelationship: any;\n    };\n    placeholder: any;\n    types: {\n        value: any;\n        singular: any;\n        plural: any;\n        isParentOf: any;\n        isChildOf: any;\n    }[];\n    changed: EventEmitter<any>;\n    focus: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    get value(): {};\n    set value(selectedItems: {});\n    items: Item[];\n    _items: ReplaySubject<Item[]>;\n    options: any;\n    _options: any;\n    selected: any;\n    config: any;\n    chipsCount: number;\n    selectAllOption: boolean;\n    strictRelationship: boolean;\n    _value: {};\n    notShown: any;\n    model: any;\n    onModelChange: Function;\n    onModelTouched: Function;\n    constructor(element: ElementRef, labels: NovoLabelService);\n    ngOnInit(): void;\n    clearValue(): void;\n    removeFromDisplay(event: any, item: any): void;\n    setupOptions(): void;\n    setupOptionsByType(section: any): any;\n    formatOption(section: any, item: any): {\n        value: any;\n        label: any;\n        type: any;\n        checked: any;\n        isParentOf: any;\n        isChildOf: any;\n    };\n    createSelectAllOption(section: any): {\n        value: string;\n        label: string;\n        type: any;\n        checked: boolean;\n        isParentOf: any;\n        isChildOf: any;\n    };\n    deselectAll(): void;\n    select(event: any, item: any): void;\n    onFocus(e: any): void;\n    clickOption(event: any): void;\n    add(event: any): void;\n    updateAllItemState(type: any): {\n        allOfType: any;\n        allOfTypeSelected: boolean;\n    };\n    setIndeterminateState(allOfType: any, status: any): void;\n    updateDisplayItems(item: any, action: any): void;\n    updateDisplayText(items: any): void;\n    remove(event: any, item: any): void;\n    removeItem(item: any, triggeredByEvent?: any): void;\n    removeValue(item: any): void;\n    onKeyDown(event: any): void;\n    allOfTypeSelected(type: any): boolean;\n    modifyAllOfType(type: any, action: any): void;\n    triggerValueUpdate(): void;\n    selectAll(allOfType: any, type: any): void;\n    handleRemoveItemIfAllSelected(item: any): void;\n    handleOutsideClick(event: any): void;\n    getAllOfType(type: any): any;\n    updateParentOrChildren(item: any, action: any): void;\n    modifyAffectedParentsOrChildren(selecting: any, itemChanged: any): void;\n    updateAllParentsOrChildren(allItem: any, action: any): void;\n    updateAllChildrenValue(item: any, action: any): void;\n    updateAllParentValue(item: any, action: any): void;\n    updateIndeterminateStates(allParentType: any, allChildren: any, allCheckedChildren: any): void;\n    updateChildrenValue(parent: any, action: any): void;\n    updateParentValue(child: any, action: any): void;\n    addIndividualChildren(children: any): void;\n    setInitialValue(model: any): void;\n    allItemsSelected(optionsByType: any, type: any): boolean;\n    onTouched(e: any): void;\n    writeValue(model: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n}\nexport {};\n"]}