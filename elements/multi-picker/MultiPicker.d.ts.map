{"version":3,"file":"MultiPicker.d.ts","sources":["MultiPicker.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, OnInit } from '@angular/core';\r\nimport { ReplaySubject } from 'rxjs';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\ninterface Item {\r\n    type: any;\r\n    label: any;\r\n    value: any;\r\n}\r\nexport declare class NovoMultiPickerElement implements OnInit {\r\n    element: ElementRef;\r\n    labels: NovoLabelService;\r\n    source: {\r\n        options: [];\r\n        resultsTemplate: any;\r\n        selectAllOption: boolean;\r\n        chipsCount: any;\r\n        strictRelationship: any;\r\n    };\r\n    placeholder: any;\r\n    types: {\r\n        value: any;\r\n        singular: any;\r\n        plural: any;\r\n        isParentOf: any;\r\n        isChildOf: any;\r\n    }[];\r\n    changed: EventEmitter<any>;\r\n    focus: EventEmitter<any>;\r\n    blur: EventEmitter<any>;\r\n    get value(): {};\r\n    set value(selectedItems: {});\r\n    items: Item[];\r\n    _items: ReplaySubject<Item[]>;\r\n    options: any;\r\n    _options: any;\r\n    selected: any;\r\n    config: any;\r\n    chipsCount: number;\r\n    selectAllOption: boolean;\r\n    strictRelationship: boolean;\r\n    _value: {};\r\n    notShown: any;\r\n    model: any;\r\n    onModelChange: Function;\r\n    onModelTouched: Function;\r\n    constructor(element: ElementRef, labels: NovoLabelService);\r\n    ngOnInit(): void;\r\n    clearValue(): void;\r\n    removeFromDisplay(event: any, item: any): void;\r\n    setupOptions(): void;\r\n    setupOptionsByType(section: any): any;\r\n    formatOption(section: any, item: any): {\r\n        value: any;\r\n        label: any;\r\n        type: any;\r\n        checked: any;\r\n        isParentOf: any;\r\n        isChildOf: any;\r\n    };\r\n    createSelectAllOption(section: any): {\r\n        value: string;\r\n        label: string;\r\n        type: any;\r\n        checked: boolean;\r\n        isParentOf: any;\r\n        isChildOf: any;\r\n    };\r\n    deselectAll(): void;\r\n    select(event: any, item: any): void;\r\n    onFocus(e: any): void;\r\n    clickOption(event: any): void;\r\n    add(event: any): void;\r\n    updateAllItemState(type: any): {\r\n        allOfType: any;\r\n        allOfTypeSelected: boolean;\r\n    };\r\n    setIndeterminateState(allOfType: any, status: any): void;\r\n    updateDisplayItems(item: any, action: any): void;\r\n    updateDisplayText(items: any): void;\r\n    remove(event: any, item: any): void;\r\n    removeItem(item: any, triggeredByEvent?: any): void;\r\n    removeValue(item: any): void;\r\n    onKeyDown(event: any): void;\r\n    allOfTypeSelected(type: any): boolean;\r\n    modifyAllOfType(type: any, action: any): void;\r\n    triggerValueUpdate(): void;\r\n    selectAll(allOfType: any, type: any): void;\r\n    handleRemoveItemIfAllSelected(item: any): void;\r\n    handleOutsideClick(event: any): void;\r\n    getAllOfType(type: any): any;\r\n    updateParentOrChildren(item: any, action: any): void;\r\n    modifyAffectedParentsOrChildren(selecting: any, itemChanged: any): void;\r\n    updateAllParentsOrChildren(allItem: any, action: any): void;\r\n    updateAllChildrenValue(item: any, action: any): void;\r\n    updateAllParentValue(item: any, action: any): void;\r\n    updateIndeterminateStates(allParentType: any, allChildren: any, allCheckedChildren: any): void;\r\n    updateChildrenValue(parent: any, action: any): void;\r\n    updateParentValue(child: any, action: any): void;\r\n    addIndividualChildren(children: any): void;\r\n    setInitialValue(model: any): void;\r\n    allItemsSelected(optionsByType: any, type: any): boolean;\r\n    onTouched(e: any): void;\r\n    writeValue(model: any): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n}\r\nexport {};\r\n"]}