{"version":3,"file":"Dropdown.d.ts","sources":["Dropdown.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\nimport { NovoOverlayTemplateComponent } from '../overlay/Overlay';\nexport declare class NovoDropdownElement implements OnInit, OnDestroy {\n    element: ElementRef;\n    private ref;\n    parentScrollSelector: string;\n    parentScrollAction: string;\n    containerClass: string;\n    side: 'default' | 'right' | 'above-below' | 'right-above-below' | 'center' | 'bottom' | 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\n    scrollStrategy: 'reposition' | 'block' | 'close';\n    height: number;\n    width: number;\n    appendToBody: boolean;\n    toggled: EventEmitter<boolean>;\n    overlay: NovoOverlayTemplateComponent;\n    clickHandler: any;\n    closeHandler: any;\n    parentScrollElement: Element;\n    private _items;\n    private _textItems;\n    private _activeIndex;\n    private _activeIndex$;\n    private filterTerm;\n    private filterTermTimeout;\n    constructor(element: ElementRef, ref: ChangeDetectorRef);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    set items(items: QueryList<NovoItemElement>);\n    /** BEGIN: Convenient Panel Methods. */\n    get panelOpen(): boolean;\n    private updateItemIndices;\n    set activeIndex(value: number);\n    get activeIndex(): number;\n    get activeIndexObs(): import(\"rxjs\").Observable<number>;\n    openPanel(): void;\n    closePanel(): void;\n    togglePanel(): void;\n    get itemHasSubmenu(): boolean;\n    get navigatingSubmenu(): boolean;\n    /** END: Convenient Panel Methods. */\n    private moveDown;\n    private moveUp;\n    private pressEnter;\n    onKeyDown(event: KeyboardEvent): void;\n    onOverlayKeyDown(event: KeyboardEvent): void;\n    private scrollToActive;\n}\nexport declare class NovoItemElement implements AfterViewInit {\n    private dropdown;\n    element: ElementRef;\n    disabled: boolean;\n    keepOpen: boolean;\n    onSubmenuClick: EventEmitter<any>;\n    action: EventEmitter<any>;\n    submenuItems: String[];\n    submenu: NovoDropdownElement;\n    private _active;\n    private _active$;\n    private submenuIsOpen;\n    index: number;\n    set active(value: boolean);\n    get active(): boolean;\n    constructor(dropdown: NovoDropdownElement, element: ElementRef);\n    ngAfterViewInit(): void;\n    onClick(event: Event): void;\n    hasSubmenu(): boolean;\n    mouseEnter(): void;\n    submenuClicked(item: String): void;\n}\nexport declare class NovoDropdownListElement implements AfterContentInit {\n    private dropdown;\n    items: QueryList<NovoItemElement>;\n    constructor(dropdown: NovoDropdownElement);\n    ngAfterContentInit(): void;\n}\nexport declare class NovoDropDownItemHeaderElement {\n}\n"]}