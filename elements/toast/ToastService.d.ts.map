{"version":3,"file":"ToastService.d.ts","sources":["ToastService.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentUtils } from '../../utils/component-utils/ComponentUtils';\nexport declare type ToastThemes = 'default' | 'success' | 'info' | 'warning' | 'danger' | 'positive' | string;\nexport declare type ToastIcons = 'bell' | 'check' | 'info' | 'warning' | 'remove' | 'caution' | 'times' | 'coffee' | 'danger' | string;\nexport declare type ToastPositions = 'fixedTop' | 'fixedBottom' | 'growlTopRight' | 'growlTopLeft' | 'growlBottomRight' | 'growlBottomLeft';\nexport interface ToastOptions {\n    title?: string;\n    message?: string;\n    icon?: ToastIcons;\n    theme?: ToastThemes;\n    hideDelay?: number;\n    position?: ToastPositions;\n    isCloseable?: boolean;\n    customClass?: string;\n}\nexport declare class NovoToastService {\n    private componentUtils;\n    _parentViewContainer: any;\n    references: Array<any>;\n    icons: {\n        default: string;\n        success: string;\n        info: string;\n        warning: string;\n        danger: string;\n    };\n    defaults: {\n        hideDelay: number;\n        position: string;\n        theme: string;\n    };\n    constructor(componentUtils: ComponentUtils);\n    set parentViewContainer(view: any);\n    alert(options: ToastOptions, toastElement?: any): Promise<any>;\n    isVisible(toast: any): any;\n    hide(toast: any): void;\n    handleAlert(toast: any, options: any): void;\n    setToastOnSession(toast: any, opts: any): void;\n    show(toast: any): void;\n    toastTimer(toast: any): void;\n}\n"]}