{"version":3,"file":"ToastService.d.ts","sources":["ToastService.d.ts"],"names":[],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ComponentUtils } from '../../utils/component-utils/ComponentUtils';\r\nexport declare type ToastThemes = 'default' | 'success' | 'info' | 'warning' | 'danger' | 'positive' | string;\r\nexport declare type ToastIcons = 'bell' | 'check' | 'info' | 'warning' | 'remove' | 'caution' | 'times' | 'coffee' | 'danger' | string;\r\nexport declare type ToastPositions = 'fixedTop' | 'fixedBottom' | 'growlTopRight' | 'growlTopLeft' | 'growlBottomRight' | 'growlBottomLeft';\r\nexport interface ToastOptions {\r\n    title?: string;\r\n    message?: string;\r\n    icon?: ToastIcons;\r\n    theme?: ToastThemes;\r\n    hideDelay?: number;\r\n    position?: ToastPositions;\r\n    isCloseable?: boolean;\r\n    customClass?: string;\r\n}\r\nexport declare class NovoToastService {\r\n    private componentUtils;\r\n    _parentViewContainer: any;\r\n    references: Array<any>;\r\n    icons: {\r\n        default: string;\r\n        success: string;\r\n        info: string;\r\n        warning: string;\r\n        danger: string;\r\n    };\r\n    defaults: {\r\n        hideDelay: number;\r\n        position: string;\r\n        theme: string;\r\n    };\r\n    constructor(componentUtils: ComponentUtils);\r\n    set parentViewContainer(view: any);\r\n    alert(options: ToastOptions, toastElement?: any): Promise<any>;\r\n    isVisible(toast: any): any;\r\n    hide(toast: any): void;\r\n    handleAlert(toast: any, options: any): void;\r\n    setToastOnSession(toast: any, opts: any): void;\r\n    show(toast: any): void;\r\n    toastTimer(toast: any): void;\r\n}\r\n"]}