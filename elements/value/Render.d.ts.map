{"version":3,"file":"Render.d.ts","sources":["Render.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA","sourcesContent":["import { ChangeDetectorRef, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\n/**\r\n * @classdesc\r\n * Renders data appropriately based on the data type found in Meta\r\n * All data types defined by bullhorn should be supported:\r\n *\r\n * - **String**: trims value and returns\r\n * - **Integer**: return value\r\n * - **Double**: return value fixed to 2 decimals\r\n * - **BigDecimal**: return value fixed to 2 decimals\r\n * - **Address**: only city and/or state returned\r\n * - **Address1**: only city and/or state returned\r\n * - **AddressWithoutCountry**: only city and/or state returned\r\n * - **Currency**: put a $ in front\r\n * - **Percentage**: divide by 100 fix to 2 decimals place and return\r\n * - **Options**: returns the appropriate 'label' for the 'value' from 'options'\r\n * - **Array**: returns list comma separated\r\n * - **DateTime**: formats the date\r\n * - **TimeStamp**: formats the date\r\n * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)\r\n * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)\r\n *\r\n * @example\r\n * ```\r\n * {{ expression | render:field }}\r\n * ```\r\n */\r\nexport declare class RenderPipe implements PipeTransform {\r\n    private changeDetector;\r\n    private sanitizationService;\r\n    private labels;\r\n    value: any;\r\n    lastValue: any;\r\n    lastArgs: any;\r\n    constructor(changeDetector: ChangeDetectorRef, sanitizationService: DomSanitizer, labels: NovoLabelService);\r\n    equals(objectOne: any, objectTwo: any): any;\r\n    getEntityLabel(item: any, entity: string): string;\r\n    /**\r\n     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically\r\n     * be set up on the entity once the fields are defined.\r\n     * @param args - fields can either be sent as a list of arguments or as an Array\r\n     * @return text\r\n     */\r\n    render(value: any, args: any): any;\r\n    updateValue(value: any, args: any): any;\r\n    transform(value?: any, args?: any): any;\r\n    /**\r\n     * Simple function concat a list of fields from a list of objects\r\n     * @param list - the list of values to use\r\n     * @param fields - list of fields to extract\r\n     */\r\n    concat(list: any, ...fields: any[]): any;\r\n    /**\r\n     * Simple function to look up the **label** to display from options\r\n     * @param value - the value to find\r\n     * @param list - list of options (label/value pairs)\r\n     */\r\n    options(value: any, list: any, args: any): any;\r\n    getNumberDecimalPlaces(value: any): any;\r\n    /**\r\n     * Capitalizes the first letter\r\n     */\r\n    capitalize(value: any): string;\r\n}\r\n"]}