{"version":3,"file":"Picker.d.ts","sources":["Picker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ComponentRef, ElementRef, EventEmitter, OnInit, ViewContainerRef } from '@angular/core';\nimport { ComponentUtils } from '../../utils/component-utils/ComponentUtils';\nimport { NovoOverlayTemplateComponent } from '../overlay/Overlay';\nimport { NovoControlConfig } from '../form/FormControls';\n/**\n * @description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,\n * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.\n * Picker should be added as a two-way bound ngModel instance `[(picker)]=\"\"` in order to have the picker options\n * dynamically populate.\n */\nexport declare class NovoPickerElement implements OnInit {\n    element: ElementRef;\n    private componentUtils;\n    private ref;\n    results: ViewContainerRef;\n    config: NovoControlConfig['config'];\n    placeholder: string;\n    clearValueOnSelect: boolean;\n    closeOnSelect: boolean;\n    selected: Array<any>;\n    appendToBody: boolean;\n    parentScrollSelector: string;\n    parentScrollAction: string;\n    containerClass: string;\n    side: string;\n    autoSelectFirstOption: boolean;\n    overrideElement: ElementRef;\n    set disablePickerInput(v: boolean);\n    get disablePickerInput(): boolean;\n    private _disablePickerInput;\n    changed: EventEmitter<any>;\n    select: EventEmitter<any>;\n    focus: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    typing: EventEmitter<any>;\n    container: NovoOverlayTemplateComponent;\n    private input;\n    term: string;\n    resultsComponent: any;\n    popup: ComponentRef<any>;\n    _value: any;\n    onModelChange: Function;\n    onModelTouched: Function;\n    constructor(element: ElementRef, componentUtils: ComponentUtils, ref: ChangeDetectorRef);\n    ngOnInit(): void;\n    private onDebouncedKeyup;\n    openPanel(): void;\n    closePanel(): void;\n    get panelOpen(): boolean;\n    private show;\n    onKeyDown(event: KeyboardEvent): void;\n    clearValue(wipeTerm: any): void;\n    /**\n     * @description When the input's focus event is called this method calls the debounced function that displays the\n     * results.\n     */\n    onFocus(event: any): void;\n    showResults(term?: any): void;\n    hideResults(err?: any): void;\n    onOverlayClosed(): void;\n    get value(): any;\n    set value(selected: any);\n    checkTerm(event: any): void;\n    onTouched(event?: Event): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(disabled: boolean): void;\n}\n"]}