{"version":3,"file":"BasePickerResults.d.ts","sources":["BasePickerResults.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, ChangeDetectorRef } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OverlayRef } from '@angular/cdk/overlay';\r\nimport { NovoControlConfig } from '../../../form/controls/BaseControl';\r\n/**\r\n * @description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be\r\n * overwritten if custom list options are needed.\r\n */\r\nexport declare class BasePickerResults {\r\n    _term: string;\r\n    selected: Array<any>;\r\n    matches: any;\r\n    hasError: boolean;\r\n    isLoading: boolean;\r\n    isStatic: boolean;\r\n    _config: NovoControlConfig['config'];\r\n    activeMatch: any;\r\n    parent: any;\r\n    element: ElementRef;\r\n    ref: ChangeDetectorRef;\r\n    page: number;\r\n    lastPage: boolean;\r\n    autoSelectFirstOption: boolean;\r\n    overlay: OverlayRef;\r\n    optionsFunctionHasChanged: boolean;\r\n    private selectingMatches;\r\n    private scrollHandler;\r\n    constructor(element: ElementRef, ref: ChangeDetectorRef);\r\n    cleanUp(): void;\r\n    onScrollDown(event: WheelEvent): void;\r\n    get term(): string;\r\n    set term(value: string);\r\n    set config(value: NovoControlConfig['config']);\r\n    get config(): NovoControlConfig['config'];\r\n    shouldSearch(value: unknown): boolean;\r\n    addScrollListener(): void;\r\n    processSearch(shouldReset?: boolean): void;\r\n    search(term: any, mode?: any): Observable<any>;\r\n    shouldCallOptionsFunction(term: string): boolean;\r\n    /**\r\n     * @param collection - the data once getData resolves it\r\n     *\r\n     * @description This function structures an array of nodes into an array of objects with a\r\n     * 'name' field by default.\r\n     */\r\n    structureArray(collection: any): any;\r\n    /**\r\n     * @param matches - Collection of objects=\r\n     *\r\n     * @description This function loops through the picker options and creates a filtered list of objects that contain\r\n     * the newSearch.\r\n     */\r\n    filterData(matches: any): Array<any>;\r\n    /**\r\n     * @description This function is called when the user presses the enter key to call the selectMatch method.\r\n     */\r\n    selectActiveMatch(): void;\r\n    /**\r\n     * @description This function sets activeMatch to the match before the current node.\r\n     */\r\n    prevActiveMatch(): void;\r\n    /**\r\n     * @description This function sets activeMatch to the match after the current node.\r\n     */\r\n    nextActiveMatch(): void;\r\n    getListElement(): any;\r\n    getChildrenOfListElement(): any[];\r\n    scrollToActive(): void;\r\n    /**\r\n     * @description\r\n     */\r\n    selectActive(match: any): void;\r\n    /**\r\n     * @description\r\n     */\r\n    isActive(match: any): boolean;\r\n    /**\r\n     * @description\r\n     */\r\n    selectMatch(event?: any, item?: any): boolean;\r\n    /**\r\n     * @description This function captures the whole query string and replace it with the string that will be used to\r\n     * match.\r\n     */\r\n    escapeRegexp(queryToEscape: any): any;\r\n    /**\r\n     * @description This function should return a <strong>-tag wrapped HTML string.\r\n     */\r\n    highlight(match: any, query: any): any;\r\n    preselected(match: any): boolean;\r\n}\r\n"]}