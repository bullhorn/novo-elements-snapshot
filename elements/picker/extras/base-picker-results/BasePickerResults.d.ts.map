{"version":3,"file":"BasePickerResults.d.ts","sources":["BasePickerResults.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, ChangeDetectorRef } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OverlayRef } from '@angular/cdk/overlay';\nimport { NovoControlConfig } from '../../../form/controls/BaseControl';\n/**\n * @description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be\n * overwritten if custom list options are needed.\n */\nexport declare class BasePickerResults {\n    _term: string;\n    selected: Array<any>;\n    matches: any;\n    hasError: boolean;\n    isLoading: boolean;\n    isStatic: boolean;\n    _config: NovoControlConfig['config'];\n    activeMatch: any;\n    parent: any;\n    element: ElementRef;\n    ref: ChangeDetectorRef;\n    page: number;\n    lastPage: boolean;\n    autoSelectFirstOption: boolean;\n    overlay: OverlayRef;\n    optionsFunctionHasChanged: boolean;\n    private selectingMatches;\n    private scrollHandler;\n    constructor(element: ElementRef, ref: ChangeDetectorRef);\n    cleanUp(): void;\n    onScrollDown(event: WheelEvent): void;\n    get term(): string;\n    set term(value: string);\n    set config(value: NovoControlConfig['config']);\n    get config(): NovoControlConfig['config'];\n    shouldSearch(value: unknown): boolean;\n    addScrollListener(): void;\n    processSearch(shouldReset?: boolean): void;\n    search(term: any, mode?: any): Observable<any>;\n    shouldCallOptionsFunction(term: string): boolean;\n    /**\n     * @param collection - the data once getData resolves it\n     *\n     * @description This function structures an array of nodes into an array of objects with a\n     * 'name' field by default.\n     */\n    structureArray(collection: any): any;\n    /**\n     * @param matches - Collection of objects=\n     *\n     * @description This function loops through the picker options and creates a filtered list of objects that contain\n     * the newSearch.\n     */\n    filterData(matches: any): Array<any>;\n    /**\n     * @description This function is called when the user presses the enter key to call the selectMatch method.\n     */\n    selectActiveMatch(): void;\n    /**\n     * @description This function sets activeMatch to the match before the current node.\n     */\n    prevActiveMatch(): void;\n    /**\n     * @description This function sets activeMatch to the match after the current node.\n     */\n    nextActiveMatch(): void;\n    getListElement(): any;\n    getChildrenOfListElement(): any[];\n    scrollToActive(): void;\n    /**\n     * @description\n     */\n    selectActive(match: any): void;\n    /**\n     * @description\n     */\n    isActive(match: any): boolean;\n    /**\n     * @description\n     */\n    selectMatch(event?: any, item?: any): boolean;\n    /**\n     * @description This function captures the whole query string and replace it with the string that will be used to\n     * match.\n     */\n    escapeRegexp(queryToEscape: any): any;\n    /**\n     * @description This function should return a <strong>-tag wrapped HTML string.\n     */\n    highlight(match: any, query: any): any;\n    preselected(match: any): boolean;\n}\n"]}