{"version":3,"file":"EntityPickerResults.d.ts","sources":["EntityPickerResults.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { BasePickerResults } from '../base-picker-results/BasePickerResults';\nimport { NovoLabelService } from '../../../../services/novo-label-service';\nexport declare class EntityPickerResult {\n    labels: NovoLabelService;\n    match: any;\n    term: any;\n    constructor(labels: NovoLabelService);\n    /**\n     * @description This function captures the whole query string and replace it with the string that will be used to\n     * match.\n     */\n    escapeRegexp(queryToEscape: any): any;\n    /**\n     * @description This function should return a <strong>-tag wrapped HTML string.\n     */\n    highlight(match: any, query: any): any;\n    getIconForResult(result?: any): string;\n    renderTimestamp(date?: any): string;\n    renderTimeNoOffset(dateStr?: string): string;\n    getNameForResult(result?: any): string;\n}\nexport declare class EntityPickerResults extends BasePickerResults {\n    labels: NovoLabelService;\n    select: EventEmitter<any>;\n    constructor(element: ElementRef, labels: NovoLabelService, ref: ChangeDetectorRef);\n    get hasNonErrorMessage(): boolean;\n    getListElement(): any;\n    selectMatch(event?: any, item?: any): boolean;\n}\n"]}