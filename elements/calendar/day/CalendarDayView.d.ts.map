{"version":3,"file":"CalendarDayView.d.ts","sources":["CalendarDayView.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { CalendarEvent, CalendarEventTimesChangedEvent, DayView, DayViewHour } from '../../../utils/calendar-utils/CalendarUtils';\r\n/**\r\n * Shows all events on a given day. Example usage:\r\n *\r\n * ```typescript\r\n * &lt;novo-calendar-day\r\n *  [viewDate]=\"viewDate\"\r\n *  [events]=\"events\"&gt;\r\n * &lt;/novo-calendar-day&gt;\r\n * ```\r\n */\r\nexport declare class NovoCalendarDayViewElement implements OnChanges, OnInit, OnDestroy {\r\n    private cdr;\r\n    /**\r\n     * The current view date\r\n     */\r\n    viewDate: Date;\r\n    /**\r\n     * An array of events to display on view\r\n     */\r\n    events: CalendarEvent[];\r\n    /**\r\n     * The number of segments in an hour. Must be <= 6\r\n     */\r\n    hourSegments: number;\r\n    /**\r\n     * The day start hours in 24 hour time. Must be 0-23\r\n     */\r\n    dayStartHour: number;\r\n    /**\r\n     * The day start minutes. Must be 0-59\r\n     */\r\n    dayStartMinute: number;\r\n    /**\r\n     * The day end hours in 24 hour time. Must be 0-23\r\n     */\r\n    dayEndHour: number;\r\n    /**\r\n     * The day end minutes. Must be 0-59\r\n     */\r\n    dayEndMinute: number;\r\n    /**\r\n     * The width in pixels of each event on the view\r\n     */\r\n    eventWidth: number;\r\n    /**\r\n     * An observable that when emitted on will re-render the current view\r\n     */\r\n    refresh: Subject<any>;\r\n    /**\r\n     * The locale used to format dates\r\n     */\r\n    locale: string;\r\n    /**\r\n     * A function that will be called before each hour segment is called. The first argument will contain the hour segment.\r\n     * If you add the `cssClass` property to the segment it will add that class to the hour segment in the template\r\n     */\r\n    hourSegmentModifier: Function;\r\n    /**\r\n     * The grid size to snap resizing and dragging of events to\r\n     */\r\n    eventSnapSize: number;\r\n    /**\r\n     * The placement of the event tooltip\r\n     */\r\n    tooltipPosition: string;\r\n    /**\r\n     * A custom template to use to replace the hour segment\r\n     */\r\n    hourSegmentTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for all day events\r\n     */\r\n    allDayEventTemplate: TemplateRef<any>;\r\n    /**\r\n     * A custom template to use for day view events\r\n     */\r\n    eventTemplate: TemplateRef<any>;\r\n    /**\r\n     * Called when an event title is clicked\r\n     */\r\n    eventClicked: EventEmitter<{\r\n        event: CalendarEvent;\r\n    }>;\r\n    /**\r\n     * Called when an hour segment is clicked\r\n     */\r\n    hourSegmentClicked: EventEmitter<{\r\n        date: Date;\r\n    }>;\r\n    /**\r\n     * Called when an event is resized or dragged and dropped\r\n     */\r\n    eventTimesChanged: EventEmitter<CalendarEventTimesChangedEvent>;\r\n    /**\r\n     * @hidden\r\n     */\r\n    hours: DayViewHour[];\r\n    /**\r\n     * @hidden\r\n     */\r\n    view: DayView;\r\n    /**\r\n     * @hidden\r\n     */\r\n    width: number;\r\n    /**\r\n     * @hidden\r\n     */\r\n    refreshSubscription: Subscription;\r\n    /**\r\n     * @hidden\r\n     */\r\n    currentResize: {\r\n        originalTop: number;\r\n        originalHeight: number;\r\n        edge: string;\r\n    };\r\n    /**\r\n     * @hidden\r\n     */\r\n    validateDrag: Function;\r\n    /**\r\n     * @hidden\r\n     */\r\n    validateResize: Function;\r\n    /**\r\n     * @hidden\r\n     */\r\n    constructor(cdr: ChangeDetectorRef, locale: string);\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnInit(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * @hidden\r\n     */\r\n    ngOnChanges(changes: any): void;\r\n    private refreshHourGrid;\r\n    private refreshView;\r\n    private refreshAll;\r\n}\r\n"]}