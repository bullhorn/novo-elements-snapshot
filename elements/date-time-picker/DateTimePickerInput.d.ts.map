{"version":3,"file":"DateTimePickerInput.d.ts","sources":["DateTimePickerInput.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NovoLabelService } from '../../services/novo-label-service';\nexport declare class NovoDateTimePickerInputElement implements ControlValueAccessor {\n    element: ElementRef;\n    labels: NovoLabelService;\n    private _changeDetectorRef;\n    value: any;\n    datePart: any;\n    timePart: any;\n    /** View -> model callback called when value changes */\n    _onChange: (value: any) => void;\n    /** View -> model callback called when autocomplete has been touched */\n    _onTouched: () => void;\n    name: string;\n    start: Date;\n    end: Date;\n    placeholder: string;\n    maskOptions: any;\n    military: boolean;\n    disabled: boolean;\n    format: string;\n    weekStart: number;\n    blurEvent: EventEmitter<FocusEvent>;\n    focusEvent: EventEmitter<FocusEvent>;\n    changeEvent: EventEmitter<FocusEvent>;\n    constructor(element: ElementRef, labels: NovoLabelService, _changeDetectorRef: ChangeDetectorRef);\n    writeValue(value: any): void;\n    updateDate(event: any): void;\n    updateTime(event: any): void;\n    handleBlur(event: any): void;\n    handleFocus(event: any): void;\n    checkParts(): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(disabled: boolean): void;\n    dispatchOnChange(newValue?: any): void;\n    private _setTriggerValue;\n    setValue(event: any | null): void;\n    setValueAndClose(event: any | null): void;\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    clearValue(): void;\n    get hasValue(): boolean;\n}\n"]}