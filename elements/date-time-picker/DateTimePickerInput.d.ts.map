{"version":3,"file":"DateTimePickerInput.d.ts","sources":["DateTimePickerInput.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nexport declare class NovoDateTimePickerInputElement implements ControlValueAccessor {\r\n    element: ElementRef;\r\n    labels: NovoLabelService;\r\n    private _changeDetectorRef;\r\n    value: any;\r\n    datePart: any;\r\n    timePart: any;\r\n    /** View -> model callback called when value changes */\r\n    _onChange: (value: any) => void;\r\n    /** View -> model callback called when autocomplete has been touched */\r\n    _onTouched: () => void;\r\n    name: string;\r\n    start: Date;\r\n    end: Date;\r\n    placeholder: string;\r\n    maskOptions: any;\r\n    military: boolean;\r\n    disabled: boolean;\r\n    format: string;\r\n    weekStart: number;\r\n    blurEvent: EventEmitter<FocusEvent>;\r\n    focusEvent: EventEmitter<FocusEvent>;\r\n    changeEvent: EventEmitter<FocusEvent>;\r\n    constructor(element: ElementRef, labels: NovoLabelService, _changeDetectorRef: ChangeDetectorRef);\r\n    writeValue(value: any): void;\r\n    updateDate(event: any): void;\r\n    updateTime(event: any): void;\r\n    handleBlur(event: any): void;\r\n    handleFocus(event: any): void;\r\n    checkParts(): void;\r\n    registerOnChange(fn: (value: any) => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    setDisabledState(disabled: boolean): void;\r\n    dispatchOnChange(newValue?: any): void;\r\n    private _setTriggerValue;\r\n    setValue(event: any | null): void;\r\n    setValueAndClose(event: any | null): void;\r\n    /**\r\n     * Clear any previous selected option and emit a selection change event for this option\r\n     */\r\n    clearValue(): void;\r\n    get hasValue(): boolean;\r\n}\r\n"]}