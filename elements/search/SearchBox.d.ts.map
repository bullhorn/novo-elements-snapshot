{"version":3,"file":"SearchBox.d.ts","sources":["SearchBox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nexport declare class NovoSearchBoxElement implements ControlValueAccessor {\r\n    element: ElementRef;\r\n    labels: NovoLabelService;\r\n    private _changeDetectorRef;\r\n    private _zone;\r\n    name: string;\r\n    icon: string;\r\n    placeholder: string;\r\n    alwaysOpen: boolean;\r\n    theme: string;\r\n    closeOnSelect: boolean;\r\n    displayField: string;\r\n    displayValue: string;\r\n    hint: string;\r\n    searchChanged: EventEmitter<string>;\r\n    focused: boolean;\r\n    value: any;\r\n    /** View -> model callback called when value changes */\r\n    _onChange: (value: any) => void;\r\n    /** View -> model callback called when autocomplete has been touched */\r\n    _onTouched: () => void;\r\n    /** Element for the panel containing the autocomplete options. */\r\n    overlay: any;\r\n    input: any;\r\n    private debounceSearchChange;\r\n    constructor(element: ElementRef, labels: NovoLabelService, _changeDetectorRef: ChangeDetectorRef, _zone: NgZone);\r\n    /**\r\n     * @name showFasterFind\r\n     * @description This function shows the picker and adds the active class (for animation)\r\n     */\r\n    showSearch(event?: any, forceClose?: boolean): void;\r\n    onFocus(): void;\r\n    onBlur(): void;\r\n    /** BEGIN: Convenient Panel Methods. */\r\n    openPanel(): void;\r\n    closePanel(): void;\r\n    get panelOpen(): boolean;\r\n    get active(): boolean;\r\n    /** END: Convenient Panel Methods. */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    _handleInput(event: KeyboardEvent): void;\r\n    writeValue(value: any): void;\r\n    registerOnChange(fn: (value: any) => {}): void;\r\n    registerOnTouched(fn: () => {}): void;\r\n    private _setValue;\r\n    /**\r\n     * This method closes the panel, and if a value is specified, also sets the associated\r\n     * control to that value. It will also mark the control as dirty if this interaction\r\n     * stemmed from the user.\r\n     */\r\n    setValueAndClose(event: any | null): void;\r\n    /**\r\n     * Clear any previous selected option and emit a selection change event for this option\r\n     */\r\n    clearValue(skip: any): void;\r\n}\r\n"]}