{"version":3,"file":"SearchBox.d.ts","sources":["SearchBox.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NovoLabelService } from '../../services/novo-label-service';\nexport declare class NovoSearchBoxElement implements ControlValueAccessor {\n    element: ElementRef;\n    labels: NovoLabelService;\n    private _changeDetectorRef;\n    private _zone;\n    name: string;\n    icon: string;\n    placeholder: string;\n    alwaysOpen: boolean;\n    theme: string;\n    closeOnSelect: boolean;\n    displayField: string;\n    displayValue: string;\n    hint: string;\n    searchChanged: EventEmitter<string>;\n    focused: boolean;\n    value: any;\n    /** View -> model callback called when value changes */\n    _onChange: (value: any) => void;\n    /** View -> model callback called when autocomplete has been touched */\n    _onTouched: () => void;\n    /** Element for the panel containing the autocomplete options. */\n    overlay: any;\n    input: any;\n    private debounceSearchChange;\n    constructor(element: ElementRef, labels: NovoLabelService, _changeDetectorRef: ChangeDetectorRef, _zone: NgZone);\n    /**\n     * @name showFasterFind\n     * @description This function shows the picker and adds the active class (for animation)\n     */\n    showSearch(event?: any, forceClose?: boolean): void;\n    onFocus(): void;\n    onBlur(): void;\n    /** BEGIN: Convenient Panel Methods. */\n    openPanel(): void;\n    closePanel(): void;\n    get panelOpen(): boolean;\n    get active(): boolean;\n    /** END: Convenient Panel Methods. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _handleInput(event: KeyboardEvent): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    private _setValue;\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    setValueAndClose(event: any | null): void;\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    clearValue(skip: any): void;\n}\n"]}