{"version":3,"file":"Table.d.ts","sources":["Table.d.ts"],"names":[],"mappingssourcesContent":["import { DoCheck, ElementRef, EventEmitter, QueryList } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\nimport { PagedArrayCollection } from '../../services/data-provider/PagedArrayCollection';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { FormUtils } from '../../utils/form-utils/FormUtils';\nexport interface NovoTableConfig {\n    paging?: {\n        current: number;\n        itemsPerPage: number;\n        onPageChange: Function;\n        rowOptions?: {\n            value: number;\n            label: string;\n        }[];\n        disablePageSelection?: boolean;\n    };\n    footers?: Array<{\n        columns: Array<string>;\n        method: string;\n        labelColumn: string;\n        label: string;\n    }>;\n    filtering?: boolean | any;\n    sorting?: boolean | any;\n    ordering?: boolean | Function;\n    resizing?: boolean | Function;\n    rowSelectionStyle?: string;\n    rowSelect?: boolean;\n    hasDetails?: boolean;\n    detailsRenderer?: any;\n    expandAll?: boolean;\n    selectAllEnabled?: boolean;\n}\nexport declare enum NovoTableMode {\n    VIEW = 1,\n    EDIT = 2\n}\nexport declare class NovoTableElement implements DoCheck {\n    labels: NovoLabelService;\n    private formUtils;\n    private builder;\n    filterInputs: QueryList<ElementRef>;\n    config: NovoTableConfig;\n    columns: Array<any>;\n    theme: string;\n    skipSortAndFilterClear: boolean;\n    mode: NovoTableMode;\n    editable: boolean;\n    rowIdentifier: string;\n    name: string;\n    onRowClick: EventEmitter<any>;\n    onRowSelect: EventEmitter<any>;\n    onTableChange: EventEmitter<any>;\n    _dataProvider: PagedArrayCollection<any>;\n    _rows: Array<any>;\n    selected: Array<any>;\n    activeId: number;\n    master: boolean;\n    expandAll: boolean;\n    indeterminate: boolean;\n    lastPage: number;\n    selectedPageCount: number;\n    showSelectAllMessage: boolean;\n    currentSortColumn: any;\n    pagedData: Array<any>;\n    pageSelected: any;\n    toggledDropdownMap: any;\n    NovoTableMode: typeof NovoTableMode;\n    tableForm: FormGroup;\n    toast: {\n        theme: string;\n        icon: string;\n        message: string;\n    };\n    footers: any[];\n    grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast: boolean;\n    loading: boolean;\n    set rows(rows: Array<any>);\n    get rows(): Array<any>;\n    set dataProvider(dp: any);\n    get dataProvider(): any;\n    get editing(): boolean;\n    get formValue(): any;\n    constructor(labels: NovoLabelService, formUtils: FormUtils, builder: FormBuilder);\n    onDropdownToggled(event: any, column: any): void;\n    focusInput(): void;\n    onPageChange(event: any): void;\n    getOptionDataAutomationId(option: any): any;\n    setupColumnDefaults(): void;\n    ngDoCheck(): void;\n    getPageStart(): number;\n    getPageEnd(): number;\n    getRowControlForm(i: any): AbstractControl;\n    onFilterClick(column: any, filter: any): void;\n    onFilterClear(column: any): void;\n    clearAllSortAndFilters(): void;\n    /**\n     * @description This method updates the row data to reflect the active filters.\n     */\n    onFilterChange(event?: Event): void;\n    escapeCharacters(filter: any): any;\n    isFilterActive(column: any, filter: any): boolean;\n    onSortChange(column: any): void;\n    fireTableChangeEvent(): void;\n    findColumnIndex(value: any): number;\n    onOrderChange(event: any): void;\n    expandAllOnPage(expanded: any): void;\n    selectPage(data?: any): void;\n    selectAll(value: any): void;\n    rowSelectHandler(data?: any): void;\n    emitSelected(selected: any): void;\n    rowClickHandler(row: any): void;\n    getDefaultOptions(column: any): any[];\n    onCalenderSelect(column: any, event: any): void;\n    onFilterKeywords(config: any): void;\n    /**\n     * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states\n     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode\n     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode\n     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode\n     * @memberOf NovoTableElement\n     */\n    setTableEdit(rowNumber?: number, columnNumber?: number): void;\n    /**\n     * @description Leaves edit mode for the Table and puts everything back to VIEW only\n     * @memberOf NovoTableElement\n     * @param cancel - whether or not to save data or undo\n     */\n    private leaveEditMode;\n    /**\n     * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template\n     * @memberOf NovoTableElement\n     */\n    addEditableRow(defaultValue?: any): void;\n    /**\n     * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.\n     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:\n     * { id: ID_OF_RECORD, key: value } -- data that was updated\n     * { id: undefined, key: value } -- data that was added\n     * @memberOf NovoTableElement\n     */\n    validateAndGetUpdatedData(): {\n        changed?: any[];\n        errors?: {\n            errors: any;\n            row: any;\n            index: number;\n        }[];\n    };\n    /**\n     * @description Refresh the data provider and leave edit mode\n     * @memberOf NovoTableElement\n     */\n    cancelEditing(): void;\n    /**\n     * @description Refresh the data provider and leave edit mode\n     * @memberOf NovoTableElement\n     */\n    saveChanges(): void;\n    /**\n     * @description Displays a toast message inside of the table\n     * @memberOf NovoTableElement\n     */\n    displayToastMessage(toast: {\n        icon: string;\n        theme: string;\n        message: string;\n    }, hideDelay?: number): void;\n    /**\n     * @description Force hide the toast message\n     * @memberOf NovoTableElement\n     */\n    hideToastMessage(): void;\n    /**\n     * @description display the loading overlay on the table\n     * @memberOf NovoTableElement\n     */\n    toggleLoading(show: boolean): void;\n    /**\n     * @description hide a column in edit or view mode\n     * @memberOf NovoTableElement\n     */\n    isColumnHidden(column: any): boolean;\n}\n"]}