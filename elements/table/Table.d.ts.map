{"version":3,"file":"Table.d.ts","sources":["Table.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DoCheck, ElementRef, EventEmitter, QueryList } from '@angular/core';\r\nimport { AbstractControl, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { PagedArrayCollection } from '../../services/data-provider/PagedArrayCollection';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { FormUtils } from '../../utils/form-utils/FormUtils';\r\nexport interface NovoTableConfig {\r\n    paging?: {\r\n        current: number;\r\n        itemsPerPage: number;\r\n        onPageChange: Function;\r\n        rowOptions?: {\r\n            value: number;\r\n            label: string;\r\n        }[];\r\n        disablePageSelection?: boolean;\r\n    };\r\n    footers?: Array<{\r\n        columns: Array<string>;\r\n        method: string;\r\n        labelColumn: string;\r\n        label: string;\r\n    }>;\r\n    filtering?: boolean | any;\r\n    sorting?: boolean | any;\r\n    ordering?: boolean | Function;\r\n    resizing?: boolean | Function;\r\n    rowSelectionStyle?: string;\r\n    rowSelect?: boolean;\r\n    hasDetails?: boolean;\r\n    detailsRenderer?: any;\r\n    expandAll?: boolean;\r\n    selectAllEnabled?: boolean;\r\n}\r\nexport declare enum NovoTableMode {\r\n    VIEW = 1,\r\n    EDIT = 2\r\n}\r\nexport declare class NovoTableElement implements DoCheck {\r\n    labels: NovoLabelService;\r\n    private formUtils;\r\n    private builder;\r\n    filterInputs: QueryList<ElementRef>;\r\n    config: NovoTableConfig;\r\n    columns: Array<any>;\r\n    theme: string;\r\n    skipSortAndFilterClear: boolean;\r\n    mode: NovoTableMode;\r\n    editable: boolean;\r\n    rowIdentifier: string;\r\n    name: string;\r\n    onRowClick: EventEmitter<any>;\r\n    onRowSelect: EventEmitter<any>;\r\n    onTableChange: EventEmitter<any>;\r\n    _dataProvider: PagedArrayCollection<any>;\r\n    _rows: Array<any>;\r\n    selected: Array<any>;\r\n    activeId: number;\r\n    master: boolean;\r\n    expandAll: boolean;\r\n    indeterminate: boolean;\r\n    lastPage: number;\r\n    selectedPageCount: number;\r\n    showSelectAllMessage: boolean;\r\n    currentSortColumn: any;\r\n    pagedData: Array<any>;\r\n    pageSelected: any;\r\n    toggledDropdownMap: any;\r\n    NovoTableMode: typeof NovoTableMode;\r\n    tableForm: FormGroup;\r\n    toast: {\r\n        theme: string;\r\n        icon: string;\r\n        message: string;\r\n    };\r\n    footers: any[];\r\n    grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast: boolean;\r\n    loading: boolean;\r\n    set rows(rows: Array<any>);\r\n    get rows(): Array<any>;\r\n    set dataProvider(dp: any);\r\n    get dataProvider(): any;\r\n    get editing(): boolean;\r\n    get formValue(): any;\r\n    constructor(labels: NovoLabelService, formUtils: FormUtils, builder: FormBuilder);\r\n    onDropdownToggled(event: any, column: any): void;\r\n    focusInput(): void;\r\n    onPageChange(event: any): void;\r\n    getOptionDataAutomationId(option: any): any;\r\n    setupColumnDefaults(): void;\r\n    ngDoCheck(): void;\r\n    getPageStart(): number;\r\n    getPageEnd(): number;\r\n    getRowControlForm(i: any): AbstractControl;\r\n    onFilterClick(column: any, filter: any): void;\r\n    onFilterClear(column: any): void;\r\n    clearAllSortAndFilters(): void;\r\n    /**\r\n     * @description This method updates the row data to reflect the active filters.\r\n     */\r\n    onFilterChange(event?: Event): void;\r\n    escapeCharacters(filter: any): any;\r\n    isFilterActive(column: any, filter: any): boolean;\r\n    onSortChange(column: any): void;\r\n    fireTableChangeEvent(): void;\r\n    findColumnIndex(value: any): number;\r\n    onOrderChange(event: any): void;\r\n    expandAllOnPage(expanded: any): void;\r\n    selectPage(data?: any): void;\r\n    selectAll(value: any): void;\r\n    rowSelectHandler(data?: any): void;\r\n    emitSelected(selected: any): void;\r\n    rowClickHandler(row: any): void;\r\n    getDefaultOptions(column: any): any[];\r\n    onCalenderSelect(column: any, event: any): void;\r\n    onFilterKeywords(config: any): void;\r\n    /**\r\n     * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states\r\n     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode\r\n     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode\r\n     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode\r\n     * @memberOf NovoTableElement\r\n     */\r\n    setTableEdit(rowNumber?: number, columnNumber?: number): void;\r\n    /**\r\n     * @description Leaves edit mode for the Table and puts everything back to VIEW only\r\n     * @memberOf NovoTableElement\r\n     * @param cancel - whether or not to save data or undo\r\n     */\r\n    private leaveEditMode;\r\n    /**\r\n     * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template\r\n     * @memberOf NovoTableElement\r\n     */\r\n    addEditableRow(defaultValue?: any): void;\r\n    /**\r\n     * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.\r\n     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:\r\n     * { id: ID_OF_RECORD, key: value } -- data that was updated\r\n     * { id: undefined, key: value } -- data that was added\r\n     * @memberOf NovoTableElement\r\n     */\r\n    validateAndGetUpdatedData(): {\r\n        changed?: any[];\r\n        errors?: {\r\n            errors: any;\r\n            row: any;\r\n            index: number;\r\n        }[];\r\n    };\r\n    /**\r\n     * @description Refresh the data provider and leave edit mode\r\n     * @memberOf NovoTableElement\r\n     */\r\n    cancelEditing(): void;\r\n    /**\r\n     * @description Refresh the data provider and leave edit mode\r\n     * @memberOf NovoTableElement\r\n     */\r\n    saveChanges(): void;\r\n    /**\r\n     * @description Displays a toast message inside of the table\r\n     * @memberOf NovoTableElement\r\n     */\r\n    displayToastMessage(toast: {\r\n        icon: string;\r\n        theme: string;\r\n        message: string;\r\n    }, hideDelay?: number): void;\r\n    /**\r\n     * @description Force hide the toast message\r\n     * @memberOf NovoTableElement\r\n     */\r\n    hideToastMessage(): void;\r\n    /**\r\n     * @description display the loading overlay on the table\r\n     * @memberOf NovoTableElement\r\n     */\r\n    toggleLoading(show: boolean): void;\r\n    /**\r\n     * @description hide a column in edit or view mode\r\n     * @memberOf NovoTableElement\r\n     */\r\n    isColumnHidden(column: any): boolean;\r\n}\r\n"]}