{"version":3,"file":"Select.d.ts","sources":["Select.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { NovoOverlayTemplateComponent } from '../overlay/Overlay';\r\nexport declare class NovoSelectElement implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\r\n    element: ElementRef;\r\n    labels: NovoLabelService;\r\n    ref: ChangeDetectorRef;\r\n    private focusMonitor;\r\n    private ngZone;\r\n    name: string;\r\n    options: Array<any>;\r\n    placeholder: string;\r\n    readonly: boolean;\r\n    headerConfig: any;\r\n    onSelect: EventEmitter<any>;\r\n    selectedIndex: number;\r\n    empty: boolean;\r\n    header: any;\r\n    createdItem: any;\r\n    selected: any;\r\n    model: any;\r\n    onModelChange: Function;\r\n    onModelTouched: Function;\r\n    filterTerm: string;\r\n    filterTermTimeout: any;\r\n    filteredOptions: any;\r\n    disabled: boolean;\r\n    /** Element for the panel containing the autocomplete options. */\r\n    overlay: NovoOverlayTemplateComponent;\r\n    dropdown: ElementRef;\r\n    constructor(element: ElementRef, labels: NovoLabelService, ref: ChangeDetectorRef, focusMonitor: FocusMonitor, ngZone: NgZone);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes?: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** BEGIN: Convienient Panel Methods. */\r\n    openPanel(): void;\r\n    closePanel(): void;\r\n    togglePanel(): void;\r\n    get panelOpen(): boolean;\r\n    /** END: Convenient Panel Methods. */\r\n    /**\r\n     * This method closes the panel, and if a value is specified, also sets the associated\r\n     * control to that value. It will also mark the control as dirty if this interaction\r\n     * stemmed from the user.\r\n     */\r\n    setValueAndClose(event: any | null): void;\r\n    select(option: any, i: any, fireEvents?: boolean): void;\r\n    clear(): void;\r\n    onKeyDown(event: KeyboardEvent): void;\r\n    scrollToSelected(): void;\r\n    scrollToIndex(index: number): void;\r\n    toggleHeader(event: any, forceValue?: boolean): void;\r\n    highlight(match: any, query: any): any;\r\n    escapeRegexp(queryToEscape: any): any;\r\n    saveHeader(): void;\r\n    writeValue(model: any): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n    setDisabledState(disabled: boolean): void;\r\n}\r\n"]}