{"version":3,"file":"Select.d.ts","sources":["Select.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { FocusMonitor } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { NovoOverlayTemplateComponent } from '../overlay/Overlay';\nexport declare class NovoSelectElement implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {\n    element: ElementRef;\n    labels: NovoLabelService;\n    ref: ChangeDetectorRef;\n    private focusMonitor;\n    private ngZone;\n    name: string;\n    options: Array<any>;\n    placeholder: string;\n    readonly: boolean;\n    headerConfig: any;\n    onSelect: EventEmitter<any>;\n    selectedIndex: number;\n    empty: boolean;\n    header: any;\n    createdItem: any;\n    selected: any;\n    model: any;\n    onModelChange: Function;\n    onModelTouched: Function;\n    filterTerm: string;\n    filterTermTimeout: any;\n    filteredOptions: any;\n    disabled: boolean;\n    /** Element for the panel containing the autocomplete options. */\n    overlay: NovoOverlayTemplateComponent;\n    dropdown: ElementRef;\n    constructor(element: ElementRef, labels: NovoLabelService, ref: ChangeDetectorRef, focusMonitor: FocusMonitor, ngZone: NgZone);\n    ngOnInit(): void;\n    ngOnChanges(changes?: SimpleChanges): void;\n    ngOnDestroy(): void;\n    /** BEGIN: Convienient Panel Methods. */\n    openPanel(): void;\n    closePanel(): void;\n    togglePanel(): void;\n    get panelOpen(): boolean;\n    /** END: Convenient Panel Methods. */\n    /**\n     * If the item is not disabled, this method closes the panel, and if a value is specified,\n     * also sets the associated control to that value. It will also mark the control as dirty\n     * if this interaction stemmed from the user.\n     */\n    setValueAndClose(event: any | null): void;\n    select(option: any, i: any, fireEvents?: boolean): void;\n    clear(): void;\n    onKeyDown(event: KeyboardEvent): void;\n    scrollToSelected(): void;\n    scrollToIndex(index: number): void;\n    toggleHeader(event: any, forceValue?: boolean): void;\n    highlight(match: any, query: any): any;\n    escapeRegexp(queryToEscape: any): any;\n    saveHeader(): void;\n    writeValue(model: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(disabled: boolean): void;\n}\n"]}