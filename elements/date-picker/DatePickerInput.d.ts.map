{"version":3,"file":"DatePickerInput.d.ts","sources":["DatePickerInput.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, OnInit, EventEmitter } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NovoOverlayTemplateComponent } from '../overlay/Overlay';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { DateFormatService } from '../../services/date-format/DateFormat';\nexport declare class NovoDatePickerInputElement implements OnInit, ControlValueAccessor {\n    element: ElementRef;\n    labels: NovoLabelService;\n    private _changeDetectorRef;\n    dateFormatService: DateFormatService;\n    value: any;\n    formattedValue: string;\n    private userDefinedFormat;\n    /** View -> model callback called when value changes */\n    _onChange: (value: any) => void;\n    /** View -> model callback called when autocomplete has been touched */\n    _onTouched: () => void;\n    name: string;\n    start: Date;\n    end: Date;\n    placeholder: string;\n    maskOptions: any;\n    format: string;\n    textMaskEnabled: boolean;\n    allowInvalidDate: boolean;\n    disabled: boolean;\n    weekStart: number;\n    blurEvent: EventEmitter<FocusEvent>;\n    focusEvent: EventEmitter<FocusEvent>;\n    changeEvent: EventEmitter<FocusEvent>;\n    /** Element for the panel containing the autocomplete options. */\n    overlay: NovoOverlayTemplateComponent;\n    constructor(element: ElementRef, labels: NovoLabelService, _changeDetectorRef: ChangeDetectorRef, dateFormatService: DateFormatService);\n    ngOnInit(): void;\n    /** BEGIN: Convenient Panel Methods. */\n    openPanel(): void;\n    closePanel(): void;\n    get panelOpen(): boolean;\n    /** END: Convenient Panel Methods. */\n    _handleKeydown(event: KeyboardEvent): void;\n    _handleInput(event: KeyboardEvent): void;\n    _handleBlur(event: FocusEvent): void;\n    _handleFocus(event: FocusEvent): void;\n    _handleEvent(event: Event, blur: boolean): void;\n    protected formatDate(value: string, blur: boolean): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (value: any) => {}): void;\n    registerOnTouched(fn: () => {}): void;\n    setDisabledState(disabled: boolean): void;\n    dispatchOnChange(newValue?: any, blur?: boolean, skip?: boolean): void;\n    private _setTriggerValue;\n    private _setCalendarValue;\n    private _setFormValue;\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    setValueAndClose(event: any | null): void;\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    clearValue(): void;\n    formatDateValue(value: any): any;\n    get hasValue(): boolean;\n}\n"]}