{"version":3,"file":"DatePicker.d.ts","sources":["DatePicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnInit, OnChanges, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NovoLabelService } from '../../services/novo-label-service';\nexport interface RangeModal {\n    startDate: Date;\n    endDate: Date;\n}\nexport declare type modelTypes = Date | RangeModal;\nexport interface Day {\n    date: Date;\n    isCurrentMonth?: boolean;\n    isToday?: boolean;\n    name?: string;\n    number?: string | number;\n}\nexport declare type rangeSelectModes = 'startDate' | 'endDate';\nexport declare class NovoDatePickerElement implements ControlValueAccessor, OnInit, OnChanges {\n    labels: NovoLabelService;\n    private element;\n    minYear: string | number;\n    maxYear: string | number;\n    start: Date;\n    end: Date;\n    inline: boolean;\n    range: boolean;\n    weekRangeSelect: boolean;\n    weekStart: number;\n    onSelect: EventEmitter<any>;\n    weekdays: string[];\n    months: string[];\n    years: Array<any>;\n    view: string;\n    heading: any;\n    model: modelTypes;\n    month: Date;\n    monthLabel: string;\n    weeks: any;\n    selected: Date;\n    selectedLabel: string;\n    selected2: Date;\n    selected2Label: string;\n    hoverDay: any;\n    rangeSelectMode: rangeSelectModes;\n    _onChange: Function;\n    _onTouched: Function;\n    constructor(labels: NovoLabelService, element: ElementRef);\n    ngOnInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    setupWeekdays(): string[];\n    isSelectingRange(range: any, day: any, selected: any, selected2: any, hoverDay: any, rangeSelectMode: any, weekRangeSelect: any): boolean;\n    isEndFill(range: any, day: any, selected: any, selected2: any): boolean;\n    isStartFill(range: any, day: any, selected: any, selected2: any): boolean;\n    isFiller(range: any, day: any, selected: any, selected2: any): boolean;\n    isSelected(range: any, day: any, selected: any, selected2: any): boolean;\n    isDisabled(day: any, start: any, end: any): boolean;\n    updateView(date: any, fireEvents: boolean, markedSelected: boolean): void;\n    setToday(): void;\n    clearRange(): void;\n    setMonth(month: number): void;\n    setYear(year: number): void;\n    select(event: Event, day: Day, fireEvents: boolean): void;\n    fireRangeSelect(): void;\n    open(event: Event, type: string): void;\n    prevMonth(event: Event): void;\n    nextMonth(event: Event): void;\n    updateHeading(): void;\n    /**\n     * Remove the time aspect of the date\n     * @returns with time stripped out\n     */\n    removeTime(date: any): Date;\n    buildMonth(start: Date, month: Date): void;\n    buildWeek(date: Date, month: Date): Array<Object>;\n    toggleRangeSelect(range: rangeSelectModes): void;\n    rangeHover(event: Event, day: Day): void;\n    writeValue(model: modelTypes): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n}\n"]}