{"version":3,"file":"DatePicker.d.ts","sources":["DatePicker.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnInit, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nexport interface RangeModal {\r\n    startDate: Date;\r\n    endDate: Date;\r\n}\r\nexport declare type modelTypes = Date | RangeModal;\r\nexport interface Day {\r\n    date: Date;\r\n    isCurrentMonth?: boolean;\r\n    isToday?: boolean;\r\n    name?: string;\r\n    number?: string | number;\r\n}\r\nexport declare type rangeSelectModes = 'startDate' | 'endDate';\r\nexport declare class NovoDatePickerElement implements ControlValueAccessor, OnInit, OnChanges {\r\n    labels: NovoLabelService;\r\n    private element;\r\n    minYear: string | number;\r\n    maxYear: string | number;\r\n    start: Date;\r\n    end: Date;\r\n    inline: boolean;\r\n    range: boolean;\r\n    weekRangeSelect: boolean;\r\n    weekStart: number;\r\n    onSelect: EventEmitter<any>;\r\n    weekdays: string[];\r\n    months: string[];\r\n    years: Array<any>;\r\n    view: string;\r\n    heading: any;\r\n    model: modelTypes;\r\n    month: Date;\r\n    monthLabel: string;\r\n    weeks: any;\r\n    selected: Date;\r\n    selectedLabel: string;\r\n    selected2: Date;\r\n    selected2Label: string;\r\n    hoverDay: any;\r\n    rangeSelectMode: rangeSelectModes;\r\n    _onChange: Function;\r\n    _onTouched: Function;\r\n    constructor(labels: NovoLabelService, element: ElementRef);\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    setupWeekdays(): string[];\r\n    isSelectingRange(range: any, day: any, selected: any, selected2: any, hoverDay: any, rangeSelectMode: any, weekRangeSelect: any): boolean;\r\n    isEndFill(range: any, day: any, selected: any, selected2: any): boolean;\r\n    isStartFill(range: any, day: any, selected: any, selected2: any): boolean;\r\n    isFiller(range: any, day: any, selected: any, selected2: any): boolean;\r\n    isSelected(range: any, day: any, selected: any, selected2: any): boolean;\r\n    isDisabled(day: any, start: any, end: any): boolean;\r\n    updateView(date: any, fireEvents: boolean, markedSelected: boolean): void;\r\n    setToday(): void;\r\n    clearRange(): void;\r\n    setMonth(month: number): void;\r\n    setYear(year: number): void;\r\n    select(event: Event, day: Day, fireEvents: boolean): void;\r\n    fireRangeSelect(): void;\r\n    open(event: Event, type: string): void;\r\n    prevMonth(event: Event): void;\r\n    nextMonth(event: Event): void;\r\n    updateHeading(): void;\r\n    /**\r\n     * Remove the time aspect of the date\r\n     * @returns with time stripped out\r\n     */\r\n    removeTime(date: any): Date;\r\n    buildMonth(start: Date, month: Date): void;\r\n    buildWeek(date: Date, month: Date): Array<Object>;\r\n    toggleRangeSelect(range: rangeSelectModes): void;\r\n    rangeHover(event: Event, day: Day): void;\r\n    writeValue(model: modelTypes): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n}\r\n"]}