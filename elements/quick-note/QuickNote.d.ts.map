{"version":3,"file":"QuickNote.d.ts","sources":["QuickNote.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ElementRef, ViewContainerRef, OnInit, AfterViewInit, OnDestroy, NgZone } from '@angular/core';\nimport { OutsideClick } from './../../utils/outside-click/OutsideClick';\nimport { ComponentUtils } from './../../utils/component-utils/ComponentUtils';\nexport declare class QuickNoteElement extends OutsideClick implements OnInit, OnDestroy, AfterViewInit {\n    private zone;\n    private componentUtils;\n    wrapper: ElementRef;\n    host: ElementRef;\n    results: ViewContainerRef;\n    config: any;\n    startupFocus: boolean;\n    placeholder: string;\n    focus: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    change: EventEmitter<any>;\n    private resultsComponent;\n    private quickNoteResults;\n    private isTagging;\n    private taggingMode;\n    private model;\n    private ckeInstance;\n    private debounceTimeout;\n    private placeholderVisible;\n    private _placeholderElement;\n    private static TOOLBAR_HEIGHT;\n    private onModelChange;\n    private onModelTouched;\n    constructor(zone: NgZone, element: ElementRef, componentUtils: ComponentUtils);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Connect to key/mouse events from CKEditor after the editor has been initialized\n     */\n    ngAfterViewInit(): void;\n    onTouched(event?: any): void;\n    /**\n     * Handles setting the model and the view from the outside caller or the user's typing\n     *\n     * @param model A model that has a note (html content) and references (array of objects)\n     */\n    writeValue(model: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    /**\n     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href\n     */\n    private static defaultRenderer;\n    /**\n     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.\n     */\n    private getRenderer;\n    /**\n     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)\n     * to handle certain behaviors of the picker.\n     *\n     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the\n     * Angular zone of this class.\n     *\n     * @param event The key press event\n     * @return true to allow the event to occur, false to cancel the event\n     */\n    private onKey;\n    /**\n     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.\n     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.\n     */\n    private onValueChange;\n    /**\n     * Creates an instance of the results (called popup) and adds all the bindings to that instance.\n     */\n    private showResults;\n    /**\n     * Deletes the picker results from the DOM.\n     */\n    private hideResults;\n    /**\n     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's\n     * parent (this element).\n     *\n     * @param taggingMode - type of tags we are looking for\n     * @param selected - selected object from the picker that has a label and value\n     */\n    private onSelected;\n    /**\n     * Convenience method that gets the current word that the cursor is on, minus the tag.\n     * Also, trims any whitespace before/after the term to aid in searching.\n     */\n    private getSearchTerm;\n    /**\n     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a\n     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.\n     *\n     * @returns plain text string (removes all html formatting)\n     */\n    private getWordAtCursor;\n    /**\n     * Replaces the word that the user is on with the given html.\n     *\n     * CKEditor gives us access to the current line of html in the editor, so we replace the content of\n     * the line, replacing only the current word.\n     */\n    private replaceWordAtCursor;\n    /**\n     * Returns current references, minus any from the model that have been removed from the editor.\n     */\n    private validateReferences;\n    /**\n     * Configures the CKEditor for QuickNote functionality.\n     *\n     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.\n     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.\n     * Removes plugins and turns off setting to allow browser based spell checking.\n     */\n    private getCKEditorConfig;\n    /**\n     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.\n     */\n    private getCursorPosition;\n    /**\n     * Positions the results dropdown based on the location of the cursor in the text field\n     */\n    private positionResultsDropdown;\n    /**\n     * Returns the height in pixels of the content area - the text that the user has entered.\n     */\n    private getContentHeight;\n    /**\n     * Show the placeholder text if the editor is empty\n     */\n    private showPlaceholder;\n    /**\n     * Hide the placeholder text by removing the placeholder element from the DOM\n     */\n    private hidePlaceholder;\n    /**\n     * Get or create the single placeholder object that is constructed only when needed.\n     */\n    private get placeholderElement();\n}\n"]}