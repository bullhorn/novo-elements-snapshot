{"version":3,"file":"Address.d.ts","sources":["Address.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { NovoLabelService } from '../../../../services/novo-label-service';\nexport interface NovoAddressSubfieldConfig {\n    label: string;\n    required: boolean;\n    maxlength: number;\n    pickerConfig?: any;\n    hidden: boolean;\n    updated?: boolean;\n    readOnly?: boolean;\n}\nexport interface NovoAddressConfig {\n    required?: boolean;\n    readOnly?: boolean;\n    address1?: NovoAddressSubfieldConfig;\n    address2?: NovoAddressSubfieldConfig;\n    city?: NovoAddressSubfieldConfig;\n    state?: NovoAddressSubfieldConfig;\n    zip?: NovoAddressSubfieldConfig;\n    countryID?: NovoAddressSubfieldConfig;\n}\nexport declare class NovoAddressElement implements ControlValueAccessor, OnInit {\n    labels: NovoLabelService;\n    config: NovoAddressConfig;\n    private _readOnly;\n    set readOnly(readOnly: boolean);\n    get readOnly(): boolean;\n    states: Array<any>;\n    fieldList: Array<string>;\n    model: any;\n    onModelChange: Function;\n    onModelTouched: Function;\n    focused: any;\n    invalid: any;\n    disabled: any;\n    invalidMaxlength: any;\n    valid: any;\n    stateOptions: any;\n    tooltip: any;\n    initComplete: boolean;\n    change: EventEmitter<any>;\n    focus: EventEmitter<any>;\n    blur: EventEmitter<any>;\n    validityChange: EventEmitter<any>;\n    constructor(labels: NovoLabelService);\n    ngOnInit(): void;\n    initConfig(): void;\n    isValid(field: string): void;\n    isInvalid(field: string): void;\n    onInput(event: Event, field: string): void;\n    isFocused(event: Event, field: string): void;\n    isBlurred(event: Event, field: string): void;\n    onCountryChange(evt: any): void;\n    onStateChange(evt: any): void;\n    setStateLabel(model: any): void;\n    updateStates(): void;\n    getStateOptions(filter: string, countryID: number): string[];\n    updateControl(): void;\n    writeValue(model: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    private getDefaultStateConfig;\n    private getDefaultCountryConfig;\n}\n"]}