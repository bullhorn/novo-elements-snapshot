{"version":3,"file":"Address.d.ts","sources":["Address.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { EventEmitter, OnInit } from '@angular/core';\r\nimport { ControlValueAccessor } from '@angular/forms';\r\nimport { NovoLabelService } from '../../../../services/novo-label-service';\r\nexport interface NovoAddressSubfieldConfig {\r\n    label: string;\r\n    required: boolean;\r\n    maxlength: number;\r\n    pickerConfig?: any;\r\n    hidden: boolean;\r\n    updated?: boolean;\r\n    readOnly?: boolean;\r\n}\r\nexport interface NovoAddressConfig {\r\n    required?: boolean;\r\n    readOnly?: boolean;\r\n    address1?: NovoAddressSubfieldConfig;\r\n    address2?: NovoAddressSubfieldConfig;\r\n    city?: NovoAddressSubfieldConfig;\r\n    state?: NovoAddressSubfieldConfig;\r\n    zip?: NovoAddressSubfieldConfig;\r\n    countryID?: NovoAddressSubfieldConfig;\r\n}\r\nexport declare class NovoAddressElement implements ControlValueAccessor, OnInit {\r\n    labels: NovoLabelService;\r\n    config: NovoAddressConfig;\r\n    private _readOnly;\r\n    set readOnly(readOnly: boolean);\r\n    get readOnly(): boolean;\r\n    states: Array<any>;\r\n    fieldList: Array<string>;\r\n    model: any;\r\n    onModelChange: Function;\r\n    onModelTouched: Function;\r\n    focused: any;\r\n    invalid: any;\r\n    disabled: any;\r\n    invalidMaxlength: any;\r\n    valid: any;\r\n    stateOptions: any;\r\n    tooltip: any;\r\n    initComplete: boolean;\r\n    change: EventEmitter<any>;\r\n    focus: EventEmitter<any>;\r\n    blur: EventEmitter<any>;\r\n    validityChange: EventEmitter<any>;\r\n    constructor(labels: NovoLabelService);\r\n    ngOnInit(): void;\r\n    initConfig(): void;\r\n    isValid(field: string): void;\r\n    isInvalid(field: string): void;\r\n    onInput(event: Event, field: string): void;\r\n    isFocused(event: Event, field: string): void;\r\n    isBlurred(event: Event, field: string): void;\r\n    onCountryChange(evt: any): void;\r\n    onStateChange(evt: any): void;\r\n    setStateLabel(model: any): void;\r\n    updateStates(): void;\r\n    getStateOptions(filter: string, countryID: number): string[];\r\n    updateControl(): void;\r\n    writeValue(model: any): void;\r\n    registerOnChange(fn: Function): void;\r\n    registerOnTouched(fn: Function): void;\r\n    private getDefaultStateConfig;\r\n    private getDefaultCountryConfig;\r\n}\r\n"]}