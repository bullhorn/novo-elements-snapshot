{"version":3,"file":"Control.d.ts","sources":["Control.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, OnDestroy, AfterContentInit, AfterViewInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { OutsideClick } from '../../utils/outside-click/OutsideClick';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { DateFormatService } from '../../services/date-format/DateFormat';\r\nimport { FieldInteractionApi } from './FieldInteractionApi';\r\nimport { NovoTemplateService } from '../../services/template/NovoTemplateService';\r\nexport interface IMaskOptions {\r\n    mask: any;\r\n    keepCharPositions: boolean;\r\n    guide: boolean;\r\n}\r\nexport declare class NovoAutoSize implements AfterContentInit {\r\n    element: ElementRef;\r\n    onInput(textArea: HTMLTextAreaElement): void;\r\n    constructor(element: ElementRef);\r\n    ngAfterContentInit(): void;\r\n    adjust(): void;\r\n}\r\nexport declare class NovoControlElement extends OutsideClick implements OnInit, OnDestroy, AfterViewInit, AfterContentInit {\r\n    labels: NovoLabelService;\r\n    private dateFormatService;\r\n    private fieldInteractionApi;\r\n    private templateService;\r\n    private changeDetectorRef;\r\n    private locale;\r\n    control: any;\r\n    form: any;\r\n    condensed: boolean;\r\n    autoFocus: boolean;\r\n    change: EventEmitter<any>;\r\n    edit: EventEmitter<any>;\r\n    save: EventEmitter<any>;\r\n    delete: EventEmitter<any>;\r\n    upload: EventEmitter<any>;\r\n    get onBlur(): Observable<FocusEvent>;\r\n    get onFocus(): Observable<FocusEvent>;\r\n    maxLength: number;\r\n    focusedField: string;\r\n    formattedValue: string;\r\n    percentValue: number;\r\n    maxLengthMet: boolean;\r\n    itemCount: number;\r\n    maskOptions: IMaskOptions;\r\n    private _blurEmitter;\r\n    private _focusEmitter;\r\n    private _focused;\r\n    private _enteredText;\r\n    private forceClearSubscription;\r\n    private percentChangeSubscription;\r\n    private valueChangeSubscription;\r\n    private dateChangeSubscription;\r\n    private _showCount;\r\n    private characterCountField;\r\n    private maxLengthMetErrorfields;\r\n    private statusChangeSubscription;\r\n    templates: any;\r\n    templateContext: any;\r\n    loading: boolean;\r\n    constructor(element: ElementRef, labels: NovoLabelService, dateFormatService: DateFormatService, fieldInteractionApi: FieldInteractionApi, templateService: NovoTemplateService, changeDetectorRef: ChangeDetectorRef, locale?: string);\r\n    get maxlengthMetField(): string;\r\n    get maxlengthErrorField(): string;\r\n    get showFieldMessage(): boolean;\r\n    get showMaxLengthMetMessage(): boolean;\r\n    get showErrorState(): any;\r\n    get showCount(): boolean;\r\n    set showCount(value: boolean);\r\n    get showMessages(): boolean;\r\n    get decimalSeparator(): string;\r\n    ngAfterViewInit(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    get errors(): any;\r\n    get isValid(): any;\r\n    get isDirty(): any;\r\n    get hasValue(): boolean;\r\n    get focused(): boolean;\r\n    get tooltip(): any;\r\n    get tooltipPosition(): any;\r\n    get tooltipSize(): any;\r\n    get tooltipPreline(): any;\r\n    get removeTooltipArrow(): any;\r\n    get alwaysActive(): boolean;\r\n    get requiresExtraSpacing(): boolean;\r\n    executeInteraction(interaction: any, isInvokedOnInit?: boolean): void;\r\n    handleTyping(event: any): void;\r\n    handleFocus(event: FocusEvent, field?: any): void;\r\n    handleBlur(event: FocusEvent): void;\r\n    clearValue(): void;\r\n    handleTextAreaInput(event: any): void;\r\n    checkMaxLength(event: any): void;\r\n    modelChangeWithRaw(event: any): void;\r\n    modelChange(value: any): void;\r\n    validateNumberOnBlur(event: FocusEvent): void;\r\n    validateIntegerInput(): void;\r\n    restrictKeys(event: any): void;\r\n    handlePercentChange(event: KeyboardEvent): void;\r\n    handleTabForPickers(event: any): void;\r\n    emitChange(value: any): void;\r\n    handleEdit(value: any): void;\r\n    handleSave(value: any): void;\r\n    handleDelete(value: any): void;\r\n    handleUpload(value: any): void;\r\n    handleAddressChange(data: any): void;\r\n    updateValidity(shouldEventBeEmitted: any): void;\r\n}\r\n"]}