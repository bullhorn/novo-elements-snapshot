{"version":3,"file":"Control.d.ts","sources":["Control.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, ElementRef, EventEmitter, OnInit, OnDestroy, AfterContentInit, AfterViewInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { OutsideClick } from '../../utils/outside-click/OutsideClick';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { DateFormatService } from '../../services/date-format/DateFormat';\nimport { FieldInteractionApi } from './FieldInteractionApi';\nimport { NovoTemplateService } from '../../services/template/NovoTemplateService';\nexport interface IMaskOptions {\n    mask: any;\n    keepCharPositions: boolean;\n    guide: boolean;\n}\nexport declare class NovoAutoSize implements AfterContentInit {\n    element: ElementRef;\n    onInput(textArea: HTMLTextAreaElement): void;\n    constructor(element: ElementRef);\n    ngAfterContentInit(): void;\n    adjust(): void;\n}\nexport declare class NovoControlElement extends OutsideClick implements OnInit, OnDestroy, AfterViewInit, AfterContentInit {\n    labels: NovoLabelService;\n    private dateFormatService;\n    private fieldInteractionApi;\n    private templateService;\n    private changeDetectorRef;\n    private locale;\n    control: any;\n    form: any;\n    condensed: boolean;\n    autoFocus: boolean;\n    change: EventEmitter<any>;\n    edit: EventEmitter<any>;\n    save: EventEmitter<any>;\n    delete: EventEmitter<any>;\n    upload: EventEmitter<any>;\n    get onBlur(): Observable<FocusEvent>;\n    get onFocus(): Observable<FocusEvent>;\n    maxLength: number;\n    focusedField: string;\n    formattedValue: string;\n    percentValue: number;\n    maxLengthMet: boolean;\n    itemCount: number;\n    maskOptions: IMaskOptions;\n    private _blurEmitter;\n    private _focusEmitter;\n    private _focused;\n    private _enteredText;\n    private forceClearSubscription;\n    private percentChangeSubscription;\n    private valueChangeSubscription;\n    private dateChangeSubscription;\n    private _showCount;\n    private characterCountField;\n    private maxLengthMetErrorfields;\n    private statusChangeSubscription;\n    templates: any;\n    templateContext: any;\n    loading: boolean;\n    constructor(element: ElementRef, labels: NovoLabelService, dateFormatService: DateFormatService, fieldInteractionApi: FieldInteractionApi, templateService: NovoTemplateService, changeDetectorRef: ChangeDetectorRef, locale?: string);\n    get maxlengthMetField(): string;\n    get maxlengthErrorField(): string;\n    get showFieldMessage(): boolean;\n    get showMaxLengthMetMessage(): boolean;\n    get showErrorState(): any;\n    get showCount(): boolean;\n    set showCount(value: boolean);\n    get showMessages(): boolean;\n    get decimalSeparator(): string;\n    ngAfterViewInit(): void;\n    ngAfterContentInit(): void;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    get errors(): any;\n    get isValid(): any;\n    get isDirty(): any;\n    get hasValue(): boolean;\n    get focused(): boolean;\n    get tooltip(): any;\n    get tooltipPosition(): any;\n    get tooltipSize(): any;\n    get tooltipPreline(): any;\n    get removeTooltipArrow(): any;\n    get alwaysActive(): boolean;\n    get requiresExtraSpacing(): boolean;\n    executeInteraction(interaction: any, isInvokedOnInit?: boolean): void;\n    handleTyping(event: any): void;\n    handleFocus(event: FocusEvent, field?: any): void;\n    handleBlur(event: FocusEvent): void;\n    clearValue(): void;\n    handleTextAreaInput(event: any): void;\n    checkMaxLength(event: any): void;\n    modelChangeWithRaw(event: any): void;\n    modelChange(value: any): void;\n    validateNumberOnBlur(event: FocusEvent): void;\n    validateIntegerInput(): void;\n    restrictKeys(event: any): void;\n    handlePercentChange(event: KeyboardEvent): void;\n    handleTabForPickers(event: any): void;\n    emitChange(value: any): void;\n    handleEdit(value: any): void;\n    handleSave(value: any): void;\n    handleDelete(value: any): void;\n    handleUpload(value: any): void;\n    handleAddressChange(data: any): void;\n    updateValidity(shouldEventBeEmitted: any): void;\n}\n"]}