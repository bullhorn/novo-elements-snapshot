{"version":3,"file":"FieldInteractionApi.d.ts","sources":["FieldInteractionApi.d.ts"],"names":[],"mappingssourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { AppBridge } from '../../utils/app-bridge/AppBridge';\nimport { FormUtils } from '../../utils/form-utils/FormUtils';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { NovoFormControl } from './NovoFormControl';\nimport { NovoModalService } from '../modal/ModalService';\nimport { NovoToastService, ToastOptions } from '../toast/ToastService';\nimport { ModifyPickerConfigArgs, OptionsFunction } from './FieldInteractionApiTypes';\nimport { NovoFieldset, NovoFormGroup, ResultsTemplateType } from './FormInterfaces';\nexport declare class FieldInteractionApi {\n    private toaster;\n    private modalService;\n    private formUtils;\n    private http;\n    private labels;\n    private _globals;\n    form: NovoFormGroup | any;\n    private _currentKey;\n    appBridge: AppBridge;\n    private asyncBlockTimeout;\n    private _isInvokedOnInit;\n    static FIELD_POSITIONS: {\n        ABOVE_FIELD: string;\n        BELOW_FIELD: string;\n        TOP_OF_FORM: string;\n        BOTTOM_OF_FORM: string;\n    };\n    constructor(toaster: NovoToastService, modalService: NovoModalService, formUtils: FormUtils, http: HttpClient, labels: NovoLabelService);\n    get associations(): object;\n    get currentEntity(): string;\n    get currentEntityId(): string;\n    get isEdit(): boolean;\n    get isAdd(): boolean;\n    set globals(globals: any);\n    get globals(): any;\n    set currentKey(key: string);\n    get currentKey(): string;\n    set isInvokedOnInit(isOnInit: boolean);\n    get isInvokedOnInit(): boolean;\n    isActiveControlValid(): boolean;\n    getActiveControl(): NovoFormControl;\n    getActiveKey(): string;\n    getActiveValue(): any;\n    getActiveInitialValue(): any;\n    getFieldSet(key: string, otherForm?: NovoFormGroup): NovoFieldset;\n    getControl(key: string, otherForm?: NovoFormGroup): NovoFormControl;\n    getFormGroupArray(key: string, otherForm?: NovoFormGroup): NovoFormGroup[];\n    getValue(key: string, otherForm?: NovoFormGroup): any;\n    getRawValue(key: string, otherForm?: NovoFormGroup): any;\n    getInitialValue(key: string, otherForm?: NovoFormGroup): any;\n    setValue(key: string, value: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n        emitModelToViewChange?: boolean;\n        emitViewToModelChange?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    patchValue(key: string, value: any, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n        emitModelToViewChange?: boolean;\n        emitViewToModelChange?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    setReadOnly(key: string, isReadOnly: boolean, otherForm?: NovoFormGroup): void;\n    setRequired(key: string, required: boolean, otherForm?: NovoFormGroup): void;\n    highlight(key: string, isHighlighted: boolean, otherForm?: NovoFormGroup): void;\n    hide(key: string, clearValue?: boolean, otherForm?: NovoFormGroup): NovoFormControl;\n    show(key: string, otherForm?: NovoFormGroup): void;\n    hideFieldSetHeader(key: string): void;\n    showFieldSetHeader(key: string): void;\n    disable(key: string, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    enable(key: string, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    markAsInvalid(key: string, validationMessage?: string, otherForm?: NovoFormGroup): void;\n    markAsValid(key: string, otherForm?: NovoFormGroup): void;\n    markAsDirty(key: string, options?: {\n        onlySelf?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    markAsPending(key: string, options?: {\n        onlySelf?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    markAsPristine(key: string, options?: {\n        onlySelf?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    markAsTouched(key: string, options?: {\n        onlySelf?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    markAsUntouched(key: string, options?: {\n        onlySelf?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    updateValueAndValidity(key: string, options?: {\n        onlySelf?: boolean;\n        emitEvent?: boolean;\n    }, otherForm?: NovoFormGroup): void;\n    displayToast(toastConfig: ToastOptions): void;\n    displayTip(key: string, tip: string, icon?: string, allowDismiss?: boolean, sanitize?: boolean, otherForm?: NovoFormGroup): void;\n    clearTip(key: string, otherForm?: NovoFormGroup): void;\n    setTooltip(key: string, tooltip: string, otherForm?: NovoFormGroup): void;\n    confirmChanges(key: string, message?: string): Promise<boolean>;\n    promptUser(key: string, changes: string[]): Promise<boolean>;\n    setProperty(key: string, prop: string, value: any, otherForm?: NovoFormGroup): void;\n    getProperty(key: string, prop: string, otherForm?: NovoFormGroup): any;\n    isValueEmpty(key: string): boolean;\n    isValueBlank(key: string): boolean;\n    hasField(key: string, otherForm?: NovoFormGroup): boolean;\n    addStaticOption(key: string, newOption: any, otherForm?: NovoFormGroup): void;\n    removeStaticOption(key: string, optionToRemove: any, otherForm?: NovoFormGroup): void;\n    modifyPickerConfig(key: string, config: {\n        format?: string;\n        optionsUrl?: string;\n        optionsUrlBuilder?: Function;\n        optionsPromise?: any;\n        options?: any[];\n        resultsTemplateType?: ResultsTemplateType;\n    }, mapper?: any): void;\n    mutatePickerConfig(key: string, args: ModifyPickerConfigArgs, mapper?: (item: unknown) => unknown, otherForm?: NovoFormGroup): void;\n    addPropertiesToPickerConfig(key: string, properties: {\n        [key: string]: unknown;\n    }, otherForm?: NovoFormGroup): void;\n    getOptionsConfig: (args: ModifyPickerConfigArgs, mapper?: (item: unknown) => unknown, filteredOptionsCreator?: (where: string) => (query: string) => Promise<unknown[]>, pickerConfigFormat?: string) => undefined | {\n        options: unknown[];\n    } | {\n        options: OptionsFunction;\n        format?: string;\n    };\n    private getAppropriateResultsTemplate;\n    createOptionsFunction: (config: ModifyPickerConfigArgs, mapper?: (item: unknown) => unknown, filteredOptionsCreator?: (where?: string) => (query: string, page?: number) => Promise<unknown[]>) => (query: string) => Promise<unknown[]>;\n    setLoading(key: string, loading: boolean, otherForm?: NovoFormGroup): void;\n    addControl(key: string, metaForNewField: {\n        key?: string;\n        type?: string;\n        name?: string;\n        label?: string;\n        interactions?: Array<{\n            event?: string;\n            invokeOnInit?: boolean;\n            script?: any;\n        }>;\n    }, position?: string, initialValue?: any, otherForm?: NovoFormGroup): void;\n    removeControl(key: string, otherForm?: NovoFormGroup): void;\n    debounce(func: () => void, wait?: number): void;\n    /**\n     * Allows traversing nested forms by accessing the parent form.\n     *\n     * @param otherForm optional parameter for getting the parent of a different form.\n     * If not provided will default to the parent of the current form.\n     */\n    getParent(otherForm?: NovoFormGroup): any;\n    /**\n     * The index is assigned as a property on the form's associations object when the form is part of a NovoControlGroup array.\n     *\n     * @param otherForm optional parameter for getting the index of a different form. If not provided will default to the current form.\n     * @returns the index if it exists for the current or form, or null otherwise.\n     */\n    getIndex(otherForm?: NovoFormGroup): any;\n    private triggerEvent;\n}\n"]}