{"version":3,"file":"FieldInteractionApi.d.ts","sources":["FieldInteractionApi.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { AppBridge } from '../../utils/app-bridge/AppBridge';\r\nimport { FormUtils } from '../../utils/form-utils/FormUtils';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { NovoFormControl } from './NovoFormControl';\r\nimport { NovoModalService } from '../modal/ModalService';\r\nimport { NovoToastService, ToastOptions } from '../toast/ToastService';\r\nimport { ModifyPickerConfigArgs, OptionsFunction } from './FieldInteractionApiTypes';\r\nimport { NovoFieldset, NovoFormGroup, ResultsTemplateType } from './FormInterfaces';\r\nexport declare class FieldInteractionApi {\r\n    private toaster;\r\n    private modalService;\r\n    private formUtils;\r\n    private http;\r\n    private labels;\r\n    private _globals;\r\n    form: NovoFormGroup | any;\r\n    private _currentKey;\r\n    appBridge: AppBridge;\r\n    private asyncBlockTimeout;\r\n    private _isInvokedOnInit;\r\n    static FIELD_POSITIONS: {\r\n        ABOVE_FIELD: string;\r\n        BELOW_FIELD: string;\r\n        TOP_OF_FORM: string;\r\n        BOTTOM_OF_FORM: string;\r\n    };\r\n    constructor(toaster: NovoToastService, modalService: NovoModalService, formUtils: FormUtils, http: HttpClient, labels: NovoLabelService);\r\n    get associations(): any;\r\n    get currentEntity(): string;\r\n    get currentEntityId(): string;\r\n    get isEdit(): boolean;\r\n    get isAdd(): boolean;\r\n    set globals(globals: any);\r\n    get globals(): any;\r\n    set currentKey(key: string);\r\n    get currentKey(): string;\r\n    set isInvokedOnInit(isOnInit: boolean);\r\n    get isInvokedOnInit(): boolean;\r\n    isActiveControlValid(): boolean;\r\n    getActiveControl(): NovoFormControl;\r\n    getActiveKey(): string;\r\n    getActiveValue(): any;\r\n    getActiveInitialValue(): any;\r\n    getFieldSet(key: string, otherForm?: NovoFormGroup): NovoFieldset;\r\n    getControl(key: string, otherForm?: NovoFormGroup): NovoFormControl;\r\n    getFormGroupArray(key: string, otherForm?: NovoFormGroup): NovoFormGroup[];\r\n    getValue(key: string, otherForm?: NovoFormGroup): any;\r\n    getRawValue(key: string, otherForm?: NovoFormGroup): any;\r\n    getInitialValue(key: string, otherForm?: NovoFormGroup): any;\r\n    setValue(key: string, value: any, options?: {\r\n        onlySelf?: boolean;\r\n        emitEvent?: boolean;\r\n        emitModelToViewChange?: boolean;\r\n        emitViewToModelChange?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    patchValue(key: string, value: any, options?: {\r\n        onlySelf?: boolean;\r\n        emitEvent?: boolean;\r\n        emitModelToViewChange?: boolean;\r\n        emitViewToModelChange?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    setReadOnly(key: string, isReadOnly: boolean, otherForm?: NovoFormGroup): void;\r\n    setRequired(key: string, required: boolean, otherForm?: NovoFormGroup): void;\r\n    hide(key: string, clearValue?: boolean, otherForm?: NovoFormGroup): NovoFormControl;\r\n    show(key: string, otherForm?: NovoFormGroup): void;\r\n    hideFieldSetHeader(key: string): void;\r\n    showFieldSetHeader(key: string): void;\r\n    disable(key: string, options?: {\r\n        onlySelf?: boolean;\r\n        emitEvent?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    enable(key: string, options?: {\r\n        onlySelf?: boolean;\r\n        emitEvent?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    markAsInvalid(key: string, validationMessage?: string, otherForm?: NovoFormGroup): void;\r\n    markAsValid(key: string, otherForm?: NovoFormGroup): void;\r\n    markAsDirty(key: string, options?: {\r\n        onlySelf?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    markAsPending(key: string, options?: {\r\n        onlySelf?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    markAsPristine(key: string, options?: {\r\n        onlySelf?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    markAsTouched(key: string, options?: {\r\n        onlySelf?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    markAsUntouched(key: string, options?: {\r\n        onlySelf?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    updateValueAndValidity(key: string, options?: {\r\n        onlySelf?: boolean;\r\n        emitEvent?: boolean;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    displayToast(toastConfig: ToastOptions): void;\r\n    displayTip(key: string, tip: string, icon?: string, allowDismiss?: boolean, sanitize?: boolean, otherForm?: NovoFormGroup): void;\r\n    clearTip(key: string, otherForm?: NovoFormGroup): void;\r\n    setTooltip(key: string, tooltip: string, otherForm?: NovoFormGroup): void;\r\n    confirmChanges(key: string, message?: string): Promise<boolean>;\r\n    promptUser(key: string, changes: string[]): Promise<boolean>;\r\n    setProperty(key: string, prop: string, value: any, otherForm?: NovoFormGroup): void;\r\n    getProperty(key: string, prop: string, otherForm?: NovoFormGroup): any;\r\n    isValueEmpty(key: string): boolean;\r\n    isValueBlank(key: string): boolean;\r\n    hasField(key: string, otherForm?: NovoFormGroup): boolean;\r\n    addStaticOption(key: string, newOption: any, otherForm?: NovoFormGroup): void;\r\n    removeStaticOption(key: string, optionToRemove: string, otherForm?: NovoFormGroup): void;\r\n    modifyPickerConfig(key: string, config: {\r\n        format?: string;\r\n        optionsUrl?: string;\r\n        optionsUrlBuilder?: Function;\r\n        optionsPromise?: any;\r\n        options?: any[];\r\n        resultsTemplateType?: ResultsTemplateType;\r\n    }, mapper?: any): void;\r\n    mutatePickerConfig(key: string, args: ModifyPickerConfigArgs, mapper?: (item: unknown) => unknown, otherForm?: NovoFormGroup): void;\r\n    addPropertiesToPickerConfig(key: string, properties: {\r\n        [key: string]: unknown;\r\n    }, otherForm?: NovoFormGroup): void;\r\n    getOptionsConfig: (args: ModifyPickerConfigArgs, mapper?: (item: unknown) => unknown, filteredOptionsCreator?: (where: string) => (query: string) => Promise<unknown[]>, pickerConfigFormat?: string) => undefined | {\r\n        options: unknown[];\r\n    } | {\r\n        options: OptionsFunction;\r\n        format?: string;\r\n    };\r\n    private getAppropriateResultsTemplate;\r\n    createOptionsFunction: (config: ModifyPickerConfigArgs, mapper?: (item: unknown) => unknown, filteredOptionsCreator?: (where?: string) => (query: string, page?: number) => Promise<unknown[]>) => (query: string) => Promise<unknown[]>;\r\n    setLoading(key: string, loading: boolean, otherForm?: NovoFormGroup): void;\r\n    addControl(key: string, metaForNewField: {\r\n        key?: string;\r\n        type?: string;\r\n        name?: string;\r\n        label?: string;\r\n        interactions?: Array<{\r\n            event?: string;\r\n            invokeOnInit?: boolean;\r\n            script?: any;\r\n        }>;\r\n    }, position?: string, initialValue?: any, otherForm?: NovoFormGroup): void;\r\n    removeControl(key: string, otherForm?: NovoFormGroup): void;\r\n    debounce(func: () => void, wait?: number): void;\r\n    /**\r\n     * Allows traversing nested forms by accessing the parent form.\r\n     *\r\n     * @param otherForm optional parameter for getting the parent of a different form.\r\n     * If not provided will default to the parent of the current form.\r\n     */\r\n    getParent(otherForm?: NovoFormGroup): any;\r\n    /**\r\n     * The index is assigned as a property on the form's associations object when the form is part of a NovoControlGroup array.\r\n     *\r\n     * @param otherForm optional parameter for getting the index of a different form. If not provided will default to the current form.\r\n     * @returns the index if it exists for the current or form, or null otherwise.\r\n     */\r\n    getIndex(otherForm?: NovoFormGroup): any;\r\n    private triggerEvent;\r\n}\r\n"]}