{"version":3,"file":"ControlGroup.d.ts","sources":["ControlGroup.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef } from '@angular/core';\r\nimport { FormBuilder } from '@angular/forms';\r\nimport { NovoFormGroup } from './NovoFormGroup';\r\nimport { BaseControl } from './controls/BaseControl';\r\nimport { FormUtils } from '../../utils/form-utils/FormUtils';\r\nexport interface NovoControlGroupAddConfig {\r\n    label: string;\r\n}\r\nexport interface NovoControlGroupRowConfig {\r\n    edit: boolean;\r\n    remove: boolean;\r\n}\r\nexport declare class NovoControlGroup implements AfterContentInit, OnChanges, OnDestroy {\r\n    private formUtils;\r\n    private fb;\r\n    private ref;\r\n    set vertical(v: boolean);\r\n    get vertical(): boolean;\r\n    private _vertical;\r\n    add: NovoControlGroupAddConfig;\r\n    set remove(v: boolean);\r\n    get remove(): boolean;\r\n    private _remove;\r\n    set edit(v: boolean);\r\n    get edit(): boolean;\r\n    private _edit;\r\n    set collapsible(v: boolean);\r\n    get collapsible(): boolean;\r\n    private _collapsible;\r\n    form: NovoFormGroup;\r\n    controls: BaseControl[];\r\n    key: string;\r\n    label: string;\r\n    description: string;\r\n    emptyMessage: string;\r\n    set icon(v: string);\r\n    get icon(): string;\r\n    private _icon;\r\n    initialValue: {}[];\r\n    canEdit: Function;\r\n    canRemove: Function;\r\n    rowTemplate: TemplateRef<any>;\r\n    columnLabelTemplate: TemplateRef<any>;\r\n    onRemove: EventEmitter<{\r\n        value: any;\r\n        index: any;\r\n    }>;\r\n    onEdit: EventEmitter<{\r\n        value: any;\r\n        index: any;\r\n    }>;\r\n    onAdd: EventEmitter<any>;\r\n    change: EventEmitter<any>;\r\n    controlLabels: {\r\n        value: string;\r\n        width: number;\r\n        required: boolean;\r\n        key: string;\r\n    }[];\r\n    toggled: boolean;\r\n    disabledArray: {\r\n        edit: boolean;\r\n        remove: boolean;\r\n    }[];\r\n    currentIndex: number;\r\n    constructor(formUtils: FormUtils, fb: FormBuilder, ref: ChangeDetectorRef);\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    onChange(): void;\r\n    resetAddRemove(): void;\r\n    addNewControl(value?: {}): void;\r\n    removeControl(index: number, emitEvent?: boolean): void;\r\n    editControl(index: number): void;\r\n    toggle(event: MouseEvent): void;\r\n    private buildNestedFormGroup;\r\n    private clearControls;\r\n    private checkCanEdit;\r\n    private checkCanRemove;\r\n    private getNewControls;\r\n    private assignIndexes;\r\n    private onFieldInteractionEvent;\r\n}\r\n"]}