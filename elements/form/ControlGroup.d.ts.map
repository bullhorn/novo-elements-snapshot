{"version":3,"file":"ControlGroup.d.ts","sources":["ControlGroup.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterContentInit, ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, SimpleChanges, TemplateRef } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { NovoFormGroup } from './NovoFormGroup';\nimport { BaseControl } from './controls/BaseControl';\nimport { FormUtils } from '../../utils/form-utils/FormUtils';\nexport interface NovoControlGroupAddConfig {\n    label: string;\n}\nexport interface NovoControlGroupRowConfig {\n    edit: boolean;\n    remove: boolean;\n}\nexport declare class NovoControlGroup implements AfterContentInit, OnChanges, OnDestroy {\n    private formUtils;\n    private fb;\n    private ref;\n    set vertical(v: boolean);\n    get vertical(): boolean;\n    private _vertical;\n    add: NovoControlGroupAddConfig;\n    set remove(v: boolean);\n    get remove(): boolean;\n    private _remove;\n    set edit(v: boolean);\n    get edit(): boolean;\n    private _edit;\n    set collapsible(v: boolean);\n    get collapsible(): boolean;\n    private _collapsible;\n    form: NovoFormGroup;\n    controls: BaseControl[];\n    key: string;\n    label: string;\n    description: string;\n    emptyMessage: string;\n    set icon(v: string);\n    get icon(): string;\n    private _icon;\n    initialValue: {}[];\n    canEdit: Function;\n    canRemove: Function;\n    shouldRemove: (number: any) => Promise<boolean>;\n    rowTemplate: TemplateRef<any>;\n    columnLabelTemplate: TemplateRef<any>;\n    onRemove: EventEmitter<{\n        value: any;\n        index: any;\n    }>;\n    onEdit: EventEmitter<{\n        value: any;\n        index: any;\n    }>;\n    onAdd: EventEmitter<any>;\n    change: EventEmitter<any>;\n    controlLabels: {\n        value: string;\n        width: number;\n        required: boolean;\n        key: string;\n    }[];\n    toggled: boolean;\n    disabledArray: {\n        edit: boolean;\n        remove: boolean;\n    }[];\n    currentIndex: number;\n    constructor(formUtils: FormUtils, fb: FormBuilder, ref: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    ngOnChanges(changes: SimpleChanges): void;\n    ngOnDestroy(): void;\n    onChange(): void;\n    resetAddRemove(): void;\n    addNewControl(value?: {}): void;\n    /**\n     * Will remove the control, and optionally, if the event is to be publicized (emitEvent = true) and there is a\n     * shouldRemove callback, then call the shouldRemove() callback to determine if the doRemoveControl should be called.\n     */\n    removeControl(index: number, emitEvent?: boolean): void;\n    private doRemoveControl;\n    editControl(index: number): void;\n    toggle(event: MouseEvent): void;\n    private buildNestedFormGroup;\n    private clearControls;\n    private checkCanEdit;\n    private checkCanRemove;\n    private getNewControls;\n    private assignIndexes;\n    private onFieldInteractionEvent;\n}\n"]}