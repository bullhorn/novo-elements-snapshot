{"version":3,"file":"TabbedGroupPicker.d.ts","sources":["TabbedGroupPicker.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { NovoLabelService } from '../../services/novo-label-service';\nexport declare type TabbedGroupPickerTab = {\n    typeName: string;\n    typeLabel: string;\n    valueField: string;\n    labelField: string;\n    scrollOffset?: number;\n    icon?: string;\n} & (ParentTab | ChildTab);\nexport declare type ParentTab = {\n    childTypeName: string;\n    data: Array<ParentOption>;\n};\ndeclare type ParentOption = {\n    selected?: boolean;\n    indeterminate?: boolean;\n    children: Array<{\n        selected?: boolean;\n    }>;\n} & {\n    [key: string]: any;\n};\nexport declare type ChildTab = {\n    data: Array<{\n        selected?: boolean;\n    } & {\n        [key: string]: any;\n    }>;\n};\nexport declare type TabbedGroupPickerQuickSelect = {\n    label: string;\n    selected?: boolean;\n    childTypeName?: string;\n    children?: (({\n        selected?: boolean;\n    } & {\n        [key: string]: any;\n    }) | (number))[];\n    all?: boolean;\n};\nexport declare type QuickSelectConfig = {\n    label: string;\n    items: TabbedGroupPickerQuickSelect[];\n};\nexport declare type TabbedGroupPickerButtonConfig = {\n    theme: string;\n    side: string;\n    icon: string;\n    label: string;\n};\nexport declare class NovoTabbedGroupPickerElement implements OnDestroy, OnInit {\n    labelService: NovoLabelService;\n    private ref;\n    private scrollableInstance;\n    buttonConfig: TabbedGroupPickerButtonConfig;\n    tabs: TabbedGroupPickerTab[];\n    quickSelectConfig: QuickSelectConfig;\n    selectionChange: EventEmitter<any>;\n    displayTabs: TabbedGroupPickerTab[];\n    displayTabIndex: number;\n    filterText: BehaviorSubject<string>;\n    filterTextSubscription: Subscription;\n    loading: boolean;\n    showClearAll: boolean;\n    scrollViewportHeight: number;\n    virtualScrollItemSize: number;\n    constructor(labelService: NovoLabelService, ref: ChangeDetectorRef);\n    get displayTab(): TabbedGroupPickerTab;\n    set displayTab(tab: TabbedGroupPickerTab);\n    get minBufferPx(): number;\n    get maxBufferPx(): number;\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    changeTab(tab: TabbedGroupPickerTab): void;\n    getPixelHeight(element: HTMLElement): number;\n    setupDisplayData(): void;\n    createChildrenReferences(): void;\n    makeCompareFunction<T>(key: string): (a: T | {\n        [key: string]: T;\n    }, b: T | {\n        [key: string]: T;\n    }) => 1 | -1 | 0 | undefined;\n    replaceChildrenWithReferences(parent: {\n        children: any[];\n    }, sortedData: ChildTab['data'], compareFunction: (a: any, b: any) => 1 | -1 | 0, warnFunction: (child: any) => void): void;\n    makeWarningFunction(parentLabel: string, childLabel: string, childValueField: any): (child: any) => void;\n    onDropdownToggle(event: any): void;\n    onItemToggled(item: {\n        selected?: boolean;\n        children?: Array<{\n            selected?: boolean;\n            children?: Array<{\n                selected?: boolean;\n            }>;\n        }>;\n    }): void;\n    initializeDescendantSelection(): void;\n    updateDescendants(parentIsSelected: boolean, children: Array<{\n        selected?: boolean;\n        children?: Array<{\n            selected?: boolean;\n        }>;\n    }>): void;\n    updateClearAll(itemWasJustSelected?: boolean): void;\n    updateParentsAndQuickSelect(): void;\n    getSelectedState: (childArray: {\n        selected?: boolean;\n        indeterminate?: boolean;\n    }[]) => 'selected' | 'indeterminate' | undefined;\n    emitSelectedValues(): void;\n    deselectEverything(event: any): void;\n    onClearFilter(event: any): void;\n    onFilter(event: {\n        target: {\n            value: string;\n        };\n    }): void;\n    filter: (searchTerm: string) => void;\n}\nexport {};\n"]}