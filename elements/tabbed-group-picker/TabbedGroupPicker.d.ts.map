{"version":3,"file":"TabbedGroupPicker.d.ts","sources":["TabbedGroupPicker.d.ts"],"names":[],"mappingssourcesContent":["import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nexport declare type TabbedGroupPickerTab = {\r\n    typeName: string;\r\n    typeLabel: string;\r\n    valueField: string;\r\n    labelField: string;\r\n    scrollOffset?: number;\r\n    icon?: string;\r\n} & (ParentTab | ChildTab);\r\nexport declare type ParentTab = {\r\n    childTypeName: string;\r\n    data: Array<ParentOption>;\r\n};\r\ndeclare type ParentOption = {\r\n    selected?: boolean;\r\n    indeterminate?: boolean;\r\n    children: Array<{\r\n        selected?: boolean;\r\n    }>;\r\n} & {\r\n    [key: string]: any;\r\n};\r\nexport declare type ChildTab = {\r\n    data: Array<{\r\n        selected?: boolean;\r\n    } & {\r\n        [key: string]: any;\r\n    }>;\r\n};\r\nexport declare type TabbedGroupPickerQuickSelect = {\r\n    label: string;\r\n    selected?: boolean;\r\n    childTypeName?: string;\r\n    children?: (({\r\n        selected?: boolean;\r\n    } & {\r\n        [key: string]: any;\r\n    }) | (number))[];\r\n    all?: boolean;\r\n};\r\nexport declare type QuickSelectConfig = {\r\n    label: string;\r\n    items: TabbedGroupPickerQuickSelect[];\r\n};\r\nexport declare type TabbedGroupPickerButtonConfig = {\r\n    theme: string;\r\n    side: string;\r\n    icon: string;\r\n    label: string;\r\n};\r\nexport declare class NovoTabbedGroupPickerElement implements OnDestroy, OnInit {\r\n    labelService: NovoLabelService;\r\n    private ref;\r\n    private scrollableInstance;\r\n    buttonConfig: TabbedGroupPickerButtonConfig;\r\n    tabs: TabbedGroupPickerTab[];\r\n    quickSelectConfig: QuickSelectConfig;\r\n    selectionChange: EventEmitter<any>;\r\n    displayTabs: TabbedGroupPickerTab[];\r\n    displayTabIndex: number;\r\n    filterText: BehaviorSubject<string>;\r\n    filterTextSubscription: Subscription;\r\n    loading: boolean;\r\n    showClearAll: boolean;\r\n    scrollViewportHeight: number;\r\n    virtualScrollItemSize: number;\r\n    constructor(labelService: NovoLabelService, ref: ChangeDetectorRef);\r\n    get displayTab(): TabbedGroupPickerTab;\r\n    set displayTab(tab: TabbedGroupPickerTab);\r\n    get minBufferPx(): number;\r\n    get maxBufferPx(): number;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    changeTab(tab: TabbedGroupPickerTab): void;\r\n    getPixelHeight(element: HTMLElement): number;\r\n    setupDisplayData(): void;\r\n    createChildrenReferences(): void;\r\n    makeCompareFunction<T>(key: string): (a: T | {\r\n        [key: string]: T;\r\n    }, b: T | {\r\n        [key: string]: T;\r\n    }) => 1 | -1 | 0 | undefined;\r\n    replaceChildrenWithReferences(parent: {\r\n        children: any[];\r\n    }, sortedData: ChildTab['data'], compareFunction: (a: any, b: any) => 1 | -1 | 0, warnFunction: (child: any) => void): void;\r\n    makeWarningFunction(parentLabel: string, childLabel: string, childValueField: any): (child: any) => void;\r\n    onDropdownToggle(event: any): void;\r\n    onItemToggled(item: {\r\n        selected?: boolean;\r\n        children?: Array<{\r\n            selected?: boolean;\r\n            children?: Array<{\r\n                selected?: boolean;\r\n            }>;\r\n        }>;\r\n    }): void;\r\n    initializeDescendantSelection(): void;\r\n    updateDescendants(parentIsSelected: boolean, children: Array<{\r\n        selected?: boolean;\r\n        children?: Array<{\r\n            selected?: boolean;\r\n        }>;\r\n    }>): void;\r\n    updateClearAll(itemWasJustSelected?: boolean): void;\r\n    updateParentsAndQuickSelect(): void;\r\n    getSelectedState: (childArray: {\r\n        selected?: boolean;\r\n        indeterminate?: boolean;\r\n    }[]) => 'selected' | 'indeterminate' | undefined;\r\n    emitSelectedValues(): void;\r\n    deselectEverything(event: any): void;\r\n    onClearFilter(event: any): void;\r\n    onFilter(event: {\r\n        target: {\r\n            value: string;\r\n        };\r\n    }): void;\r\n    filter: (searchTerm: string) => void;\r\n}\r\nexport {};\r\n"]}