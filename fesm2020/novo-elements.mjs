import * as i0 from '@angular/core';
import { TemplateRef, forwardRef, EventEmitter, Component, Input, Output, NgModule, Pipe, Injectable, ChangeDetectionStrategy, HostBinding, Directive, HostListener, LOCALE_ID, Inject, ViewChildren, InjectionToken, Injector, isDevMode, Optional, ContentChild, ViewEncapsulation, ContentChildren, Host, ViewChild, ViewContainerRef, SkipSelf, Attribute, Self, QueryList, ElementRef, PLATFORM_ID } from '@angular/core';
import * as i4 from '@angular/forms';
import { NG_VALUE_ACCESSOR, Validators, FormControl, FormGroup, FormsModule, COMPOSITION_BUFFER_MODE, ReactiveFormsModule } from '@angular/forms';
import 'brace/index';
import 'brace/mode/javascript';
import 'brace/theme/chrome';
import 'brace/ext/language_tools.js';
import * as i1 from '@angular/common';
import { CommonModule, DOCUMENT, isPlatformBrowser } from '@angular/common';
import { __decorate, __metadata } from 'tslib';
import { coerceBooleanProperty, coerceNumberProperty, _isNumberValue } from '@angular/cdk/coercion';
import { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';
import * as i1$1 from '@angular/cdk/overlay';
import { OverlayConfig, OverlayModule, CdkScrollable, OverlayContainer, FullscreenOverlayContainer } from '@angular/cdk/overlay';
import * as i2 from '@angular/cdk/portal';
import { ComponentPortal, PortalInjector, PortalModule, TemplatePortal } from '@angular/cdk/portal';
import * as dateFns from 'date-fns';
import { isSameDay, differenceInCalendarDays, isWithinRange, startOfWeek, endOfWeek, startOfMonth, addDays, isToday, isBefore, isAfter, getMonth, getYear, isDate, startOfDay, addMonths, setMonth, setYear, subMonths, parse, format, isValid, subDays } from 'date-fns';
import { Subject, from, of, fromEvent, merge, Subscription, interval, ReplaySubject, BehaviorSubject, combineLatest } from 'rxjs';
import { filter, take, first, switchMap, takeUntil, debounceTime, distinctUntilChanged, startWith, debounce, map, catchError, mapTo, delay, tap } from 'rxjs/operators';
import * as i1$2 from '@angular/platform-browser';
import * as i1$3 from '@angular/router';
import { RouterModule } from '@angular/router';
import * as i1$5 from '@angular/cdk/a11y';
import { ActiveDescendantKeyManager, A11yModule, FocusKeyManager } from '@angular/cdk/a11y';
import { hasModifierKey, ENTER, COMMA } from '@angular/cdk/keycodes';
import { listTimeZones, findTimeZone, getZonedTime } from 'timezone-support';
import { formatZonedTime } from 'timezone-support/dist/parse-format';
import * as i1$4 from '@angular/cdk/observers';
import { ObserversModule } from '@angular/cdk/observers';
import * as tokens from 'novo-design-tokens';
import { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';
import * as i7 from '@angular/cdk/scrolling';
import { ScrollingModule } from '@angular/cdk/scrolling';
import * as i6 from 'angular2-text-mask';
import { TextMaskModule } from 'angular2-text-mask';
import * as i1$6 from '@angular/cdk/platform';
import { getSupportedInputTypes } from '@angular/cdk/platform';
import * as i1$8 from '@angular/cdk/bidi';
import * as i2$1 from '@angular/cdk/collections';
import { SelectionModel, _VIEW_REPEATER_STRATEGY, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';
import * as i1$7 from 'angular-imask';
import { IMaskDirective, IMaskDirectiveModule } from 'angular-imask';
import * as IMask from 'imask';
import * as i3 from '@angular/cdk/text-field';
import * as i1$9 from '@angular/cdk/table';
import { CdkHeaderCell, CdkCell, DataSource, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkRow, CdkTableModule, CdkCellDef, CdkHeaderCellDef, CdkColumnDef, CdkHeaderRowDef, CdkRowDef, CdkTable, CDK_TABLE_TEMPLATE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler } from '@angular/cdk/table';
import { createAutoCorrectedDatePipe } from 'text-mask-addons';
import dragula from '@bullhorn/dragula';
import { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';
import * as i4$1 from '@angular/common/http';
import { HttpClientModule } from '@angular/common/http';
import { DragDropModule } from '@angular/cdk/drag-drop';
import * as i1$a from '@angular/cdk/stepper';
import { CdkStepLabel, CdkStepHeader, CdkStepperNext, CdkStepperPrevious, CdkStep, CdkStepper, CdkStepperModule } from '@angular/cdk/stepper';

// @dynamic
class Helpers {
    static isTemplateRef(value) {
        return value instanceof TemplateRef;
    }
    /**
     * Swallows an event to stop further execution
     */
    static swallowEvent(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
    }
    static interpolate(str, props) {
        if (typeof str === 'function') {
            return str(props);
        }
        if (this.isDate(props)) {
            props = this.dateToObject(props);
        }
        // else {
        //   props = Object.entries(props).reduce((obj, [key, value]) => {
        //     const res = { ...obj, [key]: value };
        //     if (this.isIsoDate(value as string)) {
        //       res[`${key}Parts`] = this.dateToObject(new Date(value as string));
        //     }
        //     return res;
        //   }, {});
        // }
        return str.replace(/\$([\w\.]+)/g, (original, key) => {
            const keys = key.split('.');
            let value = props[keys.shift()];
            while (keys.length && value !== undefined) {
                const k = keys.shift();
                value = k ? value[k] : `${value}.`;
            }
            return value !== undefined ? value : '';
        });
    }
    static interpolateWithFallback(formatString, data) {
        // Format string can be an array, it will attempt to interpolate each item
        // in the array, if there is a failure to replace it will mark it as such
        // It will either return the first successful replacement of ALL variables,
        // or an empty string
        if (Array.isArray(formatString)) {
            const successes = [];
            const failures = [];
            formatString.forEach((format) => {
                let isSuccess = true;
                const attempt = format.replace(/\$([\w\.]+)/g, (original, key) => {
                    const keys = key.split('.');
                    let value = data[keys.shift()];
                    while (keys.length && value !== undefined) {
                        const k = keys.shift();
                        value = k ? value[k] : `${value}.`;
                    }
                    if (isSuccess && Helpers.isEmpty(value)) {
                        isSuccess = false;
                    }
                    return Helpers.isEmpty(value) ? '' : value;
                });
                if (isSuccess) {
                    successes.push(attempt);
                }
                else {
                    failures.push(attempt);
                }
            });
            if (successes.length !== 0) {
                return successes[0];
            }
            return '';
        }
        else {
            return Helpers.interpolate(formatString, data);
        }
    }
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param str   The string to interpolate
     * @param props The params to replace in string.
     */
    static validateInterpolationProps(str, props) {
        if (typeof str === 'function') {
            return true;
        }
        const keys = str.match(/\$([\w\.]+)/g);
        return keys.every((key) => {
            return props.hasOwnProperty(key.substr(1));
        });
    }
    static isObject(item) {
        return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
    }
    /**
     * Checks to see if the object is a string
     */
    static isString(obj) {
        return typeof obj === 'string';
    }
    static escapeString(obj) {
        if (Helpers.isString(obj)) {
            return obj.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }
        return obj;
    }
    static isNumber(val, includeNegatives = false) {
        const numberRegex = includeNegatives ? /^-{0,1}\d*\.?\d*$/ : /^\d*\.?\d*$/;
        if (typeof val === 'string') {
            return val.length > 0 && val !== '.' && numberRegex.test(val);
        }
        else {
            return !isNaN(parseFloat(val));
        }
    }
    /**
     * Checks to see if the object is a undefined or null
     */
    static isBlank(obj) {
        return obj === undefined || obj === null;
    }
    /**
     * Checks to see if the object is a undefined or null
     */
    static isEmpty(obj) {
        return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
    }
    /**
     * Checks to see if the object is a function
     */
    static isFunction(obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    }
    /**
     * Checks to see if the object is a Date
     */
    static isDate(obj) {
        return obj instanceof Date;
    }
    static isIsoDate(str) {
        if (!/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d{3}Z/.test(str)) {
            return false;
        }
        const d = new Date(str);
        return d.toISOString() === str;
    }
    static convertToArray(obj) {
        if (obj === undefined) {
            return [];
        }
        else if (!Array.isArray(obj)) {
            return [obj];
        }
        return obj;
    }
    static sortByField(fields, reverse = false) {
        return (previous, current) => {
            if (Helpers.isFunction(fields)) {
                return fields(reverse ? 'desc' : 'asc', previous, current);
            }
            if (!Array.isArray(fields)) {
                fields = [fields];
            }
            for (let i = 0; i < fields.length; i++) {
                const field = fields[i];
                let first = previous[field] || '';
                let second = current[field] || '';
                if (Helpers.isDate(first) && Helpers.isDate(second)) {
                    // Dates
                    first = first.getTime();
                    second = second.getTime();
                }
                else if (Helpers.isString(first) && Helpers.isString(second)) {
                    // Basic strings
                    first = first.toLowerCase();
                    second = second.toLowerCase();
                }
                else {
                    // Numbers
                    first = isNaN(Number(first)) ? first : Number(first);
                    second = isNaN(Number(second)) ? second : Number(second);
                }
                if (first > second) {
                    return reverse ? -1 : 1;
                }
                else if (first < second) {
                    return reverse ? 1 : -1;
                }
            }
            return 0;
        };
    }
    static filterByField(key, value) {
        return (item) => {
            const results = [];
            let field = can(item).have(key);
            if (value instanceof Function) {
                results.push(value(field, item));
            }
            else if (Array.isArray(value)) {
                results.push(value.includes(field));
            }
            else if (value instanceof Object) {
                if (field instanceof Date) {
                    field = field.getTime();
                }
                if (value.min) {
                    results.push(field >= value.min);
                }
                if (value.max) {
                    results.push(field <= value.max);
                }
                if (value.any && Array.isArray(value.any)) {
                    if (Array.isArray(field)) {
                        results.push(value.any.some((v) => field.includes(v)));
                    }
                    else {
                        results.push(value.any.includes(field));
                    }
                }
                if (value.all && Array.isArray(value.all)) {
                    results.push(value.all.every((v) => field.includes(v)));
                }
                if (value.not) {
                    results.push(!Helpers.filterByField(key, value.not)(item));
                }
                for (const subkey in value) {
                    if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                        const subvalue = value[subkey];
                        results.push(Helpers.filterByField(`${key}.${subkey}`, subvalue)(item));
                    }
                }
            }
            else {
                results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
            }
            return results.every((x) => x);
        };
    }
    static findAncestor(element, selector) {
        while ((element = element.parentElement) && !element.matches.call(element, selector))
            ; // tslint:disable-line
        return element;
    }
    static deepClone(item) {
        if (Array.isArray(item)) {
            const newArr = [];
            for (let i = item.length; i-- > 0;) {
                // tslint:disable-line
                newArr[i] = Helpers.deepClone(item[i]);
            }
            return newArr;
        }
        if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString()) && !item.toString().startsWith('class')) {
            let obj;
            for (const k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        if (item && typeof item === 'object') {
            const obj = {};
            for (const k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        return item;
    }
    static deepAssign(...objs) {
        if (objs.length < 2) {
            throw new Error('Need two or more objects to merge');
        }
        const target = Object.assign({}, objs[0]);
        for (let i = 1; i < objs.length; i++) {
            const source = Object.assign({}, objs[i]);
            Object.keys(source).forEach((prop) => {
                const value = source[prop];
                if (Helpers.isObject(value)) {
                    if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                        target[prop] = Helpers.deepAssign(target[prop], value);
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else if (Array.isArray(value)) {
                    if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                        const targetArray = target[prop];
                        value.forEach((sourceItem, itemIndex) => {
                            if (itemIndex < targetArray.length) {
                                const targetItem = targetArray[itemIndex];
                                if (Object.is(targetItem, sourceItem)) {
                                    return;
                                }
                                if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                    targetArray[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                    targetArray[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else {
                                    targetArray[itemIndex] = sourceItem;
                                }
                            }
                            else {
                                targetArray.push(sourceItem);
                            }
                        });
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else {
                    target[prop] = value;
                }
            });
        }
        return target;
    }
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param element any document element
     * @returns the next sibling node that is of type: Element
     */
    static getNextElementSibling(element) {
        if (element.nextElementSibling) {
            return element.nextElementSibling;
        }
        else {
            let e = element.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    }
    static dateToObject(date) {
        const dateObj = {
            day: '',
            dayPeriod: '',
            era: '',
            hour: '',
            minute: '',
            month: '',
            second: '',
            weekday: '',
            year: '',
        };
        Intl.DateTimeFormat('en-US', {
            day: 'numeric',
            era: 'short',
            hour: 'numeric',
            minute: 'numeric',
            month: 'numeric',
            second: 'numeric',
            weekday: 'long',
            year: 'numeric',
        })
            .formatToParts(date)
            .forEach((dateTimeFormatPart) => {
            if (dateTimeFormatPart.type !== 'literal') {
                dateObj[dateTimeFormatPart.type] = dateTimeFormatPart.value;
            }
        });
        return dateObj;
    }
}
class Can {
    constructor(obj) {
        this.obj = obj;
    }
    have(key) {
        const props = key.split('.');
        let item = this.obj;
        for (let i = 0; i < props.length; i++) {
            item = item[props[i]];
            if (this.check(item) === false) {
                return item;
            }
        }
        return item;
    }
    check(thing) {
        return thing !== void 0;
    }
}
function can(obj) {
    return new Can(obj);
}
// Assumes data is already sorted
function binarySearch(item, array, compare) {
    return search(0, array.length - 1);
    function search(min, max) {
        if (min > max) {
            return undefined;
        }
        const guess = min + Math.floor((max - min) / 2);
        const comparison = compare(item, array[guess]);
        if (comparison === 0) {
            return array[guess];
        }
        else if (comparison === -1) {
            return search(min, guess - 1);
        }
        else if (comparison === 1) {
            return search(guess + 1, max);
        }
        else {
            throw new Error(`Input mismatch: ${JSON.stringify(item)} not comparable to ${JSON.stringify(array[guess])}`);
        }
    }
}

// NG2
const ACE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoAceEditor),
    multi: true,
};
class NovoAceEditor {
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._options = {
            showPrintMargin: false,
            displayIndentGuides: true,
        };
        this._theme = 'chrome';
        this._mode = 'javascript';
        this.text = '';
        this.onChange = (_) => { };
        this.onTouched = () => { };
    }
    set theme(theme) {
        this.setTheme(theme);
    }
    set options(options) {
        this.setOptions(options);
    }
    set mode(mode) {
        this.setMode(mode);
    }
    ngOnDestroy() {
        if (this.editor) {
            this.editor.destroy();
        }
    }
    ngOnInit() {
        this.initializeEditor();
        this.initializeOptions();
        this.initializeEvents();
    }
    initializeEditor() {
        const el = this.elementRef.nativeElement;
        this.editor = ace.edit(el);
        this.editor.$blockScrolling = Infinity;
    }
    initializeOptions() {
        this.setOptions(this._options || {});
        this.setTheme(this._theme);
        this.setMode(this._mode);
    }
    initializeEvents() {
        this.editor.on('focus', (event) => this.focus.emit(event));
        this.editor.on('blur', (event) => this.focus.emit(event));
        this.editor.on('change', () => this.updateText());
        this.editor.on('paste', () => this.updateText());
    }
    updateText() {
        const newVal = this.editor.getValue();
        if (newVal === this.oldText) {
            return;
        }
        this.text = newVal;
        this.onChange(newVal);
        this.oldText = newVal;
    }
    setText(text) {
        if (Helpers.isBlank(text)) {
            text = '';
        }
        if (this.text !== text) {
            this.text = text;
            this.editor.setValue(text);
            this.onChange(text);
            this.editor.clearSelection();
        }
    }
    setOptions(options) {
        this._options = options;
        this.editor.setOptions(options || {});
    }
    setTheme(theme) {
        this._theme = theme;
        this.editor.setTheme(`ace/theme/${theme}`);
    }
    setMode(mode) {
        this._mode = mode;
        this.editor.getSession().setMode(`ace/mode/${this._mode}`);
    }
    writeValue(value) {
        this.setText(value);
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
}
NovoAceEditor.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAceEditor, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoAceEditor.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAceEditor, selector: "novo-ace-editor", inputs: { theme: "theme", options: "options", mode: "mode", name: "name" }, outputs: { blur: "blur", focus: "focus" }, providers: [ACE_VALUE_ACCESSOR], ngImport: i0, template: '', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAceEditor, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-ace-editor',
                    template: '',
                    providers: [ACE_VALUE_ACCESSOR],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { theme: [{
                type: Input
            }], options: [{
                type: Input
            }], mode: [{
                type: Input
            }], name: [{
                type: Input
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }] } });

// NG2
class NovoAceEditorModule {
}
NovoAceEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAceEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoAceEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAceEditorModule, declarations: [NovoAceEditor], imports: [CommonModule], exports: [NovoAceEditor] });
NovoAceEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAceEditorModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAceEditorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoAceEditor],
                    exports: [NovoAceEditor],
                }]
        }] });

// NG2
class DecodeURIPipe {
    transform(encodedString) {
        let decodedString = '';
        if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
            decodedString = decodeURIComponent(encodedString);
        }
        return decodedString;
    }
}
DecodeURIPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DecodeURIPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
DecodeURIPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DecodeURIPipe, name: "decodeURI" });
DecodeURIPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DecodeURIPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DecodeURIPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'decodeURI' }]
        }, {
            type: Injectable
        }] });

// NG2
class DefaultPipe {
    transform(value, defaultValue) {
        return value || defaultValue;
    }
}
DefaultPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
DefaultPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultPipe, name: "default" });
DefaultPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'default', pure: true }]
        }, {
            type: Injectable
        }] });

class GroupByPipe {
    transform(input, prop) {
        if (!Array.isArray(input)) {
            return input;
        }
        const arr = {};
        for (const value of input) {
            const field = can(value).have(prop);
            if (Helpers.isBlank(arr[field])) {
                arr[field] = [];
            }
            arr[field].push(value);
        }
        return Object.keys(arr).map((key) => ({ key, value: arr[key] }));
    }
}
GroupByPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GroupByPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
GroupByPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GroupByPipe, name: "groupBy" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GroupByPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'groupBy',
                }]
        }] });

// NG2
class HighlightPipe {
    transform(value, term) {
        return term ? value.replace(new RegExp(this.escapeRegexp(term.trim()), 'gi'), '<strong>$&</strong>') : value;
    }
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
}
HighlightPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HighlightPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
HighlightPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HighlightPipe, name: "highlight" });
HighlightPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HighlightPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HighlightPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'highlight', pure: true }]
        }, {
            type: Injectable
        }] });

class IsoDateRangePipe {
    constructor() { }
    transform(dates) {
        // TODO: Lookup Locale to convert to Users DateFormat
        const [start, end] = dates.map((date) => {
            if (date instanceof Date) {
                return date.toISOString().slice(0, 10);
            }
            return date.slice(0, 10);
        });
        return `${start} - ${end}`;
    }
}
IsoDateRangePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoDateRangePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IsoDateRangePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoDateRangePipe, name: "isoDateRange" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoDateRangePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'isoDateRange' }]
        }], ctorParameters: function () { return []; } });

class IsoDatePipe {
    constructor() { }
    transform(date) {
        if (date instanceof Date) {
            return date.toISOString().slice(0, 10);
        }
        return date.slice(0, 10);
    }
}
IsoDatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoDatePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IsoDatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoDatePipe, name: "isoDate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoDatePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'isoDate' }]
        }], ctorParameters: function () { return []; } });

class IsoTimeRangePipe {
    constructor() { }
    transform(dates) {
        // TODO: Lookup Locale to convert to 12hour
        const [start, end] = dates.map((date) => {
            if (date instanceof Date) {
                return date.toISOString().slice(11, 16);
            }
            return date.slice(11, 16);
        });
        return `${start} - ${end}`;
    }
}
IsoTimeRangePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoTimeRangePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IsoTimeRangePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoTimeRangePipe, name: "isoTimeRange" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoTimeRangePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'isoTimeRange' }]
        }], ctorParameters: function () { return []; } });

class IsoTimePipe {
    constructor() { }
    transform(date) {
        // TODO: Lookup Locale to convert to 12hour
        if (date instanceof Date) {
            return date.toISOString().slice(11, 16);
        }
        return date.slice(11, 16);
    }
}
IsoTimePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoTimePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
IsoTimePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoTimePipe, name: "isoTime" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: IsoTimePipe, decorators: [{
            type: Pipe,
            args: [{ name: 'isoTime' }]
        }], ctorParameters: function () { return []; } });

// NG2
// Rule storage - pluralize and singularize need to be run sequentially,
// while other rules can be optimized using an object for instant lookups.
const pluralRules = [];
const singularRules = [];
const uncountables = {};
const irregularPlurals = {};
const irregularSingles = {};
/**
 * Title case a string.
 */
function toTitleCase(str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
}
/**
 * Sanitize a pluralization rule to a usable regular expression.
 */
function sanitizeRule(rule) {
    if (typeof rule === 'string') {
        return new RegExp('^' + rule + '$', 'i');
    }
    return rule;
}
/**
 * Pass in a word token to produce a function that can replicate the case on
 * another word.
 */
function restoreCase(word, token) {
    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
        return token.toUpperCase();
    }
    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
        return toTitleCase(token);
    }
    // Lower cased words. E.g. "test".
    return token.toLowerCase();
}
/**
 * Interpolate a regexp string.
 */
function interpolate(str, args) {
    return str.replace(/\$(\d{1,2})/g, (match, index) => {
        return args[index] || '';
    });
}
/**
 * Sanitize a word by passing in the word and sanitization rules.
 */
function sanitizeWord(token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
    }
    let len = collection.length;
    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
        const rule = collection[len];
        // If the rule passes, return the replacement.
        if (rule[0].test(word)) {
            return word.replace(rule[0], (match, index, words) => {
                const result = interpolate(rule[1], [match, index, words]);
                if (match === '') {
                    return restoreCase(words[index - 1], result);
                }
                return restoreCase(match, result);
            });
        }
    }
    return word;
}
/**
 * Replace a word with the updated word.
 */
function replaceWord(replaceMap, keepMap, rules) {
    return (word) => {
        // Get the correct token and case restoration functions.
        const token = word.toLowerCase();
        // Check against the keep object map.
        if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
        }
        // Check against the replacement map for a direct word replacement.
        if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
        }
        // Run all the rules against the word.
        return sanitizeWord(token, word, rules);
    };
}
class Pluralize {
    static pluralize(word, count = 1, inclusive) {
        const pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
        return (inclusive ? `${count} ` : '') + pluralized;
    }
    static singular(word) {
        return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
    }
    static plural(word) {
        return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
    }
    static addPluralRule(rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
    }
    static addSingularRule(rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
    }
    static addUncountableRule(word) {
        if (typeof word === 'string') {
            uncountables[word.toLowerCase()] = true;
            return;
        }
        // Set singular and plural references for the word.
        Pluralize.addPluralRule(word, '$0');
        Pluralize.addSingularRule(word, '$0');
    }
    static addIrregularRule(single, plural) {
        const one = plural.toLowerCase();
        const many = single.toLowerCase();
        irregularSingles[one] = many;
        irregularPlurals[many] = one;
    }
}
/**
 * Irregular rules.
 */
[
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['thief', 'thieves'],
    ['genie', 'genies'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies'],
].forEach((rule) => {
    return Pluralize.addIrregularRule(rule[0], rule[1]);
});
/**
 * Pluralization rules.
 */
[
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you'],
].forEach((rule) => {
    return Pluralize.addPluralRule(rule[0], rule[1]);
});
/**
 * Singularization rules.
 */
[
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/([^aeiouy]|qu)ies$/i, '$1y'],
    [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
    [/(\b(?:mon|smil))ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man'],
].forEach((rule) => {
    return Pluralize.addSingularRule(rule[0], rule[1]);
});
/**
 * Uncountable rules.
 */
[
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i,
    /ois$/i,
    /deer$/i,
    /fish$/i,
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i, // "chinese", "japanese"
].forEach(Pluralize.addUncountableRule);
class PluralPipe {
    transform(value) {
        return Pluralize.pluralize(value);
    }
}
PluralPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PluralPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
PluralPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PluralPipe, name: "plural" });
PluralPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PluralPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PluralPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'plural' }]
        }, {
            type: Injectable
        }] });

// NG2
class NovoPipesModule {
}
NovoPipesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPipesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoPipesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPipesModule, declarations: [PluralPipe, DecodeURIPipe, GroupByPipe, HighlightPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe], exports: [PluralPipe, DecodeURIPipe, GroupByPipe, HighlightPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe] });
NovoPipesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPipesModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPipesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PluralPipe, DecodeURIPipe, GroupByPipe, HighlightPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe],
                    exports: [PluralPipe, DecodeURIPipe, GroupByPipe, HighlightPipe, DefaultPipe, IsoTimePipe, IsoDatePipe, IsoTimeRangePipe, IsoDateRangePipe],
                }]
        }] });

function BooleanInput() {
    return (target, propertyKey) => {
        const key = Symbol();
        return {
            get() {
                return this[key] || false;
            },
            set(value) {
                this[key] = coerceBooleanProperty(value);
            },
        };
    };
}

class NovoButtonElement {
    constructor(element) {
        this.element = element;
        /**
         * The side of the button to display the icon.
         * @deprecated
         */
        this.side = 'right';
        /**
         * The base styling to apply to the button.
         */
        this.theme = 'dialogue';
        /**
         * Make the button non-interactive.
         */
        this.disabled = false;
    }
    /**
     * Optionally display `bullhorn-icon` with the button along with the text.
     * @deprecated
     */
    set icon(icon) {
        if (icon) {
            this._icon = `bhi-${icon}`;
        }
    }
    get icon() {
        return this._icon;
    }
    /** Focuses the input. */
    focus(options) {
        this.element.nativeElement.focus(options);
    }
}
NovoButtonElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoButtonElement, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoButtonElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: { color: "color", side: "side", size: "size", theme: "theme", loading: "loading", icon: "icon", disabled: "disabled" }, host: { properties: { "attr.theme": "theme", "attr.color": "color", "attr.icon": "icon", "attr.loading": "loading", "attr.side": "side", "attr.size": "size", "attr.role": "'button'", "class.novo-button-disabled": "this.disabled" }, classAttribute: "novo-button" }, ngImport: i0, template: `
    <!--Left Icon-->
    <i *ngIf="icon && side === 'left' && !loading" [ngClass]="icon" class="novo-button-icon novo-button-icon-left"></i>
    <!--Transcluded Content-->
    <span #textContent class="button-contents"><ng-content></ng-content></span>
    <!--Right Icon-->
    <i *ngIf="icon && side === 'right' && !loading" [ngClass]="icon" class="novo-button-icon novo-button-icon-right"></i>
    <!--Loading-->
    <i *ngIf="loading" class="loading novo-button-loading">
      <svg
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
        x="0px"
        y="0px"
        width="18.2px"
        height="18.5px"
        viewBox="0 0 18.2 18.5"
        style="enable-background:new 0 0 18.2 18.5;"
        xml:space="preserve"
      >
        <style type="text/css">
          .spinner {
            fill: #ffffff;
          }
        </style>
        <path
          class="spinner"
          d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
        />
      </svg>
    </i>
  `, isInline: true, styles: [":host{display:inline-flex;flex-direction:row;align-items:center;justify-content:center;padding:0 1rem;font-size:var(--font-size-button);height:3rem;border:none;color:#3d464d;color:var(--text-main, #3d464d);background:transparent;border-radius:3px;text-transform:uppercase;transition:all .2s ease-in-out;gap:1rem;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;text-overflow:clip;white-space:nowrap;overflow:hidden;flex:0 0 auto}:host .button-contents{height:var(--font-size-button);display:inline-flex;align-items:center;line-height:1;font-size:inherit;color:inherit;text-transform:uppercase}:host i{height:var(--font-size-button);font-size:inherit;line-height:1}:host[size=small],:host[size=sm]{font-size:1rem;padding:0 1rem;height:2.4rem;gap:.5rem}:host[size=small] .button-contents,:host[size=small] i,:host[size=sm] .button-contents,:host[size=sm] i{height:1rem}:host[size=large],:host[size=lg]{font-size:1.6rem;padding:0 1.25rem;height:3.6rem;gap:1.25rem}:host[size=large] .button-contents,:host[size=large] i,:host[size=lg] .button-contents,:host[size=lg] i{height:1.6rem}:host:focus{outline:none}:host[disabled],:host.novo-button-disabled{opacity:.5;cursor:not-allowed;pointer-events:none}:host[disabled=false]{opacity:1;cursor:pointer;pointer-events:auto}:host[loading=true]{opacity:.5;cursor:not-allowed;pointer-events:none}:host[loading=true] i.loading{display:flex;align-items:center;justify-content:center;-webkit-animation:rotate 1.2s linear infinite;animation:rotate 1.2s linear infinite}:host[loading=true] i.loading svg{width:100%;height:100%;max-width:15px;max-height:15px}:host[loading=true] i.loading svg .spinner{fill:currentColor}@-webkit-keyframes rotate{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes rotate{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n", ":host[theme=standard]{color:var(--button-text);background:var(--button-background)}:host[theme=standard][color=black]{color:#fff;background:#000000}:host[theme=standard][color=white]{color:#3d464d;background:#ffffff}:host[theme=standard][color=gray]{color:#3d464d;background:#9e9e9e}:host[theme=standard][color=grey]{color:#3d464d;background:#9e9e9e}:host[theme=standard][color=offWhite]{color:#3d464d;background:#f7f7f7}:host[theme=standard][color=bright]{color:#3d464d;background:#f7f7f7}:host[theme=standard][color=light]{color:#3d464d;background:#dbdbdb}:host[theme=standard][color=neutral]{color:#fff;background:#4f5361}:host[theme=standard][color=dark]{color:#fff;background:#3d464d}:host[theme=standard][color=orange]{color:#3d464d;background:#ff6900}:host[theme=standard][color=navigation]{color:#fff;background:#202945}:host[theme=standard][color=skyBlue]{color:#fff;background:#009bdf}:host[theme=standard][color=steel]{color:#fff;background:#5b6770}:host[theme=standard][color=metal]{color:#fff;background:#637893}:host[theme=standard][color=sand]{color:#3d464d;background:#f4f4f4}:host[theme=standard][color=silver]{color:#3d464d;background:#e2e2e2}:host[theme=standard][color=stone]{color:#3d464d;background:#bebebe}:host[theme=standard][color=ash]{color:#3d464d;background:#a0a0a0}:host[theme=standard][color=slate]{color:#fff;background:#707070}:host[theme=standard][color=onyx]{color:#fff;background:#526980}:host[theme=standard][color=charcoal]{color:#fff;background:#282828}:host[theme=standard][color=moonlight]{color:#fff;background:#1a242f}:host[theme=standard][color=midnight]{color:#fff;background:#202945}:host[theme=standard][color=darkness]{color:#fff;background:#161f27}:host[theme=standard][color=navy]{color:#fff;background:#0d2d42}:host[theme=standard][color=aqua]{color:#3d464d;background:#3bafda}:host[theme=standard][color=ocean]{color:#fff;background:#4a89dc}:host[theme=standard][color=mint]{color:#3d464d;background:#37bc9b}:host[theme=standard][color=grass]{color:#fff;background:#8cc152}:host[theme=standard][color=sunflower]{color:#fff;background:#f6b042}:host[theme=standard][color=bittersweet]{color:#fff;background:#eb6845}:host[theme=standard][color=grapefruit]{color:#fff;background:#da4453}:host[theme=standard][color=carnation]{color:#fff;background:#d770ad}:host[theme=standard][color=lavender]{color:#fff;background:#967adc}:host[theme=standard][color=mountain]{color:#fff;background:#9678b6}:host[theme=standard][color=info]{color:#fff;background:#4a89dc}:host[theme=standard][color=positive]{color:#fff;background:#4a89dc}:host[theme=standard][color=success]{color:#fff;background:#8cc152}:host[theme=standard][color=negative]{color:#fff;background:#da4453}:host[theme=standard][color=danger]{color:#fff;background:#da4453}:host[theme=standard][color=error]{color:#fff;background:#da4453}:host[theme=standard][color=warning]{color:#fff;background:#f6b042}:host[theme=standard][color=empty]{color:#3d464d;background:#cccdcc}:host[theme=standard][color=disabled]{color:#3d464d;background:#bebebe}:host[theme=standard][color=background]{color:#3d464d;background:#f7f7f7}:host[theme=standard][color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host[theme=standard][color=presentation]{color:#fff;background:#5b6770}:host[theme=standard][color=bullhorn]{color:#3d464d;background:#ff6900}:host[theme=standard][color=pulse]{color:#3d464d;background:#3bafda}:host[theme=standard][color=company]{color:#fff;background:#3399dd}:host[theme=standard][color=candidate]{color:#fff;background:#44bb77}:host[theme=standard][color=lead]{color:#fff;background:#aa6699}:host[theme=standard][color=contact]{color:#fff;background:#ffaa44}:host[theme=standard][color=clientcontact]{color:#fff;background:#ffaa44}:host[theme=standard][color=opportunity]{color:#fff;background:#662255}:host[theme=standard][color=job]{color:#fff;background:#bb5566}:host[theme=standard][color=joborder]{color:#fff;background:#bb5566}:host[theme=standard][color=submission]{color:#3d464d;background:#a9adbb}:host[theme=standard][color=sendout]{color:#fff;background:#747884}:host[theme=standard][color=placement]{color:#fff;background:#0b344f}:host[theme=standard][color=note]{color:#fff;background:#747884}:host[theme=standard][color=contract]{color:#fff;background:#454ea0}:host[theme=standard][color=jobCode]{color:#fff;background:#696d79}:host[theme=standard][color=earnCode]{color:#fff;background:#696d79}:host[theme=standard][color=invoiceStatement]{color:#fff;background:#696d79}:host[theme=standard][color=billableCharge]{color:#fff;background:#696d79}:host[theme=standard][color=payableCharge]{color:#fff;background:#696d79}:host[theme=standard][color=user]{color:#fff;background:#696d79}:host[theme=standard][color=corporateUser]{color:#fff;background:#696d79}:host[theme=standard][color=distributionList]{color:#fff;background:#696d79}:host[theme=standard][color=credential]{color:#fff;background:#696d79}:host[theme=standard][color=person]{color:#fff;background:#696d79}:host[theme=standard]:hover,:host[theme=standard]:focus{box-shadow:0 3px 7px #00000026,0 1px 2px #00000026}:host[theme=standard]:active{box-shadow:0 1px 2px #00000026}\n", ":host[theme=primary]{background:#4a89dc;color:#fff;text-align:left}:host[theme=primary][color=black]{color:#fff;background:#000000}:host[theme=primary][color=white]{color:#3d464d;background:#ffffff}:host[theme=primary][color=gray]{color:#3d464d;background:#9e9e9e}:host[theme=primary][color=grey]{color:#3d464d;background:#9e9e9e}:host[theme=primary][color=offWhite]{color:#3d464d;background:#f7f7f7}:host[theme=primary][color=bright]{color:#3d464d;background:#f7f7f7}:host[theme=primary][color=light]{color:#3d464d;background:#dbdbdb}:host[theme=primary][color=neutral]{color:#fff;background:#4f5361}:host[theme=primary][color=dark]{color:#fff;background:#3d464d}:host[theme=primary][color=orange]{color:#3d464d;background:#ff6900}:host[theme=primary][color=navigation]{color:#fff;background:#202945}:host[theme=primary][color=skyBlue]{color:#fff;background:#009bdf}:host[theme=primary][color=steel]{color:#fff;background:#5b6770}:host[theme=primary][color=metal]{color:#fff;background:#637893}:host[theme=primary][color=sand]{color:#3d464d;background:#f4f4f4}:host[theme=primary][color=silver]{color:#3d464d;background:#e2e2e2}:host[theme=primary][color=stone]{color:#3d464d;background:#bebebe}:host[theme=primary][color=ash]{color:#3d464d;background:#a0a0a0}:host[theme=primary][color=slate]{color:#fff;background:#707070}:host[theme=primary][color=onyx]{color:#fff;background:#526980}:host[theme=primary][color=charcoal]{color:#fff;background:#282828}:host[theme=primary][color=moonlight]{color:#fff;background:#1a242f}:host[theme=primary][color=midnight]{color:#fff;background:#202945}:host[theme=primary][color=darkness]{color:#fff;background:#161f27}:host[theme=primary][color=navy]{color:#fff;background:#0d2d42}:host[theme=primary][color=aqua]{color:#3d464d;background:#3bafda}:host[theme=primary][color=ocean]{color:#fff;background:#4a89dc}:host[theme=primary][color=mint]{color:#3d464d;background:#37bc9b}:host[theme=primary][color=grass]{color:#fff;background:#8cc152}:host[theme=primary][color=sunflower]{color:#fff;background:#f6b042}:host[theme=primary][color=bittersweet]{color:#fff;background:#eb6845}:host[theme=primary][color=grapefruit]{color:#fff;background:#da4453}:host[theme=primary][color=carnation]{color:#fff;background:#d770ad}:host[theme=primary][color=lavender]{color:#fff;background:#967adc}:host[theme=primary][color=mountain]{color:#fff;background:#9678b6}:host[theme=primary][color=info]{color:#fff;background:#4a89dc}:host[theme=primary][color=positive]{color:#fff;background:#4a89dc}:host[theme=primary][color=success]{color:#fff;background:#8cc152}:host[theme=primary][color=negative]{color:#fff;background:#da4453}:host[theme=primary][color=danger]{color:#fff;background:#da4453}:host[theme=primary][color=error]{color:#fff;background:#da4453}:host[theme=primary][color=warning]{color:#fff;background:#f6b042}:host[theme=primary][color=empty]{color:#3d464d;background:#cccdcc}:host[theme=primary][color=disabled]{color:#3d464d;background:#bebebe}:host[theme=primary][color=background]{color:#3d464d;background:#f7f7f7}:host[theme=primary][color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host[theme=primary][color=presentation]{color:#fff;background:#5b6770}:host[theme=primary][color=bullhorn]{color:#3d464d;background:#ff6900}:host[theme=primary][color=pulse]{color:#3d464d;background:#3bafda}:host[theme=primary][color=company]{color:#fff;background:#3399dd}:host[theme=primary][color=candidate]{color:#fff;background:#44bb77}:host[theme=primary][color=lead]{color:#fff;background:#aa6699}:host[theme=primary][color=contact]{color:#fff;background:#ffaa44}:host[theme=primary][color=clientcontact]{color:#fff;background:#ffaa44}:host[theme=primary][color=opportunity]{color:#fff;background:#662255}:host[theme=primary][color=job]{color:#fff;background:#bb5566}:host[theme=primary][color=joborder]{color:#fff;background:#bb5566}:host[theme=primary][color=submission]{color:#3d464d;background:#a9adbb}:host[theme=primary][color=sendout]{color:#fff;background:#747884}:host[theme=primary][color=placement]{color:#fff;background:#0b344f}:host[theme=primary][color=note]{color:#fff;background:#747884}:host[theme=primary][color=contract]{color:#fff;background:#454ea0}:host[theme=primary][color=jobCode]{color:#fff;background:#696d79}:host[theme=primary][color=earnCode]{color:#fff;background:#696d79}:host[theme=primary][color=invoiceStatement]{color:#fff;background:#696d79}:host[theme=primary][color=billableCharge]{color:#fff;background:#696d79}:host[theme=primary][color=payableCharge]{color:#fff;background:#696d79}:host[theme=primary][color=user]{color:#fff;background:#696d79}:host[theme=primary][color=corporateUser]{color:#fff;background:#696d79}:host[theme=primary][color=distributionList]{color:#fff;background:#696d79}:host[theme=primary][color=credential]{color:#fff;background:#696d79}:host[theme=primary][color=person]{color:#fff;background:#696d79}:host[theme=primary]:hover,:host[theme=primary]:focus{box-shadow:0 3px 7px #00000026,0 1px 2px #00000026;filter:brightness(1.15)}:host[theme=primary]:active{filter:brightness(.85);box-shadow:0 1px 2px #00000026}:host[theme=primary][color=white]{background:#ffffff;color:#4a89dc}:host[theme=primary][color=white]:hover,:host[theme=primary][color=white]:focus{background:#f7f7f7}:host[theme=primary][color=white]:active{background:#eaeaea}:host[theme=primary][color=white] i{background:rgba(0,0,0,.05)}:host[theme=primary][size=large] i{margin-left:3px}\n", ":host[theme=secondary]{text-align:left;align-items:center;background:#ffffff;color:#4a89dc;border:1px solid #4a89dc;padding:0 calc(1rem - 1px)}:host[theme=secondary][color=black]{color:#000}:host[theme=secondary][color=black] i{color:#000}:host[theme=secondary][color=white]{color:#fff}:host[theme=secondary][color=white] i{color:#fff}:host[theme=secondary][color=gray]{color:#9e9e9e}:host[theme=secondary][color=gray] i{color:#9e9e9e}:host[theme=secondary][color=grey]{color:#9e9e9e}:host[theme=secondary][color=grey] i{color:#9e9e9e}:host[theme=secondary][color=offWhite]{color:#f7f7f7}:host[theme=secondary][color=offWhite] i{color:#f7f7f7}:host[theme=secondary][color=bright]{color:#f7f7f7}:host[theme=secondary][color=bright] i{color:#f7f7f7}:host[theme=secondary][color=light]{color:#dbdbdb}:host[theme=secondary][color=light] i{color:#dbdbdb}:host[theme=secondary][color=neutral]{color:#4f5361}:host[theme=secondary][color=neutral] i{color:#4f5361}:host[theme=secondary][color=dark]{color:#3d464d}:host[theme=secondary][color=dark] i{color:#3d464d}:host[theme=secondary][color=orange]{color:#ff6900}:host[theme=secondary][color=orange] i{color:#ff6900}:host[theme=secondary][color=navigation]{color:#202945}:host[theme=secondary][color=navigation] i{color:#202945}:host[theme=secondary][color=skyBlue]{color:#009bdf}:host[theme=secondary][color=skyBlue] i{color:#009bdf}:host[theme=secondary][color=steel]{color:#5b6770}:host[theme=secondary][color=steel] i{color:#5b6770}:host[theme=secondary][color=metal]{color:#637893}:host[theme=secondary][color=metal] i{color:#637893}:host[theme=secondary][color=sand]{color:#f4f4f4}:host[theme=secondary][color=sand] i{color:#f4f4f4}:host[theme=secondary][color=silver]{color:#e2e2e2}:host[theme=secondary][color=silver] i{color:#e2e2e2}:host[theme=secondary][color=stone]{color:#bebebe}:host[theme=secondary][color=stone] i{color:#bebebe}:host[theme=secondary][color=ash]{color:#a0a0a0}:host[theme=secondary][color=ash] i{color:#a0a0a0}:host[theme=secondary][color=slate]{color:#707070}:host[theme=secondary][color=slate] i{color:#707070}:host[theme=secondary][color=onyx]{color:#526980}:host[theme=secondary][color=onyx] i{color:#526980}:host[theme=secondary][color=charcoal]{color:#282828}:host[theme=secondary][color=charcoal] i{color:#282828}:host[theme=secondary][color=moonlight]{color:#1a242f}:host[theme=secondary][color=moonlight] i{color:#1a242f}:host[theme=secondary][color=midnight]{color:#202945}:host[theme=secondary][color=midnight] i{color:#202945}:host[theme=secondary][color=darkness]{color:#161f27}:host[theme=secondary][color=darkness] i{color:#161f27}:host[theme=secondary][color=navy]{color:#0d2d42}:host[theme=secondary][color=navy] i{color:#0d2d42}:host[theme=secondary][color=aqua]{color:#3bafda}:host[theme=secondary][color=aqua] i{color:#3bafda}:host[theme=secondary][color=ocean]{color:#4a89dc}:host[theme=secondary][color=ocean] i{color:#4a89dc}:host[theme=secondary][color=mint]{color:#37bc9b}:host[theme=secondary][color=mint] i{color:#37bc9b}:host[theme=secondary][color=grass]{color:#8cc152}:host[theme=secondary][color=grass] i{color:#8cc152}:host[theme=secondary][color=sunflower]{color:#f6b042}:host[theme=secondary][color=sunflower] i{color:#f6b042}:host[theme=secondary][color=bittersweet]{color:#eb6845}:host[theme=secondary][color=bittersweet] i{color:#eb6845}:host[theme=secondary][color=grapefruit]{color:#da4453}:host[theme=secondary][color=grapefruit] i{color:#da4453}:host[theme=secondary][color=carnation]{color:#d770ad}:host[theme=secondary][color=carnation] i{color:#d770ad}:host[theme=secondary][color=lavender]{color:#967adc}:host[theme=secondary][color=lavender] i{color:#967adc}:host[theme=secondary][color=mountain]{color:#9678b6}:host[theme=secondary][color=mountain] i{color:#9678b6}:host[theme=secondary][color=info]{color:#4a89dc}:host[theme=secondary][color=info] i{color:#4a89dc}:host[theme=secondary][color=positive]{color:#4a89dc}:host[theme=secondary][color=positive] i{color:#4a89dc}:host[theme=secondary][color=success]{color:#8cc152}:host[theme=secondary][color=success] i{color:#8cc152}:host[theme=secondary][color=negative]{color:#da4453}:host[theme=secondary][color=negative] i{color:#da4453}:host[theme=secondary][color=danger]{color:#da4453}:host[theme=secondary][color=danger] i{color:#da4453}:host[theme=secondary][color=error]{color:#da4453}:host[theme=secondary][color=error] i{color:#da4453}:host[theme=secondary][color=warning]{color:#f6b042}:host[theme=secondary][color=warning] i{color:#f6b042}:host[theme=secondary][color=empty]{color:#cccdcc}:host[theme=secondary][color=empty] i{color:#cccdcc}:host[theme=secondary][color=disabled]{color:#bebebe}:host[theme=secondary][color=disabled] i{color:#bebebe}:host[theme=secondary][color=background]{color:#f7f7f7}:host[theme=secondary][color=background] i{color:#f7f7f7}:host[theme=secondary][color=backgroundDark]{color:#e2e2e2}:host[theme=secondary][color=backgroundDark] i{color:#e2e2e2}:host[theme=secondary][color=presentation]{color:#5b6770}:host[theme=secondary][color=presentation] i{color:#5b6770}:host[theme=secondary][color=bullhorn]{color:#ff6900}:host[theme=secondary][color=bullhorn] i{color:#ff6900}:host[theme=secondary][color=pulse]{color:#3bafda}:host[theme=secondary][color=pulse] i{color:#3bafda}:host[theme=secondary][color=company]{color:#39d}:host[theme=secondary][color=company] i{color:#39d}:host[theme=secondary][color=candidate]{color:#4b7}:host[theme=secondary][color=candidate] i{color:#4b7}:host[theme=secondary][color=lead]{color:#a69}:host[theme=secondary][color=lead] i{color:#a69}:host[theme=secondary][color=contact]{color:#fa4}:host[theme=secondary][color=contact] i{color:#fa4}:host[theme=secondary][color=clientcontact]{color:#fa4}:host[theme=secondary][color=clientcontact] i{color:#fa4}:host[theme=secondary][color=opportunity]{color:#625}:host[theme=secondary][color=opportunity] i{color:#625}:host[theme=secondary][color=job]{color:#b56}:host[theme=secondary][color=job] i{color:#b56}:host[theme=secondary][color=joborder]{color:#b56}:host[theme=secondary][color=joborder] i{color:#b56}:host[theme=secondary][color=submission]{color:#a9adbb}:host[theme=secondary][color=submission] i{color:#a9adbb}:host[theme=secondary][color=sendout]{color:#747884}:host[theme=secondary][color=sendout] i{color:#747884}:host[theme=secondary][color=placement]{color:#0b344f}:host[theme=secondary][color=placement] i{color:#0b344f}:host[theme=secondary][color=note]{color:#747884}:host[theme=secondary][color=note] i{color:#747884}:host[theme=secondary][color=contract]{color:#454ea0}:host[theme=secondary][color=contract] i{color:#454ea0}:host[theme=secondary][color=jobCode]{color:#696d79}:host[theme=secondary][color=jobCode] i{color:#696d79}:host[theme=secondary][color=earnCode]{color:#696d79}:host[theme=secondary][color=earnCode] i{color:#696d79}:host[theme=secondary][color=invoiceStatement]{color:#696d79}:host[theme=secondary][color=invoiceStatement] i{color:#696d79}:host[theme=secondary][color=billableCharge]{color:#696d79}:host[theme=secondary][color=billableCharge] i{color:#696d79}:host[theme=secondary][color=payableCharge]{color:#696d79}:host[theme=secondary][color=payableCharge] i{color:#696d79}:host[theme=secondary][color=user]{color:#696d79}:host[theme=secondary][color=user] i{color:#696d79}:host[theme=secondary][color=corporateUser]{color:#696d79}:host[theme=secondary][color=corporateUser] i{color:#696d79}:host[theme=secondary][color=distributionList]{color:#696d79}:host[theme=secondary][color=distributionList] i{color:#696d79}:host[theme=secondary][color=credential]{color:#696d79}:host[theme=secondary][color=credential] i{color:#696d79}:host[theme=secondary][color=person]{color:#696d79}:host[theme=secondary][color=person] i{color:#696d79}:host[theme=secondary][color=black]{border:1px solid #000000}:host[theme=secondary][color=white]{border:1px solid #ffffff}:host[theme=secondary][color=gray]{border:1px solid #9e9e9e}:host[theme=secondary][color=grey]{border:1px solid #9e9e9e}:host[theme=secondary][color=offWhite]{border:1px solid #f7f7f7}:host[theme=secondary][color=bright]{border:1px solid #f7f7f7}:host[theme=secondary][color=light]{border:1px solid #dbdbdb}:host[theme=secondary][color=neutral]{border:1px solid #4f5361}:host[theme=secondary][color=dark]{border:1px solid #3d464d}:host[theme=secondary][color=orange]{border:1px solid #ff6900}:host[theme=secondary][color=navigation]{border:1px solid #202945}:host[theme=secondary][color=skyBlue]{border:1px solid #009bdf}:host[theme=secondary][color=steel]{border:1px solid #5b6770}:host[theme=secondary][color=metal]{border:1px solid #637893}:host[theme=secondary][color=sand]{border:1px solid #f4f4f4}:host[theme=secondary][color=silver]{border:1px solid #e2e2e2}:host[theme=secondary][color=stone]{border:1px solid #bebebe}:host[theme=secondary][color=ash]{border:1px solid #a0a0a0}:host[theme=secondary][color=slate]{border:1px solid #707070}:host[theme=secondary][color=onyx]{border:1px solid #526980}:host[theme=secondary][color=charcoal]{border:1px solid #282828}:host[theme=secondary][color=moonlight]{border:1px solid #1a242f}:host[theme=secondary][color=midnight]{border:1px solid #202945}:host[theme=secondary][color=darkness]{border:1px solid #161f27}:host[theme=secondary][color=navy]{border:1px solid #0d2d42}:host[theme=secondary][color=aqua]{border:1px solid #3bafda}:host[theme=secondary][color=ocean]{border:1px solid #4a89dc}:host[theme=secondary][color=mint]{border:1px solid #37bc9b}:host[theme=secondary][color=grass]{border:1px solid #8cc152}:host[theme=secondary][color=sunflower]{border:1px solid #f6b042}:host[theme=secondary][color=bittersweet]{border:1px solid #eb6845}:host[theme=secondary][color=grapefruit]{border:1px solid #da4453}:host[theme=secondary][color=carnation]{border:1px solid #d770ad}:host[theme=secondary][color=lavender]{border:1px solid #967adc}:host[theme=secondary][color=mountain]{border:1px solid #9678b6}:host[theme=secondary][color=info]{border:1px solid #4a89dc}:host[theme=secondary][color=positive]{border:1px solid #4a89dc}:host[theme=secondary][color=success]{border:1px solid #8cc152}:host[theme=secondary][color=negative]{border:1px solid #da4453}:host[theme=secondary][color=danger]{border:1px solid #da4453}:host[theme=secondary][color=error]{border:1px solid #da4453}:host[theme=secondary][color=warning]{border:1px solid #f6b042}:host[theme=secondary][color=empty]{border:1px solid #cccdcc}:host[theme=secondary][color=disabled]{border:1px solid #bebebe}:host[theme=secondary][color=background]{border:1px solid #f7f7f7}:host[theme=secondary][color=backgroundDark]{border:1px solid #e2e2e2}:host[theme=secondary][color=presentation]{border:1px solid #5b6770}:host[theme=secondary][color=bullhorn]{border:1px solid #ff6900}:host[theme=secondary][color=pulse]{border:1px solid #3bafda}:host[theme=secondary][color=company]{border:1px solid #3399dd}:host[theme=secondary][color=candidate]{border:1px solid #44bb77}:host[theme=secondary][color=lead]{border:1px solid #aa6699}:host[theme=secondary][color=contact]{border:1px solid #ffaa44}:host[theme=secondary][color=clientcontact]{border:1px solid #ffaa44}:host[theme=secondary][color=opportunity]{border:1px solid #662255}:host[theme=secondary][color=job]{border:1px solid #bb5566}:host[theme=secondary][color=joborder]{border:1px solid #bb5566}:host[theme=secondary][color=submission]{border:1px solid #a9adbb}:host[theme=secondary][color=sendout]{border:1px solid #747884}:host[theme=secondary][color=placement]{border:1px solid #0b344f}:host[theme=secondary][color=note]{border:1px solid #747884}:host[theme=secondary][color=contract]{border:1px solid #454ea0}:host[theme=secondary][color=jobCode]{border:1px solid #696d79}:host[theme=secondary][color=earnCode]{border:1px solid #696d79}:host[theme=secondary][color=invoiceStatement]{border:1px solid #696d79}:host[theme=secondary][color=billableCharge]{border:1px solid #696d79}:host[theme=secondary][color=payableCharge]{border:1px solid #696d79}:host[theme=secondary][color=user]{border:1px solid #696d79}:host[theme=secondary][color=corporateUser]{border:1px solid #696d79}:host[theme=secondary][color=distributionList]{border:1px solid #696d79}:host[theme=secondary][color=credential]{border:1px solid #696d79}:host[theme=secondary][color=person]{border:1px solid #696d79}:host[theme=secondary] i.loading{margin-left:.8rem}:host[theme=secondary] i.loading svg .spinner{fill:#4a89dc}:host[theme=secondary]:hover,:host[theme=secondary]:focus{box-shadow:0 3px 7px #00000026,0 1px 2px #00000026;background:#ffffff}:host[theme=secondary]:active{box-shadow:0 1px 2px #00000026}:host[theme=secondary][inverse]{background:rgba(0,0,0,.25);color:#fff;border:1px solid #fff}:host[theme=secondary][inverse]:hover,:host[theme=secondary][inverse]:focus{background:rgba(0,0,0,.35)}:host[theme=secondary][inverse]:active{background:rgba(0,0,0,.45)}:host[theme=secondary][inverse] i.loading svg .spinner{fill:#fff}\n", ":host[theme=fab]{border-radius:50%!important;padding:0;font-size:1.2rem;width:3.2rem;height:3.2rem;display:inline-flex;align-items:center;justify-content:center}:host[theme=fab][color=black]{color:#fff;background:#000000}:host[theme=fab][color=white]{color:#3d464d;background:#ffffff}:host[theme=fab][color=gray]{color:#3d464d;background:#9e9e9e}:host[theme=fab][color=grey]{color:#3d464d;background:#9e9e9e}:host[theme=fab][color=offWhite]{color:#3d464d;background:#f7f7f7}:host[theme=fab][color=bright]{color:#3d464d;background:#f7f7f7}:host[theme=fab][color=light]{color:#3d464d;background:#dbdbdb}:host[theme=fab][color=neutral]{color:#fff;background:#4f5361}:host[theme=fab][color=dark]{color:#fff;background:#3d464d}:host[theme=fab][color=orange]{color:#3d464d;background:#ff6900}:host[theme=fab][color=navigation]{color:#fff;background:#202945}:host[theme=fab][color=skyBlue]{color:#fff;background:#009bdf}:host[theme=fab][color=steel]{color:#fff;background:#5b6770}:host[theme=fab][color=metal]{color:#fff;background:#637893}:host[theme=fab][color=sand]{color:#3d464d;background:#f4f4f4}:host[theme=fab][color=silver]{color:#3d464d;background:#e2e2e2}:host[theme=fab][color=stone]{color:#3d464d;background:#bebebe}:host[theme=fab][color=ash]{color:#3d464d;background:#a0a0a0}:host[theme=fab][color=slate]{color:#fff;background:#707070}:host[theme=fab][color=onyx]{color:#fff;background:#526980}:host[theme=fab][color=charcoal]{color:#fff;background:#282828}:host[theme=fab][color=moonlight]{color:#fff;background:#1a242f}:host[theme=fab][color=midnight]{color:#fff;background:#202945}:host[theme=fab][color=darkness]{color:#fff;background:#161f27}:host[theme=fab][color=navy]{color:#fff;background:#0d2d42}:host[theme=fab][color=aqua]{color:#3d464d;background:#3bafda}:host[theme=fab][color=ocean]{color:#fff;background:#4a89dc}:host[theme=fab][color=mint]{color:#3d464d;background:#37bc9b}:host[theme=fab][color=grass]{color:#fff;background:#8cc152}:host[theme=fab][color=sunflower]{color:#fff;background:#f6b042}:host[theme=fab][color=bittersweet]{color:#fff;background:#eb6845}:host[theme=fab][color=grapefruit]{color:#fff;background:#da4453}:host[theme=fab][color=carnation]{color:#fff;background:#d770ad}:host[theme=fab][color=lavender]{color:#fff;background:#967adc}:host[theme=fab][color=mountain]{color:#fff;background:#9678b6}:host[theme=fab][color=info]{color:#fff;background:#4a89dc}:host[theme=fab][color=positive]{color:#fff;background:#4a89dc}:host[theme=fab][color=success]{color:#fff;background:#8cc152}:host[theme=fab][color=negative]{color:#fff;background:#da4453}:host[theme=fab][color=danger]{color:#fff;background:#da4453}:host[theme=fab][color=error]{color:#fff;background:#da4453}:host[theme=fab][color=warning]{color:#fff;background:#f6b042}:host[theme=fab][color=empty]{color:#3d464d;background:#cccdcc}:host[theme=fab][color=disabled]{color:#3d464d;background:#bebebe}:host[theme=fab][color=background]{color:#3d464d;background:#f7f7f7}:host[theme=fab][color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host[theme=fab][color=presentation]{color:#fff;background:#5b6770}:host[theme=fab][color=bullhorn]{color:#3d464d;background:#ff6900}:host[theme=fab][color=pulse]{color:#3d464d;background:#3bafda}:host[theme=fab][color=company]{color:#fff;background:#3399dd}:host[theme=fab][color=candidate]{color:#fff;background:#44bb77}:host[theme=fab][color=lead]{color:#fff;background:#aa6699}:host[theme=fab][color=contact]{color:#fff;background:#ffaa44}:host[theme=fab][color=clientcontact]{color:#fff;background:#ffaa44}:host[theme=fab][color=opportunity]{color:#fff;background:#662255}:host[theme=fab][color=job]{color:#fff;background:#bb5566}:host[theme=fab][color=joborder]{color:#fff;background:#bb5566}:host[theme=fab][color=submission]{color:#3d464d;background:#a9adbb}:host[theme=fab][color=sendout]{color:#fff;background:#747884}:host[theme=fab][color=placement]{color:#fff;background:#0b344f}:host[theme=fab][color=note]{color:#fff;background:#747884}:host[theme=fab][color=contract]{color:#fff;background:#454ea0}:host[theme=fab][color=jobCode]{color:#fff;background:#696d79}:host[theme=fab][color=earnCode]{color:#fff;background:#696d79}:host[theme=fab][color=invoiceStatement]{color:#fff;background:#696d79}:host[theme=fab][color=billableCharge]{color:#fff;background:#696d79}:host[theme=fab][color=payableCharge]{color:#fff;background:#696d79}:host[theme=fab][color=user]{color:#fff;background:#696d79}:host[theme=fab][color=corporateUser]{color:#fff;background:#696d79}:host[theme=fab][color=distributionList]{color:#fff;background:#696d79}:host[theme=fab][color=credential]{color:#fff;background:#696d79}:host[theme=fab][color=person]{color:#fff;background:#696d79}:host[theme=fab][inverse]{color:#fff}:host[theme=fab]:focus,:host[theme=fab]:hover{box-shadow:0 1px 2px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f}:host[theme=fab]:active{box-shadow:0 1px 2px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f}:host[theme=fab] .button-contents{display:contents}:host[theme=fab] i{margin:0;padding:0}:host[theme=fab] i:before{display:block}\n", ":host[theme=icon]{padding:.5rem;font-size:1.4rem;height:2.4rem}:host[theme=icon][color=black]{color:#000}:host[theme=icon][color=black] i{color:#000}:host[theme=icon][color=white]{color:#fff}:host[theme=icon][color=white] i{color:#fff}:host[theme=icon][color=gray]{color:#9e9e9e}:host[theme=icon][color=gray] i{color:#9e9e9e}:host[theme=icon][color=grey]{color:#9e9e9e}:host[theme=icon][color=grey] i{color:#9e9e9e}:host[theme=icon][color=offWhite]{color:#f7f7f7}:host[theme=icon][color=offWhite] i{color:#f7f7f7}:host[theme=icon][color=bright]{color:#f7f7f7}:host[theme=icon][color=bright] i{color:#f7f7f7}:host[theme=icon][color=light]{color:#dbdbdb}:host[theme=icon][color=light] i{color:#dbdbdb}:host[theme=icon][color=neutral]{color:#4f5361}:host[theme=icon][color=neutral] i{color:#4f5361}:host[theme=icon][color=dark]{color:#3d464d}:host[theme=icon][color=dark] i{color:#3d464d}:host[theme=icon][color=orange]{color:#ff6900}:host[theme=icon][color=orange] i{color:#ff6900}:host[theme=icon][color=navigation]{color:#202945}:host[theme=icon][color=navigation] i{color:#202945}:host[theme=icon][color=skyBlue]{color:#009bdf}:host[theme=icon][color=skyBlue] i{color:#009bdf}:host[theme=icon][color=steel]{color:#5b6770}:host[theme=icon][color=steel] i{color:#5b6770}:host[theme=icon][color=metal]{color:#637893}:host[theme=icon][color=metal] i{color:#637893}:host[theme=icon][color=sand]{color:#f4f4f4}:host[theme=icon][color=sand] i{color:#f4f4f4}:host[theme=icon][color=silver]{color:#e2e2e2}:host[theme=icon][color=silver] i{color:#e2e2e2}:host[theme=icon][color=stone]{color:#bebebe}:host[theme=icon][color=stone] i{color:#bebebe}:host[theme=icon][color=ash]{color:#a0a0a0}:host[theme=icon][color=ash] i{color:#a0a0a0}:host[theme=icon][color=slate]{color:#707070}:host[theme=icon][color=slate] i{color:#707070}:host[theme=icon][color=onyx]{color:#526980}:host[theme=icon][color=onyx] i{color:#526980}:host[theme=icon][color=charcoal]{color:#282828}:host[theme=icon][color=charcoal] i{color:#282828}:host[theme=icon][color=moonlight]{color:#1a242f}:host[theme=icon][color=moonlight] i{color:#1a242f}:host[theme=icon][color=midnight]{color:#202945}:host[theme=icon][color=midnight] i{color:#202945}:host[theme=icon][color=darkness]{color:#161f27}:host[theme=icon][color=darkness] i{color:#161f27}:host[theme=icon][color=navy]{color:#0d2d42}:host[theme=icon][color=navy] i{color:#0d2d42}:host[theme=icon][color=aqua]{color:#3bafda}:host[theme=icon][color=aqua] i{color:#3bafda}:host[theme=icon][color=ocean]{color:#4a89dc}:host[theme=icon][color=ocean] i{color:#4a89dc}:host[theme=icon][color=mint]{color:#37bc9b}:host[theme=icon][color=mint] i{color:#37bc9b}:host[theme=icon][color=grass]{color:#8cc152}:host[theme=icon][color=grass] i{color:#8cc152}:host[theme=icon][color=sunflower]{color:#f6b042}:host[theme=icon][color=sunflower] i{color:#f6b042}:host[theme=icon][color=bittersweet]{color:#eb6845}:host[theme=icon][color=bittersweet] i{color:#eb6845}:host[theme=icon][color=grapefruit]{color:#da4453}:host[theme=icon][color=grapefruit] i{color:#da4453}:host[theme=icon][color=carnation]{color:#d770ad}:host[theme=icon][color=carnation] i{color:#d770ad}:host[theme=icon][color=lavender]{color:#967adc}:host[theme=icon][color=lavender] i{color:#967adc}:host[theme=icon][color=mountain]{color:#9678b6}:host[theme=icon][color=mountain] i{color:#9678b6}:host[theme=icon][color=info]{color:#4a89dc}:host[theme=icon][color=info] i{color:#4a89dc}:host[theme=icon][color=positive]{color:#4a89dc}:host[theme=icon][color=positive] i{color:#4a89dc}:host[theme=icon][color=success]{color:#8cc152}:host[theme=icon][color=success] i{color:#8cc152}:host[theme=icon][color=negative]{color:#da4453}:host[theme=icon][color=negative] i{color:#da4453}:host[theme=icon][color=danger]{color:#da4453}:host[theme=icon][color=danger] i{color:#da4453}:host[theme=icon][color=error]{color:#da4453}:host[theme=icon][color=error] i{color:#da4453}:host[theme=icon][color=warning]{color:#f6b042}:host[theme=icon][color=warning] i{color:#f6b042}:host[theme=icon][color=empty]{color:#cccdcc}:host[theme=icon][color=empty] i{color:#cccdcc}:host[theme=icon][color=disabled]{color:#bebebe}:host[theme=icon][color=disabled] i{color:#bebebe}:host[theme=icon][color=background]{color:#f7f7f7}:host[theme=icon][color=background] i{color:#f7f7f7}:host[theme=icon][color=backgroundDark]{color:#e2e2e2}:host[theme=icon][color=backgroundDark] i{color:#e2e2e2}:host[theme=icon][color=presentation]{color:#5b6770}:host[theme=icon][color=presentation] i{color:#5b6770}:host[theme=icon][color=bullhorn]{color:#ff6900}:host[theme=icon][color=bullhorn] i{color:#ff6900}:host[theme=icon][color=pulse]{color:#3bafda}:host[theme=icon][color=pulse] i{color:#3bafda}:host[theme=icon][color=company]{color:#39d}:host[theme=icon][color=company] i{color:#39d}:host[theme=icon][color=candidate]{color:#4b7}:host[theme=icon][color=candidate] i{color:#4b7}:host[theme=icon][color=lead]{color:#a69}:host[theme=icon][color=lead] i{color:#a69}:host[theme=icon][color=contact]{color:#fa4}:host[theme=icon][color=contact] i{color:#fa4}:host[theme=icon][color=clientcontact]{color:#fa4}:host[theme=icon][color=clientcontact] i{color:#fa4}:host[theme=icon][color=opportunity]{color:#625}:host[theme=icon][color=opportunity] i{color:#625}:host[theme=icon][color=job]{color:#b56}:host[theme=icon][color=job] i{color:#b56}:host[theme=icon][color=joborder]{color:#b56}:host[theme=icon][color=joborder] i{color:#b56}:host[theme=icon][color=submission]{color:#a9adbb}:host[theme=icon][color=submission] i{color:#a9adbb}:host[theme=icon][color=sendout]{color:#747884}:host[theme=icon][color=sendout] i{color:#747884}:host[theme=icon][color=placement]{color:#0b344f}:host[theme=icon][color=placement] i{color:#0b344f}:host[theme=icon][color=note]{color:#747884}:host[theme=icon][color=note] i{color:#747884}:host[theme=icon][color=contract]{color:#454ea0}:host[theme=icon][color=contract] i{color:#454ea0}:host[theme=icon][color=jobCode]{color:#696d79}:host[theme=icon][color=jobCode] i{color:#696d79}:host[theme=icon][color=earnCode]{color:#696d79}:host[theme=icon][color=earnCode] i{color:#696d79}:host[theme=icon][color=invoiceStatement]{color:#696d79}:host[theme=icon][color=invoiceStatement] i{color:#696d79}:host[theme=icon][color=billableCharge]{color:#696d79}:host[theme=icon][color=billableCharge] i{color:#696d79}:host[theme=icon][color=payableCharge]{color:#696d79}:host[theme=icon][color=payableCharge] i{color:#696d79}:host[theme=icon][color=user]{color:#696d79}:host[theme=icon][color=user] i{color:#696d79}:host[theme=icon][color=corporateUser]{color:#696d79}:host[theme=icon][color=corporateUser] i{color:#696d79}:host[theme=icon][color=distributionList]{color:#696d79}:host[theme=icon][color=distributionList] i{color:#696d79}:host[theme=icon][color=credential]{color:#696d79}:host[theme=icon][color=credential] i{color:#696d79}:host[theme=icon][color=person]{color:#696d79}:host[theme=icon][color=person] i{color:#696d79}:host[theme=icon][inverse]{color:#fff}:host[theme=icon] i{display:contents;margin:0!important}:host[theme=icon]:focus,:host[theme=icon]:hover{background:rgba(0,0,0,.1)}:host[theme=icon]:active{background:rgba(0,0,0,.25)}:host[theme=icon] .button-contents{display:contents}:host[theme=icon][size=small]{padding:.5rem;font-size:1.2rem;height:2rem}:host[theme=icon][size=medium]{font-size:1.6rem}:host[theme=icon][size=large]{font-size:2rem;height:2.8rem;padding:1rem}\n", ":host[theme=dialogue]{background:transparent;color:#4a89dc}:host[theme=dialogue][color=black]{color:#000}:host[theme=dialogue][color=black] i{color:#000}:host[theme=dialogue][color=white]{color:#fff}:host[theme=dialogue][color=white] i{color:#fff}:host[theme=dialogue][color=gray]{color:#9e9e9e}:host[theme=dialogue][color=gray] i{color:#9e9e9e}:host[theme=dialogue][color=grey]{color:#9e9e9e}:host[theme=dialogue][color=grey] i{color:#9e9e9e}:host[theme=dialogue][color=offWhite]{color:#f7f7f7}:host[theme=dialogue][color=offWhite] i{color:#f7f7f7}:host[theme=dialogue][color=bright]{color:#f7f7f7}:host[theme=dialogue][color=bright] i{color:#f7f7f7}:host[theme=dialogue][color=light]{color:#dbdbdb}:host[theme=dialogue][color=light] i{color:#dbdbdb}:host[theme=dialogue][color=neutral]{color:#4f5361}:host[theme=dialogue][color=neutral] i{color:#4f5361}:host[theme=dialogue][color=dark]{color:#3d464d}:host[theme=dialogue][color=dark] i{color:#3d464d}:host[theme=dialogue][color=orange]{color:#ff6900}:host[theme=dialogue][color=orange] i{color:#ff6900}:host[theme=dialogue][color=navigation]{color:#202945}:host[theme=dialogue][color=navigation] i{color:#202945}:host[theme=dialogue][color=skyBlue]{color:#009bdf}:host[theme=dialogue][color=skyBlue] i{color:#009bdf}:host[theme=dialogue][color=steel]{color:#5b6770}:host[theme=dialogue][color=steel] i{color:#5b6770}:host[theme=dialogue][color=metal]{color:#637893}:host[theme=dialogue][color=metal] i{color:#637893}:host[theme=dialogue][color=sand]{color:#f4f4f4}:host[theme=dialogue][color=sand] i{color:#f4f4f4}:host[theme=dialogue][color=silver]{color:#e2e2e2}:host[theme=dialogue][color=silver] i{color:#e2e2e2}:host[theme=dialogue][color=stone]{color:#bebebe}:host[theme=dialogue][color=stone] i{color:#bebebe}:host[theme=dialogue][color=ash]{color:#a0a0a0}:host[theme=dialogue][color=ash] i{color:#a0a0a0}:host[theme=dialogue][color=slate]{color:#707070}:host[theme=dialogue][color=slate] i{color:#707070}:host[theme=dialogue][color=onyx]{color:#526980}:host[theme=dialogue][color=onyx] i{color:#526980}:host[theme=dialogue][color=charcoal]{color:#282828}:host[theme=dialogue][color=charcoal] i{color:#282828}:host[theme=dialogue][color=moonlight]{color:#1a242f}:host[theme=dialogue][color=moonlight] i{color:#1a242f}:host[theme=dialogue][color=midnight]{color:#202945}:host[theme=dialogue][color=midnight] i{color:#202945}:host[theme=dialogue][color=darkness]{color:#161f27}:host[theme=dialogue][color=darkness] i{color:#161f27}:host[theme=dialogue][color=navy]{color:#0d2d42}:host[theme=dialogue][color=navy] i{color:#0d2d42}:host[theme=dialogue][color=aqua]{color:#3bafda}:host[theme=dialogue][color=aqua] i{color:#3bafda}:host[theme=dialogue][color=ocean]{color:#4a89dc}:host[theme=dialogue][color=ocean] i{color:#4a89dc}:host[theme=dialogue][color=mint]{color:#37bc9b}:host[theme=dialogue][color=mint] i{color:#37bc9b}:host[theme=dialogue][color=grass]{color:#8cc152}:host[theme=dialogue][color=grass] i{color:#8cc152}:host[theme=dialogue][color=sunflower]{color:#f6b042}:host[theme=dialogue][color=sunflower] i{color:#f6b042}:host[theme=dialogue][color=bittersweet]{color:#eb6845}:host[theme=dialogue][color=bittersweet] i{color:#eb6845}:host[theme=dialogue][color=grapefruit]{color:#da4453}:host[theme=dialogue][color=grapefruit] i{color:#da4453}:host[theme=dialogue][color=carnation]{color:#d770ad}:host[theme=dialogue][color=carnation] i{color:#d770ad}:host[theme=dialogue][color=lavender]{color:#967adc}:host[theme=dialogue][color=lavender] i{color:#967adc}:host[theme=dialogue][color=mountain]{color:#9678b6}:host[theme=dialogue][color=mountain] i{color:#9678b6}:host[theme=dialogue][color=info]{color:#4a89dc}:host[theme=dialogue][color=info] i{color:#4a89dc}:host[theme=dialogue][color=positive]{color:#4a89dc}:host[theme=dialogue][color=positive] i{color:#4a89dc}:host[theme=dialogue][color=success]{color:#8cc152}:host[theme=dialogue][color=success] i{color:#8cc152}:host[theme=dialogue][color=negative]{color:#da4453}:host[theme=dialogue][color=negative] i{color:#da4453}:host[theme=dialogue][color=danger]{color:#da4453}:host[theme=dialogue][color=danger] i{color:#da4453}:host[theme=dialogue][color=error]{color:#da4453}:host[theme=dialogue][color=error] i{color:#da4453}:host[theme=dialogue][color=warning]{color:#f6b042}:host[theme=dialogue][color=warning] i{color:#f6b042}:host[theme=dialogue][color=empty]{color:#cccdcc}:host[theme=dialogue][color=empty] i{color:#cccdcc}:host[theme=dialogue][color=disabled]{color:#bebebe}:host[theme=dialogue][color=disabled] i{color:#bebebe}:host[theme=dialogue][color=background]{color:#f7f7f7}:host[theme=dialogue][color=background] i{color:#f7f7f7}:host[theme=dialogue][color=backgroundDark]{color:#e2e2e2}:host[theme=dialogue][color=backgroundDark] i{color:#e2e2e2}:host[theme=dialogue][color=presentation]{color:#5b6770}:host[theme=dialogue][color=presentation] i{color:#5b6770}:host[theme=dialogue][color=bullhorn]{color:#ff6900}:host[theme=dialogue][color=bullhorn] i{color:#ff6900}:host[theme=dialogue][color=pulse]{color:#3bafda}:host[theme=dialogue][color=pulse] i{color:#3bafda}:host[theme=dialogue][color=company]{color:#39d}:host[theme=dialogue][color=company] i{color:#39d}:host[theme=dialogue][color=candidate]{color:#4b7}:host[theme=dialogue][color=candidate] i{color:#4b7}:host[theme=dialogue][color=lead]{color:#a69}:host[theme=dialogue][color=lead] i{color:#a69}:host[theme=dialogue][color=contact]{color:#fa4}:host[theme=dialogue][color=contact] i{color:#fa4}:host[theme=dialogue][color=clientcontact]{color:#fa4}:host[theme=dialogue][color=clientcontact] i{color:#fa4}:host[theme=dialogue][color=opportunity]{color:#625}:host[theme=dialogue][color=opportunity] i{color:#625}:host[theme=dialogue][color=job]{color:#b56}:host[theme=dialogue][color=job] i{color:#b56}:host[theme=dialogue][color=joborder]{color:#b56}:host[theme=dialogue][color=joborder] i{color:#b56}:host[theme=dialogue][color=submission]{color:#a9adbb}:host[theme=dialogue][color=submission] i{color:#a9adbb}:host[theme=dialogue][color=sendout]{color:#747884}:host[theme=dialogue][color=sendout] i{color:#747884}:host[theme=dialogue][color=placement]{color:#0b344f}:host[theme=dialogue][color=placement] i{color:#0b344f}:host[theme=dialogue][color=note]{color:#747884}:host[theme=dialogue][color=note] i{color:#747884}:host[theme=dialogue][color=contract]{color:#454ea0}:host[theme=dialogue][color=contract] i{color:#454ea0}:host[theme=dialogue][color=jobCode]{color:#696d79}:host[theme=dialogue][color=jobCode] i{color:#696d79}:host[theme=dialogue][color=earnCode]{color:#696d79}:host[theme=dialogue][color=earnCode] i{color:#696d79}:host[theme=dialogue][color=invoiceStatement]{color:#696d79}:host[theme=dialogue][color=invoiceStatement] i{color:#696d79}:host[theme=dialogue][color=billableCharge]{color:#696d79}:host[theme=dialogue][color=billableCharge] i{color:#696d79}:host[theme=dialogue][color=payableCharge]{color:#696d79}:host[theme=dialogue][color=payableCharge] i{color:#696d79}:host[theme=dialogue][color=user]{color:#696d79}:host[theme=dialogue][color=user] i{color:#696d79}:host[theme=dialogue][color=corporateUser]{color:#696d79}:host[theme=dialogue][color=corporateUser] i{color:#696d79}:host[theme=dialogue][color=distributionList]{color:#696d79}:host[theme=dialogue][color=distributionList] i{color:#696d79}:host[theme=dialogue][color=credential]{color:#696d79}:host[theme=dialogue][color=credential] i{color:#696d79}:host[theme=dialogue][color=person]{color:#696d79}:host[theme=dialogue][color=person] i{color:#696d79}:host[theme=dialogue] i{line-height:1.2}:host[theme=dialogue]:hover,:host[theme=dialogue]:focus{background:#ededed}:host[theme=dialogue]:active{background:#e0e0e0}:host[theme=dialogue][inverse]:hover,:host[theme=dialogue][inverse]:focus{background:rgba(0,0,0,.2)}:host[theme=dialogue][inverse]:active{background:rgba(0,0,0,.35)}\n", ":host[theme=field]{background:transparent;color:#3d464d;border:none;border-radius:0;border-bottom:1px solid var(--border);margin-bottom:4px;padding:.25rem .5rem;font-size:1.2rem;height:1.8rem;text-align:left}:host[theme=field]:hover,:host[theme=field]:focus,:host[theme=field]:active{border-bottom:1px solid var(--selection)}:host[theme=select]{cursor:pointer;display:flex;justify-content:space-between;align-items:center;background-color:transparent;border:none;border-bottom:1px solid var(--border);border-radius:0;color:var(--text-main);padding:0 2px 0 0;height:2rem;min-height:2rem;position:relative;text-align:left;text-shadow:none;width:100%;z-index:1;text-transform:none;font-size:1.2rem;height:1.8rem}:host[theme=select].empty{color:var(--text-muted)}:host[theme=select]:focus,:host[theme=select]:hover{outline:none}:host[theme=select]:hover{border-bottom:1px solid #5f6d78}:host[theme=select]:hover i{opacity:.75}:host[theme=select]:focus{border-bottom:1px solid var(--selection)}:host[theme=select]:focus i{color:#000000ba}:host[theme=select] i{font-size:.8rem;color:var(--text-main);opacity:.45}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoButtonElement.prototype, "disabled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoButtonElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-button,button[theme]', host: {
                        class: 'novo-button',
                        '[attr.theme]': 'theme',
                        '[attr.color]': 'color',
                        '[attr.icon]': 'icon',
                        '[attr.loading]': 'loading',
                        '[attr.side]': 'side',
                        '[attr.size]': 'size',
                        '[attr.role]': "'button'",
                    }, template: `
    <!--Left Icon-->
    <i *ngIf="icon && side === 'left' && !loading" [ngClass]="icon" class="novo-button-icon novo-button-icon-left"></i>
    <!--Transcluded Content-->
    <span #textContent class="button-contents"><ng-content></ng-content></span>
    <!--Right Icon-->
    <i *ngIf="icon && side === 'right' && !loading" [ngClass]="icon" class="novo-button-icon novo-button-icon-right"></i>
    <!--Loading-->
    <i *ngIf="loading" class="loading novo-button-loading">
      <svg
        version="1.1"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
        x="0px"
        y="0px"
        width="18.2px"
        height="18.5px"
        viewBox="0 0 18.2 18.5"
        style="enable-background:new 0 0 18.2 18.5;"
        xml:space="preserve"
      >
        <style type="text/css">
          .spinner {
            fill: #ffffff;
          }
        </style>
        <path
          class="spinner"
          d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
        />
      </svg>
    </i>
  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-flex;flex-direction:row;align-items:center;justify-content:center;padding:0 1rem;font-size:var(--font-size-button);height:3rem;border:none;color:#3d464d;color:var(--text-main, #3d464d);background:transparent;border-radius:3px;text-transform:uppercase;transition:all .2s ease-in-out;gap:1rem;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;text-overflow:clip;white-space:nowrap;overflow:hidden;flex:0 0 auto}:host .button-contents{height:var(--font-size-button);display:inline-flex;align-items:center;line-height:1;font-size:inherit;color:inherit;text-transform:uppercase}:host i{height:var(--font-size-button);font-size:inherit;line-height:1}:host[size=small],:host[size=sm]{font-size:1rem;padding:0 1rem;height:2.4rem;gap:.5rem}:host[size=small] .button-contents,:host[size=small] i,:host[size=sm] .button-contents,:host[size=sm] i{height:1rem}:host[size=large],:host[size=lg]{font-size:1.6rem;padding:0 1.25rem;height:3.6rem;gap:1.25rem}:host[size=large] .button-contents,:host[size=large] i,:host[size=lg] .button-contents,:host[size=lg] i{height:1.6rem}:host:focus{outline:none}:host[disabled],:host.novo-button-disabled{opacity:.5;cursor:not-allowed;pointer-events:none}:host[disabled=false]{opacity:1;cursor:pointer;pointer-events:auto}:host[loading=true]{opacity:.5;cursor:not-allowed;pointer-events:none}:host[loading=true] i.loading{display:flex;align-items:center;justify-content:center;-webkit-animation:rotate 1.2s linear infinite;animation:rotate 1.2s linear infinite}:host[loading=true] i.loading svg{width:100%;height:100%;max-width:15px;max-height:15px}:host[loading=true] i.loading svg .spinner{fill:currentColor}@-webkit-keyframes rotate{0%{transform:rotate(0)}to{transform:rotate(360deg)}}@keyframes rotate{0%{transform:rotate(0)}to{transform:rotate(360deg)}}\n", ":host[theme=standard]{color:var(--button-text);background:var(--button-background)}:host[theme=standard][color=black]{color:#fff;background:#000000}:host[theme=standard][color=white]{color:#3d464d;background:#ffffff}:host[theme=standard][color=gray]{color:#3d464d;background:#9e9e9e}:host[theme=standard][color=grey]{color:#3d464d;background:#9e9e9e}:host[theme=standard][color=offWhite]{color:#3d464d;background:#f7f7f7}:host[theme=standard][color=bright]{color:#3d464d;background:#f7f7f7}:host[theme=standard][color=light]{color:#3d464d;background:#dbdbdb}:host[theme=standard][color=neutral]{color:#fff;background:#4f5361}:host[theme=standard][color=dark]{color:#fff;background:#3d464d}:host[theme=standard][color=orange]{color:#3d464d;background:#ff6900}:host[theme=standard][color=navigation]{color:#fff;background:#202945}:host[theme=standard][color=skyBlue]{color:#fff;background:#009bdf}:host[theme=standard][color=steel]{color:#fff;background:#5b6770}:host[theme=standard][color=metal]{color:#fff;background:#637893}:host[theme=standard][color=sand]{color:#3d464d;background:#f4f4f4}:host[theme=standard][color=silver]{color:#3d464d;background:#e2e2e2}:host[theme=standard][color=stone]{color:#3d464d;background:#bebebe}:host[theme=standard][color=ash]{color:#3d464d;background:#a0a0a0}:host[theme=standard][color=slate]{color:#fff;background:#707070}:host[theme=standard][color=onyx]{color:#fff;background:#526980}:host[theme=standard][color=charcoal]{color:#fff;background:#282828}:host[theme=standard][color=moonlight]{color:#fff;background:#1a242f}:host[theme=standard][color=midnight]{color:#fff;background:#202945}:host[theme=standard][color=darkness]{color:#fff;background:#161f27}:host[theme=standard][color=navy]{color:#fff;background:#0d2d42}:host[theme=standard][color=aqua]{color:#3d464d;background:#3bafda}:host[theme=standard][color=ocean]{color:#fff;background:#4a89dc}:host[theme=standard][color=mint]{color:#3d464d;background:#37bc9b}:host[theme=standard][color=grass]{color:#fff;background:#8cc152}:host[theme=standard][color=sunflower]{color:#fff;background:#f6b042}:host[theme=standard][color=bittersweet]{color:#fff;background:#eb6845}:host[theme=standard][color=grapefruit]{color:#fff;background:#da4453}:host[theme=standard][color=carnation]{color:#fff;background:#d770ad}:host[theme=standard][color=lavender]{color:#fff;background:#967adc}:host[theme=standard][color=mountain]{color:#fff;background:#9678b6}:host[theme=standard][color=info]{color:#fff;background:#4a89dc}:host[theme=standard][color=positive]{color:#fff;background:#4a89dc}:host[theme=standard][color=success]{color:#fff;background:#8cc152}:host[theme=standard][color=negative]{color:#fff;background:#da4453}:host[theme=standard][color=danger]{color:#fff;background:#da4453}:host[theme=standard][color=error]{color:#fff;background:#da4453}:host[theme=standard][color=warning]{color:#fff;background:#f6b042}:host[theme=standard][color=empty]{color:#3d464d;background:#cccdcc}:host[theme=standard][color=disabled]{color:#3d464d;background:#bebebe}:host[theme=standard][color=background]{color:#3d464d;background:#f7f7f7}:host[theme=standard][color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host[theme=standard][color=presentation]{color:#fff;background:#5b6770}:host[theme=standard][color=bullhorn]{color:#3d464d;background:#ff6900}:host[theme=standard][color=pulse]{color:#3d464d;background:#3bafda}:host[theme=standard][color=company]{color:#fff;background:#3399dd}:host[theme=standard][color=candidate]{color:#fff;background:#44bb77}:host[theme=standard][color=lead]{color:#fff;background:#aa6699}:host[theme=standard][color=contact]{color:#fff;background:#ffaa44}:host[theme=standard][color=clientcontact]{color:#fff;background:#ffaa44}:host[theme=standard][color=opportunity]{color:#fff;background:#662255}:host[theme=standard][color=job]{color:#fff;background:#bb5566}:host[theme=standard][color=joborder]{color:#fff;background:#bb5566}:host[theme=standard][color=submission]{color:#3d464d;background:#a9adbb}:host[theme=standard][color=sendout]{color:#fff;background:#747884}:host[theme=standard][color=placement]{color:#fff;background:#0b344f}:host[theme=standard][color=note]{color:#fff;background:#747884}:host[theme=standard][color=contract]{color:#fff;background:#454ea0}:host[theme=standard][color=jobCode]{color:#fff;background:#696d79}:host[theme=standard][color=earnCode]{color:#fff;background:#696d79}:host[theme=standard][color=invoiceStatement]{color:#fff;background:#696d79}:host[theme=standard][color=billableCharge]{color:#fff;background:#696d79}:host[theme=standard][color=payableCharge]{color:#fff;background:#696d79}:host[theme=standard][color=user]{color:#fff;background:#696d79}:host[theme=standard][color=corporateUser]{color:#fff;background:#696d79}:host[theme=standard][color=distributionList]{color:#fff;background:#696d79}:host[theme=standard][color=credential]{color:#fff;background:#696d79}:host[theme=standard][color=person]{color:#fff;background:#696d79}:host[theme=standard]:hover,:host[theme=standard]:focus{box-shadow:0 3px 7px #00000026,0 1px 2px #00000026}:host[theme=standard]:active{box-shadow:0 1px 2px #00000026}\n", ":host[theme=primary]{background:#4a89dc;color:#fff;text-align:left}:host[theme=primary][color=black]{color:#fff;background:#000000}:host[theme=primary][color=white]{color:#3d464d;background:#ffffff}:host[theme=primary][color=gray]{color:#3d464d;background:#9e9e9e}:host[theme=primary][color=grey]{color:#3d464d;background:#9e9e9e}:host[theme=primary][color=offWhite]{color:#3d464d;background:#f7f7f7}:host[theme=primary][color=bright]{color:#3d464d;background:#f7f7f7}:host[theme=primary][color=light]{color:#3d464d;background:#dbdbdb}:host[theme=primary][color=neutral]{color:#fff;background:#4f5361}:host[theme=primary][color=dark]{color:#fff;background:#3d464d}:host[theme=primary][color=orange]{color:#3d464d;background:#ff6900}:host[theme=primary][color=navigation]{color:#fff;background:#202945}:host[theme=primary][color=skyBlue]{color:#fff;background:#009bdf}:host[theme=primary][color=steel]{color:#fff;background:#5b6770}:host[theme=primary][color=metal]{color:#fff;background:#637893}:host[theme=primary][color=sand]{color:#3d464d;background:#f4f4f4}:host[theme=primary][color=silver]{color:#3d464d;background:#e2e2e2}:host[theme=primary][color=stone]{color:#3d464d;background:#bebebe}:host[theme=primary][color=ash]{color:#3d464d;background:#a0a0a0}:host[theme=primary][color=slate]{color:#fff;background:#707070}:host[theme=primary][color=onyx]{color:#fff;background:#526980}:host[theme=primary][color=charcoal]{color:#fff;background:#282828}:host[theme=primary][color=moonlight]{color:#fff;background:#1a242f}:host[theme=primary][color=midnight]{color:#fff;background:#202945}:host[theme=primary][color=darkness]{color:#fff;background:#161f27}:host[theme=primary][color=navy]{color:#fff;background:#0d2d42}:host[theme=primary][color=aqua]{color:#3d464d;background:#3bafda}:host[theme=primary][color=ocean]{color:#fff;background:#4a89dc}:host[theme=primary][color=mint]{color:#3d464d;background:#37bc9b}:host[theme=primary][color=grass]{color:#fff;background:#8cc152}:host[theme=primary][color=sunflower]{color:#fff;background:#f6b042}:host[theme=primary][color=bittersweet]{color:#fff;background:#eb6845}:host[theme=primary][color=grapefruit]{color:#fff;background:#da4453}:host[theme=primary][color=carnation]{color:#fff;background:#d770ad}:host[theme=primary][color=lavender]{color:#fff;background:#967adc}:host[theme=primary][color=mountain]{color:#fff;background:#9678b6}:host[theme=primary][color=info]{color:#fff;background:#4a89dc}:host[theme=primary][color=positive]{color:#fff;background:#4a89dc}:host[theme=primary][color=success]{color:#fff;background:#8cc152}:host[theme=primary][color=negative]{color:#fff;background:#da4453}:host[theme=primary][color=danger]{color:#fff;background:#da4453}:host[theme=primary][color=error]{color:#fff;background:#da4453}:host[theme=primary][color=warning]{color:#fff;background:#f6b042}:host[theme=primary][color=empty]{color:#3d464d;background:#cccdcc}:host[theme=primary][color=disabled]{color:#3d464d;background:#bebebe}:host[theme=primary][color=background]{color:#3d464d;background:#f7f7f7}:host[theme=primary][color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host[theme=primary][color=presentation]{color:#fff;background:#5b6770}:host[theme=primary][color=bullhorn]{color:#3d464d;background:#ff6900}:host[theme=primary][color=pulse]{color:#3d464d;background:#3bafda}:host[theme=primary][color=company]{color:#fff;background:#3399dd}:host[theme=primary][color=candidate]{color:#fff;background:#44bb77}:host[theme=primary][color=lead]{color:#fff;background:#aa6699}:host[theme=primary][color=contact]{color:#fff;background:#ffaa44}:host[theme=primary][color=clientcontact]{color:#fff;background:#ffaa44}:host[theme=primary][color=opportunity]{color:#fff;background:#662255}:host[theme=primary][color=job]{color:#fff;background:#bb5566}:host[theme=primary][color=joborder]{color:#fff;background:#bb5566}:host[theme=primary][color=submission]{color:#3d464d;background:#a9adbb}:host[theme=primary][color=sendout]{color:#fff;background:#747884}:host[theme=primary][color=placement]{color:#fff;background:#0b344f}:host[theme=primary][color=note]{color:#fff;background:#747884}:host[theme=primary][color=contract]{color:#fff;background:#454ea0}:host[theme=primary][color=jobCode]{color:#fff;background:#696d79}:host[theme=primary][color=earnCode]{color:#fff;background:#696d79}:host[theme=primary][color=invoiceStatement]{color:#fff;background:#696d79}:host[theme=primary][color=billableCharge]{color:#fff;background:#696d79}:host[theme=primary][color=payableCharge]{color:#fff;background:#696d79}:host[theme=primary][color=user]{color:#fff;background:#696d79}:host[theme=primary][color=corporateUser]{color:#fff;background:#696d79}:host[theme=primary][color=distributionList]{color:#fff;background:#696d79}:host[theme=primary][color=credential]{color:#fff;background:#696d79}:host[theme=primary][color=person]{color:#fff;background:#696d79}:host[theme=primary]:hover,:host[theme=primary]:focus{box-shadow:0 3px 7px #00000026,0 1px 2px #00000026;filter:brightness(1.15)}:host[theme=primary]:active{filter:brightness(.85);box-shadow:0 1px 2px #00000026}:host[theme=primary][color=white]{background:#ffffff;color:#4a89dc}:host[theme=primary][color=white]:hover,:host[theme=primary][color=white]:focus{background:#f7f7f7}:host[theme=primary][color=white]:active{background:#eaeaea}:host[theme=primary][color=white] i{background:rgba(0,0,0,.05)}:host[theme=primary][size=large] i{margin-left:3px}\n", ":host[theme=secondary]{text-align:left;align-items:center;background:#ffffff;color:#4a89dc;border:1px solid #4a89dc;padding:0 calc(1rem - 1px)}:host[theme=secondary][color=black]{color:#000}:host[theme=secondary][color=black] i{color:#000}:host[theme=secondary][color=white]{color:#fff}:host[theme=secondary][color=white] i{color:#fff}:host[theme=secondary][color=gray]{color:#9e9e9e}:host[theme=secondary][color=gray] i{color:#9e9e9e}:host[theme=secondary][color=grey]{color:#9e9e9e}:host[theme=secondary][color=grey] i{color:#9e9e9e}:host[theme=secondary][color=offWhite]{color:#f7f7f7}:host[theme=secondary][color=offWhite] i{color:#f7f7f7}:host[theme=secondary][color=bright]{color:#f7f7f7}:host[theme=secondary][color=bright] i{color:#f7f7f7}:host[theme=secondary][color=light]{color:#dbdbdb}:host[theme=secondary][color=light] i{color:#dbdbdb}:host[theme=secondary][color=neutral]{color:#4f5361}:host[theme=secondary][color=neutral] i{color:#4f5361}:host[theme=secondary][color=dark]{color:#3d464d}:host[theme=secondary][color=dark] i{color:#3d464d}:host[theme=secondary][color=orange]{color:#ff6900}:host[theme=secondary][color=orange] i{color:#ff6900}:host[theme=secondary][color=navigation]{color:#202945}:host[theme=secondary][color=navigation] i{color:#202945}:host[theme=secondary][color=skyBlue]{color:#009bdf}:host[theme=secondary][color=skyBlue] i{color:#009bdf}:host[theme=secondary][color=steel]{color:#5b6770}:host[theme=secondary][color=steel] i{color:#5b6770}:host[theme=secondary][color=metal]{color:#637893}:host[theme=secondary][color=metal] i{color:#637893}:host[theme=secondary][color=sand]{color:#f4f4f4}:host[theme=secondary][color=sand] i{color:#f4f4f4}:host[theme=secondary][color=silver]{color:#e2e2e2}:host[theme=secondary][color=silver] i{color:#e2e2e2}:host[theme=secondary][color=stone]{color:#bebebe}:host[theme=secondary][color=stone] i{color:#bebebe}:host[theme=secondary][color=ash]{color:#a0a0a0}:host[theme=secondary][color=ash] i{color:#a0a0a0}:host[theme=secondary][color=slate]{color:#707070}:host[theme=secondary][color=slate] i{color:#707070}:host[theme=secondary][color=onyx]{color:#526980}:host[theme=secondary][color=onyx] i{color:#526980}:host[theme=secondary][color=charcoal]{color:#282828}:host[theme=secondary][color=charcoal] i{color:#282828}:host[theme=secondary][color=moonlight]{color:#1a242f}:host[theme=secondary][color=moonlight] i{color:#1a242f}:host[theme=secondary][color=midnight]{color:#202945}:host[theme=secondary][color=midnight] i{color:#202945}:host[theme=secondary][color=darkness]{color:#161f27}:host[theme=secondary][color=darkness] i{color:#161f27}:host[theme=secondary][color=navy]{color:#0d2d42}:host[theme=secondary][color=navy] i{color:#0d2d42}:host[theme=secondary][color=aqua]{color:#3bafda}:host[theme=secondary][color=aqua] i{color:#3bafda}:host[theme=secondary][color=ocean]{color:#4a89dc}:host[theme=secondary][color=ocean] i{color:#4a89dc}:host[theme=secondary][color=mint]{color:#37bc9b}:host[theme=secondary][color=mint] i{color:#37bc9b}:host[theme=secondary][color=grass]{color:#8cc152}:host[theme=secondary][color=grass] i{color:#8cc152}:host[theme=secondary][color=sunflower]{color:#f6b042}:host[theme=secondary][color=sunflower] i{color:#f6b042}:host[theme=secondary][color=bittersweet]{color:#eb6845}:host[theme=secondary][color=bittersweet] i{color:#eb6845}:host[theme=secondary][color=grapefruit]{color:#da4453}:host[theme=secondary][color=grapefruit] i{color:#da4453}:host[theme=secondary][color=carnation]{color:#d770ad}:host[theme=secondary][color=carnation] i{color:#d770ad}:host[theme=secondary][color=lavender]{color:#967adc}:host[theme=secondary][color=lavender] i{color:#967adc}:host[theme=secondary][color=mountain]{color:#9678b6}:host[theme=secondary][color=mountain] i{color:#9678b6}:host[theme=secondary][color=info]{color:#4a89dc}:host[theme=secondary][color=info] i{color:#4a89dc}:host[theme=secondary][color=positive]{color:#4a89dc}:host[theme=secondary][color=positive] i{color:#4a89dc}:host[theme=secondary][color=success]{color:#8cc152}:host[theme=secondary][color=success] i{color:#8cc152}:host[theme=secondary][color=negative]{color:#da4453}:host[theme=secondary][color=negative] i{color:#da4453}:host[theme=secondary][color=danger]{color:#da4453}:host[theme=secondary][color=danger] i{color:#da4453}:host[theme=secondary][color=error]{color:#da4453}:host[theme=secondary][color=error] i{color:#da4453}:host[theme=secondary][color=warning]{color:#f6b042}:host[theme=secondary][color=warning] i{color:#f6b042}:host[theme=secondary][color=empty]{color:#cccdcc}:host[theme=secondary][color=empty] i{color:#cccdcc}:host[theme=secondary][color=disabled]{color:#bebebe}:host[theme=secondary][color=disabled] i{color:#bebebe}:host[theme=secondary][color=background]{color:#f7f7f7}:host[theme=secondary][color=background] i{color:#f7f7f7}:host[theme=secondary][color=backgroundDark]{color:#e2e2e2}:host[theme=secondary][color=backgroundDark] i{color:#e2e2e2}:host[theme=secondary][color=presentation]{color:#5b6770}:host[theme=secondary][color=presentation] i{color:#5b6770}:host[theme=secondary][color=bullhorn]{color:#ff6900}:host[theme=secondary][color=bullhorn] i{color:#ff6900}:host[theme=secondary][color=pulse]{color:#3bafda}:host[theme=secondary][color=pulse] i{color:#3bafda}:host[theme=secondary][color=company]{color:#39d}:host[theme=secondary][color=company] i{color:#39d}:host[theme=secondary][color=candidate]{color:#4b7}:host[theme=secondary][color=candidate] i{color:#4b7}:host[theme=secondary][color=lead]{color:#a69}:host[theme=secondary][color=lead] i{color:#a69}:host[theme=secondary][color=contact]{color:#fa4}:host[theme=secondary][color=contact] i{color:#fa4}:host[theme=secondary][color=clientcontact]{color:#fa4}:host[theme=secondary][color=clientcontact] i{color:#fa4}:host[theme=secondary][color=opportunity]{color:#625}:host[theme=secondary][color=opportunity] i{color:#625}:host[theme=secondary][color=job]{color:#b56}:host[theme=secondary][color=job] i{color:#b56}:host[theme=secondary][color=joborder]{color:#b56}:host[theme=secondary][color=joborder] i{color:#b56}:host[theme=secondary][color=submission]{color:#a9adbb}:host[theme=secondary][color=submission] i{color:#a9adbb}:host[theme=secondary][color=sendout]{color:#747884}:host[theme=secondary][color=sendout] i{color:#747884}:host[theme=secondary][color=placement]{color:#0b344f}:host[theme=secondary][color=placement] i{color:#0b344f}:host[theme=secondary][color=note]{color:#747884}:host[theme=secondary][color=note] i{color:#747884}:host[theme=secondary][color=contract]{color:#454ea0}:host[theme=secondary][color=contract] i{color:#454ea0}:host[theme=secondary][color=jobCode]{color:#696d79}:host[theme=secondary][color=jobCode] i{color:#696d79}:host[theme=secondary][color=earnCode]{color:#696d79}:host[theme=secondary][color=earnCode] i{color:#696d79}:host[theme=secondary][color=invoiceStatement]{color:#696d79}:host[theme=secondary][color=invoiceStatement] i{color:#696d79}:host[theme=secondary][color=billableCharge]{color:#696d79}:host[theme=secondary][color=billableCharge] i{color:#696d79}:host[theme=secondary][color=payableCharge]{color:#696d79}:host[theme=secondary][color=payableCharge] i{color:#696d79}:host[theme=secondary][color=user]{color:#696d79}:host[theme=secondary][color=user] i{color:#696d79}:host[theme=secondary][color=corporateUser]{color:#696d79}:host[theme=secondary][color=corporateUser] i{color:#696d79}:host[theme=secondary][color=distributionList]{color:#696d79}:host[theme=secondary][color=distributionList] i{color:#696d79}:host[theme=secondary][color=credential]{color:#696d79}:host[theme=secondary][color=credential] i{color:#696d79}:host[theme=secondary][color=person]{color:#696d79}:host[theme=secondary][color=person] i{color:#696d79}:host[theme=secondary][color=black]{border:1px solid #000000}:host[theme=secondary][color=white]{border:1px solid #ffffff}:host[theme=secondary][color=gray]{border:1px solid #9e9e9e}:host[theme=secondary][color=grey]{border:1px solid #9e9e9e}:host[theme=secondary][color=offWhite]{border:1px solid #f7f7f7}:host[theme=secondary][color=bright]{border:1px solid #f7f7f7}:host[theme=secondary][color=light]{border:1px solid #dbdbdb}:host[theme=secondary][color=neutral]{border:1px solid #4f5361}:host[theme=secondary][color=dark]{border:1px solid #3d464d}:host[theme=secondary][color=orange]{border:1px solid #ff6900}:host[theme=secondary][color=navigation]{border:1px solid #202945}:host[theme=secondary][color=skyBlue]{border:1px solid #009bdf}:host[theme=secondary][color=steel]{border:1px solid #5b6770}:host[theme=secondary][color=metal]{border:1px solid #637893}:host[theme=secondary][color=sand]{border:1px solid #f4f4f4}:host[theme=secondary][color=silver]{border:1px solid #e2e2e2}:host[theme=secondary][color=stone]{border:1px solid #bebebe}:host[theme=secondary][color=ash]{border:1px solid #a0a0a0}:host[theme=secondary][color=slate]{border:1px solid #707070}:host[theme=secondary][color=onyx]{border:1px solid #526980}:host[theme=secondary][color=charcoal]{border:1px solid #282828}:host[theme=secondary][color=moonlight]{border:1px solid #1a242f}:host[theme=secondary][color=midnight]{border:1px solid #202945}:host[theme=secondary][color=darkness]{border:1px solid #161f27}:host[theme=secondary][color=navy]{border:1px solid #0d2d42}:host[theme=secondary][color=aqua]{border:1px solid #3bafda}:host[theme=secondary][color=ocean]{border:1px solid #4a89dc}:host[theme=secondary][color=mint]{border:1px solid #37bc9b}:host[theme=secondary][color=grass]{border:1px solid #8cc152}:host[theme=secondary][color=sunflower]{border:1px solid #f6b042}:host[theme=secondary][color=bittersweet]{border:1px solid #eb6845}:host[theme=secondary][color=grapefruit]{border:1px solid #da4453}:host[theme=secondary][color=carnation]{border:1px solid #d770ad}:host[theme=secondary][color=lavender]{border:1px solid #967adc}:host[theme=secondary][color=mountain]{border:1px solid #9678b6}:host[theme=secondary][color=info]{border:1px solid #4a89dc}:host[theme=secondary][color=positive]{border:1px solid #4a89dc}:host[theme=secondary][color=success]{border:1px solid #8cc152}:host[theme=secondary][color=negative]{border:1px solid #da4453}:host[theme=secondary][color=danger]{border:1px solid #da4453}:host[theme=secondary][color=error]{border:1px solid #da4453}:host[theme=secondary][color=warning]{border:1px solid #f6b042}:host[theme=secondary][color=empty]{border:1px solid #cccdcc}:host[theme=secondary][color=disabled]{border:1px solid #bebebe}:host[theme=secondary][color=background]{border:1px solid #f7f7f7}:host[theme=secondary][color=backgroundDark]{border:1px solid #e2e2e2}:host[theme=secondary][color=presentation]{border:1px solid #5b6770}:host[theme=secondary][color=bullhorn]{border:1px solid #ff6900}:host[theme=secondary][color=pulse]{border:1px solid #3bafda}:host[theme=secondary][color=company]{border:1px solid #3399dd}:host[theme=secondary][color=candidate]{border:1px solid #44bb77}:host[theme=secondary][color=lead]{border:1px solid #aa6699}:host[theme=secondary][color=contact]{border:1px solid #ffaa44}:host[theme=secondary][color=clientcontact]{border:1px solid #ffaa44}:host[theme=secondary][color=opportunity]{border:1px solid #662255}:host[theme=secondary][color=job]{border:1px solid #bb5566}:host[theme=secondary][color=joborder]{border:1px solid #bb5566}:host[theme=secondary][color=submission]{border:1px solid #a9adbb}:host[theme=secondary][color=sendout]{border:1px solid #747884}:host[theme=secondary][color=placement]{border:1px solid #0b344f}:host[theme=secondary][color=note]{border:1px solid #747884}:host[theme=secondary][color=contract]{border:1px solid #454ea0}:host[theme=secondary][color=jobCode]{border:1px solid #696d79}:host[theme=secondary][color=earnCode]{border:1px solid #696d79}:host[theme=secondary][color=invoiceStatement]{border:1px solid #696d79}:host[theme=secondary][color=billableCharge]{border:1px solid #696d79}:host[theme=secondary][color=payableCharge]{border:1px solid #696d79}:host[theme=secondary][color=user]{border:1px solid #696d79}:host[theme=secondary][color=corporateUser]{border:1px solid #696d79}:host[theme=secondary][color=distributionList]{border:1px solid #696d79}:host[theme=secondary][color=credential]{border:1px solid #696d79}:host[theme=secondary][color=person]{border:1px solid #696d79}:host[theme=secondary] i.loading{margin-left:.8rem}:host[theme=secondary] i.loading svg .spinner{fill:#4a89dc}:host[theme=secondary]:hover,:host[theme=secondary]:focus{box-shadow:0 3px 7px #00000026,0 1px 2px #00000026;background:#ffffff}:host[theme=secondary]:active{box-shadow:0 1px 2px #00000026}:host[theme=secondary][inverse]{background:rgba(0,0,0,.25);color:#fff;border:1px solid #fff}:host[theme=secondary][inverse]:hover,:host[theme=secondary][inverse]:focus{background:rgba(0,0,0,.35)}:host[theme=secondary][inverse]:active{background:rgba(0,0,0,.45)}:host[theme=secondary][inverse] i.loading svg .spinner{fill:#fff}\n", ":host[theme=fab]{border-radius:50%!important;padding:0;font-size:1.2rem;width:3.2rem;height:3.2rem;display:inline-flex;align-items:center;justify-content:center}:host[theme=fab][color=black]{color:#fff;background:#000000}:host[theme=fab][color=white]{color:#3d464d;background:#ffffff}:host[theme=fab][color=gray]{color:#3d464d;background:#9e9e9e}:host[theme=fab][color=grey]{color:#3d464d;background:#9e9e9e}:host[theme=fab][color=offWhite]{color:#3d464d;background:#f7f7f7}:host[theme=fab][color=bright]{color:#3d464d;background:#f7f7f7}:host[theme=fab][color=light]{color:#3d464d;background:#dbdbdb}:host[theme=fab][color=neutral]{color:#fff;background:#4f5361}:host[theme=fab][color=dark]{color:#fff;background:#3d464d}:host[theme=fab][color=orange]{color:#3d464d;background:#ff6900}:host[theme=fab][color=navigation]{color:#fff;background:#202945}:host[theme=fab][color=skyBlue]{color:#fff;background:#009bdf}:host[theme=fab][color=steel]{color:#fff;background:#5b6770}:host[theme=fab][color=metal]{color:#fff;background:#637893}:host[theme=fab][color=sand]{color:#3d464d;background:#f4f4f4}:host[theme=fab][color=silver]{color:#3d464d;background:#e2e2e2}:host[theme=fab][color=stone]{color:#3d464d;background:#bebebe}:host[theme=fab][color=ash]{color:#3d464d;background:#a0a0a0}:host[theme=fab][color=slate]{color:#fff;background:#707070}:host[theme=fab][color=onyx]{color:#fff;background:#526980}:host[theme=fab][color=charcoal]{color:#fff;background:#282828}:host[theme=fab][color=moonlight]{color:#fff;background:#1a242f}:host[theme=fab][color=midnight]{color:#fff;background:#202945}:host[theme=fab][color=darkness]{color:#fff;background:#161f27}:host[theme=fab][color=navy]{color:#fff;background:#0d2d42}:host[theme=fab][color=aqua]{color:#3d464d;background:#3bafda}:host[theme=fab][color=ocean]{color:#fff;background:#4a89dc}:host[theme=fab][color=mint]{color:#3d464d;background:#37bc9b}:host[theme=fab][color=grass]{color:#fff;background:#8cc152}:host[theme=fab][color=sunflower]{color:#fff;background:#f6b042}:host[theme=fab][color=bittersweet]{color:#fff;background:#eb6845}:host[theme=fab][color=grapefruit]{color:#fff;background:#da4453}:host[theme=fab][color=carnation]{color:#fff;background:#d770ad}:host[theme=fab][color=lavender]{color:#fff;background:#967adc}:host[theme=fab][color=mountain]{color:#fff;background:#9678b6}:host[theme=fab][color=info]{color:#fff;background:#4a89dc}:host[theme=fab][color=positive]{color:#fff;background:#4a89dc}:host[theme=fab][color=success]{color:#fff;background:#8cc152}:host[theme=fab][color=negative]{color:#fff;background:#da4453}:host[theme=fab][color=danger]{color:#fff;background:#da4453}:host[theme=fab][color=error]{color:#fff;background:#da4453}:host[theme=fab][color=warning]{color:#fff;background:#f6b042}:host[theme=fab][color=empty]{color:#3d464d;background:#cccdcc}:host[theme=fab][color=disabled]{color:#3d464d;background:#bebebe}:host[theme=fab][color=background]{color:#3d464d;background:#f7f7f7}:host[theme=fab][color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host[theme=fab][color=presentation]{color:#fff;background:#5b6770}:host[theme=fab][color=bullhorn]{color:#3d464d;background:#ff6900}:host[theme=fab][color=pulse]{color:#3d464d;background:#3bafda}:host[theme=fab][color=company]{color:#fff;background:#3399dd}:host[theme=fab][color=candidate]{color:#fff;background:#44bb77}:host[theme=fab][color=lead]{color:#fff;background:#aa6699}:host[theme=fab][color=contact]{color:#fff;background:#ffaa44}:host[theme=fab][color=clientcontact]{color:#fff;background:#ffaa44}:host[theme=fab][color=opportunity]{color:#fff;background:#662255}:host[theme=fab][color=job]{color:#fff;background:#bb5566}:host[theme=fab][color=joborder]{color:#fff;background:#bb5566}:host[theme=fab][color=submission]{color:#3d464d;background:#a9adbb}:host[theme=fab][color=sendout]{color:#fff;background:#747884}:host[theme=fab][color=placement]{color:#fff;background:#0b344f}:host[theme=fab][color=note]{color:#fff;background:#747884}:host[theme=fab][color=contract]{color:#fff;background:#454ea0}:host[theme=fab][color=jobCode]{color:#fff;background:#696d79}:host[theme=fab][color=earnCode]{color:#fff;background:#696d79}:host[theme=fab][color=invoiceStatement]{color:#fff;background:#696d79}:host[theme=fab][color=billableCharge]{color:#fff;background:#696d79}:host[theme=fab][color=payableCharge]{color:#fff;background:#696d79}:host[theme=fab][color=user]{color:#fff;background:#696d79}:host[theme=fab][color=corporateUser]{color:#fff;background:#696d79}:host[theme=fab][color=distributionList]{color:#fff;background:#696d79}:host[theme=fab][color=credential]{color:#fff;background:#696d79}:host[theme=fab][color=person]{color:#fff;background:#696d79}:host[theme=fab][inverse]{color:#fff}:host[theme=fab]:focus,:host[theme=fab]:hover{box-shadow:0 1px 2px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f}:host[theme=fab]:active{box-shadow:0 1px 2px -1px #0003,0 1px 1px #00000024,0 1px 3px #0000001f}:host[theme=fab] .button-contents{display:contents}:host[theme=fab] i{margin:0;padding:0}:host[theme=fab] i:before{display:block}\n", ":host[theme=icon]{padding:.5rem;font-size:1.4rem;height:2.4rem}:host[theme=icon][color=black]{color:#000}:host[theme=icon][color=black] i{color:#000}:host[theme=icon][color=white]{color:#fff}:host[theme=icon][color=white] i{color:#fff}:host[theme=icon][color=gray]{color:#9e9e9e}:host[theme=icon][color=gray] i{color:#9e9e9e}:host[theme=icon][color=grey]{color:#9e9e9e}:host[theme=icon][color=grey] i{color:#9e9e9e}:host[theme=icon][color=offWhite]{color:#f7f7f7}:host[theme=icon][color=offWhite] i{color:#f7f7f7}:host[theme=icon][color=bright]{color:#f7f7f7}:host[theme=icon][color=bright] i{color:#f7f7f7}:host[theme=icon][color=light]{color:#dbdbdb}:host[theme=icon][color=light] i{color:#dbdbdb}:host[theme=icon][color=neutral]{color:#4f5361}:host[theme=icon][color=neutral] i{color:#4f5361}:host[theme=icon][color=dark]{color:#3d464d}:host[theme=icon][color=dark] i{color:#3d464d}:host[theme=icon][color=orange]{color:#ff6900}:host[theme=icon][color=orange] i{color:#ff6900}:host[theme=icon][color=navigation]{color:#202945}:host[theme=icon][color=navigation] i{color:#202945}:host[theme=icon][color=skyBlue]{color:#009bdf}:host[theme=icon][color=skyBlue] i{color:#009bdf}:host[theme=icon][color=steel]{color:#5b6770}:host[theme=icon][color=steel] i{color:#5b6770}:host[theme=icon][color=metal]{color:#637893}:host[theme=icon][color=metal] i{color:#637893}:host[theme=icon][color=sand]{color:#f4f4f4}:host[theme=icon][color=sand] i{color:#f4f4f4}:host[theme=icon][color=silver]{color:#e2e2e2}:host[theme=icon][color=silver] i{color:#e2e2e2}:host[theme=icon][color=stone]{color:#bebebe}:host[theme=icon][color=stone] i{color:#bebebe}:host[theme=icon][color=ash]{color:#a0a0a0}:host[theme=icon][color=ash] i{color:#a0a0a0}:host[theme=icon][color=slate]{color:#707070}:host[theme=icon][color=slate] i{color:#707070}:host[theme=icon][color=onyx]{color:#526980}:host[theme=icon][color=onyx] i{color:#526980}:host[theme=icon][color=charcoal]{color:#282828}:host[theme=icon][color=charcoal] i{color:#282828}:host[theme=icon][color=moonlight]{color:#1a242f}:host[theme=icon][color=moonlight] i{color:#1a242f}:host[theme=icon][color=midnight]{color:#202945}:host[theme=icon][color=midnight] i{color:#202945}:host[theme=icon][color=darkness]{color:#161f27}:host[theme=icon][color=darkness] i{color:#161f27}:host[theme=icon][color=navy]{color:#0d2d42}:host[theme=icon][color=navy] i{color:#0d2d42}:host[theme=icon][color=aqua]{color:#3bafda}:host[theme=icon][color=aqua] i{color:#3bafda}:host[theme=icon][color=ocean]{color:#4a89dc}:host[theme=icon][color=ocean] i{color:#4a89dc}:host[theme=icon][color=mint]{color:#37bc9b}:host[theme=icon][color=mint] i{color:#37bc9b}:host[theme=icon][color=grass]{color:#8cc152}:host[theme=icon][color=grass] i{color:#8cc152}:host[theme=icon][color=sunflower]{color:#f6b042}:host[theme=icon][color=sunflower] i{color:#f6b042}:host[theme=icon][color=bittersweet]{color:#eb6845}:host[theme=icon][color=bittersweet] i{color:#eb6845}:host[theme=icon][color=grapefruit]{color:#da4453}:host[theme=icon][color=grapefruit] i{color:#da4453}:host[theme=icon][color=carnation]{color:#d770ad}:host[theme=icon][color=carnation] i{color:#d770ad}:host[theme=icon][color=lavender]{color:#967adc}:host[theme=icon][color=lavender] i{color:#967adc}:host[theme=icon][color=mountain]{color:#9678b6}:host[theme=icon][color=mountain] i{color:#9678b6}:host[theme=icon][color=info]{color:#4a89dc}:host[theme=icon][color=info] i{color:#4a89dc}:host[theme=icon][color=positive]{color:#4a89dc}:host[theme=icon][color=positive] i{color:#4a89dc}:host[theme=icon][color=success]{color:#8cc152}:host[theme=icon][color=success] i{color:#8cc152}:host[theme=icon][color=negative]{color:#da4453}:host[theme=icon][color=negative] i{color:#da4453}:host[theme=icon][color=danger]{color:#da4453}:host[theme=icon][color=danger] i{color:#da4453}:host[theme=icon][color=error]{color:#da4453}:host[theme=icon][color=error] i{color:#da4453}:host[theme=icon][color=warning]{color:#f6b042}:host[theme=icon][color=warning] i{color:#f6b042}:host[theme=icon][color=empty]{color:#cccdcc}:host[theme=icon][color=empty] i{color:#cccdcc}:host[theme=icon][color=disabled]{color:#bebebe}:host[theme=icon][color=disabled] i{color:#bebebe}:host[theme=icon][color=background]{color:#f7f7f7}:host[theme=icon][color=background] i{color:#f7f7f7}:host[theme=icon][color=backgroundDark]{color:#e2e2e2}:host[theme=icon][color=backgroundDark] i{color:#e2e2e2}:host[theme=icon][color=presentation]{color:#5b6770}:host[theme=icon][color=presentation] i{color:#5b6770}:host[theme=icon][color=bullhorn]{color:#ff6900}:host[theme=icon][color=bullhorn] i{color:#ff6900}:host[theme=icon][color=pulse]{color:#3bafda}:host[theme=icon][color=pulse] i{color:#3bafda}:host[theme=icon][color=company]{color:#39d}:host[theme=icon][color=company] i{color:#39d}:host[theme=icon][color=candidate]{color:#4b7}:host[theme=icon][color=candidate] i{color:#4b7}:host[theme=icon][color=lead]{color:#a69}:host[theme=icon][color=lead] i{color:#a69}:host[theme=icon][color=contact]{color:#fa4}:host[theme=icon][color=contact] i{color:#fa4}:host[theme=icon][color=clientcontact]{color:#fa4}:host[theme=icon][color=clientcontact] i{color:#fa4}:host[theme=icon][color=opportunity]{color:#625}:host[theme=icon][color=opportunity] i{color:#625}:host[theme=icon][color=job]{color:#b56}:host[theme=icon][color=job] i{color:#b56}:host[theme=icon][color=joborder]{color:#b56}:host[theme=icon][color=joborder] i{color:#b56}:host[theme=icon][color=submission]{color:#a9adbb}:host[theme=icon][color=submission] i{color:#a9adbb}:host[theme=icon][color=sendout]{color:#747884}:host[theme=icon][color=sendout] i{color:#747884}:host[theme=icon][color=placement]{color:#0b344f}:host[theme=icon][color=placement] i{color:#0b344f}:host[theme=icon][color=note]{color:#747884}:host[theme=icon][color=note] i{color:#747884}:host[theme=icon][color=contract]{color:#454ea0}:host[theme=icon][color=contract] i{color:#454ea0}:host[theme=icon][color=jobCode]{color:#696d79}:host[theme=icon][color=jobCode] i{color:#696d79}:host[theme=icon][color=earnCode]{color:#696d79}:host[theme=icon][color=earnCode] i{color:#696d79}:host[theme=icon][color=invoiceStatement]{color:#696d79}:host[theme=icon][color=invoiceStatement] i{color:#696d79}:host[theme=icon][color=billableCharge]{color:#696d79}:host[theme=icon][color=billableCharge] i{color:#696d79}:host[theme=icon][color=payableCharge]{color:#696d79}:host[theme=icon][color=payableCharge] i{color:#696d79}:host[theme=icon][color=user]{color:#696d79}:host[theme=icon][color=user] i{color:#696d79}:host[theme=icon][color=corporateUser]{color:#696d79}:host[theme=icon][color=corporateUser] i{color:#696d79}:host[theme=icon][color=distributionList]{color:#696d79}:host[theme=icon][color=distributionList] i{color:#696d79}:host[theme=icon][color=credential]{color:#696d79}:host[theme=icon][color=credential] i{color:#696d79}:host[theme=icon][color=person]{color:#696d79}:host[theme=icon][color=person] i{color:#696d79}:host[theme=icon][inverse]{color:#fff}:host[theme=icon] i{display:contents;margin:0!important}:host[theme=icon]:focus,:host[theme=icon]:hover{background:rgba(0,0,0,.1)}:host[theme=icon]:active{background:rgba(0,0,0,.25)}:host[theme=icon] .button-contents{display:contents}:host[theme=icon][size=small]{padding:.5rem;font-size:1.2rem;height:2rem}:host[theme=icon][size=medium]{font-size:1.6rem}:host[theme=icon][size=large]{font-size:2rem;height:2.8rem;padding:1rem}\n", ":host[theme=dialogue]{background:transparent;color:#4a89dc}:host[theme=dialogue][color=black]{color:#000}:host[theme=dialogue][color=black] i{color:#000}:host[theme=dialogue][color=white]{color:#fff}:host[theme=dialogue][color=white] i{color:#fff}:host[theme=dialogue][color=gray]{color:#9e9e9e}:host[theme=dialogue][color=gray] i{color:#9e9e9e}:host[theme=dialogue][color=grey]{color:#9e9e9e}:host[theme=dialogue][color=grey] i{color:#9e9e9e}:host[theme=dialogue][color=offWhite]{color:#f7f7f7}:host[theme=dialogue][color=offWhite] i{color:#f7f7f7}:host[theme=dialogue][color=bright]{color:#f7f7f7}:host[theme=dialogue][color=bright] i{color:#f7f7f7}:host[theme=dialogue][color=light]{color:#dbdbdb}:host[theme=dialogue][color=light] i{color:#dbdbdb}:host[theme=dialogue][color=neutral]{color:#4f5361}:host[theme=dialogue][color=neutral] i{color:#4f5361}:host[theme=dialogue][color=dark]{color:#3d464d}:host[theme=dialogue][color=dark] i{color:#3d464d}:host[theme=dialogue][color=orange]{color:#ff6900}:host[theme=dialogue][color=orange] i{color:#ff6900}:host[theme=dialogue][color=navigation]{color:#202945}:host[theme=dialogue][color=navigation] i{color:#202945}:host[theme=dialogue][color=skyBlue]{color:#009bdf}:host[theme=dialogue][color=skyBlue] i{color:#009bdf}:host[theme=dialogue][color=steel]{color:#5b6770}:host[theme=dialogue][color=steel] i{color:#5b6770}:host[theme=dialogue][color=metal]{color:#637893}:host[theme=dialogue][color=metal] i{color:#637893}:host[theme=dialogue][color=sand]{color:#f4f4f4}:host[theme=dialogue][color=sand] i{color:#f4f4f4}:host[theme=dialogue][color=silver]{color:#e2e2e2}:host[theme=dialogue][color=silver] i{color:#e2e2e2}:host[theme=dialogue][color=stone]{color:#bebebe}:host[theme=dialogue][color=stone] i{color:#bebebe}:host[theme=dialogue][color=ash]{color:#a0a0a0}:host[theme=dialogue][color=ash] i{color:#a0a0a0}:host[theme=dialogue][color=slate]{color:#707070}:host[theme=dialogue][color=slate] i{color:#707070}:host[theme=dialogue][color=onyx]{color:#526980}:host[theme=dialogue][color=onyx] i{color:#526980}:host[theme=dialogue][color=charcoal]{color:#282828}:host[theme=dialogue][color=charcoal] i{color:#282828}:host[theme=dialogue][color=moonlight]{color:#1a242f}:host[theme=dialogue][color=moonlight] i{color:#1a242f}:host[theme=dialogue][color=midnight]{color:#202945}:host[theme=dialogue][color=midnight] i{color:#202945}:host[theme=dialogue][color=darkness]{color:#161f27}:host[theme=dialogue][color=darkness] i{color:#161f27}:host[theme=dialogue][color=navy]{color:#0d2d42}:host[theme=dialogue][color=navy] i{color:#0d2d42}:host[theme=dialogue][color=aqua]{color:#3bafda}:host[theme=dialogue][color=aqua] i{color:#3bafda}:host[theme=dialogue][color=ocean]{color:#4a89dc}:host[theme=dialogue][color=ocean] i{color:#4a89dc}:host[theme=dialogue][color=mint]{color:#37bc9b}:host[theme=dialogue][color=mint] i{color:#37bc9b}:host[theme=dialogue][color=grass]{color:#8cc152}:host[theme=dialogue][color=grass] i{color:#8cc152}:host[theme=dialogue][color=sunflower]{color:#f6b042}:host[theme=dialogue][color=sunflower] i{color:#f6b042}:host[theme=dialogue][color=bittersweet]{color:#eb6845}:host[theme=dialogue][color=bittersweet] i{color:#eb6845}:host[theme=dialogue][color=grapefruit]{color:#da4453}:host[theme=dialogue][color=grapefruit] i{color:#da4453}:host[theme=dialogue][color=carnation]{color:#d770ad}:host[theme=dialogue][color=carnation] i{color:#d770ad}:host[theme=dialogue][color=lavender]{color:#967adc}:host[theme=dialogue][color=lavender] i{color:#967adc}:host[theme=dialogue][color=mountain]{color:#9678b6}:host[theme=dialogue][color=mountain] i{color:#9678b6}:host[theme=dialogue][color=info]{color:#4a89dc}:host[theme=dialogue][color=info] i{color:#4a89dc}:host[theme=dialogue][color=positive]{color:#4a89dc}:host[theme=dialogue][color=positive] i{color:#4a89dc}:host[theme=dialogue][color=success]{color:#8cc152}:host[theme=dialogue][color=success] i{color:#8cc152}:host[theme=dialogue][color=negative]{color:#da4453}:host[theme=dialogue][color=negative] i{color:#da4453}:host[theme=dialogue][color=danger]{color:#da4453}:host[theme=dialogue][color=danger] i{color:#da4453}:host[theme=dialogue][color=error]{color:#da4453}:host[theme=dialogue][color=error] i{color:#da4453}:host[theme=dialogue][color=warning]{color:#f6b042}:host[theme=dialogue][color=warning] i{color:#f6b042}:host[theme=dialogue][color=empty]{color:#cccdcc}:host[theme=dialogue][color=empty] i{color:#cccdcc}:host[theme=dialogue][color=disabled]{color:#bebebe}:host[theme=dialogue][color=disabled] i{color:#bebebe}:host[theme=dialogue][color=background]{color:#f7f7f7}:host[theme=dialogue][color=background] i{color:#f7f7f7}:host[theme=dialogue][color=backgroundDark]{color:#e2e2e2}:host[theme=dialogue][color=backgroundDark] i{color:#e2e2e2}:host[theme=dialogue][color=presentation]{color:#5b6770}:host[theme=dialogue][color=presentation] i{color:#5b6770}:host[theme=dialogue][color=bullhorn]{color:#ff6900}:host[theme=dialogue][color=bullhorn] i{color:#ff6900}:host[theme=dialogue][color=pulse]{color:#3bafda}:host[theme=dialogue][color=pulse] i{color:#3bafda}:host[theme=dialogue][color=company]{color:#39d}:host[theme=dialogue][color=company] i{color:#39d}:host[theme=dialogue][color=candidate]{color:#4b7}:host[theme=dialogue][color=candidate] i{color:#4b7}:host[theme=dialogue][color=lead]{color:#a69}:host[theme=dialogue][color=lead] i{color:#a69}:host[theme=dialogue][color=contact]{color:#fa4}:host[theme=dialogue][color=contact] i{color:#fa4}:host[theme=dialogue][color=clientcontact]{color:#fa4}:host[theme=dialogue][color=clientcontact] i{color:#fa4}:host[theme=dialogue][color=opportunity]{color:#625}:host[theme=dialogue][color=opportunity] i{color:#625}:host[theme=dialogue][color=job]{color:#b56}:host[theme=dialogue][color=job] i{color:#b56}:host[theme=dialogue][color=joborder]{color:#b56}:host[theme=dialogue][color=joborder] i{color:#b56}:host[theme=dialogue][color=submission]{color:#a9adbb}:host[theme=dialogue][color=submission] i{color:#a9adbb}:host[theme=dialogue][color=sendout]{color:#747884}:host[theme=dialogue][color=sendout] i{color:#747884}:host[theme=dialogue][color=placement]{color:#0b344f}:host[theme=dialogue][color=placement] i{color:#0b344f}:host[theme=dialogue][color=note]{color:#747884}:host[theme=dialogue][color=note] i{color:#747884}:host[theme=dialogue][color=contract]{color:#454ea0}:host[theme=dialogue][color=contract] i{color:#454ea0}:host[theme=dialogue][color=jobCode]{color:#696d79}:host[theme=dialogue][color=jobCode] i{color:#696d79}:host[theme=dialogue][color=earnCode]{color:#696d79}:host[theme=dialogue][color=earnCode] i{color:#696d79}:host[theme=dialogue][color=invoiceStatement]{color:#696d79}:host[theme=dialogue][color=invoiceStatement] i{color:#696d79}:host[theme=dialogue][color=billableCharge]{color:#696d79}:host[theme=dialogue][color=billableCharge] i{color:#696d79}:host[theme=dialogue][color=payableCharge]{color:#696d79}:host[theme=dialogue][color=payableCharge] i{color:#696d79}:host[theme=dialogue][color=user]{color:#696d79}:host[theme=dialogue][color=user] i{color:#696d79}:host[theme=dialogue][color=corporateUser]{color:#696d79}:host[theme=dialogue][color=corporateUser] i{color:#696d79}:host[theme=dialogue][color=distributionList]{color:#696d79}:host[theme=dialogue][color=distributionList] i{color:#696d79}:host[theme=dialogue][color=credential]{color:#696d79}:host[theme=dialogue][color=credential] i{color:#696d79}:host[theme=dialogue][color=person]{color:#696d79}:host[theme=dialogue][color=person] i{color:#696d79}:host[theme=dialogue] i{line-height:1.2}:host[theme=dialogue]:hover,:host[theme=dialogue]:focus{background:#ededed}:host[theme=dialogue]:active{background:#e0e0e0}:host[theme=dialogue][inverse]:hover,:host[theme=dialogue][inverse]:focus{background:rgba(0,0,0,.2)}:host[theme=dialogue][inverse]:active{background:rgba(0,0,0,.35)}\n", ":host[theme=field]{background:transparent;color:#3d464d;border:none;border-radius:0;border-bottom:1px solid var(--border);margin-bottom:4px;padding:.25rem .5rem;font-size:1.2rem;height:1.8rem;text-align:left}:host[theme=field]:hover,:host[theme=field]:focus,:host[theme=field]:active{border-bottom:1px solid var(--selection)}:host[theme=select]{cursor:pointer;display:flex;justify-content:space-between;align-items:center;background-color:transparent;border:none;border-bottom:1px solid var(--border);border-radius:0;color:var(--text-main);padding:0 2px 0 0;height:2rem;min-height:2rem;position:relative;text-align:left;text-shadow:none;width:100%;z-index:1;text-transform:none;font-size:1.2rem;height:1.8rem}:host[theme=select].empty{color:var(--text-muted)}:host[theme=select]:focus,:host[theme=select]:hover{outline:none}:host[theme=select]:hover{border-bottom:1px solid #5f6d78}:host[theme=select]:hover i{opacity:.75}:host[theme=select]:focus{border-bottom:1px solid var(--selection)}:host[theme=select]:focus i{color:#000000ba}:host[theme=select] i{font-size:.8rem;color:var(--text-main);opacity:.45}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { color: [{
                type: Input
            }], side: [{
                type: Input
            }], size: [{
                type: Input
            }], theme: [{
                type: Input
            }], loading: [{
                type: Input
            }], icon: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.novo-button-disabled']
            }] } });

// NG2
class NovoButtonModule {
}
NovoButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoButtonModule, declarations: [NovoButtonElement], imports: [CommonModule], exports: [NovoButtonElement] });
NovoButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoButtonModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoButtonElement],
                    exports: [NovoButtonElement],
                }]
        }] });

// NG2
class NovoTooltip {
}
NovoTooltip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTooltip, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoTooltip.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTooltip, selector: "novo-tooltip", ngImport: i0, template: "<div *ngIf=\"this.isHTML\" [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n     [ngClass]=\"[tooltipType, rounded ? 'rounded' : '', size ? size : '', preline? 'preline' : '', bounce ? 'bounce' : '', position]\"\n     [innerHTML]=\"message\"></div>\n<div *ngIf=\"!this.isHTML\" [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n     [ngClass]=\"[tooltipType, rounded ? 'rounded' : '', size ? size : '', preline? 'preline' : '', bounce ? 'bounce' : '', position]\">{{message}}</div>", styles: ["novo-tooltip div{background:#383838;background:var(--tooltip-background-color, #383838);color:#fff;color:var(--color-white, #fff);border-radius:4px;border-radius:var(--tooltip-border-radius, 4px);padding:8px 10px;font-size:12px;line-height:12px;white-space:nowrap;box-shadow:var(--shadow-2)}novo-tooltip div.error{background-color:#b34e4d;background-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.top-right:before,novo-tooltip div.error.top-left:before,novo-tooltip div.error.top:before{border-top-color:#b34e4d;border-top-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.bottom-left:before,novo-tooltip div.error.bottom-right:before,novo-tooltip div.error.bottom:before{border-bottom-color:#b34e4d;border-bottom-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.left:before{border-left-color:#b34e4d;border-left-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.right:before{border-right-color:#b34e4d;border-right-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.info{background-color:#3986ac;background-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.top-right:before,novo-tooltip div.info.top-left:before,novo-tooltip div.info.top:before{border-top-color:#3986ac;border-top-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.bottom-left:before,novo-tooltip div.info.bottom-right:before,novo-tooltip div.info.bottom:before{border-bottom-color:#3986ac;border-bottom-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.left:before{border-left-color:#3986ac;border-left-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.right:before{border-right-color:#3986ac;border-right-color:var(--color-shade-info, #3986ac)}novo-tooltip div.warning{background-color:#c09854;background-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.top-right:before,novo-tooltip div.warning.top-left:before,novo-tooltip div.warning.top:before{border-top-color:#c09854;border-top-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.bottom-left:before,novo-tooltip div.warning.bottom-right:before,novo-tooltip div.warning.bottom:before{border-bottom-color:#c09854;border-bottom-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.left:before{border-left-color:#c09854;border-left-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.right:before{border-right-color:#c09854;border-right-color:var(--color-shade-warning, #c09854)}novo-tooltip div.success{background-color:#458746;background-color:var(--color-shade-success, #458746)}novo-tooltip div.success.top-right:before,novo-tooltip div.success.top-left:before,novo-tooltip div.success.top:before{border-top-color:#458746;border-top-color:var(--color-shade-success, #458746)}novo-tooltip div.success.bottom-left:before,novo-tooltip div.success.bottom-right:before,novo-tooltip div.success.bottom:before{border-bottom-color:#458746;border-bottom-color:var(--color-shade-success, #458746)}novo-tooltip div.success.left:before{border-left-color:#458746;border-left-color:var(--color-shade-success, #458746)}novo-tooltip div.success.right:before{border-right-color:#458746;border-right-color:var(--color-shade-success, #458746)}novo-tooltip div.top-right:before,novo-tooltip div.top-left:before,novo-tooltip div.top:before{border-top-color:#383838;border-top-color:var(--tooltip-background-color, #383838)}novo-tooltip div.bottom-left:before,novo-tooltip div.bottom-right:before,novo-tooltip div.bottom:before{border-bottom-color:#383838;border-bottom-color:var(--tooltip-background-color, #383838)}novo-tooltip div.left:before{border-left-color:#383838;border-left-color:var(--tooltip-background-color, #383838)}novo-tooltip div.right:before{border-right-color:#383838;border-right-color:var(--tooltip-background-color, #383838)}novo-tooltip div.top:before{margin-bottom:-11px;left:calc(50% - 6px);bottom:0}novo-tooltip div.top-left:before{margin-right:0;margin-bottom:-11px;right:1px;bottom:0}novo-tooltip div.top-right:before{margin-left:0;margin-bottom:-11px;left:1px;bottom:0}novo-tooltip div.bottom:before{margin-top:-11px;left:calc(50% - 6px);top:0}novo-tooltip div.bottom-left:before{margin-right:0;margin-top:-11px;right:1px;top:0}novo-tooltip div.bottom-right:before{margin-left:0;margin-top:-11px;left:1px;top:0}novo-tooltip div.left:before{margin-right:-11px;margin-bottom:-6px;right:0;bottom:50%}novo-tooltip div.right:before{left:0;bottom:50%;margin-left:-11px;margin-bottom:-6px}novo-tooltip div:before{content:\"\";position:absolute;background:0 0;border:6px solid transparent;box-sizing:border-box}novo-tooltip div.extra-large,novo-tooltip div.large,novo-tooltip div.small,novo-tooltip div.medium{white-space:normal;line-height:1.4em;word-wrap:break-word}novo-tooltip div.extra-large{width:400px;font-size:1.2vh}novo-tooltip div.large{width:300px}novo-tooltip div.medium{width:150px}novo-tooltip div.small{width:80px}novo-tooltip div.preline{white-space:pre-line}novo-tooltip div.bounce{-webkit-animation:bounce .75s ease-in-out infinite;animation:bounce .75s ease-in-out infinite}@-webkit-keyframes bounce{0%{transform:translateY(0)}50%{transform:translateY(-10px)}to{transform:translateY(0)}}@keyframes bounce{0%{transform:translateY(0)}50%{transform:translateY(-10px)}to{transform:translateY(0)}}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], animations: [
        trigger('state', [
            state('initial, void, hidden', style({ opacity: '0' })),
            state('visible', style({ opacity: '1' })),
            transition('* => visible', [
                style({
                    opacity: 0,
                }),
                animate('0.3s 0.1s ease-in'),
            ]),
            transition('* => hidden', [
                style({
                    opacity: 1,
                }),
                animate('0.3s 0.1s ease-in'),
            ]),
        ]),
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTooltip, decorators: [{
            type: Component,
            args: [{ selector: 'novo-tooltip', animations: [
                        trigger('state', [
                            state('initial, void, hidden', style({ opacity: '0' })),
                            state('visible', style({ opacity: '1' })),
                            transition('* => visible', [
                                style({
                                    opacity: 0,
                                }),
                                animate('0.3s 0.1s ease-in'),
                            ]),
                            transition('* => hidden', [
                                style({
                                    opacity: 1,
                                }),
                                animate('0.3s 0.1s ease-in'),
                            ]),
                        ]),
                    ], template: "<div *ngIf=\"this.isHTML\" [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n     [ngClass]=\"[tooltipType, rounded ? 'rounded' : '', size ? size : '', preline? 'preline' : '', bounce ? 'bounce' : '', position]\"\n     [innerHTML]=\"message\"></div>\n<div *ngIf=\"!this.isHTML\" [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n     [ngClass]=\"[tooltipType, rounded ? 'rounded' : '', size ? size : '', preline? 'preline' : '', bounce ? 'bounce' : '', position]\">{{message}}</div>", styles: ["novo-tooltip div{background:#383838;background:var(--tooltip-background-color, #383838);color:#fff;color:var(--color-white, #fff);border-radius:4px;border-radius:var(--tooltip-border-radius, 4px);padding:8px 10px;font-size:12px;line-height:12px;white-space:nowrap;box-shadow:var(--shadow-2)}novo-tooltip div.error{background-color:#b34e4d;background-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.top-right:before,novo-tooltip div.error.top-left:before,novo-tooltip div.error.top:before{border-top-color:#b34e4d;border-top-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.bottom-left:before,novo-tooltip div.error.bottom-right:before,novo-tooltip div.error.bottom:before{border-bottom-color:#b34e4d;border-bottom-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.left:before{border-left-color:#b34e4d;border-left-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.error.right:before{border-right-color:#b34e4d;border-right-color:var(--color-shade-error, #b34e4d)}novo-tooltip div.info{background-color:#3986ac;background-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.top-right:before,novo-tooltip div.info.top-left:before,novo-tooltip div.info.top:before{border-top-color:#3986ac;border-top-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.bottom-left:before,novo-tooltip div.info.bottom-right:before,novo-tooltip div.info.bottom:before{border-bottom-color:#3986ac;border-bottom-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.left:before{border-left-color:#3986ac;border-left-color:var(--color-shade-info, #3986ac)}novo-tooltip div.info.right:before{border-right-color:#3986ac;border-right-color:var(--color-shade-info, #3986ac)}novo-tooltip div.warning{background-color:#c09854;background-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.top-right:before,novo-tooltip div.warning.top-left:before,novo-tooltip div.warning.top:before{border-top-color:#c09854;border-top-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.bottom-left:before,novo-tooltip div.warning.bottom-right:before,novo-tooltip div.warning.bottom:before{border-bottom-color:#c09854;border-bottom-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.left:before{border-left-color:#c09854;border-left-color:var(--color-shade-warning, #c09854)}novo-tooltip div.warning.right:before{border-right-color:#c09854;border-right-color:var(--color-shade-warning, #c09854)}novo-tooltip div.success{background-color:#458746;background-color:var(--color-shade-success, #458746)}novo-tooltip div.success.top-right:before,novo-tooltip div.success.top-left:before,novo-tooltip div.success.top:before{border-top-color:#458746;border-top-color:var(--color-shade-success, #458746)}novo-tooltip div.success.bottom-left:before,novo-tooltip div.success.bottom-right:before,novo-tooltip div.success.bottom:before{border-bottom-color:#458746;border-bottom-color:var(--color-shade-success, #458746)}novo-tooltip div.success.left:before{border-left-color:#458746;border-left-color:var(--color-shade-success, #458746)}novo-tooltip div.success.right:before{border-right-color:#458746;border-right-color:var(--color-shade-success, #458746)}novo-tooltip div.top-right:before,novo-tooltip div.top-left:before,novo-tooltip div.top:before{border-top-color:#383838;border-top-color:var(--tooltip-background-color, #383838)}novo-tooltip div.bottom-left:before,novo-tooltip div.bottom-right:before,novo-tooltip div.bottom:before{border-bottom-color:#383838;border-bottom-color:var(--tooltip-background-color, #383838)}novo-tooltip div.left:before{border-left-color:#383838;border-left-color:var(--tooltip-background-color, #383838)}novo-tooltip div.right:before{border-right-color:#383838;border-right-color:var(--tooltip-background-color, #383838)}novo-tooltip div.top:before{margin-bottom:-11px;left:calc(50% - 6px);bottom:0}novo-tooltip div.top-left:before{margin-right:0;margin-bottom:-11px;right:1px;bottom:0}novo-tooltip div.top-right:before{margin-left:0;margin-bottom:-11px;left:1px;bottom:0}novo-tooltip div.bottom:before{margin-top:-11px;left:calc(50% - 6px);top:0}novo-tooltip div.bottom-left:before{margin-right:0;margin-top:-11px;right:1px;top:0}novo-tooltip div.bottom-right:before{margin-left:0;margin-top:-11px;left:1px;top:0}novo-tooltip div.left:before{margin-right:-11px;margin-bottom:-6px;right:0;bottom:50%}novo-tooltip div.right:before{left:0;bottom:50%;margin-left:-11px;margin-bottom:-6px}novo-tooltip div:before{content:\"\";position:absolute;background:0 0;border:6px solid transparent;box-sizing:border-box}novo-tooltip div.extra-large,novo-tooltip div.large,novo-tooltip div.small,novo-tooltip div.medium{white-space:normal;line-height:1.4em;word-wrap:break-word}novo-tooltip div.extra-large{width:400px;font-size:1.2vh}novo-tooltip div.large{width:300px}novo-tooltip div.medium{width:150px}novo-tooltip div.small{width:80px}novo-tooltip div.preline{white-space:pre-line}novo-tooltip div.bounce{-webkit-animation:bounce .75s ease-in-out infinite;animation:bounce .75s ease-in-out infinite}@-webkit-keyframes bounce{0%{transform:translateY(0)}50%{transform:translateY(-10px)}to{transform:translateY(0)}}@keyframes bounce{0%{transform:translateY(0)}50%{transform:translateY(-10px)}to{transform:translateY(0)}}\n"] }]
        }] });

// NG
class TooltipDirective {
    constructor(overlay, viewContainerRef, elementRef) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        this.position = 'top';
        this.type = 'normal';
        this.active = true;
        this.removeArrow = false;
        this.autoPosition = true;
    }
    isPosition(position) {
        return position.toLowerCase() === (this.position || '').toLowerCase();
    }
    isType(type) {
        return type.toLowerCase() === (this.type || '').toLowerCase();
    }
    isSize(size) {
        return size.toLowerCase() === (this.size || '').toLowerCase();
    }
    onMouseEnter() {
        if (this.tooltip && this.active && !this.always) {
            this.show();
        }
    }
    onMouseLeave() {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    }
    ngOnInit() {
        if (this.tooltip && this.always && this.active) {
            this.show();
        }
    }
    ngOnDestroy() {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    }
    show() {
        const overlayState = new OverlayConfig();
        overlayState.positionStrategy = this.getPosition();
        if (this.always) {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
        else {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
        }
        overlayState.scrollStrategy.enable();
        this.overlayRef = this.overlay.create(overlayState);
        this.overlayRef.detach();
        this.portal = this.portal || new ComponentPortal(NovoTooltip, this.viewContainerRef);
        const tooltipInstance = this.overlayRef.attach(this.portal).instance;
        tooltipInstance.message = this.tooltip;
        tooltipInstance.tooltipType = this.type;
        tooltipInstance.rounded = this.rounded;
        tooltipInstance.size = this.size;
        tooltipInstance.preline = this.preline;
        tooltipInstance.noAnimate = this.noAnimate;
        tooltipInstance.position = this.removeArrow ? 'no-arrow' : this.position;
        tooltipInstance.isHTML = this.isHTML;
        tooltipInstance.bounce = this.bounce;
    }
    hide() {
        if (this.overlayRef) {
            this.overlayRef.detach();
        }
    }
    getPosition() {
        let strategy;
        let defaultPosition;
        let offsetX;
        let offsetY;
        let autoPositions = [
            { originX: 'center', originY: 'bottom', overlayX: 'center', overlayY: 'top', offsetX: 0, offsetY: 12 },
            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top', offsetX: 0, offsetY: 12 },
            { originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center', offsetX: 12, offsetY: 0 },
            { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center', offsetX: -12, offsetY: 0 },
            { originX: 'center', originY: 'top', overlayX: 'center', overlayY: 'bottom', offsetX: 0, offsetY: -12 },
            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetX: 0, offsetY: 12 },
            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', offsetX: 0, offsetY: -12 },
            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', offsetX: 0, offsetY: -12 },
            { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'bottom', offsetX: 12, offsetY: -12 },
            { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'top', offsetX: 12, offsetY: 12 },
            { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'bottom', offsetX: -12, offsetY: -12 },
            { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'top', offsetX: -12, offsetY: 12 },
        ];
        switch (this.position) {
            case 'right':
                defaultPosition = { originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center' };
                offsetX = 12;
                offsetY = 0;
                break;
            case 'bottom':
                defaultPosition = { originX: 'center', originY: 'bottom', overlayX: 'center', overlayY: 'top' };
                offsetX = 0;
                offsetY = 12;
                break;
            case 'top':
                defaultPosition = { originX: 'center', originY: 'top', overlayX: 'center', overlayY: 'bottom' };
                offsetX = 0;
                offsetY = -12;
                break;
            case 'left':
                defaultPosition = { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' };
                offsetX = -12;
                offsetY = 0;
                break;
            case 'top-left':
                defaultPosition = { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'bottom' };
                offsetX = 12;
                offsetY = -12;
                break;
            case 'bottom-left':
                defaultPosition = { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'top' };
                offsetX = 12;
                offsetY = 12;
                break;
            case 'top-right':
                defaultPosition = { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'bottom' };
                offsetX = -12;
                offsetY = -12;
                break;
            case 'bottom-right':
                defaultPosition = { originX: 'end', originY: 'bottom', overlayX: 'start', overlayY: 'top' };
                offsetX = -12;
                offsetY = 12;
                break;
            default:
                break;
        }
        const allPositions = this.autoPosition ? [defaultPosition].concat(autoPositions) : [defaultPosition];
        strategy = this.overlay
            .position()
            .flexibleConnectedTo(this.elementRef)
            .withFlexibleDimensions(false)
            .withDefaultOffsetX(offsetX)
            .withDefaultOffsetY(offsetY)
            .withPositions(allPositions);
        return strategy;
    }
}
TooltipDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TooltipDirective, deps: [{ token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TooltipDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: TooltipDirective, selector: "[tooltip]", inputs: { tooltip: "tooltip", position: ["tooltipPosition", "position"], type: ["tooltipType", "type"], size: ["tooltipSize", "size"], bounce: ["tooltipBounce", "bounce"], noAnimate: ["tooltipNoAnimate", "noAnimate"], rounded: ["tooltipRounded", "rounded"], always: ["tooltipAlways", "always"], active: ["tooltipActive", "active"], preline: ["tooltipPreline", "preline"], removeArrow: ["removeTooltipArrow", "removeArrow"], autoPosition: ["tooltipAutoPosition", "autoPosition"], isHTML: ["tooltipIsHTML", "isHTML"] }, host: { listeners: { "mouseenter": "onMouseEnter()", "mouseleave": "onMouseLeave()", "blur": "hide()" }, properties: { "attr.data-hint": "tooltip" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tooltip]',
                    host: {
                        '[attr.data-hint]': 'tooltip',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.ElementRef }]; }, propDecorators: { tooltip: [{
                type: Input
            }], position: [{
                type: Input,
                args: ['tooltipPosition']
            }], type: [{
                type: Input,
                args: ['tooltipType']
            }], size: [{
                type: Input,
                args: ['tooltipSize']
            }], bounce: [{
                type: Input,
                args: ['tooltipBounce']
            }], noAnimate: [{
                type: Input,
                args: ['tooltipNoAnimate']
            }], rounded: [{
                type: Input,
                args: ['tooltipRounded']
            }], always: [{
                type: Input,
                args: ['tooltipAlways']
            }], active: [{
                type: Input,
                args: ['tooltipActive']
            }], preline: [{
                type: Input,
                args: ['tooltipPreline']
            }], removeArrow: [{
                type: Input,
                args: ['removeTooltipArrow']
            }], autoPosition: [{
                type: Input,
                args: ['tooltipAutoPosition']
            }], isHTML: [{
                type: Input,
                args: ['tooltipIsHTML']
            }], onMouseEnter: [{
                type: HostListener,
                args: ['mouseenter']
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave']
            }], hide: [{
                type: HostListener,
                args: ['blur']
            }] } });

// NG2
class NovoTooltipModule {
}
NovoTooltipModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTooltipModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTooltipModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTooltipModule, declarations: [TooltipDirective, NovoTooltip], imports: [CommonModule], exports: [TooltipDirective] });
NovoTooltipModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTooltipModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTooltipModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TooltipDirective, NovoTooltip],
                    exports: [TooltipDirective],
                    imports: [CommonModule],
                }]
        }] });

class MonthPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'long') {
        return new Intl.DateTimeFormat(locale, { month: method }).format(date);
    }
}
MonthPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MonthPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
MonthPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MonthPipe, name: "month" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MonthPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'month' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class YearPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { year: method }).format(date);
    }
}
YearPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: YearPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
YearPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: YearPipe, name: "year" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: YearPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'year' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class MonthDayPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'short') {
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
    }
}
MonthDayPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MonthDayPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
MonthDayPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MonthDayPipe, name: "monthday" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MonthDayPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'monthday' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class EndOfWeekDisplayPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(endOfWeek, startOfWeek, locale = this.locale, method = 'short') {
        if (endOfWeek.getMonth() === startOfWeek.getMonth()) {
            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek);
        }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek);
    }
}
EndOfWeekDisplayPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EndOfWeekDisplayPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
EndOfWeekDisplayPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EndOfWeekDisplayPipe, name: "endofweekdisplay" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EndOfWeekDisplayPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'endofweekdisplay' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class WeekdayPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'short') {
        return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
    }
}
WeekdayPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: WeekdayPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
WeekdayPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: WeekdayPipe, name: "weekday" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: WeekdayPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'weekday' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class DayOfMonthPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { day: method }).format(date);
    }
}
DayOfMonthPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DayOfMonthPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
DayOfMonthPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DayOfMonthPipe, name: "dayofmonth" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DayOfMonthPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'dayofmonth' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class NovoAgendaDateChangeElement {
    constructor(locale) {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    subtractDate() {
        this.changeDate(-1);
    }
    addDate() {
        this.changeDate(1);
    }
    changeDate(unit) {
        const addFn = {
            day: dateFns.addDays,
            week: dateFns.addWeeks,
            month: dateFns.addMonths,
        }[this.view];
        this.viewDateChange.emit(addFn(this.viewDate, unit));
    }
    get startOfWeek() {
        return dateFns.startOfWeek(this.viewDate);
    }
    get endOfWeek() {
        return dateFns.endOfWeek(this.viewDate);
    }
}
NovoAgendaDateChangeElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaDateChangeElement, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaDateChangeElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaDateChangeElement, selector: "novo-agenda-date-change", inputs: { view: "view", viewDate: "viewDate", locale: "locale" }, outputs: { viewDateChange: "viewDateChange" }, ngImport: i0, template: `
    <div class="cal-date-change">
      <i class="bhi-arrow-left" (click)="subtractDate()"></i>
      <span [ngSwitch]="view">
        <span *ngSwitchCase="'month'">{{ (viewDate | month: locale) + ' ' + (viewDate | year: locale) }}</span>
        <span *ngSwitchCase="'week'">{{
          (startOfWeek | monthday: locale:'long') + ' - ' + (endOfWeek | endofweekdisplay: startOfWeek:locale:'long')
        }}</span>
        <span *ngSwitchCase="'day'">{{
          (viewDate | weekday: locale:'long') + ', ' + (viewDate | month: locale) + ' ' + (viewDate | dayofmonth: locale)
        }}</span>
      </span>
      <i class="bhi-arrow-right" (click)="addDate()"></i>
    </div>
  `, isInline: true, directives: [{ type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], pipes: { "month": MonthPipe, "year": YearPipe, "monthday": MonthDayPipe, "endofweekdisplay": EndOfWeekDisplayPipe, "weekday": WeekdayPipe, "dayofmonth": DayOfMonthPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaDateChangeElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-date-change',
                    template: `
    <div class="cal-date-change">
      <i class="bhi-arrow-left" (click)="subtractDate()"></i>
      <span [ngSwitch]="view">
        <span *ngSwitchCase="'month'">{{ (viewDate | month: locale) + ' ' + (viewDate | year: locale) }}</span>
        <span *ngSwitchCase="'week'">{{
          (startOfWeek | monthday: locale:'long') + ' - ' + (endOfWeek | endofweekdisplay: startOfWeek:locale:'long')
        }}</span>
        <span *ngSwitchCase="'day'">{{
          (viewDate | weekday: locale:'long') + ', ' + (viewDate | month: locale) + ' ' + (viewDate | dayofmonth: locale)
        }}</span>
      </span>
      <i class="bhi-arrow-right" (click)="addDate()"></i>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { view: [{
                type: Input
            }], viewDate: [{
                type: Input
            }], locale: [{
                type: Input
            }], viewDateChange: [{
                type: Output
            }] } });

class NovoEventTypeLegendElement {
    constructor() {
        this.eventTypeClicked = new EventEmitter();
    }
}
NovoEventTypeLegendElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoEventTypeLegendElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoEventTypeLegendElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoEventTypeLegendElement, selector: "novo-event-type-legend", inputs: { events: "events", customTemplate: "customTemplate" }, outputs: { eventTypeClicked: "eventTypeClicked" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div class="cal-event-legend">
        <div
          class="cal-event-type"
          *ngFor="let type of events | groupBy: 'type'"
          (click)="$event.stopPropagation(); eventTypeClicked.emit({ event: type?.key })"
        >
          <div class="cal-event-type-swatch"></div>
          <div>{{ type?.key }}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ events: events, eventTypeClicked: eventTypeClicked }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "groupBy": GroupByPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoEventTypeLegendElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-event-type-legend',
                    template: `
    <ng-template #defaultTemplate>
      <div class="cal-event-legend">
        <div
          class="cal-event-type"
          *ngFor="let type of events | groupBy: 'type'"
          (click)="$event.stopPropagation(); eventTypeClicked.emit({ event: type?.key })"
        >
          <div class="cal-event-type-swatch"></div>
          <div>{{ type?.key }}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ events: events, eventTypeClicked: eventTypeClicked }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { events: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], eventTypeClicked: [{
                type: Output
            }] } });

class NovoAgendaAllDayEventElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
}
NovoAgendaAllDayEventElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaAllDayEventElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaAllDayEventElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaAllDayEventElement, selector: "novo-agenda-all-day-event", inputs: { event: "event", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div class="cal-all-day-event" [style.backgroundColor]="event.color.secondary" [style.borderColor]="event.color.primary">
        {{ event.title }}
        <!--<novo-agenda-event-title
          [event]="event"
          view="day"
          (click)="eventClicked.emit()">
        </novo-agenda-event-title>
        <novo-agenda-event-actions [event]="event"></novo-agenda-event-actions>-->
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        event: event,
        eventClicked: eventClicked
      }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaAllDayEventElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-all-day-event',
                    template: `
    <ng-template #defaultTemplate>
      <div class="cal-all-day-event" [style.backgroundColor]="event.color.secondary" [style.borderColor]="event.color.primary">
        {{ event.title }}
        <!--<novo-agenda-event-title
          [event]="event"
          view="day"
          (click)="eventClicked.emit()">
        </novo-agenda-event-title>
        <novo-agenda-event-actions [event]="event"></novo-agenda-event-actions>-->
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        event: event,
        eventClicked: eventClicked
      }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { event: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], eventClicked: [{
                type: Output
            }] } });

class NovoAgendaDayEventElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
}
NovoAgendaDayEventElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaDayEventElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaDayEventElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaDayEventElement, selector: "novo-agenda-day-event", inputs: { dayEvent: "dayEvent", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [style.borderColor]="dayEvent.event.color.secondary"
        [class.cal-starts-within-day]="!dayEvent.startsBeforeDay"
        [class.cal-ends-within-day]="!dayEvent.endsAfterDay"
        [ngClass]="dayEvent.event.cssClass"
        [tooltip]="dayEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({ event: dayEvent.event })"
      >
        <div class="cal-event-ribbon" [style.backgroundColor]="dayEvent.event.color.primary"></div>
        <div class="cal-event-group">
          <div class="cal-event-title">{{ dayEvent.event.title }}</div>
          <div class="cal-event-description">{{ dayEvent.event?.description }}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaDayEventElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-day-event',
                    template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [style.borderColor]="dayEvent.event.color.secondary"
        [class.cal-starts-within-day]="!dayEvent.startsBeforeDay"
        [class.cal-ends-within-day]="!dayEvent.endsAfterDay"
        [ngClass]="dayEvent.event.cssClass"
        [tooltip]="dayEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({ event: dayEvent.event })"
      >
        <div class="cal-event-ribbon" [style.backgroundColor]="dayEvent.event.color.primary"></div>
        <div class="cal-event-group">
          <div class="cal-event-title">{{ dayEvent.event.title }}</div>
          <div class="cal-event-description">{{ dayEvent.event?.description }}</div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { dayEvent: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], eventClicked: [{
                type: Output
            }] } });

const WEEKEND_DAY_NUMBERS = [0, 6];
const DAYS_IN_WEEK = 7;
const HOURS_IN_DAY = 24;
const MINUTES_IN_HOUR$2 = 60;
var CalendarEventResponse;
(function (CalendarEventResponse) {
    CalendarEventResponse[CalendarEventResponse["Maybe"] = 0] = "Maybe";
    CalendarEventResponse[CalendarEventResponse["Accepted"] = 1] = "Accepted";
    CalendarEventResponse[CalendarEventResponse["Rejected"] = 2] = "Rejected";
})(CalendarEventResponse || (CalendarEventResponse = {}));
function getExcludedDays({ startDate, days, excluded }) {
    if (excluded.length < 1) {
        return 0;
    }
    let day = startDate.getDay();
    let reduce = 0;
    for (let i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some((e) => e === day)) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
function getWeekViewEventSpan({ event, offset, startOfWeek, excluded, }) {
    const begin = event.start < startOfWeek ? startOfWeek : event.start;
    let span = 1;
    if (event.end) {
        span = dateFns.differenceInDays(dateFns.addMinutes(dateFns.endOfDay(event.end), 1), dateFns.startOfDay(begin));
    }
    const totalLength = offset + span;
    if (totalLength > DAYS_IN_WEEK) {
        span = DAYS_IN_WEEK - offset;
    }
    return span - getExcludedDays({ startDate: begin, days: span, excluded });
}
function getWeekViewEventOffset({ event, startOfWeek, excluded = [], }) {
    if (event.start < startOfWeek) {
        return 0;
    }
    const distance = dateFns.differenceInDays(event.start, startOfWeek);
    return distance - getExcludedDays({ startDate: startOfWeek, days: distance, excluded });
}
function isEventIsPeriod({ event, periodStart, periodEnd }) {
    const eventStart = event.start;
    const eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (dateFns.isSameSecond(eventStart, periodStart) || dateFns.isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (dateFns.isSameSecond(eventEnd, periodStart) || dateFns.isSameSecond(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
function getEventsInPeriod({ events, periodStart, periodEnd }) {
    return events.filter((event) => isEventIsPeriod({ event, periodStart, periodEnd }));
}
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter((event) => {
        const eventStart = event.start;
        const eventEnd = event.end || eventStart;
        const startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(eventStart), dayStart.hour), dayStart.minute);
        const endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
        return dateFns.isAfter(eventEnd, startOfView) && dateFns.isBefore(eventStart, endOfView);
    });
}
function getWeekDay({ date }) {
    const today = dateFns.startOfDay(new Date());
    return {
        date,
        isPast: date < today,
        isToday: dateFns.isSameDay(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(dateFns.getDay(date)) > -1,
    };
}
function getWeekViewHeader({ viewDate, weekStartsOn, excluded = [], }) {
    const start = dateFns.startOfWeek(viewDate, { weekStartsOn });
    const days = [];
    for (let i = 0; i < DAYS_IN_WEEK; i++) {
        const date = dateFns.addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            days.push(getWeekDay({ date }));
        }
    }
    return days;
}
function getWeekView({ events = [], viewDate, weekStartsOn, excluded = [], hourSegments, segmentHeight, dayStart, dayEnd, }) {
    if (!events) {
        events = [];
    }
    const startOfViewWeek = dateFns.startOfWeek(viewDate, { weekStartsOn });
    const endOfViewWeek = dateFns.endOfWeek(viewDate, { weekStartsOn });
    const maxRange = DAYS_IN_WEEK - excluded.length;
    const eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
        .map((event) => {
        const offset = getWeekViewEventOffset({ event, startOfWeek: startOfViewWeek, excluded });
        const span = 1; // getWeekViewEventSpan({ event, offset, startOfWeek: startOfViewWeek, excluded });
        return { event, offset, span };
    })
        .filter((e) => e.offset < maxRange)
        .filter((e) => e.span > 0)
        .map((entry) => ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0,
    }))
        .sort((itemA, itemB) => {
        const startSecondsDiff = dateFns.differenceInSeconds(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return dateFns.differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    })
        .map((entry) => {
        const startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
        const endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
        const eventStart = entry.event.start;
        const eventEnd = entry.event.end || eventStart;
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR$2;
        if (eventStart > startOfView) {
            entry.top += dateFns.differenceInMinutes(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        const startsBeforeDay = eventStart < startOfView;
        const endsAfterDay = eventEnd > endOfView;
        const startDate = startsBeforeDay ? startOfView : eventStart;
        const endDate = endsAfterDay ? endOfView : eventEnd;
        let height = dateFns.differenceInMinutes(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    });
    const eventRows = [];
    const allocatedEvents = [];
    eventsMapped.forEach((event, index) => {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            const otherRowEvents = eventsMapped.slice(index + 1).filter((nextEvent) => {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            });
            if (otherRowEvents.length > 0) {
                const totalEventsForRow = otherRowEvents.length + 1;
                event.span = 1 / totalEventsForRow;
                let nextOffset = event.span + event.offset;
                otherRowEvents.forEach((nextEvent) => {
                    nextEvent.offset = nextOffset;
                    nextEvent.span = event.span;
                    nextOffset = nextEvent.span + nextEvent.offset;
                });
                allocatedEvents.push(...otherRowEvents);
            }
            eventRows.push({
                row: [event, ...otherRowEvents],
            });
        }
    });
    return eventRows;
}
function getMonthView({ events = [], viewDate, weekStartsOn, excluded = [], }) {
    if (!events) {
        events = [];
    }
    const start = dateFns.startOfWeek(dateFns.startOfMonth(viewDate), { weekStartsOn });
    const end = dateFns.endOfWeek(dateFns.endOfMonth(viewDate), { weekStartsOn });
    const eventsInMonth = getEventsInPeriod({
        events,
        periodStart: start,
        periodEnd: end,
    });
    const days = [];
    for (let i = 0; i < dateFns.differenceInDays(end, start) + 1; i++) {
        const date = dateFns.addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            const day = getWeekDay({ date });
            const calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: dateFns.startOfDay(date),
                periodEnd: dateFns.endOfDay(date),
            });
            day.inMonth = dateFns.isSameMonth(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    }
    const totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    const rows = Math.floor(days.length / totalDaysVisibleInWeek);
    const rowOffsets = [];
    for (let i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets,
        totalDaysVisibleInWeek,
        days,
    };
}
function getDayView({ events = [], viewDate, hourSegments, dayStart, dayEnd, eventWidth, segmentHeight }) {
    if (!events) {
        events = [];
    }
    const startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
    const endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    const previousDayEvents = [];
    const dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter((event) => !event.allDay),
        periodStart: startOfView,
        periodEnd: endOfView,
    }), dayStart, dayEnd)
        .sort((eventA, eventB) => {
        return eventA.start.valueOf() - eventB.start.valueOf();
    })
        .map((event) => {
        const eventStart = event.start;
        const eventEnd = event.end || eventStart;
        const startsBeforeDay = eventStart < startOfView;
        const endsAfterDay = eventEnd > endOfView;
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR$2;
        let top = 0;
        if (eventStart > startOfView) {
            top += dateFns.differenceInMinutes(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        const startDate = startsBeforeDay ? startOfView : eventStart;
        const endDate = endsAfterDay ? endOfView : eventEnd;
        let height = dateFns.differenceInMinutes(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        const bottom = top + height;
        const overlappingPreviousEvents = previousDayEvents.filter((previousEvent) => {
            const previousEventTop = previousEvent.top;
            const previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        });
        let left = 0;
        while (overlappingPreviousEvents.some((previousEvent) => previousEvent.left === left)) {
            left += eventWidth;
        }
        const dayEvent = {
            event,
            height,
            width: eventWidth,
            top,
            left,
            startsBeforeDay,
            endsAfterDay,
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    })
        .filter((dayEvent) => dayEvent.height > 0);
    const width = Math.max(...dayViewEvents.map((event) => event.left + event.width));
    const allDayEvents = getEventsInPeriod({
        events: events.filter((event) => event.allDay),
        periodStart: dateFns.startOfDay(startOfView),
        periodEnd: dateFns.endOfDay(endOfView),
    });
    return {
        events: dayViewEvents,
        width,
        allDayEvents,
    };
}
function getDayViewHourGrid({ viewDate, hourSegments, dayStart, dayEnd, }) {
    const hours = [];
    const startOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfDay(viewDate), dayStart.hour), dayStart.minute);
    const endOfView = dateFns.setMinutes(dateFns.setHours(dateFns.startOfMinute(dateFns.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    const segmentDuration = MINUTES_IN_HOUR$2 / hourSegments;
    const startOfViewDay = dateFns.startOfDay(viewDate);
    for (let i = 0; i < HOURS_IN_DAY; i++) {
        const segments = [];
        for (let j = 0; j < hourSegments; j++) {
            const date = dateFns.addMinutes(dateFns.addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date,
                    isStart: j === 0,
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments });
        }
    }
    return hours;
}

class HoursPipe {
    constructor(locale = 'en-US') {
        this.locale = locale;
    }
    transform(date, locale = this.locale, method = 'numeric') {
        return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
    }
}
HoursPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HoursPipe, deps: [{ token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Pipe });
HoursPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HoursPipe, name: "hours" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: HoursPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'hours' }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });

class NovoAgendaHourSegmentElement {
}
NovoAgendaHourSegmentElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaHourSegmentElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaHourSegmentElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaHourSegmentElement, selector: "novo-agenda-day-hour-segment", inputs: { segment: "segment", locale: "locale", customTemplate: "customTemplate" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-hour-segment"
        [class.cal-hour-start]="segment.isStart"
        [class.cal-after-hour-start]="!segment.isStart"
        [ngClass]="segment.cssClass"
      >
        <div class="cal-time">
          {{ segment.date | hours: locale }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        segment: segment,
        locale: locale
      }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "hours": HoursPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaHourSegmentElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-day-hour-segment',
                    template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-hour-segment"
        [class.cal-hour-start]="segment.isStart"
        [class.cal-after-hour-start]="!segment.isStart"
        [ngClass]="segment.cssClass"
      >
        <div class="cal-time">
          {{ segment.date | hours: locale }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        segment: segment,
        locale: locale
      }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { segment: [{
                type: Input
            }], locale: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }] } });

/**
 * @hidden
 */
const SEGMENT_HEIGHT$1 = 30;
/**
 * @hidden
 */
const MINUTES_IN_HOUR$1 = 60;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * &lt;novo-agenda-day
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-agenda-day&gt;
 * ```
 */
class NovoAgendaDayViewElement {
    /**
     * @hidden
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = 30;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.width = 0;
        this.locale = locale;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    }
    /*
      eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
        if (dropEvent.dropData && dropEvent.dropData.event) {
          this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
        }
      }
  
      resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
        this.currentResize = {
          originalTop: event.top,
          originalHeight: event.height,
          edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
        if (resizeEvent.edges.top) {
          event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
          event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
        } else if (resizeEvent.edges.bottom) {
          event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
        }
      }
  
      resizeEnded(dayEvent: DayViewEvent): void {
  
        let pixelsMoved: number;
        if (this.currentResize.edge === 'top') {
          pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
        } else {
          pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
        }
  
        dayEvent.top = this.currentResize.originalTop;
        dayEvent.height = this.currentResize.originalHeight;
  
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
        let newStart: Date = dayEvent.event.start;
        let newEnd: Date = dayEvent.event.end;
        if (this.currentResize.edge === 'top') {
          newStart = addMinutes(newStart, minutesMoved);
        } else if (newEnd) {
          newEnd = addMinutes(newEnd, minutesMoved);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        this.currentResize = null;
  
      }
  
      dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
  
      eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
        const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
        let newEnd: Date;
        if (dayEvent.event.end) {
          newEnd = addMinutes(dayEvent.event.end, minutesMoved);
        }
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
      }
      */
    refreshHourGrid() {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach((hour) => {
                hour.segments.forEach((segment) => this.hourSegmentModifier(segment));
            });
        }
    }
    refreshView() {
        this.view = getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT$1,
        });
    }
    refreshAll() {
        this.refreshHourGrid();
        this.refreshView();
    }
}
NovoAgendaDayViewElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaDayViewElement, deps: [{ token: i0.ChangeDetectorRef }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaDayViewElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaDayViewElement, selector: "novo-agenda-day", inputs: { viewDate: "viewDate", events: "events", hourSegments: "hourSegments", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", eventWidth: "eventWidth", refresh: "refresh", locale: "locale", hourSegmentModifier: "hourSegmentModifier", eventSnapSize: "eventSnapSize", tooltipPosition: "tooltipPosition", hourSegmentTemplate: "hourSegmentTemplate", allDayEventTemplate: "allDayEventTemplate", eventTemplate: "eventTemplate" }, outputs: { eventClicked: "eventClicked", hourSegmentClicked: "hourSegmentClicked", eventTimesChanged: "eventTimesChanged" }, usesOnChanges: true, ngImport: i0, template: `
    <div class="cal-day-view" #dayViewContainer>
      <novo-agenda-all-day-event
        *ngFor="let event of view.allDayEvents"
        [event]="event"
        [customTemplate]="allDayEventTemplate"
        (eventClicked)="eventClicked.emit({ event: event })"
      >
      </novo-agenda-all-day-event>
      <div class="cal-hour-rows">
        <div class="cal-events">
          <div
            #event
            *ngFor="let dayEvent of view?.events"
            class="cal-event-container"
            [style.marginTop.px]="dayEvent.top"
            [style.height.px]="dayEvent.height"
            [style.marginLeft.px]="dayEvent.left + 70"
            [style.width.px]="dayEvent.width - 1"
          >
            <novo-agenda-day-event
              [dayEvent]="dayEvent"
              [tooltipPosition]="tooltipPosition"
              [customTemplate]="eventTemplate"
              (eventClicked)="eventClicked.emit($event)"
            >
            </novo-agenda-day-event>
          </div>
        </div>
        <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="view?.width + 70">
          <novo-agenda-day-hour-segment
            *ngFor="let segment of hour.segments"
            [segment]="segment"
            [locale]="locale"
            [customTemplate]="hourSegmentTemplate"
            (click)="hourSegmentClicked.emit({ date: segment.date })"
          >
          </novo-agenda-day-hour-segment>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoAgendaAllDayEventElement, selector: "novo-agenda-all-day-event", inputs: ["event", "customTemplate"], outputs: ["eventClicked"] }, { type: NovoAgendaDayEventElement, selector: "novo-agenda-day-event", inputs: ["dayEvent", "tooltipPosition", "customTemplate"], outputs: ["eventClicked"] }, { type: NovoAgendaHourSegmentElement, selector: "novo-agenda-day-hour-segment", inputs: ["segment", "locale", "customTemplate"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaDayViewElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-day',
                    template: `
    <div class="cal-day-view" #dayViewContainer>
      <novo-agenda-all-day-event
        *ngFor="let event of view.allDayEvents"
        [event]="event"
        [customTemplate]="allDayEventTemplate"
        (eventClicked)="eventClicked.emit({ event: event })"
      >
      </novo-agenda-all-day-event>
      <div class="cal-hour-rows">
        <div class="cal-events">
          <div
            #event
            *ngFor="let dayEvent of view?.events"
            class="cal-event-container"
            [style.marginTop.px]="dayEvent.top"
            [style.height.px]="dayEvent.height"
            [style.marginLeft.px]="dayEvent.left + 70"
            [style.width.px]="dayEvent.width - 1"
          >
            <novo-agenda-day-event
              [dayEvent]="dayEvent"
              [tooltipPosition]="tooltipPosition"
              [customTemplate]="eventTemplate"
              (eventClicked)="eventClicked.emit($event)"
            >
            </novo-agenda-day-event>
          </div>
        </div>
        <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="view?.width + 70">
          <novo-agenda-day-hour-segment
            *ngFor="let segment of hour.segments"
            [segment]="segment"
            [locale]="locale"
            [customTemplate]="hourSegmentTemplate"
            (click)="hourSegmentClicked.emit({ date: segment.date })"
          >
          </novo-agenda-day-hour-segment>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { viewDate: [{
                type: Input
            }], events: [{
                type: Input
            }], hourSegments: [{
                type: Input
            }], dayStartHour: [{
                type: Input
            }], dayStartMinute: [{
                type: Input
            }], dayEndHour: [{
                type: Input
            }], dayEndMinute: [{
                type: Input
            }], eventWidth: [{
                type: Input
            }], refresh: [{
                type: Input
            }], locale: [{
                type: Input
            }], hourSegmentModifier: [{
                type: Input
            }], eventSnapSize: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], hourSegmentTemplate: [{
                type: Input
            }], allDayEventTemplate: [{
                type: Input
            }], eventTemplate: [{
                type: Input
            }], eventClicked: [{
                type: Output
            }], hourSegmentClicked: [{
                type: Output
            }], eventTimesChanged: [{
                type: Output
            }] } });

class NovoAgendaMonthDayElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
    get accepted() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((evt) => {
            return evt.response === CalendarEventResponse.Accepted;
        });
    }
    get rejected() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((evt) => {
            return evt.response === CalendarEventResponse.Rejected;
        });
    }
    get maybes() {
        if (!this.day) {
            return [];
        }
        return this.day.events.filter((evt) => {
            return evt.response === CalendarEventResponse.Maybe;
        });
    }
}
NovoAgendaMonthDayElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaMonthDayElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaMonthDayElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaMonthDayElement, selector: "novo-agenda-month-day", inputs: { day: "day", locale: "locale", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, host: { properties: { "class": "\"agenda-cell agenda-day-cell \" + day?.cssClass", "class.agenda-day-accepted": "accepted.length", "class.agenda-day-rejected": "rejected.length", "class.agenda-past": "day.isPast", "class.agenda-today": "day.isToday", "class.agenda-future": "day.isFuture", "class.agenda-weekend": "day.isWeekend", "class.agenda-in-month": "day.inMonth", "class.agenda-out-month": "!day.inMonth", "class.agenda-has-events": "day.events.length > 0", "style.backgroundColor": "day.backgroundColor" } }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div class="agenda-day-top">
        <span class="agenda-day-badge" *ngIf="day.badgeTotal > 0">{{ day.badgeTotal }}</span>
        <span class="agenda-day-number">{{ day.date | dayofmonth: locale }}</span>
      </div>
      <div class="agenda-events">
        <div
          class="agenda-event"
          *ngFor="let type of day.events | groupBy: 'type'"
          [style.backgroundColor]="type?.value[0]?.color.primary"
          [ngClass]="type?.value[0]?.cssClass"
          (click)="$event.stopPropagation(); eventClicked.emit({ event: type?.value[0] })"
        >
          {{ type?.value.length }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        day: day,
        locale: locale,
        tooltipPosition: tooltipPosition,
        eventClicked: eventClicked,
        accepted: accepted,
        rejected: rejected,
        maybes: maybes
      }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "dayofmonth": DayOfMonthPipe, "groupBy": GroupByPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaMonthDayElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-month-day',
                    template: `
    <ng-template #defaultTemplate>
      <div class="agenda-day-top">
        <span class="agenda-day-badge" *ngIf="day.badgeTotal > 0">{{ day.badgeTotal }}</span>
        <span class="agenda-day-number">{{ day.date | dayofmonth: locale }}</span>
      </div>
      <div class="agenda-events">
        <div
          class="agenda-event"
          *ngFor="let type of day.events | groupBy: 'type'"
          [style.backgroundColor]="type?.value[0]?.color.primary"
          [ngClass]="type?.value[0]?.cssClass"
          (click)="$event.stopPropagation(); eventClicked.emit({ event: type?.value[0] })"
        >
          {{ type?.value.length }}
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{
        day: day,
        locale: locale,
        tooltipPosition: tooltipPosition,
        eventClicked: eventClicked,
        accepted: accepted,
        rejected: rejected,
        maybes: maybes
      }"
    >
    </ng-template>
  `,
                    host: {
                        '[class]': '"agenda-cell agenda-day-cell " + day?.cssClass',
                        '[class.agenda-day-accepted]': 'accepted.length',
                        '[class.agenda-day-rejected]': 'rejected.length',
                        '[class.agenda-past]': 'day.isPast',
                        '[class.agenda-today]': 'day.isToday',
                        '[class.agenda-future]': 'day.isFuture',
                        '[class.agenda-weekend]': 'day.isWeekend',
                        '[class.agenda-in-month]': 'day.inMonth',
                        '[class.agenda-out-month]': '!day.inMonth',
                        '[class.agenda-has-events]': 'day.events.length > 0',
                        '[style.backgroundColor]': 'day.backgroundColor',
                    },
                }]
        }], propDecorators: { day: [{
                type: Input
            }], locale: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], eventClicked: [{
                type: Output
            }] } });

class NovoAgendaMonthHeaderElement {
    constructor() {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
    }
    prevMonth(event) {
        this.viewDateChange.emit(dateFns.subMonths(this.viewDate, 1));
    }
    nextMonth(event) {
        this.viewDateChange.emit(dateFns.addMonths(this.viewDate, 1));
    }
}
NovoAgendaMonthHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaMonthHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaMonthHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaMonthHeaderElement, selector: "novo-agenda-month-header", inputs: { viewDate: "viewDate", days: "days", locale: "locale", customTemplate: "customTemplate" }, outputs: { viewDateChange: "viewDateChange" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div class="agenda-header">
        <div class="agenda-header-top">
          <novo-button theme="icon" icon="previous" (click)="prevMonth($event)"></novo-button>
          <div class="agenda-month">{{ viewDate | month: locale }}</div>
          <novo-button theme="icon" icon="next" (click)="nextMonth($event)"></novo-button>
        </div>
        <div class="agenda-weekdays">
          <div
            class="agenda-weekday"
            *ngFor="let day of days"
            [class.agenda-past]="day.isPast"
            [class.agenda-today]="day.isToday"
            [class.agenda-future]="day.isFuture"
            [class.agenda-weekend]="day.isWeekend"
          >
            {{ day.date | weekday: locale }}
          </div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ days: days, locale: locale, viewDate: viewDate }"
    >
    </ng-template>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "month": MonthPipe, "weekday": WeekdayPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaMonthHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-month-header',
                    template: `
    <ng-template #defaultTemplate>
      <div class="agenda-header">
        <div class="agenda-header-top">
          <novo-button theme="icon" icon="previous" (click)="prevMonth($event)"></novo-button>
          <div class="agenda-month">{{ viewDate | month: locale }}</div>
          <novo-button theme="icon" icon="next" (click)="nextMonth($event)"></novo-button>
        </div>
        <div class="agenda-weekdays">
          <div
            class="agenda-weekday"
            *ngFor="let day of days"
            [class.agenda-past]="day.isPast"
            [class.agenda-today]="day.isToday"
            [class.agenda-future]="day.isFuture"
            [class.agenda-weekend]="day.isWeekend"
          >
            {{ day.date | weekday: locale }}
          </div>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ days: days, locale: locale, viewDate: viewDate }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { viewDate: [{
                type: Input
            }], days: [{
                type: Input
            }], locale: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], viewDateChange: [{
                type: Output
            }] } });

/**
 * Shows all events on a given month. Example usage:
 *
 * ```
 * &lt;novo-agenda-month-view
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-agenda-month-view&gt;
 * ```
 */
class NovoAgendaMonthViewElement {
    /**
     * @hidden
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The locale used to format dates
         */
        this.locale = 'en-US';
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.markForCheck();
            });
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events || changes.excludeDays) {
            this.refreshBody();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /**
     * @hidden
     */
    eventDropped(day, event) {
        const year = dateFns.getYear(day.date);
        const month = dateFns.getMonth(day.date);
        const date = dateFns.getDate(day.date);
        const newStart = dateFns.setYear(dateFns.setMonth(dateFns.setDate(event.start, date), month), year);
        let newEnd;
        if (event.end) {
            const secondsDiff = dateFns.differenceInSeconds(newStart, event.start);
            newEnd = dateFns.addSeconds(event.end, secondsDiff);
        }
        this.eventTimesChanged.emit({ event, newStart, newEnd });
    }
    refreshHeader() {
        this.columnHeaders = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    }
    refreshBody() {
        this.view = getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
        if (this.dayModifier) {
            this.view.days.forEach((day) => this.dayModifier(day));
        }
    }
    refreshAll() {
        this.refreshHeader();
        this.refreshBody();
        this.viewDateChange.emit(this.viewDate);
    }
}
NovoAgendaMonthViewElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaMonthViewElement, deps: [{ token: i0.ChangeDetectorRef }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaMonthViewElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaMonthViewElement, selector: "novo-agenda-month", inputs: { viewDate: "viewDate", events: "events", excludeDays: "excludeDays", dayModifier: "dayModifier", refresh: "refresh", locale: "locale", tooltipPosition: "tooltipPosition", weekStartsOn: "weekStartsOn", headerTemplate: "headerTemplate", cellTemplate: "cellTemplate" }, outputs: { dayClicked: "dayClicked", eventClicked: "eventClicked", eventTimesChanged: "eventTimesChanged", viewDateChange: "viewDateChange" }, usesOnChanges: true, ngImport: i0, template: `
    <div class="agenda-month-view">
      <novo-agenda-month-header
        [(viewDate)]="viewDate"
        [days]="columnHeaders"
        [locale]="locale"
        [customTemplate]="headerTemplate"
        (viewDateChange)="refreshAll()"
      >
      </novo-agenda-month-header>
      <div class="agenda-days">
        <div *ngFor="let rowIndex of view.rowOffsets">
          <div class="agenda-cell-row">
            <novo-agenda-month-day
              *ngFor="let day of view.days | slice: rowIndex:rowIndex + view.totalDaysVisibleInWeek"
              [day]="day"
              [locale]="locale"
              [customTemplate]="cellTemplate"
              (click)="dayClicked.emit({ day: day })"
              (eventClicked)="eventClicked.emit({ day: day, event: $event.event })"
            >
            </novo-agenda-month-day>
          </div>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoAgendaMonthHeaderElement, selector: "novo-agenda-month-header", inputs: ["viewDate", "days", "locale", "customTemplate"], outputs: ["viewDateChange"] }, { type: NovoAgendaMonthDayElement, selector: "novo-agenda-month-day", inputs: ["day", "locale", "tooltipPosition", "customTemplate"], outputs: ["eventClicked"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "slice": i1.SlicePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaMonthViewElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-month',
                    template: `
    <div class="agenda-month-view">
      <novo-agenda-month-header
        [(viewDate)]="viewDate"
        [days]="columnHeaders"
        [locale]="locale"
        [customTemplate]="headerTemplate"
        (viewDateChange)="refreshAll()"
      >
      </novo-agenda-month-header>
      <div class="agenda-days">
        <div *ngFor="let rowIndex of view.rowOffsets">
          <div class="agenda-cell-row">
            <novo-agenda-month-day
              *ngFor="let day of view.days | slice: rowIndex:rowIndex + view.totalDaysVisibleInWeek"
              [day]="day"
              [locale]="locale"
              [customTemplate]="cellTemplate"
              (click)="dayClicked.emit({ day: day })"
              (eventClicked)="eventClicked.emit({ day: day, event: $event.event })"
            >
            </novo-agenda-month-day>
          </div>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { viewDate: [{
                type: Input
            }], events: [{
                type: Input
            }], excludeDays: [{
                type: Input
            }], dayModifier: [{
                type: Input
            }], refresh: [{
                type: Input
            }], locale: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], weekStartsOn: [{
                type: Input
            }], headerTemplate: [{
                type: Input
            }], cellTemplate: [{
                type: Input
            }], dayClicked: [{
                type: Output
            }], eventClicked: [{
                type: Output
            }], eventTimesChanged: [{
                type: Output
            }], viewDateChange: [{
                type: Output
            }] } });

class NovoAgendaWeekEventElement {
    constructor() {
        this.eventClicked = new EventEmitter();
    }
}
NovoAgendaWeekEventElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaWeekEventElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaWeekEventElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaWeekEventElement, selector: "novo-agenda-week-event", inputs: { weekEvent: "weekEvent", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [class.cal-starts-within-week]="!weekEvent.startsBeforeWeek"
        [class.cal-ends-within-week]="!weekEvent.endsAfterWeek"
        [ngClass]="weekEvent.event?.cssClass"
        [tooltip]="weekEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({ event: weekEvent.event })"
      >
        <div class="cal-event-ribbon" [style.backgroundColor]="weekEvent.event.color.primary"></div>
        <div class="cal-event-title">{{ weekEvent.event?.title }}</div>
        <div class="cal-event-description">{{ weekEvent.event?.description }}</div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaWeekEventElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-week-event',
                    template: `
    <ng-template #defaultTemplate>
      <div
        class="cal-event"
        [class.cal-starts-within-week]="!weekEvent.startsBeforeWeek"
        [class.cal-ends-within-week]="!weekEvent.endsAfterWeek"
        [ngClass]="weekEvent.event?.cssClass"
        [tooltip]="weekEvent.event.description"
        [tooltipPosition]="tooltipPosition"
        (click)="eventClicked.emit({ event: weekEvent.event })"
      >
        <div class="cal-event-ribbon" [style.backgroundColor]="weekEvent.event.color.primary"></div>
        <div class="cal-event-title">{{ weekEvent.event?.title }}</div>
        <div class="cal-event-description">{{ weekEvent.event?.description }}</div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { weekEvent: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], eventClicked: [{
                type: Output
            }] } });

class NovoAgendaWeekHeaderElement {
    constructor() {
        this.dayClicked = new EventEmitter();
        this.eventDropped = new EventEmitter();
    }
}
NovoAgendaWeekHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaWeekHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaWeekHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaWeekHeaderElement, selector: "novo-agenda-week-header", inputs: { days: "days", locale: "locale", customTemplate: "customTemplate" }, outputs: { dayClicked: "dayClicked", eventDropped: "eventDropped" }, ngImport: i0, template: `
    <ng-template #defaultTemplate>
      <div class="cal-day-headers">
        <div
          class="cal-header"
          *ngFor="let day of days"
          [class.cal-past]="day.isPast"
          [class.cal-today]="day.isToday"
          [class.cal-future]="day.isFuture"
          [class.cal-weekend]="day.isWeekend"
          [class.cal-drag-over]="day.dragOver"
          (click)="dayClicked.emit({ date: day.date })"
          mwlDroppable
          (dragEnter)="day.dragOver = true"
          (dragLeave)="day.dragOver = false"
          (drop)="day.dragOver = false; eventDropped.emit({ event: $event.dropData.event, newStart: day.date })"
        >
          <b>{{ day.date | weekday: locale:'long' }}</b
          ><br />
          <span>{{ day.date | monthday: locale }}</span>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped }"
    >
    </ng-template>
  `, isInline: true, directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "weekday": WeekdayPipe, "monthday": MonthDayPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaWeekHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-week-header',
                    template: `
    <ng-template #defaultTemplate>
      <div class="cal-day-headers">
        <div
          class="cal-header"
          *ngFor="let day of days"
          [class.cal-past]="day.isPast"
          [class.cal-today]="day.isToday"
          [class.cal-future]="day.isFuture"
          [class.cal-weekend]="day.isWeekend"
          [class.cal-drag-over]="day.dragOver"
          (click)="dayClicked.emit({ date: day.date })"
          mwlDroppable
          (dragEnter)="day.dragOver = true"
          (dragLeave)="day.dragOver = false"
          (drop)="day.dragOver = false; eventDropped.emit({ event: $event.dropData.event, newStart: day.date })"
        >
          <b>{{ day.date | weekday: locale:'long' }}</b
          ><br />
          <span>{{ day.date | monthday: locale }}</span>
        </div>
      </div>
    </ng-template>
    <ng-template
      [ngTemplateOutlet]="customTemplate || defaultTemplate"
      [ngTemplateOutletContext]="{ days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped }"
    >
    </ng-template>
  `,
                }]
        }], propDecorators: { days: [{
                type: Input
            }], locale: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }], dayClicked: [{
                type: Output
            }], eventDropped: [{
                type: Output
            }] } });

/**
 * @hidden
 */
const SEGMENT_HEIGHT = 30;
/**
 * @hidden
 */
const MINUTES_IN_HOUR = 60;
/**
 * Shows all events on a given week. Example usage:
 *
 * ```typescript
 * &lt;novo-agenda-week
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-agenda-week&gt;
 * ```
 */
class NovoAgendaWeekViewElement {
    /**
     * @hidden
     */
    constructor(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.eventRows = [];
        this.locale = locale;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(() => {
                this.refreshAll();
                this.cdr.detectChanges();
            });
        }
    }
    /**
     * @hidden
     */
    ngOnChanges(changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays) {
            this.refreshBody();
        }
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    }
    /*
      resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
        this.currentResize = {
          originalOffset: weekEvent.offset,
          originalSpan: weekEvent.span,
          edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
        if (resizeEvent.edges.left) {
          const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
          weekEvent.offset = this.currentResize.originalOffset + diff;
          weekEvent.span = this.currentResize.originalSpan - diff;
        } else if (resizeEvent.edges.right) {
          const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
          weekEvent.span = this.currentResize.originalSpan + diff;
        }
      }
  
      resizeEnded(weekEvent: WeekViewEvent): void {
  
        let daysDiff: number;
        if (this.currentResize.edge === 'left') {
          daysDiff = weekEvent.offset - this.currentResize.originalOffset;
        } else {
          daysDiff = weekEvent.span - this.currentResize.originalSpan;
        }
  
        weekEvent.offset = this.currentResize.originalOffset;
        weekEvent.span = this.currentResize.originalSpan;
  
        let newStart: Date = weekEvent.event.start;
        let newEnd: Date = weekEvent.event.end;
        if (this.currentResize.edge === 'left') {
          newStart = addDays(newStart, daysDiff);
        } else if (newEnd) {
          newEnd = addDays(newEnd, daysDiff);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
        this.currentResize = null;
  
      }
  
      eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
  
        const daysDragged: number = draggedByPx / dayWidth;
        const newStart: Date = addDays(weekEvent.event.start, daysDragged);
        let newEnd: Date;
        if (weekEvent.event.end) {
          newEnd = addDays(weekEvent.event.end, daysDragged);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
  
      }
  
      dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
      */
    getDayColumnWidth(eventRowContainer) {
        return Math.floor(eventRowContainer.offsetWidth / this.days.length);
    }
    refreshHeader() {
        this.days = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    }
    refreshBody() {
        this.eventRows = getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
            hourSegments: this.hourSegments,
            segmentHeight: SEGMENT_HEIGHT,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
            // precision: this.precision
        });
    }
    refreshHourGrid() {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        // if (this.hourSegmentModifier) {
        //   this.hours.forEach(hour => {
        //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
        //   });
        // }
    }
    refreshAll() {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    }
}
NovoAgendaWeekViewElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaWeekViewElement, deps: [{ token: i0.ChangeDetectorRef }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
NovoAgendaWeekViewElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAgendaWeekViewElement, selector: "novo-agenda-week", inputs: { viewDate: "viewDate", events: "events", excludeDays: "excludeDays", refresh: "refresh", locale: "locale", tooltipPosition: "tooltipPosition", weekStartsOn: "weekStartsOn", headerTemplate: "headerTemplate", eventTemplate: "eventTemplate", precision: "precision", hourSegments: "hourSegments", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", hourSegmentTemplate: "hourSegmentTemplate" }, outputs: { hourSegmentClicked: "hourSegmentClicked", dayClicked: "dayClicked", eventClicked: "eventClicked", eventTimesChanged: "eventTimesChanged" }, usesOnChanges: true, ngImport: i0, template: `
    <div class="cal-week-view" #weekViewContainer>
      <novo-agenda-week-header [days]="days" [locale]="locale" [customTemplate]="headerTemplate" (dayClicked)="dayClicked.emit($event)">
      </novo-agenda-week-header>
      <div *ngFor="let eventRow of eventRows" #eventRowContainer>
        <div
          class="cal-event-container"
          #event
          *ngFor="let weekEvent of eventRow.row"
          [style.width]="(100 / days.length) * weekEvent.span + '%'"
          [style.marginTop.px]="weekEvent.top"
          [style.height.px]="weekEvent.height"
          [style.marginLeft]="(100 / days.length) * weekEvent.offset + '%'"
        >
          <novo-agenda-week-event
            [weekEvent]="weekEvent"
            [tooltipPosition]="tooltipPosition"
            [customTemplate]="eventTemplate"
            (eventClicked)="eventClicked.emit($event)"
          >
          </novo-agenda-week-event>
        </div>
      </div>
      <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="70">
        <novo-agenda-day-hour-segment
          *ngFor="let segment of hour.segments"
          [segment]="segment"
          [locale]="locale"
          [customTemplate]="hourSegmentTemplate"
          (click)="hourSegmentClicked.emit({ date: segment.date })"
        >
        </novo-agenda-day-hour-segment>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoAgendaWeekHeaderElement, selector: "novo-agenda-week-header", inputs: ["days", "locale", "customTemplate"], outputs: ["dayClicked", "eventDropped"] }, { type: NovoAgendaWeekEventElement, selector: "novo-agenda-week-event", inputs: ["weekEvent", "tooltipPosition", "customTemplate"], outputs: ["eventClicked"] }, { type: NovoAgendaHourSegmentElement, selector: "novo-agenda-day-hour-segment", inputs: ["segment", "locale", "customTemplate"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaWeekViewElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-agenda-week',
                    template: `
    <div class="cal-week-view" #weekViewContainer>
      <novo-agenda-week-header [days]="days" [locale]="locale" [customTemplate]="headerTemplate" (dayClicked)="dayClicked.emit($event)">
      </novo-agenda-week-header>
      <div *ngFor="let eventRow of eventRows" #eventRowContainer>
        <div
          class="cal-event-container"
          #event
          *ngFor="let weekEvent of eventRow.row"
          [style.width]="(100 / days.length) * weekEvent.span + '%'"
          [style.marginTop.px]="weekEvent.top"
          [style.height.px]="weekEvent.height"
          [style.marginLeft]="(100 / days.length) * weekEvent.offset + '%'"
        >
          <novo-agenda-week-event
            [weekEvent]="weekEvent"
            [tooltipPosition]="tooltipPosition"
            [customTemplate]="eventTemplate"
            (eventClicked)="eventClicked.emit($event)"
          >
          </novo-agenda-week-event>
        </div>
      </div>
      <div class="cal-hour" *ngFor="let hour of hours" [style.minWidth.px]="70">
        <novo-agenda-day-hour-segment
          *ngFor="let segment of hour.segments"
          [segment]="segment"
          [locale]="locale"
          [customTemplate]="hourSegmentTemplate"
          (click)="hourSegmentClicked.emit({ date: segment.date })"
        >
        </novo-agenda-day-hour-segment>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { viewDate: [{
                type: Input
            }], events: [{
                type: Input
            }], excludeDays: [{
                type: Input
            }], refresh: [{
                type: Input
            }], locale: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], weekStartsOn: [{
                type: Input
            }], headerTemplate: [{
                type: Input
            }], eventTemplate: [{
                type: Input
            }], precision: [{
                type: Input
            }], hourSegments: [{
                type: Input
            }], dayStartHour: [{
                type: Input
            }], dayStartMinute: [{
                type: Input
            }], dayEndHour: [{
                type: Input
            }], dayEndMinute: [{
                type: Input
            }], hourSegmentTemplate: [{
                type: Input
            }], hourSegmentClicked: [{
                type: Output
            }], dayClicked: [{
                type: Output
            }], eventClicked: [{
                type: Output
            }], eventTimesChanged: [{
                type: Output
            }] } });

// NG2
class NovoAgendaModule {
}
NovoAgendaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoAgendaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaModule, declarations: [NovoEventTypeLegendElement,
        NovoAgendaMonthViewElement,
        NovoAgendaMonthHeaderElement,
        NovoAgendaMonthDayElement,
        NovoAgendaWeekViewElement,
        NovoAgendaWeekHeaderElement,
        NovoAgendaWeekEventElement,
        NovoAgendaDayViewElement,
        NovoAgendaDayEventElement,
        NovoAgendaHourSegmentElement,
        NovoAgendaAllDayEventElement,
        NovoAgendaDateChangeElement,
        WeekdayPipe,
        DayOfMonthPipe,
        MonthPipe,
        MonthDayPipe,
        YearPipe,
        HoursPipe,
        EndOfWeekDisplayPipe], imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule], exports: [NovoEventTypeLegendElement,
        NovoAgendaMonthViewElement,
        NovoAgendaMonthHeaderElement,
        NovoAgendaMonthDayElement,
        NovoAgendaWeekViewElement,
        NovoAgendaWeekHeaderElement,
        NovoAgendaWeekEventElement,
        NovoAgendaDayViewElement,
        NovoAgendaDayEventElement,
        NovoAgendaHourSegmentElement,
        NovoAgendaAllDayEventElement,
        NovoAgendaDateChangeElement,
        WeekdayPipe,
        DayOfMonthPipe,
        MonthPipe,
        MonthDayPipe,
        YearPipe,
        HoursPipe,
        EndOfWeekDisplayPipe] });
NovoAgendaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaModule, imports: [[CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAgendaModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                    declarations: [
                        NovoEventTypeLegendElement,
                        NovoAgendaMonthViewElement,
                        NovoAgendaMonthHeaderElement,
                        NovoAgendaMonthDayElement,
                        NovoAgendaWeekViewElement,
                        NovoAgendaWeekHeaderElement,
                        NovoAgendaWeekEventElement,
                        NovoAgendaDayViewElement,
                        NovoAgendaDayEventElement,
                        NovoAgendaHourSegmentElement,
                        NovoAgendaAllDayEventElement,
                        NovoAgendaDateChangeElement,
                        WeekdayPipe,
                        DayOfMonthPipe,
                        MonthPipe,
                        MonthDayPipe,
                        YearPipe,
                        HoursPipe,
                        EndOfWeekDisplayPipe,
                    ],
                    exports: [
                        NovoEventTypeLegendElement,
                        NovoAgendaMonthViewElement,
                        NovoAgendaMonthHeaderElement,
                        NovoAgendaMonthDayElement,
                        NovoAgendaWeekViewElement,
                        NovoAgendaWeekHeaderElement,
                        NovoAgendaWeekEventElement,
                        NovoAgendaDayViewElement,
                        NovoAgendaDayEventElement,
                        NovoAgendaHourSegmentElement,
                        NovoAgendaAllDayEventElement,
                        NovoAgendaDateChangeElement,
                        WeekdayPipe,
                        DayOfMonthPipe,
                        MonthPipe,
                        MonthDayPipe,
                        YearPipe,
                        HoursPipe,
                        EndOfWeekDisplayPipe,
                    ],
                }]
        }] });

class NovoAsideRef {
    constructor(component, params, overlayRef) {
        this.component = component;
        this.params = params;
        this.overlayRef = overlayRef;
        this._beforeClose = new Subject();
        this._afterClosed = new Subject();
        this.isClosed = false;
    }
    // Gets a promise that is resolved when the dialog is closed.
    get onClosed() {
        return this._afterClosed.toPromise();
    }
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    beforeClose() {
        return this._beforeClose.asObservable();
    }
    close(result) {
        // Listen for animation 'start' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'start'), take(1))
            .subscribe(() => {
            this._beforeClose.next(result);
            this._beforeClose.complete();
            this.overlayRef.detachBackdrop();
        });
        // Listen for animation 'done' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'leave'), take(1))
            .subscribe(() => {
            this.isClosed = true;
            this.overlayRef.dispose();
            this._afterClosed.next(result);
            this._afterClosed.complete();
            // Make sure to also clear the reference to the
            // component instance to avoid memory leaks
            this.componentInstance = null;
        });
        // Start exit animation
        this.componentInstance.startExitAnimation();
    }
}

const slideInOut = trigger('slideInOut', [
    state('void', style({ transform: 'translateX(100%)' })),
    state('enter', style({ transform: 'none' })),
    state('leave', style({ transform: 'translateX(100%)' })),
    transition('* => *', animate('800ms cubic-bezier(0.2, 1, 0.3, 1)')),
]);

class AsideComponent {
    constructor(injector, asideRef) {
        this.injector = injector;
        this.asideRef = asideRef;
        this.animationStateChanged = new EventEmitter();
        this.animationState = 'enter';
        this.component = new ComponentPortal(asideRef.component, null, injector);
    }
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    onAnimationDone(event) {
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.animationState = 'leave';
    }
}
AsideComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AsideComponent, deps: [{ token: i0.Injector }, { token: NovoAsideRef }], target: i0.ɵɵFactoryTarget.Component });
AsideComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: AsideComponent, selector: "novo-aside", outputs: { animationStateChanged: "animationStateChanged" }, ngImport: i0, template: "<div class=\"aside-panel\" [@slideInOut]=\"animationState\" (@slideInOut.start)=\"onAnimationStart($event)\"\n  (@slideInOut.done)=\"onAnimationDone($event)\">\n  <ng-template [cdkPortalOutlet]=\"component\"></ng-template>\n</div>", styles: [":host .aside-panel{background-color:#fff;background-color:var(--background-bright, #ffffff);height:100vh;width:50%;min-width:-webkit-min-content;min-width:-moz-min-content;min-width:min-content;max-width:540px;position:absolute;top:0;right:0px;padding:0;display:flex;justify-content:stretch;align-items:stretch}\n"], directives: [{ type: i2.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], animations: [slideInOut] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AsideComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-aside', animations: [slideInOut], template: "<div class=\"aside-panel\" [@slideInOut]=\"animationState\" (@slideInOut.start)=\"onAnimationStart($event)\"\n  (@slideInOut.done)=\"onAnimationDone($event)\">\n  <ng-template [cdkPortalOutlet]=\"component\"></ng-template>\n</div>", styles: [":host .aside-panel{background-color:#fff;background-color:var(--background-bright, #ffffff);height:100vh;width:50%;min-width:-webkit-min-content;min-width:-moz-min-content;min-width:min-content;max-width:540px;position:absolute;top:0;right:0px;padding:0;display:flex;justify-content:stretch;align-items:stretch}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: NovoAsideRef }]; }, propDecorators: { animationStateChanged: [{
                type: Output
            }] } });

const DEFAULT_CONFIG$1 = {
    hasBackdrop: true,
    backdropClass: 'aside-overlay-backdrop',
    panelClass: 'aside-overlay-panel',
};
class NovoAsideService {
    constructor(injector, overlay) {
        this.injector = injector;
        this.overlay = overlay;
    }
    open(component, params = {}, config = {}) {
        // Override default configuration
        const asideConfig = this.getOverlayConfig({ ...DEFAULT_CONFIG$1, ...config });
        // Returns an OverlayRef which is a PortalHost
        const overlayRef = this.createOverlay(asideConfig);
        // Instantiate remote control
        const asideRef = new NovoAsideRef(component, params, overlayRef);
        const overlayComponent = this.attachAsideContainer(AsideComponent, overlayRef, asideConfig, asideRef);
        // Pass the instance of the overlay component to the remote control
        asideRef.componentInstance = overlayComponent;
        overlayRef.backdropClick().subscribe(() => asideRef.close());
        return asideRef;
    }
    createOverlay(config) {
        return this.overlay.create(config);
    }
    attachAsideContainer(component, overlayRef, config, asideRef) {
        const injector = this.createInjector(config, asideRef);
        const containerPortal = new ComponentPortal(component, null, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    createInjector(config, asideRef) {
        const injectionTokens = new WeakMap();
        injectionTokens.set(NovoAsideRef, asideRef);
        return new PortalInjector(this.injector, injectionTokens);
    }
    getOverlayConfig(config) {
        // const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
        const scrollStrategy = config.hasBackdrop ? this.overlay.scrollStrategies.block() : this.overlay.scrollStrategies.noop();
        return {
            scrollStrategy,
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.panelClass,
        };
    }
}
NovoAsideService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideService, deps: [{ token: i0.Injector }, { token: i1$1.Overlay }], target: i0.ɵɵFactoryTarget.Injectable });
NovoAsideService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$1.Overlay }]; } });

class NovoAsideModule {
}
NovoAsideModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoAsideModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideModule, declarations: [AsideComponent], imports: [OverlayModule, PortalModule] });
NovoAsideModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideModule, providers: [NovoAsideService], imports: [[OverlayModule, PortalModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAsideModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [OverlayModule, PortalModule],
                    declarations: [AsideComponent],
                    providers: [NovoAsideService],
                }]
        }] });

// NG2
class NovoAvatarElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.size = 'medium';
        this.shape = 'round';
    }
    get hb_classBinding() {
        return [`avatar-size-${this.size}`, `avatar-shape-${this.shape}`, `avatar-color-${this.color}`];
    }
    get background() {
        if (!this.image && !this.source.profileImage)
            return;
        return `url(${this.image || this.source.profileImage})`;
    }
    ngOnInit() {
        let src;
        if ((this.source && this.source !== '') || this.label) {
            if (this.source.profileImage) {
                // this.src = this.source.profileImage;
                return;
            }
            else if (this.source.logo) {
                src = this.source.logo;
            }
            else {
                const first = this.label || this.source.firstName
                    ? this.source.firstName.charAt(0)
                    : this.source.name
                        ? this.source.name.charAt(0)
                        : this.source.username
                            ? this.source.username.charAt(0)
                            : '';
                const last = this.source.lastName ? this.source.lastName.charAt(0) : '';
                // Defining Colors
                const colors = [
                    '#1abc9c',
                    '#16a085',
                    '#f1c40f',
                    '#f39c12',
                    '#2ecc71',
                    '#27ae60',
                    '#e67e22',
                    '#d35400',
                    '#3498db',
                    '#2980b9',
                    '#e74c3c',
                    '#c0392b',
                    '#9b59b6',
                    '#8e44ad',
                    '#bdc3c7',
                    '#34495e',
                    '#2c3e50',
                    '#95a5a6',
                    '#7f8c8d',
                    '#ec87bf',
                    '#d870ad',
                    '#f69785',
                    '#9ba37e',
                    '#b49255',
                    '#b49255',
                    '#a94136',
                ];
                const lighterColors = [
                    '#15D6B0',
                    '#16A069',
                    '#F1D60F',
                    '#F3AC12',
                    '#2ED85B',
                    '#28BC7F',
                    '#E66322',
                    '#D3002B',
                    '#6534DB',
                    '#29B2B9',
                    '#E73C63',
                    '#DB6D31',
                    '#CB48B5',
                    '#6944AD',
                    '#38536D',
                    '#3D6473',
                    '#394A6C',
                    '#92BCB7',
                    '#7D99A2',
                    '#F14F76',
                    '#CB5CDA',
                    '#FFB475',
                    '#B9CE6E',
                    '#DDAA4F',
                    '#CD6F45',
                    '#B9354A',
                ];
                const settings = {
                    // Default settings
                    textColor: '#ffffff',
                    height: 100,
                    width: 100,
                    fontSize: 50,
                    fontWeight: 400,
                    fontFamily: 'HelveticaNeue-Light,Helvetica Neue Light,Helvetica Neue,Helvetica, Arial,Lucida Grande, sans-serif',
                };
                // making the text object
                const colorIndex = Math.floor((first.charCodeAt(0) - 65) % colors.length);
                const cobj = document.createElement('text');
                cobj.setAttribute('text-anchor', 'middle');
                cobj.setAttribute('x', '50%');
                cobj.setAttribute('y', '50%');
                cobj.setAttribute('dy', '0.35em');
                cobj.setAttribute('pointer-events', 'auto');
                cobj.setAttribute('fill', settings.textColor);
                cobj.setAttribute('font-family', settings.fontFamily);
                cobj.style.fontWeight = settings.fontWeight;
                cobj.style.fontSize = `${settings.fontSize}px`;
                const ltrs = document.createTextNode(this.label || first + last);
                cobj.appendChild(ltrs);
                const svg = document.createElement('svg');
                svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
                svg.setAttribute('pointer-events', 'none');
                svg.setAttribute('width', settings.width);
                svg.setAttribute('height', settings.height);
                // this.setPrefixedValue(svg, 'background', colors[colorIndex]);
                this.setPrefixedValue(svg, 'background', `linear-gradient(-45deg, ${colors[colorIndex]} 0%, ${lighterColors[colorIndex]} 100%)`);
                svg.style.width = `${settings.width}px`;
                svg.style.height = `${settings.height}px`;
                svg.appendChild(cobj);
                const top = document.createElement('div');
                top.appendChild(svg);
                const svgHtml = window.btoa(unescape(encodeURIComponent(top.innerHTML)));
                src = `data:image/svg+xml;base64, ${svgHtml}`;
            }
            this.src = this.sanitizer.bypassSecurityTrustUrl(src);
        }
    }
    setPrefixedValue(elm, prop, value) {
        const prefixes = ['-moz-', '-webkit-', '-o-', '-ms-', '-khtml-'];
        // Clear
        elm.style[prop] = '';
        const starting = elm.style[prop];
        // Try raw first
        try {
            elm.style[prop] = value;
            if (elm.style[prop] !== starting) {
                return;
            }
        }
        catch (e) {
            // no op
        }
        // Try prefixes
        for (let i = 0; i < prefixes.length; ++i) {
            const v = prefixes[i] + value;
            try {
                elm.style[prop] = v;
                if (elm.style[prop] !== starting) {
                    return;
                }
            }
            catch (e2) {
                // no op
            }
        }
    }
    _isValidURL(str) {
        const pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
            '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|' + // domain name
            '((\\d{1,3}\\.){3}\\d{1,3}))' + // OR ip (v4) address
            '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
            '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
            '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
        return !!pattern.test(str);
    }
}
NovoAvatarElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarElement, deps: [{ token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoAvatarElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAvatarElement, selector: "novo-avatar", inputs: { source: "source", label: "label", theme: "theme", image: "image", size: "size", shape: "shape", color: "color" }, host: { properties: { "class": "this.hb_classBinding", "style.backgroundImage": "this.background" } }, ngImport: i0, template: '<img *ngIf="src" [src]="src"/>', isInline: true, styles: [":host{display:inline-block;width:30px;height:30px;background-size:cover;background-position:center;overflow:hidden;position:relative;background-color:var(--background-muted)}:host img{width:inherit;height:inherit;border-radius:inherit}:host.avatar-size-small{width:20px;height:20px}:host.avatar-size-large{width:40px;height:40px}:host.avatar-shape-round{border-radius:2em}:host.avatar-shape-square{border-radius:.4em}:host.avatar-color-black{color:#fff;background-color:#000}:host.avatar-color-white{color:#3d464d;background-color:#fff}:host.avatar-color-gray{color:#3d464d;background-color:#9e9e9e}:host.avatar-color-grey{color:#3d464d;background-color:#9e9e9e}:host.avatar-color-offWhite{color:#3d464d;background-color:#f7f7f7}:host.avatar-color-bright{color:#3d464d;background-color:#f7f7f7}:host.avatar-color-light{color:#3d464d;background-color:#dbdbdb}:host.avatar-color-neutral{color:#fff;background-color:#4f5361}:host.avatar-color-dark{color:#fff;background-color:#3d464d}:host.avatar-color-orange{color:#3d464d;background-color:#ff6900}:host.avatar-color-navigation{color:#fff;background-color:#202945}:host.avatar-color-skyBlue{color:#fff;background-color:#009bdf}:host.avatar-color-steel{color:#fff;background-color:#5b6770}:host.avatar-color-metal{color:#fff;background-color:#637893}:host.avatar-color-sand{color:#3d464d;background-color:#f4f4f4}:host.avatar-color-silver{color:#3d464d;background-color:#e2e2e2}:host.avatar-color-stone{color:#3d464d;background-color:#bebebe}:host.avatar-color-ash{color:#3d464d;background-color:#a0a0a0}:host.avatar-color-slate{color:#fff;background-color:#707070}:host.avatar-color-onyx{color:#fff;background-color:#526980}:host.avatar-color-charcoal{color:#fff;background-color:#282828}:host.avatar-color-moonlight{color:#fff;background-color:#1a242f}:host.avatar-color-midnight{color:#fff;background-color:#202945}:host.avatar-color-darkness{color:#fff;background-color:#161f27}:host.avatar-color-navy{color:#fff;background-color:#0d2d42}:host.avatar-color-aqua{color:#3d464d;background-color:#3bafda}:host.avatar-color-ocean{color:#fff;background-color:#4a89dc}:host.avatar-color-mint{color:#3d464d;background-color:#37bc9b}:host.avatar-color-grass{color:#fff;background-color:#8cc152}:host.avatar-color-sunflower{color:#fff;background-color:#f6b042}:host.avatar-color-bittersweet{color:#fff;background-color:#eb6845}:host.avatar-color-grapefruit{color:#fff;background-color:#da4453}:host.avatar-color-carnation{color:#fff;background-color:#d770ad}:host.avatar-color-lavender{color:#fff;background-color:#967adc}:host.avatar-color-mountain{color:#fff;background-color:#9678b6}:host.avatar-color-info{color:#fff;background-color:#4a89dc}:host.avatar-color-positive{color:#fff;background-color:#4a89dc}:host.avatar-color-success{color:#fff;background-color:#8cc152}:host.avatar-color-negative{color:#fff;background-color:#da4453}:host.avatar-color-danger{color:#fff;background-color:#da4453}:host.avatar-color-error{color:#fff;background-color:#da4453}:host.avatar-color-warning{color:#fff;background-color:#f6b042}:host.avatar-color-empty{color:#3d464d;background-color:#cccdcc}:host.avatar-color-disabled{color:#3d464d;background-color:#bebebe}:host.avatar-color-background{color:#3d464d;background-color:#f7f7f7}:host.avatar-color-backgroundDark{color:#3d464d;background-color:#e2e2e2}:host.avatar-color-presentation{color:#fff;background-color:#5b6770}:host.avatar-color-bullhorn{color:#3d464d;background-color:#ff6900}:host.avatar-color-pulse{color:#3d464d;background-color:#3bafda}:host.avatar-color-company{color:#fff;background-color:#39d}:host.avatar-color-candidate{color:#fff;background-color:#4b7}:host.avatar-color-lead{color:#fff;background-color:#a69}:host.avatar-color-contact{color:#fff;background-color:#fa4}:host.avatar-color-clientcontact{color:#fff;background-color:#fa4}:host.avatar-color-opportunity{color:#fff;background-color:#625}:host.avatar-color-job{color:#fff;background-color:#b56}:host.avatar-color-joborder{color:#fff;background-color:#b56}:host.avatar-color-submission{color:#3d464d;background-color:#a9adbb}:host.avatar-color-sendout{color:#fff;background-color:#747884}:host.avatar-color-placement{color:#fff;background-color:#0b344f}:host.avatar-color-note{color:#fff;background-color:#747884}:host.avatar-color-contract{color:#fff;background-color:#454ea0}:host.avatar-color-jobCode{color:#fff;background-color:#696d79}:host.avatar-color-earnCode{color:#fff;background-color:#696d79}:host.avatar-color-invoiceStatement{color:#fff;background-color:#696d79}:host.avatar-color-billableCharge{color:#fff;background-color:#696d79}:host.avatar-color-payableCharge{color:#fff;background-color:#696d79}:host.avatar-color-user{color:#fff;background-color:#696d79}:host.avatar-color-corporateUser{color:#fff;background-color:#696d79}:host.avatar-color-distributionList{color:#fff;background-color:#696d79}:host.avatar-color-credential{color:#fff;background-color:#696d79}:host.avatar-color-person{color:#fff;background-color:#696d79}:host(.menu-active){box-shadow:0 0 4px 1px var(--selection)}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-avatar', template: '<img *ngIf="src" [src]="src"/>', styles: [":host{display:inline-block;width:30px;height:30px;background-size:cover;background-position:center;overflow:hidden;position:relative;background-color:var(--background-muted)}:host img{width:inherit;height:inherit;border-radius:inherit}:host.avatar-size-small{width:20px;height:20px}:host.avatar-size-large{width:40px;height:40px}:host.avatar-shape-round{border-radius:2em}:host.avatar-shape-square{border-radius:.4em}:host.avatar-color-black{color:#fff;background-color:#000}:host.avatar-color-white{color:#3d464d;background-color:#fff}:host.avatar-color-gray{color:#3d464d;background-color:#9e9e9e}:host.avatar-color-grey{color:#3d464d;background-color:#9e9e9e}:host.avatar-color-offWhite{color:#3d464d;background-color:#f7f7f7}:host.avatar-color-bright{color:#3d464d;background-color:#f7f7f7}:host.avatar-color-light{color:#3d464d;background-color:#dbdbdb}:host.avatar-color-neutral{color:#fff;background-color:#4f5361}:host.avatar-color-dark{color:#fff;background-color:#3d464d}:host.avatar-color-orange{color:#3d464d;background-color:#ff6900}:host.avatar-color-navigation{color:#fff;background-color:#202945}:host.avatar-color-skyBlue{color:#fff;background-color:#009bdf}:host.avatar-color-steel{color:#fff;background-color:#5b6770}:host.avatar-color-metal{color:#fff;background-color:#637893}:host.avatar-color-sand{color:#3d464d;background-color:#f4f4f4}:host.avatar-color-silver{color:#3d464d;background-color:#e2e2e2}:host.avatar-color-stone{color:#3d464d;background-color:#bebebe}:host.avatar-color-ash{color:#3d464d;background-color:#a0a0a0}:host.avatar-color-slate{color:#fff;background-color:#707070}:host.avatar-color-onyx{color:#fff;background-color:#526980}:host.avatar-color-charcoal{color:#fff;background-color:#282828}:host.avatar-color-moonlight{color:#fff;background-color:#1a242f}:host.avatar-color-midnight{color:#fff;background-color:#202945}:host.avatar-color-darkness{color:#fff;background-color:#161f27}:host.avatar-color-navy{color:#fff;background-color:#0d2d42}:host.avatar-color-aqua{color:#3d464d;background-color:#3bafda}:host.avatar-color-ocean{color:#fff;background-color:#4a89dc}:host.avatar-color-mint{color:#3d464d;background-color:#37bc9b}:host.avatar-color-grass{color:#fff;background-color:#8cc152}:host.avatar-color-sunflower{color:#fff;background-color:#f6b042}:host.avatar-color-bittersweet{color:#fff;background-color:#eb6845}:host.avatar-color-grapefruit{color:#fff;background-color:#da4453}:host.avatar-color-carnation{color:#fff;background-color:#d770ad}:host.avatar-color-lavender{color:#fff;background-color:#967adc}:host.avatar-color-mountain{color:#fff;background-color:#9678b6}:host.avatar-color-info{color:#fff;background-color:#4a89dc}:host.avatar-color-positive{color:#fff;background-color:#4a89dc}:host.avatar-color-success{color:#fff;background-color:#8cc152}:host.avatar-color-negative{color:#fff;background-color:#da4453}:host.avatar-color-danger{color:#fff;background-color:#da4453}:host.avatar-color-error{color:#fff;background-color:#da4453}:host.avatar-color-warning{color:#fff;background-color:#f6b042}:host.avatar-color-empty{color:#3d464d;background-color:#cccdcc}:host.avatar-color-disabled{color:#3d464d;background-color:#bebebe}:host.avatar-color-background{color:#3d464d;background-color:#f7f7f7}:host.avatar-color-backgroundDark{color:#3d464d;background-color:#e2e2e2}:host.avatar-color-presentation{color:#fff;background-color:#5b6770}:host.avatar-color-bullhorn{color:#3d464d;background-color:#ff6900}:host.avatar-color-pulse{color:#3d464d;background-color:#3bafda}:host.avatar-color-company{color:#fff;background-color:#39d}:host.avatar-color-candidate{color:#fff;background-color:#4b7}:host.avatar-color-lead{color:#fff;background-color:#a69}:host.avatar-color-contact{color:#fff;background-color:#fa4}:host.avatar-color-clientcontact{color:#fff;background-color:#fa4}:host.avatar-color-opportunity{color:#fff;background-color:#625}:host.avatar-color-job{color:#fff;background-color:#b56}:host.avatar-color-joborder{color:#fff;background-color:#b56}:host.avatar-color-submission{color:#3d464d;background-color:#a9adbb}:host.avatar-color-sendout{color:#fff;background-color:#747884}:host.avatar-color-placement{color:#fff;background-color:#0b344f}:host.avatar-color-note{color:#fff;background-color:#747884}:host.avatar-color-contract{color:#fff;background-color:#454ea0}:host.avatar-color-jobCode{color:#fff;background-color:#696d79}:host.avatar-color-earnCode{color:#fff;background-color:#696d79}:host.avatar-color-invoiceStatement{color:#fff;background-color:#696d79}:host.avatar-color-billableCharge{color:#fff;background-color:#696d79}:host.avatar-color-payableCharge{color:#fff;background-color:#696d79}:host.avatar-color-user{color:#fff;background-color:#696d79}:host.avatar-color-corporateUser{color:#fff;background-color:#696d79}:host.avatar-color-distributionList{color:#fff;background-color:#696d79}:host.avatar-color-credential{color:#fff;background-color:#696d79}:host.avatar-color-person{color:#fff;background-color:#696d79}:host(.menu-active){box-shadow:0 0 4px 1px var(--selection)}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$2.DomSanitizer }]; }, propDecorators: { source: [{
                type: Input
            }], label: [{
                type: Input
            }], theme: [{
                type: Input
            }], image: [{
                type: Input
            }], size: [{
                type: Input
            }], shape: [{
                type: Input
            }], color: [{
                type: Input
            }], hb_classBinding: [{
                type: HostBinding,
                args: ['class']
            }], background: [{
                type: HostBinding,
                args: ['style.backgroundImage']
            }] } });

// NG2
class NovoAvatarStackElement {
    constructor() {
        this.total = 0;
        this.showTotal = false;
        this.remainingCount = 0;
    }
    ngAfterViewInit() {
        // viewChildren is set
        if (this.total - this.viewChildren.length > 0) {
            this.remainingCount = this.total - this.viewChildren.length;
            this.showTotal = true;
        }
    }
}
NovoAvatarStackElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarStackElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoAvatarStackElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAvatarStackElement, selector: "novo-avatar-stack", inputs: { total: "total" }, viewQueries: [{ propertyName: "viewChildren", predicate: NovoAvatarElement, descendants: true }], ngImport: i0, template: `
    <ng-content></ng-content>
    <novo-avatar *ngIf="showTotal" label="+5"></novo-avatar>
  `, isInline: true, styles: [":host{display:inline-flex;flex-flow:row nowrap}:host::ng-deep novo-avatar{transition:all .1s ease-in-out}:host::ng-deep novo-avatar img{border:1px solid #ffffff}:host::ng-deep novo-avatar+novo-avatar{margin-left:-15px}:host::ng-deep novo-avatar:first-child{z-index:5}:host::ng-deep novo-avatar:nth-child(2){z-index:4}:host::ng-deep novo-avatar:nth-child(3){z-index:3}:host::ng-deep novo-avatar:nth-child(4){z-index:2}:host::ng-deep novo-avatar:nth-child(5){z-index:1}:host::ng-deep novo-avatar:nth-child(n+6){z-index:0;margin-left:-15px;display:none;opacity:0}:host:hover::ng-deep novo-avatar{margin-left:0;margin-right:1px}:host:hover::ng-deep novo-avatar:nth-child(n+6){display:unset;opacity:1}\n"], components: [{ type: NovoAvatarElement, selector: "novo-avatar", inputs: ["source", "label", "theme", "image", "size", "shape", "color"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarStackElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-avatar-stack', template: `
    <ng-content></ng-content>
    <novo-avatar *ngIf="showTotal" label="+5"></novo-avatar>
  `, styles: [":host{display:inline-flex;flex-flow:row nowrap}:host::ng-deep novo-avatar{transition:all .1s ease-in-out}:host::ng-deep novo-avatar img{border:1px solid #ffffff}:host::ng-deep novo-avatar+novo-avatar{margin-left:-15px}:host::ng-deep novo-avatar:first-child{z-index:5}:host::ng-deep novo-avatar:nth-child(2){z-index:4}:host::ng-deep novo-avatar:nth-child(3){z-index:3}:host::ng-deep novo-avatar:nth-child(4){z-index:2}:host::ng-deep novo-avatar:nth-child(5){z-index:1}:host::ng-deep novo-avatar:nth-child(n+6){z-index:0;margin-left:-15px;display:none;opacity:0}:host:hover::ng-deep novo-avatar{margin-left:0;margin-right:1px}:host:hover::ng-deep novo-avatar:nth-child(n+6){display:unset;opacity:1}\n"] }]
        }], propDecorators: { total: [{
                type: Input
            }], viewChildren: [{
                type: ViewChildren,
                args: [NovoAvatarElement]
            }] } });

// NG2
class NovoAvatarModule {
}
NovoAvatarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoAvatarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarModule, declarations: [NovoAvatarElement, NovoAvatarStackElement], imports: [CommonModule], exports: [NovoAvatarElement, NovoAvatarStackElement] });
NovoAvatarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAvatarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoAvatarElement, NovoAvatarStackElement],
                    exports: [NovoAvatarElement, NovoAvatarStackElement],
                }]
        }] });

class BreadcrumbService {
    constructor(router) {
        this.router = router;
    }
    navigateTo($event, item) {
        if ($event.button !== 0 || $event.ctrlKey || $event.metaKey || $event.shiftKey) {
            return;
        }
        if (typeof item.target === 'string' && item.target !== '_self') {
            return;
        }
        $event.preventDefault();
        this.router.navigateByUrl(item.link);
    }
}
BreadcrumbService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbService, deps: [{ token: i1$3.Router }], target: i0.ɵɵFactoryTarget.Injectable });
BreadcrumbService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1$3.Router }]; } });

/**
 * Injection token used to provide the parent component to options.
 */
const NOVO_BREADCRUMB_REF = new InjectionToken('NOVO_BREADCRUMB_REF');

var AppBridgeHandler;
(function (AppBridgeHandler) {
    AppBridgeHandler[AppBridgeHandler["HTTP"] = 0] = "HTTP";
    AppBridgeHandler[AppBridgeHandler["OPEN"] = 1] = "OPEN";
    AppBridgeHandler[AppBridgeHandler["OPEN_LIST"] = 2] = "OPEN_LIST";
    AppBridgeHandler[AppBridgeHandler["CLOSE"] = 3] = "CLOSE";
    AppBridgeHandler[AppBridgeHandler["REFRESH"] = 4] = "REFRESH";
    AppBridgeHandler[AppBridgeHandler["PIN"] = 5] = "PIN";
    AppBridgeHandler[AppBridgeHandler["REGISTER"] = 6] = "REGISTER";
    AppBridgeHandler[AppBridgeHandler["UPDATE"] = 7] = "UPDATE";
    AppBridgeHandler[AppBridgeHandler["REQUEST_DATA"] = 8] = "REQUEST_DATA";
    AppBridgeHandler[AppBridgeHandler["CALLBACK"] = 9] = "CALLBACK";
    AppBridgeHandler[AppBridgeHandler["PING"] = 10] = "PING";
})(AppBridgeHandler || (AppBridgeHandler = {}));
const HTTP_VERBS = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete',
};
const MESSAGE_TYPES = {
    REGISTER: 'register',
    OPEN: 'open',
    OPEN_LIST: 'openList',
    CLOSE: 'close',
    REFRESH: 'refresh',
    PIN: 'pin',
    PING: 'ping',
    UPDATE: 'update',
    HTTP_GET: 'httpGET',
    HTTP_POST: 'httpPOST',
    HTTP_PUT: 'httpPUT',
    HTTP_DELETE: 'httpDELETE',
    CUSTOM_EVENT: 'customEvent',
    REQUEST_DATA: 'requestData',
    CALLBACK: 'callback',
};
class AppBridgeService {
    create(name) {
        return new AppBridge(name);
    }
}
class DevAppBridgeService {
    constructor(http) {
        this.http = http;
    }
    create(name) {
        return new DevAppBridge(name, this.http);
    }
}
class AppBridge {
    // Type?
    constructor(traceName = 'AppBridge') {
        this.id = `${Date.now()}`;
        this._registeredFrames = [];
        this._handlers = {};
        this._tracing = false;
        this._eventListeners = {};
        this.traceName = traceName;
        if (postRobot) {
            postRobot.CONFIG.LOG_LEVEL = 'error';
            try {
                this._setupHandlers();
            }
            catch (error) {
                // No op
            }
        }
    }
    set tracing(tracing) {
        this._tracing = tracing;
    }
    handle(type, handler) {
        this._handlers[type] = handler;
    }
    _trace(eventType, event) {
        if (this._tracing) {
            console.log(`[${this.traceName || this.id}] "${eventType}"`, event); // tslint:disable-line
        }
    }
    _setupHandlers() {
        // Register
        postRobot.on(MESSAGE_TYPES.REGISTER, (event) => {
            this._trace(MESSAGE_TYPES.REGISTER, event);
            this._registeredFrames.push(event);
            return this.register(event.data).then((windowName) => {
                return { windowName };
            });
        });
        // Update
        postRobot.on(MESSAGE_TYPES.UPDATE, (event) => {
            this._trace(MESSAGE_TYPES.UPDATE, event);
            return this.update(event.data).then((success) => {
                return { success };
            });
        });
        // Open
        postRobot.on(MESSAGE_TYPES.OPEN, (event) => {
            this._trace(MESSAGE_TYPES.OPEN, event);
            return this.open(event.data).then((success) => {
                return { success };
            });
        });
        postRobot.on(MESSAGE_TYPES.OPEN_LIST, (event) => {
            this._trace(MESSAGE_TYPES.OPEN_LIST, event);
            return this.openList(event.data).then((success) => {
                return { success };
            });
        });
        // Close
        postRobot.on(MESSAGE_TYPES.CLOSE, (event) => {
            this._trace(MESSAGE_TYPES.CLOSE, event);
            const index = this._registeredFrames.findIndex((frame) => frame.data.id === event.data.id);
            if (index !== -1) {
                this._registeredFrames.splice(index, 1);
            }
            return this.close(event.data).then((success) => {
                return { success };
            });
        });
        // Refresh
        postRobot.on(MESSAGE_TYPES.REFRESH, (event) => {
            this._trace(MESSAGE_TYPES.REFRESH, event);
            return this.refresh(event.data).then((success) => {
                return { success };
            });
        });
        // PIN
        postRobot.on(MESSAGE_TYPES.PIN, (event) => {
            this._trace(MESSAGE_TYPES.PIN, event);
            return this.pin(event.data).then((success) => {
                return { success };
            });
        });
        // PING
        postRobot.on(MESSAGE_TYPES.PING, (event) => {
            this._trace(MESSAGE_TYPES.PING, event);
            return this.httpGET('ping').then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // REQUEST_DATA
        postRobot.on(MESSAGE_TYPES.REQUEST_DATA, (event) => {
            this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
            return this.requestData(event.data).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // CALLBACKS
        postRobot.on(MESSAGE_TYPES.CALLBACK, (event) => {
            this._trace(MESSAGE_TYPES.CALLBACK, event);
            return this.callback(event.data).then((success) => {
                return { success };
            });
        });
        // HTTP-GET
        postRobot.on(MESSAGE_TYPES.HTTP_GET, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_GET, event);
            return this.httpGET(event.data.relativeURL).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-POST
        postRobot.on(MESSAGE_TYPES.HTTP_POST, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_POST, event);
            return this.httpPOST(event.data.relativeURL, event.data.data).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-PUT
        postRobot.on(MESSAGE_TYPES.HTTP_PUT, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_PUT, event);
            return this.httpPUT(event.data.relativeURL, event.data.data).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-DELETE
        postRobot.on(MESSAGE_TYPES.HTTP_DELETE, (event) => {
            this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
            return this.httpDELETE(event.data.relativeURL).then((result) => {
                return { data: result.data, error: result.error };
            });
        });
        // Custom Events
        postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, (event) => {
            this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
            if (this._eventListeners[event.data.event]) {
                this._eventListeners[event.data.event].forEach((listener) => {
                    listener(event.data.data);
                });
            }
            if (this._registeredFrames.length > 0) {
                this._registeredFrames.forEach((frame) => {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                });
            }
        });
    }
    /**
     * Fires or responds to an open event
     * @param packet any - packet of data to send with the open event
     */
    open(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.OPEN]) {
                this._handlers[AppBridgeHandler.OPEN](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.OPEN} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an openList event
     * @param packet any - packet of data to send with the open event
     */
    openList(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.OPEN_LIST]) {
                this._handlers[AppBridgeHandler.OPEN_LIST](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                const openListPacket = {};
                Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN_LIST, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.OPEN_LIST} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an close event
     * @param packet any - packet of data to send with the close event
     */
    update(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.UPDATE]) {
                this._handlers[AppBridgeHandler.UPDATE](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.UPDATE, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.UPDATE} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an close event
     */
    close(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.CLOSE]) {
                this._handlers[AppBridgeHandler.CLOSE](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                }
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.CLOSE, realPacket)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.CLOSE} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an close event
     */
    refresh(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REFRESH]) {
                this._handlers[AppBridgeHandler.REFRESH](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                }
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.REFRESH, realPacket)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.REFRESH} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    ping() {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.PING]) {
                this._handlers[AppBridgeHandler.PING]({}, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.PING, {})
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to a pin event
     */
    pin(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.PIN]) {
                this._handlers[AppBridgeHandler.PIN](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                }
                const realPacket = { id: this.id, windowName: this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.PIN, realPacket)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.PIN} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to a requestData event
     * @param packet any - packet of data to send with the requestData event
     */
    requestData(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REQUEST_DATA]) {
                this._handlers[AppBridgeHandler.REQUEST_DATA](packet, (data) => {
                    if (data) {
                        resolve({ data });
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.REQUEST_DATA} (callback)`, event);
                    if (event.data) {
                        resolve({ data: event.data.data });
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires a generic callback command
     * @param packet string - key: string, generic: boolean
     */
    callback(packet) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.CALLBACK]) {
                this._handlers[AppBridgeHandler.CALLBACK](packet, (success) => {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id, windowName: this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.CALLBACK, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.CALLBACK} (callback)`, event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch((err) => {
                    reject(false);
                });
            }
        });
    }
    /**
     * Fires or responds to an register event
     * @param packet any - packet of data to send with the event
     */
    register(packet = {}) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.REGISTER]) {
                this._handlers[AppBridgeHandler.REGISTER](packet, (windowName) => {
                    if (windowName) {
                        resolve(windowName);
                    }
                    else {
                        resolve(null);
                    }
                });
            }
            else {
                Object.assign(packet, { id: this.id });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REGISTER, packet)
                    .then((event) => {
                    this._trace(`${MESSAGE_TYPES.REGISTER} (callback)`, event);
                    if (event.data) {
                        this.windowName = event.data.windowName;
                        resolve(event.data.windowName);
                    }
                    else {
                        resolve(null);
                    }
                })
                    .catch((err) => {
                    this._trace(`${MESSAGE_TYPES.REGISTER} - FAILED - (no parent)`, err);
                    reject(err);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    httpGET(relativeURL, timeout = 10000) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL }, { timeout })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    httpPOST(relativeURL, postData, timeout = 10000) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL, data: postData }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL, data: postData }, { timeout })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    httpPUT(relativeURL, putData, timeout = 10000) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL, data: putData }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL, data: putData }, { timeout })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    httpDELETE(relativeURL, timeout = 10000) {
        return new Promise((resolve, reject) => {
            if (this._handlers[AppBridgeHandler.HTTP]) {
                this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL }, (data, error) => {
                    resolve({ data, error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL }, { timeout })
                    .then((event) => {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch((err) => {
                    reject(null);
                });
            }
        });
    }
    /**
     * Fires a custom event to anywhere in the application
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    fireEvent(event, data) {
        return new Promise((resolve, reject) => {
            postRobot
                .sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event, data })
                .then((e) => {
                resolve(e);
            })
                .catch((err) => {
                reject(null);
            });
        });
    }
    /**
     * Fires a custom event to all registered frames
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    fireEventToChildren(event, data) {
        if (this._registeredFrames.length > 0) {
            this._registeredFrames.forEach((frame) => {
                postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                    event,
                    eventType: event,
                    data,
                });
            });
        }
    }
    /**
     * Fires a custom event to specified frames
     * @param source Window - specific iframe contentWindow
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    fireEventToChild(source, event, data) {
        if (source instanceof HTMLIFrameElement) {
            source = source.contentWindow;
        }
        postRobot.send(source, MESSAGE_TYPES.CUSTOM_EVENT, { event, data });
    }
    /**
     * Adds an event listener to a custom event
     * @param event string - event name to listen to
     * @param callback function - callback to be fired when an event is caught
     */
    addEventListener(event, callback) {
        if (!this._eventListeners[event]) {
            this._eventListeners[event] = [];
        }
        this._eventListeners[event].push(callback);
    }
}
class DevAppBridge extends AppBridge {
    constructor(traceName = 'DevAppBridge', http) {
        super(traceName);
        this.http = http;
        const cookie = this.getCookie('UlEncodedIdentity');
        if (cookie && cookie.length) {
            const identity = JSON.parse(decodeURIComponent(cookie));
            const endpoints = identity.sessions.reduce((obj, session) => {
                obj[session.name] = session.value.endpoint;
                return obj;
            }, {});
            this.baseURL = endpoints.rest;
        }
    }
    _setupHandlers() { }
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    httpGET(relativeURL) {
        return this.http.get(`${this.baseURL}/${relativeURL}`, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    httpPOST(relativeURL, postData) {
        return this.http.post(`${this.baseURL}/${relativeURL}`, postData, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    httpPUT(relativeURL, putData) {
        return this.http.put(`${this.baseURL}/${relativeURL}`, putData, { withCredentials: true }).toPromise();
    }
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    httpDELETE(relativeURL) {
        return this.http.delete(`${this.baseURL}/${relativeURL}`, { withCredentials: true }).toPromise();
    }
    getCookie(cname) {
        if (document) {
            const name = `${cname}=`;
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name) === 0) {
                    return c.substring(name.length, c.length);
                }
            }
        }
        return false;
    }
}

// NG2
class ComponentUtils {
    constructor(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    append(ComponentClass, location, providers, onTop) {
        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        const parent = location.injector;
        const index = onTop ? 0 : location.length;
        return location.createComponent(componentFactory, index, Injector.create({ providers, parent }));
    }
}
ComponentUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ComponentUtils, deps: [{ token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Injectable });
ComponentUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ComponentUtils });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ComponentUtils, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ComponentFactoryResolver }]; } });

/* tslint:disable:quotemark */
/**
 * AUTOGENERATED FILE - DO NOT EDIT
 * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
 * Last generated on: Tue Feb 26 2019 15:45:12 GMT-0600 (Central Standard Time)
 */
const COUNTRIES = [
    {
        code: 'US',
        id: 1,
        name: 'United States',
        states: [
            {
                code: 'AL',
                name: 'Alabama',
            },
            {
                code: 'AK',
                name: 'Alaska',
            },
            {
                code: 'AZ',
                name: 'Arizona',
            },
            {
                code: 'AR',
                name: 'Arkansas',
            },
            {
                code: 'CA',
                name: 'California',
            },
            {
                code: 'CO',
                name: 'Colorado',
            },
            {
                code: 'CT',
                name: 'Connecticut',
            },
            {
                code: 'DE',
                name: 'Delaware',
            },
            {
                code: 'DC',
                name: 'District Of Columbia',
            },
            {
                code: 'FL',
                name: 'Florida',
            },
            {
                code: 'GA',
                name: 'Georgia',
            },
            {
                code: 'GU',
                name: 'Guam',
            },
            {
                code: 'HI',
                name: 'Hawaii',
            },
            {
                code: 'ID',
                name: 'Idaho',
            },
            {
                code: 'IL',
                name: 'Illinois',
            },
            {
                code: 'IN',
                name: 'Indiana',
            },
            {
                code: 'IA',
                name: 'Iowa',
            },
            {
                code: 'KS',
                name: 'Kansas',
            },
            {
                code: 'KY',
                name: 'Kentucky',
            },
            {
                code: 'LA',
                name: 'Louisiana',
            },
            {
                code: 'ME',
                name: 'Maine',
            },
            {
                code: 'MH',
                name: 'Marshall Islands',
            },
            {
                code: 'MD',
                name: 'Maryland',
            },
            {
                code: 'MA',
                name: 'Massachusetts',
            },
            {
                code: 'MI',
                name: 'Michigan',
            },
            {
                code: 'MN',
                name: 'Minnesota',
            },
            {
                code: 'MS',
                name: 'Mississippi',
            },
            {
                code: 'MO',
                name: 'Missouri',
            },
            {
                code: 'MT',
                name: 'Montana',
            },
            {
                code: 'NE',
                name: 'Nebraska',
            },
            {
                code: 'NV',
                name: 'Nevada',
            },
            {
                code: 'NH',
                name: 'New Hampshire',
            },
            {
                code: 'NJ',
                name: 'New Jersey',
            },
            {
                code: 'NM',
                name: 'New Mexico',
            },
            {
                code: 'NY',
                name: 'New York',
            },
            {
                code: 'NC',
                name: 'North Carolina',
            },
            {
                code: 'ND',
                name: 'North Dakota',
            },
            {
                code: 'MP',
                name: 'Northern Mariana Islands',
            },
            {
                code: 'OH',
                name: 'Ohio',
            },
            {
                code: 'OK',
                name: 'Oklahoma',
            },
            {
                code: 'OR',
                name: 'Oregon',
            },
            {
                code: 'PW',
                name: 'Palau',
            },
            {
                code: 'PA',
                name: 'Pennsylvania',
            },
            {
                code: 'PR',
                name: 'Puerto Rico',
            },
            {
                code: 'RI',
                name: 'Rhode Island',
            },
            {
                code: 'SC',
                name: 'South Carolina',
            },
            {
                code: 'SD',
                name: 'South Dakota',
            },
            {
                code: 'TN',
                name: 'Tennessee',
            },
            {
                code: 'TX',
                name: 'Texas',
            },
            {
                code: 'UT',
                name: 'Utah',
            },
            {
                code: 'VT',
                name: 'Vermont',
            },
            {
                code: 'VI',
                name: 'Virgin Islands',
            },
            {
                code: 'VA',
                name: 'Virginia',
            },
            {
                code: 'WA',
                name: 'Washington',
            },
            {
                code: 'WV',
                name: 'West Virginia',
            },
            {
                code: 'WI',
                name: 'Wisconsin',
            },
            {
                code: 'WY',
                name: 'Wyoming',
            },
        ],
    },
    {
        code: 'UK',
        id: 2359,
        name: 'United Kingdom',
        states: [
            {
                code: 'ABD',
                name: 'Aberdeenshire',
            },
            {
                code: 'ALD',
                name: 'Alderney',
            },
            {
                code: 'ANS',
                name: 'Angus',
            },
            {
                code: 'ANN',
                name: 'Antrim and Newtownabbey',
            },
            {
                code: 'AGB',
                name: 'Argyllshire',
            },
            {
                code: 'ABC',
                name: 'Armagh',
            },
            {
                code: 'EAY',
                name: 'Ayrshire',
            },
            {
                code: 'BLA',
                name: 'Ballymena',
            },
            {
                code: 'BAY',
                name: 'Ballymoney',
            },
            {
                code: 'BNB',
                name: 'Banbridge',
            },
            {
                code: 'BAN',
                name: 'Banffshire',
            },
            {
                code: 'BDF',
                name: 'Bedfordshire',
            },
            {
                code: 'BFS',
                name: 'Belfast',
            },
            {
                code: 'BRK',
                name: 'Berkshire',
            },
            {
                code: 'BGW',
                name: 'Blaenau Gwent',
            },
            {
                code: 'SCB',
                name: 'Borders',
            },
            {
                code: 'BGE',
                name: 'Bridgend',
            },
            {
                code: 'BST',
                name: 'Bristol',
            },
            {
                code: 'BKM',
                name: 'Buckinghamshire',
            },
            {
                code: 'CAY',
                name: 'Caerphilly',
            },
            {
                code: 'CAI',
                name: 'Caithness',
            },
            {
                code: 'CAM',
                name: 'Cambridgeshire',
            },
            {
                code: 'CRF',
                name: 'Cardiff',
            },
            {
                code: 'CMN',
                name: 'Carmarthenshire',
            },
            {
                code: 'CKF',
                name: 'Carrickfergus',
            },
            {
                code: 'CAS',
                name: 'Castlereagh',
            },
            {
                code: 'CGN',
                name: 'Ceredigion',
            },
            {
                code: 'CHE',
                name: 'Cheshire',
            },
            {
                code: 'CLK',
                name: 'Clackmannanshire',
            },
            {
                code: 'CLR',
                name: 'Coleraine',
            },
            {
                code: 'CWY',
                name: 'Conwy',
            },
            {
                code: 'CKT',
                name: 'Cookstown',
            },
            {
                code: 'CON',
                name: 'Cornwall',
            },
            {
                code: 'DUR',
                name: 'County Durham',
            },
            {
                code: 'DRS',
                name: 'County Londonderry',
            },
            {
                code: 'CRA',
                name: 'Craigavon',
            },
            {
                code: 'CMA',
                name: 'Cumbria',
            },
            {
                code: 'DEN',
                name: 'Denbighshire',
            },
            {
                code: 'DBY',
                name: 'Derbyshire',
            },
            {
                code: 'DEV',
                name: 'Devon',
            },
            {
                code: 'DOR',
                name: 'Dorset',
            },
            {
                code: 'EDU',
                name: 'Dumbartonshire',
            },
            {
                code: 'DGY',
                name: 'Dumfries and Galloway',
            },
            {
                code: 'DGN',
                name: 'Dungannon and South Tyrone',
            },
            {
                code: 'ELN',
                name: 'East Lothian',
            },
            {
                code: 'ESX',
                name: 'East Sussex',
            },
            {
                code: 'ERY',
                name: 'East Yorkshire',
            },
            {
                code: 'ESS',
                name: 'Essex',
            },
            {
                code: 'FMO',
                name: 'Fermanagh and Omagh',
            },
            {
                code: 'FIF',
                name: 'Fife',
            },
            {
                code: 'FLN',
                name: 'Flintshire',
            },
            {
                code: 'GLG',
                name: 'Glasgow',
            },
            {
                code: 'GLS',
                name: 'Gloucestershire',
            },
            {
                code: 'LND',
                name: 'Greater London',
            },
            {
                code: 'MAN',
                name: 'Greater Manchester',
            },
            {
                code: 'GSY',
                name: 'Guernsey',
            },
            {
                code: 'GWN',
                name: 'Gwynedd',
            },
            {
                code: 'HAM',
                name: 'Hampshire',
            },
            {
                code: 'HEF',
                name: 'Herefordshire',
            },
            {
                code: 'HRM',
                name: 'Herm',
            },
            {
                code: 'HRT',
                name: 'Hertfordshire',
            },
            {
                code: 'HLD',
                name: 'Highland',
            },
            {
                code: 'INV',
                name: 'Inverness-shire',
            },
            {
                code: 'AGY',
                name: 'Isle of Anglesey',
            },
            {
                code: 'IOM',
                name: 'Isle of Man',
            },
            {
                code: 'IOW',
                name: 'Isle of Wight',
            },
            {
                code: 'JSY',
                name: 'Jersey',
            },
            {
                code: 'KEN',
                name: 'Kent',
            },
            {
                code: 'KCD',
                name: 'Kincardineshire',
            },
            {
                code: 'KKD',
                name: 'Kirkcudbrightshire',
            },
            {
                code: 'LAN',
                name: 'Lancashire',
            },
            {
                code: 'LRN',
                name: 'Larne',
            },
            {
                code: 'LEC',
                name: 'Leicestershire',
            },
            {
                code: 'LMV',
                name: 'Limavady',
            },
            {
                code: 'LIN',
                name: 'Lincolnshire',
            },
            {
                code: 'LBC',
                name: 'Lisburn and Castlereagh',
            },
            {
                code: 'MFT',
                name: 'Magherafelt',
            },
            {
                code: 'MER',
                name: 'Merseyside',
            },
            {
                code: 'MTY',
                name: 'Merthyr Tydfil',
            },
            {
                code: 'MLN',
                name: 'Midlothian',
            },
            {
                code: 'MON',
                name: 'Monmouthshire',
            },
            {
                code: 'MRY',
                name: 'Morayshire',
            },
            {
                code: 'MYL',
                name: 'Moyle',
            },
            {
                code: 'NAI',
                name: 'Nairn',
            },
            {
                code: 'NTL',
                name: 'Neath Port Talbot',
            },
            {
                code: 'NWP',
                name: 'Newport',
            },
            {
                code: 'NMD',
                name: 'Newry, Mourne and Down',
            },
            {
                code: 'NFK',
                name: 'Norfolk',
            },
            {
                code: 'AND',
                name: 'North Down and Ards',
            },
            {
                code: 'NLK',
                name: 'North Lanarkshire',
            },
            {
                code: 'NYK',
                name: 'North Yorkshire',
            },
            {
                code: 'NTH',
                name: 'Northamptonshire',
            },
            {
                code: 'NBL',
                name: 'Northumberland',
            },
            {
                code: 'NTT',
                name: 'Nottinghamshire',
            },
            {
                code: 'OMA',
                name: 'Omagh',
            },
            {
                code: 'ORK',
                name: 'Orkney Islands',
            },
            {
                code: 'OXF',
                name: 'Oxfordshire',
            },
            {
                code: 'PEM',
                name: 'Pembrokeshire',
            },
            {
                code: 'PKN',
                name: 'Perth and Kinross',
            },
            {
                code: 'PER',
                name: 'Perthshire and Kinross',
            },
            {
                code: 'POW',
                name: 'Powys',
            },
            {
                code: 'RCC',
                name: 'Redcar and Cleveland',
            },
            {
                code: 'RFW',
                name: 'Renfrewshire',
            },
            {
                code: 'RCT',
                name: 'Rhondda Cynon Taff',
            },
            {
                code: 'RUT',
                name: 'Rutland',
            },
            {
                code: 'SRK',
                name: 'Sark',
            },
            {
                code: 'ZET',
                name: 'Shetland Islands',
            },
            {
                code: 'SHR',
                name: 'Shropshire',
            },
            {
                code: 'SOM',
                name: 'Somerset',
            },
            {
                code: 'SLK',
                name: 'South Lanarkshire',
            },
            {
                code: 'SYK',
                name: 'South Yorkshire',
            },
            {
                code: 'STS',
                name: 'Staffordshire',
            },
            {
                code: 'STG',
                name: 'Stirlingshire',
            },
            {
                code: 'STR',
                name: 'Strabane',
            },
            {
                code: 'SFK',
                name: 'Suffolk',
            },
            {
                code: 'SRY',
                name: 'Surrey',
            },
            {
                code: 'SSX',
                name: 'Sussex',
            },
            {
                code: 'SUT',
                name: 'Sutherland',
            },
            {
                code: 'SWA',
                name: 'Swansea',
            },
            {
                code: 'TOF',
                name: 'Torfaen',
            },
            {
                code: 'TWR',
                name: 'Tyne and Wear',
            },
            {
                code: 'VGL',
                name: 'Vale of Glamorgan',
            },
            {
                code: 'WAR',
                name: 'Warwickshire',
            },
            {
                code: 'WLN',
                name: 'West Lothian',
            },
            {
                code: 'WMD',
                name: 'West Midlands',
            },
            {
                code: 'WSX',
                name: 'West Sussex',
            },
            {
                code: 'WRY',
                name: 'West Yorkshire',
            },
            {
                code: 'ELS',
                name: 'Western Isles',
            },
            {
                code: 'WIL',
                name: 'Wiltshire',
            },
            {
                code: 'WOR',
                name: 'Worcestershire',
            },
            {
                code: 'WRX',
                name: 'Wrexham',
            },
        ],
    },
    {
        code: 'AF',
        id: 2185,
        name: 'Afghanistan',
        states: [
            {
                code: 'AF01',
                name: 'Badakhshan',
            },
            {
                code: 'AF02',
                name: 'Badghis',
            },
            {
                code: 'AF03',
                name: 'Baghlan',
            },
            {
                code: 'AF30',
                name: 'Balkh',
            },
            {
                code: 'AF05',
                name: 'Bamian',
            },
            {
                code: 'AF41',
                name: 'Daikondi',
            },
            {
                code: 'AF06',
                name: 'Farah',
            },
            {
                code: 'AF07',
                name: 'Faryab',
            },
            {
                code: 'AF08',
                name: 'Ghazni',
            },
            {
                code: 'AF09',
                name: 'Ghowr',
            },
            {
                code: 'AF10',
                name: 'Helmand',
            },
            {
                code: 'AF11',
                name: 'Herat',
            },
            {
                code: 'AF31',
                name: 'Jowzjan',
            },
            {
                code: 'AF13',
                name: 'Kabul',
            },
            {
                code: 'AF23',
                name: 'Kandahar',
            },
            {
                code: 'AF14',
                name: 'Kapisa',
            },
            {
                code: 'AF37',
                name: 'Khowst',
            },
            {
                code: 'AF34',
                name: 'Konar',
            },
            {
                code: 'AF24',
                name: 'Kondoz',
            },
            {
                code: 'AF35',
                name: 'Laghman',
            },
            {
                code: 'AF17',
                name: 'Lowgar',
            },
            {
                code: 'AF18',
                name: 'Nangarhar',
            },
            {
                code: 'AF19',
                name: 'Nimruz',
            },
            {
                code: 'AF38',
                name: 'Nurestan',
            },
            {
                code: 'AF39',
                name: 'Oruzgan',
            },
            {
                code: 'AF36',
                name: 'Paktia',
            },
            {
                code: 'AF29',
                name: 'Paktika',
            },
            {
                code: 'AF42',
                name: 'Panjshir',
            },
            {
                code: 'AF40',
                name: 'Parvan',
            },
            {
                code: 'AF32',
                name: 'Samangan',
            },
            {
                code: 'AF33',
                name: 'Sar-e Pol',
            },
            {
                code: 'AF26',
                name: 'Takhar',
            },
            {
                code: 'AF27',
                name: 'Vardak',
            },
            {
                code: 'AF28',
                name: 'Zabol',
            },
        ],
    },
    {
        code: 'AX',
        id: 2407,
        name: 'Åland Islands',
        states: [],
    },
    {
        code: 'AL',
        id: 2186,
        name: 'Albania',
        states: [],
    },
    {
        code: 'DZ',
        id: 2187,
        name: 'Algeria',
        states: [
            {
                code: 'DZ.AR',
                name: 'Adrar',
            },
            {
                code: 'DZ.AD',
                name: 'Aïn Defla',
            },
            {
                code: 'DZ.AT',
                name: 'Aïn Témouchent',
            },
            {
                code: 'DZ.AL',
                name: 'Algiers',
            },
            {
                code: 'DZ.AN',
                name: 'Annaba',
            },
            {
                code: 'DZ.BT',
                name: 'Batna',
            },
            {
                code: 'DZ.BC',
                name: 'Béchar',
            },
            {
                code: 'DZ.BJ',
                name: 'Béjaïa',
            },
            {
                code: 'DZ.BS',
                name: 'Biskra',
            },
            {
                code: 'DZ.BL',
                name: 'Blida',
            },
            {
                code: 'DZ.BB',
                name: 'Bordj Bou Arréridj',
            },
            {
                code: 'DZ.BU',
                name: 'Bouira',
            },
            {
                code: 'DZ.BM',
                name: 'Boumerdès',
            },
            {
                code: 'DZ.CH',
                name: 'Chlef',
            },
            {
                code: 'DZ.CO',
                name: 'Constantine',
            },
            {
                code: 'DZ.DJ',
                name: 'Djelfa',
            },
            {
                code: 'DZ.EB',
                name: 'El Bayadh',
            },
            {
                code: 'DZ.EO',
                name: 'El Oued',
            },
            {
                code: 'DZ.ET',
                name: 'El Tarf',
            },
            {
                code: 'DZ.GR',
                name: 'Ghardaïa',
            },
            {
                code: 'DZ.GL',
                name: 'Guelma',
            },
            {
                code: 'DZ.IL',
                name: 'Illizi',
            },
            {
                code: 'DZ.JJ',
                name: 'Jijel',
            },
            {
                code: 'DZ.KH',
                name: 'Khenchela',
            },
            {
                code: 'DZ.LG',
                name: 'Laghouat',
            },
            {
                code: 'DZ.MC',
                name: 'Mascara',
            },
            {
                code: 'DZ.MD',
                name: 'Médéa',
            },
            {
                code: 'DZ.ML',
                name: 'Mila',
            },
            {
                code: 'DZ.MG',
                name: 'Mostaganem',
            },
            {
                code: 'DZ.MS',
                name: 'Msila',
            },
            {
                code: 'DZ.NA',
                name: 'Naama',
            },
            {
                code: 'DZ.OR',
                name: 'Oran',
            },
            {
                code: 'DZ.OG',
                name: 'Ouargla',
            },
            {
                code: 'DZ.OB',
                name: 'Oum el Bouaghi',
            },
            {
                code: 'DZ.RE',
                name: 'Relizane',
            },
            {
                code: 'DZ.SD',
                name: 'Saïda',
            },
            {
                code: 'DZ.SF',
                name: 'Sétif',
            },
            {
                code: 'DZ.SB',
                name: 'Sidi Bel Abbès',
            },
            {
                code: 'DZ.SK',
                name: 'Skikda',
            },
            {
                code: 'DZ.SA',
                name: 'Souk Ahras',
            },
            {
                code: 'DZ.TM',
                name: 'Tamanrasset',
            },
            {
                code: 'DZ.TB',
                name: 'Tébessa',
            },
            {
                code: 'DZ.TR',
                name: 'Tiaret',
            },
            {
                code: 'DZ.TN',
                name: 'Tindouf',
            },
            {
                code: 'DZ.TP',
                name: 'Tipaza',
            },
            {
                code: 'DZ.TS',
                name: 'Tissemsilt',
            },
            {
                code: 'DZ.TO',
                name: 'Tizi Ouzou',
            },
            {
                code: 'DZ.TL',
                name: 'Tlemcen',
            },
        ],
    },
    {
        code: 'AS',
        id: 2408,
        name: 'American Samoa',
        states: [],
    },
    {
        code: 'AD',
        id: 2188,
        name: 'Andorra',
        states: [],
    },
    {
        code: 'AO',
        id: 2189,
        name: 'Angola',
        states: [
            {
                code: 'AO19',
                name: 'Bengo',
            },
            {
                code: 'AO01',
                name: 'Benguela',
            },
            {
                code: 'AO02',
                name: 'Bié',
            },
            {
                code: 'AO03',
                name: 'Cabinda',
            },
            {
                code: 'AO04',
                name: 'Cuando Cubango',
            },
            {
                code: 'AO05',
                name: 'Cuanza Norte',
            },
            {
                code: 'AO06',
                name: 'Cuanza Sul',
            },
            {
                code: 'AO07',
                name: 'Cunene',
            },
            {
                code: 'AO08',
                name: 'Huambo',
            },
            {
                code: 'AO09',
                name: 'Huíla',
            },
            {
                code: 'AO20',
                name: 'Luanda',
            },
            {
                code: 'AO17',
                name: 'Lunda Norte',
            },
            {
                code: 'AO18',
                name: 'Lunda Sul',
            },
            {
                code: 'AO12',
                name: 'Malanje',
            },
            {
                code: 'AO14',
                name: 'Moxico',
            },
            {
                code: 'AO13',
                name: 'Namibe',
            },
            {
                code: 'AO15',
                name: 'Uíge',
            },
            {
                code: 'AO16',
                name: 'Zaire',
            },
        ],
    },
    {
        code: 'AI',
        id: 2409,
        name: 'Anguilla',
        states: [],
    },
    {
        code: 'AQ',
        id: 2190,
        name: 'Antarctica',
        states: [],
    },
    {
        code: 'AG',
        id: 2191,
        name: 'Antigua and Barbuda',
        states: [],
    },
    {
        code: 'AR',
        id: 2192,
        name: 'Argentina',
        states: [
            {
                code: 'AR01',
                name: 'Buenos Aires',
            },
            {
                code: 'AR02',
                name: 'Catamarca',
            },
            {
                code: 'AR03',
                name: 'Chaco',
            },
            {
                code: 'AR04',
                name: 'Chubut',
            },
            {
                code: 'AR07',
                name: 'Ciudad de Buenos Aires',
            },
            {
                code: 'AR05',
                name: 'Córdoba',
            },
            {
                code: 'AR06',
                name: 'Corrientes',
            },
            {
                code: 'AR08',
                name: 'Entre Ríos',
            },
            {
                code: 'AR09',
                name: 'Formosa',
            },
            {
                code: 'AR10',
                name: 'Jujuy',
            },
            {
                code: 'AR11',
                name: 'La Pampa',
            },
            {
                code: 'AR12',
                name: 'La Rioja',
            },
            {
                code: 'AR13',
                name: 'Mendoza',
            },
            {
                code: 'AR14',
                name: 'Misiones',
            },
            {
                code: 'AR15',
                name: 'Neuquén',
            },
            {
                code: 'AR16',
                name: 'Río Negro',
            },
            {
                code: 'AR17',
                name: 'Salta',
            },
            {
                code: 'AR18',
                name: 'San Juan',
            },
            {
                code: 'AR19',
                name: 'San Luis',
            },
            {
                code: 'AR20',
                name: 'Santa Cruz',
            },
            {
                code: 'AR21',
                name: 'Santa Fe',
            },
            {
                code: 'AR22',
                name: 'Santiago del Estero',
            },
            {
                code: 'AR23',
                name: 'Tierra del Fuego',
            },
            {
                code: 'AR24',
                name: 'Tucumán',
            },
        ],
    },
    {
        code: 'AM',
        id: 2193,
        name: 'Armenia',
        states: [],
    },
    {
        code: 'AB',
        id: 2373,
        name: 'Aruba',
        states: [
            {
                code: 'AW.AA',
                name: 'Aruba',
            },
        ],
    },
    {
        code: 'AU',
        id: 2194,
        name: 'Australia',
        states: [
            {
                code: 'ACT',
                name: 'Australian Capital Territory',
            },
            {
                code: 'NSW',
                name: 'New South Wales',
            },
            {
                code: 'NT',
                name: 'Northern Territory',
            },
            {
                code: 'QLD',
                name: 'Queensland',
            },
            {
                code: 'SA',
                name: 'South Australia',
            },
            {
                code: 'TAS',
                name: 'Tasmania',
            },
            {
                code: 'VIC',
                name: 'Victoria',
            },
            {
                code: 'WA',
                name: 'Western Australia',
            },
        ],
    },
    {
        code: 'AT',
        id: 2195,
        name: 'Austria',
        states: [
            {
                code: 'AU01',
                name: 'Burgenland',
            },
            {
                code: 'AU02',
                name: 'Carinthia',
            },
            {
                code: 'AU03',
                name: 'Lower Austria',
            },
            {
                code: 'AU05',
                name: 'Salzburg',
            },
            {
                code: 'AU06',
                name: 'Styria',
            },
            {
                code: 'AU07',
                name: 'Tyrol',
            },
            {
                code: 'AU04',
                name: 'Upper Austria',
            },
            {
                code: 'AU09',
                name: 'Vienna',
            },
            {
                code: 'AU08',
                name: 'Vorarlberg',
            },
        ],
    },
    {
        code: 'AZ',
        id: 2196,
        name: 'Azerbaijan',
        states: [
            {
                code: 'AZ-ABS',
                name: 'Absheron',
            },
            {
                code: 'AZ-AGM',
                name: 'Aghdam',
            },
            {
                code: 'AZ-AGS',
                name: 'Aghdash',
            },
            {
                code: 'AZ-AGC',
                name: 'Aghjabedi',
            },
            {
                code: 'AZ-AGA',
                name: 'Aghstafa',
            },
            {
                code: 'AZ-AGU',
                name: 'Aghsu',
            },
            {
                code: 'AZ-AB',
                name: 'Ali-Bairamly',
            },
            {
                code: 'AZ-AST',
                name: 'Astara',
            },
            {
                code: 'AZ-BAB',
                name: 'Babek',
            },
            {
                code: 'AZ-BA',
                name: 'Baku',
            },
            {
                code: 'AZ-BAL',
                name: 'Balaken',
            },
            {
                code: 'AZ-BAR',
                name: 'Barda',
            },
            {
                code: 'AZ-BEY',
                name: 'Beilagan',
            },
            {
                code: 'AZ-BIL',
                name: 'Bilasuvar',
            },
            {
                code: 'AZ-DAS',
                name: 'Dashkesan',
            },
            {
                code: 'AZ-DAV',
                name: 'Devechi',
            },
            {
                code: 'AZ-FUZ',
                name: 'Fizuli',
            },
            {
                code: 'AZ-QAB',
                name: 'Gabala',
            },
            {
                code: 'AZ-GAD',
                name: 'Gadabey',
            },
            {
                code: 'AZ-QAX',
                name: 'Gakh',
            },
            {
                code: 'AZ-GA',
                name: 'Ganja',
            },
            {
                code: 'AZ-QAZ',
                name: 'Gazakh',
            },
            {
                code: 'AZ-GOR',
                name: 'Geranboy',
            },
            {
                code: 'AZ-QOB',
                name: 'Gobustan',
            },
            {
                code: 'AZ-GOY',
                name: 'Goychay',
            },
            {
                code: 'AZ-QBA',
                name: 'Guba',
            },
            {
                code: 'AZ-QBI',
                name: 'Gubadly',
            },
            {
                code: 'AZ-QUS',
                name: 'Gusar',
            },
            {
                code: 'AZ-HAC',
                name: 'Hacuqabul',
            },
            {
                code: 'AZ-IMI',
                name: 'Imishli',
            },
            {
                code: 'AZ-ISM',
                name: 'Ismailly',
            },
            {
                code: 'AZ-CAL',
                name: 'Jalilabad',
            },
            {
                code: 'AZ-CAB',
                name: 'Jebrail',
            },
            {
                code: 'AZ-CUL',
                name: 'Julfa',
            },
            {
                code: 'AZ-KAL',
                name: 'Kelbajar',
            },
            {
                code: 'AZ-XAC',
                name: 'Khachmaz',
            },
            {
                code: 'AZ-XA',
                name: 'Khankendy',
            },
            {
                code: 'AZ-XAN',
                name: 'Khanlar',
            },
            {
                code: 'AZ-XCI',
                name: 'Khojaly',
            },
            {
                code: 'AZ-XVD',
                name: 'Khojavend',
            },
            {
                code: 'AZ-XIZ',
                name: 'Khyzy',
            },
            {
                code: 'AZ-KUR',
                name: 'Kyurdamir',
            },
            {
                code: 'AZ-LAC',
                name: 'Lachin',
            },
            {
                code: 'AZ-LAN',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LA',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LER',
                name: 'Lerik',
            },
            {
                code: 'AZ-MAS',
                name: 'Masally',
            },
            {
                code: 'AZ-MI',
                name: 'Mingechevir',
            },
            {
                code: 'AZ-NA',
                name: 'Naftalan',
            },
            {
                code: 'AZ-NX',
                name: 'Nakhchivan',
            },
            {
                code: 'AZ-NEF',
                name: 'Neftchala',
            },
            {
                code: 'AZ-OGU',
                name: 'Oghuz',
            },
            {
                code: 'AZ-ORD',
                name: 'Ordubad',
            },
            {
                code: 'AZ-SAT',
                name: 'Saatly',
            },
            {
                code: 'AZ-SAB',
                name: 'Sabirabad',
            },
            {
                code: 'AZ-SAL',
                name: 'Salyan',
            },
            {
                code: 'AZ-SMX',
                name: 'Samuh',
            },
            {
                code: 'AZ-SAD',
                name: 'Sedarak',
            },
            {
                code: 'AZ-SAH',
                name: 'Shahbuz',
            },
            {
                code: 'AZ-SMI',
                name: 'Shamakhy',
            },
            {
                code: 'AZ-SKR',
                name: 'Shamkir',
            },
            {
                code: 'AZ-SAK',
                name: 'Sheki',
            },
            {
                code: 'AZ-SA',
                name: 'Sheki',
            },
            {
                code: 'AZ-SAR',
                name: 'Sherur',
            },
            {
                code: 'AZ-SS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SUS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SIY',
                name: 'Siazan',
            },
            {
                code: 'AZ-SM',
                name: 'Sumgayit',
            },
            {
                code: 'AZ-TAR',
                name: 'Terter',
            },
            {
                code: 'AZ-TOV',
                name: 'Tovuz',
            },
            {
                code: 'AZ-UCA',
                name: 'Ujar',
            },
            {
                code: 'AZ-YAR',
                name: 'Yardymly',
            },
            {
                code: 'AZ-YE',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-YEV',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-ZAQ',
                name: 'Zagatala',
            },
            {
                code: 'AZ-ZAN',
                name: 'Zangilan',
            },
            {
                code: 'AZ-ZAR',
                name: 'Zerdab',
            },
        ],
    },
    {
        code: 'BS',
        id: 2197,
        name: 'Bahamas',
        states: [
            {
                code: 'BF24',
                name: 'Acklins',
            },
            {
                code: 'BF32',
                name: 'Berry Islands',
            },
            {
                code: 'BF05',
                name: 'Bimini',
            },
            {
                code: 'BF36',
                name: 'Black Point',
            },
            {
                code: 'BF06',
                name: 'Cat Island',
            },
            {
                code: 'BF37',
                name: 'Central Abaco',
            },
            {
                code: 'BF38',
                name: 'Central Andros',
            },
            {
                code: 'BF39',
                name: 'Central Eleuthera',
            },
            {
                code: 'BF25',
                name: 'City of Freeport',
            },
            {
                code: 'BF40',
                name: 'Crooked Island',
            },
            {
                code: 'BF41',
                name: 'East Grand Bahama',
            },
            {
                code: 'BF10',
                name: 'Exuma',
            },
            {
                code: 'BF42',
                name: 'Grand Cay',
            },
            {
                code: 'BS.GT\t',
                name: 'Green Turtle Cay',
            },
            {
                code: 'BF22',
                name: 'Harbour Island',
            },
            {
                code: 'BF43',
                name: 'Hope Town',
            },
            {
                code: 'BF13',
                name: 'Inagua',
            },
            {
                code: 'BF15',
                name: 'Long Island',
            },
            {
                code: 'BF44',
                name: 'Mangrove Cay',
            },
            {
                code: 'BF16',
                name: 'Mayaguana',
            },
            {
                code: 'BF45',
                name: "Moore's Island",
            },
            {
                code: 'BS.NW',
                name: 'New Providence',
            },
            {
                code: 'BF46',
                name: 'North Abaco',
            },
            {
                code: 'BF47',
                name: 'North Andros',
            },
            {
                code: 'BF48',
                name: 'North Eleuthera',
            },
            {
                code: 'BF18',
                name: 'Ragged Island',
            },
            {
                code: 'BF49',
                name: 'Rum Cay',
            },
            {
                code: 'BF35',
                name: 'San Salvador',
            },
            {
                code: 'BF50',
                name: 'South Abaco',
            },
            {
                code: 'BF51',
                name: 'South Andros',
            },
            {
                code: 'BF52',
                name: 'South Eleuthera',
            },
            {
                code: 'BF53',
                name: 'Spanish Wells',
            },
            {
                code: 'BF54',
                name: 'West Grand Bahama',
            },
        ],
    },
    {
        code: 'BH',
        id: 2198,
        name: 'Bahrain',
        states: [
            {
                code: 'BA16',
                name: 'Capital',
            },
            {
                code: 'BA19',
                name: 'Central',
            },
            {
                code: 'BA15',
                name: 'Muharraq',
            },
            {
                code: 'BA18',
                name: 'Northern',
            },
            {
                code: 'BA17',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'BD',
        id: 2199,
        name: 'Bangladesh',
        states: [
            {
                code: 'BG85',
                name: 'Barisal',
            },
            {
                code: 'BG84',
                name: 'Chittagong',
            },
            {
                code: 'BG81',
                name: 'Dhaka',
            },
            {
                code: 'BG82',
                name: 'Khulna',
            },
            {
                code: 'BG81',
                name: 'Mymensingh',
            },
            {
                code: 'BG83',
                name: 'Rajshahi',
            },
            {
                code: 'BG87',
                name: 'Rangpur',
            },
            {
                code: 'BG86',
                name: 'Sylhet',
            },
        ],
    },
    {
        code: 'BB',
        id: 2200,
        name: 'Barbados',
        states: [
            {
                code: 'BB01',
                name: 'Christ Church',
            },
            {
                code: 'BB02',
                name: 'Saint Andrew',
            },
            {
                code: 'BB03',
                name: 'Saint George',
            },
            {
                code: 'BB04',
                name: 'Saint James',
            },
            {
                code: 'BB05',
                name: 'Saint John',
            },
            {
                code: 'BB06',
                name: 'Saint Joseph',
            },
            {
                code: 'BB07',
                name: 'Saint Lucy',
            },
            {
                code: 'BB08',
                name: 'Saint Michael',
            },
            {
                code: 'BB09',
                name: 'Saint Peter',
            },
            {
                code: 'BB10',
                name: 'Saint Philip',
            },
            {
                code: 'BB11',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'BY',
        id: 2201,
        name: 'Belarus',
        states: [
            {
                code: 'BO01',
                name: 'Brest',
            },
            {
                code: 'BO02',
                name: 'Gomel',
            },
            {
                code: 'BO03',
                name: 'Grodno',
            },
            {
                code: 'BO05',
                name: 'Minsk',
            },
            {
                code: 'BO04',
                name: 'Minsk City',
            },
            {
                code: 'BO06',
                name: 'Mogilev',
            },
            {
                code: 'BO07',
                name: 'Vitebsk',
            },
        ],
    },
    {
        code: 'BE',
        id: 2202,
        name: 'Belgium',
        states: [
            {
                code: 'BE01',
                name: 'Antwerpen Province',
            },
            {
                code: 'BE11',
                name: 'Brussels-Capital Region',
            },
            {
                code: 'BE12',
                name: 'Flemish Brabant Province',
            },
            {
                code: 'BE03',
                name: 'Hainaut Province',
            },
            {
                code: 'BE04',
                name: 'Liege Province',
            },
            {
                code: 'BE05',
                name: 'Limburg Province',
            },
            {
                code: 'BE06',
                name: 'Luxembourg Province',
            },
            {
                code: 'BE07',
                name: 'Namur Province',
            },
            {
                code: 'BE08',
                name: 'Oost-Vlaanderen Province',
            },
            {
                code: 'BE10',
                name: 'Walloon Brabant Province',
            },
            {
                code: 'BE09',
                name: 'West-Vlaanderen Province',
            },
        ],
    },
    {
        code: 'BZ',
        id: 2203,
        name: 'Belize',
        states: [],
    },
    {
        code: 'BJ',
        id: 2204,
        name: 'Benin',
        states: [
            {
                code: 'BN07',
                name: 'Alibori',
            },
            {
                code: 'BN08',
                name: 'Atacora',
            },
            {
                code: 'BN09',
                name: 'Atlantique',
            },
            {
                code: 'BN10',
                name: 'Borgou',
            },
            {
                code: 'BN11',
                name: 'Collines',
            },
            {
                code: 'BN12',
                name: 'Couffo',
            },
            {
                code: 'BN13',
                name: 'Donga',
            },
            {
                code: 'BN14',
                name: 'Littoral',
            },
            {
                code: 'BN15',
                name: 'Mono',
            },
            {
                code: 'BN16',
                name: 'Ouémé',
            },
            {
                code: 'BN17',
                name: 'Plateau',
            },
            {
                code: 'BN18',
                name: 'Zou',
            },
        ],
    },
    {
        code: 'BU',
        id: 2372,
        name: 'Bermuda',
        states: [
            {
                code: 'BM.BD',
                name: 'Bermuda',
            },
            {
                code: 'BD01',
                name: 'Devonshire',
            },
            {
                code: 'BD03',
                name: 'Hamilton municipality',
            },
            {
                code: 'BD02',
                name: 'Hamilton',
            },
            {
                code: 'BD04',
                name: 'Paget',
            },
            {
                code: 'BD05',
                name: 'Pembroke',
            },
            {
                code: 'BD06',
                name: 'Saint George municipality',
            },
            {
                code: 'BD07',
                name: "Saint George's",
            },
            {
                code: 'BD08',
                name: 'Sandys',
            },
            {
                code: 'BD09',
                name: 'Smiths',
            },
            {
                code: 'BD10',
                name: 'Southampton',
            },
            {
                code: 'BD11',
                name: 'Warwick',
            },
        ],
    },
    {
        code: 'BT',
        id: 2205,
        name: 'Bhutan',
        states: [],
    },
    {
        code: 'BO',
        id: 2206,
        name: 'Bolivia; Plurinational State',
        states: [
            {
                code: 'BL01',
                name: 'Chuquisaca',
            },
            {
                code: 'BL02',
                name: 'Cochabamba',
            },
            {
                code: 'BL03',
                name: 'El Beni',
            },
            {
                code: 'BL04',
                name: 'La Paz',
            },
            {
                code: 'BL05',
                name: 'Oruro',
            },
            {
                code: 'BL06',
                name: 'Pando',
            },
            {
                code: 'BL07',
                name: 'Potosí',
            },
            {
                code: 'BL08',
                name: 'Santa Cruz',
            },
            {
                code: 'BL09',
                name: 'Tarija',
            },
        ],
    },
    {
        code: 'BQ',
        id: 2449,
        name: 'Bonaire',
        states: [
            {
                code: 'BQ.BO',
                name: 'Bonaire',
            },
            {
                code: 'BQ.SB',
                name: 'Saba',
            },
            {
                code: 'BQ.SE',
                name: 'Sint Eustatius',
            },
        ],
    },
    {
        code: 'BA',
        id: 2207,
        name: 'Bosnia and Herzegovina',
        states: [
            {
                code: 'BA-05',
                name: 'Bosansko-podrinjski kanton',
            },
            {
                code: 'BA-BRC',
                name: 'Brcko distrikt',
            },
            {
                code: 'BA-BIH',
                name: 'Federacija Bosna i Hercegovina',
            },
            {
                code: 'BA-07',
                name: 'Hercegovacko-neretvanski kanton',
            },
            {
                code: 'BA-09',
                name: 'Kanton Sarajevo',
            },
            {
                code: 'BA-10',
                name: 'Livanjski kanton',
            },
            {
                code: 'BA-02',
                name: 'Posavski kanton',
            },
            {
                code: 'BA-SRP',
                name: 'Republika Srpska',
            },
            {
                code: 'BA-06',
                name: 'Srednjobosanski kanton',
            },
            {
                code: 'BA-03',
                name: 'Tuzlanski kanton',
            },
            {
                code: 'BA-01',
                name: 'Unsko-sanski kanton',
            },
            {
                code: 'BA-08',
                name: 'Zapadnohercegovacki kanton',
            },
            {
                code: 'BA-04',
                name: 'Zenicko-dobojski kanton',
            },
        ],
    },
    {
        code: 'BW',
        id: 2208,
        name: 'Botswana',
        states: [
            {
                code: 'BC01',
                name: 'Central',
            },
            {
                code: 'BC12',
                name: 'Chobe',
            },
            {
                code: 'BC13',
                name: 'Francistown',
            },
            {
                code: 'BC14',
                name: 'Gaborone',
            },
            {
                code: 'BC03',
                name: 'Ghanzi',
            },
            {
                code: 'BC15',
                name: 'Jwaneng',
            },
            {
                code: 'BC04',
                name: 'Kgalagadi',
            },
            {
                code: 'BC05',
                name: 'Kgatleng',
            },
            {
                code: 'BC06',
                name: 'Kweneng',
            },
            {
                code: 'BC16',
                name: 'Lobatse',
            },
            {
                code: 'BC08',
                name: 'North-East',
            },
            {
                code: 'BC11',
                name: 'North-West',
            },
            {
                code: 'BC17',
                name: 'Selibe Phikwe',
            },
            {
                code: 'BC09',
                name: 'South East',
            },
            {
                code: 'BC10',
                name: 'Southern',
            },
            {
                code: 'BC18',
                name: 'Sowa Town',
            },
        ],
    },
    {
        code: 'BV',
        id: 2410,
        name: 'Bouvet Island',
        states: [],
    },
    {
        code: 'BR',
        id: 2209,
        name: 'Brazil',
        states: [
            {
                code: 'AC',
                name: 'Acre',
            },
            {
                code: 'AL',
                name: 'Alagoas',
            },
            {
                code: 'AP',
                name: 'Amapá',
            },
            {
                code: 'AM',
                name: 'Amazonas',
            },
            {
                code: 'BA',
                name: 'Bahia',
            },
            {
                code: 'CE',
                name: 'Ceará',
            },
            {
                code: 'DF',
                name: 'Distrito Federal',
            },
            {
                code: 'ES',
                name: 'Espírito Santo',
            },
            {
                code: 'GO',
                name: 'Goiás',
            },
            {
                code: 'MA',
                name: 'Maranhão',
            },
            {
                code: 'MT',
                name: 'Mato Grosso',
            },
            {
                code: 'MS',
                name: 'Mato Grosso do Sul',
            },
            {
                code: 'MG',
                name: 'Minas Gerais',
            },
            {
                code: 'PA',
                name: 'Pará',
            },
            {
                code: 'PR',
                name: 'Paraná',
            },
            {
                code: 'PB',
                name: 'Paraíba',
            },
            {
                code: 'PE',
                name: 'Pernambuco',
            },
            {
                code: 'PI',
                name: 'Piauí',
            },
            {
                code: 'RN',
                name: 'Rio Grande do Norte',
            },
            {
                code: 'RS',
                name: 'Rio Grande do Sul',
            },
            {
                code: 'RJ',
                name: 'Rio de Janeiro',
            },
            {
                code: 'RO',
                name: 'Rondônia',
            },
            {
                code: 'RR',
                name: 'Roraima',
            },
            {
                code: 'SC',
                name: 'Santa Catarina',
            },
            {
                code: 'SP',
                name: 'São Paulo',
            },
            {
                code: 'SE',
                name: 'Sergipe',
            },
            {
                code: 'TO',
                name: 'Tocantins',
            },
        ],
    },
    {
        code: 'IO',
        id: 2411,
        name: 'British Indian Ocean Territory',
        states: [],
    },
    {
        code: 'BN',
        id: 2210,
        name: 'Brunei Darussalam',
        states: [
            {
                code: 'BX01',
                name: 'Amo',
            },
            {
                code: 'BX02',
                name: 'Bandar Seri Begawan',
            },
            {
                code: 'BX03',
                name: 'Bangar',
            },
            {
                code: 'BX04',
                name: 'Batu Apoi',
            },
            {
                code: 'BX05',
                name: 'Berakas',
            },
            {
                code: 'BX06',
                name: 'Bokok',
            },
            {
                code: 'BX07',
                name: 'Bukit Sawat',
            },
            {
                code: 'BX08',
                name: 'Burong Pinggai Ayer',
            },
            {
                code: 'BX09',
                name: 'Gadong',
            },
            {
                code: 'BX10',
                name: 'Keriam',
            },
            {
                code: 'BX11',
                name: 'Kianggeh',
            },
            {
                code: 'BX12',
                name: 'Kilanas',
            },
            {
                code: 'BX13',
                name: 'Kiudang',
            },
            {
                code: 'BX14',
                name: 'Kota Batu',
            },
            {
                code: 'BX15',
                name: 'Kuala Balai',
            },
            {
                code: 'BX16',
                name: 'Kuala Belait',
            },
            {
                code: 'BX17',
                name: 'Labi',
            },
            {
                code: 'BX18',
                name: 'Labu',
            },
            {
                code: 'BX19',
                name: 'Lamunin',
            },
            {
                code: 'BX20',
                name: 'Liang',
            },
            {
                code: 'BX21',
                name: 'Lumapas',
            },
            {
                code: 'BX22',
                name: 'Melilas',
            },
            {
                code: 'BX23',
                name: 'Mentiri',
            },
            {
                code: 'BX24',
                name: 'Pekan Tutong',
            },
            {
                code: 'BX25',
                name: 'Pengkalan Batu',
            },
            {
                code: 'BX26',
                name: 'Peramu',
            },
            {
                code: 'BX27',
                name: 'Rambai',
            },
            {
                code: 'BX28',
                name: 'Saba',
            },
            {
                code: 'BX29',
                name: 'Sengkurong',
            },
            {
                code: 'BX30',
                name: 'Serasa',
            },
            {
                code: 'BX31',
                name: 'Seria',
            },
            {
                code: 'BX32',
                name: 'Sukang',
            },
            {
                code: 'BX33',
                name: 'Sungai Kebun',
            },
            {
                code: 'BX34',
                name: 'Sungai Kedayan',
            },
            {
                code: 'BX35',
                name: 'Tamoi',
            },
            {
                code: 'BX36',
                name: 'Tanjong Maya',
            },
            {
                code: 'BX37',
                name: 'Telisai',
            },
            {
                code: 'BX38',
                name: 'Ukong',
            },
        ],
    },
    {
        code: 'BG',
        id: 2211,
        name: 'Bulgaria',
        states: [
            {
                code: 'BU38',
                name: 'Blagoevgrad',
            },
            {
                code: 'BU39',
                name: 'Burgas',
            },
            {
                code: 'BU40',
                name: 'Dobrich',
            },
            {
                code: 'BU41',
                name: 'Gabrovo',
            },
            {
                code: 'BU42',
                name: 'Grad Sofiya',
            },
            {
                code: 'BU43',
                name: 'Khaskovo',
            },
            {
                code: 'BU44',
                name: 'Kurdzhali',
            },
            {
                code: 'BU45',
                name: 'Kyustendil',
            },
            {
                code: 'BU46',
                name: 'Lovech',
            },
            {
                code: 'BU47',
                name: 'Montana',
            },
            {
                code: 'BU48',
                name: 'Pazardzhik',
            },
            {
                code: 'BU49',
                name: 'Pernik',
            },
            {
                code: 'BU50',
                name: 'Pleven',
            },
            {
                code: 'BU51',
                name: 'Plovdiv',
            },
            {
                code: 'BU52',
                name: 'Razgrad',
            },
            {
                code: 'BU53',
                name: 'Ruse',
            },
            {
                code: 'BU54',
                name: 'Shumen',
            },
            {
                code: 'BU55',
                name: 'Silistra',
            },
            {
                code: 'BU56',
                name: 'Sliven',
            },
            {
                code: 'BU57',
                name: 'Smolyan',
            },
            {
                code: 'BU58',
                name: 'Sofiya',
            },
            {
                code: 'BU59',
                name: 'Stara Zagora',
            },
            {
                code: 'BU60',
                name: 'Turgovishte',
            },
            {
                code: 'BU61',
                name: 'Varna',
            },
            {
                code: 'BU62',
                name: 'Veliko Turnovo',
            },
            {
                code: 'BU63',
                name: 'Vidin',
            },
            {
                code: 'BU64',
                name: 'Vratsa',
            },
            {
                code: 'BU65',
                name: 'Yambol',
            },
        ],
    },
    {
        code: 'BF',
        id: 2212,
        name: 'Burkina Faso',
        states: [
            {
                code: 'UV79',
                name: 'Boucle du Mouhoun',
            },
            {
                code: 'UV80',
                name: 'Cascades',
            },
            {
                code: 'UV82',
                name: 'Centre Est',
            },
            {
                code: 'UV83',
                name: 'Centre Nord',
            },
            {
                code: 'UV84',
                name: 'Centre Ouest',
            },
            {
                code: 'UV81',
                name: 'Centre',
            },
            {
                code: 'UV85',
                name: 'Centre Sud',
            },
            {
                code: 'UV86',
                name: 'Est',
            },
            {
                code: 'UV87',
                name: 'Hauts Bassins',
            },
            {
                code: 'UV88',
                name: 'Nord',
            },
            {
                code: 'UV89',
                name: 'Plateau Central',
            },
            {
                code: 'UV90',
                name: 'Sahel',
            },
            {
                code: 'UV91',
                name: 'Sud-Ouest',
            },
        ],
    },
    {
        code: 'BM',
        id: 2385,
        name: 'Burma',
        states: [
            {
                code: 'BM03',
                name: 'Ayeyarwady',
            },
            {
                code: 'BM16',
                name: 'Bago',
            },
            {
                code: 'BM02',
                name: 'Chin',
            },
            {
                code: 'BM04',
                name: 'Kachin',
            },
            {
                code: 'BM06',
                name: 'Kayah',
            },
            {
                code: 'BM05',
                name: 'Kayin',
            },
            {
                code: 'BM15',
                name: 'Magway',
            },
            {
                code: 'BM08',
                name: 'Mandalay',
            },
            {
                code: 'BM13',
                name: 'Mon',
            },
            {
                code: 'BM18',
                name: 'Naypyidaw',
            },
            {
                code: 'BM01',
                name: 'Rakhine',
            },
            {
                code: 'BM10',
                name: 'Sagaing',
            },
            {
                code: 'BM11',
                name: 'Shan',
            },
            {
                code: 'BM12',
                name: 'Tanintharyi',
            },
            {
                code: 'BM17',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'BI',
        id: 2213,
        name: 'Burundi',
        states: [],
    },
    {
        code: 'KH',
        id: 2214,
        name: 'Cambodia',
        states: [
            {
                code: 'CB25',
                name: 'Bântéay Méanchey',
            },
            {
                code: 'CB29',
                name: 'Batdâmbâng',
            },
            {
                code: 'CB02',
                name: 'Kâmpóng Cham',
            },
            {
                code: 'CB03',
                name: 'Kâmpóng Chhnang',
            },
            {
                code: 'CB04',
                name: 'Kâmpóng Spœ',
            },
            {
                code: 'CB05',
                name: 'Kâmpóng Thum',
            },
            {
                code: 'CB21',
                name: 'Kâmpôt',
            },
            {
                code: 'CB07',
                name: 'Kândal',
            },
            {
                code: 'CB08',
                name: 'Kaôh Kong',
            },
            {
                code: 'CB09',
                name: 'Krâchéh',
            },
            {
                code: 'CB26',
                name: 'Krong Keb',
            },
            {
                code: 'CB30',
                name: 'Krong Pailin',
            },
            {
                code: 'CB28',
                name: 'Krong Preah Sihanouk',
            },
            {
                code: 'CB10',
                name: 'Môndól Kiri',
            },
            {
                code: 'CB27',
                name: 'Otdâr Méanchey',
            },
            {
                code: 'CB22',
                name: 'Phnom Penh',
            },
            {
                code: 'CB12',
                name: 'Pouthisat',
            },
            {
                code: 'CB13',
                name: 'Preah Vihéar',
            },
            {
                code: 'CB14',
                name: 'Prey Vêng',
            },
            {
                code: 'CB23',
                name: 'Rôtânôkiri',
            },
            {
                code: 'CB24',
                name: 'Siemréab',
            },
            {
                code: 'CB17',
                name: 'Stœ?ng Trêng',
            },
            {
                code: 'CB18',
                name: 'Svay Rieng',
            },
            {
                code: 'CB19',
                name: 'Takêv',
            },
            {
                code: 'CB31',
                name: 'Tbong Khmum',
            },
        ],
    },
    {
        code: 'CM',
        id: 2215,
        name: 'Cameroon',
        states: [
            {
                code: 'CM10',
                name: 'Adamaoua',
            },
            {
                code: 'CM11',
                name: 'Centre',
            },
            {
                code: 'CM04',
                name: 'Est',
            },
            {
                code: 'CM12',
                name: 'Extrême-Nord',
            },
            {
                code: 'CM05',
                name: 'Littoral',
            },
            {
                code: 'CM07',
                name: 'Nord-Ouest',
            },
            {
                code: 'CM13',
                name: 'Nord',
            },
            {
                code: 'CM08',
                name: 'Ouest',
            },
            {
                code: 'CM09',
                name: 'Sud-Ouest',
            },
            {
                code: 'CM14',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'CA',
        id: 2216,
        name: 'Canada',
        states: [
            {
                code: 'AB',
                name: 'Alberta',
            },
            {
                code: 'BC',
                name: 'British Columbia',
            },
            {
                code: 'MB',
                name: 'Manitoba',
            },
            {
                code: 'NB',
                name: 'New Brunswick',
            },
            {
                code: 'NL',
                name: 'Newfoundland and Labrador',
            },
            {
                code: 'NT',
                name: 'Northwest Territories',
            },
            {
                code: 'NS',
                name: 'Nova Scotia',
            },
            {
                code: 'NU',
                name: 'Nunavut',
            },
            {
                code: 'ON',
                name: 'Ontario',
            },
            {
                code: 'PE',
                name: 'Prince Edward Island',
            },
            {
                code: 'QC',
                name: 'Quebec',
            },
            {
                code: 'SK',
                name: 'Saskatchewan',
            },
            {
                code: 'YT',
                name: 'Yukon',
            },
        ],
    },
    {
        code: 'CV',
        id: 2217,
        name: 'Cape Verde',
        states: [],
    },
    {
        code: 'KY',
        id: 2379,
        name: 'Cayman Islands',
        states: [
            {
                code: 'KY.BT',
                name: 'Bodden Town',
            },
            {
                code: 'KY.CJ',
                name: 'Cayman Islands',
            },
            {
                code: 'KY.EE',
                name: 'East End',
            },
            {
                code: 'KY.GT',
                name: 'George Town',
            },
            {
                code: 'KY.NS',
                name: 'North Side',
            },
            {
                code: 'KY.SI',
                name: 'Sister Islands',
            },
            {
                code: 'KY.WB',
                name: 'West Bay',
            },
        ],
    },
    {
        code: 'CF',
        id: 2218,
        name: 'Central African Republic',
        states: [
            {
                code: 'CT01',
                name: 'Bamingui-Bangoran',
            },
            {
                code: 'CT18',
                name: 'Bangui',
            },
            {
                code: 'CT02',
                name: 'Basse-Kotto',
            },
            {
                code: 'CT05',
                name: 'Haut-Mbomou',
            },
            {
                code: 'CT03',
                name: 'Haute-Kotto',
            },
            {
                code: 'CT06',
                name: 'Kémo',
            },
            {
                code: 'CT07',
                name: 'Lobaye',
            },
            {
                code: 'CT04',
                name: 'Mambéré-Kadéï',
            },
            {
                code: 'CT08',
                name: 'Mbomou',
            },
            {
                code: 'CT15',
                name: 'Nana-Grébizi',
            },
            {
                code: 'CT09',
                name: 'Nana-Mambéré',
            },
            {
                code: 'CT17',
                name: "Ombella-M'Poko",
            },
            {
                code: 'CT11',
                name: 'Ouaka',
            },
            {
                code: 'CT12',
                name: 'Ouham',
            },
            {
                code: 'CT13',
                name: 'Ouham-Pendé',
            },
            {
                code: 'CT16',
                name: 'Sangha-Mbaéré',
            },
            {
                code: 'CT14',
                name: 'Vakaga',
            },
        ],
    },
    {
        code: 'TD',
        id: 2219,
        name: 'Chad',
        states: [
            {
                code: 'CD22',
                name: 'Barh el Ghazel',
            },
            {
                code: 'CD01',
                name: 'Batha',
            },
            {
                code: 'CD23',
                name: 'Borkou',
            },
            {
                code: 'CD15',
                name: 'Chari-Baguirmi',
            },
            {
                code: 'CD27',
                name: 'Ennedi Est',
            },
            {
                code: 'CD28',
                name: 'Ennedi Ouest',
            },
            {
                code: 'CD05',
                name: 'Guéra',
            },
            {
                code: 'CD18',
                name: 'Hadjer-Lamis',
            },
            {
                code: 'CD06',
                name: 'Kanem',
            },
            {
                code: 'CD07',
                name: 'Lac',
            },
            {
                code: 'CD08',
                name: 'Logone Occidental',
            },
            {
                code: 'CD09',
                name: 'Logone Oriental',
            },
            {
                code: 'CD19',
                name: 'Mandoul',
            },
            {
                code: 'CD16',
                name: 'Mayo-Kebbi Est',
            },
            {
                code: 'CD20',
                name: 'Mayo-Kebbi Ouest',
            },
            {
                code: 'CD17',
                name: 'Moyen-Chari',
            },
            {
                code: 'CD12',
                name: 'Ouaddaï',
            },
            {
                code: 'CD13',
                name: 'Salamat',
            },
            {
                code: 'CD25',
                name: 'Sila',
            },
            {
                code: 'CD14',
                name: 'Tandjilé',
            },
            {
                code: 'CD26',
                name: 'Tibesti',
            },
            {
                code: 'CD21',
                name: "Ville de N'Djamena",
            },
            {
                code: 'CD02',
                name: 'Wadi Fira',
            },
        ],
    },
    {
        code: 'CH99',
        id: 2386,
        name: 'Channel Islands',
        states: [],
    },
    {
        code: 'CL',
        id: 2220,
        name: 'Chile',
        states: [
            {
                code: 'CL.AI',
                name: 'Aisén del General Carlos Ibáñez del Campo',
            },
            {
                code: 'CL.AN',
                name: 'Antofagasta',
            },
            {
                code: 'CL.AR',
                name: 'Araucanía',
            },
            {
                code: 'CL.AP',
                name: 'Arica and Parinacota',
            },
            {
                code: 'CL.AT',
                name: 'Atacama',
            },
            {
                code: 'CL.BI',
                name: 'Bío-Bío',
            },
            {
                code: 'CL.CO',
                name: 'Coquimbo',
            },
            {
                code: 'CL.LI',
                name: "Libertador General Bernardo O'Higgins",
            },
            {
                code: 'CL.LG',
                name: 'Los Lagos',
            },
            {
                code: 'CL.LR',
                name: 'Los Ríos',
            },
            {
                code: 'CL.MA',
                name: 'Magallanes y Antártica Chilena',
            },
            {
                code: 'CL.ML',
                name: 'Maule',
            },
            {
                code: 'CL.RM',
                name: 'Región Metropolitana de Santiago',
            },
            {
                code: 'CL.TP',
                name: 'Tarapacá',
            },
            {
                code: 'CL.VS',
                name: 'Valparaíso',
            },
        ],
    },
    {
        code: 'CN',
        id: 2221,
        name: 'China',
        states: [
            {
                code: 'CH01',
                name: 'Anhui',
            },
            {
                code: 'CH22',
                name: 'Beijing',
            },
            {
                code: 'CH33',
                name: 'Chongqing',
            },
            {
                code: 'CH07',
                name: 'Fujian',
            },
            {
                code: 'CH15',
                name: 'Gansu',
            },
            {
                code: 'CH17',
                name: 'Guangdon',
            },
            {
                code: 'CH30',
                name: 'Guangdong',
            },
            {
                code: 'CH16',
                name: 'Guangxi',
            },
            {
                code: 'CH18',
                name: 'Guizhou',
            },
            {
                code: 'CH31',
                name: 'Hainan',
            },
            {
                code: 'CH10',
                name: 'Hebei',
            },
            {
                code: 'CH08',
                name: 'Heilongjiang',
            },
            {
                code: 'CH09',
                name: 'Henan',
            },
            {
                code: 'CH34',
                name: 'Hong Kong',
            },
            {
                code: 'CH12',
                name: 'Hubei',
            },
            {
                code: 'CH11',
                name: 'Hunan',
            },
            {
                code: 'CH04',
                name: 'Jiangsu',
            },
            {
                code: 'CH03',
                name: 'Jiangxi',
            },
            {
                code: 'CH05',
                name: 'Jilin',
            },
            {
                code: 'CH19',
                name: 'Liaoning',
            },
            {
                code: 'CH20',
                name: 'Nei Mongol',
            },
            {
                code: 'CH21',
                name: 'Ningxia',
            },
            {
                code: 'CH06',
                name: 'Qinghai',
            },
            {
                code: 'CH26',
                name: 'Shaanxi',
            },
            {
                code: 'CH25',
                name: 'Shandong',
            },
            {
                code: 'CH23',
                name: 'Shanghai',
            },
            {
                code: 'CH24',
                name: 'Shanxi',
            },
            {
                code: 'CH32',
                name: 'Sichuan',
            },
            {
                code: 'CH27',
                name: 'Sichuan',
            },
            {
                code: 'CH28',
                name: 'Tianjin',
            },
            {
                code: 'CH13',
                name: 'Xinjiang',
            },
            {
                code: 'CH14',
                name: 'Xizang',
            },
            {
                code: 'CH29',
                name: 'Yunnan',
            },
            {
                code: 'CH02',
                name: 'Zhejiang',
            },
        ],
    },
    {
        code: 'CX',
        id: 2412,
        name: 'Christmas Island',
        states: [],
    },
    {
        code: 'CC',
        id: 2413,
        name: 'Cocos (Keeling) Islands',
        states: [],
    },
    {
        code: 'CO',
        id: 2222,
        name: 'Colombia',
        states: [
            {
                code: 'CO01',
                name: 'Amazonas',
            },
            {
                code: 'CO02',
                name: 'Antioquia',
            },
            {
                code: 'CO03',
                name: 'Arauca',
            },
            {
                code: 'CO04',
                name: 'Atlántico',
            },
            {
                code: 'CO35',
                name: 'Bolívar',
            },
            {
                code: 'CO36',
                name: 'Boyacá',
            },
            {
                code: 'CO37',
                name: 'Caldas',
            },
            {
                code: 'CO08',
                name: 'Caquetá',
            },
            {
                code: 'CO32',
                name: 'Casanare',
            },
            {
                code: 'CO09',
                name: 'Cauca',
            },
            {
                code: 'CO10',
                name: 'Cesar',
            },
            {
                code: 'CO11',
                name: 'Chocó',
            },
            {
                code: 'CO12',
                name: 'Córdoba',
            },
            {
                code: 'CO33',
                name: 'Cundinamarca',
            },
            {
                code: 'CO34',
                name: 'Distrito Capital',
            },
            {
                code: 'CO15',
                name: 'Guainía',
            },
            {
                code: 'CO14',
                name: 'Guaviare',
            },
            {
                code: 'CO16',
                name: 'Huila',
            },
            {
                code: 'CO17',
                name: 'La Guajira',
            },
            {
                code: 'CO38',
                name: 'Magdalena',
            },
            {
                code: 'CO19',
                name: 'Meta',
            },
            {
                code: 'CO20',
                name: 'Nariño',
            },
            {
                code: 'CO21',
                name: 'Norte de Santander',
            },
            {
                code: 'CO22',
                name: 'Putumayo',
            },
            {
                code: 'CO23',
                name: 'Quindío',
            },
            {
                code: 'CO24',
                name: 'Risaralda',
            },
            {
                code: 'CO25',
                name: 'San Andrés y Providencia',
            },
            {
                code: 'CO26',
                name: 'Santander',
            },
            {
                code: 'CO27',
                name: 'Sucre',
            },
            {
                code: 'CO28',
                name: 'Tolima',
            },
            {
                code: 'CO29',
                name: 'Valle del Cauca',
            },
            {
                code: 'CO30',
                name: 'Vaupés',
            },
            {
                code: 'CO31',
                name: 'Vichada',
            },
        ],
    },
    {
        code: 'KM',
        id: 2223,
        name: 'Comoros',
        states: [],
    },
    {
        code: 'ZR',
        id: 2368,
        name: 'Congo; Democratic Republic of',
        states: [
            {
                code: 'CD.BU',
                name: 'Bas-Uélé',
            },
            {
                code: 'CD.HK',
                name: 'Haut-Katanga',
            },
            {
                code: 'CD.HL',
                name: 'Haut-Lomami',
            },
            {
                code: 'CD.HU',
                name: 'Haut-Uélé',
            },
            {
                code: 'CD.IT',
                name: 'Ituri',
            },
            {
                code: 'CD.KS',
                name: 'Kasaï',
            },
            {
                code: 'CD.LL',
                name: 'Kasaï-Central',
            },
            {
                code: 'CD.KO',
                name: 'Kasaï Oriental',
            },
            {
                code: 'CD.KN',
                name: 'Kinshasa',
            },
            {
                code: 'CD.BC',
                name: 'Kongo Central',
            },
            {
                code: 'CD.KG',
                name: 'Kwango',
            },
            {
                code: 'CD.KU',
                name: 'Kwilu',
            },
            {
                code: 'CD.LM',
                name: 'Lomami',
            },
            {
                code: 'CD.LB',
                name: 'Lualaba',
            },
            {
                code: 'CD.MA',
                name: 'Mai-Ndombe',
            },
            {
                code: 'CD.MN',
                name: 'Maniema',
            },
            {
                code: 'CD.MO',
                name: 'Mongala',
            },
            {
                code: 'CD.NK',
                name: 'Nord-Kivu',
            },
            {
                code: 'CD.NU',
                name: 'Nord-Ubangi',
            },
            {
                code: 'CD.SN',
                name: 'Sankuru',
            },
            {
                code: 'CD.SK',
                name: 'Sud-Kivu',
            },
            {
                code: 'CD.SU',
                name: 'Sud-Ubangi',
            },
            {
                code: 'CD.TG',
                name: 'Tanganyika',
            },
            {
                code: 'CD.TO',
                name: 'Tshopo',
            },
            {
                code: 'CD.TP',
                name: 'Tshuapa',
            },
            {
                code: 'CD.ET',
                name: 'Équateur',
            },
        ],
    },
    {
        code: 'CG',
        id: 2383,
        name: 'Congo; Republic of',
        states: [],
    },
    {
        code: 'CK',
        id: 2414,
        name: 'Cook Islands',
        states: [],
    },
    {
        code: 'CR',
        id: 2226,
        name: 'Costa Rica',
        states: [
            {
                code: 'CS01',
                name: 'Alajuela',
            },
            {
                code: 'CS02',
                name: 'Cartago',
            },
            {
                code: 'CS03',
                name: 'Guanacaste',
            },
            {
                code: 'CS04',
                name: 'Heredia',
            },
            {
                code: 'CS06',
                name: 'Limón',
            },
            {
                code: 'CS07',
                name: 'Puntarenas',
            },
            {
                code: 'CS08',
                name: 'San José',
            },
        ],
    },
    {
        code: 'CI',
        id: 2227,
        name: "Cote D'Ivoire",
        states: [
            {
                code: 'IV93',
                name: 'Abidjan',
            },
            {
                code: 'IV76',
                name: 'Bas-Sassandra',
            },
            {
                code: 'IV94',
                name: 'Comoé',
            },
            {
                code: 'IV77',
                name: 'Denguélé',
            },
            {
                code: 'IV95',
                name: 'Gôh-Djiboua',
            },
            {
                code: 'IV81',
                name: 'Lacs',
            },
            {
                code: 'IV82',
                name: 'Lagunes',
            },
            {
                code: 'IV78',
                name: 'Montagnes',
            },
            {
                code: 'IV96',
                name: 'Sassandra-Marahoué',
            },
            {
                code: 'IV87',
                name: 'Savanes',
            },
            {
                code: 'IV90',
                name: 'Vallée du Bandama',
            },
            {
                code: 'IV97',
                name: 'Woroba',
            },
            {
                code: 'IV98',
                name: 'Yamoussoukro',
            },
            {
                code: 'IV92',
                name: 'Zanzan',
            },
        ],
    },
    {
        code: 'HR',
        id: 2228,
        name: 'Croatia',
        states: [
            {
                code: 'HR07',
                name: 'Bjelovarsko-bilogorska',
            },
            {
                code: 'HR12',
                name: 'Brodsko-posavska',
            },
            {
                code: 'HR19',
                name: 'Dubrovacko-neretvanska',
            },
            {
                code: 'HR21',
                name: 'Grad Zagreb',
            },
            {
                code: 'HR-18',
                name: 'Istarska',
            },
            {
                code: 'HR04',
                name: 'Karlovacka',
            },
            {
                code: 'HR06',
                name: 'Koprivnicko-križevacka',
            },
            {
                code: 'HR02',
                name: 'Krapinsko-zagorska',
            },
            {
                code: 'HR09',
                name: 'Licko-senjska',
            },
            {
                code: 'HR20',
                name: 'Medimurska',
            },
            {
                code: 'HR14',
                name: 'Osjecko-baranjska',
            },
            {
                code: 'HR11',
                name: 'Požeško-slavonska',
            },
            {
                code: 'HR08',
                name: 'Primorsko-goranska',
            },
            {
                code: 'HR15',
                name: 'Šibensko-kninska',
            },
            {
                code: 'HR03',
                name: 'Sisacko-moslavacka',
            },
            {
                code: 'HR17',
                name: 'Splitsko-dalmatinska',
            },
            {
                code: 'HR05',
                name: 'Varaždinska',
            },
            {
                code: 'HR10',
                name: 'Viroviticko-podravska',
            },
            {
                code: 'HR16',
                name: 'Vukovarsko-srijemska',
            },
            {
                code: 'HR13',
                name: 'Zadarska',
            },
            {
                code: 'HR01',
                name: 'Zagrebacka',
            },
        ],
    },
    {
        code: 'CU',
        id: 2229,
        name: 'Cuba',
        states: [
            {
                code: 'CU17',
                name: 'Artemisa',
            },
            {
                code: 'CU05',
                name: 'Camagüey',
            },
            {
                code: 'CU07',
                name: 'Ciego de Ávila',
            },
            {
                code: 'CU08',
                name: 'Cienfuegos',
            },
            {
                code: 'CU09',
                name: 'Granma',
            },
            {
                code: 'CU10',
                name: 'Guantánamo',
            },
            {
                code: 'CU12',
                name: 'Holguín',
            },
            {
                code: 'CU04',
                name: 'Isla de la Juventud',
            },
            {
                code: 'CU02',
                name: 'La Habana',
            },
            {
                code: 'CU13',
                name: 'Las Tunas',
            },
            {
                code: 'CU03',
                name: 'Matanzas',
            },
            {
                code: 'CU18',
                name: 'Mayabeque',
            },
            {
                code: 'CU01',
                name: 'Pinar del Río',
            },
            {
                code: 'CU14',
                name: 'Sancti Spíritus',
            },
            {
                code: 'CU15',
                name: 'Santiago de Cuba',
            },
            {
                code: 'CU16',
                name: 'Villa Clara',
            },
        ],
    },
    {
        code: 'C999',
        id: 2387,
        name: 'Curacao',
        states: [
            {
                code: 'CW.CU',
                name: 'Curacao',
            },
        ],
    },
    {
        code: 'CY',
        id: 2230,
        name: 'Cyprus',
        states: [
            {
                code: 'CY01',
                name: 'Famagusta',
            },
            {
                code: 'CY02',
                name: 'Kyrenia',
            },
            {
                code: 'CY03',
                name: 'Larnaca',
            },
            {
                code: 'CY05',
                name: 'Limassol',
            },
            {
                code: 'CY04',
                name: 'Nicosia',
            },
            {
                code: 'CY06',
                name: 'Paphos',
            },
        ],
    },
    {
        code: 'CZ',
        id: 2231,
        name: 'Czech Republic',
        states: [
            {
                code: 'JC',
                name: 'Jihoceský kraj',
            },
            {
                code: 'JM',
                name: 'Jihomoravský kraj',
            },
            {
                code: 'KA',
                name: 'Karlovarský kraj',
            },
            {
                code: 'KR',
                name: 'Královéhradecký kraj',
            },
            {
                code: 'LI',
                name: 'Liberecký kraj',
            },
            {
                code: 'MO',
                name: 'Moravskoslezský kraj',
            },
            {
                code: 'OL',
                name: 'Olomoucký kraj',
            },
            {
                code: 'PA',
                name: 'Pardubický kraj',
            },
            {
                code: 'PL',
                name: 'Plzenský kraj',
            },
            {
                code: 'PR',
                name: 'Praha, hlavní mesto',
            },
            {
                code: 'ST',
                name: 'Stredoceský kraj',
            },
            {
                code: 'VY',
                name: 'Vysocina',
            },
            {
                code: 'ZL',
                name: 'Zlínský kraj',
            },
            {
                code: 'US',
                name: 'Ústecký kraj',
            },
        ],
    },
    {
        code: 'DK',
        id: 2232,
        name: 'Denmark',
        states: [
            {
                code: 'DA01',
                name: 'Arhus County',
            },
            {
                code: 'DA02',
                name: 'Bornholm Regional Municipality',
            },
            {
                code: 'DA17',
                name: 'Capital Region',
            },
            {
                code: 'DA18',
                name: 'Central Jutland Region',
            },
            {
                code: 'DA16',
                name: 'Frederiksberg municipal',
            },
            {
                code: 'DA03',
                name: 'Frederiksborg County',
            },
            {
                code: 'DA04',
                name: 'Fyn County',
            },
            {
                code: 'DA06',
                name: 'Kobenhavn County',
            },
            {
                code: 'DA05',
                name: 'Kobenhavn municipal',
            },
            {
                code: 'DA07',
                name: 'Nordjylland County',
            },
            {
                code: 'DA19',
                name: 'North Jutland Region',
            },
            {
                code: 'DA08',
                name: 'Ribe County',
            },
            {
                code: 'DA09',
                name: 'Ringkobing County',
            },
            {
                code: 'DA10',
                name: 'Roskilde County',
            },
            {
                code: 'DA11',
                name: 'Sonderjylland County',
            },
            {
                code: 'DA21',
                name: 'South Denmark Region',
            },
            {
                code: 'DA12',
                name: 'Storstrom County',
            },
            {
                code: 'DA13',
                name: 'Vejle County',
            },
            {
                code: 'DA14',
                name: 'Vestsjaelland County',
            },
            {
                code: 'DA15',
                name: 'Viborg County',
            },
            {
                code: 'DA20',
                name: 'Zealand Region',
            },
        ],
    },
    {
        code: 'DJ',
        id: 2233,
        name: 'Djibouti',
        states: [],
    },
    {
        code: 'DM',
        id: 2234,
        name: 'Dominica',
        states: [],
    },
    {
        code: 'DO',
        id: 2235,
        name: 'Dominican Republic',
        states: [
            {
                code: 'DR01',
                name: 'Azua',
            },
            {
                code: 'DR02',
                name: 'Bahoruco',
            },
            {
                code: 'DR03',
                name: 'Barahona',
            },
            {
                code: 'DR04',
                name: 'Dajabón',
            },
            {
                code: 'DR34',
                name: 'Distrito Nacional',
            },
            {
                code: 'DR06',
                name: 'Duarte',
            },
            {
                code: 'DR28',
                name: 'El Seibo',
            },
            {
                code: 'DR11',
                name: 'Elías Piña',
            },
            {
                code: 'DR08',
                name: 'Espaillat',
            },
            {
                code: 'DR29',
                name: 'Hato Mayor',
            },
            {
                code: 'DR19',
                name: 'Hermanas Mirabal',
            },
            {
                code: 'DR09',
                name: 'Independencia',
            },
            {
                code: 'DR10',
                name: 'La Altagracia',
            },
            {
                code: 'DR12',
                name: 'La Romana',
            },
            {
                code: 'DR30',
                name: 'La Vega',
            },
            {
                code: 'DR14',
                name: 'María Trinidad Sánchez',
            },
            {
                code: 'DR31',
                name: 'Monseñor Nouel',
            },
            {
                code: 'DR15',
                name: 'Monte Cristi',
            },
            {
                code: 'DR32',
                name: 'Monte Plata',
            },
            {
                code: 'DR16',
                name: 'Pedernales',
            },
            {
                code: 'DR35',
                name: 'Peravia',
            },
            {
                code: 'DR18',
                name: 'Puerto Plata',
            },
            {
                code: 'DR20',
                name: 'Samaná',
            },
            {
                code: 'DR33',
                name: 'San Cristóbal',
            },
            {
                code: 'DR36',
                name: 'San José de Ocoa',
            },
            {
                code: 'DR23',
                name: 'San Juan',
            },
            {
                code: 'DR24',
                name: 'San Pedro de Macorís',
            },
            {
                code: 'DR21',
                name: 'Sánchez Ramírez',
            },
            {
                code: 'DR25',
                name: 'Santiago',
            },
            {
                code: 'DR26',
                name: 'Santiago Rodríguez',
            },
            {
                code: 'DR37',
                name: 'Santo Domingo',
            },
            {
                code: 'DR27',
                name: 'Valverde',
            },
        ],
    },
    {
        code: 'EC',
        id: 2236,
        name: 'Ecuador',
        states: [
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC03',
                name: 'Bolívar',
            },
            {
                code: 'EC04',
                name: 'Cañar',
            },
            {
                code: 'EC05',
                name: 'Carchi',
            },
            {
                code: 'EC06',
                name: 'Chimborazo',
            },
            {
                code: 'EC07',
                name: 'Cotopaxi',
            },
            {
                code: 'EC08',
                name: 'El Oro',
            },
            {
                code: 'EC09',
                name: 'Esmeraldas',
            },
            {
                code: 'EC01',
                name: 'Galápagos',
            },
            {
                code: 'EC10',
                name: 'Guayas',
            },
            {
                code: 'EC11',
                name: 'Imbabura',
            },
            {
                code: 'EC12',
                name: 'Loja',
            },
            {
                code: 'EC13',
                name: 'Los Ríos',
            },
            {
                code: 'EC14',
                name: 'Manabí',
            },
            {
                code: 'EC15',
                name: 'Morona-Santiago',
            },
            {
                code: 'EC23',
                name: 'Napo',
            },
            {
                code: 'EC24',
                name: 'Orellana',
            },
            {
                code: 'EC17',
                name: 'Pastaza',
            },
            {
                code: 'EC18',
                name: 'Pichincha',
            },
            {
                code: 'EC25',
                name: 'Santa Elena',
            },
            {
                code: 'EC26',
                name: 'Santo Domingo de los Tsáchilas',
            },
            {
                code: 'EC22',
                name: 'Sucumbíos',
            },
            {
                code: 'EC19',
                name: 'Tungurahua',
            },
            {
                code: 'EC20',
                name: 'Zamora-Chinchipe',
            },
        ],
    },
    {
        code: 'EG',
        id: 2237,
        name: 'Egypt',
        states: [
            {
                code: 'EG01',
                name: 'Ad Daqahliyah',
            },
            {
                code: 'EG02',
                name: 'Al Bahr al Ahmar',
            },
            {
                code: 'EG03',
                name: 'Al Buhayrah',
            },
            {
                code: 'EG04',
                name: 'Al Fayyum',
            },
            {
                code: 'EG05',
                name: 'Al Gharbiyah',
            },
            {
                code: 'EG06',
                name: 'Al Iskandariyah',
            },
            {
                code: 'EG07',
                name: 'Al Isma`iliyah',
            },
            {
                code: 'EG08',
                name: 'Al Jizah',
            },
            {
                code: 'EG09',
                name: 'Al Minufiyah',
            },
            {
                code: 'EG10',
                name: 'Al Minya',
            },
            {
                code: 'EG11',
                name: 'Al Qahirah',
            },
            {
                code: 'EG12',
                name: 'Al Qalyubiyah',
            },
            {
                code: 'EG28',
                name: 'Al Uqsur',
            },
            {
                code: 'EG13',
                name: 'Al Wadi al Jadid',
            },
            {
                code: 'EG15',
                name: 'As Suways',
            },
            {
                code: 'EG14',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'EG16',
                name: 'Aswan',
            },
            {
                code: 'EG17',
                name: 'Asyut',
            },
            {
                code: 'EG18',
                name: 'Bani Suwayf',
            },
            {
                code: 'EG19',
                name: 'Bur Sa`id',
            },
            {
                code: 'EG20',
                name: 'Dumyat',
            },
            {
                code: 'EG26',
                name: 'Janub Sina',
            },
            {
                code: 'EG21',
                name: 'Kafr ash Shaykh',
            },
            {
                code: 'EG22',
                name: 'Matruh',
            },
            {
                code: 'EG23',
                name: 'Qina',
            },
            {
                code: 'EG27',
                name: 'Shamal Sina',
            },
            {
                code: 'EG24',
                name: 'Suhaj',
            },
        ],
    },
    {
        code: 'SV',
        id: 2238,
        name: 'El Salvador',
        states: [
            {
                code: 'ES01',
                name: 'Ahuachapán',
            },
            {
                code: 'ES02',
                name: 'Cabañas',
            },
            {
                code: 'ES03',
                name: 'Chalatenango',
            },
            {
                code: 'ES04',
                name: 'Cuscatlán',
            },
            {
                code: 'ES05',
                name: 'La Libertad',
            },
            {
                code: 'ES06',
                name: 'La Paz',
            },
            {
                code: 'ES07',
                name: 'La Unión',
            },
            {
                code: 'ES08',
                name: 'Morazán',
            },
            {
                code: 'ES09',
                name: 'San Miguel',
            },
            {
                code: 'ES10',
                name: 'San Salvador',
            },
            {
                code: 'ES12',
                name: 'San Vicente',
            },
            {
                code: 'ES11',
                name: 'Santa Ana',
            },
            {
                code: 'ES13',
                name: 'Sonsonate',
            },
            {
                code: 'ES14',
                name: 'Usulután',
            },
        ],
    },
    {
        code: 'GQ',
        id: 2239,
        name: 'Equatorial Guinea',
        states: [],
    },
    {
        code: 'ER',
        id: 2240,
        name: 'Eritrea',
        states: [],
    },
    {
        code: 'EE',
        id: 2241,
        name: 'Estonia',
        states: [
            {
                code: 'EN01',
                name: 'Harju',
            },
            {
                code: 'EN02',
                name: 'Hiiu',
            },
            {
                code: 'EN03',
                name: 'Ida-Viru',
            },
            {
                code: 'EN04',
                name: 'Järva',
            },
            {
                code: 'EN05',
                name: 'Jõgeva',
            },
            {
                code: 'EN07',
                name: 'Lääne',
            },
            {
                code: 'EN08',
                name: 'Lääne-Viru',
            },
            {
                code: 'EN11',
                name: 'Pärnu',
            },
            {
                code: 'EN12',
                name: 'Põlva',
            },
            {
                code: 'EN13',
                name: 'Rapla',
            },
            {
                code: 'EN14',
                name: 'Saare',
            },
            {
                code: 'EN18',
                name: 'Tartu',
            },
            {
                code: 'EN19',
                name: 'Valga',
            },
            {
                code: 'EN20',
                name: 'Viljandi',
            },
            {
                code: 'EN21',
                name: 'Võru',
            },
        ],
    },
    {
        code: 'ET',
        id: 2242,
        name: 'Ethiopia',
        states: [
            {
                code: 'ET44',
                name: 'Addis Ababa',
            },
            {
                code: 'ET45',
                name: 'Afar',
            },
            {
                code: 'ET46',
                name: 'Amhara',
            },
            {
                code: 'ET47',
                name: 'Benshangul-Gumaz',
            },
            {
                code: 'ET48',
                name: 'Dire Dawa',
            },
            {
                code: 'ET49',
                name: 'Gambela Peoples',
            },
            {
                code: 'ET50',
                name: 'Harari People',
            },
            {
                code: 'ET51',
                name: 'Oromia',
            },
            {
                code: 'ET52',
                name: 'Somali',
            },
            {
                code: 'ET54',
                name: 'Southern Nations, Nationalities and Peoples',
            },
            {
                code: 'ET53',
                name: 'Tigray',
            },
        ],
    },
    {
        code: 'FK',
        id: 2415,
        name: 'Falkland Islands (Malvinas)',
        states: [],
    },
    {
        code: 'FI99',
        id: 2388,
        name: 'Faroe Islands',
        states: [],
    },
    {
        code: 'FJ',
        id: 2243,
        name: 'Fiji',
        states: [],
    },
    {
        code: 'FI',
        id: 2244,
        name: 'Finland',
        states: [
            {
                code: 'FI-AL',
                name: 'Ahvenanmaan lääni',
            },
            {
                code: 'AX',
                name: 'Ahvenanmaa',
            },
            {
                code: 'FI.SK',
                name: 'Etelä-Karjala',
            },
            {
                code: 'FI.SO',
                name: 'Etelä-Pohjanmaa',
            },
            {
                code: 'FI.SS',
                name: 'Etelä-Savo',
            },
            {
                code: 'FI-ES',
                name: 'Etelä-Suomen lääni',
            },
            {
                code: 'FI-IS',
                name: 'Itä-Suomen lääni',
            },
            {
                code: 'FI.KA',
                name: 'Kainuu',
            },
            {
                code: 'FI.KH',
                name: 'Kanta-Häme',
            },
            {
                code: 'FI.CO',
                name: 'Keski-Pohjanmaa',
            },
            {
                code: 'FI.CF',
                name: 'Keski-Suomi',
            },
            {
                code: 'FI.KY',
                name: 'Kymenlaakso',
            },
            {
                code: 'FI-LS',
                name: 'Länsi-Suomen lääni',
            },
            {
                code: 'FI-LL',
                name: 'Lapin lääni',
            },
            {
                code: 'FI.LA',
                name: 'Lappi',
            },
            {
                code: 'FI-OL',
                name: 'Oulun lääni',
            },
            {
                code: 'FI.PH',
                name: 'Päijät-Häme',
            },
            {
                code: 'FI.TR',
                name: 'Pirkanmaa',
            },
            {
                code: 'FI.OS',
                name: 'Pohjanmaa',
            },
            {
                code: 'FI.NK',
                name: 'Pohjois-Karjala',
            },
            {
                code: 'FI.NO',
                name: 'Pohjois-Pohjanmaa',
            },
            {
                code: 'FI.NS',
                name: 'Pohjois-Savo',
            },
            {
                code: 'FI.SA',
                name: 'Satakunta',
            },
            {
                code: 'FI.US',
                name: 'Uusimaa',
            },
            {
                code: 'FI.SF',
                name: 'Varsinais-Suomi',
            },
        ],
    },
    {
        code: 'FR',
        id: 2245,
        name: 'France',
        states: [
            {
                code: 'FRC2',
                name: 'Ain',
            },
            {
                code: 'FRC3',
                name: 'Aisne',
            },
            {
                code: 'FRC4',
                name: 'Allier',
            },
            {
                code: 'FRC6',
                name: 'Alpes-Maritimes',
            },
            {
                code: 'FRC5',
                name: 'Alpes-de-Haute-Provence',
            },
            {
                code: 'FRC1',
                name: 'Alsace',
            },
            {
                code: 'FR97',
                name: 'Aquitaine',
            },
            {
                code: 'FRC7',
                name: 'Ardèche',
            },
            {
                code: 'FRC8',
                name: 'Ardennes',
            },
            {
                code: 'FRC9',
                name: 'Ariège',
            },
            {
                code: 'FRD1',
                name: 'Aube',
            },
            {
                code: 'FRD2',
                name: 'Aude',
            },
            {
                code: 'FR.AR',
                name: 'Auvergne-Rhône-Alpes',
            },
            {
                code: 'FR98',
                name: 'Auvergne',
            },
            {
                code: 'FRD3',
                name: 'Aveyron',
            },
            {
                code: 'FRD4',
                name: 'Bas-Rhin',
            },
            {
                code: 'FR99',
                name: 'Basse-Normandie',
            },
            {
                code: 'FRD5',
                name: 'Bouches-du-Rhône',
            },
            {
                code: 'FR.BF',
                name: 'Bourgogne-Franche-Comté',
            },
            {
                code: 'FRA1',
                name: 'Bourgogne',
            },
            {
                code: 'FRA2',
                name: 'Bretagne',
            },
            {
                code: 'FRD8',
                name: 'Calvados',
            },
            {
                code: 'FRD9',
                name: 'Cantal',
            },
            {
                code: 'FRA3',
                name: 'Centre',
            },
            {
                code: 'FR.CN',
                name: 'Centre-Val de Loire',
            },
            {
                code: 'FRA4',
                name: 'Champagne-Ardenne',
            },
            {
                code: 'FRE1',
                name: 'Charente-Maritime',
            },
            {
                code: 'FRE2',
                name: 'Charente',
            },
            {
                code: 'FRE3',
                name: 'Cher',
            },
            {
                code: 'FRE4',
                name: 'Corrèze',
            },
            {
                code: 'FRE5',
                name: 'Corse-du-Sud',
            },
            {
                code: 'FR.CE',
                name: 'Corse',
            },
            {
                code: 'FRD6',
                name: "Côte-d'Or",
            },
            {
                code: 'FRD7',
                name: "Côtes-d'Armor",
            },
            {
                code: 'FRE6',
                name: 'Creuse',
            },
            {
                code: 'FRE7',
                name: 'Deux-Sèvres',
            },
            {
                code: 'FRE8',
                name: 'Dordogne',
            },
            {
                code: 'FRE9',
                name: 'Doubs',
            },
            {
                code: 'FRF1',
                name: 'Drôme',
            },
            {
                code: 'FRF2',
                name: 'Essonne',
            },
            {
                code: 'FRF3',
                name: 'Eure-et-Loir',
            },
            {
                code: 'FRF4',
                name: 'Eure',
            },
            {
                code: 'FRF5',
                name: 'Finistère',
            },
            {
                code: 'FRA6',
                name: 'Franche-Comte',
            },
            {
                code: 'FRF6',
                name: 'Gard',
            },
            {
                code: 'FRF7',
                name: 'Gers',
            },
            {
                code: 'FRF8',
                name: 'Gironde',
            },
            {
                code: 'FR.AO',
                name: 'Grand Est',
            },
            {
                code: 'FRG1',
                name: 'Haut-Rhin',
            },
            {
                code: 'FRG2',
                name: 'Haute-Corse',
            },
            {
                code: 'FRG3',
                name: 'Haute-Garonne',
            },
            {
                code: 'FRG4',
                name: 'Haute-Loire',
            },
            {
                code: 'FRG5',
                name: 'Haute-Marne',
            },
            {
                code: 'FRA7',
                name: 'Haute-Normandie',
            },
            {
                code: 'FRG6',
                name: 'Haute-Saône',
            },
            {
                code: 'FRG7',
                name: 'Haute-Savoie',
            },
            {
                code: 'FRG8',
                name: 'Haute-Vienne',
            },
            {
                code: 'FRG9',
                name: 'Hautes-Alpes',
            },
            {
                code: 'FRH1',
                name: 'Hautes-Pyrénées',
            },
            {
                code: 'FR.NC',
                name: 'Hauts-de-France',
            },
            {
                code: 'FRH2',
                name: 'Hauts-de-Seine',
            },
            {
                code: 'FRF9',
                name: 'Hérault',
            },
            {
                code: 'FRA8',
                name: 'Ile-de-France',
            },
            {
                code: 'FRH3',
                name: 'Ille-et-Vilaine',
            },
            {
                code: 'FRH5',
                name: 'Indre',
            },
            {
                code: 'FRH4',
                name: 'Indre-et-Loire',
            },
            {
                code: 'FRH6',
                name: 'Isère',
            },
            {
                code: 'FRH7',
                name: 'Jura',
            },
            {
                code: 'FRH8',
                name: 'Landes',
            },
            {
                code: 'FRA9',
                name: 'Languedoc-Roussillon',
            },
            {
                code: 'FRB1',
                name: 'Limousin',
            },
            {
                code: 'FRI3',
                name: 'Loir-et-Cher',
            },
            {
                code: 'FRI2',
                name: 'Loiret',
            },
            {
                code: 'FRI1',
                name: 'Loire',
            },
            {
                code: 'FRH9',
                name: 'Loire-Atlantique',
            },
            {
                code: 'FRB2',
                name: 'Lorraine',
            },
            {
                code: 'FRI4',
                name: 'Lot-et-Garonne',
            },
            {
                code: 'FRI5',
                name: 'Lot',
            },
            {
                code: 'FRI6',
                name: 'Lozère',
            },
            {
                code: 'FRI7',
                name: 'Maine-et-Loire',
            },
            {
                code: 'FRI8',
                name: 'Manche',
            },
            {
                code: 'FRI9',
                name: 'Marne',
            },
            {
                code: 'FRJ1',
                name: 'Mayenne',
            },
            {
                code: 'FRJ2',
                name: 'Meurthe-et-Moselle',
            },
            {
                code: 'FRJ3',
                name: 'Meuse',
            },
            {
                code: 'FRB3',
                name: 'Midi-Pyrenees',
            },
            {
                code: 'FRJ4',
                name: 'Morbihan',
            },
            {
                code: 'FRJ5',
                name: 'Moselle',
            },
            {
                code: 'FRJ6',
                name: 'Nièvre',
            },
            {
                code: 'FRJ7',
                name: 'Nord France',
            },
            {
                code: 'FR67',
                name: 'Nord',
            },
            {
                code: 'FR.ND',
                name: 'Normandie',
            },
            {
                code: 'FR.AC',
                name: 'Nouvelle-Aquitaine',
            },
            {
                code: 'FR.LP',
                name: 'Occitanie',
            },
            {
                code: 'FRJ8',
                name: 'Oise',
            },
            {
                code: 'FRJ9',
                name: 'Orne',
            },
            {
                code: 'FRK1',
                name: 'Paris',
            },
            {
                code: 'FRB4',
                name: 'Pas-de-Calais',
            },
            {
                code: 'FRB5',
                name: 'Pays de la Loire',
            },
            {
                code: 'FRB6',
                name: 'Picardie',
            },
            {
                code: 'FRB7',
                name: 'Poitou-Charentes',
            },
            {
                code: 'FRB8',
                name: "Provence-Alpes-Cote d'Azur",
            },
            {
                code: 'FRK2',
                name: 'Puy-de-Dôme',
            },
            {
                code: 'FRK3',
                name: 'Pyrénées-Atlantiques',
            },
            {
                code: 'FRK4',
                name: 'Pyrénées-Orientales',
            },
            {
                code: 'FRB9',
                name: 'Rhône',
            },
            {
                code: 'FRK5',
                name: 'Saône-et-Loire',
            },
            {
                code: 'FRK6',
                name: 'Sarthe',
            },
            {
                code: 'FRK7',
                name: 'Savoie',
            },
            {
                code: 'FRK9',
                name: 'Seine-Maritime',
            },
            {
                code: 'FRL1',
                name: 'Seine-Saint-Denis',
            },
            {
                code: 'FRK8',
                name: 'Seine-et-Marne',
            },
            {
                code: 'FRL2',
                name: 'Somme',
            },
            {
                code: 'FRL3',
                name: 'Tarn-et-Garonne',
            },
            {
                code: 'FRL4',
                name: 'Tarn',
            },
            {
                code: 'FRL5',
                name: 'Territoire de Belfor',
            },
            {
                code: 'FR14',
                name: 'Territoire de Belfort',
            },
            {
                code: 'FRL6',
                name: "Val-d'Oise",
            },
            {
                code: 'FRL7',
                name: 'Val-de-Marne',
            },
            {
                code: 'FRL8',
                name: 'Var',
            },
            {
                code: 'FRL9',
                name: 'Vaucluse',
            },
            {
                code: 'FRM1',
                name: 'Vendée',
            },
            {
                code: 'FRM2',
                name: 'Vienne',
            },
            {
                code: 'FR94',
                name: 'Ville de Paris',
            },
            {
                code: 'FRM3',
                name: 'Vosges',
            },
            {
                code: 'FRM4',
                name: 'Yonne',
            },
            {
                code: 'FRM5',
                name: 'Yvelines',
            },
            {
                code: 'FR.IF',
                name: 'Île-de-France',
            },
        ],
    },
    {
        code: 'GF',
        id: 2416,
        name: 'French Guiana',
        states: [],
    },
    {
        code: 'PF',
        id: 2417,
        name: 'French Polynesia',
        states: [],
    },
    {
        code: 'TF',
        id: 2418,
        name: 'French Southern Territories',
        states: [],
    },
    {
        code: 'GA',
        id: 2246,
        name: 'Gabon',
        states: [
            {
                code: 'GB01',
                name: 'Estuaire',
            },
            {
                code: 'GB02',
                name: 'Haut-Ogooué',
            },
            {
                code: 'GB03',
                name: 'Moyen-Ogooué',
            },
            {
                code: 'GB04',
                name: 'Ngounié',
            },
            {
                code: 'GB05',
                name: 'Nyanga',
            },
            {
                code: 'GB06',
                name: 'Ogooué-Ivindo',
            },
            {
                code: 'GB07',
                name: 'Ogooué-Lolo',
            },
            {
                code: 'GB08',
                name: 'Ogooué-Maritime',
            },
            {
                code: 'GB09',
                name: 'Woleu-Ntem',
            },
        ],
    },
    {
        code: 'GM',
        id: 2389,
        name: 'Gambia',
        states: [
            {
                code: 'GA01',
                name: 'Banjul',
            },
            {
                code: 'GA03',
                name: 'Central River',
            },
            {
                code: 'GA02',
                name: 'Lower River',
            },
            {
                code: 'GA07',
                name: 'North Bank',
            },
            {
                code: 'GA04',
                name: 'Upper River',
            },
            {
                code: 'GA05',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'GE',
        id: 2248,
        name: 'Georgia',
        states: [
            {
                code: 'GG02',
                name: 'Abkhazia',
            },
            {
                code: 'GG04',
                name: 'Ajaria',
            },
            {
                code: 'GG65',
                name: 'Guria',
            },
            {
                code: 'GG66',
                name: 'Imereti',
            },
            {
                code: 'GG67',
                name: 'Kakheti',
            },
            {
                code: 'GG68',
                name: 'Kvemo Kartli',
            },
            {
                code: 'GG69',
                name: 'Mtskheta-Mtianeti',
            },
            {
                code: 'GG70',
                name: 'Racha-Lochkhumi-Kvemo Svaneti',
            },
            {
                code: 'GG71',
                name: 'Samegrelo-Zemo Svaneti',
            },
            {
                code: 'GG72',
                name: 'Samtskhe-Javakheti',
            },
            {
                code: 'GG73',
                name: 'Shida Kartli',
            },
            {
                code: 'GG51',
                name: 'Tbilisi',
            },
        ],
    },
    {
        code: 'DE',
        id: 2249,
        name: 'Germany',
        states: [
            {
                code: 'BW',
                name: 'Baden-Württemberg',
            },
            {
                code: 'BY',
                name: 'Bayern',
            },
            {
                code: 'BE',
                name: 'Berlin',
            },
            {
                code: 'BB',
                name: 'Brandenburg',
            },
            {
                code: 'HB',
                name: 'Bremen',
            },
            {
                code: 'HH',
                name: 'Hamburg',
            },
            {
                code: 'HE',
                name: 'Hessen',
            },
            {
                code: 'MV',
                name: 'Mecklenburg-Vorpommern',
            },
            {
                code: 'NI',
                name: 'Niedersachsen',
            },
            {
                code: 'NW',
                name: 'Nordrhein-Westfalen',
            },
            {
                code: 'RP',
                name: 'Rheinland-Pfalz',
            },
            {
                code: 'SL',
                name: 'Saarland',
            },
            {
                code: 'SN',
                name: 'Sachsen',
            },
            {
                code: 'ST',
                name: 'Sachsen-Anhalt',
            },
            {
                code: 'SH',
                name: 'Schleswig-Holstein',
            },
            {
                code: 'TH',
                name: 'Thüringen',
            },
        ],
    },
    {
        code: 'GH',
        id: 2250,
        name: 'Ghana',
        states: [
            {
                code: 'GH02',
                name: 'Ashanti',
            },
            {
                code: 'GH03',
                name: 'Brong-Ahafo',
            },
            {
                code: 'GH04',
                name: 'Central',
            },
            {
                code: 'GH05',
                name: 'Eastern',
            },
            {
                code: 'GH01',
                name: 'Greater Accra',
            },
            {
                code: 'GH06',
                name: 'Northern',
            },
            {
                code: 'GH10',
                name: 'Upper East',
            },
            {
                code: 'GH11',
                name: 'Upper West',
            },
            {
                code: 'GH08',
                name: 'Volta',
            },
            {
                code: 'GH09',
                name: 'Western',
            },
        ],
    },
    {
        code: 'G999',
        id: 2390,
        name: 'Gibraltar',
        states: [
            {
                code: 'GI.GI',
                name: 'Gibraltar',
            },
        ],
    },
    {
        code: 'GR',
        id: 2251,
        name: 'Greece',
        states: [
            {
                code: '13',
                name: 'Achaïa',
            },
            {
                code: '69',
                name: 'Agio Oros',
            },
            {
                code: '01',
                name: 'Aitolia kai Akarnania',
            },
            {
                code: '11',
                name: 'Argolida',
            },
            {
                code: '12',
                name: 'Arkadia',
            },
            {
                code: '31',
                name: 'Arta',
            },
            {
                code: 'A1',
                name: 'Attiki',
            },
            {
                code: '64',
                name: 'Chalkidiki',
            },
            {
                code: '94',
                name: 'Chania',
            },
            {
                code: '85',
                name: 'Chios',
            },
            {
                code: '81',
                name: 'Dodekanisos',
            },
            {
                code: '52',
                name: 'Drama',
            },
            {
                code: '71',
                name: 'Evros',
            },
            {
                code: '05',
                name: 'Evrytania',
            },
            {
                code: '04',
                name: 'Evvoia',
            },
            {
                code: '63',
                name: 'Florina',
            },
            {
                code: '07',
                name: 'Fokida',
            },
            {
                code: '06',
                name: 'Fthiotida',
            },
            {
                code: '51',
                name: 'Grevena',
            },
            {
                code: '14',
                name: 'Ileia',
            },
            {
                code: '53',
                name: 'Imathia',
            },
            {
                code: '33',
                name: 'Ioannina',
            },
            {
                code: '91',
                name: 'Irakleio',
            },
            {
                code: '41',
                name: 'Karditsa',
            },
            {
                code: '56',
                name: 'Kastoria',
            },
            {
                code: '55',
                name: 'Kavala',
            },
            {
                code: '23',
                name: 'Kefallonia',
            },
            {
                code: '22',
                name: 'Kerkyra',
            },
            {
                code: '57',
                name: 'Kilkis',
            },
            {
                code: '15',
                name: 'Korinthia',
            },
            {
                code: '58',
                name: 'Kozani',
            },
            {
                code: '82',
                name: 'Kyklades',
            },
            {
                code: '16',
                name: 'Lakonia',
            },
            {
                code: '42',
                name: 'Larisa',
            },
            {
                code: '92',
                name: 'Lasithi',
            },
            {
                code: '24',
                name: 'Lefkada',
            },
            {
                code: '83',
                name: 'Lesvos',
            },
            {
                code: '43',
                name: 'Magnisia',
            },
            {
                code: '17',
                name: 'Messinia',
            },
            {
                code: '59',
                name: 'Pella',
            },
            {
                code: '61',
                name: 'Pieria',
            },
            {
                code: '34',
                name: 'Preveza',
            },
            {
                code: '93',
                name: 'Rethymno',
            },
            {
                code: '73',
                name: 'Rodopi',
            },
            {
                code: '84',
                name: 'Samos',
            },
            {
                code: '62',
                name: 'Serres',
            },
            {
                code: '32',
                name: 'Thesprotia',
            },
            {
                code: '54',
                name: 'Thessaloniki',
            },
            {
                code: '44',
                name: 'Trikala',
            },
            {
                code: '03',
                name: 'Voiotia',
            },
            {
                code: '72',
                name: 'Xanthi',
            },
            {
                code: '21',
                name: 'Zakynthos',
            },
        ],
    },
    {
        code: 'GL',
        id: 2252,
        name: 'Greenland',
        states: [],
    },
    {
        code: 'GD',
        id: 2253,
        name: 'Grenada',
        states: [],
    },
    {
        code: 'GP',
        id: 2419,
        name: 'Guadeloupe',
        states: [],
    },
    {
        code: 'GU',
        id: 2376,
        name: 'Guam',
        states: [],
    },
    {
        code: 'GT',
        id: 2371,
        name: 'Guatemala',
        states: [
            {
                code: 'GT01',
                name: 'Alta Verapaz',
            },
            {
                code: 'GT02',
                name: 'Baja Verapaz',
            },
            {
                code: 'GT03',
                name: 'Chimaltenango',
            },
            {
                code: 'GT04',
                name: 'Chiquimula',
            },
            {
                code: 'GT05',
                name: 'El Progreso',
            },
            {
                code: 'GT06',
                name: 'Escuintla',
            },
            {
                code: 'GT07',
                name: 'Guatemala',
            },
            {
                code: 'GT08',
                name: 'Huehuetenango',
            },
            {
                code: 'GT09',
                name: 'Izabal',
            },
            {
                code: 'GT10',
                name: 'Jalapa',
            },
            {
                code: 'GT11',
                name: 'Jutiapa',
            },
            {
                code: 'GT12',
                name: 'Petén',
            },
            {
                code: 'GT13',
                name: 'Quetzaltenango',
            },
            {
                code: 'GT14',
                name: 'Quiché',
            },
            {
                code: 'GT15',
                name: 'Retalhuleu',
            },
            {
                code: 'GT16',
                name: 'Sacatepéquez',
            },
            {
                code: 'GT17',
                name: 'San Marcos',
            },
            {
                code: 'GT18',
                name: 'Santa Rosa',
            },
            {
                code: 'GT19',
                name: 'Sololá',
            },
            {
                code: 'GT20',
                name: 'Suchitepéquez',
            },
            {
                code: 'GT21',
                name: 'Totonicapán',
            },
            {
                code: 'GT22',
                name: 'Zacapa',
            },
        ],
    },
    {
        code: 'GG',
        id: 2420,
        name: 'Guernsey',
        states: [],
    },
    {
        code: 'GN',
        id: 2255,
        name: 'Guinea',
        states: [
            {
                code: 'GV01',
                name: 'Beyla',
            },
            {
                code: 'GV02',
                name: 'Boffa',
            },
            {
                code: 'GV03',
                name: 'Boké',
            },
            {
                code: 'GV04',
                name: 'Conakry',
            },
            {
                code: 'GV30',
                name: 'Coyah',
            },
            {
                code: 'GV05',
                name: 'Dabola',
            },
            {
                code: 'GV06',
                name: 'Dalaba',
            },
            {
                code: 'GV07',
                name: 'Dinguiraye',
            },
            {
                code: 'GV31',
                name: 'Dubréka',
            },
            {
                code: 'GV09',
                name: 'Faranah',
            },
            {
                code: 'GV10',
                name: 'Forécariah',
            },
            {
                code: 'GV11',
                name: 'Fria',
            },
            {
                code: 'GV12',
                name: 'Gaoual',
            },
            {
                code: 'GV13',
                name: 'Guéckédou',
            },
            {
                code: 'GV32',
                name: 'Kankan',
            },
            {
                code: 'GV15',
                name: 'Kérouané',
            },
            {
                code: 'GV16',
                name: 'Kindia',
            },
            {
                code: 'GV17',
                name: 'Kissidougou',
            },
            {
                code: 'GV33',
                name: 'Koubia',
            },
            {
                code: 'GV18',
                name: 'Koundara',
            },
            {
                code: 'GV19',
                name: 'Kouroussa',
            },
            {
                code: 'GV34',
                name: 'Labé',
            },
            {
                code: 'GV35',
                name: 'Lélouma',
            },
            {
                code: 'GV36',
                name: 'Lola',
            },
            {
                code: 'GV21',
                name: 'Macenta',
            },
            {
                code: 'GV22',
                name: 'Mali',
            },
            {
                code: 'GV23',
                name: 'Mamou',
            },
            {
                code: 'GV37',
                name: 'Mandiana',
            },
            {
                code: 'GV38',
                name: 'Nzérékoré',
            },
            {
                code: 'GV25',
                name: 'Pita',
            },
            {
                code: 'GV39',
                name: 'Siguiri',
            },
            {
                code: 'GV27',
                name: 'Télimélé',
            },
            {
                code: 'GV28',
                name: 'Tougué',
            },
            {
                code: 'GV29',
                name: 'Yomou',
            },
        ],
    },
    {
        code: 'GW',
        id: 2256,
        name: 'Guinea-Bissau',
        states: [
            {
                code: 'PU01',
                name: 'Bafatá',
            },
            {
                code: 'PU12',
                name: 'Biombo',
            },
            {
                code: 'PU11',
                name: 'Bissau',
            },
            {
                code: 'PU05',
                name: 'Bolama',
            },
            {
                code: 'PU06',
                name: 'Cacheu',
            },
            {
                code: 'PU10',
                name: 'Gabú',
            },
            {
                code: 'PU04',
                name: 'Oio',
            },
            {
                code: 'PU02',
                name: 'Quinara',
            },
            {
                code: 'PU07',
                name: 'Tombali',
            },
        ],
    },
    {
        code: 'GY',
        id: 2257,
        name: 'Guyana',
        states: [
            {
                code: 'GY10',
                name: 'Barima-Waini',
            },
            {
                code: 'GY11',
                name: 'Cuyuni-Mazaruni',
            },
            {
                code: 'GY12',
                name: 'Demerara-Mahaica',
            },
            {
                code: 'GY13',
                name: 'East Berbice-Corentyne',
            },
            {
                code: 'GY14',
                name: 'Essequibo Islands-West Demerara',
            },
            {
                code: 'GY15',
                name: 'Mahaica-Berbice',
            },
            {
                code: 'GY16',
                name: 'Pomeroon-Supenaam',
            },
            {
                code: 'GY17',
                name: 'Potaro-Siparuni',
            },
            {
                code: 'GY18',
                name: 'Upper Demerara-Berbice',
            },
            {
                code: 'GY19',
                name: 'Upper Takutu-Upper Essequibo',
            },
        ],
    },
    {
        code: 'HT',
        id: 2258,
        name: 'Haiti',
        states: [
            {
                code: 'HA07',
                name: 'Centre',
            },
            {
                code: 'HA14',
                name: "Grand' Anse",
            },
            {
                code: 'HA06',
                name: "L'Artibonite",
            },
            {
                code: 'HA15',
                name: 'Nippes',
            },
            {
                code: 'HA10',
                name: 'Nord-Est',
            },
            {
                code: 'HA03',
                name: 'Nord-Ouest',
            },
            {
                code: 'HA09',
                name: 'Nord',
            },
            {
                code: 'HA11',
                name: 'Ouest',
            },
            {
                code: 'HA13',
                name: 'Sud-Est',
            },
            {
                code: 'HA12',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'HM',
        id: 2421,
        name: 'Heard and McDonald Islands',
        states: [],
    },
    {
        code: 'VA',
        id: 2362,
        name: 'Holy See (Vatican City State)',
        states: [],
    },
    {
        code: 'HN',
        id: 2259,
        name: 'Honduras',
        states: [
            {
                code: 'HO01',
                name: 'Atlántida',
            },
            {
                code: 'HO02',
                name: 'Choluteca',
            },
            {
                code: 'HO03',
                name: 'Colón',
            },
            {
                code: 'HO04',
                name: 'Comayagua',
            },
            {
                code: 'HO05',
                name: 'Copán',
            },
            {
                code: 'HO06',
                name: 'Cortés',
            },
            {
                code: 'HO07',
                name: 'El Paraíso',
            },
            {
                code: 'HO08',
                name: 'Francisco Morazán',
            },
            {
                code: 'HO09',
                name: 'Gracias a Dios',
            },
            {
                code: 'HO10',
                name: 'Intibucá',
            },
            {
                code: 'HO11',
                name: 'Islas de la Bahía',
            },
            {
                code: 'HO12',
                name: 'La Paz',
            },
            {
                code: 'HO13',
                name: 'Lempira',
            },
            {
                code: 'HO14',
                name: 'Ocotepeque',
            },
            {
                code: 'HO15',
                name: 'Olancho',
            },
            {
                code: 'HO16',
                name: 'Santa Bárbara',
            },
            {
                code: 'HO17',
                name: 'Valle',
            },
            {
                code: 'HO18',
                name: 'Yoro',
            },
        ],
    },
    {
        code: 'HK',
        id: 2377,
        name: 'Hong Kong',
        states: [
            {
                code: 'HK001',
                name: 'Hong Kong Island',
            },
            {
                code: 'HK002',
                name: 'Kowloon',
            },
            {
                code: 'HK003',
                name: 'New Territories',
            },
        ],
    },
    {
        code: 'HU',
        id: 2260,
        name: 'Hungary',
        states: [
            {
                code: 'BK',
                name: 'Bács-Kiskun',
            },
            {
                code: 'BA',
                name: 'Baranya',
            },
            {
                code: 'BE',
                name: 'Békés',
            },
            {
                code: 'BC',
                name: 'Békéscsaba',
            },
            {
                code: 'BZ',
                name: 'Borsod-Abaúj-Zemplén',
            },
            {
                code: 'BU',
                name: 'Budapest',
            },
            {
                code: 'CS',
                name: 'Csongrád',
            },
            {
                code: 'DE',
                name: 'Debrecen',
            },
            {
                code: 'DU',
                name: 'Dunaújváros',
            },
            {
                code: 'EG',
                name: 'Eger',
            },
            {
                code: 'ER',
                name: 'Erd',
            },
            {
                code: 'FE',
                name: 'Fejér',
            },
            {
                code: 'GY',
                name: 'Gyor',
            },
            {
                code: 'GS',
                name: 'Gyor-Moson-Sopron',
            },
            {
                code: 'HB',
                name: 'Hajdú-Bihar',
            },
            {
                code: 'HE',
                name: 'Heves',
            },
            {
                code: 'HV',
                name: 'Hódmezovásárhely',
            },
            {
                code: 'JN',
                name: 'Jász-Nagykun-Szolnok',
            },
            {
                code: 'KV',
                name: 'Kaposvár',
            },
            {
                code: 'KM',
                name: 'Kecskemét',
            },
            {
                code: 'KE',
                name: 'Komárom-Esztergom',
            },
            {
                code: 'MI',
                name: 'Miskolc',
            },
            {
                code: 'NK',
                name: 'Nagykanizsa',
            },
            {
                code: 'NO',
                name: 'Nógrád',
            },
            {
                code: 'NY',
                name: 'Nyíregyháza',
            },
            {
                code: 'PS',
                name: 'Pécs',
            },
            {
                code: 'PE',
                name: 'Pest',
            },
            {
                code: 'ST',
                name: 'Salgótarján',
            },
            {
                code: 'SO',
                name: 'Somogy',
            },
            {
                code: 'SN',
                name: 'Sopron',
            },
            {
                code: 'SZ',
                name: 'Szabolcs-Szatmár-Bereg',
            },
            {
                code: 'SD',
                name: 'Szeged',
            },
            {
                code: 'SF',
                name: 'Székesfehérvár',
            },
            {
                code: 'SS',
                name: 'Szekszárd',
            },
            {
                code: 'SK',
                name: 'Szolnok',
            },
            {
                code: 'SH',
                name: 'Szombathely',
            },
            {
                code: 'TB',
                name: 'Tatabánya',
            },
            {
                code: 'TO',
                name: 'Tolna',
            },
            {
                code: 'VA',
                name: 'Vas',
            },
            {
                code: 'VE',
                name: 'Veszprém',
            },
            {
                code: 'VM',
                name: 'Veszprém City',
            },
            {
                code: 'ZA',
                name: 'Zala',
            },
            {
                code: 'ZE',
                name: 'Zalaegerszeg',
            },
        ],
    },
    {
        code: 'IS',
        id: 2261,
        name: 'Iceland',
        states: [
            {
                code: '7',
                name: 'Austurland',
            },
            {
                code: '1',
                name: 'Höfuðborgarsvæði utan Reykjavíkur',
            },
            {
                code: '6',
                name: 'Norðurland eystra',
            },
            {
                code: '5',
                name: 'Norðurland vestra',
            },
            {
                code: '0',
                name: 'Reykjavík',
            },
            {
                code: '8',
                name: 'Suðurland',
            },
            {
                code: '2',
                name: 'Suðurnes',
            },
            {
                code: '4',
                name: 'Vestfirðir',
            },
            {
                code: '3',
                name: 'Vesturland',
            },
        ],
    },
    {
        code: 'IN',
        id: 2262,
        name: 'India',
        states: [
            {
                code: 'AN',
                name: 'Andaman and Nicobar Islands',
            },
            {
                code: 'AP',
                name: 'Andhra Pradesh',
            },
            {
                code: 'AR',
                name: 'Arunachal Pradesh',
            },
            {
                code: 'AS',
                name: 'Assam',
            },
            {
                code: 'BR',
                name: 'Bihar',
            },
            {
                code: 'CH',
                name: 'Chandigarh',
            },
            {
                code: 'CT',
                name: 'Chhattisgarh',
            },
            {
                code: 'DN',
                name: 'Dadra and Nagar Haveli',
            },
            {
                code: 'DD',
                name: 'Daman and Diu',
            },
            {
                code: 'DL',
                name: 'Delhi',
            },
            {
                code: 'GA',
                name: 'Goa',
            },
            {
                code: 'GJ',
                name: 'Gujarat',
            },
            {
                code: 'HR',
                name: 'Haryana',
            },
            {
                code: 'HP',
                name: 'Himachal Pradesh',
            },
            {
                code: 'JK',
                name: 'Jammu and Kashmir',
            },
            {
                code: 'JH',
                name: 'Jharkhand',
            },
            {
                code: 'KA',
                name: 'Karnataka',
            },
            {
                code: 'KL',
                name: 'Kerala',
            },
            {
                code: 'LD',
                name: 'Lakshadweep',
            },
            {
                code: 'MP',
                name: 'Madhya Pradesh',
            },
            {
                code: 'MH',
                name: 'Maharashtra',
            },
            {
                code: 'MN',
                name: 'Manipur',
            },
            {
                code: 'ML',
                name: 'Meghalaya',
            },
            {
                code: 'MZ',
                name: 'Mizoram',
            },
            {
                code: 'NL',
                name: 'Nagaland',
            },
            {
                code: 'OR',
                name: 'Orissa',
            },
            {
                code: 'PY',
                name: 'Pondicherry',
            },
            {
                code: 'PB',
                name: 'Punjab',
            },
            {
                code: 'RJ',
                name: 'Rajasthan',
            },
            {
                code: 'SK',
                name: 'Sikkim',
            },
            {
                code: 'TN',
                name: 'Tamil Nadu',
            },
            {
                code: 'TG',
                name: 'Telangana',
            },
            {
                code: 'TR',
                name: 'Tripura',
            },
            {
                code: 'UP',
                name: 'Uttar Pradesh',
            },
            {
                code: 'UL',
                name: 'Uttaranchal',
            },
            {
                code: 'WB',
                name: 'West Bengal',
            },
        ],
    },
    {
        code: 'ID',
        id: 2263,
        name: 'Indonesia',
        states: [
            {
                code: 'AC',
                name: 'Aceh',
            },
            {
                code: 'BA',
                name: 'Bali',
            },
            {
                code: 'BB',
                name: 'Bangka Belitung',
            },
            {
                code: 'BT',
                name: 'Banten',
            },
            {
                code: 'BE',
                name: 'Bengkulu',
            },
            {
                code: 'GO',
                name: 'Gorontalo',
            },
            {
                code: 'JK',
                name: 'Jakarta Raya',
            },
            {
                code: 'JA',
                name: 'Jambi',
            },
            {
                code: 'JB',
                name: 'Jawa Barat',
            },
            {
                code: 'JT',
                name: 'Jawa Tengah',
            },
            {
                code: 'JI',
                name: 'Jawa Timur',
            },
            {
                code: 'KB',
                name: 'Kalimantan Barat',
            },
            {
                code: 'KS',
                name: 'Kalimantan Selatan',
            },
            {
                code: 'KT',
                name: 'Kalimantan Tengah',
            },
            {
                code: 'KI',
                name: 'Kalimantan Timur',
            },
            {
                code: 'KR',
                name: 'Kepulauan Riau',
            },
            {
                code: 'LA',
                name: 'Lampung',
            },
            {
                code: 'MA',
                name: 'Maluku',
            },
            {
                code: 'MU',
                name: 'Maluku Utara',
            },
            {
                code: 'NB',
                name: 'Nusa Tenggara Barat',
            },
            {
                code: 'NT',
                name: 'Nusa Tenggara Timur',
            },
            {
                code: 'PA',
                name: 'Papua',
            },
            {
                code: 'PB',
                name: 'Papua Barat',
            },
            {
                code: 'RI',
                name: 'Riau',
            },
            {
                code: 'SR',
                name: 'Sulawesi Barat',
            },
            {
                code: 'SN',
                name: 'Sulawesi Selatan',
            },
            {
                code: 'ST',
                name: 'Sulawesi Tengah',
            },
            {
                code: 'SG',
                name: 'Sulawesi Tenggara',
            },
            {
                code: 'SA',
                name: 'Sulawesi Utara',
            },
            {
                code: 'SB',
                name: 'Sumatera Barat',
            },
            {
                code: 'SS',
                name: 'Sumatera Selatan',
            },
            {
                code: 'SU',
                name: 'Sumatera Utara',
            },
            {
                code: 'YO',
                name: 'Yogyakarta',
            },
        ],
    },
    {
        code: 'IR',
        id: 2264,
        name: 'Iran; Islamic Republic of',
        states: [
            {
                code: 'IR44',
                name: 'Alborz',
            },
            {
                code: 'IR32',
                name: 'Ardebil',
            },
            {
                code: 'IR22',
                name: 'Bushehr',
            },
            {
                code: 'IR03',
                name: 'Chahar Mahall and Bakhtiari',
            },
            {
                code: 'IR33',
                name: 'East Azarbaijan',
            },
            {
                code: 'IR28',
                name: 'Esfahan',
            },
            {
                code: 'IR07',
                name: 'Fars',
            },
            {
                code: 'IR08',
                name: 'Gilan',
            },
            {
                code: 'IR37',
                name: 'Golestan',
            },
            {
                code: 'IR09',
                name: 'Hamadan',
            },
            {
                code: 'IR11',
                name: 'Hormozgan',
            },
            {
                code: 'IR42',
                name: 'IRazavi Khorasan',
            },
            {
                code: 'IR10',
                name: 'Ilam',
            },
            {
                code: 'IR29',
                name: 'Kerman',
            },
            {
                code: 'IR13',
                name: 'Kermanshah',
            },
            {
                code: 'IR15',
                name: 'Khuzestan',
            },
            {
                code: 'IR05',
                name: 'Kohgiluyeh and Buyer Ahmad',
            },
            {
                code: 'IR16',
                name: 'Kordestan',
            },
            {
                code: 'IR23',
                name: 'Lorestan',
            },
            {
                code: 'IR34',
                name: 'Markazi',
            },
            {
                code: 'IR35',
                name: 'Mazandaran',
            },
            {
                code: 'IR43',
                name: 'North Khorasan',
            },
            {
                code: 'IR38',
                name: 'Qazvin',
            },
            {
                code: 'IR39',
                name: 'Qom',
            },
            {
                code: 'IR25',
                name: 'Semnan',
            },
            {
                code: 'IR04',
                name: 'Sistan and Baluchestan',
            },
            {
                code: 'IR41',
                name: 'South Khorasan',
            },
            {
                code: 'IR26',
                name: 'Tehran',
            },
            {
                code: 'IR01',
                name: 'West Azarbaijan',
            },
            {
                code: 'IR40',
                name: 'Yazd',
            },
            {
                code: 'IR36',
                name: 'Zanjan',
            },
        ],
    },
    {
        code: 'IQ',
        id: 2265,
        name: 'Iraq',
        states: [
            {
                code: 'IZ01',
                name: 'Al-Anbar',
            },
            {
                code: 'IZ02',
                name: 'Al-Basrah',
            },
            {
                code: 'IZ03',
                name: 'Al-Muthanna',
            },
            {
                code: 'IZ04',
                name: 'Al-Qadisiyah',
            },
            {
                code: 'IZ17',
                name: 'An-Najaf',
            },
            {
                code: 'IZ11',
                name: 'Arbil',
            },
            {
                code: 'IZ05',
                name: 'As-Sulaymaniyah',
            },
            {
                code: 'IZ13',
                name: "At-Ta'mim",
            },
            {
                code: 'IZ06',
                name: 'Babil',
            },
            {
                code: 'IZ07',
                name: 'Baghdad',
            },
            {
                code: 'IZ08',
                name: 'Dahuk',
            },
            {
                code: 'IZ09',
                name: 'Dhi Qar',
            },
            {
                code: 'IZ10',
                name: 'Diyala',
            },
            {
                code: 'IZ12',
                name: 'Karbala',
            },
            {
                code: 'IZ14',
                name: 'Maysan',
            },
            {
                code: 'IZ15',
                name: 'Ninawa',
            },
            {
                code: 'IZ18',
                name: 'Salah ad-Din',
            },
            {
                code: 'IZ16',
                name: 'Wasit',
            },
        ],
    },
    {
        code: 'IE',
        id: 2266,
        name: 'Ireland',
        states: [
            {
                code: 'CW',
                name: 'Carlow',
            },
            {
                code: 'CN',
                name: 'Cavan',
            },
            {
                code: 'CE',
                name: 'Clare',
            },
            {
                code: 'C',
                name: 'Connacht',
            },
            {
                code: 'CO',
                name: 'Cork',
            },
            {
                code: 'DL',
                name: 'Donegal',
            },
            {
                code: 'D',
                name: 'Dublin',
            },
            {
                code: 'G',
                name: 'Galway',
            },
            {
                code: 'KY',
                name: 'Kerry',
            },
            {
                code: 'KE',
                name: 'Kildare',
            },
            {
                code: 'KK',
                name: 'Kilkenny',
            },
            {
                code: 'LS',
                name: 'Laois',
            },
            {
                code: 'L',
                name: 'Leinster',
            },
            {
                code: 'LM',
                name: 'Leitrim',
            },
            {
                code: 'LK',
                name: 'Limerick',
            },
            {
                code: 'LD',
                name: 'Longford',
            },
            {
                code: 'LH',
                name: 'Louth',
            },
            {
                code: 'MO',
                name: 'Mayo',
            },
            {
                code: 'MH',
                name: 'Meath',
            },
            {
                code: 'MN',
                name: 'Monaghan',
            },
            {
                code: 'M',
                name: 'Munster',
            },
            {
                code: 'OY',
                name: 'Offaly',
            },
            {
                code: 'RN',
                name: 'Roscommon',
            },
            {
                code: 'SO',
                name: 'Sligo',
            },
            {
                code: 'TA',
                name: 'Tipperary',
            },
            {
                code: 'U',
                name: 'Ulster',
            },
            {
                code: 'WD',
                name: 'Waterford',
            },
            {
                code: 'WH',
                name: 'Westmeath',
            },
            {
                code: 'WX',
                name: 'Wexford',
            },
            {
                code: 'WW',
                name: 'Wicklow',
            },
        ],
    },
    {
        code: 'IM',
        id: 2445,
        name: 'Isle of Man',
        states: [],
    },
    {
        code: 'IL',
        id: 2267,
        name: 'Israel',
        states: [
            {
                code: 'IS01',
                name: 'HaDarom',
            },
            {
                code: 'IS02',
                name: 'HaMerkaz',
            },
            {
                code: 'IS03',
                name: 'HaZafon',
            },
            {
                code: 'IS04',
                name: 'Haifa',
            },
            {
                code: 'IS06',
                name: 'Jerusalem',
            },
            {
                code: 'IS05',
                name: 'Tel Aviv',
            },
        ],
    },
    {
        code: 'IT',
        id: 2268,
        name: 'Italy',
        states: [
            {
                code: '65',
                name: 'Abruzzo',
            },
            {
                code: 'AG',
                name: 'Agrigento',
            },
            {
                code: 'AL',
                name: 'Alessandria',
            },
            {
                code: 'AN',
                name: 'Ancona',
            },
            {
                code: 'AO',
                name: 'Aosta',
            },
            {
                code: 'AR',
                name: 'Arezzo',
            },
            {
                code: 'AP',
                name: 'Ascoli Piceno',
            },
            {
                code: 'AT',
                name: 'Asti',
            },
            {
                code: 'AV',
                name: 'Avellino',
            },
            {
                code: 'BA',
                name: 'Bari',
            },
            {
                code: 'BT',
                name: 'Barletta-Andria-Trani',
            },
            {
                code: '77',
                name: 'Basilicata',
            },
            {
                code: 'BL',
                name: 'Belluno',
            },
            {
                code: 'BN',
                name: 'Benevento',
            },
            {
                code: 'BG',
                name: 'Bergamo',
            },
            {
                code: 'BI',
                name: 'Biella',
            },
            {
                code: 'BO',
                name: 'Bologna',
            },
            {
                code: 'BZ',
                name: 'Bolzano',
            },
            {
                code: 'BS',
                name: 'Brescia',
            },
            {
                code: 'BR',
                name: 'Brindisi',
            },
            {
                code: 'CA',
                name: 'Cagliari',
            },
            {
                code: '78',
                name: 'Calabria',
            },
            {
                code: 'CL',
                name: 'Caltanissetta',
            },
            {
                code: '72',
                name: 'Campania',
            },
            {
                code: 'CB',
                name: 'Campobasso',
            },
            {
                code: 'CI',
                name: 'Carbonia-Iglesias',
            },
            {
                code: 'CE',
                name: 'Caserta',
            },
            {
                code: 'CT',
                name: 'Catania',
            },
            {
                code: 'CZ',
                name: 'Catanzaro',
            },
            {
                code: 'CH',
                name: 'Chieti',
            },
            {
                code: 'CO',
                name: 'Como',
            },
            {
                code: 'CS',
                name: 'Cosenza',
            },
            {
                code: 'CR',
                name: 'Cremona',
            },
            {
                code: 'KR',
                name: 'Crotone',
            },
            {
                code: 'CN',
                name: 'Cuneo',
            },
            {
                code: '45',
                name: 'Emilia-Romagna',
            },
            {
                code: 'EN',
                name: 'Enna',
            },
            {
                code: 'FM',
                name: 'Fermo',
            },
            {
                code: 'FE',
                name: 'Ferrara',
            },
            {
                code: 'FI',
                name: 'Firenze',
            },
            {
                code: 'FG',
                name: 'Foggia',
            },
            {
                code: 'FC',
                name: 'Forli-Cesena',
            },
            {
                code: '36',
                name: 'Friuli-Venezia Giulia',
            },
            {
                code: 'FR',
                name: 'Frosinone',
            },
            {
                code: 'GE',
                name: 'Genova',
            },
            {
                code: 'GO',
                name: 'Gorizia',
            },
            {
                code: 'GR',
                name: 'Grosseto',
            },
            {
                code: 'IM',
                name: 'Imperia',
            },
            {
                code: 'IS',
                name: 'Isernia',
            },
            {
                code: 'AQ',
                name: "L'Aquila",
            },
            {
                code: 'SP',
                name: 'La Spezia',
            },
            {
                code: 'LT',
                name: 'Latina',
            },
            {
                code: '62',
                name: 'Lazio',
            },
            {
                code: 'LE',
                name: 'Lecce',
            },
            {
                code: 'LC',
                name: 'Lecco',
            },
            {
                code: '42',
                name: 'Liguria',
            },
            {
                code: 'LI',
                name: 'Livorno',
            },
            {
                code: 'LO',
                name: 'Lodi',
            },
            {
                code: '25',
                name: 'Lombardia',
            },
            {
                code: 'LU',
                name: 'Lucca',
            },
            {
                code: 'MC',
                name: 'Macerata',
            },
            {
                code: 'MN',
                name: 'Mantova',
            },
            {
                code: '57',
                name: 'Marche',
            },
            {
                code: 'MS',
                name: 'Massa-Carrara',
            },
            {
                code: 'MT',
                name: 'Matera',
            },
            {
                code: 'VS',
                name: 'Medio Campidano',
            },
            {
                code: 'ME',
                name: 'Messina',
            },
            {
                code: 'MI',
                name: 'Milano',
            },
            {
                code: 'MO',
                name: 'Modena',
            },
            {
                code: '67',
                name: 'Molise',
            },
            {
                code: 'MB',
                name: 'Monza e Brianza',
            },
            {
                code: 'NA',
                name: 'Napoli',
            },
            {
                code: 'NO',
                name: 'Novara',
            },
            {
                code: 'NU',
                name: 'Nuoro',
            },
            {
                code: 'OG',
                name: 'Ogliastra',
            },
            {
                code: 'OT',
                name: 'Olbia-Tempio',
            },
            {
                code: 'OR',
                name: 'Oristano',
            },
            {
                code: 'PD',
                name: 'Padova',
            },
            {
                code: 'PA',
                name: 'Palermo',
            },
            {
                code: 'PR',
                name: 'Parma',
            },
            {
                code: 'PV',
                name: 'Pavia',
            },
            {
                code: 'PG',
                name: 'Perugia',
            },
            {
                code: 'PU',
                name: 'Pesaro e Urbino',
            },
            {
                code: 'PE',
                name: 'Pescara',
            },
            {
                code: 'PC',
                name: 'Piacenza',
            },
            {
                code: '21',
                name: 'Piemonte',
            },
            {
                code: 'PI',
                name: 'Pisa',
            },
            {
                code: 'PT',
                name: 'Pistoia',
            },
            {
                code: 'PN',
                name: 'Pordenone',
            },
            {
                code: 'PZ',
                name: 'Potenza',
            },
            {
                code: 'PO',
                name: 'Prato',
            },
            {
                code: '75',
                name: 'Puglia',
            },
            {
                code: 'RG',
                name: 'Ragusa',
            },
            {
                code: 'RA',
                name: 'Ravenna',
            },
            {
                code: 'RC',
                name: 'Reggio Calabria',
            },
            {
                code: 'RE',
                name: 'Reggio Emilia',
            },
            {
                code: 'RI',
                name: 'Rieti',
            },
            {
                code: 'RN',
                name: 'Rimini',
            },
            {
                code: 'RM',
                name: 'Roma',
            },
            {
                code: 'RO',
                name: 'Rovigo',
            },
            {
                code: 'SA',
                name: 'Salerno',
            },
            {
                code: '88',
                name: 'Sardegna',
            },
            {
                code: 'SS',
                name: 'Sassari',
            },
            {
                code: 'SV',
                name: 'Savona',
            },
            {
                code: '82',
                name: 'Sicilia',
            },
            {
                code: 'SI',
                name: 'Siena',
            },
            {
                code: 'SR',
                name: 'Siracusa',
            },
            {
                code: 'SO',
                name: 'Sondrio',
            },
            {
                code: 'TA',
                name: 'Taranto',
            },
            {
                code: 'TE',
                name: 'Teramo',
            },
            {
                code: 'TR',
                name: 'Terni',
            },
            {
                code: 'TO',
                name: 'Torino',
            },
            {
                code: '52',
                name: 'Toscana',
            },
            {
                code: 'TP',
                name: 'Trapani',
            },
            {
                code: '32',
                name: 'Trentino-Alto Adige',
            },
            {
                code: 'TN',
                name: 'Trento',
            },
            {
                code: 'TV',
                name: 'Treviso',
            },
            {
                code: 'TS',
                name: 'Trieste',
            },
            {
                code: 'UD',
                name: 'Udine',
            },
            {
                code: '55',
                name: 'Umbria',
            },
            {
                code: '23',
                name: "Valle d'Aosta",
            },
            {
                code: 'VA',
                name: 'Varese',
            },
            {
                code: '34',
                name: 'Veneto',
            },
            {
                code: 'VE',
                name: 'Venezia',
            },
            {
                code: 'VB',
                name: 'Verbano-Cusio-Ossola',
            },
            {
                code: 'VC',
                name: 'Vercelli',
            },
            {
                code: 'VR',
                name: 'Verona',
            },
            {
                code: 'VV',
                name: 'Vibo Valentia',
            },
            {
                code: 'VI',
                name: 'Vicenza',
            },
            {
                code: 'VT',
                name: 'Viterbo',
            },
        ],
    },
    {
        code: 'JM',
        id: 2269,
        name: 'Jamaica',
        states: [
            {
                code: 'JM01',
                name: 'Clarendon',
            },
            {
                code: 'JM02',
                name: 'Hanover',
            },
            {
                code: 'JM17',
                name: 'Kingston',
            },
            {
                code: 'JM04',
                name: 'Manchester',
            },
            {
                code: 'JM07',
                name: 'Portland',
            },
            {
                code: 'JM08',
                name: 'Saint Andrew',
            },
            {
                code: 'JM09',
                name: 'Saint Ann',
            },
            {
                code: 'JM10',
                name: 'Saint Catherine',
            },
            {
                code: 'JM11',
                name: 'Saint Elizabeth',
            },
            {
                code: 'JM12',
                name: 'Saint James',
            },
            {
                code: 'JM13',
                name: 'Saint Mary',
            },
            {
                code: 'JM14',
                name: 'Saint Thomas',
            },
            {
                code: 'JM15',
                name: 'Trelawny',
            },
            {
                code: 'JM16',
                name: 'Westmoreland',
            },
        ],
    },
    {
        code: 'JP',
        id: 2270,
        name: 'Japan',
        states: [
            {
                code: 'JP23',
                name: 'Aichi',
            },
            {
                code: 'JP05',
                name: 'Akita',
            },
            {
                code: 'JP02',
                name: 'Aomori',
            },
            {
                code: 'JP12',
                name: 'Chiba',
            },
            {
                code: 'JP38',
                name: 'Ehime',
            },
            {
                code: 'JP18',
                name: 'Fukui',
            },
            {
                code: 'JP40',
                name: 'Fukuoka',
            },
            {
                code: 'JP07',
                name: 'Fukushima',
            },
            {
                code: 'JP21',
                name: 'Gifu',
            },
            {
                code: 'JP10',
                name: 'Gunma',
            },
            {
                code: 'JP34',
                name: 'Hiroshima',
            },
            {
                code: 'JP01',
                name: 'Hokkaido',
            },
            {
                code: 'JP28',
                name: 'Hyogo',
            },
            {
                code: 'JP08',
                name: 'Ibaraki',
            },
            {
                code: 'JP17',
                name: 'Ishikawa',
            },
            {
                code: 'JP03',
                name: 'Iwate',
            },
            {
                code: 'JP37',
                name: 'Kagawa',
            },
            {
                code: 'JP46',
                name: 'Kagoshima',
            },
            {
                code: 'JP14',
                name: 'Kanagawa',
            },
            {
                code: 'JP39',
                name: 'Kochi',
            },
            {
                code: 'JP43',
                name: 'Kumamoto',
            },
            {
                code: 'JP26',
                name: 'Kyoto',
            },
            {
                code: 'JP24',
                name: 'Mie',
            },
            {
                code: 'JP04',
                name: 'Miyagi',
            },
            {
                code: 'JP45',
                name: 'Miyazaki',
            },
            {
                code: 'JP20',
                name: 'Nagano',
            },
            {
                code: 'JP42',
                name: 'Nagasaki',
            },
            {
                code: 'JP29',
                name: 'Nara',
            },
            {
                code: 'JP15',
                name: 'Niigata',
            },
            {
                code: 'JP44',
                name: 'Oita',
            },
            {
                code: 'JP33',
                name: 'Okayama',
            },
            {
                code: 'JP47',
                name: 'Okinawa',
            },
            {
                code: 'JP27',
                name: 'Osaka',
            },
            {
                code: 'JP41',
                name: 'Saga',
            },
            {
                code: 'JP11',
                name: 'Saitama',
            },
            {
                code: 'JP25',
                name: 'Shiga',
            },
            {
                code: 'JP32',
                name: 'Shimane',
            },
            {
                code: 'JP22',
                name: 'Shizuoka',
            },
            {
                code: 'JP09',
                name: 'Tochigi',
            },
            {
                code: 'JP36',
                name: 'Tokushima',
            },
            {
                code: 'JP13',
                name: 'Tokyo',
            },
            {
                code: 'JP31',
                name: 'Tottori',
            },
            {
                code: 'JP16',
                name: 'Toyama',
            },
            {
                code: 'JP30',
                name: 'Wakayama',
            },
            {
                code: 'JP06',
                name: 'Yamagata',
            },
            {
                code: 'JP35',
                name: 'Yamaguchi',
            },
            {
                code: 'JP19',
                name: 'Yamanashi',
            },
        ],
    },
    {
        code: 'JE',
        id: 2422,
        name: 'Jersey',
        states: [],
    },
    {
        code: 'JO',
        id: 2271,
        name: 'Jordan',
        states: [
            {
                code: 'JO01',
                name: 'Ajlun',
            },
            {
                code: 'JO02',
                name: 'Amman',
            },
            {
                code: 'JO03',
                name: 'Aqaba',
            },
            {
                code: 'JO04',
                name: 'Balqa',
            },
            {
                code: 'JO05',
                name: 'Irbid',
            },
            {
                code: 'JO06',
                name: 'JarasJ',
            },
            {
                code: 'JO07',
                name: 'Karak',
            },
            {
                code: 'JO08',
                name: "Ma'an",
            },
            {
                code: 'JO09',
                name: 'Madaba',
            },
            {
                code: 'JO10',
                name: 'Mafraq',
            },
            {
                code: 'JO11',
                name: 'Tafilah',
            },
            {
                code: 'JO12',
                name: 'Zarqa',
            },
        ],
    },
    {
        code: 'KZ',
        id: 2272,
        name: 'Kazakhstan',
        states: [
            {
                code: 'KZ01',
                name: 'Almaty',
            },
            {
                code: 'KZ02',
                name: 'Almaty (City)',
            },
            {
                code: 'KZ03',
                name: 'Aqmola',
            },
            {
                code: 'KZ04',
                name: 'Aqtöbe',
            },
            {
                code: 'KZ05',
                name: 'Astana',
            },
            {
                code: 'KZ06',
                name: 'Atyrau',
            },
            {
                code: 'KZ08',
                name: 'Bayqonyr',
            },
            {
                code: 'KZ15',
                name: 'East Kazakhstan',
            },
            {
                code: 'KZ09',
                name: 'Mangghystau',
            },
            {
                code: 'KZ16',
                name: 'North Kazakhstan',
            },
            {
                code: 'KZ11',
                name: 'Pavlodar',
            },
            {
                code: 'KZ12',
                name: 'Qaraghandy',
            },
            {
                code: 'KZ13',
                name: 'Qostanay',
            },
            {
                code: 'KZ14',
                name: 'Qyzylorda',
            },
            {
                code: 'KZ10',
                name: 'South Kazakhstan',
            },
            {
                code: 'KZ07',
                name: 'West Kazakhstan',
            },
            {
                code: 'KZ17',
                name: 'Zhambyl',
            },
        ],
    },
    {
        code: 'KE',
        id: 2273,
        name: 'Kenya',
        states: [
            {
                code: 'KE10',
                name: 'Baringo',
            },
            {
                code: 'KE11',
                name: 'Bomet',
            },
            {
                code: 'KE12',
                name: 'Bungoma',
            },
            {
                code: 'KE13',
                name: 'Busia',
            },
            {
                code: 'KE14',
                name: 'Elgeyo Marakwet',
            },
            {
                code: 'KE15',
                name: 'Embu',
            },
            {
                code: 'KE16',
                name: 'Garissa',
            },
            {
                code: 'KE17',
                name: 'Homa Bay',
            },
            {
                code: 'KE18',
                name: 'Isiolo',
            },
            {
                code: 'KE19',
                name: 'Kajiado',
            },
            {
                code: 'KE20',
                name: 'Kakamega',
            },
            {
                code: 'KE21',
                name: 'Kericho',
            },
            {
                code: 'KE22',
                name: 'Kiambu',
            },
            {
                code: 'KE23',
                name: 'Kilifi',
            },
            {
                code: 'KE24',
                name: 'Kirinyaga',
            },
            {
                code: 'KE25',
                name: 'Kisii',
            },
            {
                code: 'KE26',
                name: 'Kisumu',
            },
            {
                code: 'KE27',
                name: 'Kitui',
            },
            {
                code: 'KE28',
                name: 'Kwale',
            },
            {
                code: 'KE29',
                name: 'Laikipia',
            },
            {
                code: 'KE30',
                name: 'Lamu',
            },
            {
                code: 'KE31',
                name: 'Machakos',
            },
            {
                code: 'KE32',
                name: 'Makueni',
            },
            {
                code: 'KE33',
                name: 'Mandera',
            },
            {
                code: 'KE34',
                name: 'Marsabit',
            },
            {
                code: 'KE35',
                name: 'Meru',
            },
            {
                code: 'KE36',
                name: 'Migori',
            },
            {
                code: 'KE37',
                name: 'Mombasa',
            },
            {
                code: 'KE38',
                name: 'Murang',
            },
            {
                code: 'KE05',
                name: 'Nairobi',
            },
            {
                code: 'KE39',
                name: 'Nakuru',
            },
            {
                code: 'KE40',
                name: 'Nandi',
            },
            {
                code: 'KE41',
                name: 'Narok',
            },
            {
                code: 'KE42',
                name: 'Nyamira',
            },
            {
                code: 'KE43',
                name: 'Nyandarua',
            },
            {
                code: 'KE44',
                name: 'Nyeri',
            },
            {
                code: 'KE45',
                name: 'Samburu',
            },
            {
                code: 'KE46',
                name: 'Siaya',
            },
            {
                code: 'KE47',
                name: 'Taita Taveta',
            },
            {
                code: 'KE48',
                name: 'Tana River',
            },
            {
                code: 'KE49',
                name: 'Tharaka Nithi',
            },
            {
                code: 'KE50',
                name: 'Trans Nzoia',
            },
            {
                code: 'KE51',
                name: 'Turkana',
            },
            {
                code: 'KE52',
                name: 'Uasin Gishu',
            },
            {
                code: 'KE53',
                name: 'Vihiga',
            },
            {
                code: 'KE54',
                name: 'Wajir',
            },
            {
                code: 'KE55',
                name: 'West Pokot',
            },
        ],
    },
    {
        code: 'KI',
        id: 2391,
        name: 'Kiribati',
        states: [],
    },
    {
        code: 'KP',
        id: 2274,
        name: "Korea; Democratic People's Republic Of (North)",
        states: [
            {
                code: 'KN01',
                name: 'Chagang-do',
            },
            {
                code: 'KN17',
                name: 'Hamgyong-bukto',
            },
            {
                code: 'KN03',
                name: 'Hamgyong-namdo',
            },
            {
                code: 'KN07',
                name: 'Hwanghae-bukto',
            },
            {
                code: 'KN06',
                name: 'Hwanghae-namdo',
            },
            {
                code: 'KN09',
                name: 'Kangwon-do',
            },
            {
                code: 'KN18',
                name: 'Najin Sonbong-si',
            },
            {
                code: 'KN11',
                name: "P'yongan-bukto",
            },
            {
                code: 'KN15',
                name: "P'yongan-namdo",
            },
            {
                code: 'KN12',
                name: "P'yongyang-si",
            },
            {
                code: 'KN13',
                name: 'Yanggang-do',
            },
        ],
    },
    {
        code: 'KR',
        id: 2275,
        name: 'Korea; Republic Of (South)',
        states: [
            {
                code: 'KS10',
                name: 'Busan',
            },
            {
                code: 'KS05',
                name: 'Chungcheongbuk-do',
            },
            {
                code: 'KS17',
                name: 'Chungcheongnam-do',
            },
            {
                code: 'KS15',
                name: 'Daegu',
            },
            {
                code: 'KS19',
                name: 'Daejeon',
            },
            {
                code: 'KS06',
                name: 'Gangwon-do',
            },
            {
                code: 'KS18',
                name: 'Gwangju',
            },
            {
                code: 'KS13',
                name: 'Gyeonggi-do',
            },
            {
                code: 'KS14',
                name: 'Gyeongsangbuk-do',
            },
            {
                code: 'KS20',
                name: 'Gyeongsangnam-do',
            },
            {
                code: 'KS12',
                name: 'Incheon',
            },
            {
                code: 'KS01',
                name: 'Jeju-do',
            },
            {
                code: 'KS03',
                name: 'Jeollabuk-do',
            },
            {
                code: 'KS16',
                name: 'Jeollanam-do',
            },
            {
                code: 'KS22',
                name: 'Sejong',
            },
            {
                code: 'KS11',
                name: 'Seoul',
            },
            {
                code: 'KS21',
                name: 'Ulsan',
            },
        ],
    },
    {
        code: 'KV',
        id: 2392,
        name: 'Kosovo',
        states: [],
    },
    {
        code: 'KW',
        id: 2276,
        name: 'Kuwait',
        states: [
            {
                code: 'KU04',
                name: 'Al Ahmadi',
            },
            {
                code: 'KU07',
                name: 'Al Farwaniyah',
            },
            {
                code: 'KU05',
                name: 'Al Jahrah',
            },
            {
                code: 'KU02',
                name: 'Al Kuwayt',
            },
            {
                code: 'KU08',
                name: 'Hawalli',
            },
            {
                code: 'KU09',
                name: 'Mubarak Al-Kabir',
            },
        ],
    },
    {
        code: 'KG',
        id: 2277,
        name: 'Kyrgyzstan',
        states: [
            {
                code: 'KG09',
                name: 'Batken',
            },
            {
                code: 'KG01',
                name: 'Bishkek',
            },
            {
                code: 'KG02',
                name: 'Chüy',
            },
            {
                code: 'KG03',
                name: 'Jalal-Abad',
            },
            {
                code: 'KG04',
                name: 'Naryn',
            },
            {
                code: 'KG10',
                name: 'Osh [City]',
            },
            {
                code: 'KG08',
                name: 'Osh',
            },
            {
                code: 'KG06',
                name: 'Talas',
            },
            {
                code: 'KG07',
                name: 'Ysyk-Köl',
            },
        ],
    },
    {
        code: 'LA',
        id: 2278,
        name: "Lao People's Democratic Republic",
        states: [
            {
                code: 'LA01',
                name: 'Attapu',
            },
            {
                code: 'LA22',
                name: 'Bokeo',
            },
            {
                code: 'LA23',
                name: 'Bolikhamxai',
            },
            {
                code: 'LA02',
                name: 'Champasak',
            },
            {
                code: 'LA03',
                name: 'Houaphan',
            },
            {
                code: 'LA15',
                name: 'Khammouan',
            },
            {
                code: 'LA16',
                name: 'Louang Namtha',
            },
            {
                code: 'LA17',
                name: 'Louangphrabang',
            },
            {
                code: 'LA07',
                name: 'Oudômxai',
            },
            {
                code: 'LA18',
                name: 'Phôngsali',
            },
            {
                code: 'LA19',
                name: 'Saravan',
            },
            {
                code: 'LA20',
                name: 'Savannakhét',
            },
            {
                code: 'LA27',
                name: 'Vientiane',
            },
            {
                code: 'LA24',
                name: 'Vientiane [prefecture]',
            },
            {
                code: 'LA13',
                name: 'Xaignabouri',
            },
            {
                code: 'LA28',
                name: 'Xaisômboun',
            },
            {
                code: 'LA26',
                name: 'Xékong',
            },
            {
                code: 'LA14',
                name: 'Xiangkhoang',
            },
        ],
    },
    {
        code: 'LV',
        id: 2279,
        name: 'Latvia',
        states: [
            {
                code: 'LG34',
                name: 'Adaži',
            },
            {
                code: 'LG35',
                name: 'Aglona',
            },
            {
                code: 'LG36',
                name: 'Aizkraukle',
            },
            {
                code: 'LG37',
                name: 'Aizpute',
            },
            {
                code: 'LG38',
                name: 'Akniste',
            },
            {
                code: 'LG39',
                name: 'Aloja',
            },
            {
                code: 'LG40',
                name: 'Alsunga',
            },
            {
                code: 'LG41',
                name: 'Aluksne',
            },
            {
                code: 'LG42',
                name: 'Amata',
            },
            {
                code: 'LG43',
                name: 'Ape',
            },
            {
                code: 'LG44',
                name: 'Auce',
            },
            {
                code: 'LG45',
                name: 'Babite',
            },
            {
                code: 'LG46',
                name: 'Baldone',
            },
            {
                code: 'LG47',
                name: 'Baltinava',
            },
            {
                code: 'LG48',
                name: 'Balvi',
            },
            {
                code: 'LG49',
                name: 'Bauska',
            },
            {
                code: 'LG50',
                name: 'Beverina',
            },
            {
                code: 'LG51',
                name: 'Broceni',
            },
            {
                code: 'LG52',
                name: 'Burtnieki',
            },
            {
                code: 'LG53',
                name: 'Carnikava',
            },
            {
                code: 'LG54',
                name: 'Cesis',
            },
            {
                code: 'LG55',
                name: 'Cesvaine',
            },
            {
                code: 'LG56',
                name: 'Cibla',
            },
            {
                code: 'LG57',
                name: 'Dagda',
            },
            {
                code: 'LG06',
                name: 'Daugavpils',
            },
            {
                code: 'LG58',
                name: 'Daugavpils',
            },
            {
                code: 'LG59',
                name: 'Dobele',
            },
            {
                code: 'LG60',
                name: 'Dundaga',
            },
            {
                code: 'LG61',
                name: 'Durbe',
            },
            {
                code: 'LG62',
                name: 'Engure',
            },
            {
                code: 'LG63',
                name: 'Ergli',
            },
            {
                code: 'LG64',
                name: 'Garkalne',
            },
            {
                code: 'LG65',
                name: 'Grobina',
            },
            {
                code: 'LG66',
                name: 'Gulbene',
            },
            {
                code: 'LG67',
                name: 'Iecava',
            },
            {
                code: 'LG68',
                name: 'Ikškile',
            },
            {
                code: 'LG69',
                name: 'Ilukste',
            },
            {
                code: 'LG70',
                name: 'Incukalns',
            },
            {
                code: 'LG71',
                name: 'Jaunjelgava',
            },
            {
                code: 'LG72',
                name: 'Jaunpiebalga',
            },
            {
                code: 'LG73',
                name: 'Jaunpils',
            },
            {
                code: 'LG75',
                name: 'Jekabpils',
            },
            {
                code: 'LG74',
                name: 'Jekabpils',
            },
            {
                code: 'LG76',
                name: 'Jelgava',
            },
            {
                code: 'LG11',
                name: 'Jelgava',
            },
            {
                code: 'LG13',
                name: 'Jurmala',
            },
            {
                code: 'LG77',
                name: 'Kandava',
            },
            {
                code: 'LG78',
                name: 'Karsava',
            },
            {
                code: 'LG79',
                name: 'Kegums',
            },
            {
                code: 'LG80',
                name: 'Kekava',
            },
            {
                code: 'LG81',
                name: 'Kocenu',
            },
            {
                code: 'LG82',
                name: 'Koknese',
            },
            {
                code: 'LG83',
                name: 'Kraslava',
            },
            {
                code: 'LG84',
                name: 'Krimulda',
            },
            {
                code: 'LG85',
                name: 'Krustpils',
            },
            {
                code: 'LG86',
                name: 'Kuldiga',
            },
            {
                code: 'LG87',
                name: 'Lielvarde',
            },
            {
                code: 'LG16',
                name: 'Liepaja',
            },
            {
                code: 'LG88',
                name: 'Ligatne',
            },
            {
                code: 'LG89',
                name: 'Limbaži',
            },
            {
                code: 'LG90',
                name: 'Livani',
            },
            {
                code: 'LG91',
                name: 'Lubana',
            },
            {
                code: 'LG92',
                name: 'Ludza',
            },
            {
                code: 'LG93',
                name: 'Madona',
            },
            {
                code: 'LG94',
                name: 'Malpils',
            },
            {
                code: 'LG95',
                name: 'Marupe',
            },
            {
                code: 'LG96',
                name: 'Mazsalaca',
            },
            {
                code: 'LGF1',
                name: 'Mersraga',
            },
            {
                code: 'LG97',
                name: 'Naukšeni',
            },
            {
                code: 'LG98',
                name: 'Nereta',
            },
            {
                code: 'LG99',
                name: 'Nica',
            },
            {
                code: 'LGA1',
                name: 'Ogre',
            },
            {
                code: 'LGA2',
                name: 'Olaine',
            },
            {
                code: 'LGA3',
                name: 'Ozolnieki',
            },
            {
                code: 'LGA4',
                name: 'Pargauja',
            },
            {
                code: 'LGA5',
                name: 'Pavilosta',
            },
            {
                code: 'LGA6',
                name: 'Plavinas',
            },
            {
                code: 'LGA7',
                name: 'Preili',
            },
            {
                code: 'LGA8',
                name: 'Priekule',
            },
            {
                code: 'LGA9',
                name: 'Priekuli',
            },
            {
                code: 'LGB1',
                name: 'Rauna',
            },
            {
                code: 'LGB2',
                name: 'Rezekne',
            },
            {
                code: 'LG23',
                name: 'Rezekne',
            },
            {
                code: 'LGB3',
                name: 'Riebini',
            },
            {
                code: 'LG25',
                name: 'Riga',
            },
            {
                code: 'LGB4',
                name: 'Roja',
            },
            {
                code: 'LGB5',
                name: 'Ropaži',
            },
            {
                code: 'LGB6',
                name: 'Rucava',
            },
            {
                code: 'LGB7',
                name: 'Rugaji',
            },
            {
                code: 'LGB8',
                name: 'Rujiena',
            },
            {
                code: 'LGB9',
                name: 'Rundale',
            },
            {
                code: 'LGC1',
                name: 'Salacgriva',
            },
            {
                code: 'LGC2',
                name: 'Sala',
            },
            {
                code: 'LGC3',
                name: 'Salaspils',
            },
            {
                code: 'LGC4',
                name: 'Saldus',
            },
            {
                code: 'LGC5',
                name: 'Saulkrasti',
            },
            {
                code: 'LGC6',
                name: 'Seja',
            },
            {
                code: 'LGC7',
                name: 'Sigulda',
            },
            {
                code: 'LGC8',
                name: 'Skriveri',
            },
            {
                code: 'LGC9',
                name: 'Skrunda',
            },
            {
                code: 'LGD1',
                name: 'Smiltene',
            },
            {
                code: 'LGD2',
                name: 'Stopini',
            },
            {
                code: 'LGD3',
                name: 'Strenci',
            },
            {
                code: 'LGD4',
                name: 'Talsi',
            },
            {
                code: 'LGD5',
                name: 'Tervete',
            },
            {
                code: 'LGD6',
                name: 'Tukums',
            },
            {
                code: 'LGD7',
                name: 'Vainode',
            },
            {
                code: 'LGD8',
                name: 'Valka',
            },
            {
                code: 'LGD9',
                name: 'Valmiera',
            },
            {
                code: 'LGE1',
                name: 'Varaklani',
            },
            {
                code: 'LGE2',
                name: 'Varkava',
            },
            {
                code: 'LGE3',
                name: 'Vecpiebalga',
            },
            {
                code: 'LGE4',
                name: 'Vecumnieki',
            },
            {
                code: 'LGE5',
                name: 'Ventspils',
            },
            {
                code: 'LG32',
                name: 'Ventspils',
            },
            {
                code: 'LGE6',
                name: 'Viesite',
            },
            {
                code: 'LGE7',
                name: 'Vilaka',
            },
            {
                code: 'LGE8',
                name: 'Vilani',
            },
            {
                code: 'LGE9',
                name: 'Zilupe',
            },
        ],
    },
    {
        code: 'LB',
        id: 2280,
        name: 'Lebanon',
        states: [
            {
                code: 'LE10',
                name: 'Aakkar',
            },
            {
                code: 'LE07',
                name: 'An Nabatiyah',
            },
            {
                code: 'LE11',
                name: 'Baalbek-Hermel',
            },
            {
                code: 'LE04',
                name: 'Beirut',
            },
            {
                code: 'LE08',
                name: 'Beqaa',
            },
            {
                code: 'LE05',
                name: 'Mount Lebanon',
            },
            {
                code: 'LE09',
                name: 'North Lebanon',
            },
            {
                code: 'LE06',
                name: 'South Lebanon',
            },
        ],
    },
    {
        code: 'LS',
        id: 2281,
        name: 'Lesotho',
        states: [
            {
                code: 'LT10',
                name: 'Berea',
            },
            {
                code: 'LT11',
                name: 'Butha-Buthe',
            },
            {
                code: 'LT12',
                name: 'Leribe',
            },
            {
                code: 'LT14',
                name: 'Mafeteng',
            },
            {
                code: 'LT13',
                name: 'Mafeteng',
            },
            {
                code: 'LT15',
                name: "Mohale's Hoek",
            },
            {
                code: 'LT16',
                name: 'Mokhotlong',
            },
            {
                code: 'LT17',
                name: "Qacha's Nek",
            },
            {
                code: 'LT18',
                name: 'Quthing',
            },
            {
                code: 'LT19',
                name: 'Thaba-Tseka',
            },
        ],
    },
    {
        code: 'LR',
        id: 2282,
        name: 'Liberia',
        states: [
            {
                code: 'LI15',
                name: 'Bomi',
            },
            {
                code: 'LI01',
                name: 'Bong',
            },
            {
                code: 'LI21\t',
                name: 'Gbarpolu',
            },
            {
                code: 'LI11',
                name: 'Grand Bassa',
            },
            {
                code: 'LI12',
                name: 'Grand Cape Mount',
            },
            {
                code: 'LI19',
                name: 'Grand Gedeh',
            },
            {
                code: 'LI16',
                name: 'Grand Kru',
            },
            {
                code: 'LI20',
                name: 'Lofa',
            },
            {
                code: 'LI17',
                name: 'Margibi',
            },
            {
                code: 'LI13',
                name: 'Maryland',
            },
            {
                code: 'LI14',
                name: 'Montserrado',
            },
            {
                code: 'LI09',
                name: 'Nimba',
            },
            {
                code: 'LI22',
                name: 'River Gee',
            },
            {
                code: 'LI18',
                name: 'Rivercess',
            },
            {
                code: 'LI10',
                name: 'Sinoe',
            },
        ],
    },
    {
        code: 'LY',
        id: 2380,
        name: 'Libyan Arab Jamahiriya',
        states: [],
    },
    {
        code: 'LI',
        id: 2284,
        name: 'Liechtenstein',
        states: [],
    },
    {
        code: 'LT',
        id: 2285,
        name: 'Lithuania',
        states: [
            {
                code: 'LH56',
                name: 'Alytus',
            },
            {
                code: 'LH57',
                name: 'Kaunas',
            },
            {
                code: 'LH58',
                name: 'Klaipeda',
            },
            {
                code: 'LH59',
                name: 'Marijampole',
            },
            {
                code: 'LH60',
                name: 'Panevežys',
            },
            {
                code: 'LH61',
                name: 'Siauliai',
            },
            {
                code: 'LH62',
                name: 'Taurage',
            },
            {
                code: 'LH63',
                name: 'Telšiai',
            },
            {
                code: 'LH64',
                name: 'Utena',
            },
            {
                code: 'LH65',
                name: 'Vilnius',
            },
        ],
    },
    {
        code: 'LU',
        id: 2286,
        name: 'Luxembourg',
        states: [
            {
                code: 'LU01',
                name: 'Diekirch',
            },
            {
                code: 'LU02',
                name: 'Grevenmacher',
            },
            {
                code: 'LU03',
                name: 'Luxembourg',
            },
        ],
    },
    {
        code: 'MO',
        id: 2287,
        name: 'Macau',
        states: [],
    },
    {
        code: 'MK',
        id: 2288,
        name: 'Macedonia',
        states: [],
    },
    {
        code: 'YU',
        id: 2367,
        name: 'Macedonia; the Former Yugoslav Republic',
        states: [],
    },
    {
        code: 'MG',
        id: 2289,
        name: 'Madagascar',
        states: [
            {
                code: 'MA05',
                name: 'Antananarivo',
            },
            {
                code: 'MA01',
                name: 'Antsiranana',
            },
            {
                code: 'MA02',
                name: 'Fianarantsoa',
            },
            {
                code: 'MA03',
                name: 'Mahajanga',
            },
            {
                code: 'MA04',
                name: 'Toamasina',
            },
            {
                code: 'MA06',
                name: 'Toliara',
            },
        ],
    },
    {
        code: 'MW',
        id: 2290,
        name: 'Malawi',
        states: [
            {
                code: 'MI26',
                name: 'Balaka',
            },
            {
                code: 'MI24',
                name: 'Blantyre',
            },
            {
                code: 'MI02',
                name: 'Chikwawa',
            },
            {
                code: 'MI03',
                name: 'Chiradzulu',
            },
            {
                code: 'MI04',
                name: 'Chitipa',
            },
            {
                code: 'MI06',
                name: 'Dedza',
            },
            {
                code: 'MI07',
                name: 'Dowa',
            },
            {
                code: 'MI08',
                name: 'Karonga',
            },
            {
                code: 'MI09',
                name: 'Kasungu',
            },
            {
                code: 'MI27',
                name: 'Likoma',
            },
            {
                code: 'MI11',
                name: 'Lilongwe',
            },
            {
                code: 'MI28',
                name: 'Machinga',
            },
            {
                code: 'MI12',
                name: 'Mangochi',
            },
            {
                code: 'MI13',
                name: 'Mchinji',
            },
            {
                code: 'MI29',
                name: 'Mulanje',
            },
            {
                code: 'MI25',
                name: 'Mwanza',
            },
            {
                code: 'MI15',
                name: 'Mzimba',
            },
            {
                code: 'MI31',
                name: 'Neno',
            },
            {
                code: 'MI17',
                name: 'Nkhata Bay',
            },
            {
                code: 'MI18',
                name: 'Nkhotakota',
            },
            {
                code: 'MI19',
                name: 'Nsanje',
            },
            {
                code: 'MI16',
                name: 'Ntcheu',
            },
            {
                code: 'MI20',
                name: 'Ntchisi',
            },
            {
                code: 'MI30',
                name: 'Phalombe',
            },
            {
                code: 'MI21',
                name: 'Rumphi',
            },
            {
                code: 'MI22',
                name: 'Salima',
            },
            {
                code: 'MI05',
                name: 'Thyolo',
            },
            {
                code: 'MI23',
                name: 'Zomba',
            },
        ],
    },
    {
        code: 'MY',
        id: 2291,
        name: 'Malaysia',
        states: [
            {
                code: 'MY01',
                name: 'Johor',
            },
            {
                code: 'MY02',
                name: 'Kedah',
            },
            {
                code: 'MY03',
                name: 'Kelantan',
            },
            {
                code: 'MY04',
                name: 'Melaka',
            },
            {
                code: 'MY05',
                name: 'Negeri Sembilan',
            },
            {
                code: 'MY06',
                name: 'Pahang',
            },
            {
                code: 'MY08',
                name: 'Perak',
            },
            {
                code: 'MY09',
                name: 'Perlis',
            },
            {
                code: 'MY07',
                name: 'Pulau Pinang',
            },
            {
                code: 'MY12',
                name: 'Sabah',
            },
            {
                code: 'MY13',
                name: 'Sarawak',
            },
            {
                code: 'MY10',
                name: 'Selangor',
            },
            {
                code: 'MY11',
                name: 'Terengganu',
            },
            {
                code: 'MY14',
                name: 'W.P. Kuala Lumpur',
            },
            {
                code: 'MY15',
                name: 'W.P. Labuan',
            },
            {
                code: 'MY16',
                name: 'W.P. Putrajaya',
            },
        ],
    },
    {
        code: 'MV',
        id: 2384,
        name: 'Maldives; Republic of',
        states: [],
    },
    {
        code: 'ML',
        id: 2292,
        name: 'Mali',
        states: [
            {
                code: 'ML01',
                name: 'Bamako',
            },
            {
                code: 'ML09',
                name: 'Gao',
            },
            {
                code: 'ML03',
                name: 'Kayes',
            },
            {
                code: 'ML10',
                name: 'Kidal',
            },
            {
                code: 'ML07',
                name: 'Koulikoro',
            },
            {
                code: 'ML.ME',
                name: 'Ménaka',
            },
            {
                code: 'ML04',
                name: 'Mopti',
            },
            {
                code: 'ML05',
                name: 'Ségou',
            },
            {
                code: 'ML06',
                name: 'Sikasso',
            },
            {
                code: 'ML.TD',
                name: 'Taoudénit',
            },
            {
                code: 'ML08',
                name: 'Timbuktu',
            },
        ],
    },
    {
        code: 'MT',
        id: 2293,
        name: 'Malta',
        states: [
            {
                code: 'MT.CE',
                name: 'Central',
            },
            {
                code: 'MT.GO',
                name: 'Gozo',
            },
            {
                code: 'MT.NO',
                name: 'Northern',
            },
            {
                code: 'MT.SE',
                name: 'South Eastern',
            },
            {
                code: 'MT.SO',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'RM',
        id: 2394,
        name: 'Marshall Islands',
        states: [],
    },
    {
        code: 'MQ',
        id: 2423,
        name: 'Martinique',
        states: [],
    },
    {
        code: 'MR',
        id: 2294,
        name: 'Mauritania',
        states: [
            {
                code: 'MR07',
                name: 'Adrar',
            },
            {
                code: 'MR03',
                name: 'Assaba',
            },
            {
                code: 'MR05',
                name: 'Brakna',
            },
            {
                code: 'MR08',
                name: 'Dakhlet Nouadhibou',
            },
            {
                code: 'MR04',
                name: 'Gorgol',
            },
            {
                code: 'MR10',
                name: 'Guidimaka',
            },
            {
                code: 'MR01',
                name: 'Hodh ech Chargui',
            },
            {
                code: 'MR02',
                name: 'Hodh el Gharbi',
            },
            {
                code: 'MR12',
                name: 'Inchiri',
            },
            {
                code: 'MR.NN',
                name: 'Nouakchott Nord',
            },
            {
                code: 'MR13',
                name: 'Nouakchott Ouest',
            },
            {
                code: 'MR.NS',
                name: 'Nouakchott Sud',
            },
            {
                code: 'MR09',
                name: 'Tagant',
            },
            {
                code: 'MR11',
                name: 'Tiris Zemmour',
            },
            {
                code: 'MR06',
                name: 'Trarza',
            },
        ],
    },
    {
        code: 'MU',
        id: 2295,
        name: 'Mauritius',
        states: [
            {
                code: 'MP21',
                name: 'Agalega Islands',
            },
            {
                code: 'MP12',
                name: 'Black River',
            },
            {
                code: 'MP22',
                name: 'Cargados Carajos',
            },
            {
                code: 'MP13',
                name: 'Flacq',
            },
            {
                code: 'MP14',
                name: 'Grand Port',
            },
            {
                code: 'MP15',
                name: 'Moka',
            },
            {
                code: 'MP16',
                name: 'Pamplemousses',
            },
            {
                code: 'MP17',
                name: 'Plaines Wilhems',
            },
            {
                code: 'MP18',
                name: 'Port Louis',
            },
            {
                code: 'MP19',
                name: 'Rivière du Rempart',
            },
            {
                code: 'MP23',
                name: 'Rodrigues',
            },
            {
                code: 'MP20',
                name: 'Savanne',
            },
        ],
    },
    {
        code: 'M999',
        id: 2393,
        name: 'Mayotte',
        states: [],
    },
    {
        code: 'MX',
        id: 2296,
        name: 'Mexico',
        states: [
            {
                code: 'AGU',
                name: 'Aguascalientes',
            },
            {
                code: 'BCS',
                name: 'Baja California Sur',
            },
            {
                code: 'BCN',
                name: 'Baja California',
            },
            {
                code: 'CAM',
                name: 'Campeche',
            },
            {
                code: 'CHP',
                name: 'Chiapas',
            },
            {
                code: 'CHH',
                name: 'Chihuahua',
            },
            {
                code: 'COA',
                name: 'Coahuila',
            },
            {
                code: 'COL',
                name: 'Colima',
            },
            {
                code: 'DIF',
                name: 'Distrito Federal',
            },
            {
                code: 'DUR',
                name: 'Durango',
            },
            {
                code: 'GUA',
                name: 'Guanajuato',
            },
            {
                code: 'GRO',
                name: 'Guerrero',
            },
            {
                code: 'HID',
                name: 'Hidalgo',
            },
            {
                code: 'JAL',
                name: 'Jalisco',
            },
            {
                code: 'MEX',
                name: 'México',
            },
            {
                code: 'MIC',
                name: 'Michoacán',
            },
            {
                code: 'MOR',
                name: 'Morelos',
            },
            {
                code: 'NAY',
                name: 'Nayarit',
            },
            {
                code: 'NLE',
                name: 'Nuevo León',
            },
            {
                code: 'OAX',
                name: 'Oaxaca',
            },
            {
                code: 'PUE',
                name: 'Puebla',
            },
            {
                code: 'QUE',
                name: 'Querétaro',
            },
            {
                code: 'ROO',
                name: 'Quintana Roo',
            },
            {
                code: 'SLP',
                name: 'San Luis Potosí',
            },
            {
                code: 'SIN',
                name: 'Sinaloa',
            },
            {
                code: 'SON',
                name: 'Sonora',
            },
            {
                code: 'TAB',
                name: 'Tabasco',
            },
            {
                code: 'TAM',
                name: 'Tamaulipas',
            },
            {
                code: 'TLA',
                name: 'Tlaxcala',
            },
            {
                code: 'VER',
                name: 'Veracruz',
            },
            {
                code: 'YUC',
                name: 'Yucatán',
            },
            {
                code: 'ZAC',
                name: 'Zacatecas',
            },
        ],
    },
    {
        code: 'FM',
        id: 2297,
        name: 'Micronesia; Federated States of',
        states: [
            {
                code: 'FM03',
                name: 'Chuuk',
            },
            {
                code: 'FM01',
                name: 'Kosrae',
            },
            {
                code: 'FM02',
                name: 'Pohnpei',
            },
            {
                code: 'FM04',
                name: 'Yap',
            },
        ],
    },
    {
        code: 'MD',
        id: 2395,
        name: 'Moldova; Republic of',
        states: [],
    },
    {
        code: 'MC',
        id: 2299,
        name: 'Monaco',
        states: [],
    },
    {
        code: 'MN',
        id: 2300,
        name: 'Mongolia',
        states: [],
    },
    {
        code: 'MJ',
        id: 2396,
        name: 'Montenegro',
        states: [
            {
                code: 'ME-1',
                name: 'Andrijevica',
            },
            {
                code: 'ME-2',
                name: 'Bar',
            },
            {
                code: 'ME-3',
                name: 'Berane',
            },
            {
                code: 'ME-4',
                name: 'Bijelo Polje',
            },
            {
                code: 'ME-5',
                name: 'Budva',
            },
            {
                code: 'ME-6',
                name: 'Cetinje',
            },
            {
                code: 'ME-7',
                name: 'Danilovgrad',
            },
            {
                code: 'ME-8',
                name: 'Herceg Novi',
            },
            {
                code: 'ME-9',
                name: 'Kolašin',
            },
            {
                code: 'ME-10',
                name: 'Kotor',
            },
            {
                code: 'ME-11',
                name: 'Mojkovac',
            },
            {
                code: 'ME-12',
                name: 'Nikšic',
            },
            {
                code: 'ME-13',
                name: 'Plav',
            },
            {
                code: 'ME-14',
                name: 'Pljevlja',
            },
            {
                code: 'ME-15',
                name: 'Plužine',
            },
            {
                code: 'ME-16',
                name: 'Podgorica',
            },
            {
                code: 'ME-17',
                name: 'Rožaje',
            },
            {
                code: 'ME-18',
                name: 'Šavnik',
            },
            {
                code: 'ME-19',
                name: 'Tivat',
            },
            {
                code: 'ME-20',
                name: 'Ulcinj',
            },
            {
                code: 'ME-21',
                name: 'Žabljak',
            },
        ],
    },
    {
        code: 'MS',
        id: 2424,
        name: 'Montserrat',
        states: [],
    },
    {
        code: 'MA',
        id: 2301,
        name: 'Morocco',
        states: [
            {
                code: 'MA.BK',
                name: 'Béni Mellal-Khénifra',
            },
            {
                code: 'MA.CS',
                name: 'Casablanca-Settat',
            },
            {
                code: 'MA.OL',
                name: 'Dakhla-Oued Ed-Dahab',
            },
            {
                code: 'MA.DT',
                name: 'Drâa-Tafilalet',
            },
            {
                code: 'MA.FK',
                name: 'Fès-Meknès',
            },
            {
                code: 'MA.GN',
                name: 'Guelmim-Oued Noun',
            },
            {
                code: 'MA.OF',
                name: "L'oriental",
            },
            {
                code: 'MA.LS',
                name: 'Laâyoune-Sakia al Hamra',
            },
            {
                code: 'MA.MS',
                name: 'Marrakech-Safi',
            },
            {
                code: 'MA.RK',
                name: 'Rabat-Salé-Kénitra',
            },
            {
                code: 'MA.SS',
                name: 'Souss-Massa',
            },
            {
                code: 'MA.TC',
                name: 'Tanger-Tétouan-Al Hoceima',
            },
        ],
    },
    {
        code: 'MZ',
        id: 2302,
        name: 'Mozambique',
        states: [
            {
                code: 'MZ01',
                name: 'Cabo Delgado',
            },
            {
                code: 'MZ02',
                name: 'Gaza',
            },
            {
                code: 'MZ03',
                name: 'Inhambane',
            },
            {
                code: 'MZ10',
                name: 'Manica',
            },
            {
                code: 'MZ11',
                name: 'Maputo [city]',
            },
            {
                code: 'MZ04',
                name: 'Maputo',
            },
            {
                code: 'MZ06',
                name: 'Nampula',
            },
            {
                code: 'MZ07',
                name: 'Niassa',
            },
            {
                code: 'MZ05',
                name: 'Sofala',
            },
            {
                code: 'MZ08',
                name: 'Tete',
            },
            {
                code: 'MZ09',
                name: 'Zambézia',
            },
        ],
    },
    {
        code: 'MM',
        id: 2303,
        name: 'Myanmar',
        states: [
            {
                code: 'MM.AY',
                name: 'Ayeyarwady',
            },
            {
                code: 'MM.BA',
                name: 'Bago',
            },
            {
                code: 'MM.CH',
                name: 'Chin',
            },
            {
                code: 'MM.KC',
                name: 'Kachin',
            },
            {
                code: 'MM.KH',
                name: 'Kayah',
            },
            {
                code: 'MM.KN',
                name: 'Kayin',
            },
            {
                code: 'MM.MG',
                name: 'Magway',
            },
            {
                code: 'MM.ML',
                name: 'Mandalay',
            },
            {
                code: 'MM.MO',
                name: 'Mon',
            },
            {
                code: 'MM.NY',
                name: 'Naypyidaw',
            },
            {
                code: 'MM.RA',
                name: 'Rakhine',
            },
            {
                code: 'MM.SA',
                name: 'Sagaing',
            },
            {
                code: 'MM.SH',
                name: 'Shan',
            },
            {
                code: 'MM.TN',
                name: 'Tanintharyi',
            },
            {
                code: 'MM.YA',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'NA',
        id: 2304,
        name: 'Namibia',
        states: [
            {
                code: 'WA29',
                name: 'Erongo',
            },
            {
                code: 'WA30',
                name: 'Hardap',
            },
            {
                code: 'WA31',
                name: 'Karas',
            },
            {
                code: 'WA40',
                name: 'Kavango East',
            },
            {
                code: 'WA41',
                name: 'Kavango West',
            },
            {
                code: 'WA21',
                name: 'Khomas',
            },
            {
                code: 'WA32',
                name: 'Kunene',
            },
            {
                code: 'WA33',
                name: 'Ohangwena',
            },
            {
                code: 'WA35',
                name: 'Omaheke',
            },
            {
                code: 'WA36',
                name: 'Omusati',
            },
            {
                code: 'WA37',
                name: 'Oshana',
            },
            {
                code: 'WA38',
                name: 'Oshikoto',
            },
            {
                code: 'WA39',
                name: 'Otjozondjupa',
            },
            {
                code: 'WA28',
                name: 'Zambezi',
            },
        ],
    },
    {
        code: 'NR',
        id: 2397,
        name: 'Nauru',
        states: [],
    },
    {
        code: 'NP',
        id: 2305,
        name: 'Nepal',
        states: [
            {
                code: 'NP.FI',
                name: 'Five',
            },
            {
                code: 'NP.FO',
                name: 'Four',
            },
            {
                code: 'NP.ON',
                name: 'One',
            },
            {
                code: 'NP.SE',
                name: 'Seven',
            },
            {
                code: 'NP.SI',
                name: 'Six',
            },
            {
                code: 'NP.TH',
                name: 'Three',
            },
            {
                code: 'NP.TW',
                name: 'Two',
            },
        ],
    },
    {
        code: 'NL',
        id: 2306,
        name: 'Netherlands',
        states: [
            {
                code: 'DR',
                name: 'Drenthe',
            },
            {
                code: 'FL',
                name: 'Flevoland',
            },
            {
                code: 'FR',
                name: 'Friesland',
            },
            {
                code: 'GE',
                name: 'Gelderland',
            },
            {
                code: 'GR',
                name: 'Groningen',
            },
            {
                code: 'LI',
                name: 'Limburg',
            },
            {
                code: 'NB',
                name: 'Noord-Brabant',
            },
            {
                code: 'NH',
                name: 'Noord-Holland',
            },
            {
                code: 'OV',
                name: 'Overijssel',
            },
            {
                code: 'UT',
                name: 'Utrecht',
            },
            {
                code: 'ZE',
                name: 'Zeeland',
            },
            {
                code: 'ZH',
                name: 'Zuid-Holland',
            },
        ],
    },
    {
        code: 'AN',
        id: 2425,
        name: 'Netherlands Antilles',
        states: [],
    },
    {
        code: 'NC',
        id: 2426,
        name: 'New Caledonia',
        states: [],
    },
    {
        code: 'NZ',
        id: 2307,
        name: 'New Zealand',
        states: [
            {
                code: 'AUK',
                name: 'Auckland',
            },
            {
                code: 'BOP',
                name: 'Bay of Plenty',
            },
            {
                code: 'CAN',
                name: 'Canterbury',
            },
            {
                code: 'CIT',
                name: 'Chatham Islands Territory',
            },
            {
                code: 'GIS',
                name: 'Gisborne',
            },
            {
                code: 'HKB',
                name: "Hawke's Bay",
            },
            {
                code: 'MWT',
                name: 'Manawatu-Wanganui',
            },
            {
                code: 'MBH',
                name: 'Marlborough',
            },
            {
                code: 'NSN',
                name: 'Nelson',
            },
            {
                code: 'N',
                name: 'North Island',
            },
            {
                code: 'NTL',
                name: 'Northland',
            },
            {
                code: 'OTA',
                name: 'Otago',
            },
            {
                code: 'S',
                name: 'South Island',
            },
            {
                code: 'STL',
                name: 'Southland',
            },
            {
                code: 'TKI',
                name: 'Taranaki',
            },
            {
                code: 'TAS',
                name: 'Tasman District',
            },
            {
                code: 'WKO',
                name: 'Waikato',
            },
            {
                code: 'WGN',
                name: 'Wellington',
            },
            {
                code: 'WTC',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'NI',
        id: 2308,
        name: 'Nicaragua',
        states: [
            {
                code: 'NU01',
                name: 'Boaco',
            },
            {
                code: 'NU02',
                name: 'Carazo',
            },
            {
                code: 'NU03',
                name: 'Chinandega',
            },
            {
                code: 'NU04',
                name: 'Chontales',
            },
            {
                code: 'NU05',
                name: 'Estelí',
            },
            {
                code: 'NU06',
                name: 'Granada',
            },
            {
                code: 'NU07',
                name: 'Jinotega',
            },
            {
                code: 'NU08',
                name: 'León',
            },
            {
                code: 'NU09',
                name: 'Madriz',
            },
            {
                code: 'NU10',
                name: 'Managua',
            },
            {
                code: 'NU11',
                name: 'Masaya',
            },
            {
                code: 'NU12',
                name: 'Matagalpa',
            },
            {
                code: 'NU13',
                name: 'Nueva Segovia',
            },
            {
                code: 'NU17',
                name: 'Región Autónoma del Caribe Norte',
            },
            {
                code: 'NU18',
                name: 'Región Autónoma del Caribe Sur',
            },
            {
                code: 'NU14',
                name: 'Río San Juan',
            },
            {
                code: 'NU15',
                name: 'Rivas',
            },
        ],
    },
    {
        code: 'NE',
        id: 2309,
        name: 'Niger',
        states: [
            {
                code: 'NG01',
                name: 'Agadez',
            },
            {
                code: 'NG02',
                name: 'Diffa',
            },
            {
                code: 'NG03',
                name: 'Dosso',
            },
            {
                code: 'NG04',
                name: 'Maradi',
            },
            {
                code: 'NG08',
                name: 'Niamey',
            },
            {
                code: 'NG06',
                name: 'Tahoua',
            },
            {
                code: 'NG09',
                name: 'Tillabéri',
            },
            {
                code: 'NG07',
                name: 'Zinder',
            },
        ],
    },
    {
        code: 'NG',
        id: 2310,
        name: 'Nigeria',
        states: [
            {
                code: 'NI45',
                name: 'Abia',
            },
            {
                code: 'NI35',
                name: 'Adamawa',
            },
            {
                code: 'NI21',
                name: 'Akwa Ibom',
            },
            {
                code: 'NI25',
                name: 'Anambra',
            },
            {
                code: 'NI46',
                name: 'Bauchi',
            },
            {
                code: 'NI52',
                name: 'Bayelsa',
            },
            {
                code: 'NI26',
                name: 'Benue',
            },
            {
                code: 'NI27',
                name: 'Borno',
            },
            {
                code: 'NI22',
                name: 'Cross River',
            },
            {
                code: 'NI36',
                name: 'Delta',
            },
            {
                code: 'NI53',
                name: 'Ebonyi',
            },
            {
                code: 'NI37',
                name: 'Edo',
            },
            {
                code: 'NI54',
                name: 'Ekiti',
            },
            {
                code: 'NI47',
                name: 'Enugu',
            },
            {
                code: 'NI11',
                name: 'Federal Capital Territory',
            },
            {
                code: 'NI55',
                name: 'Gombe',
            },
            {
                code: 'NI28',
                name: 'Imo',
            },
            {
                code: 'NI39',
                name: 'Jigawa',
            },
            {
                code: 'NI23',
                name: 'Kaduna',
            },
            {
                code: 'NI29',
                name: 'Kano',
            },
            {
                code: 'NI24',
                name: 'Katsina',
            },
            {
                code: 'NI40',
                name: 'Kebbi',
            },
            {
                code: 'NI41',
                name: 'Kogi',
            },
            {
                code: 'NI30',
                name: 'Kwara',
            },
            {
                code: 'NI05',
                name: 'Lagos',
            },
            {
                code: 'NI56',
                name: 'Nassarawa',
            },
            {
                code: 'NI31',
                name: 'Niger',
            },
            {
                code: 'NI16',
                name: 'Ogun',
            },
            {
                code: 'NI48',
                name: 'Ondo',
            },
            {
                code: 'NI42',
                name: 'Osun',
            },
            {
                code: 'NI32',
                name: 'Oyo',
            },
            {
                code: 'NI49',
                name: 'Plateau',
            },
            {
                code: 'NI50',
                name: 'Rivers',
            },
            {
                code: 'NI51',
                name: 'Sokoto',
            },
            {
                code: 'NI43',
                name: 'Taraba',
            },
            {
                code: 'NI44',
                name: 'Yobe',
            },
            {
                code: 'NI57',
                name: 'Zamfara',
            },
        ],
    },
    {
        code: 'NU',
        id: 2427,
        name: 'Niue',
        states: [],
    },
    {
        code: 'NF',
        id: 2428,
        name: 'Norfolk Island',
        states: [],
    },
    {
        code: 'MP',
        id: 2429,
        name: 'Northern Mariana Islands',
        states: [],
    },
    {
        code: 'NO',
        id: 2311,
        name: 'Norway',
        states: [
            {
                code: 'NO02',
                name: 'Akershus',
            },
            {
                code: 'NO09',
                name: 'Aust-Agder',
            },
            {
                code: 'NO06',
                name: 'Buskerud',
            },
            {
                code: 'NO20',
                name: 'Finnmark',
            },
            {
                code: 'NO04',
                name: 'Hedmark',
            },
            {
                code: 'NO12',
                name: 'Hordaland',
            },
            {
                code: 'NO22',
                name: 'Jan Mayen (Arctic Region)',
            },
            {
                code: 'NO15',
                name: 'Møre og Romsdal',
            },
            {
                code: 'NO17',
                name: 'Nord-Trøndelag',
            },
            {
                code: 'NO18',
                name: 'Nordland',
            },
            {
                code: 'NO05',
                name: 'Oppland',
            },
            {
                code: 'NO03',
                name: 'Oslo',
            },
            {
                code: 'NO01',
                name: 'Østfold',
            },
            {
                code: 'NO11',
                name: 'Rogaland',
            },
            {
                code: 'NO14',
                name: 'Sogn og Fjordane',
            },
            {
                code: 'NO16',
                name: 'Sør-Trøndelag',
            },
            {
                code: 'NO21',
                name: 'Svalbard (Arctic Region)',
            },
            {
                code: 'NO08',
                name: 'Telemark',
            },
            {
                code: 'NO19',
                name: 'Troms',
            },
            {
                code: 'NO10',
                name: 'Vest-Agder',
            },
            {
                code: 'NO07',
                name: 'Vestfold',
            },
        ],
    },
    {
        code: 'OM',
        id: 2312,
        name: 'Oman',
        states: [
            {
                code: 'MU01',
                name: 'Ad Dakhliyah',
            },
            {
                code: 'MU09',
                name: 'Adh Dhahirah',
            },
            {
                code: 'MU11',
                name: 'Al Batinah North',
            },
            {
                code: 'MU02',
                name: 'Al Batinah South',
            },
            {
                code: 'MU10',
                name: 'Al Buraymi',
            },
            {
                code: 'MU03',
                name: 'Al Wusta',
            },
            {
                code: 'MU12',
                name: 'Ash Sharqiyah North',
            },
            {
                code: 'MU04',
                name: 'Ash Sharqiyah South',
            },
            {
                code: 'MU08',
                name: 'Dhofar',
            },
            {
                code: 'MU07',
                name: 'Musandam',
            },
            {
                code: 'MU06',
                name: 'Muscat',
            },
        ],
    },
    {
        code: 'PK',
        id: 2313,
        name: 'Pakistan',
        states: [
            {
                code: 'PK06',
                name: 'Azad Kashmir',
            },
            {
                code: 'PK02',
                name: 'Balochistan',
            },
            {
                code: 'PK01',
                name: 'Federally Administered Tribal Areas',
            },
            {
                code: 'PK07',
                name: 'Gilgit-Baltistan',
            },
            {
                code: 'PK08',
                name: 'Islamabad',
            },
            {
                code: 'PK03',
                name: 'Khyber-Pakhtunkhwa',
            },
            {
                code: 'PK04',
                name: 'Punjab',
            },
            {
                code: 'PK05',
                name: 'Sindh',
            },
        ],
    },
    {
        code: 'PW',
        id: 2314,
        name: 'Palau',
        states: [],
    },
    {
        code: 'PS',
        id: 2430,
        name: 'Palestinian Territory; Occupied',
        states: [],
    },
    {
        code: 'PA',
        id: 2315,
        name: 'Panama',
        states: [
            {
                code: 'PM01',
                name: 'Bocas del Toro',
            },
            {
                code: 'PM02\t',
                name: 'Chiriquí',
            },
            {
                code: 'PM03',
                name: 'Coclé',
            },
            {
                code: 'PM04',
                name: 'Coclé',
            },
            {
                code: 'PM05',
                name: 'Darién',
            },
            {
                code: 'PM11',
                name: 'Emberá',
            },
            {
                code: 'PM06',
                name: 'Herrera',
            },
            {
                code: 'PM09',
                name: 'Kuna Yala',
            },
            {
                code: 'PM07',
                name: 'Los Santos',
            },
            {
                code: 'PM12',
                name: 'Ngäbe Buglé',
            },
            {
                code: 'PM13',
                name: 'Panamá Oeste',
            },
            {
                code: 'PM08',
                name: 'Panamá',
            },
            {
                code: 'PM10',
                name: 'Veraguas',
            },
        ],
    },
    {
        code: 'PG',
        id: 2316,
        name: 'Papua New Guinea',
        states: [
            {
                code: 'PP07',
                name: 'Bougainville',
            },
            {
                code: 'PP01',
                name: 'Central',
            },
            {
                code: 'PP08',
                name: 'Chimbu',
            },
            {
                code: 'PP10',
                name: 'East New Britain',
            },
            {
                code: 'PP11',
                name: 'East Sepik',
            },
            {
                code: 'PP09',
                name: 'Eastern Highlands',
            },
            {
                code: 'PP19',
                name: 'Enga',
            },
            {
                code: 'PP02',
                name: 'Gulf',
            },
            {
                code: 'PP21',
                name: 'Hela',
            },
            {
                code: 'PP22',
                name: 'Jiwaka',
            },
            {
                code: 'PP12',
                name: 'Madang',
            },
            {
                code: 'PP13',
                name: 'Manus',
            },
            {
                code: 'PP03',
                name: 'Milne Bay',
            },
            {
                code: 'PP14',
                name: 'Morobe',
            },
            {
                code: 'PP20',
                name: 'National Capital District',
            },
            {
                code: 'PP15',
                name: 'New Ireland',
            },
            {
                code: 'PP04',
                name: 'Northern',
            },
            {
                code: 'PP18',
                name: 'Sandaun',
            },
            {
                code: 'PP05',
                name: 'Southern Highlands',
            },
            {
                code: 'PP17',
                name: 'West New Britain',
            },
            {
                code: 'PP06',
                name: 'Western',
            },
            {
                code: 'PP16',
                name: 'Western Highlands',
            },
        ],
    },
    {
        code: 'PY',
        id: 2317,
        name: 'Paraguay',
        states: [
            {
                code: 'PA23',
                name: 'Alto Paraguay',
            },
            {
                code: 'PA01',
                name: 'Alto Paraná',
            },
            {
                code: 'PA02',
                name: 'Amambay',
            },
            {
                code: 'PA22',
                name: 'Asunción',
            },
            {
                code: 'PA24',
                name: 'Boquerón',
            },
            {
                code: 'PA04',
                name: 'Caaguazú',
            },
            {
                code: 'PA05',
                name: 'Caazapá',
            },
            {
                code: 'PA19',
                name: 'Canindeyú',
            },
            {
                code: 'PA06',
                name: 'Central',
            },
            {
                code: 'PA07',
                name: 'Concepción',
            },
            {
                code: 'PA08',
                name: 'Cordillera',
            },
            {
                code: 'PA10',
                name: 'Guairá',
            },
            {
                code: 'PA11',
                name: 'Itapúa',
            },
            {
                code: 'PA12',
                name: 'Misiones',
            },
            {
                code: 'PA15',
                name: 'Paraguarí',
            },
            {
                code: 'PA16',
                name: 'Presidente Hayes',
            },
            {
                code: 'PA17',
                name: 'San Pedro',
            },
            {
                code: 'PA13',
                name: 'Ñeembucú',
            },
        ],
    },
    {
        code: 'PE',
        id: 2318,
        name: 'Peru',
        states: [
            {
                code: 'PE01',
                name: 'Amazonas',
            },
            {
                code: 'PE02',
                name: 'Ancash',
            },
            {
                code: 'PE03',
                name: 'Apurímac',
            },
            {
                code: 'PE04',
                name: 'Arequipa',
            },
            {
                code: 'PE05',
                name: 'Ayacucho',
            },
            {
                code: 'PE06',
                name: 'Cajamarca',
            },
            {
                code: 'PE07',
                name: 'Callao',
            },
            {
                code: 'PE08',
                name: 'Cusco',
            },
            {
                code: 'PE09',
                name: 'Huancavelica',
            },
            {
                code: 'PE10',
                name: 'Huánuco',
            },
            {
                code: 'PE11',
                name: 'Ica',
            },
            {
                code: 'PE12',
                name: 'Junín',
            },
            {
                code: 'PE13',
                name: 'La Libertad',
            },
            {
                code: 'PE14',
                name: 'Lambayeque',
            },
            {
                code: 'PE15',
                name: 'Lima',
            },
            {
                code: 'PE26',
                name: 'Lima [Province]',
            },
            {
                code: 'PE16',
                name: 'Loreto',
            },
            {
                code: 'PE17',
                name: 'Madre de Dios',
            },
            {
                code: 'PE18',
                name: 'Moquegua',
            },
            {
                code: 'PE19',
                name: 'Pasco',
            },
            {
                code: 'PE20',
                name: 'Piura',
            },
            {
                code: 'PE21',
                name: 'Puno',
            },
            {
                code: 'PE22',
                name: 'San Martín',
            },
            {
                code: 'PE23',
                name: 'Tacna',
            },
            {
                code: 'PE24',
                name: 'Tumbes',
            },
            {
                code: 'PE25',
                name: 'Ucayali',
            },
        ],
    },
    {
        code: 'PH',
        id: 2319,
        name: 'Philippines',
        states: [
            {
                code: 'RP01',
                name: 'Abra',
            },
            {
                code: 'RP02',
                name: 'Agusan del Norte',
            },
            {
                code: 'RP03',
                name: 'Agusan del Sur',
            },
            {
                code: 'RP04',
                name: 'Aklan',
            },
            {
                code: 'RP05',
                name: 'Albay',
            },
            {
                code: 'RP06',
                name: 'Antique',
            },
            {
                code: 'RPH6',
                name: 'Apayao',
            },
            {
                code: 'RPG8',
                name: 'Aurora',
            },
            {
                code: 'RP22',
                name: 'Basilan',
            },
            {
                code: 'RP07',
                name: 'Bataan',
            },
            {
                code: 'RP08',
                name: 'Batanes',
            },
            {
                code: 'RP09',
                name: 'Batangas',
            },
            {
                code: 'RP10',
                name: 'Benguet',
            },
            {
                code: 'RPH9',
                name: 'Biliran',
            },
            {
                code: 'RP11',
                name: 'Bohol',
            },
            {
                code: 'RP12',
                name: 'Bukidnon',
            },
            {
                code: 'RP13',
                name: 'Bulacan',
            },
            {
                code: 'RP14',
                name: 'Cagayan',
            },
            {
                code: 'RP15',
                name: 'Camarines Norte',
            },
            {
                code: 'RP16',
                name: 'Camarines Sur',
            },
            {
                code: 'RP17',
                name: 'Camiguin',
            },
            {
                code: 'RP18',
                name: 'Capiz',
            },
            {
                code: 'RP19',
                name: 'Catanduanes',
            },
            {
                code: 'RP20',
                name: 'Cavite',
            },
            {
                code: 'RP21',
                name: 'Cebu',
            },
            {
                code: 'RPI6',
                name: 'Compostela Valley',
            },
            {
                code: 'RP57',
                name: 'Cotabato',
            },
            {
                code: 'RP26',
                name: 'Davao Oriental',
            },
            {
                code: 'RPI7',
                name: 'Davao del Norte',
            },
            {
                code: 'RP25',
                name: 'Davao del Sur',
            },
            {
                code: 'RPI9',
                name: 'Dinagat Islands',
            },
            {
                code: 'RP23',
                name: 'Eastern Samar',
            },
            {
                code: 'RPJ3',
                name: 'Guimaras',
            },
            {
                code: 'RP27',
                name: 'Ifugao',
            },
            {
                code: 'RP28',
                name: 'Ilocos Norte',
            },
            {
                code: 'RP29',
                name: 'Ilocos Sur',
            },
            {
                code: 'RP30',
                name: 'Iloilo',
            },
            {
                code: 'RP31',
                name: 'Isabela',
            },
            {
                code: 'RPJ7',
                name: 'Kalinga',
            },
            {
                code: 'RP36',
                name: 'La Union',
            },
            {
                code: 'RP33',
                name: 'Laguna',
            },
            {
                code: 'RP34',
                name: 'Lanao del Norte',
            },
            {
                code: 'RP35',
                name: 'Lanao del Sur',
            },
            {
                code: 'RP37',
                name: 'Leyte',
            },
            {
                code: 'RP56',
                name: 'Maguindanao',
            },
            {
                code: 'RP38',
                name: 'Marinduque',
            },
            {
                code: 'RP39',
                name: 'Masbate',
            },
            {
                code: 'RPD9',
                name: 'Metropolitan Manila',
            },
            {
                code: 'RP42',
                name: 'Misamis Occidental',
            },
            {
                code: 'RP43',
                name: 'Misamis Oriental',
            },
            {
                code: 'RP44',
                name: 'Mountain',
            },
            {
                code: 'RPH3',
                name: 'Negros Occidental',
            },
            {
                code: 'RP46',
                name: 'Negros Oriental',
            },
            {
                code: 'RP67',
                name: 'Northern Samar',
            },
            {
                code: 'RP47',
                name: 'Nueva Ecija',
            },
            {
                code: 'RP48',
                name: 'Nueva Vizcaya',
            },
            {
                code: 'RP40',
                name: 'Occidental Mindoro',
            },
            {
                code: 'RP41',
                name: 'Oriental Mindoro',
            },
            {
                code: 'RP49',
                name: 'Palawan',
            },
            {
                code: 'RP50',
                name: 'Pampanga',
            },
            {
                code: 'RP51',
                name: 'Pangasinan',
            },
            {
                code: 'RPH2',
                name: 'Quezon',
            },
            {
                code: 'RP68',
                name: 'Quirino',
            },
            {
                code: 'RP53',
                name: 'Rizal',
            },
            {
                code: 'RP54',
                name: 'Romblon',
            },
            {
                code: 'RP55',
                name: 'Samar',
            },
            {
                code: 'PH72',
                name: 'Sarangani',
            },
            {
                code: 'RP69',
                name: 'Siquijor',
            },
            {
                code: 'RP58',
                name: 'Sorsogon',
            },
            {
                code: 'RP70',
                name: 'South Cotabato',
            },
            {
                code: 'RP59',
                name: 'Southern Leyte',
            },
            {
                code: 'RP71',
                name: 'Sultan Kudarat',
            },
            {
                code: 'RP60',
                name: 'Sulu',
            },
            {
                code: 'RP61',
                name: 'Surigao del Norte',
            },
            {
                code: 'RP62',
                name: 'Surigao del Sur',
            },
            {
                code: 'RPO3',
                name: 'Tarlac',
            },
            {
                code: 'RPO4',
                name: 'Tawi-Tawi',
            },
            {
                code: 'RPP1',
                name: 'Zambales',
            },
            {
                code: 'RPG7',
                name: 'Zamboanga del Norte',
            },
            {
                code: 'RP65',
                name: 'Zamboanga del Sur',
            },
            {
                code: 'RP66',
                name: 'Zamboanga-Sibugay',
            },
        ],
    },
    {
        code: 'PN',
        id: 2431,
        name: 'Pitcairn',
        states: [],
    },
    {
        code: 'PL',
        id: 2320,
        name: 'Poland',
        states: [
            {
                code: 'PL-DS',
                name: 'Dolnoslaskie',
            },
            {
                code: 'PL-KP',
                name: 'Kujawsko-pomorskie',
            },
            {
                code: 'PL-LD',
                name: 'Lódzkie',
            },
            {
                code: 'PL-LU',
                name: 'Lubelskie',
            },
            {
                code: 'PL-LB',
                name: 'Lubuskie',
            },
            {
                code: 'PL-MA',
                name: 'Malopolskie',
            },
            {
                code: 'PL-MZ',
                name: 'Mazowieckie',
            },
            {
                code: 'PL-OP',
                name: 'Opolskie',
            },
            {
                code: 'PL-PK',
                name: 'Podkarpackie',
            },
            {
                code: 'PL-PD',
                name: 'Podlaskie',
            },
            {
                code: 'PL-PM',
                name: 'Pomorskie',
            },
            {
                code: 'PL-SL',
                name: 'Slaskie',
            },
            {
                code: 'PL-SK',
                name: 'Swietokrzyskie',
            },
            {
                code: 'PL-WN',
                name: 'Warminsko-mazurskie',
            },
            {
                code: 'PL-WP',
                name: 'Wielkopolskie',
            },
        ],
    },
    {
        code: 'PT',
        id: 2321,
        name: 'Portugal',
        states: [
            {
                code: 'PO23',
                name: 'Acores Autonomous',
            },
            {
                code: 'PO02',
                name: 'Aveiro',
            },
            {
                code: 'PO03',
                name: 'Beja',
            },
            {
                code: 'PO04',
                name: 'Braga',
            },
            {
                code: 'PO05',
                name: 'Braganca',
            },
            {
                code: 'PO06',
                name: 'Castelo Branco',
            },
            {
                code: 'PO07',
                name: 'Coimbra',
            },
            {
                code: 'PO08',
                name: 'Evora',
            },
            {
                code: 'PO09',
                name: 'Faro',
            },
            {
                code: 'PO11',
                name: 'Guarda',
            },
            {
                code: 'PO13',
                name: 'Leiria',
            },
            {
                code: 'PO14',
                name: 'Lisboa',
            },
            {
                code: 'PO10',
                name: 'Madeira Autonomous',
            },
            {
                code: 'PO16',
                name: 'Portalegre',
            },
            {
                code: 'PO17',
                name: 'Porto',
            },
            {
                code: 'PO18',
                name: 'Santarem',
            },
            {
                code: 'PO19',
                name: 'Setubal',
            },
            {
                code: 'PO20',
                name: 'Viana do Castelo',
            },
            {
                code: 'PO21',
                name: 'Vila Real',
            },
            {
                code: 'PO22',
                name: 'Viseu',
            },
        ],
    },
    {
        code: 'PR',
        id: 2374,
        name: 'Puerto Rico',
        states: [
            {
                code: 'PR.AJ',
                name: 'Adjuntas',
            },
            {
                code: 'PR.AD',
                name: 'Aguada',
            },
            {
                code: 'PR.AL',
                name: 'Aguadilla',
            },
            {
                code: 'PR.AB',
                name: 'Aguas Buenas',
            },
            {
                code: 'PR.AI',
                name: 'Aibonito',
            },
            {
                code: 'PR.AN',
                name: 'Añasco',
            },
            {
                code: 'PR.AC',
                name: 'Arecibo',
            },
            {
                code: 'PR.AR',
                name: 'Arroyo',
            },
            {
                code: 'PR.BC',
                name: 'Barceloneta',
            },
            {
                code: 'PR.BQ',
                name: 'Barranquitas',
            },
            {
                code: 'PR.BY',
                name: 'Bayamón',
            },
            {
                code: 'PR.CR',
                name: 'Cabo Rojo',
            },
            {
                code: 'PR.CG',
                name: 'Caguas',
            },
            {
                code: 'PR.CA',
                name: 'Camuy',
            },
            {
                code: 'PR.CV',
                name: 'Canóvanas',
            },
            {
                code: 'PR.CN',
                name: 'Carolina',
            },
            {
                code: 'PR.CT',
                name: 'Cataño',
            },
            {
                code: 'PR.CY',
                name: 'Cayey',
            },
            {
                code: 'PR.CB',
                name: 'Ceiba',
            },
            {
                code: 'PR.CL',
                name: 'Ciales',
            },
            {
                code: 'PR.CD',
                name: 'Cidra',
            },
            {
                code: 'PR.CO',
                name: 'Coamo',
            },
            {
                code: 'PR.CM',
                name: 'Comerío',
            },
            {
                code: 'PR.CZ',
                name: 'Corozal',
            },
            {
                code: 'PR.CU',
                name: 'Culebra',
            },
            {
                code: 'PR.DO',
                name: 'Dorado',
            },
            {
                code: 'PR.FJ',
                name: 'Fajardo',
            },
            {
                code: 'PR.FL',
                name: 'Florida',
            },
            {
                code: 'PR.GC',
                name: 'Guánica',
            },
            {
                code: 'PR.GM',
                name: 'Guayama',
            },
            {
                code: 'PR.GL',
                name: 'Guayanilla',
            },
            {
                code: 'PR.GB',
                name: 'Guaynabo',
            },
            {
                code: 'PR.GR',
                name: 'Gurabo',
            },
            {
                code: 'PR.HA',
                name: 'Hatillo',
            },
            {
                code: 'PR.HO',
                name: 'Hormigueros',
            },
            {
                code: 'PR.HU',
                name: 'Humacao',
            },
            {
                code: 'PR.IS',
                name: 'Isabela',
            },
            {
                code: 'PR.JY',
                name: 'Jayuya',
            },
            {
                code: 'PR.JD',
                name: 'Juana Díaz',
            },
            {
                code: 'PR.JC',
                name: 'Juncos',
            },
            {
                code: 'PR.LJ',
                name: 'Lajas',
            },
            {
                code: 'PR.LR',
                name: 'Lares',
            },
            {
                code: 'PR.LM',
                name: 'Las Marías',
            },
            {
                code: 'PR.LP',
                name: 'Las Piedras',
            },
            {
                code: 'PR.LZ',
                name: 'Loíza',
            },
            {
                code: 'PR.LQ',
                name: 'Luquillo',
            },
            {
                code: 'PR.MT',
                name: 'Manatí',
            },
            {
                code: 'PR.MR',
                name: 'Maricao',
            },
            {
                code: 'PR.MB',
                name: 'Maunabo',
            },
            {
                code: 'PR.MG',
                name: 'Mayagüez',
            },
            {
                code: 'PR.MC',
                name: 'Moca',
            },
            {
                code: 'PR.MV',
                name: 'Morovis',
            },
            {
                code: 'PR.NG',
                name: 'Naguabo',
            },
            {
                code: 'PR.NR',
                name: 'Naranjito',
            },
            {
                code: 'PR.OR',
                name: 'Orocovis',
            },
            {
                code: 'PR.PT',
                name: 'Patillas',
            },
            {
                code: 'PR.PN\t',
                name: 'Peñuelas',
            },
            {
                code: 'PR.PO',
                name: 'Ponce',
            },
            {
                code: 'PR.QB',
                name: 'Quebradillas',
            },
            {
                code: 'PR.RC',
                name: 'Rincón',
            },
            {
                code: 'PR.RG',
                name: 'Río Grande',
            },
            {
                code: 'PR.SB',
                name: 'Sabana Grande',
            },
            {
                code: 'PR.SA',
                name: 'Salinas',
            },
            {
                code: 'PR.SG',
                name: 'San Germán',
            },
            {
                code: 'PR.SJ',
                name: 'San Juan',
            },
            {
                code: 'PR.SL',
                name: 'San Lorenzo',
            },
            {
                code: 'PR.SS',
                name: 'San Sebastián',
            },
            {
                code: 'PR.SI',
                name: 'Santa Isabel',
            },
            {
                code: 'PR.TA',
                name: 'Toa Alta',
            },
            {
                code: 'PR.TB',
                name: 'Toa Baja',
            },
            {
                code: 'PR.TJ',
                name: 'Trujillo Alto',
            },
            {
                code: 'PR.UT',
                name: 'Utuado',
            },
            {
                code: 'PR.VA',
                name: 'Vega Alta',
            },
            {
                code: 'PR.VB',
                name: 'Vega Baja',
            },
            {
                code: 'PR.VQ',
                name: 'Vieques',
            },
            {
                code: 'PR.VL',
                name: 'Villalba',
            },
            {
                code: 'PR.YB',
                name: 'Yabucoa',
            },
            {
                code: 'PR.YU',
                name: 'Yauco',
            },
        ],
    },
    {
        code: 'QA',
        id: 2322,
        name: 'Qatar',
        states: [
            {
                code: 'QA01',
                name: 'Ad Dawhah',
            },
            {
                code: 'QA13',
                name: 'Al Daayen',
            },
            {
                code: 'QA04',
                name: 'Al Khawr',
            },
            {
                code: 'QA10',
                name: 'Al Wakrah',
            },
            {
                code: 'QA14',
                name: 'Al-Shahaniya',
            },
            {
                code: 'QA06',
                name: 'Ar Rayyan',
            },
            {
                code: 'QA08',
                name: 'Madinat ach Shamal',
            },
            {
                code: 'QA09',
                name: 'Umm Salal',
            },
        ],
    },
    {
        code: 'R999',
        id: 2398,
        name: 'Reunion',
        states: [],
    },
    {
        code: 'RO',
        id: 2323,
        name: 'Romania',
        states: [
            {
                code: 'RO-AB',
                name: 'Alba',
            },
            {
                code: 'RO-AR',
                name: 'Arad',
            },
            {
                code: 'RO-AG',
                name: 'Arges',
            },
            {
                code: 'RO-BC',
                name: 'Bacau',
            },
            {
                code: 'RO-BH',
                name: 'Bihor',
            },
            {
                code: 'RO-BN',
                name: 'Bistrita-Nasaud',
            },
            {
                code: 'RO-BT',
                name: 'Botosani',
            },
            {
                code: 'RO-BR',
                name: 'Braila',
            },
            {
                code: 'RO-BV',
                name: 'Brasov',
            },
            {
                code: 'RO-B',
                name: 'Bucuresti',
            },
            {
                code: 'RO-BZ',
                name: 'Buzau',
            },
            {
                code: 'RO-CL',
                name: 'Calarasi',
            },
            {
                code: 'RO-CS',
                name: 'Caras-Severin',
            },
            {
                code: 'RO-CJ',
                name: 'Cluj',
            },
            {
                code: 'RO-CT',
                name: 'Constanta',
            },
            {
                code: 'RO-CV',
                name: 'Covasna',
            },
            {
                code: 'RO-DB',
                name: 'Dâmbovita',
            },
            {
                code: 'RO-DJ',
                name: 'Dolj',
            },
            {
                code: 'RO-GL',
                name: 'Galati',
            },
            {
                code: 'RO-GR',
                name: 'Giurgiu',
            },
            {
                code: 'RO-GJ',
                name: 'Gorj',
            },
            {
                code: 'RO-HR',
                name: 'Harghita',
            },
            {
                code: 'RO-HD',
                name: 'Hunedoara',
            },
            {
                code: 'RO-IL',
                name: 'Ialomita',
            },
            {
                code: 'RO-IS',
                name: 'Iasi',
            },
            {
                code: 'RO-IF',
                name: 'Ilfov',
            },
            {
                code: 'RO-MM',
                name: 'Maramures',
            },
            {
                code: 'RO-MH',
                name: 'Mehedinti',
            },
            {
                code: 'RO-MS',
                name: 'Mures',
            },
            {
                code: 'RO-NT',
                name: 'Neamt',
            },
            {
                code: 'RO-OT',
                name: 'Olt',
            },
            {
                code: 'RO-PH',
                name: 'Prahova',
            },
            {
                code: 'RO-SJ',
                name: 'Salaj',
            },
            {
                code: 'RO-SM',
                name: 'Satu Mare',
            },
            {
                code: 'RO-SB',
                name: 'Sibiu',
            },
            {
                code: 'RO-SV',
                name: 'Suceava',
            },
            {
                code: 'RO-TR',
                name: 'Teleorman',
            },
            {
                code: 'RO-TM',
                name: 'Timis',
            },
            {
                code: 'RO-TL',
                name: 'Tulcea',
            },
            {
                code: 'RO-VL',
                name: 'Vâlcea',
            },
            {
                code: 'RO-VS',
                name: 'Vaslui',
            },
            {
                code: 'RO-VN',
                name: 'Vrancea',
            },
        ],
    },
    {
        code: 'RU',
        id: 2324,
        name: 'Russian Federation',
        states: [
            {
                code: 'RS01',
                name: 'Adygeya Republic',
            },
            {
                code: 'RS02',
                name: 'Aginskiy Buryatskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS03',
                name: 'Altay Republic',
            },
            {
                code: 'RS04',
                name: 'Altayskiy Kray',
            },
            {
                code: 'RS05',
                name: "Amurskaya Oblast'",
            },
            {
                code: 'RS06',
                name: "Arkhangel'skaya Oblast'",
            },
            {
                code: 'RS07',
                name: "Astrakhanskaya Oblast'",
            },
            {
                code: 'RS08',
                name: 'Bashkortostan Republic',
            },
            {
                code: 'RS09',
                name: "Belgorodskaya Oblast'",
            },
            {
                code: 'RS10',
                name: "Bryanskaya Oblast'",
            },
            {
                code: 'RS11',
                name: 'Buryatiya Republic',
            },
            {
                code: 'RSCI',
                name: 'Chechnya Republic',
            },
            {
                code: 'RS13',
                name: "Chelyabinskaya Oblast'",
            },
            {
                code: 'RS14',
                name: "Chitinskaya Oblast'",
            },
            {
                code: 'RS15',
                name: 'Chukotskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS16',
                name: 'Chuvashiya Republic',
            },
            {
                code: 'RS17',
                name: 'Dagestan Republic',
            },
            {
                code: 'RS18',
                name: 'Evenkiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS20',
                name: "Irkutskaya Oblast'",
            },
            {
                code: 'RS21',
                name: "Ivanovskaya Oblast'",
            },
            {
                code: 'RS22',
                name: 'Kabardino-Balkariya Republic',
            },
            {
                code: 'RS23',
                name: "Kaliningradskaya Oblast'",
            },
            {
                code: 'RS24',
                name: 'Kalmykiya Republic',
            },
            {
                code: 'RS25',
                name: "Kaluzhskaya Oblast'",
            },
            {
                code: 'RS26',
                name: "Kamchatskaya Oblast'",
            },
            {
                code: 'RS27',
                name: 'Karachayevo-Cherkesiya Republic',
            },
            {
                code: 'RS28',
                name: 'Kareliya Republic',
            },
            {
                code: 'RS29',
                name: "Kemerovskaya Oblast'",
            },
            {
                code: 'RS30',
                name: 'Khabarovskiy Kray',
            },
            {
                code: 'RS31',
                name: 'Khakasiya Republic',
            },
            {
                code: 'RS32',
                name: 'Khanty-Mansiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS33',
                name: "Kirovskaya Oblast'",
            },
            {
                code: 'RS34',
                name: 'Komi Republic',
            },
            {
                code: 'RS36',
                name: 'Koryakskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS37',
                name: "Kostromskaya Oblast'",
            },
            {
                code: 'RS38',
                name: 'Krasnodarskiy Kray',
            },
            {
                code: 'RS39',
                name: 'Krasnoyarskiy Kray',
            },
            {
                code: 'RS40',
                name: "Kurganskaya Oblast'",
            },
            {
                code: 'RS41',
                name: "Kurskaya Oblast'",
            },
            {
                code: 'RS42',
                name: "Leningradskaya Oblast'",
            },
            {
                code: 'RS43',
                name: "Lipetskaya Oblast'",
            },
            {
                code: 'RS44',
                name: "Magadanskaya Oblast'",
            },
            {
                code: 'RS45',
                name: 'Mariy-El Republic',
            },
            {
                code: 'RS46',
                name: 'Mordoviya Republic',
            },
            {
                code: 'RS47',
                name: "Moskovskaya Oblast'",
            },
            {
                code: 'RS48',
                name: 'Moskva Federal City',
            },
            {
                code: 'RS49',
                name: "Murmanskaya Oblast'",
            },
            {
                code: 'RS50',
                name: 'Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS51',
                name: "Nizhegorodskaya Oblast'",
            },
            {
                code: 'RS52',
                name: "Novgorodskaya Oblast'",
            },
            {
                code: 'RS53',
                name: "Novosibirskaya Oblast'",
            },
            {
                code: 'RS54',
                name: "Omskaya Oblast'",
            },
            {
                code: 'RS55',
                name: "Orenburgskaya Oblast'",
            },
            {
                code: 'RS56',
                name: "Orlovskaya Oblast'",
            },
            {
                code: 'RS57',
                name: "Penzenskaya Oblast'",
            },
            {
                code: 'RS90',
                name: 'Permskiy Kray',
            },
            {
                code: 'RS59',
                name: 'Primorskiy Kray',
            },
            {
                code: 'RS60',
                name: "Pskovskaya Oblast'",
            },
            {
                code: 'RS61',
                name: "Rostovskaya Oblast'",
            },
            {
                code: 'RS62',
                name: "Ryazanskaya Oblast'",
            },
            {
                code: 'RS63',
                name: 'Sakha (Yakutiya) Republic',
            },
            {
                code: 'RS64',
                name: "Sakhalinskaya Oblast'",
            },
            {
                code: 'RS65',
                name: "Samarskaya Oblast'",
            },
            {
                code: 'RS66',
                name: 'Sankt-Peterburg Federal City',
            },
            {
                code: 'RS67',
                name: "Saratovskaya Oblast'",
            },
            {
                code: 'RS68',
                name: 'Severnaya Osetiya-Alaniya Respublika',
            },
            {
                code: 'RS69',
                name: "Smolenskaya Oblast'",
            },
            {
                code: 'RS70',
                name: "Stavropol'skiy Kray",
            },
            {
                code: 'RS71',
                name: "Sverdlovskaya Oblast'",
            },
            {
                code: 'RS72',
                name: "Tambovskaya Oblast'",
            },
            {
                code: 'RS73',
                name: 'Tatarstan Republic',
            },
            {
                code: 'RS74',
                name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug',
            },
            {
                code: 'RS75',
                name: "Tomskaya Oblast'",
            },
            {
                code: 'RS76',
                name: "Tul'skaya Oblast'",
            },
            {
                code: 'RS77',
                name: "Tverskaya Oblast'",
            },
            {
                code: 'RS78',
                name: "Tyumenskaya Oblast'",
            },
            {
                code: 'RS79',
                name: 'Tyva Republic',
            },
            {
                code: 'RS80',
                name: 'Udmurtiya Republic',
            },
            {
                code: 'RS81',
                name: "Ul'yanovskaya Oblast'",
            },
            {
                code: 'RS82',
                name: "Ust'-Ordynskiy Buryatskiy Avtonomnyy Okrug",
            },
            {
                code: 'RS83',
                name: "Vladimirskaya Oblast'",
            },
            {
                code: 'RS84',
                name: "Volgogradskaya Oblast'",
            },
            {
                code: 'RS85',
                name: "Vologodskaya Oblast'",
            },
            {
                code: 'RS86',
                name: "Voronezhskaya Oblast'",
            },
            {
                code: 'RS87',
                name: 'Yamalo-Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS88',
                name: "Yaroslavskaya Oblast'",
            },
            {
                code: 'RS89',
                name: "Yevreyskaya Avtonomnaya Oblast'",
            },
        ],
    },
    {
        code: 'RW',
        id: 2325,
        name: 'Rwanda',
        states: [
            {
                code: 'RW11',
                name: 'Eastern',
            },
            {
                code: 'RW12',
                name: 'Kigali City',
            },
            {
                code: 'RW13',
                name: 'Northern',
            },
            {
                code: 'RW15',
                name: 'Southern',
            },
            {
                code: 'RW14',
                name: 'Western',
            },
        ],
    },
    {
        code: 'BL',
        id: 2432,
        name: 'Saint Barthélemy',
        states: [],
    },
    {
        code: 'SH',
        id: 2433,
        name: 'Saint Helena; Ascension and Tristan Da Cunha',
        states: [],
    },
    {
        code: 'KN',
        id: 2399,
        name: 'Saint Kitts and Nevis',
        states: [],
    },
    {
        code: 'LC',
        id: 2326,
        name: 'Saint Lucia',
        states: [],
    },
    {
        code: 'MF',
        id: 2434,
        name: 'Saint Martin',
        states: [
            {
                code: 'MF.SM',
                name: 'Saint Martin',
            },
        ],
    },
    {
        code: 'PM',
        id: 2435,
        name: 'Saint Pierre And Miquelon',
        states: [],
    },
    {
        code: 'VC',
        id: 2400,
        name: 'Saint Vincent and Grenadines',
        states: [],
    },
    {
        code: 'WS',
        id: 2401,
        name: 'Samoa',
        states: [
            {
                code: 'WS01',
                name: "A'ana",
            },
            {
                code: 'WS02',
                name: 'Aiga-i-le-Tai',
            },
            {
                code: 'WS03',
                name: 'Atua',
            },
            {
                code: 'WS04',
                name: "Fa'asaleleaga",
            },
            {
                code: 'WS05',
                name: "Gaga'emauga",
            },
            {
                code: 'WS07',
                name: 'Gagaifomauga',
            },
            {
                code: 'WS08',
                name: 'Palauli',
            },
            {
                code: 'WS09',
                name: "Satupa'itea",
            },
            {
                code: 'WS10',
                name: 'Tuamasaga',
            },
            {
                code: 'WS06',
                name: "Va'a-o-Fonoti",
            },
            {
                code: 'WS11',
                name: 'Vaisigano',
            },
        ],
    },
    {
        code: 'SM',
        id: 2327,
        name: 'San Marino',
        states: [],
    },
    {
        code: 'TP',
        id: 2403,
        name: 'Sao Tome and Principe',
        states: [],
    },
    {
        code: 'SA',
        id: 2328,
        name: 'Saudi Arabia',
        states: [
            {
                code: 'SA02',
                name: 'Al Bahah',
            },
            {
                code: 'SA15',
                name: 'Al Hudud ash Shamaliyah',
            },
            {
                code: 'SA20',
                name: 'Al Jawf',
            },
            {
                code: 'SA05',
                name: 'Al Madinah',
            },
            {
                code: 'SA08',
                name: 'Al Qasim',
            },
            {
                code: 'SA10',
                name: 'Ar Riyad',
            },
            {
                code: 'SA06',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'SA11',
                name: 'Asir',
            },
            {
                code: 'SA13',
                name: "Ha'il",
            },
            {
                code: 'SA17',
                name: 'Jizan',
            },
            {
                code: 'SA14',
                name: 'Makkah',
            },
            {
                code: 'SA16',
                name: 'Najran',
            },
            {
                code: 'SA19',
                name: 'Tabuk',
            },
        ],
    },
    {
        code: 'SN',
        id: 2329,
        name: 'Senegal',
        states: [
            {
                code: 'SG01',
                name: 'Dakar',
            },
            {
                code: 'SG03',
                name: 'Diourbel',
            },
            {
                code: 'SG09',
                name: 'Fatick',
            },
            {
                code: 'SG16',
                name: 'Kaffrine',
            },
            {
                code: 'SG10',
                name: 'Kaolack',
            },
            {
                code: 'SG17',
                name: 'Kédougou',
            },
            {
                code: 'SG11',
                name: 'Kolda',
            },
            {
                code: 'SG13',
                name: 'Louga',
            },
            {
                code: 'SG15',
                name: 'Matam',
            },
            {
                code: 'SG14',
                name: 'Saint-Louis',
            },
            {
                code: 'SG18',
                name: 'Sédhiou',
            },
            {
                code: 'SG05',
                name: 'Tambacounda',
            },
            {
                code: 'SG07',
                name: 'Thiès',
            },
            {
                code: 'SG12',
                name: 'Ziguinchor',
            },
        ],
    },
    {
        code: 'RI',
        id: 2402,
        name: 'Serbia',
        states: [
            {
                code: 'RS-00',
                name: 'Belgrade',
            },
            {
                code: 'RS-14',
                name: 'Borski okrug',
            },
            {
                code: 'RS-11',
                name: 'Branicevski okrug',
            },
            {
                code: 'RS-23',
                name: 'Jablanicki okrug',
            },
            {
                code: 'RS-06',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-04',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-09',
                name: 'Kolubarski okrug',
            },
            {
                code: 'RS-25',
                name: 'Kosovski okrug',
            },
            {
                code: 'RS-28',
                name: 'Kosovsko-Mitrovacki okrug',
            },
            {
                code: 'RS-29',
                name: 'Kosovsko-Pomoravski okrug',
            },
            {
                code: 'RS-08',
                name: 'Macvanski okrug',
            },
            {
                code: 'RS-17',
                name: 'Moravicki okrug',
            },
            {
                code: 'RS-20',
                name: 'Nišavski okrug',
            },
            {
                code: 'RS-24',
                name: 'Pcinjski okrug',
            },
            {
                code: 'RS-26',
                name: 'Pecki okrug',
            },
            {
                code: 'RS-22',
                name: 'Pirotski okrug',
            },
            {
                code: 'RS-10',
                name: 'Podunavski okrug',
            },
            {
                code: 'RS-13',
                name: 'Pomoravski okrug',
            },
            {
                code: 'RS-27',
                name: 'Prizrenski okrug',
            },
            {
                code: 'RS-19',
                name: 'Rasinski okrug',
            },
            {
                code: 'RS-18',
                name: 'Raška okrug',
            },
            {
                code: 'RS-01',
                name: 'Severnobacki okrug',
            },
            {
                code: 'RS-03',
                name: 'Severnobanatski okrug',
            },
            {
                code: 'RS-02',
                name: 'Srednjebanatski okrug',
            },
            {
                code: 'RS-07',
                name: 'Sremski okrug',
            },
            {
                code: 'RS-12',
                name: 'Šumadijski okrug',
            },
            {
                code: 'RS-21',
                name: 'Toplièki okrug',
            },
            {
                code: 'RS-15',
                name: 'Zajeèarski okrug',
            },
            {
                code: 'RS-05',
                name: 'Zapadnobaèki okrug',
            },
            {
                code: 'RS-16',
                name: 'Zlatiborski okrug',
            },
        ],
    },
    {
        code: 'SC',
        id: 2331,
        name: 'Seychelles',
        states: [],
    },
    {
        code: 'SL',
        id: 2332,
        name: 'Sierra Leone',
        states: [
            {
                code: 'SL01',
                name: 'Eastern',
            },
            {
                code: 'SL02',
                name: 'Northern',
            },
            {
                code: 'SL03',
                name: 'Southern',
            },
            {
                code: 'SL04',
                name: 'Western',
            },
        ],
    },
    {
        code: 'SG',
        id: 2333,
        name: 'Singapore',
        states: [
            {
                code: 'SG01',
                name: 'Central Singapore',
            },
            {
                code: 'SG02',
                name: 'North East',
            },
            {
                code: 'SG03',
                name: 'North West',
            },
            {
                code: 'SG04',
                name: 'South East',
            },
            {
                code: 'SG05',
                name: 'South West',
            },
        ],
    },
    {
        code: 'SX',
        id: 2448,
        name: 'Sint Maarten',
        states: [
            {
                code: 'SX.SM',
                name: 'Sint Maarten',
            },
        ],
    },
    {
        code: 'SK',
        id: 2334,
        name: 'Slovakia',
        states: [
            {
                code: 'SK-BC',
                name: 'Banskobystrický kraj',
            },
            {
                code: 'SK-BL',
                name: 'Bratislavský kraj',
            },
            {
                code: 'SK-KI',
                name: 'Košický kraj',
            },
            {
                code: 'SK-NI',
                name: 'Nitriansky kraj',
            },
            {
                code: 'SK-PV',
                name: 'Prešovský kraj',
            },
            {
                code: 'SK-TC',
                name: 'Trenciansky kraj',
            },
            {
                code: 'SK-TA',
                name: 'Trnavský kraj',
            },
            {
                code: 'SK-ZI',
                name: 'Žilinský kraj',
            },
        ],
    },
    {
        code: 'SI',
        id: 2335,
        name: 'Slovenia',
        states: [
            {
                code: 'SI-001',
                name: 'Ajdovšcina',
            },
            {
                code: 'SI-195',
                name: 'Apace',
            },
            {
                code: 'SI-002',
                name: 'Beltinci',
            },
            {
                code: 'SI-148',
                name: 'Benedikt',
            },
            {
                code: 'SI-149',
                name: 'Bistrica ob Sotli',
            },
            {
                code: 'SI-003',
                name: 'Bled',
            },
            {
                code: 'SI-150',
                name: 'Bloke',
            },
            {
                code: 'SI-004',
                name: 'Bohinj',
            },
            {
                code: 'SI-005',
                name: 'Borovnica',
            },
            {
                code: 'SI-006',
                name: 'Bovec',
            },
            {
                code: 'SI-151',
                name: 'Braslovce',
            },
            {
                code: 'SI-007',
                name: 'Brda',
            },
            {
                code: 'SI-009',
                name: 'Brežice',
            },
            {
                code: 'SI-008',
                name: 'Brezovica',
            },
            {
                code: 'SI-152',
                name: 'Cankova',
            },
            {
                code: 'SI-011',
                name: 'Celje',
            },
            {
                code: 'SI-012',
                name: 'Cerklje na Gorenjskem',
            },
            {
                code: 'SI-013',
                name: 'Cerknica',
            },
            {
                code: 'SI-014',
                name: 'Cerkno',
            },
            {
                code: 'SI-153',
                name: 'Cerkvenjak',
            },
            {
                code: 'SI-197',
                name: 'Cirkulane',
            },
            {
                code: 'SI-015',
                name: 'Crenšovci',
            },
            {
                code: 'SI-016',
                name: 'Crna na Koroškem',
            },
            {
                code: 'SI-017',
                name: 'Crnomelj',
            },
            {
                code: 'SI-018',
                name: 'Destrnik',
            },
            {
                code: 'SI-019',
                name: 'Divaca',
            },
            {
                code: 'SI-154',
                name: 'Dobje',
            },
            {
                code: 'SI-020',
                name: 'Dobrepolje',
            },
            {
                code: 'SI-155',
                name: 'Dobrna',
            },
            {
                code: 'SI-021',
                name: 'Dobrova-Polhov Gradec',
            },
            {
                code: 'SI-156',
                name: 'Dobrovnik/Dobronak',
            },
            {
                code: 'SI-022',
                name: 'Dol pri Ljubljani',
            },
            {
                code: 'SI-157',
                name: 'Dolenjske Toplice',
            },
            {
                code: 'SI-023',
                name: 'Domžale',
            },
            {
                code: 'SI-024',
                name: 'Dornava',
            },
            {
                code: 'SI-025',
                name: 'Dravograd',
            },
            {
                code: 'SI-026',
                name: 'Duplek',
            },
            {
                code: 'SI-027',
                name: 'Gorenja vas-Poljane',
            },
            {
                code: 'SI-028',
                name: 'Gorišnica',
            },
            {
                code: 'SI-207',
                name: 'Gorje',
            },
            {
                code: 'SI-029',
                name: 'Gornja Radgona',
            },
            {
                code: 'SI-030',
                name: 'Gornji Grad',
            },
            {
                code: 'SI-031',
                name: 'Gornji Petrovci',
            },
            {
                code: 'SI-158',
                name: 'Grad',
            },
            {
                code: 'SI-032',
                name: 'Grosuplje',
            },
            {
                code: 'SI-159',
                name: 'Hajdina',
            },
            {
                code: 'SI-160',
                name: 'Hoce-Slivnica',
            },
            {
                code: 'SI-161',
                name: 'Hodoš/Hodos',
            },
            {
                code: 'SI-162',
                name: 'Horjul',
            },
            {
                code: 'SI-034',
                name: 'Hrastnik',
            },
            {
                code: 'SI-035',
                name: 'Hrpelje-Kozina',
            },
            {
                code: 'SI-036',
                name: 'Idrija',
            },
            {
                code: 'SI-037',
                name: 'Ig',
            },
            {
                code: 'SI-038',
                name: 'Ilirska Bistrica',
            },
            {
                code: 'SI-039',
                name: 'Ivancna Gorica',
            },
            {
                code: 'SI-040',
                name: 'Izola/Isola',
            },
            {
                code: 'SI-041',
                name: 'Jesenice',
            },
            {
                code: 'SI-163',
                name: 'Jezersko',
            },
            {
                code: 'SI-042',
                name: 'Juršinci',
            },
            {
                code: 'SI-043',
                name: 'Kamnik',
            },
            {
                code: 'SI-044',
                name: 'Kanal',
            },
            {
                code: 'SI-045',
                name: 'Kidricevo',
            },
            {
                code: 'SI-046',
                name: 'Kobarid',
            },
            {
                code: 'SI-047',
                name: 'Kobilje',
            },
            {
                code: 'SI-048',
                name: 'Kocevje',
            },
            {
                code: 'SI-049',
                name: 'Komen',
            },
            {
                code: 'SI-164',
                name: 'Komenda',
            },
            {
                code: 'SI-050',
                name: 'Koper/Capodistria',
            },
            {
                code: 'SI-196',
                name: 'Kosanjevica na Krki',
            },
            {
                code: 'SI-165',
                name: 'Kostel',
            },
            {
                code: 'SI-051',
                name: 'Kozje',
            },
            {
                code: 'SI-052',
                name: 'Kranj',
            },
            {
                code: 'SI-053',
                name: 'Kranjska Gora',
            },
            {
                code: 'SI-166',
                name: 'Križevci',
            },
            {
                code: 'SI-054',
                name: 'Krško',
            },
            {
                code: 'SI-055',
                name: 'Kungota',
            },
            {
                code: 'SI-056',
                name: 'Kuzma',
            },
            {
                code: 'SI-057',
                name: 'Laško',
            },
            {
                code: 'SI-058',
                name: 'Lenart',
            },
            {
                code: 'SI-059',
                name: 'Lendava/Lendva',
            },
            {
                code: 'SI-060',
                name: 'Litija',
            },
            {
                code: 'SI-061',
                name: 'Ljubljana',
            },
            {
                code: 'SI-062',
                name: 'Ljubno',
            },
            {
                code: 'SI-063',
                name: 'Ljutomer',
            },
            {
                code: 'SI-208',
                name: 'Log-Dragomer',
            },
            {
                code: 'SI-064',
                name: 'Logatec',
            },
            {
                code: 'SI-065',
                name: 'Loška dolina',
            },
            {
                code: 'SI-066',
                name: 'Loški Potok',
            },
            {
                code: 'SI-167',
                name: 'Lovrenc na Pohorju',
            },
            {
                code: 'SI-067',
                name: 'Luce',
            },
            {
                code: 'SI-068',
                name: 'Lukovica',
            },
            {
                code: 'SI-069',
                name: 'Majšperk',
            },
            {
                code: 'SI-198',
                name: 'Makole',
            },
            {
                code: 'SI-070',
                name: 'Maribor',
            },
            {
                code: 'SI-168',
                name: 'Markovci',
            },
            {
                code: 'SI-071',
                name: 'Medvode',
            },
            {
                code: 'SI-072',
                name: 'Mengeš',
            },
            {
                code: 'SI-073',
                name: 'Metlika',
            },
            {
                code: 'SI-074',
                name: 'Mežica',
            },
            {
                code: 'SI-169',
                name: 'Miklavž na Dravskem polju',
            },
            {
                code: 'SI-075',
                name: 'Miren-Kostanjevica',
            },
            {
                code: 'SI-170',
                name: 'Mirna Pec',
            },
            {
                code: 'SI-076',
                name: 'Mislinja',
            },
            {
                code: 'SI-199',
                name: 'Mokronog-Trebelno',
            },
            {
                code: 'SI-077',
                name: 'Moravce',
            },
            {
                code: 'SI-078',
                name: 'Moravske Toplice',
            },
            {
                code: 'SI-079',
                name: 'Mozirje',
            },
            {
                code: 'SI-080',
                name: 'Murska Sobota',
            },
            {
                code: 'SI-081',
                name: 'Muta',
            },
            {
                code: 'SI-082',
                name: 'Naklo',
            },
            {
                code: 'SI-083',
                name: 'Nazarje',
            },
            {
                code: 'SI-084',
                name: 'Nova Gorica',
            },
            {
                code: 'SI-085',
                name: 'Novo mesto',
            },
            {
                code: 'SI-086',
                name: 'Odranci',
            },
            {
                code: 'SI-171',
                name: 'Oplotnica',
            },
            {
                code: 'SI-087',
                name: 'Ormož',
            },
            {
                code: 'SI-088',
                name: 'Osilnica',
            },
            {
                code: 'SI-089',
                name: 'Pesnica',
            },
            {
                code: 'SI-090',
                name: 'Piran/Pirano',
            },
            {
                code: 'SI-091',
                name: 'Pivka',
            },
            {
                code: 'SI-092',
                name: 'Podcetrtek',
            },
            {
                code: 'SI-172',
                name: 'Podlehnik',
            },
            {
                code: 'SI-093',
                name: 'Podvelka',
            },
            {
                code: 'SI-200',
                name: 'Poljcane',
            },
            {
                code: 'SI-173',
                name: 'Polzela',
            },
            {
                code: 'SI-094',
                name: 'Postojna',
            },
            {
                code: 'SI-174',
                name: 'Prebold',
            },
            {
                code: 'SI-095',
                name: 'Preddvor',
            },
            {
                code: 'SI-175',
                name: 'Prevalje',
            },
            {
                code: 'SI-096',
                name: 'Ptuj',
            },
            {
                code: 'SI-097',
                name: 'Puconci',
            },
            {
                code: 'SI-098',
                name: 'Race-Fram',
            },
            {
                code: 'SI-099',
                name: 'Radece',
            },
            {
                code: 'SI-100',
                name: 'Radenci',
            },
            {
                code: 'SI-101',
                name: 'Radlje ob Dravi',
            },
            {
                code: 'SI-102',
                name: 'Radovljica',
            },
            {
                code: 'SI-103',
                name: 'Ravne na Koroškem',
            },
            {
                code: 'SI-176',
                name: 'Razkrižje',
            },
            {
                code: 'SI-209',
                name: 'Recica ob Savinji',
            },
            {
                code: 'SI-201',
                name: 'Rence-Vogrsko',
            },
            {
                code: 'SI-177',
                name: 'Ribnica na Pohorju',
            },
            {
                code: 'SI-104',
                name: 'Ribnica',
            },
            {
                code: 'SI-106',
                name: 'Rogaška Slatina',
            },
            {
                code: 'SI-105',
                name: 'Rogašovci',
            },
            {
                code: 'SI-107',
                name: 'Rogatec',
            },
            {
                code: 'SI-108',
                name: 'Ruše',
            },
            {
                code: 'SI-033',
                name: 'Šalovci',
            },
            {
                code: 'SI-178',
                name: 'Selnica ob Dravi',
            },
            {
                code: 'SI-109',
                name: 'Semic',
            },
            {
                code: 'SI-183',
                name: 'Šempeter-Vrtojba',
            },
            {
                code: 'SI-117',
                name: 'Šencur',
            },
            {
                code: 'SI-118',
                name: 'Šentilj',
            },
            {
                code: 'SI-119',
                name: 'Šentjernej',
            },
            {
                code: 'SI-120',
                name: 'Šentjur pri Celju',
            },
            {
                code: 'SI-211',
                name: 'Šentrupert',
            },
            {
                code: 'SI-110',
                name: 'Sevnica',
            },
            {
                code: 'SI-111',
                name: 'Sežana',
            },
            {
                code: 'SI-121',
                name: 'Škocjan',
            },
            {
                code: 'SI-122',
                name: 'Škofja Loka',
            },
            {
                code: 'SI-123',
                name: 'Škofljica',
            },
            {
                code: 'SI-112',
                name: 'Slovenj Gradec',
            },
            {
                code: 'SI-113',
                name: 'Slovenska Bistrica',
            },
            {
                code: 'SI-114',
                name: 'Slovenske Konjice',
            },
            {
                code: 'SI-124',
                name: 'Šmarje pri Jelšah',
            },
            {
                code: 'SI-206',
                name: 'Šmarješke Toplice',
            },
            {
                code: 'SI-125',
                name: 'Šmartno ob Paki',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-179',
                name: 'Sodražica',
            },
            {
                code: 'SI-180',
                name: 'Solcava',
            },
            {
                code: 'SI-126',
                name: 'Šoštanj',
            },
            {
                code: 'SI-202',
                name: 'Središce ob Dravi',
            },
            {
                code: 'SI-115',
                name: 'Starše',
            },
            {
                code: 'SI-127',
                name: 'Štore',
            },
            {
                code: 'SI-203',
                name: 'Straža',
            },
            {
                code: 'SI-181',
                name: 'Sveta Ana',
            },
            {
                code: 'SI-204',
                name: 'Sveta Trojica v Slovenskih Goricah',
            },
            {
                code: 'SI-182',
                name: 'Sveti Andraž v Slovenskih goricah',
            },
            {
                code: 'SI-116',
                name: 'Sveti Jurij',
            },
            {
                code: 'SI-210',
                name: 'Sveti Jurij v Slovenskih Goricah',
            },
            {
                code: 'SI-205',
                name: 'Sveti Tomaž',
            },
            {
                code: 'SI-184',
                name: 'Tabor',
            },
            {
                code: 'SI-010',
                name: 'Tišina',
            },
            {
                code: 'SI-128',
                name: 'Tolmin',
            },
            {
                code: 'SI-129',
                name: 'Trbovlje',
            },
            {
                code: 'SI-130',
                name: 'Trebnje',
            },
            {
                code: 'SI-185',
                name: 'Trnovska vas',
            },
            {
                code: 'SI-131',
                name: 'Tržic',
            },
            {
                code: 'SI-186',
                name: 'Trzin',
            },
            {
                code: 'SI-132',
                name: 'Turnišce',
            },
            {
                code: 'SI-133',
                name: 'Velenje',
            },
            {
                code: 'SI-187',
                name: 'Velika Polana',
            },
            {
                code: 'SI-134',
                name: 'Velike Lašce',
            },
            {
                code: 'SI-188',
                name: 'Veržej',
            },
            {
                code: 'SI-135',
                name: 'Videm',
            },
            {
                code: 'SI-136',
                name: 'Vipava',
            },
            {
                code: 'SI-137',
                name: 'Vitanje',
            },
            {
                code: 'SI-138',
                name: 'Vodice',
            },
            {
                code: 'SI-139',
                name: 'Vojnik',
            },
            {
                code: 'SI-189',
                name: 'Vransko',
            },
            {
                code: 'SI-140',
                name: 'Vrhnika',
            },
            {
                code: 'SI-141',
                name: 'Vuzenica',
            },
            {
                code: 'SI-142',
                name: 'Zagorje ob Savi',
            },
            {
                code: 'SI-190',
                name: 'Žalec',
            },
            {
                code: 'SI-143',
                name: 'Zavrc',
            },
            {
                code: 'SI-146',
                name: 'Železniki',
            },
            {
                code: 'SI-191',
                name: 'Žetale',
            },
            {
                code: 'SI-147',
                name: 'Žiri',
            },
            {
                code: 'SI-192',
                name: 'Žirovnica',
            },
            {
                code: 'SI-144',
                name: 'Zrece',
            },
            {
                code: 'SI-193',
                name: 'Žužemberk',
            },
        ],
    },
    {
        code: 'SB',
        id: 2336,
        name: 'Solomon Islands',
        states: [],
    },
    {
        code: 'SO',
        id: 2337,
        name: 'Somalia',
        states: [
            {
                code: 'SO21',
                name: 'Awdal',
            },
            {
                code: 'SO01',
                name: 'Bakool',
            },
            {
                code: 'SO02',
                name: 'Banaadir',
            },
            {
                code: 'SO03',
                name: 'Bari',
            },
            {
                code: 'SO04',
                name: 'Bay',
            },
            {
                code: 'SO05',
                name: 'Galguduud',
            },
            {
                code: 'SO06',
                name: 'Gedo',
            },
            {
                code: 'SO07',
                name: 'Hiiraan',
            },
            {
                code: 'SO08',
                name: 'Jubbada Dhexe',
            },
            {
                code: 'SO09',
                name: 'Jubbada Hoose',
            },
            {
                code: 'SO10',
                name: 'Mudug',
            },
            {
                code: 'SO18',
                name: 'Nugaal',
            },
            {
                code: 'SO12',
                name: 'Sanaag',
            },
            {
                code: 'SO13',
                name: 'Shabeellaha Dhexe',
            },
            {
                code: 'SO14',
                name: 'Shabeellaha Hoose',
            },
            {
                code: 'SO22',
                name: 'Sool',
            },
            {
                code: 'SO19',
                name: 'Togdheer',
            },
            {
                code: 'SO20',
                name: 'Woqooyi Galbeed',
            },
        ],
    },
    {
        code: 'ZA',
        id: 2338,
        name: 'South Africa',
        states: [
            {
                code: 'SF01',
                name: 'Cape Province',
            },
            {
                code: 'SF05',
                name: 'Eastern Cape',
            },
            {
                code: 'SF03',
                name: 'Free State',
            },
            {
                code: 'SF06',
                name: 'Gauteng',
            },
            {
                code: 'SF02',
                name: 'KwaZulu-Natal',
            },
            {
                code: 'SF09',
                name: 'Limpopo',
            },
            {
                code: 'SF07',
                name: 'Mpumalanga',
            },
            {
                code: 'SF10',
                name: 'North-West',
            },
            {
                code: 'SF08',
                name: 'Northern Cape',
            },
            {
                code: 'SF04',
                name: 'Transvaal',
            },
            {
                code: 'SF11',
                name: 'Western Cape',
            },
        ],
    },
    {
        code: 'GS',
        id: 2436,
        name: 'South Georgia and the South Sandwich Islands',
        states: [],
    },
    {
        code: 'SS',
        id: 2447,
        name: 'South Sudan',
        states: [
            {
                code: 'OD01',
                name: 'Central Equatoria',
            },
            {
                code: 'OD02',
                name: 'East Equatoria',
            },
            {
                code: 'OD03',
                name: 'Jungoli',
            },
            {
                code: 'OD04',
                name: 'Lakes',
            },
            {
                code: 'OD05',
                name: 'North Bahr-al-Ghazal',
            },
            {
                code: 'OD06',
                name: 'Unity',
            },
            {
                code: 'OD07',
                name: 'Upper Nile',
            },
            {
                code: 'OD08',
                name: 'Warap',
            },
            {
                code: 'OD09',
                name: 'West Bahr-al-Ghazal',
            },
            {
                code: 'OD10',
                name: 'West Equatoria',
            },
        ],
    },
    {
        code: 'ES',
        id: 2339,
        name: 'Spain',
        states: [
            {
                code: 'SP23',
                name: 'A Coruña',
            },
            {
                code: 'SP01',
                name: 'Alava',
            },
            {
                code: 'SP02',
                name: 'Albacete',
            },
            {
                code: 'SP03',
                name: 'Alicante',
            },
            {
                code: 'SP04',
                name: 'Almeria',
            },
            {
                code: 'SP51',
                name: 'Andalucia',
            },
            {
                code: 'SP52',
                name: 'Aragon',
            },
            {
                code: 'SP34',
                name: 'Asturias',
            },
            {
                code: 'SP05',
                name: 'Avila',
            },
            {
                code: 'SP06',
                name: 'Badajoz',
            },
            {
                code: 'SP08',
                name: 'Barcelona',
            },
            {
                code: 'SP09',
                name: 'Burgos',
            },
            {
                code: 'SP10',
                name: 'Caceres',
            },
            {
                code: 'SP11',
                name: 'Cadiz',
            },
            {
                code: 'SP53',
                name: 'Canarias',
            },
            {
                code: 'SP39',
                name: 'Cantabria',
            },
            {
                code: 'SP12',
                name: 'Castellon',
            },
            {
                code: 'SP55',
                name: 'Castilla y Leon',
            },
            {
                code: 'SP54',
                name: 'Castilla-La Mancha',
            },
            {
                code: 'SP56',
                name: 'Cataluna',
            },
            {
                code: 'SP13',
                name: 'Ciudad Real',
            },
            {
                code: 'SP14',
                name: 'Cordoba',
            },
            {
                code: 'SP15',
                name: 'Cuenca',
            },
            {
                code: 'SP57',
                name: 'Extremadura',
            },
            {
                code: 'SP58',
                name: 'Galicia',
            },
            {
                code: 'SP16',
                name: 'Gerona',
            },
            {
                code: 'SP17',
                name: 'Granada',
            },
            {
                code: 'SP18',
                name: 'Guadalajara',
            },
            {
                code: 'SP19',
                name: 'Guipuzcoa',
            },
            {
                code: 'SP20',
                name: 'Huelva',
            },
            {
                code: 'SP21',
                name: 'Huesca',
            },
            {
                code: 'SP07',
                name: 'Islas Baleares',
            },
            {
                code: 'SP22',
                name: 'Jaen',
            },
            {
                code: 'SP23',
                name: 'La Coruna',
            },
            {
                code: 'SP27',
                name: 'La Rioja',
            },
            {
                code: 'SP24',
                name: 'Las Palmas',
            },
            {
                code: 'SP25',
                name: 'Leon',
            },
            {
                code: 'SP26',
                name: 'Lerida',
            },
            {
                code: 'SP28',
                name: 'Lugo',
            },
            {
                code: 'SP29',
                name: 'Madrid',
            },
            {
                code: 'SP30',
                name: 'Malaga',
            },
            {
                code: 'SP31',
                name: 'Murcia',
            },
            {
                code: 'SP32',
                name: 'Navarra',
            },
            {
                code: 'SP33',
                name: 'Orense',
            },
            {
                code: 'SP59',
                name: 'Pais Vasco',
            },
            {
                code: 'SP35',
                name: 'Palencia',
            },
            {
                code: 'SP36',
                name: 'Pontevedra',
            },
            {
                code: 'SP37',
                name: 'Salamanca',
            },
            {
                code: 'SP38',
                name: 'Santa Cruz de Tenerife',
            },
            {
                code: 'SP40',
                name: 'Segovia',
            },
            {
                code: 'SP41',
                name: 'Sevilla',
            },
            {
                code: 'SP42',
                name: 'Soria',
            },
            {
                code: 'SP43',
                name: 'Tarragona',
            },
            {
                code: 'SP44',
                name: 'Teruel',
            },
            {
                code: 'SP45',
                name: 'Toledo',
            },
            {
                code: 'SP46',
                name: 'Valencia',
            },
            {
                code: 'SP60',
                name: 'Valenciana',
            },
            {
                code: 'SP47',
                name: 'Valladolid',
            },
            {
                code: 'SP48',
                name: 'Vizcaya',
            },
            {
                code: 'SP49',
                name: 'Zamora',
            },
            {
                code: 'SP50',
                name: 'Zaragoza',
            },
        ],
    },
    {
        code: 'LK',
        id: 2340,
        name: 'Sri Lanka',
        states: [],
    },
    {
        code: 'SD',
        id: 2341,
        name: 'Sudan',
        states: [
            {
                code: 'SU42',
                name: 'Blue Nile',
            },
            {
                code: 'SU61',
                name: 'Central Darfur',
            },
            {
                code: 'SU60',
                name: 'East Darfur',
            },
            {
                code: 'SU39',
                name: 'Gedarif',
            },
            {
                code: 'SU38',
                name: 'Gezira',
            },
            {
                code: 'SU52',
                name: 'Kassala',
            },
            {
                code: 'SU29',
                name: 'Khartoum',
            },
            {
                code: 'SU55',
                name: 'North Darfur',
            },
            {
                code: 'SU56',
                name: 'North Kordofan',
            },
            {
                code: 'SU43',
                name: 'Northern',
            },
            {
                code: 'SU36',
                name: 'Red Sea',
            },
            {
                code: 'SU53',
                name: 'River Nile',
            },
            {
                code: 'SU58',
                name: 'Sennar',
            },
            {
                code: 'SU49',
                name: 'South Darfur',
            },
            {
                code: 'SU50',
                name: 'South Kordofan',
            },
            {
                code: 'SU47',
                name: 'West Darfur',
            },
            {
                code: 'SU62',
                name: 'West Kordofan',
            },
            {
                code: 'SU41',
                name: 'White Nile',
            },
        ],
    },
    {
        code: 'SR',
        id: 2342,
        name: 'Suriname',
        states: [
            {
                code: 'NS10',
                name: 'Brokopondo',
            },
            {
                code: 'NS11',
                name: 'Commewijne',
            },
            {
                code: 'NS12',
                name: 'Coronie',
            },
            {
                code: 'NS13',
                name: 'Marowijne',
            },
            {
                code: 'NS14',
                name: 'Nickerie',
            },
            {
                code: 'NS16',
                name: 'Paramaribo',
            },
            {
                code: 'NS15',
                name: 'Para',
            },
            {
                code: 'NS17',
                name: 'Saramacca',
            },
            {
                code: 'NS18',
                name: 'Sipaliwini',
            },
            {
                code: 'NS19',
                name: 'Wanica',
            },
        ],
    },
    {
        code: 'SJ',
        id: 2437,
        name: 'Svalbard And Jan Mayen',
        states: [],
    },
    {
        code: 'SZ',
        id: 2343,
        name: 'Swaziland',
        states: [
            {
                code: 'WZ01',
                name: 'Hhohho',
            },
            {
                code: 'WZ02',
                name: 'Lubombo',
            },
            {
                code: 'WZ03',
                name: 'Manzini',
            },
            {
                code: 'WZ04',
                name: 'Shiselweni',
            },
        ],
    },
    {
        code: 'SE',
        id: 2344,
        name: 'Sweden',
        states: [
            {
                code: 'SE-K',
                name: 'Blekinge län',
            },
            {
                code: 'SE-W',
                name: 'Dalarnas län',
            },
            {
                code: 'SE-X',
                name: 'Gävleborgs län',
            },
            {
                code: 'SE-I',
                name: 'Gotlands län',
            },
            {
                code: 'SE-N',
                name: 'Hallands län',
            },
            {
                code: 'SE-Z',
                name: 'Jämtlands län',
            },
            {
                code: 'SE-F',
                name: 'Jönköpings län',
            },
            {
                code: 'SE-H',
                name: 'Kalmar län',
            },
            {
                code: 'SE-G',
                name: 'Kronobergs län',
            },
            {
                code: 'SE-BD',
                name: 'Norrbottens län',
            },
            {
                code: 'SE-M',
                name: 'Skåne län',
            },
            {
                code: 'SE-D',
                name: 'Södermanlands län',
            },
            {
                code: 'SE-AB',
                name: 'Stockholms län',
            },
            {
                code: 'SE-C',
                name: 'Uppsala län',
            },
            {
                code: 'SE-S',
                name: 'Värmlands län',
            },
            {
                code: 'SE-AC',
                name: 'Västerbottens län',
            },
            {
                code: 'SE-Y',
                name: 'Västernorrlands län',
            },
            {
                code: 'SE-U',
                name: 'Västmanlands län',
            },
            {
                code: 'SE-O',
                name: 'Västra Götalands län',
            },
            {
                code: 'SE-T',
                name: 'Örebro län',
            },
            {
                code: 'SE-E',
                name: 'Östergötlands län',
            },
        ],
    },
    {
        code: 'CH',
        id: 2345,
        name: 'Switzerland',
        states: [
            {
                code: 'AG',
                name: 'Aargau',
            },
            {
                code: 'AR',
                name: 'Appenzell Ausserrhoden',
            },
            {
                code: 'AI',
                name: 'Appenzell Innerrhoden',
            },
            {
                code: 'BL',
                name: 'Basel-Landschaft',
            },
            {
                code: 'BS',
                name: 'Basel-Stadt',
            },
            {
                code: 'BE',
                name: 'Bern',
            },
            {
                code: 'FR',
                name: 'Fribourg',
            },
            {
                code: 'GE',
                name: 'Genève',
            },
            {
                code: 'GL',
                name: 'Glarus',
            },
            {
                code: 'GR',
                name: 'Graubünden',
            },
            {
                code: 'JU',
                name: 'Jura',
            },
            {
                code: 'LU',
                name: 'Luzern',
            },
            {
                code: 'NE',
                name: 'Neuchâtel',
            },
            {
                code: 'NW',
                name: 'Nidwalden',
            },
            {
                code: 'OW',
                name: 'Obwalden',
            },
            {
                code: 'SG',
                name: 'Sankt Gallen',
            },
            {
                code: 'SH',
                name: 'Schaffhausen',
            },
            {
                code: 'SZ',
                name: 'Schwyz',
            },
            {
                code: 'SO',
                name: 'Solothurn',
            },
            {
                code: 'TG',
                name: 'Thurgau',
            },
            {
                code: 'TI',
                name: 'Ticino',
            },
            {
                code: 'UR',
                name: 'Uri',
            },
            {
                code: 'VS',
                name: 'Valais',
            },
            {
                code: 'VD',
                name: 'Vaud',
            },
            {
                code: 'ZG',
                name: 'Zug',
            },
            {
                code: 'ZH',
                name: 'Zürich',
            },
        ],
    },
    {
        code: 'SY',
        id: 2381,
        name: 'Syrian Arab Republic',
        states: [
            {
                code: 'SY01',
                name: 'Al Hasakah',
            },
            {
                code: 'SY09',
                name: 'Aleppo',
            },
            {
                code: 'SY04',
                name: 'Ar Raqqah',
            },
            {
                code: 'SY05',
                name: "As Suwayda'",
            },
            {
                code: 'SY13',
                name: 'Damascus',
            },
            {
                code: 'SY06',
                name: 'Dar`a',
            },
            {
                code: 'SY07',
                name: 'Dayr az Zawr',
            },
            {
                code: 'SY10',
                name: 'Hama',
            },
            {
                code: 'SY11',
                name: 'Hims',
            },
            {
                code: 'SY12',
                name: 'Idlib',
            },
            {
                code: 'SY02',
                name: 'Latakia',
            },
            {
                code: 'SY03',
                name: 'Quneitra',
            },
            {
                code: 'SY08',
                name: 'Rif Dimashq',
            },
            {
                code: 'SY14',
                name: 'Tartus',
            },
        ],
    },
    {
        code: 'TW',
        id: 2375,
        name: 'Taiwan',
        states: [
            {
                code: 'TW02',
                name: 'Kaohsiung',
            },
            {
                code: 'TW03',
                name: 'Taipei',
            },
        ],
    },
    {
        code: 'TJ',
        id: 2348,
        name: 'Tajikistan',
        states: [
            {
                code: 'TI01',
                name: 'Badakhshoni Kuni',
            },
            {
                code: 'TI04',
                name: 'Dushanbe',
            },
            {
                code: 'TI02',
                name: 'Khatlon',
            },
            {
                code: 'TI05',
                name: 'Regions of Republican Subordination',
            },
            {
                code: 'TI03',
                name: 'Sogd',
            },
        ],
    },
    {
        code: 'TZ',
        id: 2349,
        name: 'Tanzania',
        states: [
            {
                code: 'TZ26',
                name: 'Arusha',
            },
            {
                code: 'TZ23',
                name: 'Dar es Salaam',
            },
            {
                code: 'TZ03',
                name: 'Dodoma',
            },
            {
                code: 'TZ28',
                name: 'Geita',
            },
            {
                code: 'TZ04',
                name: 'Iringa',
            },
            {
                code: 'TZ19',
                name: 'Kagera',
            },
            {
                code: 'TZ29',
                name: 'Katavi',
            },
            {
                code: 'TZ05',
                name: 'Kigoma',
            },
            {
                code: 'TZ06',
                name: 'Kilimanjaro',
            },
            {
                code: 'TZ07',
                name: 'Lindi',
            },
            {
                code: 'TZ27',
                name: 'Manyara',
            },
            {
                code: 'TZ08',
                name: 'Mara',
            },
            {
                code: 'TZ09',
                name: 'Mbeya',
            },
            {
                code: 'TZ10',
                name: 'Morogoro',
            },
            {
                code: 'TZ11',
                name: 'Mtwara',
            },
            {
                code: 'TZ12',
                name: 'Mwanza',
            },
            {
                code: 'TZ30',
                name: 'Njombe',
            },
            {
                code: 'TZ13',
                name: 'Pemba North',
            },
            {
                code: 'TZ20',
                name: 'Pemba South',
            },
            {
                code: 'TZ02',
                name: 'Pwani',
            },
            {
                code: 'TZ24',
                name: 'Rukwa',
            },
            {
                code: 'TZ14',
                name: 'Ruvuma',
            },
            {
                code: 'TZ15',
                name: 'Shinyanga',
            },
            {
                code: 'TZ31',
                name: 'Simiyu',
            },
            {
                code: 'TZ16',
                name: 'Singida',
            },
            {
                code: 'TZ17',
                name: 'Tabora',
            },
            {
                code: 'TZ18',
                name: 'Tanga',
            },
            {
                code: 'TZ22',
                name: 'Zanzibar North',
            },
            {
                code: 'TZ21',
                name: 'Zanzibar South and Central',
            },
            {
                code: 'TZ25',
                name: 'Zanzibar West',
            },
        ],
    },
    {
        code: 'TH',
        id: 2350,
        name: 'Thailand',
        states: [
            {
                code: 'TH77',
                name: 'Amnat Charoen',
            },
            {
                code: 'TH35',
                name: 'Ang Thong',
            },
            {
                code: 'TH40',
                name: 'Bangkok Metropolis',
            },
            {
                code: 'TH81',
                name: 'Bueng Kan',
            },
            {
                code: 'TH28',
                name: 'Buri Ram',
            },
            {
                code: 'TH44',
                name: 'Chachoengsao',
            },
            {
                code: 'TH32',
                name: 'Chai Nat',
            },
            {
                code: 'TH26',
                name: 'Chaiyaphum',
            },
            {
                code: 'TH48',
                name: 'Chanthaburi',
            },
            {
                code: 'TH02',
                name: 'Chiang Mai',
            },
            {
                code: 'TH03',
                name: 'Chiang Rai',
            },
            {
                code: 'TH46',
                name: 'Chon Buri',
            },
            {
                code: 'TH58',
                name: 'Chumphon',
            },
            {
                code: 'TH23',
                name: 'Kalasin',
            },
            {
                code: 'TH11',
                name: 'Kamphaeng Phet',
            },
            {
                code: 'TH50',
                name: 'Kanchanaburi',
            },
            {
                code: 'TH22',
                name: 'Khon Kaen',
            },
            {
                code: 'TH63',
                name: 'Krabi',
            },
            {
                code: 'TH06',
                name: 'Lampang',
            },
            {
                code: 'TH05',
                name: 'Lamphun',
            },
            {
                code: 'TH18',
                name: 'Loei',
            },
            {
                code: 'TH34',
                name: 'Lop Buri',
            },
            {
                code: 'TH01',
                name: 'Mae Hong Son',
            },
            {
                code: 'TH24',
                name: 'Maha Sarakham',
            },
            {
                code: 'TH78',
                name: 'Mukdahan',
            },
            {
                code: 'TH43',
                name: 'Nakhon Nayok',
            },
            {
                code: 'TH53',
                name: 'Nakhon Pathom',
            },
            {
                code: 'TH73',
                name: 'Nakhon Phanom',
            },
            {
                code: 'TH27',
                name: 'Nakhon Ratchasima',
            },
            {
                code: 'TH16',
                name: 'Nakhon Sawan',
            },
            {
                code: 'TH64',
                name: 'Nakhon Si Thammarat',
            },
            {
                code: 'TH04',
                name: 'Nan',
            },
            {
                code: 'TH31',
                name: 'Narathiwat',
            },
            {
                code: 'TH79',
                name: 'Nong Bua Lam Phu',
            },
            {
                code: 'TH17',
                name: 'Nong Khai',
            },
            {
                code: 'TH38',
                name: 'Nonthaburi',
            },
            {
                code: 'TH39',
                name: 'Pathum Thani',
            },
            {
                code: 'TH69',
                name: 'Pattani',
            },
            {
                code: 'TH61',
                name: 'Phangnga',
            },
            {
                code: 'TH66',
                name: 'Phatthalung',
            },
            {
                code: 'TH41',
                name: 'Phayao',
            },
            {
                code: 'TH14',
                name: 'Phetchabun',
            },
            {
                code: 'TH56',
                name: 'Phetchaburi',
            },
            {
                code: 'TH13',
                name: 'Phichit',
            },
            {
                code: 'TH12',
                name: 'Phitsanulok',
            },
            {
                code: 'TH36',
                name: 'Phra Nakhon Si Ayutthaya',
            },
            {
                code: 'TH07',
                name: 'Phrae',
            },
            {
                code: 'TH62',
                name: 'Phuket',
            },
            {
                code: 'TH74',
                name: 'Prachin Buri',
            },
            {
                code: 'TH57',
                name: 'Prachuap Khiri Khan',
            },
            {
                code: 'TH59',
                name: 'Ranong',
            },
            {
                code: 'TH52',
                name: 'Ratchaburi',
            },
            {
                code: 'TH47',
                name: 'Rayong',
            },
            {
                code: 'TH25',
                name: 'Roi Et',
            },
            {
                code: 'TH80',
                name: 'Sa Kaeo',
            },
            {
                code: 'TH20',
                name: 'Sakon Nakhon',
            },
            {
                code: 'TH42',
                name: 'Samut Prakan',
            },
            {
                code: 'TH55',
                name: 'Samut Sakhon',
            },
            {
                code: 'TH54',
                name: 'Samut Songkhram',
            },
            {
                code: 'TH37',
                name: 'Saraburi',
            },
            {
                code: 'TH67',
                name: 'Satun',
            },
            {
                code: 'TH30',
                name: 'Si Sa Ket',
            },
            {
                code: 'TH33',
                name: 'Sing Buri',
            },
            {
                code: 'TH68',
                name: 'Songkhla',
            },
            {
                code: 'TH09',
                name: 'Sukhothai',
            },
            {
                code: 'TH51',
                name: 'Suphan Buri',
            },
            {
                code: 'TH60',
                name: 'Surat Thani',
            },
            {
                code: 'TH29',
                name: 'Surin',
            },
            {
                code: 'TH08',
                name: 'Tak',
            },
            {
                code: 'TH65',
                name: 'Trang',
            },
            {
                code: 'TH49',
                name: 'Trat',
            },
            {
                code: 'TH75',
                name: 'Ubon Ratchathani',
            },
            {
                code: 'TH76',
                name: 'Udon Thani',
            },
            {
                code: 'TH15',
                name: 'Uthai Thani',
            },
            {
                code: 'TH10',
                name: 'Uttaradit',
            },
            {
                code: 'TH70',
                name: 'Yala',
            },
            {
                code: 'TH72',
                name: 'Yasothon',
            },
        ],
    },
    {
        code: 'TL',
        id: 2404,
        name: 'Timor-Leste',
        states: [],
    },
    {
        code: 'TG',
        id: 2351,
        name: 'Togo',
        states: [
            {
                code: 'TO22',
                name: 'Centrale',
            },
            {
                code: 'TO23',
                name: 'Kara',
            },
            {
                code: 'TO24',
                name: 'Maritime',
            },
            {
                code: 'TO25',
                name: 'Plateaux',
            },
            {
                code: 'TO26',
                name: 'Savanes',
            },
        ],
    },
    {
        code: 'TK',
        id: 2438,
        name: 'Tokelau',
        states: [],
    },
    {
        code: 'TO',
        id: 2405,
        name: 'Tonga',
        states: [],
    },
    {
        code: 'TT',
        id: 2352,
        name: 'Trinidad and Tobago',
        states: [
            {
                code: 'TD01',
                name: 'Arima',
            },
            {
                code: 'TD13',
                name: 'Chaguanas',
            },
            {
                code: 'TD14',
                name: 'Couva/Tabaquite/Talparo',
            },
            {
                code: 'TD15',
                name: 'Diego Martin',
            },
            {
                code: 'TD11',
                name: 'Eastern Tobago',
            },
            {
                code: 'TD16',
                name: 'Mayaro/Rio Claro',
            },
            {
                code: 'TD17',
                name: 'Penal/Debe',
            },
            {
                code: 'TD18',
                name: 'Point Fortin',
            },
            {
                code: 'TD05',
                name: 'Port of Spain',
            },
            {
                code: 'TD19',
                name: 'Princes Town',
            },
            {
                code: 'TD10',
                name: 'San Fernando',
            },
            {
                code: 'TD20',
                name: 'San Juan/Laventille',
            },
            {
                code: 'TD21',
                name: 'Sangre Grande',
            },
            {
                code: 'TD22',
                name: 'Siparia',
            },
            {
                code: 'TD23',
                name: 'Tunapuna/Piarco',
            },
            {
                code: 'TD11',
                name: 'Western Tobago',
            },
        ],
    },
    {
        code: 'TN',
        id: 2353,
        name: 'Tunisia',
        states: [
            {
                code: 'TS38',
                name: 'Ariana',
            },
            {
                code: 'TS17',
                name: 'Béja',
            },
            {
                code: 'TS27',
                name: 'Ben Arous',
            },
            {
                code: 'TS18',
                name: 'Bizerte',
            },
            {
                code: 'TS29',
                name: 'Gabès',
            },
            {
                code: 'TS30',
                name: 'Gafsa',
            },
            {
                code: 'TS06',
                name: 'Jendouba',
            },
            {
                code: 'TS03',
                name: 'Kairouan',
            },
            {
                code: 'TS02',
                name: 'Kassérine',
            },
            {
                code: 'TS31',
                name: 'Kebili',
            },
            {
                code: 'TS14',
                name: 'Le Kef',
            },
            {
                code: 'TS15',
                name: 'Mahdia',
            },
            {
                code: 'TS39',
                name: 'Manouba',
            },
            {
                code: 'TS28',
                name: 'Médenine',
            },
            {
                code: 'TS16',
                name: 'Monastir',
            },
            {
                code: 'TS19',
                name: 'Nabeul',
            },
            {
                code: 'TS32',
                name: 'Sfax',
            },
            {
                code: 'TS33',
                name: 'Sidi Bou Zid',
            },
            {
                code: 'TS22',
                name: 'Siliana',
            },
            {
                code: 'TS23',
                name: 'Sousse',
            },
            {
                code: 'TS34',
                name: 'Tataouine',
            },
            {
                code: 'TS35',
                name: 'Tozeur',
            },
            {
                code: 'TS36',
                name: 'Tunis',
            },
            {
                code: 'TS37',
                name: 'Zaghouan',
            },
        ],
    },
    {
        code: 'TR',
        id: 2354,
        name: 'Turkey',
        states: [
            {
                code: 'TU81',
                name: 'Adana',
            },
            {
                code: 'TU02',
                name: 'Adiyaman',
            },
            {
                code: 'TU03',
                name: 'Afyonkarahisar',
            },
            {
                code: 'TU04',
                name: 'Agri',
            },
            {
                code: 'TU75',
                name: 'Aksaray',
            },
            {
                code: 'TU05',
                name: 'Amasya',
            },
            {
                code: 'TU68',
                name: 'Ankara',
            },
            {
                code: 'TU07',
                name: 'Antalya',
            },
            {
                code: 'TU86',
                name: 'Ardahan',
            },
            {
                code: 'TU08',
                name: 'Artvin',
            },
            {
                code: 'TU09',
                name: 'Aydin',
            },
            {
                code: 'TU10',
                name: 'Balikesir',
            },
            {
                code: 'TU87',
                name: 'Bartin',
            },
            {
                code: 'TU76',
                name: 'Batman',
            },
            {
                code: 'TU77',
                name: 'Bayburt',
            },
            {
                code: 'TU11',
                name: 'Bilecik',
            },
            {
                code: 'TU12',
                name: 'Bingöl',
            },
            {
                code: 'TU13',
                name: 'Bitlis',
            },
            {
                code: 'TU14',
                name: 'Bolu',
            },
            {
                code: 'TU15',
                name: 'Burdur',
            },
            {
                code: 'TU16',
                name: 'Bursa',
            },
            {
                code: 'TU17',
                name: 'Çanakkale',
            },
            {
                code: 'TU82',
                name: 'Çankiri',
            },
            {
                code: 'TU19',
                name: 'Çorum',
            },
            {
                code: 'TU20',
                name: 'Denizli',
            },
            {
                code: 'TU21',
                name: 'Diyarbakir',
            },
            {
                code: 'TU93',
                name: 'Düzce',
            },
            {
                code: 'TU22',
                name: 'Edirne',
            },
            {
                code: 'TU23',
                name: 'Elazig',
            },
            {
                code: 'TU24',
                name: 'Erzincan',
            },
            {
                code: 'TU25',
                name: 'Erzurum',
            },
            {
                code: 'TU26',
                name: 'Eskisehir',
            },
            {
                code: 'TU83',
                name: 'Gaziantep',
            },
            {
                code: 'TU28',
                name: 'Giresun',
            },
            {
                code: 'TU69',
                name: 'Gümüshane',
            },
            {
                code: 'TU70',
                name: 'Hakkari',
            },
            {
                code: 'TU31',
                name: 'Hatay',
            },
            {
                code: 'TU88',
                name: 'Igdir',
            },
            {
                code: 'TU33',
                name: 'Isparta',
            },
            {
                code: 'TU34',
                name: 'Istanbul',
            },
            {
                code: 'TU35',
                name: 'Izmir',
            },
            {
                code: 'TU46',
                name: 'Kahramanmaras',
            },
            {
                code: 'TU89',
                name: 'Karabük',
            },
            {
                code: 'TU78',
                name: 'Karaman',
            },
            {
                code: 'TU84',
                name: 'Kars',
            },
            {
                code: 'TU37',
                name: 'Kastamonu',
            },
            {
                code: 'TU38',
                name: 'Kayseri',
            },
            {
                code: 'TU90',
                name: 'Kilis',
            },
            {
                code: 'TU79',
                name: 'Kirikkale',
            },
            {
                code: 'TU39',
                name: 'Kirklareli',
            },
            {
                code: 'TU40',
                name: 'Kirsehir',
            },
            {
                code: 'TU41',
                name: 'Kocaeli',
            },
            {
                code: 'TU71',
                name: 'Konya',
            },
            {
                code: 'TU43',
                name: 'Kütahya',
            },
            {
                code: 'TU44',
                name: 'Malatya',
            },
            {
                code: 'TU45',
                name: 'Manisa',
            },
            {
                code: 'TU72',
                name: 'Mardin',
            },
            {
                code: 'TU32',
                name: 'Mersin',
            },
            {
                code: 'TU48',
                name: 'Mugla',
            },
            {
                code: 'TU49',
                name: 'Mus',
            },
            {
                code: 'TU50',
                name: 'Nevsehir',
            },
            {
                code: 'TU73',
                name: 'Nigde',
            },
            {
                code: 'TU52',
                name: 'Ordu',
            },
            {
                code: 'TU91',
                name: 'Osmaniye',
            },
            {
                code: 'TU53',
                name: 'Rize',
            },
            {
                code: 'TU54',
                name: 'Sakarya',
            },
            {
                code: 'TU55',
                name: 'Samsun',
            },
            {
                code: 'TU63',
                name: 'Sanliurfa',
            },
            {
                code: 'TU74',
                name: 'Siirt',
            },
            {
                code: 'TU57',
                name: 'Sinop',
            },
            {
                code: 'TU80',
                name: 'Sirnak',
            },
            {
                code: 'TU58',
                name: 'Sivas',
            },
            {
                code: 'TU59',
                name: 'Tekirdag',
            },
            {
                code: 'TU60',
                name: 'Tokat',
            },
            {
                code: 'TU61',
                name: 'Trabzon',
            },
            {
                code: 'TU62',
                name: 'Tunceli',
            },
            {
                code: 'TU64',
                name: 'Usak',
            },
            {
                code: 'TU65',
                name: 'Van',
            },
            {
                code: 'TU92',
                name: 'Yalova',
            },
            {
                code: 'TU66',
                name: 'Yozgat',
            },
            {
                code: 'TU85',
                name: 'Zonguldak',
            },
        ],
    },
    {
        code: 'TM',
        id: 2355,
        name: 'Turkmenistan',
        states: [
            {
                code: 'TX01',
                name: 'Ahal',
            },
            {
                code: 'TM.AB',
                name: 'Ashgabat',
            },
            {
                code: 'TX02',
                name: 'Balkan',
            },
            {
                code: 'TX03',
                name: 'Dashoguz',
            },
            {
                code: 'TX04',
                name: 'Lebap',
            },
            {
                code: 'TX05',
                name: 'Mary',
            },
        ],
    },
    {
        code: 'TC',
        id: 2439,
        name: 'Turks and Caicos Islands',
        states: [],
    },
    {
        code: 'TV',
        id: 2440,
        name: 'Tuvalu',
        states: [],
    },
    {
        code: 'UG',
        id: 2356,
        name: 'Uganda',
        states: [
            {
                code: 'UG.AI',
                name: 'Abim',
            },
            {
                code: 'UG.AD',
                name: 'Adjumani',
            },
            {
                code: 'UG.AG',
                name: 'Agago',
            },
            {
                code: 'UG.AL',
                name: 'Alebtong',
            },
            {
                code: 'UG.AT',
                name: 'Amolatar',
            },
            {
                code: 'UG.AZ',
                name: 'Amudat',
            },
            {
                code: 'UG.AM',
                name: 'Amuria',
            },
            {
                code: 'UG.AY',
                name: 'Amuru',
            },
            {
                code: 'UG.AQ',
                name: 'Apac',
            },
            {
                code: 'UG.AX',
                name: 'Arua',
            },
            {
                code: 'UG.BD',
                name: 'Budaka',
            },
            {
                code: 'UG.BA',
                name: 'Bududa',
            },
            {
                code: 'UG.BI',
                name: 'Bugiri',
            },
            {
                code: 'UG.BH',
                name: 'Buhweju',
            },
            {
                code: 'UG.BZ',
                name: 'Buikwe',
            },
            {
                code: 'UG.BE',
                name: 'Bukedea',
            },
            {
                code: 'UG.BM',
                name: 'Bukomansimbi',
            },
            {
                code: 'UG.BW',
                name: 'Bukwo',
            },
            {
                code: 'UG.BB',
                name: 'Bulambuli',
            },
            {
                code: 'UG.BL',
                name: 'Buliisa',
            },
            {
                code: 'UG.BX',
                name: 'Bundibugyo',
            },
            {
                code: 'UG.BC',
                name: 'Bushenyi',
            },
            {
                code: 'UG.BU',
                name: 'Busia',
            },
            {
                code: 'UG.BJ',
                name: 'Butaleja',
            },
            {
                code: 'UG.BT',
                name: 'Butambala',
            },
            {
                code: 'UG.BV',
                name: 'Buvuma',
            },
            {
                code: 'UG.BY',
                name: 'Buyende',
            },
            {
                code: 'UG.DO',
                name: 'Dokolo',
            },
            {
                code: 'UG.GM',
                name: 'Gomba',
            },
            {
                code: 'UG.GL',
                name: 'Gulu',
            },
            {
                code: 'UG.HO',
                name: 'Hoima',
            },
            {
                code: 'UG.IB',
                name: 'Ibanda',
            },
            {
                code: 'UG.IC',
                name: 'Iganga',
            },
            {
                code: 'UG.NG',
                name: 'Isingiro',
            },
            {
                code: 'UG.JI',
                name: 'Jinja',
            },
            {
                code: 'UG.AB',
                name: 'Kaabong',
            },
            {
                code: 'UG.KA',
                name: 'Kabale',
            },
            {
                code: 'UG.BR',
                name: 'Kabarole',
            },
            {
                code: 'UG.KD',
                name: 'Kaberamaido',
            },
            {
                code: 'UG.KN',
                name: 'Kalangala',
            },
            {
                code: 'UG.RO',
                name: 'Kaliro',
            },
            {
                code: 'UG.QA',
                name: 'Kalungu',
            },
            {
                code: 'UG.KM',
                name: 'Kampala',
            },
            {
                code: 'UG.QU',
                name: 'Kamuli',
            },
            {
                code: 'UG.KE',
                name: 'Kamwenge',
            },
            {
                code: 'UG.UU',
                name: 'Kanungu',
            },
            {
                code: 'UG.QP',
                name: 'Kapchorwa',
            },
            {
                code: 'UG.KS',
                name: 'Kasese',
            },
            {
                code: 'UG.KK',
                name: 'Katakwi',
            },
            {
                code: 'UG.KY',
                name: 'Kayunga',
            },
            {
                code: 'UG.KI',
                name: 'Kibaale',
            },
            {
                code: 'UG.QO',
                name: 'Kiboga',
            },
            {
                code: 'UG.QB',
                name: 'Kibuku',
            },
            {
                code: 'UG.KH',
                name: 'Kiruhuura',
            },
            {
                code: 'UG.QD',
                name: 'Kiryandongo',
            },
            {
                code: 'UG.KR',
                name: 'Kisoro',
            },
            {
                code: 'UG.QT',
                name: 'Kitgum',
            },
            {
                code: 'UG.OK',
                name: 'Koboko',
            },
            {
                code: 'UG.QL',
                name: 'Kole',
            },
            {
                code: 'UG.KF',
                name: 'Kotido',
            },
            {
                code: 'UG.QM',
                name: 'Kumi',
            },
            {
                code: 'UG.QW',
                name: 'Kween',
            },
            {
                code: 'UG.QZ',
                name: 'Kyankwanzi',
            },
            {
                code: 'UG.QG',
                name: 'Kyegegwa',
            },
            {
                code: 'UG.QJ',
                name: 'Kyenjojo',
            },
            {
                code: 'UG.LM',
                name: 'Lamwo',
            },
            {
                code: 'UG.LL',
                name: 'Lira',
            },
            {
                code: 'UG.LK',
                name: 'Luuka',
            },
            {
                code: 'UG.LW',
                name: 'Luwero',
            },
            {
                code: 'UG.LE',
                name: 'Lwengo',
            },
            {
                code: 'UG.LY',
                name: 'Lyantonde',
            },
            {
                code: 'UG.MW',
                name: 'Manafwa',
            },
            {
                code: 'UG.MQ',
                name: 'Masaka',
            },
            {
                code: 'UG.MZ',
                name: 'Masindi',
            },
            {
                code: 'UG.MG',
                name: 'Mayuge',
            },
            {
                code: 'UG.ME',
                name: 'Mbale',
            },
            {
                code: 'UG.RR',
                name: 'Mbarara',
            },
            {
                code: 'UG.MM',
                name: 'Mitoma',
            },
            {
                code: 'UG.TY',
                name: 'Mityana',
            },
            {
                code: 'UG.MX',
                name: 'Moroto',
            },
            {
                code: 'UG.MY',
                name: 'Moyo',
            },
            {
                code: 'UG.MJ',
                name: 'Mpigi',
            },
            {
                code: 'UG.MD',
                name: 'Mubende',
            },
            {
                code: 'UG.MV',
                name: 'Mukono',
            },
            {
                code: 'UG.NI',
                name: 'Nakapiripirit',
            },
            {
                code: 'UG.NK',
                name: 'Nakaseke',
            },
            {
                code: 'UG.NA',
                name: 'Nakasongola',
            },
            {
                code: 'UG.NY',
                name: 'Namayingo',
            },
            {
                code: 'UG.BK',
                name: 'Namutumba',
            },
            {
                code: 'UG.NQ',
                name: 'Napak',
            },
            {
                code: 'UG.NB',
                name: 'Nebbi',
            },
            {
                code: 'UG.NR',
                name: 'Ngora',
            },
            {
                code: 'UG.NO',
                name: 'Ntoroko',
            },
            {
                code: 'UG.NT',
                name: 'Ntungamo',
            },
            {
                code: 'UG.NW',
                name: 'Nwoya',
            },
            {
                code: 'UG.MH',
                name: 'Nyadri',
            },
            {
                code: 'UG.OT',
                name: 'Otuke',
            },
            {
                code: 'UG.OY',
                name: 'Oyam',
            },
            {
                code: 'UG.PR',
                name: 'Pader',
            },
            {
                code: 'UG.PS',
                name: 'Pallisa',
            },
            {
                code: 'UG.RI',
                name: 'Rakai',
            },
            {
                code: 'UG.RZ',
                name: 'Rubirizi',
            },
            {
                code: 'UG.RK',
                name: 'Rukungiri',
            },
            {
                code: 'UG.SE',
                name: 'Sembabule',
            },
            {
                code: 'UG.SX',
                name: 'Serere',
            },
            {
                code: 'UG.SH',
                name: 'Sheema',
            },
            {
                code: 'UG.SK',
                name: 'Sironko',
            },
            {
                code: 'UG.ST',
                name: 'Soroti',
            },
            {
                code: 'UG.TR',
                name: 'Tororo',
            },
            {
                code: 'UG.WA',
                name: 'Wakiso',
            },
            {
                code: 'UG.YU',
                name: 'Yumbe',
            },
            {
                code: 'UG.ZO',
                name: 'Zombo',
            },
        ],
    },
    {
        code: 'UA',
        id: 2357,
        name: 'Ukraine',
        states: [
            {
                code: 'UP01',
                name: 'Cherkasy',
            },
            {
                code: 'UP02',
                name: 'Chernihiv',
            },
            {
                code: 'UP03',
                name: 'Chernivtsi',
            },
            {
                code: 'UP11',
                name: 'Crimea',
            },
            {
                code: 'UP04',
                name: "Dnipropetrovs'k",
            },
            {
                code: 'UP05',
                name: "Donets'k",
            },
            {
                code: 'UP06',
                name: "Ivano-Frankivs'k",
            },
            {
                code: 'UP07',
                name: 'Kharkiv',
            },
            {
                code: 'UP08',
                name: 'Kherson',
            },
            {
                code: 'UP09',
                name: "Khmel'nyts'kyy",
            },
            {
                code: 'UP13',
                name: 'Kiev',
            },
            {
                code: 'UP12',
                name: 'Kiev City',
            },
            {
                code: 'UP10',
                name: 'Kirovohrad',
            },
            {
                code: 'UP15',
                name: "L'viv",
            },
            {
                code: 'UP14',
                name: "Luhans'k",
            },
            {
                code: 'UP16',
                name: 'Mykolayiv',
            },
            {
                code: 'UP17',
                name: 'Odessa',
            },
            {
                code: 'UP18',
                name: 'Poltava',
            },
            {
                code: 'UP19',
                name: 'Rivne',
            },
            {
                code: 'UP20',
                name: "Sevastopol' City",
            },
            {
                code: 'UP21',
                name: 'Sumy',
            },
            {
                code: 'UP22',
                name: "Ternopil'",
            },
            {
                code: 'UP25',
                name: 'Transcarpathia',
            },
            {
                code: 'UP23',
                name: 'Vinnytsya',
            },
            {
                code: 'UP24',
                name: 'Volyn',
            },
            {
                code: 'UP26',
                name: 'Zaporizhzhya',
            },
            {
                code: 'UP27',
                name: 'Zhytomyr',
            },
        ],
    },
    {
        code: 'AE',
        id: 2358,
        name: 'United Arab Emirates',
        states: [
            {
                code: 'AE02',
                name: "'Ajman",
            },
            {
                code: 'AE01',
                name: 'Abu Dhabi',
            },
            {
                code: 'AE04',
                name: 'Al Fujayrah',
            },
            {
                code: 'AE03',
                name: 'Dubai',
            },
            {
                code: 'AE05',
                name: "Ra's al Khaymah",
            },
            {
                code: 'AE06',
                name: 'Sharjah',
            },
            {
                code: 'AE07',
                name: 'Umm al Qaywayn',
            },
        ],
    },
    {
        code: 'UM',
        id: 2441,
        name: 'United States Minor Outlying Islands',
        states: [],
    },
    {
        code: 'UY',
        id: 2360,
        name: 'Uruguay',
        states: [],
    },
    {
        code: 'UZ',
        id: 2361,
        name: 'Uzbekistan',
        states: [
            {
                code: 'UZ01',
                name: 'Andijon',
            },
            {
                code: 'UZ02',
                name: 'Buxoro',
            },
            {
                code: 'UZ03',
                name: 'Farg`ona',
            },
            {
                code: 'UZ15',
                name: 'Jizzax',
            },
            {
                code: 'UZ09',
                name: 'Karakalpakstan',
            },
            {
                code: 'UZ08',
                name: 'Kashkadarya',
            },
            {
                code: 'UZ06',
                name: 'Namangan',
            },
            {
                code: 'UZ07',
                name: 'Navoi',
            },
            {
                code: 'UZ10',
                name: 'Samarkand',
            },
            {
                code: 'UZ16',
                name: 'Sirdaryo',
            },
            {
                code: 'UZ12',
                name: 'Surxondaryo',
            },
            {
                code: 'UZ13',
                name: 'Tashkent City',
            },
            {
                code: 'UZ14',
                name: 'Tashkent',
            },
            {
                code: 'UZ05',
                name: 'Xorazm',
            },
        ],
    },
    {
        code: 'NH',
        id: 2406,
        name: 'Vanuatu',
        states: [],
    },
    {
        code: 'VE',
        id: 2363,
        name: 'Venezuela; Bolivarian Republic of',
        states: [
            {
                code: 'VE01',
                name: 'Amazonas',
            },
            {
                code: 'VE02',
                name: 'Anzoátegui',
            },
            {
                code: 'VE03',
                name: 'Apure',
            },
            {
                code: 'VE04',
                name: 'Aragua',
            },
            {
                code: 'VE05',
                name: 'Barinas',
            },
            {
                code: 'VE06',
                name: 'Bolívar',
            },
            {
                code: 'VE07',
                name: 'Carabobo',
            },
            {
                code: 'VE08',
                name: 'Cojedes',
            },
            {
                code: 'VE09',
                name: 'Delta Amacuro',
            },
            {
                code: 'VE24',
                name: 'Dependencias Federales',
            },
            {
                code: 'VE25',
                name: 'Distrito Capital',
            },
            {
                code: 'VE11',
                name: 'Falcón',
            },
            {
                code: 'VE12',
                name: 'Guárico',
            },
            {
                code: 'VE13',
                name: 'Lara',
            },
            {
                code: 'VE14',
                name: 'Mérida',
            },
            {
                code: 'VE15',
                name: 'Miranda',
            },
            {
                code: 'VE16',
                name: 'Monagas',
            },
            {
                code: 'VE17',
                name: 'Nueva Esparta',
            },
            {
                code: 'VE18',
                name: 'Portuguesa',
            },
            {
                code: 'VE19',
                name: 'Sucre',
            },
            {
                code: 'VE20',
                name: 'Táchira',
            },
            {
                code: 'VE21',
                name: 'Trujillo',
            },
            {
                code: 'VE26',
                name: 'Vargas',
            },
            {
                code: 'VE22',
                name: 'Yaracuy',
            },
            {
                code: 'VE23',
                name: 'Zulia',
            },
        ],
    },
    {
        code: 'VN',
        id: 2364,
        name: 'Vietnam',
        states: [
            {
                code: 'VM01',
                name: 'An Giang',
            },
            {
                code: 'VM45',
                name: 'Ba Ria-Vung Tau',
            },
            {
                code: 'VM72',
                name: 'Bac Can',
            },
            {
                code: 'VM71',
                name: 'Bac Giang',
            },
            {
                code: 'VM73',
                name: 'Bac Lieu',
            },
            {
                code: 'VM74',
                name: 'Bac Ninh',
            },
            {
                code: 'VM03',
                name: 'Ben Tre',
            },
            {
                code: 'VM46',
                name: 'Binh Dinh',
            },
            {
                code: 'VM75',
                name: 'Binh Duong',
            },
            {
                code: 'VM76',
                name: 'Binh Phuoc',
            },
            {
                code: 'VM47',
                name: 'Binh Thuan',
            },
            {
                code: 'VM77',
                name: 'Ca Mau',
            },
            {
                code: 'VM87',
                name: 'Can Tho',
            },
            {
                code: 'VM05',
                name: 'Cao Bang',
            },
            {
                code: 'VM78',
                name: 'Da Nang',
            },
            {
                code: 'VM88',
                name: 'Dac Lac',
            },
            {
                code: 'VM91',
                name: 'Dac Nong',
            },
            {
                code: 'VM92',
                name: 'Dien Bien',
            },
            {
                code: 'VM43',
                name: 'Dong Nai',
            },
            {
                code: 'VM09',
                name: 'Dong Thap',
            },
            {
                code: 'VM49',
                name: 'Gia Lai',
            },
            {
                code: 'VM50',
                name: 'Ha Giang',
            },
            {
                code: 'VM80',
                name: 'Ha Nam',
            },
            {
                code: 'VM52',
                name: 'Ha Tinh',
            },
            {
                code: 'VM79',
                name: 'Hai Duong',
            },
            {
                code: 'VM13',
                name: 'Haiphong',
            },
            {
                code: 'VM44',
                name: 'Hanoi',
            },
            {
                code: 'VM93',
                name: 'Hau Giang',
            },
            {
                code: 'VM20',
                name: 'Ho Chi Minh',
            },
            {
                code: 'VM53',
                name: 'Hoa Binh',
            },
            {
                code: 'VM81',
                name: 'Hung Yen',
            },
            {
                code: 'VM54',
                name: 'Khanh Hoa',
            },
            {
                code: 'VM21',
                name: 'Kien Giang',
            },
            {
                code: 'VM55',
                name: 'Kon Tum',
            },
            {
                code: 'VM89',
                name: 'Lai Chau',
            },
            {
                code: 'VM23',
                name: 'Lam Dong',
            },
            {
                code: 'VM39',
                name: 'Lang Son',
            },
            {
                code: 'VM90',
                name: 'Lao Cai',
            },
            {
                code: 'VM24',
                name: 'Long An',
            },
            {
                code: 'VM82',
                name: 'Nam Dinh',
            },
            {
                code: 'VM58',
                name: 'Nghe An',
            },
            {
                code: 'VM59',
                name: 'Ninh Binh',
            },
            {
                code: 'VM60',
                name: 'Ninh Thuan',
            },
            {
                code: 'VM83',
                name: 'Phu Tho',
            },
            {
                code: 'VM61',
                name: 'Phu Yen',
            },
            {
                code: 'VM62',
                name: 'Quang Binh',
            },
            {
                code: 'VM84',
                name: 'Quang Nam',
            },
            {
                code: 'VM63',
                name: 'Quang Ngai',
            },
            {
                code: 'VM30',
                name: 'Quang Ninh',
            },
            {
                code: 'VM64',
                name: 'Quang Tri',
            },
            {
                code: 'VM65',
                name: 'Soc Trang',
            },
            {
                code: 'VM32',
                name: 'Son La',
            },
            {
                code: 'VM33',
                name: 'Tay Ninh',
            },
            {
                code: 'VM35',
                name: 'Thai Binh',
            },
            {
                code: 'VM85',
                name: 'Thai Nguyen',
            },
            {
                code: 'VM34',
                name: 'Thanh Hoa',
            },
            {
                code: 'VM66',
                name: 'Thua Thien-Hue',
            },
            {
                code: 'VM37',
                name: 'Tien Giang',
            },
            {
                code: 'VM67',
                name: 'Tra Vinh',
            },
            {
                code: 'VM68',
                name: 'Tuyen Quang',
            },
            {
                code: 'VM69',
                name: 'Vinh Long',
            },
            {
                code: 'VM86',
                name: 'Vinh Phuc',
            },
            {
                code: 'VM70',
                name: 'Yen Bai',
            },
        ],
    },
    {
        code: 'VG',
        id: 2446,
        name: 'Virgin Islands; British',
        states: [
            {
                code: 'VG.VI',
                name: 'British Virgin Islands',
            },
        ],
    },
    {
        code: 'VI',
        id: 2442,
        name: 'Virgin Islands; U.S.',
        states: [
            {
                code: '010',
                name: 'Saint Croix',
            },
            {
                code: '020',
                name: 'Saint John',
            },
            {
                code: '030',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'WF',
        id: 2443,
        name: 'Wallis and Futuna',
        states: [],
    },
    {
        code: 'EH',
        id: 2444,
        name: 'Western Sahara',
        states: [],
    },
    {
        code: 'YE',
        id: 2382,
        name: 'Yemen',
        states: [
            {
                code: 'YM01',
                name: 'Abyan',
            },
            {
                code: 'YM20',
                name: "Al Bayda'",
            },
            {
                code: 'YM18',
                name: "Al Dali'",
            },
            {
                code: 'YM08',
                name: 'Al Hudaydah',
            },
            {
                code: 'YM21',
                name: 'Al Jawf',
            },
            {
                code: 'YM03',
                name: 'Al Mahrah',
            },
            {
                code: 'YM10',
                name: 'Al Mahwit',
            },
            {
                code: 'YM19',
                name: 'Amran',
            },
            {
                code: 'YM11',
                name: 'Dhamar',
            },
            {
                code: 'YM04',
                name: 'Hadramawt',
            },
            {
                code: 'YM22',
                name: 'Hajjah',
            },
            {
                code: 'YM23',
                name: 'Ibb',
            },
            {
                code: 'YM24',
                name: 'Lahij',
            },
            {
                code: 'YM14',
                name: "Ma'rib",
            },
            {
                code: 'YM27',
                name: 'Raymah',
            },
            {
                code: 'YM15',
                name: 'Sa`dah',
            },
            {
                code: 'YM16',
                name: "San`a'",
            },
            {
                code: 'YM26',
                name: "San`a' [City]",
            },
            {
                code: 'YM05',
                name: 'Shabwah',
            },
            {
                code: 'YM28',
                name: 'Socotra',
            },
            {
                code: 'YM25',
                name: 'Ta`izz',
            },
            {
                code: 'YM02',
                name: '`Adan',
            },
        ],
    },
    {
        code: 'ZM',
        id: 2369,
        name: 'Zambia',
        states: [
            {
                code: 'ZA02',
                name: 'Central',
            },
            {
                code: 'ZA08',
                name: 'Copperbelt',
            },
            {
                code: 'ZA03',
                name: 'Eastern',
            },
            {
                code: 'ZA04',
                name: 'Luapula',
            },
            {
                code: 'ZA09',
                name: 'Lusaka',
            },
            {
                code: 'ZA10',
                name: 'Muchinga',
            },
            {
                code: 'ZA06',
                name: 'North-Western',
            },
            {
                code: 'ZA05',
                name: 'Northern',
            },
            {
                code: 'ZA07',
                name: 'Southern',
            },
            {
                code: 'ZA01',
                name: 'Western',
            },
        ],
    },
    {
        code: 'ZW',
        id: 2370,
        name: 'Zimbabwe',
        states: [
            {
                code: 'ZI09',
                name: 'Bulawayo',
            },
            {
                code: 'ZI10',
                name: 'Harare',
            },
            {
                code: 'ZI01',
                name: 'Manicaland',
            },
            {
                code: 'ZI03',
                name: 'Mashonaland Central',
            },
            {
                code: 'ZI04',
                name: 'Mashonaland East',
            },
            {
                code: 'ZI05',
                name: 'Mashonaland West',
            },
            {
                code: 'ZI08',
                name: 'Masvingo',
            },
            {
                code: 'ZI06',
                name: 'Matabeleland North',
            },
            {
                code: 'ZI07',
                name: 'Matabeleland South',
            },
            {
                code: 'ZI02',
                name: 'Midlands',
            },
        ],
    },
    {
        code: 'NONE',
        id: 2378,
        name: '- None Specified -',
        states: [],
    },
];
/**
 * Gets all countries
 */
function getCountries() {
    return COUNTRIES.map((country) => country.name);
}
/**
 * Gets a country by country ID
 */
function findByCountryId(id) {
    return COUNTRIES.find((country) => country.id === id);
}
/**
 * Gets a country by country name
 * @param name - Name of country to find
 */
function findByCountryName(name) {
    return COUNTRIES.find((country) => country.name === name.trim());
}
/**
 * Gets a country by country code
 * @param code - Code of country to find
 */
function findByCountryCode(code) {
    return COUNTRIES.find((country) => country.code === code.trim());
}
/**
 * Gets states by country name
 * @param name - Name of the country to search by
 */
function getStateObjects(name) {
    if (name) {
        const foundCountry = COUNTRIES.find((country) => country.name === name.trim());
        return (foundCountry && foundCountry.states) || [];
    }
    return [];
}
/**
 * Gets state names by country name
 * @param name - Name of the country to search by
 */
function getStates(name) {
    return getStateObjects(name).map((state) => state.name);
}

function Deferred() {
    const temp = {};
    const promise = new Promise((resolve, reject) => {
        temp.resolve = resolve;
        temp.reject = reject;
    });
    promise.resolve = temp.resolve;
    promise.reject = temp.reject;
    return promise;
}

const notifications = {};
function notify(message) {
    if (!isDevMode() || message in notifications) {
        return;
    }
    notifications[message] = true;
    console.warn(message); // tslint:disable-line
}

// NG2
class ControlConfig {
    constructor() {
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
        this.highlighted = false;
    }
}
class BaseControl extends ControlConfig {
    constructor(type = 'BaseControl', config = {}) {
        super();
        this.__type = 'BaseControl';
        this.__type = type;
        this.__config = config;
        this.alwaysActive = config.alwaysActive;
        this.validators = config.validators || [];
        this.asyncValidators = config.asyncValidators || [];
        this.value = config.value;
        this.key = config.key || '';
        this.label = config.label || '';
        this.checkboxLabel = config.checkboxLabel;
        this.name = config.name || '';
        this.required = !!config.required;
        this.hidden = !!config.hidden;
        this.encrypted = !!config.encrypted;
        this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
        this.controlType = config.controlType || '';
        this.type = config.type;
        this.subType = config.subType;
        this.metaType = config.metaType;
        this.placeholder = config.placeholder || '';
        this.config = config.config || null;
        this.dirty = !!(config.value !== undefined && config.value !== null);
        this.multiple = !!config.multiple;
        this.headerConfig = config.headerConfig || null;
        this.currencyFormat = config.currencyFormat || null;
        this.associatedEntity = config.associatedEntity || null;
        this.optionsType = config.optionsType || null;
        this.options = config.options || [];
        this.forceClear = new EventEmitter();
        this.readOnly = !!config.readOnly || !!config.disabled;
        this.disabled = !!config.disabled;
        this.enabled = true;
        this.layoutOptions = config.layoutOptions || {};
        this.military = !!config.military;
        this.dateFormat = config.dateFormat;
        this.textMaskEnabled = config.textMaskEnabled;
        this.maskOptions = config.maskOptions;
        this.allowInvalidDate = config.allowInvalidDate;
        this.startDate = config.startDate;
        this.endDate = config.endDate;
        this.restrictFieldInteractions = !!config.restrictFieldInteractions;
        this.highlighted = !!config.highlighted;
        if (!Helpers.isEmpty(config.warning)) {
            this.warning = config.warning;
        }
        if (this.required) {
            this.validators.push(Validators.required);
        }
        if (!Helpers.isBlank(config.maxlength)) {
            this.maxlength = config.maxlength;
            this.validators.push(Validators.maxLength(this.maxlength));
        }
        if (!Helpers.isBlank(config.minlength)) {
            this.minlength = config.minlength;
            this.validators.push(Validators.minLength(this.minlength));
        }
        this.closeOnSelect = !!config.closeOnSelect;
        this.interactions = config.interactions;
        this.dataSpecialization = config.dataSpecialization;
        this.dataType = config.dataType;
        this.appendToBody = !!config.appendToBody;
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        this.parentScrollSelector = config.parentScrollSelector;
        this.description = config.description;
        if (config.tooltip) {
            this.tooltip = config.tooltip;
            this.tooltipPosition = config.tooltipPosition;
            this.tooltipSize = config.tooltipSize;
            this.tooltipPreline = config.tooltipPreline;
            this.removeTooltipArrow = config.removeTooltipArrow;
            this.tooltipAutoPosition = config.tooltipAutoPosition;
        }
        this.template = config.template;
        this.customControlConfig = config.customControlConfig;
        this.tipWell = config.tipWell;
        this.width = config.width;
        this.startupFocus = !!config.startupFocus;
        if (config.fileBrowserImageUploadUrl) {
            this.fileBrowserImageUploadUrl = config.fileBrowserImageUploadUrl;
        }
        if (config.isEmpty) {
            this.isEmpty = config.isEmpty;
        }
        this.weekStart = config.weekStart || 0;
        this.disabledDateMessage = config.disabledDateMessage;
    }
}

// APP
class AceEditorControl extends BaseControl {
    constructor(config) {
        super('AceEditorControl', config);
        this.controlType = 'ace-editor';
    }
}

const MAX_INTEGER = 2147483647;
const MIN_YEAR = 1753;
class FormValidators {
    showStateRequiredFlag(subfield, control) {
        return (subfield === 'state' &&
            !Helpers.isEmpty(control.config.state) &&
            control.config.state.required &&
            Helpers.isBlank(control.value.state) &&
            control.config.state.updated &&
            !Helpers.isBlank(control.value.countryName) &&
            control.config.state.pickerConfig &&
            control.config.state.pickerConfig.defaultOptions &&
            control.config.state.pickerConfig.defaultOptions.length > 0);
    }
    // Makes sure the control value does not exceed the max integer value
    static maxInteger(control) {
        return control.value < MAX_INTEGER ? null : { integerTooLarge: true };
    }
    // Makes sure the control value is above the minimum year
    static minYear(control) {
        if (!control.value) {
            return null;
        }
        return control.value >= MIN_YEAR ? null : { minYear: true };
    }
    // Makes sure the control value does not exceed the max number value
    static maxDouble(control) {
        return control.value < Number.MAX_SAFE_INTEGER ? null : { doubleTooLarge: true };
    }
    // Make sure the control value is an email
    static isEmail(control) {
        const EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        return !control.value || EMAIL_REGEXP.test(control.value) ? null : { invalidEmail: true };
    }
    // Makes sure the control value is a valid address
    static isValidAddress(control) {
        const fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        const invalidAddressFields = [];
        const maxlengthFields = [];
        let returnVal = null;
        let maxlengthError = false;
        const showCountryRequiredFlag = (subfield, ctrl) => {
            return (subfield === 'countryID' &&
                !Helpers.isEmpty(ctrl.config.countryID) &&
                ctrl.config.countryID.required &&
                Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.countryID.updated);
        };
        const showStateRequiredFlag = (subfield, ctrl) => {
            return (subfield === 'state' &&
                !Helpers.isEmpty(ctrl.config.state) &&
                ctrl.config.state.required &&
                Helpers.isBlank(ctrl.value.state) &&
                ctrl.config.state.updated &&
                !Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.state.pickerConfig &&
                ctrl.config.state.pickerConfig.defaultOptions &&
                ctrl.config.state.pickerConfig.defaultOptions.length > 0);
        };
        if (control.value && control.config) {
            let valid = true;
            let formValidity = true;
            fieldList.forEach((subfield) => {
                if (!Helpers.isEmpty(control.config[subfield])) {
                    if ((['countryID', 'state'].indexOf(subfield) === -1 &&
                        control.config[subfield].required &&
                        !Helpers.isBlank(control.value[subfield]) &&
                        Helpers.isEmpty(control.value[subfield])) ||
                        showCountryRequiredFlag(subfield, control) ||
                        showStateRequiredFlag(subfield, control)) {
                        valid = false;
                        invalidAddressFields.push(control.config[subfield].label);
                    }
                    if (((subfield !== 'countryID' && control.config[subfield].required && Helpers.isEmpty(control.value[subfield])) ||
                        (subfield === 'countryID' &&
                            !Helpers.isEmpty(control.config.countryID) &&
                            control.config.countryID.required &&
                            Helpers.isEmpty(control.value.countryName))) &&
                        !(subfield === 'state' &&
                            !Helpers.isBlank(control.value.countryName) &&
                            control.config.state.pickerConfig &&
                            control.config.state.pickerConfig.defaultOptions &&
                            control.config.state.pickerConfig.defaultOptions.length === 0)) {
                        formValidity = false;
                    }
                    if (!Helpers.isEmpty(control.config[subfield].maxlength) &&
                        !Helpers.isEmpty(control.value[subfield]) &&
                        control.value[subfield].length > control.config[subfield].maxlength) {
                        maxlengthError = true;
                        maxlengthFields.push(subfield);
                        formValidity = false;
                    }
                }
            });
            if (!valid || !formValidity || maxlengthError) {
                returnVal = {};
            }
            if (!valid) {
                returnVal.invalidAddress = true;
                returnVal.invalidAddressFields = invalidAddressFields;
            }
            if (!formValidity) {
                returnVal.invalidAddressForForm = true;
            }
            if (maxlengthError) {
                returnVal.maxlength = true;
                returnVal.maxlengthFields = maxlengthFields;
            }
            return returnVal;
        }
        return null;
    }
}

// APP
class AddressControl extends BaseControl {
    constructor(config) {
        super('AddressControl', config);
        this.controlType = 'address';
        this.validators.push(FormValidators.isValidAddress);
    }
}

// APP
class CheckListControl extends BaseControl {
    constructor(config) {
        super('CheckListControl', config);
        this.controlType = 'checklist';
        this.options = config.options || [];
    }
}

// APP
class CheckboxControl extends BaseControl {
    constructor(config) {
        super('CheckboxControl', config);
        this.controlType = 'checkbox';
    }
}

// APP
class CustomControl extends BaseControl {
    constructor(config) {
        super(config.template, config);
        this.controlType = 'custom';
        this.controlType = config.template;
    }
}

// APP
class DateControl extends BaseControl {
    constructor(config) {
        super('DateControl', config);
        this.controlType = 'date';
    }
}

// APP
class DateTimeControl extends BaseControl {
    constructor(config) {
        super('DateTimeControl', config);
        this.controlType = 'date-time';
    }
}

// APP
class EditorControl extends BaseControl {
    constructor(config) {
        super('EditorControl', config);
        this.controlType = 'editor';
        this.minimal = false;
    }
}

// APP
class FileControl extends BaseControl {
    constructor(config) {
        super('FileControl', config);
        this.controlType = 'file';
        // TODO - translate
        this.placeholder = config.placeholder;
        this.multiple = config.multiple;
    }
}

class GroupedControl {
    constructor(config) {
        this.__type = 'GroupedControl';
        Object.keys(config).forEach((key) => (this[key] = config[key]));
    }
}

// APP
class NativeSelectControl extends BaseControl {
    constructor(config) {
        super('NativeSelectControl', config);
        this.controlType = 'native-select';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class PickerControl extends BaseControl {
    constructor(config) {
        super('PickerControl', config);
        this.controlType = 'picker';
        this.options = [];
        this.options = config.options || [];
    }
}
class TablePickerControl extends PickerControl {
    constructor(config) {
        super(Object.assign(config, { parentScrollSelector: '.table-container' }));
        this.__type = 'TablePickerControl';
    }
}

// APP
class QuickNoteControl extends BaseControl {
    constructor(config) {
        super('QuickNoteControl', config);
        this.controlType = 'quick-note';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class RadioControl extends BaseControl {
    constructor(config) {
        super('RadioControl', config);
        this.controlType = 'radio';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class ReadOnlyControl extends BaseControl {
    constructor(config) {
        super('ReadOnlyControl', config);
        this.controlType = 'read-only';
        config.readOnly = true;
    }
}

// APP
class SelectControl extends BaseControl {
    constructor(config) {
        super('SelectControl', config);
        this.controlType = 'select';
        this.options = [];
        this.options = config.options || [];
        this.placeholder = config.placeholder || '';
    }
}

// APP
class SwitchControl extends BaseControl {
    constructor(config) {
        super('SwitchControl', config);
        this.controlType = 'switch';
    }
}

// APP
class TextAreaControl extends BaseControl {
    constructor(config) {
        super('TextAreaControl', config);
        this.controlType = 'text-area';
    }
}

// APP
class TextBoxControl extends BaseControl {
    constructor(config) {
        super('TextBoxControl', config);
        this.controlType = 'textbox';
        this.type = this.getTextboxType(config.type) || '';
        this.subType = config.type || '';
        this.setValidators(this.subType);
    }
    setValidators(type) {
        switch (type) {
            case 'email':
                this.validators.push(FormValidators.isEmail);
                break;
            case 'number':
            case 'currency':
                this.validators.push(FormValidators.maxInteger);
                break;
            case 'float':
            case 'percentage':
                this.validators.push(FormValidators.maxDouble);
                break;
            case 'year':
                this.validators.push(FormValidators.minYear);
                break;
            default:
                break;
        }
    }
    getTextboxType(type) {
        switch (type) {
            case 'percentage':
            case 'currency':
            case 'float':
            case 'year':
                return 'number';
            default:
                return type;
        }
    }
}

// APP
class TilesControl extends BaseControl {
    constructor(config) {
        super('TilesControl', config);
        this.controlType = 'tiles';
        this.options = [];
        this.options = config.options || [];
    }
}

// APP
class TimeControl extends BaseControl {
    constructor(config) {
        super('TimeControl', config);
        this.controlType = 'time';
    }
}

// APP
class TimezoneControl extends BaseControl {
    constructor(config) {
        super('TimezoneControl', config);
        this.controlType = 'timezone';
        this.options = [];
        this.buildTimezones = (compareDate) => {
            const timezones = listTimeZones()
                .map((zone) => {
                const timezone = findTimeZone(zone);
                const zonedTime = getZonedTime(compareDate, timezone);
                const formatted = formatZonedTime(zonedTime, `z - [${zone}] ([GMT] Z)`).replace('_', ' ');
                const option = {
                    value: zone,
                    label: formatted,
                    offset: zonedTime.zone.offset,
                };
                // if (this.props.mapLabels) {
                //   option.label = this.props.mapLabels(option);
                // }
                return option;
            })
                // Formats 'noisy' timezones without a letter acronym.
                .map((option) => {
                const rgx = /(^(\+|-)\d+\s- )/;
                const matches = option.label.match(rgx);
                if (matches) {
                    const prefix = matches[0];
                    option.label = option.label.split(prefix)[1];
                }
                return option;
            })
                // Sorts W -> E, prioritizes america. could be more nuanced based on system tz but simple for now
                .sort((a, b) => {
                const offsetDelta = b.offset - a.offset;
                if (offsetDelta !== 0) {
                    return offsetDelta;
                }
                if (a.label < b.label) {
                    return -1;
                }
                if (a.label > b.label) {
                    return 1;
                }
                return 0;
            });
            return timezones;
        };
        this.options = this.buildTimezones(new Date());
        this.placeholder = config.placeholder || '';
        // current timezone
        const tz = Intl.DateTimeFormat().resolvedOptions().timeZone;
        this.value = tz;
    }
}

class ControlFactory {
    static create(type, config) {
        switch (type) {
            case 'AddressControl':
                return new AddressControl(config);
            case 'CheckboxControl':
                return new CheckboxControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'DateTimeControl':
                return new DateTimeControl(config);
            case 'EditorControl':
                return new EditorControl(config);
            case 'FileControl':
                return new FileControl(config);
            case 'NativeSelectControl':
                return new NativeSelectControl(config);
            case 'PickerControl':
                return new PickerControl(config);
            case 'TablePickerControl':
                return new TablePickerControl(config);
            case 'QuickNoteControl':
                return new QuickNoteControl(config);
            case 'RadioControl':
                return new RadioControl(config);
            case 'ReadOnlyControl':
                return new ReadOnlyControl(config);
            case 'TextAreaControl':
                return new TextAreaControl(config);
            case 'TextBoxControl':
                return new TextBoxControl(config);
            case 'SelectControl':
                return new SelectControl(config);
            case 'SwitchControl':
                return new SwitchControl(config);
            case 'TilesControl':
                return new TilesControl(config);
            case 'TimeControl':
                return new TimeControl(config);
            default:
                console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                return null;
        }
    }
}

// NG2
class NovoFormControl extends FormControl {
    constructor(value, control) {
        super(value, control.validators, control.asyncValidators);
        this.displayValueChanges = new EventEmitter();
        this.valueHistory = [];
        this.validators = control.validators;
        this.initialValue = value;
        this.valueHistory.push(value);
        this.key = control.key;
        this.label = control.label;
        this.readOnly = control.readOnly;
        this.hidden = control.hidden;
        this.encrypted = control.encrypted;
        this.config = control.config;
        this.type = control.type;
        this.subType = control.subType;
        this.required = control.required;
        this.hasRequiredValidator = this.required;
        this.tooltip = control.tooltip;
        this.tooltipPosition = control.tooltipPosition;
        this.tooltipSize = control.tooltipSize;
        this.tooltipPreline = control.tooltipPreline;
        this.removeTooltipArrow = control.removeTooltipArrow;
        this.tooltipAutoPosition = control.tooltipAutoPosition;
        this.label = control.label;
        this.name = control.name;
        this.required = control.required;
        this.sortOrder = control.sortOrder;
        this.controlType = control.controlType;
        this.placeholder = control.placeholder;
        this.minimal = control.minimal;
        this.multiple = control.multiple;
        this.headerConfig = control.headerConfig;
        this.optionsType = control.optionsType;
        this.readOnly = control.readOnly;
        this.layoutOptions = control.layoutOptions;
        this.military = control.military;
        this.dateFormat = control.dateFormat;
        this.currencyFormat = control.currencyFormat;
        this.startDate = control.startDate;
        this.endDate = control.endDate;
        this.weekStart = control.weekStart;
        this.textMaskEnabled = control.textMaskEnabled;
        this.textMaskEnabled = control.textMaskEnabled;
        this.maskOptions = control.maskOptions;
        this.allowInvalidDate = control.allowInvalidDate;
        this.maxlength = control.maxlength;
        this.minlength = control.minlength;
        this.closeOnSelect = control.closeOnSelect;
        this.interactions = control.interactions;
        this.checkboxLabel = control.checkboxLabel;
        this.restrictFieldInteractions = control.restrictFieldInteractions;
        this.appendToBody = control.appendToBody;
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        this.parentScrollSelector = control.parentScrollSelector;
        this.description = control.description;
        this.options = control.options;
        this.tipWell = control.tipWell;
        this.customControlConfig = control.customControlConfig;
        this.warning = control.warning;
        this.disabledDateMessage = control.disabledDateMessage;
        // Reactive Form, need to enable/disable, can't bind to [disabled]
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    /**
     * @param clearValue - flag to reset the control's value
     */
    hide(clearValue = true) {
        this.hidden = true;
        if (clearValue) {
            this.setValue(null);
        }
    }
    show() {
        this.hidden = false;
    }
    setRequired(isRequired) {
        this.required = isRequired;
        // Update validators to have the required
        if (this.required && !this.hasRequiredValidator) {
            const validators = [...this.validators];
            validators.push(Validators.required);
            // TODO: duplicated below
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
        else if (!this.required && this.hasRequiredValidator) {
            let validators = [...this.validators];
            validators = validators.filter((val) => val !== Validators.required);
            // TODO: duplicated above
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
    }
    setValue(value, { onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange, } = {}) {
        this.markAsDirty();
        this.markAsTouched();
        this.displayValueChanges.emit(value);
        super.setValue(value, { onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange });
        // History
        clearTimeout(this.historyTimeout);
        this.historyTimeout = setTimeout(() => {
            this.valueHistory.push(value);
        }, 300);
    }
    setReadOnly(isReadOnly) {
        this.readOnly = isReadOnly;
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    }
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     */
    disable(opts = { emitEvent: false }) {
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        super.disable(opts);
    }
    enable(opts = { emitEvent: false }) {
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        super.enable(opts);
    }
    markAsInvalid(message) {
        this.markAsDirty();
        this.markAsTouched();
        this.setErrors(Object.assign({}, this.errors, { custom: message }));
    }
    markAsValid() {
        this.setErrors(null);
    }
}

// NG
class NovoFormGroup extends FormGroup {
    constructor() {
        super(...arguments);
        this.fieldInteractionEvents = new EventEmitter();
    }
    enableAllControls() {
        for (const key in this.controls) {
            if (this.controls[key].readOnly) {
                this.controls[key].readOnly = false;
                this.controls[key].enable();
            }
        }
    }
    disableAllControls() {
        for (const key in this.controls) {
            if (!this.controls[key].readOnly) {
                this.controls[key].readOnly = true;
                this.controls[key].disable();
            }
        }
    }
}

// NG2
class NovoLabelService {
    constructor(userLocale = 'en-US') {
        this.userLocale = userLocale;
        this.and = 'and';
        this.not = 'not';
        this.filters = 'Filter';
        this.clear = 'Clear';
        this.sort = 'Sort';
        this.distributionListOwner = 'Owner';
        this.dateAdded = 'Date Added';
        this.emptyTableMessage = 'No Records to display...';
        this.noMatchingRecordsMessage = 'No Matching Records';
        this.noMoreRecordsMessage = 'No More Records';
        this.erroredTableMessage = 'Oops! An error occurred.';
        this.pickerError = 'Oops! An error occurred.';
        this.pickerTextFieldEmpty = 'Begin typing to see results.';
        this.pickerEmpty = 'No results to display...';
        this.tabbedGroupPickerEmpty = 'No results found';
        this.quickNoteError = 'Oops! An error occurred.';
        this.quickNoteEmpty = 'No results to display...';
        this.required = 'Required';
        this.numberTooLarge = 'Number is too large';
        this.save = 'Save';
        this.cancel = 'Cancel';
        this.next = 'Next';
        this.itemsPerPage = 'Items per page:';
        this.chooseAField = 'Choose a field...';
        this.operator = 'Operator...';
        this.select = 'Select...';
        this.value = 'Value...';
        this.selectDateRange = 'Select Date Range...';
        this.typeToAddChips = 'Type to add chips...';
        this.selected = 'Selected';
        this.selectAllOnPage = 'Select all on page';
        this.deselectAll = 'Deselect all';
        this.refresh = 'Refresh';
        this.close = 'Close';
        this.move = 'Move';
        this.startDate = 'Start Date';
        this.endDate = 'End Date';
        this.rate = 'Rate';
        this.more = 'more';
        this.clearAll = 'CLEAR ALL';
        this.clearAllNormalCase = 'Clear All';
        this.clearSort = 'Clear Sort';
        this.clearFilter = 'Clear Filter';
        this.clearSearch = 'Clear Search';
        this.clearSelected = 'Clear Selected';
        this.today = 'Today';
        this.now = 'Now';
        this.isRequired = 'is required';
        this.notValidYear = 'is not a valid year';
        this.isTooLarge = 'is too large';
        this.invalidAddress = 'requires at least one field filled out';
        this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
        this.minLength = 'is required to be a minimum length of';
        this.past1Day = 'Past 1 Day';
        this.past7Days = 'Past 7 Days';
        this.past30Days = 'Past 30 Days';
        this.past90Days = 'Past 90 Days';
        this.past1Year = 'Past 1 Year';
        this.next1Day = 'Next 1 Day';
        this.next7Days = 'Next 7 Days';
        this.next30Days = 'Next 30 Days';
        this.next90Days = 'Next 90 Days';
        this.next1Year = 'Next 1 Year';
        this.customDateRange = 'Custom Date Range';
        this.backToPresetFilters = 'Back to Preset Filters';
        this.okGotIt = 'Ok, Got it';
        this.address = 'Address';
        this.address1 = 'Address';
        this.apt = 'Apt'; // TODO delete
        this.address2 = 'Apt';
        this.city = 'City / Locality';
        this.state = 'State / Region';
        this.zip = 'Postal Code';
        this.zipCode = 'Postal Code'; // TODO delete
        this.country = 'Country';
        this.or = 'or';
        this.clickToBrowse = 'click to browse';
        this.chooseAFile = 'Choose a file';
        this.no = 'No';
        this.yes = 'Yes';
        this.search = 'SEARCH';
        this.noItems = 'There are no items';
        this.dateFormat = 'MM/dd/yyyy';
        this.dateFormatPlaceholder = 'MM/DD/YYYY';
        this.localDatePlaceholder = 'mm/dd/yyyy';
        this.timeFormatPlaceholderAM = 'hh:mm AM';
        this.timeFormatPlaceholder24Hour = 'HH:mm';
        this.timeFormatAM = 'AM';
        this.timeFormatPM = 'PM';
        this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
        this.promptModalMessage = 'Do you want to perform the following changes?';
        this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
        this.previous = 'Previous';
        this.actions = 'Actions';
        this.all = 'All';
        this.groupedMultiPickerEmpty = 'No items to display';
        this.groupedMultiPickerSelectCategory = 'Select a category from the left to get started';
        this.add = 'Add';
        this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
        this.noStatesForCountry = 'No states available for the selected country';
        this.selectCountryFirst = 'Please select a country before selecting a state';
        this.invalidIntegerInput = 'Special characters are not allowed for';
        this.maxRecordsReached = 'Sorry, you have reached the maximum number of records allowed for this field';
        this.selectFilterOptions = 'Please select one or more filter options below.';
        this.addCondition = 'Add Condition';
        this.includeAny = 'Include Any';
        this.includeAll = 'Include All';
        this.exclude = 'Exclude';
        this.radius = 'Radius';
        this.equals = 'Equals';
        this.equalTo = 'Equal To';
        this.greaterThan = 'Greater Than';
        this.lessThan = 'Less Than';
        this.doesNotEqual = 'Does Not Equal';
        this.true = 'True';
        this.false = 'False';
        this.before = 'Before';
        this.after = 'After';
        this.between = 'Between';
        this.within = 'Within';
        this.isEmpty = 'Is Empty?';
        this.refreshPagination = 'Refresh Pagination';
    }
    maxlengthMetWithField(field, maxlength) {
        return `Sorry, you have reached the maximum character count of ${maxlength} for ${field}.`;
    }
    maxlengthMet(maxlength) {
        return `Sorry, you have reached the maximum character count of ${maxlength} for this field.`;
    }
    invalidMaxlengthWithField(field, maxlength) {
        return `Sorry, you have exceeded the maximum character count of ${maxlength} for ${field}.`;
    }
    invalidMaxlength(maxlength) {
        return `Sorry, you have exceeded the maximum character count of ${maxlength} for this field.`;
    }
    getToManyPlusMore(toMany) {
        return `+${toMany.quantity} more`;
    }
    selectedRecords(selected) {
        return `${selected} records are selected.`;
    }
    showingXofXResults(shown, total) {
        return `Showing ${shown} of ${total} Results.`;
    }
    totalRecords(total, select = false) {
        return select ? `Select all ${total} records.` : `De-select remaining ${total} records.`;
    }
    dateFormatString() {
        return this.dateFormat;
    }
    localizedDatePlaceholder() {
        return this.localDatePlaceholder;
    }
    tabbedGroupClearSuggestion(tabLabelPlural) {
        return `Clear your search to see all ${tabLabelPlural}.`;
    }
    formatDateWithFormat(value, format) {
        const date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        return new Intl.DateTimeFormat(this.userLocale, format).format(date);
    }
    formatToTimeOnly(param) { }
    formatToDateOnly(param) { }
    formatTimeWithFormat(value, format) {
        const date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        const timeParts = Intl.DateTimeFormat(this.userLocale, format)
            .formatToParts(date)
            .reduce((obj, part) => {
            obj[part.type] = part.value;
            return obj;
        }, {});
        const dayPeriod = timeParts.dayPeriod ? timeParts.dayPeriod : '';
        const res = `${timeParts.hour}:${timeParts.minute} ${dayPeriod}`;
        return res;
    }
    getWeekdays(weekStartsOn = 0) {
        function getDay(dayOfWeek) {
            const dt = new Date();
            return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
        }
        let weekdays = [getDay(0), getDay(1), getDay(2), getDay(3), getDay(4), getDay(5), getDay(6)].reduce((weekdays, dt) => {
            weekdays.push(new Intl.DateTimeFormat(this.userLocale, { weekday: 'long' }).format(dt));
            return weekdays;
        }, []);
        if (weekStartsOn > 0 && weekStartsOn <= 6) {
            const newStart = weekdays.splice(weekStartsOn);
            weekdays = [...newStart, ...weekdays];
        }
        return weekdays;
    }
    getMonths() {
        function getMonth(month) {
            const dt = new Date();
            return dt.setMonth(month, 1);
        }
        return [
            getMonth(0),
            getMonth(1),
            getMonth(2),
            getMonth(3),
            getMonth(4),
            getMonth(5),
            getMonth(6),
            getMonth(7),
            getMonth(8),
            getMonth(9),
            getMonth(10),
            getMonth(11),
        ].reduce((months, dt) => {
            months.push(new Intl.DateTimeFormat(this.userLocale, { month: 'long' }).format(dt));
            return months;
        }, []);
    }
    getProperty(value) {
        return this[value];
    }
    getRangeText(page, pageSize, length, short) {
        if (length === 0 || pageSize === 0) {
            return `Displaying 0 of ${length}`;
        }
        length = Math.max(length, 0);
        const startIndex = page * pageSize;
        // If the start index exceeds the list length, do not try and fix the end index to the end.
        const endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
        return short ? `${startIndex + 1} - ${endIndex}/${length}` : `Displaying ${startIndex + 1} - ${endIndex} of ${length}`;
    }
    formatCurrency(value) {
        const options = { style: 'currency', currency: 'USD' };
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    }
    /**
     * Extends the Intl.numberFormat capability with two extra features:
     *  - Does NOT round values, but instead truncates to maximumFractionDigits
     *  - By default uses accounting format for negative numbers: (3.14) instead of -3.14.
     *
     * @param value           The number value to convert to string
     * @param overrideOptions Allows for overriding options used and passed to Intl.NumberFormat()
     */
    formatBigDecimal(value, overrideOptions) {
        const defaultOptions = {
            style: 'decimal',
            minimumFractionDigits: 2,
            maximumFractionDigits: 2,
            useAccountingFormat: true,
        };
        const options = Object.assign(defaultOptions, overrideOptions);
        const truncatedValue = this.truncateToPrecision(value, options.maximumFractionDigits);
        let _value = new Intl.NumberFormat(this.userLocale, options).format(truncatedValue);
        if (value < 0) {
            _value = options.useAccountingFormat ? `(${_value.slice(1)})` : `-${_value.slice(1)}`;
        }
        return _value;
    }
    /**
     * Performs a string-based truncating of a number with no rounding
     */
    truncateToPrecision(value, precision) {
        let valueAsString = value ? value.toString() : '0';
        const decimalIndex = valueAsString.indexOf('.');
        if (decimalIndex > -1 && decimalIndex + precision + 1 < valueAsString.length) {
            valueAsString = valueAsString.substring(0, valueAsString.indexOf('.') + precision + 1);
        }
        return Number(valueAsString);
    }
    formatNumber(value, options) {
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    }
    formatDateShort(value) {
        const options = {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
        };
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
    formatTime(value) {
        const options = {
            // HH:MM A - 1:17 PM
            hour: 'numeric',
            minute: '2-digit',
        };
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
    formatDate(value) {
        const options = {
            // DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };
        const _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    }
}
NovoLabelService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLabelService, deps: [{ token: LOCALE_ID, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
NovoLabelService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLabelService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLabelService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; } });
const NOVO_ELEMENTS_LABELS_PROVIDERS = [{ provide: NovoLabelService, useClass: NovoLabelService }];

/**
 * @description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
 * overwritten if custom list options are needed.
 */
class BasePickerResults {
    constructor(element, ref) {
        this._term = '';
        this.selected = [];
        this.hasError = false;
        this.isLoading = false;
        this.isStatic = true;
        this.page = 0;
        this.lastPage = false;
        this.autoSelectFirstOption = true;
        this.optionsFunctionHasChanged = false;
        this.selectingMatches = false;
        this._matches = [];
        this.element = element;
        this.ref = ref;
        this.scrollHandler = this.onScrollDown.bind(this);
    }
    set matches(m) {
        this._matches = m;
    }
    get matches() {
        return this._matches;
    }
    cleanUp() {
        const element = this.getListElement();
        if (element && element.hasAttribute('scrollListener')) {
            element.removeAttribute('scrollListener');
            element.removeEventListener('scroll', this.scrollHandler);
        }
    }
    onScrollDown(event) {
        const element = event.target;
        if (element) {
            const offset = element.offsetHeight + element.scrollTop;
            const bottom = element.scrollHeight - 300;
            if (offset >= bottom) {
                event.stopPropagation();
                if (!this.lastPage && !this.isLoading) {
                    this.processSearch();
                }
            }
        }
    }
    get term() {
        return this._term;
    }
    set term(value) {
        if (this.shouldSearch(value)) {
            this._term = value;
            this.page = 0;
            this.optionsFunctionHasChanged = false;
            this.matches = [];
            this.processSearch(true);
        }
        else {
            this.addScrollListener();
        }
    }
    set config(value) {
        if (this.config && this.config.options !== value.options) {
            this.optionsFunctionHasChanged = true; // reset page so that new options call is used to search
        }
        this._config = value;
    }
    get config() {
        return this._config;
    }
    shouldSearch(value) {
        const termHasChanged = value !== this._term;
        const optionsNotYetCalled = this.page === 0;
        return termHasChanged || optionsNotYetCalled || this.optionsFunctionHasChanged;
    }
    addScrollListener() {
        if (this.config.enableInfiniteScroll) {
            const element = this.getListElement();
            if (element && !element.hasAttribute('scrollListener')) {
                element.setAttribute('scrollListener', 'true');
                element.addEventListener('scroll', this.scrollHandler);
            }
        }
    }
    processSearch(shouldReset) {
        this.hasError = false;
        this.isLoading = true;
        this.ref.markForCheck();
        this.search(this.term).subscribe((results) => {
            if (shouldReset) {
                this.matches = [];
            }
            if (this.isStatic) {
                this.matches = this.filterData(results);
            }
            else {
                this.matches = this.matches.concat(results);
                this.lastPage = results && !results.length;
            }
            if (this.matches.length > 0 && this.autoSelectFirstOption && !this.selectingMatches) {
                this.nextActiveMatch();
            }
            this.isLoading = false;
            this.ref.markForCheck();
            setTimeout(() => {
                this.overlay.updatePosition();
                this.addScrollListener();
            }); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
        }, (err) => {
            this.hasError = this.term && this.term.length !== 0;
            this.isLoading = false;
            this.lastPage = true;
            if (this.term && this.term.length !== 0) {
                console.error(err); // tslint:disable-lineno
            }
            this.ref.markForCheck();
        });
    }
    search(term, mode) {
        const options = this.config.options;
        return from(new Promise((resolve, reject) => {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(this.structureArray(options));
                }
                else if (this.shouldCallOptionsFunction(term)) {
                    if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) ||
                        Object.getPrototypeOf(options).hasOwnProperty('then')) {
                        this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options.then(this.structureArray.bind(this)).then(resolve, reject);
                    }
                    else if (typeof options === 'function') {
                        this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options(term, ++this.page)
                            .then(this.structureArray.bind(this))
                            .then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    if (this.config.defaultOptions) {
                        this.isStatic = false;
                        if (typeof this.config.defaultOptions === 'function') {
                            const defaultOptions = this.config.defaultOptions(term, ++this.page);
                            if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                defaultOptions.then(this.structureArray.bind(this)).then(resolve, reject);
                            }
                            else {
                                resolve(this.structureArray(defaultOptions));
                            }
                        }
                        else {
                            resolve(this.structureArray(this.config.defaultOptions));
                        }
                    }
                    else {
                        // No search term gets rejected
                        reject('No search term');
                    }
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    }
    shouldCallOptionsFunction(term) {
        if (this.config && 'minSearchLength' in this.config && Number.isInteger(this.config.minSearchLength)) {
            return typeof term === 'string' && term.length >= this.config.minSearchLength;
        }
        else {
            return !!(term && term.length);
        }
    }
    /**
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    structureArray(collection) {
        const dataArray = collection.data ? collection.data : collection;
        if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
            return collection.map((item) => {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return dataArray.map((data) => {
            let value = this.config.field ? data[this.config.field] : data.value || data;
            if (this.config.valueFormat) {
                value = Helpers.interpolate(this.config.valueFormat, data);
            }
            const label = this.config.format ? Helpers.interpolate(this.config.format, data) : data.label || String(value);
            return { value, label, data };
        });
    }
    /**
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    filterData(matches) {
        if (this.term && matches) {
            return matches.filter((match) => {
                return ~String(match.label).toLowerCase().indexOf(this.term.toLowerCase());
            });
        }
        // Show no recent results template
        return matches;
    }
    /**
     * @description This function is called when the user presses the enter key to call the selectMatch method.
     */
    selectActiveMatch() {
        this.selectMatch();
    }
    /**
     * @description This function sets activeMatch to the match before the current node.
     */
    prevActiveMatch() {
        const index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
        this.scrollToActive();
        this.ref.markForCheck();
    }
    /**
     * @description This function sets activeMatch to the match after the current node.
     */
    nextActiveMatch() {
        const index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
        this.scrollToActive();
        this.ref.markForCheck();
    }
    getListElement() {
        return this.element.nativeElement;
    }
    getChildrenOfListElement() {
        let children = [];
        if (this.getListElement()) {
            children = this.getListElement().children;
        }
        return children;
    }
    scrollToActive() {
        const list = this.getListElement();
        const items = this.getChildrenOfListElement();
        const index = this.matches.indexOf(this.activeMatch);
        const item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    }
    /**
     * @description
     */
    selectActive(match) {
        this.activeMatch = match;
    }
    /**
     * @description
     */
    isActive(match) {
        return this.activeMatch === match;
    }
    /**
     * @description
     */
    selectMatch(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        const selected = this.activeMatch;
        if (selected && this.parent) {
            this.parent.value = selected;
            this.selectingMatches = true;
            if (this.parent.closeOnSelect) {
                this.parent.hideResults();
                this.selectingMatches = false;
            }
        }
        this.ref.markForCheck();
        return false;
    }
    /**
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * @deprecated use highlight pipe
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    }
    preselected(match) {
        let selected = this.selected;
        if (this.config && this.config.selected) {
            selected = [...this.selected, ...this.config.selected];
        }
        if (this.config && this.config.preselected) {
            const preselectedFunc = this.config.preselected;
            return (selected.findIndex((item) => {
                return preselectedFunc(match, item);
            }) !== -1);
        }
        return (selected.findIndex((item) => {
            let isPreselected = false;
            if (item && item.value && match && match.value) {
                if (item.value.id && match.value.id) {
                    isPreselected = item.value.id === match.value.id;
                }
                else if (item.value instanceof Object && item.value.hasOwnProperty('value')) {
                    isPreselected = item.value.value === match.value;
                }
                else {
                    isPreselected = item.value === match.value;
                }
            }
            return isPreselected;
        }) !== -1);
    }
}
BasePickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BasePickerResults, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
BasePickerResults.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: BasePickerResults, inputs: { matches: "matches" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BasePickerResults, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { matches: [{
                type: Input
            }] } });

class NovoIconComponent {
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.shape = 'box';
        this.role = 'img';
    }
    set alt(value) {
        this.ariaLabel = value;
    }
    get alt() {
        return this.ariaLabel;
    }
    set name(iconName) {
        this.iconName = `bhi-${iconName}`;
    }
    get name() {
        return this.iconName;
    }
    get hb_classBinding() {
        return [this.color ? `text-color-${this.color}` : null, this.size ? `text-size-${this.size}` : null].filter(Boolean).join(' ');
    }
    ngAfterViewInit() {
        if (this.element.nativeElement.textContent.trim()) {
            Promise.resolve().then(() => {
                this.name = this.element.nativeElement.textContent.trim();
                this.cdr.markForCheck();
            });
        }
    }
    projectContentChanged(record) {
        this.name = this.element.nativeElement.textContent.trim();
        this.cdr.detectChanges();
    }
}
NovoIconComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIconComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoIconComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoIconComponent, selector: "novo-icon", inputs: { raised: "raised", theme: "theme", shape: "shape", color: "color", size: "size", smaller: "smaller", larger: "larger", alt: "alt", name: "name" }, host: { properties: { "class.novo-icon-raised": "this.raised", "attr.theme": "this.theme", "attr.shape": "this.shape", "attr.role": "this.role", "attr.aria-label": "this.ariaLabel", "class.icon-size-smaller": "this.smaller", "class.icon-size-larger": "this.larger", "class": "this.hb_classBinding" }, classAttribute: "novo-icon" }, ngImport: i0, template: `
    <i [class]="iconName"
      ><span (cdkObserveContent)="projectContentChanged($event)"><ng-content></ng-content></span
    ></i>
  `, isInline: true, directives: [{ type: i1$4.CdkObserveContent, selector: "[cdkObserveContent]", inputs: ["cdkObserveContentDisabled", "debounce"], outputs: ["cdkObserveContent"], exportAs: ["cdkObserveContent"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoIconComponent.prototype, "smaller", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoIconComponent.prototype, "larger", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-icon',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <i [class]="iconName"
      ><span (cdkObserveContent)="projectContentChanged($event)"><ng-content></ng-content></span
    ></i>
  `,
                    host: {
                        class: 'novo-icon',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { raised: [{
                type: HostBinding,
                args: ['class.novo-icon-raised']
            }, {
                type: Input
            }], theme: [{
                type: HostBinding,
                args: ['attr.theme']
            }, {
                type: Input
            }], shape: [{
                type: HostBinding,
                args: ['attr.shape']
            }, {
                type: Input
            }], color: [{
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], ariaLabel: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], size: [{
                type: Input
            }], smaller: [{
                type: HostBinding,
                args: ['class.icon-size-smaller']
            }, {
                type: Input
            }], larger: [{
                type: HostBinding,
                args: ['class.icon-size-larger']
            }, {
                type: Input
            }], alt: [{
                type: Input
            }], name: [{
                type: Input
            }], hb_classBinding: [{
                type: HostBinding,
                args: ['class']
            }] } });

class NovoBaseTextElement {
    constructor(element) {
        this.element = element;
    }
    get hb_classBinding() {
        return [
            this.color ? `text-color-${this.color}` : null,
            this.lineLength ? `text-length-${this.lineLength}` : null,
            this.size ? `text-size-${this.size}` : null,
            this.weight ? `text-weight-${this.weight}` : null,
        ]
            .filter(Boolean)
            .join(' ');
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
}
NovoBaseTextElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBaseTextElement, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoBaseTextElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoBaseTextElement, inputs: { size: "size", weight: "weight", lineLength: "lineLength", color: "color", disabled: "disabled", muted: "muted", error: "error", marginBefore: "marginBefore", marginAfter: "marginAfter", capitialize: "capitialize", uppercase: "uppercase", nowrap: "nowrap", ellipsis: "ellipsis", smaller: "smaller", larger: "larger", thin: "thin", lighter: "lighter", light: "light", medium: "medium", bold: "bold", bolder: "bolder", extrabold: "extrabold" }, host: { properties: { "class": "this.hb_classBinding", "class.text-disabled": "this.disabled", "class.text-color-empty": "this.muted", "class.text-color-negative": "this.error", "class.margin-before": "this.marginBefore", "class.margin-after": "this.marginAfter", "class.text-capitialize": "this.capitialize", "class.text-uppercase": "this.uppercase", "class.text-nowrap": "this.nowrap", "class.text-ellipsis": "this.ellipsis", "class.text-size-smaller": "this.smaller", "class.text-size-larger": "this.larger", "class.text-weight-thin": "this.thin", "class.text-weight-lighter": "this.lighter", "class.text-weight-light": "this.light", "class.text-weight-medium": "this.medium", "class.text-weight-bold": "this.bold", "class.text-weight-bolder": "this.bolder", "class.text-weight-extrabold": "this.extrabold" } }, ngImport: i0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "disabled", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "muted", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "error", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "marginBefore", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "marginAfter", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "capitialize", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "uppercase", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "nowrap", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "ellipsis", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "smaller", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "larger", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "thin", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "lighter", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "light", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "medium", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "bold", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "bolder", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoBaseTextElement.prototype, "extrabold", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBaseTextElement, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { size: [{
                type: Input
            }], weight: [{
                type: Input
            }], lineLength: [{
                type: Input
            }], color: [{
                type: Input
            }], hb_classBinding: [{
                type: HostBinding,
                args: ['class']
            }], disabled: [{
                type: HostBinding,
                args: ['class.text-disabled']
            }, {
                type: Input
            }], muted: [{
                type: HostBinding,
                args: ['class.text-color-empty']
            }, {
                type: Input
            }], error: [{
                type: HostBinding,
                args: ['class.text-color-negative']
            }, {
                type: Input
            }], marginBefore: [{
                type: HostBinding,
                args: ['class.margin-before']
            }, {
                type: Input
            }], marginAfter: [{
                type: HostBinding,
                args: ['class.margin-after']
            }, {
                type: Input
            }], capitialize: [{
                type: HostBinding,
                args: ['class.text-capitialize']
            }, {
                type: Input
            }], uppercase: [{
                type: HostBinding,
                args: ['class.text-uppercase']
            }, {
                type: Input
            }], nowrap: [{
                type: HostBinding,
                args: ['class.text-nowrap']
            }, {
                type: Input
            }], ellipsis: [{
                type: HostBinding,
                args: ['class.text-ellipsis']
            }, {
                type: Input
            }], smaller: [{
                type: HostBinding,
                args: ['class.text-size-smaller']
            }, {
                type: Input
            }], larger: [{
                type: HostBinding,
                args: ['class.text-size-larger']
            }, {
                type: Input
            }], thin: [{
                type: HostBinding,
                args: ['class.text-weight-thin']
            }, {
                type: Input
            }], lighter: [{
                type: HostBinding,
                args: ['class.text-weight-lighter']
            }, {
                type: Input
            }], light: [{
                type: HostBinding,
                args: ['class.text-weight-light']
            }, {
                type: Input
            }], medium: [{
                type: HostBinding,
                args: ['class.text-weight-medium']
            }, {
                type: Input
            }], bold: [{
                type: HostBinding,
                args: ['class.text-weight-bold']
            }, {
                type: Input
            }], bolder: [{
                type: HostBinding,
                args: ['class.text-weight-bolder']
            }, {
                type: Input
            }], extrabold: [{
                type: HostBinding,
                args: ['class.text-weight-extrabold']
            }, {
                type: Input
            }] } });

// NG2
/**
 * Tag Example
 * <novo-title size="sm" disabled>Label</novo-title
 * <novo-title small disabled>Label</novo-title>
 * <novo-title large disabled>Label</novo-title>
 * <novo-title error>Label</novo-title>
 * <novo-title muted>Label</novo-title>
 * <novo-title class="tc-grapefruit">Label</novo-title>
 * <novo-title color="grapefruit">Label</novo-title>
 */
class NovoTitle extends NovoBaseTextElement {
    constructor() {
        super(...arguments);
        this.weight = 'medium';
    }
}
NovoTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTitle, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoTitle.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTitle, selector: "novo-title,[novo-title]", host: { classAttribute: "novo-title" }, usesInheritance: true, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, styles: [":host{display:block;font-weight:500;line-height:1.5;color:#3d464d;color:var(--text-main, #3d464d);white-space:nowrap;text-overflow:ellipsis;font-size:var(--font-size-title);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTitle, decorators: [{
            type: Component,
            args: [{ selector: 'novo-title,[novo-title]', template: ` <ng-content></ng-content> `, host: {
                        class: 'novo-title',
                    }, styles: [":host{display:block;font-weight:500;line-height:1.5;color:#3d464d;color:var(--text-main, #3d464d);white-space:nowrap;text-overflow:ellipsis;font-size:var(--font-size-title);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}\n"] }]
        }] });

// NG2
class NovoListElement {
    constructor(element) {
        this.element = element;
    }
}
NovoListElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListElement, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoListElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoListElement, selector: "novo-list", inputs: { theme: "theme", direction: "direction" }, host: { properties: { "class.vertical-list": "direction === \"vertical\"", "class.horizontal-list": "direction === \"horizontal\"", "attr.theme": "theme" }, classAttribute: "novo-list" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-list',
                    host: {
                        class: 'novo-list',
                        '[class.vertical-list]': 'direction === "vertical"',
                        '[class.horizontal-list]': 'direction === "horizontal"',
                        '[attr.theme]': 'theme',
                    },
                    template: ` <ng-content></ng-content> `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { theme: [{
                type: Input
            }], direction: [{
                type: Input
            }] } });
class NovoItemAvatarElement {
}
NovoItemAvatarElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemAvatarElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoItemAvatarElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemAvatarElement, selector: "item-avatar, novo-item-avatar", inputs: { icon: "icon", color: "color" }, host: { classAttribute: "novo-item-avatar" }, ngImport: i0, template: ` <novo-icon *ngIf="icon" [color]="color || icon">{{ icon }}</novo-icon> `, isInline: true, components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemAvatarElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item-avatar, novo-item-avatar',
                    template: ` <novo-icon *ngIf="icon" [color]="color || icon">{{ icon }}</novo-icon> `,
                    host: {
                        class: 'novo-item-avatar',
                    },
                }]
        }], propDecorators: { icon: [{
                type: Input
            }], color: [{
                type: Input
            }] } });
class NovoItemTitleElement {
}
NovoItemTitleElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemTitleElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoItemTitleElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemTitleElement, selector: "item-title, novo-item-title", host: { classAttribute: "novo-item-title" }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemTitleElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item-title, novo-item-title',
                    template: `<ng-content></ng-content>`,
                    host: {
                        class: 'novo-item-title',
                    },
                }]
        }] });
class NovoItemHeaderElement {
}
NovoItemHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoItemHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemHeaderElement, selector: "item-header, novo-item-header", host: { classAttribute: "novo-item-header" }, ngImport: i0, template: `
    <novo-title class="novo-item-header-container" size="md">
      <ng-content select="item-avatar, novo-item-avatar"></ng-content>
      <ng-content select="item-title, novo-item-title"></ng-content>
      <ng-content select="item-header-end, novo-item-header-end"></ng-content>
    </novo-title>
  `, isInline: true, components: [{ type: NovoTitle, selector: "novo-title,[novo-title]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item-header, novo-item-header',
                    template: `
    <novo-title class="novo-item-header-container" size="md">
      <ng-content select="item-avatar, novo-item-avatar"></ng-content>
      <ng-content select="item-title, novo-item-title"></ng-content>
      <ng-content select="item-header-end, novo-item-header-end"></ng-content>
    </novo-title>
  `,
                    host: {
                        class: 'novo-item-header',
                    },
                }]
        }] });
class NovoItemDateElement {
}
NovoItemDateElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemDateElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoItemDateElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemDateElement, selector: "item-header-end, novo-item-header-end", host: { classAttribute: "novo-item-header-end" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemDateElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item-header-end, novo-item-header-end',
                    template: ` <ng-content></ng-content> `,
                    host: {
                        class: 'novo-item-header-end',
                    },
                }]
        }] });
class NovoItemContentElement {
}
NovoItemContentElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemContentElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoItemContentElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: { direction: "direction" }, host: { properties: { "class.vertical-list": "direction === \"vertical\"", "class.horizontal-list": "direction === \"horizontal\"" }, classAttribute: "novo-item-content" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemContentElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item-content, novo-item-content',
                    host: {
                        class: 'novo-item-content',
                        '[class.vertical-list]': 'direction === "vertical"',
                        '[class.horizontal-list]': 'direction === "horizontal"',
                    },
                    template: ` <ng-content></ng-content> `,
                }]
        }], propDecorators: { direction: [{
                type: Input
            }] } });
class NovoItemEndElement {
}
NovoItemEndElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemEndElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoItemEndElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemEndElement, selector: "item-end, novo-item-end", host: { classAttribute: "novo-item-end" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemEndElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item-end, novo-item-end',
                    template: ` <ng-content></ng-content> `,
                    host: {
                        class: 'novo-item-end',
                    },
                }]
        }] });
class NovoListItemElement {
    constructor(element) {
        this.element = element;
        this.avatar = false;
    }
    ngOnInit() {
        this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
    }
}
NovoListItemElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListItemElement, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoListItemElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]", host: { classAttribute: "novo-list-item" }, queries: [{ propertyName: "_content", first: true, predicate: NovoItemContentElement, descendants: true }, { propertyName: "_header", first: true, predicate: NovoItemHeaderElement, descendants: true }], ngImport: i0, template: `
    <div class="list-item" [ngClass]="{ avatar: avatar }" *ngIf="_content || _header">
      <ng-content select="item-header, novo-item-header"></ng-content>
      <ng-content select="item-content, novo-item-content"></ng-content>
    </div>
    <ng-content></ng-content>
    <ng-content select="item-end, novo-item-end"></ng-content>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListItemElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-list-item, a[list-item], button[list-item]',
                    template: `
    <div class="list-item" [ngClass]="{ avatar: avatar }" *ngIf="_content || _header">
      <ng-content select="item-header, novo-item-header"></ng-content>
      <ng-content select="item-content, novo-item-content"></ng-content>
    </div>
    <ng-content></ng-content>
    <ng-content select="item-end, novo-item-end"></ng-content>
  `,
                    host: {
                        class: 'novo-list-item',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _content: [{
                type: ContentChild,
                args: [NovoItemContentElement]
            }], _header: [{
                type: ContentChild,
                args: [NovoItemHeaderElement]
            }] } });

/**
 * Tag Example
 * <novo-text size="small" disabled>Label</novo-text
 * <novo-text small disabled>Label</novo-text>
 * <novo-text large disabled>Label</novo-text>
 * <novo-text error>Label</novo-text>
 * <novo-text muted>Label</novo-text>
 * <novo-text class="tc-grapefruit">Label</novo-text>
 * <novo-text color="grapefruit">Label</novo-text>
 */
class NovoText extends NovoBaseTextElement {
}
NovoText.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoText, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoText.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoText, selector: "novo-text,[novo-text]", inputs: { block: "block" }, host: { properties: { "class.text-block": "this.block" }, classAttribute: "novo-text" }, usesInheritance: true, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, styles: [".novo-text{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}.novo-text.text-capitalize{text-transform:capitalize}.novo-text.text-uppercase{text-transform:uppercase}.novo-text.text-nowrap{white-space:nowrap}.novo-text.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-text.text-size-default{font-size:inherit}.novo-text.text-size-body{font-size:1.3rem}.novo-text.text-size-xs{font-size:1rem}.novo-text.text-size-sm{font-size:1.2rem}.novo-text.text-size-md{font-size:1.3rem}.novo-text.text-size-lg{font-size:1.6rem}.novo-text.text-size-xl{font-size:2rem}.novo-text.text-size-2xl{font-size:2.6rem}.novo-text.text-size-3xl{font-size:3.2rem}.novo-text.text-size-smaller{font-size:.8em}.novo-text.text-size-larger{font-size:1.2em}.novo-text.text-color-black{color:#000}.novo-text.text-color-white{color:#fff}.novo-text.text-color-gray,.novo-text.text-color-grey{color:#9e9e9e}.novo-text.text-color-offWhite,.novo-text.text-color-bright{color:#f7f7f7}.novo-text.text-color-light{color:#dbdbdb}.novo-text.text-color-neutral{color:#4f5361}.novo-text.text-color-dark{color:#3d464d}.novo-text.text-color-orange{color:#ff6900}.novo-text.text-color-navigation{color:#202945}.novo-text.text-color-skyBlue{color:#009bdf}.novo-text.text-color-steel{color:#5b6770}.novo-text.text-color-metal{color:#637893}.novo-text.text-color-sand{color:#f4f4f4}.novo-text.text-color-silver{color:#e2e2e2}.novo-text.text-color-stone{color:#bebebe}.novo-text.text-color-ash{color:#a0a0a0}.novo-text.text-color-slate{color:#707070}.novo-text.text-color-onyx{color:#526980}.novo-text.text-color-charcoal{color:#282828}.novo-text.text-color-moonlight{color:#1a242f}.novo-text.text-color-midnight{color:#202945}.novo-text.text-color-darkness{color:#161f27}.novo-text.text-color-navy{color:#0d2d42}.novo-text.text-color-aqua{color:#3bafda}.novo-text.text-color-ocean{color:#4a89dc}.novo-text.text-color-mint{color:#37bc9b}.novo-text.text-color-grass{color:#8cc152}.novo-text.text-color-sunflower{color:#f6b042}.novo-text.text-color-bittersweet{color:#eb6845}.novo-text.text-color-grapefruit{color:#da4453}.novo-text.text-color-carnation{color:#d770ad}.novo-text.text-color-lavender{color:#967adc}.novo-text.text-color-mountain{color:#9678b6}.novo-text.text-color-info,.novo-text.text-color-positive{color:#4a89dc}.novo-text.text-color-success{color:#8cc152}.novo-text.text-color-negative,.novo-text.text-color-danger,.novo-text.text-color-error{color:#da4453}.novo-text.text-color-warning{color:#f6b042}.novo-text.text-color-empty{color:#cccdcc}.novo-text.text-color-disabled{color:#bebebe}.novo-text.text-color-background{color:#f7f7f7}.novo-text.text-color-backgroundDark{color:#e2e2e2}.novo-text.text-color-presentation{color:#5b6770}.novo-text.text-color-bullhorn{color:#ff6900}.novo-text.text-color-pulse{color:#3bafda}.novo-text.text-color-company{color:#39d}.novo-text.text-color-candidate{color:#4b7}.novo-text.text-color-lead{color:#a69}.novo-text.text-color-contact,.novo-text.text-color-clientcontact{color:#fa4}.novo-text.text-color-opportunity{color:#625}.novo-text.text-color-job,.novo-text.text-color-joborder{color:#b56}.novo-text.text-color-submission{color:#a9adbb}.novo-text.text-color-sendout{color:#747884}.novo-text.text-color-placement{color:#0b344f}.novo-text.text-color-note{color:#747884}.novo-text.text-color-contract{color:#454ea0}.novo-text.text-color-jobCode,.novo-text.text-color-earnCode,.novo-text.text-color-invoiceStatement,.novo-text.text-color-billableCharge,.novo-text.text-color-payableCharge,.novo-text.text-color-user,.novo-text.text-color-corporateUser,.novo-text.text-color-distributionList,.novo-text.text-color-credential,.novo-text.text-color-person{color:#696d79}.novo-text.margin-before{margin-top:.4rem}.novo-text.margin-after{margin-bottom:.8rem}.novo-text.text-length-small{max-width:40ch}.novo-text.text-length-medium{max-width:55ch}.novo-text.text-length-large{max-width:70ch}.novo-text.text-weight-hairline{font-weight:100}.novo-text.text-weight-thin{font-weight:200}.novo-text.text-weight-light{font-weight:300}.novo-text.text-weight-normal{font-weight:400}.novo-text.text-weight-medium{font-weight:500}.novo-text.text-weight-semibold{font-weight:600}.novo-text.text-weight-bold{font-weight:700}.novo-text.text-weight-extrabold{font-weight:800}.novo-text.text-weight-heavy{font-weight:900}.novo-text.text-weight-lighter{font-weight:lighter}.novo-text.text-weight-bolder{font-weight:bolder}.novo-text.text-block{display:block;line-height:1.375em;min-width:55ch;max-width:75ch}\n"], encapsulation: i0.ViewEncapsulation.None });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoText.prototype, "block", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoText, decorators: [{
            type: Component,
            args: [{ selector: 'novo-text,[novo-text]', template: ` <ng-content></ng-content> `, encapsulation: ViewEncapsulation.None, host: {
                        class: 'novo-text',
                    }, styles: [".novo-text{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}.novo-text.text-capitalize{text-transform:capitalize}.novo-text.text-uppercase{text-transform:uppercase}.novo-text.text-nowrap{white-space:nowrap}.novo-text.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-text.text-size-default{font-size:inherit}.novo-text.text-size-body{font-size:1.3rem}.novo-text.text-size-xs{font-size:1rem}.novo-text.text-size-sm{font-size:1.2rem}.novo-text.text-size-md{font-size:1.3rem}.novo-text.text-size-lg{font-size:1.6rem}.novo-text.text-size-xl{font-size:2rem}.novo-text.text-size-2xl{font-size:2.6rem}.novo-text.text-size-3xl{font-size:3.2rem}.novo-text.text-size-smaller{font-size:.8em}.novo-text.text-size-larger{font-size:1.2em}.novo-text.text-color-black{color:#000}.novo-text.text-color-white{color:#fff}.novo-text.text-color-gray,.novo-text.text-color-grey{color:#9e9e9e}.novo-text.text-color-offWhite,.novo-text.text-color-bright{color:#f7f7f7}.novo-text.text-color-light{color:#dbdbdb}.novo-text.text-color-neutral{color:#4f5361}.novo-text.text-color-dark{color:#3d464d}.novo-text.text-color-orange{color:#ff6900}.novo-text.text-color-navigation{color:#202945}.novo-text.text-color-skyBlue{color:#009bdf}.novo-text.text-color-steel{color:#5b6770}.novo-text.text-color-metal{color:#637893}.novo-text.text-color-sand{color:#f4f4f4}.novo-text.text-color-silver{color:#e2e2e2}.novo-text.text-color-stone{color:#bebebe}.novo-text.text-color-ash{color:#a0a0a0}.novo-text.text-color-slate{color:#707070}.novo-text.text-color-onyx{color:#526980}.novo-text.text-color-charcoal{color:#282828}.novo-text.text-color-moonlight{color:#1a242f}.novo-text.text-color-midnight{color:#202945}.novo-text.text-color-darkness{color:#161f27}.novo-text.text-color-navy{color:#0d2d42}.novo-text.text-color-aqua{color:#3bafda}.novo-text.text-color-ocean{color:#4a89dc}.novo-text.text-color-mint{color:#37bc9b}.novo-text.text-color-grass{color:#8cc152}.novo-text.text-color-sunflower{color:#f6b042}.novo-text.text-color-bittersweet{color:#eb6845}.novo-text.text-color-grapefruit{color:#da4453}.novo-text.text-color-carnation{color:#d770ad}.novo-text.text-color-lavender{color:#967adc}.novo-text.text-color-mountain{color:#9678b6}.novo-text.text-color-info,.novo-text.text-color-positive{color:#4a89dc}.novo-text.text-color-success{color:#8cc152}.novo-text.text-color-negative,.novo-text.text-color-danger,.novo-text.text-color-error{color:#da4453}.novo-text.text-color-warning{color:#f6b042}.novo-text.text-color-empty{color:#cccdcc}.novo-text.text-color-disabled{color:#bebebe}.novo-text.text-color-background{color:#f7f7f7}.novo-text.text-color-backgroundDark{color:#e2e2e2}.novo-text.text-color-presentation{color:#5b6770}.novo-text.text-color-bullhorn{color:#ff6900}.novo-text.text-color-pulse{color:#3bafda}.novo-text.text-color-company{color:#39d}.novo-text.text-color-candidate{color:#4b7}.novo-text.text-color-lead{color:#a69}.novo-text.text-color-contact,.novo-text.text-color-clientcontact{color:#fa4}.novo-text.text-color-opportunity{color:#625}.novo-text.text-color-job,.novo-text.text-color-joborder{color:#b56}.novo-text.text-color-submission{color:#a9adbb}.novo-text.text-color-sendout{color:#747884}.novo-text.text-color-placement{color:#0b344f}.novo-text.text-color-note{color:#747884}.novo-text.text-color-contract{color:#454ea0}.novo-text.text-color-jobCode,.novo-text.text-color-earnCode,.novo-text.text-color-invoiceStatement,.novo-text.text-color-billableCharge,.novo-text.text-color-payableCharge,.novo-text.text-color-user,.novo-text.text-color-corporateUser,.novo-text.text-color-distributionList,.novo-text.text-color-credential,.novo-text.text-color-person{color:#696d79}.novo-text.margin-before{margin-top:.4rem}.novo-text.margin-after{margin-bottom:.8rem}.novo-text.text-length-small{max-width:40ch}.novo-text.text-length-medium{max-width:55ch}.novo-text.text-length-large{max-width:70ch}.novo-text.text-weight-hairline{font-weight:100}.novo-text.text-weight-thin{font-weight:200}.novo-text.text-weight-light{font-weight:300}.novo-text.text-weight-normal{font-weight:400}.novo-text.text-weight-medium{font-weight:500}.novo-text.text-weight-semibold{font-weight:600}.novo-text.text-weight-bold{font-weight:700}.novo-text.text-weight-extrabold{font-weight:800}.novo-text.text-weight-heavy{font-weight:900}.novo-text.text-weight-lighter{font-weight:lighter}.novo-text.text-weight-bolder{font-weight:bolder}.novo-text.text-block{display:block;line-height:1.375em;min-width:55ch;max-width:75ch}\n"] }]
        }], propDecorators: { block: [{
                type: HostBinding,
                args: ['class.text-block']
            }, {
                type: Input
            }] } });

// NG2
class NovoLoadingElement {
    constructor() {
        this.size = 'medium';
    }
    /**
     * **deprecated** please use `color`.
     * @deprecated
     **/
    set theme(value) {
        console.warn(`'theme' property is deprecated, please use 'color'.`);
        this.color = value;
    }
    get theme() {
        return this.color;
    }
    get hb_class() {
        return [`color-${this.color}`, `size-${this.size}`].join(' ');
    }
}
NovoLoadingElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadingElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoLoadingElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoLoadingElement, selector: "novo-loading", inputs: { theme: "theme", color: "color", size: "size" }, host: { properties: { "class": "this.hb_class" } }, ngImport: i0, template: `
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadingElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-loading',
                    template: `
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
    <span class="dot"></span>
  `,
                }]
        }], propDecorators: { theme: [{
                type: Input
            }], color: [{
                type: Input
            }], size: [{
                type: Input
            }], hb_class: [{
                type: HostBinding,
                args: ['class']
            }] } });
class NovoSpinnerElement {
    constructor() {
        this.size = 'medium';
    }
    /**
     * **deprecated** please use `color`.
     * @deprecated
     **/
    set theme(value) {
        console.warn(`'theme' property is deprecated, please use 'color'.`);
        this.color = value;
    }
    get theme() {
        return this.color;
    }
    get inverse() {
        return this._inverse;
    }
    set inverse(value) {
        this._inverse = coerceBooleanProperty(value);
    }
    get hb_class() {
        return [this.inverse ? 'color-white' : `color-${this.color}`, `size-${this.size}`].join(' ');
    }
}
NovoSpinnerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSpinnerElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoSpinnerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSpinnerElement, selector: "novo-spinner", inputs: { theme: "theme", color: "color", size: "size", inverse: "inverse" }, host: { properties: { "class": "this.hb_class" } }, ngImport: i0, template: `
    <div class="dot1 dot"></div>
    <div class="dot2 dot"></div>
    <div class="dot3 dot"></div>
    <div class="dot4 dot"></div>
    <div class="dot5 dot"></div>
    <div class="dot6 dot"></div>
    <div class="dot7 dot"></div>
    <div class="dot8 dot"></div>
    <div class="dot9 dot"></div>
    <div class="dot10 dot"></div>
    <div class="dot11 dot"></div>
    <div class="dot12 dot"></div>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSpinnerElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-spinner',
                    template: `
    <div class="dot1 dot"></div>
    <div class="dot2 dot"></div>
    <div class="dot3 dot"></div>
    <div class="dot4 dot"></div>
    <div class="dot5 dot"></div>
    <div class="dot6 dot"></div>
    <div class="dot7 dot"></div>
    <div class="dot8 dot"></div>
    <div class="dot9 dot"></div>
    <div class="dot10 dot"></div>
    <div class="dot11 dot"></div>
    <div class="dot12 dot"></div>
  `,
                }]
        }], propDecorators: { theme: [{
                type: Input
            }], color: [{
                type: Input
            }], size: [{
                type: Input
            }], inverse: [{
                type: Input
            }], hb_class: [{
                type: HostBinding,
                args: ['class']
            }] } });
class NovoSkeletonDirective {
    constructor() {
        this.skeleton = true;
    }
}
NovoSkeletonDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSkeletonDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoSkeletonDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSkeletonDirective, selector: "[skeleton]", host: { properties: { "class.skeleton": "this.skeleton" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSkeletonDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[skeleton]',
                }]
        }], propDecorators: { skeleton: [{
                type: HostBinding,
                args: ['class.skeleton']
            }] } });
class NovoLoadedDirective {
}
NovoLoadedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadedDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoLoadedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoLoadedDirective, selector: "[loaded]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[loaded]',
                }]
        }] });
class NovoIsLoadingDirective {
    constructor(viewContainer) {
        this.viewContainer = viewContainer;
        this.hasView = false;
        this.skeletonViews = [];
        this.loadedViews = [];
    }
    set isLoading(condition) {
        if (!condition && !this.hasView) {
            this.destroyViews(this.loadedViews);
            this.skeletonViews = this.createViews(this.skeletonTemplates);
            this.hasView = true;
        }
        else if (condition && this.hasView) {
            this.destroyViews(this.skeletonViews);
            this.loadedViews = this.createViews(this.loadedTemplates);
            this.hasView = false;
        }
    }
    createViews(templates) {
        return templates && templates.map((v, i) => this.viewContainer.createEmbeddedView(v, null, i));
    }
    destroyViews(views) {
        if (views) {
            for (const view of views) {
                view.destroy();
            }
        }
    }
}
NovoIsLoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIsLoadingDirective, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoIsLoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoIsLoadingDirective, selector: "[isLoading]", inputs: { isLoading: "isLoading" }, queries: [{ propertyName: "skeletonTemplates", predicate: NovoSkeletonDirective, read: TemplateRef }, { propertyName: "loadedTemplates", predicate: NovoLoadedDirective, read: TemplateRef }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIsLoadingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[isLoading]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { skeletonTemplates: [{
                type: ContentChildren,
                args: [NovoSkeletonDirective, { read: TemplateRef }]
            }], loadedTemplates: [{
                type: ContentChildren,
                args: [NovoLoadedDirective, { read: TemplateRef }]
            }], isLoading: [{
                type: Input
            }] } });

// tslint:disable: directive-selector
class ThemeColorDirective {
    constructor(el) {
        this.el = el;
    }
    get hb_textColor() {
        return `novo-theme-${this.theme}`;
    }
}
ThemeColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ThemeColorDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ThemeColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: ThemeColorDirective, selector: "[theme]", inputs: { theme: "theme" }, host: { properties: { "class": "this.hb_textColor" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ThemeColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[theme]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { theme: [{
                type: Input
            }], hb_textColor: [{
                type: HostBinding,
                args: ['class']
            }] } });

class EntityPickerResult {
    constructor(labels) {
        this.labels = labels;
        this.select = new EventEmitter();
    }
    /**
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    /**
     * @deprecated use highlight pipe
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query && match ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    }
    getIconForResult(result) {
        if (result) {
            switch (result.searchEntity) {
                case 'ClientContact':
                    return 'person contact';
                case 'ClientCorporation':
                    return 'company';
                case 'Opportunity':
                    return 'opportunity';
                case 'Candidate':
                    return 'candidate';
                case 'Lead':
                    return 'lead';
                case 'JobOrder':
                    return 'job';
                case 'Placement':
                    return 'star placement';
                case 'CorporateUser':
                    return 'user';
                case 'CorporationDepartment':
                    return 'department';
                case 'JobShift':
                    return 'timetable contract';
                default:
                    return '';
            }
        }
        return '';
    }
    renderTimestamp(date) {
        let timestamp = '';
        if (date) {
            timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
        }
        return timestamp;
    }
    renderTime(dateStr) {
        let timestamp = '';
        if (dateStr) {
            timestamp = this.labels.formatTime(new Date(dateStr));
        }
        return timestamp;
    }
    renderTimeNoOffset(dateStr) {
        let timestamp = '';
        if (dateStr) {
            dateStr = dateStr.slice(0, 19);
            timestamp = this.labels.formatTime(dateStr);
        }
        return timestamp;
    }
    getNameForResult(result) {
        if (result) {
            switch (result.searchEntity) {
                case 'Lead':
                case 'CorporateUser':
                case 'ClientContact':
                case 'Candidate':
                case 'Person':
                    if ('firstName' in result) {
                        return `${result.firstName} ${result.lastName}`.trim();
                    }
                    return `${result.name || ''}`.trim();
                case 'ClientCorporation':
                    return `${result.name || ''}`.trim();
                case 'Opportunity':
                case 'JobOrder':
                case 'BillingProfile':
                case 'InvoiceTerm':
                    return `${result.id} | ${result.title || ''}`.trim();
                case 'Placement':
                    let label = `${result.id}`;
                    if (result.candidate || result.jobOrder) {
                        if (result.candidate && result.jobOrder) {
                            label = `${label} | ${result.candidate.firstName} ${result.candidate.lastName} - ${result.jobOrder.title}`.trim();
                        }
                        else if (result.jobOrder) {
                            label = `${label} | ${result.jobOrder.title}`.trim();
                        }
                        else {
                            label = `${label} | ${result.candidate.firstName} ${result.candidate.lastName}`.trim();
                        }
                    }
                    return label;
                case 'JobShift':
                    return `${result.jobOrder?.title} @ ${result.jobOrder?.clientCorporation?.name || ''}`.trim();
                default:
                    return `${result.name || result.label || ''}`.trim();
            }
        }
        return '';
    }
}
EntityPickerResult.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EntityPickerResult, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
EntityPickerResult.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: EntityPickerResult, selector: "entity-picker-result", inputs: { match: "match", term: "term" }, outputs: { select: "select" }, ngImport: i0, template: `
    <novo-list-item *ngIf="match.data" (click)="select.next(match.data)">
      <novo-item-header>
        <novo-item-avatar [icon]="getIconForResult(match.data)"></novo-item-avatar>
        <novo-item-title> <span [innerHtml]="getNameForResult(match.data) | highlight:term"></span> </novo-item-title>
      </novo-item-header>
      <novo-item-content direction="horizontal">
        <!-- COMPANY 1 -->
        <novo-text smaller class="company" *ngIf="match.data.companyName || match.data?.clientCorporation?.name">
          <i class="bhi-company company"></i>
          <span [innerHtml]="match.data.companyName || match.data?.clientCorporation?.name | highlight:term"></span>
        </novo-text>
        <!-- CLIENT CONTACT -->
        <novo-text smaller class="contact" *ngIf="match.data?.clientContact?.firstName">
          <i class="bhi-person contact person"></i>
          <span [innerHtml]="match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName | highlight:term"></span>
        </novo-text>
        <!-- CANDIDATE -->
        <novo-text smaller class="candidate" *ngIf="match.data.candidate && match.data.searchEntity === 'Placement'">
          <i class="bhi-candidate candidate"></i>
          <span [innerHtml]="match.data.candidate.firstName + ' ' + match.data.candidate.lastName | highlight:term"></span>
        </novo-text>
        <!-- START & END DATE -->
        <novo-text smaller class="start-date" *ngIf="match.data.dateBegin && match.data.searchEntity === 'Placement'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)"></span>
        </novo-text>
        <!-- START Date -->
        <novo-text smaller class="start-date" *ngIf="match.data.startTime && match.data.searchEntity === 'JobShift'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.startTime)"></span>
        </novo-text>
        <!-- START & END TIME -->
        <novo-text smaller class="start-time" *ngIf="match.data.startTime && match.data.searchEntity === 'JobShift'">
          <i class="bhi-clock"></i>
          <span [innerHtml]="renderTimeNoOffset(match.data.startTime) + ' - ' + renderTimeNoOffset(match.data.endTime)"></span>
        </novo-text>
        <!-- JOBORDER -->
        <novo-text smaller class="job" *ngIf="match.data.jobOrder && match.data.searchEntity === 'JobShift'">
          <i class="bhi-job job"></i>
          <span [innerHtml]="match.data.jobOrder.title | highlight:term"></span>
        </novo-text>
        <!-- OPENINGS -->
        <novo-text smaller class="openings" *ngIf="match.data.openings && match.data.searchEntity === 'JobShift'">
          <i class="bhi-candidate"></i>
          <span>{{ match.data.numAssigned }} / {{ match.data.openings }}</span>
        </novo-text>
        <!-- EMAIL -->
        <novo-text smaller class="email" *ngIf="match.data.email">
          <i class="bhi-email"></i> <span [innerHtml]="match.data.email | highlight:term"></span>
        </novo-text>
        <!-- PHONE -->
        <novo-text smaller class="phone" *ngIf="match.data.phone">
          <i class="bhi-phone"></i> <span [innerHtml]="match.data.phone | highlight:term"></span>
        </novo-text>
        <!-- ADDRESS -->
        <novo-text smaller class="location" *ngIf="match.data.address && (match.data.address.city || match.data.address.state)">
          <i class="bhi-location"></i> <span *ngIf="match.data.address.city" [innerHtml]="highlight(match.data.address.city, term)"></span>
          <span *ngIf="match.data.address.city && match.data.address.state">, </span>
          <span *ngIf="match.data.address.state" [innerHtml]="match.data.address.state | highlight:term"></span>
        </novo-text>
        <!-- STATUS -->
        <novo-text smaller class="status" *ngIf="match.data.status">
          <i class="bhi-info"></i> <span [innerHtml]="match.data.status | highlight:term"></span>
        </novo-text>
        <!-- OWNER -->
        <novo-text smaller class="owner" *ngIf="match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'">
          <i class="bhi-person"></i> <span [innerHtml]="match.data.owner.name | highlight:term"></span>
        </novo-text>
        <!-- PRIMARY DEPARTMENT -->
        <novo-text
          smaller
          class="primary-department"
          *ngIf="match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'"
        >
          <i class="bhi-department"></i> <span [innerHtml]="match.data.primaryDepartment.name | highlight:term"></span>
        </novo-text>
        <!-- OCCUPATION -->
        <novo-text smaller class="occupation" *ngIf="match.data.occupation && match.data.searchEntity === 'CorporateUser'">
          <i class="bhi-occupation"></i> <span [innerHtml]="match.data.occupation | highlight:term"></span>
        </novo-text>
      </novo-item-content>
    </novo-list-item>
  `, isInline: true, components: [{ type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { type: NovoItemAvatarElement, selector: "item-avatar, novo-item-avatar", inputs: ["icon", "color"] }, { type: NovoItemTitleElement, selector: "item-title, novo-item-title" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { type: NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "highlight": HighlightPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EntityPickerResult, decorators: [{
            type: Component,
            args: [{
                    selector: 'entity-picker-result',
                    template: `
    <novo-list-item *ngIf="match.data" (click)="select.next(match.data)">
      <novo-item-header>
        <novo-item-avatar [icon]="getIconForResult(match.data)"></novo-item-avatar>
        <novo-item-title> <span [innerHtml]="getNameForResult(match.data) | highlight:term"></span> </novo-item-title>
      </novo-item-header>
      <novo-item-content direction="horizontal">
        <!-- COMPANY 1 -->
        <novo-text smaller class="company" *ngIf="match.data.companyName || match.data?.clientCorporation?.name">
          <i class="bhi-company company"></i>
          <span [innerHtml]="match.data.companyName || match.data?.clientCorporation?.name | highlight:term"></span>
        </novo-text>
        <!-- CLIENT CONTACT -->
        <novo-text smaller class="contact" *ngIf="match.data?.clientContact?.firstName">
          <i class="bhi-person contact person"></i>
          <span [innerHtml]="match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName | highlight:term"></span>
        </novo-text>
        <!-- CANDIDATE -->
        <novo-text smaller class="candidate" *ngIf="match.data.candidate && match.data.searchEntity === 'Placement'">
          <i class="bhi-candidate candidate"></i>
          <span [innerHtml]="match.data.candidate.firstName + ' ' + match.data.candidate.lastName | highlight:term"></span>
        </novo-text>
        <!-- START & END DATE -->
        <novo-text smaller class="start-date" *ngIf="match.data.dateBegin && match.data.searchEntity === 'Placement'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)"></span>
        </novo-text>
        <!-- START Date -->
        <novo-text smaller class="start-date" *ngIf="match.data.startTime && match.data.searchEntity === 'JobShift'">
          <i class="bhi-calendar"></i>
          <span [innerHtml]="renderTimestamp(match.data.startTime)"></span>
        </novo-text>
        <!-- START & END TIME -->
        <novo-text smaller class="start-time" *ngIf="match.data.startTime && match.data.searchEntity === 'JobShift'">
          <i class="bhi-clock"></i>
          <span [innerHtml]="renderTimeNoOffset(match.data.startTime) + ' - ' + renderTimeNoOffset(match.data.endTime)"></span>
        </novo-text>
        <!-- JOBORDER -->
        <novo-text smaller class="job" *ngIf="match.data.jobOrder && match.data.searchEntity === 'JobShift'">
          <i class="bhi-job job"></i>
          <span [innerHtml]="match.data.jobOrder.title | highlight:term"></span>
        </novo-text>
        <!-- OPENINGS -->
        <novo-text smaller class="openings" *ngIf="match.data.openings && match.data.searchEntity === 'JobShift'">
          <i class="bhi-candidate"></i>
          <span>{{ match.data.numAssigned }} / {{ match.data.openings }}</span>
        </novo-text>
        <!-- EMAIL -->
        <novo-text smaller class="email" *ngIf="match.data.email">
          <i class="bhi-email"></i> <span [innerHtml]="match.data.email | highlight:term"></span>
        </novo-text>
        <!-- PHONE -->
        <novo-text smaller class="phone" *ngIf="match.data.phone">
          <i class="bhi-phone"></i> <span [innerHtml]="match.data.phone | highlight:term"></span>
        </novo-text>
        <!-- ADDRESS -->
        <novo-text smaller class="location" *ngIf="match.data.address && (match.data.address.city || match.data.address.state)">
          <i class="bhi-location"></i> <span *ngIf="match.data.address.city" [innerHtml]="highlight(match.data.address.city, term)"></span>
          <span *ngIf="match.data.address.city && match.data.address.state">, </span>
          <span *ngIf="match.data.address.state" [innerHtml]="match.data.address.state | highlight:term"></span>
        </novo-text>
        <!-- STATUS -->
        <novo-text smaller class="status" *ngIf="match.data.status">
          <i class="bhi-info"></i> <span [innerHtml]="match.data.status | highlight:term"></span>
        </novo-text>
        <!-- OWNER -->
        <novo-text smaller class="owner" *ngIf="match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'">
          <i class="bhi-person"></i> <span [innerHtml]="match.data.owner.name | highlight:term"></span>
        </novo-text>
        <!-- PRIMARY DEPARTMENT -->
        <novo-text
          smaller
          class="primary-department"
          *ngIf="match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'"
        >
          <i class="bhi-department"></i> <span [innerHtml]="match.data.primaryDepartment.name | highlight:term"></span>
        </novo-text>
        <!-- OCCUPATION -->
        <novo-text smaller class="occupation" *ngIf="match.data.occupation && match.data.searchEntity === 'CorporateUser'">
          <i class="bhi-occupation"></i> <span [innerHtml]="match.data.occupation | highlight:term"></span>
        </novo-text>
      </novo-item-content>
    </novo-list-item>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { match: [{
                type: Input
            }], term: [{
                type: Input
            }], select: [{
                type: Output
            }] } });
class EntityPickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
        this.select = new EventEmitter();
    }
    get hasNonErrorMessage() {
        return !this.isLoading && !this.matches.length && !this.hasError;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    selectMatch(event, item) {
        this.select.next(item);
        return super.selectMatch(event, item);
    }
}
EntityPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EntityPickerResults, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
EntityPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: EntityPickerResults, selector: "entity-picker-results", outputs: { select: "select" }, host: { classAttribute: "novo-entity-picker-results" }, usesInheritance: true, ngImport: i0, template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <entity-picker-result
        *ngFor="let match of matches"
        [match]="match"
        [term]="term"
        [ngClass]="{ active: isActive(match) }"
        (click)="selectMatch($event, match)"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
      </entity-picker-result>
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <div class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</div>
    <div class="picker-null-results" *ngIf="hasNonErrorMessage && term !== ''">{{ labels.pickerEmpty }}</div>
    <div class="picker-null-results" *ngIf="hasNonErrorMessage && term === ''">{{ labels.pickerTextFieldEmpty }}</div>
  `, isInline: true, components: [{ type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: EntityPickerResult, selector: "entity-picker-result", inputs: ["match", "term"], outputs: ["select"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EntityPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'entity-picker-results',
                    template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <entity-picker-result
        *ngFor="let match of matches"
        [match]="match"
        [term]="term"
        [ngClass]="{ active: isActive(match) }"
        (click)="selectMatch($event, match)"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
      </entity-picker-result>
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <div class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</div>
    <div class="picker-null-results" *ngIf="hasNonErrorMessage && term !== ''">{{ labels.pickerEmpty }}</div>
    <div class="picker-null-results" *ngIf="hasNonErrorMessage && term === ''">{{ labels.pickerTextFieldEmpty }}</div>
  `,
                    host: {
                        class: 'novo-entity-picker-results',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { select: [{
                type: Output
            }] } });

// App
class OptionsService {
    constructor() { }
    getOptionsConfig(http, field, config) {
        return {
            field: 'value',
            format: '$label',
            options: (query) => {
                return new Promise((resolve, reject) => {
                    if (query && query.length) {
                        const exp = new RegExp('^(?:[a-z]+:)?//', 'i');
                        let endpoint;
                        if (exp.test(field.optionsUrl)) {
                            const url = new URL(field.optionsUrl);
                            url.searchParams.set('filter', query || '');
                            endpoint = url.toString();
                        }
                        else {
                            // Construct relative url (host will not be used but is required for construction)
                            const url = new URL(`http://placeholder.com/${field.optionsUrl}`);
                            url.searchParams.set('filter', query || '');
                            endpoint = `${url.pathname}${url.search}`;
                        }
                        http.get(endpoint).subscribe(resolve, reject);
                    }
                    else {
                        resolve([]);
                    }
                });
            },
        };
    }
}
OptionsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: OptionsService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
OptionsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: OptionsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: OptionsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

// NG
class FormUtils {
    constructor(labels, optionsService) {
        this.labels = labels;
        this.optionsService = optionsService;
        this.ASSOCIATED_ENTITY_LIST = [
            'Candidate',
            'ClientContact',
            'ClientCorporation',
            'CorporationDepartment',
            'Lead',
            'Opportunity',
            'JobOrder',
            'CorporateUser',
            'Person',
            'Placement',
            'JobShift',
        ];
        this.ENTITY_PICKER_LIST = [
            'Candidate',
            'CandidateText',
            'Client',
            'ClientText',
            'ClientContact',
            'ClientContactText',
            'ClientCorporation',
            'ClientCorporationText',
            'Lead',
            'LeadText',
            'Opportunity',
            'OpportunityText',
            'JobOrder',
            'JobOrderText',
            'CorporateUser',
            'CorporateUserText',
            'Person',
            'PersonText',
            'Placement',
            'JobShift',
        ];
    }
    toFormGroup(controls) {
        const group = {};
        controls.forEach((control) => {
            const value = Helpers.isBlank(control.value) ? '' : control.value;
            group[control.key] = new NovoFormControl(value, control);
        });
        return new NovoFormGroup(group);
    }
    emptyFormGroup() {
        return new NovoFormGroup({});
    }
    addControls(formGroup, controls) {
        controls.forEach((control) => {
            const value = Helpers.isBlank(control.value) ? '' : control.value;
            const formControl = new NovoFormControl(value, control);
            formGroup.addControl(control.key, formControl);
        });
    }
    removeControls(formGroup, controls) {
        controls.forEach((control) => {
            formGroup.removeControl(control.key);
        });
    }
    toFormGroupFromFieldset(fieldsets) {
        const controls = [];
        fieldsets.forEach((fieldset) => {
            controls.push(...fieldset.controls);
        });
        return this.toFormGroup(controls);
    }
    hasAssociatedEntity(field) {
        return !!(field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity));
    }
    determineInputType(field) {
        let type;
        const dataSpecializationTypeMap = {
            DATETIME: 'datetime',
            TIME: 'time',
            MONEY: 'currency',
            PERCENTAGE: 'percentage',
            HTML: 'editor',
            'HTML-MINIMAL': 'editor-minimal',
            YEAR: 'year',
            WORKFLOW_OPTIONS: 'select',
            SPECIALIZED_OPTIONS: 'select',
            ALL_WORKFLOW_OPTIONS: 'select',
            WorkflowOptionsLookup: 'select',
            SpecializedOptionsLookup: 'select',
            SimplifiedOptionsLookup: 'select',
            AllWorkflowOptionsLookup: 'select',
        };
        const dataTypeToTypeMap = {
            Timestamp: 'date',
            Date: 'date',
            Boolean: 'tiles',
        };
        const inputTypeToTypeMap = {
            CHECKBOX: 'radio',
            RADIO: 'radio',
            SELECT: 'select',
            TILES: 'tiles',
        };
        const inputTypeMultiToTypeMap = {
            CHECKBOX: 'checklist',
            RADIO: 'checklist',
            SELECT: 'chips',
        };
        const typeToTypeMap = {
            file: 'file',
            COMPOSITE: 'address',
        };
        const numberDataTypeToTypeMap = {
            Double: 'float',
            BigDecimal: 'float',
            Integer: 'number',
        };
        if (field.type === 'TO_MANY') {
            if (this.hasAssociatedEntity(field)) {
                if (field.multiValue === false) {
                    type = 'entitypicker';
                }
                else {
                    type = 'entitychips';
                }
            }
            else {
                if (field.multiValue === false) {
                    type = 'picker';
                }
                else {
                    type = 'chips';
                }
            }
        }
        else if (field.type === 'TO_ONE') {
            if ('SYSTEM' === field.dataSpecialization &&
                ['WorkflowOptionsLookup', 'SpecializedOptionsLookup', 'AllWorkflowOptionsLookup'].includes(field.dataType)) {
                type = dataSpecializationTypeMap[field.dataType];
            }
            else if (['WORKFLOW_OPTIONS', 'SPECIALIZED_OPTIONS', 'ALL_WORKFLOW_OPTIONS'].includes(field.dataSpecialization)) {
                type = dataSpecializationTypeMap[field.dataSpecialization];
            }
            else if (['SimplifiedOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
                    type = inputTypeToTypeMap[field.inputType];
                }
                else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
                    type = inputTypeMultiToTypeMap[field.inputType];
                }
                else {
                    type = dataSpecializationTypeMap[field.dataType];
                }
            }
            else if (this.hasAssociatedEntity(field)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (field.optionsUrl && field.inputType === 'SELECT') {
            if (field.optionsType && ~this.ENTITY_PICKER_LIST.indexOf(field.optionsType)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
            type = dataSpecializationTypeMap[field.dataSpecialization];
        }
        else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = dataTypeToTypeMap[field.dataType];
        }
        else if (field.inputType === 'TEXTAREA') {
            type = 'textarea';
        }
        else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
            type = inputTypeToTypeMap[field.inputType];
        }
        else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
            type = inputTypeMultiToTypeMap[field.inputType];
        }
        else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
            type = typeToTypeMap[field.type];
        }
        else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = numberDataTypeToTypeMap[field.dataType];
        } /* else {
                throw new Error('FormUtils: This field type is unsupported.');
            }*/
        return type;
    }
    isFieldEncrypted(key) {
        return key.indexOf('customEncrypted') > -1;
    }
    getControlForField(field, http, config, overrides, forTable = false, fieldData) {
        // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
        // TODO: (cont.) as the setter of the field argument
        let type = this.determineInputType(field) || field.type;
        let control;
        const controlConfig = {
            metaType: field.type,
            type,
            key: field.name,
            label: field.label,
            placeholder: field.hint || '',
            required: field.required || field.systemRequired,
            hidden: !field.required,
            encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
            value: field.value || field.defaultValue,
            sortOrder: field.sortOrder,
            associatedEntity: field.associatedEntity,
            optionsType: field.optionsType,
            multiple: field.multiValue,
            readOnly: !!field.disabled || !!field.readOnly,
            disabled: field.disabled,
            maxlength: field.maxLength,
            interactions: field.interactions,
            dataSpecialization: field.dataSpecialization,
            dataType: field.dataType,
            description: field.description || '',
            tooltip: field.tooltip,
            tooltipPosition: field.tooltipPosition,
            customControl: field.customControl,
            template: field.template,
            customControlConfig: field.customControlConfig,
            restrictFieldInteractions: field.restrictFieldInteractions,
            validators: field.validators,
            warning: field.warning,
            config: field.config || {},
            closeOnSelect: field.closeOnSelect,
            layoutOptions: field.layoutOptions,
        };
        this.inferDateRange(controlConfig, field);
        // TODO: getControlOptions should always return the correct format
        const optionsConfig = this.getControlOptions(field, http, config, fieldData);
        if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
            controlConfig.options = optionsConfig;
        }
        else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
            controlConfig.config = {
                options: optionsConfig,
            };
        }
        else if (optionsConfig) {
            controlConfig.config = {
                ...optionsConfig,
                ...(controlConfig && controlConfig.config),
            };
        }
        if (type === 'year') {
            controlConfig.maxlength = 4;
        }
        // TODO: Overrides should be an iterable of all properties (potentially a private method)
        let overrideResultsTemplate;
        let overridePreviewTemplate;
        if (overrides && overrides[field.name]) {
            if (overrides[field.name].resultsTemplate) {
                overrideResultsTemplate = overrides[field.name].resultsTemplate;
                controlConfig.config.resultsTemplate = overrideResultsTemplate;
                delete overrides[field.name].resultsTemplate;
            }
            if (overrides[field.name].overridePreviewTemplate) {
                overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                delete overrides[field.name].overridePreviewTemplate;
            }
            if (overrides[field.name].pickerCallback) {
                controlConfig.config.callback = overrides[field.name].pickerCallback;
            }
            if (overrides[field.name].type) {
                type = overrides[field.name].type;
            }
            if (overrides[field.name].columns) {
                controlConfig.config.columns = overrides[field.name].columns;
                controlConfig.closeOnSelect = true;
                delete controlConfig.label;
            }
            if (overrides[field.name].warning) {
                controlConfig.warning = overrides[field.name].warning;
            }
            Object.assign(controlConfig, overrides[field.name]);
        }
        switch (type) {
            case 'entitychips':
                // TODO: This doesn't belong in this codebase
                controlConfig.multiple = true;
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                controlConfig.config.previewTemplate = overridePreviewTemplate || EntityPickerResult;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'chips':
                controlConfig.multiple = true;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'entitypicker':
                // TODO: This doesn't belong in this codebase
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'picker':
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'datetime':
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateTimeControl(controlConfig);
                break;
            case 'date':
                controlConfig.dateFormat = field.dateFormat;
                controlConfig.textMaskEnabled = field.textMaskEnabled;
                controlConfig.allowInvalidDate = field.allowInvalidDate;
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateControl(controlConfig);
                break;
            case 'time':
                controlConfig.military = config ? !!config.military : false;
                control = new TimeControl(controlConfig);
                break;
            case 'native-time':
            case 'native-date':
            case 'native-week':
            case 'native-year':
            case 'native-datetime-local':
            case 'native-tel':
            case 'native-email':
            case 'native-url':
            case 'native-number':
                control = new CustomControl({ ...controlConfig, template: 'native-input', type: type.replace('native-', ''), alwaysActive: true });
                break;
            case 'timezone':
                control = new TimezoneControl(controlConfig);
                break;
            case 'currency':
            case 'money':
            case 'email':
            case 'percentage':
            case 'float':
            case 'number':
            case 'year':
                // TODO: Only types from `determineInputType` should be used in this class
                if (type === 'money') {
                    type = 'currency';
                }
                controlConfig.type = type;
                control = new TextBoxControl(controlConfig);
                break;
            case 'text':
                control = new TextBoxControl(controlConfig);
                break;
            case 'textarea':
                control = new TextAreaControl(controlConfig);
                break;
            case 'editor':
                control = new EditorControl(controlConfig);
                break;
            case 'editor-minimal':
                control = new EditorControl(controlConfig);
                control.minimal = true;
                break;
            case 'tiles':
                control = new TilesControl(controlConfig);
                break;
            case 'checkbox':
                controlConfig.checkboxLabel = field.checkboxLabel;
                control = new CheckboxControl(controlConfig);
                break;
            case 'switch':
                control = new SwitchControl(controlConfig);
                break;
            case 'checklist':
                control = new CheckListControl(controlConfig);
                break;
            case 'radio':
                control = new RadioControl(controlConfig);
                break;
            case 'select':
                control = new SelectControl(controlConfig);
                break;
            case 'address':
                controlConfig.required = field.required || false;
                if (Helpers.isBlank(controlConfig.config)) {
                    controlConfig.config = {};
                }
                controlConfig.config.required = field.required;
                controlConfig.config.readOnly = controlConfig.readOnly;
                if (field.fields && field.fields.length) {
                    for (const subfield of field.fields) {
                        controlConfig.config[subfield.name] = {
                            required: !!subfield.required,
                            hidden: !!subfield.readOnly,
                        };
                        if (!Helpers.isEmpty(subfield.label)) {
                            controlConfig.config[subfield.name].label = subfield.label;
                        }
                        if (!Helpers.isEmpty(subfield.maxLength)) {
                            controlConfig.config[subfield.name].maxlength = subfield.maxLength;
                        }
                        controlConfig.required = controlConfig.required || subfield.required;
                        if (subfield.defaultValue) {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = subfield.defaultValue;
                        }
                        else if (subfield.name === 'countryID') {
                            if (Helpers.isBlank(controlConfig.value)) {
                                controlConfig.value = {};
                            }
                            controlConfig.value[subfield.name] = 1;
                        }
                        if (subfield.name === 'state' || subfield.name === 'countryID') {
                            if (subfield.name === 'countryID') {
                                subfield.optionsType = 'Country';
                            }
                            if (!subfield.optionsUrl) {
                                subfield.optionsUrl = `options/${subfield.optionsType}`;
                            }
                            controlConfig.config[subfield.name].pickerConfig = this.getControlOptions(subfield, http, config, fieldData);
                        }
                    }
                }
                controlConfig.isEmpty = this.isAddressEmpty;
                control = new AddressControl(controlConfig);
                break;
            case 'file':
                control = new FileControl(controlConfig);
                break;
            case 'custom':
                control = new CustomControl(controlConfig);
                break;
            default:
                control = new TextBoxControl(controlConfig);
                break;
        }
        return control;
    }
    shouldCreateControl(field) {
        if (field.systemRequired) {
            field.readOnly = false;
        }
        return (field.name !== 'id' &&
            (!['SYSTEM', 'SECTION_HEADER'].includes(field.dataSpecialization) ||
                ['address', 'billingAddress', 'secondaryAddress'].includes(field.name)) &&
            !field.readOnly);
    }
    toControls(meta, currencyFormat, http, config, overrides, forTable = false) {
        const controls = [];
        if (meta && meta.fields) {
            const fields = meta.fields;
            fields.forEach((field) => {
                if (this.shouldCreateControl(field)) {
                    const control = this.getControlForField(field, http, config, overrides, forTable);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    // Add to controls
                    controls.push(control);
                }
            });
        }
        return controls;
    }
    toTableControls(meta, currencyFormat, http, config, overrides) {
        const controls = this.toControls(meta, currencyFormat, http, config, overrides, true);
        const ret = {};
        controls.forEach((control) => {
            ret[control.key] = {
                editorType: control.__type,
                editorConfig: control.__config,
            };
        });
        return ret;
    }
    toFieldSets(meta, currencyFormat, http, config, overrides, data) {
        const fieldsets = [];
        let formFields = [];
        if (meta && meta.fields) {
            formFields = this.getFormFields(meta);
            formFields.forEach((field) => {
                if (this.isHeader(field)) {
                    if (field.enabled) {
                        this.insertHeaderToFieldsets(fieldsets, field);
                    }
                }
                else if (this.isEmbeddedField(field)) {
                    this.insertHeaderToFieldsets(fieldsets, field);
                    const embeddedFields = this.getEmbeddedFields(field);
                    embeddedFields.forEach((embeddedField) => {
                        if (this.shouldCreateControl(embeddedField)) {
                            let control = this.createControl(embeddedField, data, http, config, overrides, currencyFormat);
                            control = this.markControlAsEmbedded(control, field.dataSpecialization ? field.dataSpecialization.toLowerCase() : null);
                            fieldsets[fieldsets.length - 1].controls.push(control);
                        }
                        else if (this.isHeader(embeddedField)) {
                            this.insertHeaderToFieldsets(fieldsets, embeddedField);
                        }
                    });
                }
                else if (this.shouldCreateControl(field)) {
                    let control = this.createControl(field, data, http, config, overrides, currencyFormat);
                    if (field.inlineEmbeddedAssociatedEntityField) {
                        control = this.markControlAsEmbedded(control, 'inline_embedded');
                    }
                    if (fieldsets.length === 0) {
                        fieldsets.push({ controls: [] });
                    }
                    fieldsets[fieldsets.length - 1].controls.push(control);
                }
            });
        }
        if (fieldsets.length > 0) {
            return fieldsets;
        }
        else {
            return [
                {
                    controls: this.toControls(meta, currencyFormat, http, config),
                },
            ];
        }
    }
    isEmbeddedField(field) {
        return field.dataSpecialization && ['embedded'].includes(field.dataSpecialization.toLowerCase()) && !field.readOnly;
    }
    createControl(field, data, http, config, overrides, currencyFormat) {
        const fieldData = this.isEmbeddedFieldData(field, data) ? this.getEmbeddedFieldData(field, data) : this.getFieldData(field, data);
        const control = this.getControlForField(field, http, config, overrides, undefined, fieldData);
        // Set currency format
        if (control.subType === 'currency') {
            control.currencyFormat = currencyFormat;
        }
        return control;
    }
    isEmbeddedFieldData(field, data) {
        return data && field.name.includes('.');
    }
    getFieldData(field, data) {
        return (data && data[field.name]) || null;
    }
    getEmbeddedFieldData(field, data) {
        const [parentFieldName, fieldName] = field.name.split('.');
        return (data && data[parentFieldName] && data[parentFieldName][fieldName]) || null;
    }
    getFormFields(meta) {
        const sectionHeaders = meta.sectionHeaders
            ? meta.sectionHeaders.map((element) => {
                element.isSectionHeader = true;
                return element;
            })
            : [];
        let fields = meta.fields.map((field) => {
            field.parentEntity = meta.entity;
            if (!field.hasOwnProperty('sortOrder')) {
                field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
            }
            return field;
        });
        // build list of fields that should be displayed inline but belong to associated entities
        const inlineEmbeddedAssociatedEntityFields = this.getInlineEmbeddedFields(fields);
        // remove the inline embedded fields because the associated entity fields were extracted above
        // and will be added to the regular list of fields. This prevents the fields from being added multiple times.
        fields = fields.filter((f) => !f.dataSpecialization || f.dataSpecialization.toLowerCase() !== 'inline_embedded');
        // sort fields
        return [...sectionHeaders, ...fields, ...inlineEmbeddedAssociatedEntityFields].sort(Helpers.sortByField(['sortOrder', 'name']));
    }
    getInlineEmbeddedFields(fields) {
        let inlineEmbeddedAssociatedEntityFields = [];
        fields
            .filter((f) => f.dataSpecialization && f.dataSpecialization.toLowerCase() === 'inline_embedded')
            .forEach((f) => {
            inlineEmbeddedAssociatedEntityFields = [...inlineEmbeddedAssociatedEntityFields, ...this.getAssociatedFieldsForInlineEmbedded(f)];
        });
        return inlineEmbeddedAssociatedEntityFields;
    }
    getAssociatedFieldsForInlineEmbedded(field) {
        let associatedEntityFields = [];
        associatedEntityFields = this.getEmbeddedFields(field).map((aef) => {
            aef.inlineEmbeddedAssociatedEntityField = true;
            return aef;
        });
        return associatedEntityFields;
    }
    getEmbeddedFields(subHeader) {
        return subHeader.associatedEntity.fields
            .filter((field) => field.name !== 'id')
            .map((field) => {
            if (!field.name.startsWith(`${subHeader.name}.`)) {
                field.name = `${subHeader.name}.${field.name}`;
            }
            return field;
        })
            .sort(Helpers.sortByField(['sortOrder', 'name']));
    }
    isHeader(field) {
        return (!Helpers.isBlank(field) &&
            ((field.hasOwnProperty('isSectionHeader') && field.isSectionHeader) ||
                (field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'section_header')));
    }
    insertHeaderToFieldsets(fieldsets, field) {
        const constantProperties = {
            controls: [],
            isEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'embedded',
            isInlineEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'inline_embedded',
            key: field.name,
        };
        if (field.name && field.name.startsWith('customObject') && field.associatedEntity && field.associatedEntity.label) {
            fieldsets.push({
                title: field.associatedEntity.label || field.label,
                icon: field.icon || 'bhi-card-expand',
                ...constantProperties,
            });
        }
        else {
            fieldsets.push({
                title: field.label,
                icon: field.icon || 'bhi-section',
                ...constantProperties,
            });
        }
    }
    markControlAsEmbedded(control, dataSpecialization) {
        if (Helpers.isBlank(control.config)) {
            control.config = {};
        }
        control.config.embedded = true;
        control.isEmbedded = dataSpecialization === 'embedded';
        control.isInlineEmbedded = dataSpecialization === 'inline_embedded';
        return control;
    }
    getControlOptions(field, http, config, fieldData) {
        // TODO: The token property of config is the only property used; just pass in `token: string`
        if (field.dataType === 'Boolean' && !field.options) {
            // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
            // TODO: (cont.) returns `tiles`
            return [
                { value: false, label: this.labels.no },
                { value: true, label: this.labels.yes },
            ];
        }
        else if (field.dataSpecialization === 'ALL_WORKFLOW_OPTIONS' && field.options) {
            return field.options;
        }
        else if (field.workflowOptions) {
            return this.getWorkflowOptions(field.workflowOptions, fieldData);
        }
        else if (field.dataSpecialization === 'SPECIALIZED_OPTIONS' ||
            (field.options && ['SpecializedOptionsLookup', 'SimplifiedOptionsLookup'].includes(field.dataType))) {
            return field.options;
        }
        else if (field.optionsUrl) {
            return this.optionsService.getOptionsConfig(http, field, config);
        }
        else if (Array.isArray(field.options) && field.type === 'chips') {
            const options = field.options;
            return {
                field: 'value',
                format: '$label',
                options,
            };
        }
        else if (field.options) {
            return field.options;
        }
        return null;
    }
    getWorkflowOptions(workflowOptions, fieldData) {
        let currentValue = null;
        let currentWorkflowOption = 'initial';
        if (fieldData?.id) {
            currentValue = { ...fieldData, value: fieldData.id, label: fieldData.label || fieldData.id };
            currentWorkflowOption = fieldData.id;
        }
        const updateWorkflowOptions = workflowOptions[currentWorkflowOption] || [];
        // Ensure that the current value is added to the beginning of the options list
        if (currentValue && !updateWorkflowOptions.find((option) => option.value === currentValue.value)) {
            updateWorkflowOptions.unshift(currentValue);
        }
        return updateWorkflowOptions;
    }
    setInitialValues(controls, values, keepClean, keyOverride) {
        for (let i = 0; i < controls.length; i++) {
            const control = controls[i];
            const key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
            let value = values[key];
            if (Helpers.isBlank(value)) {
                continue;
            }
            if (Array.isArray(value) && value.length === 0) {
                continue;
            }
            if (Array.isArray(value) && value.length > 0) {
                value = value.filter((val) => !(Object.keys(val).length === 0 && val.constructor === Object));
                if (value.length === 0) {
                    continue;
                }
            }
            if (value.data && value.data.length === 0) {
                continue;
            }
            if (Object.keys(value).length === 0 && value.constructor === Object) {
                continue;
            }
            if (control.dataType === 'Date' && typeof value === 'string' && control.optionsType !== 'skipConversion') {
                value = dateFns.startOfDay(value);
            }
            control.value = value;
            // TODO: keepClean is not required, but is always used. It should default (to true?)
            control.dirty = !keepClean;
        }
    }
    setInitialValuesFieldsets(fieldsets, values, keepClean) {
        fieldsets.forEach((fieldset) => {
            this.setInitialValues(fieldset.controls, values, keepClean);
        });
    }
    forceShowAllControls(controls) {
        controls.forEach((control) => {
            control.hidden = false;
        });
    }
    forceShowAllControlsInFieldsets(fieldsets) {
        fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                control.hidden = false;
            });
        });
    }
    forceValidation(form) {
        Object.keys(form.controls).forEach((key) => {
            const control = form.controls[key];
            if (control.required && Helpers.isBlank(form.getRawValue()[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
    isAddressEmpty(control) {
        const fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        let valid = true;
        if (control.value && control.config) {
            fieldList.forEach((subfield) => {
                if (((subfield !== 'countryID' &&
                    !Helpers.isEmpty(control.config[subfield]) &&
                    control.config[subfield].required &&
                    (Helpers.isBlank(control.value[subfield]) || Helpers.isEmpty(control.value[subfield]))) ||
                    (subfield === 'countryID' &&
                        !Helpers.isEmpty(control.config.countryID) &&
                        control.config.countryID.required &&
                        Helpers.isEmpty(control.value.countryName))) &&
                    !(subfield === 'state' &&
                        !Helpers.isBlank(control.value.countryName) &&
                        control.config.state.pickerConfig &&
                        control.config.state.pickerConfig.defaultOptions &&
                        control.config.state.pickerConfig.defaultOptions.length === 0)) {
                    valid = false;
                }
            });
        }
        return valid;
    }
    getStartDateFromRange(dateRange) {
        if (dateRange.minDate) {
            return dateFns.parse(dateRange.minDate);
        }
        else if (dateRange.minOffset) {
            return dateFns.addDays(dateFns.startOfToday(), dateRange.minOffset);
        }
    }
    getEndDateFromRange(dateRange) {
        if (dateRange.maxDate) {
            return dateFns.parse(dateRange.maxDate);
        }
        else if (dateRange.minOffset) {
            return dateFns.addDays(dateFns.startOfToday(), dateRange.minOffset);
        }
    }
    /**
     * Get the min start date and max end date of a Date base on field data.
     */
    inferDateRange(controlConfig, field) {
        if (field.dataType === 'Date' && field.allowedDateRange) {
            controlConfig.startDate = this.getStartDateFromRange(field.allowedDateRange);
            controlConfig.endDate = this.getEndDateFromRange(field.allowedDateRange);
            controlConfig.disabledDateMessage = field.allowedDateRange?.disabledDateMessage;
        }
    }
    inflateEmbeddedProperties(data) {
        if (data) {
            Object.keys(data)
                .filter((fieldName) => fieldName.includes('.'))
                .forEach((field) => {
                const [parentFieldName, fieldName] = field.split('.');
                if (!data[parentFieldName]) {
                    data[parentFieldName] = {};
                }
                data[parentFieldName][fieldName] = data[field];
                delete data[field];
            });
        }
        return data;
    }
}
FormUtils.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FormUtils, deps: [{ token: NovoLabelService }, { token: OptionsService }], target: i0.ɵɵFactoryTarget.Injectable });
FormUtils.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FormUtils });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FormUtils, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: OptionsService }]; } });

const isAlphaNumeric = (letter) => {
    return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890'.includes(letter.toUpperCase());
};

// Helper to keep track of key codes
const KeyCodes = {
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    RETURN: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HASH_SYMBOL: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    AT_SYMBOL: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    DASH: 189,
    PERIOD: 190,
    FORWARD_SLASH: 191,
};

// NG2
/**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
class OutsideClick {
    constructor(element) {
        this.active = false;
        this.onActiveChange = new EventEmitter();
        // Component element
        this.element = element;
        // Outside click handler
        // Property because `this.func.bind(this)` returns a new function each time
        this.onOutsideClick = this.handleOutsideClick.bind(this);
    }
    /**
     * When the element is destroyed, make sure to remove the handler
     */
    ngOnDestroy() {
        window.removeEventListener('click', this.onOutsideClick);
    }
    /**
     * Toggles the element as active and adds/removes the outside click handler
     */
    toggleActive(event, forceValue) {
        // Reverse the active property (if forceValue, use that)
        this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
        // Bind window click events to hide on outside click
        if (this.active) {
            window.addEventListener('click', this.onOutsideClick);
        }
        else {
            window.removeEventListener('click', this.onOutsideClick);
        }
        // Fire the active change event
        this.onActiveChange.emit(this.active);
    }
    /**
     * When clicking outside, checks the element and closes if outside
     */
    handleOutsideClick(event) {
        // If the elements doesn't contain the target element, it is an outside click
        let outsideClick = !this.element.nativeElement.contains(event.target);
        if (this.otherElement && outsideClick) {
            outsideClick = !this.otherElement.nativeElement.contains(event.target);
        }
        if (outsideClick) {
            this.toggleActive(event, false);
        }
    }
}
OutsideClick.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: OutsideClick, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Injectable });
OutsideClick.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: OutsideClick });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: OutsideClick, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

class NovoThemeOptions {
}
class NovoTheme {
    constructor() {
        this._defaultTheme = { themeName: 'modern-light' };
        this.onThemeChange = new EventEmitter();
    }
    /** Name of the theme being used. defaults to `modern-light` */
    get themeName() {
        return this._currentTheme?.themeName || this._defaultTheme.themeName;
    }
    set themeName(value) {
        this._currentTheme = { themeName: value };
        this.changeTheme(this._currentTheme);
    }
    use(options) {
        // future: don't change the theme if the theme given is already selected
        this.changeTheme(options);
        // this might become async in future
        return of(options);
    }
    /**
     * Changes the current theme
     */
    changeTheme(theme) {
        this._currentTheme = theme;
        this.onThemeChange.emit({ themeName: theme.themeName, options: theme });
    }
}
NovoTheme.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTheme, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NovoTheme.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTheme, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTheme, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }] });

// tslint:disable: directive-selector
class AccentColorDirective {
    constructor(el, theme, cdr) {
        this.el = el;
        this.theme = theme;
        this.cdr = cdr;
        this.subscription = this.theme.onThemeChange.subscribe((event) => {
            this.cdr.markForCheck();
        });
    }
    get hb_textColor() {
        // Support legacy classic theme... for now
        if (this.theme.themeName === 'classic') {
            return `novo-theme-${this.accent}`;
        }
        return `novo-accent-${this.accent}`;
    }
    onDestroy() {
        this.subscription.unsubscribe();
    }
}
AccentColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AccentColorDirective, deps: [{ token: i0.ElementRef }, { token: NovoTheme }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
AccentColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: AccentColorDirective, selector: "[accent]", inputs: { accent: "accent" }, host: { properties: { "class": "this.hb_textColor" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AccentColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[accent]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoTheme }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { accent: [{
                type: Input
            }], hb_textColor: [{
                type: HostBinding,
                args: ['class']
            }] } });

// tslint:disable: directive-selector
class BackgroundColorDirective {
    constructor(el) {
        this.el = el;
    }
    get hb_bgColor() {
        return isValidColor$1(this.bg) ? 'novo-background-custom' : `novo-background-${this.bg}`;
    }
    get hb_bgStyle() {
        return isValidColor$1(this.bg) ? this.bg : null;
    }
}
BackgroundColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BackgroundColorDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
BackgroundColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: BackgroundColorDirective, selector: "[bg]", inputs: { bg: "bg" }, host: { properties: { "class": "this.hb_bgColor", "style.background-color": "this.hb_bgStyle" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BackgroundColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bg]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { bg: [{
                type: Input
            }], hb_bgColor: [{
                type: HostBinding,
                args: ['class']
            }], hb_bgStyle: [{
                type: HostBinding,
                args: ['style.background-color']
            }] } });
function isValidColor$1(color) {
    return color.startsWith('#') || color.startsWith('rgb');
}

// tslint:disable: directive-selector
class BorderDirective {
    constructor(el) {
        this.el = el;
        this.borderStyle = 'solid';
        this.borderColor = '#eaecef';
        this.borderWidth = 1;
    }
    // @HostBinding('style.borderStyle') get getBorderStyle() {
    //   return this.border;
    // }
    // @HostBinding('style.borderWidth') get getBorderWidth() {
    //   return this.width;
    // }
    // @HostBinding('style.borderColor') get getBorderColor() {
    //   return this.borderColor;
    // }
    get hb_border() {
        return `border-${this.border}`;
    }
    get hb_border_left() {
        return this.borderLeft || this.bl || this.bx || this.borderX;
    }
    get hb_border_right() {
        return this.borderRight || this.bt || this.bx || this.borderX;
    }
    get hb_border_top() {
        return this.borderTop || this.bt || this.by || this.borderY;
    }
    get hb_border_bottom() {
        return this.borderBottom || this.bt || this.by || this.borderY;
    }
}
BorderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BorderDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
BorderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: BorderDirective, selector: "[border], [bb], [borderBottom], [bt], [borderTop], [bl], [borderLeft], [br], [borderRight], [bx], [borderX], [by], [borderY]", inputs: { borderStyle: "borderStyle", borderColor: "borderColor", borderWidth: "borderWidth", border: "border", borderLeft: "borderLeft", bl: "bl", borderRight: "borderRight", br: "br", borderTop: "borderTop", bt: "bt", borderBottom: "borderBottom", bb: "bb", borderX: "borderX", bx: "bx", borderY: "borderY", by: "by" }, host: { properties: { "class": "this.hb_border", "style.border-left": "this.hb_border_left", "style.border-right": "this.hb_border_right", "style.border-top": "this.hb_border_top", "style.border-bottom": "this.hb_border_bottom" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BorderDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[border], [bb], [borderBottom], [bt], [borderTop], [bl], [borderLeft], [br], [borderRight], [bx], [borderX], [by], [borderY]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { borderStyle: [{
                type: Input
            }], borderColor: [{
                type: Input
            }], borderWidth: [{
                type: Input
            }], border: [{
                type: Input
            }], borderLeft: [{
                type: Input
            }], bl: [{
                type: Input
            }], borderRight: [{
                type: Input
            }], br: [{
                type: Input
            }], borderTop: [{
                type: Input
            }], bt: [{
                type: Input
            }], borderBottom: [{
                type: Input
            }], bb: [{
                type: Input
            }], borderX: [{
                type: Input
            }], bx: [{
                type: Input
            }], borderY: [{
                type: Input
            }], by: [{
                type: Input
            }], hb_border: [{
                type: HostBinding,
                args: ['class']
            }], hb_border_left: [{
                type: HostBinding,
                args: ['style.border-left']
            }], hb_border_right: [{
                type: HostBinding,
                args: ['style.border-right']
            }], hb_border_top: [{
                type: HostBinding,
                args: ['style.border-top']
            }], hb_border_bottom: [{
                type: HostBinding,
                args: ['style.border-bottom']
            }] } });

// tslint:disable: directive-selector
class TextColorDirective {
    constructor(el) {
        this.el = el;
    }
    get hb_textColor() {
        return isValidColor(this.txc) ? 'novo-text-custom' : `novo-text-${this.txc}`;
    }
    get hb_textStyle() {
        return isValidColor(this.txc) ? this.txc : null;
    }
}
TextColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TextColorDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TextColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: TextColorDirective, selector: "[txc]", inputs: { txc: "txc" }, host: { properties: { "class": "this.hb_textColor", "style.color": "this.hb_textStyle" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TextColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[txc]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { txc: [{
                type: Input
            }], hb_textColor: [{
                type: HostBinding,
                args: ['class']
            }], hb_textStyle: [{
                type: HostBinding,
                args: ['style.color']
            }] } });
function isValidColor(color) {
    return color.startsWith('#') || color.startsWith('rgb');
}

// tslint:disable: directive-selector
class FillColorDirective {
    constructor(el) {
        this.el = el;
    }
    get hb_textColor() {
        return `novo-fill-${this.fill}`;
    }
}
FillColorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FillColorDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
FillColorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: FillColorDirective, selector: "[fill]", inputs: { fill: "fill" }, host: { properties: { "class": "this.hb_textColor" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FillColorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[fill]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { fill: [{
                type: Input
            }], hb_textColor: [{
                type: HostBinding,
                args: ['class']
            }] } });

class FlexDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        // this.renderer.setStyle(this.el.nativeElement, 'display', 'flex');
    }
    get flex() {
        return this._flex;
    }
    set flex(value) {
        if (!value) {
            this._flex = '1 1 auto';
        }
        else {
            this._flex = value;
        }
    }
}
FlexDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FlexDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
FlexDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: FlexDirective, selector: "[flex]", inputs: { flex: "flex" }, host: { properties: { "style.flex": "this.flex" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FlexDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line: directive-selector
                    selector: '[flex]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { flex: [{
                type: HostBinding,
                args: ['style.flex']
            }, {
                type: Input
            }] } });

// tslint:disable: directive-selector
/*
Prop	CSS Property	Theme Field
m, margin	margin	space
mt, marginTop	margin-top	space
mr, marginRight	margin-right	space
mb, marginBottom	margin-bottom	space
ml, marginLeft	margin-left	space
mx	margin-left and margin-right	space
my	margin-top and margin-bottom	space
p, padding	padding	space
pt, paddingTop	padding-top	space
pr, paddingRight	padding-right	space
pb, paddingBottom	padding-bottom	space
pl, paddingLeft	padding-left	space
px	padding-left and padding-right	space
py	padding-top and padding-bottom	space
*/
/*
// Selectors generated with the following code
const directions = ['Top', 'Right', 'Bottom', 'Left', 'X', 'Y'];
const abbrDirections = directions.map((d) => d.slice(0, 1).toLowerCase());
const marginAttrs = [
  '[m]',
  '[margin]',
  ...directions.map((dir) => `[margin${dir}]`),
  ...abbrDirections.map((dir) => `[m${dir}]`),
];
const paddingAttrs = [
  '[p]',
  '[padding]',
  ...directions.map((dir) => `[padding${dir}]`),
  ...abbrDirections.map((dir) => `[p${dir}]`),
];

const selectors = [...marginAttrs, ...paddingAttrs];
*/
const getSpacingToken = (value) => {
    if (Object.keys(tokens.spacing).includes(value)) {
        return tokens.spacing[value];
    }
    // TODO: Maybe Validate Value ie.(rem, px)
    return value;
};
class MarginDirective {
    // @HostBinding('style.margin') get hb_margin() {
    //   return getSpacingToken(this.margin || this.m);
    // }
    get hb_margin() {
        return `margin-${this.margin || this.m}`;
    }
    get hb_margin_left() {
        return getSpacingToken(this.marginLeft || this.ml || this.mx || this.marginX);
    }
    get hb_margin_right() {
        return getSpacingToken(this.marginRight || this.mr || this.mx || this.marginX);
    }
    get hb_margin_top() {
        return getSpacingToken(this.marginTop || this.mt || this.my || this.marginY);
    }
    get hb_margin_bottom() {
        return getSpacingToken(this.marginBottom || this.mb || this.my || this.marginY);
    }
}
MarginDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MarginDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
MarginDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: { margin: "margin", m: "m", marginLeft: "marginLeft", ml: "ml", marginRight: "marginRight", mr: "mr", marginTop: "marginTop", mt: "mt", marginBottom: "marginBottom", mb: "mb", marginX: "marginX", mx: "mx", marginY: "marginY", my: "my" }, host: { properties: { "class": "this.hb_margin", "style.margin-left": "this.hb_margin_left", "style.margin-right": "this.hb_margin_right", "style.margin-top": "this.hb_margin_top", "style.margin-bottom": "this.hb_margin_bottom" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MarginDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line: max-line-length
                    selector: '[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]',
                }]
        }], propDecorators: { margin: [{
                type: Input
            }], m: [{
                type: Input
            }], marginLeft: [{
                type: Input
            }], ml: [{
                type: Input
            }], marginRight: [{
                type: Input
            }], mr: [{
                type: Input
            }], marginTop: [{
                type: Input
            }], mt: [{
                type: Input
            }], marginBottom: [{
                type: Input
            }], mb: [{
                type: Input
            }], marginX: [{
                type: Input
            }], mx: [{
                type: Input
            }], marginY: [{
                type: Input
            }], my: [{
                type: Input
            }], hb_margin: [{
                type: HostBinding,
                args: ['class']
            }], hb_margin_left: [{
                type: HostBinding,
                args: ['style.margin-left']
            }], hb_margin_right: [{
                type: HostBinding,
                args: ['style.margin-right']
            }], hb_margin_top: [{
                type: HostBinding,
                args: ['style.margin-top']
            }], hb_margin_bottom: [{
                type: HostBinding,
                args: ['style.margin-bottom']
            }] } });
class PaddingDirective {
    get hb_padding() {
        return `padding-${this.padding || this.p}`;
    }
    // @HostBinding('class') get hb_padding() {
    //   return `padding-${this.padding || this.p}`;
    // }
    get hb_padding_left() {
        return getSpacingToken(this.paddingLeft || this.pl || this.px || this.paddingX);
    }
    get hb_padding_right() {
        return getSpacingToken(this.paddingRight || this.pr || this.px || this.paddingX);
    }
    get hb_padding_top() {
        return getSpacingToken(this.paddingTop || this.pt || this.py || this.paddingY);
    }
    get hb_padding_bottom() {
        return getSpacingToken(this.paddingBottom || this.pb || this.py || this.paddingY);
    }
}
PaddingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PaddingDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
PaddingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: { padding: "padding", p: "p", paddingLeft: "paddingLeft", pl: "pl", paddingRight: "paddingRight", pr: "pr", paddingTop: "paddingTop", pt: "pt", paddingBottom: "paddingBottom", pb: "pb", paddingX: "paddingX", px: "px", paddingY: "paddingY", py: "py" }, host: { properties: { "class": "this.hb_padding", "style.padding-left": "this.hb_padding_left", "style.padding-right": "this.hb_padding_right", "style.padding-top": "this.hb_padding_top", "style.padding-bottom": "this.hb_padding_bottom" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PaddingDirective, decorators: [{
            type: Directive,
            args: [{
                    // tslint:disable-next-line: max-line-length
                    selector: '[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]',
                }]
        }], propDecorators: { padding: [{
                type: Input
            }], p: [{
                type: Input
            }], paddingLeft: [{
                type: Input
            }], pl: [{
                type: Input
            }], paddingRight: [{
                type: Input
            }], pr: [{
                type: Input
            }], paddingTop: [{
                type: Input
            }], pt: [{
                type: Input
            }], paddingBottom: [{
                type: Input
            }], pb: [{
                type: Input
            }], paddingX: [{
                type: Input
            }], px: [{
                type: Input
            }], paddingY: [{
                type: Input
            }], py: [{
                type: Input
            }], hb_padding: [{
                type: HostBinding,
                args: ['class']
            }], hb_padding_left: [{
                type: HostBinding,
                args: ['style.padding-left']
            }], hb_padding_right: [{
                type: HostBinding,
                args: ['style.padding-right']
            }], hb_padding_top: [{
                type: HostBinding,
                args: ['style.padding-top']
            }], hb_padding_bottom: [{
                type: HostBinding,
                args: ['style.padding-bottom']
            }] } });
class GapDirective {
    get hb_gap() {
        return getSpacingToken(this.gap);
    }
}
GapDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GapDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
GapDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: GapDirective, selector: "[gap]", inputs: { gap: "gap" }, host: { properties: { "style.gap": "this.hb_gap" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GapDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[gap]',
                }]
        }], propDecorators: { gap: [{
                type: Input
            }], hb_gap: [{
                type: HostBinding,
                args: ['style.gap']
            }] } });

class SwitchCasesDirective {
    constructor(viewContainer, templateRef, ngSwitch) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
        this._created = false;
        this.ngSwitch = ngSwitch;
    }
    ngOnInit() {
        (this.novoSwitchCases || []).forEach(() => this.ngSwitch._addCase());
    }
    ngDoCheck() {
        let enforce = false;
        (this.novoSwitchCases || []).forEach((value) => (enforce = this.ngSwitch._matchCase(value) || enforce));
        this.enforceState(enforce);
    }
    enforceState(created) {
        if (created && !this._created) {
            this._created = true;
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else if (!created && this._created) {
            this._created = false;
            this.viewContainer.clear();
        }
    }
}
SwitchCasesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: SwitchCasesDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }, { token: i1.NgSwitch, host: true }], target: i0.ɵɵFactoryTarget.Directive });
SwitchCasesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: SwitchCasesDirective, selector: "[novoSwitchCases]", inputs: { novoSwitchCases: "novoSwitchCases" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: SwitchCasesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSwitchCases]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.TemplateRef }, { type: i1.NgSwitch, decorators: [{
                    type: Host
                }] }]; }, propDecorators: { novoSwitchCases: [{
                type: Input
            }] } });

class VisibleDirective {
    constructor(el) {
        this.el = el;
    }
    get hb_visibility() {
        return this.visible ? '' : `novo-visibility-hidden`;
    }
}
VisibleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: VisibleDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
VisibleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: VisibleDirective, selector: "[visible]", inputs: { visible: "visible" }, host: { properties: { "class": "this.hb_visibility" } }, ngImport: i0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], VisibleDirective.prototype, "visible", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: VisibleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[visible]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { visible: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class']
            }], hb_visibility: [{
                type: HostBinding,
                args: ['class']
            }] } });

class NovoTemplate {
    constructor(template) {
        this.template = template;
    }
    getType() {
        return this.name;
    }
}
NovoTemplate.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTemplate, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoTemplate.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoTemplate, selector: "[novoTemplate]", inputs: { type: "type", name: ["novoTemplate", "name"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTemplate, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoTemplate]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { type: [{
                type: Input
            }], name: [{
                type: Input,
                args: ['novoTemplate']
            }] } });

/**
 * Component that shows a simplified checkbox without including any kind of "real" checkbox.
 * Meant to be used when the checkbox is purely decorative and a large number of them will be
 * included, such as for the options in a multi-select. Uses no SVGs or complex animations.
 * Note that theming is meant to be handled by the parent element, e.g.
 * `novo-primary .novo-pseudo-checkbox`.
 *
 * Note that this component will be completely invisible to screen-reader users. This is *not*
 * interchangeable with `<novo-checkbox>` and should *not* be used if the user would directly
 * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail
 * of more complex components that appropriately handle selected / checked state.
 * @docs-private
 */
class NovoPseudoCheckbox {
    constructor(_animationMode) {
        this._animationMode = _animationMode;
        /** Display state of the checkbox. */
        this.state = 'unchecked';
        /** Display state of the checkbox. */
        this.shape = 'box';
        /** Whether the checkbox is disabled. */
        this.disabled = false;
    }
}
NovoPseudoCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPseudoCheckbox, deps: [{ token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoPseudoCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoPseudoCheckbox, selector: "novo-pseudo-checkbox", inputs: { state: "state", shape: "shape", disabled: "disabled" }, host: { properties: { "class.novo-pseudo-checkbox-indeterminate": "state === \"indeterminate\"", "class.novo-pseudo-checkbox-checked": "state === \"checked\"", "class.novo-pseudo-checkbox-disabled": "disabled", "class._novo-animation-noopable": "_animationMode === \"NoopAnimations\"" }, classAttribute: "novo-pseudo-checkbox" }, ngImport: i0, template: ` <i
    [class.bhi-checkbox-empty]="state === 'unchecked' && shape === 'box'"
    [class.bhi-checkbox-filled]="state === 'checked' && shape === 'box'"
    [class.bhi-checkbox-indeterminate]="state === 'indeterminate' && shape === 'box'"
    [class.bhi-circle-o]="state === 'unchecked' && shape === 'circle'"
    [class.bhi-check-circle-filled]="state === 'checked' && shape === 'circle'"
    [class.bhi-circle]="state === 'indeterminate' && shape === 'circle'"
    [class.bhi-box-empty]="state === 'unchecked' && shape === 'line'"
    [class.bhi-check]="state === 'checked' && shape === 'line'"
    [class.bhi-box-minus-o]="state === 'indeterminate' && shape === 'line'"
  ></i>`, isInline: true, styles: [".novo-pseudo-checkbox{width:16px;height:16px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:color .3s ease-in-out}.novo-pseudo-checkbox.novo-pseudo-checkbox-checked,.novo-pseudo-checkbox.novo-pseudo-checkbox-indeterminate{color:#4a89dc;-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}.novo-pseudo-checkbox i{font-size:1.4rem;line-height:1rem}.novo-pseudo-checkbox-disabled{cursor:default}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPseudoCheckbox, decorators: [{
            type: Component,
            args: [{ encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, selector: 'novo-pseudo-checkbox', template: ` <i
    [class.bhi-checkbox-empty]="state === 'unchecked' && shape === 'box'"
    [class.bhi-checkbox-filled]="state === 'checked' && shape === 'box'"
    [class.bhi-checkbox-indeterminate]="state === 'indeterminate' && shape === 'box'"
    [class.bhi-circle-o]="state === 'unchecked' && shape === 'circle'"
    [class.bhi-check-circle-filled]="state === 'checked' && shape === 'circle'"
    [class.bhi-circle]="state === 'indeterminate' && shape === 'circle'"
    [class.bhi-box-empty]="state === 'unchecked' && shape === 'line'"
    [class.bhi-check]="state === 'checked' && shape === 'line'"
    [class.bhi-box-minus-o]="state === 'indeterminate' && shape === 'line'"
  ></i>`, host: {
                        class: 'novo-pseudo-checkbox',
                        '[class.novo-pseudo-checkbox-indeterminate]': 'state === "indeterminate"',
                        '[class.novo-pseudo-checkbox-checked]': 'state === "checked"',
                        '[class.novo-pseudo-checkbox-disabled]': 'disabled',
                        '[class._novo-animation-noopable]': '_animationMode === "NoopAnimations"',
                    }, styles: [".novo-pseudo-checkbox{width:16px;height:16px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:color .3s ease-in-out}.novo-pseudo-checkbox.novo-pseudo-checkbox-checked,.novo-pseudo-checkbox.novo-pseudo-checkbox-indeterminate{color:#4a89dc;-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}.novo-pseudo-checkbox i{font-size:1.4rem;line-height:1rem}.novo-pseudo-checkbox-disabled{cursor:default}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ANIMATION_MODULE_TYPE]
                }] }]; }, propDecorators: { state: [{
                type: Input
            }], shape: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });

// import {NovoCommonModule} from '../common-behaviors/common-module';
class NovoPseudoCheckboxModule {
}
NovoPseudoCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPseudoCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoPseudoCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPseudoCheckboxModule, declarations: [NovoPseudoCheckbox], exports: [NovoPseudoCheckbox] });
NovoPseudoCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPseudoCheckboxModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPseudoCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    exports: [NovoPseudoCheckbox],
                    declarations: [NovoPseudoCheckbox],
                }]
        }] });

/** Mixin to augment a directive with a `disabled` property. */
function mixinDisabled(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this._disabled = false;
        }
        get disabled() {
            return this._disabled;
        }
        set disabled(value) {
            this._disabled = coerceBooleanProperty(value);
        }
    };
}

/**
 * Injection token used to provide the parent component to options.
 */
const NOVO_OPTION_PARENT_COMPONENT = new InjectionToken('NOVO_OPTION_PARENT_COMPONENT');

// Notes on the accessibility pattern used for `novo-optgroup`.
// The option group has two different "modes": regular and novoInert. The regular mode uses the
// recommended a11y pattern which has `role="group"` on the group element with `aria-labelledby`
// pointing to the label. This works for `novo-select`, but it seems to hit a bug for autocomplete
// under VoiceOver where the group doesn't get read out at all. The bug appears to be that if
// there's __any__ a11y-related attribute on the group (e.g. `role` or `aria-labelledby`),
// VoiceOver on Safari won't read it out.
// We've introduced the `novoInert` mode as a workaround. Under this mode, all a11y attributes are
// removed from the group, and we get the screen reader to read out the group label by mirroring it
// inside an invisible element in the option. This is sub-optimal, because the screen reader will
// repeat the group label on each navigation, whereas the default pattern only reads the group when
// the user enters a new group. The following alternate approaches were considered:
// 1. Reading out the group label using the `LiveAnnouncer` solves the problem, but we can't control
//    when the text will be read out so sometimes it comes in too late or never if the user
//    navigates quickly.
// 2. `<novo-option aria-describedby="groupLabel"` - This works on Safari, but VoiceOver in Chrome
//    won't read out the description at all.
// 3. `<novo-option aria-labelledby="optionLabel groupLabel"` - This works on Chrome, but Safari
//     doesn't read out the text at all. Furthermore, on
// Boilerplate for applying mixins to NovoOptgroup.
class NovoOptgroupBase {
    constructor() {
        /** Unique id for the underlying label. */
        this._labelId = `novo-optgroup-label-${_uniqueOptgroupIdCounter++}`;
    }
}
NovoOptgroupBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptgroupBase, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoOptgroupBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoOptgroupBase, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptgroupBase, decorators: [{
            type: Directive
        }] });
const NovoOptgroupMixinBase = mixinDisabled(NovoOptgroupBase);
// Counter for unique group ids.
let _uniqueOptgroupIdCounter = 0;
/**
 * Injection token that can be used to reference instances of `NovoOptgroup`. It serves as
 * alternative token to the actual `NovoOptgroup` class which could cause unnecessary
 * retention of the class and its component metadata.
 */
const NOVO_OPTGROUP = new InjectionToken('NovoOptgroup');
/**
 * Component that is used to group instances of `novo-option`.
 */
class NovoOptgroup extends NovoOptgroupMixinBase {
    constructor(parent) {
        super();
        this._novoInert = parent?.inertGroups ?? false;
    }
}
NovoOptgroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptgroup, deps: [{ token: NOVO_OPTION_PARENT_COMPONENT, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoOptgroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoOptgroup, selector: "novo-optgroup", inputs: { disabled: "disabled", label: "label" }, host: { properties: { "attr.role": "_novoInert ? null : \"group\"", "attr.aria-disabled": "_novoInert ? null : disabled.toString()", "attr.aria-labelledby": "_novoInert ? null : _labelId", "class.novo-optgroup-disabled": "disabled" }, classAttribute: "novo-optgroup" }, providers: [{ provide: NOVO_OPTGROUP, useExisting: NovoOptgroup }], exportAs: ["novoOptgroup"], usesInheritance: true, ngImport: i0, template: "<span *ngIf=\"label\" class=\"novo-optgroup-label\" aria-hidden=\"true\" [id]=\"_labelId\">{{ label }}</span>\n<ng-content select=\"novo-option, ng-container, novo-divider, cdk-virtual-scroll-viewport\"></ng-content>", styles: [".novo-optgroup-label{font-weight:500;word-break:word-break;overflow-wrap:break-word;line-height:1.375;color:var(--text-muted);font-size:var(--font-size-label);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;color:#9e9e9e;cursor:default;flex:1;padding:5px 10px;display:block}.novo-optgroup-label.text-capitalize{text-transform:capitalize}.novo-optgroup-label.text-uppercase{text-transform:uppercase}.novo-optgroup-label.text-nowrap{white-space:nowrap}.novo-optgroup-label.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-optgroup-label.text-size-default{font-size:inherit}.novo-optgroup-label.text-size-body{font-size:1.3rem}.novo-optgroup-label.text-size-xs{font-size:1rem}.novo-optgroup-label.text-size-sm{font-size:1.2rem}.novo-optgroup-label.text-size-md{font-size:1.3rem}.novo-optgroup-label.text-size-lg{font-size:1.6rem}.novo-optgroup-label.text-size-xl{font-size:2rem}.novo-optgroup-label.text-size-2xl{font-size:2.6rem}.novo-optgroup-label.text-size-3xl{font-size:3.2rem}.novo-optgroup-label.text-size-smaller{font-size:.8em}.novo-optgroup-label.text-size-larger{font-size:1.2em}.novo-optgroup-label.text-color-black{color:#000}.novo-optgroup-label.text-color-white{color:#fff}.novo-optgroup-label.text-color-gray,.novo-optgroup-label.text-color-grey{color:#9e9e9e}.novo-optgroup-label.text-color-offWhite,.novo-optgroup-label.text-color-bright{color:#f7f7f7}.novo-optgroup-label.text-color-light{color:#dbdbdb}.novo-optgroup-label.text-color-neutral{color:#4f5361}.novo-optgroup-label.text-color-dark{color:#3d464d}.novo-optgroup-label.text-color-orange{color:#ff6900}.novo-optgroup-label.text-color-navigation{color:#202945}.novo-optgroup-label.text-color-skyBlue{color:#009bdf}.novo-optgroup-label.text-color-steel{color:#5b6770}.novo-optgroup-label.text-color-metal{color:#637893}.novo-optgroup-label.text-color-sand{color:#f4f4f4}.novo-optgroup-label.text-color-silver{color:#e2e2e2}.novo-optgroup-label.text-color-stone{color:#bebebe}.novo-optgroup-label.text-color-ash{color:#a0a0a0}.novo-optgroup-label.text-color-slate{color:#707070}.novo-optgroup-label.text-color-onyx{color:#526980}.novo-optgroup-label.text-color-charcoal{color:#282828}.novo-optgroup-label.text-color-moonlight{color:#1a242f}.novo-optgroup-label.text-color-midnight{color:#202945}.novo-optgroup-label.text-color-darkness{color:#161f27}.novo-optgroup-label.text-color-navy{color:#0d2d42}.novo-optgroup-label.text-color-aqua{color:#3bafda}.novo-optgroup-label.text-color-ocean{color:#4a89dc}.novo-optgroup-label.text-color-mint{color:#37bc9b}.novo-optgroup-label.text-color-grass{color:#8cc152}.novo-optgroup-label.text-color-sunflower{color:#f6b042}.novo-optgroup-label.text-color-bittersweet{color:#eb6845}.novo-optgroup-label.text-color-grapefruit{color:#da4453}.novo-optgroup-label.text-color-carnation{color:#d770ad}.novo-optgroup-label.text-color-lavender{color:#967adc}.novo-optgroup-label.text-color-mountain{color:#9678b6}.novo-optgroup-label.text-color-info,.novo-optgroup-label.text-color-positive{color:#4a89dc}.novo-optgroup-label.text-color-success{color:#8cc152}.novo-optgroup-label.text-color-negative,.novo-optgroup-label.text-color-danger,.novo-optgroup-label.text-color-error{color:#da4453}.novo-optgroup-label.text-color-warning{color:#f6b042}.novo-optgroup-label.text-color-empty{color:#cccdcc}.novo-optgroup-label.text-color-disabled{color:#bebebe}.novo-optgroup-label.text-color-background{color:#f7f7f7}.novo-optgroup-label.text-color-backgroundDark{color:#e2e2e2}.novo-optgroup-label.text-color-presentation{color:#5b6770}.novo-optgroup-label.text-color-bullhorn{color:#ff6900}.novo-optgroup-label.text-color-pulse{color:#3bafda}.novo-optgroup-label.text-color-company{color:#39d}.novo-optgroup-label.text-color-candidate{color:#4b7}.novo-optgroup-label.text-color-lead{color:#a69}.novo-optgroup-label.text-color-contact,.novo-optgroup-label.text-color-clientcontact{color:#fa4}.novo-optgroup-label.text-color-opportunity{color:#625}.novo-optgroup-label.text-color-job,.novo-optgroup-label.text-color-joborder{color:#b56}.novo-optgroup-label.text-color-submission{color:#a9adbb}.novo-optgroup-label.text-color-sendout{color:#747884}.novo-optgroup-label.text-color-placement{color:#0b344f}.novo-optgroup-label.text-color-note{color:#747884}.novo-optgroup-label.text-color-contract{color:#454ea0}.novo-optgroup-label.text-color-jobCode,.novo-optgroup-label.text-color-earnCode,.novo-optgroup-label.text-color-invoiceStatement,.novo-optgroup-label.text-color-billableCharge,.novo-optgroup-label.text-color-payableCharge,.novo-optgroup-label.text-color-user,.novo-optgroup-label.text-color-corporateUser,.novo-optgroup-label.text-color-distributionList,.novo-optgroup-label.text-color-credential,.novo-optgroup-label.text-color-person{color:#696d79}.novo-optgroup-label.margin-before{margin-top:.4rem}.novo-optgroup-label.margin-after{margin-bottom:.8rem}.novo-optgroup-label.text-length-small{max-width:40ch}.novo-optgroup-label.text-length-medium{max-width:55ch}.novo-optgroup-label.text-length-large{max-width:70ch}.novo-optgroup-label.text-weight-hairline{font-weight:100}.novo-optgroup-label.text-weight-thin{font-weight:200}.novo-optgroup-label.text-weight-light{font-weight:300}.novo-optgroup-label.text-weight-normal{font-weight:400}.novo-optgroup-label.text-weight-medium{font-weight:500}.novo-optgroup-label.text-weight-semibold{font-weight:600}.novo-optgroup-label.text-weight-bold{font-weight:700}.novo-optgroup-label.text-weight-extrabold{font-weight:800}.novo-optgroup-label.text-weight-heavy{font-weight:900}.novo-optgroup-label.text-weight-lighter{font-weight:lighter}.novo-optgroup-label.text-weight-bolder{font-weight:bolder}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptgroup, decorators: [{
            type: Component,
            args: [{ selector: 'novo-optgroup', exportAs: 'novoOptgroup', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled', 'label'], host: {
                        class: 'novo-optgroup',
                        '[attr.role]': '_novoInert ? null : "group"',
                        '[attr.aria-disabled]': '_novoInert ? null : disabled.toString()',
                        '[attr.aria-labelledby]': '_novoInert ? null : _labelId',
                        '[class.novo-optgroup-disabled]': 'disabled',
                    }, providers: [{ provide: NOVO_OPTGROUP, useExisting: NovoOptgroup }], template: "<span *ngIf=\"label\" class=\"novo-optgroup-label\" aria-hidden=\"true\" [id]=\"_labelId\">{{ label }}</span>\n<ng-content select=\"novo-option, ng-container, novo-divider, cdk-virtual-scroll-viewport\"></ng-content>", styles: [".novo-optgroup-label{font-weight:500;word-break:word-break;overflow-wrap:break-word;line-height:1.375;color:var(--text-muted);font-size:var(--font-size-label);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;color:#9e9e9e;cursor:default;flex:1;padding:5px 10px;display:block}.novo-optgroup-label.text-capitalize{text-transform:capitalize}.novo-optgroup-label.text-uppercase{text-transform:uppercase}.novo-optgroup-label.text-nowrap{white-space:nowrap}.novo-optgroup-label.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-optgroup-label.text-size-default{font-size:inherit}.novo-optgroup-label.text-size-body{font-size:1.3rem}.novo-optgroup-label.text-size-xs{font-size:1rem}.novo-optgroup-label.text-size-sm{font-size:1.2rem}.novo-optgroup-label.text-size-md{font-size:1.3rem}.novo-optgroup-label.text-size-lg{font-size:1.6rem}.novo-optgroup-label.text-size-xl{font-size:2rem}.novo-optgroup-label.text-size-2xl{font-size:2.6rem}.novo-optgroup-label.text-size-3xl{font-size:3.2rem}.novo-optgroup-label.text-size-smaller{font-size:.8em}.novo-optgroup-label.text-size-larger{font-size:1.2em}.novo-optgroup-label.text-color-black{color:#000}.novo-optgroup-label.text-color-white{color:#fff}.novo-optgroup-label.text-color-gray,.novo-optgroup-label.text-color-grey{color:#9e9e9e}.novo-optgroup-label.text-color-offWhite,.novo-optgroup-label.text-color-bright{color:#f7f7f7}.novo-optgroup-label.text-color-light{color:#dbdbdb}.novo-optgroup-label.text-color-neutral{color:#4f5361}.novo-optgroup-label.text-color-dark{color:#3d464d}.novo-optgroup-label.text-color-orange{color:#ff6900}.novo-optgroup-label.text-color-navigation{color:#202945}.novo-optgroup-label.text-color-skyBlue{color:#009bdf}.novo-optgroup-label.text-color-steel{color:#5b6770}.novo-optgroup-label.text-color-metal{color:#637893}.novo-optgroup-label.text-color-sand{color:#f4f4f4}.novo-optgroup-label.text-color-silver{color:#e2e2e2}.novo-optgroup-label.text-color-stone{color:#bebebe}.novo-optgroup-label.text-color-ash{color:#a0a0a0}.novo-optgroup-label.text-color-slate{color:#707070}.novo-optgroup-label.text-color-onyx{color:#526980}.novo-optgroup-label.text-color-charcoal{color:#282828}.novo-optgroup-label.text-color-moonlight{color:#1a242f}.novo-optgroup-label.text-color-midnight{color:#202945}.novo-optgroup-label.text-color-darkness{color:#161f27}.novo-optgroup-label.text-color-navy{color:#0d2d42}.novo-optgroup-label.text-color-aqua{color:#3bafda}.novo-optgroup-label.text-color-ocean{color:#4a89dc}.novo-optgroup-label.text-color-mint{color:#37bc9b}.novo-optgroup-label.text-color-grass{color:#8cc152}.novo-optgroup-label.text-color-sunflower{color:#f6b042}.novo-optgroup-label.text-color-bittersweet{color:#eb6845}.novo-optgroup-label.text-color-grapefruit{color:#da4453}.novo-optgroup-label.text-color-carnation{color:#d770ad}.novo-optgroup-label.text-color-lavender{color:#967adc}.novo-optgroup-label.text-color-mountain{color:#9678b6}.novo-optgroup-label.text-color-info,.novo-optgroup-label.text-color-positive{color:#4a89dc}.novo-optgroup-label.text-color-success{color:#8cc152}.novo-optgroup-label.text-color-negative,.novo-optgroup-label.text-color-danger,.novo-optgroup-label.text-color-error{color:#da4453}.novo-optgroup-label.text-color-warning{color:#f6b042}.novo-optgroup-label.text-color-empty{color:#cccdcc}.novo-optgroup-label.text-color-disabled{color:#bebebe}.novo-optgroup-label.text-color-background{color:#f7f7f7}.novo-optgroup-label.text-color-backgroundDark{color:#e2e2e2}.novo-optgroup-label.text-color-presentation{color:#5b6770}.novo-optgroup-label.text-color-bullhorn{color:#ff6900}.novo-optgroup-label.text-color-pulse{color:#3bafda}.novo-optgroup-label.text-color-company{color:#39d}.novo-optgroup-label.text-color-candidate{color:#4b7}.novo-optgroup-label.text-color-lead{color:#a69}.novo-optgroup-label.text-color-contact,.novo-optgroup-label.text-color-clientcontact{color:#fa4}.novo-optgroup-label.text-color-opportunity{color:#625}.novo-optgroup-label.text-color-job,.novo-optgroup-label.text-color-joborder{color:#b56}.novo-optgroup-label.text-color-submission{color:#a9adbb}.novo-optgroup-label.text-color-sendout{color:#747884}.novo-optgroup-label.text-color-placement{color:#0b344f}.novo-optgroup-label.text-color-note{color:#747884}.novo-optgroup-label.text-color-contract{color:#454ea0}.novo-optgroup-label.text-color-jobCode,.novo-optgroup-label.text-color-earnCode,.novo-optgroup-label.text-color-invoiceStatement,.novo-optgroup-label.text-color-billableCharge,.novo-optgroup-label.text-color-payableCharge,.novo-optgroup-label.text-color-user,.novo-optgroup-label.text-color-corporateUser,.novo-optgroup-label.text-color-distributionList,.novo-optgroup-label.text-color-credential,.novo-optgroup-label.text-color-person{color:#696d79}.novo-optgroup-label.margin-before{margin-top:.4rem}.novo-optgroup-label.margin-after{margin-bottom:.8rem}.novo-optgroup-label.text-length-small{max-width:40ch}.novo-optgroup-label.text-length-medium{max-width:55ch}.novo-optgroup-label.text-length-large{max-width:70ch}.novo-optgroup-label.text-weight-hairline{font-weight:100}.novo-optgroup-label.text-weight-thin{font-weight:200}.novo-optgroup-label.text-weight-light{font-weight:300}.novo-optgroup-label.text-weight-normal{font-weight:400}.novo-optgroup-label.text-weight-medium{font-weight:500}.novo-optgroup-label.text-weight-semibold{font-weight:600}.novo-optgroup-label.text-weight-bold{font-weight:700}.novo-optgroup-label.text-weight-extrabold{font-weight:800}.novo-optgroup-label.text-weight-heavy{font-weight:900}.novo-optgroup-label.text-weight-lighter{font-weight:lighter}.novo-optgroup-label.text-weight-bolder{font-weight:bolder}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_OPTION_PARENT_COMPONENT]
                }, {
                    type: Optional
                }] }]; } });

/**
 * Option IDs need to be unique across components, so this counter exists outside of
 * the component definition.
 */
let _uniqueIdCounter = 0;
/** Event object emitted by NovoOption when selected or deselected. */
class NovoOptionSelectionChange {
    constructor(
    /** Reference to the option that emitted the event. */
    source, 
    /** Whether the change in the option's value was a result of a user action. */
    isUserInput = false) {
        this.source = source;
        this.isUserInput = isUserInput;
    }
}
class NovoOptionBase {
    constructor(_element, _changeDetectorRef, _parent, group) {
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parent = _parent;
        this.group = group;
        this._selected = false;
        this._active = false;
        this._disabled = false;
        this._mostRecentViewValue = '';
        /** TODO: deprecate maybe, check support for table headers */
        this.keepOpen = false;
        this.novoInert = false;
        /** The unique ID of the option. */
        this.id = `novo-option-${_uniqueIdCounter++}`;
        /** Event emitted when the option is selected or deselected. */
        // tslint:disable-next-line:no-output-on-prefix
        this.onSelectionChange = new EventEmitter();
        /** Emits when the state of the option changes and any parents have to be notified. */
        this._stateChanges = new Subject();
        // (click) is overridden when defined by user.
        this._clickCapture = fromEvent(this._element.nativeElement, 'click', { capture: true }).subscribe((evt) => {
            this._handleDisabledClick(evt);
        });
        this._clickPassive = fromEvent(this._element.nativeElement, 'click').subscribe((evt) => {
            setTimeout(() => this._handlePassiveClick(evt));
        });
    }
    /** If there is no parent then nothing is managing the selection. */
    get selectable() {
        return this._parent;
    }
    /** Whether the wrapping component is in multiple selection mode. */
    get multiple() {
        return this._parent && this._parent.multiple;
    }
    /** Whether the option is disabled. */
    get disabled() {
        return (this.group && this.group.disabled) || this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
    }
    /**
     * Whether or not the option is currently active and ready to be selected.
     * An active option displays styles as if it is focused, but the
     * focus is actually retained somewhere else. This comes in handy
     * for components like autocomplete where focus must remain on the input.
     */
    get active() {
        return this._active;
    }
    /**
     * The displayed value of the option. It is necessary to show the selected option in the
     * select's trigger.
     */
    get viewValue() {
        return (this._getHostElement().textContent || '').trim();
    }
    /** Selects the option. */
    select() {
        if (!this._selected) {
            this._selected = true;
            this._changeDetectorRef.markForCheck();
            // this._emitSelectionChangeEvent();
        }
    }
    /** Deselects the option. */
    deselect() {
        if (this._selected) {
            this._selected = false;
            this._changeDetectorRef.markForCheck();
            // this._emitSelectionChangeEvent();
        }
    }
    /** Sets focus onto this option. */
    focus(_origin, options) {
        // Note that we aren't using `_origin`, but we need to keep it because some internal consumers
        // use `NovoOption` in a `FocusKeyManager` and we need it to match `FocusableOption`.
        const element = this._getHostElement();
        if (typeof element.focus === 'function') {
            element.focus(options);
        }
    }
    /**
     * This method sets display styles on the option to make it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setActiveStyles() {
        if (!this._active) {
            this._active = true;
            this._changeDetectorRef.markForCheck();
        }
    }
    /**
     * This method removes display styles on the option that made it appear
     * active. This is used by the ActiveDescendantKeyManager so key
     * events will display the proper options as active on arrow key events.
     */
    setInactiveStyles() {
        if (this._active) {
            this._active = false;
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Gets the label to be used when determining whether the option should be focused. */
    getLabel() {
        return this.viewValue;
    }
    _handleDisabledClick(event) {
        if (this.disabled) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    }
    _handlePassiveClick(event) {
        if (!this.novoInert) {
            this._selectViaInteraction();
        }
    }
    /** Ensures the option is selected when activated from the keyboard. */
    _handleKeydown(event) {
        if (event.target instanceof HTMLInputElement && event.key === "Enter" /* Enter */) {
            this._emitSelectionChangeEvent(!this.keepOpen);
        }
        else if (!(event.target instanceof HTMLInputElement) &&
            (event.key === "Enter" /* Enter */ || event.key === " " /* Space */) &&
            !hasModifierKey(event)) {
            this._selectViaInteraction();
            // Prevent the page from scrolling down and form submits.
            event.preventDefault();
        }
    }
    /**
     * `Selects the option while indicating the selection came from the user. Used to
     * determine if the select's view -> model callback should be invoked.`
     */
    _selectViaInteraction() {
        if (!this.disabled) {
            this._selected = this.multiple ? !this._selected : true;
            this._changeDetectorRef.markForCheck();
            this._emitSelectionChangeEvent(!this.keepOpen);
        }
    }
    /**
     * Force a click event
     */
    _clickViaInteraction() {
        if (!this.disabled) {
            this._element.nativeElement.click();
        }
    }
    /**
     * Gets the `aria-selected` value for the option. We explicitly omit the `aria-selected`
     * attribute from single-selection, unselected options. Including the `aria-selected="false"`
     * attributes adds a significant amount of noise to screen-reader users without providing useful
     * information.
     */
    _getAriaSelected() {
        return this.selected || (this.multiple ? false : null);
    }
    /** Returns the correct tabindex for the option depending on disabled state. */
    _getTabIndex() {
        return this.disabled ? '-1' : '0';
    }
    /** Gets the host DOM element. */
    _getHostElement() {
        return this._element.nativeElement;
    }
    ngAfterViewChecked() {
        // Since parent components could be using the option's label to display the selected values
        // (e.g. `novo-select`) and they don't have a way of knowing if the option's label has changed
        // we have to check for changes in the DOM ourselves and dispatch an event. These checks are
        // relatively cheap, however we still limit them only to selected options in order to avoid
        // hitting the DOM too often.
        if (this._selected) {
            const viewValue = this.viewValue;
            if (viewValue !== this._mostRecentViewValue) {
                this._mostRecentViewValue = viewValue;
                this._stateChanges.next();
            }
        }
    }
    ngOnDestroy() {
        this._stateChanges.complete();
        this._clickCapture.unsubscribe();
        this._clickPassive.unsubscribe();
    }
    /** Emits the selection change event. */
    _emitSelectionChangeEvent(isUserInput = false) {
        this.onSelectionChange.emit(new NovoOptionSelectionChange(this, isUserInput));
    }
}
NovoOptionBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptionBase, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: NOVO_OPTION_PARENT_COMPONENT, optional: true }, { token: NOVO_OPTGROUP, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
NovoOptionBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoOptionBase, inputs: { keepOpen: "keepOpen", novoInert: "novoInert", value: "value", id: "id", disabled: "disabled", selected: "selected" }, outputs: { onSelectionChange: "onSelectionChange" }, ngImport: i0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoOptionBase.prototype, "keepOpen", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoOptionBase.prototype, "novoInert", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptionBase, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_OPTION_PARENT_COMPONENT]
                }] }, { type: NovoOptgroupBase, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_OPTGROUP]
                }] }]; }, propDecorators: { keepOpen: [{
                type: Input
            }], novoInert: [{
                type: Input
            }], value: [{
                type: Input
            }], id: [{
                type: Input
            }], disabled: [{
                type: Input
            }], selected: [{
                type: Input
            }], onSelectionChange: [{
                type: Output
            }] } });
/**
 * Single option inside of a `<novo-select>` element.
 */
class NovoOption extends NovoOptionBase {
    constructor(element, changeDetectorRef, parent, group) {
        super(element, changeDetectorRef, parent, group);
    }
}
NovoOption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOption, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: NOVO_OPTION_PARENT_COMPONENT, optional: true }, { token: NOVO_OPTGROUP, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoOption.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoOption, selector: "novo-option", inputs: { selected: "selected", keepOpen: "keepOpen", novoInert: "novoInert", value: "value", disabled: "disabled" }, host: { attributes: { "role": "option" }, listeners: { "keydown": "_handleKeydown($event)" }, properties: { "id": "id", "attr.tabindex": "_getTabIndex()", "attr.aria-selected": "_getAriaSelected()", "attr.aria-disabled": "disabled.toString()", "class.novo-active": "active", "class.novo-selected": "selectable && selected", "class.novo-option-multiple": "multiple", "class.novo-option-disabled": "disabled", "class.novo-option-inert": "novoInert" }, classAttribute: "novo-option novo-focus-indicator" }, exportAs: ["novoOption"], usesInheritance: true, ngImport: i0, template: "<novo-pseudo-checkbox *ngIf=\"selectable && multiple\" class=\"novo-option-pseudo-checkbox\"\n  [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></novo-pseudo-checkbox>\n\n<span class=\"novo-option-text\">\n  <ng-content></ng-content>\n</span>\n\n<novo-pseudo-checkbox *ngIf=\"selectable && !multiple && selected\" class=\"novo-option-pseudo-checkbox\" state=\"checked\"\n  shape=\"line\"\n  [disabled]=\"disabled\"></novo-pseudo-checkbox>\n\n<ng-content select=\"[novoSuffix]\"></ng-content>\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n<span class=\"cdk-visually-hidden\" *ngIf=\"group && group._novoInert\">({{ group.label }})</span>", styles: [".novo-option{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;margin:0;padding:1rem 1rem 1rem 1.6rem;gap:1rem;flex:1;-webkit-tap-highlight-color:transparent}.novo-option.text-capitalize{text-transform:capitalize}.novo-option.text-uppercase{text-transform:uppercase}.novo-option.text-nowrap{white-space:nowrap}.novo-option.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-option.text-size-default{font-size:inherit}.novo-option.text-size-body{font-size:1.3rem}.novo-option.text-size-xs{font-size:1rem}.novo-option.text-size-sm{font-size:1.2rem}.novo-option.text-size-md{font-size:1.3rem}.novo-option.text-size-lg{font-size:1.6rem}.novo-option.text-size-xl{font-size:2rem}.novo-option.text-size-2xl{font-size:2.6rem}.novo-option.text-size-3xl{font-size:3.2rem}.novo-option.text-size-smaller{font-size:.8em}.novo-option.text-size-larger{font-size:1.2em}.novo-option.text-color-black{color:#000}.novo-option.text-color-white{color:#fff}.novo-option.text-color-gray,.novo-option.text-color-grey{color:#9e9e9e}.novo-option.text-color-offWhite,.novo-option.text-color-bright{color:#f7f7f7}.novo-option.text-color-light{color:#dbdbdb}.novo-option.text-color-neutral{color:#4f5361}.novo-option.text-color-dark{color:#3d464d}.novo-option.text-color-orange{color:#ff6900}.novo-option.text-color-navigation{color:#202945}.novo-option.text-color-skyBlue{color:#009bdf}.novo-option.text-color-steel{color:#5b6770}.novo-option.text-color-metal{color:#637893}.novo-option.text-color-sand{color:#f4f4f4}.novo-option.text-color-silver{color:#e2e2e2}.novo-option.text-color-stone{color:#bebebe}.novo-option.text-color-ash{color:#a0a0a0}.novo-option.text-color-slate{color:#707070}.novo-option.text-color-onyx{color:#526980}.novo-option.text-color-charcoal{color:#282828}.novo-option.text-color-moonlight{color:#1a242f}.novo-option.text-color-midnight{color:#202945}.novo-option.text-color-darkness{color:#161f27}.novo-option.text-color-navy{color:#0d2d42}.novo-option.text-color-aqua{color:#3bafda}.novo-option.text-color-ocean{color:#4a89dc}.novo-option.text-color-mint{color:#37bc9b}.novo-option.text-color-grass{color:#8cc152}.novo-option.text-color-sunflower{color:#f6b042}.novo-option.text-color-bittersweet{color:#eb6845}.novo-option.text-color-grapefruit{color:#da4453}.novo-option.text-color-carnation{color:#d770ad}.novo-option.text-color-lavender{color:#967adc}.novo-option.text-color-mountain{color:#9678b6}.novo-option.text-color-info,.novo-option.text-color-positive{color:#4a89dc}.novo-option.text-color-success{color:#8cc152}.novo-option.text-color-negative,.novo-option.text-color-danger,.novo-option.text-color-error{color:#da4453}.novo-option.text-color-warning{color:#f6b042}.novo-option.text-color-empty{color:#cccdcc}.novo-option.text-color-disabled{color:#bebebe}.novo-option.text-color-background{color:#f7f7f7}.novo-option.text-color-backgroundDark{color:#e2e2e2}.novo-option.text-color-presentation{color:#5b6770}.novo-option.text-color-bullhorn{color:#ff6900}.novo-option.text-color-pulse{color:#3bafda}.novo-option.text-color-company{color:#39d}.novo-option.text-color-candidate{color:#4b7}.novo-option.text-color-lead{color:#a69}.novo-option.text-color-contact,.novo-option.text-color-clientcontact{color:#fa4}.novo-option.text-color-opportunity{color:#625}.novo-option.text-color-job,.novo-option.text-color-joborder{color:#b56}.novo-option.text-color-submission{color:#a9adbb}.novo-option.text-color-sendout{color:#747884}.novo-option.text-color-placement{color:#0b344f}.novo-option.text-color-note{color:#747884}.novo-option.text-color-contract{color:#454ea0}.novo-option.text-color-jobCode,.novo-option.text-color-earnCode,.novo-option.text-color-invoiceStatement,.novo-option.text-color-billableCharge,.novo-option.text-color-payableCharge,.novo-option.text-color-user,.novo-option.text-color-corporateUser,.novo-option.text-color-distributionList,.novo-option.text-color-credential,.novo-option.text-color-person{color:#696d79}.novo-option.margin-before{margin-top:.4rem}.novo-option.margin-after{margin-bottom:.8rem}.novo-option.text-length-small{max-width:40ch}.novo-option.text-length-medium{max-width:55ch}.novo-option.text-length-large{max-width:70ch}.novo-option.text-weight-hairline{font-weight:100}.novo-option.text-weight-thin{font-weight:200}.novo-option.text-weight-light{font-weight:300}.novo-option.text-weight-normal{font-weight:400}.novo-option.text-weight-medium{font-weight:500}.novo-option.text-weight-semibold{font-weight:600}.novo-option.text-weight-bold{font-weight:700}.novo-option.text-weight-extrabold{font-weight:800}.novo-option.text-weight-heavy{font-weight:900}.novo-option.text-weight-lighter{font-weight:lighter}.novo-option.text-weight-bolder{font-weight:bolder}.novo-option:hover:not(.novo-option-inert){background:rgba(74,137,220,.1);background:var(--background-main, rgba(74, 137, 220, .1))}.novo-option:active:not(.novo-option-inert),.novo-option.novo-active:not(.novo-option-inert){background:rgba(74,137,220,.3)}.novo-option.novo-selected{color:#4a89dc}.novo-option.disabled,.novo-option[aria-disabled=true]{cursor:not-allowed;color:#bebebe}.novo-option.disabled:hover,.novo-option[aria-disabled=true]:hover{background:rgba(218,68,83,.1)}.novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:1rem}[dir=rtl] .novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:.5rem;padding-right:1rem}.novo-option.novo-accent-black{border-left:4px solid #000000}.novo-option.novo-fill-black:not(.novo-option-inert){color:#fff;background:#000000}.novo-option.novo-fill-black:not(.novo-option-inert):hover,.novo-option.novo-fill-black:not(.novo-option-inert):focus{background:#333333}.novo-option.novo-fill-black:not(.novo-option-inert):active{background:#000000}.novo-option.novo-accent-white{border-left:4px solid #ffffff}.novo-option.novo-fill-white:not(.novo-option-inert){color:#3d464d;background:#ffffff}.novo-option.novo-fill-white:not(.novo-option-inert):hover,.novo-option.novo-fill-white:not(.novo-option-inert):focus{background:#ffffff}.novo-option.novo-fill-white:not(.novo-option-inert):active{background:#cccccc}.novo-option.novo-accent-gray{border-left:4px solid #9e9e9e}.novo-option.novo-fill-gray:not(.novo-option-inert){color:#3d464d;background:#9e9e9e}.novo-option.novo-fill-gray:not(.novo-option-inert):hover,.novo-option.novo-fill-gray:not(.novo-option-inert):focus{background:#b1b1b1}.novo-option.novo-fill-gray:not(.novo-option-inert):active{background:#7e7e7e}.novo-option.novo-accent-grey{border-left:4px solid #9e9e9e}.novo-option.novo-fill-grey:not(.novo-option-inert){color:#3d464d;background:#9e9e9e}.novo-option.novo-fill-grey:not(.novo-option-inert):hover,.novo-option.novo-fill-grey:not(.novo-option-inert):focus{background:#b1b1b1}.novo-option.novo-fill-grey:not(.novo-option-inert):active{background:#7e7e7e}.novo-option.novo-accent-offWhite{border-left:4px solid #f7f7f7}.novo-option.novo-fill-offWhite:not(.novo-option-inert){color:#3d464d;background:#f7f7f7}.novo-option.novo-fill-offWhite:not(.novo-option-inert):hover,.novo-option.novo-fill-offWhite:not(.novo-option-inert):focus{background:#f8f8f8}.novo-option.novo-fill-offWhite:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-bright{border-left:4px solid #f7f7f7}.novo-option.novo-fill-bright:not(.novo-option-inert){color:#3d464d;background:#f7f7f7}.novo-option.novo-fill-bright:not(.novo-option-inert):hover,.novo-option.novo-fill-bright:not(.novo-option-inert):focus{background:#f8f8f8}.novo-option.novo-fill-bright:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-light{border-left:4px solid #dbdbdb}.novo-option.novo-fill-light:not(.novo-option-inert){color:#3d464d;background:#dbdbdb}.novo-option.novo-fill-light:not(.novo-option-inert):hover,.novo-option.novo-fill-light:not(.novo-option-inert):focus{background:#e2e2e2}.novo-option.novo-fill-light:not(.novo-option-inert):active{background:#afafaf}.novo-option.novo-accent-neutral{border-left:4px solid #4f5361}.novo-option.novo-fill-neutral:not(.novo-option-inert){color:#fff;background:#4f5361}.novo-option.novo-fill-neutral:not(.novo-option-inert):hover,.novo-option.novo-fill-neutral:not(.novo-option-inert):focus{background:#727580}.novo-option.novo-fill-neutral:not(.novo-option-inert):active{background:#3f424d}.novo-option.novo-accent-dark{border-left:4px solid #3d464d}.novo-option.novo-fill-dark:not(.novo-option-inert){color:#fff;background:#3d464d}.novo-option.novo-fill-dark:not(.novo-option-inert):hover,.novo-option.novo-fill-dark:not(.novo-option-inert):focus{background:#636b70}.novo-option.novo-fill-dark:not(.novo-option-inert):active{background:#30383d}.novo-option.novo-accent-orange{border-left:4px solid #ff6900}.novo-option.novo-fill-orange:not(.novo-option-inert){color:#3d464d;background:#ff6900}.novo-option.novo-fill-orange:not(.novo-option-inert):hover,.novo-option.novo-fill-orange:not(.novo-option-inert):focus{background:#ff8733}.novo-option.novo-fill-orange:not(.novo-option-inert):active{background:#cc5400}.novo-option.novo-accent-navigation{border-left:4px solid #202945}.novo-option.novo-fill-navigation:not(.novo-option-inert){color:#fff;background:#202945}.novo-option.novo-fill-navigation:not(.novo-option-inert):hover,.novo-option.novo-fill-navigation:not(.novo-option-inert):focus{background:#4c536a}.novo-option.novo-fill-navigation:not(.novo-option-inert):active{background:#192037}.novo-option.novo-accent-skyBlue{border-left:4px solid #009bdf}.novo-option.novo-fill-skyBlue:not(.novo-option-inert){color:#fff;background:#009bdf}.novo-option.novo-fill-skyBlue:not(.novo-option-inert):hover,.novo-option.novo-fill-skyBlue:not(.novo-option-inert):focus{background:#33afe5}.novo-option.novo-fill-skyBlue:not(.novo-option-inert):active{background:#007cb2}.novo-option.novo-accent-steel{border-left:4px solid #5b6770}.novo-option.novo-fill-steel:not(.novo-option-inert){color:#fff;background:#5b6770}.novo-option.novo-fill-steel:not(.novo-option-inert):hover,.novo-option.novo-fill-steel:not(.novo-option-inert):focus{background:#7b858c}.novo-option.novo-fill-steel:not(.novo-option-inert):active{background:#485259}.novo-option.novo-accent-metal{border-left:4px solid #637893}.novo-option.novo-fill-metal:not(.novo-option-inert){color:#fff;background:#637893}.novo-option.novo-fill-metal:not(.novo-option-inert):hover,.novo-option.novo-fill-metal:not(.novo-option-inert):focus{background:#8293a8}.novo-option.novo-fill-metal:not(.novo-option-inert):active{background:#4f6075}.novo-option.novo-accent-sand{border-left:4px solid #f4f4f4}.novo-option.novo-fill-sand:not(.novo-option-inert){color:#3d464d;background:#f4f4f4}.novo-option.novo-fill-sand:not(.novo-option-inert):hover,.novo-option.novo-fill-sand:not(.novo-option-inert):focus{background:#f6f6f6}.novo-option.novo-fill-sand:not(.novo-option-inert):active{background:#c3c3c3}.novo-option.novo-accent-silver{border-left:4px solid #e2e2e2}.novo-option.novo-fill-silver:not(.novo-option-inert){color:#3d464d;background:#e2e2e2}.novo-option.novo-fill-silver:not(.novo-option-inert):hover,.novo-option.novo-fill-silver:not(.novo-option-inert):focus{background:#e7e7e7}.novo-option.novo-fill-silver:not(.novo-option-inert):active{background:#b4b4b4}.novo-option.novo-accent-stone{border-left:4px solid #bebebe}.novo-option.novo-fill-stone:not(.novo-option-inert){color:#3d464d;background:#bebebe}.novo-option.novo-fill-stone:not(.novo-option-inert):hover,.novo-option.novo-fill-stone:not(.novo-option-inert):focus{background:#cbcbcb}.novo-option.novo-fill-stone:not(.novo-option-inert):active{background:#989898}.novo-option.novo-accent-ash{border-left:4px solid #a0a0a0}.novo-option.novo-fill-ash:not(.novo-option-inert){color:#3d464d;background:#a0a0a0}.novo-option.novo-fill-ash:not(.novo-option-inert):hover,.novo-option.novo-fill-ash:not(.novo-option-inert):focus{background:#b3b3b3}.novo-option.novo-fill-ash:not(.novo-option-inert):active{background:#808080}.novo-option.novo-accent-slate{border-left:4px solid #707070}.novo-option.novo-fill-slate:not(.novo-option-inert){color:#fff;background:#707070}.novo-option.novo-fill-slate:not(.novo-option-inert):hover,.novo-option.novo-fill-slate:not(.novo-option-inert):focus{background:#8c8c8c}.novo-option.novo-fill-slate:not(.novo-option-inert):active{background:#595959}.novo-option.novo-accent-onyx{border-left:4px solid #526980}.novo-option.novo-fill-onyx:not(.novo-option-inert){color:#fff;background:#526980}.novo-option.novo-fill-onyx:not(.novo-option-inert):hover,.novo-option.novo-fill-onyx:not(.novo-option-inert):focus{background:#748799}.novo-option.novo-fill-onyx:not(.novo-option-inert):active{background:#415466}.novo-option.novo-accent-charcoal{border-left:4px solid #282828}.novo-option.novo-fill-charcoal:not(.novo-option-inert){color:#fff;background:#282828}.novo-option.novo-fill-charcoal:not(.novo-option-inert):hover,.novo-option.novo-fill-charcoal:not(.novo-option-inert):focus{background:#535353}.novo-option.novo-fill-charcoal:not(.novo-option-inert):active{background:#202020}.novo-option.novo-accent-moonlight{border-left:4px solid #1a242f}.novo-option.novo-fill-moonlight:not(.novo-option-inert){color:#fff;background:#1a242f}.novo-option.novo-fill-moonlight:not(.novo-option-inert):hover,.novo-option.novo-fill-moonlight:not(.novo-option-inert):focus{background:#474f58}.novo-option.novo-fill-moonlight:not(.novo-option-inert):active{background:#141c25}.novo-option.novo-accent-midnight{border-left:4px solid #202945}.novo-option.novo-fill-midnight:not(.novo-option-inert){color:#fff;background:#202945}.novo-option.novo-fill-midnight:not(.novo-option-inert):hover,.novo-option.novo-fill-midnight:not(.novo-option-inert):focus{background:#4c536a}.novo-option.novo-fill-midnight:not(.novo-option-inert):active{background:#192037}.novo-option.novo-accent-darkness{border-left:4px solid #161f27}.novo-option.novo-fill-darkness:not(.novo-option-inert){color:#fff;background:#161f27}.novo-option.novo-fill-darkness:not(.novo-option-inert):hover,.novo-option.novo-fill-darkness:not(.novo-option-inert):focus{background:#444b52}.novo-option.novo-fill-darkness:not(.novo-option-inert):active{background:#11181f}.novo-option.novo-accent-navy{border-left:4px solid #0d2d42}.novo-option.novo-fill-navy:not(.novo-option-inert){color:#fff;background:#0d2d42}.novo-option.novo-fill-navy:not(.novo-option-inert):hover,.novo-option.novo-fill-navy:not(.novo-option-inert):focus{background:#3d5767}.novo-option.novo-fill-navy:not(.novo-option-inert):active{background:#0a2434}.novo-option.novo-accent-aqua{border-left:4px solid #3bafda}.novo-option.novo-fill-aqua:not(.novo-option-inert){color:#3d464d;background:#3bafda}.novo-option.novo-fill-aqua:not(.novo-option-inert):hover,.novo-option.novo-fill-aqua:not(.novo-option-inert):focus{background:#62bfe1}.novo-option.novo-fill-aqua:not(.novo-option-inert):active{background:#2f8cae}.novo-option.novo-accent-ocean{border-left:4px solid #4a89dc}.novo-option.novo-fill-ocean:not(.novo-option-inert){color:#fff;background:#4a89dc}.novo-option.novo-fill-ocean:not(.novo-option-inert):hover,.novo-option.novo-fill-ocean:not(.novo-option-inert):focus{background:#6ea0e3}.novo-option.novo-fill-ocean:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-mint{border-left:4px solid #37bc9b}.novo-option.novo-fill-mint:not(.novo-option-inert){color:#3d464d;background:#37bc9b}.novo-option.novo-fill-mint:not(.novo-option-inert):hover,.novo-option.novo-fill-mint:not(.novo-option-inert):focus{background:#5fc9af}.novo-option.novo-fill-mint:not(.novo-option-inert):active{background:#2c967c}.novo-option.novo-accent-grass{border-left:4px solid #8cc152}.novo-option.novo-fill-grass:not(.novo-option-inert){color:#fff;background:#8cc152}.novo-option.novo-fill-grass:not(.novo-option-inert):hover,.novo-option.novo-fill-grass:not(.novo-option-inert):focus{background:#a3cd74}.novo-option.novo-fill-grass:not(.novo-option-inert):active{background:#709a41}.novo-option.novo-accent-sunflower{border-left:4px solid #f6b042}.novo-option.novo-fill-sunflower:not(.novo-option-inert){color:#fff;background:#f6b042}.novo-option.novo-fill-sunflower:not(.novo-option-inert):hover,.novo-option.novo-fill-sunflower:not(.novo-option-inert):focus{background:#f7bf67}.novo-option.novo-fill-sunflower:not(.novo-option-inert):active{background:#c48c34}.novo-option.novo-accent-bittersweet{border-left:4px solid #eb6845}.novo-option.novo-fill-bittersweet:not(.novo-option-inert){color:#fff;background:#eb6845}.novo-option.novo-fill-bittersweet:not(.novo-option-inert):hover,.novo-option.novo-fill-bittersweet:not(.novo-option-inert):focus{background:#ef866a}.novo-option.novo-fill-bittersweet:not(.novo-option-inert):active{background:#bc5337}.novo-option.novo-accent-grapefruit{border-left:4px solid #da4453}.novo-option.novo-fill-grapefruit:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-grapefruit:not(.novo-option-inert):hover,.novo-option.novo-fill-grapefruit:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-grapefruit:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-carnation{border-left:4px solid #d770ad}.novo-option.novo-fill-carnation:not(.novo-option-inert){color:#fff;background:#d770ad}.novo-option.novo-fill-carnation:not(.novo-option-inert):hover,.novo-option.novo-fill-carnation:not(.novo-option-inert):focus{background:#df8cbd}.novo-option.novo-fill-carnation:not(.novo-option-inert):active{background:#ac598a}.novo-option.novo-accent-lavender{border-left:4px solid #967adc}.novo-option.novo-fill-lavender:not(.novo-option-inert){color:#fff;background:#967adc}.novo-option.novo-fill-lavender:not(.novo-option-inert):hover,.novo-option.novo-fill-lavender:not(.novo-option-inert):focus{background:#ab94e3}.novo-option.novo-fill-lavender:not(.novo-option-inert):active{background:#7861b0}.novo-option.novo-accent-mountain{border-left:4px solid #9678b6}.novo-option.novo-fill-mountain:not(.novo-option-inert){color:#fff;background:#9678b6}.novo-option.novo-fill-mountain:not(.novo-option-inert):hover,.novo-option.novo-fill-mountain:not(.novo-option-inert):focus{background:#ab93c4}.novo-option.novo-fill-mountain:not(.novo-option-inert):active{background:#786091}.novo-option.novo-accent-info{border-left:4px solid #4a89dc}.novo-option.novo-fill-info:not(.novo-option-inert){color:#fff;background:#4a89dc}.novo-option.novo-fill-info:not(.novo-option-inert):hover,.novo-option.novo-fill-info:not(.novo-option-inert):focus{background:#6ea0e3}.novo-option.novo-fill-info:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-positive{border-left:4px solid #4a89dc}.novo-option.novo-fill-positive:not(.novo-option-inert){color:#fff;background:#4a89dc}.novo-option.novo-fill-positive:not(.novo-option-inert):hover,.novo-option.novo-fill-positive:not(.novo-option-inert):focus{background:#6ea0e3}.novo-option.novo-fill-positive:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-success{border-left:4px solid #8cc152}.novo-option.novo-fill-success:not(.novo-option-inert){color:#fff;background:#8cc152}.novo-option.novo-fill-success:not(.novo-option-inert):hover,.novo-option.novo-fill-success:not(.novo-option-inert):focus{background:#a3cd74}.novo-option.novo-fill-success:not(.novo-option-inert):active{background:#709a41}.novo-option.novo-accent-negative{border-left:4px solid #da4453}.novo-option.novo-fill-negative:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-negative:not(.novo-option-inert):hover,.novo-option.novo-fill-negative:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-negative:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-danger{border-left:4px solid #da4453}.novo-option.novo-fill-danger:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-danger:not(.novo-option-inert):hover,.novo-option.novo-fill-danger:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-danger:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-error{border-left:4px solid #da4453}.novo-option.novo-fill-error:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-error:not(.novo-option-inert):hover,.novo-option.novo-fill-error:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-error:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-warning{border-left:4px solid #f6b042}.novo-option.novo-fill-warning:not(.novo-option-inert){color:#fff;background:#f6b042}.novo-option.novo-fill-warning:not(.novo-option-inert):hover,.novo-option.novo-fill-warning:not(.novo-option-inert):focus{background:#f7bf67}.novo-option.novo-fill-warning:not(.novo-option-inert):active{background:#c48c34}.novo-option.novo-accent-empty{border-left:4px solid #cccdcc}.novo-option.novo-fill-empty:not(.novo-option-inert){color:#3d464d;background:#cccdcc}.novo-option.novo-fill-empty:not(.novo-option-inert):hover,.novo-option.novo-fill-empty:not(.novo-option-inert):focus{background:#d6d7d6}.novo-option.novo-fill-empty:not(.novo-option-inert):active{background:#a3a4a3}.novo-option.novo-accent-disabled{border-left:4px solid #bebebe}.novo-option.novo-fill-disabled:not(.novo-option-inert){color:#3d464d;background:#bebebe}.novo-option.novo-fill-disabled:not(.novo-option-inert):hover,.novo-option.novo-fill-disabled:not(.novo-option-inert):focus{background:#cbcbcb}.novo-option.novo-fill-disabled:not(.novo-option-inert):active{background:#989898}.novo-option.novo-accent-background{border-left:4px solid #f7f7f7}.novo-option.novo-fill-background:not(.novo-option-inert){color:#3d464d;background:#f7f7f7}.novo-option.novo-fill-background:not(.novo-option-inert):hover,.novo-option.novo-fill-background:not(.novo-option-inert):focus{background:#f8f8f8}.novo-option.novo-fill-background:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-backgroundDark{border-left:4px solid #e2e2e2}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert){color:#3d464d;background:#e2e2e2}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):hover,.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):focus{background:#e7e7e7}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):active{background:#b4b4b4}.novo-option.novo-accent-presentation{border-left:4px solid #5b6770}.novo-option.novo-fill-presentation:not(.novo-option-inert){color:#fff;background:#5b6770}.novo-option.novo-fill-presentation:not(.novo-option-inert):hover,.novo-option.novo-fill-presentation:not(.novo-option-inert):focus{background:#7b858c}.novo-option.novo-fill-presentation:not(.novo-option-inert):active{background:#485259}.novo-option.novo-accent-bullhorn{border-left:4px solid #ff6900}.novo-option.novo-fill-bullhorn:not(.novo-option-inert){color:#3d464d;background:#ff6900}.novo-option.novo-fill-bullhorn:not(.novo-option-inert):hover,.novo-option.novo-fill-bullhorn:not(.novo-option-inert):focus{background:#ff8733}.novo-option.novo-fill-bullhorn:not(.novo-option-inert):active{background:#cc5400}.novo-option.novo-accent-pulse{border-left:4px solid #3bafda}.novo-option.novo-fill-pulse:not(.novo-option-inert){color:#3d464d;background:#3bafda}.novo-option.novo-fill-pulse:not(.novo-option-inert):hover,.novo-option.novo-fill-pulse:not(.novo-option-inert):focus{background:#62bfe1}.novo-option.novo-fill-pulse:not(.novo-option-inert):active{background:#2f8cae}.novo-option.novo-accent-company{border-left:4px solid #3399dd}.novo-option.novo-fill-company:not(.novo-option-inert){color:#fff;background:#3399dd}.novo-option.novo-fill-company:not(.novo-option-inert):hover,.novo-option.novo-fill-company:not(.novo-option-inert):focus{background:#5bade3}.novo-option.novo-fill-company:not(.novo-option-inert):active{background:#287ab0}.novo-option.novo-accent-candidate{border-left:4px solid #44bb77}.novo-option.novo-fill-candidate:not(.novo-option-inert){color:#fff;background:#44bb77}.novo-option.novo-fill-candidate:not(.novo-option-inert):hover,.novo-option.novo-fill-candidate:not(.novo-option-inert):focus{background:#69c892}.novo-option.novo-fill-candidate:not(.novo-option-inert):active{background:#36955f}.novo-option.novo-accent-lead{border-left:4px solid #aa6699}.novo-option.novo-fill-lead:not(.novo-option-inert){color:#fff;background:#aa6699}.novo-option.novo-fill-lead:not(.novo-option-inert):hover,.novo-option.novo-fill-lead:not(.novo-option-inert):focus{background:#bb84ad}.novo-option.novo-fill-lead:not(.novo-option-inert):active{background:#88517a}.novo-option.novo-accent-contact{border-left:4px solid #ffaa44}.novo-option.novo-fill-contact:not(.novo-option-inert){color:#fff;background:#ffaa44}.novo-option.novo-fill-contact:not(.novo-option-inert):hover,.novo-option.novo-fill-contact:not(.novo-option-inert):focus{background:#ffbb69}.novo-option.novo-fill-contact:not(.novo-option-inert):active{background:#cc8836}.novo-option.novo-accent-clientcontact{border-left:4px solid #ffaa44}.novo-option.novo-fill-clientcontact:not(.novo-option-inert){color:#fff;background:#ffaa44}.novo-option.novo-fill-clientcontact:not(.novo-option-inert):hover,.novo-option.novo-fill-clientcontact:not(.novo-option-inert):focus{background:#ffbb69}.novo-option.novo-fill-clientcontact:not(.novo-option-inert):active{background:#cc8836}.novo-option.novo-accent-opportunity{border-left:4px solid #662255}.novo-option.novo-fill-opportunity:not(.novo-option-inert){color:#fff;background:#662255}.novo-option.novo-fill-opportunity:not(.novo-option-inert):hover,.novo-option.novo-fill-opportunity:not(.novo-option-inert):focus{background:#844e77}.novo-option.novo-fill-opportunity:not(.novo-option-inert):active{background:#511b44}.novo-option.novo-accent-job{border-left:4px solid #bb5566}.novo-option.novo-fill-job:not(.novo-option-inert){color:#fff;background:#bb5566}.novo-option.novo-fill-job:not(.novo-option-inert):hover,.novo-option.novo-fill-job:not(.novo-option-inert):focus{background:#c87784}.novo-option.novo-fill-job:not(.novo-option-inert):active{background:#954451}.novo-option.novo-accent-joborder{border-left:4px solid #bb5566}.novo-option.novo-fill-joborder:not(.novo-option-inert){color:#fff;background:#bb5566}.novo-option.novo-fill-joborder:not(.novo-option-inert):hover,.novo-option.novo-fill-joborder:not(.novo-option-inert):focus{background:#c87784}.novo-option.novo-fill-joborder:not(.novo-option-inert):active{background:#954451}.novo-option.novo-accent-submission{border-left:4px solid #a9adbb}.novo-option.novo-fill-submission:not(.novo-option-inert){color:#3d464d;background:#a9adbb}.novo-option.novo-fill-submission:not(.novo-option-inert):hover,.novo-option.novo-fill-submission:not(.novo-option-inert):focus{background:#babdc8}.novo-option.novo-fill-submission:not(.novo-option-inert):active{background:#878a95}.novo-option.novo-accent-sendout{border-left:4px solid #747884}.novo-option.novo-fill-sendout:not(.novo-option-inert){color:#fff;background:#747884}.novo-option.novo-fill-sendout:not(.novo-option-inert):hover,.novo-option.novo-fill-sendout:not(.novo-option-inert):focus{background:#8f939c}.novo-option.novo-fill-sendout:not(.novo-option-inert):active{background:#5c6069}.novo-option.novo-accent-placement{border-left:4px solid #0b344f}.novo-option.novo-fill-placement:not(.novo-option-inert){color:#fff;background:#0b344f}.novo-option.novo-fill-placement:not(.novo-option-inert):hover,.novo-option.novo-fill-placement:not(.novo-option-inert):focus{background:#3b5c72}.novo-option.novo-fill-placement:not(.novo-option-inert):active{background:#08293f}.novo-option.novo-accent-note{border-left:4px solid #747884}.novo-option.novo-fill-note:not(.novo-option-inert){color:#fff;background:#747884}.novo-option.novo-fill-note:not(.novo-option-inert):hover,.novo-option.novo-fill-note:not(.novo-option-inert):focus{background:#8f939c}.novo-option.novo-fill-note:not(.novo-option-inert):active{background:#5c6069}.novo-option.novo-accent-contract{border-left:4px solid #454ea0}.novo-option.novo-fill-contract:not(.novo-option-inert){color:#fff;background:#454ea0}.novo-option.novo-fill-contract:not(.novo-option-inert):hover,.novo-option.novo-fill-contract:not(.novo-option-inert):focus{background:#6a71b3}.novo-option.novo-fill-contract:not(.novo-option-inert):active{background:#373e80}.novo-option.novo-accent-jobCode{border-left:4px solid #696d79}.novo-option.novo-fill-jobCode:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-jobCode:not(.novo-option-inert):hover,.novo-option.novo-fill-jobCode:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-jobCode:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-earnCode{border-left:4px solid #696d79}.novo-option.novo-fill-earnCode:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-earnCode:not(.novo-option-inert):hover,.novo-option.novo-fill-earnCode:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-earnCode:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-invoiceStatement{border-left:4px solid #696d79}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):hover,.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-billableCharge{border-left:4px solid #696d79}.novo-option.novo-fill-billableCharge:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-billableCharge:not(.novo-option-inert):hover,.novo-option.novo-fill-billableCharge:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-billableCharge:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-payableCharge{border-left:4px solid #696d79}.novo-option.novo-fill-payableCharge:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-payableCharge:not(.novo-option-inert):hover,.novo-option.novo-fill-payableCharge:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-payableCharge:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-user{border-left:4px solid #696d79}.novo-option.novo-fill-user:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-user:not(.novo-option-inert):hover,.novo-option.novo-fill-user:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-user:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-corporateUser{border-left:4px solid #696d79}.novo-option.novo-fill-corporateUser:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-corporateUser:not(.novo-option-inert):hover,.novo-option.novo-fill-corporateUser:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-corporateUser:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-distributionList{border-left:4px solid #696d79}.novo-option.novo-fill-distributionList:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-distributionList:not(.novo-option-inert):hover,.novo-option.novo-fill-distributionList:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-distributionList:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-credential{border-left:4px solid #696d79}.novo-option.novo-fill-credential:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-credential:not(.novo-option-inert):hover,.novo-option.novo-fill-credential:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-credential:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-person{border-left:4px solid #696d79}.novo-option.novo-fill-person:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-person:not(.novo-option-inert):hover,.novo-option.novo-fill-person:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-person:not(.novo-option-inert):active{background:#545760}.novo-option-text{display:inline-block;display:inline-flex;flex-direction:row;align-items:center;flex-grow:1;overflow:hidden;text-overflow:ellipsis;gap:1rem}.novo-option-pseudo-checkbox{margin-right:.25rem}[dir=rtl] .novo-option-pseudo-checkbox{margin-left:.25rem;margin-right:0}\n"], components: [{ type: NovoPseudoCheckbox, selector: "novo-pseudo-checkbox", inputs: ["state", "shape", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOption, decorators: [{
            type: Component,
            args: [{ selector: 'novo-option', exportAs: 'novoOption', host: {
                        role: 'option',
                        '[id]': 'id',
                        '[attr.tabindex]': '_getTabIndex()',
                        '[attr.aria-selected]': '_getAriaSelected()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[class.novo-active]': 'active',
                        '[class.novo-selected]': 'selectable && selected',
                        '[class.novo-option-multiple]': 'multiple',
                        '[class.novo-option-disabled]': 'disabled',
                        '[class.novo-option-inert]': 'novoInert',
                        '(keydown)': '_handleKeydown($event)',
                        class: 'novo-option novo-focus-indicator',
                    }, inputs: ['selected', 'keepOpen', 'novoInert', 'value', 'disabled'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<novo-pseudo-checkbox *ngIf=\"selectable && multiple\" class=\"novo-option-pseudo-checkbox\"\n  [state]=\"selected ? 'checked' : 'unchecked'\" [disabled]=\"disabled\"></novo-pseudo-checkbox>\n\n<span class=\"novo-option-text\">\n  <ng-content></ng-content>\n</span>\n\n<novo-pseudo-checkbox *ngIf=\"selectable && !multiple && selected\" class=\"novo-option-pseudo-checkbox\" state=\"checked\"\n  shape=\"line\"\n  [disabled]=\"disabled\"></novo-pseudo-checkbox>\n\n<ng-content select=\"[novoSuffix]\"></ng-content>\n<!-- See a11y notes inside optgroup.ts for context behind this element. -->\n<span class=\"cdk-visually-hidden\" *ngIf=\"group && group._novoInert\">({{ group.label }})</span>", styles: [".novo-option{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;position:relative;cursor:pointer;outline:none;display:flex;flex-direction:row;max-width:100%;box-sizing:border-box;align-items:center;margin:0;padding:1rem 1rem 1rem 1.6rem;gap:1rem;flex:1;-webkit-tap-highlight-color:transparent}.novo-option.text-capitalize{text-transform:capitalize}.novo-option.text-uppercase{text-transform:uppercase}.novo-option.text-nowrap{white-space:nowrap}.novo-option.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-option.text-size-default{font-size:inherit}.novo-option.text-size-body{font-size:1.3rem}.novo-option.text-size-xs{font-size:1rem}.novo-option.text-size-sm{font-size:1.2rem}.novo-option.text-size-md{font-size:1.3rem}.novo-option.text-size-lg{font-size:1.6rem}.novo-option.text-size-xl{font-size:2rem}.novo-option.text-size-2xl{font-size:2.6rem}.novo-option.text-size-3xl{font-size:3.2rem}.novo-option.text-size-smaller{font-size:.8em}.novo-option.text-size-larger{font-size:1.2em}.novo-option.text-color-black{color:#000}.novo-option.text-color-white{color:#fff}.novo-option.text-color-gray,.novo-option.text-color-grey{color:#9e9e9e}.novo-option.text-color-offWhite,.novo-option.text-color-bright{color:#f7f7f7}.novo-option.text-color-light{color:#dbdbdb}.novo-option.text-color-neutral{color:#4f5361}.novo-option.text-color-dark{color:#3d464d}.novo-option.text-color-orange{color:#ff6900}.novo-option.text-color-navigation{color:#202945}.novo-option.text-color-skyBlue{color:#009bdf}.novo-option.text-color-steel{color:#5b6770}.novo-option.text-color-metal{color:#637893}.novo-option.text-color-sand{color:#f4f4f4}.novo-option.text-color-silver{color:#e2e2e2}.novo-option.text-color-stone{color:#bebebe}.novo-option.text-color-ash{color:#a0a0a0}.novo-option.text-color-slate{color:#707070}.novo-option.text-color-onyx{color:#526980}.novo-option.text-color-charcoal{color:#282828}.novo-option.text-color-moonlight{color:#1a242f}.novo-option.text-color-midnight{color:#202945}.novo-option.text-color-darkness{color:#161f27}.novo-option.text-color-navy{color:#0d2d42}.novo-option.text-color-aqua{color:#3bafda}.novo-option.text-color-ocean{color:#4a89dc}.novo-option.text-color-mint{color:#37bc9b}.novo-option.text-color-grass{color:#8cc152}.novo-option.text-color-sunflower{color:#f6b042}.novo-option.text-color-bittersweet{color:#eb6845}.novo-option.text-color-grapefruit{color:#da4453}.novo-option.text-color-carnation{color:#d770ad}.novo-option.text-color-lavender{color:#967adc}.novo-option.text-color-mountain{color:#9678b6}.novo-option.text-color-info,.novo-option.text-color-positive{color:#4a89dc}.novo-option.text-color-success{color:#8cc152}.novo-option.text-color-negative,.novo-option.text-color-danger,.novo-option.text-color-error{color:#da4453}.novo-option.text-color-warning{color:#f6b042}.novo-option.text-color-empty{color:#cccdcc}.novo-option.text-color-disabled{color:#bebebe}.novo-option.text-color-background{color:#f7f7f7}.novo-option.text-color-backgroundDark{color:#e2e2e2}.novo-option.text-color-presentation{color:#5b6770}.novo-option.text-color-bullhorn{color:#ff6900}.novo-option.text-color-pulse{color:#3bafda}.novo-option.text-color-company{color:#39d}.novo-option.text-color-candidate{color:#4b7}.novo-option.text-color-lead{color:#a69}.novo-option.text-color-contact,.novo-option.text-color-clientcontact{color:#fa4}.novo-option.text-color-opportunity{color:#625}.novo-option.text-color-job,.novo-option.text-color-joborder{color:#b56}.novo-option.text-color-submission{color:#a9adbb}.novo-option.text-color-sendout{color:#747884}.novo-option.text-color-placement{color:#0b344f}.novo-option.text-color-note{color:#747884}.novo-option.text-color-contract{color:#454ea0}.novo-option.text-color-jobCode,.novo-option.text-color-earnCode,.novo-option.text-color-invoiceStatement,.novo-option.text-color-billableCharge,.novo-option.text-color-payableCharge,.novo-option.text-color-user,.novo-option.text-color-corporateUser,.novo-option.text-color-distributionList,.novo-option.text-color-credential,.novo-option.text-color-person{color:#696d79}.novo-option.margin-before{margin-top:.4rem}.novo-option.margin-after{margin-bottom:.8rem}.novo-option.text-length-small{max-width:40ch}.novo-option.text-length-medium{max-width:55ch}.novo-option.text-length-large{max-width:70ch}.novo-option.text-weight-hairline{font-weight:100}.novo-option.text-weight-thin{font-weight:200}.novo-option.text-weight-light{font-weight:300}.novo-option.text-weight-normal{font-weight:400}.novo-option.text-weight-medium{font-weight:500}.novo-option.text-weight-semibold{font-weight:600}.novo-option.text-weight-bold{font-weight:700}.novo-option.text-weight-extrabold{font-weight:800}.novo-option.text-weight-heavy{font-weight:900}.novo-option.text-weight-lighter{font-weight:lighter}.novo-option.text-weight-bolder{font-weight:bolder}.novo-option:hover:not(.novo-option-inert){background:rgba(74,137,220,.1);background:var(--background-main, rgba(74, 137, 220, .1))}.novo-option:active:not(.novo-option-inert),.novo-option.novo-active:not(.novo-option-inert){background:rgba(74,137,220,.3)}.novo-option.novo-selected{color:#4a89dc}.novo-option.disabled,.novo-option[aria-disabled=true]{cursor:not-allowed;color:#bebebe}.novo-option.disabled:hover,.novo-option[aria-disabled=true]:hover{background:rgba(218,68,83,.1)}.novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:1rem}[dir=rtl] .novo-optgroup .novo-option:not(.novo-option-multiple){padding-left:.5rem;padding-right:1rem}.novo-option.novo-accent-black{border-left:4px solid #000000}.novo-option.novo-fill-black:not(.novo-option-inert){color:#fff;background:#000000}.novo-option.novo-fill-black:not(.novo-option-inert):hover,.novo-option.novo-fill-black:not(.novo-option-inert):focus{background:#333333}.novo-option.novo-fill-black:not(.novo-option-inert):active{background:#000000}.novo-option.novo-accent-white{border-left:4px solid #ffffff}.novo-option.novo-fill-white:not(.novo-option-inert){color:#3d464d;background:#ffffff}.novo-option.novo-fill-white:not(.novo-option-inert):hover,.novo-option.novo-fill-white:not(.novo-option-inert):focus{background:#ffffff}.novo-option.novo-fill-white:not(.novo-option-inert):active{background:#cccccc}.novo-option.novo-accent-gray{border-left:4px solid #9e9e9e}.novo-option.novo-fill-gray:not(.novo-option-inert){color:#3d464d;background:#9e9e9e}.novo-option.novo-fill-gray:not(.novo-option-inert):hover,.novo-option.novo-fill-gray:not(.novo-option-inert):focus{background:#b1b1b1}.novo-option.novo-fill-gray:not(.novo-option-inert):active{background:#7e7e7e}.novo-option.novo-accent-grey{border-left:4px solid #9e9e9e}.novo-option.novo-fill-grey:not(.novo-option-inert){color:#3d464d;background:#9e9e9e}.novo-option.novo-fill-grey:not(.novo-option-inert):hover,.novo-option.novo-fill-grey:not(.novo-option-inert):focus{background:#b1b1b1}.novo-option.novo-fill-grey:not(.novo-option-inert):active{background:#7e7e7e}.novo-option.novo-accent-offWhite{border-left:4px solid #f7f7f7}.novo-option.novo-fill-offWhite:not(.novo-option-inert){color:#3d464d;background:#f7f7f7}.novo-option.novo-fill-offWhite:not(.novo-option-inert):hover,.novo-option.novo-fill-offWhite:not(.novo-option-inert):focus{background:#f8f8f8}.novo-option.novo-fill-offWhite:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-bright{border-left:4px solid #f7f7f7}.novo-option.novo-fill-bright:not(.novo-option-inert){color:#3d464d;background:#f7f7f7}.novo-option.novo-fill-bright:not(.novo-option-inert):hover,.novo-option.novo-fill-bright:not(.novo-option-inert):focus{background:#f8f8f8}.novo-option.novo-fill-bright:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-light{border-left:4px solid #dbdbdb}.novo-option.novo-fill-light:not(.novo-option-inert){color:#3d464d;background:#dbdbdb}.novo-option.novo-fill-light:not(.novo-option-inert):hover,.novo-option.novo-fill-light:not(.novo-option-inert):focus{background:#e2e2e2}.novo-option.novo-fill-light:not(.novo-option-inert):active{background:#afafaf}.novo-option.novo-accent-neutral{border-left:4px solid #4f5361}.novo-option.novo-fill-neutral:not(.novo-option-inert){color:#fff;background:#4f5361}.novo-option.novo-fill-neutral:not(.novo-option-inert):hover,.novo-option.novo-fill-neutral:not(.novo-option-inert):focus{background:#727580}.novo-option.novo-fill-neutral:not(.novo-option-inert):active{background:#3f424d}.novo-option.novo-accent-dark{border-left:4px solid #3d464d}.novo-option.novo-fill-dark:not(.novo-option-inert){color:#fff;background:#3d464d}.novo-option.novo-fill-dark:not(.novo-option-inert):hover,.novo-option.novo-fill-dark:not(.novo-option-inert):focus{background:#636b70}.novo-option.novo-fill-dark:not(.novo-option-inert):active{background:#30383d}.novo-option.novo-accent-orange{border-left:4px solid #ff6900}.novo-option.novo-fill-orange:not(.novo-option-inert){color:#3d464d;background:#ff6900}.novo-option.novo-fill-orange:not(.novo-option-inert):hover,.novo-option.novo-fill-orange:not(.novo-option-inert):focus{background:#ff8733}.novo-option.novo-fill-orange:not(.novo-option-inert):active{background:#cc5400}.novo-option.novo-accent-navigation{border-left:4px solid #202945}.novo-option.novo-fill-navigation:not(.novo-option-inert){color:#fff;background:#202945}.novo-option.novo-fill-navigation:not(.novo-option-inert):hover,.novo-option.novo-fill-navigation:not(.novo-option-inert):focus{background:#4c536a}.novo-option.novo-fill-navigation:not(.novo-option-inert):active{background:#192037}.novo-option.novo-accent-skyBlue{border-left:4px solid #009bdf}.novo-option.novo-fill-skyBlue:not(.novo-option-inert){color:#fff;background:#009bdf}.novo-option.novo-fill-skyBlue:not(.novo-option-inert):hover,.novo-option.novo-fill-skyBlue:not(.novo-option-inert):focus{background:#33afe5}.novo-option.novo-fill-skyBlue:not(.novo-option-inert):active{background:#007cb2}.novo-option.novo-accent-steel{border-left:4px solid #5b6770}.novo-option.novo-fill-steel:not(.novo-option-inert){color:#fff;background:#5b6770}.novo-option.novo-fill-steel:not(.novo-option-inert):hover,.novo-option.novo-fill-steel:not(.novo-option-inert):focus{background:#7b858c}.novo-option.novo-fill-steel:not(.novo-option-inert):active{background:#485259}.novo-option.novo-accent-metal{border-left:4px solid #637893}.novo-option.novo-fill-metal:not(.novo-option-inert){color:#fff;background:#637893}.novo-option.novo-fill-metal:not(.novo-option-inert):hover,.novo-option.novo-fill-metal:not(.novo-option-inert):focus{background:#8293a8}.novo-option.novo-fill-metal:not(.novo-option-inert):active{background:#4f6075}.novo-option.novo-accent-sand{border-left:4px solid #f4f4f4}.novo-option.novo-fill-sand:not(.novo-option-inert){color:#3d464d;background:#f4f4f4}.novo-option.novo-fill-sand:not(.novo-option-inert):hover,.novo-option.novo-fill-sand:not(.novo-option-inert):focus{background:#f6f6f6}.novo-option.novo-fill-sand:not(.novo-option-inert):active{background:#c3c3c3}.novo-option.novo-accent-silver{border-left:4px solid #e2e2e2}.novo-option.novo-fill-silver:not(.novo-option-inert){color:#3d464d;background:#e2e2e2}.novo-option.novo-fill-silver:not(.novo-option-inert):hover,.novo-option.novo-fill-silver:not(.novo-option-inert):focus{background:#e7e7e7}.novo-option.novo-fill-silver:not(.novo-option-inert):active{background:#b4b4b4}.novo-option.novo-accent-stone{border-left:4px solid #bebebe}.novo-option.novo-fill-stone:not(.novo-option-inert){color:#3d464d;background:#bebebe}.novo-option.novo-fill-stone:not(.novo-option-inert):hover,.novo-option.novo-fill-stone:not(.novo-option-inert):focus{background:#cbcbcb}.novo-option.novo-fill-stone:not(.novo-option-inert):active{background:#989898}.novo-option.novo-accent-ash{border-left:4px solid #a0a0a0}.novo-option.novo-fill-ash:not(.novo-option-inert){color:#3d464d;background:#a0a0a0}.novo-option.novo-fill-ash:not(.novo-option-inert):hover,.novo-option.novo-fill-ash:not(.novo-option-inert):focus{background:#b3b3b3}.novo-option.novo-fill-ash:not(.novo-option-inert):active{background:#808080}.novo-option.novo-accent-slate{border-left:4px solid #707070}.novo-option.novo-fill-slate:not(.novo-option-inert){color:#fff;background:#707070}.novo-option.novo-fill-slate:not(.novo-option-inert):hover,.novo-option.novo-fill-slate:not(.novo-option-inert):focus{background:#8c8c8c}.novo-option.novo-fill-slate:not(.novo-option-inert):active{background:#595959}.novo-option.novo-accent-onyx{border-left:4px solid #526980}.novo-option.novo-fill-onyx:not(.novo-option-inert){color:#fff;background:#526980}.novo-option.novo-fill-onyx:not(.novo-option-inert):hover,.novo-option.novo-fill-onyx:not(.novo-option-inert):focus{background:#748799}.novo-option.novo-fill-onyx:not(.novo-option-inert):active{background:#415466}.novo-option.novo-accent-charcoal{border-left:4px solid #282828}.novo-option.novo-fill-charcoal:not(.novo-option-inert){color:#fff;background:#282828}.novo-option.novo-fill-charcoal:not(.novo-option-inert):hover,.novo-option.novo-fill-charcoal:not(.novo-option-inert):focus{background:#535353}.novo-option.novo-fill-charcoal:not(.novo-option-inert):active{background:#202020}.novo-option.novo-accent-moonlight{border-left:4px solid #1a242f}.novo-option.novo-fill-moonlight:not(.novo-option-inert){color:#fff;background:#1a242f}.novo-option.novo-fill-moonlight:not(.novo-option-inert):hover,.novo-option.novo-fill-moonlight:not(.novo-option-inert):focus{background:#474f58}.novo-option.novo-fill-moonlight:not(.novo-option-inert):active{background:#141c25}.novo-option.novo-accent-midnight{border-left:4px solid #202945}.novo-option.novo-fill-midnight:not(.novo-option-inert){color:#fff;background:#202945}.novo-option.novo-fill-midnight:not(.novo-option-inert):hover,.novo-option.novo-fill-midnight:not(.novo-option-inert):focus{background:#4c536a}.novo-option.novo-fill-midnight:not(.novo-option-inert):active{background:#192037}.novo-option.novo-accent-darkness{border-left:4px solid #161f27}.novo-option.novo-fill-darkness:not(.novo-option-inert){color:#fff;background:#161f27}.novo-option.novo-fill-darkness:not(.novo-option-inert):hover,.novo-option.novo-fill-darkness:not(.novo-option-inert):focus{background:#444b52}.novo-option.novo-fill-darkness:not(.novo-option-inert):active{background:#11181f}.novo-option.novo-accent-navy{border-left:4px solid #0d2d42}.novo-option.novo-fill-navy:not(.novo-option-inert){color:#fff;background:#0d2d42}.novo-option.novo-fill-navy:not(.novo-option-inert):hover,.novo-option.novo-fill-navy:not(.novo-option-inert):focus{background:#3d5767}.novo-option.novo-fill-navy:not(.novo-option-inert):active{background:#0a2434}.novo-option.novo-accent-aqua{border-left:4px solid #3bafda}.novo-option.novo-fill-aqua:not(.novo-option-inert){color:#3d464d;background:#3bafda}.novo-option.novo-fill-aqua:not(.novo-option-inert):hover,.novo-option.novo-fill-aqua:not(.novo-option-inert):focus{background:#62bfe1}.novo-option.novo-fill-aqua:not(.novo-option-inert):active{background:#2f8cae}.novo-option.novo-accent-ocean{border-left:4px solid #4a89dc}.novo-option.novo-fill-ocean:not(.novo-option-inert){color:#fff;background:#4a89dc}.novo-option.novo-fill-ocean:not(.novo-option-inert):hover,.novo-option.novo-fill-ocean:not(.novo-option-inert):focus{background:#6ea0e3}.novo-option.novo-fill-ocean:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-mint{border-left:4px solid #37bc9b}.novo-option.novo-fill-mint:not(.novo-option-inert){color:#3d464d;background:#37bc9b}.novo-option.novo-fill-mint:not(.novo-option-inert):hover,.novo-option.novo-fill-mint:not(.novo-option-inert):focus{background:#5fc9af}.novo-option.novo-fill-mint:not(.novo-option-inert):active{background:#2c967c}.novo-option.novo-accent-grass{border-left:4px solid #8cc152}.novo-option.novo-fill-grass:not(.novo-option-inert){color:#fff;background:#8cc152}.novo-option.novo-fill-grass:not(.novo-option-inert):hover,.novo-option.novo-fill-grass:not(.novo-option-inert):focus{background:#a3cd74}.novo-option.novo-fill-grass:not(.novo-option-inert):active{background:#709a41}.novo-option.novo-accent-sunflower{border-left:4px solid #f6b042}.novo-option.novo-fill-sunflower:not(.novo-option-inert){color:#fff;background:#f6b042}.novo-option.novo-fill-sunflower:not(.novo-option-inert):hover,.novo-option.novo-fill-sunflower:not(.novo-option-inert):focus{background:#f7bf67}.novo-option.novo-fill-sunflower:not(.novo-option-inert):active{background:#c48c34}.novo-option.novo-accent-bittersweet{border-left:4px solid #eb6845}.novo-option.novo-fill-bittersweet:not(.novo-option-inert){color:#fff;background:#eb6845}.novo-option.novo-fill-bittersweet:not(.novo-option-inert):hover,.novo-option.novo-fill-bittersweet:not(.novo-option-inert):focus{background:#ef866a}.novo-option.novo-fill-bittersweet:not(.novo-option-inert):active{background:#bc5337}.novo-option.novo-accent-grapefruit{border-left:4px solid #da4453}.novo-option.novo-fill-grapefruit:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-grapefruit:not(.novo-option-inert):hover,.novo-option.novo-fill-grapefruit:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-grapefruit:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-carnation{border-left:4px solid #d770ad}.novo-option.novo-fill-carnation:not(.novo-option-inert){color:#fff;background:#d770ad}.novo-option.novo-fill-carnation:not(.novo-option-inert):hover,.novo-option.novo-fill-carnation:not(.novo-option-inert):focus{background:#df8cbd}.novo-option.novo-fill-carnation:not(.novo-option-inert):active{background:#ac598a}.novo-option.novo-accent-lavender{border-left:4px solid #967adc}.novo-option.novo-fill-lavender:not(.novo-option-inert){color:#fff;background:#967adc}.novo-option.novo-fill-lavender:not(.novo-option-inert):hover,.novo-option.novo-fill-lavender:not(.novo-option-inert):focus{background:#ab94e3}.novo-option.novo-fill-lavender:not(.novo-option-inert):active{background:#7861b0}.novo-option.novo-accent-mountain{border-left:4px solid #9678b6}.novo-option.novo-fill-mountain:not(.novo-option-inert){color:#fff;background:#9678b6}.novo-option.novo-fill-mountain:not(.novo-option-inert):hover,.novo-option.novo-fill-mountain:not(.novo-option-inert):focus{background:#ab93c4}.novo-option.novo-fill-mountain:not(.novo-option-inert):active{background:#786091}.novo-option.novo-accent-info{border-left:4px solid #4a89dc}.novo-option.novo-fill-info:not(.novo-option-inert){color:#fff;background:#4a89dc}.novo-option.novo-fill-info:not(.novo-option-inert):hover,.novo-option.novo-fill-info:not(.novo-option-inert):focus{background:#6ea0e3}.novo-option.novo-fill-info:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-positive{border-left:4px solid #4a89dc}.novo-option.novo-fill-positive:not(.novo-option-inert){color:#fff;background:#4a89dc}.novo-option.novo-fill-positive:not(.novo-option-inert):hover,.novo-option.novo-fill-positive:not(.novo-option-inert):focus{background:#6ea0e3}.novo-option.novo-fill-positive:not(.novo-option-inert):active{background:#3b6db0}.novo-option.novo-accent-success{border-left:4px solid #8cc152}.novo-option.novo-fill-success:not(.novo-option-inert){color:#fff;background:#8cc152}.novo-option.novo-fill-success:not(.novo-option-inert):hover,.novo-option.novo-fill-success:not(.novo-option-inert):focus{background:#a3cd74}.novo-option.novo-fill-success:not(.novo-option-inert):active{background:#709a41}.novo-option.novo-accent-negative{border-left:4px solid #da4453}.novo-option.novo-fill-negative:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-negative:not(.novo-option-inert):hover,.novo-option.novo-fill-negative:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-negative:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-danger{border-left:4px solid #da4453}.novo-option.novo-fill-danger:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-danger:not(.novo-option-inert):hover,.novo-option.novo-fill-danger:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-danger:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-error{border-left:4px solid #da4453}.novo-option.novo-fill-error:not(.novo-option-inert){color:#fff;background:#da4453}.novo-option.novo-fill-error:not(.novo-option-inert):hover,.novo-option.novo-fill-error:not(.novo-option-inert):focus{background:#e16975}.novo-option.novo-fill-error:not(.novo-option-inert):active{background:#ae3642}.novo-option.novo-accent-warning{border-left:4px solid #f6b042}.novo-option.novo-fill-warning:not(.novo-option-inert){color:#fff;background:#f6b042}.novo-option.novo-fill-warning:not(.novo-option-inert):hover,.novo-option.novo-fill-warning:not(.novo-option-inert):focus{background:#f7bf67}.novo-option.novo-fill-warning:not(.novo-option-inert):active{background:#c48c34}.novo-option.novo-accent-empty{border-left:4px solid #cccdcc}.novo-option.novo-fill-empty:not(.novo-option-inert){color:#3d464d;background:#cccdcc}.novo-option.novo-fill-empty:not(.novo-option-inert):hover,.novo-option.novo-fill-empty:not(.novo-option-inert):focus{background:#d6d7d6}.novo-option.novo-fill-empty:not(.novo-option-inert):active{background:#a3a4a3}.novo-option.novo-accent-disabled{border-left:4px solid #bebebe}.novo-option.novo-fill-disabled:not(.novo-option-inert){color:#3d464d;background:#bebebe}.novo-option.novo-fill-disabled:not(.novo-option-inert):hover,.novo-option.novo-fill-disabled:not(.novo-option-inert):focus{background:#cbcbcb}.novo-option.novo-fill-disabled:not(.novo-option-inert):active{background:#989898}.novo-option.novo-accent-background{border-left:4px solid #f7f7f7}.novo-option.novo-fill-background:not(.novo-option-inert){color:#3d464d;background:#f7f7f7}.novo-option.novo-fill-background:not(.novo-option-inert):hover,.novo-option.novo-fill-background:not(.novo-option-inert):focus{background:#f8f8f8}.novo-option.novo-fill-background:not(.novo-option-inert):active{background:#c5c5c5}.novo-option.novo-accent-backgroundDark{border-left:4px solid #e2e2e2}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert){color:#3d464d;background:#e2e2e2}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):hover,.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):focus{background:#e7e7e7}.novo-option.novo-fill-backgroundDark:not(.novo-option-inert):active{background:#b4b4b4}.novo-option.novo-accent-presentation{border-left:4px solid #5b6770}.novo-option.novo-fill-presentation:not(.novo-option-inert){color:#fff;background:#5b6770}.novo-option.novo-fill-presentation:not(.novo-option-inert):hover,.novo-option.novo-fill-presentation:not(.novo-option-inert):focus{background:#7b858c}.novo-option.novo-fill-presentation:not(.novo-option-inert):active{background:#485259}.novo-option.novo-accent-bullhorn{border-left:4px solid #ff6900}.novo-option.novo-fill-bullhorn:not(.novo-option-inert){color:#3d464d;background:#ff6900}.novo-option.novo-fill-bullhorn:not(.novo-option-inert):hover,.novo-option.novo-fill-bullhorn:not(.novo-option-inert):focus{background:#ff8733}.novo-option.novo-fill-bullhorn:not(.novo-option-inert):active{background:#cc5400}.novo-option.novo-accent-pulse{border-left:4px solid #3bafda}.novo-option.novo-fill-pulse:not(.novo-option-inert){color:#3d464d;background:#3bafda}.novo-option.novo-fill-pulse:not(.novo-option-inert):hover,.novo-option.novo-fill-pulse:not(.novo-option-inert):focus{background:#62bfe1}.novo-option.novo-fill-pulse:not(.novo-option-inert):active{background:#2f8cae}.novo-option.novo-accent-company{border-left:4px solid #3399dd}.novo-option.novo-fill-company:not(.novo-option-inert){color:#fff;background:#3399dd}.novo-option.novo-fill-company:not(.novo-option-inert):hover,.novo-option.novo-fill-company:not(.novo-option-inert):focus{background:#5bade3}.novo-option.novo-fill-company:not(.novo-option-inert):active{background:#287ab0}.novo-option.novo-accent-candidate{border-left:4px solid #44bb77}.novo-option.novo-fill-candidate:not(.novo-option-inert){color:#fff;background:#44bb77}.novo-option.novo-fill-candidate:not(.novo-option-inert):hover,.novo-option.novo-fill-candidate:not(.novo-option-inert):focus{background:#69c892}.novo-option.novo-fill-candidate:not(.novo-option-inert):active{background:#36955f}.novo-option.novo-accent-lead{border-left:4px solid #aa6699}.novo-option.novo-fill-lead:not(.novo-option-inert){color:#fff;background:#aa6699}.novo-option.novo-fill-lead:not(.novo-option-inert):hover,.novo-option.novo-fill-lead:not(.novo-option-inert):focus{background:#bb84ad}.novo-option.novo-fill-lead:not(.novo-option-inert):active{background:#88517a}.novo-option.novo-accent-contact{border-left:4px solid #ffaa44}.novo-option.novo-fill-contact:not(.novo-option-inert){color:#fff;background:#ffaa44}.novo-option.novo-fill-contact:not(.novo-option-inert):hover,.novo-option.novo-fill-contact:not(.novo-option-inert):focus{background:#ffbb69}.novo-option.novo-fill-contact:not(.novo-option-inert):active{background:#cc8836}.novo-option.novo-accent-clientcontact{border-left:4px solid #ffaa44}.novo-option.novo-fill-clientcontact:not(.novo-option-inert){color:#fff;background:#ffaa44}.novo-option.novo-fill-clientcontact:not(.novo-option-inert):hover,.novo-option.novo-fill-clientcontact:not(.novo-option-inert):focus{background:#ffbb69}.novo-option.novo-fill-clientcontact:not(.novo-option-inert):active{background:#cc8836}.novo-option.novo-accent-opportunity{border-left:4px solid #662255}.novo-option.novo-fill-opportunity:not(.novo-option-inert){color:#fff;background:#662255}.novo-option.novo-fill-opportunity:not(.novo-option-inert):hover,.novo-option.novo-fill-opportunity:not(.novo-option-inert):focus{background:#844e77}.novo-option.novo-fill-opportunity:not(.novo-option-inert):active{background:#511b44}.novo-option.novo-accent-job{border-left:4px solid #bb5566}.novo-option.novo-fill-job:not(.novo-option-inert){color:#fff;background:#bb5566}.novo-option.novo-fill-job:not(.novo-option-inert):hover,.novo-option.novo-fill-job:not(.novo-option-inert):focus{background:#c87784}.novo-option.novo-fill-job:not(.novo-option-inert):active{background:#954451}.novo-option.novo-accent-joborder{border-left:4px solid #bb5566}.novo-option.novo-fill-joborder:not(.novo-option-inert){color:#fff;background:#bb5566}.novo-option.novo-fill-joborder:not(.novo-option-inert):hover,.novo-option.novo-fill-joborder:not(.novo-option-inert):focus{background:#c87784}.novo-option.novo-fill-joborder:not(.novo-option-inert):active{background:#954451}.novo-option.novo-accent-submission{border-left:4px solid #a9adbb}.novo-option.novo-fill-submission:not(.novo-option-inert){color:#3d464d;background:#a9adbb}.novo-option.novo-fill-submission:not(.novo-option-inert):hover,.novo-option.novo-fill-submission:not(.novo-option-inert):focus{background:#babdc8}.novo-option.novo-fill-submission:not(.novo-option-inert):active{background:#878a95}.novo-option.novo-accent-sendout{border-left:4px solid #747884}.novo-option.novo-fill-sendout:not(.novo-option-inert){color:#fff;background:#747884}.novo-option.novo-fill-sendout:not(.novo-option-inert):hover,.novo-option.novo-fill-sendout:not(.novo-option-inert):focus{background:#8f939c}.novo-option.novo-fill-sendout:not(.novo-option-inert):active{background:#5c6069}.novo-option.novo-accent-placement{border-left:4px solid #0b344f}.novo-option.novo-fill-placement:not(.novo-option-inert){color:#fff;background:#0b344f}.novo-option.novo-fill-placement:not(.novo-option-inert):hover,.novo-option.novo-fill-placement:not(.novo-option-inert):focus{background:#3b5c72}.novo-option.novo-fill-placement:not(.novo-option-inert):active{background:#08293f}.novo-option.novo-accent-note{border-left:4px solid #747884}.novo-option.novo-fill-note:not(.novo-option-inert){color:#fff;background:#747884}.novo-option.novo-fill-note:not(.novo-option-inert):hover,.novo-option.novo-fill-note:not(.novo-option-inert):focus{background:#8f939c}.novo-option.novo-fill-note:not(.novo-option-inert):active{background:#5c6069}.novo-option.novo-accent-contract{border-left:4px solid #454ea0}.novo-option.novo-fill-contract:not(.novo-option-inert){color:#fff;background:#454ea0}.novo-option.novo-fill-contract:not(.novo-option-inert):hover,.novo-option.novo-fill-contract:not(.novo-option-inert):focus{background:#6a71b3}.novo-option.novo-fill-contract:not(.novo-option-inert):active{background:#373e80}.novo-option.novo-accent-jobCode{border-left:4px solid #696d79}.novo-option.novo-fill-jobCode:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-jobCode:not(.novo-option-inert):hover,.novo-option.novo-fill-jobCode:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-jobCode:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-earnCode{border-left:4px solid #696d79}.novo-option.novo-fill-earnCode:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-earnCode:not(.novo-option-inert):hover,.novo-option.novo-fill-earnCode:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-earnCode:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-invoiceStatement{border-left:4px solid #696d79}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):hover,.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-invoiceStatement:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-billableCharge{border-left:4px solid #696d79}.novo-option.novo-fill-billableCharge:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-billableCharge:not(.novo-option-inert):hover,.novo-option.novo-fill-billableCharge:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-billableCharge:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-payableCharge{border-left:4px solid #696d79}.novo-option.novo-fill-payableCharge:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-payableCharge:not(.novo-option-inert):hover,.novo-option.novo-fill-payableCharge:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-payableCharge:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-user{border-left:4px solid #696d79}.novo-option.novo-fill-user:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-user:not(.novo-option-inert):hover,.novo-option.novo-fill-user:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-user:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-corporateUser{border-left:4px solid #696d79}.novo-option.novo-fill-corporateUser:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-corporateUser:not(.novo-option-inert):hover,.novo-option.novo-fill-corporateUser:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-corporateUser:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-distributionList{border-left:4px solid #696d79}.novo-option.novo-fill-distributionList:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-distributionList:not(.novo-option-inert):hover,.novo-option.novo-fill-distributionList:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-distributionList:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-credential{border-left:4px solid #696d79}.novo-option.novo-fill-credential:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-credential:not(.novo-option-inert):hover,.novo-option.novo-fill-credential:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-credential:not(.novo-option-inert):active{background:#545760}.novo-option.novo-accent-person{border-left:4px solid #696d79}.novo-option.novo-fill-person:not(.novo-option-inert){color:#fff;background:#696d79}.novo-option.novo-fill-person:not(.novo-option-inert):hover,.novo-option.novo-fill-person:not(.novo-option-inert):focus{background:#878a93}.novo-option.novo-fill-person:not(.novo-option-inert):active{background:#545760}.novo-option-text{display:inline-block;display:inline-flex;flex-direction:row;align-items:center;flex-grow:1;overflow:hidden;text-overflow:ellipsis;gap:1rem}.novo-option-pseudo-checkbox{margin-right:.25rem}[dir=rtl] .novo-option-pseudo-checkbox{margin-left:.25rem;margin-right:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_OPTION_PARENT_COMPONENT]
                }] }, { type: NovoOptgroup, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_OPTGROUP]
                }] }]; } });
/**
 * Counts the amount of option group labels that precede the specified option.
 * @param optionIndex Index of the option at which to start counting.
 * @param options Flat list of all of the options.
 * @param optionGroups Flat list of all of the option groups.
 * @docs-private
 */
function _countGroupLabelsBeforeOption(optionIndex, options, optionGroups) {
    if (optionGroups.length) {
        let optionsArray = options.toArray();
        let groups = optionGroups.toArray();
        let groupCounter = 0;
        for (let i = 0; i < optionIndex + 1; i++) {
            if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {
                groupCounter++;
            }
        }
        return groupCounter;
    }
    return 0;
}
/**
 * Determines the position to which to scroll a panel in order for an option to be into view.
 * @param optionOffset Offset of the option from the top of the panel.
 * @param optionHeight Height of the options.
 * @param currentScrollPosition Current scroll position of the panel.
 * @param panelHeight Height of the panel.
 * @docs-private
 */
function _getOptionScrollPosition(optionOffset, optionHeight, currentScrollPosition, panelHeight) {
    if (optionOffset < currentScrollPosition) {
        return optionOffset;
    }
    if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {
        return Math.max(0, optionOffset - panelHeight + optionHeight);
    }
    return currentScrollPosition;
}

class NovoOptionModule {
}
NovoOptionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoOptionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptionModule, declarations: [NovoOption, NovoOptgroup], imports: [CommonModule, NovoPseudoCheckboxModule], exports: [NovoOption, NovoOptgroup] });
NovoOptionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptionModule, imports: [[CommonModule, NovoPseudoCheckboxModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOptionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoPseudoCheckboxModule],
                    exports: [NovoOption, NovoOptgroup],
                    declarations: [NovoOption, NovoOptgroup],
                }]
        }] });

// NG2
/**
 * Tag Example
 * <novo-title size="sm" disabled>Label</novo-title
 * <novo-title small disabled>Label</novo-title>
 * <novo-title large disabled>Label</novo-title>
 * <novo-title error>Label</novo-title>
 * <novo-title muted>Label</novo-title>
 * <novo-title class="tc-grapefruit">Label</novo-title>
 * <novo-title color="grapefruit">Label</novo-title>
 */
class NovoCaption extends NovoBaseTextElement {
}
NovoCaption.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCaption, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoCaption.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoCaption, selector: "novo-caption,[novo-caption]", host: { classAttribute: "novo-caption" }, usesInheritance: true, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, styles: [":host{display:inline;font-size:var(--font-size-caption);font-weight:400;line-height:1.375;color:var(--text-muted);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCaption, decorators: [{
            type: Component,
            args: [{ selector: 'novo-caption,[novo-caption]', template: ` <ng-content></ng-content> `, host: {
                        class: 'novo-caption',
                    }, styles: [":host{display:inline;font-size:var(--font-size-caption);font-weight:400;line-height:1.375;color:var(--text-muted);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}\n"] }]
        }] });

// NG2
/**
 * Tag Example
 * <novo-label size="sm" disabled>Label</novo-label
 * <novo-label small disabled>Label</novo-label>
 * <novo-label large disabled>Label</novo-label>
 * <novo-label error>Label</novo-label>
 * <novo-label muted>Label</novo-label>
 * <novo-label class="tc-grapefruit">Label</novo-label>
 * <novo-label color="grapefruit">Label</novo-label>
 */
class NovoLabel extends NovoBaseTextElement {
}
NovoLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLabel, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoLabel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoLabel, selector: "novo-label,[novo-label]", host: { classAttribute: "novo-label" }, usesInheritance: true, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, styles: [":host{display:inline-block;font-weight:500;word-break:word-break;overflow-wrap:break-word;line-height:1.375;color:var(--text-muted);font-size:var(--font-size-label);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLabel, decorators: [{
            type: Component,
            args: [{ selector: 'novo-label,[novo-label]', template: ` <ng-content></ng-content> `, host: {
                        class: 'novo-label',
                    }, styles: [":host{display:inline-block;font-weight:500;word-break:word-break;overflow-wrap:break-word;line-height:1.375;color:var(--text-muted);font-size:var(--font-size-label);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}\n"] }]
        }] });

// NG2
/**
 * Tag Example
 * <novo-text size="small" disabled>Label</novo-text
 * <novo-text small disabled>Label</novo-text>
 * <novo-text large disabled>Label</novo-text>
 * <novo-text error>Label</novo-text>
 * <novo-text muted>Label</novo-text>
 * <novo-text class="tc-grapefruit">Label</novo-text>
 * <novo-text color="grapefruit">Label</novo-text>
 */
class NovoLink extends NovoBaseTextElement {
}
NovoLink.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLink, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoLink.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoLink, selector: "novo-link", inputs: { href: "href" }, host: { classAttribute: "novo-link" }, usesInheritance: true, ngImport: i0, template: `<a [attr.href]="href"><ng-content></ng-content></a>`, isInline: true, styles: [":host{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}:host::ng-deep novo-icon{font-size:1em}:host novo-icon{font-size:1em}\n"], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLink, decorators: [{
            type: Component,
            args: [{ selector: 'novo-link', template: `<a [attr.href]="href"><ng-content></ng-content></a>`, encapsulation: ViewEncapsulation.None, host: {
                        class: 'novo-link',
                    }, styles: [":host{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}:host::ng-deep novo-icon{font-size:1em}:host novo-icon{font-size:1em}\n"] }]
        }], propDecorators: { href: [{
                type: Input
            }] } });

class NovoCommonModule {
}
NovoCommonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCommonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoCommonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCommonModule, declarations: [NovoTemplate,
        NovoText,
        NovoTitle,
        NovoCaption,
        NovoLabel,
        NovoLink,
        MarginDirective,
        PaddingDirective,
        BackgroundColorDirective,
        TextColorDirective,
        BorderDirective,
        GapDirective,
        AccentColorDirective,
        FillColorDirective,
        FlexDirective,
        ThemeColorDirective,
        SwitchCasesDirective,
        VisibleDirective], imports: [CommonModule, NovoOptionModule], exports: [NovoTemplate,
        NovoText,
        NovoTitle,
        NovoCaption,
        NovoLabel,
        NovoLink,
        MarginDirective,
        PaddingDirective,
        BackgroundColorDirective,
        TextColorDirective,
        BorderDirective,
        GapDirective,
        AccentColorDirective,
        FillColorDirective,
        FlexDirective,
        ThemeColorDirective,
        SwitchCasesDirective,
        VisibleDirective] });
NovoCommonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCommonModule, imports: [[CommonModule, NovoOptionModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCommonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoOptionModule],
                    exports: [
                        NovoTemplate,
                        NovoText,
                        NovoTitle,
                        NovoCaption,
                        NovoLabel,
                        NovoLink,
                        MarginDirective,
                        PaddingDirective,
                        BackgroundColorDirective,
                        TextColorDirective,
                        BorderDirective,
                        GapDirective,
                        AccentColorDirective,
                        FillColorDirective,
                        FlexDirective,
                        ThemeColorDirective,
                        SwitchCasesDirective,
                        VisibleDirective,
                    ],
                    declarations: [
                        NovoTemplate,
                        NovoText,
                        NovoTitle,
                        NovoCaption,
                        NovoLabel,
                        NovoLink,
                        MarginDirective,
                        PaddingDirective,
                        BackgroundColorDirective,
                        TextColorDirective,
                        BorderDirective,
                        GapDirective,
                        AccentColorDirective,
                        FillColorDirective,
                        FlexDirective,
                        ThemeColorDirective,
                        SwitchCasesDirective,
                        VisibleDirective,
                    ],
                }]
        }] });

/** Error state matcher that matches when a control is invalid and dirty. */
class ShowOnDirtyErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));
    }
}
ShowOnDirtyErrorStateMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ShowOnDirtyErrorStateMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{
            type: Injectable
        }] });
/** Provider that defines how form controls behave with regards to displaying error messages. */
class ErrorStateMatcher {
    isErrorState(control, form) {
        return !!(control && control.invalid && (control.touched || (form && form.submitted)));
    }
}
ErrorStateMatcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ErrorStateMatcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ErrorStateMatcher, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

/** Mixin to augment a directive with a `color` property. */
function mixinColor(base, defaultColor) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultColor = defaultColor;
            // Set the default color that can be specified from the mixin.
            this.color = defaultColor;
        }
        get color() {
            return this._color;
        }
        set color(value) {
            const colorPalette = value || this.defaultColor;
            if (colorPalette !== this._color) {
                if (this._color) {
                    this._elementRef.nativeElement.classList.remove(`novo-color-${this._color}`);
                }
                if (colorPalette) {
                    this._elementRef.nativeElement.classList.add(`novo-color-${colorPalette}`);
                }
                this._color = colorPalette;
            }
        }
    };
}

/**
 * Mixin to augment a directive with updateErrorState method.
 * For component with `errorState` and need to update `errorState`.
 */
function mixinErrorState(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            /** Whether the component is in an error state. */
            this.errorState = false;
            /**
             * Stream that emits whenever the state of the input changes such that the wrapping
             * `MatFormField` needs to run change detection.
             */
            this.stateChanges = new Subject();
        }
        updateErrorState() {
            const oldState = this.errorState;
            const parent = this._parentFormGroup || this._parentForm;
            const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;
            const control = this.ngControl ? this.ngControl.control : null;
            const newState = matcher.isErrorState(control, parent);
            if (newState !== oldState) {
                this.errorState = newState;
                this.stateChanges.next();
            }
        }
    };
}

/** Mixin to augment a directive with a `overlay` property. */
function mixinOverlay(base) {
    // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
    // but given we `extend` it from another class, we can assume a constructor being accessible.
    class Mixin extends base {
        constructor(...args) {
            super(...args);
        }
        openPanel() {
            if (!this.disabled) {
                this.overlay.openPanel();
            }
        }
        closePanel() {
            this.overlay.closePanel();
        }
        togglePanel() {
            if (this.panelOpen) {
                this.closePanel();
            }
            else {
                this.openPanel();
            }
        }
        get panelOpen() {
            return this.overlay && this.overlay.panelOpen;
        }
    }
    // Since we don't directly extend from `base` with it's original types, and we instruct
    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
    return Mixin;
}

/** Mixin to augment a directive with a `required` property. */
function mixinRequired(base) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this._required = false;
        }
        get required() {
            return this._required;
        }
        set required(value) {
            this._required = coerceBooleanProperty(value);
        }
    };
}

/** Mixin to augment a directive with a `size` property. */
function mixinSize(base, defaultSize) {
    return class extends base {
        constructor(...args) {
            super(...args);
            this.defaultSize = defaultSize;
            // Set the default size that can be specified from the mixin.
            this.size = defaultSize;
        }
        get size() {
            return this._size;
        }
        set size(value) {
            const size = value || this.defaultSize;
            if (size !== this._size) {
                if (this._size) {
                    this._elementRef.nativeElement.classList.remove(`novo-size-${this._size}`);
                }
                if (size) {
                    this._elementRef.nativeElement.classList.add(`novo-size-${size}`);
                }
                this._size = size;
            }
        }
    };
}

/** Mixin to augment a directive with a `tabIndex` property. */
function mixinTabIndex(base, defaultTabIndex = 0) {
    // Note: We cast `base` to `unknown` and then `Constructor`. It could be an abstract class,
    // but given we `extend` it from another class, we can assume a constructor being accessible.
    class Mixin extends base {
        constructor(...args) {
            super(...args);
            this._tabIndex = defaultTabIndex;
            this.defaultTabIndex = defaultTabIndex;
        }
        get tabIndex() {
            return this.disabled ? -1 : this._tabIndex;
        }
        set tabIndex(value) {
            // If the specified tabIndex value is null or undefined, fall back to the default value.
            this._tabIndex = value != null ? coerceNumberProperty(value) : this.defaultTabIndex;
        }
    }
    // Since we don't directly extend from `base` with it's original types, and we instruct
    // TypeScript that `T` actually is instantiatable through `new`, the types don't overlap.
    // This is a limitation in TS as abstract classes cannot be typed properly dynamically.
    return Mixin;
}

// Angular
class NovoOverlayTemplateComponent {
    constructor(overlay, viewContainerRef, zone, changeDetectorRef, document) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.id = `novo-overlay-${Date.now()}`;
        this.position = 'default';
        this.scrollStrategy = 'reposition';
        this.closeOnSelect = true;
        this.hasBackdrop = false;
        this.select = new EventEmitter();
        this.opening = new EventEmitter();
        this.closing = new EventEmitter();
    }
    ngOnDestroy() {
        this.destroyOverlay();
    }
    get panelOpen() {
        return this.overlayRef && this.overlayRef.hasAttached();
    }
    set parent(value) {
        this._parent = value;
        this.checkSizes();
    }
    get parent() {
        return this._parent;
    }
    openPanel() {
        if (!this.overlayRef) {
            this.createOverlay(this.template);
        }
        else {
            this.checkSizes();
        }
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            this.overlayRef.attach(this.portal);
            this.closingActionsSubscription = this.subscribeToClosingActions();
        }
        this.changeDetectorRef.markForCheck();
        setTimeout(() => {
            if (this.overlayRef) {
                this.overlayRef.updatePosition();
                this.opening.emit(true);
                setTimeout(() => {
                    // TODO: @charlesabarnes Remove this once we remove table
                    if (this.overlayRef) {
                        this.overlayRef.updatePosition();
                    }
                });
            }
        });
    }
    closePanel() {
        this.zone.run(() => {
            if (this.overlayRef && this.overlayRef.hasAttached()) {
                this.overlayRef.detach();
                this.closingActionsSubscription.unsubscribe();
            }
            this.closing.emit(false);
            if (this.panelOpen) {
                this.changeDetectorRef.markForCheck();
            }
        });
    }
    onClosingAction(event) {
        this.closePanel();
    }
    /**
     * A stream of actions that should close the autocomplete panel, including
     * when an option is selected, on blur, and when TAB is pressed.
     */
    get panelClosingActions() {
        return merge(
        // this.overlayTemplate._keyManager.tabOut,
        this.outsideClickStream);
    }
    /** Stream of clicks outside of the autocomplete panel. */
    get outsideClickStream() {
        if (!this.document) {
            return of();
        }
        return merge(fromEvent(this.document, 'mouseup'), fromEvent(this.document, 'touchend')).pipe(filter((event) => {
            const clickTarget = event.target;
            const clickedOutside = this.panelOpen &&
                clickTarget !== this.getConnectedElement().nativeElement &&
                !this.getConnectedElement().nativeElement.contains(clickTarget) &&
                (!!this.overlayRef && !this.overlayRef.overlayElement.contains(clickTarget)) &&
                !this.elementIsInNestedOverlay(clickTarget);
            if (this.panelOpen && !!this.overlayRef && this.overlayRef.overlayElement.contains(clickTarget) && this.closeOnSelect) {
                this.select.emit(event);
            }
            return clickedOutside;
        }));
    }
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    subscribeToClosingActions() {
        const firstStable = this.zone.onStable.asObservable().pipe(first());
        // const valueChanges = Observable.from(this.value);
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(() => {
            return this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        first())
            // set the value, close the panel, and complete.
            .subscribe((event) => this.onClosingAction(event)));
    }
    createOverlay(template) {
        this.portal = new TemplatePortal(template, this.viewContainerRef);
        this.overlayRef = this.overlay.create(this.getOverlayConfig());
        this.overlayRef.backdropClick().subscribe(() => this.closePanel());
    }
    destroyOverlay() {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = undefined;
        }
    }
    getOverlayConfig() {
        const config = new OverlayConfig();
        if (!this.width) {
            config.width = this.getHostWidth();
        }
        else {
            config.width = this.width;
        }
        if (this.height) {
            config.height = this.height;
        }
        config.positionStrategy = this.getPosition();
        config.hasBackdrop = this.hasBackdrop;
        config.direction = 'ltr';
        config.scrollStrategy = this.getScrollStrategy();
        return config;
    }
    /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     */
    getPosition() {
        if (this.position === 'center') {
            return this.overlay
                .position()
                .flexibleConnectedTo(this.getConnectedElement())
                .withFlexibleDimensions(false)
                .withPositions([
                { originX: 'start', originY: 'center', overlayX: 'start', overlayY: 'center' },
                { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'top' },
                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'bottom' },
            ]);
        }
        const [originX, fallbackX] = this.position.includes('right') ? ['end', 'start'] : ['start', 'end'];
        const [originY, overlayY] = this.position.includes('top') ? ['top', 'bottom'] : ['bottom', 'top'];
        const defaultPosition = { originX, originY, overlayX: originX, overlayY };
        let strategy = this.overlay
            .position()
            .flexibleConnectedTo(this.getConnectedElement())
            .withFlexibleDimensions(false)
            .withPositions([defaultPosition]);
        if (this.position === 'bottom') {
            strategy = strategy.withPositions([defaultPosition, { originX: fallbackX, originY: 'bottom', overlayX: fallbackX, overlayY: 'top' }]);
        }
        else if (this.position === 'right' || this.position === 'default' || this.position.includes('above-below')) {
            strategy = strategy.withPositions([
                defaultPosition,
                { originX, originY: 'top', overlayX: originX, overlayY: 'bottom' },
                { originX: fallbackX, originY: 'bottom', overlayX: fallbackX, overlayY: 'top' },
                { originX: fallbackX, originY: 'top', overlayX: fallbackX, overlayY: 'bottom' },
            ]);
            if (!this.position.includes('above-below')) {
                strategy = strategy.withPositions([
                    defaultPosition,
                    { originX, originY: 'center', overlayX: originX, overlayY: 'center' },
                    { originX: fallbackX, originY: 'center', overlayX: fallbackX, overlayY: 'center' },
                ]);
            }
        }
        return strategy;
    }
    getScrollStrategy() {
        switch (this.scrollStrategy) {
            case 'block':
                return this.overlay.scrollStrategies.block();
            case 'reposition':
                return this.overlay.scrollStrategies.reposition();
            default:
                return this.overlay.scrollStrategies.close();
        }
    }
    checkSizes() {
        if (this.overlayRef) {
            if (!this.width) {
                this.overlayRef.getConfig().width = this.getHostWidth();
            }
            if (this.height) {
                this.overlayRef.getConfig().height = this.height;
            }
            this.overlayRef.updateSize(this.overlayRef.getConfig());
            this.overlayRef.updatePosition();
            this.changeDetectorRef.markForCheck();
        }
    }
    getConnectedElement() {
        return this.parent;
    }
    elementIsInNestedOverlay(el) {
        while (el.parentNode) {
            if (Helpers.isString(el.id) &&
                (el.id?.includes('novo-overlay-') || el.id?.includes('modal-container-'))) {
                // checking to see if the current overlay is newer (in front of the parent overlay)
                // example text novo-overlay-1666291728835
                return this.id.split('-')[2] < el.id.split('-')[2];
            }
            el = el.parentNode;
        }
        return false;
    }
    getHostWidth() {
        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
    }
}
NovoOverlayTemplateComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOverlayTemplateComponent, deps: [{ token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoOverlayTemplateComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: { position: "position", scrollStrategy: "scrollStrategy", width: "width", height: "height", closeOnSelect: "closeOnSelect", hasBackdrop: "hasBackdrop", parent: "parent" }, outputs: { select: "select", opening: "opening", closing: "closing" }, viewQueries: [{ propertyName: "template", first: true, predicate: TemplateRef, descendants: true }, { propertyName: "panel", first: true, predicate: ["panel"], descendants: true }], ngImport: i0, template: `
    <ng-template>
      <div class="novo-overlay-panel" role="listbox" [id]="id" #panel><ng-content></ng-content></div>
    </ng-template>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOverlayTemplateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-overlay-template',
                    template: `
    <ng-template>
      <div class="novo-overlay-panel" role="listbox" [id]="id" #panel><ng-content></ng-content></div>
    </ng-template>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { template: [{
                type: ViewChild,
                args: [TemplateRef]
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], position: [{
                type: Input
            }], scrollStrategy: [{
                type: Input
            }], width: [{
                type: Input
            }], height: [{
                type: Input
            }], closeOnSelect: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], select: [{
                type: Output
            }], opening: [{
                type: Output
            }], closing: [{
                type: Output
            }], parent: [{
                type: Input
            }] } });

class NovoDropDownTrigger {
    constructor(element) {
        this.element = element;
    }
}
NovoDropDownTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropDownTrigger, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoDropDownTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDropDownTrigger, selector: "[dropdownTrigger]", host: { classAttribute: "novo-dropdown-trigger" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropDownTrigger, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dropdownTrigger]',
                    host: {
                        class: 'novo-dropdown-trigger',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
// Create Base Class from Mixins
// Boilerplate for applying mixins
class NovoDropdownBase {
    constructor() { }
}
const NovoDropdowMixins = mixinOverlay(mixinTabIndex(mixinDisabled(NovoDropdownBase), 1));
class NovoDropdownElement extends NovoDropdowMixins {
    constructor(element, ref) {
        super();
        this.element = element;
        this.ref = ref;
        this.parentScrollAction = 'close';
        this.side = 'default';
        this.scrollStrategy = 'reposition';
        /**
         * Keep dropdown open after an item is selected
         */
        this.keepOpen = false;
        this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        this.appendToBody = false; // Deprecated
        this.toggled = new EventEmitter();
        this._selectedOptionChanges = Subscription.EMPTY;
        /** The Subject to complete all subscriptions when destroyed. */
        this._onDestroy = new Subject();
        this._multiple = false;
        this.clickHandler = this.togglePanel.bind(this);
        this.closeHandler = this.closePanel.bind(this);
    }
    /** Whether the user should be allowed to select multiple options. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    get button() {
        return this._trigger || this._button;
    }
    ngOnInit() {
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
    }
    ngAfterContentInit() {
        // Add a click handler to the button to toggle the menu
        this.button.element.nativeElement.addEventListener('click', this.clickHandler);
        this.button.element.nativeElement.tabIndex = -1;
        this.options.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            this._initKeyManager();
            this._watchSelectionEvents();
        });
        this._initKeyManager();
        this._watchSelectionEvents();
        this.focus();
    }
    ngAfterViewInit() {
        this._watchPanelEvents();
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
        // Remove listener
        if (this.button) {
            this.button.element.nativeElement.removeEventListener('click', this.clickHandler);
        }
    }
    focus(options) {
        if (!this.disabled) {
            this.element.nativeElement.focus(options);
        }
    }
    set items(items) {
        // this._items = items;
        // this.activeIndex = -1;
        // // Get the innerText of all the items to allow for searching
        // this._textItems = items.map((item: NovoItemElement) => {
        //   return item.element.nativeElement.innerText;
        // });
    }
    /** Handles all keydown events on the select. */
    _handleKeydown(event) {
        if (!this.disabled) {
            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
        }
    }
    /** Handles keyboard events while the select is closed. */
    _handleClosedKeydown(event) {
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */ || key === "ArrowLeft" /* ArrowLeft */ || key === "ArrowRight" /* ArrowRight */;
        const isOpenKey = key === "Enter" /* Enter */ || key === " " /* Space */;
        const manager = this._keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.openPanel();
        }
    }
    /** Handles keyboard events when the selected is open. */
    _handleOpenKeydown(event) {
        const manager = this._keyManager;
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */;
        const isTyping = manager.isTyping();
        const isInputField = event.target;
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.closePanel();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping && (key === "Enter" /* Enter */ || key === " " /* Space */) && manager.activeItem && !hasModifierKey(event)) {
            event.preventDefault();
            this._multiple ? manager.activeItem._selectViaInteraction() : manager.activeItem._clickViaInteraction();
        }
        else if (!isTyping && this._multiple && ['a', 'A'].includes(key) && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some((opt) => !opt.disabled && !opt.selected);
            this.options.forEach((option) => {
                if (!option.disabled) {
                    hasDeselectedOptions ? option.select() : option.deselect();
                }
            });
        }
        else if ("Escape" /* Escape */ === key) {
            this.closePanel();
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem._selectViaInteraction();
            }
        }
    }
    _watchPanelEvents() {
        const panelStateChanges = merge(this.overlay.opening, this.overlay.closing);
        panelStateChanges.pipe(takeUntil(this._onDestroy)).subscribe((event) => this.toggled.emit(event));
    }
    _watchSelectionEvents() {
        const selectionEvents = this.options ? merge(...this.options.map((option) => option.onSelectionChange)) : of();
        this._selectedOptionChanges.unsubscribe();
        this._selectedOptionChanges = selectionEvents.pipe(takeUntil(this._onDestroy)).subscribe((event) => {
            // this.handleSelection(event.source, event.isUserInput);
            if (event.isUserInput && !this.multiple) {
                this._clearPreviousSelectedOption(this._keyManager.activeItem);
                if (!this.keepOpen && this.panelOpen) {
                    this.closePanel();
                    this.focus();
                }
            }
        });
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this.options.forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    _initKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withTypeAhead(250).withHomeAndEnd();
        // .withAllowedModifierKeys(['shiftKey']);
        this._keyManager.tabOut.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            if (this.panelOpen) {
                // Restore focus to the trigger before closing. Ensures that the focus
                // position won't be lost if the user got focus into the overlay.
                this.focus();
                this.closePanel();
            }
        });
        this._keyManager.change.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            if (this.panelOpen && this.overlay) {
                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);
            }
        });
    }
    /** Scrolls the active option into view. */
    _scrollOptionIntoView(index) {
        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);
        const itemHeight = this._getItemHeight();
        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, this.panel.nativeElement.offsetHeight);
    }
    /** Calculates the height of the select's options. */
    _getItemHeight() {
        let [first] = this.options;
        if (first) {
            return first._getHostElement().offsetHeight;
        }
        return 0;
    }
}
NovoDropdownElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownElement, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoDropdownElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDropdownElement, selector: "novo-dropdown", inputs: { parentScrollSelector: "parentScrollSelector", parentScrollAction: "parentScrollAction", containerClass: "containerClass", side: "side", scrollStrategy: "scrollStrategy", keepOpen: "keepOpen", height: "height", width: "width", appendToBody: "appendToBody", multiple: "multiple" }, outputs: { toggled: "toggled" }, host: { listeners: { "keydown": "_handleKeydown($event)" }, properties: { "attr.tabIndex": "disabled ? -1 : 0" } }, queries: [{ propertyName: "_button", first: true, predicate: NovoButtonElement, descendants: true }, { propertyName: "_trigger", first: true, predicate: NovoDropDownTrigger, descendants: true }, { propertyName: "optionGroups", predicate: NovoOptgroup, descendants: true }, { propertyName: "options", predicate: NovoOption, descendants: true }], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }, { propertyName: "panel", first: true, predicate: ["panel"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-content select="button,novo-button,[dropdownTrigger]" #trigger></ng-content>
    <novo-overlay-template [parent]="element" [width]="width" [position]="side" [scrollStrategy]="scrollStrategy">
      <div #panel class="dropdown-container {{ containerClass }}" [style.height.px]="height" [class.has-height]="!!height">
        <ng-content></ng-content>
      </div>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDropdownElement.prototype, "keepOpen", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-dropdown',
                    template: `
    <ng-content select="button,novo-button,[dropdownTrigger]" #trigger></ng-content>
    <novo-overlay-template [parent]="element" [width]="width" [position]="side" [scrollStrategy]="scrollStrategy">
      <div #panel class="dropdown-container {{ containerClass }}" [style.height.px]="height" [class.has-height]="!!height">
        <ng-content></ng-content>
      </div>
    </novo-overlay-template>
  `,
                    // providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoDropdownElement }],
                    host: {
                        '[attr.tabIndex]': 'disabled ? -1 : 0',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { parentScrollSelector: [{
                type: Input
            }], parentScrollAction: [{
                type: Input
            }], containerClass: [{
                type: Input
            }], side: [{
                type: Input
            }], scrollStrategy: [{
                type: Input
            }], keepOpen: [{
                type: Input
            }], height: [{
                type: Input
            }], width: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], toggled: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }], _button: [{
                type: ContentChild,
                args: [NovoButtonElement]
            }], _trigger: [{
                type: ContentChild,
                args: [NovoDropDownTrigger]
            }], optionGroups: [{
                type: ContentChildren,
                args: [NovoOptgroup, { descendants: true }]
            }], options: [{
                type: ContentChildren,
                args: [NovoOption, { descendants: true }]
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], multiple: [{
                type: Input
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
// Deprecated below here ---------------------------
class NovoItemElement {
    constructor(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new EventEmitter();
        this.active = false;
        notify(`'item' element has been deprecated. Please use 'novo-option' and 'novo-optgroup'.`);
    }
    onClick(event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.closePanel();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    }
}
NovoItemElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemElement, deps: [{ token: NovoDropdownElement }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoItemElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoItemElement, selector: "item", inputs: { disabled: "disabled", keepOpen: "keepOpen" }, outputs: { action: "action" }, host: { listeners: { "click": "onClick($event)" }, properties: { "class.disabled": "disabled", "class.active": "active" } }, ngImport: i0, template: '<novo-option><ng-content></ng-content></novo-option>', isInline: true, components: [{ type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoItemElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'item',
                    template: '<novo-option><ng-content></ng-content></novo-option>',
                    host: {
                        '[class.disabled]': 'disabled',
                        '[class.active]': 'active',
                    },
                }]
        }], ctorParameters: function () { return [{ type: NovoDropdownElement }, { type: i0.ElementRef }]; }, propDecorators: { disabled: [{
                type: Input
            }], keepOpen: [{
                type: Input
            }], action: [{
                type: Output
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });
class NovoDropdownListElement {
    constructor(dropdown) {
        this.dropdown = dropdown;
        notify(`'list' element has been deprecated. Please use novo-option and novo-optgroup.`);
    }
    ngAfterContentInit() {
        this.dropdown.items = this.items;
        this.items.changes.subscribe(() => {
            this.dropdown.items = this.items;
        });
    }
}
NovoDropdownListElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownListElement, deps: [{ token: NovoDropdownElement }], target: i0.ɵɵFactoryTarget.Component });
NovoDropdownListElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDropdownListElement, selector: "list", queries: [{ propertyName: "items", predicate: NovoItemElement }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownListElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'list',
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: NovoDropdownElement }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [NovoItemElement]
            }] } });
class NovoDropDownItemHeaderElement {
    constructor() {
        notify(`'dropdown-item-header' element has been deprecated. Please use novo-option and novo-optgroup.`);
    }
}
NovoDropDownItemHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropDownItemHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoDropDownItemHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDropDownItemHeaderElement, selector: "dropdown-item-header", ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropDownItemHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'dropdown-item-header',
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return []; } });

// NG2
// Value accessor for the component (supports ngModel)
const SEARCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoSearchBoxElement),
    multi: true,
};
class NovoSearchBoxElement {
    constructor(element, labels, _changeDetectorRef, _zone) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this._zone = _zone;
        this.icon = 'search';
        this.position = 'bottom-left';
        this.placeholder = 'Search...';
        this.alwaysOpen = false;
        this.color = 'positive';
        this.closeOnSelect = true;
        this.keepOpen = false;
        this.hasBackdrop = false;
        this.allowPropagation = false;
        this.searchChanged = new EventEmitter();
        this.applySearch = new EventEmitter();
        this.focused = false;
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
    }
    /**
     * @name showFasterFind
     * @description This function shows the picker and adds the active class (for animation)
     */
    showSearch(event, forceClose = false) {
        if (!this.panelOpen) {
            // Reset search
            // Set focus on search
            setTimeout(() => {
                const element = this.input.nativeElement;
                if (element) {
                    element.focus();
                }
            }, 10);
        }
        else {
            this.closePanel();
        }
    }
    onFocus() {
        this._zone.run(() => {
            this.focused = true;
            this.openPanel();
        });
    }
    onBlur() {
        if (!this.keepOpen || !this.panelOpen) {
            this.focused = false;
        }
    }
    onSelect() {
        if (!this.keepOpen) {
            this.closePanel();
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        this.overlay.openPanel();
    }
    closePanel() {
        setTimeout(() => this.overlay.closePanel());
        this.focused = false;
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    get active() {
        return this.panelOpen || this.alwaysOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            if (event.keyCode === ENTER) {
                this.applySearch.emit(event);
            }
            this.closePanel();
            if (!this.allowPropagation) {
                event.stopPropagation();
            }
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            this.value = event.target.value;
            this._onChange(event.target.value);
            if (this.debounceSearchChange) {
                clearTimeout(this.debounceSearchChange);
            }
            this.debounceSearchChange = setTimeout(() => {
                this.searchChanged.emit(event.target.value);
            }, 400);
        }
    }
    writeValue(value) {
        this._setValue(value);
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    _setValue(value) {
        this.value = value;
        let toDisplay = value;
        if (value && this.displayField) {
            toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        this.displayValue = toDisplay ? toDisplay : '';
        this.input.nativeElement.value = this.displayValue;
        this._changeDetectorRef.markForCheck();
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.value) {
            this._setValue(event.value);
            this._onChange(event.value);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue(skip) {
        this.writeValue(null);
        this._onChange(null);
    }
}
NovoSearchBoxElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSearchBoxElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NovoSearchBoxElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSearchBoxElement, selector: "novo-search", inputs: { name: "name", icon: "icon", position: "position", placeholder: "placeholder", alwaysOpen: "alwaysOpen", theme: "theme", color: "color", closeOnSelect: "closeOnSelect", displayField: "displayField", displayValue: "displayValue", hint: "hint", keepOpen: "keepOpen", hasBackdrop: "hasBackdrop", allowPropagation: "allowPropagation" }, outputs: { searchChanged: "searchChanged", applySearch: "applySearch" }, host: { properties: { "class.always-open": "this.alwaysOpen", "class.focused": "this.focused", "class.active": "this.active" } }, providers: [SEARCH_VALUE_ACCESSOR], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }, { propertyName: "input", first: true, predicate: ["input"], descendants: true, static: true }], ngImport: i0, template: `
    <!-- SEARCH ICON -->
    <novo-icon (click)="showSearch($event)" [tooltip]="hint" tooltipPosition="bottom">{{ icon }}</novo-icon>
    <!-- SEARCH INPUT -->
    <input
      type="text"
      [attr.name]="name"
      [attr.value]="displayValue"
      [attr.placeholder]="placeholder"
      (focus)="onFocus()"
      (blur)="onBlur()"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      #input
      data-automation-id="novo-search-input"
    />
    <!-- SEARCH OVERLAY -->
    <novo-overlay-template
      [parent]="element"
      [closeOnSelect]="closeOnSelect"
      [position]="position"
      [hasBackdrop]="hasBackdrop"
      (select)="onSelect()"
      (closing)="onBlur()"
    >
      <ng-content></ng-content>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }], directives: [{ type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSearchBoxElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-search',
                    providers: [SEARCH_VALUE_ACCESSOR],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <!-- SEARCH ICON -->
    <novo-icon (click)="showSearch($event)" [tooltip]="hint" tooltipPosition="bottom">{{ icon }}</novo-icon>
    <!-- SEARCH INPUT -->
    <input
      type="text"
      [attr.name]="name"
      [attr.value]="displayValue"
      [attr.placeholder]="placeholder"
      (focus)="onFocus()"
      (blur)="onBlur()"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      #input
      data-automation-id="novo-search-input"
    />
    <!-- SEARCH OVERLAY -->
    <novo-overlay-template
      [parent]="element"
      [closeOnSelect]="closeOnSelect"
      [position]="position"
      [hasBackdrop]="hasBackdrop"
      (select)="onSelect()"
      (closing)="onBlur()"
    >
      <ng-content></ng-content>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { name: [{
                type: Input
            }], icon: [{
                type: Input
            }], position: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], alwaysOpen: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.always-open']
            }], theme: [{
                type: Input
            }], color: [{
                type: Input
            }], closeOnSelect: [{
                type: Input
            }], displayField: [{
                type: Input
            }], displayValue: [{
                type: Input
            }], hint: [{
                type: Input
            }], keepOpen: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], allowPropagation: [{
                type: Input
            }], searchChanged: [{
                type: Output
            }], applySearch: [{
                type: Output
            }], focused: [{
                type: HostBinding,
                args: ['class.focused']
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }], input: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }], active: [{
                type: HostBinding,
                args: ['class.active']
            }] } });

class BreadcrumbItemElement {
    constructor(breadcrumbService, breadcrumbComponent) {
        this.breadcrumbService = breadcrumbService;
        this.breadcrumbComponent = breadcrumbComponent;
        this.showMenu = false;
        this.isSearch = false;
        this.toggleEvent = new EventEmitter();
    }
    ngOnInit() {
        this.menuListDisplay = this.menuList;
    }
    onToggle($event) {
        this.isOpen = $event;
        this.toggleEvent.emit($event);
    }
    searchEvent($event) {
        if (this.menuList) {
            this.menuListDisplay = this.menuList.filter((item) => item.name.toLowerCase().includes($event.toLowerCase()));
        }
    }
    navigateTo($event, item) {
        this.breadcrumbService.navigateTo($event, item);
    }
}
BreadcrumbItemElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbItemElement, deps: [{ token: BreadcrumbService }, { token: NOVO_BREADCRUMB_REF }], target: i0.ɵɵFactoryTarget.Component });
BreadcrumbItemElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: BreadcrumbItemElement, selector: "novo-breadcrumb-item", inputs: { showMenu: "showMenu", customMenuTemplate: "customMenuTemplate", menuList: "menuList", isSearch: "isSearch" }, outputs: { toggleEvent: "toggleEvent" }, ngImport: i0, template: "<ng-container *ngIf=\"showMenu; else breadcrumbContentTpl\">\n  <span [ngClass]=\"{ 'novo-breadcrumb-item-active': isOpen }\" #origin\n    class=\"novo-dropdown-no-border novo-dropdown-origin novo-breadcrumb-dropdown-origin\">\n    <ng-template [ngTemplateOutlet]=\"breadcrumbContentTpl\"></ng-template>\n    <novo-dropdown>\n      <novo-button theme=\"icon\" icon=\"collapse\" size=\"small\"></novo-button>\n      <novo-optgroup class=\"novo-breadcrumb-dropdown-menu\">\n        <div *ngIf=\"isSearch\" class=\"dropdown-search-container\">\n          <novo-search alwaysOpen=\"true\" (searchFn)=\"searchEvent($event)\" [class]=\"'search-in-dropdown'\"></novo-search>\n        </div>\n        <novo-option *ngFor=\"let item of menuListDisplay\" title=\"{{ item.name }}\">\n          <a *ngIf=\"!item.linkType || item.linkType === 'hrefLink'\" [href]=\"item.link\" rel=\"noopener\"\n            [target]=\"item.target ? item.target : '_self'\">{{ item.name }}</a>\n          <a *ngIf=\"item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\" [href]=\"item.link\"\n            (click)=\"navigateTo($event, item)\">{{ item.name }}</a>\n        </novo-option>\n      </novo-optgroup>\n    </novo-dropdown>\n  </span>\n</ng-container>\n\n<ng-template #breadcrumbContentTpl>\n  <span class=\"novo-breadcrumb-item\">\n    <ng-content></ng-content>\n  </span>\n</ng-template>\n\n<ng-template #dropDownMenuTpl>\n  <div>test</div>\n\n</ng-template>\n\n<span class=\"novo-breadcrumb-separator\">\n  <ng-template\n    [ngTemplateOutlet]=\"breadcrumbComponent.separatorIcon ? breadcrumbComponent.separatorIcon : defaultSeparator\"\n    [ngTemplateOutletContext]=\"{\n    $implicit: this\n  }\">\n  </ng-template>\n</span>\n\n<ng-template #defaultSeparator>\n  <span class=\"novo-breadcrumb-separator\">\n    /\n  </span>\n</ng-template>", styles: [".novo-breadcrumb-font-style,:host .novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a,:host .novo-breadcrumb-item{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}.novo-breadcrumb-font-style.text-capitalize,:host .text-capitalize.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-capitalize,:host .text-capitalize.novo-breadcrumb-item{text-transform:capitalize}.novo-breadcrumb-font-style.text-uppercase,:host .text-uppercase.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-uppercase,:host .text-uppercase.novo-breadcrumb-item{text-transform:uppercase}.novo-breadcrumb-font-style.text-nowrap,:host .text-nowrap.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-nowrap,:host .text-nowrap.novo-breadcrumb-item{white-space:nowrap}.novo-breadcrumb-font-style.text-ellipsis,:host .text-ellipsis.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-ellipsis,:host .text-ellipsis.novo-breadcrumb-item{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-breadcrumb-font-style.text-size-default,:host .text-size-default.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-default,:host .text-size-default.novo-breadcrumb-item{font-size:inherit}.novo-breadcrumb-font-style.text-size-body,:host .text-size-body.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-body,:host .text-size-body.novo-breadcrumb-item{font-size:1.3rem}.novo-breadcrumb-font-style.text-size-xs,:host .text-size-xs.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-xs,:host .text-size-xs.novo-breadcrumb-item{font-size:1rem}.novo-breadcrumb-font-style.text-size-sm,:host .text-size-sm.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-sm,:host .text-size-sm.novo-breadcrumb-item{font-size:1.2rem}.novo-breadcrumb-font-style.text-size-md,:host .text-size-md.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-md,:host .text-size-md.novo-breadcrumb-item{font-size:1.3rem}.novo-breadcrumb-font-style.text-size-lg,:host .text-size-lg.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-lg,:host .text-size-lg.novo-breadcrumb-item{font-size:1.6rem}.novo-breadcrumb-font-style.text-size-xl,:host .text-size-xl.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-xl,:host .text-size-xl.novo-breadcrumb-item{font-size:2rem}.novo-breadcrumb-font-style.text-size-2xl,:host .text-size-2xl.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-2xl,:host .text-size-2xl.novo-breadcrumb-item{font-size:2.6rem}.novo-breadcrumb-font-style.text-size-3xl,:host .text-size-3xl.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-3xl,:host .text-size-3xl.novo-breadcrumb-item{font-size:3.2rem}.novo-breadcrumb-font-style.text-size-smaller,:host .text-size-smaller.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-smaller,:host .text-size-smaller.novo-breadcrumb-item{font-size:.8em}.novo-breadcrumb-font-style.text-size-larger,:host .text-size-larger.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-larger,:host .text-size-larger.novo-breadcrumb-item{font-size:1.2em}.novo-breadcrumb-font-style.text-color-black,:host .text-color-black.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-black,:host .text-color-black.novo-breadcrumb-item{color:#000}.novo-breadcrumb-font-style.text-color-white,:host .text-color-white.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-white,:host .text-color-white.novo-breadcrumb-item{color:#fff}.novo-breadcrumb-font-style.text-color-gray,:host .text-color-gray.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-gray,:host .text-color-gray.novo-breadcrumb-item{color:#9e9e9e}.novo-breadcrumb-font-style.text-color-grey,:host .text-color-grey.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-grey,:host .text-color-grey.novo-breadcrumb-item{color:#9e9e9e}.novo-breadcrumb-font-style.text-color-offWhite,:host .text-color-offWhite.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-offWhite,:host .text-color-offWhite.novo-breadcrumb-item{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-bright,:host .text-color-bright.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-bright,:host .text-color-bright.novo-breadcrumb-item{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-light,:host .text-color-light.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-light,:host .text-color-light.novo-breadcrumb-item{color:#dbdbdb}.novo-breadcrumb-font-style.text-color-neutral,:host .text-color-neutral.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-neutral,:host .text-color-neutral.novo-breadcrumb-item{color:#4f5361}.novo-breadcrumb-font-style.text-color-dark,:host .text-color-dark.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-dark,:host .text-color-dark.novo-breadcrumb-item{color:#3d464d}.novo-breadcrumb-font-style.text-color-orange,:host .text-color-orange.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-orange,:host .text-color-orange.novo-breadcrumb-item{color:#ff6900}.novo-breadcrumb-font-style.text-color-navigation,:host .text-color-navigation.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-navigation,:host .text-color-navigation.novo-breadcrumb-item{color:#202945}.novo-breadcrumb-font-style.text-color-skyBlue,:host .text-color-skyBlue.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-skyBlue,:host .text-color-skyBlue.novo-breadcrumb-item{color:#009bdf}.novo-breadcrumb-font-style.text-color-steel,:host .text-color-steel.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-steel,:host .text-color-steel.novo-breadcrumb-item{color:#5b6770}.novo-breadcrumb-font-style.text-color-metal,:host .text-color-metal.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-metal,:host .text-color-metal.novo-breadcrumb-item{color:#637893}.novo-breadcrumb-font-style.text-color-sand,:host .text-color-sand.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-sand,:host .text-color-sand.novo-breadcrumb-item{color:#f4f4f4}.novo-breadcrumb-font-style.text-color-silver,:host .text-color-silver.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-silver,:host .text-color-silver.novo-breadcrumb-item{color:#e2e2e2}.novo-breadcrumb-font-style.text-color-stone,:host .text-color-stone.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-stone,:host .text-color-stone.novo-breadcrumb-item{color:#bebebe}.novo-breadcrumb-font-style.text-color-ash,:host .text-color-ash.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-ash,:host .text-color-ash.novo-breadcrumb-item{color:#a0a0a0}.novo-breadcrumb-font-style.text-color-slate,:host .text-color-slate.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-slate,:host .text-color-slate.novo-breadcrumb-item{color:#707070}.novo-breadcrumb-font-style.text-color-onyx,:host .text-color-onyx.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-onyx,:host .text-color-onyx.novo-breadcrumb-item{color:#526980}.novo-breadcrumb-font-style.text-color-charcoal,:host .text-color-charcoal.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-charcoal,:host .text-color-charcoal.novo-breadcrumb-item{color:#282828}.novo-breadcrumb-font-style.text-color-moonlight,:host .text-color-moonlight.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-moonlight,:host .text-color-moonlight.novo-breadcrumb-item{color:#1a242f}.novo-breadcrumb-font-style.text-color-midnight,:host .text-color-midnight.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-midnight,:host .text-color-midnight.novo-breadcrumb-item{color:#202945}.novo-breadcrumb-font-style.text-color-darkness,:host .text-color-darkness.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-darkness,:host .text-color-darkness.novo-breadcrumb-item{color:#161f27}.novo-breadcrumb-font-style.text-color-navy,:host .text-color-navy.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-navy,:host .text-color-navy.novo-breadcrumb-item{color:#0d2d42}.novo-breadcrumb-font-style.text-color-aqua,:host .text-color-aqua.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-aqua,:host .text-color-aqua.novo-breadcrumb-item{color:#3bafda}.novo-breadcrumb-font-style.text-color-ocean,:host .text-color-ocean.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-ocean,:host .text-color-ocean.novo-breadcrumb-item{color:#4a89dc}.novo-breadcrumb-font-style.text-color-mint,:host .text-color-mint.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-mint,:host .text-color-mint.novo-breadcrumb-item{color:#37bc9b}.novo-breadcrumb-font-style.text-color-grass,:host .text-color-grass.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-grass,:host .text-color-grass.novo-breadcrumb-item{color:#8cc152}.novo-breadcrumb-font-style.text-color-sunflower,:host .text-color-sunflower.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-sunflower,:host .text-color-sunflower.novo-breadcrumb-item{color:#f6b042}.novo-breadcrumb-font-style.text-color-bittersweet,:host .text-color-bittersweet.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-bittersweet,:host .text-color-bittersweet.novo-breadcrumb-item{color:#eb6845}.novo-breadcrumb-font-style.text-color-grapefruit,:host .text-color-grapefruit.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-grapefruit,:host .text-color-grapefruit.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-carnation,:host .text-color-carnation.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-carnation,:host .text-color-carnation.novo-breadcrumb-item{color:#d770ad}.novo-breadcrumb-font-style.text-color-lavender,:host .text-color-lavender.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-lavender,:host .text-color-lavender.novo-breadcrumb-item{color:#967adc}.novo-breadcrumb-font-style.text-color-mountain,:host .text-color-mountain.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-mountain,:host .text-color-mountain.novo-breadcrumb-item{color:#9678b6}.novo-breadcrumb-font-style.text-color-info,:host .text-color-info.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-info,:host .text-color-info.novo-breadcrumb-item{color:#4a89dc}.novo-breadcrumb-font-style.text-color-positive,:host .text-color-positive.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-positive,:host .text-color-positive.novo-breadcrumb-item{color:#4a89dc}.novo-breadcrumb-font-style.text-color-success,:host .text-color-success.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-success,:host .text-color-success.novo-breadcrumb-item{color:#8cc152}.novo-breadcrumb-font-style.text-color-negative,:host .text-color-negative.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-negative,:host .text-color-negative.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-danger,:host .text-color-danger.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-danger,:host .text-color-danger.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-error,:host .text-color-error.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-error,:host .text-color-error.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-warning,:host .text-color-warning.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-warning,:host .text-color-warning.novo-breadcrumb-item{color:#f6b042}.novo-breadcrumb-font-style.text-color-empty,:host .text-color-empty.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-empty,:host .text-color-empty.novo-breadcrumb-item{color:#cccdcc}.novo-breadcrumb-font-style.text-color-disabled,:host .text-color-disabled.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-disabled,:host .text-color-disabled.novo-breadcrumb-item{color:#bebebe}.novo-breadcrumb-font-style.text-color-background,:host .text-color-background.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-background,:host .text-color-background.novo-breadcrumb-item{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-backgroundDark,:host .text-color-backgroundDark.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-backgroundDark,:host .text-color-backgroundDark.novo-breadcrumb-item{color:#e2e2e2}.novo-breadcrumb-font-style.text-color-presentation,:host .text-color-presentation.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-presentation,:host .text-color-presentation.novo-breadcrumb-item{color:#5b6770}.novo-breadcrumb-font-style.text-color-bullhorn,:host .text-color-bullhorn.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-bullhorn,:host .text-color-bullhorn.novo-breadcrumb-item{color:#ff6900}.novo-breadcrumb-font-style.text-color-pulse,:host .text-color-pulse.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-pulse,:host .text-color-pulse.novo-breadcrumb-item{color:#3bafda}.novo-breadcrumb-font-style.text-color-company,:host .text-color-company.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-company,:host .text-color-company.novo-breadcrumb-item{color:#39d}.novo-breadcrumb-font-style.text-color-candidate,:host .text-color-candidate.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-candidate,:host .text-color-candidate.novo-breadcrumb-item{color:#4b7}.novo-breadcrumb-font-style.text-color-lead,:host .text-color-lead.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-lead,:host .text-color-lead.novo-breadcrumb-item{color:#a69}.novo-breadcrumb-font-style.text-color-contact,:host .text-color-contact.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-contact,:host .text-color-contact.novo-breadcrumb-item{color:#fa4}.novo-breadcrumb-font-style.text-color-clientcontact,:host .text-color-clientcontact.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-clientcontact,:host .text-color-clientcontact.novo-breadcrumb-item{color:#fa4}.novo-breadcrumb-font-style.text-color-opportunity,:host .text-color-opportunity.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-opportunity,:host .text-color-opportunity.novo-breadcrumb-item{color:#625}.novo-breadcrumb-font-style.text-color-job,:host .text-color-job.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-job,:host .text-color-job.novo-breadcrumb-item{color:#b56}.novo-breadcrumb-font-style.text-color-joborder,:host .text-color-joborder.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-joborder,:host .text-color-joborder.novo-breadcrumb-item{color:#b56}.novo-breadcrumb-font-style.text-color-submission,:host .text-color-submission.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-submission,:host .text-color-submission.novo-breadcrumb-item{color:#a9adbb}.novo-breadcrumb-font-style.text-color-sendout,:host .text-color-sendout.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-sendout,:host .text-color-sendout.novo-breadcrumb-item{color:#747884}.novo-breadcrumb-font-style.text-color-placement,:host .text-color-placement.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-placement,:host .text-color-placement.novo-breadcrumb-item{color:#0b344f}.novo-breadcrumb-font-style.text-color-note,:host .text-color-note.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-note,:host .text-color-note.novo-breadcrumb-item{color:#747884}.novo-breadcrumb-font-style.text-color-contract,:host .text-color-contract.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-contract,:host .text-color-contract.novo-breadcrumb-item{color:#454ea0}.novo-breadcrumb-font-style.text-color-jobCode,:host .text-color-jobCode.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-jobCode,:host .text-color-jobCode.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-earnCode,:host .text-color-earnCode.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-earnCode,:host .text-color-earnCode.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-invoiceStatement,:host .text-color-invoiceStatement.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-invoiceStatement,:host .text-color-invoiceStatement.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-billableCharge,:host .text-color-billableCharge.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-billableCharge,:host .text-color-billableCharge.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-payableCharge,:host .text-color-payableCharge.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-payableCharge,:host .text-color-payableCharge.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-user,:host .text-color-user.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-user,:host .text-color-user.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-corporateUser,:host .text-color-corporateUser.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-corporateUser,:host .text-color-corporateUser.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-distributionList,:host .text-color-distributionList.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-distributionList,:host .text-color-distributionList.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-credential,:host .text-color-credential.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-credential,:host .text-color-credential.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-person,:host .text-color-person.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-person,:host .text-color-person.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.margin-before,:host .margin-before.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.margin-before,:host .margin-before.novo-breadcrumb-item{margin-top:.4rem}.novo-breadcrumb-font-style.margin-after,:host .margin-after.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.margin-after,:host .margin-after.novo-breadcrumb-item{margin-bottom:.8rem}.novo-breadcrumb-font-style.text-length-small,:host .text-length-small.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-length-small,:host .text-length-small.novo-breadcrumb-item{max-width:40ch}.novo-breadcrumb-font-style.text-length-medium,:host .text-length-medium.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-length-medium,:host .text-length-medium.novo-breadcrumb-item{max-width:55ch}.novo-breadcrumb-font-style.text-length-large,:host .text-length-large.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-length-large,:host .text-length-large.novo-breadcrumb-item{max-width:70ch}.novo-breadcrumb-font-style.text-weight-hairline,:host .text-weight-hairline.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-hairline,:host .text-weight-hairline.novo-breadcrumb-item{font-weight:100}.novo-breadcrumb-font-style.text-weight-thin,:host .text-weight-thin.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-thin,:host .text-weight-thin.novo-breadcrumb-item{font-weight:200}.novo-breadcrumb-font-style.text-weight-light,:host .text-weight-light.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-light,:host .text-weight-light.novo-breadcrumb-item{font-weight:300}.novo-breadcrumb-font-style.text-weight-normal,:host .text-weight-normal.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-normal,:host .text-weight-normal.novo-breadcrumb-item{font-weight:400}.novo-breadcrumb-font-style.text-weight-medium,:host .text-weight-medium.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-medium,:host .text-weight-medium.novo-breadcrumb-item{font-weight:500}.novo-breadcrumb-font-style.text-weight-semibold,:host .text-weight-semibold.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-semibold,:host .text-weight-semibold.novo-breadcrumb-item{font-weight:600}.novo-breadcrumb-font-style.text-weight-bold,:host .text-weight-bold.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-bold,:host .text-weight-bold.novo-breadcrumb-item{font-weight:700}.novo-breadcrumb-font-style.text-weight-extrabold,:host .text-weight-extrabold.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-extrabold,:host .text-weight-extrabold.novo-breadcrumb-item{font-weight:800}.novo-breadcrumb-font-style.text-weight-heavy,:host .text-weight-heavy.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-heavy,:host .text-weight-heavy.novo-breadcrumb-item{font-weight:900}.novo-breadcrumb-font-style.text-weight-lighter,:host .text-weight-lighter.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-lighter,:host .text-weight-lighter.novo-breadcrumb-item{font-weight:lighter}.novo-breadcrumb-font-style.text-weight-bolder,:host .text-weight-bolder.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-bolder,:host .text-weight-bolder.novo-breadcrumb-item{font-weight:bolder}:host{display:flex;align-items:center;flex-flow:row nowrap}:host .novo-breadcrumb-item{cursor:auto;display:flex;align-items:center;flex-flow:row nowrap}:host .novo-breadcrumb-item ::ng-deep a:hover{text-decoration:none}:host .novo-breadcrumb-item ::ng-deep a{color:#4a89dc;cursor:pointer}:host .novo-breadcrumb-item ::ng-deep a:focus{text-decoration:none}:host .novo-breadcrumb-down-icon{vertical-align:middle;display:inline-block;cursor:pointer;width:16px;height:16px;margin-right:-5px;text-align:center;outline:none}:host .novo-breadcrumb-down-icon:hover svg g polygon{fill:#3d464d;fill:var(--text-main, #3d464d)}:host .novo-breadcrumb-item-active{color:#3d464d;color:var(--text-main, #3d464d)}:host .novo-breadcrumb-item-active ::ng-deep a{color:#3d464d;color:var(--text-main, #3d464d);text-decoration:none}:host .novo-breadcrumb-item-active svg g polygon{fill:#3d464d;fill:var(--text-main, #3d464d)}:host .novo-breadcrumb-item-active span{color:#3d464d;color:var(--text-main, #3d464d)}:host .novo-breadcrumb-separator{margin:0 3px}:host .novo-breadcrumb-dropdown-menu{padding:10px 0;max-width:200px}:host .novo-breadcrumb-dropdown-menu li{padding:0 15px;font-size:12px;line-height:36px;width:200px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;cursor:pointer}:host .novo-breadcrumb-dropdown-menu li a{color:#3d464d;line-height:36px;width:170px;display:inline-block}:host .novo-breadcrumb-dropdown-menu li a:focus{text-decoration:none}:host .novo-breadcrumb-dropdown-menu li:hover{background:#dbdbdb}:host .novo-breadcrumb-dropdown-menu li:hover a{text-decoration:none}:host .novo-search-container{max-width:200px}:host span.novo-breadcrumb-dropdown-origin{min-width:unset;display:inline-flex;padding:0}:host novo-search{width:100%}\n"], components: [{ type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation"], outputs: ["searchChanged", "applySearch"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbItemElement, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'novo-breadcrumb-item', template: "<ng-container *ngIf=\"showMenu; else breadcrumbContentTpl\">\n  <span [ngClass]=\"{ 'novo-breadcrumb-item-active': isOpen }\" #origin\n    class=\"novo-dropdown-no-border novo-dropdown-origin novo-breadcrumb-dropdown-origin\">\n    <ng-template [ngTemplateOutlet]=\"breadcrumbContentTpl\"></ng-template>\n    <novo-dropdown>\n      <novo-button theme=\"icon\" icon=\"collapse\" size=\"small\"></novo-button>\n      <novo-optgroup class=\"novo-breadcrumb-dropdown-menu\">\n        <div *ngIf=\"isSearch\" class=\"dropdown-search-container\">\n          <novo-search alwaysOpen=\"true\" (searchFn)=\"searchEvent($event)\" [class]=\"'search-in-dropdown'\"></novo-search>\n        </div>\n        <novo-option *ngFor=\"let item of menuListDisplay\" title=\"{{ item.name }}\">\n          <a *ngIf=\"!item.linkType || item.linkType === 'hrefLink'\" [href]=\"item.link\" rel=\"noopener\"\n            [target]=\"item.target ? item.target : '_self'\">{{ item.name }}</a>\n          <a *ngIf=\"item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\" [href]=\"item.link\"\n            (click)=\"navigateTo($event, item)\">{{ item.name }}</a>\n        </novo-option>\n      </novo-optgroup>\n    </novo-dropdown>\n  </span>\n</ng-container>\n\n<ng-template #breadcrumbContentTpl>\n  <span class=\"novo-breadcrumb-item\">\n    <ng-content></ng-content>\n  </span>\n</ng-template>\n\n<ng-template #dropDownMenuTpl>\n  <div>test</div>\n\n</ng-template>\n\n<span class=\"novo-breadcrumb-separator\">\n  <ng-template\n    [ngTemplateOutlet]=\"breadcrumbComponent.separatorIcon ? breadcrumbComponent.separatorIcon : defaultSeparator\"\n    [ngTemplateOutletContext]=\"{\n    $implicit: this\n  }\">\n  </ng-template>\n</span>\n\n<ng-template #defaultSeparator>\n  <span class=\"novo-breadcrumb-separator\">\n    /\n  </span>\n</ng-template>", styles: [".novo-breadcrumb-font-style,:host .novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a,:host .novo-breadcrumb-item{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle}.novo-breadcrumb-font-style.text-capitalize,:host .text-capitalize.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-capitalize,:host .text-capitalize.novo-breadcrumb-item{text-transform:capitalize}.novo-breadcrumb-font-style.text-uppercase,:host .text-uppercase.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-uppercase,:host .text-uppercase.novo-breadcrumb-item{text-transform:uppercase}.novo-breadcrumb-font-style.text-nowrap,:host .text-nowrap.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-nowrap,:host .text-nowrap.novo-breadcrumb-item{white-space:nowrap}.novo-breadcrumb-font-style.text-ellipsis,:host .text-ellipsis.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-ellipsis,:host .text-ellipsis.novo-breadcrumb-item{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-breadcrumb-font-style.text-size-default,:host .text-size-default.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-default,:host .text-size-default.novo-breadcrumb-item{font-size:inherit}.novo-breadcrumb-font-style.text-size-body,:host .text-size-body.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-body,:host .text-size-body.novo-breadcrumb-item{font-size:1.3rem}.novo-breadcrumb-font-style.text-size-xs,:host .text-size-xs.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-xs,:host .text-size-xs.novo-breadcrumb-item{font-size:1rem}.novo-breadcrumb-font-style.text-size-sm,:host .text-size-sm.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-sm,:host .text-size-sm.novo-breadcrumb-item{font-size:1.2rem}.novo-breadcrumb-font-style.text-size-md,:host .text-size-md.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-md,:host .text-size-md.novo-breadcrumb-item{font-size:1.3rem}.novo-breadcrumb-font-style.text-size-lg,:host .text-size-lg.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-lg,:host .text-size-lg.novo-breadcrumb-item{font-size:1.6rem}.novo-breadcrumb-font-style.text-size-xl,:host .text-size-xl.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-xl,:host .text-size-xl.novo-breadcrumb-item{font-size:2rem}.novo-breadcrumb-font-style.text-size-2xl,:host .text-size-2xl.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-2xl,:host .text-size-2xl.novo-breadcrumb-item{font-size:2.6rem}.novo-breadcrumb-font-style.text-size-3xl,:host .text-size-3xl.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-3xl,:host .text-size-3xl.novo-breadcrumb-item{font-size:3.2rem}.novo-breadcrumb-font-style.text-size-smaller,:host .text-size-smaller.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-smaller,:host .text-size-smaller.novo-breadcrumb-item{font-size:.8em}.novo-breadcrumb-font-style.text-size-larger,:host .text-size-larger.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-size-larger,:host .text-size-larger.novo-breadcrumb-item{font-size:1.2em}.novo-breadcrumb-font-style.text-color-black,:host .text-color-black.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-black,:host .text-color-black.novo-breadcrumb-item{color:#000}.novo-breadcrumb-font-style.text-color-white,:host .text-color-white.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-white,:host .text-color-white.novo-breadcrumb-item{color:#fff}.novo-breadcrumb-font-style.text-color-gray,:host .text-color-gray.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-gray,:host .text-color-gray.novo-breadcrumb-item{color:#9e9e9e}.novo-breadcrumb-font-style.text-color-grey,:host .text-color-grey.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-grey,:host .text-color-grey.novo-breadcrumb-item{color:#9e9e9e}.novo-breadcrumb-font-style.text-color-offWhite,:host .text-color-offWhite.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-offWhite,:host .text-color-offWhite.novo-breadcrumb-item{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-bright,:host .text-color-bright.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-bright,:host .text-color-bright.novo-breadcrumb-item{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-light,:host .text-color-light.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-light,:host .text-color-light.novo-breadcrumb-item{color:#dbdbdb}.novo-breadcrumb-font-style.text-color-neutral,:host .text-color-neutral.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-neutral,:host .text-color-neutral.novo-breadcrumb-item{color:#4f5361}.novo-breadcrumb-font-style.text-color-dark,:host .text-color-dark.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-dark,:host .text-color-dark.novo-breadcrumb-item{color:#3d464d}.novo-breadcrumb-font-style.text-color-orange,:host .text-color-orange.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-orange,:host .text-color-orange.novo-breadcrumb-item{color:#ff6900}.novo-breadcrumb-font-style.text-color-navigation,:host .text-color-navigation.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-navigation,:host .text-color-navigation.novo-breadcrumb-item{color:#202945}.novo-breadcrumb-font-style.text-color-skyBlue,:host .text-color-skyBlue.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-skyBlue,:host .text-color-skyBlue.novo-breadcrumb-item{color:#009bdf}.novo-breadcrumb-font-style.text-color-steel,:host .text-color-steel.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-steel,:host .text-color-steel.novo-breadcrumb-item{color:#5b6770}.novo-breadcrumb-font-style.text-color-metal,:host .text-color-metal.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-metal,:host .text-color-metal.novo-breadcrumb-item{color:#637893}.novo-breadcrumb-font-style.text-color-sand,:host .text-color-sand.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-sand,:host .text-color-sand.novo-breadcrumb-item{color:#f4f4f4}.novo-breadcrumb-font-style.text-color-silver,:host .text-color-silver.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-silver,:host .text-color-silver.novo-breadcrumb-item{color:#e2e2e2}.novo-breadcrumb-font-style.text-color-stone,:host .text-color-stone.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-stone,:host .text-color-stone.novo-breadcrumb-item{color:#bebebe}.novo-breadcrumb-font-style.text-color-ash,:host .text-color-ash.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-ash,:host .text-color-ash.novo-breadcrumb-item{color:#a0a0a0}.novo-breadcrumb-font-style.text-color-slate,:host .text-color-slate.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-slate,:host .text-color-slate.novo-breadcrumb-item{color:#707070}.novo-breadcrumb-font-style.text-color-onyx,:host .text-color-onyx.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-onyx,:host .text-color-onyx.novo-breadcrumb-item{color:#526980}.novo-breadcrumb-font-style.text-color-charcoal,:host .text-color-charcoal.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-charcoal,:host .text-color-charcoal.novo-breadcrumb-item{color:#282828}.novo-breadcrumb-font-style.text-color-moonlight,:host .text-color-moonlight.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-moonlight,:host .text-color-moonlight.novo-breadcrumb-item{color:#1a242f}.novo-breadcrumb-font-style.text-color-midnight,:host .text-color-midnight.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-midnight,:host .text-color-midnight.novo-breadcrumb-item{color:#202945}.novo-breadcrumb-font-style.text-color-darkness,:host .text-color-darkness.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-darkness,:host .text-color-darkness.novo-breadcrumb-item{color:#161f27}.novo-breadcrumb-font-style.text-color-navy,:host .text-color-navy.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-navy,:host .text-color-navy.novo-breadcrumb-item{color:#0d2d42}.novo-breadcrumb-font-style.text-color-aqua,:host .text-color-aqua.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-aqua,:host .text-color-aqua.novo-breadcrumb-item{color:#3bafda}.novo-breadcrumb-font-style.text-color-ocean,:host .text-color-ocean.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-ocean,:host .text-color-ocean.novo-breadcrumb-item{color:#4a89dc}.novo-breadcrumb-font-style.text-color-mint,:host .text-color-mint.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-mint,:host .text-color-mint.novo-breadcrumb-item{color:#37bc9b}.novo-breadcrumb-font-style.text-color-grass,:host .text-color-grass.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-grass,:host .text-color-grass.novo-breadcrumb-item{color:#8cc152}.novo-breadcrumb-font-style.text-color-sunflower,:host .text-color-sunflower.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-sunflower,:host .text-color-sunflower.novo-breadcrumb-item{color:#f6b042}.novo-breadcrumb-font-style.text-color-bittersweet,:host .text-color-bittersweet.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-bittersweet,:host .text-color-bittersweet.novo-breadcrumb-item{color:#eb6845}.novo-breadcrumb-font-style.text-color-grapefruit,:host .text-color-grapefruit.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-grapefruit,:host .text-color-grapefruit.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-carnation,:host .text-color-carnation.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-carnation,:host .text-color-carnation.novo-breadcrumb-item{color:#d770ad}.novo-breadcrumb-font-style.text-color-lavender,:host .text-color-lavender.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-lavender,:host .text-color-lavender.novo-breadcrumb-item{color:#967adc}.novo-breadcrumb-font-style.text-color-mountain,:host .text-color-mountain.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-mountain,:host .text-color-mountain.novo-breadcrumb-item{color:#9678b6}.novo-breadcrumb-font-style.text-color-info,:host .text-color-info.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-info,:host .text-color-info.novo-breadcrumb-item{color:#4a89dc}.novo-breadcrumb-font-style.text-color-positive,:host .text-color-positive.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-positive,:host .text-color-positive.novo-breadcrumb-item{color:#4a89dc}.novo-breadcrumb-font-style.text-color-success,:host .text-color-success.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-success,:host .text-color-success.novo-breadcrumb-item{color:#8cc152}.novo-breadcrumb-font-style.text-color-negative,:host .text-color-negative.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-negative,:host .text-color-negative.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-danger,:host .text-color-danger.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-danger,:host .text-color-danger.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-error,:host .text-color-error.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-error,:host .text-color-error.novo-breadcrumb-item{color:#da4453}.novo-breadcrumb-font-style.text-color-warning,:host .text-color-warning.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-warning,:host .text-color-warning.novo-breadcrumb-item{color:#f6b042}.novo-breadcrumb-font-style.text-color-empty,:host .text-color-empty.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-empty,:host .text-color-empty.novo-breadcrumb-item{color:#cccdcc}.novo-breadcrumb-font-style.text-color-disabled,:host .text-color-disabled.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-disabled,:host .text-color-disabled.novo-breadcrumb-item{color:#bebebe}.novo-breadcrumb-font-style.text-color-background,:host .text-color-background.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-background,:host .text-color-background.novo-breadcrumb-item{color:#f7f7f7}.novo-breadcrumb-font-style.text-color-backgroundDark,:host .text-color-backgroundDark.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-backgroundDark,:host .text-color-backgroundDark.novo-breadcrumb-item{color:#e2e2e2}.novo-breadcrumb-font-style.text-color-presentation,:host .text-color-presentation.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-presentation,:host .text-color-presentation.novo-breadcrumb-item{color:#5b6770}.novo-breadcrumb-font-style.text-color-bullhorn,:host .text-color-bullhorn.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-bullhorn,:host .text-color-bullhorn.novo-breadcrumb-item{color:#ff6900}.novo-breadcrumb-font-style.text-color-pulse,:host .text-color-pulse.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-pulse,:host .text-color-pulse.novo-breadcrumb-item{color:#3bafda}.novo-breadcrumb-font-style.text-color-company,:host .text-color-company.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-company,:host .text-color-company.novo-breadcrumb-item{color:#39d}.novo-breadcrumb-font-style.text-color-candidate,:host .text-color-candidate.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-candidate,:host .text-color-candidate.novo-breadcrumb-item{color:#4b7}.novo-breadcrumb-font-style.text-color-lead,:host .text-color-lead.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-lead,:host .text-color-lead.novo-breadcrumb-item{color:#a69}.novo-breadcrumb-font-style.text-color-contact,:host .text-color-contact.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-contact,:host .text-color-contact.novo-breadcrumb-item{color:#fa4}.novo-breadcrumb-font-style.text-color-clientcontact,:host .text-color-clientcontact.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-clientcontact,:host .text-color-clientcontact.novo-breadcrumb-item{color:#fa4}.novo-breadcrumb-font-style.text-color-opportunity,:host .text-color-opportunity.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-opportunity,:host .text-color-opportunity.novo-breadcrumb-item{color:#625}.novo-breadcrumb-font-style.text-color-job,:host .text-color-job.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-job,:host .text-color-job.novo-breadcrumb-item{color:#b56}.novo-breadcrumb-font-style.text-color-joborder,:host .text-color-joborder.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-joborder,:host .text-color-joborder.novo-breadcrumb-item{color:#b56}.novo-breadcrumb-font-style.text-color-submission,:host .text-color-submission.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-submission,:host .text-color-submission.novo-breadcrumb-item{color:#a9adbb}.novo-breadcrumb-font-style.text-color-sendout,:host .text-color-sendout.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-sendout,:host .text-color-sendout.novo-breadcrumb-item{color:#747884}.novo-breadcrumb-font-style.text-color-placement,:host .text-color-placement.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-placement,:host .text-color-placement.novo-breadcrumb-item{color:#0b344f}.novo-breadcrumb-font-style.text-color-note,:host .text-color-note.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-note,:host .text-color-note.novo-breadcrumb-item{color:#747884}.novo-breadcrumb-font-style.text-color-contract,:host .text-color-contract.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-contract,:host .text-color-contract.novo-breadcrumb-item{color:#454ea0}.novo-breadcrumb-font-style.text-color-jobCode,:host .text-color-jobCode.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-jobCode,:host .text-color-jobCode.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-earnCode,:host .text-color-earnCode.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-earnCode,:host .text-color-earnCode.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-invoiceStatement,:host .text-color-invoiceStatement.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-invoiceStatement,:host .text-color-invoiceStatement.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-billableCharge,:host .text-color-billableCharge.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-billableCharge,:host .text-color-billableCharge.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-payableCharge,:host .text-color-payableCharge.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-payableCharge,:host .text-color-payableCharge.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-user,:host .text-color-user.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-user,:host .text-color-user.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-corporateUser,:host .text-color-corporateUser.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-corporateUser,:host .text-color-corporateUser.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-distributionList,:host .text-color-distributionList.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-distributionList,:host .text-color-distributionList.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-credential,:host .text-color-credential.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-credential,:host .text-color-credential.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.text-color-person,:host .text-color-person.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-color-person,:host .text-color-person.novo-breadcrumb-item{color:#696d79}.novo-breadcrumb-font-style.margin-before,:host .margin-before.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.margin-before,:host .margin-before.novo-breadcrumb-item{margin-top:.4rem}.novo-breadcrumb-font-style.margin-after,:host .margin-after.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.margin-after,:host .margin-after.novo-breadcrumb-item{margin-bottom:.8rem}.novo-breadcrumb-font-style.text-length-small,:host .text-length-small.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-length-small,:host .text-length-small.novo-breadcrumb-item{max-width:40ch}.novo-breadcrumb-font-style.text-length-medium,:host .text-length-medium.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-length-medium,:host .text-length-medium.novo-breadcrumb-item{max-width:55ch}.novo-breadcrumb-font-style.text-length-large,:host .text-length-large.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-length-large,:host .text-length-large.novo-breadcrumb-item{max-width:70ch}.novo-breadcrumb-font-style.text-weight-hairline,:host .text-weight-hairline.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-hairline,:host .text-weight-hairline.novo-breadcrumb-item{font-weight:100}.novo-breadcrumb-font-style.text-weight-thin,:host .text-weight-thin.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-thin,:host .text-weight-thin.novo-breadcrumb-item{font-weight:200}.novo-breadcrumb-font-style.text-weight-light,:host .text-weight-light.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-light,:host .text-weight-light.novo-breadcrumb-item{font-weight:300}.novo-breadcrumb-font-style.text-weight-normal,:host .text-weight-normal.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-normal,:host .text-weight-normal.novo-breadcrumb-item{font-weight:400}.novo-breadcrumb-font-style.text-weight-medium,:host .text-weight-medium.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-medium,:host .text-weight-medium.novo-breadcrumb-item{font-weight:500}.novo-breadcrumb-font-style.text-weight-semibold,:host .text-weight-semibold.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-semibold,:host .text-weight-semibold.novo-breadcrumb-item{font-weight:600}.novo-breadcrumb-font-style.text-weight-bold,:host .text-weight-bold.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-bold,:host .text-weight-bold.novo-breadcrumb-item{font-weight:700}.novo-breadcrumb-font-style.text-weight-extrabold,:host .text-weight-extrabold.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-extrabold,:host .text-weight-extrabold.novo-breadcrumb-item{font-weight:800}.novo-breadcrumb-font-style.text-weight-heavy,:host .text-weight-heavy.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-heavy,:host .text-weight-heavy.novo-breadcrumb-item{font-weight:900}.novo-breadcrumb-font-style.text-weight-lighter,:host .text-weight-lighter.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-lighter,:host .text-weight-lighter.novo-breadcrumb-item{font-weight:lighter}.novo-breadcrumb-font-style.text-weight-bolder,:host .text-weight-bolder.novo-breadcrumb-separator,:host .novo-breadcrumb-item ::ng-deep a.text-weight-bolder,:host .text-weight-bolder.novo-breadcrumb-item{font-weight:bolder}:host{display:flex;align-items:center;flex-flow:row nowrap}:host .novo-breadcrumb-item{cursor:auto;display:flex;align-items:center;flex-flow:row nowrap}:host .novo-breadcrumb-item ::ng-deep a:hover{text-decoration:none}:host .novo-breadcrumb-item ::ng-deep a{color:#4a89dc;cursor:pointer}:host .novo-breadcrumb-item ::ng-deep a:focus{text-decoration:none}:host .novo-breadcrumb-down-icon{vertical-align:middle;display:inline-block;cursor:pointer;width:16px;height:16px;margin-right:-5px;text-align:center;outline:none}:host .novo-breadcrumb-down-icon:hover svg g polygon{fill:#3d464d;fill:var(--text-main, #3d464d)}:host .novo-breadcrumb-item-active{color:#3d464d;color:var(--text-main, #3d464d)}:host .novo-breadcrumb-item-active ::ng-deep a{color:#3d464d;color:var(--text-main, #3d464d);text-decoration:none}:host .novo-breadcrumb-item-active svg g polygon{fill:#3d464d;fill:var(--text-main, #3d464d)}:host .novo-breadcrumb-item-active span{color:#3d464d;color:var(--text-main, #3d464d)}:host .novo-breadcrumb-separator{margin:0 3px}:host .novo-breadcrumb-dropdown-menu{padding:10px 0;max-width:200px}:host .novo-breadcrumb-dropdown-menu li{padding:0 15px;font-size:12px;line-height:36px;width:200px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;cursor:pointer}:host .novo-breadcrumb-dropdown-menu li a{color:#3d464d;line-height:36px;width:170px;display:inline-block}:host .novo-breadcrumb-dropdown-menu li a:focus{text-decoration:none}:host .novo-breadcrumb-dropdown-menu li:hover{background:#dbdbdb}:host .novo-breadcrumb-dropdown-menu li:hover a{text-decoration:none}:host .novo-search-container{max-width:200px}:host span.novo-breadcrumb-dropdown-origin{min-width:unset;display:inline-flex;padding:0}:host novo-search{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: BreadcrumbService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_BREADCRUMB_REF]
                }] }]; }, propDecorators: { showMenu: [{
                type: Input
            }], customMenuTemplate: [{
                type: Input
            }], menuList: [{
                type: Input
            }], isSearch: [{
                type: Input
            }], toggleEvent: [{
                type: Output
            }] } });

class BreadcrumbElement {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.source = [];
    }
    navigateTo($event, item) {
        this.breadcrumbService.navigateTo($event, item);
    }
}
BreadcrumbElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbElement, deps: [{ token: BreadcrumbService }], target: i0.ɵɵFactoryTarget.Component });
BreadcrumbElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: BreadcrumbElement, selector: "novo-breadcrumb", inputs: { separatorIcon: "separatorIcon", source: "source" }, providers: [{ provide: NOVO_BREADCRUMB_REF, useExisting: BreadcrumbElement }], ngImport: i0, template: "<ng-container *ngIf=\"source && source.length\">\n  <novo-breadcrumb-item *ngFor=\"let item of source\" [showMenu]=\"item.showMenu\" [isSearch]=\"item.isSearch\"\n    [menuList]=\"item.menuList\" [customMenuTemplate]=\"item.customMenuTemplate\">\n    <a *ngIf=\"!item.noNavigation && (!item.linkType || item.linkType === 'hrefLink')\" rel=\"noopener\" [href]=\"item.link\"\n      [target]=\"item.target ? item.target : '_self'\">{{ item.title }}</a>\n    <a *ngIf=\"!item.noNavigation && item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\"\n      [href]=\"item.link\" (click)=\"navigateTo($event, item)\">{{ item.title }}</a>\n    <span *ngIf=\"item.noNavigation\">{{ item.title }}</span>\n  </novo-breadcrumb-item>\n</ng-container>\n<ng-container *ngIf=\"!(source && source.length)\">\n  <ng-content></ng-content>\n</ng-container>", styles: [":host{display:flex;align-items:center}:host ::ng-deep novo-breadcrumb-item:last-child .novo-breadcrumb-separator{display:none}\n"], components: [{ type: BreadcrumbItemElement, selector: "novo-breadcrumb-item", inputs: ["showMenu", "customMenuTemplate", "menuList", "isSearch"], outputs: ["toggleEvent"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-breadcrumb', providers: [{ provide: NOVO_BREADCRUMB_REF, useExisting: BreadcrumbElement }], template: "<ng-container *ngIf=\"source && source.length\">\n  <novo-breadcrumb-item *ngFor=\"let item of source\" [showMenu]=\"item.showMenu\" [isSearch]=\"item.isSearch\"\n    [menuList]=\"item.menuList\" [customMenuTemplate]=\"item.customMenuTemplate\">\n    <a *ngIf=\"!item.noNavigation && (!item.linkType || item.linkType === 'hrefLink')\" rel=\"noopener\" [href]=\"item.link\"\n      [target]=\"item.target ? item.target : '_self'\">{{ item.title }}</a>\n    <a *ngIf=\"!item.noNavigation && item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\"\n      [href]=\"item.link\" (click)=\"navigateTo($event, item)\">{{ item.title }}</a>\n    <span *ngIf=\"item.noNavigation\">{{ item.title }}</span>\n  </novo-breadcrumb-item>\n</ng-container>\n<ng-container *ngIf=\"!(source && source.length)\">\n  <ng-content></ng-content>\n</ng-container>", styles: [":host{display:flex;align-items:center}:host ::ng-deep novo-breadcrumb-item:last-child .novo-breadcrumb-separator{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: BreadcrumbService }]; }, propDecorators: { separatorIcon: [{
                type: Input
            }], source: [{
                type: Input
            }] } });

// NG2
class NovoOverlayModule {
}
NovoOverlayModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOverlayModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoOverlayModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOverlayModule, declarations: [NovoOverlayTemplateComponent], imports: [CommonModule, FormsModule, OverlayModule, ScrollingModule], exports: [NovoOverlayTemplateComponent, ScrollingModule] });
NovoOverlayModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOverlayModule, imports: [[CommonModule, FormsModule, OverlayModule, ScrollingModule], ScrollingModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoOverlayModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, OverlayModule, ScrollingModule],
                    declarations: [NovoOverlayTemplateComponent],
                    exports: [NovoOverlayTemplateComponent, ScrollingModule],
                }]
        }] });

// NG2
class NovoDropdownModule {
}
NovoDropdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoDropdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownModule, declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoDropDownTrigger], imports: [NovoOverlayModule, NovoOptionModule], exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoDropDownTrigger] });
NovoDropdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownModule, imports: [[NovoOverlayModule, NovoOptionModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NovoOverlayModule, NovoOptionModule],
                    declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoDropDownTrigger],
                    exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoDropDownTrigger],
                }]
        }] });

class NovoIconModule {
}
NovoIconModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIconModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoIconModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIconModule, declarations: [NovoIconComponent], imports: [ObserversModule], exports: [NovoIconComponent] });
NovoIconModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIconModule, imports: [[ObserversModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoIconModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ObserversModule],
                    exports: [NovoIconComponent],
                    declarations: [NovoIconComponent],
                }]
        }] });

// NG2
class NovoListModule {
}
NovoListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListModule, declarations: [NovoListElement,
        NovoListItemElement,
        NovoItemAvatarElement,
        NovoItemTitleElement,
        NovoItemContentElement,
        NovoItemEndElement,
        NovoItemHeaderElement,
        NovoItemDateElement], imports: [CommonModule, NovoCommonModule, NovoIconModule], exports: [NovoListElement,
        NovoListItemElement,
        NovoItemAvatarElement,
        NovoItemTitleElement,
        NovoItemHeaderElement,
        NovoItemContentElement,
        NovoItemEndElement,
        NovoItemDateElement] });
NovoListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListModule, imports: [[CommonModule, NovoCommonModule, NovoIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoCommonModule, NovoIconModule],
                    declarations: [
                        NovoListElement,
                        NovoListItemElement,
                        NovoItemAvatarElement,
                        NovoItemTitleElement,
                        NovoItemContentElement,
                        NovoItemEndElement,
                        NovoItemHeaderElement,
                        NovoItemDateElement,
                    ],
                    exports: [
                        NovoListElement,
                        NovoListItemElement,
                        NovoItemAvatarElement,
                        NovoItemTitleElement,
                        NovoItemHeaderElement,
                        NovoItemContentElement,
                        NovoItemEndElement,
                        NovoItemDateElement,
                    ],
                }]
        }] });

// NG2
class NovoLoadingModule {
}
NovoLoadingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoLoadingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadingModule, declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective], imports: [CommonModule], exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective] });
NovoLoadingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadingModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                    exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                }]
        }] });

// Value accessor for the component (supports ngModel)
const SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoSwitchElement),
    multi: true,
};
class NovoSwitchElement {
    constructor(ref) {
        this.ref = ref;
        this.theme = 'ocean';
        this.icons = ['x', 'check'];
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    onKeydown(event) {
        if (event.key === " " /* Space */) {
            event.preventDefault();
            this.toggle(event);
        }
    }
    toggle(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.disabled) {
            return;
        }
        this.value = !this.value;
        this.onChange.next(this.value);
        this.onModelChange(this.value);
        this.ref.markForCheck();
    }
    writeValue(model) {
        this.value = model;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
NovoSwitchElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSwitchElement, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoSwitchElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSwitchElement, selector: "novo-switch", inputs: { theme: "theme", icons: "icons", disabled: "disabled" }, outputs: { onChange: "onChange" }, host: { attributes: { "role": "checkbox" }, listeners: { "keydown": "onKeydown($event)" }, properties: { "attr.aria-checked": "value", "attr.aria-disabled": "disabled", "class": "theme", "class.novo-switch-disabled": "this.disabled" }, classAttribute: "novo-switch" }, providers: [SWITCH_VALUE_ACCESSOR], ngImport: i0, template: `
    <div (click)="toggle($event)">
      <div class="novo-switch-container">
        <div class="novo-switch-bar"></div>
        <div class="novo-switch-thumb-container">
          <div class="novo-switch-thumb">
            <novo-icon *ngIf="!value" smaller>{{ icons[0] }}</novo-icon>
            <novo-icon *ngIf="value" smaller>{{ icons[1] }}</novo-icon>
          </div>
        </div>
      </div>
      <div class="novo-switch-label"><ng-content></ng-content></div>
    </div>
  `, isInline: true, components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoSwitchElement.prototype, "disabled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSwitchElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-switch',
                    providers: [SWITCH_VALUE_ACCESSOR],
                    template: `
    <div (click)="toggle($event)">
      <div class="novo-switch-container">
        <div class="novo-switch-bar"></div>
        <div class="novo-switch-thumb-container">
          <div class="novo-switch-thumb">
            <novo-icon *ngIf="!value" smaller>{{ icons[0] }}</novo-icon>
            <novo-icon *ngIf="value" smaller>{{ icons[1] }}</novo-icon>
          </div>
        </div>
      </div>
      <div class="novo-switch-label"><ng-content></ng-content></div>
    </div>
  `,
                    host: {
                        role: 'checkbox',
                        class: 'novo-switch',
                        '[attr.aria-checked]': 'value',
                        '[attr.aria-disabled]': 'disabled',
                        '(keydown)': 'onKeydown($event)',
                        '[class]': 'theme',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { theme: [{
                type: Input
            }], icons: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.novo-switch-disabled']
            }], onChange: [{
                type: Output
            }] } });

class NovoSwitchModule {
}
NovoSwitchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSwitchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoSwitchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSwitchModule, declarations: [NovoSwitchElement], imports: [CommonModule, FormsModule, NovoIconModule], exports: [NovoSwitchElement] });
NovoSwitchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSwitchModule, imports: [[CommonModule, FormsModule, NovoIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSwitchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoIconModule],
                    declarations: [NovoSwitchElement],
                    exports: [NovoSwitchElement],
                }]
        }] });

// NG2
/**
 * @description This is the actual list of matches that gets injected into the DOM.
 */
class ChecklistPickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
    }
    search() {
        const options = this.config.options;
        // only set this the first time
        return from(new Promise((resolve, reject) => {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(options);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    }
    /**
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    filterData(matches) {
        if (this.term && matches) {
            this.filteredMatches = matches.map((section) => {
                const items = section.originalData.filter((match) => {
                    return ~String(match.label).toLowerCase().indexOf(this.term.toLowerCase());
                });
                section.data = items;
                return section;
            }, this);
            return this.filteredMatches;
        }
        else if (this.term === '') {
            matches.forEach((section) => {
                section.data = section.originalData;
            });
            return matches;
        }
        // Show no recent results template
        return matches;
    }
    selectMatch(event, item) {
        Helpers.swallowEvent(event);
        if (item.indeterminate) {
            item.indeterminate = false;
            item.checked = true;
        }
        else {
            item.checked = !item.checked;
        }
        const selected = this.activeMatch;
        if (selected) {
            this.parent.value = selected;
        }
        this.ref.markForCheck();
        return false;
    }
}
ChecklistPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ChecklistPickerResults, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ChecklistPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ChecklistPickerResults, selector: "checklist-picker-results", host: { classAttribute: "active picker-results" }, usesInheritance: true, ngImport: i0, template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <ul *ngIf="matches.length > 0">
      <span *ngFor="let section of matches; let i = index">
        <li class="header caption" *ngIf="section.data.length > 0">{{ section.label || section.type }}</li>
        <li
          *ngFor="let match of section.data; let i = index"
          [ngClass]="{ checked: match.checked }"
          (click)="selectMatch($event, match)"
          [class.active]="match === activeMatch"
          (mouseenter)="selectActive(match)"
        >
          <label>
            <i
              [ngClass]="{
                'bhi-checkbox-empty': !match.checked,
                'bhi-checkbox-filled': match.checked,
                'bhi-checkbox-indeterminate': match.indeterminate
              }"
            ></i>
            {{ match.label }}
          </label>
        </li>
      </span>
    </ul>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="!isLoading && !matches.length && !hasError && term !== ''">{{ labels.pickerEmpty }}</p>
  `, isInline: true, components: [{ type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ChecklistPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'checklist-picker-results',
                    host: {
                        class: 'active picker-results',
                    },
                    template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <ul *ngIf="matches.length > 0">
      <span *ngFor="let section of matches; let i = index">
        <li class="header caption" *ngIf="section.data.length > 0">{{ section.label || section.type }}</li>
        <li
          *ngFor="let match of section.data; let i = index"
          [ngClass]="{ checked: match.checked }"
          (click)="selectMatch($event, match)"
          [class.active]="match === activeMatch"
          (mouseenter)="selectActive(match)"
        >
          <label>
            <i
              [ngClass]="{
                'bhi-checkbox-empty': !match.checked,
                'bhi-checkbox-filled': match.checked,
                'bhi-checkbox-indeterminate': match.indeterminate
              }"
            ></i>
            {{ match.label }}
          </label>
        </li>
      </span>
    </ul>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="!isLoading && !matches.length && !hasError && term !== ''">{{ labels.pickerEmpty }}</p>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; } });

// NG2
class DistributionListPickerResults extends BasePickerResults {
    constructor(element, sanitizer, labels, ref) {
        super(element, ref);
        this.sanitizer = sanitizer;
        this.labels = labels;
        this.active = true;
        this.sanitizer = sanitizer;
    }
    get isHidden() {
        return this.matches.length === 0;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    sanitizeHTML(html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    }
}
DistributionListPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DistributionListPickerResults, deps: [{ token: i0.ElementRef }, { token: i1$2.DomSanitizer }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
DistributionListPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: DistributionListPickerResults, selector: "distribution-list-picker-results", host: { properties: { "class.active": "this.active", "hidden": "this.isHidden" } }, usesInheritance: true, ngImport: i0, template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match.label)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>
          </p>
          <p>
            <span class="label">{{ labels.dateAdded }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
  `, isInline: true, components: [{ type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { type: NovoItemTitleElement, selector: "item-title, novo-item-title" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DistributionListPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'distribution-list-picker-results',
                    template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match.label)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>
          </p>
          <p>
            <span class="label">{{ labels.dateAdded }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$2.DomSanitizer }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { active: [{
                type: HostBinding,
                args: ['class.active']
            }], isHidden: [{
                type: HostBinding,
                args: ['hidden']
            }] } });

class GroupedMultiPickerResults extends BasePickerResults {
    constructor(element, renderer, labels, ref) {
        super(element, ref);
        this.renderer = renderer;
        this.labels = labels;
        this.customFilterEnabled = false;
        this.placeholder = '';
        this.internalMap = new Map();
    }
    set term(value) {
        // Display all only will work for static categories
        if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
            throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
        }
        // Custom filter
        if (this.config.customFilter) {
            this.customFilterEnabled = true;
            this.customFilterLabel = this.config.customFilter.label;
            this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
            this.ref.markForCheck();
            if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
            }
        }
        else {
            this.customFilterEnabled = false;
        }
        // Configure ALL
        if (this.config.displayAll && !this.selectedCategory) {
            this.setAllCategory();
        }
        // Placeholder
        if (this.config.placeholder) {
            this.placeholder = this.config.placeholder;
        }
        // Focus
        setTimeout(() => {
            this.inputElement.nativeElement.focus();
        });
    }
    get categories() {
        if (this.config.categories || this.config.categoryMap) {
            return (this.config.categories ||
                Array.from(this.config.categoryMap.values()).filter((category) => {
                    return category.value !== 'all';
                }));
        }
        return [];
    }
    ngOnInit() {
        // Subscribe to keyboard events and debounce
        this.keyboardSubscription = fromEvent(this.inputElement.nativeElement, 'keyup')
            .pipe(debounceTime(350), distinctUntilChanged())
            .subscribe((event) => {
            this.searchTerm = event.target.value;
            this.matches = this.filterData();
            this.ref.markForCheck();
        });
    }
    ngOnDestroy() {
        // Cleanup
        this.keyboardSubscription.unsubscribe();
    }
    setAllCategory() {
        // If we have display all, set the all categories up
        if (this.config.displayAll) {
            this.selectedCategory = { value: 'all', label: 'all' };
            const allItems = [];
            Array.from(this.config.categoryMap.values())
                .filter((category) => {
                return category.value !== 'all';
            })
                .forEach((v) => allItems.push(...v.items));
            this.matches = this.filter(allItems);
            this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems });
            this.ref.markForCheck();
        }
    }
    selectCategory(category) {
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        const key = category.value;
        this.selectedCategory = category;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        this.getNewMatches(category, key);
    }
    clearSearchTerm(event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
        this.ref.markForCheck();
    }
    selectMatch(event, item) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return super.selectMatch(event);
    }
    fireCustomFilter(value) {
        this.customFilterValue = value;
        // Clear cache map
        this.internalMap.clear();
        // Only fire if we have a selected category
        if (this.selectCategory) {
            // Find new items
            const key = this.selectedCategory.value;
            // Get new matches
            this.getNewMatches(this.selectedCategory, key);
            this.ref.markForCheck();
        }
        // Focus
        setTimeout(() => {
            this.inputElement.nativeElement.focus();
        });
    }
    filterData() {
        if (this.selectedCategory) {
            if (this.config.categoryMap) {
                return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedCategory.value).items);
            }
        }
        return [];
    }
    getNewMatches(category, key) {
        // Get new matches
        if (this.config.categoryMap) {
            this.matches = this.filter(this.config.categoryMap.get(key).items);
            this.ref.markForCheck();
        }
        else {
            if (!this.config.getItemsForCategoryAsync) {
                throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
            }
            if (!this.internalMap.get(key)) {
                this.isLoading = true;
                this.config.getItemsForCategoryAsync(key, this.customFilterValue).then((items) => {
                    this.internalMap.set(key, { value: category.value, label: category.label, items });
                    this.matches = this.filter(items, true);
                    this.isLoading = false;
                    this.ref.markForCheck();
                    setTimeout(() => {
                        this.inputElement.nativeElement.focus();
                    });
                });
            }
            else {
                this.matches = this.filter(this.internalMap.get(key).items);
                this.ref.markForCheck();
            }
        }
    }
    filter(array, ignoreCustomFilter = false) {
        let matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
            matches = matches.filter((match) => {
                const searchTerm = this.searchTerm.toLowerCase();
                return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
            });
        }
        if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
            matches = matches.filter((match) => this.config.customFilter.matchFunction(match, this.customFilterValue));
        }
        return matches;
    }
}
GroupedMultiPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GroupedMultiPickerResults, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
GroupedMultiPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: GroupedMultiPickerResults, selector: "grouped-multi-picker-results", viewQueries: [{ propertyName: "inputElement", first: true, predicate: ["input"], descendants: true, static: true }, { propertyName: "listElement", first: true, predicate: ["list"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <div class="grouped-multi-picker-groups">
      <novo-list direction="vertical">
        <novo-list-item
          *ngIf="config.displayAll"
          (click)="selectCategory({ value: 'all', label: 'all' })"
          [class.active]="selectedCategory?.value === 'all'"
          data-automation-id="display-all"
          [class.disabled]="isLoading"
        >
          <item-content>
            <span data-automation-id="label">{{ labels.all }}</span>
          </item-content>
          <item-end>
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
        <novo-list-item
          *ngFor="let category of categories"
          (click)="selectCategory(category)"
          [class.active]="selectedCategory?.value === category.value"
          [attr.data-automation-id]="category.label"
          [class.disabled]="isLoading"
        >
          <item-content>
            <i *ngIf="category.iconClass" [class]="category.iconClass"></i>
            <span data-automation-id="label">{{ category.label }}</span>
          </item-content>
          <item-end>
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
      </novo-list>
      <footer
        class="grouped-multi-picker-groups-footer"
        *ngIf="customFilterEnabled"
        data-automation-id="footer"
        [class.disabled]="isLoading"
      >
        <novo-switch [(ngModel)]="customFilterValue" (onChange)="fireCustomFilter($event)" data-automation-id="switch"></novo-switch>
        <label data-automation-id="label">{{ customFilterLabel }}</label>
      </footer>
    </div>
    <div class="grouped-multi-picker-matches">
      <div class="grouped-multi-picker-input-container" [hidden]="!selectedCategory" data-automation-id="input-container">
        <input autofocus #input [(ngModel)]="searchTerm" [disabled]="isLoading" data-automation-id="input" [placeholder]="placeholder" />
        <i class="bhi-search" *ngIf="!searchTerm" [class.disabled]="isLoading" data-automation-id="seach-icon"></i>
        <i
          class="bhi-times"
          *ngIf="searchTerm"
          (click)="clearSearchTerm($event)"
          [class.disabled]="isLoading"
          data-automation-id="remove-icon"
        ></i>
      </div>
      <div class="grouped-multi-picker-list-container">
        <novo-list direction="vertical" #list>
          <novo-list-item
            *ngFor="let match of matches"
            (click)="selectMatch($event)"
            [class.active]="match === activeMatch"
            (mouseenter)="selectActive(match)"
            [class.disabled]="preselected(match) || isLoading"
            [attr.data-automation-id]="match.label"
          >
            <item-content>
              <span>{{ match.label }}</span>
            </item-content>
          </novo-list-item>
        </novo-list>
        <div
          class="grouped-multi-picker-no-results"
          *ngIf="matches.length === 0 && !isLoading && selectedCategory"
          data-automation-id="empty-message"
        >
          {{ labels.groupedMultiPickerEmpty }}
        </div>
        <div
          class="grouped-multi-picker-no-category"
          *ngIf="matches.length === 0 && !isLoading && !selectedCategory"
          data-automation-id="select-category-message"
        >
          {{ labels.groupedMultiPickerSelectCategory }}
        </div>
        <div class="grouped-multi-picker-loading" *ngIf="isLoading" data-automation-id="loading-message">
          <novo-loading theme="line"></novo-loading>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { type: NovoItemEndElement, selector: "item-end, novo-item-end" }, { type: NovoSwitchElement, selector: "novo-switch", inputs: ["theme", "icons", "disabled"], outputs: ["onChange"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GroupedMultiPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'grouped-multi-picker-results',
                    template: `
    <div class="grouped-multi-picker-groups">
      <novo-list direction="vertical">
        <novo-list-item
          *ngIf="config.displayAll"
          (click)="selectCategory({ value: 'all', label: 'all' })"
          [class.active]="selectedCategory?.value === 'all'"
          data-automation-id="display-all"
          [class.disabled]="isLoading"
        >
          <item-content>
            <span data-automation-id="label">{{ labels.all }}</span>
          </item-content>
          <item-end>
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
        <novo-list-item
          *ngFor="let category of categories"
          (click)="selectCategory(category)"
          [class.active]="selectedCategory?.value === category.value"
          [attr.data-automation-id]="category.label"
          [class.disabled]="isLoading"
        >
          <item-content>
            <i *ngIf="category.iconClass" [class]="category.iconClass"></i>
            <span data-automation-id="label">{{ category.label }}</span>
          </item-content>
          <item-end>
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
      </novo-list>
      <footer
        class="grouped-multi-picker-groups-footer"
        *ngIf="customFilterEnabled"
        data-automation-id="footer"
        [class.disabled]="isLoading"
      >
        <novo-switch [(ngModel)]="customFilterValue" (onChange)="fireCustomFilter($event)" data-automation-id="switch"></novo-switch>
        <label data-automation-id="label">{{ customFilterLabel }}</label>
      </footer>
    </div>
    <div class="grouped-multi-picker-matches">
      <div class="grouped-multi-picker-input-container" [hidden]="!selectedCategory" data-automation-id="input-container">
        <input autofocus #input [(ngModel)]="searchTerm" [disabled]="isLoading" data-automation-id="input" [placeholder]="placeholder" />
        <i class="bhi-search" *ngIf="!searchTerm" [class.disabled]="isLoading" data-automation-id="seach-icon"></i>
        <i
          class="bhi-times"
          *ngIf="searchTerm"
          (click)="clearSearchTerm($event)"
          [class.disabled]="isLoading"
          data-automation-id="remove-icon"
        ></i>
      </div>
      <div class="grouped-multi-picker-list-container">
        <novo-list direction="vertical" #list>
          <novo-list-item
            *ngFor="let match of matches"
            (click)="selectMatch($event)"
            [class.active]="match === activeMatch"
            (mouseenter)="selectActive(match)"
            [class.disabled]="preselected(match) || isLoading"
            [attr.data-automation-id]="match.label"
          >
            <item-content>
              <span>{{ match.label }}</span>
            </item-content>
          </novo-list-item>
        </novo-list>
        <div
          class="grouped-multi-picker-no-results"
          *ngIf="matches.length === 0 && !isLoading && selectedCategory"
          data-automation-id="empty-message"
        >
          {{ labels.groupedMultiPickerEmpty }}
        </div>
        <div
          class="grouped-multi-picker-no-category"
          *ngIf="matches.length === 0 && !isLoading && !selectedCategory"
          data-automation-id="select-category-message"
        >
          {{ labels.groupedMultiPickerSelectCategory }}
        </div>
        <div class="grouped-multi-picker-loading" *ngIf="isLoading" data-automation-id="loading-message">
          <novo-loading theme="line"></novo-loading>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { inputElement: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }], listElement: [{
                type: ViewChild,
                args: ['list']
            }] } });

class MixedMultiPickerResults extends BasePickerResults {
    constructor(element, renderer, labels, ref) {
        super(element, ref);
        this.renderer = renderer;
        this.labels = labels;
        this.placeholder = '';
        this.emptyOptionsLabel = '';
        this.internalMap = new Map();
    }
    set term(value) {
        if (this.config.placeholder) {
            this.placeholder = this.config.placeholder;
        }
        // Focus
        setTimeout(() => {
            this.inputElement.nativeElement.focus();
        });
    }
    get options() {
        return this.config.options || [];
    }
    ngOnDestroy() {
        // Cleanup
        if (this.keyboardSubscription) {
            this.keyboardSubscription.unsubscribe();
        }
        if (this.config.options) {
            this.config.options.forEach((option) => {
                if (option.clearSecondaryOptions) {
                    option.clearSecondaryOptions.unsubscribe();
                }
            });
        }
    }
    selectPrimaryOption(primaryOption, event) {
        if (this.keyboardSubscription) {
            this.keyboardSubscription.unsubscribe();
        }
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        const key = primaryOption.value;
        this.selectedPrimaryOption = primaryOption;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        if (this.optionHasSecondaryOptions(primaryOption)) {
            // Subscribe to keyboard events and debounce
            this.keyboardSubscription = fromEvent(this.inputElement.nativeElement, 'keyup')
                .pipe(debounceTime(350), distinctUntilChanged())
                .subscribe((keyEvent) => {
                this.searchTerm = keyEvent.target.value;
                this.matches = this.filterData();
                this.ref.markForCheck();
            });
            this.getNewMatches(primaryOption);
        }
        else {
            this.selectActive(primaryOption);
            this.selectMatch(event);
        }
    }
    selectMatch(event) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return super.selectMatch(event);
    }
    clearSearchTerm(event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectPrimaryOption({ value: this.selectedPrimaryOption.value, label: this.selectedPrimaryOption.label });
        this.ref.markForCheck();
    }
    optionHasSecondaryOptions(primaryOption) {
        return !!(primaryOption && (primaryOption.secondaryOptions || primaryOption.getSecondaryOptionsAsync));
    }
    shouldShowSearchBox(primaryOption) {
        return !!(primaryOption && primaryOption.showSearchOnSecondaryOptions);
    }
    clearPrimaryOption(primaryOption) {
        if (this.internalMap.get(primaryOption.value)) {
            if (primaryOption.value === this.selectedPrimaryOption?.value) {
                this.activeMatch = null;
                this.matches = [];
                this.selectedPrimaryOption = null;
            }
            this.internalMap.delete(primaryOption.value);
            this.ref.markForCheck();
        }
    }
    filterData() {
        if (this.selectedPrimaryOption) {
            if (this.selectedPrimaryOption.secondaryOptions) {
                return this.filter(this.selectedPrimaryOption.secondaryOptions);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedPrimaryOption.value).items);
            }
        }
        return [];
    }
    filter(array) {
        let matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedPrimaryOption) {
            matches = matches.filter((match) => {
                const searchTerm = this.searchTerm.toLowerCase();
                return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
            });
        }
        return matches;
    }
    getNewMatches(primaryOption) {
        // Get new matches
        if (primaryOption.secondaryOptions) {
            this.matches = this.filter(primaryOption.secondaryOptions);
            this.ref.markForCheck();
        }
        else {
            if (!primaryOption.getSecondaryOptionsAsync) {
                throw new Error('An option needs to have either an array of secondaryOptions or a function getSecondaryOptionsAsync');
            }
            if (!this.internalMap.get(primaryOption.value)) {
                this.isLoading = true;
                primaryOption.getSecondaryOptionsAsync().then((items) => {
                    this.internalMap.set(primaryOption.value, { value: primaryOption.value, label: primaryOption.label, items });
                    this.matches = this.filter(items);
                    this.isLoading = false;
                    this.ref.markForCheck();
                    setTimeout(() => {
                        this.inputElement.nativeElement.focus();
                    });
                });
                if (primaryOption.clearSecondaryOptions) {
                    primaryOption.clearSecondaryOptions.subscribe(() => {
                        this.clearPrimaryOption(primaryOption);
                    });
                }
            }
            else {
                this.matches = this.filter(this.internalMap.get(primaryOption.value).items);
                this.ref.markForCheck();
            }
        }
    }
}
MixedMultiPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MixedMultiPickerResults, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MixedMultiPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: MixedMultiPickerResults, selector: "mixed-multi-picker-results", viewQueries: [{ propertyName: "inputElement", first: true, predicate: ["input"], descendants: true, static: true }, { propertyName: "listElement", first: true, predicate: ["list"], descendants: true }], usesInheritance: true, ngImport: i0, template: ` <div class="mixed-multi-picker-groups">
      <novo-list direction="vertical">
        <novo-list-item
          *ngFor="let option of options"
          (click)="selectPrimaryOption(option, $event)"
          [class.active]="selectedPrimaryOption?.value === option.value"
          [attr.data-automation-id]="option.label"
          [class.disabled]="isLoading"
        >
          <item-content>
            <i *ngIf="option.iconClass" [class]="option.iconClass"></i>
            <span data-automation-id="label">{{ option.label }}</span>
          </item-content>
          <item-end *ngIf="optionHasSecondaryOptions(option)">
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
      </novo-list>
    </div>
    <div class="mixed-multi-picker-matches" [hidden]="!optionHasSecondaryOptions(selectedPrimaryOption)">
      <div
        class="mixed-multi-picker-input-container"
        [hidden]="!shouldShowSearchBox(selectedPrimaryOption)"
        data-automation-id="input-container"
      >
        <input autofocus #input [(ngModel)]="searchTerm" [disabled]="isLoading" data-automation-id="input" [placeholder]="placeholder" />
        <i class="bhi-search" *ngIf="!searchTerm" [class.disabled]="isLoading" data-automation-id="seach-icon"></i>
        <i
          class="bhi-times"
          *ngIf="searchTerm"
          (click)="clearSearchTerm($event)"
          [class.disabled]="isLoading"
          data-automation-id="remove-icon"
        ></i>
      </div>
      <div class="mixed-multi-picker-list-container">
        <novo-list direction="vertical" #list>
          <novo-list-item
            *ngFor="let match of matches"
            (click)="selectMatch($event)"
            [class.active]="match === activeMatch"
            (mouseenter)="selectActive(match)"
            [class.disabled]="preselected(match) || isLoading"
            [attr.data-automation-id]="match.label"
          >
            <item-content>
              <span>{{ match.label }}</span>
            </item-content>
          </novo-list-item>
        </novo-list>
        <div
          class="mixed-multi-picker-no-results"
          *ngIf="matches.length === 0 && !isLoading && selectedPrimaryOption"
          data-automation-id="empty-message"
        >
          {{ config.emptyOptionsLabel ? config.emptyOptionsLabel : labels.groupedMultiPickerEmpty }}
        </div>
        <div class="mixed-multi-picker-loading" *ngIf="isLoading" data-automation-id="loading-message">
          <novo-loading theme="line"></novo-loading>
        </div>
      </div>
    </div>`, isInline: true, components: [{ type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { type: NovoItemEndElement, selector: "item-end, novo-item-end" }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MixedMultiPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'mixed-multi-picker-results',
                    template: ` <div class="mixed-multi-picker-groups">
      <novo-list direction="vertical">
        <novo-list-item
          *ngFor="let option of options"
          (click)="selectPrimaryOption(option, $event)"
          [class.active]="selectedPrimaryOption?.value === option.value"
          [attr.data-automation-id]="option.label"
          [class.disabled]="isLoading"
        >
          <item-content>
            <i *ngIf="option.iconClass" [class]="option.iconClass"></i>
            <span data-automation-id="label">{{ option.label }}</span>
          </item-content>
          <item-end *ngIf="optionHasSecondaryOptions(option)">
            <i class="bhi-next"></i>
          </item-end>
        </novo-list-item>
      </novo-list>
    </div>
    <div class="mixed-multi-picker-matches" [hidden]="!optionHasSecondaryOptions(selectedPrimaryOption)">
      <div
        class="mixed-multi-picker-input-container"
        [hidden]="!shouldShowSearchBox(selectedPrimaryOption)"
        data-automation-id="input-container"
      >
        <input autofocus #input [(ngModel)]="searchTerm" [disabled]="isLoading" data-automation-id="input" [placeholder]="placeholder" />
        <i class="bhi-search" *ngIf="!searchTerm" [class.disabled]="isLoading" data-automation-id="seach-icon"></i>
        <i
          class="bhi-times"
          *ngIf="searchTerm"
          (click)="clearSearchTerm($event)"
          [class.disabled]="isLoading"
          data-automation-id="remove-icon"
        ></i>
      </div>
      <div class="mixed-multi-picker-list-container">
        <novo-list direction="vertical" #list>
          <novo-list-item
            *ngFor="let match of matches"
            (click)="selectMatch($event)"
            [class.active]="match === activeMatch"
            (mouseenter)="selectActive(match)"
            [class.disabled]="preselected(match) || isLoading"
            [attr.data-automation-id]="match.label"
          >
            <item-content>
              <span>{{ match.label }}</span>
            </item-content>
          </novo-list-item>
        </novo-list>
        <div
          class="mixed-multi-picker-no-results"
          *ngIf="matches.length === 0 && !isLoading && selectedPrimaryOption"
          data-automation-id="empty-message"
        >
          {{ config.emptyOptionsLabel ? config.emptyOptionsLabel : labels.groupedMultiPickerEmpty }}
        </div>
        <div class="mixed-multi-picker-loading" *ngIf="isLoading" data-automation-id="loading-message">
          <novo-loading theme="line"></novo-loading>
        </div>
      </div>
    </div>`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { inputElement: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }], listElement: [{
                type: ViewChild,
                args: ['list']
            }] } });

// NG2
class PickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.labels = labels;
    }
    get hasNonErrorMessage() {
        return !this.isLoading && !this.matches.length && !this.hasError;
    }
    getEmptyMessage() {
        if (this.shouldShowMessageForZeroLengthSearch()) {
            // this property comes from Field Interactions
            return this.config.emptyPickerMessage;
        }
        else {
            return this.term === '' ? this.labels.pickerTextFieldEmpty : this.labels.pickerEmpty;
        }
    }
    shouldShowMessageForZeroLengthSearch() {
        return this.config && this.config.minSearchLength === 0 && this.term === '' && this.config.emptyPickerMessage;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
}
PickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PickerResults, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
PickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: PickerResults, selector: "picker-results", host: { classAttribute: "active" }, usesInheritance: true, ngImport: i0, template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
        data-automation-id="picker-result-list-item"
      >
        <item-content> <span [innerHtml]="match.label | highlight:term"></span> </item-content>
      </novo-list-item>
      <novo-loading *ngIf="isLoading && matches.length > 0" theme="line"></novo-loading>
    </novo-list>
    <div class="picker-loader" *ngIf="isLoading && matches.length === 0"><novo-loading theme="line"></novo-loading></div>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage">{{ getEmptyMessage() }}</p>
  `, isInline: true, components: [{ type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }], pipes: { "highlight": HighlightPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'picker-results',
                    host: {
                        class: 'active',
                    },
                    template: `
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
        data-automation-id="picker-result-list-item"
      >
        <item-content> <span [innerHtml]="match.label | highlight:term"></span> </item-content>
      </novo-list-item>
      <novo-loading *ngIf="isLoading && matches.length > 0" theme="line"></novo-loading>
    </novo-list>
    <div class="picker-loader" *ngIf="isLoading && matches.length === 0"><novo-loading theme="line"></novo-loading></div>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage">{{ getEmptyMessage() }}</p>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; } });

// NG2
class SkillsSpecialtyPickerResults extends BasePickerResults {
    constructor(element, labels, ref) {
        super(element, ref);
        this.element = element;
        this.labels = labels;
        this.active = true;
        this.limitedTo = false;
        this.limit = 200;
    }
    getListElement() {
        return this.element.nativeElement.querySelector('novo-list');
    }
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    structureArray(collection) {
        let data = collection;
        if (collection.hasOwnProperty('data')) {
            this.limitedTo = collection.limitedTo200;
            this.total = collection.total;
            data = collection.data;
        }
        else if (data.length > this.limit) {
            this.limitedTo = true;
            this.total = data.length;
            data = data.slice(0, this.limit);
        }
        return super.structureArray(data);
    }
}
SkillsSpecialtyPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: SkillsSpecialtyPickerResults, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
SkillsSpecialtyPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: SkillsSpecialtyPickerResults, selector: "skill-specialty-picker-results", host: { properties: { "class.active": "this.active" } }, usesInheritance: true, ngImport: i0, template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length"><novo-loading theme="line"></novo-loading></section>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-content>
          <h6><span [innerHtml]="match.label | highlight:term"></span></h6>
          <div class="category">
            <i class="bhi-category-tags"></i
            ><span [innerHtml]="match.data.categories || match.data.parentCategory.name | highlight:term"></span>
          </div>
        </item-content>
      </novo-list-item>
      <novo-list-item *ngIf="limitedTo"
        ><div>{{ labels.showingXofXResults(limit, total) }}</div></novo-list-item
      >
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.pickerEmpty }}</p>
  `, isInline: true, components: [{ type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "highlight": HighlightPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: SkillsSpecialtyPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'skill-specialty-picker-results',
                    template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length"><novo-loading theme="line"></novo-loading></section>
    <novo-list *ngIf="matches.length > 0" direction="vertical">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-content>
          <h6><span [innerHtml]="match.label | highlight:term"></span></h6>
          <div class="category">
            <i class="bhi-category-tags"></i
            ><span [innerHtml]="match.data.categories || match.data.parentCategory.name | highlight:term"></span>
          </div>
        </item-content>
      </novo-list-item>
      <novo-list-item *ngIf="limitedTo"
        ><div>{{ labels.showingXofXResults(limit, total) }}</div></novo-list-item
      >
      <novo-loading theme="line" *ngIf="isLoading && matches.length > 0"></novo-loading>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.pickerEmpty }}</p>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { active: [{
                type: HostBinding,
                args: ['class.active']
            }] } });

// NG2
class WorkersCompCodesPickerResults extends PickerResults {
    constructor(element, sanitizer, labels, ref) {
        super(element, labels, ref);
        this.sanitizer = sanitizer;
        this.labels = labels;
    }
    sanitizeHTML(compCode, name) {
        return this.sanitizer.bypassSecurityTrustHtml(`${compCode} | ${name}`);
    }
}
WorkersCompCodesPickerResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: WorkersCompCodesPickerResults, deps: [{ token: i0.ElementRef }, { token: i1$2.DomSanitizer }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
WorkersCompCodesPickerResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: WorkersCompCodesPickerResults, selector: "workers-comp-codes-picker-results", host: { classAttribute: "active" }, usesInheritance: true, ngImport: i0, template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match?.data?.compensation?.code, match?.data?.compensation?.name)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.state }}: </span><span>{{ match?.data?.compensation?.state }}</span>
          </p>
          <p>
            <span class="label">{{ labels.rate }}: </span><span>{{ labels.formatCurrency(match?.data?.rate) }}</span>
          </p>
        </item-content>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.startDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.startDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
          <p>
            <span class="label">{{ labels.endDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.endDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
    <div class="picker-loader" *ngIf="isLoading && matches.length === 0"><novo-loading theme="line"></novo-loading></div>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage">{{ getEmptyMessage() }}</p>
  `, isInline: true, components: [{ type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { type: NovoItemTitleElement, selector: "item-title, novo-item-title" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: WorkersCompCodesPickerResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'workers-comp-codes-picker-results',
                    host: {
                        class: 'active',
                    },
                    template: `
    <section class="picker-loading" *ngIf="isLoading && !matches?.length">
      <novo-loading theme="line"></novo-loading>
    </section>
    <novo-list direction="vertical" *ngIf="matches?.length > 0 && !hasError">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
        [class.disabled]="preselected(match)"
      >
        <item-header>
          <item-title>
            <span [innerHtml]="sanitizeHTML(match?.data?.compensation?.code, match?.data?.compensation?.name)"></span>
          </item-title>
        </item-header>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.state }}: </span><span>{{ match?.data?.compensation?.state }}</span>
          </p>
          <p>
            <span class="label">{{ labels.rate }}: </span><span>{{ labels.formatCurrency(match?.data?.rate) }}</span>
          </p>
        </item-content>
        <item-content direction="horizontal">
          <p>
            <span class="label">{{ labels.startDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.startDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
          <p>
            <span class="label">{{ labels.endDate }}: </span
            ><span>{{ labels.formatDateWithFormat(match?.data?.endDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>
          </p>
        </item-content>
      </novo-list-item>
      <novo-loading theme="line" *ngIf="isLoading && matches?.length > 0"></novo-loading>
    </novo-list>
    <div class="picker-loader" *ngIf="isLoading && matches.length === 0"><novo-loading theme="line"></novo-loading></div>
    <p class="picker-error" *ngIf="hasError">{{ labels.pickerError }}</p>
    <p class="picker-null-results" *ngIf="hasNonErrorMessage">{{ getEmptyMessage() }}</p>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$2.DomSanitizer }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; } });

// NG2
// Value accessor for the component (supports ngModel)
const PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoPickerElement),
    multi: true,
};
/**
 * @description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
 * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
 * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
 * dynamically populate.
 */
class NovoPickerElement {
    constructor(element, componentUtils, ref) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.ref = ref;
        this.closeOnSelect = true;
        this.selected = [];
        // Deprecated
        this.appendToBody = false;
        // Deprecated
        this.parentScrollAction = 'close';
        // Side the dropdown will open
        this.side = 'left';
        // Autoselects the first option in the results
        this.autoSelectFirstOption = true;
        this._disablePickerInput = false;
        // Emitter for selects
        this.changed = new EventEmitter();
        this.select = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.term = '';
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    // Disable from typing into the picker (result template does everything)
    set disablePickerInput(v) {
        this._disablePickerInput = coerceBooleanProperty(v);
    }
    get disablePickerInput() {
        return this._disablePickerInput;
    }
    ngOnInit() {
        if (this.overrideElement) {
            this.element = this.overrideElement;
        }
        if (this.appendToBody) {
            notify(`'appendToBody' has been deprecated. Please remove this attribute.`);
        }
        // Custom results template
        this.resultsComponent = this.config.resultsTemplate || PickerResults;
        // Get all distinct key up events from the input and only fire if long enough and distinct
        // let input = this.element.nativeElement.querySelector('input');
        const pasteObserver = fromEvent(this.input.nativeElement, 'paste').pipe(debounceTime(250), distinctUntilChanged());
        pasteObserver.subscribe((event) => this.onDebouncedKeyup(event), (err) => this.hideResults(err));
        const keyboardObserver = fromEvent(this.input.nativeElement, 'keyup').pipe(debounceTime(250), distinctUntilChanged());
        keyboardObserver.subscribe((event) => this.onDebouncedKeyup(event), (err) => this.hideResults(err));
    }
    onDebouncedKeyup(event) {
        if (["Escape" /* Escape */, "ArrowDown" /* ArrowDown */, "ArrowUp" /* ArrowUp */, "Enter" /* Enter */, "Tab" /* Tab */].some((key) => key === event.key)) {
            return;
        }
        this.show(event.target.value);
    }
    openPanel() {
        this.container.openPanel();
    }
    closePanel() {
        this.container.closePanel();
    }
    get panelOpen() {
        return this.container && this.container.panelOpen;
    }
    show(term) {
        this.openPanel();
        // Show the results inside
        this.showResults(term);
    }
    onKeyDown(event) {
        if (this.disablePickerInput) {
            Helpers.swallowEvent(event);
            return;
        }
        if (this.panelOpen && !this.disablePickerInput) {
            if (event.key === "Escape" /* Escape */ || event.key === "Tab" /* Tab */) {
                this.hideResults();
                return;
            }
            if (event.key === "ArrowUp" /* ArrowUp */) {
                this.popup.instance.prevActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.key === "ArrowDown" /* ArrowDown */) {
                this.popup.instance.nextActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.key === "Enter" /* Enter */) {
                const activeMatch = this.popup.instance.activeMatch;
                if (!this.selected.find((selected) => activeMatch && activeMatch.value && selected.value === activeMatch.value)) {
                    this.popup.instance.selectActiveMatch();
                    this.ref.markForCheck();
                }
                return;
            }
            if ((event.key === "Backspace" /* Backspace */ || event.key === "Delete" /* Delete */) && !Helpers.isEmpty(this._value) && (this._value === this.term)) {
                this.clearValue(false);
                this.closePanel();
            }
            if (event.key === "Delete" /* Delete */ && Helpers.isBlank(this._value)) {
                this.clearValue(true);
            }
        }
    }
    clearValue(wipeTerm) {
        this._value = null;
        this.select.emit(this._value);
        this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
        this.onModelChange(this._value);
        if (wipeTerm) {
            this.term = '';
            this.hideResults();
        }
        this.ref.markForCheck();
    }
    /**
     * @description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     */
    onFocus(event) {
        if (!this.panelOpen) {
            this.show();
        }
        this.focus.emit(event);
    }
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    showResults(term) {
        // Update Matches
        if (this.popup) {
            // Update existing list or create the DOM element
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.ref.markForCheck();
        }
        else {
            this.popup = this.componentUtils.append(this.resultsComponent, this.results);
            this.popup.instance.parent = this;
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.popup.instance.overlay = this.container.overlayRef;
            this.ref.markForCheck();
        }
    }
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    hideResults(err) {
        this.closePanel();
        this.ref.markForCheck();
    }
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    onOverlayClosed() {
        if (this.popup && this.popup.instance && this.popup.instance.cleanUp) {
            this.popup.instance.cleanUp();
        }
    }
    // get accessor
    get value() {
        return this._value;
    }
    // set accessor including call the onchange callback
    set value(selected) {
        if (!selected) {
            this.term = '';
            this._value = null;
            this.onModelChange(this._value);
        }
        else if (selected.value !== this._value) {
            this.term = this.clearValueOnSelect ? '' : selected.label;
            this._value = selected.value;
            this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
            this.select.emit(selected);
            this.onModelChange(selected.value);
            if (this.popup) {
                this.popup.instance.selected = this.selected;
            }
        }
        else {
            this.term = this.clearValueOnSelect ? '' : selected.label;
            this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
            this.select.emit(selected);
        }
        this.ref.markForCheck();
    }
    // Makes sure to clear the model if the user clears the text box
    checkTerm(event) {
        this.typing.emit(event);
        if ((!event || !event.length) && !Helpers.isEmpty(this._value)) {
            this._value = null;
            this.onModelChange(this._value);
        }
        this.ref.markForCheck();
    }
    // Set touched on blur
    onTouched(event) {
        this.onModelTouched();
        this.blur.emit(event);
    }
    // From ControlValueAccessor interface
    writeValue(value) {
        if (this.clearValueOnSelect) {
            this.term = '';
        }
        else {
            if (typeof value === 'string' && !this.config.useGetLabels) {
                this.term = value;
            }
            else if (value && value.label) {
                this.term = value.label;
            }
            else if (value && value.firstName) {
                this.term = `${value.firstName} ${value.lastName}`;
            }
            else if (value && value.name) {
                this.term = value.name;
            }
            else if (typeof this.config.getLabels === 'function') {
                this.config.getLabels(value).then((result) => {
                    if (result) {
                        this.term = result.length ? result[0].label || '' : result.label || '';
                    }
                    else {
                        this.term = value;
                    }
                    this.ref.markForCheck();
                });
            }
            else if (value && value.title) {
                this.term = value.title;
            }
            else {
                this.term = value || '';
            }
        }
        this._value = value;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this._disablePickerInput = disabled;
    }
}
NovoPickerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerElement, deps: [{ token: i0.ElementRef }, { token: ComponentUtils }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoPickerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoPickerElement, selector: "novo-picker", inputs: { config: "config", placeholder: "placeholder", clearValueOnSelect: "clearValueOnSelect", closeOnSelect: "closeOnSelect", selected: "selected", appendToBody: "appendToBody", parentScrollSelector: "parentScrollSelector", parentScrollAction: "parentScrollAction", containerClass: "containerClass", side: "side", autoSelectFirstOption: "autoSelectFirstOption", overrideElement: "overrideElement", disablePickerInput: "disablePickerInput" }, outputs: { changed: "changed", select: "select", focus: "focus", blur: "blur", typing: "typing" }, providers: [PICKER_VALUE_ACCESSOR], viewQueries: [{ propertyName: "results", first: true, predicate: ["results"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "container", first: true, predicate: NovoOverlayTemplateComponent, descendants: true, static: true }, { propertyName: "input", first: true, predicate: ["input"], descendants: true, static: true }], ngImport: i0, template: `
    <i class="bhi-more" *ngIf="config?.entityIcon && !_value"></i>
    <i class="bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}" *ngIf="config?.entityIcon && _value"></i>
    <input
      type="text"
      class="picker-input"
      [(ngModel)]="term"
      [class.entity-picker]="config?.entityIcon"
      [class.entity-selected]="config?.entityIcon && _value"
      (ngModelChange)="checkTerm($event)"
      [placeholder]="placeholder"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (click)="onFocus($event)"
      (blur)="onTouched($event)"
      autocomplete="off"
      #input
      [disabled]="disablePickerInput"
    />
    <i class="bhi-search" *ngIf="(!_value || clearValueOnSelect) && !disablePickerInput"></i>
    <i
      class="bhi-times"
      [class.entity-selected]="config?.entityIcon && _value"
      *ngIf="_value && !clearValueOnSelect && !disablePickerInput"
      (click)="clearValue(true)"
    ></i>
    <novo-overlay-template class="picker-results-container" [parent]="element" position="above-below" (closing)="onOverlayClosed()">
      <span #results></span>
      <ng-content></ng-content>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-picker',
                    providers: [PICKER_VALUE_ACCESSOR],
                    template: `
    <i class="bhi-more" *ngIf="config?.entityIcon && !_value"></i>
    <i class="bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}" *ngIf="config?.entityIcon && _value"></i>
    <input
      type="text"
      class="picker-input"
      [(ngModel)]="term"
      [class.entity-picker]="config?.entityIcon"
      [class.entity-selected]="config?.entityIcon && _value"
      (ngModelChange)="checkTerm($event)"
      [placeholder]="placeholder"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (click)="onFocus($event)"
      (blur)="onTouched($event)"
      autocomplete="off"
      #input
      [disabled]="disablePickerInput"
    />
    <i class="bhi-search" *ngIf="(!_value || clearValueOnSelect) && !disablePickerInput"></i>
    <i
      class="bhi-times"
      [class.entity-selected]="config?.entityIcon && _value"
      *ngIf="_value && !clearValueOnSelect && !disablePickerInput"
      (click)="clearValue(true)"
    ></i>
    <novo-overlay-template class="picker-results-container" [parent]="element" position="above-below" (closing)="onOverlayClosed()">
      <span #results></span>
      <ng-content></ng-content>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ComponentUtils }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { results: [{
                type: ViewChild,
                args: ['results', { read: ViewContainerRef, static: true }]
            }], config: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], clearValueOnSelect: [{
                type: Input
            }], closeOnSelect: [{
                type: Input
            }], selected: [{
                type: Input
            }], appendToBody: [{
                type: Input
            }], parentScrollSelector: [{
                type: Input
            }], parentScrollAction: [{
                type: Input
            }], containerClass: [{
                type: Input
            }], side: [{
                type: Input
            }], autoSelectFirstOption: [{
                type: Input
            }], overrideElement: [{
                type: Input
            }], disablePickerInput: [{
                type: Input
            }], changed: [{
                type: Output
            }], select: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], typing: [{
                type: Output
            }], container: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent, { static: true }]
            }], input: [{
                type: ViewChild,
                args: ['input', { static: true }]
            }] } });

// NG2
class NovoPickerModule {
}
NovoPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerModule, declarations: [NovoPickerElement,
        PickerResults,
        EntityPickerResult,
        EntityPickerResults,
        ChecklistPickerResults,
        GroupedMultiPickerResults,
        MixedMultiPickerResults,
        DistributionListPickerResults,
        WorkersCompCodesPickerResults,
        SkillsSpecialtyPickerResults], imports: [CommonModule, NovoPipesModule, FormsModule, NovoCommonModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule], exports: [NovoPickerElement,
        PickerResults,
        EntityPickerResult,
        EntityPickerResults,
        ChecklistPickerResults,
        GroupedMultiPickerResults,
        MixedMultiPickerResults,
        DistributionListPickerResults,
        WorkersCompCodesPickerResults,
        SkillsSpecialtyPickerResults] });
NovoPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerModule, imports: [[CommonModule, NovoPipesModule, FormsModule, NovoCommonModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoPipesModule, FormsModule, NovoCommonModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule],
                    declarations: [
                        NovoPickerElement,
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        MixedMultiPickerResults,
                        DistributionListPickerResults,
                        WorkersCompCodesPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                    exports: [
                        NovoPickerElement,
                        PickerResults,
                        EntityPickerResult,
                        EntityPickerResults,
                        ChecklistPickerResults,
                        GroupedMultiPickerResults,
                        MixedMultiPickerResults,
                        DistributionListPickerResults,
                        WorkersCompCodesPickerResults,
                        SkillsSpecialtyPickerResults,
                    ],
                }]
        }] });

// NG2
class NovoSearchBoxModule {
}
NovoSearchBoxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSearchBoxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoSearchBoxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSearchBoxModule, declarations: [NovoSearchBoxElement], imports: [CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule], exports: [NovoSearchBoxElement] });
NovoSearchBoxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSearchBoxModule, imports: [[CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSearchBoxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoIconModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule],
                    declarations: [NovoSearchBoxElement],
                    exports: [NovoSearchBoxElement],
                }]
        }] });

class NovoBreadcrumbModule {
}
NovoBreadcrumbModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBreadcrumbModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoBreadcrumbModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBreadcrumbModule, declarations: [BreadcrumbElement, BreadcrumbItemElement], imports: [CommonModule, RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule, NovoOptionModule], exports: [BreadcrumbElement, BreadcrumbItemElement] });
NovoBreadcrumbModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBreadcrumbModule, providers: [BreadcrumbService], imports: [[CommonModule, RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule, NovoOptionModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBreadcrumbModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, RouterModule, NovoDropdownModule, NovoSearchBoxModule, NovoButtonModule, NovoIconModule, NovoOptionModule],
                    exports: [BreadcrumbElement, BreadcrumbItemElement],
                    declarations: [BreadcrumbElement, BreadcrumbItemElement],
                    providers: [BreadcrumbService],
                }]
        }] });

/** Injection token used to customize the date range selection behavior. */
const NOVO_DATE_SELECTION_STRATEGY = new InjectionToken('NOVO_DATE_SELECTION_STRATEGY');
/** Provides the default date selection behavior. Single Date */
class DefaultDateSelectionStrategy {
    selectionFinished(date, currentValue, event) {
        return [date];
    }
    createPreview(activeDate, [currentDate]) {
        return [activeDate];
    }
    isSelected(activeDate, [currentDate]) {
        return isSameDay(activeDate, currentDate);
    }
}
DefaultDateSelectionStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultDateSelectionStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DefaultDateSelectionStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultDateSelectionStrategy });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultDateSelectionStrategy, decorators: [{
            type: Injectable
        }] });
/** @docs-private */
function NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY(parent) {
    return parent || new DefaultDateSelectionStrategy();
}
/** @docs-private */
const NOVO_DATE_SELECTION_STRATEGY_PROVIDER = {
    provide: NOVO_DATE_SELECTION_STRATEGY,
    deps: [[new Optional(), new SkipSelf(), NOVO_DATE_SELECTION_STRATEGY]],
    useFactory: NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY,
};

class MultiDateSelectionStrategy {
    selectionFinished(dateLike, currentValue, event) {
        const date = dateLike;
        const current = new Set(currentValue.map((c) => c.getTime()));
        if (current.has(date.getTime())) {
            current.delete(date.getTime());
        }
        else {
            current.add(date.getTime());
        }
        return [...current].map((c) => new Date(c));
    }
    createPreview(activeDate, currentValue) {
        return [activeDate];
    }
    isSelected(activeDate, currentValue) {
        return currentValue && currentValue.includes(activeDate);
    }
}
MultiDateSelectionStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MultiDateSelectionStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
MultiDateSelectionStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MultiDateSelectionStrategy });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MultiDateSelectionStrategy, decorators: [{
            type: Injectable
        }] });

class RangeSelectionStrategy {
    selectionFinished(date, currentRange) {
        let [start, end] = currentRange;
        if (start == null) {
            start = date;
        }
        else if (end == null && date && differenceInCalendarDays(date, start) >= 0) {
            end = date;
        }
        else {
            start = date;
            end = null;
        }
        return [start, end];
    }
    createPreview(activeDate, currentRange) {
        let start = null;
        let end = null;
        const [currStart, currEnd] = currentRange;
        if (currStart && !currEnd && activeDate) {
            start = currStart;
            end = activeDate;
        }
        return [start, end];
    }
    isSelected(activeDate, currentRange) {
        const [start, end] = currentRange;
        return isWithinRange(activeDate, start, end);
    }
}
RangeSelectionStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RangeSelectionStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
RangeSelectionStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RangeSelectionStrategy });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RangeSelectionStrategy, decorators: [{
            type: Injectable
        }] });

class WeekSelectionStrategy {
    constructor(weekStartsOn = 0) {
        this.weekStartsOn = weekStartsOn;
    }
    selectionFinished(date) {
        return this._createWeekRange(date);
    }
    createPreview(activeDate) {
        return this._createWeekRange(activeDate);
    }
    _createWeekRange(date) {
        if (date) {
            const { weekStartsOn } = this;
            const start = startOfWeek(date, { weekStartsOn });
            const end = endOfWeek(date, { weekStartsOn });
            return [start, end];
        }
        return [null, null];
    }
    isSelected(activeDate, currentRange) {
        const [start, end] = currentRange;
        return isWithinRange(activeDate, start, end);
    }
}

class NovoMonthViewElement {
    constructor(labels, element, cdr, _sanitizer) {
        this.labels = labels;
        this.element = element;
        this.cdr = cdr;
        this._sanitizer = _sanitizer;
        this.activeDate = new Date();
        // Weekstart must be 0-6 (Sunday - Saturday)
        this.selected = [];
        this.preview = [];
        this.overlays = [];
        this.isRange = false;
        this.hideOverflowDays = false;
        this._weekStartsOn = 0;
        // Select callback for output
        this.select = new EventEmitter(false);
        // Select callback for output
        this.hover = new EventEmitter(false);
        // List of all the weekdays
        this.weekdays = this.labels.getWeekdays(this.weekStartsOn);
        // List of all months
        this.monthNames = this.labels.getMonths();
    }
    get weekStartsOn() {
        return this._weekStartsOn;
    }
    set weekStartsOn(value) {
        this._weekStartsOn = value;
        this.weekdays = this.labels.getWeekdays(value);
        this.updateView(this.activeDate);
    }
    ngOnInit() {
        // Set labels
        this.updateView(this.activeDate);
    }
    updateView(date) {
        this.monthLabel = this.labels.formatDateWithFormat(this.activeDate, { month: 'short' });
        this.buildMonth(this.activeDate);
    }
    onSelect(event, day) {
        // Helpers.swallowEvent(event);
        this.select.next({ event, day });
        this.cdr.markForCheck();
    }
    onHover(event, day) {
        this.isRange && this.hover.next({ event, day });
    }
    buildMonth(month) {
        // Reset the weeks
        this.weeks = [];
        const start = startOfMonth(month);
        // House keeping variables to know when we are done building the month
        let done = false, date = startOfWeek(start, { weekStartsOn: this.weekStartsOn }), monthIndex = date.getMonth(), count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = addDays(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    }
    buildWeek(date, month) {
        // Build out of the days of the week
        const days = [];
        // Iterate over the days of the week
        for (let i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: isToday(date),
                date,
            });
            // Increment for the next iteration
            date = addDays(date, 1);
        }
        return days;
    }
    isDisabled(day) {
        return (this.minDate && isBefore(day, this.minDate)) || (this.maxDate && isAfter(day, this.maxDate));
    }
    /** Returns whether a cell should be marked as selected. */
    _isSelected(value) {
        return this.selected && this.selected.find((d) => isSameDay(d, value));
    }
    /** Returns whether a cell should be marked as preview. */
    _isPreview(value) {
        return this.preview && this.preview.find((d) => isSameDay(d, value));
    }
    /** Returns whether a cell should be marked as an overlay. */
    _isOverlay(value) {
        return this.overlays && this.overlays.find((o) => isSameDay(o.date, value));
    }
    /** Returns whether a cell should be marked as an overlay. */
    _hasOverlayType(value) {
        let overlay = this.overlays && this.overlays.find((o) => isSameDay(o.date, value));
        return overlay ? overlay.type : null;
    }
    /** Gets whether a value is the start of the main range. */
    _isRangeStart(value) {
        return isStart(value, this.selected, this.isRange);
    }
    /** Gets whether a value is the end of the main range. */
    _isRangeEnd(value) {
        return isEnd(value, this.selected, this.isRange);
    }
    /** Gets whether a value is within the currently-selected range. */
    _isInRange(value) {
        return isInRange(value, this.selected, this.isRange);
    }
    /** Gets whether a value is the start of the preview range. */
    _isPreviewStart(value) {
        return isStart(value, this.preview, this.isRange);
    }
    /** Gets whether a value is the end of the preview range. */
    _isPreviewEnd(value) {
        return isEnd(value, this.preview, this.isRange);
    }
    /** Gets whether a value is inside the preview range. */
    _isInPreview(value) {
        return isInRange(value, this.preview, this.isRange);
    }
}
NovoMonthViewElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMonthViewElement, deps: [{ token: NovoLabelService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoMonthViewElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoMonthViewElement, selector: "novo-month-view", inputs: { minDate: "minDate", maxDate: "maxDate", activeDate: "activeDate", selected: "selected", preview: "preview", overlays: "overlays", disabledDateMessage: "disabledDateMessage", isRange: "isRange", hideOverflowDays: "hideOverflowDays", weekStartsOn: "weekStartsOn" }, outputs: { select: "select", hover: "hover" }, host: { properties: { "class.hide-overflow-days": "this.hideOverflowDays" } }, ngImport: i0, template: "<div class=\"calendar-table\" cellspacing=\"0\" cellpadding=\"0\">\n  <div class=\"calendar-thead\">\n    <div class=\"calendar-th weekday\" *ngFor=\"let day of weekdays\" title=\"{{ day }}\"\n      [attr.data-automation-id]=\"day.substr(0, 2)\">\n      {{ day.substr(0, 2) }}\n    </div>\n  </div>\n  <div class=\"calendar-body\">\n    <div class=\"calendar-week\" *ngFor=\"let week of weeks\">\n      <div class=\"calendar-date\" *ngFor=\"let day of week.days\"\n        [class.today]=\"day.isToday\"\n        [class.notinmonth]=\"day.date.getMonth() !== activeDate.getMonth()\"\n        [class.selected]=\"_isSelected(day.date)\"\n        [class.preview]=\"_isPreview(day.date)\"\n        [class.overlay]=\"_isOverlay(day.date)\"\n        [class]=\"_hasOverlayType(day.date)\"\n        [class.inRange]=\"_isInRange(day.date)\"\n        [class.rangeStart]=\"_isRangeStart(day.date)\"\n        [class.rangeEnd]=\"_isRangeEnd(day.date)\"\n        [class.inPreview]=\"_isInPreview(day.date)\"\n        [class.previewStart]=\"_isPreviewStart(day.date)\"\n        [class.previewEnd]=\"_isPreviewEnd(day.date)\"\n        [class.calendar-date]=\"true\"\n        [attr.aria-label]=\"day.name\"\n        [attr.aria-disabled]=\"isDisabled(day.date)\"\n        [attr.aria-selected]=\"_isSelected(day.date)\"\n        [attr.data-automation-id]=\"day.number\"\n        [title]=\"isDisabled(day.date) ? disabledDateMessage : ''\"\n        (mouseover)=\"onHover($event, day)\">\n        <novo-button\n          class=\"day\"\n          [attr.data-automation-id]=\"day.number\"\n          [disabled]=\"isDisabled(day.date)\"\n          (click)=\"onSelect($event, day)\">\n          {{ day.number }}\n        </novo-button>\n      </div>\n    </div>\n  </div>\n</div>", styles: [":host{background:var(--background-bright);width:100%;height:-webkit-min-content;height:-moz-min-content;height:min-content;position:relative}:host .calendar-table{display:table}:host .calendar-table .calendar-thead{display:table-header-group}:host .calendar-table .calendar-th{display:table-cell;width:30px;padding:10px 0}:host .calendar-table .calendar-body{display:table-row-group}:host .calendar-table .calendar-week{display:table-row}:host .calendar-table .month,:host .calendar-table .year{text-align:center;padding:4px 15px;color:#666;overflow-x:hidden;text-overflow:ellipsis;margin:5px;font-weight:400;border-radius:3px}:host .calendar-table .month.selected,:host .calendar-table .year.selected{background-color:var(--selection);color:#fff}:host .calendar-table .month:hover,:host .calendar-table .year:hover{cursor:pointer;background-color:var(--selection);color:#fff}:host .calendar-table .day{height:3.2rem;width:3.2rem;line-height:1;font-size:1.2rem;padding:1px;border:none;background-color:transparent;border-radius:50%;box-shadow:inset 0 0 0 2px transparent;transition:box-shadow .14s ease-in-out;position:relative;color:#3d464d;color:var(--text-main, #3d464d)}:host .calendar-table .day:focus{outline:none}:host .calendar-table .day:disabled{color:var(--text-disabled);cursor:not-allowed!important;box-shadow:none!important}:host .calendar-table .calendar-date{display:table-cell}:host .calendar-table .calendar-date.notinmonth,:host .calendar-table .calendar-date.notinmonth:not(.selected)>.day{color:var(--text-disabled)}:host .calendar-table .calendar-date:hover .day{cursor:pointer;box-shadow:inset 0 0 0 2px var(--selection)}:host .calendar-table .calendar-date.inRange:hover .day{box-shadow:inset 0 0 0 2px #fff}:host .calendar-table .calendar-date.inRange{background:var(--selection);color:#fff;height:3.2rem;width:3.2rem;border-radius:0}:host .calendar-table .calendar-date.inRange .day{color:#fff}:host .calendar-table .calendar-date.rangeStart{border-radius:50% 0 0 50%;box-shadow:none!important;position:relative}:host .calendar-table .calendar-date.rangeStart:before{content:\"\";position:absolute;height:100%;background:#4a89dc;width:10px;top:0;right:-5px;z-index:-1}:host .calendar-table .calendar-date.rangeEnd{border-radius:0 50% 50% 0;box-shadow:none!important;position:relative}:host .calendar-table .calendar-date.rangeEnd:before{content:\"\";position:absolute;height:100%;background:var(--selection);width:10px;top:0;left:-5px;z-index:-1}:host .calendar-table .calendar-date.selected .day{background:var(--selection);color:#fff}:host .calendar-table .calendar-date.preview:not(.previewStart):not(.previewEnd) .day{border:1px dashed var(--selection)}:host .calendar-table .calendar-date.preview:not(.previewStart):not(.previewEnd).selected .day{border:1px dashed #9dbeff}:host .calendar-table .calendar-date.today .day:after{content:\"\";position:absolute;top:0;left:0;border-radius:100%;width:100%;height:100%;max-width:3.2rem;margin:0 auto;box-shadow:inset 0 0 0 2px #dbdbdb}:host .calendar-table .calendar-date.today.inRange .day:after,:host .calendar-table .calendar-date.today.selected .day:after{box-shadow:inset 0 0 0 2px #9dbeff}:host .calendar-table .calendar-date.inPreview .day{border-radius:0;border-top:1px dashed #4a89dc;border-bottom:1px dashed #4a89dc}:host .calendar-table .calendar-date.previewStart .day{border-radius:50% 0 0 50%;box-shadow:none!important;border-left:1px dashed #4a89dc}:host .calendar-table .calendar-date.previewEnd .day{border-radius:0 50% 50% 0;box-shadow:none!important;border-right:1px dashed #4a89dc}\n"], components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoMonthViewElement.prototype, "isRange", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoMonthViewElement.prototype, "hideOverflowDays", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMonthViewElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-month-view', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"calendar-table\" cellspacing=\"0\" cellpadding=\"0\">\n  <div class=\"calendar-thead\">\n    <div class=\"calendar-th weekday\" *ngFor=\"let day of weekdays\" title=\"{{ day }}\"\n      [attr.data-automation-id]=\"day.substr(0, 2)\">\n      {{ day.substr(0, 2) }}\n    </div>\n  </div>\n  <div class=\"calendar-body\">\n    <div class=\"calendar-week\" *ngFor=\"let week of weeks\">\n      <div class=\"calendar-date\" *ngFor=\"let day of week.days\"\n        [class.today]=\"day.isToday\"\n        [class.notinmonth]=\"day.date.getMonth() !== activeDate.getMonth()\"\n        [class.selected]=\"_isSelected(day.date)\"\n        [class.preview]=\"_isPreview(day.date)\"\n        [class.overlay]=\"_isOverlay(day.date)\"\n        [class]=\"_hasOverlayType(day.date)\"\n        [class.inRange]=\"_isInRange(day.date)\"\n        [class.rangeStart]=\"_isRangeStart(day.date)\"\n        [class.rangeEnd]=\"_isRangeEnd(day.date)\"\n        [class.inPreview]=\"_isInPreview(day.date)\"\n        [class.previewStart]=\"_isPreviewStart(day.date)\"\n        [class.previewEnd]=\"_isPreviewEnd(day.date)\"\n        [class.calendar-date]=\"true\"\n        [attr.aria-label]=\"day.name\"\n        [attr.aria-disabled]=\"isDisabled(day.date)\"\n        [attr.aria-selected]=\"_isSelected(day.date)\"\n        [attr.data-automation-id]=\"day.number\"\n        [title]=\"isDisabled(day.date) ? disabledDateMessage : ''\"\n        (mouseover)=\"onHover($event, day)\">\n        <novo-button\n          class=\"day\"\n          [attr.data-automation-id]=\"day.number\"\n          [disabled]=\"isDisabled(day.date)\"\n          (click)=\"onSelect($event, day)\">\n          {{ day.number }}\n        </novo-button>\n      </div>\n    </div>\n  </div>\n</div>", styles: [":host{background:var(--background-bright);width:100%;height:-webkit-min-content;height:-moz-min-content;height:min-content;position:relative}:host .calendar-table{display:table}:host .calendar-table .calendar-thead{display:table-header-group}:host .calendar-table .calendar-th{display:table-cell;width:30px;padding:10px 0}:host .calendar-table .calendar-body{display:table-row-group}:host .calendar-table .calendar-week{display:table-row}:host .calendar-table .month,:host .calendar-table .year{text-align:center;padding:4px 15px;color:#666;overflow-x:hidden;text-overflow:ellipsis;margin:5px;font-weight:400;border-radius:3px}:host .calendar-table .month.selected,:host .calendar-table .year.selected{background-color:var(--selection);color:#fff}:host .calendar-table .month:hover,:host .calendar-table .year:hover{cursor:pointer;background-color:var(--selection);color:#fff}:host .calendar-table .day{height:3.2rem;width:3.2rem;line-height:1;font-size:1.2rem;padding:1px;border:none;background-color:transparent;border-radius:50%;box-shadow:inset 0 0 0 2px transparent;transition:box-shadow .14s ease-in-out;position:relative;color:#3d464d;color:var(--text-main, #3d464d)}:host .calendar-table .day:focus{outline:none}:host .calendar-table .day:disabled{color:var(--text-disabled);cursor:not-allowed!important;box-shadow:none!important}:host .calendar-table .calendar-date{display:table-cell}:host .calendar-table .calendar-date.notinmonth,:host .calendar-table .calendar-date.notinmonth:not(.selected)>.day{color:var(--text-disabled)}:host .calendar-table .calendar-date:hover .day{cursor:pointer;box-shadow:inset 0 0 0 2px var(--selection)}:host .calendar-table .calendar-date.inRange:hover .day{box-shadow:inset 0 0 0 2px #fff}:host .calendar-table .calendar-date.inRange{background:var(--selection);color:#fff;height:3.2rem;width:3.2rem;border-radius:0}:host .calendar-table .calendar-date.inRange .day{color:#fff}:host .calendar-table .calendar-date.rangeStart{border-radius:50% 0 0 50%;box-shadow:none!important;position:relative}:host .calendar-table .calendar-date.rangeStart:before{content:\"\";position:absolute;height:100%;background:#4a89dc;width:10px;top:0;right:-5px;z-index:-1}:host .calendar-table .calendar-date.rangeEnd{border-radius:0 50% 50% 0;box-shadow:none!important;position:relative}:host .calendar-table .calendar-date.rangeEnd:before{content:\"\";position:absolute;height:100%;background:var(--selection);width:10px;top:0;left:-5px;z-index:-1}:host .calendar-table .calendar-date.selected .day{background:var(--selection);color:#fff}:host .calendar-table .calendar-date.preview:not(.previewStart):not(.previewEnd) .day{border:1px dashed var(--selection)}:host .calendar-table .calendar-date.preview:not(.previewStart):not(.previewEnd).selected .day{border:1px dashed #9dbeff}:host .calendar-table .calendar-date.today .day:after{content:\"\";position:absolute;top:0;left:0;border-radius:100%;width:100%;height:100%;max-width:3.2rem;margin:0 auto;box-shadow:inset 0 0 0 2px #dbdbdb}:host .calendar-table .calendar-date.today.inRange .day:after,:host .calendar-table .calendar-date.today.selected .day:after{box-shadow:inset 0 0 0 2px #9dbeff}:host .calendar-table .calendar-date.inPreview .day{border-radius:0;border-top:1px dashed #4a89dc;border-bottom:1px dashed #4a89dc}:host .calendar-table .calendar-date.previewStart .day{border-radius:50% 0 0 50%;box-shadow:none!important;border-left:1px dashed #4a89dc}:host .calendar-table .calendar-date.previewEnd .day{border-radius:0 50% 50% 0;box-shadow:none!important;border-right:1px dashed #4a89dc}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$2.DomSanitizer }]; }, propDecorators: { minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], preview: [{
                type: Input
            }], overlays: [{
                type: Input
            }], disabledDateMessage: [{
                type: Input
            }], isRange: [{
                type: Input
            }], hideOverflowDays: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.hide-overflow-days']
            }], weekStartsOn: [{
                type: Input
            }], select: [{
                type: Output
            }], hover: [{
                type: Output
            }] } });
/** Checks whether a value is the start of a range. */
function isStart(value, range, rangeEnabled) {
    const [start, end] = range ?? [];
    return rangeEnabled && end !== null && !isSameDay(start, end) && value < end && isSameDay(value, start);
}
/** Checks whether a value is the end of a range. */
function isEnd(value, range, rangeEnabled) {
    const [start, end] = range ?? [];
    return rangeEnabled && start !== null && !isSameDay(start, end) && value >= start && isSameDay(value, end);
}
/** Checks whether a value is inside of a range. */
function isInRange(value, range, rangeEnabled) {
    const [start, end] = range ?? [];
    return rangeEnabled && start !== null && end !== null && !isSameDay(start, end) && value >= start && value <= end;
}

// NG2
class NovoMonthSelectElement {
    constructor(labels) {
        this.labels = labels;
        this.activeDate = new Date();
        this.selected = [];
        // Select callback for output
        this.select = new EventEmitter(false);
        // List of all months
        this.monthNames = this.labels.getMonths();
    }
    ngOnInit() { }
    onSelect(event, month) {
        // Helpers.swallowEvent(event);
        this.select.next({ event, month });
    }
    _isActive(month) {
        return this.activeDate && month === getMonth(this.activeDate);
    }
    _isSelected(month) {
        return this.selected && month === getMonth(this.selected[0]);
    }
}
NovoMonthSelectElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMonthSelectElement, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoMonthSelectElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoMonthSelectElement, selector: "novo-month-select", inputs: { activeDate: "activeDate", selected: "selected" }, outputs: { select: "select" }, ngImport: i0, template: "<div *ngFor=\"let month of monthNames; let i = index\" (click)=\"onSelect($event, i)\">\n  <div class=\"month\" [class.selected]=\"_isSelected(i)\" [attr.data-automation-id]=\"month\">\n    {{ month }}</div>\n</div>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;flex:1}:host .month{padding:1rem;cursor:pointer;border-radius:.4rem}:host .month.selected{background-color:#4a89dc;color:#fff}:host .month:hover{background-color:#4a89dc;color:#fff}\n"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMonthSelectElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-month-select', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div *ngFor=\"let month of monthNames; let i = index\" (click)=\"onSelect($event, i)\">\n  <div class=\"month\" [class.selected]=\"_isSelected(i)\" [attr.data-automation-id]=\"month\">\n    {{ month }}</div>\n</div>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr;flex:1}:host .month{padding:1rem;cursor:pointer;border-radius:.4rem}:host .month.selected{background-color:#4a89dc;color:#fff}:host .month:hover{background-color:#4a89dc;color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], select: [{
                type: Output
            }] } });

// NG2
class NovoYearSelectElement {
    constructor(labels) {
        this.labels = labels;
        this.activeDate = new Date();
        this.selected = [];
        // Select callback for output
        this.select = new EventEmitter(false);
        // List of all years (generated in ngOnInit)
        this.years = [];
    }
    ngOnInit() {
        // Determine the year array
        const now = new Date();
        const start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        const end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        const years = [];
        for (let i = start; i <= end; i++) {
            years.push(i);
        }
        this.years = years.reverse();
    }
    onSelect(event, year) {
        // Helpers.swallowEvent(event);
        this.select.next({ event, year });
    }
    _isActive(year) {
        return this.activeDate && year === getYear(this.activeDate);
    }
    _isSelected(year) {
        return this.selected && year === getYear(this.selected[0]);
    }
}
NovoYearSelectElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoYearSelectElement, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoYearSelectElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoYearSelectElement, selector: "novo-year-select", inputs: { minYear: "minYear", maxYear: "maxYear", activeDate: "activeDate", selected: "selected" }, outputs: { select: "select" }, ngImport: i0, template: "<div *ngFor=\"let year of years\" (click)=\"onSelect($event, year)\">\n  <div class=\"year\" [class.selected]=\"_isSelected(year)\" [attr.data-automation-id]=\"year\">{{ year }}</div>\n</div>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr 1fr;flex:1;max-height:320px;overflow-y:scroll}:host .year{padding:1rem;cursor:pointer;border-radius:.4rem}:host .year.selected{background-color:#4a89dc;color:#fff}:host .year:hover{background-color:#4a89dc;color:#fff}\n"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoYearSelectElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-year-select', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div *ngFor=\"let year of years\" (click)=\"onSelect($event, year)\">\n  <div class=\"year\" [class.selected]=\"_isSelected(year)\" [attr.data-automation-id]=\"year\">{{ year }}</div>\n</div>", styles: [":host{display:grid;grid-template-columns:1fr 1fr 1fr 1fr;flex:1;max-height:320px;overflow-y:scroll}:host .year{padding:1rem;cursor:pointer;border-radius:.4rem}:host .year.selected{background-color:#4a89dc;color:#fff}:host .year:hover{background-color:#4a89dc;color:#fff}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], selected: [{
                type: Input
            }], select: [{
                type: Output
            }] } });

// NG2
class NovoCalendarElement {
    constructor(labels, element, cdr, _sanitizer) {
        this.labels = labels;
        this.element = element;
        this.cdr = cdr;
        this._sanitizer = _sanitizer;
        // Default view mode (select days)
        this.activeView = 'days';
        this.layout = 'horizontal';
        this._selected = [];
        this.selectedChange = new EventEmitter();
        this.preview = [];
        this.previewChange = new EventEmitter();
        this.activeDateChange = new EventEmitter();
        this.overlays = [];
        this._activeDate = new Date();
        this._mode = 'single';
        this._numberOfMonths = [0];
        this._weekStartsOn = 0;
        this._strategy = new DefaultDateSelectionStrategy();
    }
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = value ? value.filter(isDate).map((d) => startOfDay(d)) : [];
    }
    get activeDate() {
        return this._activeDate;
    }
    set activeDate(value) {
        if (!isSameDay(value, this._activeDate)) {
            this._activeDate = value;
            this.activeDateChange.next(value);
            this.updateView(value);
        }
    }
    get weekStartsOn() {
        return this._weekStartsOn;
    }
    set weekStartsOn(value) {
        this._weekStartsOn = value;
        if (this.mode === 'week') {
            this._strategy = new WeekSelectionStrategy(this.weekStartsOn);
        }
    }
    get numberOfMonths() {
        return this._numberOfMonths.length;
    }
    set numberOfMonths(value) {
        this._numberOfMonths = Array.from(Array(Number(value)).keys());
        this.updateView(this.activeDate);
    }
    get mode() {
        return this._mode;
    }
    set mode(value) {
        if (this._mode !== value) {
            this._mode = value;
            switch (value) {
                case 'multiple':
                    this._strategy = new MultiDateSelectionStrategy();
                    break;
                case 'range':
                    this._strategy = new RangeSelectionStrategy();
                    break;
                case 'week':
                    this._strategy = new WeekSelectionStrategy(this.weekStartsOn);
                    break;
                case 'single':
                default:
                    this._strategy = new DefaultDateSelectionStrategy();
                    break;
            }
        }
    }
    get hb_width() {
        if (this.layout === 'vertical') {
            return this._sanitizer.bypassSecurityTrustStyle(`min-content`);
        }
        return this._sanitizer.bypassSecurityTrustStyle(`min-content`);
    }
    get hb_horiztonal() {
        return this.layout !== 'vertical';
    }
    get hb_vertical() {
        return this.layout === 'vertical';
    }
    ngOnInit() {
        if (!this.activeDate) {
            this.activeDate = this.selected.length ? this.selected[0] : new Date();
        }
        this.updateView(this.activeDate);
    }
    updateView(activeDate) {
        this.activeDate = new Date(activeDate ? new Date(activeDate) : new Date());
        this.months = [];
        const month = startOfMonth(this.activeDate);
        for (const i of this._numberOfMonths) {
            const date = addMonths(month, i);
            const label = this.labels.formatDateWithFormat(date, { month: 'short' });
            this.months.push({ date, label });
        }
    }
    setToday() {
        const tmp = new Date();
        this.updateView(tmp);
        // Go back to days
        this.openView(null, 'days');
    }
    monthSelected({ event, month }) {
        const date = this.activeDate ? this.activeDate : new Date().getMonth();
        const tmp = setMonth(date, month);
        this.updateView(tmp);
        // Go back to days
        this.openView(null, 'days');
    }
    yearSelected({ event, year }) {
        const date = this.activeDate ? this.activeDate : new Date();
        const tmp = setYear(date, year);
        this.updateView(tmp);
        // Go back to days
        this.openView(null, 'days');
    }
    dateSelected({ event, day }) {
        // Helpers.swallowEvent(event);
        this.selected = this._strategy.selectionFinished(day.date, this.selected, event);
        this.selectedChange.emit(this.selected);
        this.cdr.markForCheck();
    }
    updatePreview({ event, day }) {
        this.preview = this._strategy.createPreview(day.date, this.selected, event);
        this.previewChange.emit(this.preview);
    }
    prevMonth(event) {
        Helpers.swallowEvent(event);
        const tmp = subMonths(this.activeDate, 1);
        this.updateView(tmp);
    }
    nextMonth(event) {
        Helpers.swallowEvent(event);
        const tmp = addMonths(this.activeDate, 1);
        this.updateView(tmp);
    }
    openView(event, type) {
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.activeView) {
            this.activeView = 'days';
        }
        else {
            this.activeView = type;
        }
        // Make sure to scroll the selected one into view
        if (this.activeView === 'years' || this.activeView === 'months') {
            setTimeout(() => {
                const container = this.element.nativeElement.querySelector(`.calendar-content.${this.activeView}`);
                const selectedItem = this.element.nativeElement.querySelector(`.calendar-content.${this.activeView} .${this.activeView === 'years' ? 'year' : 'month'}.selected`);
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            });
        }
    }
    _isRange() {
        return ['week', 'range'].includes(this.mode);
    }
}
NovoCalendarElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCalendarElement, deps: [{ token: NovoLabelService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoCalendarElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoCalendarElement, selector: "novo-calendar", inputs: { minYear: "minYear", maxYear: "maxYear", minDate: "minDate", maxDate: "maxDate", activeView: "activeView", layout: "layout", selected: "selected", preview: "preview", overlays: "overlays", disabledDateMessage: "disabledDateMessage", activeDate: "activeDate", weekStartsOn: "weekStartsOn", numberOfMonths: "numberOfMonths", mode: "mode" }, outputs: { selectedChange: "selectedChange", previewChange: "previewChange", activeDateChange: "activeDateChange" }, host: { properties: { "style.width": "this.hb_width", "class.layout-horizontal": "this.hb_horiztonal", "class.layout-vertical": "this.hb_vertical" } }, ngImport: i0, template: "<div class=\"calendar-header\">\n  <novo-button theme=\"icon\" icon=\"previous\" size=\"small\" (click)=\"prevMonth($event)\"\n    data-automation-id=\"calendar-previous\"></novo-button>\n  <ng-container *ngFor=\"let month of months; let i = index;\">\n    <span class=\"heading\" [class.secondary]=\"i > 0\">\n      <span class=\"month\" (click)=\"openView($event, 'months')\"\n        data-automation-id=\"header-month\">{{ month.label }}</span>\n      <span class=\"year\" (click)=\"openView($event, 'years')\"\n        data-automation-id=\"header-year\">{{ month.date?.getFullYear() }}</span>\n    </span>\n  </ng-container>\n  <novo-button theme=\"icon\" icon=\"next\" size=\"small\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\">\n  </novo-button>\n</div>\n<section class=\"calendar-content\" [ngSwitch]=\"activeView\">\n  <ng-container *ngSwitchCase=\"'days'\">\n    <ng-container *ngFor=\"let month of months; let i = index\">\n      <div class=\"calendar-header\" *ngIf=\"layout==='vertical' && i > 0\">\n        <span class=\"previous\" (click)=\"prevMonth($event)\" data-automation-id=\"calendar-previous\"></span>\n        <span class=\"heading\">\n          <span class=\"month\" (click)=\"openView($event, 'months')\"\n            data-automation-id=\"header-month\">{{ month.label }}</span>\n          <span class=\"year\" (click)=\"openView($event, 'years')\"\n            data-automation-id=\"header-year\">{{ month.date?.getFullYear() }}</span>\n        </span>\n        <span class=\"next\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\"></span>\n      </div>\n      <novo-month-view\n        class=\"month-view\"\n        [activeDate]=\"month.date\"\n        [selected]=\"selected\"\n        [preview]=\"preview\"\n        [overlays]=\"overlays\"\n        [isRange]=\"_isRange()\"\n        [hideOverflowDays]=\"months.length > 1\"\n        [weekStartsOn]=\"weekStartsOn\"\n        [disabledDateMessage]=\"disabledDateMessage\"\n        [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\"\n        (select)=\"dateSelected($event)\"\n        (hover)=\"updatePreview($event)\"></novo-month-view>\n    </ng-container>\n  </ng-container>\n  <novo-month-select\n    *ngSwitchCase=\"'months'\"\n    [activeDate]=\"activeDate\"\n    [selected]=\"selected\"\n    (select)=\"monthSelected($event)\">\n  </novo-month-select>\n  <novo-year-select\n    *ngSwitchCase=\"'years'\"\n    [activeDate]=\"activeDate\"\n    [selected]=\"selected\"\n    (select)=\"yearSelected($event)\">\n  </novo-year-select>\n</section>", styles: [":host(.layout-horizontal){font-size:1.2rem}:host(.layout-horizontal) .calendar-content{flex-flow:row nowrap}:host(.layout-horizontal) .month-view+.month-view{border-collapse:unset;border-left:1px solid #dbdbdb;margin-left:.5rem;padding-left:.5rem}:host(.layout-vertical) .calendar-content{flex-flow:column nowrap}:host(.layout-vertical) .calendar-header .heading.secondary{display:none}:host{display:block;width:100%;text-align:center;background:var(--background-bright);color:var(--text-main);position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none}:host .calendar-content{display:flex;width:100%;height:-webkit-min-content;height:-moz-min-content;height:min-content;position:static;top:0;left:0;overflow:hidden}:host .calendar-header{width:100%;display:flex;flex-flow:row nowrap;border-collapse:collapse;padding:1rem .8rem;-webkit-user-select:none;justify-content:space-between;align-items:center;cursor:default;border-bottom:1px solid var(--border)}:host .calendar-header .previous{width:30px;height:15px;display:inline-block;cursor:pointer}:host .calendar-header .previous:after{content:\"\";border-bottom:4px solid transparent;border-top:4px solid transparent;border-right:4px solid #aaa;display:inline-block;height:0;vertical-align:middle;width:0}:host .calendar-header .previous:hover:after{border-right:4px solid #4a89dc;cursor:pointer}:host .calendar-header .heading{flex:1;display:inline-block;vertical-align:middle;color:#4a89dc;font-weight:600}:host .calendar-header .heading .month{border-radius:2px;padding:3px 8px}:host .calendar-header .heading .month:hover{background:#4a89dc;color:#fff;cursor:pointer}:host .calendar-header .heading .year{border-radius:2px;padding:3px 8px}:host .calendar-header .heading .year:hover{background:#4a89dc;color:#fff;cursor:pointer}:host .calendar-header .next{width:30px;height:15px;display:inline-block;cursor:pointer}:host .calendar-header .next:before{content:\"\";border-bottom:4px solid transparent;border-top:4px solid transparent;border-left:4px solid #aaa;display:inline-block;height:0;vertical-align:middle;width:0}:host .calendar-header .next:hover:before{opacity:1;border-left:4px solid #4a89dc;cursor:pointer}\n"], components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoMonthViewElement, selector: "novo-month-view", inputs: ["minDate", "maxDate", "activeDate", "selected", "preview", "overlays", "disabledDateMessage", "isRange", "hideOverflowDays", "weekStartsOn"], outputs: ["select", "hover"] }, { type: NovoMonthSelectElement, selector: "novo-month-select", inputs: ["activeDate", "selected"], outputs: ["select"] }, { type: NovoYearSelectElement, selector: "novo-year-select", inputs: ["minYear", "maxYear", "activeDate", "selected"], outputs: ["select"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCalendarElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-calendar', template: "<div class=\"calendar-header\">\n  <novo-button theme=\"icon\" icon=\"previous\" size=\"small\" (click)=\"prevMonth($event)\"\n    data-automation-id=\"calendar-previous\"></novo-button>\n  <ng-container *ngFor=\"let month of months; let i = index;\">\n    <span class=\"heading\" [class.secondary]=\"i > 0\">\n      <span class=\"month\" (click)=\"openView($event, 'months')\"\n        data-automation-id=\"header-month\">{{ month.label }}</span>\n      <span class=\"year\" (click)=\"openView($event, 'years')\"\n        data-automation-id=\"header-year\">{{ month.date?.getFullYear() }}</span>\n    </span>\n  </ng-container>\n  <novo-button theme=\"icon\" icon=\"next\" size=\"small\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\">\n  </novo-button>\n</div>\n<section class=\"calendar-content\" [ngSwitch]=\"activeView\">\n  <ng-container *ngSwitchCase=\"'days'\">\n    <ng-container *ngFor=\"let month of months; let i = index\">\n      <div class=\"calendar-header\" *ngIf=\"layout==='vertical' && i > 0\">\n        <span class=\"previous\" (click)=\"prevMonth($event)\" data-automation-id=\"calendar-previous\"></span>\n        <span class=\"heading\">\n          <span class=\"month\" (click)=\"openView($event, 'months')\"\n            data-automation-id=\"header-month\">{{ month.label }}</span>\n          <span class=\"year\" (click)=\"openView($event, 'years')\"\n            data-automation-id=\"header-year\">{{ month.date?.getFullYear() }}</span>\n        </span>\n        <span class=\"next\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\"></span>\n      </div>\n      <novo-month-view\n        class=\"month-view\"\n        [activeDate]=\"month.date\"\n        [selected]=\"selected\"\n        [preview]=\"preview\"\n        [overlays]=\"overlays\"\n        [isRange]=\"_isRange()\"\n        [hideOverflowDays]=\"months.length > 1\"\n        [weekStartsOn]=\"weekStartsOn\"\n        [disabledDateMessage]=\"disabledDateMessage\"\n        [minDate]=\"minDate\"\n        [maxDate]=\"maxDate\"\n        (select)=\"dateSelected($event)\"\n        (hover)=\"updatePreview($event)\"></novo-month-view>\n    </ng-container>\n  </ng-container>\n  <novo-month-select\n    *ngSwitchCase=\"'months'\"\n    [activeDate]=\"activeDate\"\n    [selected]=\"selected\"\n    (select)=\"monthSelected($event)\">\n  </novo-month-select>\n  <novo-year-select\n    *ngSwitchCase=\"'years'\"\n    [activeDate]=\"activeDate\"\n    [selected]=\"selected\"\n    (select)=\"yearSelected($event)\">\n  </novo-year-select>\n</section>", styles: [":host(.layout-horizontal){font-size:1.2rem}:host(.layout-horizontal) .calendar-content{flex-flow:row nowrap}:host(.layout-horizontal) .month-view+.month-view{border-collapse:unset;border-left:1px solid #dbdbdb;margin-left:.5rem;padding-left:.5rem}:host(.layout-vertical) .calendar-content{flex-flow:column nowrap}:host(.layout-vertical) .calendar-header .heading.secondary{display:none}:host{display:block;width:100%;text-align:center;background:var(--background-bright);color:var(--text-main);position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none}:host .calendar-content{display:flex;width:100%;height:-webkit-min-content;height:-moz-min-content;height:min-content;position:static;top:0;left:0;overflow:hidden}:host .calendar-header{width:100%;display:flex;flex-flow:row nowrap;border-collapse:collapse;padding:1rem .8rem;-webkit-user-select:none;justify-content:space-between;align-items:center;cursor:default;border-bottom:1px solid var(--border)}:host .calendar-header .previous{width:30px;height:15px;display:inline-block;cursor:pointer}:host .calendar-header .previous:after{content:\"\";border-bottom:4px solid transparent;border-top:4px solid transparent;border-right:4px solid #aaa;display:inline-block;height:0;vertical-align:middle;width:0}:host .calendar-header .previous:hover:after{border-right:4px solid #4a89dc;cursor:pointer}:host .calendar-header .heading{flex:1;display:inline-block;vertical-align:middle;color:#4a89dc;font-weight:600}:host .calendar-header .heading .month{border-radius:2px;padding:3px 8px}:host .calendar-header .heading .month:hover{background:#4a89dc;color:#fff;cursor:pointer}:host .calendar-header .heading .year{border-radius:2px;padding:3px 8px}:host .calendar-header .heading .year:hover{background:#4a89dc;color:#fff;cursor:pointer}:host .calendar-header .next{width:30px;height:15px;display:inline-block;cursor:pointer}:host .calendar-header .next:before{content:\"\";border-bottom:4px solid transparent;border-top:4px solid transparent;border-left:4px solid #aaa;display:inline-block;height:0;vertical-align:middle;width:0}:host .calendar-header .next:hover:before{opacity:1;border-left:4px solid #4a89dc;cursor:pointer}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$2.DomSanitizer }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], activeView: [{
                type: Input
            }], layout: [{
                type: Input
            }], selected: [{
                type: Input
            }], selectedChange: [{
                type: Output
            }], preview: [{
                type: Input
            }], previewChange: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], overlays: [{
                type: Input
            }], disabledDateMessage: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], weekStartsOn: [{
                type: Input
            }], numberOfMonths: [{
                type: Input
            }], mode: [{
                type: Input
            }], hb_width: [{
                type: HostBinding,
                args: ['style.width']
            }], hb_horiztonal: [{
                type: HostBinding,
                args: ['class.layout-horizontal']
            }], hb_vertical: [{
                type: HostBinding,
                args: ['class.layout-vertical']
            }] } });

// NG2
class NovoCalendarModule {
}
NovoCalendarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCalendarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoCalendarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCalendarModule, declarations: [NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement], imports: [CommonModule, FormsModule, NovoButtonModule, NovoPipesModule, TextMaskModule, NovoIconModule], exports: [NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement] });
NovoCalendarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCalendarModule, imports: [[CommonModule, FormsModule, NovoButtonModule, NovoPipesModule, TextMaskModule, NovoIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCalendarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoButtonModule, NovoPipesModule, TextMaskModule, NovoIconModule],
                    declarations: [NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement],
                    exports: [NovoMonthViewElement, NovoMonthSelectElement, NovoYearSelectElement, NovoCalendarElement],
                }]
        }] });

class CardActionsElement {
}
CardActionsElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardActionsElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardActionsElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: CardActionsElement, selector: "novo-card-actions", ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardActionsElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-card-actions',
                    template: '<ng-content></ng-content>',
                }]
        }] });
/**
 * Content of a card, needed as it's used as a selector in the API.
 */
class CardContentElement {
    constructor() {
        this.condensed = false;
    }
}
CardContentElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardContentElement, deps: [], target: i0.ɵɵFactoryTarget.Directive });
CardContentElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: CardContentElement, selector: "novo-card-content, [novo-card-content], [novoCardContent]", inputs: { condensed: "condensed" }, host: { properties: { "class.condensed": "condensed" }, classAttribute: "novo-card-content" }, ngImport: i0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], CardContentElement.prototype, "condensed", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardContentElement, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-card-content, [novo-card-content], [novoCardContent]',
                    host: { class: 'novo-card-content', '[class.condensed]': 'condensed' },
                }]
        }], propDecorators: { condensed: [{
                type: Input
            }] } });
/**
 * Content of a card, needed as it's used as a selector in the API.
 */
class CardHeaderElement {
}
CardHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
CardHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: CardHeaderElement, selector: "novo-card-header, [novo-card-header], [novoCardHeader]", host: { classAttribute: "novo-card-header" }, ngImport: i0, template: `
    <ng-content select="novo-avatar, [novo-avatar], novo-icon"></ng-content>
    <div class="novo-card-header-text">
      <ng-content select="novo-title, [novo-title], novo-text, novo-label, novo-caption"></ng-content>
    </div>
    <ng-content></ng-content>
    <div class="novo-card-header-actions">
      <ng-content select="novo-action"></ng-content>
    </div>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-card-header, [novo-card-header], [novoCardHeader]',
                    host: { class: 'novo-card-header' },
                    template: `
    <ng-content select="novo-avatar, [novo-avatar], novo-icon"></ng-content>
    <div class="novo-card-header-text">
      <ng-content select="novo-title, [novo-title], novo-text, novo-label, novo-caption"></ng-content>
    </div>
    <ng-content></ng-content>
    <div class="novo-card-header-actions">
      <ng-content select="novo-action"></ng-content>
    </div>
  `,
                }]
        }] });
class CardFooterElement {
}
CardFooterElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardFooterElement, deps: [], target: i0.ɵɵFactoryTarget.Directive });
CardFooterElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: CardFooterElement, selector: "novo-card-footer, [novo-card-footer], [novoCardFooter]", host: { classAttribute: "novo-card-footer" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardFooterElement, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-card-footer, [novo-card-footer], [novoCardFooter]',
                    host: { class: 'novo-card-footer' },
                }]
        }] });
class CardElement {
    constructor(labels) {
        this.padding = true;
        this.config = {};
        this.inset = 'none';
        this.onClose = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.labels = labels;
    }
    get hbInset() {
        return `novo-card-inset-${this.inset}`;
    }
    ngOnInit() {
        this.config = this.config || {};
    }
    ngOnChanges(changes) {
        this.config = this.config || {};
        this.cardAutomationId = `${(this.title || this.config.title || 'no-title').trim().toLowerCase().replace(/\s/g, '-')}-card`;
        const newIcon = this.icon || this.config.icon;
        const newMessageIcon = this.messageIcon || this.config.messageIcon;
        this.iconClass = newIcon ? `bhi-${newIcon}` : null;
        this.messageIconClass = newMessageIcon ? `bhi-${newMessageIcon}` : null;
    }
    toggleClose() {
        if (!this.config.onClose) {
            this.onClose.next();
        }
        else {
            this.config.onClose();
        }
    }
    toggleRefresh() {
        if (!this.config.onRefresh) {
            this.onRefresh.next();
        }
        else {
            this.config.onRefresh();
        }
    }
}
CardElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardElement, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
CardElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: CardElement, selector: "novo-card", inputs: { padding: "padding", config: "config", title: "title", message: "message", messageIcon: "messageIcon", icon: "icon", iconTooltip: "iconTooltip", refresh: "refresh", close: "close", move: "move", loading: "loading", inline: "inline", inset: "inset" }, outputs: { onClose: "onClose", onRefresh: "onRefresh" }, host: { properties: { "attr.data-automation-id": "cardAutomationId", "class.loading": "loading || config.loading", "class.novo-card-inline": "this.inline", "class": "this.hbInset" }, classAttribute: "novo-card" }, usesOnChanges: true, ngImport: i0, template: `
    <!--Loading-->
    <div class="card-loading-container" *ngIf="loading || config.loading">
      <novo-loading theme="line" [attr.data-automation-id]="cardAutomationId + '-loading'"></novo-loading>
    </div>
    <!--Card Header-->
    <header *ngIf="title || config.title">
      <div class="title">
        <!--Grabber Icon-->
        <novo-icon
          *ngIf="move || config.move"
          tooltip="{{ labels.move }}"
          tooltipPosition="bottom-right"
          [attr.data-automation-id]="cardAutomationId + '-move'"
          >move</novo-icon
        >
        <!--Card Title-->
        <h3 [attr.data-automation-id]="cardAutomationId + '-title'">
          <span [tooltip]="iconTooltip" tooltipPosition="right"><i *ngIf="icon" [ngClass]="iconClass"></i></span>
          {{ title || config.title }}
        </h3>
      </div>
      <!--Card Actions-->
      <div class="actions" [attr.data-automation-id]="cardAutomationId + '-actions'">
        <ng-content select="novo-card-actions"></ng-content>
        <novo-button
          theme="icon"
          icon="refresh"
          (click)="toggleRefresh()"
          *ngIf="refresh || config.refresh"
          [attr.data-automation-id]="cardAutomationId + '-refresh'"
          tooltip="{{ labels.refresh }}"
          tooltipPosition="bottom-left"
        ></novo-button>

        <novo-button
          theme="icon"
          icon="close-o"
          (click)="toggleClose()"
          *ngIf="close || config.close"
          [attr.data-automation-id]="cardAutomationId + '-close'"
          tooltip="{{ labels.close }}"
          tooltipPosition="bottom-left"
        ></novo-button>
      </div>
    </header>
    <!--Content (transcluded)-->
    <ng-content *ngIf="!(loading || config.loading) && !(message || config.message)"></ng-content>
    <!--Error/Empty Message-->
    <p
      class="card-message"
      *ngIf="!(loading || config.loading) && (message || config.message)"
      [attr.data-automation-id]="cardAutomationId + '-message'"
    >
      <i *ngIf="messageIconClass" [ngClass]="messageIconClass"></i> <span [innerHtml]="message || config.message"></span>
    </p>
    <!--Card Footer-->
    <ng-content
      *ngIf="!(loading || config.loading) && !(message || config.message)"
      select="footer,novo-card-footer,[novo-card-footer],[novoCardFooter]"
    ></ng-content>
  `, isInline: true, components: [{ type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], CardElement.prototype, "inline", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CardElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-card',
                    host: {
                        class: 'novo-card',
                        '[attr.data-automation-id]': 'cardAutomationId',
                        '[class.loading]': 'loading || config.loading',
                    },
                    template: `
    <!--Loading-->
    <div class="card-loading-container" *ngIf="loading || config.loading">
      <novo-loading theme="line" [attr.data-automation-id]="cardAutomationId + '-loading'"></novo-loading>
    </div>
    <!--Card Header-->
    <header *ngIf="title || config.title">
      <div class="title">
        <!--Grabber Icon-->
        <novo-icon
          *ngIf="move || config.move"
          tooltip="{{ labels.move }}"
          tooltipPosition="bottom-right"
          [attr.data-automation-id]="cardAutomationId + '-move'"
          >move</novo-icon
        >
        <!--Card Title-->
        <h3 [attr.data-automation-id]="cardAutomationId + '-title'">
          <span [tooltip]="iconTooltip" tooltipPosition="right"><i *ngIf="icon" [ngClass]="iconClass"></i></span>
          {{ title || config.title }}
        </h3>
      </div>
      <!--Card Actions-->
      <div class="actions" [attr.data-automation-id]="cardAutomationId + '-actions'">
        <ng-content select="novo-card-actions"></ng-content>
        <novo-button
          theme="icon"
          icon="refresh"
          (click)="toggleRefresh()"
          *ngIf="refresh || config.refresh"
          [attr.data-automation-id]="cardAutomationId + '-refresh'"
          tooltip="{{ labels.refresh }}"
          tooltipPosition="bottom-left"
        ></novo-button>

        <novo-button
          theme="icon"
          icon="close-o"
          (click)="toggleClose()"
          *ngIf="close || config.close"
          [attr.data-automation-id]="cardAutomationId + '-close'"
          tooltip="{{ labels.close }}"
          tooltipPosition="bottom-left"
        ></novo-button>
      </div>
    </header>
    <!--Content (transcluded)-->
    <ng-content *ngIf="!(loading || config.loading) && !(message || config.message)"></ng-content>
    <!--Error/Empty Message-->
    <p
      class="card-message"
      *ngIf="!(loading || config.loading) && (message || config.message)"
      [attr.data-automation-id]="cardAutomationId + '-message'"
    >
      <i *ngIf="messageIconClass" [ngClass]="messageIconClass"></i> <span [innerHtml]="message || config.message"></span>
    </p>
    <!--Card Footer-->
    <ng-content
      *ngIf="!(loading || config.loading) && !(message || config.message)"
      select="footer,novo-card-footer,[novo-card-footer],[novoCardFooter]"
    ></ng-content>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { padding: [{
                type: Input
            }], config: [{
                type: Input
            }], title: [{
                type: Input
            }], message: [{
                type: Input
            }], messageIcon: [{
                type: Input
            }], icon: [{
                type: Input
            }], iconTooltip: [{
                type: Input
            }], refresh: [{
                type: Input
            }], close: [{
                type: Input
            }], move: [{
                type: Input
            }], loading: [{
                type: Input
            }], inline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.novo-card-inline']
            }], inset: [{
                type: Input
            }], hbInset: [{
                type: HostBinding,
                args: ['class']
            }], onClose: [{
                type: Output
            }], onRefresh: [{
                type: Output
            }] } });

// NG2
class NovoCardModule {
}
NovoCardModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoCardModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCardModule, declarations: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement], imports: [CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule], exports: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement] });
NovoCardModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCardModule, imports: [[CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCardModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoIconModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                    declarations: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement],
                    exports: [CardElement, CardActionsElement, CardContentElement, CardHeaderElement, CardFooterElement],
                }]
        }] });

class NovoNavElement {
    constructor() {
        this.theme = '';
        this.direction = '';
        this.condensed = false;
        this.items = [];
        this._selectedIndex = null;
        /** The tab index that should be selected after the content has been checked. */
        this._indexToSelect = 0;
        /** Output to enable support for two-way binding on `[(selectedIndex)]` */
        this.selectedIndexChange = new EventEmitter();
    }
    /** The index of the active tab. */
    get selectedIndex() {
        return this._selectedIndex;
    }
    set selectedIndex(value) {
        this._indexToSelect = coerceNumberProperty(value, null);
    }
    ngAfterContentChecked() {
        // Don't clamp the `indexToSelect` immediately in the setter because it can happen that
        // the amount of tabs changes before the actual change detection runs.
        const indexToSelect = (this._indexToSelect = this._clampTabIndex(this._indexToSelect));
        if (this._selectedIndex !== indexToSelect) {
            const isFirstRun = this._selectedIndex == null;
            // Changing these values after change detection has run
            // since the checked content may contain references to them.
            Promise.resolve().then(() => {
                this._deactivateAllItems(this.items);
                this._activateSelectedItem(indexToSelect);
                this._showActiveContent(indexToSelect);
                if (!isFirstRun) {
                    this.selectedIndexChange.emit(indexToSelect);
                }
            });
            this._selectedIndex = indexToSelect;
        }
    }
    select(item) {
        const indexToSelect = this.items.indexOf(item);
        // Deactivate all other tabs
        this._deactivateAllItems(this.items);
        this._activateSelectedItem(indexToSelect);
        this._showActiveContent(indexToSelect);
        this.selectedIndexChange.emit(indexToSelect);
    }
    add(item) {
        if (this.items.length === 0) {
            item.active = true;
            // item.selected.next();
        }
        this.items.push(item);
    }
    _activateSelectedItem(indexToSelect) {
        const item = this.items[indexToSelect];
        if (item) {
            item.active = true;
        }
    }
    _showActiveContent(indexToSelect) {
        if (this.outlet) {
            this.outlet.show(indexToSelect);
        }
    }
    _deactivateAllItems(items) {
        items.forEach((t) => {
            if (t.active === true) {
                // t.deselected.next();
            }
            t.active = false;
        });
    }
    /** Clamps the given index to the bounds of 0 and the tabs length. */
    _clampTabIndex(index) {
        return Math.min(this.items.length - 1, Math.max(index || 0, 0));
    }
}
NovoNavElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoNavElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoNavElement, selector: "novo-nav", inputs: { theme: "theme", direction: "direction", outlet: "outlet", router: "router", condensed: "condensed", selectedIndex: "selectedIndex" }, outputs: { selectedIndexChange: "selectedIndexChange" }, host: { properties: { "class.condensed": "this.condensed" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoNavElement.prototype, "condensed", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-nav',
                    template: '<ng-content></ng-content>',
                }]
        }], propDecorators: { theme: [{
                type: Input
            }], direction: [{
                type: Input
            }], outlet: [{
                type: Input
            }], router: [{
                type: Input
            }], condensed: [{
                type: HostBinding,
                args: ['class.condensed']
            }, {
                type: Input
            }], selectedIndex: [{
                type: Input
            }], selectedIndexChange: [{
                type: Output
            }] } });
class NovoTabElement {
    constructor(nav, el, cdr) {
        this.el = el;
        this.cdr = cdr;
        this.role = 'tab';
        this.active = false;
        this.disabled = false;
        this.activeChange = new EventEmitter();
        this.onlyText = true;
        this.nav = nav;
        this.nav.add(this);
        const tablink = el.nativeElement.querySelector('.novo-tab-link');
        if (tablink) {
            for (let i = 0; i < tablink.childNodes.length; i++) {
                if (tablink.childNodes[i].nodeType !== Node.TEXT_NODE)
                    this.onlyText = false;
            }
        }
    }
    get hb_textOnly() {
        return this.onlyText;
    }
    select() {
        if (!this.disabled) {
            this.activeChange.emit(true);
            this.nav.select(this);
        }
        this.cdr.detectChanges();
    }
}
NovoTabElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabElement, deps: [{ token: NovoNavElement }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoTabElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTabElement, selector: "novo-tab", inputs: { active: "active", color: "color", disabled: "disabled" }, outputs: { activeChange: "activeChange" }, host: { listeners: { "click": "select()" }, properties: { "class.active": "active", "class.disabled": "disabled", "attr.role": "this.role", "class.text-only": "this.hb_textOnly" } }, viewQueries: [{ propertyName: "tablink", first: true, predicate: ["tablink"], descendants: true }], ngImport: i0, template: `
    <div #tablink class="novo-tab-link">
      <ng-content></ng-content>
    </div>
    <span class="indicator"></span>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoTabElement.prototype, "disabled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-tab',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                        '[attr.role]': 'tab',
                    },
                    template: `
    <div #tablink class="novo-tab-link">
      <ng-content></ng-content>
    </div>
    <span class="indicator"></span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: NovoNavElement }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], active: [{
                type: Input
            }], color: [{
                type: Input
            }], disabled: [{
                type: Input
            }], activeChange: [{
                type: Output
            }], hb_textOnly: [{
                type: HostBinding,
                args: ['class.text-only']
            }], tablink: [{
                type: ViewChild,
                args: ['tablink']
            }] } });
class NovoTabButtonElement {
    constructor(nav) {
        this.role = 'tab';
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    select() {
        if (!this.disabled) {
            this.nav.select(this);
        }
    }
}
NovoTabButtonElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabButtonElement, deps: [{ token: NovoNavElement }], target: i0.ɵɵFactoryTarget.Component });
NovoTabButtonElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTabButtonElement, selector: "novo-tab-button", inputs: { active: "active", disabled: "disabled" }, host: { listeners: { "click": "select()" }, properties: { "class.active": "active", "class.disabled": "disabled", "attr.role": "this.role" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabButtonElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-tab-button',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: NovoNavElement }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], active: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
class NovoTabLinkElement {
    constructor(nav, router, cdr, link) {
        this.router = router;
        this.cdr = cdr;
        this.link = link;
        this.role = 'tab';
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    ngOnInit() {
        if (this.isLinkActive(this.link)) {
            this.nav.select(this);
        }
    }
    select() {
        if (!this.disabled) {
            this.nav.select(this);
            if (this.spy) {
                const el = document.querySelector(`#${this.spy}`);
                el?.scrollIntoView(true);
            }
        }
    }
    isLinkActive(link) {
        return link && link.urlTree ? this.router.isActive(link.urlTree, false) : false;
    }
}
NovoTabLinkElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabLinkElement, deps: [{ token: NovoNavElement }, { token: i1$3.Router }, { token: i0.ChangeDetectorRef }, { token: i1$3.RouterLink, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoTabLinkElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTabLinkElement, selector: "novo-tab-link", inputs: { active: "active", disabled: "disabled", spy: "spy" }, host: { listeners: { "click": "select()" }, properties: { "class.active": "active", "class.disabled": "disabled", "attr.role": "this.role" } }, ngImport: i0, template: `
    <div class="novo-tab-link">
      <ng-content></ng-content>
    </div>
    <span class="indicator"></span>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabLinkElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-tab-link',
                    host: {
                        '(click)': 'select()',
                        '[class.active]': 'active',
                        '[class.disabled]': 'disabled',
                    },
                    template: `
    <div class="novo-tab-link">
      <ng-content></ng-content>
    </div>
    <span class="indicator"></span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: NovoNavElement }, { type: i1$3.Router }, { type: i0.ChangeDetectorRef }, { type: i1$3.RouterLink, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], active: [{
                type: Input
            }], disabled: [{
                type: Input
            }], spy: [{
                type: Input
            }] } });
class NovoNavOutletElement {
    constructor() {
        this.items = [];
    }
    show(index) {
        const item = this.items[index];
        /**
         * Deactivates other tab items
         * @param items - deactivated items
         */
        function _deactivateAllItems(items) {
            items.forEach((t) => {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
    }
    add(item) {
        if (this.items.length === 0) {
            item.active = true;
        }
        this.items.push(item);
    }
}
NovoNavOutletElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavOutletElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoNavOutletElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoNavOutletElement, selector: "novo-nav-outlet", ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavOutletElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-nav-outlet',
                    template: '<ng-content></ng-content>',
                }]
        }] });
class NovoNavContentElement {
    constructor(outlet) {
        this.active = false;
        outlet.add(this);
    }
}
NovoNavContentElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavContentElement, deps: [{ token: NovoNavOutletElement }], target: i0.ɵɵFactoryTarget.Component });
NovoNavContentElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoNavContentElement, selector: "novo-nav-content", inputs: { active: "active" }, host: { properties: { "class.active": "active" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavContentElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-nav-content',
                    host: {
                        '[class.active]': 'active',
                    },
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: NovoNavOutletElement }]; }, propDecorators: { active: [{
                type: Input
            }] } });
class NovoNavHeaderElement {
    constructor(outlet) {
        this.role = 'tabpanel';
        this.active = false;
        this.active = this.active || false;
        this.outlet = outlet;
    }
    show(event) {
        try {
            const INDEX = this.outlet.items.indexOf(this.forElement);
            if (INDEX > -1) {
                this.outlet.show(INDEX);
            }
        }
        catch (err) {
            // do nothing
        }
    }
}
NovoNavHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavHeaderElement, deps: [{ token: NovoNavOutletElement }], target: i0.ɵɵFactoryTarget.Component });
NovoNavHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoNavHeaderElement, selector: "novo-nav-header", inputs: { active: "active", forElement: ["for", "forElement"] }, host: { listeners: { "click": "show($event)" }, properties: { "class.active": "active", "attr.role": "this.role" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNavHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-nav-header',
                    host: {
                        '[class.active]': 'active',
                        '(click)': 'show($event)',
                    },
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: NovoNavOutletElement }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], active: [{
                type: Input
            }], forElement: [{
                type: Input,
                args: ['for']
            }] } });

// NG2
class NovoCategoryDropdownElement extends OutsideClick {
    constructor(element, labels) {
        super(element);
        this.labels = labels;
        this._query = '';
        this._categoryMap = {};
        this._categories = [];
        // Boolean to keep the selection persist when closing the dropdown
        this.persistSelection = false;
        // Boolean to close the dropdown on selection
        this.closeOnSelect = false;
        // Event that is emitted whenever an item is selected
        this._select = new EventEmitter();
        // Event that is emitted whenever a category is selected
        this.categorySelected = new EventEmitter();
        this.clickHandler = this.toggleActive.bind(this);
    }
    set categories(categories) {
        this._masterCategoryMap = Object.assign({}, categories);
        this._categoryMap = Object.assign({}, categories);
        this._categories = Object.keys(categories);
    }
    ngOnInit() {
        const button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
    }
    ngOnDestroy() {
        const button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    }
    onKeyDown(event) {
        if (this.active && (event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */)) {
            this.toggleActive();
        }
    }
    clearSelection() {
        this._categories.forEach((category) => {
            this._categoryMap[category].forEach((item) => {
                item.selected = false;
            });
        });
    }
    select(event, item) {
        Helpers.swallowEvent(event);
        // If we persist the selection, clear and show a check
        if (this.persistSelection) {
            this.clearSelection();
            item.selected = true;
        }
        // Emit the item
        this._select.emit(item);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    }
    onCategorySelected(category) {
        this.categorySelected.emit(category);
    }
    clearQuery(event) {
        Helpers.swallowEvent(event);
        this._query = '';
        // Reset the categories
        this._categories.forEach((category) => {
            this._categoryMap[category] = this._masterCategoryMap[category];
        });
    }
    queryCategories(query) {
        // Save the query
        this._query = query;
        // Check timeout
        if (this._queryTimeout) {
            clearTimeout(this._queryTimeout);
        }
        // Store a timeout, to debounce user input
        this._queryTimeout = setTimeout(() => {
            this._categories.forEach((category) => {
                if (this.search.compare) {
                    this._categoryMap[category] = this._masterCategoryMap[category].filter((item) => this.search.compare(query, item));
                }
                else {
                    this._categoryMap[category] = this._masterCategoryMap[category].filter((item) => ~item.label.toLowerCase().indexOf(query.toLowerCase()));
                }
            });
        }, this.search.debounce || 300);
    }
    executeClickCallback(event, link) {
        link.callback(event);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    }
}
NovoCategoryDropdownElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCategoryDropdownElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoCategoryDropdownElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoCategoryDropdownElement, selector: "novo-category-dropdown", inputs: { persistSelection: "persistSelection", closeOnSelect: "closeOnSelect", search: "search", footer: "footer", categories: "categories" }, outputs: { _select: "itemSelected", categorySelected: "categorySelected" }, host: { listeners: { "keydown": "onKeyDown($event)" }, properties: { "class.active": "active" } }, usesInheritance: true, ngImport: i0, template: `
    <ng-content select="button"></ng-content>
    <div class="dropdown-container" *ngIf="active">
      <div class="novo-category-dropdown-search" *ngIf="search" data-automation-id="novo-category-dropdown-search">
        <input
          type="text"
          [placeholder]="search.placeholder || labels.search"
          [value]="_query"
          (input)="queryCategories($event.target.value)"
        />
        <i class="bhi-search" *ngIf="!_query"></i>
        <i class="bhi-times" *ngIf="_query" (click)="clearQuery($event)"></i>
      </div>
      <novo-nav theme="white" [outlet]="novoCategoryDropdownOutlet" direction="vertical">
        <novo-tab *ngFor="let category of _categories" [attr.data-automation-id]="category" (activeChange)="onCategorySelected(category)">
          <span>{{ category }} ({{ _categoryMap[category].length }})</span>
        </novo-tab>
      </novo-nav>
      <novo-nav-outlet #novoCategoryDropdownOutlet>
        <novo-nav-content *ngFor="let category of _categories">
          <novo-list direction="vertical">
            <novo-list-item
              *ngFor="let item of _categoryMap[category]"
              (click)="select($event, item)"
              [attr.data-automation-id]="item.label"
            >
              <item-content>{{ item.label }}</item-content>
              <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverText && !item.selected">{{ item.hoverText }}</item-end>
              <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverIcon && !item.selected"
                ><i class="bhi-{{ item.hoverIcon }}"></i
              ></item-end>
              <item-end *ngIf="item.selected"><i class="bhi-check"></i></item-end>
            </novo-list-item>
            <novo-list-item *ngIf="_categoryMap[category].length === 0 && search" class="novo-category-dropdown-empty-item">
              <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>
            </novo-list-item>
          </novo-list>
        </novo-nav-content>
      </novo-nav-outlet>
      <footer *ngIf="footer" class="novo-category-dropdown-footer-align-{{ footer.align || 'right' }}">
        <a *ngFor="let link of footer.links" (click)="executeClickCallback($event, link)">{{ link.label }}</a>
      </footer>
    </div>
  `, isInline: true, components: [{ type: NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { type: NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { type: NovoNavOutletElement, selector: "novo-nav-outlet" }, { type: NovoNavContentElement, selector: "novo-nav-content", inputs: ["active"] }, { type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }, { type: NovoItemEndElement, selector: "item-end, novo-item-end" }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCategoryDropdownElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-category-dropdown',
                    template: `
    <ng-content select="button"></ng-content>
    <div class="dropdown-container" *ngIf="active">
      <div class="novo-category-dropdown-search" *ngIf="search" data-automation-id="novo-category-dropdown-search">
        <input
          type="text"
          [placeholder]="search.placeholder || labels.search"
          [value]="_query"
          (input)="queryCategories($event.target.value)"
        />
        <i class="bhi-search" *ngIf="!_query"></i>
        <i class="bhi-times" *ngIf="_query" (click)="clearQuery($event)"></i>
      </div>
      <novo-nav theme="white" [outlet]="novoCategoryDropdownOutlet" direction="vertical">
        <novo-tab *ngFor="let category of _categories" [attr.data-automation-id]="category" (activeChange)="onCategorySelected(category)">
          <span>{{ category }} ({{ _categoryMap[category].length }})</span>
        </novo-tab>
      </novo-nav>
      <novo-nav-outlet #novoCategoryDropdownOutlet>
        <novo-nav-content *ngFor="let category of _categories">
          <novo-list direction="vertical">
            <novo-list-item
              *ngFor="let item of _categoryMap[category]"
              (click)="select($event, item)"
              [attr.data-automation-id]="item.label"
            >
              <item-content>{{ item.label }}</item-content>
              <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverText && !item.selected">{{ item.hoverText }}</item-end>
              <item-end class="novo-category-dropdown-hover" *ngIf="item.hoverIcon && !item.selected"
                ><i class="bhi-{{ item.hoverIcon }}"></i
              ></item-end>
              <item-end *ngIf="item.selected"><i class="bhi-check"></i></item-end>
            </novo-list-item>
            <novo-list-item *ngIf="_categoryMap[category].length === 0 && search" class="novo-category-dropdown-empty-item">
              <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>
            </novo-list-item>
          </novo-list>
        </novo-nav-content>
      </novo-nav-outlet>
      <footer *ngIf="footer" class="novo-category-dropdown-footer-align-{{ footer.align || 'right' }}">
        <a *ngFor="let link of footer.links" (click)="executeClickCallback($event, link)">{{ link.label }}</a>
      </footer>
    </div>
  `,
                    host: {
                        '(keydown)': 'onKeyDown($event)',
                        '[class.active]': 'active',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }]; }, propDecorators: { persistSelection: [{
                type: Input
            }], closeOnSelect: [{
                type: Input
            }], search: [{
                type: Input
            }], footer: [{
                type: Input
            }], _select: [{
                type: Output,
                args: ['itemSelected']
            }], categorySelected: [{
                type: Output
            }], categories: [{
                type: Input
            }] } });

// NG2
class NovoTabModule {
}
NovoTabModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTabModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabModule, declarations: [NovoNavElement,
        NovoTabElement,
        NovoTabButtonElement,
        NovoTabLinkElement,
        NovoNavOutletElement,
        NovoNavContentElement,
        NovoNavHeaderElement], imports: [CommonModule], exports: [NovoNavElement,
        NovoTabElement,
        NovoTabButtonElement,
        NovoTabLinkElement,
        NovoNavOutletElement,
        NovoNavContentElement,
        NovoNavHeaderElement] });
NovoTabModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [
                        NovoNavElement,
                        NovoTabElement,
                        NovoTabButtonElement,
                        NovoTabLinkElement,
                        NovoNavOutletElement,
                        NovoNavContentElement,
                        NovoNavHeaderElement,
                    ],
                    exports: [
                        NovoNavElement,
                        NovoTabElement,
                        NovoTabButtonElement,
                        NovoTabLinkElement,
                        NovoNavOutletElement,
                        NovoNavContentElement,
                        NovoNavHeaderElement,
                    ],
                }]
        }] });

// NG2
class NovoCategoryDropdownModule {
}
NovoCategoryDropdownModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCategoryDropdownModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoCategoryDropdownModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCategoryDropdownModule, declarations: [NovoCategoryDropdownElement], imports: [CommonModule, NovoTabModule, NovoListModule], exports: [NovoCategoryDropdownElement] });
NovoCategoryDropdownModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCategoryDropdownModule, imports: [[CommonModule, NovoTabModule, NovoListModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCategoryDropdownModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoTabModule, NovoListModule],
                    declarations: [NovoCategoryDropdownElement],
                    exports: [NovoCategoryDropdownElement],
                }]
        }] });

// Value accessor for the component (supports ngModel)
const CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoCheckboxElement),
    multi: true,
};
/** Change event object emitted by NovoCheckbox. */
class NovoCheckboxChange {
}
const LAYOUT_DEFAULTS$1 = { iconStyle: 'box' };
let nextId$5 = 0;
class NovoCheckboxElement {
    constructor(_cdr, _focusMonitor, tabIndex) {
        this._cdr = _cdr;
        this._focusMonitor = _focusMonitor;
        /**
         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will
         * take precedence so this may be omitted.
         */
        this.ariaLabel = '';
        /**
         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element
         */
        this.ariaLabelledby = null;
        this._uniqueId = `novo-checkbox-${++nextId$5}`;
        this.id = this._uniqueId;
        this.name = this._uniqueId;
        this.disabled = false;
        this._checked = false;
        this._indeterminate = false;
        /** Event emitted when the checkbox's `checked` value changes. */
        this.change = new EventEmitter();
        /** Event emitted when the checkbox's `indeterminate` value changes. */
        this.indeterminateChange = new EventEmitter();
        this.onSelect = new EventEmitter();
        this.boxIcon = true;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        // this.color = this.defaultColor = this._options.color || defaults.color;
        this.tabIndex = parseInt(tabIndex, 10) || 0;
    }
    /** Whether the checkbox is required. */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /** Whether the checkbox is checked. */
    get checked() {
        return this._checked;
    }
    set checked(value) {
        if (value !== this.checked) {
            this._checked = value;
            this._cdr.markForCheck();
        }
    }
    get indeterminate() {
        return this._indeterminate;
    }
    set indeterminate(value) {
        const changed = value !== this._indeterminate;
        this._indeterminate = coerceBooleanProperty(value);
        if (changed) {
            this.indeterminateChange.emit(this._indeterminate);
        }
        this._syncIndeterminate(this._indeterminate);
    }
    ngOnInit() {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
        this.boxIcon = this.layoutOptions.iconStyle === 'box';
    }
    select(event) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            this.checked = !this.checked;
            this.onModelChange(this.checked);
            this.onSelect.emit({ originalEvent: event, value: this.checked });
        }
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this.checked = !!value;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    _getAriaChecked() {
        if (this.checked) {
            return 'true';
        }
        return this.indeterminate ? 'mixed' : 'false';
    }
    _emitChangeEvent() {
        const event = new NovoCheckboxChange();
        event.source = this;
        event.checked = this.checked;
        this.onModelChange(this.checked);
        this.change.emit(event);
        // Assigning the value again here is redundant, but we have to do it in case it was
        // changed inside the `change` listener which will cause the input to be out of sync.
        if (this._inputElement) {
            this._inputElement.nativeElement.checked = this.checked;
        }
    }
    /** Toggles the `checked` state of the checkbox. */
    toggle() {
        this.checked = !this.checked;
    }
    /**
     * Event handler for checkbox input element.
     * Toggles checked state if element is not disabled.
     * Do not toggle on (change) event since IE doesn't fire change event when
     *   indeterminate checkbox is clicked.
     * @param event
     */
    _onInputClick(event) {
        // We have to stop propagation for click events on the visual hidden input element.
        // By default, when a user clicks on a label element, a generated click event will be
        // dispatched on the associated input element. Since we are using a label element as our
        // root container, the click event on the `checkbox` will be executed twice.
        // The real click event will bubble up, and the generated click event also tries to bubble up.
        // This will lead to multiple click events.
        // Preventing bubbling for the second event will solve that issue.
        event.stopPropagation();
        if (!this.disabled) {
            // When user manually click on the checkbox, `indeterminate` is set to false.
            if (this.indeterminate) {
                Promise.resolve().then(() => {
                    this._indeterminate = false;
                    this.indeterminateChange.emit(this._indeterminate);
                });
            }
            this.toggle();
            // Emit our custom change event if the native input emitted one.
            // It is important to only emit it, if the native input triggered one, because
            // we don't want to trigger a change event, when the `checked` variable changes for example.
            this._emitChangeEvent();
        }
    }
    /** Focuses the checkbox. */
    focus(origin, options) {
        if (origin) {
            this._focusMonitor.focusVia(this._inputElement, origin, options);
        }
        else {
            this._inputElement.nativeElement.focus(options);
        }
    }
    _onInteractionEvent(event) {
        // We always have to stop propagation on the change event.
        // Otherwise the change event, from the input element, will bubble up and
        // emit its event object to the `change` output.
        event.stopPropagation();
    }
    _syncIndeterminate(value) {
        const nativeCheckbox = this._inputElement;
        if (nativeCheckbox) {
            nativeCheckbox.nativeElement.indeterminate = value;
        }
    }
}
NovoCheckboxElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckboxElement, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$5.FocusMonitor }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });
NovoCheckboxElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoCheckboxElement, selector: "novo-checkbox", inputs: { ariaLabel: ["aria-label", "ariaLabel"], ariaLabelledby: ["aria-labelledby", "ariaLabelledby"], ariaDescribedby: ["aria-describedby", "ariaDescribedby"], id: "id", name: "name", label: "label", disabled: "disabled", layoutOptions: "layoutOptions", color: "color", value: "value", tabIndex: "tabIndex", required: "required", checked: "checked", indeterminate: "indeterminate" }, outputs: { change: "change", indeterminateChange: "indeterminateChange", onSelect: "onSelect" }, host: { properties: { "class.has-label": "label" }, classAttribute: "novo-checkbox" }, providers: [CHECKBOX_VALUE_ACCESSOR], viewQueries: [{ propertyName: "_inputElement", first: true, predicate: ["input"], descendants: true }], ngImport: i0, template: `
    <div class="novo-checkbox-group" [class.checked]="checked" [class.disabled]="disabled">
      <input
        #input
        type="checkbox"
        [required]="required"
        [checked]="checked"
        [id]="id"
        [attr.name]="name"
        [attr.value]="value"
        [disabled]="disabled"
        [tabIndex]="tabIndex"
        [attr.aria-label]="ariaLabel || null"
        [attr.aria-labelledby]="ariaLabelledby"
        [attr.aria-checked]="_getAriaChecked()"
        [attr.aria-describedby]="ariaDescribedby"
        (change)="_onInteractionEvent($event)"
        (click)="_onInputClick($event)"
      />
      <label [attr.for]="name" (click)="select($event)" [class.disabled]="disabled">
        <i
          [class.bhi-checkbox-empty]="!checked && !indeterminate && boxIcon"
          [class.bhi-checkbox-filled]="checked && !indeterminate && boxIcon"
          [class.bhi-checkbox-indeterminate]="indeterminate && boxIcon"
          [class.bhi-circle-o]="!checked && !indeterminate && !boxIcon"
          [class.bhi-check]="checked && !indeterminate && !boxIcon"
          [class.bhi-circle]="indeterminate && !boxIcon"
        ></i>
        <span *ngIf="label">{{ label }}</span>
        <span *ngIf="!label" class="novo-checkbox-text"><ng-content></ng-content></span>
      </label>
    </div>
  `, isInline: true, styles: [":host{display:flex;flex-flow:row wrap}:host.has-label [class*=-group]{margin-right:15px}:host .novo-checkbox-text{margin-left:15px}:host .novo-checkbox-group{cursor:pointer;position:relative}:host .novo-checkbox-group:hover label i:before{box-shadow:0 0 15px 3px #4a89dc40}:host .novo-checkbox-group:hover label i.bhi-checkbox-empty,:host .novo-checkbox-group:hover label i.bhi-radio-empty{color:#4a89dc}:host .novo-checkbox-group.checked label{color:#393939}:host .novo-checkbox-group.checked label i{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}:host .novo-checkbox-group.disabled{pointer-events:none}:host .novo-checkbox-group.disabled label>i{opacity:.7}:host .novo-checkbox-group input[type=checkbox]{-webkit-appearance:none!important;-moz-appearance:none!important;appearance:none!important;height:0!important;border:none!important;position:absolute}:host .novo-checkbox-group input[type=checkbox]:focus+label i:before{text-shadow:0px 0px 20px rgba(74,137,220,.5)}:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-empty,:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-filled{color:#4a89dc}:host .novo-checkbox-group label{color:#868686;margin-left:0;cursor:pointer;transition:all .2s ease-in-out;display:flex;align-items:baseline}:host .novo-checkbox-group label i{margin-right:5px;transition:all .2s ease-in-out}:host .novo-checkbox-group label i.bhi-checkbox-empty,:host .novo-checkbox-group label i.bhi-radio-empty,:host .novo-checkbox-group label i.bhi-circle-o{color:#d2d2d2}:host .novo-checkbox-group label i.bhi-check{background:#d2d2d2;color:#fff;padding:.15em 0 0 .3em;font-size:1em;width:20px;height:20px;border-radius:50%}:host .novo-checkbox-group label i.bhi-checkbox-filled,:host .novo-checkbox-group label i.bhi-radio-filled{color:#4a89dc}:host .novo-checkbox-group label span{display:inline-block}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], NovoCheckboxElement.prototype, "checked", null);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], NovoCheckboxElement.prototype, "indeterminate", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckboxElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-checkbox', providers: [CHECKBOX_VALUE_ACCESSOR], template: `
    <div class="novo-checkbox-group" [class.checked]="checked" [class.disabled]="disabled">
      <input
        #input
        type="checkbox"
        [required]="required"
        [checked]="checked"
        [id]="id"
        [attr.name]="name"
        [attr.value]="value"
        [disabled]="disabled"
        [tabIndex]="tabIndex"
        [attr.aria-label]="ariaLabel || null"
        [attr.aria-labelledby]="ariaLabelledby"
        [attr.aria-checked]="_getAriaChecked()"
        [attr.aria-describedby]="ariaDescribedby"
        (change)="_onInteractionEvent($event)"
        (click)="_onInputClick($event)"
      />
      <label [attr.for]="name" (click)="select($event)" [class.disabled]="disabled">
        <i
          [class.bhi-checkbox-empty]="!checked && !indeterminate && boxIcon"
          [class.bhi-checkbox-filled]="checked && !indeterminate && boxIcon"
          [class.bhi-checkbox-indeterminate]="indeterminate && boxIcon"
          [class.bhi-circle-o]="!checked && !indeterminate && !boxIcon"
          [class.bhi-check]="checked && !indeterminate && !boxIcon"
          [class.bhi-circle]="indeterminate && !boxIcon"
        ></i>
        <span *ngIf="label">{{ label }}</span>
        <span *ngIf="!label" class="novo-checkbox-text"><ng-content></ng-content></span>
      </label>
    </div>
  `, host: {
                        class: 'novo-checkbox',
                        '[class.has-label]': 'label',
                    }, styles: [":host{display:flex;flex-flow:row wrap}:host.has-label [class*=-group]{margin-right:15px}:host .novo-checkbox-text{margin-left:15px}:host .novo-checkbox-group{cursor:pointer;position:relative}:host .novo-checkbox-group:hover label i:before{box-shadow:0 0 15px 3px #4a89dc40}:host .novo-checkbox-group:hover label i.bhi-checkbox-empty,:host .novo-checkbox-group:hover label i.bhi-radio-empty{color:#4a89dc}:host .novo-checkbox-group.checked label{color:#393939}:host .novo-checkbox-group.checked label i{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}:host .novo-checkbox-group.disabled{pointer-events:none}:host .novo-checkbox-group.disabled label>i{opacity:.7}:host .novo-checkbox-group input[type=checkbox]{-webkit-appearance:none!important;-moz-appearance:none!important;appearance:none!important;height:0!important;border:none!important;position:absolute}:host .novo-checkbox-group input[type=checkbox]:focus+label i:before{text-shadow:0px 0px 20px rgba(74,137,220,.5)}:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-empty,:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-filled{color:#4a89dc}:host .novo-checkbox-group label{color:#868686;margin-left:0;cursor:pointer;transition:all .2s ease-in-out;display:flex;align-items:baseline}:host .novo-checkbox-group label i{margin-right:5px;transition:all .2s ease-in-out}:host .novo-checkbox-group label i.bhi-checkbox-empty,:host .novo-checkbox-group label i.bhi-radio-empty,:host .novo-checkbox-group label i.bhi-circle-o{color:#d2d2d2}:host .novo-checkbox-group label i.bhi-check{background:#d2d2d2;color:#fff;padding:.15em 0 0 .3em;font-size:1em;width:20px;height:20px;border-radius:50%}:host .novo-checkbox-group label i.bhi-checkbox-filled,:host .novo-checkbox-group label i.bhi-radio-filled{color:#4a89dc}:host .novo-checkbox-group label span{display:inline-block}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$5.FocusMonitor }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }]; }, propDecorators: { ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], ariaLabelledby: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaDescribedby: [{
                type: Input,
                args: ['aria-describedby']
            }], id: [{
                type: Input
            }], name: [{
                type: Input
            }], label: [{
                type: Input
            }], disabled: [{
                type: Input
            }], layoutOptions: [{
                type: Input
            }], color: [{
                type: Input
            }], value: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], required: [{
                type: Input
            }], checked: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], _inputElement: [{
                type: ViewChild,
                args: ['input']
            }], change: [{
                type: Output
            }], indeterminateChange: [{
                type: Output
            }], onSelect: [{
                type: Output
            }] } });

// NG2
// Value accessor for the component (supports ngModel)
const CHECKLIST_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoCheckListElement),
    multi: true,
};
class NovoCheckListElement {
    constructor() {
        this.onSelect = new EventEmitter();
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    ngOnInit() {
        this.setModel();
        this.setupOptions();
    }
    select(event, item) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            item.checked = !item.checked;
            this.model = this._options.filter((checkBox) => checkBox.checked).map((x) => x.value);
            this.onModelChange(this.model.length > 0 ? this.model : '');
            this.onSelect.emit({ selected: this.model });
        }
    }
    setupOptions() {
        this.options = this.options || [];
        this._options = [];
        if (this.options.length && !this.options[0].value) {
            this.options.forEach((option) => {
                const formattedOption = {
                    value: option,
                    label: option,
                    checked: this.model && this.model.length && this.model.indexOf(option.value) !== -1,
                };
                this._options.push(formattedOption);
            });
        }
        else {
            this.options.forEach((option) => {
                const formattedOption = option;
                formattedOption.checked = this.model && this.model.length && this.model.indexOf(option.value) !== -1;
                this._options.push(formattedOption);
            });
        }
    }
    setModel() {
        const checkedOptions = this.options.filter((checkBox) => checkBox.checked).map((x) => x.value);
        this.writeValue(checkedOptions);
    }
    writeValue(model) {
        this.model = model || [];
        if (model) {
            this.setupOptions();
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoCheckListElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckListElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoCheckListElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoCheckListElement, selector: "novo-check-list", inputs: { name: "name", options: "options", disabled: "disabled" }, outputs: { onSelect: "onSelect" }, providers: [CHECKLIST_VALUE_ACCESSOR], ngImport: i0, template: `
    <div
      class="novo-checkbox-group"
      *ngFor="let option of _options; let i = index"
      [ngClass]="{ checked: option.checked }"
      [class.disabled]="disabled"
      [attr.data-automation-id]="option.label"
    >
      <input
        [name]="name"
        type="checkbox"
        [ngModel]="option.checked"
        [attr.id]="name + i"
        [value]="option.checked"
        (change)="select($event, option)"
        [disabled]="disabled"
      />
      <label [attr.for]="name + i" (click)="select($event, option)">
        <i [ngClass]="{ 'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }"></i>
        <span>{{ option.label }}</span>
      </label>
    </div>
  `, isInline: true, styles: [":host{display:flex;flex-flow:row wrap;gap:1rem}:host.hasLabel [class*=-group]{margin-right:15px}:host .novo-checkbox-group{cursor:pointer;position:relative}:host .novo-checkbox-group:hover label i:before{box-shadow:0 0 15px 3px #4a89dc40}:host .novo-checkbox-group:hover label i.bhi-checkbox-empty,:host .novo-checkbox-group:hover label i.bhi-radio-empty{color:#4a89dc}:host .novo-checkbox-group.checked label{color:var(--text-main)}:host .novo-checkbox-group.checked label i{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}:host .novo-checkbox-group.disabled{pointer-events:none}:host .novo-checkbox-group.disabled label>i{opacity:.7}:host .novo-checkbox-group input[type=checkbox]{-webkit-appearance:none!important;-moz-appearance:none!important;appearance:none!important;height:0!important;border:none!important;position:absolute}:host .novo-checkbox-group input[type=checkbox]:focus+label i:before{text-shadow:0px 0px 20px rgba(74,137,220,.5)}:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-empty,:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-filled{color:#4a89dc}:host .novo-checkbox-group label{color:#868686;margin-left:0;cursor:pointer;transition:all .2s ease-in-out;display:flex;align-items:baseline}:host .novo-checkbox-group label i{margin-right:5px;transition:all .2s ease-in-out}:host .novo-checkbox-group label i.bhi-checkbox-empty,:host .novo-checkbox-group label i.bhi-radio-empty,:host .novo-checkbox-group label i.bhi-circle-o{color:#d2d2d2}:host .novo-checkbox-group label i.bhi-check{background:#d2d2d2;color:#fff;padding:.15em 0 0 .3em;font-size:1em;width:20px;height:20px;border-radius:50%}:host .novo-checkbox-group label i.bhi-checkbox-filled,:host .novo-checkbox-group label i.bhi-radio-filled{color:#4a89dc}:host .novo-checkbox-group label span{display:inline-block}\n"], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.CheckboxControlValueAccessor, selector: "input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckListElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-check-list', providers: [CHECKLIST_VALUE_ACCESSOR], template: `
    <div
      class="novo-checkbox-group"
      *ngFor="let option of _options; let i = index"
      [ngClass]="{ checked: option.checked }"
      [class.disabled]="disabled"
      [attr.data-automation-id]="option.label"
    >
      <input
        [name]="name"
        type="checkbox"
        [ngModel]="option.checked"
        [attr.id]="name + i"
        [value]="option.checked"
        (change)="select($event, option)"
        [disabled]="disabled"
      />
      <label [attr.for]="name + i" (click)="select($event, option)">
        <i [ngClass]="{ 'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }"></i>
        <span>{{ option.label }}</span>
      </label>
    </div>
  `, styles: [":host{display:flex;flex-flow:row wrap;gap:1rem}:host.hasLabel [class*=-group]{margin-right:15px}:host .novo-checkbox-group{cursor:pointer;position:relative}:host .novo-checkbox-group:hover label i:before{box-shadow:0 0 15px 3px #4a89dc40}:host .novo-checkbox-group:hover label i.bhi-checkbox-empty,:host .novo-checkbox-group:hover label i.bhi-radio-empty{color:#4a89dc}:host .novo-checkbox-group.checked label{color:var(--text-main)}:host .novo-checkbox-group.checked label i{-webkit-animation:iconEnter .16s ease-in-out;animation:iconEnter .16s ease-in-out}:host .novo-checkbox-group.disabled{pointer-events:none}:host .novo-checkbox-group.disabled label>i{opacity:.7}:host .novo-checkbox-group input[type=checkbox]{-webkit-appearance:none!important;-moz-appearance:none!important;appearance:none!important;height:0!important;border:none!important;position:absolute}:host .novo-checkbox-group input[type=checkbox]:focus+label i:before{text-shadow:0px 0px 20px rgba(74,137,220,.5)}:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-empty,:host .novo-checkbox-group input[type=checkbox]:focus+label i.bhi-checkbox-filled{color:#4a89dc}:host .novo-checkbox-group label{color:#868686;margin-left:0;cursor:pointer;transition:all .2s ease-in-out;display:flex;align-items:baseline}:host .novo-checkbox-group label i{margin-right:5px;transition:all .2s ease-in-out}:host .novo-checkbox-group label i.bhi-checkbox-empty,:host .novo-checkbox-group label i.bhi-radio-empty,:host .novo-checkbox-group label i.bhi-circle-o{color:#d2d2d2}:host .novo-checkbox-group label i.bhi-check{background:#d2d2d2;color:#fff;padding:.15em 0 0 .3em;font-size:1em;width:20px;height:20px;border-radius:50%}:host .novo-checkbox-group label i.bhi-checkbox-filled,:host .novo-checkbox-group label i.bhi-radio-filled{color:#4a89dc}:host .novo-checkbox-group label span{display:inline-block}\n"] }]
        }], propDecorators: { name: [{
                type: Input
            }], options: [{
                type: Input
            }], disabled: [{
                type: Input
            }], onSelect: [{
                type: Output
            }] } });

class NovoCheckboxModule {
}
NovoCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckboxModule, declarations: [NovoCheckboxElement, NovoCheckListElement], imports: [CommonModule, A11yModule, FormsModule], exports: [NovoCheckboxElement, NovoCheckListElement] });
NovoCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckboxModule, imports: [[CommonModule, A11yModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, A11yModule, FormsModule],
                    declarations: [NovoCheckboxElement, NovoCheckListElement],
                    exports: [NovoCheckboxElement, NovoCheckListElement],
                }]
        }] });

const REMOVABLE_REF = new InjectionToken('REMOVABLE_REF');
/** Event object emitted by NovoChip when selected or deselected. */
class NovoChipSelectionChange {
    constructor(
    /** Reference to the chip that emitted the event. */
    source, 
    /** Whether the chip that emitted the event is selected. */
    selected, 
    /** Whether the selection change was a result of a user interaction. */
    isUserInput = false) {
        this.source = source;
        this.selected = selected;
        this.isUserInput = isUserInput;
    }
}
// Boilerplate for applying mixins to NovoChipElement.
/** @docs-private */
class NovoChipBase {
    // abstract disabled: boolean;
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
}
const NovoChipMixinBase = mixinSize(mixinTabIndex(mixinColor(NovoChipBase, null), -1), 'md');
/**
 * Dummy directive to add CSS class to chip avatar.
 * @docs-private
 */
class NovoChipAvatar {
}
NovoChipAvatar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoChipAvatar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoChipAvatar, selector: "novo-chip-avatar, [novoChipAvatar]", host: { classAttribute: "novo-chip-avatar" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipAvatar, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-chip-avatar, [novoChipAvatar]',
                    host: { class: 'novo-chip-avatar' },
                }]
        }] });
/**
 * Applies proper (click) support and adds styling for use with Bullhorn's "x" icon *
 * Example:
 *
 *     `<novo-chip>
 *       <novo-icon novoChipRemove>x</novo-icon>
 *     </novo-chip>`
 *
 * You *may* use a custom icon, but you may need to override the `novo-chip-remove` positioning
 * styles to properly center the icon within the chip.
 */
class NovoChipRemove {
    constructor(_parentChip, elementRef) {
        this._parentChip = _parentChip;
        if (elementRef.nativeElement.nodeName === 'BUTTON') {
            elementRef.nativeElement.setAttribute('type', 'button');
        }
    }
    /** Calls the parent chip's public `remove()` method if applicable. */
    _handleClick(event) {
        const parentChip = this._parentChip;
        if (parentChip.removable && !parentChip.disabled) {
            parentChip.remove();
        }
        // We need to stop event propagation because otherwise the event will bubble up to the
        // form field and cause the `onContainerClick` method to be invoked. This method would then
        // reset the focused chip that has been focused after chip removal. Usually the parent
        // the parent click listener of the `NovoChip` would prevent propagation, but it can happen
        // that the chip is being removed before the event bubbles up.
        event.stopPropagation();
    }
}
NovoChipRemove.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipRemove, deps: [{ token: REMOVABLE_REF }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoChipRemove.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoChipRemove, selector: "[novoChipRemove]", host: { listeners: { "click": "_handleClick($event)" }, classAttribute: "novo-chip-remove" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipRemove, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoChipRemove]',
                    host: {
                        class: 'novo-chip-remove',
                        '(click)': '_handleClick($event)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [REMOVABLE_REF]
                }] }, { type: i0.ElementRef }]; } });
/**
 * Chip component. Used inside the NovoChipList component.
 */
class NovoChipElement extends NovoChipMixinBase {
    constructor(_elementRef, _ngZone, platform, _changeDetectorRef, _document, animationMode, tabIndex) {
        super(_elementRef);
        this._elementRef = _elementRef;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        /** Whether the chip has focus. */
        this._hasFocus = false;
        /** Whether the chip list is selectable */
        this._chipListSelectable = true;
        /** Whether the chip list is in multi-selection mode. */
        this._chipListMultiple = false;
        /** Whether the chip list as a whole is disabled. */
        this._chipListDisabled = false;
        this._selected = false;
        this._selectable = false;
        this._disabled = false;
        this._removable = true;
        /** Emits when the chip is focused. */
        this._onFocus = new Subject();
        /** Emits when the chip is blured. */
        this._onBlur = new Subject();
        /** Emitted when the chip is selected or deselected. */
        this.selectionChange = new EventEmitter();
        /** Emitted when the chip is destroyed. */
        this.destroyed = new EventEmitter();
        /** Emitted when a chip is to be removed. */
        this.removed = new EventEmitter();
        this._animationsDisabled = animationMode === 'NoopAnimations';
        this.tabIndex = tabIndex != null ? parseInt(tabIndex, 10) || -1 : -1;
    }
    /** Whether the chip is selected. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        const coercedValue = coerceBooleanProperty(value);
        if (coercedValue !== this._selected) {
            this._selected = coercedValue;
            this._dispatchSelectionChange();
        }
    }
    /** The value of the chip. Defaults to the content inside `<novo-chip>` tags. */
    get value() {
        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;
    }
    set value(value) {
        this._value = value;
    }
    /**
     * Whether or not the chip is selectable. When a chip is not selectable,
     * changes to its selected state are always ignored. By default a chip is
     * selectable, and it becomes non-selectable if its parent chip list is
     * not selectable.
     */
    get selectable() {
        return this._selectable && this._chipListSelectable;
    }
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
    }
    /** Whether the chip is disabled. */
    get disabled() {
        return this._chipListDisabled || this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * Determines whether or not the chip displays the remove styling and emits (removed) events.
     */
    get removable() {
        return this._removable;
    }
    set removable(value) {
        this._removable = coerceBooleanProperty(value);
    }
    /** The ARIA selected applied to the chip. */
    get ariaSelected() {
        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because
        // it adds noise to NVDA users where "not selected" will be read out for each chip.
        return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;
    }
    ngOnDestroy() {
        this.destroyed.emit({ chip: this });
    }
    /** Selects the chip. */
    select() {
        if (!this._selected) {
            this._selected = true;
            this._dispatchSelectionChange();
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Deselects the chip. */
    deselect() {
        if (this._selected) {
            this._selected = false;
            this._dispatchSelectionChange();
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Select this chip and emit selected event */
    selectViaInteraction() {
        if (!this._selected) {
            this._selected = true;
            this._dispatchSelectionChange(true);
            this._changeDetectorRef.markForCheck();
        }
    }
    /** Toggles the current selected state of this chip. */
    toggleSelected(isUserInput = false) {
        this._selected = !this.selected;
        this._dispatchSelectionChange(isUserInput);
        this._changeDetectorRef.markForCheck();
        return this.selected;
    }
    /** Allows for programmatic focusing of the chip. */
    focus() {
        if (!this._hasFocus) {
            this._elementRef.nativeElement.focus();
            this._onFocus.next({ chip: this });
        }
        this._hasFocus = true;
    }
    /**
     * Allows for programmatic removal of the chip. Called by the NovoChipList when the DELETE or
     * BACKSPACE keys are pressed.
     *
     * Informs any listeners of the removal request. Does not remove the chip from the DOM.
     */
    remove() {
        if (this.removable) {
            this.removed.emit({ chip: this });
        }
    }
    /** Handles click events on the chip. */
    _handleClick(event) {
        if (this.disabled) {
            event.preventDefault();
        }
        else {
            event.stopPropagation();
        }
        this.toggleSelected(true);
    }
    /** Handle custom key presses. */
    _handleKeydown(event) {
        if (this.disabled) {
            return;
        }
        switch (event.key) {
            case "Delete" /* Delete */:
            case "Backspace" /* Backspace */:
                // If we are removable, remove the focused chip
                this.remove();
                // Always prevent so page navigation does not occur
                event.preventDefault();
                break;
            case " " /* Space */:
                // If we are selectable, toggle the focused chip
                if (this.selectable) {
                    this.toggleSelected(true);
                }
                // Always prevent space from scrolling the page since the list has focus
                event.preventDefault();
                break;
        }
    }
    _blur() {
        // When animations are enabled, Angular may end up removing the chip from the DOM a little
        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list
        // that moves focus not the next item. To work around the issue, we defer marking the chip
        // as not focused until the next time the zone stabilizes.
        this._ngZone.onStable.pipe(take(1)).subscribe(() => {
            this._ngZone.run(() => {
                this._hasFocus = false;
                this._onBlur.next({ chip: this });
            });
        });
    }
    _dispatchSelectionChange(isUserInput = false) {
        this.selectionChange.emit({
            source: this,
            isUserInput,
            selected: this._selected,
        });
    }
}
NovoChipElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipElement, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1$6.Platform }, { token: i0.ChangeDetectorRef, optional: true }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component });
NovoChipElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: { color: "color", tabIndex: "tabIndex", size: "size", type: "type", selected: "selected", value: "value", selectable: "selectable", disabled: "disabled", removable: "removable" }, outputs: { selectionChange: "selectionChange", destroyed: "destroyed", removed: "removed" }, host: { attributes: { "role": "option" }, listeners: { "click": "_handleClick($event)", "keydown": "_handleKeydown($event)", "focus": "focus()", "blur": "_blur()" }, properties: { "class.novo-chip-selectable": "selectable", "class.novo-chip-selected": "selected", "class.novo-chip-with-avatar": "avatar", "class.novo-chip-with-trailing-icon": "removeIcon", "class.novo-chip-disabled": "disabled", "class._novo-animation-noopable": "_animationsDisabled", "attr.tabindex": "disabled ? null : tabIndex", "attr.disabled": "disabled || null", "attr.aria-disabled": "disabled.toString()", "attr.aria-selected": "ariaSelected" }, classAttribute: "novo-chip novo-focus-indicator" }, providers: [{ provide: REMOVABLE_REF, useExisting: NovoChipElement }], queries: [{ propertyName: "avatar", first: true, predicate: NovoChipAvatar, descendants: true }, { propertyName: "removeIcon", first: true, predicate: NovoChipRemove, descendants: true }], usesInheritance: true, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [".novo-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;border:none;-webkit-appearance:none;-moz-appearance:none}.novo-chip{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;background:var(--background-main);box-sizing:border-box;border:1px solid transparent;transition:all .2s ease-in-out;display:inline-flex;align-items:center;cursor:default;gap:1rem;border-radius:.4rem;padding:0 1rem;min-height:2.4rem;height:1px}.novo-chip.text-capitalize{text-transform:capitalize}.novo-chip.text-uppercase{text-transform:uppercase}.novo-chip.text-nowrap{white-space:nowrap}.novo-chip.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-chip.text-size-default{font-size:inherit}.novo-chip.text-size-body{font-size:1.3rem}.novo-chip.text-size-xs{font-size:1rem}.novo-chip.text-size-sm{font-size:1.2rem}.novo-chip.text-size-md{font-size:1.3rem}.novo-chip.text-size-lg{font-size:1.6rem}.novo-chip.text-size-xl{font-size:2rem}.novo-chip.text-size-2xl{font-size:2.6rem}.novo-chip.text-size-3xl{font-size:3.2rem}.novo-chip.text-size-smaller{font-size:.8em}.novo-chip.text-size-larger{font-size:1.2em}.novo-chip.text-color-black{color:#000}.novo-chip.text-color-white{color:#fff}.novo-chip.text-color-gray,.novo-chip.text-color-grey{color:#9e9e9e}.novo-chip.text-color-offWhite,.novo-chip.text-color-bright{color:#f7f7f7}.novo-chip.text-color-light{color:#dbdbdb}.novo-chip.text-color-neutral{color:#4f5361}.novo-chip.text-color-dark{color:#3d464d}.novo-chip.text-color-orange{color:#ff6900}.novo-chip.text-color-navigation{color:#202945}.novo-chip.text-color-skyBlue{color:#009bdf}.novo-chip.text-color-steel{color:#5b6770}.novo-chip.text-color-metal{color:#637893}.novo-chip.text-color-sand{color:#f4f4f4}.novo-chip.text-color-silver{color:#e2e2e2}.novo-chip.text-color-stone{color:#bebebe}.novo-chip.text-color-ash{color:#a0a0a0}.novo-chip.text-color-slate{color:#707070}.novo-chip.text-color-onyx{color:#526980}.novo-chip.text-color-charcoal{color:#282828}.novo-chip.text-color-moonlight{color:#1a242f}.novo-chip.text-color-midnight{color:#202945}.novo-chip.text-color-darkness{color:#161f27}.novo-chip.text-color-navy{color:#0d2d42}.novo-chip.text-color-aqua{color:#3bafda}.novo-chip.text-color-ocean{color:#4a89dc}.novo-chip.text-color-mint{color:#37bc9b}.novo-chip.text-color-grass{color:#8cc152}.novo-chip.text-color-sunflower{color:#f6b042}.novo-chip.text-color-bittersweet{color:#eb6845}.novo-chip.text-color-grapefruit{color:#da4453}.novo-chip.text-color-carnation{color:#d770ad}.novo-chip.text-color-lavender{color:#967adc}.novo-chip.text-color-mountain{color:#9678b6}.novo-chip.text-color-info,.novo-chip.text-color-positive{color:#4a89dc}.novo-chip.text-color-success{color:#8cc152}.novo-chip.text-color-negative,.novo-chip.text-color-danger,.novo-chip.text-color-error{color:#da4453}.novo-chip.text-color-warning{color:#f6b042}.novo-chip.text-color-empty{color:#cccdcc}.novo-chip.text-color-disabled{color:#bebebe}.novo-chip.text-color-background{color:#f7f7f7}.novo-chip.text-color-backgroundDark{color:#e2e2e2}.novo-chip.text-color-presentation{color:#5b6770}.novo-chip.text-color-bullhorn{color:#ff6900}.novo-chip.text-color-pulse{color:#3bafda}.novo-chip.text-color-company{color:#39d}.novo-chip.text-color-candidate{color:#4b7}.novo-chip.text-color-lead{color:#a69}.novo-chip.text-color-contact,.novo-chip.text-color-clientcontact{color:#fa4}.novo-chip.text-color-opportunity{color:#625}.novo-chip.text-color-job,.novo-chip.text-color-joborder{color:#b56}.novo-chip.text-color-submission{color:#a9adbb}.novo-chip.text-color-sendout{color:#747884}.novo-chip.text-color-placement{color:#0b344f}.novo-chip.text-color-note{color:#747884}.novo-chip.text-color-contract{color:#454ea0}.novo-chip.text-color-jobCode,.novo-chip.text-color-earnCode,.novo-chip.text-color-invoiceStatement,.novo-chip.text-color-billableCharge,.novo-chip.text-color-payableCharge,.novo-chip.text-color-user,.novo-chip.text-color-corporateUser,.novo-chip.text-color-distributionList,.novo-chip.text-color-credential,.novo-chip.text-color-person{color:#696d79}.novo-chip.margin-before{margin-top:.4rem}.novo-chip.margin-after{margin-bottom:.8rem}.novo-chip.text-length-small{max-width:40ch}.novo-chip.text-length-medium{max-width:55ch}.novo-chip.text-length-large{max-width:70ch}.novo-chip.text-weight-hairline{font-weight:100}.novo-chip.text-weight-thin{font-weight:200}.novo-chip.text-weight-light{font-weight:300}.novo-chip.text-weight-normal{font-weight:400}.novo-chip.text-weight-medium{font-weight:500}.novo-chip.text-weight-semibold{font-weight:600}.novo-chip.text-weight-bold{font-weight:700}.novo-chip.text-weight-extrabold{font-weight:800}.novo-chip.text-weight-heavy{font-weight:900}.novo-chip.text-weight-lighter{font-weight:lighter}.novo-chip.text-weight-bolder{font-weight:bolder}.novo-chip.novo-chip-selectable{color:var(--selection)}.novo-chip.novo-chip-selectable:after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;background-color:#000;content:\"\";pointer-events:none;transition:opacity .2s ease-in-out}.novo-chip.novo-chip-selectable:focus{outline:none;border:1px solid var(--selection)}.novo-chip.novo-chip-selectable:focus:after{opacity:.16}.novo-chip.novo-chip-selectable:hover{border:1px solid var(--selection)}.novo-chip.novo-chip-disabled{color:var(--text-main);opacity:.7;pointer-events:none}.novo-chip.novo-chip-disabled:after{opacity:0}.novo-chip.novo-chip-disabled .novo-chip-remove,.novo-chip.novo-chip-disabled .novo-chip-trailing-icon{cursor:default}.novo-chip .novo-chip-avatar::not(novo-icon){width:24px;height:24px}.novo-chip .novo-chip-avatar{margin-right:0rem;margin-left:0rem}.novo-chip .novo-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;-o-object-fit:cover;object-fit:cover}.novo-chip .novo-chip-remove,.novo-chip .novo-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.novo-chip .novo-chip-remove,.novo-chip .novo-chip-trailing-icon{margin-left:0rem;margin-right:0}.novo-chip .novo-chip-remove{color:#dbdbdb}.novo-chip:not(.novo-chip-disabled) .novo-chip-remove:hover{color:#8f8f8f}.novo-chip.novo-size-xs{font-size:.8rem;border-radius:.4rem;padding:0 .25rem;min-height:1.6rem;gap:.25rem}.novo-chip.novo-size-xs.novo-chip-with-avatar{padding-left:.125rem}.novo-chip.novo-size-xs.novo-chip-with-trailing-icon{padding-right:.125rem}.novo-chip.novo-size-xs .novo-text{font-size:inherit}.novo-chip.novo-size-sm{font-size:1rem;border-radius:.4rem;padding:0 .5rem;min-height:2rem;gap:.5rem}.novo-chip.novo-size-sm.novo-chip-with-avatar{padding-left:.25rem}.novo-chip.novo-size-sm.novo-chip-with-trailing-icon{padding-right:.25rem}.novo-chip.novo-size-sm .novo-text{font-size:inherit}.novo-chip.novo-size-md{font-size:1.2rem;border-radius:.4rem;padding:0 1rem;min-height:2.8rem;gap:1rem}.novo-chip.novo-size-md.novo-chip-with-avatar{padding-left:.5rem}.novo-chip.novo-size-md.novo-chip-with-trailing-icon{padding-right:.5rem}.novo-chip.novo-size-md .novo-text{font-size:inherit}.novo-chip.novo-size-lg{font-size:1.4rem;border-radius:.4rem;padding:0 1.25rem;min-height:3.2rem;gap:1.25rem}.novo-chip.novo-size-lg.novo-chip-with-avatar{padding-left:.625rem}.novo-chip.novo-size-lg.novo-chip-with-trailing-icon{padding-right:.625rem}.novo-chip.novo-size-lg .novo-text{font-size:inherit}.novo-chip.novo-size-xl{font-size:1.8rem;border-radius:.4rem;padding:0 1.5rem;min-height:3.6rem;gap:1.5rem}.novo-chip.novo-size-xl.novo-chip-with-avatar{padding-left:.75rem}.novo-chip.novo-size-xl.novo-chip-with-trailing-icon{padding-right:.75rem}.novo-chip.novo-size-xl .novo-text{font-size:inherit}.novo-chip.novo-color-black{color:#fff;background:#000000}.novo-chip.novo-color-black>*{color:inherit}.novo-chip.novo-accent-black{border:1px solid #000000;color:#000}.novo-chip.novo-color-white{color:#3d464d;background:#ffffff}.novo-chip.novo-color-white>*{color:inherit}.novo-chip.novo-accent-white{border:1px solid #ffffff;color:#fff}.novo-chip.novo-color-gray{color:#3d464d;background:#9e9e9e}.novo-chip.novo-color-gray>*{color:inherit}.novo-chip.novo-accent-gray{border:1px solid #9e9e9e;color:#9e9e9e}.novo-chip.novo-color-grey{color:#3d464d;background:#9e9e9e}.novo-chip.novo-color-grey>*{color:inherit}.novo-chip.novo-accent-grey{border:1px solid #9e9e9e;color:#9e9e9e}.novo-chip.novo-color-offWhite{color:#3d464d;background:#f7f7f7}.novo-chip.novo-color-offWhite>*{color:inherit}.novo-chip.novo-accent-offWhite{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-bright{color:#3d464d;background:#f7f7f7}.novo-chip.novo-color-bright>*{color:inherit}.novo-chip.novo-accent-bright{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-light{color:#3d464d;background:#dbdbdb}.novo-chip.novo-color-light>*{color:inherit}.novo-chip.novo-accent-light{border:1px solid #dbdbdb;color:#dbdbdb}.novo-chip.novo-color-neutral{color:#fff;background:#4f5361}.novo-chip.novo-color-neutral>*{color:inherit}.novo-chip.novo-accent-neutral{border:1px solid #4f5361;color:#4f5361}.novo-chip.novo-color-dark{color:#fff;background:#3d464d}.novo-chip.novo-color-dark>*{color:inherit}.novo-chip.novo-accent-dark{border:1px solid #3d464d;color:#3d464d}.novo-chip.novo-color-orange{color:#3d464d;background:#ff6900}.novo-chip.novo-color-orange>*{color:inherit}.novo-chip.novo-accent-orange{border:1px solid #ff6900;color:#ff6900}.novo-chip.novo-color-navigation{color:#fff;background:#202945}.novo-chip.novo-color-navigation>*{color:inherit}.novo-chip.novo-accent-navigation{border:1px solid #202945;color:#202945}.novo-chip.novo-color-skyBlue{color:#fff;background:#009bdf}.novo-chip.novo-color-skyBlue>*{color:inherit}.novo-chip.novo-accent-skyBlue{border:1px solid #009bdf;color:#009bdf}.novo-chip.novo-color-steel{color:#fff;background:#5b6770}.novo-chip.novo-color-steel>*{color:inherit}.novo-chip.novo-accent-steel{border:1px solid #5b6770;color:#5b6770}.novo-chip.novo-color-metal{color:#fff;background:#637893}.novo-chip.novo-color-metal>*{color:inherit}.novo-chip.novo-accent-metal{border:1px solid #637893;color:#637893}.novo-chip.novo-color-sand{color:#3d464d;background:#f4f4f4}.novo-chip.novo-color-sand>*{color:inherit}.novo-chip.novo-accent-sand{border:1px solid #f4f4f4;color:#f4f4f4}.novo-chip.novo-color-silver{color:#3d464d;background:#e2e2e2}.novo-chip.novo-color-silver>*{color:inherit}.novo-chip.novo-accent-silver{border:1px solid #e2e2e2;color:#e2e2e2}.novo-chip.novo-color-stone{color:#3d464d;background:#bebebe}.novo-chip.novo-color-stone>*{color:inherit}.novo-chip.novo-accent-stone{border:1px solid #bebebe;color:#bebebe}.novo-chip.novo-color-ash{color:#3d464d;background:#a0a0a0}.novo-chip.novo-color-ash>*{color:inherit}.novo-chip.novo-accent-ash{border:1px solid #a0a0a0;color:#a0a0a0}.novo-chip.novo-color-slate{color:#fff;background:#707070}.novo-chip.novo-color-slate>*{color:inherit}.novo-chip.novo-accent-slate{border:1px solid #707070;color:#707070}.novo-chip.novo-color-onyx{color:#fff;background:#526980}.novo-chip.novo-color-onyx>*{color:inherit}.novo-chip.novo-accent-onyx{border:1px solid #526980;color:#526980}.novo-chip.novo-color-charcoal{color:#fff;background:#282828}.novo-chip.novo-color-charcoal>*{color:inherit}.novo-chip.novo-accent-charcoal{border:1px solid #282828;color:#282828}.novo-chip.novo-color-moonlight{color:#fff;background:#1a242f}.novo-chip.novo-color-moonlight>*{color:inherit}.novo-chip.novo-accent-moonlight{border:1px solid #1a242f;color:#1a242f}.novo-chip.novo-color-midnight{color:#fff;background:#202945}.novo-chip.novo-color-midnight>*{color:inherit}.novo-chip.novo-accent-midnight{border:1px solid #202945;color:#202945}.novo-chip.novo-color-darkness{color:#fff;background:#161f27}.novo-chip.novo-color-darkness>*{color:inherit}.novo-chip.novo-accent-darkness{border:1px solid #161f27;color:#161f27}.novo-chip.novo-color-navy{color:#fff;background:#0d2d42}.novo-chip.novo-color-navy>*{color:inherit}.novo-chip.novo-accent-navy{border:1px solid #0d2d42;color:#0d2d42}.novo-chip.novo-color-aqua{color:#3d464d;background:#3bafda}.novo-chip.novo-color-aqua>*{color:inherit}.novo-chip.novo-accent-aqua{border:1px solid #3bafda;color:#3bafda}.novo-chip.novo-color-ocean{color:#fff;background:#4a89dc}.novo-chip.novo-color-ocean>*{color:inherit}.novo-chip.novo-accent-ocean{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-mint{color:#3d464d;background:#37bc9b}.novo-chip.novo-color-mint>*{color:inherit}.novo-chip.novo-accent-mint{border:1px solid #37bc9b;color:#37bc9b}.novo-chip.novo-color-grass{color:#fff;background:#8cc152}.novo-chip.novo-color-grass>*{color:inherit}.novo-chip.novo-accent-grass{border:1px solid #8cc152;color:#8cc152}.novo-chip.novo-color-sunflower{color:#fff;background:#f6b042}.novo-chip.novo-color-sunflower>*{color:inherit}.novo-chip.novo-accent-sunflower{border:1px solid #f6b042;color:#f6b042}.novo-chip.novo-color-bittersweet{color:#fff;background:#eb6845}.novo-chip.novo-color-bittersweet>*{color:inherit}.novo-chip.novo-accent-bittersweet{border:1px solid #eb6845;color:#eb6845}.novo-chip.novo-color-grapefruit{color:#fff;background:#da4453}.novo-chip.novo-color-grapefruit>*{color:inherit}.novo-chip.novo-accent-grapefruit{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-carnation{color:#fff;background:#d770ad}.novo-chip.novo-color-carnation>*{color:inherit}.novo-chip.novo-accent-carnation{border:1px solid #d770ad;color:#d770ad}.novo-chip.novo-color-lavender{color:#fff;background:#967adc}.novo-chip.novo-color-lavender>*{color:inherit}.novo-chip.novo-accent-lavender{border:1px solid #967adc;color:#967adc}.novo-chip.novo-color-mountain{color:#fff;background:#9678b6}.novo-chip.novo-color-mountain>*{color:inherit}.novo-chip.novo-accent-mountain{border:1px solid #9678b6;color:#9678b6}.novo-chip.novo-color-info{color:#fff;background:#4a89dc}.novo-chip.novo-color-info>*{color:inherit}.novo-chip.novo-accent-info{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-positive{color:#fff;background:#4a89dc}.novo-chip.novo-color-positive>*{color:inherit}.novo-chip.novo-accent-positive{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-success{color:#fff;background:#8cc152}.novo-chip.novo-color-success>*{color:inherit}.novo-chip.novo-accent-success{border:1px solid #8cc152;color:#8cc152}.novo-chip.novo-color-negative{color:#fff;background:#da4453}.novo-chip.novo-color-negative>*{color:inherit}.novo-chip.novo-accent-negative{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-danger{color:#fff;background:#da4453}.novo-chip.novo-color-danger>*{color:inherit}.novo-chip.novo-accent-danger{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-error{color:#fff;background:#da4453}.novo-chip.novo-color-error>*{color:inherit}.novo-chip.novo-accent-error{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-warning{color:#fff;background:#f6b042}.novo-chip.novo-color-warning>*{color:inherit}.novo-chip.novo-accent-warning{border:1px solid #f6b042;color:#f6b042}.novo-chip.novo-color-empty{color:#3d464d;background:#cccdcc}.novo-chip.novo-color-empty>*{color:inherit}.novo-chip.novo-accent-empty{border:1px solid #cccdcc;color:#cccdcc}.novo-chip.novo-color-disabled{color:#3d464d;background:#bebebe}.novo-chip.novo-color-disabled>*{color:inherit}.novo-chip.novo-accent-disabled{border:1px solid #bebebe;color:#bebebe}.novo-chip.novo-color-background{color:#3d464d;background:#f7f7f7}.novo-chip.novo-color-background>*{color:inherit}.novo-chip.novo-accent-background{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-backgroundDark{color:#3d464d;background:#e2e2e2}.novo-chip.novo-color-backgroundDark>*{color:inherit}.novo-chip.novo-accent-backgroundDark{border:1px solid #e2e2e2;color:#e2e2e2}.novo-chip.novo-color-presentation{color:#fff;background:#5b6770}.novo-chip.novo-color-presentation>*{color:inherit}.novo-chip.novo-accent-presentation{border:1px solid #5b6770;color:#5b6770}.novo-chip.novo-color-bullhorn{color:#3d464d;background:#ff6900}.novo-chip.novo-color-bullhorn>*{color:inherit}.novo-chip.novo-accent-bullhorn{border:1px solid #ff6900;color:#ff6900}.novo-chip.novo-color-pulse{color:#3d464d;background:#3bafda}.novo-chip.novo-color-pulse>*{color:inherit}.novo-chip.novo-accent-pulse{border:1px solid #3bafda;color:#3bafda}.novo-chip.novo-color-company{color:#fff;background:#3399dd}.novo-chip.novo-color-company>*{color:inherit}.novo-chip.novo-accent-company{border:1px solid #3399dd;color:#39d}.novo-chip.novo-color-candidate{color:#fff;background:#44bb77}.novo-chip.novo-color-candidate>*{color:inherit}.novo-chip.novo-accent-candidate{border:1px solid #44bb77;color:#4b7}.novo-chip.novo-color-lead{color:#fff;background:#aa6699}.novo-chip.novo-color-lead>*{color:inherit}.novo-chip.novo-accent-lead{border:1px solid #aa6699;color:#a69}.novo-chip.novo-color-contact{color:#fff;background:#ffaa44}.novo-chip.novo-color-contact>*{color:inherit}.novo-chip.novo-accent-contact{border:1px solid #ffaa44;color:#fa4}.novo-chip.novo-color-clientcontact{color:#fff;background:#ffaa44}.novo-chip.novo-color-clientcontact>*{color:inherit}.novo-chip.novo-accent-clientcontact{border:1px solid #ffaa44;color:#fa4}.novo-chip.novo-color-opportunity{color:#fff;background:#662255}.novo-chip.novo-color-opportunity>*{color:inherit}.novo-chip.novo-accent-opportunity{border:1px solid #662255;color:#625}.novo-chip.novo-color-job{color:#fff;background:#bb5566}.novo-chip.novo-color-job>*{color:inherit}.novo-chip.novo-accent-job{border:1px solid #bb5566;color:#b56}.novo-chip.novo-color-joborder{color:#fff;background:#bb5566}.novo-chip.novo-color-joborder>*{color:inherit}.novo-chip.novo-accent-joborder{border:1px solid #bb5566;color:#b56}.novo-chip.novo-color-submission{color:#3d464d;background:#a9adbb}.novo-chip.novo-color-submission>*{color:inherit}.novo-chip.novo-accent-submission{border:1px solid #a9adbb;color:#a9adbb}.novo-chip.novo-color-sendout{color:#fff;background:#747884}.novo-chip.novo-color-sendout>*{color:inherit}.novo-chip.novo-accent-sendout{border:1px solid #747884;color:#747884}.novo-chip.novo-color-placement{color:#fff;background:#0b344f}.novo-chip.novo-color-placement>*{color:inherit}.novo-chip.novo-accent-placement{border:1px solid #0b344f;color:#0b344f}.novo-chip.novo-color-note{color:#fff;background:#747884}.novo-chip.novo-color-note>*{color:inherit}.novo-chip.novo-accent-note{border:1px solid #747884;color:#747884}.novo-chip.novo-color-contract{color:#fff;background:#454ea0}.novo-chip.novo-color-contract>*{color:inherit}.novo-chip.novo-accent-contract{border:1px solid #454ea0;color:#454ea0}.novo-chip.novo-color-jobCode{color:#fff;background:#696d79}.novo-chip.novo-color-jobCode>*{color:inherit}.novo-chip.novo-accent-jobCode{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-earnCode{color:#fff;background:#696d79}.novo-chip.novo-color-earnCode>*{color:inherit}.novo-chip.novo-accent-earnCode{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-invoiceStatement{color:#fff;background:#696d79}.novo-chip.novo-color-invoiceStatement>*{color:inherit}.novo-chip.novo-accent-invoiceStatement{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-billableCharge{color:#fff;background:#696d79}.novo-chip.novo-color-billableCharge>*{color:inherit}.novo-chip.novo-accent-billableCharge{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-payableCharge{color:#fff;background:#696d79}.novo-chip.novo-color-payableCharge>*{color:inherit}.novo-chip.novo-accent-payableCharge{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-user{color:#fff;background:#696d79}.novo-chip.novo-color-user>*{color:inherit}.novo-chip.novo-accent-user{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-corporateUser{color:#fff;background:#696d79}.novo-chip.novo-color-corporateUser>*{color:inherit}.novo-chip.novo-accent-corporateUser{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-distributionList{color:#fff;background:#696d79}.novo-chip.novo-color-distributionList>*{color:inherit}.novo-chip.novo-accent-distributionList{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-credential{color:#fff;background:#696d79}.novo-chip.novo-color-credential>*{color:inherit}.novo-chip.novo-accent-credential{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-person{color:#fff;background:#696d79}.novo-chip.novo-color-person>*{color:inherit}.novo-chip.novo-accent-person{border:1px solid #696d79;color:#696d79}\n"], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipElement, decorators: [{
            type: Component,
            args: [{ selector: `novo-chip, [novo-chip]`, template: `<ng-content></ng-content>`, encapsulation: ViewEncapsulation.None, inputs: ['color', 'tabIndex', 'size'], providers: [{ provide: REMOVABLE_REF, useExisting: NovoChipElement }], host: {
                        class: 'novo-chip novo-focus-indicator',
                        role: 'option',
                        '[class.novo-chip-selectable]': 'selectable',
                        '[class.novo-chip-selected]': 'selected',
                        '[class.novo-chip-with-avatar]': 'avatar',
                        '[class.novo-chip-with-trailing-icon]': 'removeIcon',
                        '[class.novo-chip-disabled]': 'disabled',
                        '[class._novo-animation-noopable]': '_animationsDisabled',
                        '[attr.tabindex]': 'disabled ? null : tabIndex',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-selected]': 'ariaSelected',
                        '(click)': '_handleClick($event)',
                        // '(mouseenter)': '_handleActivate($event)',
                        // '(mouseleave)': '_handleDeactivate($event)',
                        '(keydown)': '_handleKeydown($event)',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                    }, styles: [".novo-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;border:none;-webkit-appearance:none;-moz-appearance:none}.novo-chip{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;background:var(--background-main);box-sizing:border-box;border:1px solid transparent;transition:all .2s ease-in-out;display:inline-flex;align-items:center;cursor:default;gap:1rem;border-radius:.4rem;padding:0 1rem;min-height:2.4rem;height:1px}.novo-chip.text-capitalize{text-transform:capitalize}.novo-chip.text-uppercase{text-transform:uppercase}.novo-chip.text-nowrap{white-space:nowrap}.novo-chip.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.novo-chip.text-size-default{font-size:inherit}.novo-chip.text-size-body{font-size:1.3rem}.novo-chip.text-size-xs{font-size:1rem}.novo-chip.text-size-sm{font-size:1.2rem}.novo-chip.text-size-md{font-size:1.3rem}.novo-chip.text-size-lg{font-size:1.6rem}.novo-chip.text-size-xl{font-size:2rem}.novo-chip.text-size-2xl{font-size:2.6rem}.novo-chip.text-size-3xl{font-size:3.2rem}.novo-chip.text-size-smaller{font-size:.8em}.novo-chip.text-size-larger{font-size:1.2em}.novo-chip.text-color-black{color:#000}.novo-chip.text-color-white{color:#fff}.novo-chip.text-color-gray,.novo-chip.text-color-grey{color:#9e9e9e}.novo-chip.text-color-offWhite,.novo-chip.text-color-bright{color:#f7f7f7}.novo-chip.text-color-light{color:#dbdbdb}.novo-chip.text-color-neutral{color:#4f5361}.novo-chip.text-color-dark{color:#3d464d}.novo-chip.text-color-orange{color:#ff6900}.novo-chip.text-color-navigation{color:#202945}.novo-chip.text-color-skyBlue{color:#009bdf}.novo-chip.text-color-steel{color:#5b6770}.novo-chip.text-color-metal{color:#637893}.novo-chip.text-color-sand{color:#f4f4f4}.novo-chip.text-color-silver{color:#e2e2e2}.novo-chip.text-color-stone{color:#bebebe}.novo-chip.text-color-ash{color:#a0a0a0}.novo-chip.text-color-slate{color:#707070}.novo-chip.text-color-onyx{color:#526980}.novo-chip.text-color-charcoal{color:#282828}.novo-chip.text-color-moonlight{color:#1a242f}.novo-chip.text-color-midnight{color:#202945}.novo-chip.text-color-darkness{color:#161f27}.novo-chip.text-color-navy{color:#0d2d42}.novo-chip.text-color-aqua{color:#3bafda}.novo-chip.text-color-ocean{color:#4a89dc}.novo-chip.text-color-mint{color:#37bc9b}.novo-chip.text-color-grass{color:#8cc152}.novo-chip.text-color-sunflower{color:#f6b042}.novo-chip.text-color-bittersweet{color:#eb6845}.novo-chip.text-color-grapefruit{color:#da4453}.novo-chip.text-color-carnation{color:#d770ad}.novo-chip.text-color-lavender{color:#967adc}.novo-chip.text-color-mountain{color:#9678b6}.novo-chip.text-color-info,.novo-chip.text-color-positive{color:#4a89dc}.novo-chip.text-color-success{color:#8cc152}.novo-chip.text-color-negative,.novo-chip.text-color-danger,.novo-chip.text-color-error{color:#da4453}.novo-chip.text-color-warning{color:#f6b042}.novo-chip.text-color-empty{color:#cccdcc}.novo-chip.text-color-disabled{color:#bebebe}.novo-chip.text-color-background{color:#f7f7f7}.novo-chip.text-color-backgroundDark{color:#e2e2e2}.novo-chip.text-color-presentation{color:#5b6770}.novo-chip.text-color-bullhorn{color:#ff6900}.novo-chip.text-color-pulse{color:#3bafda}.novo-chip.text-color-company{color:#39d}.novo-chip.text-color-candidate{color:#4b7}.novo-chip.text-color-lead{color:#a69}.novo-chip.text-color-contact,.novo-chip.text-color-clientcontact{color:#fa4}.novo-chip.text-color-opportunity{color:#625}.novo-chip.text-color-job,.novo-chip.text-color-joborder{color:#b56}.novo-chip.text-color-submission{color:#a9adbb}.novo-chip.text-color-sendout{color:#747884}.novo-chip.text-color-placement{color:#0b344f}.novo-chip.text-color-note{color:#747884}.novo-chip.text-color-contract{color:#454ea0}.novo-chip.text-color-jobCode,.novo-chip.text-color-earnCode,.novo-chip.text-color-invoiceStatement,.novo-chip.text-color-billableCharge,.novo-chip.text-color-payableCharge,.novo-chip.text-color-user,.novo-chip.text-color-corporateUser,.novo-chip.text-color-distributionList,.novo-chip.text-color-credential,.novo-chip.text-color-person{color:#696d79}.novo-chip.margin-before{margin-top:.4rem}.novo-chip.margin-after{margin-bottom:.8rem}.novo-chip.text-length-small{max-width:40ch}.novo-chip.text-length-medium{max-width:55ch}.novo-chip.text-length-large{max-width:70ch}.novo-chip.text-weight-hairline{font-weight:100}.novo-chip.text-weight-thin{font-weight:200}.novo-chip.text-weight-light{font-weight:300}.novo-chip.text-weight-normal{font-weight:400}.novo-chip.text-weight-medium{font-weight:500}.novo-chip.text-weight-semibold{font-weight:600}.novo-chip.text-weight-bold{font-weight:700}.novo-chip.text-weight-extrabold{font-weight:800}.novo-chip.text-weight-heavy{font-weight:900}.novo-chip.text-weight-lighter{font-weight:lighter}.novo-chip.text-weight-bolder{font-weight:bolder}.novo-chip.novo-chip-selectable{color:var(--selection)}.novo-chip.novo-chip-selectable:after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;background-color:#000;content:\"\";pointer-events:none;transition:opacity .2s ease-in-out}.novo-chip.novo-chip-selectable:focus{outline:none;border:1px solid var(--selection)}.novo-chip.novo-chip-selectable:focus:after{opacity:.16}.novo-chip.novo-chip-selectable:hover{border:1px solid var(--selection)}.novo-chip.novo-chip-disabled{color:var(--text-main);opacity:.7;pointer-events:none}.novo-chip.novo-chip-disabled:after{opacity:0}.novo-chip.novo-chip-disabled .novo-chip-remove,.novo-chip.novo-chip-disabled .novo-chip-trailing-icon{cursor:default}.novo-chip .novo-chip-avatar::not(novo-icon){width:24px;height:24px}.novo-chip .novo-chip-avatar{margin-right:0rem;margin-left:0rem}.novo-chip .novo-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;-o-object-fit:cover;object-fit:cover}.novo-chip .novo-chip-remove,.novo-chip .novo-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.novo-chip .novo-chip-remove,.novo-chip .novo-chip-trailing-icon{margin-left:0rem;margin-right:0}.novo-chip .novo-chip-remove{color:#dbdbdb}.novo-chip:not(.novo-chip-disabled) .novo-chip-remove:hover{color:#8f8f8f}.novo-chip.novo-size-xs{font-size:.8rem;border-radius:.4rem;padding:0 .25rem;min-height:1.6rem;gap:.25rem}.novo-chip.novo-size-xs.novo-chip-with-avatar{padding-left:.125rem}.novo-chip.novo-size-xs.novo-chip-with-trailing-icon{padding-right:.125rem}.novo-chip.novo-size-xs .novo-text{font-size:inherit}.novo-chip.novo-size-sm{font-size:1rem;border-radius:.4rem;padding:0 .5rem;min-height:2rem;gap:.5rem}.novo-chip.novo-size-sm.novo-chip-with-avatar{padding-left:.25rem}.novo-chip.novo-size-sm.novo-chip-with-trailing-icon{padding-right:.25rem}.novo-chip.novo-size-sm .novo-text{font-size:inherit}.novo-chip.novo-size-md{font-size:1.2rem;border-radius:.4rem;padding:0 1rem;min-height:2.8rem;gap:1rem}.novo-chip.novo-size-md.novo-chip-with-avatar{padding-left:.5rem}.novo-chip.novo-size-md.novo-chip-with-trailing-icon{padding-right:.5rem}.novo-chip.novo-size-md .novo-text{font-size:inherit}.novo-chip.novo-size-lg{font-size:1.4rem;border-radius:.4rem;padding:0 1.25rem;min-height:3.2rem;gap:1.25rem}.novo-chip.novo-size-lg.novo-chip-with-avatar{padding-left:.625rem}.novo-chip.novo-size-lg.novo-chip-with-trailing-icon{padding-right:.625rem}.novo-chip.novo-size-lg .novo-text{font-size:inherit}.novo-chip.novo-size-xl{font-size:1.8rem;border-radius:.4rem;padding:0 1.5rem;min-height:3.6rem;gap:1.5rem}.novo-chip.novo-size-xl.novo-chip-with-avatar{padding-left:.75rem}.novo-chip.novo-size-xl.novo-chip-with-trailing-icon{padding-right:.75rem}.novo-chip.novo-size-xl .novo-text{font-size:inherit}.novo-chip.novo-color-black{color:#fff;background:#000000}.novo-chip.novo-color-black>*{color:inherit}.novo-chip.novo-accent-black{border:1px solid #000000;color:#000}.novo-chip.novo-color-white{color:#3d464d;background:#ffffff}.novo-chip.novo-color-white>*{color:inherit}.novo-chip.novo-accent-white{border:1px solid #ffffff;color:#fff}.novo-chip.novo-color-gray{color:#3d464d;background:#9e9e9e}.novo-chip.novo-color-gray>*{color:inherit}.novo-chip.novo-accent-gray{border:1px solid #9e9e9e;color:#9e9e9e}.novo-chip.novo-color-grey{color:#3d464d;background:#9e9e9e}.novo-chip.novo-color-grey>*{color:inherit}.novo-chip.novo-accent-grey{border:1px solid #9e9e9e;color:#9e9e9e}.novo-chip.novo-color-offWhite{color:#3d464d;background:#f7f7f7}.novo-chip.novo-color-offWhite>*{color:inherit}.novo-chip.novo-accent-offWhite{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-bright{color:#3d464d;background:#f7f7f7}.novo-chip.novo-color-bright>*{color:inherit}.novo-chip.novo-accent-bright{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-light{color:#3d464d;background:#dbdbdb}.novo-chip.novo-color-light>*{color:inherit}.novo-chip.novo-accent-light{border:1px solid #dbdbdb;color:#dbdbdb}.novo-chip.novo-color-neutral{color:#fff;background:#4f5361}.novo-chip.novo-color-neutral>*{color:inherit}.novo-chip.novo-accent-neutral{border:1px solid #4f5361;color:#4f5361}.novo-chip.novo-color-dark{color:#fff;background:#3d464d}.novo-chip.novo-color-dark>*{color:inherit}.novo-chip.novo-accent-dark{border:1px solid #3d464d;color:#3d464d}.novo-chip.novo-color-orange{color:#3d464d;background:#ff6900}.novo-chip.novo-color-orange>*{color:inherit}.novo-chip.novo-accent-orange{border:1px solid #ff6900;color:#ff6900}.novo-chip.novo-color-navigation{color:#fff;background:#202945}.novo-chip.novo-color-navigation>*{color:inherit}.novo-chip.novo-accent-navigation{border:1px solid #202945;color:#202945}.novo-chip.novo-color-skyBlue{color:#fff;background:#009bdf}.novo-chip.novo-color-skyBlue>*{color:inherit}.novo-chip.novo-accent-skyBlue{border:1px solid #009bdf;color:#009bdf}.novo-chip.novo-color-steel{color:#fff;background:#5b6770}.novo-chip.novo-color-steel>*{color:inherit}.novo-chip.novo-accent-steel{border:1px solid #5b6770;color:#5b6770}.novo-chip.novo-color-metal{color:#fff;background:#637893}.novo-chip.novo-color-metal>*{color:inherit}.novo-chip.novo-accent-metal{border:1px solid #637893;color:#637893}.novo-chip.novo-color-sand{color:#3d464d;background:#f4f4f4}.novo-chip.novo-color-sand>*{color:inherit}.novo-chip.novo-accent-sand{border:1px solid #f4f4f4;color:#f4f4f4}.novo-chip.novo-color-silver{color:#3d464d;background:#e2e2e2}.novo-chip.novo-color-silver>*{color:inherit}.novo-chip.novo-accent-silver{border:1px solid #e2e2e2;color:#e2e2e2}.novo-chip.novo-color-stone{color:#3d464d;background:#bebebe}.novo-chip.novo-color-stone>*{color:inherit}.novo-chip.novo-accent-stone{border:1px solid #bebebe;color:#bebebe}.novo-chip.novo-color-ash{color:#3d464d;background:#a0a0a0}.novo-chip.novo-color-ash>*{color:inherit}.novo-chip.novo-accent-ash{border:1px solid #a0a0a0;color:#a0a0a0}.novo-chip.novo-color-slate{color:#fff;background:#707070}.novo-chip.novo-color-slate>*{color:inherit}.novo-chip.novo-accent-slate{border:1px solid #707070;color:#707070}.novo-chip.novo-color-onyx{color:#fff;background:#526980}.novo-chip.novo-color-onyx>*{color:inherit}.novo-chip.novo-accent-onyx{border:1px solid #526980;color:#526980}.novo-chip.novo-color-charcoal{color:#fff;background:#282828}.novo-chip.novo-color-charcoal>*{color:inherit}.novo-chip.novo-accent-charcoal{border:1px solid #282828;color:#282828}.novo-chip.novo-color-moonlight{color:#fff;background:#1a242f}.novo-chip.novo-color-moonlight>*{color:inherit}.novo-chip.novo-accent-moonlight{border:1px solid #1a242f;color:#1a242f}.novo-chip.novo-color-midnight{color:#fff;background:#202945}.novo-chip.novo-color-midnight>*{color:inherit}.novo-chip.novo-accent-midnight{border:1px solid #202945;color:#202945}.novo-chip.novo-color-darkness{color:#fff;background:#161f27}.novo-chip.novo-color-darkness>*{color:inherit}.novo-chip.novo-accent-darkness{border:1px solid #161f27;color:#161f27}.novo-chip.novo-color-navy{color:#fff;background:#0d2d42}.novo-chip.novo-color-navy>*{color:inherit}.novo-chip.novo-accent-navy{border:1px solid #0d2d42;color:#0d2d42}.novo-chip.novo-color-aqua{color:#3d464d;background:#3bafda}.novo-chip.novo-color-aqua>*{color:inherit}.novo-chip.novo-accent-aqua{border:1px solid #3bafda;color:#3bafda}.novo-chip.novo-color-ocean{color:#fff;background:#4a89dc}.novo-chip.novo-color-ocean>*{color:inherit}.novo-chip.novo-accent-ocean{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-mint{color:#3d464d;background:#37bc9b}.novo-chip.novo-color-mint>*{color:inherit}.novo-chip.novo-accent-mint{border:1px solid #37bc9b;color:#37bc9b}.novo-chip.novo-color-grass{color:#fff;background:#8cc152}.novo-chip.novo-color-grass>*{color:inherit}.novo-chip.novo-accent-grass{border:1px solid #8cc152;color:#8cc152}.novo-chip.novo-color-sunflower{color:#fff;background:#f6b042}.novo-chip.novo-color-sunflower>*{color:inherit}.novo-chip.novo-accent-sunflower{border:1px solid #f6b042;color:#f6b042}.novo-chip.novo-color-bittersweet{color:#fff;background:#eb6845}.novo-chip.novo-color-bittersweet>*{color:inherit}.novo-chip.novo-accent-bittersweet{border:1px solid #eb6845;color:#eb6845}.novo-chip.novo-color-grapefruit{color:#fff;background:#da4453}.novo-chip.novo-color-grapefruit>*{color:inherit}.novo-chip.novo-accent-grapefruit{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-carnation{color:#fff;background:#d770ad}.novo-chip.novo-color-carnation>*{color:inherit}.novo-chip.novo-accent-carnation{border:1px solid #d770ad;color:#d770ad}.novo-chip.novo-color-lavender{color:#fff;background:#967adc}.novo-chip.novo-color-lavender>*{color:inherit}.novo-chip.novo-accent-lavender{border:1px solid #967adc;color:#967adc}.novo-chip.novo-color-mountain{color:#fff;background:#9678b6}.novo-chip.novo-color-mountain>*{color:inherit}.novo-chip.novo-accent-mountain{border:1px solid #9678b6;color:#9678b6}.novo-chip.novo-color-info{color:#fff;background:#4a89dc}.novo-chip.novo-color-info>*{color:inherit}.novo-chip.novo-accent-info{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-positive{color:#fff;background:#4a89dc}.novo-chip.novo-color-positive>*{color:inherit}.novo-chip.novo-accent-positive{border:1px solid #4a89dc;color:#4a89dc}.novo-chip.novo-color-success{color:#fff;background:#8cc152}.novo-chip.novo-color-success>*{color:inherit}.novo-chip.novo-accent-success{border:1px solid #8cc152;color:#8cc152}.novo-chip.novo-color-negative{color:#fff;background:#da4453}.novo-chip.novo-color-negative>*{color:inherit}.novo-chip.novo-accent-negative{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-danger{color:#fff;background:#da4453}.novo-chip.novo-color-danger>*{color:inherit}.novo-chip.novo-accent-danger{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-error{color:#fff;background:#da4453}.novo-chip.novo-color-error>*{color:inherit}.novo-chip.novo-accent-error{border:1px solid #da4453;color:#da4453}.novo-chip.novo-color-warning{color:#fff;background:#f6b042}.novo-chip.novo-color-warning>*{color:inherit}.novo-chip.novo-accent-warning{border:1px solid #f6b042;color:#f6b042}.novo-chip.novo-color-empty{color:#3d464d;background:#cccdcc}.novo-chip.novo-color-empty>*{color:inherit}.novo-chip.novo-accent-empty{border:1px solid #cccdcc;color:#cccdcc}.novo-chip.novo-color-disabled{color:#3d464d;background:#bebebe}.novo-chip.novo-color-disabled>*{color:inherit}.novo-chip.novo-accent-disabled{border:1px solid #bebebe;color:#bebebe}.novo-chip.novo-color-background{color:#3d464d;background:#f7f7f7}.novo-chip.novo-color-background>*{color:inherit}.novo-chip.novo-accent-background{border:1px solid #f7f7f7;color:#f7f7f7}.novo-chip.novo-color-backgroundDark{color:#3d464d;background:#e2e2e2}.novo-chip.novo-color-backgroundDark>*{color:inherit}.novo-chip.novo-accent-backgroundDark{border:1px solid #e2e2e2;color:#e2e2e2}.novo-chip.novo-color-presentation{color:#fff;background:#5b6770}.novo-chip.novo-color-presentation>*{color:inherit}.novo-chip.novo-accent-presentation{border:1px solid #5b6770;color:#5b6770}.novo-chip.novo-color-bullhorn{color:#3d464d;background:#ff6900}.novo-chip.novo-color-bullhorn>*{color:inherit}.novo-chip.novo-accent-bullhorn{border:1px solid #ff6900;color:#ff6900}.novo-chip.novo-color-pulse{color:#3d464d;background:#3bafda}.novo-chip.novo-color-pulse>*{color:inherit}.novo-chip.novo-accent-pulse{border:1px solid #3bafda;color:#3bafda}.novo-chip.novo-color-company{color:#fff;background:#3399dd}.novo-chip.novo-color-company>*{color:inherit}.novo-chip.novo-accent-company{border:1px solid #3399dd;color:#39d}.novo-chip.novo-color-candidate{color:#fff;background:#44bb77}.novo-chip.novo-color-candidate>*{color:inherit}.novo-chip.novo-accent-candidate{border:1px solid #44bb77;color:#4b7}.novo-chip.novo-color-lead{color:#fff;background:#aa6699}.novo-chip.novo-color-lead>*{color:inherit}.novo-chip.novo-accent-lead{border:1px solid #aa6699;color:#a69}.novo-chip.novo-color-contact{color:#fff;background:#ffaa44}.novo-chip.novo-color-contact>*{color:inherit}.novo-chip.novo-accent-contact{border:1px solid #ffaa44;color:#fa4}.novo-chip.novo-color-clientcontact{color:#fff;background:#ffaa44}.novo-chip.novo-color-clientcontact>*{color:inherit}.novo-chip.novo-accent-clientcontact{border:1px solid #ffaa44;color:#fa4}.novo-chip.novo-color-opportunity{color:#fff;background:#662255}.novo-chip.novo-color-opportunity>*{color:inherit}.novo-chip.novo-accent-opportunity{border:1px solid #662255;color:#625}.novo-chip.novo-color-job{color:#fff;background:#bb5566}.novo-chip.novo-color-job>*{color:inherit}.novo-chip.novo-accent-job{border:1px solid #bb5566;color:#b56}.novo-chip.novo-color-joborder{color:#fff;background:#bb5566}.novo-chip.novo-color-joborder>*{color:inherit}.novo-chip.novo-accent-joborder{border:1px solid #bb5566;color:#b56}.novo-chip.novo-color-submission{color:#3d464d;background:#a9adbb}.novo-chip.novo-color-submission>*{color:inherit}.novo-chip.novo-accent-submission{border:1px solid #a9adbb;color:#a9adbb}.novo-chip.novo-color-sendout{color:#fff;background:#747884}.novo-chip.novo-color-sendout>*{color:inherit}.novo-chip.novo-accent-sendout{border:1px solid #747884;color:#747884}.novo-chip.novo-color-placement{color:#fff;background:#0b344f}.novo-chip.novo-color-placement>*{color:inherit}.novo-chip.novo-accent-placement{border:1px solid #0b344f;color:#0b344f}.novo-chip.novo-color-note{color:#fff;background:#747884}.novo-chip.novo-color-note>*{color:inherit}.novo-chip.novo-accent-note{border:1px solid #747884;color:#747884}.novo-chip.novo-color-contract{color:#fff;background:#454ea0}.novo-chip.novo-color-contract>*{color:inherit}.novo-chip.novo-accent-contract{border:1px solid #454ea0;color:#454ea0}.novo-chip.novo-color-jobCode{color:#fff;background:#696d79}.novo-chip.novo-color-jobCode>*{color:inherit}.novo-chip.novo-accent-jobCode{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-earnCode{color:#fff;background:#696d79}.novo-chip.novo-color-earnCode>*{color:inherit}.novo-chip.novo-accent-earnCode{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-invoiceStatement{color:#fff;background:#696d79}.novo-chip.novo-color-invoiceStatement>*{color:inherit}.novo-chip.novo-accent-invoiceStatement{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-billableCharge{color:#fff;background:#696d79}.novo-chip.novo-color-billableCharge>*{color:inherit}.novo-chip.novo-accent-billableCharge{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-payableCharge{color:#fff;background:#696d79}.novo-chip.novo-color-payableCharge>*{color:inherit}.novo-chip.novo-accent-payableCharge{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-user{color:#fff;background:#696d79}.novo-chip.novo-color-user>*{color:inherit}.novo-chip.novo-accent-user{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-corporateUser{color:#fff;background:#696d79}.novo-chip.novo-color-corporateUser>*{color:inherit}.novo-chip.novo-accent-corporateUser{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-distributionList{color:#fff;background:#696d79}.novo-chip.novo-color-distributionList>*{color:inherit}.novo-chip.novo-accent-distributionList{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-credential{color:#fff;background:#696d79}.novo-chip.novo-color-credential>*{color:inherit}.novo-chip.novo-accent-credential{border:1px solid #696d79;color:#696d79}.novo-chip.novo-color-person{color:#fff;background:#696d79}.novo-chip.novo-color-person>*{color:inherit}.novo-chip.novo-accent-person{border:1px solid #696d79;color:#696d79}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1$6.Platform }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ANIMATION_MODULE_TYPE]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }]; }, propDecorators: { avatar: [{
                type: ContentChild,
                args: [NovoChipAvatar]
            }], removeIcon: [{
                type: ContentChild,
                args: [NovoChipRemove]
            }], type: [{
                type: Input
            }], selected: [{
                type: Input
            }], value: [{
                type: Input
            }], selectable: [{
                type: Input
            }], disabled: [{
                type: Input
            }], removable: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }], destroyed: [{
                type: Output
            }], removed: [{
                type: Output
            }] } });

/** Injection token to be used to override the default options for the chips module. */
const NOVO_CHIPS_DEFAULT_OPTIONS = new InjectionToken('novo-chips-default-options');

// NG2
class NovoErrorElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
    }
    ngOnInit() { }
}
NovoErrorElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoErrorElement, deps: [{ token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoErrorElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoErrorElement, selector: "novo-error", ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{display:flex;padding-bottom:5px;flex:1;font-size:.8em;color:#da4453}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoErrorElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-error', template: "<ng-content></ng-content>", styles: [":host{display:flex;padding-bottom:5px;flex:1;font-size:.8em;color:#da4453}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$2.DomSanitizer }]; } });

/** An interface which allows a control to work inside of a `NovoField`. */
class NovoFieldControl {
}
NovoFieldControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldControl, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoFieldControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldControl, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldControl, decorators: [{
            type: Directive
        }] });

// NG2
let nextUniqueId$3 = 0;
class NovoHintElement {
    constructor() {
        /** Whether to align the hint label at the start or end of the line. */
        this.align = 'start';
        /** Unique ID for the hint. Used for the aria-describedby on the form field control. */
        this.id = `novo-hint-${nextUniqueId$3++}`;
    }
    ngOnInit() { }
}
NovoHintElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHintElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoHintElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoHintElement, selector: "novo-hint", inputs: { align: "align", id: "id" }, host: { properties: { "class.novo-field-hint-end": "align === \"end\"", "attr.id": "id", "attr.align": "null" }, classAttribute: "novo-hint" }, ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{font-size:var(--font-size-caption);font-weight:400;line-height:1.375;color:var(--text-muted);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;display:flex;flex:1 0 auto;width:-webkit-max-content;width:-moz-max-content;width:max-content;color:#9e9e9e;padding-bottom:.4rem;padding-top:.4rem}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}:host.novo-field-hint-end{order:1;text-align:right;align-content:end;justify-content:flex-end}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHintElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-hint', host: {
                        class: 'novo-hint',
                        '[class.novo-field-hint-end]': 'align === "end"',
                        '[attr.id]': 'id',
                        // Remove align attribute to prevent it from interfering with layout.
                        '[attr.align]': 'null',
                    }, template: "<ng-content></ng-content>", styles: [":host{font-size:var(--font-size-caption);font-weight:400;line-height:1.375;color:var(--text-muted);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;display:flex;flex:1 0 auto;width:-webkit-max-content;width:-moz-max-content;width:max-content;color:#9e9e9e;padding-bottom:.4rem;padding-top:.4rem}:host.text-capitalize{text-transform:capitalize}:host.text-uppercase{text-transform:uppercase}:host.text-nowrap{white-space:nowrap}:host.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host.text-size-default{font-size:inherit}:host.text-size-body{font-size:1.3rem}:host.text-size-xs{font-size:1rem}:host.text-size-sm{font-size:1.2rem}:host.text-size-md{font-size:1.3rem}:host.text-size-lg{font-size:1.6rem}:host.text-size-xl{font-size:2rem}:host.text-size-2xl{font-size:2.6rem}:host.text-size-3xl{font-size:3.2rem}:host.text-size-smaller{font-size:.8em}:host.text-size-larger{font-size:1.2em}:host.text-color-black{color:#000}:host.text-color-white{color:#fff}:host.text-color-gray{color:#9e9e9e}:host.text-color-grey{color:#9e9e9e}:host.text-color-offWhite{color:#f7f7f7}:host.text-color-bright{color:#f7f7f7}:host.text-color-light{color:#dbdbdb}:host.text-color-neutral{color:#4f5361}:host.text-color-dark{color:#3d464d}:host.text-color-orange{color:#ff6900}:host.text-color-navigation{color:#202945}:host.text-color-skyBlue{color:#009bdf}:host.text-color-steel{color:#5b6770}:host.text-color-metal{color:#637893}:host.text-color-sand{color:#f4f4f4}:host.text-color-silver{color:#e2e2e2}:host.text-color-stone{color:#bebebe}:host.text-color-ash{color:#a0a0a0}:host.text-color-slate{color:#707070}:host.text-color-onyx{color:#526980}:host.text-color-charcoal{color:#282828}:host.text-color-moonlight{color:#1a242f}:host.text-color-midnight{color:#202945}:host.text-color-darkness{color:#161f27}:host.text-color-navy{color:#0d2d42}:host.text-color-aqua{color:#3bafda}:host.text-color-ocean{color:#4a89dc}:host.text-color-mint{color:#37bc9b}:host.text-color-grass{color:#8cc152}:host.text-color-sunflower{color:#f6b042}:host.text-color-bittersweet{color:#eb6845}:host.text-color-grapefruit{color:#da4453}:host.text-color-carnation{color:#d770ad}:host.text-color-lavender{color:#967adc}:host.text-color-mountain{color:#9678b6}:host.text-color-info{color:#4a89dc}:host.text-color-positive{color:#4a89dc}:host.text-color-success{color:#8cc152}:host.text-color-negative{color:#da4453}:host.text-color-danger{color:#da4453}:host.text-color-error{color:#da4453}:host.text-color-warning{color:#f6b042}:host.text-color-empty{color:#cccdcc}:host.text-color-disabled{color:#bebebe}:host.text-color-background{color:#f7f7f7}:host.text-color-backgroundDark{color:#e2e2e2}:host.text-color-presentation{color:#5b6770}:host.text-color-bullhorn{color:#ff6900}:host.text-color-pulse{color:#3bafda}:host.text-color-company{color:#39d}:host.text-color-candidate{color:#4b7}:host.text-color-lead{color:#a69}:host.text-color-contact{color:#fa4}:host.text-color-clientcontact{color:#fa4}:host.text-color-opportunity{color:#625}:host.text-color-job{color:#b56}:host.text-color-joborder{color:#b56}:host.text-color-submission{color:#a9adbb}:host.text-color-sendout{color:#747884}:host.text-color-placement{color:#0b344f}:host.text-color-note{color:#747884}:host.text-color-contract{color:#454ea0}:host.text-color-jobCode{color:#696d79}:host.text-color-earnCode{color:#696d79}:host.text-color-invoiceStatement{color:#696d79}:host.text-color-billableCharge{color:#696d79}:host.text-color-payableCharge{color:#696d79}:host.text-color-user{color:#696d79}:host.text-color-corporateUser{color:#696d79}:host.text-color-distributionList{color:#696d79}:host.text-color-credential{color:#696d79}:host.text-color-person{color:#696d79}:host.margin-before{margin-top:.4rem}:host.margin-after{margin-bottom:.8rem}:host.text-length-small{max-width:40ch}:host.text-length-medium{max-width:55ch}:host.text-length-large{max-width:70ch}:host.text-weight-hairline{font-weight:100}:host.text-weight-thin{font-weight:200}:host.text-weight-light{font-weight:300}:host.text-weight-normal{font-weight:400}:host.text-weight-medium{font-weight:500}:host.text-weight-semibold{font-weight:600}:host.text-weight-bold{font-weight:700}:host.text-weight-extrabold{font-weight:800}:host.text-weight-heavy{font-weight:900}:host.text-weight-lighter{font-weight:lighter}:host.text-weight-bolder{font-weight:bolder}:host.novo-field-hint-end{order:1;text-align:right;align-content:end;justify-content:flex-end}\n"] }]
        }], propDecorators: { align: [{
                type: Input
            }], id: [{
                type: Input
            }] } });

// NG2
class NovoFieldPrefixDirective {
}
NovoFieldPrefixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldPrefixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoFieldPrefixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldPrefixDirective, selector: "[novoPrefix]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldPrefixDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[novoPrefix]' }]
        }] });
class NovoFieldSuffixDirective {
}
NovoFieldSuffixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldSuffixDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoFieldSuffixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldSuffixDirective, selector: "[novoSuffix]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldSuffixDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[novoSuffix]' }]
        }] });
const NOVO_INPUT_UNDERLINED_TYPES = [
    'text',
    'date',
    'time',
    'datetime-local',
    'password',
    'email',
    'tel',
    'select',
    'textarea',
    'number',
    'novo-chip-list',
    'chip-list',
];
const NOVO_FORM_FIELD = new InjectionToken('NovoFormField');
class NovoFieldElement {
    constructor(_elementRef, _changeDetectorRef) {
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._labelClicks = Subscription.EMPTY;
        this.layout = 'vertical';
        this.appearance = 'standard';
        this._destroyed = new Subject();
        this.valueChanges = new EventEmitter();
        this.stateChanges = new EventEmitter();
    }
    /**
     * Gets an ElementRef for the element that a overlay attached to the form-field should be
     * positioned relative to.
     */
    getConnectedOverlayOrigin() {
        return this._inputContainerRef || this._elementRef;
    }
    ngAfterContentInit() {
        this._validateControlChild();
        const control = this._control;
        if (control.controlType) {
            this._elementRef.nativeElement.classList.add(`novo-field-type-${control.controlType}`);
            this._elementRef.nativeElement.setAttribute('data-control-type', control.controlType);
        }
        if (control.id) {
            this._elementRef.nativeElement.setAttribute('data-control-id', control.id);
        }
        if (control.ngControl?.name) {
            this._elementRef.nativeElement.setAttribute('data-control-key', control.ngControl.name);
        }
        // Subscribe to changes in the child control state in order to update the form field UI.
        // tslint:disable-next-line:deprecation
        control.stateChanges.pipe(startWith(null)).subscribe(() => {
            this.stateChanges.next();
            this._changeDetectorRef.markForCheck();
        });
        // Run change detection if the value changes.
        if (control.ngControl && control.ngControl.valueChanges) {
            control.ngControl.valueChanges.pipe(takeUntil(this._destroyed)).subscribe((v) => {
                this.valueChanges.next(v);
                this._changeDetectorRef.markForCheck();
            });
        }
        if (this._hasLabel()) {
            this._labelClicks = fromEvent(this._labelElement.nativeElement, 'click').subscribe(() => this._control.focus());
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this._labelClicks.unsubscribe();
    }
    /** Throws an error if the form field's control is missing. */
    _validateControlChild() {
        if (!this._control) {
            throw new Error('Missing Novo Control');
        }
    }
    _handleContainerClick(evt) {
        this._control.onContainerClick(evt);
    }
    _isUnderlinedInput() {
        return NOVO_INPUT_UNDERLINED_TYPES.includes(this._control.controlType);
    }
    /** Determines whether to display hints or errors. */
    _getDisplayedMessages() {
        return this._errorElements && this._errorElements.length > 0 && this._control.errorState ? 'error' : 'hint';
    }
    /** Determines whether a class from the NgControl should be forwarded to the host element. */
    _shouldForward(prop) {
        const ngControl = this._control ? this._control.ngControl : null;
        return ngControl && ngControl[prop];
    }
    _hasLabel() {
        return !!this._labelElement;
    }
}
NovoFieldElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldElement, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoFieldElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldElement, selector: "novo-field", inputs: { layout: "layout", appearance: "appearance", width: "width" }, outputs: { valueChanges: "valueChanges", stateChanges: "stateChanges" }, host: { listeners: { "click": "_handleContainerClick($event)" }, properties: { "class.novo-field-layout-horizontal": "layout==\"horizontal\"", "class.novo-field-layout-vertical": "layout==\"vertical\"", "class.novo-field-appearance-standard": "appearance == \"standard\"", "class.novo-field-appearance-fill": "appearance == \"fill\"", "class.novo-field-appearance-outline": "appearance == \"outline\"", "class.novo-field-appearance-list": "appearance == \"list\"", "class.novo-field-appearance-underlined": "_isUnderlinedInput()", "class.novo-field-invalid": "_control.errorState", "class.novo-field-has-label": "_hasLabel()", "class.novo-field-no-label": "!_hasLabel()", "class.novo-field-disabled": "_control.disabled", "class.novo-field-autofilled": "_control.autofilled", "class.novo-focused": "_control.focused", "class.ng-untouched": "_shouldForward(\"untouched\")", "class.ng-touched": "_shouldForward(\"touched\")", "class.ng-pristine": "_shouldForward(\"pristine\")", "class.ng-dirty": "_shouldForward(\"dirty\")", "class.ng-valid": "_shouldForward(\"valid\")", "class.ng-invalid": "_shouldForward(\"invalid\")", "class.ng-pending": "_shouldForward(\"pending\")" }, classAttribute: "novo-field" }, providers: [{ provide: NOVO_FORM_FIELD, useExisting: NovoFieldElement }], queries: [{ propertyName: "_labelElement", first: true, predicate: NovoLabel, descendants: true }, { propertyName: "_control", first: true, predicate: NovoFieldControl, descendants: true }, { propertyName: "_hintElements", predicate: NovoHintElement }, { propertyName: "_errorElements", predicate: NovoErrorElement }, { propertyName: "_prefixElements", predicate: NovoFieldPrefixDirective }, { propertyName: "_suffixElements", predicate: NovoFieldSuffixDirective }], viewQueries: [{ propertyName: "_inputContainerRef", first: true, predicate: ["inputContainer"], descendants: true }], ngImport: i0, template: "<div class=\"novo-field-label\">\n  <ng-content select=\"novo-label\"></ng-content>\n</div>\n<div class=\"novo-field-input\" [style.width]=\"width\" #inputContainer>\n  <div class=\"novo-field-prefix\">\n    <ng-content select=\"[novoPrefix]\"></ng-content>\n  </div>\n  <div class=\"novo-field-infix\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"novo-field-suffix\">\n    <ng-content select=\"[novoSuffix]\"></ng-content>\n  </div>\n</div>\n<div class=\"novo-field-messages\" [ngSwitch]=\"_getDisplayedMessages()\">\n  <div class=\"novo-field-hint-wrapper\" *ngSwitchCase=\"'error'\">\n    <ng-content select=\"novo-error\"></ng-content>\n  </div>\n  <div class=\"novo-field-hint-wrapper\" *ngSwitchCase=\"'hint'\">\n    <ng-content select=\"novo-hint\"></ng-content>\n    <ng-content select=\"novo-hint[align=end]\"></ng-content>\n  </div>\n</div>", styles: [":host{display:grid;position:relative}:host.novo-field-layout-horizontal{grid-gap:0rem 1rem;grid-template-columns:150px minmax(-webkit-min-content,-webkit-max-content);grid-template-columns:150px minmax(min-content,max-content);grid-template-areas:\"label input\" \". messages\"}:host.novo-field-layout-vertical{grid-template-columns:minmax(-webkit-min-content,100%);grid-template-columns:minmax(min-content,100%);grid-template-rows:repeat(3,minmax(-webkit-min-content,-webkit-max-content));grid-template-rows:repeat(3,minmax(min-content,max-content));grid-template-areas:\"label\" \"input\" \"messages\";width:-webkit-max-content;width:-moz-max-content;width:max-content}:host .novo-field-label{grid-area:label;display:grid;align-items:center}:host.novo-field-type-color .novo-field-input::ng-deep .novo-input-element{padding:0}:host .novo-field-input{grid-area:input;display:grid;align-items:center;grid-template-columns:minmax(auto,-webkit-max-content) 1fr minmax(auto,-webkit-max-content);grid-template-columns:minmax(auto,max-content) 1fr minmax(auto,max-content);flex:1 1 100%;min-height:2.9rem}:host .novo-field-input::ng-deep .novo-input-element{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;border:none;background-image:none;background-color:transparent;box-shadow:none;padding:.4rem .2rem 0rem;border-bottom:none!important}:host .novo-field-input::ng-deep .novo-input-element.text-capitalize{text-transform:capitalize}:host .novo-field-input::ng-deep .novo-input-element.text-uppercase{text-transform:uppercase}:host .novo-field-input::ng-deep .novo-input-element.text-nowrap{white-space:nowrap}:host .novo-field-input::ng-deep .novo-input-element.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host .novo-field-input::ng-deep .novo-input-element.text-size-default{font-size:inherit}:host .novo-field-input::ng-deep .novo-input-element.text-size-body{font-size:1.3rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-xs{font-size:1rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-sm{font-size:1.2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-md{font-size:1.3rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-lg{font-size:1.6rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-xl{font-size:2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-2xl{font-size:2.6rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-3xl{font-size:3.2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-smaller{font-size:.8em}:host .novo-field-input::ng-deep .novo-input-element.text-size-larger{font-size:1.2em}:host .novo-field-input::ng-deep .novo-input-element.text-color-black{color:#000}:host .novo-field-input::ng-deep .novo-input-element.text-color-white{color:#fff}:host .novo-field-input::ng-deep .novo-input-element.text-color-gray{color:#9e9e9e}:host .novo-field-input::ng-deep .novo-input-element.text-color-grey{color:#9e9e9e}:host .novo-field-input::ng-deep .novo-input-element.text-color-offWhite{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-bright{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-light{color:#dbdbdb}:host .novo-field-input::ng-deep .novo-input-element.text-color-neutral{color:#4f5361}:host .novo-field-input::ng-deep .novo-input-element.text-color-dark{color:#3d464d}:host .novo-field-input::ng-deep .novo-input-element.text-color-orange{color:#ff6900}:host .novo-field-input::ng-deep .novo-input-element.text-color-navigation{color:#202945}:host .novo-field-input::ng-deep .novo-input-element.text-color-skyBlue{color:#009bdf}:host .novo-field-input::ng-deep .novo-input-element.text-color-steel{color:#5b6770}:host .novo-field-input::ng-deep .novo-input-element.text-color-metal{color:#637893}:host .novo-field-input::ng-deep .novo-input-element.text-color-sand{color:#f4f4f4}:host .novo-field-input::ng-deep .novo-input-element.text-color-silver{color:#e2e2e2}:host .novo-field-input::ng-deep .novo-input-element.text-color-stone{color:#bebebe}:host .novo-field-input::ng-deep .novo-input-element.text-color-ash{color:#a0a0a0}:host .novo-field-input::ng-deep .novo-input-element.text-color-slate{color:#707070}:host .novo-field-input::ng-deep .novo-input-element.text-color-onyx{color:#526980}:host .novo-field-input::ng-deep .novo-input-element.text-color-charcoal{color:#282828}:host .novo-field-input::ng-deep .novo-input-element.text-color-moonlight{color:#1a242f}:host .novo-field-input::ng-deep .novo-input-element.text-color-midnight{color:#202945}:host .novo-field-input::ng-deep .novo-input-element.text-color-darkness{color:#161f27}:host .novo-field-input::ng-deep .novo-input-element.text-color-navy{color:#0d2d42}:host .novo-field-input::ng-deep .novo-input-element.text-color-aqua{color:#3bafda}:host .novo-field-input::ng-deep .novo-input-element.text-color-ocean{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-mint{color:#37bc9b}:host .novo-field-input::ng-deep .novo-input-element.text-color-grass{color:#8cc152}:host .novo-field-input::ng-deep .novo-input-element.text-color-sunflower{color:#f6b042}:host .novo-field-input::ng-deep .novo-input-element.text-color-bittersweet{color:#eb6845}:host .novo-field-input::ng-deep .novo-input-element.text-color-grapefruit{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-carnation{color:#d770ad}:host .novo-field-input::ng-deep .novo-input-element.text-color-lavender{color:#967adc}:host .novo-field-input::ng-deep .novo-input-element.text-color-mountain{color:#9678b6}:host .novo-field-input::ng-deep .novo-input-element.text-color-info{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-positive{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-success{color:#8cc152}:host .novo-field-input::ng-deep .novo-input-element.text-color-negative{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-danger{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-error{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-warning{color:#f6b042}:host .novo-field-input::ng-deep .novo-input-element.text-color-empty{color:#cccdcc}:host .novo-field-input::ng-deep .novo-input-element.text-color-disabled{color:#bebebe}:host .novo-field-input::ng-deep .novo-input-element.text-color-background{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-backgroundDark{color:#e2e2e2}:host .novo-field-input::ng-deep .novo-input-element.text-color-presentation{color:#5b6770}:host .novo-field-input::ng-deep .novo-input-element.text-color-bullhorn{color:#ff6900}:host .novo-field-input::ng-deep .novo-input-element.text-color-pulse{color:#3bafda}:host .novo-field-input::ng-deep .novo-input-element.text-color-company{color:#39d}:host .novo-field-input::ng-deep .novo-input-element.text-color-candidate{color:#4b7}:host .novo-field-input::ng-deep .novo-input-element.text-color-lead{color:#a69}:host .novo-field-input::ng-deep .novo-input-element.text-color-contact{color:#fa4}:host .novo-field-input::ng-deep .novo-input-element.text-color-clientcontact{color:#fa4}:host .novo-field-input::ng-deep .novo-input-element.text-color-opportunity{color:#625}:host .novo-field-input::ng-deep .novo-input-element.text-color-job{color:#b56}:host .novo-field-input::ng-deep .novo-input-element.text-color-joborder{color:#b56}:host .novo-field-input::ng-deep .novo-input-element.text-color-submission{color:#a9adbb}:host .novo-field-input::ng-deep .novo-input-element.text-color-sendout{color:#747884}:host .novo-field-input::ng-deep .novo-input-element.text-color-placement{color:#0b344f}:host .novo-field-input::ng-deep .novo-input-element.text-color-note{color:#747884}:host .novo-field-input::ng-deep .novo-input-element.text-color-contract{color:#454ea0}:host .novo-field-input::ng-deep .novo-input-element.text-color-jobCode{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-earnCode{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-invoiceStatement{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-billableCharge{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-payableCharge{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-user{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-corporateUser{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-distributionList{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-credential{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-person{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.margin-before{margin-top:.4rem}:host .novo-field-input::ng-deep .novo-input-element.margin-after{margin-bottom:.8rem}:host .novo-field-input::ng-deep .novo-input-element.text-length-small{max-width:40ch}:host .novo-field-input::ng-deep .novo-input-element.text-length-medium{max-width:55ch}:host .novo-field-input::ng-deep .novo-input-element.text-length-large{max-width:70ch}:host .novo-field-input::ng-deep .novo-input-element.text-weight-hairline{font-weight:100}:host .novo-field-input::ng-deep .novo-input-element.text-weight-thin{font-weight:200}:host .novo-field-input::ng-deep .novo-input-element.text-weight-light{font-weight:300}:host .novo-field-input::ng-deep .novo-input-element.text-weight-normal{font-weight:400}:host .novo-field-input::ng-deep .novo-input-element.text-weight-medium{font-weight:500}:host .novo-field-input::ng-deep .novo-input-element.text-weight-semibold{font-weight:600}:host .novo-field-input::ng-deep .novo-input-element.text-weight-bold{font-weight:700}:host .novo-field-input::ng-deep .novo-input-element.text-weight-extrabold{font-weight:800}:host .novo-field-input::ng-deep .novo-input-element.text-weight-heavy{font-weight:900}:host .novo-field-input::ng-deep .novo-input-element.text-weight-lighter{font-weight:lighter}:host .novo-field-input::ng-deep .novo-input-element.text-weight-bolder{font-weight:bolder}:host .novo-field-input::ng-deep .novo-input-element:focus{outline:none}:host .novo-field-input::ng-deep .novo-radio-group{padding:.5rem 0}:host .novo-field-input .novo-field-prefix{display:flex;align-items:center}:host .novo-field-input .novo-field-infix{display:flex;align-items:center;align-self:flex-end}:host .novo-field-input .novo-field-infix select,:host .novo-field-input .novo-field-infix::ng-deep .novo-input-element{width:100%}:host .novo-field-input .novo-field-suffix{display:flex;align-items:center}:host .novo-field-messages{grid-area:messages;display:grid}:host .novo-field-hint-wrapper{display:flex;flex-direction:column}:host::ng-deep .novo-date-range-format{min-width:22rem}\n", ":host.novo-field-appearance-standard.novo-field-appearance-underlined .novo-field-input{border-bottom:1px solid #afb9c0!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{border-bottom:1px solid #3d464d!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined.novo-focused .novo-field-input{border-bottom:1px solid #4a89dc!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined.novo-field-invalid .novo-field-input{border-bottom:1px solid #da4453!important}\n", ":host.novo-field-appearance-fill.novo-field-layout-horizontal .novo-field-input{background:var(--background-main)}:host.novo-field-appearance-fill.novo-field-layout-vertical{background:var(--background-main)}:host.novo-field-appearance-fill.novo-field-layout-vertical .novo-field-label{padding-top:.5em;padding-left:.5em;padding-right:.5em}:host.novo-field-appearance-fill.novo-field-layout-vertical .novo-field-input{padding:0 .5em}:host.novo-field-appearance-fill.novo-field-appearance-underlined .novo-field-input{border-bottom:1px solid #afb9c0!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{border-bottom:1px solid #3d464d!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused .novo-field-label{color:#4a89dc!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused .novo-field-input{border-bottom:1px solid #4a89dc!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-field-invalid .novo-field-input{border-bottom:1px solid #da4453!important}\n", ":host.novo-field-appearance-outline{border:1px solid #afb9c0!important;border-radius:.4rem;padding:.5rem}:host.novo-field-appearance-outline.novo-field-layout-vertical .novo-field-label{background:white;margin-top:-1.5rem;margin-left:.5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content;padding:.5rem}:host.novo-field-appearance-outline:not(.novo-focused):hover{border:1px solid #3d464d!important}:host.novo-field-appearance-outline.novo-focused{border:1px solid #4a89dc!important}:host.novo-field-appearance-outline.novo-field-invalid{border:1px solid #da4453!important}\n", ":host.novo-field-appearance-list.novo-field-layout-horizontal{border-bottom:1px solid #f7f7f7!important;padding:.5rem 1.2rem;min-height:4.2rem}:host.novo-field-appearance-list.novo-field-layout-horizontal .novo-field-label{align-items:start;margin-top:.9rem}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-no-label{grid-template-columns:0px minmax(300px,600px);gap:0}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{background:rgba(74,137,220,.15)}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-focused .novo-field-label{color:#4a89dc!important}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-field-invalid .novo-field-label{color:#da4453!important}\n"], directives: [{ type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-field', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'novo-field',
                        '[class.novo-field-layout-horizontal]': 'layout=="horizontal"',
                        '[class.novo-field-layout-vertical]': 'layout=="vertical"',
                        '[class.novo-field-appearance-standard]': 'appearance == "standard"',
                        '[class.novo-field-appearance-fill]': 'appearance == "fill"',
                        '[class.novo-field-appearance-outline]': 'appearance == "outline"',
                        '[class.novo-field-appearance-list]': 'appearance == "list"',
                        '[class.novo-field-appearance-underlined]': '_isUnderlinedInput()',
                        '[class.novo-field-invalid]': '_control.errorState',
                        '[class.novo-field-has-label]': '_hasLabel()',
                        '[class.novo-field-no-label]': '!_hasLabel()',
                        // '[class.novo-field-hide-placeholder]': '_hideControlPlaceholder()',
                        '[class.novo-field-disabled]': '_control.disabled',
                        '[class.novo-field-autofilled]': '_control.autofilled',
                        '[class.novo-focused]': '_control.focused',
                        // '[class.novo-accent]': 'color == "accent"',
                        // '[class.novo-warn]': 'color == "warn"',
                        '[class.ng-untouched]': '_shouldForward("untouched")',
                        '[class.ng-touched]': '_shouldForward("touched")',
                        '[class.ng-pristine]': '_shouldForward("pristine")',
                        '[class.ng-dirty]': '_shouldForward("dirty")',
                        '[class.ng-valid]': '_shouldForward("valid")',
                        '[class.ng-invalid]': '_shouldForward("invalid")',
                        '[class.ng-pending]': '_shouldForward("pending")',
                    }, providers: [{ provide: NOVO_FORM_FIELD, useExisting: NovoFieldElement }], template: "<div class=\"novo-field-label\">\n  <ng-content select=\"novo-label\"></ng-content>\n</div>\n<div class=\"novo-field-input\" [style.width]=\"width\" #inputContainer>\n  <div class=\"novo-field-prefix\">\n    <ng-content select=\"[novoPrefix]\"></ng-content>\n  </div>\n  <div class=\"novo-field-infix\">\n    <ng-content></ng-content>\n  </div>\n  <div class=\"novo-field-suffix\">\n    <ng-content select=\"[novoSuffix]\"></ng-content>\n  </div>\n</div>\n<div class=\"novo-field-messages\" [ngSwitch]=\"_getDisplayedMessages()\">\n  <div class=\"novo-field-hint-wrapper\" *ngSwitchCase=\"'error'\">\n    <ng-content select=\"novo-error\"></ng-content>\n  </div>\n  <div class=\"novo-field-hint-wrapper\" *ngSwitchCase=\"'hint'\">\n    <ng-content select=\"novo-hint\"></ng-content>\n    <ng-content select=\"novo-hint[align=end]\"></ng-content>\n  </div>\n</div>", styles: [":host{display:grid;position:relative}:host.novo-field-layout-horizontal{grid-gap:0rem 1rem;grid-template-columns:150px minmax(-webkit-min-content,-webkit-max-content);grid-template-columns:150px minmax(min-content,max-content);grid-template-areas:\"label input\" \". messages\"}:host.novo-field-layout-vertical{grid-template-columns:minmax(-webkit-min-content,100%);grid-template-columns:minmax(min-content,100%);grid-template-rows:repeat(3,minmax(-webkit-min-content,-webkit-max-content));grid-template-rows:repeat(3,minmax(min-content,max-content));grid-template-areas:\"label\" \"input\" \"messages\";width:-webkit-max-content;width:-moz-max-content;width:max-content}:host .novo-field-label{grid-area:label;display:grid;align-items:center}:host.novo-field-type-color .novo-field-input::ng-deep .novo-input-element{padding:0}:host .novo-field-input{grid-area:input;display:grid;align-items:center;grid-template-columns:minmax(auto,-webkit-max-content) 1fr minmax(auto,-webkit-max-content);grid-template-columns:minmax(auto,max-content) 1fr minmax(auto,max-content);flex:1 1 100%;min-height:2.9rem}:host .novo-field-input::ng-deep .novo-input-element{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;border:none;background-image:none;background-color:transparent;box-shadow:none;padding:.4rem .2rem 0rem;border-bottom:none!important}:host .novo-field-input::ng-deep .novo-input-element.text-capitalize{text-transform:capitalize}:host .novo-field-input::ng-deep .novo-input-element.text-uppercase{text-transform:uppercase}:host .novo-field-input::ng-deep .novo-input-element.text-nowrap{white-space:nowrap}:host .novo-field-input::ng-deep .novo-input-element.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host .novo-field-input::ng-deep .novo-input-element.text-size-default{font-size:inherit}:host .novo-field-input::ng-deep .novo-input-element.text-size-body{font-size:1.3rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-xs{font-size:1rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-sm{font-size:1.2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-md{font-size:1.3rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-lg{font-size:1.6rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-xl{font-size:2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-2xl{font-size:2.6rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-3xl{font-size:3.2rem}:host .novo-field-input::ng-deep .novo-input-element.text-size-smaller{font-size:.8em}:host .novo-field-input::ng-deep .novo-input-element.text-size-larger{font-size:1.2em}:host .novo-field-input::ng-deep .novo-input-element.text-color-black{color:#000}:host .novo-field-input::ng-deep .novo-input-element.text-color-white{color:#fff}:host .novo-field-input::ng-deep .novo-input-element.text-color-gray{color:#9e9e9e}:host .novo-field-input::ng-deep .novo-input-element.text-color-grey{color:#9e9e9e}:host .novo-field-input::ng-deep .novo-input-element.text-color-offWhite{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-bright{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-light{color:#dbdbdb}:host .novo-field-input::ng-deep .novo-input-element.text-color-neutral{color:#4f5361}:host .novo-field-input::ng-deep .novo-input-element.text-color-dark{color:#3d464d}:host .novo-field-input::ng-deep .novo-input-element.text-color-orange{color:#ff6900}:host .novo-field-input::ng-deep .novo-input-element.text-color-navigation{color:#202945}:host .novo-field-input::ng-deep .novo-input-element.text-color-skyBlue{color:#009bdf}:host .novo-field-input::ng-deep .novo-input-element.text-color-steel{color:#5b6770}:host .novo-field-input::ng-deep .novo-input-element.text-color-metal{color:#637893}:host .novo-field-input::ng-deep .novo-input-element.text-color-sand{color:#f4f4f4}:host .novo-field-input::ng-deep .novo-input-element.text-color-silver{color:#e2e2e2}:host .novo-field-input::ng-deep .novo-input-element.text-color-stone{color:#bebebe}:host .novo-field-input::ng-deep .novo-input-element.text-color-ash{color:#a0a0a0}:host .novo-field-input::ng-deep .novo-input-element.text-color-slate{color:#707070}:host .novo-field-input::ng-deep .novo-input-element.text-color-onyx{color:#526980}:host .novo-field-input::ng-deep .novo-input-element.text-color-charcoal{color:#282828}:host .novo-field-input::ng-deep .novo-input-element.text-color-moonlight{color:#1a242f}:host .novo-field-input::ng-deep .novo-input-element.text-color-midnight{color:#202945}:host .novo-field-input::ng-deep .novo-input-element.text-color-darkness{color:#161f27}:host .novo-field-input::ng-deep .novo-input-element.text-color-navy{color:#0d2d42}:host .novo-field-input::ng-deep .novo-input-element.text-color-aqua{color:#3bafda}:host .novo-field-input::ng-deep .novo-input-element.text-color-ocean{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-mint{color:#37bc9b}:host .novo-field-input::ng-deep .novo-input-element.text-color-grass{color:#8cc152}:host .novo-field-input::ng-deep .novo-input-element.text-color-sunflower{color:#f6b042}:host .novo-field-input::ng-deep .novo-input-element.text-color-bittersweet{color:#eb6845}:host .novo-field-input::ng-deep .novo-input-element.text-color-grapefruit{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-carnation{color:#d770ad}:host .novo-field-input::ng-deep .novo-input-element.text-color-lavender{color:#967adc}:host .novo-field-input::ng-deep .novo-input-element.text-color-mountain{color:#9678b6}:host .novo-field-input::ng-deep .novo-input-element.text-color-info{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-positive{color:#4a89dc}:host .novo-field-input::ng-deep .novo-input-element.text-color-success{color:#8cc152}:host .novo-field-input::ng-deep .novo-input-element.text-color-negative{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-danger{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-error{color:#da4453}:host .novo-field-input::ng-deep .novo-input-element.text-color-warning{color:#f6b042}:host .novo-field-input::ng-deep .novo-input-element.text-color-empty{color:#cccdcc}:host .novo-field-input::ng-deep .novo-input-element.text-color-disabled{color:#bebebe}:host .novo-field-input::ng-deep .novo-input-element.text-color-background{color:#f7f7f7}:host .novo-field-input::ng-deep .novo-input-element.text-color-backgroundDark{color:#e2e2e2}:host .novo-field-input::ng-deep .novo-input-element.text-color-presentation{color:#5b6770}:host .novo-field-input::ng-deep .novo-input-element.text-color-bullhorn{color:#ff6900}:host .novo-field-input::ng-deep .novo-input-element.text-color-pulse{color:#3bafda}:host .novo-field-input::ng-deep .novo-input-element.text-color-company{color:#39d}:host .novo-field-input::ng-deep .novo-input-element.text-color-candidate{color:#4b7}:host .novo-field-input::ng-deep .novo-input-element.text-color-lead{color:#a69}:host .novo-field-input::ng-deep .novo-input-element.text-color-contact{color:#fa4}:host .novo-field-input::ng-deep .novo-input-element.text-color-clientcontact{color:#fa4}:host .novo-field-input::ng-deep .novo-input-element.text-color-opportunity{color:#625}:host .novo-field-input::ng-deep .novo-input-element.text-color-job{color:#b56}:host .novo-field-input::ng-deep .novo-input-element.text-color-joborder{color:#b56}:host .novo-field-input::ng-deep .novo-input-element.text-color-submission{color:#a9adbb}:host .novo-field-input::ng-deep .novo-input-element.text-color-sendout{color:#747884}:host .novo-field-input::ng-deep .novo-input-element.text-color-placement{color:#0b344f}:host .novo-field-input::ng-deep .novo-input-element.text-color-note{color:#747884}:host .novo-field-input::ng-deep .novo-input-element.text-color-contract{color:#454ea0}:host .novo-field-input::ng-deep .novo-input-element.text-color-jobCode{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-earnCode{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-invoiceStatement{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-billableCharge{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-payableCharge{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-user{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-corporateUser{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-distributionList{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-credential{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.text-color-person{color:#696d79}:host .novo-field-input::ng-deep .novo-input-element.margin-before{margin-top:.4rem}:host .novo-field-input::ng-deep .novo-input-element.margin-after{margin-bottom:.8rem}:host .novo-field-input::ng-deep .novo-input-element.text-length-small{max-width:40ch}:host .novo-field-input::ng-deep .novo-input-element.text-length-medium{max-width:55ch}:host .novo-field-input::ng-deep .novo-input-element.text-length-large{max-width:70ch}:host .novo-field-input::ng-deep .novo-input-element.text-weight-hairline{font-weight:100}:host .novo-field-input::ng-deep .novo-input-element.text-weight-thin{font-weight:200}:host .novo-field-input::ng-deep .novo-input-element.text-weight-light{font-weight:300}:host .novo-field-input::ng-deep .novo-input-element.text-weight-normal{font-weight:400}:host .novo-field-input::ng-deep .novo-input-element.text-weight-medium{font-weight:500}:host .novo-field-input::ng-deep .novo-input-element.text-weight-semibold{font-weight:600}:host .novo-field-input::ng-deep .novo-input-element.text-weight-bold{font-weight:700}:host .novo-field-input::ng-deep .novo-input-element.text-weight-extrabold{font-weight:800}:host .novo-field-input::ng-deep .novo-input-element.text-weight-heavy{font-weight:900}:host .novo-field-input::ng-deep .novo-input-element.text-weight-lighter{font-weight:lighter}:host .novo-field-input::ng-deep .novo-input-element.text-weight-bolder{font-weight:bolder}:host .novo-field-input::ng-deep .novo-input-element:focus{outline:none}:host .novo-field-input::ng-deep .novo-radio-group{padding:.5rem 0}:host .novo-field-input .novo-field-prefix{display:flex;align-items:center}:host .novo-field-input .novo-field-infix{display:flex;align-items:center;align-self:flex-end}:host .novo-field-input .novo-field-infix select,:host .novo-field-input .novo-field-infix::ng-deep .novo-input-element{width:100%}:host .novo-field-input .novo-field-suffix{display:flex;align-items:center}:host .novo-field-messages{grid-area:messages;display:grid}:host .novo-field-hint-wrapper{display:flex;flex-direction:column}:host::ng-deep .novo-date-range-format{min-width:22rem}\n", ":host.novo-field-appearance-standard.novo-field-appearance-underlined .novo-field-input{border-bottom:1px solid #afb9c0!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{border-bottom:1px solid #3d464d!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined.novo-focused .novo-field-input{border-bottom:1px solid #4a89dc!important}:host.novo-field-appearance-standard.novo-field-appearance-underlined.novo-field-invalid .novo-field-input{border-bottom:1px solid #da4453!important}\n", ":host.novo-field-appearance-fill.novo-field-layout-horizontal .novo-field-input{background:var(--background-main)}:host.novo-field-appearance-fill.novo-field-layout-vertical{background:var(--background-main)}:host.novo-field-appearance-fill.novo-field-layout-vertical .novo-field-label{padding-top:.5em;padding-left:.5em;padding-right:.5em}:host.novo-field-appearance-fill.novo-field-layout-vertical .novo-field-input{padding:0 .5em}:host.novo-field-appearance-fill.novo-field-appearance-underlined .novo-field-input{border-bottom:1px solid #afb9c0!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{border-bottom:1px solid #3d464d!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused .novo-field-label{color:#4a89dc!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-focused .novo-field-input{border-bottom:1px solid #4a89dc!important}:host.novo-field-appearance-fill.novo-field-appearance-underlined.novo-field-invalid .novo-field-input{border-bottom:1px solid #da4453!important}\n", ":host.novo-field-appearance-outline{border:1px solid #afb9c0!important;border-radius:.4rem;padding:.5rem}:host.novo-field-appearance-outline.novo-field-layout-vertical .novo-field-label{background:white;margin-top:-1.5rem;margin-left:.5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content;padding:.5rem}:host.novo-field-appearance-outline:not(.novo-focused):hover{border:1px solid #3d464d!important}:host.novo-field-appearance-outline.novo-focused{border:1px solid #4a89dc!important}:host.novo-field-appearance-outline.novo-field-invalid{border:1px solid #da4453!important}\n", ":host.novo-field-appearance-list.novo-field-layout-horizontal{border-bottom:1px solid #f7f7f7!important;padding:.5rem 1.2rem;min-height:4.2rem}:host.novo-field-appearance-list.novo-field-layout-horizontal .novo-field-label{align-items:start;margin-top:.9rem}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-no-label{grid-template-columns:0px minmax(300px,600px);gap:0}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined:not(.novo-focused):hover .novo-field-input{background:rgba(74,137,220,.15)}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-focused .novo-field-label{color:#4a89dc!important}:host.novo-field-appearance-list.novo-field-layout-horizontal.novo-field-appearance-underlined.novo-field-invalid .novo-field-label{color:#da4453!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _inputContainerRef: [{
                type: ViewChild,
                args: ['inputContainer']
            }], _labelElement: [{
                type: ContentChild,
                args: [NovoLabel]
            }], _hintElements: [{
                type: ContentChildren,
                args: [NovoHintElement]
            }], _errorElements: [{
                type: ContentChildren,
                args: [NovoErrorElement]
            }], _prefixElements: [{
                type: ContentChildren,
                args: [NovoFieldPrefixDirective]
            }], _suffixElements: [{
                type: ContentChildren,
                args: [NovoFieldSuffixDirective]
            }], _control: [{
                type: ContentChild,
                args: [NovoFieldControl]
            }], layout: [{
                type: Input
            }], appearance: [{
                type: Input
            }], width: [{
                type: Input
            }], valueChanges: [{
                type: Output
            }], stateChanges: [{
                type: Output
            }], _handleContainerClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

/** Event object that is emitted when an autocomplete option is selected. */
class NovoOptionSelectedEvent {
    constructor(
    /** Reference to the autocomplete panel that emitted the event. */
    source, 
    /** Option that was selected. */
    option) {
        this.source = source;
        this.option = option;
    }
}
// Boilerplate for applying mixins
class NovoAutocompleteBase {
    constructor() { }
}
const NovoAutocompleteMixins = mixinOverlay(mixinDisabled(NovoAutocompleteBase));
class NovoAutocompleteElement extends NovoAutocompleteMixins {
    constructor(_elementRef, cdr, defaultTabIndex, _formField) {
        super();
        this._elementRef = _elementRef;
        this.cdr = cdr;
        this._formField = _formField;
        this._stateChanges = Subscription.EMPTY;
        this._activeOptionChanges = Subscription.EMPTY;
        this._selectedOptionChanges = Subscription.EMPTY;
        this._keyDownChanges = Subscription.EMPTY;
        /** Event that is emitted whenever an option from the list is selected. */
        this.optionSelected = new EventEmitter();
        /** Emits whenever an option is activated using the keyboard. */
        this.optionActivated = new EventEmitter();
        /** Key to use to trigger autocomplete. used for textarea. */
        this.triggerOn = (control) => control.focused;
        /** Function that maps an option's control value to its display value in the trigger. */
        this.displayWith = null;
        this._multiple = false;
        const parsedTabIndex = Number(defaultTabIndex);
        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    /** Whether the user should be allowed to select multiple options. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        if (this._disabled === undefined && this._formField?._control) {
            return this._formField._control.disabled;
        }
        return !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    ngOnChanges(changes) {
        this._watchStateChanges();
        this._watchSelectionEvents();
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
        this._activeOptionChanges.unsubscribe();
        this._selectedOptionChanges.unsubscribe();
        this._keyDownChanges.unsubscribe();
    }
    ngAfterContentInit() {
        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();
        this._activeOptionChanges = this._keyManager.change.subscribe((index) => {
            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });
        });
        this.element = this._formField.getConnectedOverlayOrigin() || this._elementRef;
        this._keyDownChanges = fromEvent(this.element.nativeElement, 'keydown').subscribe((event) => this._handleKeydown(event));
        this.options.changes.subscribe(() => {
            this._watchStateChanges();
            this._watchSelectionEvents();
            Promise.resolve().then(() => {
                this.checkSelectedOptions();
            });
        });
    }
    ngAfterViewInit() {
        this._watchStateChanges();
        this._watchSelectionEvents();
    }
    checkPanel() {
        const isTriggered = this.triggerOn(this._formField._control);
        if (isTriggered && this.element) {
            this.openPanel();
        }
    }
    _setTriggerValue(option) {
        const toDisplay = this.displayWith ? this.displayWith(option) : option?.viewValue;
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const displayValue = toDisplay != null ? toDisplay : '';
        const optionValue = option.value;
        // If it's used within a `NovoField`, we should set it through the property so it can go
        // through change detection.
        if (this._formField) {
            const { controlType, lastCaretPosition = 0 } = this._formField._control;
            if (controlType === 'textarea') {
                const currentValue = this._formField._control.value.split('');
                currentValue.splice(lastCaretPosition, 0, displayValue);
                this._formField._control.value = currentValue.join('');
            }
            else if (controlType === 'chip-list') {
                const chipList = this._formField._control;
                const currentValue = this._formField._control.value;
                if (currentValue.includes(optionValue)) {
                    chipList.removeValue(optionValue);
                }
                else {
                    chipList.addValue(optionValue);
                }
            }
            else {
                let valueToEmit = optionValue;
                if (this.multiple) {
                    const currentValue = this._formField._control.value;
                    if (Array.isArray(currentValue)) {
                        if (currentValue.includes(optionValue)) {
                            valueToEmit = currentValue.filter((it) => it === optionValue);
                        }
                        else {
                            valueToEmit = [...currentValue, optionValue];
                        }
                    }
                    else if (currentValue === optionValue) {
                        valueToEmit = [];
                    }
                    else {
                        valueToEmit = [currentValue, optionValue];
                    }
                }
                this._formField._control.value = valueToEmit;
            }
        }
        else {
            // this._element.nativeElement.value = inputValue;
            console.warn(`AutoComplete only intended to be used within a NovoField`);
        }
        this._previousValue = optionValue;
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this.options.forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    /** Emits the `select` event. */
    _emitSelectEvent(option) {
        const event = new NovoOptionSelectedEvent(this, option);
        this.optionSelected.emit(event);
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    _setValueAndClose(event) {
        if (event && event.source) {
            if (!this.multiple)
                this._clearPreviousSelectedOption(event.source);
            this._setTriggerValue(event.source);
            // this._onChange(event.source.value);
            // this._element.nativeElement.focus();
            // this._formField._control.focus();
            this._emitSelectEvent(event.source);
            this._watchSelectionEvents();
        }
        if (!this.multiple)
            this.closePanel();
    }
    _watchSelectionEvents() {
        const selectionEvents = this.options ? merge(...this.options.map((option) => option.onSelectionChange)) : of();
        this._selectedOptionChanges.unsubscribe();
        this._selectedOptionChanges = selectionEvents.pipe(take(1)).subscribe((evt) => {
            this._setValueAndClose(evt);
        });
    }
    _watchStateChanges() {
        const inputStateChanged = this._formField.stateChanges;
        this._stateChanges.unsubscribe();
        this._stateChanges = merge(inputStateChanged)
            .pipe(debounce(() => interval(10)))
            .subscribe(() => {
            this.checkSelectedOptions();
            this.checkPanel();
            this.cdr.markForCheck();
        });
    }
    /** The currently active option, coerced to MatOption type. */
    get activeOption() {
        if (this._keyManager) {
            return this._keyManager.activeItem;
        }
        return null;
    }
    _handleKeydown(event) {
        const key = event.key;
        // Prevent the default action on all escape key presses. This is here primarily to bring IE
        // in line with other browsers. By default, pressing escape on IE will cause it to revert
        // the input value to the one that it had on focus, however it won't dispatch any events
        // which means that the model value will be out of sync with the view.
        if (key === "Escape" /* Escape */ && !hasModifierKey(event)) {
            event.preventDefault();
        }
        if (this.activeOption && key === "Enter" /* Enter */ && this.panelOpen) {
            this.activeOption._selectViaInteraction();
            // this._resetActiveItem();
            event.preventDefault();
        }
        else {
            const prevActiveItem = this._keyManager.activeItem;
            const isArrowKey = key === "ArrowUp" /* ArrowUp */ || key === "ArrowDown" /* ArrowDown */;
            if (this.panelOpen || key === "Tab" /* Tab */) {
                this._keyManager.onKeydown(event);
            }
            else if (isArrowKey && !this.overlay.panelOpen) {
                this.openPanel();
            }
            // if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {
            //   this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);
            // }
        }
    }
    checkSelectedOptions() {
        if (this.multiple && Array.isArray(this._formField._control.value)) {
            const value = this._formField._control.value;
            this.options.forEach((option) => option.deselect());
            value.forEach((currentValue) => this._selectValue(currentValue));
        }
    }
    /**
     * Finds and selects and option based on its value.
     * @returns Option that has the corresponding value.
     */
    _selectValue(value) {
        const correspondingOption = this.options.find((option) => {
            return option.value === value;
        });
        correspondingOption?.select();
        return correspondingOption;
    }
}
NovoAutocompleteElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAutocompleteElement, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }, { token: NOVO_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoAutocompleteElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAutocompleteElement, selector: "novo-autocomplete", inputs: { tabIndex: "tabIndex", triggerOn: "triggerOn", displayWith: "displayWith", ariaLabel: ["aria-label", "ariaLabel"], multiple: "multiple", disabled: "disabled" }, outputs: { optionSelected: "optionSelected", optionActivated: "optionActivated" }, host: { properties: { "attr.tabindex": "disabled ? null : -1" }, classAttribute: "novo-autocomplete" }, providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoAutocompleteElement }], queries: [{ propertyName: "optionGroups", predicate: NovoOptgroup, descendants: true }, { propertyName: "options", predicate: NovoOption, descendants: true }], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }], exportAs: ["novoAutocomplete"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<novo-overlay-template [parent]=\"element\" position=\"above-below\">\n  <div class=\"novo-autocomplete-options\" cdk-scrollable>\n    <ng-content></ng-content>\n  </div>\n</novo-overlay-template>", styles: [".novo-autocomplete-options{background-color:var(--background-bright);cursor:default;list-style:none;-webkit-padding-start:0px!important;padding-inline-start:0px!important;box-shadow:0 -1px 3px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}\n"], components: [{ type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }], directives: [{ type: i7.CdkScrollable, selector: "[cdk-scrollable], [cdkScrollable]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], NovoAutocompleteElement.prototype, "disabled", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAutocompleteElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-autocomplete', host: {
                        class: 'novo-autocomplete',
                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                        // consumer may have provided, while still being able to receive focus.
                        '[attr.tabindex]': 'disabled ? null : -1',
                    }, providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoAutocompleteElement }], exportAs: 'novoAutocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<novo-overlay-template [parent]=\"element\" position=\"above-below\">\n  <div class=\"novo-autocomplete-options\" cdk-scrollable>\n    <ng-content></ng-content>\n  </div>\n</novo-overlay-template>", styles: [".novo-autocomplete-options{background-color:var(--background-bright);cursor:default;list-style:none;-webkit-padding-start:0px!important;padding-inline-start:0px!important;box-shadow:0 -1px 3px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }, { type: NovoFieldElement, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_FORM_FIELD]
                }] }]; }, propDecorators: { optionGroups: [{
                type: ContentChildren,
                args: [NovoOptgroup, { descendants: true }]
            }], options: [{
                type: ContentChildren,
                args: [NovoOption, { descendants: true }]
            }], optionSelected: [{
                type: Output
            }], optionActivated: [{
                type: Output
            }], tabIndex: [{
                type: Input
            }], triggerOn: [{
                type: Input
            }], displayWith: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], multiple: [{
                type: Input
            }], disabled: [{
                type: Input
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }] } });

class NovoFieldsElement {
    constructor() {
        this._layout = 'horizontal';
        this._appearance = 'standard';
        this.fullWidth = false;
    }
    get layout() {
        return this._layout;
    }
    set layout(value) {
        if (this._layout !== value) {
            this._layout = value;
            this._updateFieldLayout();
        }
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._updateFieldAppearance();
        }
    }
    ngAfterContentInit() {
        this._updateFieldLayout();
        this._updateFieldAppearance();
    }
    _updateFieldLayout() {
        if (this._fields) {
            this._fields.forEach((field) => {
                field.layout = this.layout;
            });
        }
    }
    _updateFieldAppearance() {
        if (this._fields) {
            this._fields.forEach((field) => {
                field.appearance = this.appearance;
            });
        }
    }
}
NovoFieldsElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldsElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoFieldsElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldsElement, selector: "novo-fields", inputs: { layout: "layout", appearance: "appearance", fullWidth: "fullWidth" }, host: { properties: { "class.novo-fieldset-appearance-standard": "appearance == \"standard\"", "class.novo-fieldset-appearance-fill": "appearance == \"fill\"", "class.novo-fieldset-appearance-outline": "appearance == \"outline\"", "class.novo-fieldset-appearance-list": "appearance == \"list\"", "class.full-width": "this.fullWidth" }, classAttribute: "novo-field" }, queries: [{ propertyName: "_fields", predicate: NovoFieldElement }], ngImport: i0, template: "<ng-content></ng-content>", styles: [":host{display:grid;grid-gap:2.8rem 2rem}:host.novo-fieldset-appearance-list{grid-gap:0rem}:host.full-width::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(300px,1fr);width:-webkit-fill-available}:host.full-width::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host.full-width::ng-deep novo-field.novo-field-layout-horizontal{grid-template-columns:150px minmax(150px,1fr)}:host.full-width::ng-deep novo-field.novo-field-layout-horizontal .novo-input-element{width:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoFieldsElement.prototype, "fullWidth", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldsElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-fields', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'novo-field',
                        '[class.novo-fieldset-appearance-standard]': 'appearance == "standard"',
                        '[class.novo-fieldset-appearance-fill]': 'appearance == "fill"',
                        '[class.novo-fieldset-appearance-outline]': 'appearance == "outline"',
                        '[class.novo-fieldset-appearance-list]': 'appearance == "list"',
                        // '[class.novo-field-layout-horizontal]': 'layout=="horizontal"',
                        // '[class.novo-field-layout-vertical]': 'layout=="vertical"',
                    }, template: "<ng-content></ng-content>", styles: [":host{display:grid;grid-gap:2.8rem 2rem}:host.novo-fieldset-appearance-list{grid-gap:0rem}:host.full-width::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(300px,1fr);width:-webkit-fill-available}:host.full-width::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host.full-width::ng-deep novo-field.novo-field-layout-horizontal{grid-template-columns:150px minmax(150px,1fr)}:host.full-width::ng-deep novo-field.novo-field-layout-horizontal .novo-input-element{width:100%}\n"] }]
        }], propDecorators: { _fields: [{
                type: ContentChildren,
                args: [NovoFieldElement]
            }], layout: [{
                type: Input
            }], appearance: [{
                type: Input
            }], fullWidth: [{
                type: HostBinding,
                args: ['class.full-width']
            }, {
                type: Input
            }] } });

const NOVO_INPUT_FORMAT = new InjectionToken('NovoInputFormat');
var DATE_FORMATS;
(function (DATE_FORMATS) {
    DATE_FORMATS["DATE"] = "date";
    DATE_FORMATS["ISO8601"] = "iso8601";
    DATE_FORMATS["STRING"] = "string";
})(DATE_FORMATS || (DATE_FORMATS = {}));

const DATEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateFormatDirective),
    multi: true,
};
class NovoDateFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.valueChange = new EventEmitter();
        this.dateFormat = DATE_FORMATS.DATE;
        const dateFormat = this.labels.dateFormat.toUpperCase();
        this.unmask = 'typed';
        this.imask = {
            mask: Date,
            pattern: 'm{/}`d{/}`Y',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1900, 0, 1),
            max: new Date(2030, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (date) => this.formatValue(date),
            parse: (str) => {
                return parse(str);
            },
            blocks: {
                d: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'D',
                    from: 1,
                    to: 31,
                    maxLength: 2,
                },
                m: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'M',
                    from: 1,
                    to: 12,
                    maxLength: 2,
                },
                Y: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'Y',
                    from: 1900,
                    to: 9999,
                },
            },
        };
    }
    normalize(value) {
        const pattern = this.labels.dateFormat.toUpperCase();
        return format(parse(value), pattern);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return date.toISOString().slice(0, 10);
        }
        return null;
    }
    formatValue(value) {
        if (value == null)
            return '';
        // Use `parse` because it keeps dates in locale
        const date = parse(value);
        if (isValid(date)) {
            const dateFormat = this.labels.dateFormat.toUpperCase();
            return format(date, dateFormat);
        }
        return this.normalize(value);
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.dateFormat) {
                case DATE_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case DATE_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
}
NovoDateFormatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateFormatDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1$7.IMaskFactory }, { token: COMPOSITION_BUFFER_MODE, optional: true }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Directive });
NovoDateFormatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDateFormatDirective, selector: "input[dateFormat]", inputs: { dateFormat: "dateFormat" }, host: { classAttribute: "novo-date-format" }, providers: [DATEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateFormatDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateFormatDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[dateFormat]',
                    host: {
                        class: 'novo-date-format',
                    },
                    providers: [DATEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateFormatDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1$7.IMaskFactory }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPOSITION_BUFFER_MODE]
                }] }, { type: NovoLabelService }]; }, propDecorators: { dateFormat: [{
                type: Input
            }] } });

const DATERANGEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateRangeFormatDirective),
    multi: true,
};
class NovoDateRangeFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.valueChange = new EventEmitter();
        this.dateRangeFormat = DATE_FORMATS.DATE;
        const dateRangeFormat = this.labels.dateFormat.toUpperCase();
        this.unmask = false;
        this.imask = {
            mask: 'm{/}`d{/}`Y - m{/}`d{/}`Y',
            overwrite: true,
            autofix: true,
            lazy: false,
            blocks: {
                d: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'D',
                    from: 1,
                    to: 31,
                    maxLength: 2,
                },
                m: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'M',
                    from: 1,
                    to: 12,
                    maxLength: 2,
                },
                Y: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'Y',
                    from: 1900,
                    to: 9999,
                },
            },
        };
    }
    normalize(value) {
        const pattern = this.labels.dateFormat.toUpperCase();
        return format(parse(value), pattern);
    }
    formatAsIso(value) {
        if (!value)
            return '';
        const { startDate, endDate } = value;
        if (startDate && isValid(startDate) && endDate && isValid(endDate)) {
            const startIso = startDate.toISOString().slice(0, 10);
            const endIso = endDate.toISOString().slice(0, 10);
            return `${startIso}/${endIso}`;
        }
        return null;
    }
    formatValue(value) {
        if (!value)
            return '';
        const { startDate, endDate } = value;
        return `${this.formatDate(startDate)} - ${this.formatDate(endDate)}`;
    }
    formatDate(source) {
        const date = parse(source);
        if (isValid(date)) {
            const dateRangeFormat = this.labels.dateFormat.toUpperCase();
            return format(date, dateRangeFormat);
        }
        return this.normalize(source);
    }
    writeValue(value) {
        const formattedValue = this.formatValue(value);
        if (formattedValue !== this.maskValue) {
            super.writeValue(this.formatValue(value));
            this.onChange(this.formatValue(value));
        }
    }
    registerOnChange(fn) {
        this.onChange = (input) => {
            if (this.validate(input)) {
                const dates = this.extractDatesFromInput(input);
                let formatted = dates;
                switch (this.dateRangeFormat) {
                    case DATE_FORMATS.ISO8601:
                        formatted = this.formatAsIso(dates);
                        break;
                    case DATE_FORMATS.STRING:
                        formatted = this.formatValue(dates);
                        break;
                    default:
                        formatted = dates;
                        break;
                }
                this.valueChange.emit(dates);
                fn(formatted);
            }
        };
    }
    extractDatesFromInput(value) {
        const [startStr, endStr] = value.split(' - ');
        const startDate = parse(startStr);
        const endDate = parse(endStr);
        return { startDate, endDate };
    }
    validate(dateStr) {
        const { startDate, endDate } = this.extractDatesFromInput(dateStr);
        return isValid(startDate) && isValid(endDate);
    }
}
NovoDateRangeFormatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateRangeFormatDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1$7.IMaskFactory }, { token: COMPOSITION_BUFFER_MODE, optional: true }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Directive });
NovoDateRangeFormatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDateRangeFormatDirective, selector: "input[dateRangeFormat]", inputs: { dateRangeFormat: "dateRangeFormat" }, host: { classAttribute: "novo-date-range-format" }, providers: [DATERANGEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateRangeFormatDirective }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateRangeFormatDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[dateRangeFormat]',
                    host: {
                        class: 'novo-date-range-format',
                    },
                    providers: [DATERANGEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateRangeFormatDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1$7.IMaskFactory }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPOSITION_BUFFER_MODE]
                }] }, { type: NovoLabelService }]; }, propDecorators: { dateRangeFormat: [{
                type: Input
            }] } });

const DATETIMEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateTimeFormatDirective),
    multi: true,
};
class NovoDateTimeFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.valueChange = new EventEmitter();
        this.military = false;
        this.dateTimeFormat = DATE_FORMATS.DATE;
        this.initFormatOptions();
    }
    initFormatOptions() {
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.unmask = 'typed';
        this.imask = {
            mask: Date,
            pattern: this.military ? 'm{/}`d{/}`Y, HH:mm' : 'm{/}`d{/}`Y, HH:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1900, 0, 1),
            max: new Date(2030, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (date) => {
                const test1 = this.formatValue(date);
                return test1;
            },
            parse: (str) => {
                const test = parse(str);
                return test;
            },
            blocks: {
                d: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'D',
                    from: 1,
                    to: 31,
                    maxLength: 2,
                },
                m: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'M',
                    from: 1,
                    to: 12,
                    maxLength: 2,
                },
                Y: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'Y',
                    from: 1900,
                    to: 9999,
                },
                HH: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                ss: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: IMask.MaskedEnum,
                    placeholderChar: '-',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    ngOnChanges(changes) {
        if (Object.keys(changes).some((key) => ['military', 'dateFormat'].includes(key))) {
            this.initFormatOptions();
        }
    }
    _checkInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            const dateTime = text.split(', ');
            const hour = dateTime[1].slice(0, 2);
            if ((this.military && Number(dateTime[1][0]) > 2) || (!this.military && Number(dateTime[1][0]) > 1)) {
                event.preventDefault();
                const value = `0${dateTime[1]}`;
                event.target.value = value;
                // this.onChange(value);
            }
            if (!this.military) {
                const input = dateTime[1].substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
                if (timePeriod) {
                    event.target.value = `${dateTime[0]}, ${dateTime[1].slice(0, 5)} ${timePeriod}`;
                }
                if (event.target.selectionStart >= 3 && this.hourOneFormatRequired(hour)) {
                    event.target.value = `${dateTime[0]}, 01:${event.target.value.slice(3, event.target.value.length)}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        const dateTime = text.split(', ');
        const hour = dateTime[1].slice(0, 2);
        if (!this.military) {
            const input = dateTime[1].substr(17, 4).replace(/\-/g, '').trim().slice(0, 2);
            const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
            if (this.hourOneFormatRequired(hour)) {
                event.target.value = `${dateTime[0]}, 01:${dateTime[1].slice(3, dateTime[1].length)}`;
            }
            if (!timePeriod) {
                event.target.value = `${dateTime[0]}, ${dateTime[1].slice(0, 5)} --`;
            }
        }
    }
    _handleKeydown(event) {
        const input = event.target;
        const dateTime = input.value.split(', ');
        const hour = dateTime[1].slice(0, 2);
        if (event.key === "Backspace" /* Backspace */ && input.selectionStart === dateTime[1].length) {
            event.target.value = `${dateTime[1].slice(0, 5)} --`;
        }
        else if (event.key === "Tab" /* Tab */ && input.selectionStart <= 2 && this.hourOneFormatRequired(hour)) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            input.value = `${dateTime[0]}, 01:${dateTime[1].slice(3, dateTime[1].length)}`;
            input.setSelectionRange(15, 15);
        }
        else if (event.key === "ArrowRight" /* ArrowRight */ && input.selectionStart >= 2 && this.hourOneFormatRequired(hour)) {
            input.value = `${dateTime[0]}, 01:${dateTime[1].slice(3, dateTime[1].length)}`;
            input.setSelectionRange(14, 14);
        }
    }
    normalize(value) {
        const pattern = this.labels.dateFormat.toUpperCase();
        return format(parse(value), pattern);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return date.toISOString();
        }
        return null;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, meridian] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(meridian)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
    convertTime24to12(time24h) {
        if (time24h.length === 5) {
            const date = parse(`2020-01-01T${time24h}`);
            return format(date, 'hh:mm A');
        }
        return time24h;
    }
    formatValue(value) {
        if (value == null)
            return '';
        // Use `parse` because it keeps dates in locale
        const date = parse(value);
        if (isValid(date)) {
            const dateFormat = `${this.labels.dateFormat.toUpperCase()}, ${this.military ? 'HH:mm' : 'hh:mm A'}`;
            return format(date, dateFormat);
        }
        return this.normalize(value);
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.dateTimeFormat) {
                case DATE_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case DATE_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
    hourOneFormatRequired(hourInput) {
        return hourInput === '-1' || hourInput === '1-';
    }
}
NovoDateTimeFormatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimeFormatDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1$7.IMaskFactory }, { token: COMPOSITION_BUFFER_MODE, optional: true }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Directive });
NovoDateTimeFormatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDateTimeFormatDirective, selector: "input[dateTimeFormat]", inputs: { military: "military", dateTimeFormat: "dateTimeFormat" }, host: { listeners: { "input": "_checkInput($event)", "blur": "_handleBlur($event)", "keydown": "_handleKeydown($event)" }, classAttribute: "novo-date-time-format" }, providers: [DATETIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateTimeFormatDirective }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimeFormatDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[dateTimeFormat]',
                    host: {
                        class: 'novo-date-time-format',
                        '(input)': '_checkInput($event)',
                        '(blur)': '_handleBlur($event)',
                        '(keydown)': '_handleKeydown($event)',
                    },
                    providers: [DATETIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateTimeFormatDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1$7.IMaskFactory }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPOSITION_BUFFER_MODE]
                }] }, { type: NovoLabelService }]; }, propDecorators: { military: [{
                type: Input
            }], dateTimeFormat: [{
                type: Input
            }] } });

const TIMEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimeFormatDirective),
    multi: true,
};
var TIME_FORMATS;
(function (TIME_FORMATS) {
    TIME_FORMATS["DATE"] = "date";
    TIME_FORMATS["ISO8601"] = "iso8601";
    TIME_FORMATS["STRING"] = "string";
})(TIME_FORMATS || (TIME_FORMATS = {}));
class NovoTimeFormatDirective extends IMaskDirective {
    constructor(_element, _renderer, _factory, _compositionMode, labels, cdr) {
        super(_element, _renderer, _factory, _compositionMode);
        this._element = _element;
        this.labels = labels;
        this.cdr = cdr;
        this.valueChange = new EventEmitter();
        this.military = false;
        this.timeFormat = TIME_FORMATS.DATE;
        this.initFormatOptions();
    }
    ngOnChanges(changes) {
        if (Object.keys(changes).some((key) => ['military', 'timeFormat'].includes(key))) {
            this.initFormatOptions();
        }
    }
    initFormatOptions() {
        // const pattern = this.military ? 'HH:mm' : 'hh:mm A';
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.unmask = 'typed';
        this.imask = {
            mask: Date,
            pattern: this.military ? 'HH:mm' : 'hh:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1970, 0, 1),
            max: new Date(2030, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (value) => this.formatValue(value),
            parse: (str) => {
                const time = this.convertTime12to24(str);
                return parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            },
            blocks: {
                HH: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: IMask.MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: IMask.MaskedEnum,
                    placeholderChar: '-',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    _checkInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            const hour = text.slice(0, 2);
            if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                event.preventDefault();
                const value = `0${text}`;
                event.target.value = value;
                // this.onChange(value);
            }
            if (!this.military) {
                const input = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
                if (timePeriod) {
                    event.target.value = `${text.slice(0, 5)} ${timePeriod}`;
                }
                if (event.target.selectionStart >= 3 && this.hourOneFormatRequired(hour)) {
                    event.target.value = `01:${event.target.value.slice(3, event.target.value.length)}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        const hour = text.slice(0, 2);
        if (!this.military) {
            const input = text.substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
            const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
            if (this.hourOneFormatRequired(hour)) {
                event.target.value = `01:${text.slice(3, text.length)}`;
            }
            if (!timePeriod) {
                event.target.value = `${text.slice(0, 5)} --`;
            }
        }
    }
    _handleKeydown(event) {
        const input = event.target;
        const hour = input.value.slice(0, 2);
        if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
            event.target.value = `${input.value.slice(0, 5)} --`;
        }
        else if (event.key === "Tab" /* Tab */ && input.selectionStart <= 2 && this.hourOneFormatRequired(hour)) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            input.value = `01:${input.value.slice(3, input.value.length)}`;
            input.setSelectionRange(3, 3);
        }
        else if (event.key === "ArrowRight" /* ArrowRight */ && input.selectionStart >= 2 && this.hourOneFormatRequired(hour)) {
            input.value = `01:${input.value.slice(3, input.value.length)}`;
            input.setSelectionRange(2, 2);
        }
    }
    normalize(value) {
        if (this.military) {
            return this.convertTime12to24(value);
        }
        return this.convertTime24to12(value);
    }
    formatValue(value) {
        const date = parse(value);
        if (isValid(date)) {
            const pattern = this.military ? 'HH:mm' : 'hh:mm A';
            return format(date, pattern);
        }
        return this.normalize(value);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return format(date, 'HH:mm');
        }
        return null;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, meridian] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(meridian)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
    convertTime24to12(time24h) {
        if (time24h.length === 5) {
            const date = parse(`2020-01-01T${time24h}`);
            return format(date, 'hh:mm A');
        }
        return time24h;
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.timeFormat) {
                case TIME_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case TIME_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
    hourOneFormatRequired(hourInput) {
        return hourInput === '-1' || hourInput === '1-';
    }
}
NovoTimeFormatDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimeFormatDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i1$7.IMaskFactory }, { token: COMPOSITION_BUFFER_MODE, optional: true }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoTimeFormatDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoTimeFormatDirective, selector: "input[timeFormat]", inputs: { military: "military", timeFormat: "timeFormat" }, host: { listeners: { "input": "_checkInput($event)", "blur": "_handleBlur($event)", "keydown": "_handleKeydown($event)" }, classAttribute: "novo-time-format" }, providers: [TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimeFormatDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[timeFormat]',
                    host: {
                        class: 'novo-time-format',
                        '(input)': '_checkInput($event)',
                        '(blur)': '_handleBlur($event)',
                        '(keydown)': '_handleKeydown($event)',
                    },
                    providers: [TIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoTimeFormatDirective }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1$7.IMaskFactory }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPOSITION_BUFFER_MODE]
                }] }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { military: [{
                type: Input
            }], timeFormat: [{
                type: Input
            }] } });

/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This token is used to inject the object whose value should be set into `NovoInput`. If none is
 * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide
 * themselves for this token, in order to make `NovoInput` delegate the getting and setting of the
 * value to them.
 */
const NOVO_INPUT_VALUE_ACCESSOR = new InjectionToken('NOVO_INPUT_VALUE_ACCESSOR');
// Invalid input type. Using one of these will throw an NovoInputUnsupportedTypeError.
const NOVO_INPUT_INVALID_TYPES = ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit'];
let nextUniqueId$2 = 0;
// Boilerplate for applying mixins to NovoInput.
class NovoInputBase {
    constructor(_parentForm, _parentFormGroup, 
    /** @docs-private */
    ngControl) {
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
/** Directive that allows a native input to work inside a `NovoField`. */
// tslint:disable: no-conflicting-lifecycle member-ordering
class NovoInput extends NovoInputBase {
    constructor(_elementRef, _platform, 
    /** @docs-private */
    ngControl, _parentForm, _parentFormGroup, inputValueAccessor, _autofillMonitor, ngZone) {
        super(_parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._platform = _platform;
        this.ngControl = ngControl;
        this._autofillMonitor = _autofillMonitor;
        this._uid = `novo-input-${nextUniqueId$2++}`;
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.focused = false;
        this.errorState = false;
        /** @docs-private Implemented as part of NovoFieldControl. */
        this.lastKeyValue = null;
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.stateChanges = new Subject();
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.controlType = 'novo-input';
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.autofilled = false;
        this._disabled = false;
        this._required = false;
        this._type = 'text';
        this._readonly = false;
        this._neverEmptyInputTypes = ['date', 'datetime', 'datetime-local', 'month', 'time', 'week'].filter((t) => getSupportedInputTypes().has(t));
        const element = this._elementRef.nativeElement;
        const nodeName = element.nodeName.toLowerCase();
        // If no input value accessor was explicitly specified, use the element as the input value
        // accessor.
        this._inputValueAccessor = inputValueAccessor || element;
        this._previousNativeValue = this.value;
        // Force setter to be called in case id was not specified.
        this.id = this.id;
        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete
        // key. In order to get around this we need to "jiggle" the caret loose. Since this bug only
        // exists on iOS, we only bother to install the listener on iOS.
        if (_platform.IOS) {
            ngZone.runOutsideAngular(() => {
                _elementRef.nativeElement.addEventListener('keyup', (event) => {
                    const el = event.target;
                    if (!el.value && !el.selectionStart && !el.selectionEnd) {
                        // Note: Just setting `0, 0` doesn't fix the issue. Setting
                        // `1, 1` fixes it for the first time that you type text and
                        // then hold delete. Toggling to `1, 1` and then back to
                        // `0, 0` seems to completely fix it.
                        el.setSelectionRange(1, 1);
                        el.setSelectionRange(0, 0);
                    }
                });
            });
        }
        this._isServer = !this._platform.isBrowser;
        this._isNativeSelect = nodeName === 'select';
        this._isTextarea = nodeName === 'textarea';
        this.controlType = this._elementRef.nativeElement.type;
        if (this._isNativeSelect) {
            this.controlType = element.multiple ? 'select-multiple' : 'select';
        }
        else if (this._isTextarea) {
            this.controlType = 'textarea';
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        // Browsers may not fire the blur event if the input is disabled too quickly.
        // Reset from here to ensure that the element doesn't become stuck.
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value || this._uid;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
    }
    /** Input type of the element. */
    get type() {
        return this._type;
    }
    set type(value) {
        this._type = value || 'text';
        this._validateType();
        // When using Angular inputs, developers are no longer able to set the properties on the native
        // input element. To ensure that bindings for `type` work, we need to sync the setter
        // with the native property. Textarea elements don't support the type property or attribute.
        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {
            this._elementRef.nativeElement.type = this._type;
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get value() {
        return this._inputValueAccessor.value;
    }
    set value(value) {
        if (value !== this.value) {
            this._inputValueAccessor.value = value;
            this.stateChanges.next();
        }
    }
    /** Whether the element is readonly. */
    get readonly() {
        return this._readonly;
    }
    set readonly(value) {
        this._readonly = coerceBooleanProperty(value);
    }
    ngAfterViewInit() {
        if (this._platform.isBrowser) {
            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe((event) => {
                this.autofilled = event.isAutofilled;
                this.stateChanges.next();
            });
        }
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
        if (this._platform.isBrowser) {
            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);
        }
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            // this.updateErrorState();
        }
        // We need to dirty-check the native element's value, because there are some cases where
        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're
        // updating the value using `emitEvent: false`).
        this._dirtyCheckNativeValue();
    }
    /** Focuses the input. */
    focus(options) {
        this._elementRef.nativeElement.focus(options);
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    _focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    _onInput(event) {
        // Listening to the input event wouldn't be necessary when the input is using the
        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.
        this.lastKeyValue = event.data;
        if (this._isTextarea) {
            this.lastCaretPosition = this._elementRef.nativeElement.selectionStart;
        }
    }
    /** Does some manual dirty checking on the native input `value` property. */
    _dirtyCheckNativeValue() {
        const newValue = this._elementRef.nativeElement.value;
        if (this._previousNativeValue !== newValue) {
            this._previousNativeValue = newValue;
            this.stateChanges.next();
        }
    }
    /** Make sure the input is a supported type. */
    _validateType() {
        if (NOVO_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {
            throw new Error(`Invalid Input Type: ${this._type}`);
        }
    }
    /** Checks whether the input type is one of the types that are never empty. */
    _isNeverEmpty() {
        return this._neverEmptyInputTypes.indexOf(this._type) > -1;
    }
    /** Checks whether the input is invalid based on the native validation. */
    _isBadInput() {
        // The `validity` property won't be present on platform-server.
        const validity = this._elementRef.nativeElement.validity;
        return validity && validity.badInput;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get empty() {
        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() && !this.autofilled;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get shouldLabelFloat() {
        if (this._isNativeSelect) {
            // For a single-selection `<select>`, the label should float when the selected option has
            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid
            // overlapping the label with the options.
            const selectElement = this._elementRef.nativeElement;
            const firstOption = selectElement.options[0];
            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be
            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.
            return (this.focused || selectElement.multiple || !this.empty || !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));
        }
        else {
            return this.focused || !this.empty;
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    onContainerClick() {
        // Do not re-focus the input element if the element is already focused. Otherwise it can happen
        // that someone clicks on a time input and the cursor resets to the "hours" field while the
        // "minutes" field was actually clicked. See: https://github.com/angular/components/issues/12849
        if (!this.focused) {
            this.focus();
        }
    }
}
NovoInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoInput, deps: [{ token: i0.ElementRef }, { token: i1$6.Platform }, { token: i4.NgControl, optional: true, self: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: NOVO_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i3.AutofillMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
NovoInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: { disabled: "disabled", id: "id", placeholder: "placeholder", required: "required", type: "type", value: "value", readonly: "readonly" }, host: { listeners: { "focus": "_focusChanged(true)", "blur": "_focusChanged(false)", "input": "_onInput($event)" }, properties: { "attr.id": "id", "attr.placeholder": "placeholder", "disabled": "disabled", "required": "required", "attr.readonly": "readonly && !_isNativeSelect || null", "attr.aria-invalid": "errorState", "attr.aria-required": "required.toString()", "attr.autocomplete": "'off'", "attr.aria-describedby": "this._ariaDescribedby" }, classAttribute: "novo-input-element" }, providers: [{ provide: NovoFieldControl, useExisting: NovoInput }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoInput, decorators: [{
            type: Directive,
            args: [{
                    selector: `input[novoInput], textarea[novoInput], select[novoInput]`,
                    host: {
                        class: 'novo-input-element',
                        '[attr.id]': 'id',
                        '[attr.placeholder]': 'placeholder',
                        '[disabled]': 'disabled',
                        '[required]': 'required',
                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.aria-required]': 'required.toString()',
                        '[attr.autocomplete]': "'off'",
                    },
                    providers: [{ provide: NovoFieldControl, useExisting: NovoInput }],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$6.Platform }, { type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i4.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i4.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NOVO_INPUT_VALUE_ACCESSOR]
                }] }, { type: i3.AutofillMonitor }, { type: i0.NgZone }]; }, propDecorators: { _ariaDescribedby: [{
                type: HostBinding,
                args: ['attr.aria-describedby']
            }], disabled: [{
                type: Input
            }], id: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], required: [{
                type: Input
            }], type: [{
                type: Input
            }], value: [{
                type: Input
            }], readonly: [{
                type: Input
            }], _focusChanged: [{
                type: HostListener,
                args: ['focus', ['true']]
            }, {
                type: HostListener,
                args: ['blur', ['false']]
            }], _onInput: [{
                type: HostListener,
                args: ['input', ['$event']]
            }] } });

/** Directive used to connect an input to a MatDatepicker. */
class NovoPickerDirective {
    constructor(_elementRef, formatter) {
        this._elementRef = _elementRef;
        this.formatter = formatter;
        /**
         * `autocomplete` attribute to be set on the input element.
         * @docs-private
         */
        this.autocompleteAttribute = 'off';
        if (!this.formatter) {
            console.warn('Picker directive is missing required formatter');
        }
        this.formatter?.valueChange.subscribe((value) => {
            this.updatePicker(value);
        });
    }
    /** The datepicker that this input is associated with. */
    set picker(picker) {
        if (picker) {
            this._picker = picker;
            picker.registerOnChange((value) => this.updateValue(value));
        }
    }
    updateValue(value) {
        this.formatter.writeValue(value);
    }
    updatePicker(value) {
        if (this._picker) {
            this._picker.writeValue(value);
        }
    }
}
NovoPickerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerDirective, deps: [{ token: i0.ElementRef }, { token: NOVO_INPUT_FORMAT, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Directive });
NovoPickerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoPickerDirective, selector: "input[picker]", inputs: { picker: "picker", autocompleteAttribute: ["autocomplete", "autocompleteAttribute"] }, host: { properties: { "attr.autocomplete": "autocompleteAttribute" }, classAttribute: "novo-has-picker" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[picker]',
                    host: {
                        class: 'novo-has-picker',
                        '[attr.autocomplete]': 'autocompleteAttribute',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NOVO_INPUT_FORMAT]
                }] }]; }, propDecorators: { picker: [{
                type: Input
            }], autocompleteAttribute: [{
                type: Input,
                args: ['autocomplete']
            }] } });

class NovoPickerToggleElement {
    constructor(_elementRef, cdr, defaultTabIndex, _formField) {
        this._elementRef = _elementRef;
        this.cdr = cdr;
        this._formField = _formField;
        this._stateChanges = Subscription.EMPTY;
        this._onDestroy = new Subject();
        /** Determines whether the overlay is triggered on input focus or solely button click. */
        this.triggerOnFocus = false;
        const parsedTabIndex = Number(defaultTabIndex);
        this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;
    }
    /** Whether the toggle button is disabled. */
    get disabled() {
        if (this._disabled === undefined && this.picker) {
            return this.picker.disabled;
        }
        return !!this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    ngOnChanges(changes) {
        if (changes.picker) {
            this._watchStateChanges();
        }
    }
    ngOnDestroy() {
        this._stateChanges.unsubscribe();
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    ngAfterContentInit() {
        this._watchStateChanges();
    }
    ngAfterViewInit() {
        this.element = this._formField.getConnectedOverlayOrigin() || this._elementRef;
    }
    checkPanel() {
        if (this.triggerOnFocus && this._formField._control.focused) {
            this.openPanel();
        }
    }
    togglePanel(event) {
        this.cdr.detectChanges();
        this.overlay.parent = this.element;
        if (!this.overlay.panelOpen) {
            this.openPanel(event);
        }
        else {
            this.closePanel(event);
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel(event) {
        if (!this.overlay.panelOpen) {
            this.overlay.parent = this.element;
            this.overlay.openPanel();
        }
    }
    closePanel(event) {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    _watchStateChanges() {
        this._formField._control?.stateChanges.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            this.checkPanel();
        });
    }
}
NovoPickerToggleElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerToggleElement, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: 'tabindex', attribute: true }, { token: NOVO_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoPickerToggleElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoPickerToggleElement, selector: "novo-picker-toggle", inputs: { picker: ["for", "picker"], icon: "icon", tabIndex: "tabIndex", ariaLabel: ["aria-label", "ariaLabel"], triggerOnFocus: "triggerOnFocus", overlayId: "overlayId", disabled: "disabled" }, host: { listeners: { "focus": "_button.focus()" }, properties: { "attr.tabindex": "disabled ? null : -1", "class.novo-toggle-active": "picker && picker.opened", "class.novo-accent": "picker && picker.color === \"accent\"", "class.novo-warn": "picker && picker.color === \"warn\"" }, classAttribute: "novo-picker-toggle" }, viewQueries: [{ propertyName: "_button", first: true, predicate: ["button"], descendants: true }, { propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }], exportAs: ["novoPickerToggle"], usesOnChanges: true, ngImport: i0, template: "<novo-button\n  #button\n  theme=\"icon\"\n  [icon]=\"icon\"\n  [attr.aria-haspopup]=\"'dialog'\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n  (click)=\"togglePanel($event)\"></novo-button>\n\n<novo-overlay-template [parent]=\"element\" position=\"above-below\">\n  <ng-content></ng-content>\n</novo-overlay-template>", styles: [""], components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }], directives: [{ type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoPickerToggleElement.prototype, "triggerOnFocus", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPickerToggleElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-picker-toggle', host: {
                        class: 'novo-picker-toggle',
                        // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the
                        // consumer may have provided, while still being able to receive focus.
                        '[attr.tabindex]': 'disabled ? null : -1',
                        '[class.novo-toggle-active]': 'picker && picker.opened',
                        '[class.novo-accent]': 'picker && picker.color === "accent"',
                        '[class.novo-warn]': 'picker && picker.color === "warn"',
                        '(focus)': '_button.focus()',
                    }, exportAs: 'novoPickerToggle', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: "<novo-button\n  #button\n  theme=\"icon\"\n  [icon]=\"icon\"\n  [attr.aria-haspopup]=\"'dialog'\"\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\n  [disabled]=\"disabled\"\n  (click)=\"togglePanel($event)\"></novo-button>\n\n<novo-overlay-template [parent]=\"element\" position=\"above-below\">\n  <ng-content></ng-content>\n</novo-overlay-template>", styles: [""] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['tabindex']
                }] }, { type: NovoFieldElement, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_FORM_FIELD]
                }] }]; }, propDecorators: { picker: [{
                type: Input,
                args: ['for']
            }], icon: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], triggerOnFocus: [{
                type: Input
            }], overlayId: [{
                type: Input
            }], disabled: [{
                type: Input
            }], _button: [{
                type: ViewChild,
                args: ['button']
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }] } });

// NG2
class NovoFieldModule {
}
NovoFieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoFieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldModule, declarations: [NovoFieldElement,
        // NovoLabelElement,
        NovoHintElement,
        NovoErrorElement,
        NovoInput,
        NovoFieldPrefixDirective,
        NovoFieldSuffixDirective,
        NovoFieldsElement,
        NovoTimeFormatDirective,
        NovoDateFormatDirective,
        NovoDateTimeFormatDirective,
        NovoDateRangeFormatDirective,
        NovoPickerToggleElement,
        NovoPickerDirective,
        NovoAutocompleteElement], imports: [CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule, NovoCommonModule], exports: [NovoFieldElement,
        // NovoLabelElement,
        NovoHintElement,
        NovoErrorElement,
        NovoInput,
        NovoFieldPrefixDirective,
        NovoFieldSuffixDirective,
        NovoFieldsElement,
        NovoTimeFormatDirective,
        NovoDateFormatDirective,
        NovoDateRangeFormatDirective,
        NovoDateTimeFormatDirective,
        NovoPickerToggleElement,
        NovoPickerDirective,
        NovoAutocompleteElement] });
NovoFieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldModule, imports: [[CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule, NovoCommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoButtonModule, NovoOverlayModule, NovoOptionModule, NovoCommonModule],
                    declarations: [
                        NovoFieldElement,
                        // NovoLabelElement,
                        NovoHintElement,
                        NovoErrorElement,
                        NovoInput,
                        NovoFieldPrefixDirective,
                        NovoFieldSuffixDirective,
                        NovoFieldsElement,
                        NovoTimeFormatDirective,
                        NovoDateFormatDirective,
                        NovoDateTimeFormatDirective,
                        NovoDateRangeFormatDirective,
                        NovoPickerToggleElement,
                        NovoPickerDirective,
                        NovoAutocompleteElement,
                    ],
                    exports: [
                        NovoFieldElement,
                        // NovoLabelElement,
                        NovoHintElement,
                        NovoErrorElement,
                        NovoInput,
                        NovoFieldPrefixDirective,
                        NovoFieldSuffixDirective,
                        NovoFieldsElement,
                        NovoTimeFormatDirective,
                        NovoDateFormatDirective,
                        NovoDateRangeFormatDirective,
                        NovoDateTimeFormatDirective,
                        NovoPickerToggleElement,
                        NovoPickerDirective,
                        NovoAutocompleteElement,
                    ],
                }]
        }] });

// Boilerplate for applying mixins to NovoChipList.
/** @docs-private */
class NovoChipListBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, 
    /** @docs-private */
    ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const _NovoChipListMixinBase = mixinErrorState(NovoChipListBase);
// Increasing integer for generating unique ids for chip-list components.
let nextUniqueId$1 = 0;
/** Change event object that is emitted when the chip list value has changed. */
class NovoChipListChange {
    constructor(
    /** Chip list that emitted the event. */
    source, 
    /** Value of the chip list when the event was emitted. */
    value) {
        this.source = source;
        this.value = value;
    }
}
/**
 * A chip list component (named ChipList for its similarity to the List component).
 */
class NovoChipList extends _NovoChipListMixinBase {
    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, 
    /** @docs-private */
    ngControl) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._changeDetectorRef = _changeDetectorRef;
        this._dir = _dir;
        this.ngControl = ngControl;
        /**
         * Implemented as part of NovoFieldControl.
         * @docs-private
         */
        this.controlType = 'chip-list';
        /**
         * When a chip is destroyed, we store the index of the destroyed chip until the chips
         * query list notifies about the update. This is necessary because we cannot determine an
         * appropriate chip that should receive focus until the array of chips updated completely.
         */
        this._lastDestroyedChipIndex = null;
        /** Subject that emits when the component has been destroyed. */
        this._destroyed = new Subject();
        /** Uid of the chip list */
        this._uid = `novo-chip-list-${nextUniqueId$1++}`;
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /**
         * User defined tab index.
         * When it is not null, use user defined tab index. Otherwise use _tabIndex
         */
        this._userTabIndex = null;
        /** Function when touched */
        this._onTouched = () => { };
        /** Function when changed */
        this._onChange = () => { };
        this._multiple = false;
        this._stacked = false;
        this._compareWith = (o1, o2) => o1 === o2;
        this._required = false;
        this._disabled = false;
        /** Orientation of the chip list. */
        this.ariaOrientation = 'horizontal';
        this._selectable = true;
        /** Event emitted when the selected chip list value has been changed by the user. */
        this.change = new EventEmitter();
        /**
         * Event that emits whenever the raw value of the chip-list changes. This is here primarily
         * to facilitate the two-way binding for the `value` input.
         * @docs-private
         */
        this.valueChange = new EventEmitter();
        /** @docs-private Implemented as part of NovoFieldControl. */
        this.lastKeyValue = null;
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    /** The array of selected chips inside chip list. */
    get selected() {
        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
    }
    /** The ARIA role applied to the chip list. */
    get role() {
        return this.empty ? null : 'listbox';
    }
    /** Whether the user should be allowed to select multiple chips. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
        this._syncChipsState();
    }
    /** Whether the chips should appear stacked instead of a row. */
    get stacked() {
        return this._stacked;
    }
    set stacked(value) {
        this._stacked = coerceBooleanProperty(value);
    }
    /**
     * A function to compare the option values with the selected values. The first argument
     * is a value from an option. The second is a value from the selection. A boolean
     * should be returned.
     */
    get compareWith() {
        return this._compareWith;
    }
    set compareWith(fn) {
        this._compareWith = fn;
        if (this._selectionModel) {
            // A different comparator means the selection could change.
            this._initializeSelection();
        }
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.writeValue(value);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get id() {
        return this._chipInput ? this._chipInput.id : this._uid;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get placeholder() {
        return this._chipInput ? this._chipInput.placeholder : this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
        this.stateChanges.next();
    }
    /** Whether any chips or the novoChipInput inside of this chip-list has focus. */
    get focused() {
        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get empty() {
        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._syncChipsState();
    }
    /**
     * Whether or not this chip list is selectable. When a chip list is not selectable,
     * the selected states for all the chips inside the chip list are always ignored.
     */
    get selectable() {
        return this._selectable;
    }
    set selectable(value) {
        this._selectable = coerceBooleanProperty(value);
        if (this.chips) {
            this.chips.forEach((chip) => (chip._chipListSelectable = this._selectable));
        }
    }
    set tabIndex(value) {
        this._userTabIndex = value;
        this._tabIndex = value;
    }
    /** Combined stream of all of the child chips' selection change events. */
    get chipSelectionChanges() {
        return merge(...this.chips.map((chip) => chip.selectionChange));
    }
    /** Combined stream of all of the child chips' focus change events. */
    get chipFocusChanges() {
        return merge(...this.chips.map((chip) => chip._onFocus));
    }
    /** Combined stream of all of the child chips' blur change events. */
    get chipBlurChanges() {
        return merge(...this.chips.map((chip) => chip._onBlur));
    }
    /** Combined stream of all of the child chips' remove change events. */
    get chipRemoveChanges() {
        return merge(...this.chips.map((chip) => chip.removed));
    }
    ngAfterContentInit() {
        this._keyManager = new FocusKeyManager(this.chips)
            .withWrap()
            .withVerticalOrientation()
            .withHomeAndEnd()
            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');
        if (this._dir) {
            this._dir.change.pipe(takeUntil(this._destroyed)).subscribe((dir) => this._keyManager.withHorizontalOrientation(dir));
        }
        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {
            this._allowFocusEscape();
        });
        // When the list changes, re-subscribe
        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {
            if (this.disabled) {
                // Since this happens after the content has been
                // checked, we need to defer it to the next tick.
                Promise.resolve().then(() => {
                    this._syncChipsState();
                });
            }
            this._resetChips();
            // Check to see if we need to update our tab index
            this._updateTabIndex();
            // Check to see if we have a destroyed chip and need to refocus
            this._updateFocusForDestroyedChips();
            this.stateChanges.next();
        });
    }
    ngAfterViewInit() {
        // Reset chips selected/deselected status
        this._initializeSelection();
    }
    ngOnInit() {
        this._selectionModel = new SelectionModel(this.multiple, undefined, false);
        this.stateChanges.next();
    }
    ngDoCheck() {
        if (this.ngControl) {
            // We need to re-evaluate this on every change detection cycle, because there are some
            // error triggers that we can't subscribe to (e.g. parent form submissions). This means
            // that whatever logic is in here has to be super lean or we risk destroying the performance.
            this.updateErrorState();
            if (this.ngControl.disabled !== this._disabled) {
                this.disabled = !!this.ngControl.disabled;
            }
        }
    }
    ngOnDestroy() {
        this._destroyed.next();
        this._destroyed.complete();
        this.stateChanges.complete();
        this._dropSubscriptions();
    }
    /** Associates an HTML input element with this chip list. */
    registerInput(inputElement) {
        this._chipInput = inputElement;
        // We use this attribute to match the chip list to its input in test harnesses.
        // Set the attribute directly here to avoid "changed after checked" errors.
        this._elementRef.nativeElement.setAttribute('data-novo-chip-input', inputElement.id);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        if (this.chips) {
            this._setSelectionByValue(value, false);
            this.stateChanges.next();
        }
    }
    addValue(value) {
        this.value = [...this.value, value];
        this._chipInput.clearValue();
    }
    removeValue(value) {
        if (this.value) {
            this.value = this.value.filter((it) => !this.compareWith(it, value));
        }
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    onContainerClick(event) {
        if (!this._originatesFromChip(event)) {
            this.focus();
        }
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (this.disabled) {
            return;
        }
        // TODO: ARIA says this should focus the first `selected` chip if any are selected.
        // Focus on first element if there's no chipInput inside chip-list
        if (this._chipInput && this._chipInput.focused) {
            // do nothing
        }
        else if (this._chipInput) {
            Promise.resolve().then(() => this._focusInput(options));
            this.stateChanges.next();
        }
        else if (this.chips.length > 0) {
            this._keyManager.setFirstItemActive();
            this.stateChanges.next();
        }
    }
    /** Attempt to focus an input if we have one. */
    _focusInput(options) {
        if (this._chipInput) {
            this._chipInput.focus(options);
        }
    }
    /**
     * Pass events to the keyboard manager. Available here for tests.
     */
    _keydown(event) {
        const target = event.target;
        // If they are on an empty input and hit backspace, focus the last chip
        if (event.key === "Backspace" /* Backspace */ && this._isInputEmpty(target)) {
            this._keyManager.setLastItemActive();
            event.preventDefault();
        }
        else if (target && target.classList.contains('novo-chip')) {
            this._keyManager.onKeydown(event);
            this.stateChanges.next();
        }
    }
    /**
     * Check the tab index as you should not be allowed to focus an empty list.
     */
    _updateTabIndex() {
        // If we have 0 chips, we should not allow keyboard focus
        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);
    }
    /**
     * If the amount of chips changed, we need to update the
     * key manager state and focus the next closest chip.
     */
    _updateFocusForDestroyedChips() {
        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.
        if (this._lastDestroyedChipIndex != null) {
            if (this.chips.length) {
                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);
                this._keyManager.setActiveItem(newChipIndex);
            }
            else {
                this.focus();
            }
        }
        this._lastDestroyedChipIndex = null;
    }
    /**
     * Utility to ensure all indexes are valid.
     *
     * @param index The index to be checked.
     * @returns True if the index is valid for our list of chips.
     */
    _isValidIndex(index) {
        return index >= 0 && index < this.chips.length;
    }
    _isInputEmpty(element) {
        if (element && element.nodeName.toLowerCase() === 'input') {
            let input = element;
            return !input.value;
        }
        return false;
    }
    _setSelectionByValue(value, isUserInput = true) {
        this._clearSelection();
        this.chips.forEach((chip) => chip.deselect());
        if (Array.isArray(value)) {
            value.forEach((currentValue) => this._selectValue(currentValue, isUserInput));
            this._sortValues();
        }
        else {
            const correspondingChip = this._selectValue(value, isUserInput);
            // Shift focus to the active item. Note that we shouldn't do this in multiple
            // mode, because we don't know what chip the user interacted with last.
            if (correspondingChip) {
                if (isUserInput) {
                    this._keyManager.setActiveItem(correspondingChip);
                }
            }
        }
    }
    /**
     * Finds and selects the chip based on its value.
     * @returns Chip that has the corresponding value.
     */
    _selectValue(value, isUserInput = true) {
        const correspondingChip = this.chips.find((chip) => {
            return chip.value != null && this._compareWith(chip.value, value);
        });
        if (correspondingChip) {
            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();
            this._selectionModel.select(correspondingChip);
        }
        return correspondingChip;
    }
    _initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            if (this.ngControl) {
                this.value = this.ngControl.value;
            }
        });
    }
    /**
     * Deselects every chip in the list.
     * @param skip Chip that should not be deselected.
     */
    _clearSelection(skip) {
        this._selectionModel.clear();
        this.chips.forEach((chip) => {
            if (chip !== skip) {
                chip.deselect();
            }
        });
        this.stateChanges.next();
    }
    /**
     * Sorts the model values, ensuring that they keep the same
     * order that they have in the panel.
     */
    _sortValues() {
        if (this._multiple) {
            this._selectionModel.clear();
            this.chips.forEach((chip) => {
                if (chip.selected) {
                    this._selectionModel.select(chip);
                }
            });
            this.stateChanges.next();
        }
    }
    /** Emits change event to set the model value. */
    _propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (Array.isArray(this.selected)) {
            valueToEmit = this.selected.map((chip) => chip.value);
        }
        else {
            valueToEmit = this.selected ? this.selected.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.change.emit(new NovoChipListChange(this, valueToEmit));
        this.valueChange.emit(valueToEmit);
        this._onChange(valueToEmit);
        this._changeDetectorRef.markForCheck();
    }
    /** When blurred, mark the field as touched when focus moved outside the chip list. */
    _blur() {
        if (!this._hasFocusedChip()) {
            this._keyManager.setActiveItem(-1);
        }
        if (!this.disabled) {
            if (this._chipInput) {
                // If there's a chip input, we should check whether the focus moved to chip input.
                // If the focus is not moved to chip input, mark the field as touched. If the focus moved
                // to chip input, do nothing.
                // Timeout is needed to wait for the focus() event trigger on chip input.
                setTimeout(() => {
                    if (!this.focused) {
                        this._markAsTouched();
                    }
                });
            }
            else {
                // If there's no chip input, then mark the field as touched.
                this._markAsTouched();
            }
        }
    }
    /** Mark the field as touched */
    _markAsTouched() {
        this._onTouched();
        this._changeDetectorRef.markForCheck();
        this.stateChanges.next();
    }
    /**
     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the
     * user to tab out of it. This prevents the list from capturing focus and redirecting
     * it back to the first chip, creating a focus trap, if it user tries to tab away.
     */
    _allowFocusEscape() {
        if (this._tabIndex !== -1) {
            this._tabIndex = -1;
            setTimeout(() => {
                this._tabIndex = this._userTabIndex || 0;
                this._changeDetectorRef.markForCheck();
            });
        }
    }
    _resetChips() {
        this._dropSubscriptions();
        this._listenToChipsFocus();
        this._listenToChipsSelection();
        this._listenToChipsRemoved();
    }
    _dropSubscriptions() {
        if (this._chipFocusSubscription) {
            this._chipFocusSubscription.unsubscribe();
            this._chipFocusSubscription = null;
        }
        if (this._chipBlurSubscription) {
            this._chipBlurSubscription.unsubscribe();
            this._chipBlurSubscription = null;
        }
        if (this._chipSelectionSubscription) {
            this._chipSelectionSubscription.unsubscribe();
            this._chipSelectionSubscription = null;
        }
        if (this._chipRemoveSubscription) {
            this._chipRemoveSubscription.unsubscribe();
            this._chipRemoveSubscription = null;
        }
    }
    /** Listens to user-generated selection events on each chip. */
    _listenToChipsSelection() {
        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe((event) => {
            event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source);
            // For single selection chip list, make sure the deselected value is unselected.
            if (!this.multiple) {
                this.chips.forEach((chip) => {
                    if (!this._selectionModel.isSelected(chip) && chip.selected) {
                        chip.deselect();
                    }
                });
            }
            if (event.isUserInput) {
                this._propagateChanges();
            }
        });
    }
    /** Listens to user-generated selection events on each chip. */
    _listenToChipsFocus() {
        this._chipFocusSubscription = this.chipFocusChanges.subscribe((event) => {
            let chipIndex = this.chips.toArray().indexOf(event.chip);
            if (this._isValidIndex(chipIndex)) {
                this._keyManager.updateActiveItem(chipIndex);
            }
            this.stateChanges.next();
        });
        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {
            this._blur();
            this.stateChanges.next();
        });
    }
    _listenToChipsRemoved() {
        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe((event) => {
            const chip = event.chip;
            const chipIndex = this.chips.toArray().indexOf(event.chip);
            this.removeValue(chip.value);
            // In case the chip that will be removed is currently focused, we temporarily store
            // the index in order to be able to determine an appropriate sibling chip that will
            // receive focus.
            if (this._isValidIndex(chipIndex) && chip._hasFocus) {
                this._lastDestroyedChipIndex = chipIndex;
            }
            this.stateChanges.next();
        });
    }
    /** Checks whether an event comes from inside a chip element. */
    _originatesFromChip(event) {
        let currentElement = event.target;
        while (currentElement && currentElement !== this._elementRef.nativeElement) {
            if (currentElement.classList.contains('novo-chip')) {
                return true;
            }
            currentElement = currentElement.parentElement;
        }
        return false;
    }
    /** Checks whether any of the chips is focused. */
    _hasFocusedChip() {
        return this.chips && this.chips.some((chip) => chip._hasFocus);
    }
    /** Syncs the list's state with the individual chips. */
    _syncChipsState() {
        if (this.chips) {
            this.chips.forEach((chip) => {
                chip._chipListDisabled = this._disabled;
                chip._chipListMultiple = this.multiple;
                chip._chipListSelectable = this.selectable;
            });
        }
    }
}
NovoChipList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipList, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$8.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: ErrorStateMatcher }, { token: i4.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
NovoChipList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoChipList, selector: "novo-chip-list", inputs: { errorStateMatcher: "errorStateMatcher", multiple: "multiple", stacked: "stacked", compareWith: "compareWith", value: "value", required: "required", placeholder: "placeholder", disabled: "disabled", ariaOrientation: ["aria-orientation", "ariaOrientation"], selectable: "selectable", tabIndex: "tabIndex" }, outputs: { change: "change", valueChange: "valueChange" }, host: { listeners: { "focus": "focus()", "blur": "_blur()", "keydown": "_keydown($event)" }, properties: { "attr.tabindex": "disabled ? null : _tabIndex", "attr.aria-describedby": "_ariaDescribedby || null", "attr.aria-required": "role ? required : null", "attr.aria-disabled": "disabled.toString()", "attr.aria-invalid": "errorState", "attr.aria-multiselectable": "multiple", "attr.role": "role", "class.novo-chip-list-empty": "empty", "class.novo-chip-list-has-value": "!empty", "class.novo-chip-list-stacked": "stacked", "class.novo-chip-list-focused": "focused", "class.novo-chip-list-disabled": "disabled", "class.novo-chip-list-invalid": "errorState", "class.novo-chip-list-required": "required", "attr.aria-orientation": "ariaOrientation", "id": "_uid" }, classAttribute: "novo-chip-list" }, providers: [
        { provide: NovoFieldControl, useExisting: NovoChipList },
        { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoChipList },
    ], queries: [{ propertyName: "chips", predicate: NovoChipElement, descendants: true }], exportAs: ["novoChipList"], usesInheritance: true, ngImport: i0, template: `<div class="novo-chip-list-wrapper"><ng-content></ng-content></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipList, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-chip-list',
                    template: `<div class="novo-chip-list-wrapper"><ng-content></ng-content></div>`,
                    exportAs: 'novoChipList',
                    host: {
                        '[attr.tabindex]': 'disabled ? null : _tabIndex',
                        '[attr.aria-describedby]': '_ariaDescribedby || null',
                        '[attr.aria-required]': 'role ? required : null',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.aria-multiselectable]': 'multiple',
                        '[attr.role]': 'role',
                        '[class.novo-chip-list-empty]': 'empty',
                        '[class.novo-chip-list-has-value]': '!empty',
                        '[class.novo-chip-list-stacked]': 'stacked',
                        '[class.novo-chip-list-focused]': 'focused',
                        '[class.novo-chip-list-disabled]': 'disabled',
                        '[class.novo-chip-list-invalid]': 'errorState',
                        '[class.novo-chip-list-required]': 'required',
                        '[attr.aria-orientation]': 'ariaOrientation',
                        class: 'novo-chip-list',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                        '(keydown)': '_keydown($event)',
                        '[id]': '_uid',
                    },
                    providers: [
                        { provide: NovoFieldControl, useExisting: NovoChipList },
                        { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoChipList },
                    ],
                    // styleUrls: ['./ChipList.scss'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$8.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i4.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i4.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: ErrorStateMatcher }, { type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { errorStateMatcher: [{
                type: Input
            }], multiple: [{
                type: Input
            }], stacked: [{
                type: Input
            }], compareWith: [{
                type: Input
            }], value: [{
                type: Input
            }], required: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], disabled: [{
                type: Input
            }], ariaOrientation: [{
                type: Input,
                args: ['aria-orientation']
            }], selectable: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], change: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], chips: [{
                type: ContentChildren,
                args: [NovoChipElement, {
                        // We need to use `descendants: true`, because Ivy will no longer match
                        // indirect descendants if it's left as false.
                        descendants: true,
                    }]
            }] } });

// Increasing integer for generating unique ids.
let nextUniqueId = 0;
/**
 * Directive that adds chip-specific behaviors to an input element inside `<novo-form-field>`.
 * May be placed inside or outside of an `<novo-chip-list>`.
 */
class NovoChipInput {
    constructor(_elementRef, _defaultOptions, _chipList, ngControl) {
        this._elementRef = _elementRef;
        this._defaultOptions = _defaultOptions;
        this._chipList = _chipList;
        this.ngControl = ngControl;
        /** Whether the control is focused. */
        this.focused = false;
        this._addOnBlur = false;
        /**
         * The list of key codes that will trigger a chipEnd event.
         *
         * Defaults to `[Key.Enter]`.
         */
        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;
        /** Emitted when a chip is to be added. */
        this.chipEnd = new EventEmitter();
        /** The input's placeholder text. */
        this.placeholder = '';
        /** Unique id for the input. */
        this.id = `novo-chip-list-input-${nextUniqueId++}`;
        this._disabled = false;
        this._inputElement = this._elementRef.nativeElement;
        this._chipList.registerInput(this);
    }
    /**
     * Whether or not the chipEnd event will be emitted when the input is blurred.
     */
    get addOnBlur() {
        return this._addOnBlur;
    }
    set addOnBlur(value) {
        this._addOnBlur = coerceBooleanProperty(value);
    }
    /** Whether the input is disabled. */
    get disabled() {
        return this._disabled || (this._chipList && this._chipList.disabled);
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /** Whether the input is empty. */
    get empty() {
        return !this._inputElement.value;
    }
    ngOnChanges() {
        this._chipList.stateChanges.next();
    }
    /** Utility method to make host definition/tests more clear. */
    _keydown(event) {
        // Allow the user's focus to escape when they're tabbing forward. Note that we don't
        // want to do this when going backwards, because focus should go back to the first chip.
        if (event && event.key === "Tab" /* Tab */ && !hasModifierKey(event, 'shiftKey')) {
            this._chipList._allowFocusEscape();
        }
        this._emitChipEnd(event);
    }
    /** Checks to see if the blur should emit the (chipEnd) event. */
    _blur() {
        if (this.addOnBlur) {
            this._emitChipEnd();
        }
        this.focused = false;
        // Blur the chip list if it is not focused
        if (!this._chipList.focused) {
            this._chipList._blur();
        }
        this._chipList.stateChanges.next();
    }
    _focus() {
        this.focused = true;
        this._chipList.stateChanges.next();
    }
    /** Checks to see if the (chipEnd) event needs to be emitted. */
    _emitChipEnd(event) {
        if (!this._inputElement.value && !!event) {
            this._chipList._keydown(event);
        }
        if (!event || this._isSeparatorKey(event)) {
            this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });
            if (event) {
                event.preventDefault();
            }
        }
    }
    _onInput() {
        // Let chip list know whenever the value changes.
        this._chipList.stateChanges.next();
    }
    /** Focuses the input. */
    focus(options) {
        this._inputElement.focus(options);
    }
    /** Clears the input. */
    clearValue() {
        this._inputElement.value = '';
        this.ngControl?.control.setValue('');
    }
    /** Checks whether a keycode is one of the configured separators. */
    _isSeparatorKey(event) {
        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.key);
    }
}
NovoChipInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipInput, deps: [{ token: i0.ElementRef }, { token: NOVO_CHIPS_DEFAULT_OPTIONS }, { token: forwardRef(() => NovoChipList) }, { token: i4.NgControl }], target: i0.ɵɵFactoryTarget.Directive });
NovoChipInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoChipInput, selector: "input[novoChipInput]", inputs: { addOnBlur: ["novoChipInputAddOnBlur", "addOnBlur"], separatorKeyCodes: ["novoChipInputSeparatorKeyCodes", "separatorKeyCodes"], placeholder: "placeholder", id: "id", disabled: "disabled" }, outputs: { chipEnd: "novoChipInputTokenEnd" }, host: { listeners: { "keydown": "_keydown($event)", "blur": "_blur()", "focus": "_focus()", "input": "_onInput()" }, properties: { "id": "id", "attr.disabled": "disabled || null", "attr.placeholder": "placeholder || null", "attr.aria-invalid": "_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null", "attr.aria-required": "_chipList && _chipList.required || null" }, classAttribute: "novo-chip-input novo-input-element" }, exportAs: ["novoChipInput", "novoChipInputFor"], usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipInput, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[novoChipInput]',
                    exportAs: 'novoChipInput, novoChipInputFor',
                    host: {
                        class: 'novo-chip-input novo-input-element',
                        '(keydown)': '_keydown($event)',
                        '(blur)': '_blur()',
                        '(focus)': '_focus()',
                        '(input)': '_onInput()',
                        '[id]': 'id',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.placeholder]': 'placeholder || null',
                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',
                        '[attr.aria-required]': '_chipList && _chipList.required || null',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_CHIPS_DEFAULT_OPTIONS]
                }] }, { type: NovoChipList, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NovoChipList)]
                }] }, { type: i4.NgControl }]; }, propDecorators: { addOnBlur: [{
                type: Input,
                args: ['novoChipInputAddOnBlur']
            }], separatorKeyCodes: [{
                type: Input,
                args: ['novoChipInputSeparatorKeyCodes']
            }], chipEnd: [{
                type: Output,
                args: ['novoChipInputTokenEnd']
            }], placeholder: [{
                type: Input
            }], id: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });

// NG2
// Value accessor for the component (supports ngModel)
const CHIPS_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoChipsElement),
    multi: true,
};
class NovoChipsElement {
    constructor(element, componentUtils, labels) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.labels = labels;
        this.closeOnSelect = false;
        this.placeholder = '';
        this._disablePickerInput = false;
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.items = [];
        this.selected = null;
        this.config = {};
        // private data model
        this._value = '';
        this._items = new ReplaySubject(1);
        // Placeholders for the callbacks
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    set disablePickerInput(v) {
        this._disablePickerInput = coerceBooleanProperty(v);
    }
    get disablePickerInput() {
        return this._disablePickerInput;
    }
    ngOnInit() {
        this.setItems();
    }
    get value() {
        return this._value;
    }
    set value(selected) {
        this.itemToAdd = '';
        this._value = selected;
    }
    clearValue() {
        this.items = [];
        this._items.next(this.items);
        this.value = null;
        this._propagateChanges();
    }
    setItems() {
        this.items = [];
        if (this.model && Array.isArray(this.model)) {
            const noLabels = [];
            for (const value of this.model) {
                let label;
                if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                    label = Helpers.interpolate(this.source.format, value);
                }
                if (this.source && label && label !== this.source.format) {
                    this.items.push({
                        value,
                        label,
                    });
                }
                else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                    noLabels.push(value);
                }
                else if (this.source.options && Array.isArray(this.source.options)) {
                    this.items.push(this.getLabelFromOptions(value));
                }
                else if (this.source.categoryMap && this.source.categoryMap.size) {
                    this.items.push(value);
                }
                else {
                    this.items.push({
                        value,
                        label: value,
                    });
                }
            }
            if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                this.source.getLabels(noLabels).then((result) => {
                    for (const value of result) {
                        if (value.hasOwnProperty('label')) {
                            this.items.push({
                                value,
                                label: value.label,
                            });
                        }
                        else if (this.source.options && Array.isArray(this.source.options)) {
                            this.items.push(this.getLabelFromOptions(value));
                        }
                        else {
                            this.items.push(value);
                        }
                    }
                    this._items.next(this.items);
                });
            }
        }
        this._items.next(this.items);
        const valueToSet = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((i) => i.value);
        if (Helpers.isBlank(this.value) !== Helpers.isBlank(valueToSet) || JSON.stringify(this.value) !== JSON.stringify(valueToSet)) {
            this.value = valueToSet;
            this._propagateChanges();
        }
    }
    getLabelFromOptions(value) {
        let id = value;
        let optLabel = this.source.options.find((val) => val.value === value);
        if (!optLabel && value.hasOwnProperty('id')) {
            optLabel = this.source.options.find((val) => val.value === value.id);
            id = value.id;
        }
        return {
            value: id,
            label: optLabel ? optLabel.label : value,
        };
    }
    getAvatarType(item) {
        return (this.type || item?.value?.searchEntity || '').toLowerCase();
    }
    deselectAll(event) {
        this.selected = null;
        this.hidePreview();
    }
    select(event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
        this.showPreview();
    }
    deselect(event, item) {
        this.blur.emit(event);
        this.deselectAll();
    }
    onTyping(event) {
        this.typing.emit(event);
    }
    onFocus(event) {
        this.deselectAll();
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(event);
    }
    add(event) {
        if (event && !(event instanceof Event)) {
            this.items.push(event);
            this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((i) => i.value);
            // Set focus on the picker
            const input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
        this._items.next(this.items);
        this._propagateChanges();
    }
    remove(event, item) {
        this.items.splice(this.items.indexOf(item), 1);
        this.deselectAll();
        this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map((i) => i.value);
        this._items.next(this.items);
        this._propagateChanges();
    }
    onKeyDown(event) {
        if (event.key === "Backspace" /* Backspace */) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(event, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    }
    // Set touched on blur
    onTouched(e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    }
    writeValue(model) {
        this.model = model;
        this.setItems();
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this._disablePickerInput = disabled;
    }
    /** Emits change event to set the model value. */
    _propagateChanges(fallbackValue) {
        this.changed.emit({ value: this.value?.length ? this.value : '', rawValue: this.items });
        this.onModelChange(this.value);
    }
    /**
     * @name showPreview
     *
     * @description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     */
    showPreview() {
        if (this.source.previewTemplate) {
            if (!this.popup) {
                this.popup = this.componentUtils.append(this.source.previewTemplate, this.preview);
            }
            this.popup.instance.match = { data: this.selected.data ?? this.selected.value };
        }
    }
    /**
     * @name hidePreview
     *
     * @description - This method deletes the preview popup from the DOM.
     */
    hidePreview() {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
    }
}
NovoChipsElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipsElement, deps: [{ token: i0.ElementRef }, { token: ComponentUtils }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoChipsElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoChipsElement, selector: "chips,novo-chips", inputs: { closeOnSelect: "closeOnSelect", placeholder: "placeholder", source: "source", maxlength: "maxlength", type: "type", disablePickerInput: "disablePickerInput", value: "value" }, outputs: { changed: "changed", focus: "focus", blur: "blur", typing: "typing" }, host: { properties: { "class.with-value": "items.length > 0", "class.disabled": "disablePickerInput" } }, providers: [CHIPS_VALUE_ACCESSOR$2], viewQueries: [{ propertyName: "preview", first: true, predicate: ["preview"], descendants: true, read: ViewContainerRef }], ngImport: i0, template: `
    <div class="novo-chip-container">
      <novo-chip
        *ngFor="let item of _items | async"
        [class.selected]="item == selected"
        [selectable]="true"
        [disabled]="disablePickerInput"
        (removed)="remove($event, item)"
        (selectionChange)="select($event, item)"
        (deselect)="deselect($event, item)"
      >
        <novo-icon *ngIf="getAvatarType(item)" class="txc-{{ getAvatarType(item) }}" novoChipAvatar>circle</novo-icon>
        {{ item.label }}
        <novo-icon *ngIf="!disablePickerInput" novoChipRemove>x</novo-icon>
      </novo-chip>
    </div>
    <div class="chip-input-container" *ngIf="!maxlength || (maxlength && items.length < maxlength)">
      <novo-picker
        clearValueOnSelect="true"
        [closeOnSelect]="closeOnSelect"
        [config]="source"
        [disablePickerInput]="disablePickerInput"
        [placeholder]="placeholder"
        [(ngModel)]="itemToAdd"
        (select)="add($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (typing)="onTyping($event)"
        (blur)="onTouched($event)"
        [selected]="items"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <div class="preview-container">
      <span #preview></span>
    </div>
    <i class="bhi-search" [class.has-value]="items.length" *ngIf="!disablePickerInput"></i>
    <label class="clear-all" *ngIf="items.length && !disablePickerInput" (click)="clearValue()"
      >{{ labels.clearAll }} <i class="bhi-times"></i
    ></label>
  `, isInline: true, components: [{ type: NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: NovoChipAvatar, selector: "novo-chip-avatar, [novoChipAvatar]" }, { type: NovoChipRemove, selector: "[novoChipRemove]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipsElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'chips,novo-chips',
                    providers: [CHIPS_VALUE_ACCESSOR$2],
                    template: `
    <div class="novo-chip-container">
      <novo-chip
        *ngFor="let item of _items | async"
        [class.selected]="item == selected"
        [selectable]="true"
        [disabled]="disablePickerInput"
        (removed)="remove($event, item)"
        (selectionChange)="select($event, item)"
        (deselect)="deselect($event, item)"
      >
        <novo-icon *ngIf="getAvatarType(item)" class="txc-{{ getAvatarType(item) }}" novoChipAvatar>circle</novo-icon>
        {{ item.label }}
        <novo-icon *ngIf="!disablePickerInput" novoChipRemove>x</novo-icon>
      </novo-chip>
    </div>
    <div class="chip-input-container" *ngIf="!maxlength || (maxlength && items.length < maxlength)">
      <novo-picker
        clearValueOnSelect="true"
        [closeOnSelect]="closeOnSelect"
        [config]="source"
        [disablePickerInput]="disablePickerInput"
        [placeholder]="placeholder"
        [(ngModel)]="itemToAdd"
        (select)="add($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (typing)="onTyping($event)"
        (blur)="onTouched($event)"
        [selected]="items"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <div class="preview-container">
      <span #preview></span>
    </div>
    <i class="bhi-search" [class.has-value]="items.length" *ngIf="!disablePickerInput"></i>
    <label class="clear-all" *ngIf="items.length && !disablePickerInput" (click)="clearValue()"
      >{{ labels.clearAll }} <i class="bhi-times"></i
    ></label>
  `,
                    host: {
                        '[class.with-value]': 'items.length > 0',
                        '[class.disabled]': 'disablePickerInput',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ComponentUtils }, { type: NovoLabelService }]; }, propDecorators: { closeOnSelect: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], source: [{
                type: Input
            }], maxlength: [{
                type: Input
            }], type: [{
                type: Input
            }], disablePickerInput: [{
                type: Input
            }], changed: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], typing: [{
                type: Output
            }], preview: [{
                type: ViewChild,
                args: ['preview', { read: ViewContainerRef }]
            }], value: [{
                type: Input
            }] } });

// NG2
// Value accessor for the component (supports ngModel)
const CHIPS_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoRowChipsElement),
    multi: true,
};
class NovoRowChipElement extends NovoChipElement {
    onSelect(e) {
        return false;
    }
}
NovoRowChipElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRowChipElement, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoRowChipElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoRowChipElement, selector: "novo-row-chip", host: { attributes: { "role": "option" }, listeners: { "click": "_handleClick($event)", "keydown": "_handleKeydown($event)", "focus": "focus()", "blur": "_blur()" }, properties: { "attr.tabindex": "disabled ? null : tabIndex", "class.novo-row-chip-selected": "selected", "class.novo-row-chip-with-trailing-icon": "removeIcon", "class.novo-row-chip-disabled": "disabled", "attr.disabled": "disabled || null", "attr.aria-disabled": "disabled.toString()", "attr.aria-selected": "ariaSelected" }, classAttribute: "novo-row-chip novo-focus-indicator" }, usesInheritance: true, ngImport: i0, template: `
    <div class="novo-row-chips-columns">
      <ng-content></ng-content>
      <i class="bhi-delete-o" *ngIf="!disabled" (click)="remove()"></i>
    </div>
  `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRowChipElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-row-chip',
                    template: `
    <div class="novo-row-chips-columns">
      <ng-content></ng-content>
      <i class="bhi-delete-o" *ngIf="!disabled" (click)="remove()"></i>
    </div>
  `,
                    host: {
                        class: 'novo-row-chip novo-focus-indicator',
                        '[attr.tabindex]': 'disabled ? null : tabIndex',
                        role: 'option',
                        '[class.novo-row-chip-selected]': 'selected',
                        '[class.novo-row-chip-with-trailing-icon]': 'removeIcon',
                        '[class.novo-row-chip-disabled]': 'disabled',
                        '[attr.disabled]': 'disabled || null',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-selected]': 'ariaSelected',
                        '(click)': '_handleClick($event)',
                        '(keydown)': '_handleKeydown($event)',
                        '(focus)': 'focus()',
                        '(blur)': '_blur()',
                    },
                }]
        }] });
class NovoRowChipsElement extends NovoChipsElement {
    constructor(element, componentUtils, labels) {
        super(element, componentUtils, labels);
        this.closeOnSelect = true;
    }
    onKeyDown(event) {
        return;
    }
}
NovoRowChipsElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRowChipsElement, deps: [{ token: i0.ElementRef }, { token: ComponentUtils }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoRowChipsElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoRowChipsElement, selector: "novo-row-chips", inputs: { closeOnSelect: "closeOnSelect" }, host: { properties: { "class.with-value": "items.length > 0" } }, providers: [CHIPS_VALUE_ACCESSOR$1], usesInheritance: true, ngImport: i0, template: `
    <div class="novo-row-chips-columns" *ngIf="items.length > 0">
      <div class="column-label" [style.flexBasis.px]="column.width || 200" *ngFor="let column of source.columns">{{ column.label }}</div>
    </div>
    <div class="novo-row-chips-empty-message" *ngIf="source.emptyReadOnlyMessage && disablePickerInput && items.length === 0">
      {{ source.emptyReadOnlyMessage }}
    </div>
    <novo-row-chip
      *ngFor="let item of _items | async"
      [type]="type || item?.value?.searchEntity"
      [class.selected]="item == selected"
      [disabled]="disablePickerInput"
      (removed)="remove($event, item)"
      (selectionChange)="select($event, item)"
    >
      <div
        class="column-data"
        [class.editable]="column.editable"
        [style.flexBasis.px]="column.width || 200"
        *ngFor="let column of source.columns"
      >
        <ng-container *ngIf="column.editable">
          <novo-field>
            <input novoInput [type]="column.type || 'text'" [(ngModel)]="item.value[column.name]" />
          </novo-field>
        </ng-container>
        <ng-container *ngIf="!column.editable">
          <span>{{ column.data(item) }}</span>
        </ng-container>
      </div>
    </novo-row-chip>
    <novo-picker
      clearValueOnSelect="true"
      [closeOnSelect]="closeOnSelect"
      [config]="source"
      [disablePickerInput]="disablePickerInput"
      [hidden]="disablePickerInput"
      [placeholder]="placeholder"
      [(ngModel)]="itemToAdd"
      (select)="add($event)"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (typing)="onTyping($event)"
      (blur)="onTouched($event)"
      [selected]="items"
      *ngIf="!maxlength || (maxlength && items.length < maxlength)"
    >
    </novo-picker>
    <div class="preview-container">
      <span #preview></span>
    </div>
  `, isInline: true, components: [{ type: NovoRowChipElement, selector: "novo-row-chip" }, { type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "async": i1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRowChipsElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-row-chips',
                    providers: [CHIPS_VALUE_ACCESSOR$1],
                    host: {
                        '[class.with-value]': 'items.length > 0',
                    },
                    template: `
    <div class="novo-row-chips-columns" *ngIf="items.length > 0">
      <div class="column-label" [style.flexBasis.px]="column.width || 200" *ngFor="let column of source.columns">{{ column.label }}</div>
    </div>
    <div class="novo-row-chips-empty-message" *ngIf="source.emptyReadOnlyMessage && disablePickerInput && items.length === 0">
      {{ source.emptyReadOnlyMessage }}
    </div>
    <novo-row-chip
      *ngFor="let item of _items | async"
      [type]="type || item?.value?.searchEntity"
      [class.selected]="item == selected"
      [disabled]="disablePickerInput"
      (removed)="remove($event, item)"
      (selectionChange)="select($event, item)"
    >
      <div
        class="column-data"
        [class.editable]="column.editable"
        [style.flexBasis.px]="column.width || 200"
        *ngFor="let column of source.columns"
      >
        <ng-container *ngIf="column.editable">
          <novo-field>
            <input novoInput [type]="column.type || 'text'" [(ngModel)]="item.value[column.name]" />
          </novo-field>
        </ng-container>
        <ng-container *ngIf="!column.editable">
          <span>{{ column.data(item) }}</span>
        </ng-container>
      </div>
    </novo-row-chip>
    <novo-picker
      clearValueOnSelect="true"
      [closeOnSelect]="closeOnSelect"
      [config]="source"
      [disablePickerInput]="disablePickerInput"
      [hidden]="disablePickerInput"
      [placeholder]="placeholder"
      [(ngModel)]="itemToAdd"
      (select)="add($event)"
      (keydown)="onKeyDown($event)"
      (focus)="onFocus($event)"
      (typing)="onTyping($event)"
      (blur)="onTouched($event)"
      [selected]="items"
      *ngIf="!maxlength || (maxlength && items.length < maxlength)"
    >
    </novo-picker>
    <div class="preview-container">
      <span #preview></span>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ComponentUtils }, { type: NovoLabelService }]; }, propDecorators: { closeOnSelect: [{
                type: Input
            }] } });

// NG2
class NovoChipsModule {
}
NovoChipsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoChipsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipsModule, declarations: [NovoChipElement,
        NovoChipAvatar,
        NovoChipRemove,
        NovoChipInput,
        NovoChipList,
        NovoChipsElement,
        NovoRowChipElement,
        NovoRowChipsElement], imports: [CommonModule, FormsModule, NovoPickerModule, NovoIconModule, NovoFieldModule], exports: [NovoChipElement,
        NovoChipAvatar,
        NovoChipRemove,
        NovoChipInput,
        NovoChipList,
        NovoChipsElement,
        NovoRowChipElement,
        NovoRowChipsElement] });
NovoChipsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipsModule, providers: [
        ErrorStateMatcher,
        {
            provide: NOVO_CHIPS_DEFAULT_OPTIONS,
            useValue: {
                separatorKeyCodes: ["Enter" /* Enter */],
            },
        },
    ], imports: [[CommonModule, FormsModule, NovoPickerModule, NovoIconModule, NovoFieldModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoChipsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoPickerModule, NovoIconModule, NovoFieldModule],
                    declarations: [
                        NovoChipElement,
                        NovoChipAvatar,
                        NovoChipRemove,
                        NovoChipInput,
                        NovoChipList,
                        NovoChipsElement,
                        NovoRowChipElement,
                        NovoRowChipsElement,
                    ],
                    exports: [
                        NovoChipElement,
                        NovoChipAvatar,
                        NovoChipRemove,
                        NovoChipInput,
                        NovoChipList,
                        NovoChipsElement,
                        NovoRowChipElement,
                        NovoRowChipsElement,
                    ],
                    providers: [
                        ErrorStateMatcher,
                        {
                            provide: NOVO_CHIPS_DEFAULT_OPTIONS,
                            useValue: {
                                separatorKeyCodes: ["Enter" /* Enter */],
                            },
                        },
                    ],
                }]
        }] });

// NG2
// Value accessor for the component (supports ngModel)
const CKEDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoCKEditorElement),
    multi: true,
};
/**
 * CKEditor component
 * Usage :
 *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
 */
class NovoCKEditorElement {
    constructor(zone) {
        this.zone = zone;
        this.startupFocus = false;
        this.fileBrowserImageUploadUrl = '';
        this.disabled = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.paste = new EventEmitter();
        this.loaded = new EventEmitter();
        this._value = '';
    }
    get value() {
        return this._value;
    }
    set value(v) {
        if (v !== this._value) {
            this._value = v;
            this.onChange(v);
        }
    }
    ngOnDestroy() {
        if (this.instance) {
            this.instance.focusManager.blur(true); // Remove focus from editor
            setTimeout(() => {
                this.instance.removeAllListeners();
                const aInstance = CKEDITOR.instances[this.instance.name];
                if (aInstance) {
                    aInstance.destroy();
                }
                this.instance.destroy();
                this.instance = null;
            });
        }
    }
    ngAfterViewInit() {
        const config = Object.assign(this.getBaseConfig(), this.config);
        if (this.startupFocus) {
            config.startupFocus = true;
        }
        if (this.disabled) {
            config.readOnly = true;
        }
        this.ckeditorInit(config);
    }
    updateValue(value) {
        this.zone.run(() => {
            this.value = value;
            this.onChange(value);
            this.onTouched();
            this.change.emit(value);
        });
    }
    ckeditorInit(config) {
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // CKEditor replace textarea
        this.instance = CKEDITOR.replace(this.host.nativeElement, config);
        // Set initial value
        this.instance.setData(this.value);
        // listen for instanceReady event
        this.instance.on('instanceReady', (evt) => {
            // send the evt to the EventEmitter
            this.ready.emit(evt);
        });
        // CKEditor change event
        this.instance.on('change', () => {
            this.onTouched();
            const value = this.instance.getData();
            // Debounce update
            if (this.debounce) {
                if (this.debounceTimeout) {
                    clearTimeout(this.debounceTimeout);
                }
                this.debounceTimeout = setTimeout(() => {
                    this.updateValue(value);
                    this.debounceTimeout = null;
                }, parseInt(this.debounce, 10));
            }
            else {
                this.updateValue(value);
            }
        });
        this.instance.on('blur', (event) => {
            this.blur.emit(event);
        });
        this.instance.on('focus', (event) => {
            this.focus.emit(event);
        });
        this.instance.on('paste', (event) => {
            this.paste.emit(event);
        });
        this.instance.on('loaded', (event) => {
            this.loaded.emit(event);
        });
    }
    getBaseConfig() {
        const baseConfig = {
            enterMode: CKEDITOR.ENTER_BR,
            entities: false,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            removePlugins: 'liststyle,tabletools,contextmenu',
            extraAllowedContent: '*(*){*};table tbody tr td th[*];',
            font_names: 'Arial/Arial, Helvetica, sans-serif;' +
                'Calibri/Calibri, Verdana, Geneva, sans-serif;' +
                'Comic Sans MS/Comic Sans MS, cursive;' +
                'Courier New/Courier New, Courier, monospace;' +
                'Georgia/Georgia, serif;' +
                'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;' +
                'Tahoma/Tahoma, Geneva, sans-serif;' +
                'Times New Roman/Times New Roman, Times, serif;' +
                'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;' +
                'Verdana/Verdana, Geneva, sans-serif',
        };
        const minimalConfig = {
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
        const extendedConfig = {
            toolbar: [
                { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                {
                    name: 'paragraph',
                    items: [
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Blockquote',
                        'JustifyLeft',
                        'JustifyCenter',
                        'JustifyRight',
                        'JustifyBlock',
                        'BidiLtr',
                        'BidiRtl',
                    ],
                },
                { name: 'links', items: ['Link'] },
                { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                { name: 'tools', items: ['Maximize', 'Source'] },
                '/',
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] },
            ],
            filebrowserImageUploadUrl: this.fileBrowserImageUploadUrl,
        };
        return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
    }
    writeValue(value) {
        this._value = value;
        if (this.instance) {
            this.instance.setData(value);
        }
    }
    onChange(value) { }
    onTouched(event) { }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
        if (this.instance) {
            CKEDITOR.instances[this.instance.name].setReadOnly(disabled);
        }
    }
    insertText(text) {
        const trimmedText = text.trim();
        this.instance.insertText(trimmedText);
    }
}
NovoCKEditorElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCKEditorElement, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NovoCKEditorElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoCKEditorElement, selector: "novo-editor", inputs: { config: "config", debounce: "debounce", name: "name", minimal: "minimal", startupFocus: "startupFocus", fileBrowserImageUploadUrl: "fileBrowserImageUploadUrl", disabled: "disabled", value: "value" }, outputs: { change: "change", ready: "ready", blur: "blur", focus: "focus", paste: "paste", loaded: "loaded" }, providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: "host", first: true, predicate: ["host"], descendants: true }], ngImport: i0, template: '<textarea [name]="name" [id]="name" #host></textarea>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoCKEditorElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-editor',
                    providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                    template: '<textarea [name]="name" [id]="name" #host></textarea>',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { config: [{
                type: Input
            }], debounce: [{
                type: Input
            }], name: [{
                type: Input
            }], minimal: [{
                type: Input
            }], startupFocus: [{
                type: Input
            }], fileBrowserImageUploadUrl: [{
                type: Input
            }], disabled: [{
                type: Input
            }], change: [{
                type: Output
            }], ready: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], paste: [{
                type: Output
            }], loaded: [{
                type: Output
            }], host: [{
                type: ViewChild,
                args: ['host']
            }], value: [{
                type: Input
            }] } });

// NG2
class NovoNovoCKEditorModule {
}
NovoNovoCKEditorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNovoCKEditorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoNovoCKEditorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNovoCKEditorModule, declarations: [NovoCKEditorElement], imports: [CommonModule, FormsModule], exports: [NovoCKEditorElement] });
NovoNovoCKEditorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNovoCKEditorModule, imports: [[CommonModule, FormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNovoCKEditorModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule],
                    declarations: [NovoCKEditorElement],
                    exports: [NovoCKEditorElement],
                }]
        }] });

class Color {
    constructor(value) {
        this.isValid = true;
        if (Color.isHSL(value)) {
            // let { h, s, l, a = 1 } = value as HSLA;
            this.source = rgbToHex(hslToRgb(value));
        }
        else if (Color.isHSV(value)) {
            this.source = rgbToHex(hsvToRgb(value));
        }
        else if (Color.isRGB(value)) {
            this.source = rgbToHex(value);
        }
        else if (Color.isValidHex(value.toString())) {
            this.source = value;
        }
        else {
            this.isValid = false;
            console.error(`Invalid color: ${value}`);
        }
    }
    get hex() {
        return this.source;
    }
    get rgb() {
        return hexToRgb(this.source);
    }
    get hsl() {
        return rgbToHsl(hexToRgb(this.source));
    }
    get hsv() {
        return rgbToHsv(hexToRgb(this.source));
    }
    static isValidHex(h) {
        const clean = h.replace('#', '').toLowerCase();
        const a = parseInt(clean, 16);
        return a.toString(16).padStart(6, '0') === clean;
    }
    static isRGB(obj) {
        const keys = ['r', 'g', 'b'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isRGBA(obj) {
        const keys = ['r', 'g', 'b', 'a'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSL(obj) {
        const keys = ['h', 's', 'l'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSLA(obj) {
        const keys = ['h', 's', 'l', 'a'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSV(obj) {
        const keys = ['h', 's', 'v'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
    static isHSVA(obj) {
        const keys = ['h', 's', 'v', 'a'];
        return keys.every((item) => obj.hasOwnProperty(item));
    }
}
function componentToHex(c) {
    const hex = c.toString(16);
    return hex.length === 1 ? '0' + hex : hex;
}
function rgbToHex({ r, g, b }) {
    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);
}
function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result
        ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16),
        }
        : null;
}
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSL representation
 */
function rgbToHsl({ r, g, b }) {
    (r /= 255), (g /= 255), (b /= 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h;
    let s;
    const l = (max + min) / 2;
    if (max === min) {
        h = s = 0; // achromatic
    }
    else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h, s, l };
}
/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
 */
function hslToRgb({ h, s, l }) {
    let r, g, b;
    if (s === 0) {
        r = g = b = l; // achromatic
    }
    else {
        function hue2rgb(p1, q1, t1) {
            if (t1 < 0) {
                t1 += 1;
            }
            if (t1 > 1) {
                t1 -= 1;
            }
            if (t1 < 1 / 6) {
                return p1 + (q1 - p1) * 6 * t1;
            }
            if (t1 < 1 / 2) {
                return q1;
            }
            if (t1 < 2 / 3) {
                return p1 + (q1 - p1) * (2 / 3 - t1) * 6;
            }
            return p1;
        }
        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255,
    };
}
/**
 * Converts an RGB color value to HSV. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and v in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSV representation
 */
function rgbToHsv({ r, g, b }) {
    (r = r / 255), (g = g / 255), (b = b / 255);
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h;
    let s;
    const v = max;
    const d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max === min) {
        h = 0; // achromatic
    }
    else {
        switch (max) {
            case r:
                h = (g - b) / d + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / d + 2;
                break;
            case b:
                h = (r - g) / d + 4;
                break;
        }
        h /= 6;
    }
    return { h, s, v };
}
/**
 * Converts an HSV color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSV_color_space.
 * Assumes h, s, and v are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  v       The value
 * @return  Array           The RGB representation
 */
function hsvToRgb({ h, s, v }) {
    let r, g, b;
    const i = Math.floor(h * 6);
    const f = h * 6 - i;
    const p = v * (1 - s);
    const q = v * (1 - f * s);
    const t = v * (1 - (1 - f) * s);
    switch (i % 6) {
        case 0:
            (r = v), (g = t), (b = p);
            break;
        case 1:
            (r = q), (g = v), (b = p);
            break;
        case 2:
            (r = p), (g = v), (b = t);
            break;
        case 3:
            (r = p), (g = q), (b = v);
            break;
        case 4:
            (r = t), (g = p), (b = v);
            break;
        case 5:
            (r = v), (g = p), (b = q);
            break;
    }
    return {
        r: r * 255,
        g: g * 255,
        b: b * 255,
    };
}

class NovoColorSwatchComponent {
    constructor() {
        this.style = {};
        this.focusStyle = {};
        this.onClick = new EventEmitter();
        this.onHover = new EventEmitter();
        this.divStyles = {};
        this.focusStyles = {};
        this.inFocus = false;
    }
    ngOnInit() {
        this.divStyles = {
            background: this.color,
            height: '100%',
            width: '100%',
            cursor: 'pointer',
            position: 'relative',
            outline: 'none',
            ...this.style,
        };
    }
    currentStyles() {
        this.focusStyles = {
            ...this.divStyles,
            ...this.focusStyle,
        };
        return this.focus || this.inFocus ? this.focusStyles : this.divStyles;
    }
    handleFocusOut() {
        this.inFocus = false;
    }
    handleFocus() {
        this.inFocus = true;
    }
    handleHover(hex, $event) {
        this.onHover.emit({ hex, $event });
    }
    handleClick(hex, $event) {
        this.onClick.emit({ hex, $event });
    }
}
NovoColorSwatchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorSwatchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoColorSwatchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoColorSwatchComponent, selector: "novo-color-swatch", inputs: { color: "color", style: "style", focusStyle: "focusStyle", focus: "focus" }, outputs: { onClick: "onClick", onHover: "onHover" }, ngImport: i0, template: `
    <div
      class="swatch"
      [ngStyle]="currentStyles()"
      [attr.title]="color"
      (click)="handleClick(color, $event)"
      (keydown.enter)="handleClick(color, $event)"
      (focus)="handleFocus()"
      (blur)="handleFocusOut()"
      (mouseover)="handleHover(color, $event)"
      tabindex="0"
    >
      <ng-content></ng-content>
    </div>
  `, isInline: true, styles: [".swatch{border-radius:.4rem}\n"], directives: [{ type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorSwatchComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-color-swatch',
                    template: `
    <div
      class="swatch"
      [ngStyle]="currentStyles()"
      [attr.title]="color"
      (click)="handleClick(color, $event)"
      (keydown.enter)="handleClick(color, $event)"
      (focus)="handleFocus()"
      (blur)="handleFocusOut()"
      (mouseover)="handleHover(color, $event)"
      tabindex="0"
    >
      <ng-content></ng-content>
    </div>
  `,
                    styles: [
                        `
      .swatch {
        border-radius: 0.4rem;
      }
    `,
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { color: [{
                type: Input
            }], style: [{
                type: Input
            }], focusStyle: [{
                type: Input
            }], focus: [{
                type: Input
            }], onClick: [{
                type: Output
            }], onHover: [{
                type: Output
            }] } });

class NovoColorPickerComponent {
    constructor() {
        /** Pixel value for picker width */
        this.width = 276;
        /** Color squares to display */
        this.colors = ['#FF6900', '#FCB900', '#7BDCB5', '#00D084', '#8ED1FC', '#0693E3', '#ABB8C3', '#EB144C', '#F78DA7', '#9900EF'];
        this.color = {
            h: 250,
            s: 0.5,
            l: 0.2,
            a: 1,
        };
        this.onChange = new EventEmitter();
        this.onChangeComplete = new EventEmitter();
        this.onSwatchHover = new EventEmitter();
        this.swatchStyle = {
            width: '30px',
            height: '30px',
            borderRadius: '4px',
            fontSize: '0',
        };
        this.input = {
            borderRadius: '4px',
            borderBottomLeftRadius: '0',
            borderTopLeftRadius: '0',
            border: '1px solid #e6ecf0',
            boxSizing: 'border-box',
            display: 'inline',
            fontSize: '14px',
            height: '30px',
            padding: '0',
            paddingLeft: '6px',
            width: '100%',
            color: '#657786',
        };
    }
    focus(color) {
        return { boxShadow: `0 0 4px ${color}` };
    }
    handleBlockChange({ hex, $event }) {
        if (Color.isValidHex(hex)) {
            // this.hex = hex;
            this.handleChange({ hex, source: 'hex' }, $event);
        }
    }
    handleValueChange({ data, $event }) {
        this.handleBlockChange({ hex: data, $event });
    }
    ngOnInit() {
        this.changes = this.onChange.pipe(debounceTime(100)).subscribe((x) => this.onChangeComplete.emit(x));
        this.setState(new Color(this.color));
    }
    ngOnChanges() {
        this.setState(new Color(this.color));
    }
    ngOnDestroy() {
        this.changes.unsubscribe();
    }
    setState(data) {
        this.currentColor = data;
        this.hsl = data.hsl;
        this.hsv = data.hsv;
        this.rgb = data.rgb;
        this.hex = data.hex;
        this.afterValidChange();
    }
    handleChange(data, $event) {
        const color = new Color(data.hex);
        if (color.isValid) {
            this.setState(color);
            this.onChange.emit({ color, $event });
            this.afterValidChange();
        }
    }
    /** hook for components after a complete change */
    afterValidChange() { }
    handleSwatchHover($event) {
        const color = new Color($event.hex);
        if (color.isValid) {
            this.setState(color);
            this.onSwatchHover.emit({ color, $event });
        }
    }
}
NovoColorPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorPickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoColorPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoColorPickerComponent, selector: "novo-color-picker", inputs: { width: "width", colors: "colors", color: "color" }, outputs: { onChange: "onChange", onChangeComplete: "onChangeComplete", onSwatchHover: "onSwatchHover" }, usesOnChanges: true, ngImport: i0, template: `
    <div class="novo-color-preview" [style.backgroundColor]="currentColor.hex">
      <div class="novo-color-preview-text">{{ hex }}</div>
    </div>
    <div class="novo-color-swatches">
      <novo-color-swatch
        *ngFor="let color of colors"
        [color]="color"
        (onClick)="handleBlockChange($event)"
        (onHover)="handleSwatchHover($event)"
      ></novo-color-swatch>
    </div>
    <div class="novo-color-input">
      <input [value]="hex.replace('#', '')" (onChange)="handleValueChange($event)" />
    </div>
  `, isInline: true, styles: [":host{display:grid;grid-template-rows:6rem 1fr -webkit-min-content;grid-template-rows:6rem 1fr min-content;background-color:#fff;background-color:var(--background-bright, #ffffff);cursor:default;overflow:auto;box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f;transform:translateY(0);transition:all .15s cubic-bezier(.35,0,.25,1);border-radius:.4rem;width:18rem}:host .novo-color-preview{display:flex;align-items:center;justify-content:center}:host .novo-color-swatches{display:grid;grid-template-columns:repeat(6,2.4rem);grid-auto-rows:2.4rem;grid-gap:.4rem;margin:.4rem 0;justify-content:center}:host .novo-color-input{padding:.4rem .8rem}\n"], components: [{ type: NovoColorSwatchComponent, selector: "novo-color-swatch", inputs: ["color", "style", "focusStyle", "focus"], outputs: ["onClick", "onHover"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorPickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-color-picker', template: `
    <div class="novo-color-preview" [style.backgroundColor]="currentColor.hex">
      <div class="novo-color-preview-text">{{ hex }}</div>
    </div>
    <div class="novo-color-swatches">
      <novo-color-swatch
        *ngFor="let color of colors"
        [color]="color"
        (onClick)="handleBlockChange($event)"
        (onHover)="handleSwatchHover($event)"
      ></novo-color-swatch>
    </div>
    <div class="novo-color-input">
      <input [value]="hex.replace('#', '')" (onChange)="handleValueChange($event)" />
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, preserveWhitespaces: false, styles: [":host{display:grid;grid-template-rows:6rem 1fr -webkit-min-content;grid-template-rows:6rem 1fr min-content;background-color:#fff;background-color:var(--background-bright, #ffffff);cursor:default;overflow:auto;box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f;transform:translateY(0);transition:all .15s cubic-bezier(.35,0,.25,1);border-radius:.4rem;width:18rem}:host .novo-color-preview{display:flex;align-items:center;justify-content:center}:host .novo-color-swatches{display:grid;grid-template-columns:repeat(6,2.4rem);grid-auto-rows:2.4rem;grid-gap:.4rem;margin:.4rem 0;justify-content:center}:host .novo-color-input{padding:.4rem .8rem}\n"] }]
        }], propDecorators: { width: [{
                type: Input
            }], colors: [{
                type: Input
            }], color: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onChangeComplete: [{
                type: Output
            }], onSwatchHover: [{
                type: Output
            }] } });

// NG
// Value accessor for the component (supports ngModel)
const COLOR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoColorInputElement),
    multi: true,
};
class NovoColorInputElement {
    constructor(element, labels, cdr) {
        this.element = element;
        this.labels = labels;
        this.cdr = cdr;
        this.placeholder = '#ffffff';
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = '';
        this.lastValidValue = '';
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            this._setFormValue(value);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() { }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.panelOpen ? this.overlay.closePanel() : this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay && this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            // this._handleEvent(event, false);
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _setFormValue(value) {
        if (this.value) {
            // hmm...
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event) {
            this.value = event.color.hex;
            this.change.emit(this.value);
            this.closePanel();
        }
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.value = '';
        this.change.emit(this.value);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoColorInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoColorInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoColorInputElement, selector: "novo-color-input", inputs: { name: "name", placeholder: "placeholder", value: "value", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", change: "change", blur: "blur", focus: "focus" }, host: { properties: { "class.disabled": "this.disabled" } }, providers: [COLOR_VALUE_ACCESSOR], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }], ngImport: i0, template: `
    <novo-field>
      <input
        novoInput
        type="text"
        [name]="name"
        [placeholder]="placeholder"
        [disabled]="disabled"
        [style.color]="value"
        (focus)="_handleFocus($event)"
        (keydown)="_handleKeydown($event)"
        (input)="_handleInput($event)"
        (blur)="_handleBlur($event)"
        [(ngModel)]="value"
        #input
      />
      <novo-icon *ngIf="!hasValue" (click)="openPanel()">complex</novo-icon>
      <novo-icon *ngIf="hasValue" smaller (click)="clearValue()">x</novo-icon>
    </novo-field>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-color-picker [(color)]="value" (onChange)="setValueAndClose($event)"></novo-color-picker>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }, { type: NovoColorPickerComponent, selector: "novo-color-picker", inputs: ["width", "colors", "color"], outputs: ["onChange", "onChangeComplete", "onSwatchHover"] }], directives: [{ type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-color-input',
                    providers: [COLOR_VALUE_ACCESSOR],
                    template: `
    <novo-field>
      <input
        novoInput
        type="text"
        [name]="name"
        [placeholder]="placeholder"
        [disabled]="disabled"
        [style.color]="value"
        (focus)="_handleFocus($event)"
        (keydown)="_handleKeydown($event)"
        (input)="_handleInput($event)"
        (blur)="_handleBlur($event)"
        [(ngModel)]="value"
        #input
      />
      <novo-icon *ngIf="!hasValue" (click)="openPanel()">complex</novo-icon>
      <novo-icon *ngIf="hasValue" smaller (click)="clearValue()">x</novo-icon>
    </novo-field>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-color-picker [(color)]="value" (onChange)="setValueAndClose($event)"></novo-color-picker>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], blurEvent: [{
                type: Output
            }], focusEvent: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.disabled']
            }] } });

// NG2
class NovoColorPickerModule {
}
NovoColorPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoColorPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorPickerModule, declarations: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent], imports: [CommonModule, FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule], exports: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent] });
NovoColorPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorPickerModule, imports: [[CommonModule, FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoColorPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoPipesModule, NovoFieldModule, NovoOverlayModule, NovoIconModule],
                    declarations: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent],
                    exports: [NovoColorPickerComponent, NovoColorInputElement, NovoColorSwatchComponent],
                }]
        }] });

// NG2
class NovoToastElement {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.appearance = 'banner';
        this.theme = 'danger';
        this.icon = 'caution';
        this.hasDialogue = false;
        this.isCloseable = false;
        this.closed = new EventEmitter();
        this.show = false;
        this.animate = false;
        this.parent = null;
        this.launched = false;
        this.onActionPromise = Deferred();
    }
    set message(m) {
        this._message = this.sanitizer.bypassSecurityTrustHtml(m);
    }
    ngOnInit() {
        if (!this.launched) {
            // clear position and time
            this.position = null;
            this.time = null;
            // set icon and styling
            this.iconClass = `bhi-${this.icon}`;
            this.alertTheme = `${this.theme} toast-container embedded`;
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        }
    }
    ngOnChanges(changes) {
        // set icon and styling
        this.iconClass = `bhi-${this.icon}`;
        this.alertTheme = `${this.theme} toast-container embedded`;
        if (this.hasDialogue) {
            this.alertTheme += ' dialogue';
        }
    }
    clickHandler(event) {
        if (!this.isCloseable) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
            else {
                this.closed.emit({ closed: true });
            }
        }
    }
    close(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.parent) {
            this.parent.hide(this);
        }
        else {
            this.closed.emit({ closed: true });
        }
    }
    actionHandler(event) {
        this.onActionPromise.resolve(event);
    }
    onAction(fn) {
        return this.onActionPromise.then(fn);
    }
}
NovoToastElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastElement, deps: [{ token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoToastElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoToastElement, selector: "novo-toast", inputs: { appearance: "appearance", theme: "theme", icon: "icon", title: "title", action: "action", hasDialogue: "hasDialogue", link: "link", isCloseable: "isCloseable", message: "message" }, outputs: { closed: "closed" }, host: { listeners: { "click": "!isCloseable && clickHandler($event)" }, properties: { "class": "alertTheme", "class.growl": "appearance == \"growl\"", "class.banner": "appearance == \"banner\"", "class.show": "show", "class.animate": "animate", "class.embedded": "embedded", "attr.theme": "theme" } }, usesOnChanges: true, ngImport: i0, template: `
    <div class="toast-icon">
      <i [ngClass]="iconClass"></i>
    </div>
    <div class="toast-content">
      <h5 *ngIf="title">{{ title }}</h5>
      <p *ngIf="_message" [class.message-only]="!title" [innerHtml]="_message"></p>
      <div *ngIf="link" class="link-generated">
        <input type="text" [value]="link" onfocus="this.select();" />
      </div>
      <div class="dialogue">
        <ng-content></ng-content>
      </div>
      <div *ngIf="action" class="action">
        <button theme="dialogue" color="white" (click)="actionHandler($event)">{{ action }}</button>
      </div>
    </div>
    <div class="close-icon" *ngIf="isCloseable" (click)="close($event)">
      <i class="bhi-times"></i>
    </div>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-toast',
                    host: {
                        '[class]': 'alertTheme',
                        '[class.growl]': 'appearance == "growl"',
                        '[class.banner]': 'appearance == "banner"',
                        '[class.show]': 'show',
                        '[class.animate]': 'animate',
                        '[class.embedded]': 'embedded',
                        '[attr.theme]': 'theme',
                        '(click)': '!isCloseable && clickHandler($event)',
                    },
                    template: `
    <div class="toast-icon">
      <i [ngClass]="iconClass"></i>
    </div>
    <div class="toast-content">
      <h5 *ngIf="title">{{ title }}</h5>
      <p *ngIf="_message" [class.message-only]="!title" [innerHtml]="_message"></p>
      <div *ngIf="link" class="link-generated">
        <input type="text" [value]="link" onfocus="this.select();" />
      </div>
      <div class="dialogue">
        <ng-content></ng-content>
      </div>
      <div *ngIf="action" class="action">
        <button theme="dialogue" color="white" (click)="actionHandler($event)">{{ action }}</button>
      </div>
    </div>
    <div class="close-icon" *ngIf="isCloseable" (click)="close($event)">
      <i class="bhi-times"></i>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.DomSanitizer }]; }, propDecorators: { appearance: [{
                type: Input
            }], theme: [{
                type: Input
            }], icon: [{
                type: Input
            }], title: [{
                type: Input
            }], action: [{
                type: Input
            }], hasDialogue: [{
                type: Input
            }], link: [{
                type: Input
            }], isCloseable: [{
                type: Input
            }], message: [{
                type: Input
            }], closed: [{
                type: Output
            }] } });

// NG2
class NovoToastService {
    constructor(componentUtils) {
        this.componentUtils = componentUtils;
        this.references = [];
        this.icons = { default: 'bell', success: 'check', info: 'info', warning: 'warning', danger: 'remove' };
        this.defaults = { hideDelay: 3500, position: 'growlTopRight', theme: 'default' };
    }
    set parentViewContainer(view) {
        this._parentViewContainer = view;
    }
    alert(options, toastElement = NovoToastElement) {
        return new Promise((resolve) => {
            if (!this._parentViewContainer) {
                console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                return;
            }
            const toast = this.componentUtils.append(toastElement, this._parentViewContainer);
            this.references.push(toast);
            this.handleAlert(toast.instance, options);
            resolve(toast.instance);
        });
    }
    isVisible(toast) {
        return toast.show;
    }
    hide(toast) {
        toast.animate = false;
        setTimeout(() => {
            toast.show = false;
            const REF = this.references.filter((x) => x.instance === toast)[0];
            if (REF) {
                this.references.splice(this.references.indexOf(REF), 1);
                REF.destroy();
            }
        }, 300);
    }
    handleAlert(toast, options) {
        this.setToastOnSession(toast, options);
        setTimeout(() => {
            this.show(toast);
        }, 20);
        if (!toast.isCloseable) {
            this.toastTimer(toast);
        }
    }
    setToastOnSession(toast, opts) {
        const OPTIONS = typeof opts === 'object' ? opts : {};
        toast.parent = this;
        toast.title = OPTIONS.title || '';
        toast.message = OPTIONS.message || '';
        toast.action = OPTIONS.action || null;
        toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
        toast.link = OPTIONS.link || '';
        toast.isCloseable = OPTIONS.isCloseable || false;
        const CUSTOM_CLASS = OPTIONS.customClass || '';
        const ALERT_STYLE = OPTIONS.accent ? `novo-accent-${OPTIONS.accent}` : OPTIONS.theme || this.defaults.theme;
        const ALERT_POSITION = OPTIONS.position || this.defaults.position;
        const ALERT_ICON = OPTIONS.icon || this.icons.default;
        toast.iconClass = `bhi-${ALERT_ICON}`;
        toast.launched = true;
        toast.alertTheme = `${ALERT_STYLE} ${ALERT_POSITION} ${CUSTOM_CLASS} toast-container launched`;
    }
    show(toast) {
        toast.show = true;
        setTimeout(addClass, 25);
        /**
         * Adds animate class to be called after a timeout
         **/
        function addClass() {
            toast.animate = true;
        }
    }
    toastTimer(toast) {
        if (toast.hideDelay < 0) {
            return;
        }
        setTimeout(() => {
            this.hide(toast);
        }, toast.hideDelay);
    }
}
NovoToastService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastService, deps: [{ token: ComponentUtils }], target: i0.ɵɵFactoryTarget.Injectable });
NovoToastService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: ComponentUtils }]; } });

/**
 * Injection token used to provide the parent component to options.
 */
const NOVO_DATA_TABLE_REF = new InjectionToken('NOVO_DATA_TABLE_REF');

class NovoDataTableCheckboxHeaderCell extends CdkHeaderCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref, toaster) {
        super(columnDef, elementRef);
        this.dataTable = dataTable;
        this.ref = ref;
        this.toaster = toaster;
        this.role = 'columnheader';
        this.maxSelected = undefined;
        this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
        this.selectionSubscription = this.dataTable.state.selectionSource.subscribe(() => {
            this.checked = this.dataTable.allCurrentRowsSelected() || (this.dataTable?.canSelectAll && this.dataTable?.allMatchingSelected);
            if (this.dataTable?.canSelectAll) {
                this.selectAllChanged();
            }
            this.ref.markForCheck();
        });
        this.paginationSubscription = this.dataTable.state.paginationSource.subscribe((event) => {
            if (event.isPageSizeChange) {
                this.checked = false;
                if (this.dataTable?.canSelectAll) {
                    this.selectAllChanged();
                }
                this.dataTable.selectRows(false);
                this.dataTable.state.checkRetainment('pageSize');
                this.dataTable.state.reset(false, true);
            }
            else {
                this.checked = this.dataTable.allCurrentRowsSelected() || (this.dataTable?.canSelectAll && this.dataTable?.allMatchingSelected);
                if (this.dataTable?.canSelectAll) {
                    this.selectAllChanged();
                }
            }
            this.ref.markForCheck();
        });
        this.resetSubscription = this.dataTable.state.resetSource.subscribe(() => {
            this.checked = false;
            if (this.dataTable?.canSelectAll) {
                this.resetAllMatchingSelected();
            }
            this.ref.markForCheck();
        });
    }
    get isAtLimit() {
        return (this.maxSelected && this.dataTable.state.selectedRows.size + this.dataTable.dataSource.data.length > this.maxSelected && !this.checked);
    }
    ngOnDestroy() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    }
    onClick() {
        if (this.isAtLimit) {
            this.toaster.alert({
                theme: 'danger',
                position: 'fixedTop',
                message: 'Error, more than 500 items are not able to be selected at one time',
                icon: 'caution',
            });
        }
        else {
            this.dataTable.selectRows(!this.checked);
        }
        if (this.dataTable?.canSelectAll) {
            if (this.checked) {
                this.resetAllMatchingSelected();
            }
            else {
                this.selectAllChanged();
            }
        }
    }
    resetAllMatchingSelected() {
        this.dataTable.state?.allMatchingSelectedSource?.next(false);
        this.dataTable.state?.onSelectionChange();
    }
    selectAllChanged() {
        const allSelectedEvent = {
            allSelected: this.checked,
            selectedCount: this.dataTable?.state?.selected?.length,
            allMatchingSelected: this.dataTable?.allMatchingSelected,
        };
        this.dataTable.allSelected.emit(allSelectedEvent);
    }
}
NovoDataTableCheckboxHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCheckboxHeaderCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NOVO_DATA_TABLE_REF }, { token: i0.ChangeDetectorRef }, { token: NovoToastService }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableCheckboxHeaderCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableCheckboxHeaderCell, selector: "novo-data-table-checkbox-header-cell", inputs: { maxSelected: "maxSelected" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: `
    <div class="data-table-checkbox" (click)="onClick()">
      <input type="checkbox" [checked]="checked" />
      <label>
        <i [class.bhi-checkbox-empty]="!checked" [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCheckboxHeaderCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-checkbox-header-cell',
                    template: `
    <div class="data-table-checkbox" (click)="onClick()">
      <input type="checkbox" [checked]="checked" />
      <label>
        <i [class.bhi-checkbox-empty]="!checked" [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_DATA_TABLE_REF]
                }] }, { type: i0.ChangeDetectorRef }, { type: NovoToastService }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], maxSelected: [{
                type: Input
            }] } });

class NovoDataTableExpandHeaderCell extends CdkHeaderCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'columnheader';
        this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-expand-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-header-cell');
        this.expandSubscription = this.dataTable.state.expandSource.subscribe(() => {
            this.expanded = this.dataTable.allCurrentRowsExpanded();
            this.ref.markForCheck();
        });
    }
    ngOnDestroy() {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    }
    expandAll() {
        this.dataTable.expandRows(!this.expanded);
    }
}
NovoDataTableExpandHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableExpandHeaderCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NOVO_DATA_TABLE_REF }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableExpandHeaderCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableExpandHeaderCell, selector: "novo-data-table-expand-header-cell", host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: ` <i class="bhi-next data-table-icon" novo-data-table-expander="true" (click)="expandAll()" [class.expanded]="expanded"></i> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableExpandHeaderCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-expand-header-cell',
                    template: ` <i class="bhi-next data-table-icon" novo-data-table-expander="true" (click)="expandAll()" [class.expanded]="expanded"></i> `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_DATA_TABLE_REF]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });

class NovoDataTableFilterUtils {
    static constructFilter(filter, type, multiSelect) {
        let actualFilter = filter;
        if (filter) {
            if (type && type === 'date') {
                if (filter.startDate && filter.endDate) {
                    actualFilter = {
                        min: dateFns.startOfDay(filter.startDate.date),
                        max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(filter.endDate.date), 1)),
                    };
                }
                else {
                    actualFilter = {
                        min: filter.min ? dateFns.addDays(dateFns.startOfToday(), filter.min) : dateFns.startOfToday(),
                        max: filter.max ? dateFns.addDays(dateFns.endOfToday(), filter.max) : dateFns.endOfToday(),
                    };
                }
            }
            if (multiSelect && Array.isArray(filter)) {
                actualFilter = filter.map((filterItem) => {
                    if (filterItem && filterItem.hasOwnProperty('value')) {
                        return filterItem.value;
                    }
                    return filterItem;
                });
            }
            else if (actualFilter && actualFilter.hasOwnProperty('value')) {
                actualFilter = filter.value;
            }
        }
        return actualFilter;
    }
}

class DataTableState {
    constructor() {
        this.selectionSource = new Subject();
        this.paginationSource = new Subject();
        this.sortFilterSource = new Subject();
        this.resetSource = new Subject();
        this.expandSource = new Subject();
        this.allMatchingSelectedSource = new Subject();
        this.dataLoaded = new Subject();
        this.dataLoadingSource = new Subject();
        this.sort = undefined;
        this.filter = undefined;
        this.where = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.expandedRows = new Set();
        this.isForceRefresh = false;
        this.updates = new EventEmitter();
        this.retainSelected = false;
        this.savedSearchName = undefined;
        this.displayedColumns = undefined;
    }
    get userFiltered() {
        return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter || this.where);
    }
    get userFilteredInternal() {
        return !!(this.filter || this.sort || this.globalSearch || this.where);
    }
    get selected() {
        return Array.from(this.selectedRows.values());
    }
    reset(fireUpdate = true, persistUserFilters) {
        this.setState({}, fireUpdate, persistUserFilters);
    }
    clearSort(fireUpdate = true) {
        this.sort = undefined;
        this.page = 0;
        this.checkRetainment('sort');
        this.reset(fireUpdate, true);
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
                where: this.where,
            });
        }
    }
    clearFilter(fireUpdate = true) {
        this.filter = undefined;
        this.globalSearch = undefined;
        this.page = 0;
        this.checkRetainment('filter');
        this.reset(fireUpdate, true);
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
                where: this.where,
            });
        }
    }
    clearQuery(fireUpdate = true) {
        this.where = undefined;
        this.page = 0;
        this.checkRetainment('where');
        this.reset(fireUpdate, true);
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
                where: this.where,
            });
        }
    }
    clearSelected(fireUpdate = true) {
        this.allMatchingSelectedSource.next(false);
        this.globalSearch = undefined;
        this.page = 0;
        this.reset(fireUpdate, true);
        this.onSelectionChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
                where: this.where,
            });
        }
    }
    onSelectionChange() {
        this.selectionSource.next();
    }
    onExpandChange(targetId) {
        this.expandSource.next(targetId);
    }
    onPaginationChange(isPageSizeChange, pageSize) {
        this.checkRetainment('page');
        this.paginationSource.next({ isPageSizeChange, pageSize });
    }
    onSortFilterChange() {
        this.checkRetainment('sort');
        this.checkRetainment('filter');
        this.checkRetainment('where');
        this.sortFilterSource.next({
            sort: this.sort,
            filter: this.filter,
            globalSearch: this.globalSearch,
            where: this.where,
            savedSearchName: this.savedSearchName,
        });
    }
    setInitialSortFilter(preferences) {
        if (preferences) {
            if (preferences.where) {
                this.where = preferences.where;
            }
            if (preferences.sort) {
                this.sort = preferences.sort;
            }
            if (preferences.filter) {
                this.filter = this.transformFilters(preferences.filter);
            }
            if (preferences.globalSearch) {
                this.globalSearch = preferences.globalSearch;
            }
            if (preferences.savedSearchName) {
                this.savedSearchName = preferences.savedSearchName;
            }
        }
    }
    setState(preferences, fireUpdate = true, persistUserFilters = false) {
        if (!persistUserFilters) {
            this.where = preferences.where;
            this.sort = preferences.sort;
            this.filter = preferences.filter ? this.transformFilters(preferences.filter) : undefined;
            this.globalSearch = preferences.globalSearch;
            this.savedSearchName = preferences.savedSearchName;
            if (preferences.displayedColumns?.length) {
                this.displayedColumns = preferences.displayedColumns;
            }
        }
        this.page = 0;
        if (!this.retainSelected) {
            this.selectedRows.clear();
            this.resetSource.next();
        }
        this.onSortFilterChange();
        this.retainSelected = false;
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
                where: this.where,
                savedSearchName: this.savedSearchName,
                displayedColumns: this.displayedColumns,
            });
        }
    }
    checkRetainment(caller, allMatchingSelected = false) {
        this.retainSelected = this.selectionOptions?.some((option) => option.label === caller) || this.retainSelected || allMatchingSelected;
    }
    transformFilters(filters) {
        const filterArray = Helpers.convertToArray(filters);
        filterArray.forEach((filter) => {
            filter.value =
                filter.selectedOption && filter.type
                    ? NovoDataTableFilterUtils.constructFilter(filter.selectedOption, filter.type)
                    : filter.value;
        });
        return filterArray;
    }
}
DataTableState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableState, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DataTableState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableState });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableState, decorators: [{
            type: Injectable
        }] });

var SortDirection;
(function (SortDirection) {
    SortDirection["ASC"] = "ascending";
    SortDirection["DESC"] = "descending";
    SortDirection["NONE"] = "none";
})(SortDirection || (SortDirection = {}));

const activeStyle = { opacity: 1, pointerEvents: 'all', top: 0 };
const inactiveStyle = { opacity: 0, pointerEvents: 'none' };
/** Animation that moves the sort indicator. */
const sortAscAnim = trigger('sortAsc', [
    // ...
    state(SortDirection.ASC, style(activeStyle)),
    state(SortDirection.DESC, style(inactiveStyle)),
    state(SortDirection.NONE, style(inactiveStyle)),
    transition('* => ascending', [animate('1s')]),
    transition('ascending => *', [animate('0.5s')]),
]);
const sortDescAnim = trigger('sortDesc', [
    // ...
    state(SortDirection.ASC, style(inactiveStyle)),
    state(SortDirection.DESC, style(activeStyle)),
    state(SortDirection.NONE, style(inactiveStyle)),
    transition('* => descending', [animate('1s')]),
    transition('descending => *', [animate('0.5s')]),
]);
const sortNoneAnim = trigger('sortNone', [
    // ...
    state(SortDirection.ASC, style(inactiveStyle)),
    state(SortDirection.DESC, style(inactiveStyle)),
    state(SortDirection.NONE, style(activeStyle)),
    transition('* => none', [animate('1s')]),
    transition('none => *', [animate('0.5s')]),
]);

class NovoDataTableSortButton {
    constructor(state, ref, labels) {
        this.state = state;
        this.ref = ref;
        this.labels = labels;
        this.sortChange = new EventEmitter();
        this.SortDirection = SortDirection;
        this._value = SortDirection.NONE;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
    }
    get isActive() {
        return this.value !== SortDirection.NONE;
    }
    changeSort(dir) {
        this.value = dir;
        this.sortChange.emit(dir);
    }
    clearSort() {
        this.state.clearSort();
        this.sortChange.emit(SortDirection.NONE);
    }
}
NovoDataTableSortButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableSortButton, deps: [{ token: DataTableState }, { token: i0.ChangeDetectorRef }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableSortButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableSortButton, selector: "novo-sort-button", inputs: { value: "value" }, outputs: { sortChange: "sortChange" }, ngImport: i0, template: "<novo-icon\n  class=\"novo-sort-asc-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortAsc]=\"value\"\n  (click)=\"changeSort(SortDirection.DESC)\">arrow-up</novo-icon>\n<novo-icon\n  class=\"novo-sort-desc-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortDesc]=\"value\"\n  (click)=\"changeSort(SortDirection.NONE)\">arrow-down</novo-icon>\n<novo-icon\n  class=\"novo-sortable-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortNone]=\"value\"\n  (click)=\"changeSort(SortDirection.ASC)\">sortable</novo-icon>", styles: [":host{display:inline-flex;position:relative;width:1.6rem;height:1.6rem;cursor:pointer}:host novo-icon{position:absolute;opacity:0;color:var(--text-muted)}:host novo-icon:hover{color:var(--selection)}:host .novo-sort-asc-icon{top:10px;color:var(--selection)}:host .novo-sort-desc-icon{top:-10px;color:var(--selection)}\n"], components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }], animations: [sortAscAnim, sortDescAnim, sortNoneAnim], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableSortButton, decorators: [{
            type: Component,
            args: [{ selector: 'novo-sort-button', changeDetection: ChangeDetectionStrategy.OnPush, animations: [sortAscAnim, sortDescAnim, sortNoneAnim], template: "<novo-icon\n  class=\"novo-sort-asc-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortAsc]=\"value\"\n  (click)=\"changeSort(SortDirection.DESC)\">arrow-up</novo-icon>\n<novo-icon\n  class=\"novo-sort-desc-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortDesc]=\"value\"\n  (click)=\"changeSort(SortDirection.NONE)\">arrow-down</novo-icon>\n<novo-icon\n  class=\"novo-sortable-icon\"\n  [class.sort-active]=\"isActive\"\n  [@sortNone]=\"value\"\n  (click)=\"changeSort(SortDirection.ASC)\">sortable</novo-icon>", styles: [":host{display:inline-flex;position:relative;width:1.6rem;height:1.6rem;cursor:pointer}:host novo-icon{position:absolute;opacity:0;color:var(--text-muted)}:host novo-icon:hover{color:var(--selection)}:host .novo-sort-asc-icon{top:10px;color:var(--selection)}:host .novo-sort-desc-icon{top:-10px;color:var(--selection)}\n"] }]
        }], ctorParameters: function () { return [{ type: DataTableState }, { type: i0.ChangeDetectorRef }, { type: NovoLabelService }]; }, propDecorators: { sortChange: [{
                type: Output
            }], value: [{
                type: Input
            }] } });

class NovoDataTableSortFilter {
    constructor(state) {
        this.state = state;
    }
    filter(id, type, value, transform, allowMultipleFilters = false, selectedOption) {
        let filter;
        if (allowMultipleFilters) {
            filter = this.resolveMultiFilter(id, type, value, transform, selectedOption);
        }
        else {
            if (!Helpers.isBlank(value)) {
                filter = { id, type, value, transform, ...(selectedOption && { selectedOption }) };
            }
            else {
                filter = undefined;
            }
        }
        this.state.filter = filter;
        this.state.checkRetainment('filter');
        this.state.reset(false, true);
        this.state.updates.next({ filter, sort: this.state.sort });
        this.state.onSortFilterChange();
    }
    sort(id, value, transform) {
        const sort = { id, value, transform };
        this.state.sort = sort;
        this.state.checkRetainment('sort');
        this.state.reset(false, true);
        this.state.updates.next({ sort, filter: this.state.filter });
        this.state.onSortFilterChange();
    }
    resolveMultiFilter(id, type, value, transform, selectedOption) {
        let filter;
        filter = Helpers.convertToArray(this.state.filter);
        const filterIndex = filter.findIndex((aFilter) => aFilter && aFilter.id === id);
        if (filterIndex > -1) {
            filter.splice(filterIndex, 1);
        }
        if (!Helpers.isBlank(value)) {
            filter = [...filter, { id, type, value, transform, ...(selectedOption && { selectedOption }) }];
        }
        if (filter.length < 1) {
            filter = undefined;
        }
        return filter;
    }
}
NovoDataTableSortFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableSortFilter, deps: [{ token: DataTableState }], target: i0.ɵɵFactoryTarget.Directive });
NovoDataTableSortFilter.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableSortFilter, selector: "[novoDataTableSortFilter]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableSortFilter, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoDataTableSortFilter]',
                }]
        }], ctorParameters: function () { return [{ type: DataTableState }]; } });

// NG2
class NovoFlexElement {
    constructor() {
        this.direction = 'row';
        this.align = 'center';
        this.justify = 'flex-start';
        this.wrap = 'nowrap';
    }
    get display() {
        return 'flex';
    }
}
NovoFlexElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFlexElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoFlexElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFlexElement, selector: "novo-flex,novo-row", inputs: { direction: "direction", align: "align", justify: "justify", wrap: "wrap", gap: "gap" }, host: { properties: { "style.display": "this.display", "style.flex-direction": "this.direction", "style.align-items": "this.align", "style.justify-content": "this.justify", "style.flex-wrap": "this.wrap", "style.gap": "this.gap" } }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFlexElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-flex,novo-row',
                    template: ` <ng-content></ng-content> `,
                }]
        }], propDecorators: { display: [{
                type: HostBinding,
                args: ['style.display']
            }], direction: [{
                type: HostBinding,
                args: ['style.flex-direction']
            }, {
                type: Input
            }], align: [{
                type: HostBinding,
                args: ['style.align-items']
            }, {
                type: Input
            }], justify: [{
                type: HostBinding,
                args: ['style.justify-content']
            }, {
                type: Input
            }], wrap: [{
                type: HostBinding,
                args: ['style.flex-wrap']
            }, {
                type: Input
            }], gap: [{
                type: HostBinding,
                args: ['style.gap']
            }, {
                type: Input
            }] } });
class NovoStackElement extends NovoFlexElement {
    constructor() {
        super(...arguments);
        this.direction = 'column';
        this.align = 'start';
    }
}
NovoStackElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStackElement, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoStackElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoStackElement, selector: "novo-stack,novo-column", inputs: { direction: "direction", align: "align" }, host: { properties: { "style.flex-direction": "this.direction", "style.align-items": "this.align" } }, usesInheritance: true, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStackElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-stack,novo-column',
                    template: ` <ng-content></ng-content> `,
                }]
        }], propDecorators: { direction: [{
                type: HostBinding,
                args: ['style.flex-direction']
            }, {
                type: Input
            }], align: [{
                type: HostBinding,
                args: ['style.align-items']
            }, {
                type: Input
            }] } });

// Value accessor for the component (supports ngModel)
const DATE_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDatePickerElement),
    multi: true,
};
class NovoDatePickerElement {
    constructor(labels, element, cdr, _sanitizer) {
        this.labels = labels;
        this.element = element;
        this.cdr = cdr;
        this._sanitizer = _sanitizer;
        /**
         * Day of the week the calendar should display first, Sunday=0...Saturday=6
         **/
        this.weekStart = 0;
        /**
         * Certain dates that are already selected.
         **/
        this.preselected = [];
        /**
         * Whether the days for the previous and next month should be hidden.
         **/
        this.hideOverflowDays = false;
        /**
         * Whether the footer which contains `today` button should be hidden.
         **/
        this.hideFooter = false;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        this._mode = 'single';
        this._numberOfMonths = [0];
        this._selection = [];
        this.preview = [];
        this.rangeSelectMode = 'startDate';
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    /**
     * Number of months to display at once.
     * @default 1
     **/
    get numberOfMonths() {
        return this._numberOfMonths.length;
    }
    set numberOfMonths(value) {
        this._numberOfMonths = Array.from(Array(Number(value)).keys());
    }
    /**
     * How the date selection should work.
     * @default single
     **/
    get mode() {
        return this._mode;
    }
    set mode(value) {
        if (this._mode !== value) {
            this._mode = value;
        }
    }
    /**
     * **deprecated** please use `mode="range"`.
     **/
    get range() {
        return ['range', 'week'].includes(this.mode) || this._range;
    }
    set range(value) {
        console.warn(`'range' property is deprecated, please use 'mode="range"'.`);
        if (this._range !== value) {
            this._range = value;
            this.mode = 'range';
        }
    }
    /**
     * **deprecated** please use `mode="week"`.
     **/
    get weekRangeSelect() {
        return this._mode === 'week' || this._weekRangeSelect;
    }
    set weekRangeSelect(value) {
        console.warn(`'weekRangeSelect' property is deprecated, please use 'mode="week"'.`);
        if (this._weekRangeSelect !== value) {
            this._weekRangeSelect = value;
            this.mode = 'week';
        }
    }
    get selection() {
        return this._selection;
    }
    set selection(value) {
        this._selection = value ? value.filter(isDate).map((d) => startOfDay(d)) : [];
    }
    ngOnInit() {
        // Determine the year array
        const now = new Date();
        // Set labels
        if (this.model) {
            this.modelToSelection(this.model);
        }
        if (this.selection && this.selection.length) {
            this.updateView(this.selection[0]);
        }
    }
    updateView(date) {
        const value = date ? new Date(date) : new Date();
        this.activeDate = new Date(value);
    }
    updateSelection(selected, fireEvents = true) {
        // Helpers.swallowEvent(event);
        this.selection = selected;
        this.startDateLabel = this.labels.formatDateWithFormat(this.selection[0], {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
        this.endDateLabel = this.labels.formatDateWithFormat(this.selection[1], {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
        if (fireEvents) {
            switch (this.mode) {
                case 'multiple':
                    this.fireSelect();
                    // Also, update the ngModel
                    this._onChange(this.selection);
                    this.model = this.selection;
                    break;
                case 'range':
                case 'week':
                    if (this.selection.filter(Boolean).length === 2) {
                        this.fireRangeSelect();
                        // Also, update the ngModel
                        const model = {
                            startDate: this.selection[0],
                            endDate: this.selection[1],
                        };
                        this._onChange(model);
                        this.model = model;
                    }
                    break;
                case 'single':
                default:
                    this.fireSelect();
                    // Also, update the ngModel
                    this._onChange(this.selection[0]);
                    this.model = this.selection[0];
                    break;
            }
        }
        this.cdr.markForCheck();
    }
    eventData(date) {
        return {
            year: date.getFullYear(),
            month: this.labels.formatDateWithFormat(date, { month: 'long' }),
            day: this.labels.formatDateWithFormat(date, { weekday: 'long' }),
            date,
        };
    }
    fireSelect() {
        if (this.mode === 'multiple') {
            this.onSelect.next(this.selection);
        }
        else {
            this.onSelect.next(this.eventData(this.selection[0]));
        }
    }
    fireRangeSelect() {
        // Make sure the start date is before the end date
        if (this.selection.filter(Boolean).length === 2) {
            const [start, end] = this.selection;
            this.onSelect.next({
                startDate: this.eventData(start),
                endDate: this.eventData(end),
            });
        }
    }
    setToday() {
        const tmp = new Date();
        this.updateView(tmp);
        this.updateSelection(Array.of(tmp));
    }
    toggleRangeSelect(range) {
        this.rangeSelectMode = range;
        if (range === 'startDate' && this.selection.length) {
            this.updateView(this.selection[0]);
        }
        if (range === 'endDate' && this.selection.length === 2) {
            this.updateView(this.selection[1]);
        }
    }
    modelToSelection(model) {
        switch (this.mode) {
            case 'multiple':
                this.selection = model;
                break;
            case 'range':
            case 'week':
                this.setRangeSelection();
            case 'single':
            default:
                this.selection = [model];
                break;
        }
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (this.mode === 'multiple') {
            this.selection = this.model;
        }
        if (this.mode === 'range') {
            this.setRangeSelection();
        }
        if (Helpers.isDate(model)) {
            this.updateView(model);
            this.modelToSelection(model);
        }
        else if (Helpers.isString(model)) {
            const date = parse(model);
            if (isValid(date)) {
                this.updateView(date);
                this.modelToSelection(date);
            }
        }
    }
    setRangeSelection() {
        if (this.model?.hasOwnProperty('startDate')) {
            // coming from standalone date picker
            const range = this.model;
            this.selection = [range.startDate, range.endDate].filter(Boolean);
        }
        else if (this.model?.hasOwnProperty('min')) {
            // coming from data-table filter where model end date is the beginning of the next day
            const range = this.model;
            this.selection = [range.min, subDays(range.max, 1)].filter(Boolean);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDatePickerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerElement, deps: [{ token: NovoLabelService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoDatePickerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDatePickerElement, selector: "novo-date-picker", inputs: { minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", inline: "inline", weekStart: "weekStart", preselected: "preselected", hideOverflowDays: "hideOverflowDays", hideFooter: "hideFooter", disabledDateMessage: "disabledDateMessage", numberOfMonths: "numberOfMonths", mode: "mode", range: "range", weekRangeSelect: "weekRangeSelect" }, outputs: { onSelect: "onSelect" }, host: { properties: { "class.hide-overflow-days": "this.hideOverflowDays" } }, providers: [DATE_PICKER_VALUE_ACCESSOR], ngImport: i0, template: `
    <div class="date-picker-container">
      <div class="date-range-tabs" *ngIf="range" [class.week-select-mode]="weekRangeSelect">
        <span
          class="range-tab"
          (click)="toggleRangeSelect('startDate')"
          [@startDateTextState]="rangeSelectMode"
          data-automation-id="calendar-start-date"
          >{{ startDateLabel }}</span
        >
        <span
          class="range-tab"
          (click)="toggleRangeSelect('endDate')"
          [@endDateTextState]="rangeSelectMode"
          data-automation-id="calendar-end-date"
          >{{ endDateLabel }}</span
        >
        <i class="indicator" [@indicatorState]="rangeSelectMode"></i>
      </div>

      <novo-calendar
        [activeDate]="activeDate"
        [(selected)]="selection"
        (selectedChange)="updateSelection($event)"
        [mode]="mode"
        [numberOfMonths]="numberOfMonths"
        [weekStartsOn]="weekStart"
        [disabledDateMessage]="disabledDateMessage"
        [minDate]="start"
        [maxDate]="end"
      ></novo-calendar>

      <div class="calendar-footer" [hidden]="hideFooter">
        <novo-button (click)="setToday()" class="today" size="small" data-automation-id="calendar-today">{{ labels.today }}</novo-button>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoCalendarElement, selector: "novo-calendar", inputs: ["minYear", "maxYear", "minDate", "maxDate", "activeView", "layout", "selected", "preview", "overlays", "disabledDateMessage", "activeDate", "weekStartsOn", "numberOfMonths", "mode"], outputs: ["selectedChange", "previewChange", "activeDateChange"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [
        trigger('startDateTextState', [
            state('startDate', style({
                opacity: '1.0',
            })),
            state('endDate', style({
                opacity: '0.6',
            })),
            transition('startDate <=> endDate', animate('200ms ease-in')),
        ]),
        trigger('endDateTextState', [
            state('startDate', style({
                opacity: '0.6',
            })),
            state('endDate', style({
                opacity: '1.0',
            })),
            transition('startDate <=> endDate', animate('200ms ease-in')),
        ]),
        trigger('indicatorState', [
            state('startDate', style({
                transform: 'translateX(0%)',
            })),
            state('endDate', style({
                transform: 'translateX(100%)',
            })),
            transition('startDate <=> endDate', animate('200ms ease-in')),
        ]),
    ] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDatePickerElement.prototype, "inline", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDatePickerElement.prototype, "hideOverflowDays", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoDatePickerElement.prototype, "hideFooter", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-date-picker',
                    providers: [DATE_PICKER_VALUE_ACCESSOR],
                    animations: [
                        trigger('startDateTextState', [
                            state('startDate', style({
                                opacity: '1.0',
                            })),
                            state('endDate', style({
                                opacity: '0.6',
                            })),
                            transition('startDate <=> endDate', animate('200ms ease-in')),
                        ]),
                        trigger('endDateTextState', [
                            state('startDate', style({
                                opacity: '0.6',
                            })),
                            state('endDate', style({
                                opacity: '1.0',
                            })),
                            transition('startDate <=> endDate', animate('200ms ease-in')),
                        ]),
                        trigger('indicatorState', [
                            state('startDate', style({
                                transform: 'translateX(0%)',
                            })),
                            state('endDate', style({
                                transform: 'translateX(100%)',
                            })),
                            transition('startDate <=> endDate', animate('200ms ease-in')),
                        ]),
                    ],
                    template: `
    <div class="date-picker-container">
      <div class="date-range-tabs" *ngIf="range" [class.week-select-mode]="weekRangeSelect">
        <span
          class="range-tab"
          (click)="toggleRangeSelect('startDate')"
          [@startDateTextState]="rangeSelectMode"
          data-automation-id="calendar-start-date"
          >{{ startDateLabel }}</span
        >
        <span
          class="range-tab"
          (click)="toggleRangeSelect('endDate')"
          [@endDateTextState]="rangeSelectMode"
          data-automation-id="calendar-end-date"
          >{{ endDateLabel }}</span
        >
        <i class="indicator" [@indicatorState]="rangeSelectMode"></i>
      </div>

      <novo-calendar
        [activeDate]="activeDate"
        [(selected)]="selection"
        (selectedChange)="updateSelection($event)"
        [mode]="mode"
        [numberOfMonths]="numberOfMonths"
        [weekStartsOn]="weekStart"
        [disabledDateMessage]="disabledDateMessage"
        [minDate]="start"
        [maxDate]="end"
      ></novo-calendar>

      <div class="calendar-footer" [hidden]="hideFooter">
        <novo-button (click)="setToday()" class="today" size="small" data-automation-id="calendar-today">{{ labels.today }}</novo-button>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$2.DomSanitizer }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], inline: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], preselected: [{
                type: Input
            }], hideOverflowDays: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.hide-overflow-days']
            }], hideFooter: [{
                type: Input
            }], disabledDateMessage: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], numberOfMonths: [{
                type: Input
            }], mode: [{
                type: Input
            }], range: [{
                type: Input
            }], weekRangeSelect: [{
                type: Input
            }] } });

class NovoDataTableCellHeader {
    constructor(changeDetectorRef, labels, state, renderer, elementRef, _sort, _cdkColumnDef) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.allowMultipleFilters = false;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.sortValue = SortDirection.NONE;
        this.showCustomRange = false;
        this.multiSelect = false;
        this.multiSelectedOptions = [];
        this.multiSelectedOptionIsHidden = [];
        this.optionFilter = '';
        this.error = false;
        this.subscriptions = [];
        this._rerenderSubscription = state.updates.subscribe((change) => this.checkSortFilterState(change));
    }
    set column(column) {
        this._column = column;
        this.label = column.type === 'action' ? '' : column.label;
        this.labelIcon = column.labelIcon;
        this.config = {
            sortable: !!column.sortable,
            filterable: !!column.filterable,
            resizable: !!column.resizable,
        };
        this.resizable = this.config.resizable;
        const transforms = {};
        if (column.filterable && Helpers.isObject(column.filterable)) {
            this.config.filterConfig = column.filterable;
            if (!this.config.filterConfig.type) {
                this.config.filterConfig = { type: 'text' };
            }
            if (column.filterable.transform) {
                transforms.filter = column.filterable.transform;
            }
        }
        else {
            this.config.filterConfig = { type: 'text' };
        }
        if (column.sortable && Helpers.isObject(column.sortable)) {
            if (column.sortable.transform) {
                transforms.sort = column.sortable.transform;
            }
        }
        if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
            this.config.filterConfig.options = this.getDefaultDateFilterOptions();
        }
        this.config.transforms = transforms;
    }
    ngOnInit() {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        this.setupFilterOptions();
        this.changeDetectorRef.markForCheck();
    }
    setupFilterOptions() {
        this.checkSortFilterState({ filter: this.state.filter, sort: this.state.sort }, true);
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? [...this.filter] : [];
        }
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
        this.subscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
    }
    checkSortFilterState(sortFilterState, initialConfig = false) {
        if (sortFilterState.sort && sortFilterState.sort.id === this.id) {
            this.icon = `sort-${sortFilterState.sort.value}`;
            this.sortValue = sortFilterState.sort.value === 'asc' ? SortDirection.ASC : SortDirection.DESC;
            this.sortActive = true;
        }
        else {
            this.icon = 'sortable';
            this.sortValue = SortDirection.NONE;
            this.sortActive = false;
        }
        const tableFilter = Helpers.convertToArray(sortFilterState.filter);
        const thisFilter = tableFilter.find((filter) => filter && filter.id === this.id);
        if (thisFilter) {
            this.filterActive = true;
            if (initialConfig && thisFilter.type === 'date' && thisFilter.selectedOption) {
                this.activeDateFilter = thisFilter.selectedOption.label || this.labels.customDateRange;
            }
            this.filter = thisFilter.value;
        }
        else {
            this.filterActive = false;
            this.filter = undefined;
            this.activeDateFilter = undefined;
            this.multiSelectedOptions = [];
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = `sort-${this.defaultSort.value}`;
            this.sortActive = true;
        }
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? [...this.filter] : [];
            if (this.config.filterConfig.options) {
                if (typeof this.config.filterConfig.options[0] === 'string') {
                    this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map((option) => ({ option, hidden: false }));
                }
                else {
                    this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map((option) => ({
                        option,
                        hidden: false,
                    }));
                }
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    isSelected(option, optionsList) {
        if (optionsList) {
            const optionValue = option.hasOwnProperty('value') ? option.value : option;
            const found = optionsList.find((item) => this.optionPresentCheck(item, optionValue));
            return found !== undefined;
        }
        return false;
    }
    toggleSelection(option) {
        const optionValue = option.hasOwnProperty('value') ? option.value : option;
        const optionIndex = this.multiSelectedOptions.findIndex((item) => this.optionPresentCheck(item, optionValue));
        this.error = false;
        if (optionIndex > -1) {
            this.multiSelectedOptions.splice(optionIndex, 1);
            if (this.optionFilter && !this.getOptionText(option).toLowerCase().startsWith(this.optionFilter.toLowerCase())) {
                this.multiSelectedOptionIsHidden[this.multiSelectedOptionIsHidden.findIndex((record) => record.option === option)].hidden = true;
            }
        }
        else {
            this.multiSelectedOptions.push(optionValue);
        }
    }
    optionPresentCheck(item, optionValue) {
        if (item.hasOwnProperty('value')) {
            return item.value === optionValue;
        }
        else {
            return item === optionValue;
        }
    }
    cancel() {
        this.multiSelectedOptions = this.filter ? [...this.filter] : [];
        this.dropdown.closePanel();
        this.clearOptionFilter();
    }
    filterMultiSelect() {
        if (this.multiSelectedOptions.length === 0 && !this.filter) {
            this.multiSelectHasVisibleOptions() && this.dropdown ? (this.error = true) : null;
        }
        else {
            this.clearOptionFilter();
            const actualFilter = this.multiSelectedOptions.length > 0 ? [...this.multiSelectedOptions] : undefined;
            this.filterData(actualFilter);
            this.dropdown.closePanel();
        }
    }
    multiSelectOptionFilter(optionFilter) {
        this.multiSelectedOptionIsHidden.forEach((record) => {
            if (record.option) {
                record.hidden = !(this.getOptionText(record.option).toLowerCase().startsWith(optionFilter.toLowerCase()) ||
                    this.isSelected(record.option, this.multiSelectedOptions));
            }
        });
    }
    multiSelectOptionIsHidden(option) {
        return this.multiSelectedOptionIsHidden.find((record) => record.option === option).hidden;
    }
    multiSelectHasVisibleOptions() {
        return this.multiSelectedOptionIsHidden.some((record) => !record.hidden);
    }
    getOptionText(option) {
        if (typeof option !== 'object') {
            return option.toString();
        }
        else {
            const opt = option;
            return (opt.label.length > 0 ? opt.label : opt.value).toString();
        }
    }
    multiSelectOptionFilterHandleKeydown(event) {
        if (this.multiSelect) {
            this.error = false;
            if (this.dropdown.panelOpen && event.key === "Escape" /* Escape */) {
                // escape = clear text box and close
                Helpers.swallowEvent(event);
                this.clearOptionFilter();
                this.dropdown.closePanel();
            }
            else if (event.key === "Enter" /* Enter */) {
                Helpers.swallowEvent(event);
                this.filterMultiSelect();
            }
            else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
                (event.keyCode >= 96 && event.keyCode <= 105) ||
                (event.keyCode >= 48 && event.keyCode <= 57)) {
                this.optionFilterInput.nativeElement.focus();
            }
        }
    }
    handleEscapeKeydown(event) {
        if (!this.multiSelect) {
            this.error = false;
            this.dropdown.closePanel();
        }
    }
    clearOptionFilter() {
        this.error = false;
        if (this.optionFilter.length > 0) {
            this.optionFilter = '';
            this.multiSelectedOptionIsHidden.forEach((record) => {
                record.hidden = false;
            });
        }
    }
    startResize(mouseDownEvent) {
        mouseDownEvent.preventDefault();
        const minimumWidth = 60 + (this.config.filterable ? 30 : 0) + (this.config.sortable ? 30 : 0);
        const startingWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
        const mouseMoveSubscription = fromEvent(window.document, 'mousemove').subscribe((middleMouseEvent) => {
            const differenceWidth = middleMouseEvent.clientX - mouseDownEvent.clientX;
            let width = startingWidth + differenceWidth;
            if (width < minimumWidth) {
                width = minimumWidth;
            }
            this._column.width = width;
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this._column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this._column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this._column.width}px`);
            this.changeDetectorRef.markForCheck();
            this.resized.next(this._column);
        });
        const mouseUpSubscription = fromEvent(window.document, 'mouseup').subscribe(() => {
            mouseUpSubscription.unsubscribe();
            mouseMoveSubscription.unsubscribe();
            this.changeDetectorRef.markForCheck();
        });
        this.subscriptions.push(mouseMoveSubscription);
        this.subscriptions.push(mouseUpSubscription);
    }
    toggleCustomRange(event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    }
    focusInput() {
        if (this.filterInput && this.filterInput.nativeElement) {
            setTimeout(() => this.filterInput.nativeElement.focus(), 0);
        }
        if (this.multiSelect && this.dropdown) {
            this.dropdown._handleKeydown = (event) => {
                this.multiSelectOptionFilterHandleKeydown(event);
            };
            // setTimeout(() => this.optionFilterInput.nativeElement.focus(), 0);
            this.changeDetectorRef.markForCheck();
        }
    }
    sort() {
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            this.direction = this.getNextSortDirection(this.direction);
            this._sort.sort(this.id, this.direction, this.config.transforms.sort);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    filterData(filter) {
        let actualFilter = NovoDataTableFilterUtils.constructFilter(filter, this.config.filterConfig.type, this.multiSelect);
        const selectedOption = this.config.filterConfig.type === 'date' && filter ? filter : undefined;
        this.activeDateFilter = selectedOption ? selectedOption.label : undefined;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            this._sort.filter(this.id, this.config.filterConfig.type, actualFilter, this.config.transforms.filter, this.allowMultipleFilters, selectedOption);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    clearFilter() {
        this.filter = undefined;
        this.multiSelectedOptions = [];
        this.activeDateFilter = undefined;
        this.filterData(undefined);
        this.clearOptionFilter();
        this.dropdown.closePanel();
    }
    getNextSortDirection(direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    }
    getDefaultDateFilterOptions() {
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    }
}
NovoDataTableCellHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCellHeader, deps: [{ token: i0.ChangeDetectorRef }, { token: NovoLabelService }, { token: DataTableState }, { token: i0.Renderer2 }, { token: i0.ElementRef }, { token: NovoDataTableSortFilter, optional: true }, { token: i1$9.CdkColumnDef, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableCellHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableCellHeader, selector: "[novo-data-table-cell-config]", inputs: { defaultSort: "defaultSort", allowMultipleFilters: "allowMultipleFilters", resized: "resized", filterTemplate: "filterTemplate", column: ["novo-data-table-cell-config", "column"] }, host: { listeners: { "keydown": "multiSelectOptionFilterHandleKeydown($event)", "keydown.escape": "handleEscapeKeydown($event)" }, properties: { "class.resizable": "this.resizable" } }, viewQueries: [{ propertyName: "filterInput", first: true, predicate: ["filterInput"], descendants: true }, { propertyName: "dropdown", first: true, predicate: NovoDropdownElement, descendants: true }, { propertyName: "optionFilterInput", first: true, predicate: ["optionFilterInput"], descendants: true }], ngImport: i0, template: `
    <i class="bhi-{{ labelIcon }} label-icon" *ngIf="labelIcon" data-automation-id="novo-data-table-header-icon"></i>
    <label data-automation-id="novo-data-table-label">{{ label }}</label>
    <div>
      <novo-sort-button
        *ngIf="config.sortable"
        data-automation-id="novo-data-table-sort"
        tooltipPosition="left"
        [tooltip]="labels.sort"
        [attr.data-feature-id]="'novo-data-table-sort-' + this.id"
        (sortChange)="sort()"
        [value]="sortValue"
      ></novo-sort-button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-data-table-container"
        containerClass="data-table-dropdown"
        data-automation-id="novo-data-table-filter"
        [multiple]="multiSelect"
      >
        <novo-icon
          dropdownTrigger
          class="filter-button"
          [class.filter-active]="filterActive"
          [tooltip]="labels.filters"
          tooltipPosition="right"
          [attr.data-feature-id]="'novo-data-table-filter-' + this.id"
          (click)="focusInput()"
          >filter</novo-icon
        >
        <div class="header">
          <novo-label>{{ labels.filters }}</novo-label>
          <novo-button
            theme="dialogue"
            color="negative"
            size="small"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter !== null && filter !== undefined && filter !== ''"
            data-automation-id="novo-data-table-filter-clear"
          >
            {{ labels.clear }}
          </novo-button>
        </div>
        <div class="optgroup-container">
          <ng-container [ngSwitch]="config.filterConfig.type">
            <novo-optgroup *ngSwitchCase="'date'" (keydown.escape)="handleEscapeKeydown($event)">
              <ng-container *ngIf="!showCustomRange">
                <novo-option
                  [class.active]="activeDateFilter === option.label"
                  *ngFor="let option of config.filterConfig.options"
                  (click)="filterData(option)"
                  [attr.data-automation-id]="'novo-data-table-filter-' + option.label"
                >
                  <span>{{ option.label }}</span>
                  <novo-icon novoSuffix color="positive" *ngIf="activeDateFilter === option.label">check</novo-icon>
                </novo-option>
              </ng-container>
              <novo-option
                [class.active]="labels.customDateRange === activeDateFilter"
                (click)="toggleCustomRange($event, true)"
                *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              >
                <span>{{ labels.customDateRange }}</span>
                <novo-icon novoSuffix color="positive" *ngIf="labels.customDateRange === activeDateFilter">check</novo-icon>
              </novo-option>
              <novo-option class="calendar-container" *ngIf="showCustomRange" keepOpen>
                <novo-stack>
                  <div class="back-link" (click)="toggleCustomRange($event, false)">
                    <i class="bhi-previous"></i>{{ labels.backToPresetFilters }}
                  </div>
                  <novo-date-picker
                    (onSelect)="filterData($event)"
                    [(ngModel)]="filter"
                    range="true"
                    (keydown.escape)="handleEscapeKeydown($event)"
                  ></novo-date-picker>
                </novo-stack>
              </novo-option>
            </novo-optgroup>
            <novo-optgroup *ngSwitchCase="'select'">
              <novo-option
                [class.active]="filter === option"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
              >
                <span>{{ option?.label || option }}</span>
                <novo-icon novoSuffix color="positive" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"
                  >check</novo-icon
                >
              </novo-option>
            </novo-optgroup>
            <ng-container *ngSwitchCase="'multi-select'">
              <novo-optgroup class="dropdown-list-filter" (keydown)="multiSelectOptionFilterHandleKeydown($event)">
                <novo-option class="filter-search" novoInert>
                  <novo-field flex>
                    <input
                      novoInput
                      [(ngModel)]="optionFilter"
                      (ngModelChange)="multiSelectOptionFilter($event)"
                      #optionFilterInput
                      data-automation-id="novo-data-table-multi-select-option-filter-input"
                      (keydown.enter)="multiSelectOptionFilterHandleKeydown($event)"
                    />
                    <novo-icon novoSuffix>search</novo-icon>
                    <novo-error class="error-text" [hidden]="!error || !multiSelectHasVisibleOptions()">{{
                      labels.selectFilterOptions
                    }}</novo-error>
                  </novo-field>
                </novo-option>
              </novo-optgroup>
              <novo-optgroup class="dropdown-list-options" (keydown.escape)="handleEscapeKeydown($event)">
                <novo-option
                  *ngFor="let option of config.filterConfig.options"
                  [hidden]="multiSelectOptionIsHidden(option)"
                  (click)="toggleSelection(option)"
                  [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
                >
                  <span>{{ option?.label || option }}</span>
                  <novo-icon novoSuffix color="positive">{{
                    isSelected(option, multiSelectedOptions) ? 'checkbox-filled' : 'checkbox-empty'
                  }}</novo-icon>
                </novo-option>
              </novo-optgroup>
              <novo-option class="filter-null-results" [hidden]="multiSelectHasVisibleOptions()">{{ labels.pickerEmpty }}</novo-option>
            </ng-container>
            <novo-optgroup *ngSwitchCase="'custom'">
              <novo-option class="filter-search" novoInert>
                <ng-container *ngTemplateOutlet="filterTemplate; context: { $implicit: config }"></ng-container>
              </novo-option>
            </novo-optgroup>
            <novo-optgroup *ngSwitchDefault (keydown.escape)="handleEscapeKeydown($event)">
              <novo-option class="filter-search" novoInert>
                <novo-field flex fullWidth>
                  <input
                    novoInput
                    [type]="config.filterConfig.type"
                    [(ngModel)]="filter"
                    (ngModelChange)="filterData($event)"
                    #filterInput
                    data-automation-id="novo-data-table-filter-input"
                    (keydown.escape)="handleEscapeKeydown($event)"
                  />
                  <novo-icon novoSuffix>search</novo-icon>
                </novo-field>
              </novo-option>
            </novo-optgroup>
          </ng-container>
        </div>
        <div class="footer" *ngIf="multiSelect">
          <novo-button theme="dialogue" color="dark" (click)="cancel()" data-automation-id="novo-data-table-multi-select-cancel">
            {{ labels.cancel }}
          </novo-button>
          <novo-button
            theme="dialogue"
            color="positive"
            (click)="filterMultiSelect()"
            data-automation-id="novo-data-table-multi-select-filter"
          >
            {{ labels.filters }}
          </novo-button>
        </div>
      </novo-dropdown>
    </div>
    <div class="spacer"></div>
    <div class="data-table-header-resizable" *ngIf="config.resizable"><span (mousedown)="startResize($event)">&nbsp;</span></div>
  `, isInline: true, components: [{ type: NovoDataTableSortButton, selector: "novo-sort-button", inputs: ["value"], outputs: ["sortChange"] }, { type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoLabel, selector: "novo-label,[novo-label]" }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoErrorElement, selector: "novo-error" }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: NovoDropDownTrigger, selector: "[dropdownTrigger]" }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: FlexDirective, selector: "[flex]", inputs: ["flex"] }, { type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCellHeader, decorators: [{
            type: Component,
            args: [{
                    selector: '[novo-data-table-cell-config]',
                    template: `
    <i class="bhi-{{ labelIcon }} label-icon" *ngIf="labelIcon" data-automation-id="novo-data-table-header-icon"></i>
    <label data-automation-id="novo-data-table-label">{{ label }}</label>
    <div>
      <novo-sort-button
        *ngIf="config.sortable"
        data-automation-id="novo-data-table-sort"
        tooltipPosition="left"
        [tooltip]="labels.sort"
        [attr.data-feature-id]="'novo-data-table-sort-' + this.id"
        (sortChange)="sort()"
        [value]="sortValue"
      ></novo-sort-button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-data-table-container"
        containerClass="data-table-dropdown"
        data-automation-id="novo-data-table-filter"
        [multiple]="multiSelect"
      >
        <novo-icon
          dropdownTrigger
          class="filter-button"
          [class.filter-active]="filterActive"
          [tooltip]="labels.filters"
          tooltipPosition="right"
          [attr.data-feature-id]="'novo-data-table-filter-' + this.id"
          (click)="focusInput()"
          >filter</novo-icon
        >
        <div class="header">
          <novo-label>{{ labels.filters }}</novo-label>
          <novo-button
            theme="dialogue"
            color="negative"
            size="small"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter !== null && filter !== undefined && filter !== ''"
            data-automation-id="novo-data-table-filter-clear"
          >
            {{ labels.clear }}
          </novo-button>
        </div>
        <div class="optgroup-container">
          <ng-container [ngSwitch]="config.filterConfig.type">
            <novo-optgroup *ngSwitchCase="'date'" (keydown.escape)="handleEscapeKeydown($event)">
              <ng-container *ngIf="!showCustomRange">
                <novo-option
                  [class.active]="activeDateFilter === option.label"
                  *ngFor="let option of config.filterConfig.options"
                  (click)="filterData(option)"
                  [attr.data-automation-id]="'novo-data-table-filter-' + option.label"
                >
                  <span>{{ option.label }}</span>
                  <novo-icon novoSuffix color="positive" *ngIf="activeDateFilter === option.label">check</novo-icon>
                </novo-option>
              </ng-container>
              <novo-option
                [class.active]="labels.customDateRange === activeDateFilter"
                (click)="toggleCustomRange($event, true)"
                *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              >
                <span>{{ labels.customDateRange }}</span>
                <novo-icon novoSuffix color="positive" *ngIf="labels.customDateRange === activeDateFilter">check</novo-icon>
              </novo-option>
              <novo-option class="calendar-container" *ngIf="showCustomRange" keepOpen>
                <novo-stack>
                  <div class="back-link" (click)="toggleCustomRange($event, false)">
                    <i class="bhi-previous"></i>{{ labels.backToPresetFilters }}
                  </div>
                  <novo-date-picker
                    (onSelect)="filterData($event)"
                    [(ngModel)]="filter"
                    range="true"
                    (keydown.escape)="handleEscapeKeydown($event)"
                  ></novo-date-picker>
                </novo-stack>
              </novo-option>
            </novo-optgroup>
            <novo-optgroup *ngSwitchCase="'select'">
              <novo-option
                [class.active]="filter === option"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
              >
                <span>{{ option?.label || option }}</span>
                <novo-icon novoSuffix color="positive" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"
                  >check</novo-icon
                >
              </novo-option>
            </novo-optgroup>
            <ng-container *ngSwitchCase="'multi-select'">
              <novo-optgroup class="dropdown-list-filter" (keydown)="multiSelectOptionFilterHandleKeydown($event)">
                <novo-option class="filter-search" novoInert>
                  <novo-field flex>
                    <input
                      novoInput
                      [(ngModel)]="optionFilter"
                      (ngModelChange)="multiSelectOptionFilter($event)"
                      #optionFilterInput
                      data-automation-id="novo-data-table-multi-select-option-filter-input"
                      (keydown.enter)="multiSelectOptionFilterHandleKeydown($event)"
                    />
                    <novo-icon novoSuffix>search</novo-icon>
                    <novo-error class="error-text" [hidden]="!error || !multiSelectHasVisibleOptions()">{{
                      labels.selectFilterOptions
                    }}</novo-error>
                  </novo-field>
                </novo-option>
              </novo-optgroup>
              <novo-optgroup class="dropdown-list-options" (keydown.escape)="handleEscapeKeydown($event)">
                <novo-option
                  *ngFor="let option of config.filterConfig.options"
                  [hidden]="multiSelectOptionIsHidden(option)"
                  (click)="toggleSelection(option)"
                  [attr.data-automation-id]="'novo-data-table-filter-' + (option?.label || option)"
                >
                  <span>{{ option?.label || option }}</span>
                  <novo-icon novoSuffix color="positive">{{
                    isSelected(option, multiSelectedOptions) ? 'checkbox-filled' : 'checkbox-empty'
                  }}</novo-icon>
                </novo-option>
              </novo-optgroup>
              <novo-option class="filter-null-results" [hidden]="multiSelectHasVisibleOptions()">{{ labels.pickerEmpty }}</novo-option>
            </ng-container>
            <novo-optgroup *ngSwitchCase="'custom'">
              <novo-option class="filter-search" novoInert>
                <ng-container *ngTemplateOutlet="filterTemplate; context: { $implicit: config }"></ng-container>
              </novo-option>
            </novo-optgroup>
            <novo-optgroup *ngSwitchDefault (keydown.escape)="handleEscapeKeydown($event)">
              <novo-option class="filter-search" novoInert>
                <novo-field flex fullWidth>
                  <input
                    novoInput
                    [type]="config.filterConfig.type"
                    [(ngModel)]="filter"
                    (ngModelChange)="filterData($event)"
                    #filterInput
                    data-automation-id="novo-data-table-filter-input"
                    (keydown.escape)="handleEscapeKeydown($event)"
                  />
                  <novo-icon novoSuffix>search</novo-icon>
                </novo-field>
              </novo-option>
            </novo-optgroup>
          </ng-container>
        </div>
        <div class="footer" *ngIf="multiSelect">
          <novo-button theme="dialogue" color="dark" (click)="cancel()" data-automation-id="novo-data-table-multi-select-cancel">
            {{ labels.cancel }}
          </novo-button>
          <novo-button
            theme="dialogue"
            color="positive"
            (click)="filterMultiSelect()"
            data-automation-id="novo-data-table-multi-select-filter"
          >
            {{ labels.filters }}
          </novo-button>
        </div>
      </novo-dropdown>
    </div>
    <div class="spacer"></div>
    <div class="data-table-header-resizable" *ngIf="config.resizable"><span (mousedown)="startResize($event)">&nbsp;</span></div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NovoLabelService }, { type: DataTableState }, { type: i0.Renderer2 }, { type: i0.ElementRef }, { type: NovoDataTableSortFilter, decorators: [{
                    type: Optional
                }] }, { type: i1$9.CdkColumnDef, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { filterInput: [{
                type: ViewChild,
                args: ['filterInput']
            }], dropdown: [{
                type: ViewChild,
                args: [NovoDropdownElement]
            }], optionFilterInput: [{
                type: ViewChild,
                args: ['optionFilterInput']
            }], defaultSort: [{
                type: Input
            }], allowMultipleFilters: [{
                type: Input
            }], resized: [{
                type: Input
            }], filterTemplate: [{
                type: Input
            }], resizable: [{
                type: HostBinding,
                args: ['class.resizable']
            }], column: [{
                type: Input,
                args: ['novo-data-table-cell-config']
            }], multiSelectOptionFilterHandleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], handleEscapeKeydown: [{
                type: HostListener,
                args: ['keydown.escape', ['$event']]
            }] } });

class NovoDataTableHeaderCell extends CdkHeaderCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
    }
    ngOnInit() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoDataTableHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableHeaderCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NovoDataTableHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableHeaderCell, selector: "novo-data-table-header-cell", inputs: { column: "column" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableHeaderCell, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-data-table-header-cell',
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], column: [{
                type: Input
            }] } });

class NovoDataTableCell extends CdkCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'gridcell';
        this.subscriptions = [];
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
    }
    ngOnInit() {
        if (this.column.cellClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
        }
        if (this.column.rightAlignCellContent) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-data-table-cell-align-right');
        }
        this.calculateWidths();
        this.subscriptions.push(this.resized.subscribe((column) => {
            if (column === this.column) {
                this.calculateWidths();
            }
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => {
            subscription.unsubscribe();
        });
    }
    calculateWidths() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoDataTableCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableCell, selector: "novo-data-table-cell", inputs: { row: "row", template: "template", column: "column", resized: "resized" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: ` <ng-container *ngTemplateOutlet="template; context: { $implicit: row, col: column }"></ng-container> `, isInline: true, directives: [{ type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-cell',
                    template: ` <ng-container *ngTemplateOutlet="template; context: { $implicit: row, col: column }"></ng-container> `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], row: [{
                type: Input
            }], template: [{
                type: Input
            }], column: [{
                type: Input
            }], resized: [{
                type: Input
            }] } });

class NovoDataTableCheckboxCell extends CdkCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'gridcell';
        this.maxSelected = undefined;
        this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
        this.selectionSubscription = this.dataTable.state.selectionSource.subscribe(() => {
            this.checked = this.dataTable.isSelected(this.row) || (this.dataTable?.canSelectAll && this.dataTable?.allMatchingSelected);
            this.ref.markForCheck();
        });
        this.resetSubscription = this.dataTable.state.resetSource.subscribe(() => {
            this.checked = false;
            this.ref.markForCheck();
        });
    }
    get isAtLimit() {
        return this.maxSelected && this.dataTable.state.selectedRows.size >= this.maxSelected && !this.checked;
    }
    ngOnInit() {
        this.checked = this.dataTable.isSelected(this.row) || (this.dataTable?.canSelectAll && this.dataTable?.allMatchingSelected);
    }
    onClick() {
        if (!this.isAtLimit) {
            this.dataTable.selectRow(this.row, 'onClick');
        }
    }
    getTooltip() {
        return this.isAtLimit ? 'More than ' + this.maxSelected + ' items are not able to be selected at one time' : '';
    }
    ngOnDestroy() {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    }
}
NovoDataTableCheckboxCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCheckboxCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NOVO_DATA_TABLE_REF }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableCheckboxCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableCheckboxCell, selector: "novo-data-table-checkbox-cell", inputs: { row: "row", maxSelected: "maxSelected" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: `
    <div class="data-table-checkbox" (click)="onClick()" [tooltip]="getTooltip()" tooltipPosition="right">
      <input type="checkbox" [checked]="checked" />
      <label>
        <i [class.bhi-checkbox-disabled]="isAtLimit" [class.bhi-checkbox-empty]="!checked" [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `, isInline: true, directives: [{ type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableCheckboxCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-checkbox-cell',
                    template: `
    <div class="data-table-checkbox" (click)="onClick()" [tooltip]="getTooltip()" tooltipPosition="right">
      <input type="checkbox" [checked]="checked" />
      <label>
        <i [class.bhi-checkbox-disabled]="isAtLimit" [class.bhi-checkbox-empty]="!checked" [class.bhi-checkbox-filled]="checked"></i>
      </label>
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_DATA_TABLE_REF]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], row: [{
                type: Input
            }], maxSelected: [{
                type: Input
            }] } });

class NovoDataTableExpandCell extends CdkCell {
    constructor(columnDef, elementRef, renderer, dataTable, ref) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this.dataTable = dataTable;
        this.ref = ref;
        this.role = 'gridcell';
        this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-expand-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-cell');
        this.expandSubscription = this.dataTable.state.expandSource.subscribe(() => {
            this.expanded = this.dataTable.isExpanded(this.row);
            this.ref.markForCheck();
        });
    }
    ngOnInit() {
        this.expanded = this.dataTable.isExpanded(this.row);
    }
    onClick() {
        this.dataTable.expandRow(this.row);
    }
    ngOnDestroy() {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    }
}
NovoDataTableExpandCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableExpandCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NOVO_DATA_TABLE_REF }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableExpandCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableExpandCell, selector: "novo-data-table-expand-cell", inputs: { row: "row" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: ` <i class="bhi-next data-table-icon" novo-data-table-expander="true" [class.expanded]="expanded"></i> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableExpandCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-expand-cell',
                    template: ` <i class="bhi-next data-table-icon" novo-data-table-expander="true" [class.expanded]="expanded"></i> `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_DATA_TABLE_REF]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], row: [{
                type: Input
            }] } });

class NovoDataTableClearButton {
    constructor(state, ref, labels) {
        this.state = state;
        this.ref = ref;
        this.labels = labels;
        this.selectedClear = new EventEmitter();
        this.sortClear = new EventEmitter();
        this.filterClear = new EventEmitter();
        this.queryClear = new EventEmitter();
        this.allClear = new EventEmitter();
    }
    clearSort() {
        this.state.clearSort();
        this.sortClear.emit(true);
    }
    clearFilter() {
        this.state.clearFilter();
        this.filterClear.emit(true);
    }
    clearSearch() {
        this.state.clearQuery();
        this.queryClear.emit(true);
    }
    clearSelected() {
        this.state.clearSelected();
        this.selectedClear.emit(true);
    }
    clearAll() {
        this.state.reset();
        this.allClear.emit(true);
        this.selectedClear.emit(true);
        this.sortClear.emit(true);
        this.filterClear.emit(true);
        this.queryClear.emit(true);
    }
}
NovoDataTableClearButton.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableClearButton, deps: [{ token: DataTableState }, { token: i0.ChangeDetectorRef }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTableClearButton.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableClearButton, selector: "novo-data-table-clear-button", outputs: { selectedClear: "selectedClear", sortClear: "sortClear", filterClear: "filterClear", queryClear: "queryClear", allClear: "allClear" }, ngImport: i0, template: `
    <novo-dropdown side="bottom-right" class="novo-data-table-clear-button" data-automation-id="novo-data-table-clear-dropdown">
      <novo-button type="button" theme="primary" color="negative" icon="collapse" data-automation-id="novo-data-table-clear-dropdown-btn">
        {{ labels.clear }}
      </novo-button>
      <list>
        <item
          *ngIf="state.selected.length > 0"
          (click)="clearSelected()"
          data-automation-id="novo-data-table-clear-dropdown-clear-selected"
          >{{ labels.clearSelected }}</item>
        <item *ngIf="state.sort" (click)="clearSort()" data-automation-id="novo-data-table-clear-dropdown-clear-sort">{{
          labels.clearSort
        }}</item>
        <item *ngIf="state.filter || state.globalSearch" (click)="clearFilter()" data-automation-id="novo-data-table-clear-dropdown-clear-filter">{{
          labels.clearFilter
        }}</item>
        <item *ngIf="state.where" (click)="clearSearch()" data-automation-id="novo-data-table-clear-dropdown-clear-search">{{
          labels.clearSearch
        }}</item>
        <item *ngIf="(state.sort && (state.filter || state.globalSearch)) || (state.sort && state.where) || (state.where && (state.filter || state.globalSearch))"
          (click)="clearAll()" data-automation-id="novo-data-table-clear-dropdown-clear-all"><b>{{
          labels.clearAllNormalCase
        }}</b></item>
      </list>
    </novo-dropdown>
  `, isInline: true, components: [{ type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoDropdownListElement, selector: "list" }, { type: NovoItemElement, selector: "item", inputs: ["disabled", "keepOpen"], outputs: ["action"] }], directives: [{ type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableClearButton, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-clear-button',
                    template: `
    <novo-dropdown side="bottom-right" class="novo-data-table-clear-button" data-automation-id="novo-data-table-clear-dropdown">
      <novo-button type="button" theme="primary" color="negative" icon="collapse" data-automation-id="novo-data-table-clear-dropdown-btn">
        {{ labels.clear }}
      </novo-button>
      <list>
        <item
          *ngIf="state.selected.length > 0"
          (click)="clearSelected()"
          data-automation-id="novo-data-table-clear-dropdown-clear-selected"
          >{{ labels.clearSelected }}</item>
        <item *ngIf="state.sort" (click)="clearSort()" data-automation-id="novo-data-table-clear-dropdown-clear-sort">{{
          labels.clearSort
        }}</item>
        <item *ngIf="state.filter || state.globalSearch" (click)="clearFilter()" data-automation-id="novo-data-table-clear-dropdown-clear-filter">{{
          labels.clearFilter
        }}</item>
        <item *ngIf="state.where" (click)="clearSearch()" data-automation-id="novo-data-table-clear-dropdown-clear-search">{{
          labels.clearSearch
        }}</item>
        <item *ngIf="(state.sort && (state.filter || state.globalSearch)) || (state.sort && state.where) || (state.where && (state.filter || state.globalSearch))"
          (click)="clearAll()" data-automation-id="novo-data-table-clear-dropdown-clear-all"><b>{{
          labels.clearAllNormalCase
        }}</b></item>
      </list>
    </novo-dropdown>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: DataTableState }, { type: i0.ChangeDetectorRef }, { type: NovoLabelService }]; }, propDecorators: { selectedClear: [{
                type: Output
            }], sortClear: [{
                type: Output
            }], filterClear: [{
                type: Output
            }], queryClear: [{
                type: Output
            }], allClear: [{
                type: Output
            }] } });

class NovoDataTableExpandDirective {
    constructor(vcRef, state, dataTable) {
        this.vcRef = vcRef;
        this.state = state;
        this.dataTable = dataTable;
        this.shouldExpandAllRows = (targetId) => targetId === undefined;
        this.shouldExpandOneRow = (targetId) => targetId === this.row.id;
        this.subscription = this.state.expandSource.subscribe((targetId) => {
            if (this.shouldExpandAllRows(targetId) || this.shouldExpandOneRow(targetId)) {
                if (dataTable.isExpanded(this.row)) {
                    this.render();
                }
                else {
                    this.clear();
                }
            }
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onClick(event) {
        if (event.target.hasAttribute('novo-data-table-expander')) {
            Helpers.swallowEvent(event);
            this.dataTable.expandRow(this.row);
        }
    }
    clear() {
        this.vcRef.clear();
    }
    render() {
        this.vcRef.clear();
        if (this.template && this.row) {
            this.vcRef.createEmbeddedView(this.template, { $implicit: this.row });
        }
    }
}
NovoDataTableExpandDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableExpandDirective, deps: [{ token: i0.ViewContainerRef }, { token: DataTableState }, { token: NOVO_DATA_TABLE_REF }], target: i0.ɵɵFactoryTarget.Directive });
NovoDataTableExpandDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableExpandDirective, selector: "[novoDataTableExpand]", inputs: { row: "row", template: ["novoDataTableExpand", "template"] }, host: { listeners: { "click": "onClick($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableExpandDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoDataTableExpand]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: DataTableState }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_DATA_TABLE_REF]
                }] }]; }, propDecorators: { row: [{
                type: Input
            }], template: [{
                type: Input,
                args: ['novoDataTableExpand']
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

class DataTableSource extends DataSource {
    constructor(tableService, state, ref) {
        super();
        this.tableService = tableService;
        this.state = state;
        this.ref = ref;
        this.total = 0;
        this.currentTotal = 0;
        this.current = 0;
        this.loading = false;
        this.pristine = true;
        this.totalSet = false;
    }
    get totallyEmpty() {
        return this.total === 0;
    }
    get currentlyEmpty() {
        return this.current === 0;
    }
    connect() {
        const displayDataChanges = [this.state.updates];
        return merge(...displayDataChanges).pipe(startWith(null), switchMap(() => {
            this.pristine = false;
            this.loading = true;
            this.state.dataLoadingSource.next(this.loading);
            return this.tableService.getTableResults(this.state.sort, this.state.filter, this.state.page, this.state.pageSize, this.state.globalSearch, this.state.outsideFilter, this.state.where);
        }), map((data) => {
            if (!this.totalSet || this.state.isForceRefresh) {
                this.total = data.total;
                this.totalSet = true;
                this.state.isForceRefresh = false;
            }
            else if (data.total > this.total) {
                this.total = data.total;
            }
            this.currentTotal = data.total;
            this.current = data.results.length;
            this.data = data.results;
            // Clear selection
            if (!this.state.retainSelected) {
                this.state.selectedRows.clear();
            }
            this.state.retainSelected = false;
            this.state.onSelectionChange();
            // Mark changes
            setTimeout(() => {
                this.ref.markForCheck();
                setTimeout(() => {
                    this.loading = false;
                    this.state.dataLoadingSource.next(this.loading);
                    this.state.dataLoaded.next();
                    this.ref.markForCheck();
                });
            });
            return data.results;
        }), catchError((err, caught) => {
            console.error(err, caught); // tslint: disable-line
            this.loading = false;
            return of(null);
        }));
    }
    disconnect() { }
}

class StaticDataTableService {
    constructor(currentData = []) {
        this.currentData = currentData;
        this.originalData = [...currentData];
    }
    getTableResults(sort, filter, page = 0, pageSize, globalSearch, outsideFilter, where) {
        this.currentData = [...this.originalData];
        let total = this.originalData.length;
        if (this.currentData.length !== 0) {
            if (globalSearch) {
                this.currentData = this.currentData.filter((item) => Object.keys(item).some((key) => `${item[key]}`.toLowerCase().includes(globalSearch.toLowerCase())));
                total = this.currentData.length;
            }
            if (filter) {
                this.currentData = this.filterData(this.currentData, filter);
                total = this.currentData.length;
            }
            if (sort) {
                this.currentData = this.currentData.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                total = this.currentData.length;
            }
            if (!sort && !filter && !globalSearch && !outsideFilter) {
                this.currentData = [...this.originalData];
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                this.currentData = this.currentData.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: this.currentData, total });
    }
    filterData(currentData, filter) {
        const filters = Helpers.convertToArray(filter);
        filters.forEach((aFilter) => {
            if (Array.isArray(aFilter.value)) {
                const values = Helpers.convertToArray(aFilter.value).map(Helpers.escapeString);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, values));
            }
            else {
                const value = Helpers.escapeString(aFilter.value);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, value));
            }
        });
        return currentData;
    }
}

// NG2
// Value accessor for the component (supports ngModel)
const TILES_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTilesElement),
    multi: true,
};
class NovoTilesElement {
    constructor(element, ref) {
        this.element = element;
        this.ref = ref;
        this.name = new Date().getTime().toString();
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onSelectedOptionClick = new EventEmitter();
        this.onDisabledOptionClick = new EventEmitter();
        this._options = [];
        this.activeTile = null;
        this.focused = false;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
    }
    setFocus(focus) {
        this.focused = focus;
    }
    ngAfterContentInit() {
        this.name = this.name || '';
        this.setupOptions();
    }
    ngOnChanges(change) {
        if (change.options && change.options.currentValue && !change.options.firstChange) {
            this.name = this.name || '';
            this._options = [];
            this.setupOptions();
        }
    }
    setupOptions() {
        if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
            this._options = this.options.map((x) => {
                const item = { value: x, label: x, checked: this.model === x };
                if (item.checked) {
                    this.setTile(item);
                }
                return item;
            });
        }
        else {
            this._options = this.options.map((x) => {
                x.checked = this.model === x.value || (this.model && this.model.id === x.value);
                if (x.checked) {
                    this.setTile(x);
                }
                return x;
            });
        }
        this.ref.markForCheck();
    }
    select(event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (!item.disabled) {
            if (item.checked) {
                this.onSelectedOptionClick.emit(item);
                return;
            }
            for (const option of this._options) {
                option.checked = false;
            }
            item.checked = !item.checked;
            this.onChange.emit(item.value);
            this.onModelChange(item.value);
            this.setTile(item);
            this.model = item.value;
        }
        else {
            this.onDisabledOptionClick.emit(item);
        }
        this.ref.markForCheck();
    }
    setTile(item) {
        if (item) {
            this.activeTile = item.value;
            this.ref.markForCheck();
        }
    }
    writeValue(model) {
        this.model = model;
        if (!Helpers.isBlank(model)) {
            this.setupOptions();
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoTilesElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTilesElement, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoTilesElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTilesElement, selector: "novo-tiles", inputs: { name: "name", options: "options", required: "required", disabled: ["controlDisabled", "disabled"] }, outputs: { onChange: "onChange", onSelectedOptionClick: "onSelectedOptionClick", onDisabledOptionClick: "onDisabledOptionClick" }, providers: [TILES_VALUE_ACCESSOR], usesOnChanges: true, ngImport: i0, template: `
    <div class="tile-container" [class.active]="focused" [class.disabled]="disabled">
      <div
        class="tile"
        *ngFor="let option of _options; let i = index"
        [ngClass]="{ active: option.checked, disabled: option.disabled }"
        (click)="select($event, option)"
        [attr.data-automation-id]="option.label || option"
      >
        <input
          class="tiles-input"
          [name]="name"
          type="radio"
          [value]="option.checked || option.value || option"
          [attr.id]="name + i"
          (change)="select($event, option)"
          (focus)="setFocus(true)"
          (blur)="setFocus(false)"
          [disabled]="disabled"
        />
        <label [attr.for]="name + i" [attr.data-automation-id]="option.label || option">
          {{ option.label || option }}
        </label>
      </div>
    </div>
  `, isInline: true, directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTilesElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-tiles',
                    providers: [TILES_VALUE_ACCESSOR],
                    template: `
    <div class="tile-container" [class.active]="focused" [class.disabled]="disabled">
      <div
        class="tile"
        *ngFor="let option of _options; let i = index"
        [ngClass]="{ active: option.checked, disabled: option.disabled }"
        (click)="select($event, option)"
        [attr.data-automation-id]="option.label || option"
      >
        <input
          class="tiles-input"
          [name]="name"
          type="radio"
          [value]="option.checked || option.value || option"
          [attr.id]="name + i"
          (change)="select($event, option)"
          (focus)="setFocus(true)"
          (blur)="setFocus(false)"
          [disabled]="disabled"
        />
        <label [attr.for]="name + i" [attr.data-automation-id]="option.label || option">
          {{ option.label || option }}
        </label>
      </div>
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], options: [{
                type: Input
            }], required: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: ['controlDisabled']
            }], onChange: [{
                type: Output
            }], onSelectedOptionClick: [{
                type: Output
            }], onDisabledOptionClick: [{
                type: Output
            }] } });

class NovoDividerComponent {
    constructor() {
        this._vertical = false;
        this._inset = false;
    }
    /** Whether the divider is vertically aligned. */
    get vertical() {
        return this._vertical;
    }
    set vertical(value) {
        this._vertical = coerceBooleanProperty(value);
    }
    /** Whether the divider is an inset divider. */
    get inset() {
        return this._inset;
    }
    set inset(value) {
        this._inset = coerceBooleanProperty(value);
    }
}
NovoDividerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDividerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoDividerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDividerComponent, selector: "novo-divider", inputs: { vertical: "vertical", inset: "inset" }, host: { attributes: { "role": "separator" }, properties: { "attr.aria-orientation": "vertical ? \"vertical\" : \"horizontal\"", "class.novo-divider-vertical": "vertical", "class.novo-divider-horizontal": "!vertical", "class.novo-divider-inset": "inset" }, classAttribute: "novo-divider" }, ngImport: i0, template: '', isInline: true, styles: [".novo-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid;border-top-color:var(--border)}.novo-divider.novo-divider-vertical{display:inline;border-top:0;border-right-width:1px;border-right-style:solid;border-right-color:var(--border);margin-left:1rem;margin-right:1rem}.novo-divider.novo-divider-inset{margin-left:80px}[dir=rtl] .novo-divider.novo-divider-inset{margin-left:auto;margin-right:80px}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDividerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-divider', host: {
                        role: 'separator',
                        '[attr.aria-orientation]': 'vertical ? "vertical" : "horizontal"',
                        '[class.novo-divider-vertical]': 'vertical',
                        '[class.novo-divider-horizontal]': '!vertical',
                        '[class.novo-divider-inset]': 'inset',
                        class: 'novo-divider',
                    }, template: '', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [".novo-divider{display:block;margin:0;border-top-width:1px;border-top-style:solid;border-top-color:var(--border)}.novo-divider.novo-divider-vertical{display:inline;border-top:0;border-right-width:1px;border-right-style:solid;border-right-color:var(--border);margin-left:1rem;margin-right:1rem}.novo-divider.novo-divider-inset{margin-left:80px}[dir=rtl] .novo-divider.novo-divider-inset{margin-left:auto;margin-right:80px}\n"] }]
        }], propDecorators: { vertical: [{
                type: Input
            }], inset: [{
                type: Input
            }] } });

// NG
// Value accessor for the component (supports ngModel)
// const SELECT_VALUE_ACCESSOR = {
//   provide: NG_VALUE_ACCESSOR,
//   useExisting: forwardRef(() => NovoSelectElement),
//   multi: true,
// };
/** Change event object that is emitted when the select value has changed. */
class NovoSelectChange {
    constructor(
    /** Reference to the select that emitted the change event. */
    source, 
    /** Current value of the select that emitted the event. */
    value) {
        this.source = source;
        this.value = value;
    }
}
// Create Base Class from Mixins
// Boilerplate for applying mixins
class NovoSelectBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const NovoSelectMixins = mixinOverlay(mixinTabIndex(mixinRequired(mixinDisabled(mixinErrorState(NovoSelectBase)))));
let nextId$4 = 0;
class NovoSelectElement extends NovoSelectMixins {
    constructor(elementRef, labels, ref, focusMonitor, ngZone, defaultErrorStateMatcher, ngControl, _parentForm, _parentFormGroup) {
        super(defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this.elementRef = elementRef;
        this.labels = labels;
        this.ref = ref;
        this.focusMonitor = focusMonitor;
        this.ngZone = ngZone;
        this._uniqueId = `novo-select-${++nextId$4}`;
        this._stateChanges = Subscription.EMPTY;
        this._activeOptionChanges = Subscription.EMPTY;
        this._selectedOptionChanges = Subscription.EMPTY;
        this._destroy = new Subject();
        this.controlType = 'select';
        /** @docs-private Implemented as part of NovoFieldControl. */
        this.lastKeyValue = null;
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /** User defined tab index. */
        this._userTabIndex = null;
        this.id = this._uniqueId;
        this.name = this._uniqueId;
        this.placeholder = 'Select...';
        this.position = 'above-below';
        this.onSelect = new EventEmitter();
        /** Event emitted when the selected value has been changed by the user. */
        this.selectionChange = new EventEmitter();
        /** Event that emits whenever the raw value of the select changes.*/
        this.valueChange = new EventEmitter();
        /** Event emitted when the select panel has been toggled. */
        this.openedChange = new EventEmitter();
        /** Event emitted when the select has been opened. */
        this._openedStream = this.openedChange.pipe(filter((o) => o), map(() => { }));
        /** Event emitted when the select has been closed. */
        this._closedStream = this.openedChange.pipe(filter((o) => !o), map(() => { }));
        /** Function that maps an option's control value to its display value in the trigger. */
        this.displayWith = null;
        /** * Function to compare the option values with the selected values. */
        this.compareWith = (o1, o2) => o1 === o2 || o1 === o2.id || (!Helpers.isEmpty(o1.id) && !Helpers.isEmpty(o2.id) && o1.id === o2.id);
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.filterTerm = '';
        this.disabled = false;
        this._value = null;
        this._multiple = false;
        this._focused = false;
        if (ngControl) {
            ngControl.valueAccessor = this;
        }
        this._selectionModel = new SelectionModel(this.multiple);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get value() {
        return this._value;
    }
    set value(newValue) {
        // Always re-assign an array, because it might have been mutated.
        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {
            if (this.options) {
                this._setSelectionByValue(newValue);
            }
            this._value = newValue;
        }
    }
    /** Whether the user should be allowed to select multiple options. */
    get multiple() {
        return this._multiple;
    }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
        this.position = 'above-below';
    }
    /** Whether the select is focused. */
    get focused() {
        return this._focused || this.panelOpen;
    }
    /** Implemented as part of NovoFieldControl. */
    get empty() {
        return this._value === null;
    }
    /** The currently selected option. */
    get selected() {
        return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];
    }
    /** The value displayed in the trigger. */
    get displayValue() {
        if (this.empty) {
            return '';
        }
        if (this._multiple) {
            const selectedOptions = this._selectionModel.selected.map((option) => this._getDisplayValue(option));
            return selectedOptions.join(', ');
        }
        return this._getDisplayValue(this._selectionModel.selected[0]);
    }
    ngOnInit() {
        this.stateChanges.next();
        this._initLegacyOptions();
        this.focusMonitor.monitor(this.dropdown.nativeElement).subscribe((origin) => this.ngZone.run(() => {
            if (origin === 'keyboard' && !this.disabled) {
                this.openPanel();
            }
            this._focused = !!origin;
            this.stateChanges.next();
        }));
    }
    ngOnChanges(changes) {
        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let
        // the parent form field know to run change detection when the disabled state changes.
        if (changes?.disabled) {
            this.stateChanges.next();
        }
        if (changes?.multiple) {
            // TODO: copy selection over??
            this._selectionModel = new SelectionModel(this.multiple);
        }
        this._initLegacyOptions();
    }
    ngAfterViewInit() {
        // Initialize KeyManager to manage keyboard events
        this._initKeyManager();
        // Subscribe to NovoOption selections
        this._watchSelectionEvents();
        // Set initial value
        this._initializeSelection();
        // Listen to selection changes to select and deselect options
        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe((event) => {
            event.added.forEach((option) => {
                if (option.select) {
                    option.select();
                }
            });
            event.removed.forEach((option) => {
                if (option.deselect) {
                    option.deselect();
                }
            });
        });
        // Listen to QueryList changes
        merge(this.contentOptions.changes, this.viewOptions.changes)
            .pipe(takeUntil(this._destroy))
            .subscribe(() => {
            this._watchSelectionEvents();
            this._initializeSelection();
        });
        merge(this.overlay.opening, this.overlay.closing)
            .pipe(takeUntil(this._destroy))
            .subscribe(() => {
            this.openedChange.emit(this.panelOpen);
        });
    }
    ngOnDestroy() {
        this._destroy.next();
        this._destroy.complete();
        this._stateChanges.unsubscribe();
        this._activeOptionChanges.unsubscribe();
        this._selectedOptionChanges.unsubscribe();
        this.focusMonitor.stopMonitoring(this.dropdown.nativeElement);
    }
    openPanel() {
        super.openPanel();
        this._highlightCorrectOption();
    }
    _initializeSelection() {
        // Defer setting the value in order to avoid the "Expression
        // has changed after it was checked" errors from Angular.
        Promise.resolve().then(() => {
            this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);
            this.stateChanges.next();
        });
    }
    /**
     * Sets the selected option based on a value. If no option can be
     * found with the designated value, the select trigger is cleared.
     */
    _setSelectionByValue(value) {
        this._selectionModel.selected.forEach((option) => {
            if (option.setInactiveStyles) {
                option.setInactiveStyles();
            }
        });
        this._selectionModel.clear();
        if (this.multiple && value) {
            value.forEach((currentValue) => this._selectValue(currentValue));
            this._sortValues();
        }
        else if (this._keyManager) {
            const correspondingOption = this._selectValue(value);
            // Shift focus to the active item. Note that we shouldn't do this in multiple
            // mode, because we don't know what option the user interacted with last.
            if (correspondingOption) {
                this._keyManager.updateActiveItem(correspondingOption);
            }
            else if (!this.panelOpen) {
                // Otherwise reset the highlighted option. Note that we only want to do this while
                // closed, because doing it while open can shift the user's focus unnecessarily.
                this._keyManager.updateActiveItem(-1);
            }
        }
        this.ref.markForCheck();
    }
    /**
     * Finds and selects and option based on its value.
     * @returns Option that has the corresponding value.
     */
    _selectValue(value) {
        const allOptions = this._getOptions();
        const correspondingOption = allOptions.find((option) => {
            // Skip options that are already in the model. This allows us to handle cases
            // where the same primitive value is selected multiple times.
            if (this._selectionModel.isSelected(option)) {
                return false;
            }
            return !Helpers.isEmpty(value) && !Helpers.isEmpty(option.value) && this.compareWith(option.value, value);
        });
        if (correspondingOption) {
            this._selectionModel.select(correspondingOption);
        }
        else if (value && !correspondingOption) {
            // Double Check option not already added.
            const legacyOption = this.filteredOptions.find((it) => it.value === value);
            if (!legacyOption) {
                // Add a disabled option to the list and select it
                this.filteredOptions.push({
                    disabled: true,
                    tooltip: 'Value is not provided in list of valid options.',
                    label: value?.label || value,
                    value,
                });
                this.ref.detectChanges();
            }
        }
        return correspondingOption;
    }
    select(option, i, fireEvents = true) {
        console.warn('select() method is deprecated');
    }
    clear() {
        console.warn('clear() method is deprecated');
    }
    /**
     * If the item is not disabled, this method closes the panel, and if a value is specified,
     * also sets the associated control to that value. It will also mark the control as dirty
     * if this interaction stemmed from the user.
     */
    handleSelection(option, isUserInput = false) {
        const wasSelected = this._selectionModel.isSelected(option);
        if (option.value == null && !this._multiple) {
            option.deselect();
            this._selectionModel.clear();
            if (this.value != null) {
                this._propagateChanges(option.value);
            }
        }
        else {
            if (wasSelected !== option.selected) {
                option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);
            }
            if (isUserInput) {
                this._keyManager.setActiveItem(option);
            }
            if (this.multiple) {
                this._sortValues();
                if (isUserInput) {
                    this.focus();
                }
            }
        }
        if (wasSelected !== this._selectionModel.isSelected(option)) {
            this._propagateChanges();
        }
        this.stateChanges.next();
        this._watchSelectionEvents();
    }
    _getDisplayValue(option) {
        if (!option) {
            return '';
        }
        let toDisplay = option.viewValue;
        if (this.displayWith) {
            toDisplay = this.displayWith(option.value);
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        const displayValue = toDisplay != null ? toDisplay : '';
        return displayValue;
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    _clearPreviousSelectedOption(skip) {
        this._getOptions().forEach((option) => {
            if (option !== skip && option.selected) {
                option.deselect();
            }
        });
    }
    _watchSelectionEvents() {
        const options = this._getOptions();
        const selectionEvents = options ? merge(...options.map((option) => option.onSelectionChange)) : of();
        this._selectedOptionChanges.unsubscribe();
        this._selectedOptionChanges = selectionEvents.pipe(take(1)).subscribe((event) => {
            this.onModelTouched();
            this.handleSelection(event.source, event.isUserInput);
            if (event.isUserInput && !this.multiple && this.panelOpen) {
                this.closePanel();
                this.focus();
            }
        });
    }
    /** Handles all keydown events on the select. */
    _handleKeydown(event) {
        if (!this.disabled) {
            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);
        }
    }
    /** Handles keyboard events while the select is closed. */
    _handleClosedKeydown(event) {
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */ || key === "ArrowLeft" /* ArrowLeft */ || key === "ArrowRight" /* ArrowRight */;
        const isOpenKey = key === "Enter" /* Enter */ || key === " " /* Space */;
        const manager = this._keyManager;
        // Open the select on ALT + arrow key to match the native <select>
        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) || ((this.multiple || event.altKey) && isArrowKey)) {
            event.preventDefault(); // prevents the page from scrolling down when pressing space
            this.openPanel();
        }
        // Allow changing value with arrow keys.
        // else if (!this.multiple) {
        //   const previouslySelectedOption = this.selected;
        //   manager.onKeydown(event);
        //   const selectedOption = this.selected;
        // }
    }
    /** Handles keyboard events when the selected is open. */
    _handleOpenKeydown(event) {
        const manager = this._keyManager;
        const key = event.key;
        const isArrowKey = key === "ArrowDown" /* ArrowDown */ || key === "ArrowUp" /* ArrowUp */;
        const isTyping = manager.isTyping();
        if (isArrowKey && event.altKey) {
            // Close the select on ALT + arrow key to match the native <select>
            event.preventDefault();
            this.closePanel();
            // Don't do anything in this case if the user is typing,
            // because the typing sequence can include the space key.
        }
        else if (!isTyping && (key === "Enter" /* Enter */ || key === " " /* Space */) && manager.activeItem && !hasModifierKey(event)) {
            event.preventDefault();
            manager.activeItem._selectViaInteraction();
        }
        else if (!isTyping && this._multiple && ['a', 'A'].includes(key) && event.ctrlKey) {
            event.preventDefault();
            const hasDeselectedOptions = this.options.some((opt) => !opt.disabled && !opt.selected);
            this.options.forEach((option) => {
                if (!option.disabled) {
                    hasDeselectedOptions ? option.select() : option.deselect();
                }
            });
        }
        else if ("Escape" /* Escape */ === key) {
            this.closePanel();
        }
        else {
            const previouslyFocusedIndex = manager.activeItemIndex;
            manager.onKeydown(event);
            if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem && manager.activeItemIndex !== previouslyFocusedIndex) {
                manager.activeItem._selectViaInteraction();
            }
        }
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /** Implemented as part of NovoFieldControl. */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /** Implemented as part of NovoFieldControl. */
    onContainerClick(event) {
        this.focus();
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (!this.disabled) {
            this.dropdown.nativeElement.focus(options);
        }
    }
    _getOptions() {
        return [...(this.viewOptions || []), ...(this.contentOptions || [])];
    }
    /** Sorts the selected values in the selected based on their order in the panel. */
    _sortValues() {
        if (this.multiple) {
            // TODO.
        }
    }
    /** Emits change event to set the model value. */
    _propagateChanges(fallbackValue) {
        let valueToEmit = null;
        if (this.multiple) {
            valueToEmit = this.selected.map((option) => option.value);
        }
        else {
            valueToEmit = this.selected ? this.selected.value : fallbackValue;
        }
        this._value = valueToEmit;
        this.valueChange.emit(valueToEmit);
        this.onModelChange(valueToEmit);
        this.onSelect.emit({ selected: valueToEmit });
        this.selectionChange.emit(this._makeChangeEvent(valueToEmit));
        this.ref.markForCheck();
    }
    _makeChangeEvent(value) {
        return new NovoSelectChange(this, value);
    }
    /** Scrolls the active option into view. */
    _scrollOptionIntoView(index) {
        const options = new QueryList();
        options.reset(this._getOptions());
        const labelCount = _countGroupLabelsBeforeOption(index, options, this.optionGroups);
        const itemHeight = this._getItemHeight();
        this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, this.panel.nativeElement.offsetHeight);
    }
    /** Sets up a key manager to listen to keyboard events on the overlay panel. */
    _initKeyManager() {
        this._keyManager = new ActiveDescendantKeyManager(this._getOptions()).withTypeAhead(250).withHomeAndEnd();
        // .withAllowedModifierKeys(['shiftKey']);
        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {
            if (this.panelOpen) {
                // Select the active item when tabbing away. This is consistent with how the native
                // select behaves. Note that we only want to do this in single selection mode.
                if (!this.multiple && this._keyManager.activeItem) {
                    this._keyManager.activeItem._selectViaInteraction();
                }
                // Restore focus to the trigger before closing. Ensures that the focus
                // position won't be lost if the user got focus into the overlay.
                this.focus();
                this.closePanel();
            }
        });
        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {
            if (this.panelOpen && this.overlay) {
                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);
            }
            else if (!this.panelOpen && !this.multiple && this._keyManager.activeItem) {
                this._keyManager.activeItem._selectViaInteraction();
            }
        });
    }
    /**
     * Highlights the selected item. If no option is selected, it will highlight
     * the first item instead.
     */
    _highlightCorrectOption() {
        if (this._keyManager) {
            if (this.empty) {
                this._keyManager.setFirstItemActive();
            }
            else {
                this._keyManager.setActiveItem(this._value);
            }
        }
    }
    /** Calculates the height of the select's options. */
    _getItemHeight() {
        let [first] = this._getOptions();
        if (first) {
            return first._getHostElement().offsetHeight;
        }
        return 0;
    }
    // TODO: Deprecate this
    _initLegacyOptions() {
        if (this.options && this.options.length && typeof this.options[0] === 'string') {
            this.filteredOptions = this.options.map((item) => {
                return { value: item, label: item };
            });
        }
        else {
            this.filteredOptions = (this.options || [])
                .map((item) => {
                return {
                    ...item,
                    disabled: item.readOnly || item.disabled,
                };
            })
                .map((item) => {
                return {
                    ...item,
                    active: false,
                };
            });
        }
    }
    /**
     * TODO: Deprecate all header methods
     */
    toggleHeader(event, forceValue = false) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        // Reverse the active property (if forceValue, use that)
        this.header = {
            open: forceValue !== undefined ? forceValue : !this.header.open,
            value: '',
            valid: true,
        };
    }
    /**
     * @deprecated use highlight pipe
     */
    highlight(match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    }
    escapeRegexp(queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    }
    saveHeader() {
        if (this.header.value) {
            this.headerConfig.onSave(this.header.value);
            this.createdItem = this.header.value;
            this.closePanel();
        }
        else {
            this.header.valid = false;
        }
    }
    /** Determines the `aria-activedescendant` to be set on the host. */
    _getAriaActiveDescendant() {
        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {
            return this._keyManager.activeItem.id;
        }
        return null;
    }
}
NovoSelectElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: i1$5.FocusMonitor }, { token: i0.NgZone }, { token: ErrorStateMatcher }, { token: i4.NgControl, optional: true, self: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoSelectElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSelectElement, selector: "novo-select", inputs: { disabled: "disabled", required: "required", tabIndex: "tabIndex", id: "id", name: "name", options: "options", placeholder: "placeholder", readonly: "readonly", headerConfig: "headerConfig", position: "position", overlayWidth: "overlayWidth", overlayHeight: "overlayHeight", displayWith: "displayWith", compareWith: "compareWith", value: "value", multiple: "multiple" }, outputs: { onSelect: "onSelect", selectionChange: "selectionChange", valueChange: "valueChange", openedChange: "openedChange", _openedStream: "opened", _closedStream: "closed" }, host: { attributes: { "role": "combobox", "aria-autocomplete": "none", "aria-haspopup": "true" }, listeners: { "keydown": "_handleKeydown($event)" }, properties: { "attr.id": "id", "attr.aria-controls": "panelOpen ? id + \"-panel\" : null", "attr.aria-expanded": "panelOpen", "attr.aria-required": "required.toString()", "attr.aria-disabled": "disabled.toString()", "attr.aria-invalid": "errorState", "attr.aria-describedby": "_ariaDescribedby || null", "attr.aria-activedescendant": "_getAriaActiveDescendant()", "class.novo-select-disabled": "disabled", "class.novo-select-invalid": "errorState", "class.novo-select-required": "required", "class.novo-select-empty": "empty", "class.novo-select-multiple": "multiple" }, classAttribute: "novo-select" }, providers: [
        { provide: NovoFieldControl, useExisting: NovoSelectElement },
        { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoSelectElement },
    ], queries: [{ propertyName: "optionGroups", predicate: NovoOptgroup, descendants: true }, { propertyName: "contentOptions", predicate: NovoOption, descendants: true }], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true, static: true }, { propertyName: "dropdown", first: true, predicate: ["dropdownElement"], descendants: true, static: true }, { propertyName: "panel", first: true, predicate: ["panel"], descendants: true }, { propertyName: "viewOptions", predicate: NovoOption, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: `
    <div class="novo-select-trigger" #dropdownElement (click)="togglePanel(); (false)" tabIndex="{{ disabled ? -1 : 0 }}" type="button">
      <span class="novo-select-placeholder" *ngIf="empty">{{ placeholder }}</span>
      <span class="text-ellipsis" *ngIf="!empty">{{ displayValue }}</span>
      <i class="bhi-collapse"></i>
    </div>
    <novo-overlay-template
      [parent]="elementRef"
      [position]="position"
      [width]="overlayWidth"
      [height]="overlayHeight"
      (closing)="dropdown.nativeElement.focus()"
    >
      <div #panel class="novo-select-list" tabIndex="-1" [class.has-header]="headerConfig" [class.active]="panelOpen">
        <novo-option *ngIf="headerConfig" class="select-header" [class.open]="header.open">
          <novo-button *ngIf="!header.open" icon="add-thin" (click)="toggleHeader($event); (false)" tabIndex="-1" class="header">
            {{ headerConfig.label }}
          </novo-button>
          <div *ngIf="header.open" [ngClass]="{ active: header.open }">
            <input
              autofocus
              type="text"
              [placeholder]="headerConfig.placeholder"
              [attr.id]="name"
              autocomplete="off"
              [value]="header.value"
              [ngClass]="{ invalid: !header.valid }"
            />
            <footer>
              <novo-button (click)="toggleHeader($event, false)">{{ labels.cancel }}</novo-button>
              <novo-button (click)="saveHeader()" class="primary">{{ labels.save }}</novo-button>
            </footer>
          </div>
        </novo-option>
        <!-- Declarative Content Goes Here -->
        <ng-content></ng-content>
        <!-- Data Driven Content Goes Here -->
        <ng-container *ngFor="let option of filteredOptions; let i = index">
          <novo-option
            *ngIf="!option.divider; else divider"
            class="select-item"
            [disabled]="option.disabled"
            [class.active]="option.active"
            [attr.data-automation-value]="option.label"
            [value]="option.value"
            [tooltip]="option.tooltip"
            [tooltipPosition]="option.tooltipPosition || 'right'"
          >
            <span [innerHtml]="option.label | highlight:filterTerm"></span> <i *ngIf="option.active" class="bhi-check"></i>
          </novo-option>
          <ng-template #divider>
            <novo-divider class="select-item-divider" [class.with-label]="option.label" [class.without-label]="!option.label">
              {{ option?.label }}
            </novo-divider>
          </ng-template>
        </ng-container>
      </div>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoDividerComponent, selector: "novo-divider", inputs: ["vertical", "inset"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }], pipes: { "highlight": HighlightPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-select',
                    inputs: ['disabled', 'required', 'tabIndex'],
                    providers: [
                        { provide: NovoFieldControl, useExisting: NovoSelectElement },
                        { provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoSelectElement },
                    ],
                    template: `
    <div class="novo-select-trigger" #dropdownElement (click)="togglePanel(); (false)" tabIndex="{{ disabled ? -1 : 0 }}" type="button">
      <span class="novo-select-placeholder" *ngIf="empty">{{ placeholder }}</span>
      <span class="text-ellipsis" *ngIf="!empty">{{ displayValue }}</span>
      <i class="bhi-collapse"></i>
    </div>
    <novo-overlay-template
      [parent]="elementRef"
      [position]="position"
      [width]="overlayWidth"
      [height]="overlayHeight"
      (closing)="dropdown.nativeElement.focus()"
    >
      <div #panel class="novo-select-list" tabIndex="-1" [class.has-header]="headerConfig" [class.active]="panelOpen">
        <novo-option *ngIf="headerConfig" class="select-header" [class.open]="header.open">
          <novo-button *ngIf="!header.open" icon="add-thin" (click)="toggleHeader($event); (false)" tabIndex="-1" class="header">
            {{ headerConfig.label }}
          </novo-button>
          <div *ngIf="header.open" [ngClass]="{ active: header.open }">
            <input
              autofocus
              type="text"
              [placeholder]="headerConfig.placeholder"
              [attr.id]="name"
              autocomplete="off"
              [value]="header.value"
              [ngClass]="{ invalid: !header.valid }"
            />
            <footer>
              <novo-button (click)="toggleHeader($event, false)">{{ labels.cancel }}</novo-button>
              <novo-button (click)="saveHeader()" class="primary">{{ labels.save }}</novo-button>
            </footer>
          </div>
        </novo-option>
        <!-- Declarative Content Goes Here -->
        <ng-content></ng-content>
        <!-- Data Driven Content Goes Here -->
        <ng-container *ngFor="let option of filteredOptions; let i = index">
          <novo-option
            *ngIf="!option.divider; else divider"
            class="select-item"
            [disabled]="option.disabled"
            [class.active]="option.active"
            [attr.data-automation-value]="option.label"
            [value]="option.value"
            [tooltip]="option.tooltip"
            [tooltipPosition]="option.tooltipPosition || 'right'"
          >
            <span [innerHtml]="option.label | highlight:filterTerm"></span> <i *ngIf="option.active" class="bhi-check"></i>
          </novo-option>
          <ng-template #divider>
            <novo-divider class="select-item-divider" [class.with-label]="option.label" [class.without-label]="!option.label">
              {{ option?.label }}
            </novo-divider>
          </ng-template>
        </ng-container>
      </div>
    </novo-overlay-template>
  `,
                    host: {
                        class: 'novo-select',
                        role: 'combobox',
                        'aria-autocomplete': 'none',
                        'aria-haspopup': 'true',
                        '[attr.id]': 'id',
                        '[attr.aria-controls]': 'panelOpen ? id + "-panel" : null',
                        '[attr.aria-expanded]': 'panelOpen',
                        '[attr.aria-required]': 'required.toString()',
                        '[attr.aria-disabled]': 'disabled.toString()',
                        '[attr.aria-invalid]': 'errorState',
                        '[attr.aria-describedby]': '_ariaDescribedby || null',
                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',
                        '[class.novo-select-disabled]': 'disabled',
                        '[class.novo-select-invalid]': 'errorState',
                        '[class.novo-select-required]': 'required',
                        '[class.novo-select-empty]': 'empty',
                        '[class.novo-select-multiple]': 'multiple',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: i1$5.FocusMonitor }, { type: i0.NgZone }, { type: ErrorStateMatcher }, { type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }, { type: i4.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i4.FormGroupDirective, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { id: [{
                type: Input
            }], name: [{
                type: Input
            }], options: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], readonly: [{
                type: Input
            }], headerConfig: [{
                type: Input
            }], position: [{
                type: Input
            }], overlayWidth: [{
                type: Input
            }], overlayHeight: [{
                type: Input
            }], onSelect: [{
                type: Output
            }], selectionChange: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], openedChange: [{
                type: Output
            }], _openedStream: [{
                type: Output,
                args: ['opened']
            }], _closedStream: [{
                type: Output,
                args: ['closed']
            }], displayWith: [{
                type: Input
            }], compareWith: [{
                type: Input
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent, { static: true }]
            }], dropdown: [{
                type: ViewChild,
                args: ['dropdownElement', { static: true }]
            }], optionGroups: [{
                type: ContentChildren,
                args: [NovoOptgroup, { descendants: true }]
            }], contentOptions: [{
                type: ContentChildren,
                args: [NovoOption, { descendants: true }]
            }], viewOptions: [{
                type: ViewChildren,
                args: [NovoOption]
            }], panel: [{
                type: ViewChild,
                args: ['panel']
            }], value: [{
                type: Input
            }], multiple: [{
                type: Input
            }], _handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });

const MAX_PAGES_DISPLAYED = 5;
class NovoDataTablePagination {
    constructor(changeDetectorRef, labels, state) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.theme = 'standard';
        this._page = 0;
        this._pageSizeOptions = [];
        this.canSelectAll = false;
        this.allMatchingSelected = false;
        this.loading = false;
        this.errorLoading = false;
        this.paginationRefreshSubject = new Subject();
        this._length = 0;
        this.pageChange = new EventEmitter();
        this.resetSubscription = this.state.resetSource.subscribe(() => {
            this.page = 0;
            this.changeDetectorRef.markForCheck();
        });
    }
    get page() {
        return this._page;
    }
    set page(page) {
        this._page = page;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.page = this._page;
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(pageSize) {
        this._pageSize = pageSize;
        this.updateDisplayedPageSizeOptions();
        this.state.pageSize = this._pageSize;
    }
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    set pageSizeOptions(pageSizeOptions) {
        this._pageSizeOptions = pageSizeOptions;
        this.updateDisplayedPageSizeOptions();
    }
    get length() {
        return this._length;
    }
    set length(length) {
        this._length = length;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    }
    ngOnInit() {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    }
    ngOnDestroy() {
        this.resetSubscription.unsubscribe();
    }
    selectPage(page) {
        this.state.checkRetainment('page', this.canSelectAll && this.allMatchingSelected);
        this.page = page;
        this.emitPageEvent();
    }
    nextPage() {
        this.state.checkRetainment('page', this.canSelectAll && this.allMatchingSelected);
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    }
    previousPage() {
        this.state.checkRetainment('page', this.canSelectAll && this.allMatchingSelected);
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    }
    hasPreviousPage() {
        return this.page >= 1 && this.pageSize !== 0;
    }
    hasNextPage() {
        const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    }
    changePageSize(pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent(true);
    }
    updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.displayedPageSizeOptions) {
            this.displayedPageSizeOptions = [];
            this.pageSizeOptions.forEach((option) => {
                if (option.hasOwnProperty('value')) {
                    this.displayedPageSizeOptions.push(option);
                }
                else {
                    this.displayedPageSizeOptions.push({
                        value: option,
                        label: option,
                    });
                }
            });
        }
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.changeDetectorRef.detectChanges();
    }
    emitPageEvent(isPageSizeChange = false) {
        const event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
            filter: this.state.filter,
            sort: this.state.sort,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.state.updates.next(event);
        this.state.onPaginationChange(isPageSizeChange, this.pageSize);
    }
    calculateTotalPages() {
        const totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
        return Math.max(totalPages || 0, 1);
    }
    makePage(number, text, isActive) {
        return {
            number,
            text,
            active: isActive,
        };
    }
    getPages(currentPage, totalPages) {
        const pages = [];
        // Default page limits
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
        // Recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
            endPage = startPage + MAX_PAGES_DISPLAYED - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - MAX_PAGES_DISPLAYED + 1;
            }
        }
        // Add page number links
        for (let number = startPage; number <= endPage; number++) {
            const page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    }
}
NovoDataTablePagination.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTablePagination, deps: [{ token: i0.ChangeDetectorRef }, { token: NovoLabelService }, { token: DataTableState }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTablePagination.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTablePagination, selector: "novo-data-table-pagination", inputs: { theme: "theme", page: "page", pageSize: "pageSize", dataFeatureId: "dataFeatureId", pageSizeOptions: "pageSizeOptions", canSelectAll: "canSelectAll", allMatchingSelected: "allMatchingSelected", loading: "loading", errorLoading: "errorLoading", paginationRefreshSubject: "paginationRefreshSubject", length: "length" }, outputs: { pageChange: "pageChange" }, host: { properties: { "class": "this.theme" } }, ngImport: i0, template: `
    <ng-container *ngIf="theme === 'basic' || theme === 'basic-wide'">
      <div class="novo-data-table-pagination-size">
        <novo-tiles
          *ngIf="displayedPageSizeOptions.length > 1"
          [(ngModel)]="pageSize"
          [options]="displayedPageSizeOptions"
          (onChange)="changePageSize($event)"
          data-automation-id="novo-data-table-pagination-tiles"
        >
        </novo-tiles>
        <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
      </div>

      <div class="novo-data-table-range-label-long" data-automation-id="novo-data-table-pagination-range-label-long">
        {{ longRangeLabel }}
      </div>
      <div class="novo-data-table-range-label-short" data-automation-id="novo-data-table-pagination-range-label-short">
        {{ shortRangeLabel }}
      </div>
      <span class="spacer novo-data-table-spacer" *ngIf="theme === 'basic-wide'"></span>
      <novo-button
        theme="dialogue"
        type="button"
        class="novo-data-table-pagination-navigation-previous"
        (click)="previousPage()"
        icon="previous"
        side="left"
        [disabled]="!hasPreviousPage()"
        data-automation-id="novo-data-table-pagination-previous"
      >
        <span>{{ labels.previous }}</span>
      </novo-button>
      <novo-button
        theme="dialogue"
        type="button"
        class="novo-data-table-pagination-navigation-next"
        (click)="nextPage()"
        icon="next"
        side="right"
        [disabled]="!hasNextPage()"
        data-automation-id="novo-data-table-pagination-next"
      >
        <span>{{ labels.next }}</span>
      </novo-button>
    </ng-container>
    <ng-container *ngIf="theme === 'standard'">
      <h5 class="rows">{{ labels.itemsPerPage }}</h5>
      <novo-select
        [options]="displayedPageSizeOptions"
        [placeholder]="labels.select"
        [(ngModel)]="pageSize"
        (onSelect)="changePageSize($event.selected)"
        data-automation-id="pager-select"
        [attr.data-feature-id]="dataFeatureId"
      >
      </novo-select>
      <span class="spacer"></span>
      <ul *ngIf="!loading && !errorLoading" class="pager" data-automation-id="pager">
        <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ disabled: page === 0 }">
          <i class="bhi-previous" data-automation-id="pager-previous"></i>
        </li>
        <li class="page" [ngClass]="{ active: p.number === page + 1 }" *ngFor="let p of pages" (click)="selectPage(p.number - 1)">
          {{ p.text }}
        </li>
        <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ disabled: page + 1 === totalPages }">
          <i class="bhi-next" data-automation-id="pager-next"></i>
        </li>
      </ul>
      <novo-loading *ngIf="loading"></novo-loading>
      <button *ngIf="errorLoading"
              theme="primary"
              color="negative"
              icon="refresh"
              (click)="paginationRefreshSubject.next()">{{ labels.refreshPagination }}</button>
    </ng-container>
  `, isInline: true, components: [{ type: NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTablePagination, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-pagination',
                    template: `
    <ng-container *ngIf="theme === 'basic' || theme === 'basic-wide'">
      <div class="novo-data-table-pagination-size">
        <novo-tiles
          *ngIf="displayedPageSizeOptions.length > 1"
          [(ngModel)]="pageSize"
          [options]="displayedPageSizeOptions"
          (onChange)="changePageSize($event)"
          data-automation-id="novo-data-table-pagination-tiles"
        >
        </novo-tiles>
        <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
      </div>

      <div class="novo-data-table-range-label-long" data-automation-id="novo-data-table-pagination-range-label-long">
        {{ longRangeLabel }}
      </div>
      <div class="novo-data-table-range-label-short" data-automation-id="novo-data-table-pagination-range-label-short">
        {{ shortRangeLabel }}
      </div>
      <span class="spacer novo-data-table-spacer" *ngIf="theme === 'basic-wide'"></span>
      <novo-button
        theme="dialogue"
        type="button"
        class="novo-data-table-pagination-navigation-previous"
        (click)="previousPage()"
        icon="previous"
        side="left"
        [disabled]="!hasPreviousPage()"
        data-automation-id="novo-data-table-pagination-previous"
      >
        <span>{{ labels.previous }}</span>
      </novo-button>
      <novo-button
        theme="dialogue"
        type="button"
        class="novo-data-table-pagination-navigation-next"
        (click)="nextPage()"
        icon="next"
        side="right"
        [disabled]="!hasNextPage()"
        data-automation-id="novo-data-table-pagination-next"
      >
        <span>{{ labels.next }}</span>
      </novo-button>
    </ng-container>
    <ng-container *ngIf="theme === 'standard'">
      <h5 class="rows">{{ labels.itemsPerPage }}</h5>
      <novo-select
        [options]="displayedPageSizeOptions"
        [placeholder]="labels.select"
        [(ngModel)]="pageSize"
        (onSelect)="changePageSize($event.selected)"
        data-automation-id="pager-select"
        [attr.data-feature-id]="dataFeatureId"
      >
      </novo-select>
      <span class="spacer"></span>
      <ul *ngIf="!loading && !errorLoading" class="pager" data-automation-id="pager">
        <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ disabled: page === 0 }">
          <i class="bhi-previous" data-automation-id="pager-previous"></i>
        </li>
        <li class="page" [ngClass]="{ active: p.number === page + 1 }" *ngFor="let p of pages" (click)="selectPage(p.number - 1)">
          {{ p.text }}
        </li>
        <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ disabled: page + 1 === totalPages }">
          <i class="bhi-next" data-automation-id="pager-next"></i>
        </li>
      </ul>
      <novo-loading *ngIf="loading"></novo-loading>
      <button *ngIf="errorLoading"
              theme="primary"
              color="negative"
              icon="refresh"
              (click)="paginationRefreshSubject.next()">{{ labels.refreshPagination }}</button>
    </ng-container>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NovoLabelService }, { type: DataTableState }]; }, propDecorators: { theme: [{
                type: HostBinding,
                args: ['class']
            }, {
                type: Input
            }], page: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], dataFeatureId: [{
                type: Input
            }], pageSizeOptions: [{
                type: Input
            }], canSelectAll: [{
                type: Input
            }], allMatchingSelected: [{
                type: Input
            }], loading: [{
                type: Input
            }], errorLoading: [{
                type: Input
            }], paginationRefreshSubject: [{
                type: Input
            }], length: [{
                type: Input
            }], pageChange: [{
                type: Output
            }] } });

class NovoDataTableHeaderRow extends CdkHeaderRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-data-table-header-row';
        this.fixedHeader = false;
        this.role = 'row';
    }
}
NovoDataTableHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDataTableHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableHeaderRow, selector: "novo-data-table-header-row", inputs: { fixedHeader: "fixedHeader" }, host: { properties: { "class": "this.rowClass", "class.fixed-header": "this.fixedHeader", "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, directives: [{ type: i1$9.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableHeaderRow, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-header-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { rowClass: [{
                type: HostBinding,
                args: ['class']
            }], fixedHeader: [{
                type: HostBinding,
                args: ['class.fixed-header']
            }, {
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });

class NovoDataTableRow extends CdkRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-data-table-row';
        this.role = 'row';
    }
}
NovoDataTableRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableRow, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDataTableRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTableRow, selector: "novo-data-table-row", inputs: { id: "id", dataAutomationId: "dataAutomationId" }, host: { properties: { "class": "this.rowClass", "attr.role": "this.role", "attr.id": "this.id", "attr.data-automation-id": "this.dataAutomationId" } }, usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, directives: [{ type: i1$9.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableRow, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { rowClass: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], dataAutomationId: [{
                type: HostBinding,
                args: ['attr.data-automation-id']
            }, {
                type: Input
            }] } });

function interpolateCell(value, col) {
    if (col.format) {
        return Helpers.interpolateWithFallback(col.format, value);
    }
    return value;
}
class DataTableInterpolatePipe {
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return interpolateCell(value, column);
        }
        return '';
    }
}
DataTableInterpolatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableInterpolatePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
DataTableInterpolatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableInterpolatePipe, name: "dataTableInterpolate" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableInterpolatePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableInterpolate',
                    pure: true,
                }]
        }] });
class DateTableDateRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDate(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateRendererPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableDateRendererPipe, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
DateTableDateRendererPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableDateRendererPipe, name: "dataTableDateRenderer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableDateRendererPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableDateRenderer',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });
class DateTableDateTimeRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDateShort(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableDateTimeRendererPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableDateTimeRendererPipe, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
DateTableDateTimeRendererPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableDateTimeRendererPipe, name: "dataTableDateTimeRenderer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableDateTimeRendererPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableDateTimeRenderer',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });
class DateTableTimeRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatTime(interpolateCell(value, column));
        }
        return '';
    }
}
DateTableTimeRendererPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableTimeRendererPipe, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
DateTableTimeRendererPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableTimeRendererPipe, name: "dataTableTimeRenderer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableTimeRendererPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableTimeRenderer',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });
class DateTableNumberRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column, isPercent = false) {
        if (!Helpers.isEmpty(value)) {
            let val = interpolateCell(value, column);
            if (isPercent && Helpers.isNumber(val)) {
                val = `${Number(val) * 100}`;
            }
            return `${this.labels.formatNumber(val)}${isPercent ? '%' : ''}`;
        }
        return '';
    }
}
DateTableNumberRendererPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableNumberRendererPipe, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
DateTableNumberRendererPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableNumberRendererPipe, name: "dataTableNumberRenderer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableNumberRendererPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableNumberRenderer',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });
class DataTableBigDecimalRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            const val = interpolateCell(value, column);
            return this.labels.formatBigDecimal(Number(val), column.configuration);
        }
        return '';
    }
}
DataTableBigDecimalRendererPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableBigDecimalRendererPipe, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
DataTableBigDecimalRendererPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableBigDecimalRendererPipe, name: "dataTableBigDecimalRenderer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DataTableBigDecimalRendererPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableBigDecimalRenderer',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });
class DateTableCurrencyRendererPipe {
    constructor(labels) {
        this.labels = labels;
    }
    transform(value, column) {
        if (!Helpers.isEmpty(value)) {
            const val = interpolateCell(value, column);
            return this.labels.formatCurrency(Number(val));
        }
        return '';
    }
}
DateTableCurrencyRendererPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableCurrencyRendererPipe, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
DateTableCurrencyRendererPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableCurrencyRendererPipe, name: "dataTableCurrencyRenderer" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateTableCurrencyRendererPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'dataTableCurrencyRenderer',
                    pure: true,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });

class NovoDataTable {
    constructor(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.resized = new EventEmitter();
        this.name = 'novo-data-table';
        this.allowMultipleFilters = false;
        this.rowIdentifier = 'id';
        this.activeRowIdentifier = '';
        // prettier-ignore
        this.trackByFn = (index, item) => item.id;
        this.templates = {};
        this.fixedHeader = false;
        this.maxSelected = undefined;
        this.canSelectAll = false;
        this.allMatchingSelected = false;
        this._hideGlobalSearch = true;
        this.preferencesChanged = new EventEmitter();
        this.allSelected = new EventEmitter();
        this.loading = true;
        this.columnToTemplate = {};
        this.columnsLoaded = false;
        this.selection = new Set();
        this.scrollLeft = 0;
        this.expandable = false;
        this.initialized = false;
        this.scrollListenerHandler = this.scrollListener.bind(this);
        this.sortFilterSubscription = this.state.sortFilterSource.subscribe((event) => {
            if (this.name !== 'novo-data-table') {
                this.preferencesChanged.emit({
                    name: this.name,
                    sort: event.sort,
                    filter: event.filter,
                    globalSearch: event.globalSearch,
                    where: event.where,
                    savedSearchName: event.savedSearchName,
                });
                this.performInteractions('change');
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.paginationSubscription = this.state.paginationSource.subscribe((event) => {
            if (this.name !== 'novo-data-table') {
                if (event.isPageSizeChange) {
                    this.preferencesChanged.emit({ name: this.name, pageSize: event.pageSize });
                }
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.resetSubscription = this.state.resetSource.subscribe(() => {
            setTimeout(() => {
                this.ref.detectChanges();
            }, 300);
        });
        this.allMatchingSelectedSubscription = this.state.allMatchingSelectedSource.subscribe((event) => {
            this.allMatchingSelected = event;
        });
    }
    set displayedColumns(displayedColumns) {
        if (this.displayedColumns && this.displayedColumns.length !== 0) {
            if (this.name !== 'novo-data-table') {
                this.preferencesChanged.emit({
                    name: this.name,
                    displayedColumns,
                });
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        }
        this._disabledColumns = displayedColumns;
        this.configureLastDisplayedColumn();
        if (this.initialized) {
            setTimeout(() => {
                this.scrollListener();
            });
        }
    }
    get displayedColumns() {
        return this._disabledColumns;
    }
    set dataTableService(service) {
        this.loading = false;
        if (!service) {
            service = new StaticDataTableService([]);
        }
        this.dataSource = new DataTableSource(service, this.state, this.ref);
        this.ref.detectChanges();
    }
    set rows(rows) {
        this.loading = false;
        const service = new StaticDataTableService(rows);
        this.dataSource = new DataTableSource(service, this.state, this.ref);
        this.ref.detectChanges();
    }
    set outsideFilter(outsideFilter) {
        // Unsubscribe
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (outsideFilter) {
            // Re-subscribe
            this.outsideFilterSubscription = outsideFilter.subscribe((filter) => {
                this.state.outsideFilter = filter;
                this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort, where: this.state.where });
                this.ref.markForCheck();
            });
        }
    }
    set refreshSubject(refreshSubject) {
        // Unsubscribe
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (refreshSubject) {
            // Re-subscribe
            this.refreshSubscription = refreshSubject.subscribe((filter) => {
                this.state.isForceRefresh = true;
                this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort, where: this.state.where });
                this.ref.markForCheck();
            });
        }
    }
    set columns(columns) {
        this._columns = columns;
        this.configureColumns();
        this.performInteractions('init');
    }
    get columns() {
        return this._columns;
    }
    set customFilter(v) {
        this._customFilter = coerceBooleanProperty(v);
    }
    get customFilter() {
        return this._customFilter;
    }
    set hasExandedRows(v) {
        this._hasExandedRows = coerceBooleanProperty(v);
    }
    get hasExandedRows() {
        return this._hasExandedRows;
    }
    set forceShowHeader(v) {
        this._forceShowHeader = coerceBooleanProperty(v);
    }
    get forceShowHeader() {
        return this._forceShowHeader;
    }
    set hideGlobalSearch(v) {
        this._hideGlobalSearch = coerceBooleanProperty(v);
        this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
    }
    get hideGlobalSearch() {
        return this._hideGlobalSearch;
    }
    get empty() {
        return this.dataSource && this.dataSource.totallyEmpty;
    }
    get loadingClass() {
        return this.loading || (this.dataSource && this.dataSource.loading);
    }
    modifyCellHeaderMultiSelectFilterOptions(column, newOptions) {
        const header = this.cellHeaders.find((cellHeader) => cellHeader.id === column);
        if (header) {
            if (header.config && header.config.filterConfig && header.config.filterConfig.options) {
                const filterOptions = header.config.filterConfig.options;
                const optionsToKeep = filterOptions.filter((opt) => header.isSelected(opt, header.multiSelectedOptions) &&
                    !newOptions.find((newOpt) => opt.value && newOpt.value && newOpt.value === opt.value));
                header.config.filterConfig.options = [...optionsToKeep, ...newOptions];
            }
            else {
                header.config.filterConfig.options = newOptions;
            }
            header.setupFilterOptions();
            header.changeDetectorRef.markForCheck();
        }
    }
    ngOnDestroy() {
        this.outsideFilterSubscription?.unsubscribe();
        this.refreshSubscription?.unsubscribe();
        this.resetSubscription?.unsubscribe();
        this.sortFilterSubscription?.unsubscribe();
        this.allMatchingSelectedSubscription?.unsubscribe();
        if (this.novoDataTableContainer) {
            this.novoDataTableContainer.nativeElement.removeEventListener('scroll', this.scrollListenerHandler);
        }
    }
    ngAfterContentInit() {
        if (this.displayedColumns && this.displayedColumns.length) {
            this.expandable = this.displayedColumns.includes('expand');
        }
        // Default templates defined here
        this.defaultTemplates.forEach((item) => {
            // Only override if it doesn't already exist
            if (!this.templates[item.getType()]) {
                this.templates[item.getType()] = item.template;
            }
        });
        // Custom templates passed in
        this.customTemplates.forEach((item) => {
            // Override anything that is custom and in HTML
            this.templates[item.getType()] = item.template;
        });
        // Load columns
        this.configureColumns();
        // State
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.state.selectionOptions = this.selectionOptions ?? undefined;
        // Scrolling inside table
        this.novoDataTableContainer.nativeElement.addEventListener('scroll', this.scrollListenerHandler);
        this.initialized = true;
        this.ref.markForCheck();
    }
    onSearchChange(term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort, where: this.state.where });
    }
    trackColumnsBy(index, item) {
        return item.id;
    }
    isDisabled(check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledFunc) {
            return check.disabledFunc(row);
        }
        return false;
    }
    isExpanded(row) {
        if (!row) {
            return false;
        }
        return this.state.expandedRows.has(`${row[this.rowIdentifier]}`);
    }
    expandRow(row) {
        const expanded = this.isExpanded(row);
        if (expanded) {
            this.state.expandedRows.delete(`${row[this.rowIdentifier]}`);
        }
        else {
            this.state.expandedRows.add(`${row[this.rowIdentifier]}`);
        }
        this.state.onExpandChange(row.id);
    }
    expandRows(expand) {
        (this.dataSource.data || []).forEach((row) => {
            if (!expand) {
                this.state.expandedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.expandedRows.add(`${row[this.rowIdentifier]}`);
            }
        });
        this.state.onExpandChange();
    }
    allCurrentRowsExpanded() {
        for (let i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isExpanded((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    }
    isSelected(row) {
        if (!row) {
            return false;
        }
        return this.state.selectedRows.has(`${row[this.rowIdentifier]}`);
    }
    selectRow(row, origin) {
        const selected = this.isSelected(row);
        if (selected) {
            this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
        }
        else {
            if (this.canSelectAll && this.allMatchingSelected && ['onClick'].includes(origin)) {
                // When all matching records are selected the user could be on another page where all rows only appear selected
                // Need to reset the rows that are actually selected, select rows on the current page and deselect the chosen record
                this.state.selectedRows.clear();
                this.selectRows(true);
                this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.selectedRows.set(`${row[this.rowIdentifier]}`, row);
            }
        }
        this.state.allMatchingSelectedSource.next(false);
        this.state.onSelectionChange();
    }
    selectRows(selected) {
        (this.dataSource.data || []).forEach((row) => {
            if (!selected) {
                this.state.selectedRows.delete(`${row[this.rowIdentifier]}`);
            }
            else {
                this.state.selectedRows.set(`${row[this.rowIdentifier]}`, row);
            }
        });
        this.state.onSelectionChange();
    }
    allCurrentRowsSelected() {
        if (this.allMatchingSelected) {
            return true;
        }
        if (!this.dataSource?.data?.length) {
            return false;
        }
        for (let i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isSelected((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    }
    configureLastDisplayedColumn() {
        if (this.columns && this.displayedColumns && 0 !== this.columns.length && 0 !== this.displayedColumns.length) {
            this.columns.forEach((column) => {
                if (column.initialResizable) {
                    column.resizable = column.initialResizable.resizable;
                    column.width = column.initialResizable.width;
                    column.initialResizable = undefined;
                }
            });
            const resizableColumns = this.displayedColumns.filter((name) => {
                return (this.columns.findIndex((column) => {
                    return column.resizable && column.id === name;
                }) !== -1);
            });
            if (resizableColumns && resizableColumns.length > 0) {
                const lastResizableColumn = this.columns.find((column) => {
                    return column.id === resizableColumns[resizableColumns.length - 1];
                });
                lastResizableColumn.initialResizable = {
                    resizable: lastResizableColumn.resizable,
                    width: lastResizableColumn.width,
                };
                lastResizableColumn.width = undefined;
                lastResizableColumn.resizable = false;
            }
        }
    }
    configureColumns() {
        if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
            // Figure the column templates
            this.columns.forEach((column) => {
                // Figure the template
                let templateName;
                if (column.template) {
                    // Pass it in as template
                    templateName = column.template;
                }
                else if (!!this.templates[column.id]) {
                    // Custom template for the column id
                    templateName = column.id;
                }
                else {
                    // Default to the defaulCellTemplate
                    if (column.type === 'action') {
                        if (column.action && column.action.options) {
                            if (!column.action.icon) {
                                column.action.icon = 'collapse';
                            }
                            templateName = 'dropdownCellTemplate';
                        }
                        else {
                            templateName = 'buttonCellTemplate';
                        }
                    }
                    else {
                        if (column.type === 'link:tel' || column.type === 'link:mailto') {
                            templateName = `${column.type.split(':')[1]}CellTemplate`;
                        }
                        else {
                            templateName = `${column.type}CellTemplate`;
                        }
                    }
                }
                this.columnToTemplate[column.id] = this.templates[templateName];
            });
            this.configureLastDisplayedColumn();
            this.columnsLoaded = true;
        }
    }
    scrollListener() {
        const target = this.novoDataTableContainer.nativeElement;
        const left = target.scrollLeft;
        if (left !== this.scrollLeft) {
            this.scrollLeft = target.scrollLeft;
        }
        this.ref.markForCheck();
    }
    performInteractions(event) {
        if (this.listInteractions) {
            for (const column of this.columns) {
                const allListColumnInteractions = this.listInteractions[column.id];
                const listColumnInteraction = allListColumnInteractions && allListColumnInteractions.find((int) => int.event.includes(event));
                if (listColumnInteraction) {
                    listColumnInteraction.script(this, column.id);
                }
            }
        }
    }
}
NovoDataTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTable, deps: [{ token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: DataTableState }], target: i0.ɵɵFactoryTarget.Component });
NovoDataTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDataTable, selector: "novo-data-table", inputs: { displayedColumns: "displayedColumns", paginationOptions: "paginationOptions", searchOptions: "searchOptions", selectionOptions: "selectionOptions", defaultSort: "defaultSort", name: "name", allowMultipleFilters: "allowMultipleFilters", rowIdentifier: "rowIdentifier", activeRowIdentifier: "activeRowIdentifier", trackByFn: "trackByFn", templates: "templates", fixedHeader: "fixedHeader", paginatorDataFeatureId: "paginatorDataFeatureId", maxSelected: "maxSelected", canSelectAll: "canSelectAll", allMatchingSelected: "allMatchingSelected", overrideTotal: "overrideTotal", paginationRefreshSubject: "paginationRefreshSubject", dataTableService: "dataTableService", rows: "rows", outsideFilter: "outsideFilter", refreshSubject: "refreshSubject", columns: "columns", customFilter: "customFilter", hasExandedRows: "hasExandedRows", forceShowHeader: "forceShowHeader", hideGlobalSearch: "hideGlobalSearch", listInteractions: "listInteractions" }, outputs: { resized: "resized", preferencesChanged: "preferencesChanged", allSelected: "allSelected" }, host: { properties: { "class.global-search-hidden": "this.globalSearchHiddenClassToggle", "class.empty": "this.empty", "class.loading": "this.loadingClass" } }, providers: [DataTableState, { provide: NOVO_DATA_TABLE_REF, useExisting: NovoDataTable }], queries: [{ propertyName: "customTemplates", predicate: NovoTemplate }], viewQueries: [{ propertyName: "novoDataTableContainer", first: true, predicate: ["novoDataTableContainer"], descendants: true }, { propertyName: "defaultTemplates", predicate: NovoTemplate, descendants: true }, { propertyName: "cellHeaders", predicate: NovoDataTableCellHeader, descendants: true }], ngImport: i0, template: `
    <header
      *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader"
      [class.empty]="hideGlobalSearch && !paginationOptions && !templates['customActions']"
    >
      <ng-container *ngTemplateOutlet="templates['customHeader']"></ng-container>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-data-table-pagination
        *ngIf="paginationOptions"
        [theme]="paginationOptions.theme"
        [length]="null !== overrideTotal && overrideTotal !== undefined ? overrideTotal : dataSource?.currentTotal"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
        [dataFeatureId]="paginatorDataFeatureId"
        [canSelectAll]="canSelectAll"
        [allMatchingSelected]="allMatchingSelected"
        [loading]="paginationOptions.loading"
        [errorLoading]="paginationOptions.errorLoading"
        [paginationRefreshSubject]="paginationRefreshSubject"
      >
      </novo-data-table-pagination>
      <div class="novo-data-table-actions" *ngIf="templates['customActions']">
        <ng-container *ngTemplateOutlet="templates['customActions']"></ng-container>
      </div>
    </header>
    <div class="novo-data-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-data-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-data-table-outside-container" [ngClass]="{ 'novo-data-table-outside-container-fixed': fixedHeader }">
      <div class="novo-data-table-custom-filter" *ngIf="customFilter">
        <ng-container *ngTemplateOutlet="templates['customFilter']"></ng-container>
      </div>
      <div
        #novoDataTableContainer
        class="novo-data-table-container"
        [ngClass]="{ 'novo-data-table-container-fixed': fixedHeader }"
        [class.empty-user-filtered]="dataSource?.currentlyEmpty && state.userFiltered"
        [class.empty]="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <cdk-table
          *ngIf="columns?.length > 0 && columnsLoaded && dataSource"
          [dataSource]="dataSource"
          [trackBy]="trackByFn"
          novoDataTableSortFilter
          [class.expandable]="expandable"
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered"
        >
          <ng-container cdkColumnDef="selection">
            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef [maxSelected]="maxSelected"></novo-data-table-checkbox-header-cell>
            <novo-data-table-checkbox-cell
              *cdkCellDef="let row; let i = index"
              [row]="row"
              [maxSelected]="maxSelected"
            ></novo-data-table-checkbox-cell>
          </ng-container>
          <ng-container cdkColumnDef="expand">
            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>
            <novo-data-table-expand-cell *cdkCellDef="let row; let i = index" [row]="row"></novo-data-table-expand-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns; trackBy: trackColumnsBy" [cdkColumnDef]="column.id">
            <novo-data-table-header-cell
              *cdkHeaderCellDef
              [column]="column"
              [filterTemplate]="templates['column-filter-' + column.id]"
              [novo-data-table-cell-config]="column"
              [resized]="resized"
              [defaultSort]="defaultSort"
              [allowMultipleFilters]="allowMultipleFilters"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-header-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-header-cell]="column?.type === 'action' && column?.action?.options"
              [class.fixed-header]="fixedHeader"
            ></novo-data-table-header-cell>
            <novo-data-table-cell
              *cdkCellDef="let row"
              [resized]="resized"
              [column]="column"
              [row]="row"
              [template]="columnToTemplate[column.id]"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-cell]="column?.type === 'action' && column?.action?.options"
            ></novo-data-table-cell>
          </ng-container>
          <novo-data-table-header-row
            *cdkHeaderRowDef="displayedColumns"
            [fixedHeader]="fixedHeader"
            data-automation-id="novo-data-table-header-row"
          ></novo-data-table-header-row>
          <novo-data-table-row
            *cdkRowDef="let row; columns: displayedColumns"
            [ngClass]="{ active: row[rowIdentifier] == activeRowIdentifier }"
            [novoDataTableExpand]="detailRowTemplate"
            [row]="row"
            [id]="name + '-' + row[rowIdentifier]"
            [dataAutomationId]="row[rowIdentifier]"
          ></novo-data-table-row>
        </cdk-table>
        <div class="novo-data-table-footer" *ngIf="templates['footer']">
          <ng-container *ngTemplateOutlet="templates['footer']; context: { $implicit: columns, data: dataSource.data }"></ng-container>
        </div>
        <div
          class="novo-data-table-no-results-container"
          [style.left.px]="scrollLeft"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div class="novo-data-table-empty-message">
            <ng-container *ngTemplateOutlet="templates['noResultsMessage'] || templates['defaultNoResultsMessage']"></ng-container>
          </div>
        </div>
        <div
          class="novo-data-table-no-more-results-container"
          [style.left.px]="scrollLeft"
          *ngIf="!dataSource?.totallyEmpty && dataSource?.currentlyEmpty && !state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div class="novo-data-table-empty-message">
            <ng-container *ngTemplateOutlet="templates['noMoreResultsMessage'] || templates['defaultNoMoreResultsMessage']"></ng-container>
          </div>
        </div>
      </div>
      <div
        class="novo-data-table-empty-container"
        *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <div class="novo-data-table-empty-message">
          <ng-container *ngTemplateOutlet="templates['emptyMessage'] || templates['defaultNoResultsMessage']"></ng-container>
        </div>
      </div>
    </div>
    <!-- DEFAULT CELL TEMPLATE -->
    <ng-template novoTemplate="textCellTemplate" let-row let-col="col">
      <span [style.width.px]="col?.width" [style.min-width.px]="col?.width" [style.max-width.px]="col?.width">{{
        row[col.id] | dataTableInterpolate: col
      }}</span>
    </ng-template>
    <ng-template novoTemplate="dateCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="datetimeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="timeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="currencyCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableCurrencyRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="bigdecimalCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableBigDecimalRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="numberCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="percentCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col:true }}</span>
    </ng-template>
    <ng-template novoTemplate="linkCellTemplate" let-row let-col="col">
      <a
        [attr.data-feature-id]="col?.attributes?.dataFeatureId"
        (click)="col.handlers?.click({ originalEvent: $event, row: row })"
        [style.width.px]="col?.width"
        [style.min-width.px]="col?.width"
        [style.max-width.px]="col?.width"
        >{{ row[col.id] | dataTableInterpolate: col }}</a
      >
    </ng-template>
    <ng-template novoTemplate="telCellTemplate" let-row let-col="col">
      <a href="tel:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="mailtoCellTemplate" let-row let-col="col">
      <a href="mailto:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="buttonCellTemplate" let-row let-col="col">
      <novo-button
        size="small"
        theme="icon"
        [tooltip]="col?.action?.tooltip"
        tooltipPosition="right"
        [attr.data-feature-id]="col?.attributes?.dataFeatureId"
        [disabled]="isDisabled(col, row)"
        (click)="col.handlers?.click({ originalEvent: $event, row: row })"
      >
        <novo-icon>{{ col?.action?.icon }}</novo-icon>
      </novo-button>
    </ng-template>
    <ng-template novoTemplate="dropdownCellTemplate" let-row let-col="col">
      <novo-dropdown parentScrollSelector=".novo-data-table-container" containerClass="novo-data-table-dropdown">
        <novo-button type="button" theme="dialogue" [icon]="col.action.icon" inverse>{{ col.label }}</novo-button>
        <novo-optgroup>
          <novo-option
            *ngFor="let option of col?.action?.options"
            (click)="option.handlers.click({ originalEvent: $event?.originalEvent, row: row })"
            [disabled]="isDisabled(option, row)"
          >
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </novo-option>
        </novo-optgroup>
      </novo-dropdown>
    </ng-template>
    <ng-template novoTemplate="defaultNoResultsMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="defaultNoMoreResultsMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.noMoreRecordsMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="defaultEmptyMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="expandedRow"> You did not provide an "expandedRow" template! </ng-template>
    <ng-template #detailRowTemplate let-row>
      <div class="novo-data-table-detail-row" [@expand] style="overflow: hidden">
        <ng-container *ngTemplateOutlet="templates['expandedRow']; context: { $implicit: row }"></ng-container>
      </div>
    </ng-template>
    <!-- CUSTOM CELLS PASSED IN -->
    <ng-content></ng-content>
  `, isInline: true, components: [{ type: NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation"], outputs: ["searchChanged", "applySearch"] }, { type: NovoDataTablePagination, selector: "novo-data-table-pagination", inputs: ["theme", "page", "pageSize", "dataFeatureId", "pageSizeOptions", "canSelectAll", "allMatchingSelected", "loading", "errorLoading", "paginationRefreshSubject", "length"], outputs: ["pageChange"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: i1$9.CdkTable, selector: "cdk-table, table[cdk-table]", inputs: ["trackBy", "dataSource", "multiTemplateDataRows", "fixedLayout"], outputs: ["contentChanged"], exportAs: ["cdkTable"] }, { type: NovoDataTableCheckboxHeaderCell, selector: "novo-data-table-checkbox-header-cell", inputs: ["maxSelected"] }, { type: NovoDataTableCheckboxCell, selector: "novo-data-table-checkbox-cell", inputs: ["row", "maxSelected"] }, { type: NovoDataTableExpandHeaderCell, selector: "novo-data-table-expand-header-cell" }, { type: NovoDataTableExpandCell, selector: "novo-data-table-expand-cell", inputs: ["row"] }, { type: NovoDataTableCellHeader, selector: "[novo-data-table-cell-config]", inputs: ["defaultSort", "allowMultipleFilters", "resized", "filterTemplate", "novo-data-table-cell-config"] }, { type: NovoDataTableCell, selector: "novo-data-table-cell", inputs: ["row", "template", "column", "resized"] }, { type: NovoDataTableHeaderRow, selector: "novo-data-table-header-row", inputs: ["fixedHeader"] }, { type: NovoDataTableRow, selector: "novo-data-table-row", inputs: ["id", "dataAutomationId"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: NovoDataTableSortFilter, selector: "[novoDataTableSortFilter]" }, { type: i1$9.CdkColumnDef, selector: "[cdkColumnDef]", inputs: ["sticky", "cdkColumnDef", "stickyEnd"] }, { type: i1$9.CdkHeaderCellDef, selector: "[cdkHeaderCellDef]" }, { type: i1$9.CdkCellDef, selector: "[cdkCellDef]" }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: NovoDataTableHeaderCell, selector: "novo-data-table-header-cell", inputs: ["column"] }, { type: i1$9.CdkHeaderRowDef, selector: "[cdkHeaderRowDef]", inputs: ["cdkHeaderRowDef", "cdkHeaderRowDefSticky"] }, { type: i1$9.CdkRowDef, selector: "[cdkRowDef]", inputs: ["cdkRowDefColumns", "cdkRowDefWhen"] }, { type: NovoDataTableExpandDirective, selector: "[novoDataTableExpand]", inputs: ["row", "novoDataTableExpand"] }, { type: NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }], pipes: { "dataTableInterpolate": DataTableInterpolatePipe, "dataTableDateRenderer": DateTableDateRendererPipe, "dataTableDateTimeRenderer": DateTableDateTimeRendererPipe, "dataTableTimeRenderer": DateTableTimeRendererPipe, "dataTableCurrencyRenderer": DateTableCurrencyRendererPipe, "dataTableBigDecimalRenderer": DataTableBigDecimalRendererPipe, "dataTableNumberRenderer": DateTableNumberRendererPipe }, animations: [
        trigger('expand', [
            state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
            state('*', style({ height: '*', visibility: 'visible' })),
            transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
        ]),
    ], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTable, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-data-table',
                    animations: [
                        trigger('expand', [
                            state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                            state('*', style({ height: '*', visibility: 'visible' })),
                            transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                        ]),
                    ],
                    template: `
    <header
      *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader"
      [class.empty]="hideGlobalSearch && !paginationOptions && !templates['customActions']"
    >
      <ng-container *ngTemplateOutlet="templates['customHeader']"></ng-container>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-data-table-pagination
        *ngIf="paginationOptions"
        [theme]="paginationOptions.theme"
        [length]="null !== overrideTotal && overrideTotal !== undefined ? overrideTotal : dataSource?.currentTotal"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
        [dataFeatureId]="paginatorDataFeatureId"
        [canSelectAll]="canSelectAll"
        [allMatchingSelected]="allMatchingSelected"
        [loading]="paginationOptions.loading"
        [errorLoading]="paginationOptions.errorLoading"
        [paginationRefreshSubject]="paginationRefreshSubject"
      >
      </novo-data-table-pagination>
      <div class="novo-data-table-actions" *ngIf="templates['customActions']">
        <ng-container *ngTemplateOutlet="templates['customActions']"></ng-container>
      </div>
    </header>
    <div class="novo-data-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-data-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-data-table-outside-container" [ngClass]="{ 'novo-data-table-outside-container-fixed': fixedHeader }">
      <div class="novo-data-table-custom-filter" *ngIf="customFilter">
        <ng-container *ngTemplateOutlet="templates['customFilter']"></ng-container>
      </div>
      <div
        #novoDataTableContainer
        class="novo-data-table-container"
        [ngClass]="{ 'novo-data-table-container-fixed': fixedHeader }"
        [class.empty-user-filtered]="dataSource?.currentlyEmpty && state.userFiltered"
        [class.empty]="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <cdk-table
          *ngIf="columns?.length > 0 && columnsLoaded && dataSource"
          [dataSource]="dataSource"
          [trackBy]="trackByFn"
          novoDataTableSortFilter
          [class.expandable]="expandable"
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered"
        >
          <ng-container cdkColumnDef="selection">
            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef [maxSelected]="maxSelected"></novo-data-table-checkbox-header-cell>
            <novo-data-table-checkbox-cell
              *cdkCellDef="let row; let i = index"
              [row]="row"
              [maxSelected]="maxSelected"
            ></novo-data-table-checkbox-cell>
          </ng-container>
          <ng-container cdkColumnDef="expand">
            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>
            <novo-data-table-expand-cell *cdkCellDef="let row; let i = index" [row]="row"></novo-data-table-expand-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns; trackBy: trackColumnsBy" [cdkColumnDef]="column.id">
            <novo-data-table-header-cell
              *cdkHeaderCellDef
              [column]="column"
              [filterTemplate]="templates['column-filter-' + column.id]"
              [novo-data-table-cell-config]="column"
              [resized]="resized"
              [defaultSort]="defaultSort"
              [allowMultipleFilters]="allowMultipleFilters"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-header-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-header-cell]="column?.type === 'action' && column?.action?.options"
              [class.fixed-header]="fixedHeader"
            ></novo-data-table-header-cell>
            <novo-data-table-cell
              *cdkCellDef="let row"
              [resized]="resized"
              [column]="column"
              [row]="row"
              [template]="columnToTemplate[column.id]"
              [class.empty]="column?.type === 'action' && !column?.label"
              [class.button-cell]="column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)"
              [class.dropdown-cell]="column?.type === 'action' && column?.action?.options"
            ></novo-data-table-cell>
          </ng-container>
          <novo-data-table-header-row
            *cdkHeaderRowDef="displayedColumns"
            [fixedHeader]="fixedHeader"
            data-automation-id="novo-data-table-header-row"
          ></novo-data-table-header-row>
          <novo-data-table-row
            *cdkRowDef="let row; columns: displayedColumns"
            [ngClass]="{ active: row[rowIdentifier] == activeRowIdentifier }"
            [novoDataTableExpand]="detailRowTemplate"
            [row]="row"
            [id]="name + '-' + row[rowIdentifier]"
            [dataAutomationId]="row[rowIdentifier]"
          ></novo-data-table-row>
        </cdk-table>
        <div class="novo-data-table-footer" *ngIf="templates['footer']">
          <ng-container *ngTemplateOutlet="templates['footer']; context: { $implicit: columns, data: dataSource.data }"></ng-container>
        </div>
        <div
          class="novo-data-table-no-results-container"
          [style.left.px]="scrollLeft"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div class="novo-data-table-empty-message">
            <ng-container *ngTemplateOutlet="templates['noResultsMessage'] || templates['defaultNoResultsMessage']"></ng-container>
          </div>
        </div>
        <div
          class="novo-data-table-no-more-results-container"
          [style.left.px]="scrollLeft"
          *ngIf="!dataSource?.totallyEmpty && dataSource?.currentlyEmpty && !state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div class="novo-data-table-empty-message">
            <ng-container *ngTemplateOutlet="templates['noMoreResultsMessage'] || templates['defaultNoMoreResultsMessage']"></ng-container>
          </div>
        </div>
      </div>
      <div
        class="novo-data-table-empty-container"
        *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
      >
        <div class="novo-data-table-empty-message">
          <ng-container *ngTemplateOutlet="templates['emptyMessage'] || templates['defaultNoResultsMessage']"></ng-container>
        </div>
      </div>
    </div>
    <!-- DEFAULT CELL TEMPLATE -->
    <ng-template novoTemplate="textCellTemplate" let-row let-col="col">
      <span [style.width.px]="col?.width" [style.min-width.px]="col?.width" [style.max-width.px]="col?.width">{{
        row[col.id] | dataTableInterpolate: col
      }}</span>
    </ng-template>
    <ng-template novoTemplate="dateCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="datetimeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="timeCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableTimeRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="currencyCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableCurrencyRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="bigdecimalCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableBigDecimalRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="numberCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col }}</span>
    </ng-template>
    <ng-template novoTemplate="percentCellTemplate" let-row let-col="col">
      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col:true }}</span>
    </ng-template>
    <ng-template novoTemplate="linkCellTemplate" let-row let-col="col">
      <a
        [attr.data-feature-id]="col?.attributes?.dataFeatureId"
        (click)="col.handlers?.click({ originalEvent: $event, row: row })"
        [style.width.px]="col?.width"
        [style.min-width.px]="col?.width"
        [style.max-width.px]="col?.width"
        >{{ row[col.id] | dataTableInterpolate: col }}</a
      >
    </ng-template>
    <ng-template novoTemplate="telCellTemplate" let-row let-col="col">
      <a href="tel:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="mailtoCellTemplate" let-row let-col="col">
      <a href="mailto:{{ row[col.id] | dataTableInterpolate: col }}" [target]="col?.attributes?.target">{{
        row[col.id] | dataTableInterpolate: col
      }}</a>
    </ng-template>
    <ng-template novoTemplate="buttonCellTemplate" let-row let-col="col">
      <novo-button
        size="small"
        theme="icon"
        [tooltip]="col?.action?.tooltip"
        tooltipPosition="right"
        [attr.data-feature-id]="col?.attributes?.dataFeatureId"
        [disabled]="isDisabled(col, row)"
        (click)="col.handlers?.click({ originalEvent: $event, row: row })"
      >
        <novo-icon>{{ col?.action?.icon }}</novo-icon>
      </novo-button>
    </ng-template>
    <ng-template novoTemplate="dropdownCellTemplate" let-row let-col="col">
      <novo-dropdown parentScrollSelector=".novo-data-table-container" containerClass="novo-data-table-dropdown">
        <novo-button type="button" theme="dialogue" [icon]="col.action.icon" inverse>{{ col.label }}</novo-button>
        <novo-optgroup>
          <novo-option
            *ngFor="let option of col?.action?.options"
            (click)="option.handlers.click({ originalEvent: $event?.originalEvent, row: row })"
            [disabled]="isDisabled(option, row)"
          >
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </novo-option>
        </novo-optgroup>
      </novo-dropdown>
    </ng-template>
    <ng-template novoTemplate="defaultNoResultsMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="defaultNoMoreResultsMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.noMoreRecordsMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="defaultEmptyMessage">
      <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
    </ng-template>
    <ng-template novoTemplate="expandedRow"> You did not provide an "expandedRow" template! </ng-template>
    <ng-template #detailRowTemplate let-row>
      <div class="novo-data-table-detail-row" [@expand] style="overflow: hidden">
        <ng-container *ngTemplateOutlet="templates['expandedRow']; context: { $implicit: row }"></ng-container>
      </div>
    </ng-template>
    <!-- CUSTOM CELLS PASSED IN -->
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [DataTableState, { provide: NOVO_DATA_TABLE_REF, useExisting: NovoDataTable }],
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: DataTableState }]; }, propDecorators: { globalSearchHiddenClassToggle: [{
                type: HostBinding,
                args: ['class.global-search-hidden']
            }], customTemplates: [{
                type: ContentChildren,
                args: [NovoTemplate]
            }], defaultTemplates: [{
                type: ViewChildren,
                args: [NovoTemplate]
            }], cellHeaders: [{
                type: ViewChildren,
                args: [NovoDataTableCellHeader]
            }], novoDataTableContainer: [{
                type: ViewChild,
                args: ['novoDataTableContainer']
            }], resized: [{
                type: Output
            }], displayedColumns: [{
                type: Input
            }], paginationOptions: [{
                type: Input
            }], searchOptions: [{
                type: Input
            }], selectionOptions: [{
                type: Input
            }], defaultSort: [{
                type: Input
            }], name: [{
                type: Input
            }], allowMultipleFilters: [{
                type: Input
            }], rowIdentifier: [{
                type: Input
            }], activeRowIdentifier: [{
                type: Input
            }], trackByFn: [{
                type: Input
            }], templates: [{
                type: Input
            }], fixedHeader: [{
                type: Input
            }], paginatorDataFeatureId: [{
                type: Input
            }], maxSelected: [{
                type: Input
            }], canSelectAll: [{
                type: Input
            }], allMatchingSelected: [{
                type: Input
            }], overrideTotal: [{
                type: Input
            }], paginationRefreshSubject: [{
                type: Input
            }], dataTableService: [{
                type: Input
            }], rows: [{
                type: Input
            }], outsideFilter: [{
                type: Input
            }], refreshSubject: [{
                type: Input
            }], columns: [{
                type: Input
            }], customFilter: [{
                type: Input
            }], hasExandedRows: [{
                type: Input
            }], forceShowHeader: [{
                type: Input
            }], hideGlobalSearch: [{
                type: Input
            }], preferencesChanged: [{
                type: Output
            }], allSelected: [{
                type: Output
            }], empty: [{
                type: HostBinding,
                args: ['class.empty']
            }], loadingClass: [{
                type: HostBinding,
                args: ['class.loading']
            }], listInteractions: [{
                type: Input
            }] } });

// NG2
class DateFormatService {
    constructor(labels) {
        this.labels = labels;
    }
    getTimeMask(militaryTime) {
        let mask = [/\d/, /\d/, /:/, /\d/, /\d/];
        let timeFormatArray = [];
        const timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
        if (militaryTime) {
            return mask;
        }
        else {
            timeFormatArray = timeFormat.split('hh:mm');
            if (timeFormatArray && timeFormatArray.length) {
                mask = [];
                for (const timeFormatPart of timeFormatArray) {
                    if (timeFormatPart === '') {
                        mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                    }
                    else if (timeFormatPart.length) {
                        for (let i = 0; i < timeFormatPart.length; i++) {
                            mask.push(/\s|\w|\d|\./);
                        }
                    }
                }
            }
        }
        return mask;
    }
    getDateMask() {
        return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
    }
    getDateTimeMask(militaryTime = false) {
        return [...this.getDateMask(), /\,?/, /\s/, ...this.getTimeMask(militaryTime)];
    }
    getTimePlaceHolder(militaryTime) {
        if (militaryTime) {
            return this.labels.timeFormatPlaceholder24Hour;
        }
        return this.labels.timeFormatPlaceholderAM;
    }
    parseDateString(dateString) {
        let dateFormat = this.labels.dateFormatString();
        const dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi;
        const dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi;
        let dateFormatTokens;
        let dateValueTokens;
        let year;
        let month;
        let day;
        let date = new Date();
        let isInvalidDate = true;
        if (Helpers.isEmpty(dateFormat)) {
            // Default to MM/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        dateFormatTokens = dateFormatRegex.exec(dateFormat);
        dateValueTokens = dateValueRegex.exec(dateString);
        if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
            for (let i = 1; i < 4; i++) {
                if (dateFormatTokens[i].includes('m')) {
                    month = parseInt(dateValueTokens[i], 10) - 1;
                }
                else if (dateFormatTokens[i].includes('d')) {
                    day = parseInt(dateValueTokens[i], 10);
                }
                else {
                    year = parseInt(dateValueTokens[i], 10);
                }
            }
            if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                date = new Date(year, month, day);
                isInvalidDate = false;
            }
        }
        else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
            const twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
            const oneToken = /^(\d{1,4})$/.exec(dateString);
            const delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
            const dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
            if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                dateString = `${dateString}${delimiter[1]}`;
            }
            else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                dateString = `${dateString}${delimiter[1]}`;
            }
        }
        return [date, dateString, isInvalidDate];
    }
    parseTimeString(timeString, militaryTime) {
        const value = new Date();
        let timeStringParts;
        let amFormat = this.labels.timeFormatAM;
        let pmFormat = this.labels.timeFormatPM;
        if (!(timeString && timeString.includes(':'))) {
            return [value, timeString];
        }
        if (!militaryTime && amFormat && pmFormat) {
            let splits = [];
            let pm = false;
            amFormat = this.labels.timeFormatAM.toLowerCase();
            pmFormat = this.labels.timeFormatPM.toLowerCase();
            timeString = timeString.toLowerCase();
            if (timeString.includes(amFormat)) {
                splits = timeString.split(amFormat);
            }
            else if (timeString.includes(pmFormat)) {
                splits = timeString.split(pmFormat);
                pm = true;
            }
            if (splits && splits.length) {
                for (const item of splits) {
                    if (item && item.trim().includes(':')) {
                        timeStringParts = item.trim().split(':');
                    }
                }
            }
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                let hours = parseInt(timeStringParts[0], 10);
                if (hours === 12 && pm) {
                    hours = 12;
                }
                else if (pm) {
                    hours = hours + 12;
                }
                else if (hours === 12) {
                    hours = 0;
                }
                value.setHours(hours);
                value.setMinutes(parseInt(timeStringParts[1], 10));
                value.setSeconds(0);
            }
        }
        else {
            timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                value.setHours(parseInt(timeStringParts[1], 10));
                value.setMinutes(parseInt(timeStringParts[2], 10));
                value.setSeconds(0);
            }
        }
        return [value, timeString];
    }
    parseString(dateTimeString, militaryTime, type) {
        switch (type) {
            case 'datetime':
                const str = dateTimeString.replace(/-/g, '/');
                const parts = str.split(' ');
                const [dt, dts] = this.parseDateString(parts[0]);
                if (parts.length > 1) {
                    const [tm, tms] = this.parseTimeString(parts[1], militaryTime);
                    return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), `${dts} ${tms}`];
                }
                return [dt, dts];
            case 'date':
                return this.parseDateString(dateTimeString);
            case 'time':
                return this.parseTimeString(dateTimeString, militaryTime);
            default:
                return;
        }
    }
    isValidDatePart(value, format) {
        const datePart = parseInt(value, 10);
        if (format.includes('m') && (datePart >= 2 || value.length === 2)) {
            return true;
        }
        else if (format.includes('d') && (datePart >= 4 || value.length === 2)) {
            return true;
        }
        else if (format.includes('y') && datePart >= 1000) {
            return true;
        }
        return false;
    }
}
DateFormatService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateFormatService, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Injectable });
DateFormatService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateFormatService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateFormatService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });

// NG
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR$3 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDatePickerInputElement),
    multi: true,
};
class NovoDatePickerInputElement {
    constructor(element, labels, _changeDetectorRef, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this.dateFormatService = dateFormatService;
        this.formattedValue = '';
        this.invalidDateErrorMessage = '';
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        /**
         * Sets the field as to appear disabled, users will not be able to interact with the text field.
         **/
        this.disabled = false;
        /**
         * Day of the week the calendar should display first, Sunday=0...Saturday=6
         **/
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.changeEvent = new EventEmitter();
        this.placeholder = this.labels.localizedDatePlaceholder();
    }
    ngOnInit() {
        this._initFormatOptions();
    }
    ngOnChanges(changes) {
        if (Object.keys(changes).some((key) => ['format'].includes(key))) {
            this._initFormatOptions();
        }
    }
    _initFormatOptions() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: this.dateFormatService.getDateMask(),
                pipe: createAutoCorrectedDatePipe((this.format || this.labels.dateFormatString()).toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
        this.setupInvalidDateErrorMessage();
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this._handleEvent(event, true);
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            this._handleEvent(event, false);
        }
    }
    _handleBlur(event) {
        this.handleInvalidDate();
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.showInvalidDateError = false;
        this.openPanel();
        this.focusEvent.emit(event);
    }
    _handleEvent(event, blur) {
        const value = event.target.value;
        if (value === '') {
            this.clearValue();
            this.closePanel();
        }
        else {
            this.formatDate(value, blur);
            this.openPanel();
        }
    }
    formatDate(value, blur) {
        try {
            const [dateTimeValue, formatted, isInvalidDate] = this.dateFormatService.parseString(value, false, 'date');
            this.isInvalidDate = isInvalidDate;
            if (!isNaN(dateTimeValue.getUTCDate())) {
                const dt = new Date(dateTimeValue);
                this.dispatchOnChange(dt, blur);
            }
            else {
                this.dispatchOnChange(null, blur);
            }
        }
        catch (err) { }
    }
    writeValue(value) {
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    handleInvalidDate() {
        if (this.isInvalidDate && this.value) {
            this.showInvalidDateError = true;
            this.clearValue();
            this.closePanel();
        }
    }
    setupInvalidDateErrorMessage() {
        let dateFormat = this.labels.dateFormatString();
        if (Helpers.isEmpty(dateFormat)) {
            // Default to mm/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        this.invalidDateErrorMessage = `Invalid date field entered. Date format of ${dateFormat} is required.`;
    }
    dispatchOnChange(newValue, blur = false, skip = false) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this.changeEvent.emit(newValue);
            if (blur) {
                !skip && this.writeValue(newValue);
            }
            else {
                !skip && this._setCalendarValue(newValue);
            }
        }
    }
    _setTriggerValue(value) {
        this._setCalendarValue(value);
        this._setFormValue(value);
        this._changeDetectorRef.markForCheck();
    }
    _setCalendarValue(value) {
        if (value instanceof Date && this.value instanceof Date) {
            let newDate = new Date(value);
            newDate.setHours(0, 0, 0, 0);
            this.value = newDate;
            return;
        }
        this.value = value;
    }
    _setFormValue(value) {
        if (value) {
            const test = this.formatDateValue(value);
            this.formattedValue = test;
        }
        else {
            this.formattedValue = '';
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date, true);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    }
    formatDateValue(value) {
        const originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && dateFns.isValid(value)) {
                return dateFns.format(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoDatePickerInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: DateFormatService }], target: i0.ɵɵFactoryTarget.Component });
NovoDatePickerInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDatePickerInputElement, selector: "novo-date-picker-input", inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", maskOptions: "maskOptions", format: "format", textMaskEnabled: "textMaskEnabled", allowInvalidDate: "allowInvalidDate", disabled: "disabled", disabledDateMessage: "disabledDateMessage", weekStart: "weekStart" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", changeEvent: "changeEvent" }, host: { properties: { "class.disabled": "this.disabled" } }, providers: [DATE_VALUE_ACCESSOR$3], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="formattedValue"
      [textMask]="maskOptions"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="date-input"
      [disabled]="disabled"
    />
    <span class="error-text" *ngIf="showInvalidDateError">{{ invalidDateErrorMessage }}</span>
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-calendar"></i>
    <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [disabledDateMessage]="disabledDateMessage"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }], directives: [{ type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-date-picker-input',
                    providers: [DATE_VALUE_ACCESSOR$3],
                    template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="formattedValue"
      [textMask]="maskOptions"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="date-input"
      [disabled]="disabled"
    />
    <span class="error-text" *ngIf="showInvalidDateError">{{ invalidDateErrorMessage }}</span>
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-calendar"></i>
    <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [disabledDateMessage]="disabledDateMessage"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: DateFormatService }]; }, propDecorators: { name: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], maskOptions: [{
                type: Input
            }], format: [{
                type: Input
            }], textMaskEnabled: [{
                type: Input
            }], allowInvalidDate: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }, {
                type: Input
            }], disabledDateMessage: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], blurEvent: [{
                type: Output
            }], focusEvent: [{
                type: Output
            }], changeEvent: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }] } });

// NG
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateRangeInputElement),
    multi: true,
};
class NovoDateRangeInputElement {
    constructor(element, labels, cdr, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this.cdr = cdr;
        this.dateFormatService = dateFormatService;
        this.formattedStartDate = '';
        this.formattedEndDate = '';
        this.weekRangeSelect = false;
        this.mode = 'range';
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = { startDate: null, endDate: null };
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            this._setFormValue(value);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        this._initFormatOptions();
    }
    ngOnChanges(changes) {
        if (Object.keys(changes).some((key) => ['format'].includes(key))) {
            this._initFormatOptions();
        }
    }
    _initFormatOptions() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: this.dateFormatService.getDateMask(),
                pipe: createAutoCorrectedDatePipe((this.format || this.labels.dateFormatString()).toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay && this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    formatDate(value) {
        try {
            const [dateTimeValue] = this.dateFormatService.parseString(value, false, 'date');
            return new Date(dateTimeValue);
        }
        catch (err) {
            return null;
        }
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _onStartInputChange(event) {
        this._handleKeydown(event);
        if (document.activeElement === event.target) {
            event.stopPropagation();
            const startDate = this.formatDate(event.target.value);
            if (startDate) {
                this.value = {
                    ...this.value,
                    startDate,
                };
                this.change.emit(this.value);
            }
        }
    }
    _onEndInputChange(event) {
        this._handleKeydown(event);
        if (document.activeElement === event.target) {
            event.stopPropagation();
            const endDate = this.formatDate(event.target.value);
            if (endDate) {
                this.value = {
                    ...this.value,
                    endDate,
                };
                this.change.emit(this.value);
            }
        }
    }
    _setFormValue(value) {
        if (this.value) {
            this.formattedStartDate = this.formatDateValue(this.value.startDate);
            this.formattedEndDate = this.formatDateValue(this.value.endDate);
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event) {
        if (event && event.startDate && event.endDate) {
            const startDate = event.startDate.date;
            const endDate = event.endDate.date;
            this.value = { startDate, endDate };
            this.change.emit(this.value);
        }
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearStartValue() {
        this.formattedStartDate = '';
        this.value = { ...this.value, startDate: null };
        this.change.emit(this.value);
    }
    clearEndValue() {
        this.formattedEndDate = '';
        this.value = { ...this.value, endDate: null };
        this.change.emit(this.value);
    }
    formatDateValue(value) {
        const originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && dateFns.isValid(value)) {
                return dateFns.format(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    }
    get hasStartValue() {
        return !Helpers.isEmpty(this.value?.startDate);
    }
    get hasEndValue() {
        return !Helpers.isEmpty(this.value?.endDate);
    }
}
NovoDateRangeInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateRangeInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: DateFormatService }], target: i0.ɵɵFactoryTarget.Component });
NovoDateRangeInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDateRangeInputElement, selector: "novo-date-range-input", inputs: { name: "name", start: "start", end: "end", weekRangeSelect: "weekRangeSelect", mode: "mode", placeholder: "placeholder", maskOptions: "maskOptions", format: "format", textMaskEnabled: "textMaskEnabled", allowInvalidDate: "allowInvalidDate", weekStart: "weekStart", value: "value", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", change: "change", blur: "blur", focus: "focus" }, host: { properties: { "class.disabled": "this.disabled" } }, providers: [DATE_VALUE_ACCESSOR$2], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <div class="date-range-input-container">
      <input
        type="text"
        [name]="name"
        [(ngModel)]="formattedStartDate"
        [textMask]="maskOptions"
        [placeholder]="placeholder"
        (keydown)="_onStartInputChange($event)"
        (input)="_onStartInputChange($event)"
        (focus)="_handleFocus($event)"
        (blur)="_handleBlur($event)"
        #startDate
        data-automation-id="date-range-input-start"
        [disabled]="disabled"
      />
      <novo-icon *ngIf="!hasStartValue" (click)="openPanel()">calendar</novo-icon>
      <novo-icon *ngIf="hasStartValue" (click)="clearStartValue()">x</novo-icon>
    </div>
    <div class="date-range-input-divider">-</div>
    <div class="date-range-input-container">
      <input
        type="text"
        [name]="name"
        [(ngModel)]="formattedEndDate"
        [textMask]="maskOptions"
        [placeholder]="placeholder"
        (keydown)="_onEndInputChange($event)"
        (input)="_onEndInputChange($event)"
        (focus)="_handleFocus($event)"
        (blur)="_handleBlur($event)"
        #endDate
        data-automation-id="date-range-input-end"
        [disabled]="disabled"
      />
      <novo-icon *ngIf="!hasEndValue" (click)="openPanel()">calendar</novo-icon>
      <novo-icon *ngIf="hasEndValue" (click)="clearEndValue()">x</novo-icon>
    </div>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        [mode]="mode"
        range="true"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }], directives: [{ type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateRangeInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-date-range-input',
                    providers: [DATE_VALUE_ACCESSOR$2],
                    template: `
    <div class="date-range-input-container">
      <input
        type="text"
        [name]="name"
        [(ngModel)]="formattedStartDate"
        [textMask]="maskOptions"
        [placeholder]="placeholder"
        (keydown)="_onStartInputChange($event)"
        (input)="_onStartInputChange($event)"
        (focus)="_handleFocus($event)"
        (blur)="_handleBlur($event)"
        #startDate
        data-automation-id="date-range-input-start"
        [disabled]="disabled"
      />
      <novo-icon *ngIf="!hasStartValue" (click)="openPanel()">calendar</novo-icon>
      <novo-icon *ngIf="hasStartValue" (click)="clearStartValue()">x</novo-icon>
    </div>
    <div class="date-range-input-divider">-</div>
    <div class="date-range-input-container">
      <input
        type="text"
        [name]="name"
        [(ngModel)]="formattedEndDate"
        [textMask]="maskOptions"
        [placeholder]="placeholder"
        (keydown)="_onEndInputChange($event)"
        (input)="_onEndInputChange($event)"
        (focus)="_handleFocus($event)"
        (blur)="_handleBlur($event)"
        #endDate
        data-automation-id="date-range-input-end"
        [disabled]="disabled"
      />
      <novo-icon *ngIf="!hasEndValue" (click)="openPanel()">calendar</novo-icon>
      <novo-icon *ngIf="hasEndValue" (click)="clearEndValue()">x</novo-icon>
    </div>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        [mode]="mode"
        range="true"
        inline="true"
        (onSelect)="setValueAndClose($event)"
        [ngModel]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: DateFormatService }]; }, propDecorators: { name: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], weekRangeSelect: [{
                type: Input
            }], mode: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], maskOptions: [{
                type: Input
            }], format: [{
                type: Input
            }], textMaskEnabled: [{
                type: Input
            }], allowInvalidDate: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], blurEvent: [{
                type: Output
            }], focusEvent: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.disabled']
            }] } });

// NG
// Value accessor for the component (supports ngModel)
const MULTI_DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoMultiDateInputElement),
    multi: true,
};
class NovoMultiDateInputElement {
    constructor(element, labels, cdr, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this.cdr = cdr;
        this.dateFormatService = dateFormatService;
        this.formattedStartDate = '';
        this.formattedEndDate = '';
        this.format = 'shortDate';
        this.allowInvalidDate = false;
        this.weekStart = 0;
        this.chipsCount = 5;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._value = [];
        this._disabled = false;
        this.notShown = {};
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            this._setFormValue(value);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        // if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
        //   this.maskOptions = this.maskOptions || {
        //     mask: this.dateFormatService.getDateMask(),
        //     pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormatString().toLowerCase()),
        //     keepCharPositions: false,
        //     guide: true,
        //   };
        // } else {
        //   this.maskOptions = { mask: false };
        // }
    }
    formatter(value) {
        const [dateTimeValue, formatted] = this.dateFormatService.parseString(value, false, 'date');
        return formatted;
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.disabled) {
            this.panelOpen ? this.overlay.closePanel() : this.overlay.openPanel();
        }
    }
    closePanel() {
        this.overlay && this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */ || event.key === "Tab" /* Tab */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    }
    _handleBlur(event) {
        this.blurEvent.emit(event);
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    remove(event, date) {
        const current = new Set(this.value);
        if (current.has(date)) {
            current.delete(date);
        }
        this.value = [...current];
    }
    writeValue(value) {
        this.value = value;
        this.cdr.markForCheck();
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _setFormValue(value) {
        if (this.value) {
            // this.formattedStartDate = this.formatDateValue(this.value.startDate);
        }
    }
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    setValueAndClose(event = []) {
        if (event) {
            this.value = event;
            this.change.emit(this.value);
        }
        // this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.value = [];
        this.change.emit(this.value);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoMultiDateInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiDateInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: DateFormatService }], target: i0.ɵɵFactoryTarget.Component });
NovoMultiDateInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoMultiDateInputElement, selector: "novo-multi-date-input", inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", format: "format", allowInvalidDate: "allowInvalidDate", weekStart: "weekStart", chipsCount: "chipsCount", value: "value", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", change: "change", blur: "blur", focus: "focus" }, host: { properties: { "class.disabled": "this.disabled" } }, providers: [MULTI_DATE_VALUE_ACCESSOR], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }], ngImport: i0, template: `
    <novo-chip-list>
      <novo-chip *ngFor="let date of value | default: []" (removed)="remove($event, date)">
        {{ date | date: format }}
        <novo-icon novoChipRemove>close</novo-icon>
      </novo-chip>
    </novo-chip-list>
    <!-- <div *ngIf="value.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div> -->
    <div class="chip-input-container" (click)="_handleFocus($event)">
      <span class="placeholder" *ngIf="!value.length" data-automation-id="multi-date-input">{{ placeholder }}</span>
    </div>
    <novo-icon class="panel-toggle" [class.selected]="panelOpen" (click)="openPanel()">calendar</novo-icon>
    <label class="clear-all" *ngIf="value.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        mode="multiple"
        (onSelect)="setValueAndClose($event)"
        [(ngModel)]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoChipList, selector: "novo-chip-list", inputs: ["errorStateMatcher", "multiple", "stacked", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["novoChipList"] }, { type: NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: NovoChipRemove, selector: "[novoChipRemove]" }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], pipes: { "default": DefaultPipe, "date": i1.DatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiDateInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-multi-date-input',
                    providers: [MULTI_DATE_VALUE_ACCESSOR],
                    template: `
    <novo-chip-list>
      <novo-chip *ngFor="let date of value | default: []" (removed)="remove($event, date)">
        {{ date | date: format }}
        <novo-icon novoChipRemove>close</novo-icon>
      </novo-chip>
    </novo-chip-list>
    <!-- <div *ngIf="value.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div> -->
    <div class="chip-input-container" (click)="_handleFocus($event)">
      <span class="placeholder" *ngIf="!value.length" data-automation-id="multi-date-input">{{ placeholder }}</span>
    </div>
    <novo-icon class="panel-toggle" [class.selected]="panelOpen" (click)="openPanel()">calendar</novo-icon>
    <label class="clear-all" *ngIf="value.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-date-picker
        [start]="start"
        [end]="end"
        inline="true"
        mode="multiple"
        (onSelect)="setValueAndClose($event)"
        [(ngModel)]="value"
        [weekStart]="weekStart"
      ></novo-date-picker>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: DateFormatService }]; }, propDecorators: { name: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], format: [{
                type: Input
            }], allowInvalidDate: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], chipsCount: [{
                type: Input
            }], blurEvent: [{
                type: Output
            }], focusEvent: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.disabled']
            }] } });

// NG2
class NovoDatePickerModule {
}
NovoDatePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoDatePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerModule, declarations: [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement], imports: [CommonModule,
        FormsModule,
        NovoButtonModule,
        NovoPipesModule,
        NovoOverlayModule,
        TextMaskModule,
        NovoIconModule,
        NovoChipsModule,
        NovoCalendarModule], exports: [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement] });
NovoDatePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerModule, imports: [[
            CommonModule,
            FormsModule,
            NovoButtonModule,
            NovoPipesModule,
            NovoOverlayModule,
            TextMaskModule,
            NovoIconModule,
            NovoChipsModule,
            NovoCalendarModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDatePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        NovoButtonModule,
                        NovoPipesModule,
                        NovoOverlayModule,
                        TextMaskModule,
                        NovoIconModule,
                        NovoChipsModule,
                        NovoCalendarModule,
                    ],
                    declarations: [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement],
                    exports: [NovoDatePickerElement, NovoDatePickerInputElement, NovoDateRangeInputElement, NovoMultiDateInputElement],
                }]
        }] });

// NG2
class NovoBoxElement {
    constructor() {
        this.direction = 'row';
        this.align = 'center';
        this.justify = 'flex-start';
        this.wrap = 'nowrap';
    }
    get display() {
        return 'block';
    }
}
NovoBoxElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBoxElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoBoxElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoBoxElement, selector: "novo-box", inputs: { direction: "direction", align: "align", justify: "justify", wrap: "wrap", gap: "gap" }, host: { properties: { "style.display": "this.display", "style.flex-direction": "this.direction", "style.align-items": "this.align", "style.justify-content": "this.justify", "style.flex-wrap": "this.wrap", "style.gap": "this.gap" } }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoBoxElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-box',
                    template: ` <ng-content></ng-content> `,
                }]
        }], propDecorators: { display: [{
                type: HostBinding,
                args: ['style.display']
            }], direction: [{
                type: HostBinding,
                args: ['style.flex-direction']
            }, {
                type: Input
            }], align: [{
                type: HostBinding,
                args: ['style.align-items']
            }, {
                type: Input
            }], justify: [{
                type: HostBinding,
                args: ['style.justify-content']
            }, {
                type: Input
            }], wrap: [{
                type: HostBinding,
                args: ['style.flex-wrap']
            }, {
                type: Input
            }], gap: [{
                type: HostBinding,
                args: ['style.gap']
            }, {
                type: Input
            }] } });

// NG2
class NovoGridElement {
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
        this.direction = 'row';
        this.align = 'start';
        this.justify = 'flex-start';
        this.columns = '1';
    }
    get display() {
        return 'grid';
    }
    get hb_gridCols() {
        if (_isNumberValue(this.columns)) {
            return this._sanitizer.bypassSecurityTrustStyle(`repeat(${this.columns}, 1fr)`);
        }
        return this._sanitizer.bypassSecurityTrustStyle(`${this.columns}`);
    }
}
NovoGridElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoGridElement, deps: [{ token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoGridElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoGridElement, selector: "novo-grid", inputs: { direction: "direction", align: "align", justify: "justify", columns: "columns" }, host: { properties: { "style.display": "this.display", "style.flex-direction": "this.direction", "style.align-items": "this.align", "style.justify-content": "this.justify", "style.grid-template-columns": "this.hb_gridCols" } }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoGridElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-grid',
                    template: ` <ng-content></ng-content> `,
                }]
        }], ctorParameters: function () { return [{ type: i1$2.DomSanitizer }]; }, propDecorators: { display: [{
                type: HostBinding,
                args: ['style.display']
            }], direction: [{
                type: HostBinding,
                args: ['style.flex-direction']
            }, {
                type: Input
            }], align: [{
                type: HostBinding,
                args: ['style.align-items']
            }, {
                type: Input
            }], justify: [{
                type: HostBinding,
                args: ['style.justify-content']
            }, {
                type: Input
            }], columns: [{
                type: Input
            }], hb_gridCols: [{
                type: HostBinding,
                args: ['style.grid-template-columns']
            }] } });

class NovoFlexModule {
}
NovoFlexModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFlexModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoFlexModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFlexModule, declarations: [NovoFlexElement, NovoStackElement, NovoGridElement, NovoBoxElement], imports: [CommonModule], exports: [NovoFlexElement, NovoStackElement, NovoGridElement, NovoBoxElement] });
NovoFlexModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFlexModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFlexModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoFlexElement, NovoStackElement, NovoGridElement, NovoBoxElement],
                    exports: [NovoFlexElement, NovoStackElement, NovoGridElement, NovoBoxElement],
                }]
        }] });

// NG2
class NovoDragulaService {
    constructor() {
        this.cancel = new EventEmitter();
        this.cloned = new EventEmitter();
        this.drag = new EventEmitter();
        this.dragend = new EventEmitter();
        this.drop = new EventEmitter();
        this.out = new EventEmitter();
        this.over = new EventEmitter();
        this.remove = new EventEmitter();
        this.shadow = new EventEmitter();
        this.dropModel = new EventEmitter();
        this.removeModel = new EventEmitter();
        this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
        this.bags = [];
    }
    add(name, drake) {
        let bag = this.find(name);
        if (bag) {
            throw new Error(`Bag named: ${name} already exists.`);
        }
        bag = {
            name,
            drake,
        };
        this.bags.push(bag);
        if (drake.models) {
            // models to sync with (must have same structure as containers)
            this.handleModels(name, drake);
        }
        if (!bag.initEvents) {
            this.setupEvents(bag);
        }
        return bag;
    }
    find(name) {
        for (let i = 0; i < this.bags.length; i++) {
            if (this.bags[i].name === name) {
                return this.bags[i];
            }
        }
        return null;
    }
    destroy(name) {
        const bag = this.find(name);
        const i = this.bags.indexOf(bag);
        this.bags.splice(i, 1);
        bag.drake.destroy();
    }
    setOptions(name, options) {
        const bag = this.add(name, dragula(options));
        this.handleModels(name, bag.drake);
    }
    handleModels(name, drake) {
        let dragElm;
        let dragIndex;
        let dropIndex;
        let sourceModel;
        drake.on('remove', (el, source) => {
            if (!drake.models) {
                return;
            }
            sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel.splice(dragIndex, 1);
            this.removeModel.emit([name, el, source]);
        });
        drake.on('drag', (el, source) => {
            dragElm = el;
            dragIndex = this.domIndexOf(el, source);
        });
        drake.on('drop', (dropElm, target, source) => {
            if (!drake.models) {
                return;
            }
            dropIndex = this.domIndexOf(dropElm, target);
            sourceModel = drake.models[drake.containers.indexOf(source)];
            if (target === source) {
                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
            }
            else {
                const notCopy = dragElm === dropElm;
                const targetModel = drake.models[drake.containers.indexOf(target)];
                const dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                if (notCopy) {
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel.splice(dropIndex, 0, dropElmModel);
                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
            }
            this.dropModel.emit([name, dropElm, target, source]);
        });
    }
    setupEvents(bag) {
        bag.initEvents = true;
        const that = this;
        const emitter = (type) => {
            function replicate() {
                const args = Array.prototype.slice.call(arguments);
                that[type].emit([bag.name].concat(args));
            }
            bag.drake.on(type, replicate);
        };
        this.events.forEach(emitter);
    }
    domIndexOf(child, parent) {
        return Array.prototype.indexOf.call(parent.children, child);
    }
}
NovoDragulaService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NovoDragulaService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaService, decorators: [{
            type: Injectable
        }] });

// NG2
class NovoDragulaElement {
    constructor(element, dragulaService) {
        this.dragulaService = dragulaService;
        this.drake = null;
        this.container = element.nativeElement;
    }
    ngOnInit() {
        const bag = this.dragulaService.find(this.bag);
        if (bag) {
            this.drake = bag.drake;
            this.checkModel();
            this.drake.containers.push(this.container);
        }
        else {
            this.drake = dragula({
                containers: [this.container],
            });
            this.checkModel();
            this.dragulaService.add(this.bag, this.drake);
        }
    }
    checkModel() {
        if (this.dragulaModel) {
            if (this.drake.models) {
                this.drake.models.push(this.dragulaModel);
            }
            else {
                this.drake.models = [this.dragulaModel];
            }
        }
    }
    ngOnChanges(changes) {
        if (changes && changes.dragulaModel) {
            if (this.drake) {
                if (this.drake.models) {
                    const modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                    this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                }
                else {
                    this.drake.models = [changes.dragulaModel.currentValue];
                }
            }
        }
    }
}
NovoDragulaElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaElement, deps: [{ token: i0.ElementRef }, { token: NovoDragulaService }], target: i0.ɵɵFactoryTarget.Directive });
NovoDragulaElement.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoDragulaElement, selector: "[dragula]", inputs: { bag: ["dragula", "bag"], dragulaModel: "dragulaModel" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaElement, decorators: [{
            type: Directive,
            args: [{
                    selector: '[dragula]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoDragulaService }]; }, propDecorators: { bag: [{
                type: Input,
                args: ['dragula']
            }], dragulaModel: [{
                type: Input
            }] } });

// NG2
class NovoDragulaModule {
}
NovoDragulaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoDragulaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaModule, declarations: [NovoDragulaElement], exports: [NovoDragulaElement] });
NovoDragulaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDragulaModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NovoDragulaElement],
                    exports: [NovoDragulaElement],
                }]
        }] });

class NovoDividerModule {
}
NovoDividerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDividerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoDividerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDividerModule, declarations: [NovoDividerComponent], exports: [NovoDividerComponent] });
NovoDividerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDividerModule, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDividerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                    exports: [NovoDividerComponent],
                    declarations: [NovoDividerComponent],
                }]
        }] });

// NG
class NovoSelectModule {
}
NovoSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectModule, declarations: [NovoSelectElement], imports: [A11yModule,
        CommonModule,
        FormsModule,
        NovoButtonModule,
        NovoDividerModule,
        NovoOptionModule,
        NovoOverlayModule,
        NovoPipesModule,
        NovoTooltipModule], exports: [NovoSelectElement] });
NovoSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectModule, imports: [[
            A11yModule,
            CommonModule,
            FormsModule,
            NovoButtonModule,
            NovoDividerModule,
            NovoOptionModule,
            NovoOverlayModule,
            NovoPipesModule,
            NovoTooltipModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        A11yModule,
                        CommonModule,
                        FormsModule,
                        NovoButtonModule,
                        NovoDividerModule,
                        NovoOptionModule,
                        NovoOverlayModule,
                        NovoPipesModule,
                        NovoTooltipModule,
                    ],
                    declarations: [NovoSelectElement],
                    exports: [NovoSelectElement],
                }]
        }] });

// NG2
// Value accessor for the component (supports ngModel)
const ADDRESS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoAddressElement),
    multi: true,
};
class NovoAddressElement {
    constructor(labels) {
        this.labels = labels;
        this._readOnly = false;
        this.states = [];
        this.fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.focused = {};
        this.invalid = {};
        this.disabled = {};
        this.invalidMaxlength = {};
        this.valid = {};
        this.tooltip = {};
        this.initComplete = false;
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.validityChange = new EventEmitter();
    }
    set readOnly(readOnly) {
        this._readOnly = readOnly;
        this.fieldList.forEach((field) => {
            this.disabled[field] = this._readOnly;
        });
        if (this.model) {
            this.updateStates();
        }
    }
    get readOnly() {
        return this._readOnly;
    }
    ngOnInit() {
        if (!this.config) {
            this.config = {};
        }
        this.initConfig();
        if (this.model) {
            this.writeValue(this.model);
            this.updateControl();
        }
        else if (!this.model) {
            this.model = {};
        }
        if (Helpers.isBlank(this.model.countryID)) {
            this.updateStates();
        }
    }
    initConfig() {
        this.fieldList.forEach((field) => {
            if (!this.config.hasOwnProperty(field)) {
                this.config[field] = {
                    hidden: true,
                };
            }
            if (!this.config[field].hasOwnProperty('label')) {
                this.config[field].label = this.labels[field];
            }
            if (this.config.required) {
                this.config[field].required = true;
            }
            if (this.config[field].readOnly || this.config.readOnly) {
                this.config[field].readOnly = true;
                this.disabled[field] = true;
            }
            if (field === 'countryID') {
                if (!this.config[field].pickerConfig) {
                    this.config.countryID.pickerConfig = this.getDefaultCountryConfig();
                }
                this.config[field].pickerConfig.defaultOptions = this.config.countryID.pickerConfig.options;
            }
            if (field === 'state') {
                if (!this.config[field].pickerConfig) {
                    this.config.state.pickerConfig = this.getDefaultStateConfig();
                    this.config[field].pickerConfig.defaultOptions = this.config[field].pickerConfig.options;
                }
                this.stateOptions = this.config[field].pickerConfig.options;
                this.config[field].pickerConfig.options = (query = '') => {
                    return this.stateOptions(query, this.model.countryID);
                };
                this.config[field].pickerConfig.defaultOptions = this.stateOptions;
            }
        });
    }
    isValid(field) {
        let valid = true;
        if (((this.config[field].required && (Helpers.isBlank(this.model[field]) || Helpers.isEmpty(this.model[field]))) ||
            !this.config[field].required) &&
            !(field === 'countryID' && this.config[field].required && !Helpers.isBlank(this.model.countryID)) &&
            !(field === 'state' &&
                this.config[field].required &&
                (!Helpers.isEmpty(this.model.state) ||
                    ((Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                        !Helpers.isBlank(this.model.countryName) &&
                        this.config.state.pickerConfig &&
                        this.config.state.pickerConfig.defaultOptions &&
                        this.config.state.pickerConfig.defaultOptions.length === 0)))) {
            valid = false;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            valid = false;
        }
        this.valid[field] = valid;
    }
    isInvalid(field) {
        let invalid = false;
        let invalidMaxlength = false;
        if ((field !== 'countryID' &&
            field !== 'state' &&
            this.config[field]?.required &&
            Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.model[field])) ||
            (field === 'countryID' && this.config[field]?.required && Helpers.isBlank(this.model.countryName) && this.config[field]?.updated) ||
            (field === 'state' &&
                this.config[field]?.required &&
                (Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                !Helpers.isBlank(this.model.countryID) &&
                this.config[field]?.updated &&
                this.config.state.pickerConfig &&
                this.config.state.pickerConfig.defaultOptions &&
                this.config.state.pickerConfig.defaultOptions.length > 0)) {
            invalid = true;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field]?.maxlength) &&
            this.config[field]?.maxlength < this.model[field].length) {
            invalid = true;
            invalidMaxlength = true;
        }
        this.invalid[field] = invalid;
        this.invalidMaxlength[field] = invalidMaxlength;
    }
    onInput(event, field) {
        this.isInvalid(field);
        this.isValid(field);
        if (event) {
            this.change.emit({ value: this.model[field], field });
        }
    }
    isFocused(event, field) {
        this.focused[field] = true;
        this.focus.emit({ event, field });
    }
    isBlurred(event, field) {
        this.focused[field] = false;
        this.blur.emit({ event, field });
    }
    onCountryChange(evt) {
        const country = evt && evt.rawValue ? evt.rawValue : null;
        let field;
        let statesUpdatable = false;
        this.config.countryID.updated = true;
        if (this.config.countryID.pickerConfig) {
            field = this.config.countryID.pickerConfig.field;
        }
        if (country && field && !Helpers.isBlank(country[field]) && this.model.countryID !== country[field]) {
            this.model.countryID = country[field];
            this.model.countryName = Helpers.interpolate(this.config.countryID.pickerConfig.format, country);
            this.disabled.state = false;
            this.tooltip.state = undefined;
            statesUpdatable = true;
        }
        else if (Helpers.isBlank(country) || Helpers.isBlank(country[field])) {
            this.model.countryID = undefined;
            this.model.countryName = undefined;
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            this.invalid.state = false;
            statesUpdatable = true;
        }
        // Update state
        if (statesUpdatable) {
            this.model.state = undefined;
            this.updateStates();
        }
        this.updateControl();
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    }
    onStateChange(evt) {
        const state = evt && evt.value ? evt.value : null;
        this.config.state.updated = true;
        this.model.state = state;
        this.updateControl();
        this.onInput(null, 'state');
    }
    setStateLabel(model) {
        const state = model.state;
        if (!Helpers.isBlank(state)) {
            if (this.config.state.required) {
                this.valid.state = true;
            }
            this.model.state = state;
        }
        else {
            this.model.state = undefined;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    }
    updateStates() {
        if (this.config.state.pickerConfig.options && !Helpers.isBlank(this.model.countryID)) {
            this.config.state.pickerConfig.options = (query = '') => {
                return this.stateOptions(query, this.model.countryID);
            };
            this.stateOptions('', this.model.countryID).then((results) => {
                this.config.state.pickerConfig.defaultOptions = results;
                if (results.length) {
                    this.tooltip.state = undefined;
                    this.disabled.state = this._readOnly;
                    this.setStateLabel(this.model);
                }
                else {
                    this.disabled.state = true;
                    this.tooltip.state = this.labels.noStatesForCountry;
                    if (this.config.state.required) {
                        this.valid.state = true;
                    }
                }
                this.validityChange.emit();
                this.onInput(null, 'state');
            });
        }
        else {
            this.config.state.pickerConfig.defaultOptions = [];
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    }
    getStateOptions(filter = '', countryID) {
        if (countryID) {
            const country = findByCountryId(countryID);
            const states = getStates(country.name);
            if (filter) {
                return states.filter((name) => new RegExp(`${filter}`, 'gi').test(name));
            }
            return states;
        }
        else {
            return [];
        }
    }
    updateControl() {
        this.onModelChange(this.model);
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    }
    writeValue(model) {
        let loadingCountries = false;
        if (model) {
            let countryName;
            if (model.countryName && model.countryID) {
                countryName = model.countryName;
            }
            else if (model.countryID) {
                if (this.config.countryID.pickerConfig && this.config.countryID.pickerConfig.getLabels) {
                    if (Helpers.isFunction(this.config.countryID.pickerConfig.getLabels)) {
                        const promise = this.config.countryID.pickerConfig.getLabels(model.countryID);
                        loadingCountries = true;
                        if (promise.then) {
                            promise.then((result) => {
                                loadingCountries = false;
                                countryName = Helpers.interpolateWithFallback(this.config.countryID.pickerConfig.format, result);
                                this.model = Object.assign(model, { countryName });
                                this.updateStates();
                            });
                        }
                    }
                }
            }
            if (countryName) {
                countryName = countryName.trim();
                model.state = model.state || '';
                this.model = Object.assign(model, { countryName });
            }
            else {
                this.model = model;
            }
            if (!loadingCountries && !Helpers.isBlank(this.model.countryID)) {
                this.updateStates();
            }
        }
        this.fieldList.forEach((field) => {
            this.onInput(null, field);
        });
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    getDefaultStateConfig() {
        return {
            field: 'value',
            format: '$label',
            options: (query = '', countryID) => {
                return Promise.resolve(this.getStateOptions(query, countryID));
            },
            getLabels: (state) => {
                return Promise.resolve(state);
            },
        };
    }
    getDefaultCountryConfig() {
        return {
            field: 'value',
            format: '$label',
            options: (query = '') => {
                return new Promise((resolve) => {
                    let countries = COUNTRIES;
                    if (query) {
                        countries = countries.filter((country) => new RegExp(`${query}`, 'gi').test(country.name));
                    }
                    return resolve(countries.map((country) => ({ value: country.id, label: country.name })));
                });
            },
            getLabels: (countryID) => {
                return new Promise((resolve) => {
                    const country = findByCountryId(countryID);
                    if (country) {
                        resolve({ value: country.id, label: country.name });
                    }
                    else {
                        resolve('');
                    }
                });
            },
        };
    }
}
NovoAddressElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAddressElement, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoAddressElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoAddressElement, selector: "novo-address", inputs: { config: "config", readOnly: "readOnly" }, outputs: { change: "change", focus: "focus", blur: "blur", validityChange: "validityChange" }, providers: [ADDRESS_VALUE_ACCESSOR], ngImport: i0, template: `
    <span
      *ngIf="!config?.address1?.hidden"
      class="street-address"
      [class.invalid]="invalid.address1"
      [class.focus]="focused.address1"
      [class.disabled]="disabled.address1"
    >
      <i
        *ngIf="config.address1.required"
        class="required-indicator address1"
        [ngClass]="{ 'bhi-circle': !valid.address1, 'bhi-check': valid.address1 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address1"
        type="text"
        id="address1"
        name="address1"
        [placeholder]="config.address1.label"
        [maxlength]="config?.address1?.maxlength"
        autocomplete="shipping street-address address-line-1"
        [(ngModel)]="model.address1"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address1')"
        (blur)="isBlurred($event, 'address1')"
        (input)="onInput($event, 'address1')"
        [disabled]="disabled.address1"
      />
    </span>
    <span
      *ngIf="!config?.address2?.hidden"
      class="apt suite"
      [class.invalid]="invalid.address2"
      [class.focus]="focused.address2"
      [class.disabled]="disabled.address2"
    >
      <i
        *ngIf="config.address2.required"
        class="required-indicator address2"
        [ngClass]="{ 'bhi-circle': !valid.address2, 'bhi-check': valid.address2 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address2"
        type="text"
        id="address2"
        name="address2"
        [placeholder]="config.address2.label"
        [maxlength]="config?.address2?.maxlength"
        autocomplete="shipping address-line-2"
        [(ngModel)]="model.address2"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address2')"
        (blur)="isBlurred($event, 'address2')"
        (input)="onInput($event, 'address2')"
        [disabled]="disabled.address2"
      />
    </span>
    <span
      *ngIf="!config?.city?.hidden"
      class="city locality"
      [class.invalid]="invalid.city"
      [class.focus]="focused.city"
      [class.disabled]="disabled.city"
    >
      <i *ngIf="config.city.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.city, 'bhi-check': valid.city }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.city"
        type="text"
        id="city"
        name="city"
        [placeholder]="config.city.label"
        autocomplete="shipping city locality"
        [maxlength]="config?.city?.maxlength"
        [(ngModel)]="model.city"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'city')"
        (blur)="isBlurred($event, 'city')"
        (input)="onInput($event, 'city')"
        [disabled]="disabled.city"
      />
    </span>
    <span
      *ngIf="!config?.state?.hidden"
      class="state region"
      [class.invalid]="invalid.state"
      [class.focus]="focused.state"
      [class.disabled]="disabled.state"
      [tooltip]="tooltip.state"
    >
      <i *ngIf="config.state.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.state, 'bhi-check': valid.state }"> </i>
      <novo-picker
        [config]="config?.state?.pickerConfig"
        [placeholder]="config?.state?.label"
        (changed)="onStateChange($event)"
        autocomplete="shipping region"
        [(ngModel)]="model.state"
        [disablePickerInput]="disabled.state"
      ></novo-picker>
    </span>
    <span
      *ngIf="!config?.zip?.hidden"
      class="zip postal-code"
      [class.invalid]="invalid.zip"
      [class.focus]="focused.zip"
      [class.disabled]="disabled.zip"
    >
      <i *ngIf="config.zip.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.zip, 'bhi-check': valid.zip }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.zip"
        type="text"
        id="zip"
        name="zip"
        [placeholder]="config.zip.label"
        autocomplete="shipping postal-code"
        [maxlength]="config?.zip?.maxlength"
        [(ngModel)]="model.zip"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'zip')"
        (blur)="isBlurred($event, 'zip')"
        (input)="onInput($event, 'zip')"
        [disabled]="disabled.zip"
      />
    </span>
    <span
      *ngIf="!config?.countryID?.hidden"
      class="country-name"
      [class.invalid]="invalid.countryID"
      [class.focus]="focused.countryID"
      [class.disabled]="disabled.countryID"
    >
      <i
        *ngIf="config.countryID.required"
        class="required-indicator"
        [ngClass]="{ 'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID }"
      >
      </i>
      <novo-picker
        [config]="config?.countryID?.pickerConfig"
        [placeholder]="config.countryID.label"
        (changed)="onCountryChange($event)"
        autocomplete="shipping country"
        [(ngModel)]="model.countryID"
        [disablePickerInput]="disabled.countryID"
      ></novo-picker>
    </span>
  `, isInline: true, components: [{ type: NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAddressElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-address',
                    providers: [ADDRESS_VALUE_ACCESSOR],
                    template: `
    <span
      *ngIf="!config?.address1?.hidden"
      class="street-address"
      [class.invalid]="invalid.address1"
      [class.focus]="focused.address1"
      [class.disabled]="disabled.address1"
    >
      <i
        *ngIf="config.address1.required"
        class="required-indicator address1"
        [ngClass]="{ 'bhi-circle': !valid.address1, 'bhi-check': valid.address1 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address1"
        type="text"
        id="address1"
        name="address1"
        [placeholder]="config.address1.label"
        [maxlength]="config?.address1?.maxlength"
        autocomplete="shipping street-address address-line-1"
        [(ngModel)]="model.address1"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address1')"
        (blur)="isBlurred($event, 'address1')"
        (input)="onInput($event, 'address1')"
        [disabled]="disabled.address1"
      />
    </span>
    <span
      *ngIf="!config?.address2?.hidden"
      class="apt suite"
      [class.invalid]="invalid.address2"
      [class.focus]="focused.address2"
      [class.disabled]="disabled.address2"
    >
      <i
        *ngIf="config.address2.required"
        class="required-indicator address2"
        [ngClass]="{ 'bhi-circle': !valid.address2, 'bhi-check': valid.address2 }"
      >
      </i>
      <input
        [class.maxlength-error]="invalidMaxlength.address2"
        type="text"
        id="address2"
        name="address2"
        [placeholder]="config.address2.label"
        [maxlength]="config?.address2?.maxlength"
        autocomplete="shipping address-line-2"
        [(ngModel)]="model.address2"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'address2')"
        (blur)="isBlurred($event, 'address2')"
        (input)="onInput($event, 'address2')"
        [disabled]="disabled.address2"
      />
    </span>
    <span
      *ngIf="!config?.city?.hidden"
      class="city locality"
      [class.invalid]="invalid.city"
      [class.focus]="focused.city"
      [class.disabled]="disabled.city"
    >
      <i *ngIf="config.city.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.city, 'bhi-check': valid.city }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.city"
        type="text"
        id="city"
        name="city"
        [placeholder]="config.city.label"
        autocomplete="shipping city locality"
        [maxlength]="config?.city?.maxlength"
        [(ngModel)]="model.city"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'city')"
        (blur)="isBlurred($event, 'city')"
        (input)="onInput($event, 'city')"
        [disabled]="disabled.city"
      />
    </span>
    <span
      *ngIf="!config?.state?.hidden"
      class="state region"
      [class.invalid]="invalid.state"
      [class.focus]="focused.state"
      [class.disabled]="disabled.state"
      [tooltip]="tooltip.state"
    >
      <i *ngIf="config.state.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.state, 'bhi-check': valid.state }"> </i>
      <novo-picker
        [config]="config?.state?.pickerConfig"
        [placeholder]="config?.state?.label"
        (changed)="onStateChange($event)"
        autocomplete="shipping region"
        [(ngModel)]="model.state"
        [disablePickerInput]="disabled.state"
      ></novo-picker>
    </span>
    <span
      *ngIf="!config?.zip?.hidden"
      class="zip postal-code"
      [class.invalid]="invalid.zip"
      [class.focus]="focused.zip"
      [class.disabled]="disabled.zip"
    >
      <i *ngIf="config.zip.required" class="required-indicator" [ngClass]="{ 'bhi-circle': !valid.zip, 'bhi-check': valid.zip }"> </i>
      <input
        [class.maxlength-error]="invalidMaxlength.zip"
        type="text"
        id="zip"
        name="zip"
        [placeholder]="config.zip.label"
        autocomplete="shipping postal-code"
        [maxlength]="config?.zip?.maxlength"
        [(ngModel)]="model.zip"
        (ngModelChange)="updateControl()"
        (focus)="isFocused($event, 'zip')"
        (blur)="isBlurred($event, 'zip')"
        (input)="onInput($event, 'zip')"
        [disabled]="disabled.zip"
      />
    </span>
    <span
      *ngIf="!config?.countryID?.hidden"
      class="country-name"
      [class.invalid]="invalid.countryID"
      [class.focus]="focused.countryID"
      [class.disabled]="disabled.countryID"
    >
      <i
        *ngIf="config.countryID.required"
        class="required-indicator"
        [ngClass]="{ 'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID }"
      >
      </i>
      <novo-picker
        [config]="config?.countryID?.pickerConfig"
        [placeholder]="config.countryID.label"
        (changed)="onCountryChange($event)"
        autocomplete="shipping country"
        [(ngModel)]="model.countryID"
        [disablePickerInput]="disabled.countryID"
      ></novo-picker>
    </span>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { config: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], change: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], validityChange: [{
                type: Output
            }] } });

class NovoFile {
    constructor(file) {
        this.name = '';
        this.contentType = '';
        this.lastModified = 0;
        this.size = 0;
        this.loaded = false;
        this.reader = new FileReader();
        this.name = `${encodeURIComponent(file.name || '')}`;
        this.contentType = file.type;
        this.lastModified = file.lastModified;
        this.size = file.size;
        this.file = file;
        this.reader.onload = (event) => {
            this.fileContents = event.target.result.split(',')[1];
            this.dataURL = event.target.result;
            this.loaded = true;
            if (this.readPromise) {
                this.readPromise(this);
            }
        };
    }
    read() {
        return new Promise((resolve) => {
            this.readPromise = resolve;
            // when the file is read it triggers the onload event above.
            this.reader.readAsDataURL(this.file);
        });
    }
    toJSON() {
        return {
            name: this.name,
            contentType: this.type,
            lastModified: this.lastModified,
            size: this.size,
            fileContents: this.fileContents,
        };
    }
}

// Value accessor for the component (supports ngModel)
// const FILE_VALUE_ACCESSOR = {
//   provide: NG_VALUE_ACCESSOR,
//   useExisting: forwardRef(() => NovoFileInputElement),
//   multi: true,
// };
const LAYOUT_DEFAULTS = { order: 'default', download: true, removable: true, labelStyle: 'default', draggable: false };
// make file-input ids unique
let nextId$3 = 0;
class NovoFileInputBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const NovoFileInputMixins = mixinErrorState(NovoFileInputBase);
class NovoFileInputElement extends NovoFileInputMixins {
    constructor(element, labels, dragula, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, _ngControl) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, _ngControl);
        this.element = element;
        this.labels = labels;
        this.dragula = dragula;
        this._uniqueId = `novo-file-input-${++nextId$3}`;
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /** User defined tab index. */
        this._userTabIndex = null;
        this.controlType = 'file-input';
        /** @docs-private Implemented as part of NovoFieldControl. */
        this.lastKeyValue = null;
        this.id = this._uniqueId;
        this.tabindex = 0;
        this.multiple = false;
        this.value = [];
        this.edit = new EventEmitter();
        this.save = new EventEmitter();
        this.delete = new EventEmitter();
        this.upload = new EventEmitter();
        this.elements = [];
        this.files = [];
        this.active = false;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this._name = this._uniqueId;
        this._value = false;
        this._required = false;
        this._disabled = false;
        if (_ngControl) {
            _ngControl.valueAccessor = this;
        }
        this.commands = {
            dragenter: this.dragEnterHandler.bind(this),
            dragleave: this.dragLeaveHandler.bind(this),
            dragover: this.dragOverHandler.bind(this),
            drop: this.dropHandler.bind(this),
        };
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /** Implemented as part of NovoFieldControl. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
    }
    ngOnInit() {
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach((type) => {
            this.element.nativeElement.addEventListener(type, this.commands[type]);
        });
        this.updateLayout();
        this.initializeDragula();
        this.setInitialFileList();
        this.dataFeatureId = this.dataFeatureId ? this.dataFeatureId : this.name;
    }
    ngOnDestroy() {
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach((type) => {
            this.element.nativeElement.removeEventListener(type, this.commands[type]);
        });
        const dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter((x) => x.name === this.fileOutputBag).length > 0;
        if (dragulaHasFileOutputBag) {
            this.dragula.destroy(this.fileOutputBag);
        }
    }
    updateLayout() {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
        this.insertTemplatesBasedOnLayout();
    }
    insertTemplatesBasedOnLayout() {
        let order;
        switch (this.layoutOptions.order) {
            case 'displayFilesBelow':
                order = ['fileInput', 'fileOutput'];
                break;
            default:
                order = ['fileOutput', 'fileInput'];
        }
        order.forEach((template) => {
            this.container.createEmbeddedView(this[template], 0);
        });
        return order;
    }
    initializeDragula() {
        this.fileOutputBag = `file-output-${this.dragula.bags.length}`;
        this.dragula.setOptions(this.fileOutputBag, {
            moves: (el, container, handle) => {
                return this.layoutOptions.draggable;
            },
        });
    }
    setInitialFileList() {
        if (this.value) {
            this.files = this.value;
        }
    }
    dragEnterHandler(event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        this.target = event.target;
        this.active = true;
    }
    dragLeaveHandler(event) {
        event.preventDefault();
        if (this.target === event.target) {
            this.active = false;
        }
    }
    dragOverHandler(event) {
        event.preventDefault();
        // no-op
    }
    dropHandler(event) {
        event.preventDefault();
        this.visible = false;
        if (event.dataTransfer.types[0] !== 'Files') {
            return;
        }
        const options = this.layoutOptions;
        const filelist = Array.from(event.dataTransfer.files);
        if (options.customActions) {
            this.upload.emit(this.multiple ? filelist : [filelist[0]]);
        }
        else {
            this.process(this.multiple ? filelist : [filelist[0]]);
        }
        this.active = false;
    }
    writeValue(model) {
        this.model = model;
        // If model is cleared programmatically (E.g. form.patchValue({file: undefined})), empty file list.
        this.files = !model ? [] : this.files;
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    check(event) {
        this.process(Array.from(event.target.files));
        // After processing file upload, clear input element value. Allows for delete and upload of same file.
        event.target.value = '';
    }
    validate(files) {
        let passedValidation = true;
        if (this.layoutOptions.customValidation) {
            this.layoutOptions.customValidation
                .filter((validation) => validation.action === 'upload')
                .forEach((uploadValidation) => {
                passedValidation = uploadValidation.fn(files) && passedValidation;
            });
        }
        return passedValidation;
    }
    process(filelist) {
        if (this.validate(filelist)) {
            Promise.all(filelist.map((file) => this.readFile(file))).then((files) => {
                if (this.multiple) {
                    this.files.push(...files);
                }
                else {
                    this.files = files;
                }
                this.model = this.files;
                this.onModelChange(this.model);
            });
        }
    }
    download(file) {
        window.open(file.dataURL, '_blank');
    }
    remove(file) {
        this.files.splice(this.files.findIndex((f) => f.name === file.name && f.size === file.size), 1);
        this.model = this.files;
        this.onModelChange(this.model);
    }
    readFile(file) {
        return new NovoFile(file).read();
    }
    customEdit(file) {
        this.edit.emit(file);
    }
    customSave(file) {
        this.save.emit(file);
    }
    customDelete(file) {
        this.delete.emit(file);
    }
    customCheck(event) {
        this.upload.emit(event);
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    /** Whether any radio buttons has focus. */
    get focused() {
        // todo: implement this.
        return false;
    }
    /** Implemented as part of NovoFieldControl. */
    get empty() {
        return this.value === null;
    }
    /** Implemented as part of NovoFieldControl. */
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    /** Implemented as part of NovoFieldControl. */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /** Implemented as part of NovoFieldControl. */
    onContainerClick(event) {
        this.focus();
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (this.disabled) {
            return;
        }
        // TODO
    }
}
NovoFileInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFileInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: NovoDragulaService }, { token: ErrorStateMatcher }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: i4.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
NovoFileInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFileInputElement, selector: "novo-file-input", inputs: { id: "id", tabindex: "tabindex", errorStateMatcher: "errorStateMatcher", multiple: "multiple", layoutOptions: "layoutOptions", value: "value", dataFeatureId: "dataFeatureId", name: "name", disabled: "disabled", required: "required", placeholder: "placeholder" }, outputs: { edit: "edit", save: "save", delete: "delete", upload: "upload" }, host: { properties: { "class.disabled": "this.disabled" } }, providers: [{ provide: NovoFieldControl, useExisting: NovoFileInputElement }], viewQueries: [{ propertyName: "fileInput", first: true, predicate: ["fileInput"], descendants: true, static: true }, { propertyName: "fileOutput", first: true, predicate: ["fileOutput"], descendants: true, static: true }, { propertyName: "container", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef, static: true }, { propertyName: "inputElement", first: true, predicate: ["inputElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <div #container></div>
    <ng-template #fileInput>
      <div class="file-input-group" [class.disabled]="disabled" [class.active]="active">
        <input
          #inputElement
          *ngIf="!layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="check($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <input
          #inputElement
          *ngIf="layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="customCheck($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <section [ngSwitch]="layoutOptions.labelStyle">
          <label *ngSwitchCase="'no-box'" [attr.for]="name" class="no-box">
            <div>
              <i class="bhi-dropzone"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }}
              <strong class="link">{{ labels.clickToBrowse }}</strong>
            </div>
          </label>
          <label *ngSwitchDefault [attr.for]="name" class="boxed">
            <span>{{ placeholder || labels.chooseAFile }}</span>
            <small
              >{{ labels.or }} <strong class="link">{{ labels.clickToBrowse }}</strong></small
            >
          </label>
        </section>
      </div>
    </ng-template>
    <ng-template #fileOutput>
      <div class="file-output-group" [dragula]="fileOutputBag" [dragulaModel]="files">
        <div class="file-item" *ngFor="let file of files" [class.disabled]="disabled">
          <i *ngIf="layoutOptions.draggable" class="bhi-move"></i>
          <label *ngIf="file.link"
            ><span
              ><a href="{{ file.link }}" target="_blank">{{ file.name | decodeURI }}</a></span
            ><span *ngIf="file.description">||</span><span>{{ file.description }}</span></label
          >
          <label *ngIf="!file.link">{{ file.name | decodeURI }}</label>
          <div class="actions" [attr.data-automation-id]="'file-actions'" *ngIf="file.loaded">
            <div *ngIf="!layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="download(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled && (layoutOptions.removable || (!layoutOptions.removable && layoutOptions.removableWhenNew && !file.link))"
                type="button"
                theme="icon"
                icon="close"
                (click)="remove(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
            <div *ngIf="layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.edit && !disabled"
                type="button"
                theme="icon"
                icon="edit"
                (click)="customEdit(file)"
                [attr.data-automation-id]="'file-edit'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="customSave(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled"
                type="button"
                theme="icon"
                icon="close"
                (click)="customDelete(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
          </div>
          <novo-loading *ngIf="!file.loaded"></novo-loading>
        </div>
      </div>
    </ng-template>
`, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: NovoDragulaElement, selector: "[dragula]", inputs: ["dragula", "dragulaModel"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "decodeURI": DecodeURIPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFileInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-file-input',
                    providers: [{ provide: NovoFieldControl, useExisting: NovoFileInputElement }],
                    template: `
    <div #container></div>
    <ng-template #fileInput>
      <div class="file-input-group" [class.disabled]="disabled" [class.active]="active">
        <input
          #inputElement
          *ngIf="!layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="check($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <input
          #inputElement
          *ngIf="layoutOptions.customActions"
          type="file"
          [name]="name"
          [attr.id]="name"
          (change)="customCheck($event)"
          [attr.multiple]="multiple"
          tabindex="-1"
          [attr.data-feature-id]="dataFeatureId"
        />
        <section [ngSwitch]="layoutOptions.labelStyle">
          <label *ngSwitchCase="'no-box'" [attr.for]="name" class="no-box">
            <div>
              <i class="bhi-dropzone"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }}
              <strong class="link">{{ labels.clickToBrowse }}</strong>
            </div>
          </label>
          <label *ngSwitchDefault [attr.for]="name" class="boxed">
            <span>{{ placeholder || labels.chooseAFile }}</span>
            <small
              >{{ labels.or }} <strong class="link">{{ labels.clickToBrowse }}</strong></small
            >
          </label>
        </section>
      </div>
    </ng-template>
    <ng-template #fileOutput>
      <div class="file-output-group" [dragula]="fileOutputBag" [dragulaModel]="files">
        <div class="file-item" *ngFor="let file of files" [class.disabled]="disabled">
          <i *ngIf="layoutOptions.draggable" class="bhi-move"></i>
          <label *ngIf="file.link"
            ><span
              ><a href="{{ file.link }}" target="_blank">{{ file.name | decodeURI }}</a></span
            ><span *ngIf="file.description">||</span><span>{{ file.description }}</span></label
          >
          <label *ngIf="!file.link">{{ file.name | decodeURI }}</label>
          <div class="actions" [attr.data-automation-id]="'file-actions'" *ngIf="file.loaded">
            <div *ngIf="!layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="download(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled && (layoutOptions.removable || (!layoutOptions.removable && layoutOptions.removableWhenNew && !file.link))"
                type="button"
                theme="icon"
                icon="close"
                (click)="remove(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
            <div *ngIf="layoutOptions.customActions">
              <button
                *ngIf="layoutOptions.edit && !disabled"
                type="button"
                theme="icon"
                icon="edit"
                (click)="customEdit(file)"
                [attr.data-automation-id]="'file-edit'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="layoutOptions.download"
                type="button"
                theme="icon"
                icon="save"
                (click)="customSave(file)"
                [attr.data-automation-id]="'file-download'"
                tabindex="-1"
              ></button>
              <button
                *ngIf="!disabled"
                type="button"
                theme="icon"
                icon="close"
                (click)="customDelete(file)"
                [attr.data-automation-id]="'file-remove'"
                tabindex="-1"
              ></button>
            </div>
          </div>
          <novo-loading *ngIf="!file.loaded"></novo-loading>
        </div>
      </div>
    </ng-template>
`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: NovoDragulaService }, { type: ErrorStateMatcher }, { type: i4.NgForm, decorators: [{
                    type: Optional
                }] }, { type: i4.FormGroupDirective, decorators: [{
                    type: Optional
                }] }, { type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { id: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], errorStateMatcher: [{
                type: Input
            }], fileInput: [{
                type: ViewChild,
                args: ['fileInput', { static: true }]
            }], fileOutput: [{
                type: ViewChild,
                args: ['fileOutput', { static: true }]
            }], container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef, static: true }]
            }], inputElement: [{
                type: ViewChild,
                args: ['inputElement']
            }], multiple: [{
                type: Input
            }], layoutOptions: [{
                type: Input
            }], value: [{
                type: Input
            }], dataFeatureId: [{
                type: Input
            }], edit: [{
                type: Output
            }], save: [{
                type: Output
            }], delete: [{
                type: Output
            }], upload: [{
                type: Output
            }], name: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }, {
                type: Input
            }], required: [{
                type: Input
            }], placeholder: [{
                type: Input
            }] } });

// NG2
class NovoFormExtrasModule {
}
NovoFormExtrasModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormExtrasModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoFormExtrasModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormExtrasModule, declarations: [NovoAddressElement, NovoFileInputElement], imports: [CommonModule,
        FormsModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoSelectModule,
        NovoPickerModule,
        NovoLoadingModule,
        NovoDragulaModule,
        NovoTooltipModule,
        NovoCheckboxModule], exports: [NovoAddressElement, NovoFileInputElement] });
NovoFormExtrasModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormExtrasModule, imports: [[
            CommonModule,
            FormsModule,
            NovoPipesModule,
            NovoButtonModule,
            NovoSelectModule,
            NovoPickerModule,
            NovoLoadingModule,
            NovoDragulaModule,
            NovoTooltipModule,
            NovoCheckboxModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormExtrasModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        NovoPipesModule,
                        NovoButtonModule,
                        NovoSelectModule,
                        NovoPickerModule,
                        NovoLoadingModule,
                        NovoDragulaModule,
                        NovoTooltipModule,
                        NovoCheckboxModule,
                    ],
                    declarations: [NovoAddressElement, NovoFileInputElement],
                    exports: [NovoAddressElement, NovoFileInputElement],
                }]
        }] });

// NG2
class NovoTilesModule {
}
NovoTilesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTilesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTilesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTilesModule, declarations: [NovoTilesElement], imports: [CommonModule, ReactiveFormsModule], exports: [NovoTilesElement] });
NovoTilesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTilesModule, imports: [[CommonModule, ReactiveFormsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTilesModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, ReactiveFormsModule],
                    declarations: [NovoTilesElement],
                    exports: [NovoTilesElement],
                }]
        }] });

class NovoDataTableModule {
}
NovoDataTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoDataTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableModule, declarations: [DataTableInterpolatePipe,
        DateTableDateRendererPipe,
        DateTableCurrencyRendererPipe,
        DateTableDateTimeRendererPipe,
        DateTableNumberRendererPipe,
        DateTableTimeRendererPipe,
        DataTableBigDecimalRendererPipe,
        NovoDataTableCellHeader,
        NovoDataTableSortFilter,
        NovoDataTableHeaderCell,
        NovoDataTableCell,
        NovoDataTableHeaderRow,
        NovoDataTableRow,
        NovoDataTablePagination,
        NovoDataTableCheckboxCell,
        NovoDataTableCheckboxHeaderCell,
        NovoDataTableExpandCell,
        NovoDataTableExpandHeaderCell,
        NovoDataTable,
        NovoDataTableExpandDirective,
        NovoDataTableClearButton,
        NovoDataTableSortButton], imports: [NovoDatePickerModule,
        CdkTableModule,
        CommonModule,
        FormsModule,
        NovoIconModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoFormExtrasModule,
        NovoLoadingModule,
        NovoTilesModule,
        NovoSearchBoxModule,
        NovoOptionModule,
        NovoCommonModule,
        NovoSelectModule,
        NovoTooltipModule,
        NovoCheckboxModule,
        NovoFlexModule,
        NovoFieldModule], exports: [NovoDataTable,
        DataTableInterpolatePipe,
        DateTableDateRendererPipe,
        DateTableCurrencyRendererPipe,
        DateTableDateTimeRendererPipe,
        DateTableNumberRendererPipe,
        DateTableTimeRendererPipe,
        DataTableBigDecimalRendererPipe,
        NovoDataTableClearButton,
        NovoDataTableSortButton] });
NovoDataTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableModule, providers: [DataTableState], imports: [[
            NovoDatePickerModule,
            CdkTableModule,
            CommonModule,
            FormsModule,
            NovoIconModule,
            NovoButtonModule,
            NovoDropdownModule,
            NovoFormExtrasModule,
            NovoLoadingModule,
            NovoTilesModule,
            NovoSearchBoxModule,
            NovoOptionModule,
            NovoCommonModule,
            NovoSelectModule,
            NovoTooltipModule,
            NovoCheckboxModule,
            NovoFlexModule,
            NovoFieldModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDataTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        NovoDatePickerModule,
                        CdkTableModule,
                        CommonModule,
                        FormsModule,
                        NovoIconModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoFormExtrasModule,
                        NovoLoadingModule,
                        NovoTilesModule,
                        NovoSearchBoxModule,
                        NovoOptionModule,
                        NovoCommonModule,
                        NovoSelectModule,
                        NovoTooltipModule,
                        NovoCheckboxModule,
                        NovoFlexModule,
                        NovoFieldModule,
                    ],
                    declarations: [
                        DataTableInterpolatePipe,
                        DateTableDateRendererPipe,
                        DateTableCurrencyRendererPipe,
                        DateTableDateTimeRendererPipe,
                        DateTableNumberRendererPipe,
                        DateTableTimeRendererPipe,
                        DataTableBigDecimalRendererPipe,
                        NovoDataTableCellHeader,
                        NovoDataTableSortFilter,
                        NovoDataTableHeaderCell,
                        NovoDataTableCell,
                        NovoDataTableHeaderRow,
                        NovoDataTableRow,
                        NovoDataTablePagination,
                        NovoDataTableCheckboxCell,
                        NovoDataTableCheckboxHeaderCell,
                        NovoDataTableExpandCell,
                        NovoDataTableExpandHeaderCell,
                        NovoDataTable,
                        NovoDataTableExpandDirective,
                        NovoDataTableClearButton,
                        NovoDataTableSortButton,
                    ],
                    providers: [DataTableState],
                    exports: [
                        NovoDataTable,
                        DataTableInterpolatePipe,
                        DateTableDateRendererPipe,
                        DateTableCurrencyRendererPipe,
                        DateTableDateTimeRendererPipe,
                        DateTableNumberRendererPipe,
                        DateTableTimeRendererPipe,
                        DataTableBigDecimalRendererPipe,
                        NovoDataTableClearButton,
                        NovoDataTableSortButton,
                    ],
                }]
        }] });

class RemoteDataTableService {
}

class CollectionEvent {
    constructor(type = 'Collection.REFRESH', data = []) {
        this.type = '';
        this.data = [];
        this.type = type;
        this.data = data;
    }
}
CollectionEvent.REFRESH = 'Collection.REFRESH';
CollectionEvent.ADD = 'Collection.ADD';
CollectionEvent.REMOVE = 'Collection.REMOVE';
CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
CollectionEvent.REPLACE = 'Collection.REPLACE';
CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
CollectionEvent.SORT = 'Collection.SORT';
CollectionEvent.FILTER = 'Collection.FILTER';
CollectionEvent.CHANGE = 'Collection.CHANGE';
CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';

// Ng
/**
 * Base Class for all Collection based data providers
 *
 * @example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});

 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 */
class ArrayCollection {
    constructor(source = []) {
        this.dataChange = new EventEmitter();
        this.source = [];
        this.editData = [];
        this.isEditing = false;
        this.filterData = [];
        this._filter = {};
        this._sort = [];
        this.source = source;
        this.editData = this.copy(this.source);
        this.filterData = this.source.slice();
    }
    get length() {
        return this.filterData.length;
    }
    get total() {
        return this.filterData.length;
    }
    get list() {
        return this.filterData;
    }
    isEmpty() {
        return this.length <= 0 && !this.isLoading() && !this.hasErrors();
    }
    hasErrors() {
        return false;
    }
    isLoading() {
        return false;
    }
    isFiltered() {
        return Object.keys(this._filter).length > 0;
    }
    /**
     * Method to switch the isEditingflag for the data source
     */
    edit() {
        this.isEditing = true;
        this.editData = this.copy(this.source);
    }
    /**
     * Method to leave edit mode and reset source
     */
    undo() {
        this.isEditing = false;
        this.source = this.copy(this.editData);
        this.refresh();
    }
    /**
     * Method to leave edit mode and save editData
     */
    commit() {
        this.isEditing = false;
        this.source = this.filterData.slice();
        this.refresh();
    }
    /**
     * Appends an item to the end of the data provider.
     *
     *
     * @memberOf ArrayCollection
     */
    addItem(item) {
        this.isEditing ? this.editData.push(item) : this.source.push(item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    }
    /**
     * Adds a new item to the data provider at the specified index.
     *
     *
     * @memberOf ArrayCollection
     */
    addItemAt(item, index) {
        this.isEditing ? this.editData.splice(index, 0, item) : this.source.splice(index, 0, item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    }
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * @memberOf ArrayCollection
     */
    addItems(items) {
        this.isEditing ? this.editData.push(...items) : this.source.push(...items);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
        this.refresh();
    }
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * @memberOf ArrayCollection
     */
    addItemsAt(items, index) {
        this.isEditing ? this.editData.splice(index, 0, ...items) : this.source.splice(index, 0, ...items);
    }
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    clone() {
        return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
    }
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    copy(array) {
        return Helpers.deepClone(array);
    }
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * @memberOf ArrayCollection
     */
    concat(items) {
        this.addItems(items);
    }
    /**
     * Returns the item at the specified index.
     *
     * @memberOf ArrayCollection
     */
    getItemAt(index) {
        return this.isEditing ? this.editData[index] : this.source[index];
    }
    /**
     *  Returns the index of the specified item.
     *
     * @memberOf ArrayCollection
     */
    getItemIndex(item) {
        return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
    }
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    invalidate() {
        this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
    }
    /**
     * Invalidates the specified item.
     *
     * @memberOf ArrayCollection
     */
    // invalidateItem(item:any):void {}
    /**
     * Invalidates the item at the specified index.
     *
     * @memberOf ArrayCollection
     */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * @memberOf ArrayCollection
     */
    merge(newData) {
        for (const obj of newData) {
            const existing = ~this.getItemIndex(obj);
            if (existing) {
                this.replaceItem(obj, existing);
            }
            else {
                this.addItem(obj);
            }
        }
    }
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    removeAll() {
        this.source = [];
        this.editData = [];
        this.filterData = [];
        this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
        this.refresh();
    }
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * @memberOf ArrayCollection
     */
    removeItem(item) {
        const index = this.getItemIndex(item);
        return this.removeItemAt(index);
    }
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * @memberOf ArrayCollection
     */
    removeItemAt(index) {
        const success = !!this.source.splice(index, 1);
        this.refresh();
        return success;
    }
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * @memberOf ArrayCollection
     */
    replaceItem(newItem, oldItem) {
        const index = this.getItemIndex(oldItem);
        if (index >= 0) {
            this.replaceItemAt(newItem, index);
        }
    }
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * @memberOf ArrayCollection
     */
    replaceItemAt(newItem, index) {
        this.filterData.splice(index, 1, newItem);
    }
    /**
     * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
     *
     * @memberOf ArrayCollection
     */
    get sort() {
        return this._sort;
    }
    set sort(value) {
        this._sort = value;
        this.refresh();
    }
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * @memberOf ArrayCollection
     */
    sortOn(fieldName, reverse = false) {
        this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
        this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
        return this.filterData;
    }
    get filter() {
        return this._filter;
    }
    set filter(value) {
        this._filter = value;
        this.refresh();
    }
    filterOn(fieldName, value = null) {
        this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
        return this.filterData;
    }
    onDataChange(event) {
        this.dataChange.emit(event);
    }
    refresh() {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (const item of this._sort.reverse()) {
            this.sortOn(item.field, item.reverse);
        }
        for (const key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
    }
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * @memberOf ArrayCollection
     */
    toArray() {
        return this.isEditing ? this.editData : this.source;
    }
    toJSON() {
        return this.isEditing ? this.editData : this.source;
    }
}

class PagedArrayCollection extends ArrayCollection {
    constructor(source = []) {
        super(source);
        this._page = 1;
        this._numberOfPages = 1;
        this._pageSize = 10;
    }
    get numberOfPages() {
        let result = this.source.length / this.pageSize;
        result = Math.ceil(result);
        return result;
    }
    get page() {
        return this._page;
    }
    set page(value) {
        this._page = value;
        this.refresh();
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(value) {
        this._pageSize = value;
        this.refresh();
    }
    next() {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page++;
        return this.page;
    }
    prev() {
        if (this._page === 1) {
            return this.page;
        }
        this.page--;
        return this.page;
    }
    first() {
        if (this.page === 1) {
            return this.page;
        }
        this.page = 1;
        return this.page;
    }
    last() {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page = this.numberOfPages;
        return this.page;
    }
    refresh() {
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        for (const item of this._sort.reverse()) {
            this.sortOn(item.field, item.reverse);
        }
        for (const key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        if (this.page >= 0) {
            const start = (this.page - 1) * this.pageSize;
            const end = start + this.pageSize;
            const result = this.filterData.slice(start, end);
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
        }
        else {
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        }
    }
}

class GlobalRef {
}
class BrowserGlobalRef extends GlobalRef {
    get nativeGlobal() {
        return window;
    }
}
BrowserGlobalRef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BrowserGlobalRef, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
BrowserGlobalRef.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BrowserGlobalRef });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BrowserGlobalRef, decorators: [{
            type: Injectable
        }] });
class NodeGlobalRef extends GlobalRef {
    get nativeGlobal() {
        throw new Error(`global doesn't compile for some reason`);
        // return global as Global;
    }
}

// NG2
class Security {
    constructor() {
        this.credentials = [];
        this.change = new EventEmitter();
    }
    grant(data) {
        const parsed = [];
        if (data instanceof Array) {
            for (const permission of data) {
                parsed.push(permission.replace(/\s/gi, ''));
            }
        }
        else if (typeof data === 'object') {
            for (const key in data) {
                if (data[key] instanceof Array) {
                    for (const permission of data[key]) {
                        parsed.push(`${key}.${permission}`);
                    }
                }
            }
        }
        this.credentials = [].concat(this.credentials, parsed);
        this.change.emit(this.credentials);
    }
    has(value) {
        return this.credentials.indexOf(value) > -1;
    }
    revoke(value) {
        const i = this.credentials.indexOf(value);
        this.credentials.splice(i, 1);
        this.change.emit(this.credentials);
    }
    clear() {
        this.credentials = [];
        this.change.emit(this.credentials);
    }
    subscribe(fn) {
        this.change.subscribe(fn);
    }
    checkRoutes(routes, options) {
        const filtered = [];
        for (const route of routes) {
            if (route.entities && ~route.entities.indexOf(options.entityType)) {
                if (route.permissions instanceof Function) {
                    if (route.permissions(options, this)) {
                        filtered.push(route);
                    }
                }
                else if (route.permissions && route.permissions.length) {
                    if (route.permissions.every((perm) => this.has(perm))) {
                        filtered.push(route);
                    }
                }
                else {
                    filtered.push(route);
                }
            }
        }
        return filtered;
    }
}
Security.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Security, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
Security.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Security, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Security, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }] });

class LocalStorageService {
    setItem(key, value) {
        localStorage.setItem(key, value);
    }
    getItem(key) {
        return localStorage.getItem(key);
    }
    removeItem(key) {
        localStorage.removeItem(key);
    }
}
LocalStorageService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: LocalStorageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
LocalStorageService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: LocalStorageService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: LocalStorageService, decorators: [{
            type: Injectable
        }] });

// NG2
class NovoTemplateService {
    constructor() {
        this.templates = {
            default: {},
            custom: {},
        };
    }
    getAll() {
        const templates = {};
        const customTemplateTypes = Object.keys(this.templates.custom);
        const defaultTemplateTypes = Object.keys(this.templates.default);
        defaultTemplateTypes.forEach((type) => {
            templates[type] = this.templates.default[type];
        });
        customTemplateTypes.forEach((type) => {
            templates[type] = this.templates.custom[type];
        });
        return templates;
    }
    addDefault(key, template) {
        this.templates.default[key] = template;
    }
    addCustom(key, template) {
        this.templates.custom[key] = template;
    }
}
NovoTemplateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTemplateService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NovoTemplateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTemplateService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTemplateService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });

// NG2
// Value accessor for the component (supports ngModel)
const TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimePickerElement),
    multi: true,
};
var TIME_VALUE_FORMATS;
(function (TIME_VALUE_FORMATS) {
    TIME_VALUE_FORMATS["iso8601"] = "iso8601";
    TIME_VALUE_FORMATS["Date"] = "Date";
})(TIME_VALUE_FORMATS || (TIME_VALUE_FORMATS = {}));
class NovoTimePickerElement {
    constructor(element, labels, dateFormatService, cdr) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this.cdr = cdr;
        this.military = false;
        this.analog = false;
        this.inline = false;
        this.step = 1;
        this.onSelect = new EventEmitter();
        this.hours = 12;
        this.minutes = 0;
        this.value = null;
        this.increments = [];
        this.MERIDIANS = ['am', 'pm'];
        this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
        this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    flatten(arr) {
        return Array.prototype.concat(...arr);
    }
    ngOnInit() {
        if (this.military) {
            this.HOURS = ['0', ...this.HOURS, '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23'];
        }
        if (!this.analog) {
            const mins = Array.from(Array(60 / this.step).keys()).map((i) => i * this.step);
            this.MINUTES = mins.map((m) => `${m}`.padStart(2, '0'));
        }
        this.ngOnChanges();
    }
    ngOnChanges(changes) {
        if (this.model) {
            this.init(this.model, false);
        }
        else {
            this.selected = null;
            this.init(new Date(), false);
        }
    }
    init(value, dispatch) {
        const _value = new Date(value);
        let hours = _value.getHours();
        let minutes = _value.getMinutes();
        if (!this.military) {
            this.meridian = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours || 12;
        }
        minutes = minutes < 10 ? `0${minutes}` : minutes;
        this.setHours(null, hours, dispatch);
        this.setMinutes(null, minutes, dispatch);
        this.checkBetween(minutes);
    }
    checkBetween(value) {
        this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
    }
    setValue(event, value) {
        Helpers.swallowEvent(event);
        this.selected = value;
        const [time, meridian] = value.split(' ');
        const [hours, minutes] = time.split(':');
        this.hours = hours;
        this.minutes = minutes;
        this.meridian = meridian;
        this.dispatchChange();
    }
    setHours(event, hours, dispatch) {
        Helpers.swallowEvent(event);
        this.hours = hours;
        this.hoursClass = `hour-${hours}`;
        this.activeHour = hours;
        if (dispatch) {
            this.dispatchChange();
        }
    }
    setMinutes(event, minutes, dispatch) {
        Helpers.swallowEvent(event);
        this.minutes = minutes;
        this.minutesClass = `min-${minutes}`;
        this.activeMinute = minutes;
        this.checkBetween(minutes);
        if (dispatch) {
            this.dispatchChange();
        }
    }
    setPeriod(event, period, dispatch) {
        Helpers.swallowEvent(event);
        this.meridian = period;
        if (dispatch) {
            this.dispatchChange();
        }
    }
    dispatchChange() {
        let hours = Number(this.hours);
        if (!this.military) {
            hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
            // Special case for 12
            if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                hours = 0;
            }
        }
        const value = new Date();
        value.setHours(hours);
        value.setMinutes(this.minutes);
        value.setSeconds(0);
        this.value = `${this.hours}:${this.minutes} ${this.meridian}`;
        this.onSelect.next({
            hours,
            minutes: this.minutes,
            meridian: this.meridian,
            date: value,
            text: this.value,
        });
        this._onChange(value);
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.init(model, false);
            // this.dispatchChange();
        }
        if (Helpers.isString(model)) {
            const time = this.military ? model : this.convertTime12to24(model);
            const date = parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            if (isValid(date)) {
                this.init(date, false);
                // this.dispatchChange();
            }
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, modifier] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(modifier)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
}
NovoTimePickerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: DateFormatService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoTimePickerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTimePickerElement, selector: "novo-time-picker", inputs: { military: "military", analog: "analog", inline: "inline", step: "step" }, outputs: { onSelect: "onSelect" }, host: { properties: { "class.military": "military" }, classAttribute: "novo-time-picker" }, providers: [TIME_PICKER_VALUE_ACCESSOR], usesOnChanges: true, ngImport: i0, template: `
    <!-- <div class="digital" [class.inline]="inline" [class.military]="military" *ngIf="inline">
      <div class="digital--inner">
        <span class="digital--clock" *ngIf="analog">
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
        </span>
        <div class="control-block" *ngIf="!military && analog">
          <span
            *ngFor="let period of MERIDIANS"
            class="digital--period"
            [class.active]="meridian == period"
            (click)="setPeriod($event, period, true)"
            [attr.data-automation-id]="period"
            >{{ period }}</span
          >
        </div>
      </div>
    </div> -->
    <div class="increments" *ngIf="!analog">
      <novo-list class="increments--hours" direction="vertical" data-automation-id="novo-time-picker-hours">
        <novo-list-item
          class="increments--hour"
          *ngFor="let increment of HOURS"
          (click)="setHours($event, increment, true)"
          [class.active]="increment == activeHour"
          [attr.data-automation-id]="increment"
        >
          <item-content>{{ increment }}</item-content>
        </novo-list-item>
      </novo-list>
      <novo-list class="increments--minutes" direction="vertical" data-automation-id="novo-time-picker-minutes">
        <novo-list-item
          class="increments--minute"
          *ngFor="let increment of MINUTES"
          (click)="setMinutes($event, increment, true)"
          [class.active]="increment == activeMinute"
          [attr.data-automation-id]="increment"
        >
          <item-content>{{ increment }}</item-content>
        </novo-list-item>
      </novo-list>
      <novo-list class="increments--meridians" direction="vertical" *ngIf="!military" data-automation-id="novo-time-picker-meridians">
        <novo-list-item
          class="increments--meridian"
          *ngFor="let period of MERIDIANS"
          (click)="setPeriod($event, period, true)"
          [class.active]="meridian == period"
          [attr.data-automation-id]="period"
        >
          <item-content>{{ period }}</item-content>
        </novo-list-item>
      </novo-list>
    </div>
    <div class="analog" *ngIf="analog">
      <div class="analog--inner">
        <div class="analog--face">
          <span class="analog--center"></span>
          <span class="analog--hand--hours" [ngClass]="hoursClass">
            <span class="analog--ball"></span>
          </span>
          <span class="analog--hand--minutes" [ngClass]="minutesClass">
            <span class="analog--ball" [ngClass]="{ between: inBetween }"></span>
          </span>
        </div>
        <div class="analog--hours">
          <span
            *ngFor="let hour of HOURS"
            class="analog--hour"
            [ngClass]="{ active: activeHour == hour }"
            (click)="setHours($event, hour, true)"
            [attr.data-automation-id]="hour"
            >{{ hour }}</span
          >
        </div>
        <div class="analog--minutes">
          <span
            *ngFor="let minute of MINUTES"
            class="analog--minute"
            [ngClass]="{ active: activeMinute == minute }"
            (click)="setMinutes($event, minute, true)"
            [attr.data-automation-id]="minute"
            >{{ minute }}</span
          >
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-time-picker',
                    providers: [TIME_PICKER_VALUE_ACCESSOR],
                    template: `
    <!-- <div class="digital" [class.inline]="inline" [class.military]="military" *ngIf="inline">
      <div class="digital--inner">
        <span class="digital--clock" *ngIf="analog">
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
        </span>
        <div class="control-block" *ngIf="!military && analog">
          <span
            *ngFor="let period of MERIDIANS"
            class="digital--period"
            [class.active]="meridian == period"
            (click)="setPeriod($event, period, true)"
            [attr.data-automation-id]="period"
            >{{ period }}</span
          >
        </div>
      </div>
    </div> -->
    <div class="increments" *ngIf="!analog">
      <novo-list class="increments--hours" direction="vertical" data-automation-id="novo-time-picker-hours">
        <novo-list-item
          class="increments--hour"
          *ngFor="let increment of HOURS"
          (click)="setHours($event, increment, true)"
          [class.active]="increment == activeHour"
          [attr.data-automation-id]="increment"
        >
          <item-content>{{ increment }}</item-content>
        </novo-list-item>
      </novo-list>
      <novo-list class="increments--minutes" direction="vertical" data-automation-id="novo-time-picker-minutes">
        <novo-list-item
          class="increments--minute"
          *ngFor="let increment of MINUTES"
          (click)="setMinutes($event, increment, true)"
          [class.active]="increment == activeMinute"
          [attr.data-automation-id]="increment"
        >
          <item-content>{{ increment }}</item-content>
        </novo-list-item>
      </novo-list>
      <novo-list class="increments--meridians" direction="vertical" *ngIf="!military" data-automation-id="novo-time-picker-meridians">
        <novo-list-item
          class="increments--meridian"
          *ngFor="let period of MERIDIANS"
          (click)="setPeriod($event, period, true)"
          [class.active]="meridian == period"
          [attr.data-automation-id]="period"
        >
          <item-content>{{ period }}</item-content>
        </novo-list-item>
      </novo-list>
    </div>
    <div class="analog" *ngIf="analog">
      <div class="analog--inner">
        <div class="analog--face">
          <span class="analog--center"></span>
          <span class="analog--hand--hours" [ngClass]="hoursClass">
            <span class="analog--ball"></span>
          </span>
          <span class="analog--hand--minutes" [ngClass]="minutesClass">
            <span class="analog--ball" [ngClass]="{ between: inBetween }"></span>
          </span>
        </div>
        <div class="analog--hours">
          <span
            *ngFor="let hour of HOURS"
            class="analog--hour"
            [ngClass]="{ active: activeHour == hour }"
            (click)="setHours($event, hour, true)"
            [attr.data-automation-id]="hour"
            >{{ hour }}</span
          >
        </div>
        <div class="analog--minutes">
          <span
            *ngFor="let minute of MINUTES"
            class="analog--minute"
            [ngClass]="{ active: activeMinute == minute }"
            (click)="setMinutes($event, minute, true)"
            [attr.data-automation-id]="minute"
            >{{ minute }}</span
          >
        </div>
      </div>
    </div>
  `,
                    host: {
                        class: 'novo-time-picker',
                        '[class.military]': 'military',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { military: [{
                type: Input
            }], analog: [{
                type: Input
            }], inline: [{
                type: Input
            }], step: [{
                type: Input
            }], onSelect: [{
                type: Output
            }] } });

// NG2
// Value accessor for the component (supports ngModel)
const DATE_TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateTimePickerElement),
    multi: true,
};
class NovoDateTimePickerElement {
    constructor(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        this.componentTabState = 'date';
        this.datePickerValue = new Date();
        this.timePickerValue = new Date();
        this._onChange = () => { };
        this._onTouched = () => { };
    }
    toggleView(tab) {
        this.componentTabState = tab;
    }
    onModelChange(event) {
        this.model = this.createFullDateValue(this.datePickerValue, event);
    }
    setDateLabels(value) {
        this.selectedLabel = this.labels.formatDateWithFormat(value, {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
    }
    setTimeLabels(value) {
        let hours = value.getHours();
        const minutes = value.getMinutes();
        this.meridian = value.toLocaleTimeString().slice(-2);
        if (!this.military) {
            hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
            // Special case for 12
            if (this.meridian === 'PM' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian === 'AM' && hours === 0) {
                hours = 12;
            }
        }
        this.hours = hours.toString();
        this.minutes = minutes.toString().length === 1 ? `0${minutes.toString()}` : minutes.toString();
    }
    onDateSelected(event) {
        this.datePickerValue = event.date;
        this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
        this.setDateLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
        this.toggleView('time');
    }
    onTimeSelected(event) {
        this.timePickerValue = event.date;
        this.model = this.createFullDateValue(this.model, this.timePickerValue);
        this.setTimeLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
    }
    createFullDateValue(datePickerValue, timePickerValue) {
        return dateFns.setMilliseconds(dateFns.setSeconds(dateFns.setMinutes(dateFns.setHours(datePickerValue, dateFns.getHours(timePickerValue)), dateFns.getMinutes(timePickerValue)), dateFns.getSeconds(timePickerValue)), dateFns.getMilliseconds(timePickerValue));
    }
    // ValueAccessor Functions
    writeValue(model) {
        this.model = model;
        if (Helpers.isEmpty(model)) {
            this.model = new Date();
        }
        else if (!isNaN(model)) {
            this.model = new Date(model);
        }
        this.datePickerValue = this.model;
        this.timePickerValue = this.model;
        if (Helpers.isDate(this.model)) {
            this.setDateLabels(this.model);
            this.setTimeLabels(this.model);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
}
NovoDateTimePickerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerElement, deps: [{ token: NovoLabelService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoDateTimePickerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDateTimePickerElement, selector: "novo-date-time-picker", inputs: { minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", military: "military", weekStart: "weekStart", disabledDateMessage: "disabledDateMessage" }, outputs: { onSelect: "onSelect" }, providers: [DATE_TIME_PICKER_VALUE_ACCESSOR], ngImport: i0, template: `
    <div class="date-time-container">
      <div class="date-time-tabs">
        <span
          class="date-tab"
          (click)="toggleView('date')"
          [@dateTextState]="componentTabState"
          data-automation-id="novo-date-time-date-tab"
          >{{ selectedLabel }}</span
        >
        <span
          class="time-tab"
          (click)="toggleView('time')"
          [@timeTextState]="componentTabState"
          data-automation-id="novo-date-time-time-tab"
        >
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
          <span *ngIf="!military" class="meridian"> {{ meridian }}</span>
        </span>
        <i class="date-time-indicator" [@indicatorState]="componentTabState"></i>
      </div>
      <div class="view-container" [@containerState]="componentTabState">
        <div class="calendar">
          <novo-date-picker
            (onSelect)="onDateSelected($event)"
            [(ngModel)]="model"
            inline="true"
            [minYear]="minYear"
            [maxYear]="maxYear"
            [start]="start"
            [end]="end"
            [disabledDateMessage]="disabledDateMessage"
            [weekStart]="weekStart"
          ></novo-date-picker>
        </div>
        <div class="time-picker">
          <novo-time-picker (onSelect)="onTimeSelected($event)" [(ngModel)]="model" (ngModelChange)="onModelChange($event)" [military]="military" inline="true"></novo-time-picker>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { type: NovoTimePickerElement, selector: "novo-time-picker", inputs: ["military", "analog", "inline", "step"], outputs: ["onSelect"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }], animations: [
        trigger('dateTextState', [
            state('date', style({
                opacity: '1.0',
            })),
            state('time', style({
                opacity: '0.6',
            })),
            transition('date <=> time', animate('200ms ease-in')),
        ]),
        trigger('timeTextState', [
            state('date', style({
                opacity: '0.6',
            })),
            state('time', style({
                opacity: '1.0',
            })),
            transition('date <=> time', animate('200ms ease-in')),
        ]),
        trigger('indicatorState', [
            state('date', style({
                transform: 'translateX(0%)',
            })),
            state('time', style({
                transform: 'translateX(100%)',
            })),
            transition('date <=> time', animate('200ms ease-in')),
        ]),
        trigger('containerState', [
            state('date', style({
                transform: 'translateX(0%)',
            })),
            state('time', style({
                transform: 'translateX(-100%)',
            })),
            transition('date <=> time', animate('200ms ease-in')),
        ]),
    ] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-date-time-picker',
                    providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                    animations: [
                        trigger('dateTextState', [
                            state('date', style({
                                opacity: '1.0',
                            })),
                            state('time', style({
                                opacity: '0.6',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                        trigger('timeTextState', [
                            state('date', style({
                                opacity: '0.6',
                            })),
                            state('time', style({
                                opacity: '1.0',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                        trigger('indicatorState', [
                            state('date', style({
                                transform: 'translateX(0%)',
                            })),
                            state('time', style({
                                transform: 'translateX(100%)',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                        trigger('containerState', [
                            state('date', style({
                                transform: 'translateX(0%)',
                            })),
                            state('time', style({
                                transform: 'translateX(-100%)',
                            })),
                            transition('date <=> time', animate('200ms ease-in')),
                        ]),
                    ],
                    template: `
    <div class="date-time-container">
      <div class="date-time-tabs">
        <span
          class="date-tab"
          (click)="toggleView('date')"
          [@dateTextState]="componentTabState"
          data-automation-id="novo-date-time-date-tab"
          >{{ selectedLabel }}</span
        >
        <span
          class="time-tab"
          (click)="toggleView('time')"
          [@timeTextState]="componentTabState"
          data-automation-id="novo-date-time-time-tab"
        >
          <span class="hours" data-automation-id="novo-time-picker-hours">{{ hours }}</span
          >:<span class="minutes" data-automation-id="novo-time-picker-minutes">{{ minutes }}</span>
          <span *ngIf="!military" class="meridian"> {{ meridian }}</span>
        </span>
        <i class="date-time-indicator" [@indicatorState]="componentTabState"></i>
      </div>
      <div class="view-container" [@containerState]="componentTabState">
        <div class="calendar">
          <novo-date-picker
            (onSelect)="onDateSelected($event)"
            [(ngModel)]="model"
            inline="true"
            [minYear]="minYear"
            [maxYear]="maxYear"
            [start]="start"
            [end]="end"
            [disabledDateMessage]="disabledDateMessage"
            [weekStart]="weekStart"
          ></novo-date-picker>
        </div>
        <div class="time-picker">
          <novo-time-picker (onSelect)="onTimeSelected($event)" [(ngModel)]="model" (ngModelChange)="onModelChange($event)" [military]="military" inline="true"></novo-time-picker>
        </div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ElementRef }]; }, propDecorators: { minYear: [{
                type: Input
            }], maxYear: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], military: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], disabledDateMessage: [{
                type: Input
            }], onSelect: [{
                type: Output
            }] } });

// NG
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoTimePickerInputElement),
    multi: true,
};
class NovoTimePickerInputElement {
    constructor(element, labels, dateFormatService, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this._changeDetectorRef = _changeDetectorRef;
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
        this.military = false;
        this.disabled = false;
        /**
         * @deprecated don't use
         */
        this.analog = false;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    ngOnInit() {
        this.initFormatOptions();
    }
    ngOnChanges(changes) {
        // set icon and styling
        if (Object.keys(changes).some((key) => ['military', 'maskOptions'].includes(key))) {
            this.initFormatOptions();
        }
    }
    initFormatOptions() {
        this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
        const timeFormat = this.military ? 'HH:mm' : 'hh:mm A';
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.maskOptions = {
            mask: Date,
            pattern: this.military ? 'HH:mm' : 'hh:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1970, 0, 1),
            max: new Date(2030, 0, 1),
            prepare(str) {
                return str.toUpperCase();
            },
            format(date) {
                return format(date, timeFormat);
            },
            parse: (str) => {
                const time = this.military ? str : this.convertTime12to24(str);
                return parse(`${format(Date.now(), 'YYYY-MM-DD')}T${time}`);
            },
            blocks: {
                HH: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'H',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'h',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: IMask.MaskedRange,
                    placeholderChar: 'm',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: IMask.MaskedEnum,
                    placeholderChar: 'x',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    onComplete(dt) {
        if (this.value instanceof Date && dt instanceof Date) {
            if (this.value.getTime() !== dt.getTime()) {
                this.dispatchOnChange(dt);
            }
        }
        else if (this.value !== dt) {
            this.dispatchOnChange(dt);
        }
    }
    /** BEGIN: Convenient Panel Methods. */
    openPanel() {
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
            const hour = new Date().getHours();
            Promise.resolve(null).then(() => this.scrollToIndex(hour * 4));
        }
    }
    closePanel() {
        this.overlay.closePanel();
    }
    get panelOpen() {
        return this.overlay && this.overlay.panelOpen;
    }
    /** END: Convenient Panel Methods. */
    _handleKeydown(event) {
        const input = event.target;
        const hour = input.value.slice(0, 2);
        if ((event.key === "Escape" /* Escape */ || event.key === "Enter" /* Enter */) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
            if (this.hourOneFormatRequired(hour)) {
                input.value = `01:${input.value.slice(3, input.value.length)}`;
            }
        }
        else if (event.key === "Tab" /* Tab */ && input.selectionStart <= 2 && this.hourOneFormatRequired(hour)) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            input.value = `01:${input.value.slice(3, input.value.length)}`;
            input.setSelectionRange(3, 3);
        }
        else if (event.key === "Backspace" /* Backspace */ && input.selectionStart === input.value.length) {
            input.value = `${input.value.slice(0, 5)} xx`;
        }
        else if (event.key === "Tab" /* Tab */ && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
        else if (event.key === "ArrowRight" /* ArrowRight */ && input.selectionStart >= 2 && this.hourOneFormatRequired(hour)) {
            input.value = `01:${input.value.slice(3, input.value.length)}`;
            input.setSelectionRange(2, 2);
        }
    }
    _handleInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            const hour = text.slice(0, 2);
            this.openPanel();
            if ((this.military && Number(text[0]) > 2) || (!this.military && Number(text[0]) > 1)) {
                event.preventDefault();
                event.target.value = `0${text}`;
            }
            if (!this.military) {
                const test = text.substr(5, 4).replace(/x/g, '').trim().slice(0, 2);
                const timePeriod = this.maskOptions.blocks.aa.enum.find((it) => it[0] === test[0]);
                if (timePeriod) {
                    event.target.value = `${event.target.value.slice(0, 5)} ${timePeriod}`;
                }
                if (event.target.selectionStart >= 3 && this.hourOneFormatRequired(hour)) {
                    event.target.value = `01:${event.target.value.slice(3, event.target.value.length)}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        const hour = text.slice(0, 2);
        if (!this.military) {
            const test = text.substr(5, 4).replace(/x/g, '').trim().slice(0, 2);
            const timePeriod = this.maskOptions.blocks.aa.enum.find((it) => it[0] === test[0]);
            if (this.hourOneFormatRequired(hour)) {
                event.target.value = `01:${text.slice(3, text.length)}`;
            }
            if (!timePeriod) {
                event.target.value = `${event.target.value.slice(0, 5)} xx`;
            }
        }
    }
    _handleFocus(event) {
        this.openPanel();
        this.focusEvent.emit(event);
    }
    writeValue(value) {
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    dispatchOnChange(newValue, skip = false) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    }
    _setTriggerValue(value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
        }
        this.value = value;
        this._changeDetectorRef.markForCheck();
    }
    setValue(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    }
    setValueAndClose(event) {
        this.setValue(event);
        this.closePanel();
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.dispatchOnChange(null);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
    scrollToIndex(index) {
        const element = this.overlay.overlayRef.overlayElement;
        const list = element.querySelector('.increments');
        const items = list.querySelectorAll('novo-list-item');
        const item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, modifier] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(modifier)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
    hourOneFormatRequired(hourInput) {
        return hourInput === 'h1' || hourInput === '1h';
    }
}
NovoTimePickerInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: DateFormatService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoTimePickerInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTimePickerInputElement, selector: "novo-time-picker-input", inputs: { name: "name", placeholder: "placeholder", military: "military", maskOptions: "maskOptions", disabled: "disabled", analog: "analog" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, host: { properties: { "class.disabled": "this.disabled" } }, providers: [DATE_VALUE_ACCESSOR$1], viewQueries: [{ propertyName: "overlay", first: true, predicate: NovoOverlayTemplateComponent, descendants: true }, { propertyName: "input", first: true, predicate: ["input"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="value"
      [imask]="maskOptions"
      [unmask]="'typed'"
      (complete)="onComplete($event)"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="time-input"
      [disabled]="disabled"
    />
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-clock"></i> <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-time-picker
        inline="true"
        [analog]="analog"
        (onSelect)="setValue($event)"
        [ngModel]="value"
        [military]="military"
      ></novo-time-picker>
    </novo-overlay-template>
  `, isInline: true, components: [{ type: NovoOverlayTemplateComponent, selector: "novo-overlay-template", inputs: ["position", "scrollStrategy", "width", "height", "closeOnSelect", "hasBackdrop", "parent"], outputs: ["select", "opening", "closing"] }, { type: NovoTimePickerElement, selector: "novo-time-picker", inputs: ["military", "analog", "inline", "step"], outputs: ["onSelect"] }], directives: [{ type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1$7.IMaskDirective, selector: "[imask]", inputs: ["imaskElement", "imask", "unmask"], outputs: ["accept", "complete"], exportAs: ["imask"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-time-picker-input',
                    providers: [DATE_VALUE_ACCESSOR$1],
                    template: `
    <input
      type="text"
      [name]="name"
      [(ngModel)]="value"
      [imask]="maskOptions"
      [unmask]="'typed'"
      (complete)="onComplete($event)"
      [placeholder]="placeholder"
      (focus)="_handleFocus($event)"
      (keydown)="_handleKeydown($event)"
      (input)="_handleInput($event)"
      (blur)="_handleBlur($event)"
      #input
      data-automation-id="time-input"
      [disabled]="disabled"
    />
    <i *ngIf="!hasValue" (click)="openPanel()" class="bhi-clock"></i> <i *ngIf="hasValue" (click)="clearValue()" class="bhi-times"></i>
    <novo-overlay-template [parent]="element" position="above-below">
      <novo-time-picker
        inline="true"
        [analog]="analog"
        (onSelect)="setValue($event)"
        [ngModel]="value"
        [military]="military"
      ></novo-time-picker>
    </novo-overlay-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], military: [{
                type: Input
            }], maskOptions: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }, {
                type: Input
            }], analog: [{
                type: Input
            }], blurEvent: [{
                type: Output
            }], focusEvent: [{
                type: Output
            }], overlay: [{
                type: ViewChild,
                args: [NovoOverlayTemplateComponent]
            }], input: [{
                type: ViewChild,
                args: ['input']
            }] } });

// NG2
class NovoTimePickerModule {
}
NovoTimePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTimePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerModule, declarations: [NovoTimePickerElement, NovoTimePickerInputElement], imports: [CommonModule, FormsModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule, NovoListModule], exports: [NovoTimePickerElement, NovoTimePickerInputElement] });
NovoTimePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerModule, imports: [[CommonModule, FormsModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule, NovoListModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTimePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule, NovoListModule],
                    declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                    exports: [NovoTimePickerElement, NovoTimePickerInputElement],
                }]
        }] });

// NG
// Value accessor for the component (supports ngModel)
const DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateTimePickerInputElement),
    multi: true,
};
class NovoDateTimePickerInputElement {
    constructor(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        /** View -> model callback called when value changes */
        this._onChange = () => { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = () => { };
        this.military = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.changeEvent = new EventEmitter();
    }
    writeValue(value) {
        this.datePart = isDate(value) ? parse(value) : value;
        this.timePart = isDate(value) ? parse(value) : value;
        Promise.resolve(null).then(() => this._setTriggerValue(value));
    }
    updateDate(event) {
        this.datePart = event;
        this.checkParts();
    }
    updateTime(event) {
        this.timePart = event;
        this.checkParts();
    }
    handleBlur(event) {
        this.blurEvent.emit(event);
        this.changeEvent.emit(event);
    }
    handleFocus(event) {
        this.focusEvent.emit(event);
    }
    checkParts() {
        try {
            if (this.datePart instanceof Date && this.timePart instanceof Date) {
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else if (this.datePart instanceof Date) {
                this.timePart = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), 12, 0);
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else {
                this.dispatchOnChange(null);
            }
        }
        catch (err) {
            // Date not valid
            this.dispatchOnChange(null);
        }
    }
    registerOnChange(fn) {
        this._onChange = fn;
    }
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    dispatchOnChange(newValue) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this._setTriggerValue(newValue);
        }
    }
    _setTriggerValue(value) {
        this.value = value;
        this._changeDetectorRef.markForCheck();
    }
    setValue(event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    }
    setValueAndClose(event) {
        this.setValue(event);
    }
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    clearValue() {
        this.dispatchOnChange(null);
    }
    get hasValue() {
        return !Helpers.isEmpty(this.value);
    }
}
NovoDateTimePickerInputElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerInputElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoDateTimePickerInputElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDateTimePickerInputElement, selector: "novo-date-time-picker-input", inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", maskOptions: "maskOptions", military: "military", disabled: "disabled", format: "format", weekStart: "weekStart", disabledDateMessage: "disabledDateMessage" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent", changeEvent: "changeEvent" }, providers: [DATE_VALUE_ACCESSOR], ngImport: i0, template: `
    <novo-date-picker-input
      [ngModel]="datePart"
      (ngModelChange)="updateDate($event)"
      [start]="start"
      [end]="end"
      [disabledDateMessage]="disabledDateMessage"
      [maskOptions]="maskOptions"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
      [weekStart]="weekStart"
    ></novo-date-picker-input>
    <novo-time-picker-input
      [ngModel]="timePart"
      (ngModelChange)="updateTime($event)"
      [military]="military"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
    ></novo-time-picker-input>
  `, isInline: true, components: [{ type: NovoDatePickerInputElement, selector: "novo-date-picker-input", inputs: ["name", "start", "end", "placeholder", "maskOptions", "format", "textMaskEnabled", "allowInvalidDate", "disabled", "disabledDateMessage", "weekStart"], outputs: ["blurEvent", "focusEvent", "changeEvent"] }, { type: NovoTimePickerInputElement, selector: "novo-time-picker-input", inputs: ["name", "placeholder", "military", "maskOptions", "disabled", "analog"], outputs: ["blurEvent", "focusEvent"] }], directives: [{ type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerInputElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-date-time-picker-input',
                    providers: [DATE_VALUE_ACCESSOR],
                    template: `
    <novo-date-picker-input
      [ngModel]="datePart"
      (ngModelChange)="updateDate($event)"
      [start]="start"
      [end]="end"
      [disabledDateMessage]="disabledDateMessage"
      [maskOptions]="maskOptions"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
      [weekStart]="weekStart"
    ></novo-date-picker-input>
    <novo-time-picker-input
      [ngModel]="timePart"
      (ngModelChange)="updateTime($event)"
      [military]="military"
      (blurEvent)="handleBlur($event)"
      (focusEvent)="handleFocus($event)"
      [disabled]="disabled"
    ></novo-time-picker-input>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { name: [{
                type: Input
            }], start: [{
                type: Input
            }], end: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], maskOptions: [{
                type: Input
            }], military: [{
                type: Input
            }], disabled: [{
                type: Input
            }], format: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], disabledDateMessage: [{
                type: Input
            }], blurEvent: [{
                type: Output
            }], focusEvent: [{
                type: Output
            }], changeEvent: [{
                type: Output
            }] } });

// NG2
class NovoDateTimePickerModule {
}
NovoDateTimePickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoDateTimePickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerModule, declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement], imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule], exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement] });
NovoDateTimePickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerModule, imports: [[CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDateTimePickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, IMaskDirectiveModule, TextMaskModule, NovoOverlayModule],
                    declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                    exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                }]
        }] });

/**
 * Directive for a Material Design Accordion.
 */
class NovoAccordion extends CdkAccordion {
    constructor() {
        super(...arguments);
        this._hideToggle = false;
        /**
         * The display mode used for all expansion panels in the accordion. Currently two display
         * modes exist:
         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
         *     panel at a different elevation from the reset of the accordion.
         *  flat - no spacing is placed around expanded panels, showing all panels at the same
         *     elevation.
         */
        this.displayMode = 'default';
    }
    /** Whether the expansion indicator should be hidden. */
    get hideToggle() {
        return this._hideToggle;
    }
    set hideToggle(show) {
        this._hideToggle = coerceBooleanProperty(show);
    }
}
NovoAccordion.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoAccordion.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoAccordion, selector: "novo-accordion", inputs: { hideToggle: "hideToggle", displayMode: "displayMode" }, host: { classAttribute: "novo-accordion" }, exportAs: ["novoAccordion"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAccordion, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-accordion',
                    exportAs: 'novoAccordion',
                    host: {
                        class: 'novo-accordion',
                    },
                }]
        }], propDecorators: { hideToggle: [{
                type: Input
            }], displayMode: [{
                type: Input
            }] } });

/** Time and timing curve for expansion panel animations. */
const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
/** Animations used by the Material expansion panel. */
const novoExpansionAnimations = {
    /** Animation that rotates the indicator arrow. */
    indicatorRotate: trigger('indicatorRotate', [
        state('collapsed', style({ transform: 'rotate(0deg)' })),
        state('expanded', style({ transform: 'rotate(90deg)' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
    /** Animation that expands and collapses the panel header height. */
    expansionHeaderHeight: trigger('expansionHeight', [
        state('collapsed', style({
            height: '{{collapsedHeight}}',
        }), {
            params: { collapsedHeight: '48px' },
        }),
        state('expanded', style({
            height: '{{expandedHeight}}',
        }), {
            params: { expandedHeight: '56px' },
        }),
        transition('expanded <=> collapsed', group([query('@indicatorRotate', animateChild(), { optional: true }), animate(EXPANSION_PANEL_ANIMATION_TIMING)])),
    ]),
    /** Animation that expands and collapses the panel content. */
    bodyExpansion: trigger('bodyExpansion', [
        state('collapsed', style({ height: '0px', visibility: 'hidden' })),
        state('expanded', style({ height: '*', visibility: 'visible' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
};

/**
 * Expansion panel content that will be rendered lazily
 * after the panel is opened for the first time.
 */
class NovoExpansionPanelContent {
    constructor(_template) {
        this._template = _template;
    }
}
NovoExpansionPanelContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelContent, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoExpansionPanelContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoExpansionPanelContent, selector: "ng-template[matExpansionPanelContent]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelContent, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[matExpansionPanelContent]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

/** Counter for generating unique element ids. */
let uniqueId = 0;
/**
 * `<novo-expansion-panel>`
 *
 * This component can be used as a single element to show expandable content, or as one of
 * multiple children of an element with the NovoAccordion directive attached.
 */
class NovoExpansionPanel extends CdkAccordionItem {
    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);
        this._viewContainerRef = _viewContainerRef;
        this._hideToggle = false;
        this._padding = true;
        this.opened = new EventEmitter();
        this.closed = new EventEmitter();
        this.expandedChange = new EventEmitter();
        /** Stream that emits for changes in `@Input` properties. */
        this._inputChanges = new Subject();
        /** ID for the associated header element. Used for a11y labelling. */
        this._headerId = `novo-expansion-panel-header-${uniqueId++}`;
        this.accordion = accordion;
    }
    /** Whether the toggle indicator should be hidden. */
    get hideToggle() {
        return this._hideToggle;
    }
    set hideToggle(value) {
        this._hideToggle = coerceBooleanProperty(value);
    }
    get padding() {
        return this._padding;
    }
    set padding(value) {
        this._padding = coerceBooleanProperty(value);
    }
    /** Whether the expansion indicator should be hidden. */
    _getHideToggle() {
        if (this.accordion) {
            return this.accordion.hideToggle;
        }
        return this.hideToggle;
    }
    /** Determines whether the expansion panel should have spacing between it and its siblings. */
    _hasSpacing() {
        if (this.accordion) {
            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
        }
        return false;
    }
    /** Gets the expanded state string. */
    _getExpandedState() {
        return this.expanded ? 'expanded' : 'collapsed';
    }
    ngAfterContentInit() {
        if (this._lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened
                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))
                .subscribe(() => {
                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);
            });
        }
    }
    ngOnChanges(changes) {
        this._inputChanges.next(changes);
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this._inputChanges.complete();
    }
    _bodyAnimation(event) {
        const classList = event.element.classList;
        const cssClass = 'novo-expanded';
        const { phaseName, toState } = event;
        // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
        // order to prevent the cases where switching too early would cause the animation to jump.
        // Note that we do it directly on the DOM element to avoid the slight delay that comes
        // with doing it via change detection.
        if (phaseName === 'done' && toState === 'expanded') {
            classList.add(cssClass);
        }
        else if (phaseName === 'start' && toState === 'collapsed') {
            classList.remove(cssClass);
        }
    }
}
NovoExpansionPanel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanel, deps: [{ token: NovoAccordion, host: true, optional: true }, { token: i0.ChangeDetectorRef }, { token: i2$1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
NovoExpansionPanel.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoExpansionPanel, selector: "novo-expansion-panel", inputs: { hideToggle: "hideToggle", padding: "padding" }, outputs: { opened: "opened", closed: "closed", expandedChange: "expandedChange" }, host: { properties: { "class.novo-expanded": "expanded", "class.novo-expansion-panel-spacing": "_hasSpacing()", "class.novo-expansion-panel-padding": "padding" }, classAttribute: "novo-expansion-panel" }, queries: [{ propertyName: "_lazyContent", first: true, predicate: NovoExpansionPanelContent, descendants: true }], exportAs: ["novoExpansionPanel"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<ng-content select=\"novo-expansion-panel-header\"></ng-content>\n<div class=\"novo-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimation($event)\"\n     (@bodyExpansion.start)=\"_bodyAnimation($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"novo-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"novo-action-row\"></ng-content>\n</div>\n", styles: [".novo-expansion-panel{background:#ffffff;background:var(--background-bright, #ffffff);color:#3d464d;color:var(--text-main, #3d464d)}.novo-action-row{border-top-color:#3d464d;border-top-color:var(--border, #3d464d)}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:#3d464d;color:var(--text-main, #3d464d)}.novo-expansion-panel-header-description,.novo-expansion-indicator{border-color:#3d464d;border-color:var(--text-main, #3d464d)}.novo-expansion-panel-header[aria-disabled=true]{color:#9e9e9e;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description{color:inherit}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000000}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #ffffff}.novo-expansion-panel.novo-expanded[theme=gray],.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #9e9e9e}.novo-expansion-panel.novo-expanded[theme=offWhite],.novo-expansion-panel.novo-expanded[theme=bright]{border-top:3px solid #f7f7f7}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #dbdbdb}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=orange]{border-top:3px solid #ff6900}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #202945}.novo-expansion-panel.novo-expanded[theme=skyBlue]{border-top:3px solid #009bdf}.novo-expansion-panel.novo-expanded[theme=steel]{border-top:3px solid #5b6770}.novo-expansion-panel.novo-expanded[theme=metal]{border-top:3px solid #637893}.novo-expansion-panel.novo-expanded[theme=sand]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=silver]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=stone]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=ash]{border-top:3px solid #a0a0a0}.novo-expansion-panel.novo-expanded[theme=slate]{border-top:3px solid #707070}.novo-expansion-panel.novo-expanded[theme=onyx]{border-top:3px solid #526980}.novo-expansion-panel.novo-expanded[theme=charcoal]{border-top:3px solid #282828}.novo-expansion-panel.novo-expanded[theme=moonlight]{border-top:3px solid #1a242f}.novo-expansion-panel.novo-expanded[theme=midnight]{border-top:3px solid #202945}.novo-expansion-panel.novo-expanded[theme=darkness]{border-top:3px solid #161f27}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=info],.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=negative],.novo-expansion-panel.novo-expanded[theme=danger],.novo-expansion-panel.novo-expanded[theme=error]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=disabled]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f7f7f7}.novo-expansion-panel.novo-expanded[theme=backgroundDark]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=presentation]{border-top:3px solid #5b6770}.novo-expansion-panel.novo-expanded[theme=bullhorn]{border-top:3px solid #ff6900}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #3399dd}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #44bb77}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #aa6699}.novo-expansion-panel.novo-expanded[theme=contact],.novo-expansion-panel.novo-expanded[theme=clientcontact]{border-top:3px solid #ffaa44}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #662255}.novo-expansion-panel.novo-expanded[theme=job],.novo-expansion-panel.novo-expanded[theme=joborder]{border-top:3px solid #bb5566}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=jobCode],.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=invoiceStatement],.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=payableCharge],.novo-expansion-panel.novo-expanded[theme=user],.novo-expansion-panel.novo-expanded[theme=corporateUser],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=person]{border-top:3px solid #696d79}.novo-expansion-panel{box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f;box-sizing:content-box;display:block;transition:margin 225ms ease-in-out;margin:0 16px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-expansion-panel-spacing{margin:16px 4px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}\n"], directives: [{ type: i2.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], animations: [novoExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanel, decorators: [{
            type: Component,
            args: [{ selector: 'novo-expansion-panel', exportAs: 'novoExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [novoExpansionAnimations.bodyExpansion], host: {
                        class: 'novo-expansion-panel',
                        '[class.novo-expanded]': 'expanded',
                        '[class.novo-expansion-panel-spacing]': '_hasSpacing()',
                        '[class.novo-expansion-panel-padding]': 'padding',
                    }, template: "<ng-content select=\"novo-expansion-panel-header\"></ng-content>\n<div class=\"novo-expansion-panel-content\"\n     role=\"region\"\n     [@bodyExpansion]=\"_getExpandedState()\"\n     (@bodyExpansion.done)=\"_bodyAnimation($event)\"\n     (@bodyExpansion.start)=\"_bodyAnimation($event)\"\n     [attr.aria-labelledby]=\"_headerId\"\n     [id]=\"id\"\n     #body>\n  <div class=\"novo-expansion-panel-body\">\n    <ng-content></ng-content>\n    <ng-template [cdkPortalOutlet]=\"_portal\"></ng-template>\n  </div>\n  <ng-content select=\"novo-action-row\"></ng-content>\n</div>\n", styles: [".novo-expansion-panel{background:#ffffff;background:var(--background-bright, #ffffff);color:#3d464d;color:var(--text-main, #3d464d)}.novo-action-row{border-top-color:#3d464d;border-top-color:var(--border, #3d464d)}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:#3d464d;color:var(--text-main, #3d464d)}.novo-expansion-panel-header-description,.novo-expansion-indicator{border-color:#3d464d;border-color:var(--text-main, #3d464d)}.novo-expansion-panel-header[aria-disabled=true]{color:#9e9e9e;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description{color:inherit}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000000}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #ffffff}.novo-expansion-panel.novo-expanded[theme=gray],.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #9e9e9e}.novo-expansion-panel.novo-expanded[theme=offWhite],.novo-expansion-panel.novo-expanded[theme=bright]{border-top:3px solid #f7f7f7}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #dbdbdb}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=orange]{border-top:3px solid #ff6900}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #202945}.novo-expansion-panel.novo-expanded[theme=skyBlue]{border-top:3px solid #009bdf}.novo-expansion-panel.novo-expanded[theme=steel]{border-top:3px solid #5b6770}.novo-expansion-panel.novo-expanded[theme=metal]{border-top:3px solid #637893}.novo-expansion-panel.novo-expanded[theme=sand]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=silver]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=stone]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=ash]{border-top:3px solid #a0a0a0}.novo-expansion-panel.novo-expanded[theme=slate]{border-top:3px solid #707070}.novo-expansion-panel.novo-expanded[theme=onyx]{border-top:3px solid #526980}.novo-expansion-panel.novo-expanded[theme=charcoal]{border-top:3px solid #282828}.novo-expansion-panel.novo-expanded[theme=moonlight]{border-top:3px solid #1a242f}.novo-expansion-panel.novo-expanded[theme=midnight]{border-top:3px solid #202945}.novo-expansion-panel.novo-expanded[theme=darkness]{border-top:3px solid #161f27}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=info],.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=negative],.novo-expansion-panel.novo-expanded[theme=danger],.novo-expansion-panel.novo-expanded[theme=error]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=disabled]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f7f7f7}.novo-expansion-panel.novo-expanded[theme=backgroundDark]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=presentation]{border-top:3px solid #5b6770}.novo-expansion-panel.novo-expanded[theme=bullhorn]{border-top:3px solid #ff6900}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #3399dd}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #44bb77}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #aa6699}.novo-expansion-panel.novo-expanded[theme=contact],.novo-expansion-panel.novo-expanded[theme=clientcontact]{border-top:3px solid #ffaa44}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #662255}.novo-expansion-panel.novo-expanded[theme=job],.novo-expansion-panel.novo-expanded[theme=joborder]{border-top:3px solid #bb5566}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=jobCode],.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=invoiceStatement],.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=payableCharge],.novo-expansion-panel.novo-expanded[theme=user],.novo-expansion-panel.novo-expanded[theme=corporateUser],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=person]{border-top:3px solid #696d79}.novo-expansion-panel{box-shadow:0 3px 1px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f;box-sizing:content-box;display:block;transition:margin 225ms ease-in-out;margin:0 16px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-expansion-panel-spacing{margin:16px 4px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoAccordion, decorators: [{
                    type: Optional
                }, {
                    type: Host
                }] }, { type: i0.ChangeDetectorRef }, { type: i2$1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }]; }, propDecorators: { hideToggle: [{
                type: Input
            }], padding: [{
                type: Input
            }], opened: [{
                type: Output
            }], closed: [{
                type: Output
            }], expandedChange: [{
                type: Output
            }], _lazyContent: [{
                type: ContentChild,
                args: [NovoExpansionPanelContent]
            }] } });
class NovoExpansionPanelActionRow {
}
NovoExpansionPanelActionRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoExpansionPanelActionRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoExpansionPanelActionRow, selector: "novo-action-row", host: { classAttribute: "novo-action-row" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelActionRow, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-action-row',
                    host: {
                        class: 'novo-action-row',
                    },
                }]
        }] });

/**
 * `<novo-expansion-panel-header>`
 *
 * This component corresponds to the header element of an `<novo-expansion-panel>`.
 */
class NovoExpansionPanelHeader {
    constructor(panel, _element, 
    // private _focusMonitor: FocusMonitor,
    _changeDetectorRef) {
        this.panel = panel;
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        // Since the toggle state depends on an @Input on the panel, we
        // need to  subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter((changes) => !!(changes.hideToggle || changes.disabled)))).subscribe(() => this._changeDetectorRef.markForCheck());
        // _focusMonitor.monitor(_element.nativeElement);
    }
    /** Toggles the expanded state of the panel. */
    _toggle() {
        this.panel.toggle();
    }
    /** Gets whether the panel is expanded. */
    _isExpanded() {
        return this.panel.expanded;
    }
    /** Gets the expanded state string of the panel. */
    _getExpandedState() {
        return this.panel._getExpandedState();
    }
    /** Gets the panel id. */
    _getPanelId() {
        return this.panel.id;
    }
    /** Gets whether the expand indicator should be shown. */
    _showToggle() {
        return !this.panel.hideToggle && !this.panel.disabled;
    }
    /** Handle keydown event calling to toggle() if appropriate. */
    _keydown(event) {
        switch (event.key) {
            // Toggle for space and enter keys.
            case " " /* Space */:
            case "Enter" /* Enter */:
                event.preventDefault();
                this._toggle();
                break;
            default:
                return;
        }
    }
    ngOnDestroy() {
        this._parentChangeSubscription.unsubscribe();
        // this._focusMonitor.stopMonitoring(this._element.nativeElement);
    }
}
NovoExpansionPanelHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelHeader, deps: [{ token: NovoExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoExpansionPanelHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoExpansionPanelHeader, selector: "novo-expansion-panel-header", inputs: { expandedHeight: "expandedHeight", collapsedHeight: "collapsedHeight" }, host: { attributes: { "role": "button" }, listeners: { "click": "_toggle()", "keydown": "_keydown($event)" }, properties: { "attr.id": "panel._headerId", "attr.tabindex": "panel.disabled ? -1 : 0", "attr.aria-controls": "_getPanelId()", "attr.aria-expanded": "_isExpanded()", "attr.aria-disabled": "panel.disabled", "class.novo-expanded": "_isExpanded()", "@expansionHeight": "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }" }, classAttribute: "novo-expansion-panel-header" }, ngImport: i0, template: "<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"novo-expansion-indicator\" size=\"lg\"></span>\n<span class=\"novo-content\">\n  <ng-content select=\"novo-panel-title\"></ng-content>\n  <ng-content select=\"novo-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n", styles: [".novo-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:none}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-title,.novo-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center;gap:1rem}[dir=rtl] .novo-expansion-panel-header-title,[dir=rtl] .novo-expansion-panel-header-description{margin-right:0;margin-left:16px}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator{margin-right:10px}.novo-expansion-indicator:after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(-45deg);vertical-align:middle}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelHeader, decorators: [{
            type: Component,
            args: [{ selector: 'novo-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight], host: {
                        class: 'novo-expansion-panel-header',
                        role: 'button',
                        '[attr.id]': 'panel._headerId',
                        '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                        '[attr.aria-controls]': '_getPanelId()',
                        '[attr.aria-expanded]': '_isExpanded()',
                        '[attr.aria-disabled]': 'panel.disabled',
                        '[class.novo-expanded]': '_isExpanded()',
                        '(click)': '_toggle()',
                        '(keydown)': '_keydown($event)',
                        '[@expansionHeight]': `{
        value: _getExpandedState(),
        params: {
          collapsedHeight: collapsedHeight,
          expandedHeight: expandedHeight
        }
    }`,
                    }, template: "<span [@indicatorRotate]=\"_getExpandedState()\" *ngIf=\"_showToggle()\"\n      class=\"novo-expansion-indicator\" size=\"lg\"></span>\n<span class=\"novo-content\">\n  <ng-content select=\"novo-panel-title\"></ng-content>\n  <ng-content select=\"novo-panel-description\"></ng-content>\n  <ng-content></ng-content>\n</span>\n", styles: [".novo-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:none}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-title,.novo-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px;align-items:center;gap:1rem}[dir=rtl] .novo-expansion-panel-header-title,[dir=rtl] .novo-expansion-panel-header-description{margin-right:0;margin-left:16px}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator{margin-right:10px}.novo-expansion-indicator:after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(-45deg);vertical-align:middle}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoExpansionPanel, decorators: [{
                    type: Host
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { expandedHeight: [{
                type: Input
            }], collapsedHeight: [{
                type: Input
            }] } });
/**
 * `<novo-panel-description>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
class NovoExpansionPanelDescription {
}
NovoExpansionPanelDescription.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoExpansionPanelDescription.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoExpansionPanelDescription, selector: "novo-panel-description", host: { classAttribute: "novo-expansion-panel-header-description" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelDescription, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-panel-description',
                    host: {
                        class: 'novo-expansion-panel-header-description',
                    },
                }]
        }] });
/**
 * `<novo-panel-title>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
class NovoExpansionPanelTitle {
}
NovoExpansionPanelTitle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoExpansionPanelTitle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoExpansionPanelTitle, selector: "novo-panel-title", host: { classAttribute: "novo-expansion-panel-header-title" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionPanelTitle, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-panel-title',
                    host: {
                        class: 'novo-expansion-panel-header-title',
                    },
                }]
        }] });

class NovoExpansionModule {
}
NovoExpansionModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoExpansionModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionModule, declarations: [NovoAccordion,
        NovoExpansionPanel,
        NovoExpansionPanelActionRow,
        NovoExpansionPanelHeader,
        NovoExpansionPanelTitle,
        NovoExpansionPanelDescription,
        NovoExpansionPanelContent], imports: [CommonModule, CdkAccordionModule, PortalModule], exports: [NovoAccordion,
        NovoExpansionPanel,
        NovoExpansionPanelActionRow,
        NovoExpansionPanelHeader,
        NovoExpansionPanelTitle,
        NovoExpansionPanelDescription,
        NovoExpansionPanelContent] });
NovoExpansionModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionModule, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoExpansionModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, CdkAccordionModule, PortalModule],
                    exports: [
                        NovoAccordion,
                        NovoExpansionPanel,
                        NovoExpansionPanelActionRow,
                        NovoExpansionPanelHeader,
                        NovoExpansionPanelTitle,
                        NovoExpansionPanelDescription,
                        NovoExpansionPanelContent,
                    ],
                    declarations: [
                        NovoAccordion,
                        NovoExpansionPanel,
                        NovoExpansionPanelActionRow,
                        NovoExpansionPanelHeader,
                        NovoExpansionPanelTitle,
                        NovoExpansionPanelDescription,
                        NovoExpansionPanelContent,
                    ],
                }]
        }] });

class NovoModalParams {
}
class NovoModalRef {
    constructor(component, params, overlayRef) {
        this.component = component;
        this.params = params;
        this.overlayRef = overlayRef;
        this._beforeClose = new Subject();
        this._afterClosed = new Subject();
        this.isClosed = false;
    }
    // Gets a promise that is resolved when the dialog is closed.
    get onClosed() {
        return this._afterClosed.toPromise();
    }
    afterClosed() {
        return this._afterClosed.asObservable();
    }
    beforeClose() {
        return this._beforeClose.asObservable();
    }
    close(result) {
        // Listen for animation 'start' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'start'), take(1))
            .subscribe(() => {
            this._beforeClose.next(result);
            this._beforeClose.complete();
            this.overlayRef.detachBackdrop();
        });
        // Listen for animation 'done' events
        this.componentInstance.animationStateChanged
            .pipe(filter((event) => event.phaseName === 'done' && event.toState === 'leave'), take(1))
            .subscribe(() => {
            this.isClosed = true;
            this.overlayRef.dispose();
            this._afterClosed.next(result);
            this._afterClosed.complete();
            // Make sure to also clear the reference to the
            // component instance to avoid memory leaks
            this.componentInstance = null;
        });
        // Start exit animation
        this.componentInstance.startExitAnimation();
    }
}

const zoomInOut = trigger('zoomInOut', [
    transition('void => *', [style({ transform: 'scale3d(.3, .3, .3)' }), animate(50)]),
    transition('* => void', [animate(50, style({ transform: 'scale3d(.0, .0, .0)' }))]),
]);

class NovoModalContainerComponent {
    constructor(injector, modalRef) {
        this.injector = injector;
        this.modalRef = modalRef;
        this.animationStateChanged = new EventEmitter();
        this.animationState = 'enter';
        this.initTimestamp = Date.now();
        this.id = `modal-container-${this.initTimestamp}`;
        this.component = new ComponentPortal(modalRef.component, null, injector);
    }
    onAnimationStart(event) {
        this.animationStateChanged.emit(event);
    }
    onAnimationDone(event) {
        this.animationStateChanged.emit(event);
    }
    startExitAnimation() {
        this.animationState = 'leave';
    }
}
NovoModalContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalContainerComponent, deps: [{ token: i0.Injector }, { token: NovoModalRef }], target: i0.ɵɵFactoryTarget.Component });
NovoModalContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoModalContainerComponent, selector: "novo-modal-container", outputs: { animationStateChanged: "animationStateChanged" }, host: { properties: { "id": "this.id" } }, ngImport: i0, template: "<div class=\"modal-container\"\n     [@zoomInOut]=\"animationState\"\n     (@zoomInOut.start)=\"onAnimationStart($event)\"\n     (@zoomInOut.done)=\"onAnimationDone($event)\">\n  <ng-template [cdkPortalOutlet]=\"component\"></ng-template>\n</div>", styles: [":host{background:rgba(0,0,0,.25)}:host .modal-container{z-index:z(modal);position:fixed;display:flex;align-items:center;justify-content:center;top:0;bottom:0;left:0;right:0}\n"], directives: [{ type: i2.CdkPortalOutlet, selector: "[cdkPortalOutlet]", inputs: ["cdkPortalOutlet"], outputs: ["attached"], exportAs: ["cdkPortalOutlet"] }], animations: [zoomInOut] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-modal-container', animations: [zoomInOut], template: "<div class=\"modal-container\"\n     [@zoomInOut]=\"animationState\"\n     (@zoomInOut.start)=\"onAnimationStart($event)\"\n     (@zoomInOut.done)=\"onAnimationDone($event)\">\n  <ng-template [cdkPortalOutlet]=\"component\"></ng-template>\n</div>", styles: [":host{background:rgba(0,0,0,.25)}:host .modal-container{z-index:z(modal);position:fixed;display:flex;align-items:center;justify-content:center;top:0;bottom:0;left:0;right:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: NovoModalRef }]; }, propDecorators: { animationStateChanged: [{
                type: Output
            }], id: [{
                type: HostBinding,
                args: ['id']
            }] } });

// NG2
const DEFAULT_CONFIG = {
    hasBackdrop: true,
    backdropClass: 'modal-overlay-backdrop',
    panelClass: 'modal-overlay-panel',
};
class NovoModalService {
    constructor(injector, overlay) {
        this.injector = injector;
        this.overlay = overlay;
    }
    set parentViewContainer(view) {
        console.warn('parentViewContainer is deprecated');
        this._parentViewContainer = view;
    }
    open(component, params = {}) {
        // Override default configuration
        const modalConfig = DEFAULT_CONFIG;
        // Returns an OverlayRef which is a PortalHost
        const overlayRef = this.createOverlay(modalConfig);
        // Instantiate remote control
        const modalRef = new NovoModalRef(component, params, overlayRef);
        const overlayComponent = this.attachModalContainer(NovoModalContainerComponent, overlayRef, modalConfig, modalRef);
        // Pass the instance of the overlay component to the remote control
        modalRef.componentInstance = overlayComponent;
        overlayRef.backdropClick().subscribe(() => modalRef.close());
        return modalRef;
    }
    createOverlay(config) {
        const overlayConfig = this.getOverlayConfig(config);
        return this.overlay.create(overlayConfig);
    }
    attachModalContainer(component, overlayRef, config, modalRef) {
        const injector = this.createInjector(config, modalRef);
        const containerPortal = new ComponentPortal(component, null, injector);
        const containerRef = overlayRef.attach(containerPortal);
        return containerRef.instance;
    }
    createInjector(config, modalRef) {
        const injectionTokens = new WeakMap();
        injectionTokens.set(NovoModalRef, modalRef);
        // Support backwards compatability
        injectionTokens.set(NovoModalParams, modalRef.params);
        return new PortalInjector(this.injector, injectionTokens);
    }
    getOverlayConfig(config) {
        const positionStrategy = this.overlay.position().global().centerHorizontally().centerVertically();
        const overlayConfig = new OverlayConfig({
            positionStrategy,
            hasBackdrop: config.hasBackdrop,
            backdropClass: config.backdropClass,
            panelClass: config.panelClass,
        });
        return overlayConfig;
    }
}
NovoModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalService, deps: [{ token: i0.Injector }, { token: i1$1.Overlay }], target: i0.ɵɵFactoryTarget.Injectable });
NovoModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$1.Overlay }]; } });

// NG2
class NovoModalElement {
    constructor(modalRef) {
        this.modalRef = modalRef;
    }
}
NovoModalElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalElement, deps: [{ token: NovoModalRef }], target: i0.ɵɵFactoryTarget.Component });
NovoModalElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoModalElement, selector: "novo-modal", host: { classAttribute: "novo-modal" }, ngImport: i0, template: `
    <ng-content select="header,novo-header,novo-card-header"></ng-content>
    <ng-content select="section,novo-card-content"></ng-content>
    <footer class="novo-modal-footer"><ng-content select="button,novo-button"></ng-content></footer>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-modal',
                    template: `
    <ng-content select="header,novo-header,novo-card-header"></ng-content>
    <ng-content select="section,novo-card-content"></ng-content>
    <footer class="novo-modal-footer"><ng-content select="button,novo-button"></ng-content></footer>
  `,
                    host: {
                        class: 'novo-modal',
                    },
                }]
        }], ctorParameters: function () { return [{ type: NovoModalRef }]; } });
class NovoModalNotificationElement {
    constructor(modalRef) {
        this.modalRef = modalRef;
        this.cancel = new EventEmitter();
        this.modalRef = modalRef;
    }
    close() {
        this.cancel.emit();
        this.modalRef.close();
    }
    ngOnInit() {
        switch (this.type) {
            case 'success':
                this.iconType = 'bhi-check';
                break;
            case 'warning':
                this.iconType = 'bhi-caution-o';
                break;
            case 'error':
                this.iconType = 'bhi-caution-o';
                break;
            case 'custom':
                this.iconType = `bhi-${this.icon}`;
                break;
            default:
                break;
        }
    }
}
NovoModalNotificationElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalNotificationElement, deps: [{ token: NovoModalRef }], target: i0.ɵɵFactoryTarget.Component });
NovoModalNotificationElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoModalNotificationElement, selector: "novo-notification", inputs: { type: "type", icon: "icon" }, outputs: { cancel: "cancel" }, host: { classAttribute: "novo-notification" }, ngImport: i0, template: `
    <novo-button class="modal-close" theme="icon" icon="x" (click)="close()"></novo-button>
    <header class="novo-notification-header"><ng-content select="label,novo-label"></ng-content></header>
    <section class="novo-notification-body notification-body">
      <i class="indicator" [ngClass]="iconType" *ngIf="iconType"></i>
      <ng-content select="h1"></ng-content>
      <ng-content select="h2"></ng-content>
      <ng-content select="p"></ng-content>
    </section>
    <footer class="novo-notification-footer"><ng-content select="button,novo-button"></ng-content></footer>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalNotificationElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-notification',
                    template: `
    <novo-button class="modal-close" theme="icon" icon="x" (click)="close()"></novo-button>
    <header class="novo-notification-header"><ng-content select="label,novo-label"></ng-content></header>
    <section class="novo-notification-body notification-body">
      <i class="indicator" [ngClass]="iconType" *ngIf="iconType"></i>
      <ng-content select="h1"></ng-content>
      <ng-content select="h2"></ng-content>
      <ng-content select="p"></ng-content>
    </section>
    <footer class="novo-notification-footer"><ng-content select="button,novo-button"></ng-content></footer>
  `,
                    host: {
                        class: 'novo-notification',
                    },
                }]
        }], ctorParameters: function () { return [{ type: NovoModalRef }]; }, propDecorators: { type: [{
                type: Input
            }], icon: [{
                type: Input
            }], cancel: [{
                type: Output
            }] } });

// NG2
class ControlConfirmModal {
    constructor(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    close(result) {
        this.modalRef.close(result);
    }
}
ControlConfirmModal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ControlConfirmModal, deps: [{ token: NovoModalRef }, { token: NovoModalParams }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
ControlConfirmModal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ControlConfirmModal, selector: "control-confirm-modal", ngImport: i0, template: `
    <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
      <h1>{{ labels.confirmChangesModalMessage }}</h1>
      <h2 *ngIf="!params['message']">
        <label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class="bhi-arrow-right"></i> {{ params['newValue'] }}
      </h2>
      <h2 *ngIf="params['message']">{{ params['message'] }}</h2>
      <novo-button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">
        {{ labels.cancel }}
      </novo-button>
      <novo-button
        theme="primary"
        icon="check"
        (click)="close(true)"
        autofocus
        [attr.data-automation-id]="'field-interaction-modal-save-' + params['key']"
      >
        {{ labels.save }}
      </novo-button>
    </novo-notification>
  `, isInline: true, components: [{ type: NovoModalNotificationElement, selector: "novo-notification", inputs: ["type", "icon"], outputs: ["cancel"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ControlConfirmModal, decorators: [{
            type: Component,
            args: [{
                    selector: 'control-confirm-modal',
                    template: `
    <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
      <h1>{{ labels.confirmChangesModalMessage }}</h1>
      <h2 *ngIf="!params['message']">
        <label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class="bhi-arrow-right"></i> {{ params['newValue'] }}
      </h2>
      <h2 *ngIf="params['message']">{{ params['message'] }}</h2>
      <novo-button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">
        {{ labels.cancel }}
      </novo-button>
      <novo-button
        theme="primary"
        icon="check"
        (click)="close(true)"
        autofocus
        [attr.data-automation-id]="'field-interaction-modal-save-' + params['key']"
      >
        {{ labels.save }}
      </novo-button>
    </novo-notification>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoModalRef }, { type: NovoModalParams }, { type: NovoLabelService }]; } });
class ControlPromptModal {
    constructor(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    close(result) {
        this.modalRef.close(result);
    }
}
ControlPromptModal.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ControlPromptModal, deps: [{ token: NovoModalRef }, { token: NovoModalParams }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
ControlPromptModal.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ControlPromptModal, selector: "control-prompt-modal", ngImport: i0, template: `
    <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
      <h1>{{ labels.promptModalMessage }}</h1>
      <p *ngFor="let change of params['changes']">{{ change }}</p>
      <novo-button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">
        {{ labels.cancel }}
      </novo-button>
      <novo-button
        theme="primary"
        icon="check"
        (click)="close(true)"
        autofocus
        [attr.data-automation-id]="'field-interaction-modal-yes-' + params['key']"
      >
        {{ labels.yes }}
      </novo-button>
    </novo-notification>
  `, isInline: true, components: [{ type: NovoModalNotificationElement, selector: "novo-notification", inputs: ["type", "icon"], outputs: ["cancel"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ControlPromptModal, decorators: [{
            type: Component,
            args: [{
                    selector: 'control-prompt-modal',
                    template: `
    <novo-notification type="warning" [attr.data-automation-id]="'field-interaction-modal-' + params['key']">
      <h1>{{ labels.promptModalMessage }}</h1>
      <p *ngFor="let change of params['changes']">{{ change }}</p>
      <novo-button theme="standard" (click)="close(false)" [attr.data-automation-id]="'field-interaction-modal-cancel' + params['key']">
        {{ labels.cancel }}
      </novo-button>
      <novo-button
        theme="primary"
        icon="check"
        (click)="close(true)"
        autofocus
        [attr.data-automation-id]="'field-interaction-modal-yes-' + params['key']"
      >
        {{ labels.yes }}
      </novo-button>
    </novo-notification>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoModalRef }, { type: NovoModalParams }, { type: NovoLabelService }]; } });

// NG2
class CustomHttpImpl {
    constructor(http) {
        this.http = http;
        this.mapFn = (x) => x;
    }
    get(url, options) {
        this.url = url;
        this.options = options;
        return this;
    }
    map(mapFn) {
        this.mapFn = mapFn;
        return this;
    }
    subscribe(resolve, reject) {
        return this.http.get(this.url, this.options).pipe(map(this.mapFn)).subscribe(resolve, reject);
    }
}
class FieldInteractionApi {
    constructor(toaster, modalService, formUtils, http, labels) {
        this.toaster = toaster;
        this.modalService = modalService;
        this.formUtils = formUtils;
        this.http = http;
        this.labels = labels;
        this._isInvokedOnInit = false;
        this.getOptionsConfig = (args, mapper, filteredOptionsCreator, pickerConfigFormat) => {
            if (filteredOptionsCreator || 'optionsUrl' in args || 'optionsUrlBuilder' in args || 'optionsPromise' in args) {
                const format = ('format' in args && args.format) || pickerConfigFormat;
                return {
                    options: this.createOptionsFunction(args, mapper, filteredOptionsCreator),
                    ...('emptyPickerMessage' in args && { emptyPickerMessage: args.emptyPickerMessage }),
                    ...(format && { format }),
                };
            }
            else if ('options' in args && Array.isArray(args.options)) {
                return {
                    options: [...args.options],
                };
            }
            else {
                return undefined;
            }
        };
        this.createOptionsFunction = (config, mapper, filteredOptionsCreator) => (query, page) => {
            if ('optionsPromise' in config && config.optionsPromise) {
                return config.optionsPromise(query, new CustomHttpImpl(this.http), page);
            }
            else if (('optionsUrlBuilder' in config && config.optionsUrlBuilder) || ('optionsUrl' in config && config.optionsUrl)) {
                return new Promise((resolve, reject) => {
                    const url = 'optionsUrlBuilder' in config ? config.optionsUrlBuilder(query) : `${config.optionsUrl}?filter=${query || ''}`;
                    this.http
                        .get(url)
                        .pipe(map((results) => {
                        if (mapper) {
                            return results.map(mapper);
                        }
                        return results;
                    }))
                        .subscribe(resolve, reject);
                });
            }
            else if (filteredOptionsCreator) {
                if ('where' in config) {
                    return filteredOptionsCreator(config.where)(query, page);
                }
                else {
                    return filteredOptionsCreator()(query, page);
                }
            }
        };
    }
    get associations() {
        return this.form.hasOwnProperty('associations') ? this.form.associations : {};
    }
    get currentEntity() {
        return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
    }
    get currentEntityId() {
        return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
    }
    get isEdit() {
        return this.form.hasOwnProperty('edit') ? this.form.edit : false;
    }
    get isAdd() {
        return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
    }
    set globals(globals) {
        this._globals = globals;
    }
    get globals() {
        return this._globals;
    }
    set currentKey(key) {
        this._currentKey = key;
    }
    get currentKey() {
        return this._currentKey;
    }
    set isInvokedOnInit(isOnInit) {
        this._isInvokedOnInit = isOnInit;
    }
    get isInvokedOnInit() {
        return this._isInvokedOnInit;
    }
    isActiveControlValid() {
        return !!this.getValue(this.currentKey);
    }
    getActiveControl() {
        return this.getControl(this.currentKey);
    }
    getActiveKey() {
        return this.currentKey;
    }
    getActiveValue() {
        return this.getValue(this.currentKey);
    }
    getActiveInitialValue() {
        return this.getInitialValue(this.currentKey);
    }
    getFieldSet(key, otherForm) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        const form = otherForm || this.form;
        const fieldSet = form.fieldsets.find((fs) => fs.key && fs.key.toLowerCase() === key.toLowerCase());
        if (!fieldSet) {
            console.error('[FieldInteractionAPI] - could not find a fieldset in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return fieldSet;
    }
    getControl(key, otherForm) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        const form = otherForm || this.form;
        const control = form.controls[key];
        if (!control) {
            console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return control;
    }
    getFormGroupArray(key, otherForm) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        const form = otherForm || this.form;
        const formArray = form.controls[key];
        if (!formArray || !formArray.controls) {
            console.error('[FieldInteractionAPI] - could not find a form array in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return formArray.controls;
    }
    getValue(key, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control) {
            return control.value;
        }
        return null;
    }
    getRawValue(key, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control) {
            return control.rawValue;
        }
        return null;
    }
    getInitialValue(key, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control) {
            return control.initialValue;
        }
        return null;
    }
    setValue(key, value, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value }, otherForm);
        }
    }
    patchValue(key, value, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value }, otherForm);
        }
    }
    setReadOnly(key, isReadOnly, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.setReadOnly(isReadOnly);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: isReadOnly }, otherForm);
        }
    }
    setRequired(key, required, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.setRequired(required);
            this.triggerEvent({ controlKey: key, prop: 'required', value: required }, otherForm);
        }
    }
    setDescription(key, description, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.description = description;
            this.triggerEvent({ controlKey: key, prop: 'description', value: description }, otherForm);
        }
    }
    highlight(key, isHighlighted, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.highlighted = isHighlighted;
            this.triggerEvent({ controlKey: key, prop: 'highlight', value: isHighlighted }, otherForm);
        }
    }
    hide(key, clearValue = true, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.hide(clearValue);
            this.disable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: true }, otherForm);
        }
        return control;
    }
    show(key, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.show();
            this.enable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: false }, otherForm);
        }
    }
    hideFieldSetHeader(key) {
        const fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = true;
        }
    }
    showFieldSetHeader(key) {
        const fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = false;
        }
    }
    disable(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.disable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: true }, otherForm);
        }
    }
    enable(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.enable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: false }, otherForm);
        }
    }
    markAsInvalid(key, validationMessage, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control) {
            if (control && !control.restrictFieldInteractions) {
                control.markAsInvalid(validationMessage);
                this.triggerEvent({ controlKey: key, prop: 'errors', value: validationMessage }, otherForm);
            }
        }
    }
    markAsValid(key, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control) {
            if (control && !control.restrictFieldInteractions) {
                control.markAsValid();
                this.triggerEvent({ controlKey: key, prop: 'errors', value: null }, otherForm);
            }
        }
    }
    markAsDirty(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.markAsDirty(options);
        }
    }
    markAsPending(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPending(options);
        }
    }
    markAsPristine(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPristine(options);
        }
    }
    markAsTouched(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.markAsTouched(options);
        }
    }
    markAsUntouched(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.markAsUntouched(options);
        }
    }
    updateValueAndValidity(key, options, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.updateValueAndValidity(options);
        }
    }
    displayToast(toastConfig) {
        if (this.toaster) {
            this.toaster.alert(toastConfig);
        }
    }
    displayTip(key, tip, icon, allowDismiss, sanitize, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.tipWell = {
                tip,
                icon,
                button: allowDismiss,
                sanitize: sanitize !== false, // defaults to true when undefined
            };
            this.triggerEvent({ controlKey: key, prop: 'tipWell', value: tip }, otherForm);
        }
    }
    clearTip(key, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.tipWell = null;
            this.triggerEvent({ controlKey: key, prop: 'tipWell', value: null }, otherForm);
        }
    }
    setTooltip(key, tooltip, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control.tooltip = tooltip;
            if (tooltip.length >= 40 && tooltip.length <= 400) {
                control.tooltipSize = 'large';
                control.tooltipPreline = true;
            }
            else if (tooltip.length > 400) {
                control.tooltipSize = 'extra-large';
            }
            this.triggerEvent({ controlKey: key, prop: 'tooltip', value: tooltip }, otherForm);
        }
    }
    confirmChanges(key, message) {
        const history = this.getProperty(key, 'valueHistory');
        const oldValue = history[history.length - 2];
        const newValue = this.getValue(key);
        const label = this.getProperty(key, 'label');
        document.activeElement.blur();
        return this.modalService.open(ControlConfirmModal, { oldValue, newValue, label, message, key }).onClosed.then((result) => {
            if (!result) {
                this.setValue(key, oldValue, { emitEvent: false });
            }
            return true;
        });
    }
    promptUser(key, changes) {
        document.activeElement.blur();
        return this.modalService.open(ControlPromptModal, { changes, key }).onClosed;
    }
    setProperty(key, prop, value, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            control[prop] = value;
            this.triggerEvent({ controlKey: key, prop, value }, otherForm);
        }
    }
    getProperty(key, prop, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            return control[prop];
        }
        return null;
    }
    isValueEmpty(key) {
        const value = this.getValue(key);
        return Helpers.isEmpty(value);
    }
    isValueBlank(key) {
        const value = this.getValue(key);
        return Helpers.isBlank(value);
    }
    hasField(key, otherForm) {
        const form = otherForm || this.form;
        return !!form.controls[key];
    }
    addStaticOption(key, newOption, otherForm) {
        const control = this.getControl(key, otherForm);
        let optionToAdd = newOption;
        let isUnique = true;
        if (control && !control.restrictFieldInteractions) {
            let currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                const config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        if (currentOptions[0].value && !optionToAdd.value) {
                            optionToAdd = { value: newOption, label: newOption };
                        }
                        config.options = [...currentOptions, optionToAdd];
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                if (currentOptions[0].value && !optionToAdd.value) {
                    optionToAdd = { value: newOption, label: newOption };
                }
                // Ensure duplicate values are not added
                currentOptions.forEach((option) => {
                    if ((option.value && option.value === optionToAdd.value) || option === optionToAdd) {
                        isUnique = false;
                    }
                });
                if (isUnique) {
                    this.setProperty(key, 'options', [...currentOptions, optionToAdd]);
                }
            }
            if (isUnique) {
                this.triggerEvent({ controlKey: key, prop: 'options', value: [...currentOptions, optionToAdd] }, otherForm);
            }
        }
    }
    removeStaticOption(key, optionToRemove, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            let currentOptions = this.getProperty(key, 'options', otherForm);
            if (!currentOptions || !currentOptions.length) {
                const config = this.getProperty(key, 'config', otherForm);
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        let index = -1;
                        currentOptions.forEach((opt, i) => {
                            if (opt.value || opt.label) {
                                if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                    index = i;
                                }
                            }
                            else {
                                if (opt === optionToRemove) {
                                    index = i;
                                }
                            }
                        });
                        if (index !== -1) {
                            currentOptions.splice(index, 1);
                        }
                        config.options = [...currentOptions];
                        this.setProperty(key, 'config', config, otherForm);
                    }
                }
            }
            else {
                let index = -1;
                currentOptions.forEach((opt, i) => {
                    if (opt.value || opt.label) {
                        if (opt.value === optionToRemove || opt.label === optionToRemove) {
                            index = i;
                        }
                    }
                    else {
                        if (opt === optionToRemove) {
                            index = i;
                        }
                    }
                });
                if (index !== -1) {
                    currentOptions.splice(index, 1);
                }
                this.setProperty(key, 'options', [...currentOptions], otherForm);
            }
            this.triggerEvent({ controlKey: key, prop: 'options', value: control.options }, otherForm);
        }
    }
    modifyPickerConfig(key, config, mapper) {
        // call another method to avoid a breaking change but still enable stricter types
        this.mutatePickerConfig(key, config, mapper);
    }
    mutatePickerConfig(key, args, mapper, otherForm) {
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            const { minSearchLength, enableInfiniteScroll, filteredOptionsCreator, format, getLabels, emptyPickerMessage } = control.config;
            const optionsConfig = this.getOptionsConfig(args, mapper, filteredOptionsCreator, format);
            const newConfig = {
                ...(emptyPickerMessage && { emptyPickerMessage }),
                ...(Number.isInteger(minSearchLength) && { minSearchLength }),
                ...(enableInfiniteScroll && { enableInfiniteScroll }),
                ...(filteredOptionsCreator && { filteredOptionsCreator }),
                ...(getLabels && { getLabels }),
                ...(optionsConfig && optionsConfig),
                resultsTemplate: control.config.resultsTemplate || ('resultsTemplateType' in args && this.getAppropriateResultsTemplate(args.resultsTemplateType)),
            };
            this.setProperty(key, 'config', newConfig);
            this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: args }, otherForm);
        }
    }
    addPropertiesToPickerConfig(key, properties, otherForm) {
        const control = this.getControl(key, otherForm);
        if (!control || control.restrictFieldInteractions) {
            return;
        }
        const config = {
            ...control.config,
            ...properties,
        };
        this.setProperty(key, 'config', config);
        this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: properties }, otherForm);
    }
    getAppropriateResultsTemplate(resultsTemplateType) {
        switch (resultsTemplateType) {
            case 'entity-picker':
                return EntityPickerResults;
            default:
                return undefined;
        }
    }
    setLoading(key, loading, otherForm) {
        const form = otherForm || this.form;
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            if (loading) {
                form.controls[key].fieldInteractionloading = true;
                control.setErrors({ loading: true });
                // History
                clearTimeout(this.asyncBlockTimeout);
                this.asyncBlockTimeout = setTimeout(() => {
                    this.setLoading(key, false);
                    this.displayTip(key, this.labels.asyncFailure, 'info', false);
                    this.setProperty(key, '_displayedAsyncFailure', true);
                }, 10000);
            }
            else {
                form.controls[key].fieldInteractionloading = false;
                clearTimeout(this.asyncBlockTimeout);
                control.setErrors({ loading: null });
                control.updateValueAndValidity({ emitEvent: false });
                if (this.getProperty(key, '_displayedAsyncFailure')) {
                    this.setProperty(key, 'tipWell', null);
                }
            }
            this.triggerEvent({ controlKey: key, prop: 'loading', value: loading }, otherForm);
        }
    }
    addControl(key, metaForNewField, position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD, initialValue, otherForm) {
        if (!metaForNewField.key && !metaForNewField.name) {
            console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
            return null;
        }
        if (!metaForNewField.key) {
            // If key is not explicitly declared, use name as key
            metaForNewField.key = metaForNewField.name;
        }
        const form = otherForm || this.form;
        if (form.controls[metaForNewField.key]) {
            // Field is already on the form
            return null;
        }
        const control = form.controls[key];
        let fieldsetIndex;
        let controlIndex;
        if (control) {
            fieldsetIndex = -1;
            controlIndex = -1;
            form.fieldsets.forEach((fieldset, fi) => {
                fieldset.controls.forEach((fieldsetControl, ci) => {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            // Change the position of the newly added field
            switch (position) {
                case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                    // Adding field above active field
                    // index can stay the same
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                    // Adding field below active field
                    controlIndex += 1;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                    // Adding field to the top of the form
                    controlIndex = 0;
                    fieldsetIndex = 0;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                    // Adding field to the bottom of the form
                    fieldsetIndex = form.fieldsets.length - 1;
                    controlIndex = form.fieldsets[fieldsetIndex].controls.length;
                    break;
                default:
                    break;
            }
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                const novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                novoControl.hidden = false;
                const formControl = new NovoFormControl(initialValue, novoControl);
                form.addControl(novoControl.key, formControl);
                form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
                this.triggerEvent({ controlKey: key, prop: 'addControl', value: formControl }, otherForm);
            }
        }
    }
    removeControl(key, otherForm) {
        const form = otherForm || this.form;
        if (!form.controls[key]) {
            // Field is not on the form
            return null;
        }
        const control = this.getControl(key, otherForm);
        if (control && !control.restrictFieldInteractions) {
            let fieldsetIndex = -1;
            let controlIndex = -1;
            form.fieldsets.forEach((fieldset, fi) => {
                fieldset.controls.forEach((fieldsetControl, ci) => {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                form.removeControl(key);
                form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 1);
                this.triggerEvent({ controlKey: key, prop: 'removeControl', value: key }, otherForm);
            }
        }
    }
    debounce(func, wait = 50) {
        let h;
        clearTimeout(h);
        h = setTimeout(() => func(), wait);
    }
    /**
     * Allows traversing nested forms by accessing the parent form.
     *
     * @param otherForm optional parameter for getting the parent of a different form.
     * If not provided will default to the parent of the current form.
     */
    getParent(otherForm) {
        const form = otherForm || this.form;
        return form.parent;
    }
    /**
     * The index is assigned as a property on the form's associations object when the form is part of a NovoControlGroup array.
     *
     * @param otherForm optional parameter for getting the index of a different form. If not provided will default to the current form.
     * @returns the index if it exists for the current or form, or null otherwise.
     */
    getIndex(otherForm) {
        const form = otherForm || this.form;
        return form.associations && form.associations.hasOwnProperty('index') ? form.associations.index : null;
    }
    triggerEvent(event, otherForm) {
        const form = otherForm || this.form;
        if (form && form.fieldInteractionEvents) {
            form.fieldInteractionEvents.emit(event);
        }
    }
}
FieldInteractionApi.FIELD_POSITIONS = {
    ABOVE_FIELD: 'ABOVE_FIELD',
    BELOW_FIELD: 'BELOW_FIELD',
    TOP_OF_FORM: 'TOP_OF_FORM',
    BOTTOM_OF_FORM: 'BOTTOM_OF_FORM',
};
FieldInteractionApi.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FieldInteractionApi, deps: [{ token: NovoToastService }, { token: NovoModalService }, { token: FormUtils }, { token: i4$1.HttpClient }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Injectable });
FieldInteractionApi.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FieldInteractionApi });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: FieldInteractionApi, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: NovoToastService }, { type: NovoModalService }, { type: FormUtils }, { type: i4$1.HttpClient }, { type: NovoLabelService }]; } });

// NG2
class NovoTipWellElement {
    constructor(labels, sanitizer) {
        this.labels = labels;
        this.sanitizer = sanitizer;
        this.button = true;
        this.sanitize = true;
        this.confirmed = new EventEmitter();
        this.isActive = true;
        this.isActive = true;
        // Check if localStorage is enabled
        this.isLocalStorageEnabled = (() => {
            let isEnabled = false;
            if (typeof localStorage === 'object') {
                try {
                    localStorage.setItem('lsTest', '1');
                    localStorage.removeItem('lsTest');
                    isEnabled = true;
                }
                catch (e) {
                    console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                }
            }
            return isEnabled;
        })();
    }
    // Trusts the HTML in order to show CSS styles
    get tipWithStyles() {
        if (!this._tipWithStyles || this._lastTipStyled !== this.tip) {
            this._tipWithStyles = this.sanitizer.bypassSecurityTrustHtml(this.tip);
            this._lastTipStyled = this.tip;
        }
        return this._tipWithStyles;
    }
    ngOnInit() {
        this.tip = this.tip || '';
        this.buttonText = this.buttonText || this.labels.okGotIt;
        this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
        this.icon = this.icon || null;
        // Set a (semi) unique name for the tip-well
        this.name = this.name || Math.round(Math.random() * 100);
        this.localStorageKey = `novo-tw_${this.name}`;
        // Check localStorage for state
        if (this.isLocalStorageEnabled) {
            const storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
            this.isActive = storedValue !== false;
        }
    }
    hideTip() {
        if (this.isLocalStorageEnabled) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(false));
        }
        this.isActive = false;
        this.confirmed.emit();
    }
}
NovoTipWellElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTipWellElement, deps: [{ token: NovoLabelService }, { token: i1$2.DomSanitizer }], target: i0.ɵɵFactoryTarget.Component });
NovoTipWellElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTipWellElement, selector: "novo-tip-well", inputs: { name: "name", tip: "tip", buttonText: "buttonText", button: "button", icon: "icon", sanitize: "sanitize" }, outputs: { confirmed: "confirmed" }, host: { properties: { "class.active": "isActive" } }, ngImport: i0, template: `
    <div *ngIf="isActive">
      <div>
        <i class="bhi-{{ icon }}" *ngIf="icon" [attr.data-automation-id]="'novo-tip-well-icon-' + name"></i>
        <ng-content select="novo-icon"></ng-content>
        <p *ngIf="sanitize && tip.length" [attr.data-automation-id]="'novo-tip-well-tip-' + name">{{ tip }}</p>
        <p *ngIf="!sanitize && tipWithStyles" [attr.data-automation-id]="'novo-tip-well-tip-' + name" [innerHTML]="tipWithStyles"></p>
        <p [attr.data-automation-id]="'novo-tip-well-tip-' + name"><ng-content></ng-content></p>
      </div>
      <button theme="dialogue" size="small" (click)="hideTip()" *ngIf="button" [attr.data-automation-id]="'novo-tip-well-button-' + name">
        {{ buttonText }}
      </button>
    </div>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTipWellElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-tip-well',
                    template: `
    <div *ngIf="isActive">
      <div>
        <i class="bhi-{{ icon }}" *ngIf="icon" [attr.data-automation-id]="'novo-tip-well-icon-' + name"></i>
        <ng-content select="novo-icon"></ng-content>
        <p *ngIf="sanitize && tip.length" [attr.data-automation-id]="'novo-tip-well-tip-' + name">{{ tip }}</p>
        <p *ngIf="!sanitize && tipWithStyles" [attr.data-automation-id]="'novo-tip-well-tip-' + name" [innerHTML]="tipWithStyles"></p>
        <p [attr.data-automation-id]="'novo-tip-well-tip-' + name"><ng-content></ng-content></p>
      </div>
      <button theme="dialogue" size="small" (click)="hideTip()" *ngIf="button" [attr.data-automation-id]="'novo-tip-well-button-' + name">
        {{ buttonText }}
      </button>
    </div>
  `,
                    host: {
                        '[class.active]': 'isActive',
                    },
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i1$2.DomSanitizer }]; }, propDecorators: { name: [{
                type: Input
            }], tip: [{
                type: Input
            }], buttonText: [{
                type: Input
            }], button: [{
                type: Input
            }], icon: [{
                type: Input
            }], sanitize: [{
                type: Input
            }], confirmed: [{
                type: Output
            }] } });

// NG2
class NovoAutoSize {
    constructor(element) {
        this.element = element;
    }
    onInput(textArea) {
        this.adjust();
    }
    ngAfterContentInit() {
        setTimeout(() => {
            this.adjust();
        });
    }
    adjust() {
        const nativeElement = this.element.nativeElement;
        nativeElement.style.height = nativeElement.style.minHeight;
        nativeElement.style.height = `${nativeElement.scrollHeight}px`;
    }
}
NovoAutoSize.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAutoSize, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoAutoSize.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoAutoSize, selector: "textarea[autosize]", host: { listeners: { "input": "onInput($event.target)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoAutoSize, decorators: [{
            type: Directive,
            args: [{
                    selector: 'textarea[autosize]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { onInput: [{
                type: HostListener,
                args: ['input', ['$event.target']]
            }] } });
// undo all template context references!
class NovoControlElement extends OutsideClick {
    constructor(element, labels, dateFormatService, fieldInteractionApi, templateService, changeDetectorRef, locale = 'en-US') {
        super(element);
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this.fieldInteractionApi = fieldInteractionApi;
        this.templateService = templateService;
        this.changeDetectorRef = changeDetectorRef;
        this.locale = locale;
        this.condensed = false;
        this.autoFocus = false;
        this.change = new EventEmitter();
        this.edit = new EventEmitter();
        this.save = new EventEmitter();
        this.delete = new EventEmitter();
        this.upload = new EventEmitter();
        this.formattedValue = '';
        this.maxLengthMet = false;
        this.itemCount = 0;
        this._blurEmitter = new EventEmitter();
        this._focusEmitter = new EventEmitter();
        this._focused = false;
        this._enteredText = '';
        this._showCount = false;
        this.maxLengthMetErrorfields = [];
        this.templates = {};
        this.loading = false;
    }
    get onBlur() {
        return this._blurEmitter.asObservable();
    }
    get onFocus() {
        return this._focusEmitter.asObservable();
    }
    get maxlengthMetField() {
        if (this.maxLengthMetErrorfields && this.maxLengthMetErrorfields.length) {
            return this.maxLengthMetErrorfields.find((field) => field === this.focusedField) || '';
        }
        else {
            return '';
        }
    }
    get maxlengthErrorField() {
        if (this.errors && this.errors.maxlengthFields && this.errors.maxlengthFields.length) {
            return this.errors.maxlengthFields.find((field) => field === this.focusedField) || '';
        }
        else {
            return '';
        }
    }
    get showFieldMessage() {
        return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
    }
    get showMaxLengthMetMessage() {
        return ((this.isDirty && this.maxLengthMet && this.focused && (!this.errors || (this.errors && !this.errors.maxlength))) ||
            (this.isDirty &&
                this.maxlengthMetField &&
                this.focused &&
                (!this.errors || (this.errors && !this.errors.maxlengthFields.includes(this.maxlengthMetField)))));
    }
    get showErrorState() {
        return ((this.isDirty && this.errors) ||
            (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields) ||
            (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields && this.maxlengthErrorField));
    }
    get showCount() {
        const MAX_LENGTH_CONTROL_TYPES = ['textbox', 'picker', 'text-area'];
        const charCount = this.focused &&
            !!this.form.controls[this.control.key].maxlength &&
            MAX_LENGTH_CONTROL_TYPES.includes(this.form.controls[this.control.key].controlType);
        return this._showCount || charCount;
    }
    set showCount(value) {
        this._showCount = value;
    }
    get showMessages() {
        return (this.showCount ||
            !Helpers.isEmpty(this.form.controls[this.control.key].warning) ||
            !Helpers.isEmpty(this.form.controls[this.control.key].description));
    }
    get decimalSeparator() {
        return new Intl.NumberFormat(this.locale).format(1.2)[1];
    }
    ngAfterViewInit() {
        const DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
        if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
            setTimeout(() => {
                const input = this.element.nativeElement.querySelector('input');
                if (input) {
                    input.focus();
                }
            });
        }
    }
    ngAfterContentInit() {
        // Subscribe to control interactions
        if (this.control.interactions && !this.form.controls[this.control.key].restrictFieldInteractions) {
            for (const interaction of this.control.interactions) {
                switch (interaction.event) {
                    case 'blur':
                        this.valueChangeSubscription = this.onBlur.pipe(debounceTime(300)).subscribe(() => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'focus':
                        this.valueChangeSubscription = this.onFocus.pipe(debounceTime(300)).subscribe(() => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'change':
                        this.valueChangeSubscription = this.form.controls[this.control.key].valueChanges.pipe(debounceTime(300)).subscribe(() => {
                            if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                                this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'init':
                        interaction.invokeOnInit = true;
                        break;
                    default:
                        break;
                }
                if (interaction.invokeOnInit) {
                    if (!this.form.controls[this.control.key].restrictFieldInteractions) {
                        this.executeInteraction(interaction, true);
                    }
                }
            }
        }
        setTimeout(() => {
            this.templates = this.templateService.getAll();
            this.loading = false;
            this.changeDetectorRef.markForCheck();
        });
    }
    ngOnInit() {
        this.loading = true;
        // Make sure to initially format the time controls
        if (this.control && this.form.controls[this.control.key].value) {
            if (this.form.controls[this.control.key].controlType === 'textbox' ||
                this.form.controls[this.control.key].controlType === 'text-area') {
                this.itemCount = this.form.controls[this.control.key].value.length;
            }
        }
        if (this.control) {
            // Listen to clear events
            this.forceClearSubscription = this.control.forceClear.subscribe(() => {
                this.clearValue();
            });
            // For Asynchronous validations
            this.statusChangeSubscription = this.form.controls[this.control.key].statusChanges.subscribe((validity) => {
                this.form.controls[this.control.key] = this.templateContext.$implicit;
                if (validity !== 'PENDING' && this.form.updateValueAndValidity) {
                    this.form.updateValueAndValidity();
                }
            });
        }
        this.templateContext = {
            $implicit: this.form.controls[this.control.key],
            methods: {
                restrictKeys: this.restrictKeys.bind(this),
                emitChange: this.emitChange.bind(this),
                handleFocus: this.handleFocus.bind(this),
                handlePercentChange: this.handlePercentChange.bind(this),
                handleBlur: this.handleBlur.bind(this),
                handleTextAreaInput: this.handleTextAreaInput.bind(this),
                handleEdit: this.handleEdit.bind(this),
                handleSave: this.handleSave.bind(this),
                handleDelete: this.handleDelete.bind(this),
                handleUpload: this.handleUpload.bind(this),
                modelChange: this.modelChange.bind(this),
                modelChangeWithRaw: this.modelChangeWithRaw.bind(this),
                handleAddressChange: this.handleAddressChange.bind(this),
                handleTyping: this.handleTyping.bind(this),
                updateValidity: this.updateValidity.bind(this),
                toggleActive: this.toggleActive.bind(this),
                validateIntegerInput: this.validateIntegerInput.bind(this),
                validateNumberOnBlur: this.validateNumberOnBlur.bind(this),
            },
            form: this.form,
        };
        this.templateContext.$implicit.tooltipPosition = this.tooltipPosition;
        this.templateContext.$implicit.tooltip = this.tooltip;
        this.templateContext.$implicit.tooltipSize = this.tooltipSize;
        this.templateContext.$implicit.tooltipPreline = this.tooltipPreline;
        this.templateContext.$implicit.removeTooltipArrow = this.removeTooltipArrow;
        this.templateContext.$implicit.startupFocus = this.form.controls[this.control.key].startupFocus;
        this.templateContext.$implicit.fileBrowserImageUploadUrl = this.form.controls[this.control.key].fileBrowserImageUploadUrl;
        this.templateContext.$implicit.minimal = this.form.controls[this.control.key].minimal;
        this.templateContext.$implicit.currencyFormat = this.form.controls[this.control.key].currencyFormat;
        this.templateContext.$implicit.percentValue = this.form.controls[this.control.key].percentValue;
        this.templateContext.$implicit.config = this.form.controls[this.control.key].config;
        if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
            if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                this.templateContext.$implicit.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
            }
            this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe((value) => {
                if (!Helpers.isEmpty(value) && !isNaN(value)) {
                    this.templateContext.$implicit.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
                else if (Helpers.isEmpty(value)) {
                    this.templateContext.$implicit.percentValue = undefined;
                }
            });
        }
    }
    ngOnDestroy() {
        // Unsubscribe from control interactions
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        // if (this.dateChangeSubscription) {
        //     this.dateChangeSubscription.unsubscribe();
        // }
        if (this.forceClearSubscription) {
            // Un-listen for clear events
            this.forceClearSubscription.unsubscribe();
        }
        if (this.percentChangeSubscription) {
            // Un-listen for clear events
            this.percentChangeSubscription.unsubscribe();
        }
        if (this.dateChangeSubscription) {
            this.dateChangeSubscription.unsubscribe();
        }
        if (this.statusChangeSubscription) {
            this.statusChangeSubscription.unsubscribe();
        }
        super.ngOnDestroy();
    }
    get errors() {
        return this.form.controls[this.control.key].errors;
    }
    get isValid() {
        return this.form.controls[this.control.key].valid;
    }
    get isDirty() {
        return this.form.controls[this.control.key].dirty || this.control.dirty;
    }
    get hasValue() {
        return !Helpers.isEmpty(this.form.getRawValue()[this.control.key]);
    }
    get focused() {
        return this._focused;
    }
    get tooltip() {
        return this.form.controls[this.control.key].tooltip;
    }
    get tooltipPosition() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
            return 'right';
        }
        return this.form.controls[this.control.key].tooltipPosition;
    }
    get tooltipSize() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipSize)) {
            return '';
        }
        return this.form.controls[this.control.key].tooltipSize;
    }
    get tooltipPreline() {
        if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPreline)) {
            return false;
        }
        return this.form.controls[this.control.key].tooltipPreline;
    }
    get removeTooltipArrow() {
        if (Helpers.isBlank(this.form.controls[this.control.key].removeTooltipArrow)) {
            return false;
        }
        return this.form.controls[this.control.key].removeTooltipArrow;
    }
    get alwaysActive() {
        // Controls that have the label active if there is any user entered text in the field
        if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
            return true;
        }
        if (this.form.controls[this.control.key].alwaysActive) {
            return true;
        }
        // Controls that always have the label active
        return ([
            'tiles',
            'checklist',
            'checkbox',
            'date',
            'time',
            'date-time',
            'address',
            'file',
            'editor',
            'ace-editor',
            'radio',
            'text-area',
            'quick-note',
            'date',
            'custom',
            'switch',
            'native-select',
            'native-input',
        ].indexOf(this.form.controls[this.control.key].controlType) !== -1);
    }
    get requiresExtraSpacing() {
        // Chips
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
            return true;
        }
        return false;
    }
    executeInteraction(interaction, isInvokedOnInit = false) {
        if (interaction.script && Helpers.isFunction(interaction.script)) {
            setTimeout(() => {
                this.fieldInteractionApi.form = this.form;
                this.fieldInteractionApi.currentKey = this.control.key;
                this.fieldInteractionApi.isInvokedOnInit = isInvokedOnInit;
                try {
                    interaction.script(this.fieldInteractionApi, this.control.key);
                }
                catch (err) {
                    console.info('Field Interaction Error!', this.control.key); // tslint:disable-line
                    console.error(err); // tslint:disable-line
                }
            });
        }
    }
    handleTyping(event) {
        this._focused = event && event.length;
        this._enteredText = event;
    }
    handleFocus(event, field) {
        this._focused = true;
        this.focusedField = field;
        if (!Helpers.isBlank(this.characterCountField) && this.characterCountField === field) {
            this.showCount = true;
        }
        else if (this.form.controls[this.control.key].controlType === 'address' &&
            field &&
            !Helpers.isEmpty(this.form.getRawValue()[this.control.key]) &&
            !Helpers.isBlank(this.form.getRawValue()[this.control.key][field])) {
            this.handleAddressChange({ value: this.form.getRawValue()[this.control.key][field], field });
        }
        this._focusEmitter.emit(event);
    }
    handleBlur(event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        this._blurEmitter.emit(event);
    }
    clearValue() {
        this.form.controls[this.control.key].setValue(null);
        this.formattedValue = null;
    }
    handleTextAreaInput(event) {
        this.emitChange(event);
        this.restrictKeys(event);
    }
    checkMaxLength(event) {
        if (this.control && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.target.value.length;
            this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
        }
    }
    modelChangeWithRaw(event) {
        if (Helpers.isEmpty(event.value)) {
            this._focused = false;
            this._enteredText = '';
        }
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.value ? event.value.length : 0;
            this.maxLengthMet = this.itemCount >= this.form.controls[this.control.key].maxlength ? true : false;
        }
        this.form.controls[this.control.key].rawValue = event.rawValue;
        this.change.emit(event.value);
    }
    modelChange(value) {
        if (Helpers.isEmpty(value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.change.emit(value);
    }
    validateNumberOnBlur(event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        if (this.form.controls[this.control.key].subType === 'number') {
            this.validateIntegerInput();
        }
        this._blurEmitter.emit(event);
    }
    validateIntegerInput() {
        const NUMBERS_ONLY = /^[\d\-]\d*$/;
        if (this.form.controls[this.control.key].value && !NUMBERS_ONLY.test(this.form.controls[this.control.key].value)) {
            this.form.controls[this.control.key].markAsInvalid(`${this.labels.invalidIntegerInput} ${this.form.controls[this.control.key].label.toUpperCase()}`);
        }
    }
    restrictKeys(event) {
        const NUMBERS_ONLY = /[0-9\-]/;
        const NUMBERS_WITH_DECIMAL_DOT = /[0-9\.\-]/;
        const NUMBERS_WITH_DECIMAL_DOT_AND_COMMA = /[0-9\.\,\-]/;
        const UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        const key = event.key;
        // Numbers or numbers and decimal characters only
        if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        else if (['currency', 'float', 'percentage'].includes(this.form.controls[this.control.key].subType) &&
            !((this.decimalSeparator === '.' && NUMBERS_WITH_DECIMAL_DOT.test(key)) ||
                (this.decimalSeparator === ',' && NUMBERS_WITH_DECIMAL_DOT_AND_COMMA.test(key)) ||
                UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        // Max Length
        if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
            event.preventDefault();
        }
    }
    handlePercentChange(event) {
        const value = event.target.value || event.data;
        const percent = Helpers.isEmpty(value) || isNaN(value) ? value : Number((Number(value) / 100).toFixed(6).replace(/\.?0*$/, ''));
        if (!Helpers.isEmpty(percent)) {
            this.change.emit(percent);
            this.form.controls[this.control.key].setValue(percent);
        }
        else {
            this.change.emit(null);
            this.form.controls[this.control.key].setValue(null);
        }
    }
    handleTabForPickers(event) {
        if (this.active && event && event.key) {
            if (event.key === "Escape" /* Escape */ || event.key === "Tab" /* Tab */) {
                this.toggleActive(event, false);
            }
        }
    }
    emitChange(value) {
        this.change.emit(value);
        this.checkMaxLength(value);
    }
    handleEdit(value) {
        this.edit.emit(value);
    }
    handleSave(value) {
        this.save.emit(value);
    }
    handleDelete(value) {
        this.delete.emit(value);
    }
    handleUpload(value) {
        this.upload.emit(value);
    }
    handleAddressChange(data) {
        if (data &&
            !Helpers.isBlank(data.value) &&
            data.field &&
            this.control.config[data.field] &&
            !Helpers.isEmpty(this.control.config[data.field].maxlength)) {
            this.itemCount = data.value.length;
            this.characterCountField = data.field;
            this.maxLength = this.control.config[data.field].maxlength;
            this.showCount = true;
            if (this.maxLength === this.itemCount) {
                this.maxLengthMetErrorfields.push(data.field);
            }
            else {
                this.maxLengthMetErrorfields = this.maxLengthMetErrorfields.filter((field) => field !== data.field);
            }
        }
    }
    updateValidity(shouldEventBeEmitted) {
        const emitEvent = shouldEventBeEmitted ? true : false;
        this.form.controls[this.control.key].updateValueAndValidity({ emitEvent });
    }
}
NovoControlElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoControlElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: DateFormatService }, { token: FieldInteractionApi }, { token: NovoTemplateService }, { token: i0.ChangeDetectorRef }, { token: LOCALE_ID }], target: i0.ɵɵFactoryTarget.Component });
NovoControlElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoControlElement, selector: "novo-control", inputs: { control: "control", form: "form", condensed: "condensed", autoFocus: "autoFocus" }, outputs: { change: "change", edit: "edit", save: "save", delete: "delete", upload: "upload", onBlur: "blur", onFocus: "focus" }, host: { properties: { "class": "form.controls[control.key].controlType", "attr.data-control-type": "form.controls[control.key].controlType", "class.disabled": "form.controls[control.key].readOnly", "class.hidden": "form.controls[control.key].hidden", "attr.data-control-key": "control.key", "class.inline-embedded": "control.isInlineEmbedded", "class.embedded": "control.isEmbedded" } }, usesInheritance: true, ngImport: i0, template: `
    <div
      class="novo-control-container"
      [hidden]="
        form.controls[control.key].hidden ||
        form.controls[control.key].type === 'hidden' ||
        form.controls[control.key].controlType === 'hidden'
      "
    >
      <!--Encrypted Field-->
      <span [tooltip]="labels.encryptedFieldTooltip" [tooltipPosition]="'right'"
        ><i [hidden]="!form.controls[control.key].encrypted" class="bhi-lock"></i
      ></span>
      <!--Label (for horizontal)-->
      <label
        [attr.for]="control.key"
        *ngIf="form.layout !== 'vertical' && form.controls[control.key].label && !condensed"
        [ngClass]="{ encrypted: form.controls[control.key].encrypted }"
      >
        {{ form.controls[control.key].label }}
      </label>
      <div class="novo-control-outer-container">
        <!--Label (for vertical)-->
        <label
          *ngIf="form.layout === 'vertical' && form.controls[control.key].label && !condensed"
          class="novo-control-label"
          [attr.for]="control.key"
          [class.novo-control-empty]="!hasValue"
          [class.novo-control-focused]="focused"
          [class.novo-control-filled]="hasValue"
          [class.novo-control-always-active]="alwaysActive || form.controls[control.key].placeholder"
          [class.novo-control-extra-spacing]="requiresExtraSpacing"
        >
          {{ form.controls[control.key].label }}
        </label>
        <div
          class="novo-control-inner-container"
          [class.required]="form.controls[control.key].required && !form.controls[control.key].readOnly"
        >
          <div class="novo-control-inner-input-container" [class.novo-control-filled]="hasValue" [class.novo-control-empty]="!hasValue">
            <!--Required Indicator-->
            <i
              [hidden]="!form.controls[control.key].required || form.controls[control.key].readOnly"
              class="required-indicator {{ form.controls[control.key].controlType }}"
              [ngClass]="{ 'bhi-circle': !isValid, 'bhi-check': isValid }"
              *ngIf="!condensed || form.controls[control.key].required"
            >
            </i>
            <!--Form Controls-->
            <div
              class="novo-control-input {{ form.controls[control.key].controlType }}"
              [attr.data-automation-id]="control.key"
              [class.control-disabled]="form.controls[control.key].disabled"
              [class.highlighted]="form.controls[control.key].highlighted"
            >
              <!--TODO prefix/suffix on the control-->
              <ng-container *ngIf="templates">
                <ng-container
                  *ngTemplateOutlet="templates[form.controls[control.key].controlType]; context: templateContext"
                ></ng-container>
              </ng-container>
              <ng-container *ngIf="!templates || loading">
                <div class="novo-control-input-container novo-control-input-with-label">
                  <input type="text" />
                </div>
              </ng-container>
            </div>
          </div>
          <!--Error Message-->
          <div
            class="field-message {{ form.controls[control.key].controlType }}"
            *ngIf="!condensed"
            [class.has-tip]="form.controls[control.key].tipWell"
            [ngClass]="showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'"
          >
            <div class="messages" [ngClass]="showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'">
              <span class="error-text" *ngIf="showFieldMessage"></span>
              <span class="error-text" *ngIf="isDirty && errors?.required && form.controls[control.key].controlType !== 'address'"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span
              >
              <span class="error-text" *ngIf="isDirty && errors?.minlength"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span
              >
              <span
                class="error-text"
                *ngIf="isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'"
                >{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span
              >
              <span class="error-text" *ngIf="errors?.maxlength && focused && !errors?.maxlengthFields">{{
                labels.invalidMaxlength(form.controls[control.key].maxlength)
              }}</span>
              <span class="error-text" *ngIf="maxLengthMet && form.controls[control.key].controlType === 'picker'">{{
                labels.maxRecordsReached
              }}</span>
              <span class="error-text" *ngIf="isDirty && errors?.invalidEmail"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span
              >
              <span class="error-text" *ngIf="isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span
              >
              <span *ngIf="isDirty && errors?.minYear">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>
              <span class="error-text" *ngIf="isDirty && errors?.custom">{{ errors.custom }}</span>
              <span class="error-text" *ngIf="errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused">
                {{
                  labels.invalidMaxlengthWithField(
                    control.config[maxlengthErrorField]?.label,
                    control.config[maxlengthErrorField]?.maxlength
                  )
                }}
              </span>
              <span
                class="error-text"
                *ngIf="isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)"
              >
                {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}
              </span>
              <span *ngIf="isDirty && errors?.invalidAddress">
                <span class="error-text" *ngFor="let invalidAddressField of errors?.invalidAddressFields"
                  >{{ invalidAddressField | uppercase }} {{ labels.isRequired }}
                </span>
              </span>
              <!--Field Hint-->
              <div class="description" *ngIf="form.controls[control.key].description" [innerHTML]="form.controls[control.key].description">
              </div>
              <span class="warning-text" *ngIf="form.controls[control.key].warning">{{ form.controls[control.key].warning }}</span>
            </div>
            <span
              class="character-count"
              [class.error]="
                (errors?.maxlength && !errors?.maxlengthFields) ||
                (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField))
              "
              *ngIf="showCount && form.controls[control.key].controlType !== 'picker'"
              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span
            >
            <span
              class="record-count"
              [class.zero-count]="itemCount === 0"
              [class.row-picker]="form.controls[this.control.key].config.columns"
              *ngIf="showCount && form.controls[control.key].controlType === 'picker'"
              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span
            >
          </div>
          <!--Tip Wel-->
          <novo-tip-well
            *ngIf="form.controls[control.key].tipWell"
            [name]="control.key"
            [tip]="form.controls[control.key]?.tipWell?.tip"
            [icon]="form.controls[control.key]?.tipWell?.icon"
            [button]="form.controls[control.key]?.tipWell?.button"
            [sanitize]="form.controls[control.key]?.tipWell?.sanitize"
          ></novo-tip-well>
        </div>
        <i *ngIf="form.controls[control.key].fieldInteractionloading" class="loading">
          <svg
            version="1.1"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
            x="0px"
            y="0px"
            width="18.2px"
            height="18.5px"
            viewBox="0 0 18.2 18.5"
            style="enable-background:new 0 0 18.2 18.5;"
            xml:space="preserve"
          >
            <style type="text/css">
              .spinner {
                fill: #ffffff;
              }
            </style>
            <path
              class="spinner"
              d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
            />
          </svg>
        </i>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoTipWellElement, selector: "novo-tip-well", inputs: ["name", "tip", "buttonText", "button", "icon", "sanitize"], outputs: ["confirmed"] }], directives: [{ type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "uppercase": i1.UpperCasePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoControlElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-control',
                    template: `
    <div
      class="novo-control-container"
      [hidden]="
        form.controls[control.key].hidden ||
        form.controls[control.key].type === 'hidden' ||
        form.controls[control.key].controlType === 'hidden'
      "
    >
      <!--Encrypted Field-->
      <span [tooltip]="labels.encryptedFieldTooltip" [tooltipPosition]="'right'"
        ><i [hidden]="!form.controls[control.key].encrypted" class="bhi-lock"></i
      ></span>
      <!--Label (for horizontal)-->
      <label
        [attr.for]="control.key"
        *ngIf="form.layout !== 'vertical' && form.controls[control.key].label && !condensed"
        [ngClass]="{ encrypted: form.controls[control.key].encrypted }"
      >
        {{ form.controls[control.key].label }}
      </label>
      <div class="novo-control-outer-container">
        <!--Label (for vertical)-->
        <label
          *ngIf="form.layout === 'vertical' && form.controls[control.key].label && !condensed"
          class="novo-control-label"
          [attr.for]="control.key"
          [class.novo-control-empty]="!hasValue"
          [class.novo-control-focused]="focused"
          [class.novo-control-filled]="hasValue"
          [class.novo-control-always-active]="alwaysActive || form.controls[control.key].placeholder"
          [class.novo-control-extra-spacing]="requiresExtraSpacing"
        >
          {{ form.controls[control.key].label }}
        </label>
        <div
          class="novo-control-inner-container"
          [class.required]="form.controls[control.key].required && !form.controls[control.key].readOnly"
        >
          <div class="novo-control-inner-input-container" [class.novo-control-filled]="hasValue" [class.novo-control-empty]="!hasValue">
            <!--Required Indicator-->
            <i
              [hidden]="!form.controls[control.key].required || form.controls[control.key].readOnly"
              class="required-indicator {{ form.controls[control.key].controlType }}"
              [ngClass]="{ 'bhi-circle': !isValid, 'bhi-check': isValid }"
              *ngIf="!condensed || form.controls[control.key].required"
            >
            </i>
            <!--Form Controls-->
            <div
              class="novo-control-input {{ form.controls[control.key].controlType }}"
              [attr.data-automation-id]="control.key"
              [class.control-disabled]="form.controls[control.key].disabled"
              [class.highlighted]="form.controls[control.key].highlighted"
            >
              <!--TODO prefix/suffix on the control-->
              <ng-container *ngIf="templates">
                <ng-container
                  *ngTemplateOutlet="templates[form.controls[control.key].controlType]; context: templateContext"
                ></ng-container>
              </ng-container>
              <ng-container *ngIf="!templates || loading">
                <div class="novo-control-input-container novo-control-input-with-label">
                  <input type="text" />
                </div>
              </ng-container>
            </div>
          </div>
          <!--Error Message-->
          <div
            class="field-message {{ form.controls[control.key].controlType }}"
            *ngIf="!condensed"
            [class.has-tip]="form.controls[control.key].tipWell"
            [ngClass]="showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'"
          >
            <div class="messages" [ngClass]="showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'">
              <span class="error-text" *ngIf="showFieldMessage"></span>
              <span class="error-text" *ngIf="isDirty && errors?.required && form.controls[control.key].controlType !== 'address'"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span
              >
              <span class="error-text" *ngIf="isDirty && errors?.minlength"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span
              >
              <span
                class="error-text"
                *ngIf="isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'"
                >{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span
              >
              <span class="error-text" *ngIf="errors?.maxlength && focused && !errors?.maxlengthFields">{{
                labels.invalidMaxlength(form.controls[control.key].maxlength)
              }}</span>
              <span class="error-text" *ngIf="maxLengthMet && form.controls[control.key].controlType === 'picker'">{{
                labels.maxRecordsReached
              }}</span>
              <span class="error-text" *ngIf="isDirty && errors?.invalidEmail"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span
              >
              <span class="error-text" *ngIf="isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)"
                >{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span
              >
              <span *ngIf="isDirty && errors?.minYear">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>
              <span class="error-text" *ngIf="isDirty && errors?.custom">{{ errors.custom }}</span>
              <span class="error-text" *ngIf="errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused">
                {{
                  labels.invalidMaxlengthWithField(
                    control.config[maxlengthErrorField]?.label,
                    control.config[maxlengthErrorField]?.maxlength
                  )
                }}
              </span>
              <span
                class="error-text"
                *ngIf="isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)"
              >
                {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}
              </span>
              <span *ngIf="isDirty && errors?.invalidAddress">
                <span class="error-text" *ngFor="let invalidAddressField of errors?.invalidAddressFields"
                  >{{ invalidAddressField | uppercase }} {{ labels.isRequired }}
                </span>
              </span>
              <!--Field Hint-->
              <div class="description" *ngIf="form.controls[control.key].description" [innerHTML]="form.controls[control.key].description">
              </div>
              <span class="warning-text" *ngIf="form.controls[control.key].warning">{{ form.controls[control.key].warning }}</span>
            </div>
            <span
              class="character-count"
              [class.error]="
                (errors?.maxlength && !errors?.maxlengthFields) ||
                (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField))
              "
              *ngIf="showCount && form.controls[control.key].controlType !== 'picker'"
              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span
            >
            <span
              class="record-count"
              [class.zero-count]="itemCount === 0"
              [class.row-picker]="form.controls[this.control.key].config.columns"
              *ngIf="showCount && form.controls[control.key].controlType === 'picker'"
              >{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span
            >
          </div>
          <!--Tip Wel-->
          <novo-tip-well
            *ngIf="form.controls[control.key].tipWell"
            [name]="control.key"
            [tip]="form.controls[control.key]?.tipWell?.tip"
            [icon]="form.controls[control.key]?.tipWell?.icon"
            [button]="form.controls[control.key]?.tipWell?.button"
            [sanitize]="form.controls[control.key]?.tipWell?.sanitize"
          ></novo-tip-well>
        </div>
        <i *ngIf="form.controls[control.key].fieldInteractionloading" class="loading">
          <svg
            version="1.1"
            xmlns="http://www.w3.org/2000/svg"
            xmlns:xlink="http://www.w3.org/1999/xlink"
            xmlns:a="http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/"
            x="0px"
            y="0px"
            width="18.2px"
            height="18.5px"
            viewBox="0 0 18.2 18.5"
            style="enable-background:new 0 0 18.2 18.5;"
            xml:space="preserve"
          >
            <style type="text/css">
              .spinner {
                fill: #ffffff;
              }
            </style>
            <path
              class="spinner"
              d="M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9
                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1
                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z"
            />
          </svg>
        </i>
      </div>
    </div>
  `,
                    host: {
                        '[class]': 'form.controls[control.key].controlType',
                        '[attr.data-control-type]': 'form.controls[control.key].controlType',
                        '[class.disabled]': 'form.controls[control.key].readOnly',
                        '[class.hidden]': 'form.controls[control.key].hidden',
                        '[attr.data-control-key]': 'control.key',
                        '[class.inline-embedded]': 'control.isInlineEmbedded',
                        '[class.embedded]': 'control.isEmbedded',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: FieldInteractionApi }, { type: NovoTemplateService }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }]; }, propDecorators: { control: [{
                type: Input
            }], form: [{
                type: Input
            }], condensed: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], change: [{
                type: Output
            }], edit: [{
                type: Output
            }], save: [{
                type: Output
            }], delete: [{
                type: Output
            }], upload: [{
                type: Output
            }], onBlur: [{
                type: Output,
                args: ['blur']
            }], onFocus: [{
                type: Output,
                args: ['focus']
            }] } });

// NG
var EditState;
(function (EditState) {
    EditState["EDITING"] = "editing";
    EditState["NOT_EDITING"] = "notediting";
})(EditState || (EditState = {}));
class NovoControlGroup {
    constructor(formUtils, fb, ref) {
        this.formUtils = formUtils;
        this.fb = fb;
        this.ref = ref;
        this._appearance = 'none';
        this._vertical = false;
        this._stacked = false;
        this._remove = false;
        this._edit = false;
        this._collapsible = false;
        // Edit icon at the end of each row (no bhi- prefix)
        this.editIcon = 'edit';
        // Remove icon at the end of each row (no bhi- prefix)
        this.removeIcon = 'delete-o';
        this.onRemove = new EventEmitter();
        this.onEdit = new EventEmitter();
        this.onAdd = new EventEmitter();
        this.change = new EventEmitter();
        this.controlLabels = [];
        this.toggled = false;
        this.disabledArray = [];
        this.editState = EditState.NOT_EDITING;
        this.currentIndex = 0;
    }
    set appearance(value) {
        this._appearance = value;
    }
    get appearance() {
        return this._appearance;
    }
    // Sets the display of the group to either be row (default) or vertical via flex-box
    set vertical(v) {
        this._vertical = coerceBooleanProperty(v);
    }
    get vertical() {
        return this._vertical;
    }
    set stacked(v) {
        this._stacked = coerceBooleanProperty(v);
    }
    get stacked() {
        return this._stacked;
    }
    // Hide/shows the remove button for removing a control
    set remove(v) {
        this._remove = coerceBooleanProperty(v);
    }
    get remove() {
        return this._remove;
    }
    // Hide/shows the edit button for editing a control
    set edit(v) {
        this._edit = coerceBooleanProperty(v);
    }
    get edit() {
        return this._edit;
    }
    // Allows the control to collapse or not
    set collapsible(v) {
        this._collapsible = coerceBooleanProperty(v);
    }
    get collapsible() {
        return this._collapsible;
    }
    // Icon of the control group (can have bhi prefix or not)
    set icon(v) {
        this._icon = v && v.indexOf('bhi') !== -1 ? v : `bhi-${v}`;
    }
    get icon() {
        return this._icon;
    }
    ngAfterContentInit() {
        if (!this.key) {
            throw new Error('novo-control-group must have the [key] attribute provided!');
        }
    }
    ngOnChanges(changes) {
        const initialValueChange = changes.initialValue;
        // If initial value changes, clear the controls
        if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
            this.clearControls();
        }
        // Check for array, add a control for each value
        if (this.initialValue && Array.isArray(this.initialValue)) {
            if (this.initialValue.length !== 0) {
                this.currentIndex = 0;
                this.initialValue.forEach((value) => this.addNewControl(value));
            }
        }
        else if (this.initialValue) {
            // If value is an object, just add one control
            this.addNewControl(this.initialValue);
        }
        // If we are horizontal, grab the labels to help with layout
        if (!this.vertical) {
            this.controlLabels = (this.controls || []).map((control) => {
                return {
                    value: control.label,
                    width: control.width,
                    required: control.required,
                    key: control.key,
                    hidden: control.hidden,
                };
            });
            this.ref.markForCheck();
        }
    }
    ngOnDestroy() {
        this.clearControls();
    }
    onChange() {
        this.change.emit(this);
    }
    onClickAdd() {
        this.addNewControl();
        // this.editState = EditState.EDITING;
    }
    onClickCancel() {
        this.editState = EditState.NOT_EDITING;
    }
    onClickSave() {
        this.disabledArray[this.currentIndex - 1].state = EditState.NOT_EDITING;
        this.editState = EditState.NOT_EDITING;
        const control = this.form.controls[this.key];
        if (control) {
            const fg = control.at(this.currentIndex - 1);
            fg.disableAllControls();
        }
    }
    resetAddRemove() {
        this.disabledArray.forEach((item, idx) => {
            item.edit = this.checkCanEdit(idx);
            item.remove = this.checkCanRemove(idx);
            if (!item.edit) {
                item.state = EditState.NOT_EDITING;
            }
        });
        this.ref.markForCheck();
    }
    addNewControl(value) {
        const controlsArray = this.form.controls[this.key];
        const nestedFormGroup = this.buildNestedFormGroup(value);
        if (controlsArray) {
            controlsArray.push(nestedFormGroup);
        }
        else {
            this.form.addControl(this.key, this.fb.array([nestedFormGroup]));
        }
        this.disabledArray.push({
            state: EditState.EDITING,
            edit: true,
            remove: true,
        });
        this.resetAddRemove();
        if (!value) {
            this.onAdd.emit(nestedFormGroup);
        }
        this.currentIndex++;
        this.assignIndexes();
        // Ensure that field interaction changes for nested forms originating from outside the form will be reflected in the nested elements
        nestedFormGroup.fieldInteractionEvents.subscribe(this.onFieldInteractionEvent.bind(this));
        this.ref.markForCheck();
    }
    /**
     * Will remove the control, and optionally, if the event is to be publicized (emitEvent = true) and there is a
     * shouldRemove callback, then call the shouldRemove() callback to determine if the doRemoveControl should be called.
     */
    removeControl(index, emitEvent = true) {
        if (emitEvent && Helpers.isFunction(this.shouldRemove)) {
            this.shouldRemove(index).then((shouldRemove) => {
                if (shouldRemove) {
                    this.doRemoveControl(index, emitEvent);
                }
            });
        }
        else {
            this.doRemoveControl(index, emitEvent);
        }
    }
    doRemoveControl(index, emitEvent) {
        const controlsArray = this.form.controls[this.key];
        const nestedFormGroup = controlsArray.at(index);
        nestedFormGroup.fieldInteractionEvents.unsubscribe();
        if (emitEvent) {
            this.onRemove.emit({ value: nestedFormGroup.getRawValue(), index });
        }
        controlsArray.removeAt(index);
        this.disabledArray = this.disabledArray.filter((value, idx) => idx !== index);
        this.resetAddRemove();
        this.currentIndex--;
        this.assignIndexes();
        this.ref.markForCheck();
    }
    editControl(index) {
        const controlsArray = this.form.controls[this.key];
        const fg = controlsArray.at(index);
        fg.enableAllControls();
        this.onEdit.emit({ value: controlsArray.at(index).value, index });
    }
    toggle(event) {
        Helpers.swallowEvent(event);
        if (this.collapsible) {
            this.toggled = !this.toggled;
            this.ref.markForCheck();
        }
    }
    buildNestedFormGroup(value) {
        const newControls = this.getNewControls();
        if (value) {
            this.formUtils.setInitialValues(newControls, value);
        }
        return this.formUtils.toFormGroup(newControls);
    }
    clearControls() {
        const controlsArray = this.form.controls[this.key];
        if (controlsArray) {
            for (let i = controlsArray.length - 1; i >= 0; i--) {
                this.removeControl(i, false);
            }
            this.currentIndex = 0;
        }
    }
    checkCanEdit(index) {
        if (this.canEdit) {
            const controlsArray = this.form.controls[this.key];
            return this.canEdit(controlsArray.at(index).value, index);
        }
        return true;
    }
    checkCanRemove(index) {
        if (this.canRemove) {
            const controlsArray = this.form.controls[this.key];
            if (controlsArray.at(index)) {
                return this.canRemove(controlsArray.at(index).value, index);
            }
            return true;
        }
        return true;
    }
    getNewControls() {
        const ret = [];
        (this.controls || []).forEach((control) => {
            ret.push(new BaseControl(control.__type, control));
        });
        return ret;
    }
    assignIndexes() {
        const controlsArray = this.form.controls[this.key];
        if (controlsArray) {
            for (let i = 0; i < controlsArray.length; i++) {
                const form = controlsArray.at(i);
                form.associations = { ...form.associations, index: i };
            }
        }
    }
    onFieldInteractionEvent() {
        this.ref.markForCheck();
    }
}
NovoControlGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoControlGroup, deps: [{ token: FormUtils }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoControlGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoControlGroup, selector: "novo-control-group", inputs: { appearance: "appearance", vertical: "vertical", stacked: "stacked", add: "add", remove: "remove", edit: "edit", collapsible: "collapsible", form: "form", controls: "controls", key: "key", label: "label", description: "description", emptyMessage: "emptyMessage", icon: "icon", editIcon: "editIcon", removeIcon: "removeIcon", initialValue: "initialValue", canEdit: "canEdit", canRemove: "canRemove", shouldRemove: "shouldRemove", rowTemplate: "rowTemplate", columnLabelTemplate: "columnLabelTemplate" }, outputs: { onRemove: "onRemove", onEdit: "onEdit", onAdd: "onAdd", change: "change" }, host: { properties: { "class.novo-control-group-appearance-card": "appearance=='card'", "class.novo-control-group-appearance-none": "appearance=='none'" } }, usesOnChanges: true, ngImport: i0, template: "<h6 class=\"novo-section-header\" *ngIf=\"label\">\n  <span (click)=\"toggle($event)\" [class.clickable]=\"collapsible\">\n    <i *ngIf=\"icon && !collapsible\" [ngClass]=\"icon\" [attr.data-automation-id]=\"'novo-control-group-icon-' + key\"></i>\n    <i *ngIf=\"collapsible\" class=\"bhi-next\" [class.toggled]=\"toggled\"\n      [attr.data-automation-id]=\"'novo-control-group-collapse-' + key\"></i>\n    <span [attr.data-automation-id]=\"'novo-control-group-label-' + key\">{{ label }}</span>\n  </span>\n  <label class=\"novo-control-group-description\" *ngIf=\"description\"\n    [attr.data-automation-id]=\"'novo-control-group-description-' + key\">{{ description }}</label>\n</h6>\n<div class=\"novo-control-group-controls\" [class.vertical]=\"vertical\" [class.horizontal]=\"!vertical\"\n  [class.hidden]=\"collapsible && !toggled\">\n\n  <ng-template #defaultTemplate let-index=\"index\" let-form=\"form\" let-key=\"key\">\n    <div class=\"novo-control-group-control\">\n      <div *ngFor=\"let c of controls\" class=\"novo-control-container {{c.key}}\"\n        [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n        <novo-control (change)=\"onChange()\" [form]=\"(form?.controls)[key]['controls'][index]\" [control]=\"c\"\n          [condensed]=\"!vertical || c.controlType === 'read-only'\"></novo-control>\n      </div>\n      <div class=\"novo-control-container edit last\" *ngIf=\"edit && !vertical\">\n        <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].edit\" type=\"button\"\n          *ngIf=\"edit && !vertical\" theme=\"icon\" [icon]=\"editIcon\"\n          (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\">\n        </novo-button>\n      </div>\n      <div class=\"novo-control-container remove last\" *ngIf=\"remove && !vertical\">\n        <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].remove\" type=\"button\"\n          *ngIf=\"remove && !vertical\" theme=\"icon\"\n          [icon]=\"removeIcon\" (click)=\"removeControl(index)\"\n          [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n          index=\"-1\">\n        </novo-button>\n      </div>\n    </div>\n    <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].edit\" type=\"button\"\n      *ngIf=\"edit && vertical\"\n      theme=\"icon\" [icon]=\"editIcon\"\n      (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\">\n    </novo-button>\n    <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].remove\" type=\"button\"\n      *ngIf=\"remove && vertical\" theme=\"icon\"\n      [icon]=\"removeIcon\" (click)=\"removeControl(index)\"\n      [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n      index=\"-1\">\n    </novo-button>\n  </ng-template>\n\n  <ng-template #defaultColumnLabelTemplate let-form=\"form\" let-key=\"key\">\n    <div *ngFor=\"let label of controlLabels\"\n      class=\"novo-control-group-control-label {{ label.key }}\"\n      [class.novo-control-group-control-hidden]=\"label.hidden\"\n      [style.max-width.px]=\"label.width\" [class.column-required]=\"label.required\">\n      <span [attr.data-automation-id]=\"'novo-control-group-label-' + label.value\">{{ label.value }}</span>\n    </div>\n    <div class=\"novo-control-group-control-label edit last\" *ngIf=\"edit\"\n      [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"></div>\n    <div class=\"novo-control-group-control-label remove last\" *ngIf=\"remove\"\n      [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"></div>\n  </ng-template>\n\n  <ng-container *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n    <div class=\"novo-control-group-labels\"\n      *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n      <ng-template [ngTemplateOutlet]=\"columnLabelTemplate || defaultColumnLabelTemplate\"\n        [ngTemplateOutletContext]=\"{ form: form, key: key, controlLabels: controlLabels }\">\n      </ng-template>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"(form?.controls)[key]\">\n    <div class=\"novo-control-group-row\"\n      *ngFor=\"let control of (form?.controls)[key]['controls']; let index = index\">\n      <ng-template [ngTemplateOutlet]=\"rowTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{ form: form, formGroup: control, index: index, key: key, controls: controls }\">\n      </ng-template>\n    </div>\n  </ng-container>\n\n  <div class=\"novo-control-group-empty\"\n    *ngIf=\"(form?.controls)[key] && (form?.controls)[key]['controls'].length === 0\"\n    [attr.data-automation-id]=\"'novo-control-group-empty-' + key\">\n    {{ emptyMessage }}\n  </div>\n\n  <div *ngIf=\"add\" class=\"novo-control-group-footer\">\n    <novo-button type=\"button\" theme=\"dialogue\" icon=\"add-thin\" side=\"left\" (click)=\"onClickAdd()\"\n      [attr.data-automation-id]=\"'novo-control-group-bottom-add-' + key\" index=\"-1\">\n      {{ add?.label }}\n    </novo-button>\n    <!-- <novo-button *ngIf=\"editState==='editing'\" type=\"button\" theme=\"dialogue\" icon=\"close\" side=\"left\"\n                  (click)=\"onClickCancel()\" [attr.data-automation-id]=\"'novo-control-group-bottom-cancel-' + key\"\n                  index=\"-1\">\n                {{ 'cancel' }}\n                </novo-button>\n                  <novo-button *ngIf=\"editState==='editing'\" type=\"button\" theme=\"dialogue\" icon=\"check\" side=\"left\"\n                  (click)=\"onClickSave()\" [attr.data-automation-id]=\"'novo-control-group-bottom-save-' + key\"\n                  index=\"-1\">\n                {{ add?.label }}\n                </novo-button> -->\n  </div>\n</div>\n", components: [{ type: NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoControlGroup, decorators: [{
            type: Component,
            args: [{ selector: 'novo-control-group', changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        '[class.novo-control-group-appearance-card]': "appearance=='card'",
                        '[class.novo-control-group-appearance-none]': "appearance=='none'",
                    }, template: "<h6 class=\"novo-section-header\" *ngIf=\"label\">\n  <span (click)=\"toggle($event)\" [class.clickable]=\"collapsible\">\n    <i *ngIf=\"icon && !collapsible\" [ngClass]=\"icon\" [attr.data-automation-id]=\"'novo-control-group-icon-' + key\"></i>\n    <i *ngIf=\"collapsible\" class=\"bhi-next\" [class.toggled]=\"toggled\"\n      [attr.data-automation-id]=\"'novo-control-group-collapse-' + key\"></i>\n    <span [attr.data-automation-id]=\"'novo-control-group-label-' + key\">{{ label }}</span>\n  </span>\n  <label class=\"novo-control-group-description\" *ngIf=\"description\"\n    [attr.data-automation-id]=\"'novo-control-group-description-' + key\">{{ description }}</label>\n</h6>\n<div class=\"novo-control-group-controls\" [class.vertical]=\"vertical\" [class.horizontal]=\"!vertical\"\n  [class.hidden]=\"collapsible && !toggled\">\n\n  <ng-template #defaultTemplate let-index=\"index\" let-form=\"form\" let-key=\"key\">\n    <div class=\"novo-control-group-control\">\n      <div *ngFor=\"let c of controls\" class=\"novo-control-container {{c.key}}\"\n        [class.is-label]=\"c.controlType === 'read-only'\" [style.max-width.px]=\"c.width\">\n        <novo-control (change)=\"onChange()\" [form]=\"(form?.controls)[key]['controls'][index]\" [control]=\"c\"\n          [condensed]=\"!vertical || c.controlType === 'read-only'\"></novo-control>\n      </div>\n      <div class=\"novo-control-container edit last\" *ngIf=\"edit && !vertical\">\n        <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].edit\" type=\"button\"\n          *ngIf=\"edit && !vertical\" theme=\"icon\" [icon]=\"editIcon\"\n          (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\">\n        </novo-button>\n      </div>\n      <div class=\"novo-control-container remove last\" *ngIf=\"remove && !vertical\">\n        <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].remove\" type=\"button\"\n          *ngIf=\"remove && !vertical\" theme=\"icon\"\n          [icon]=\"removeIcon\" (click)=\"removeControl(index)\"\n          [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n          index=\"-1\">\n        </novo-button>\n      </div>\n    </div>\n    <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].edit\" type=\"button\"\n      *ngIf=\"edit && vertical\"\n      theme=\"icon\" [icon]=\"editIcon\"\n      (click)=\"editControl(index)\" [attr.data-automation-id]=\"'novo-control-group-edit-' + key\" index=\"-1\">\n    </novo-button>\n    <novo-button class=\"control-group-action\" [disabled]=\"!disabledArray[index].remove\" type=\"button\"\n      *ngIf=\"remove && vertical\" theme=\"icon\"\n      [icon]=\"removeIcon\" (click)=\"removeControl(index)\"\n      [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"\n      index=\"-1\">\n    </novo-button>\n  </ng-template>\n\n  <ng-template #defaultColumnLabelTemplate let-form=\"form\" let-key=\"key\">\n    <div *ngFor=\"let label of controlLabels\"\n      class=\"novo-control-group-control-label {{ label.key }}\"\n      [class.novo-control-group-control-hidden]=\"label.hidden\"\n      [style.max-width.px]=\"label.width\" [class.column-required]=\"label.required\">\n      <span [attr.data-automation-id]=\"'novo-control-group-label-' + label.value\">{{ label.value }}</span>\n    </div>\n    <div class=\"novo-control-group-control-label edit last\" *ngIf=\"edit\"\n      [attr.data-automation-id]=\"'novo-control-group-edit-' + key\"></div>\n    <div class=\"novo-control-group-control-label remove last\" *ngIf=\"remove\"\n      [attr.data-automation-id]=\"'novo-control-group-delete-' + key\"></div>\n  </ng-template>\n\n  <ng-container *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n    <div class=\"novo-control-group-labels\"\n      *ngIf=\"!vertical && (form?.controls)[key] && (form?.controls)[key]['controls'].length !== 0\">\n      <ng-template [ngTemplateOutlet]=\"columnLabelTemplate || defaultColumnLabelTemplate\"\n        [ngTemplateOutletContext]=\"{ form: form, key: key, controlLabels: controlLabels }\">\n      </ng-template>\n    </div>\n  </ng-container>\n\n  <ng-container *ngIf=\"(form?.controls)[key]\">\n    <div class=\"novo-control-group-row\"\n      *ngFor=\"let control of (form?.controls)[key]['controls']; let index = index\">\n      <ng-template [ngTemplateOutlet]=\"rowTemplate || defaultTemplate\"\n        [ngTemplateOutletContext]=\"{ form: form, formGroup: control, index: index, key: key, controls: controls }\">\n      </ng-template>\n    </div>\n  </ng-container>\n\n  <div class=\"novo-control-group-empty\"\n    *ngIf=\"(form?.controls)[key] && (form?.controls)[key]['controls'].length === 0\"\n    [attr.data-automation-id]=\"'novo-control-group-empty-' + key\">\n    {{ emptyMessage }}\n  </div>\n\n  <div *ngIf=\"add\" class=\"novo-control-group-footer\">\n    <novo-button type=\"button\" theme=\"dialogue\" icon=\"add-thin\" side=\"left\" (click)=\"onClickAdd()\"\n      [attr.data-automation-id]=\"'novo-control-group-bottom-add-' + key\" index=\"-1\">\n      {{ add?.label }}\n    </novo-button>\n    <!-- <novo-button *ngIf=\"editState==='editing'\" type=\"button\" theme=\"dialogue\" icon=\"close\" side=\"left\"\n                  (click)=\"onClickCancel()\" [attr.data-automation-id]=\"'novo-control-group-bottom-cancel-' + key\"\n                  index=\"-1\">\n                {{ 'cancel' }}\n                </novo-button>\n                  <novo-button *ngIf=\"editState==='editing'\" type=\"button\" theme=\"dialogue\" icon=\"check\" side=\"left\"\n                  (click)=\"onClickSave()\" [attr.data-automation-id]=\"'novo-control-group-bottom-save-' + key\"\n                  index=\"-1\">\n                {{ add?.label }}\n                </novo-button> -->\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: FormUtils }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { appearance: [{
                type: Input
            }], vertical: [{
                type: Input
            }], stacked: [{
                type: Input
            }], add: [{
                type: Input
            }], remove: [{
                type: Input
            }], edit: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], form: [{
                type: Input
            }], controls: [{
                type: Input
            }], key: [{
                type: Input
            }], label: [{
                type: Input
            }], description: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], icon: [{
                type: Input
            }], editIcon: [{
                type: Input
            }], removeIcon: [{
                type: Input
            }], initialValue: [{
                type: Input
            }], canEdit: [{
                type: Input
            }], canRemove: [{
                type: Input
            }], shouldRemove: [{
                type: Input
            }], rowTemplate: [{
                type: Input
            }], columnLabelTemplate: [{
                type: Input
            }], onRemove: [{
                type: Output
            }], onEdit: [{
                type: Output
            }], onAdd: [{
                type: Output
            }], change: [{
                type: Output
            }] } });

const NOVO_RADIO_GROUP = new InjectionToken('RadioGroupComponent');

// NG2
// make radio-buttons ids unique
let nextId$2 = 0;
// Value accessor for the component (supports ngModel)
const RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoRadioElement),
    multi: true,
};
class NovoRadioElement {
    constructor(radioGroup, ref) {
        this.radioGroup = radioGroup;
        this.ref = ref;
        this._uniqueId = `novo-radio-${++nextId$2}`;
        this.id = this._uniqueId;
        this.name = this._uniqueId;
        this.tabindex = 0;
        this.vertical = false;
        this.button = false;
        this.theme = 'secondary';
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._checked = false;
        this._value = false;
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        this.radioGroup = radioGroup;
    }
    get checked() {
        return this._checked;
    }
    set checked(value) {
        value = !!value;
        if (this._checked !== value) {
            this._checked = value;
            if (this._checked && this.radioGroup && this.radioGroup.value !== this.value) {
                this.radioGroup.value = this.value;
            }
            this.onChangeCallback(this._value);
        }
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            if (this.radioGroup) {
                this._checked = this.radioGroup.value === this.value;
            }
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled || (this.radioGroup != null && this.radioGroup.disabled);
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        if (this.radioGroup) {
            this.checked = this.radioGroup.value === this._value;
            this.vertical = this.radioGroup.appearance === 'vertical';
            this.name = this.radioGroup.name;
        }
    }
    _onInputChange(event) {
        event.stopPropagation();
        this.change.emit(event);
        this.checked = true;
        if (this.radioGroup) {
            this.radioGroup.value = this.value;
        }
    }
    writeValue(value) {
        this.value = value;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
}
NovoRadioElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioElement, deps: [{ token: NOVO_RADIO_GROUP, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoRadioElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoRadioElement, selector: "novo-radio", inputs: { id: "id", name: "name", tabindex: "tabindex", vertical: "vertical", label: "label", button: "button", theme: "theme", size: "size", icon: "icon", color: "color", checked: "checked", value: "value", disabled: "disabled" }, outputs: { change: "change", blur: "blur", focus: "focus" }, host: { properties: { "class.vertical": "vertical", "class.disabled": "this.disabled" } }, providers: [RADIO_VALUE_ACCESSOR], ngImport: i0, template: `
    <input
      type="radio"
      [id]="id"
      [name]="name"
      [checked]="checked"
      [tabIndex]="tabindex"
      [disabled]="disabled"
      (focus)="focus.emit($event)"
      (blur)="blur.emit($event)"
      (change)="_onInputChange($event)"
    />
    <label [attr.for]="id" [class.disabled]="disabled">
      <novo-button
        *ngIf="button"
        [ngClass]="{ unchecked: !checked, checked: checked, 'has-icon': !!icon }"
        [theme]="theme"
        [color]="checked ? color : null"
        [icon]="icon"
        [size]="size"
      >
        {{ label }}
      </novo-button>
      <div *ngIf="!button" class="novo-radio-button-label">
        <i [ngClass]="{ 'bhi-radio-empty': !checked, 'bhi-radio-filled': checked }"></i>
        {{ label }}
        <ng-content></ng-content>
      </div>
    </label>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-radio',
                    providers: [RADIO_VALUE_ACCESSOR],
                    template: `
    <input
      type="radio"
      [id]="id"
      [name]="name"
      [checked]="checked"
      [tabIndex]="tabindex"
      [disabled]="disabled"
      (focus)="focus.emit($event)"
      (blur)="blur.emit($event)"
      (change)="_onInputChange($event)"
    />
    <label [attr.for]="id" [class.disabled]="disabled">
      <novo-button
        *ngIf="button"
        [ngClass]="{ unchecked: !checked, checked: checked, 'has-icon': !!icon }"
        [theme]="theme"
        [color]="checked ? color : null"
        [icon]="icon"
        [size]="size"
      >
        {{ label }}
      </novo-button>
      <div *ngIf="!button" class="novo-radio-button-label">
        <i [ngClass]="{ 'bhi-radio-empty': !checked, 'bhi-radio-filled': checked }"></i>
        {{ label }}
        <ng-content></ng-content>
      </div>
    </label>
  `,
                    host: {
                        '[class.vertical]': 'vertical',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_RADIO_GROUP]
                }, {
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{
                type: Input
            }], name: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], vertical: [{
                type: Input
            }], label: [{
                type: Input
            }], button: [{
                type: Input
            }], theme: [{
                type: Input
            }], size: [{
                type: Input
            }], icon: [{
                type: Input
            }], color: [{
                type: Input
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], checked: [{
                type: Input
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.disabled']
            }] } });

// make radio-button-group ids unique
let nextId$1 = 0;
// Value accessor for the component (supports ngModel)
const RADIOGROUP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoRadioGroup),
    multi: true,
};
// Boilerplate for applying mixins
class NovoRadioGroupBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const NovoRadioGroupMixins = mixinErrorState(NovoRadioGroupBase);
class NovoRadioGroup extends NovoRadioGroupMixins {
    constructor() {
        super(...arguments);
        this._uniqueId = `novo-radio-group-${++nextId$1}`;
        /** Tab index for the chip list. */
        this._tabIndex = 0;
        /** User defined tab index. */
        this._userTabIndex = null;
        this.controlType = 'radio-group';
        /** @docs-private Implemented as part of NovoFieldControl. */
        this.lastKeyValue = null;
        this.id = this._uniqueId;
        this.tabindex = 0;
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this._name = this._uniqueId;
        this._value = false;
        this._required = false;
        this._disabled = false;
        this._appearance = 'horizontal';
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._updateRadioButtonAppearance();
        }
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this._value !== value) {
            this._value = value;
            this._updateSelectedRadioFromValue();
            this.onChangeCallback(this._value);
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (this._name !== value) {
            this._updateRadioButtonNames();
        }
    }
    get disabled() {
        return this.ngControl ? !!this.ngControl.disabled : this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._updateRadioButtonDisabled();
    }
    /**
     * Implemented as part of NovoFieldControl.
     * @docs-private
     */
    get required() {
        return this._required;
    }
    set required(value) {
        this._required = coerceBooleanProperty(value);
        this.stateChanges.next();
    }
    /** Implemented as part of NovoFieldControl. */
    get placeholder() {
        return this._placeholder;
    }
    set placeholder(value) {
        this._placeholder = value;
    }
    get selected() {
        return this._selected;
    }
    ngAfterContentInit() {
        this._updateRadioButtonAppearance();
        this._updateRadioButtonNames();
        this._updateSelectedRadioFromValue();
    }
    writeValue(value) {
        this.value = value;
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    _updateRadioButtonAppearance() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.vertical = this.appearance === 'vertical';
            });
        }
    }
    _updateRadioButtonNames() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.name = this.name;
            });
        }
    }
    _updateRadioButtonDisabled() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.disabled = this.disabled;
            });
        }
    }
    _updateSelectedRadioFromValue() {
        if (this._radios) {
            this._radios.forEach((radio) => {
                radio.checked = this.value === radio.value;
                if (radio.checked) {
                    this._selected = radio;
                }
            });
        }
    }
    /** Whether any radio buttons has focus. */
    get focused() {
        // todo: implement this.
        return false;
    }
    /** Implemented as part of NovoFieldControl. */
    get empty() {
        return this.value === null;
    }
    /** Implemented as part of NovoFieldControl. */
    get shouldLabelFloat() {
        return !this.empty || this.focused;
    }
    /** Implemented as part of NovoFieldControl. */
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    /** Implemented as part of NovoFieldControl. */
    onContainerClick(event) {
        this.focus();
    }
    /**
     * Focuses the first non-disabled chip in this chip list, or the associated input when there
     * are no eligible chips.
     */
    focus(options) {
        if (this.disabled) {
            return;
        }
        // TODO
    }
}
NovoRadioGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioGroup, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoRadioGroup.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoRadioGroup, selector: "novo-radio-group", inputs: { id: "id", tabindex: "tabindex", errorStateMatcher: "errorStateMatcher", appearance: "appearance", value: "value", name: "name", disabled: "disabled", required: "required", placeholder: "placeholder" }, outputs: { change: "change", blur: "blur" }, host: { properties: { "class.novo-radio-group-appearance-horizontal": "appearance==\"horizontal\"", "class.novo-radio-group-appearance-vertical": "appearance==\"vertical\"", "class.disabled": "this.disabled" }, classAttribute: "novo-radio-group" }, providers: [
        RADIOGROUP_VALUE_ACCESSOR,
        { provide: NOVO_RADIO_GROUP, useExisting: NovoRadioGroup },
        { provide: NovoFieldControl, useExisting: NovoRadioGroup },
    ], queries: [{ propertyName: "_radios", predicate: i0.forwardRef(function () { return NovoRadioElement; }), descendants: true }], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioGroup, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-radio-group',
                    providers: [
                        RADIOGROUP_VALUE_ACCESSOR,
                        { provide: NOVO_RADIO_GROUP, useExisting: NovoRadioGroup },
                        { provide: NovoFieldControl, useExisting: NovoRadioGroup },
                    ],
                    template: '<ng-content></ng-content>',
                    host: {
                        class: 'novo-radio-group',
                        '[class.novo-radio-group-appearance-horizontal]': 'appearance=="horizontal"',
                        '[class.novo-radio-group-appearance-vertical]': 'appearance=="vertical"',
                    },
                }]
        }], propDecorators: { id: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], errorStateMatcher: [{
                type: Input
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], _radios: [{
                type: ContentChildren,
                args: [forwardRef(() => NovoRadioElement), { descendants: true }]
            }], appearance: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.disabled']
            }, {
                type: Input
            }], required: [{
                type: Input
            }], placeholder: [{
                type: Input
            }] } });

// NG2
class QuickNoteResults extends PickerResults {
    constructor(element, labels, ref) {
        super(element, labels, ref);
        this.labels = labels;
        // Mode that the quick note is in for tagging
        this.taggingMode = '';
    }
    get term() {
        return this._term;
    }
    set term(value) {
        this._term = value.searchTerm;
        this.taggingMode = value.taggingMode;
        this.hasError = false;
        this.isLoading = true;
        this.search(value, this.taggingMode).subscribe((results) => {
            this.matches = this.isStatic ? this.filterData(results) : results;
            this.isLoading = false;
        }, () => {
            this.hasError = true;
            this.isLoading = false;
        });
    }
    search(term, taggingMode) {
        const searchCall = this.config.options[taggingMode];
        return from(new Promise((resolve, reject) => {
            // Check if there is match data
            if (searchCall) {
                // Resolve the data
                if (Array.isArray(searchCall)) {
                    this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(this.structureArray(searchCall));
                }
                else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) ||
                    Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                    this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall.then(this.structureArray.bind(this)).then(resolve, reject);
                }
                else if (typeof searchCall === 'function') {
                    this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall(term).then(this.structureArray.bind(this)).then(resolve, reject);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    }
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    structureArray(collection) {
        if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
            return collection.map((item) => {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return collection.map((data) => {
            const value = this.config.field ? data[this.config.field[this.taggingMode]] : data.value || data;
            const label = this.config.format ? Helpers.interpolate(this.config.format[this.taggingMode], data) : data.label || String(value);
            return { value, label, data };
        });
    }
    /**
     * @name selectMatch
     * @param event
     *
     * @description
     */
    selectMatch(event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        const selected = this.activeMatch;
        if (selected) {
            this.parent.onSelected(this.taggingMode, selected);
            this.parent.hideResults();
        }
        return false;
    }
}
QuickNoteResults.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QuickNoteResults, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
QuickNoteResults.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: QuickNoteResults, selector: "quick-note-results", host: { classAttribute: "active" }, usesInheritance: true, ngImport: i0, template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content>
          <p [innerHtml]="match.label | highlight:term"></p>
        </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.quickNoteError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.quickNoteEmpty }}</p>
  `, isInline: true, components: [{ type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "highlight": HighlightPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QuickNoteResults, decorators: [{
            type: Component,
            args: [{
                    selector: 'quick-note-results',
                    host: {
                        class: 'active',
                    },
                    template: `
    <novo-loading theme="line" *ngIf="isLoading && !matches.length"></novo-loading>
    <novo-list *ngIf="matches.length > 0">
      <novo-list-item
        *ngFor="let match of matches"
        (click)="selectMatch($event)"
        [class.active]="match === activeMatch"
        (mouseenter)="selectActive(match)"
      >
        <item-content>
          <p [innerHtml]="match.label | highlight:term"></p>
        </item-content>
      </novo-list-item>
    </novo-list>
    <p class="picker-error" *ngIf="hasError">{{ labels.quickNoteError }}</p>
    <p class="picker-null" *ngIf="!isLoading && !matches.length && !hasError">{{ labels.quickNoteEmpty }}</p>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; } });

// NG2
// Value accessor for the component (supports ngModel)
const QUICK_NOTE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => QuickNoteElement),
    multi: true,
};
class QuickNoteElement extends OutsideClick {
    constructor(zone, element, componentUtils) {
        super(element);
        this.zone = zone;
        this.componentUtils = componentUtils;
        this.startupFocus = false;
        // Emitter for selects
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.change = new EventEmitter();
        this.placeholderVisible = false;
        this._placeholderElement = null;
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        // Bind to the active change event from the OutsideClick
        this.onActiveChange.subscribe((active) => {
            if (!active) {
                setTimeout(() => {
                    this.hideResults();
                });
            }
        });
    }
    ngOnInit() {
        // Make sure we have a proper config
        if (!this.config) {
            throw new Error('No config set for QuickNote!');
        }
        // Make sure that we have triggers
        if (!this.config.triggers) {
            throw new Error('QuickNote config must supply triggers!');
        }
        // Make sure that we have options
        if (!this.config.options) {
            throw new Error('QuickNote config must supply options!');
        }
        // Allow for callers to use a custom results template class in the config
        this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
    }
    ngOnDestroy() {
        // Tear down the CKEditor instance
        if (this.ckeInstance) {
            this.ckeInstance.focusManager.blur(true); // Remove focus from editor
            setTimeout(() => {
                this.ckeInstance.removeAllListeners();
                CKEDITOR.instances[this.ckeInstance.name].destroy();
                this.ckeInstance.destroy();
                this.ckeInstance = null;
            });
        }
    }
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     */
    ngAfterViewInit() {
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // Replace the textarea with an instance of CKEditor
        this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
        // Set initial value of the note in the editor
        this.writeValue(this.model);
        // Connect to the key event in CKEditor for showing results dropdown
        this.ckeInstance.on('key', (event) => {
            if (!this.onKey(event.data.domEvent.$)) {
                event.cancel();
            }
        });
        // Connect to the change event in CKEditor for debouncing user modifications
        this.ckeInstance.on('change', () => {
            // Debounce update
            if (this.debounceTimeout) {
                clearTimeout(this.debounceTimeout);
            }
            this.debounceTimeout = setTimeout(() => {
                // Run within the context of this angular element since we don't need to cancel event
                this.zone.run(() => {
                    this.onValueChange();
                });
                this.debounceTimeout = null;
            }, 250);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('blur', (event) => {
            this.showPlaceholder();
            this.blur.emit(event);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('focus', (event) => {
            this.hidePlaceholder();
            this.focus.emit(event);
        });
        // Show placeholder if the note is empty, after the editor is instantiated
        this.ckeInstance.on('instanceReady', (event) => {
            this.showPlaceholder();
            // Set editor to readOnly
            if (this.config.readOnly) {
                this.ckeInstance.setReadOnly(this.config.readOnly);
            }
        });
    }
    // Set touched on blur
    onTouched(event) {
        this.onModelTouched();
    }
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param model A model that has a note (html content) and references (array of objects)
     */
    writeValue(model) {
        // Set value of the model
        if (model && (model.references || model.note)) {
            this.model = {
                note: model.note || '',
                references: model.references || {},
            };
        }
        else {
            this.model = {
                note: model,
                references: {},
            };
        }
        // Set the note html value in the editor
        if (this.ckeInstance) {
            this.ckeInstance.setData(this.model.note);
        }
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     */
    static defaultRenderer(symbol, item) {
        return `<a>${symbol}${item.label}</a>`;
    }
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     */
    getRenderer(taggingMode) {
        return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
    }
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @param event The key press event
     * @return true to allow the event to occur, false to cancel the event
     */
    onKey(event) {
        if (event.key) {
            if (this.quickNoteResults) {
                // Hide results on escape key
                if (event.key === "Escape" /* Escape */) {
                    this.zone.run(() => {
                        this.hideResults();
                    });
                    return false;
                }
                // Navigation inside the results
                if (event.key === "ArrowUp" /* ArrowUp */) {
                    this.zone.run(() => {
                        this.quickNoteResults.instance.prevActiveMatch();
                    });
                    return false;
                }
                if (event.key === "ArrowDown" /* ArrowDown */) {
                    this.zone.run(() => {
                        this.quickNoteResults.instance.nextActiveMatch();
                    });
                    return false;
                }
                if (event.key === "Enter" /* Enter */) {
                    this.zone.run(() => {
                        this.quickNoteResults.instance.selectActiveMatch();
                    });
                    return false;
                }
            }
            else {
                // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                const triggers = this.config.triggers || {};
                Object.keys(triggers).forEach((key) => {
                    const trigger = triggers[key] || {};
                    if (event.key === trigger) {
                        this.isTagging = true;
                        this.taggingMode = key;
                    }
                });
            }
        }
        return true;
    }
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     */
    onValueChange() {
        // Get the html text in CKEditor
        let value = this.ckeInstance.getData();
        // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
        const regex = new RegExp(String.fromCharCode(8203), 'g');
        value = value.replace(regex, '');
        // Make sure that any references in the model are still valid
        this.validateReferences();
        // Possibly show results if the user has entered a search term
        this.showResults();
        // Propagate change to ngModel for form validation, and send null if the note is empty
        let newModel = null;
        if (value) {
            newModel = {
                note: value,
                references: this.model.references,
            };
        }
        // Inform listeners to the ngModel change event that something has changed
        this.onModelChange(newModel);
        // Inform listeners of the `@Output() change` event that the model has been updated
        this.change.emit(newModel);
        // Inform listeners to the ngModel touched event that something has changed
        this.onTouched();
    }
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     */
    showResults() {
        if (this.isTagging) {
            const searchTerm = this.getSearchTerm();
            if (searchTerm.length) {
                // Update Matches
                if (this.quickNoteResults) {
                    // Update existing list
                    this.quickNoteResults.instance.term = {
                        searchTerm,
                        taggingMode: this.taggingMode,
                    };
                }
                else {
                    // Create the results DOM element
                    this.quickNoteResults = this.componentUtils.append(this.resultsComponent, this.results);
                    this.quickNoteResults.instance.parent = this;
                    this.quickNoteResults.instance.config = this.config;
                    this.quickNoteResults.instance.term = {
                        searchTerm,
                        taggingMode: this.taggingMode,
                    };
                    this.positionResultsDropdown();
                }
            }
            else if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
            // Tell the OutsideClick base class to start listening for an outside clicks
            this.toggleActive(null, true);
        }
    }
    /**
     * Deletes the picker results from the DOM.
     */
    hideResults() {
        this.isTagging = false;
        if (this.quickNoteResults) {
            this.quickNoteResults.destroy();
            this.quickNoteResults = null;
        }
    }
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @param taggingMode - type of tags we are looking for
     * @param selected - selected object from the picker that has a label and value
     */
    onSelected(taggingMode, selected) {
        // Turn off tagging
        this.isTagging = false;
        // Replace searchTerm with link
        const symbol = this.config.triggers[taggingMode];
        const renderer = this.getRenderer(taggingMode);
        const renderedText = renderer(symbol, selected);
        this.replaceWordAtCursor(renderedText);
        // Add the new reference, if it doesn't already exist
        this.model.references = this.model.references || {};
        this.model.references[taggingMode] = this.model.references[taggingMode] || [];
        const matchingItems = this.model.references[taggingMode].filter((item) => JSON.stringify(item) === JSON.stringify(selected));
        if (matchingItems.length === 0) {
            this.model.references[taggingMode].push(selected);
        }
        // Update the quick note with the changes due to the user's selection of an item in the dropdown
        this.onValueChange();
    }
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     */
    getSearchTerm() {
        let word = this.getWordAtCursor().trim();
        if (this.isTagging) {
            const symbol = this.config.triggers[this.taggingMode];
            if (!word.includes(symbol)) {
                this.hideResults();
                return '';
            }
            word = word.slice(word.indexOf(symbol) + symbol.length);
        }
        return word;
    }
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @returns plain text string (removes all html formatting)
     */
    getWordAtCursor() {
        const range = this.ckeInstance.getSelection().getRanges()[0];
        const start = range.startContainer;
        if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
            const text = start.getText();
            const symbol = this.config.triggers[this.taggingMode];
            let wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
            if (wordStart > 0) {
                const beforeSymbol = text.charAt(wordStart - 1);
                // We don't want to trigger the lookup call unless the symbol was preceded by whitespace
                if (beforeSymbol !== '\u200B' && /\S/.test(beforeSymbol)) {
                    return '';
                }
            }
            else if (start.hasPrevious() && /\S$/.test(start.getPrevious().getText())) {
                // When wordStart is <= 0, we need to check the previous node's text to see if it ended with whitespace or not
                return '';
            }
            let wordEnd = text.indexOf(' ', range.startOffset + 1);
            if (wordStart === -1) {
                wordStart = 0;
            }
            if (wordEnd === -1) {
                wordEnd = text.length;
            }
            return text.substring(wordStart, wordEnd);
        }
        // Selection starts at the 0 index of the text node or there's no previous text node in contents
        return '';
    }
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     */
    replaceWordAtCursor(newWord) {
        const originalWord = this.getWordAtCursor().trim();
        const range = this.ckeInstance.getSelection().getRanges()[0];
        const start = range.startContainer;
        const parentNode = start.getParent();
        if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
            const line = parentNode.getHtml();
            const index = line.lastIndexOf(originalWord);
            if (index >= 0) {
                // Add a space after the replaced word so that multiple references can be added back to back
                const newLine = line.substring(0, index) + newWord + ' ' + line.substring(index + originalWord.length);
                parentNode.setHtml(newLine);
                // Place selection at the end of the line
                range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                this.ckeInstance.getSelection().selectRanges([range]);
            }
        }
    }
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     */
    validateReferences() {
        let html = this.ckeInstance.document.getBody().getHtml();
        // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
        // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
        const ampRegex = new RegExp('&amp;', 'g');
        html = html.replace(ampRegex, '&');
        Object.keys(this.model.references).forEach((taggingMode) => {
            const array = this.model.references[taggingMode] || [];
            const symbol = this.config.triggers[taggingMode];
            const renderer = this.getRenderer(taggingMode);
            this.model.references[taggingMode] = array.filter((item) => {
                const renderedText = renderer(symbol, item);
                return html.includes(renderedText);
            });
            // If no references, then delete the key
            if (this.model.references[taggingMode].length === 0) {
                delete this.model.references[taggingMode];
            }
        });
    }
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     */
    getCKEditorConfig() {
        // Use the height of the wrapper element to set the initial height of the editor, then
        // set it to 100% to allow the editor to resize using the grippy.
        const editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
        this.wrapper.nativeElement.style.setProperty('height', '100%');
        return {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            height: editorHeight,
            startupFocus: this.startupFocus,
            removePlugins: 'liststyle,tabletools,contextmenu',
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
    }
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     */
    getCursorPosition() {
        const range = this.ckeInstance.getSelection().getRanges()[0];
        const parentElement = range.startContainer.$.parentElement;
        const editorElement = this.ckeInstance.editable().$;
        // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
        // be inserted in order to locate the cursor position.
        const cursorElement = document.createElement('img');
        cursorElement.setAttribute('src', 'null');
        cursorElement.setAttribute('width', '0');
        cursorElement.setAttribute('height', '0');
        parentElement.appendChild(cursorElement);
        const cursorPosition = {
            top: cursorElement.offsetTop - editorElement.scrollTop,
            left: cursorElement.offsetLeft - editorElement.scrollLeft,
        };
        cursorElement.remove();
        return cursorPosition;
    }
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     */
    positionResultsDropdown() {
        const MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
        const MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
        const cursorPosition = this.getCursorPosition();
        let marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
        // Check that the margin is within the visible bounds
        marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
        marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
        // Set the margin-top of the dropdown
        this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
    }
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     */
    getContentHeight() {
        let contentHeight = 0;
        if (this.ckeInstance.ui &&
            this.ckeInstance.ui.contentsElement &&
            this.ckeInstance.ui.contentsElement.$ &&
            this.ckeInstance.ui.contentsElement.$.style) {
            const cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
            if (cssText.indexOf('height: ') !== -1) {
                let height = cssText.split('height: ')[1];
                height = height.split('px')[0];
                contentHeight = parseInt(height, 10);
            }
        }
        return contentHeight;
    }
    /**
     * Show the placeholder text if the editor is empty
     */
    showPlaceholder() {
        if (!this.ckeInstance.getData() && !this.startupFocus) {
            this.ckeInstance.editable().getParent().$.appendChild(this.placeholderElement);
            this.placeholderVisible = true;
        }
    }
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     */
    hidePlaceholder() {
        if (this.placeholderVisible) {
            this.ckeInstance.editable().getParent().$.removeChild(this.placeholderElement);
            this.placeholderVisible = false;
        }
    }
    /**
     * Get or create the single placeholder object that is constructed only when needed.
     */
    get placeholderElement() {
        if (!this._placeholderElement) {
            this._placeholderElement = document.createElement('div');
            this._placeholderElement.className = 'placeholder';
            this._placeholderElement.style.cssText =
                'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
            this._placeholderElement.textContent = this.placeholder;
        }
        return this._placeholderElement;
    }
}
QuickNoteElement.TOOLBAR_HEIGHT = 40; // in pixels - configured by stylesheet
QuickNoteElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QuickNoteElement, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: ComponentUtils }], target: i0.ɵɵFactoryTarget.Component });
QuickNoteElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: QuickNoteElement, selector: "novo-quick-note", inputs: { config: "config", startupFocus: "startupFocus", placeholder: "placeholder" }, outputs: { focus: "focus", blur: "blur", change: "change" }, providers: [QUICK_NOTE_VALUE_ACCESSOR], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true, static: true }, { propertyName: "host", first: true, predicate: ["host"], descendants: true, static: true }, { propertyName: "results", first: true, predicate: ["results"], descendants: true, read: ViewContainerRef, static: true }], usesInheritance: true, ngImport: i0, template: ` <div class="quick-note-wrapper" #wrapper><textarea #host></textarea> <span #results></span></div> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QuickNoteElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-quick-note',
                    providers: [QUICK_NOTE_VALUE_ACCESSOR],
                    template: ` <div class="quick-note-wrapper" #wrapper><textarea #host></textarea> <span #results></span></div> `,
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: ComponentUtils }]; }, propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper', { static: true }]
            }], host: [{
                type: ViewChild,
                args: ['host', { static: true }]
            }], results: [{
                type: ViewChild,
                args: ['results', { read: ViewContainerRef, static: true }]
            }], config: [{
                type: Input
            }], startupFocus: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], change: [{
                type: Output
            }] } });

class NovoControlTemplates {
    constructor(templates) {
        this.templates = templates;
    }
    ngAfterViewInit() {
        if (this.defaultTemplates && this.defaultTemplates.length) {
            this.defaultTemplates.forEach((template) => {
                this.templates.addDefault(template.name, template.template);
            });
        }
    }
}
NovoControlTemplates.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoControlTemplates, deps: [{ token: NovoTemplateService }], target: i0.ɵɵFactoryTarget.Component });
NovoControlTemplates.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoControlTemplates, selector: "novo-control-templates", viewQueries: [{ propertyName: "defaultTemplates", predicate: NovoTemplate, descendants: true }], ngImport: i0, template: `
    <!---Readonly--->
    <ng-template novoTemplate="read-only" let-form="form" let-control>
      <div>{{ form.getRawValue()[control.key] }}</div>
    </ng-template>
    <!--Textbox--->
    <ng-template novoTemplate="textbox" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container novo-control-input-with-label"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <input
          *ngIf="control?.type !== 'number' && control?.textMaskEnabled"
          [textMask]="control.maskOptions"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          autocomplete
        />
        <input
          *ngIf="control?.type !== 'number' && !control?.textMaskEnabled"
          [class.maxlength-error]="errors?.maxlength"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          [maxlength]="control?.maxlength"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          autocomplete
        />
        <input
          *ngIf="control?.type === 'number' && control?.subType !== 'percentage'"
          [class.maxlength-error]="errors?.maxlength"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (keydown)="methods.restrictKeys($event)"
          (input)="methods.emitChange($event)"
          [maxlength]="control?.maxlength"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          step="any"
          (mousewheel)="numberInput.blur()"
          #numberInput
        />
        <!-- the percentage input does not use formControlName like a normal reactive input because instead of
          setting the floating point value directly, it is multiplied by 100 into a percentage value -->
        <input
          *ngIf="control?.type === 'number' && control?.subType === 'percentage'"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (keydown)="methods.restrictKeys($event)"
          [value]="control?.percentValue"
          [disabled]="control?.readOnly"
          (input)="methods.handlePercentChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          step="any"
          (mousewheel)="percentInput.blur()"
          #percentInput
        />
        <label class="input-label" *ngIf="control?.subType === 'currency'">{{ control.currencyFormat }}</label>
        <label class="input-label" *ngIf="control?.subType === 'percentage'">%</label>
      </div>
    </ng-template>

    <!--Textarea--->
    <ng-template novoTemplate="text-area" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        class="textarea-container"
        [formGroup]="form"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <textarea
          [class.maxlength-error]="errors?.maxlength"
          [name]="control.key"
          [attr.id]="control.key"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          autosize
          (input)="methods.handleTextAreaInput($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [maxlength]="control?.maxlength"
        ></textarea>
      </div>
    </ng-template>

    <!--Editor-->
    <ng-template novoTemplate="editor" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-editor
          [name]="control.key"
          [formControlName]="control.key"
          [startupFocus]="control.startupFocus"
          [minimal]="control.minimal"
          [fileBrowserImageUploadUrl]="control.fileBrowserImageUploadUrl"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [config]="control.config"
        ></novo-editor>
      </div>
    </ng-template>

    <!--AceEditor-->
    <ng-template novoTemplate="ace-editor" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-ace-editor
          [name]="control.key"
          [formControlName]="control.key"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
        ></novo-ace-editor>
      </div>
    </ng-template>

    <!--HTML5 Select-->
    <ng-template novoTemplate="native-select" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <select
          [id]="control.key"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        >
          <option *ngIf="control.placeholder" value="" disabled selected hidden>{{ control.placeholder }}</option>
          <option *ngFor="let opt of control.options" [value]="opt.key">{{ opt.value }}</option>
        </select>
      </div>
    </ng-template>

    <!--File-->
    <ng-template novoTemplate="file" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-file-input
          [formControlName]="control.key"
          [id]="control.key"
          [name]="control.key"
          [placeholder]="control.placeholder"
          [value]="control.value"
          [multiple]="control.multiple"
          [layoutOptions]="control.layoutOptions"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (edit)="methods.handleEdit($event)"
          (save)="methods.handleSave($event)"
          (delete)="methods.handleDelete($event)"
          (upload)="methods.handleUpload($event)"
        ></novo-file-input>
      </div>
    </ng-template>

    <!--Tiles-->
    <ng-template novoTemplate="tiles" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-tiles
          [options]="control.options"
          [formControlName]="control.key"
          (onChange)="methods.modelChange($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [controlDisabled]="control.disabled"
        ></novo-tiles>
      </div>
    </ng-template>

    <!--Picker-->
    <ng-template novoTemplate="picker" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form" class="novo-control-input-container">
        <novo-picker
          [config]="control.config"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [parentScrollSelector]="control.parentScrollSelector"
          *ngIf="!control.multiple"
          (select)="methods.modelChange($event)"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-picker>
        <novo-chips
          [source]="control.config"
          [type]="control.config.type"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [maxlength]="control?.maxlength"
          *ngIf="control.multiple && !control.config.columns"
          [closeOnSelect]="control.closeOnSelect"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-chips>
        <novo-row-chips
          [source]="control.config"
          [type]="control.config.type"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [maxlength]="control?.maxlength"
          *ngIf="control.multiple && control.config.columns"
          [closeOnSelect]="control.closeOnSelect"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-row-chips>
      </div>
    </ng-template>

    <!--Novo Select-->
    <ng-template novoTemplate="select" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-select
          [options]="control.options"
          [headerConfig]="control.headerConfig"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (onSelect)="methods.modelChange($event)"
        ></novo-select>
      </div>
    </ng-template>

    <!--Timezone -->
    <ng-template novoTemplate="timezone" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-select
          [options]="control.options"
          [headerConfig]="control.headerConfig"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          position="bottom"
          (onSelect)="methods.modelChange($event)"
        ></novo-select>
      </div>
    </ng-template>

    <!--Radio-->
    <ng-template novoTemplate="radio" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form" class="novo-control-input-container">
        <novo-radio-group [name]="control.key" [formControlName]="control.key">
          <novo-radio
            *ngFor="let option of control.options"
            [value]="option.value"
            [label]="option.label"
            [checked]="
              option.value === form.getRawValue()[control.key] ||
              (form.getRawValue()[control.key] && option.value === form.getRawValue()[control.key].id)
            "
            [tooltip]="control.tooltip"
            [tooltipPosition]="control.tooltipPosition"
            [tooltipSize]="control?.tooltipSize"
            [tooltipPreline]="control?.tooltipPreline"
            [removeTooltipArrow]="control?.removeTooltipArrow"
            [tooltipAutoPosition]="control?.tooltipAutoPosition"
            [button]="!!option.icon"
            [icon]="option.icon"
            [color]="option.color"
            [theme]="!!option.icon && !option.label ? 'icon' : 'secondary'"
            [attr.data-automation-id]="control.key + '-' + (option?.label || option?.value)"
          ></novo-radio>
        </novo-radio-group>
      </div>
    </ng-template>

    <!--Time-->
    <ng-template novoTemplate="time" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-time-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [military]="control.military"
        ></novo-time-picker-input>
      </div>
    </ng-template>

    <!--Native Input--->
    <ng-template novoTemplate="native-input" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container novo-control-input-with-label"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <input
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
        />
      </div>
    </ng-template>

    <!--Date-->
    <ng-template novoTemplate="date" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control.tooltip"
        [tooltipPosition]="control.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-date-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [start]="control.startDate"
          [end]="control.endDate"
          [format]="control.dateFormat"
          [allowInvalidDate]="control.allowInvalidDate"
          [textMaskEnabled]="control.textMaskEnabled"
          [placeholder]="control.placeholder"
          [weekStart]="control.weekStart"
          [disabledDateMessage]="control.disabledDateMessage"
          (focusEvent)="methods.handleFocus($event)"
          (blurEvent)="methods.handleBlur($event)"
          (changeEvent)="methods.emitChange($event)"
        ></novo-date-picker-input>
      </div>
    </ng-template>

    <!--Date and Time-->
    <ng-template novoTemplate="date-time" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control.tooltip"
        [tooltipPosition]="control.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-date-time-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [start]="control.startDate"
          [end]="control.endDate"
          [placeholder]="control.placeholder"
          [military]="control.military"
          [weekStart]="control.weekStart"
          (focusEvent)="methods.handleFocus($event)"
          (blurEvent)="methods.handleBlur($event)"
          (changeEvent)="methods.emitChange($event)"
        ></novo-date-time-picker-input>
      </div>
    </ng-template>

    <!--Address-->
    <ng-template novoTemplate="address" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-address
          [formControlName]="control.key"
          [config]="control?.config"
          [readOnly]="control?.readOnly"
          (change)="methods.handleAddressChange($event)"
          (focus)="methods.handleFocus($event.event, $event.field)"
          (blur)="methods.handleBlur($event.event, $event.field)"
          (validityChange)="methods.updateValidity()"
        ></novo-address>
      </div>
    </ng-template>

    <!--Checkbox-->
    <ng-template novoTemplate="checkbox" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-checkbox
          [formControlName]="control?.key"
          [name]="control?.key"
          [label]="control?.checkboxLabel"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [layoutOptions]="control?.layoutOptions"
        ></novo-checkbox>
      </div>
    </ng-template>

    <!--Switch-->
    <ng-template novoTemplate="switch" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-switch
          [formControlName]="control?.key"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-switch>
      </div>
    </ng-template>

    <!--Checklist-->
    <ng-template novoTemplate="checklist" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-check-list
          [formControlName]="control.key"
          [name]="control.key"
          [options]="control?.options"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (onSelect)="methods.modelChange($event)"
        ></novo-check-list>
      </div>
    </ng-template>

    <!--QuickNote-->
    <ng-template novoTemplate="quick-note" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-quick-note
          [formControlName]="control.key"
          [startupFocus]="control?.startupFocus"
          [placeholder]="control?.placeholder"
          [config]="control?.config"
          (change)="methods.modelChange($event)"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [tooltipPreline]="control?.tooltipPreline"
        ></novo-quick-note>
      </div>
    </ng-template>
  `, isInline: true, components: [{ type: NovoCKEditorElement, selector: "novo-editor", inputs: ["config", "debounce", "name", "minimal", "startupFocus", "fileBrowserImageUploadUrl", "disabled", "value"], outputs: ["change", "ready", "blur", "focus", "paste", "loaded"] }, { type: NovoAceEditor, selector: "novo-ace-editor", inputs: ["theme", "options", "mode", "name"], outputs: ["blur", "focus"] }, { type: NovoFileInputElement, selector: "novo-file-input", inputs: ["id", "tabindex", "errorStateMatcher", "multiple", "layoutOptions", "value", "dataFeatureId", "name", "disabled", "required", "placeholder"], outputs: ["edit", "save", "delete", "upload"] }, { type: NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }, { type: NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing"] }, { type: NovoChipsElement, selector: "chips,novo-chips", inputs: ["closeOnSelect", "placeholder", "source", "maxlength", "type", "disablePickerInput", "value"], outputs: ["changed", "focus", "blur", "typing"] }, { type: NovoRowChipsElement, selector: "novo-row-chips", inputs: ["closeOnSelect"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }, { type: NovoTimePickerInputElement, selector: "novo-time-picker-input", inputs: ["name", "placeholder", "military", "maskOptions", "disabled", "analog"], outputs: ["blurEvent", "focusEvent"] }, { type: NovoDatePickerInputElement, selector: "novo-date-picker-input", inputs: ["name", "start", "end", "placeholder", "maskOptions", "format", "textMaskEnabled", "allowInvalidDate", "disabled", "disabledDateMessage", "weekStart"], outputs: ["blurEvent", "focusEvent", "changeEvent"] }, { type: NovoDateTimePickerInputElement, selector: "novo-date-time-picker-input", inputs: ["name", "start", "end", "placeholder", "maskOptions", "military", "disabled", "format", "weekStart", "disabledDateMessage"], outputs: ["blurEvent", "focusEvent", "changeEvent"] }, { type: NovoAddressElement, selector: "novo-address", inputs: ["config", "readOnly"], outputs: ["change", "focus", "blur", "validityChange"] }, { type: NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { type: NovoSwitchElement, selector: "novo-switch", inputs: ["theme", "icons", "disabled"], outputs: ["onChange"] }, { type: NovoCheckListElement, selector: "novo-check-list", inputs: ["name", "options", "disabled"], outputs: ["onSelect"] }, { type: QuickNoteElement, selector: "novo-quick-note", inputs: ["config", "startupFocus", "placeholder"], outputs: ["focus", "blur", "change"] }], directives: [{ type: NovoTemplate, selector: "[novoTemplate]", inputs: ["type", "novoTemplate"] }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { type: NovoAutoSize, selector: "textarea[autosize]" }, { type: i4.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { type: i4.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i4.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoControlTemplates, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-control-templates',
                    template: `
    <!---Readonly--->
    <ng-template novoTemplate="read-only" let-form="form" let-control>
      <div>{{ form.getRawValue()[control.key] }}</div>
    </ng-template>
    <!--Textbox--->
    <ng-template novoTemplate="textbox" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container novo-control-input-with-label"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <input
          *ngIf="control?.type !== 'number' && control?.textMaskEnabled"
          [textMask]="control.maskOptions"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          autocomplete
        />
        <input
          *ngIf="control?.type !== 'number' && !control?.textMaskEnabled"
          [class.maxlength-error]="errors?.maxlength"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          [maxlength]="control?.maxlength"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          autocomplete
        />
        <input
          *ngIf="control?.type === 'number' && control?.subType !== 'percentage'"
          [class.maxlength-error]="errors?.maxlength"
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (keydown)="methods.restrictKeys($event)"
          (input)="methods.emitChange($event)"
          [maxlength]="control?.maxlength"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          step="any"
          (mousewheel)="numberInput.blur()"
          #numberInput
        />
        <!-- the percentage input does not use formControlName like a normal reactive input because instead of
          setting the floating point value directly, it is multiplied by 100 into a percentage value -->
        <input
          *ngIf="control?.type === 'number' && control?.subType === 'percentage'"
          [id]="control.key"
          [type]="control?.type"
          [placeholder]="control?.placeholder"
          (keydown)="methods.restrictKeys($event)"
          [value]="control?.percentValue"
          [disabled]="control?.readOnly"
          (input)="methods.handlePercentChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          step="any"
          (mousewheel)="percentInput.blur()"
          #percentInput
        />
        <label class="input-label" *ngIf="control?.subType === 'currency'">{{ control.currencyFormat }}</label>
        <label class="input-label" *ngIf="control?.subType === 'percentage'">%</label>
      </div>
    </ng-template>

    <!--Textarea--->
    <ng-template novoTemplate="text-area" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        class="textarea-container"
        [formGroup]="form"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <textarea
          [class.maxlength-error]="errors?.maxlength"
          [name]="control.key"
          [attr.id]="control.key"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          autosize
          (input)="methods.handleTextAreaInput($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [maxlength]="control?.maxlength"
        ></textarea>
      </div>
    </ng-template>

    <!--Editor-->
    <ng-template novoTemplate="editor" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-editor
          [name]="control.key"
          [formControlName]="control.key"
          [startupFocus]="control.startupFocus"
          [minimal]="control.minimal"
          [fileBrowserImageUploadUrl]="control.fileBrowserImageUploadUrl"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [config]="control.config"
        ></novo-editor>
      </div>
    </ng-template>

    <!--AceEditor-->
    <ng-template novoTemplate="ace-editor" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-ace-editor
          [name]="control.key"
          [formControlName]="control.key"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
        ></novo-ace-editor>
      </div>
    </ng-template>

    <!--HTML5 Select-->
    <ng-template novoTemplate="native-select" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <select
          [id]="control.key"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        >
          <option *ngIf="control.placeholder" value="" disabled selected hidden>{{ control.placeholder }}</option>
          <option *ngFor="let opt of control.options" [value]="opt.key">{{ opt.value }}</option>
        </select>
      </div>
    </ng-template>

    <!--File-->
    <ng-template novoTemplate="file" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-file-input
          [formControlName]="control.key"
          [id]="control.key"
          [name]="control.key"
          [placeholder]="control.placeholder"
          [value]="control.value"
          [multiple]="control.multiple"
          [layoutOptions]="control.layoutOptions"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (edit)="methods.handleEdit($event)"
          (save)="methods.handleSave($event)"
          (delete)="methods.handleDelete($event)"
          (upload)="methods.handleUpload($event)"
        ></novo-file-input>
      </div>
    </ng-template>

    <!--Tiles-->
    <ng-template novoTemplate="tiles" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-tiles
          [options]="control.options"
          [formControlName]="control.key"
          (onChange)="methods.modelChange($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [controlDisabled]="control.disabled"
        ></novo-tiles>
      </div>
    </ng-template>

    <!--Picker-->
    <ng-template novoTemplate="picker" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form" class="novo-control-input-container">
        <novo-picker
          [config]="control.config"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [parentScrollSelector]="control.parentScrollSelector"
          *ngIf="!control.multiple"
          (select)="methods.modelChange($event)"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-picker>
        <novo-chips
          [source]="control.config"
          [type]="control.config.type"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [maxlength]="control?.maxlength"
          *ngIf="control.multiple && !control.config.columns"
          [closeOnSelect]="control.closeOnSelect"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-chips>
        <novo-row-chips
          [source]="control.config"
          [type]="control.config.type"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [maxlength]="control?.maxlength"
          *ngIf="control.multiple && control.config.columns"
          [closeOnSelect]="control.closeOnSelect"
          (changed)="methods.modelChangeWithRaw($event)"
          (typing)="methods.handleTyping($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-row-chips>
      </div>
    </ng-template>

    <!--Novo Select-->
    <ng-template novoTemplate="select" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-select
          [options]="control.options"
          [headerConfig]="control.headerConfig"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (onSelect)="methods.modelChange($event)"
        ></novo-select>
      </div>
    </ng-template>

    <!--Timezone -->
    <ng-template novoTemplate="timezone" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-select
          [options]="control.options"
          [headerConfig]="control.headerConfig"
          [placeholder]="control.placeholder"
          [formControlName]="control.key"
          [tooltip]="control.tooltip"
          [tooltipPosition]="control.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          position="bottom"
          (onSelect)="methods.modelChange($event)"
        ></novo-select>
      </div>
    </ng-template>

    <!--Radio-->
    <ng-template novoTemplate="radio" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form" class="novo-control-input-container">
        <novo-radio-group [name]="control.key" [formControlName]="control.key">
          <novo-radio
            *ngFor="let option of control.options"
            [value]="option.value"
            [label]="option.label"
            [checked]="
              option.value === form.getRawValue()[control.key] ||
              (form.getRawValue()[control.key] && option.value === form.getRawValue()[control.key].id)
            "
            [tooltip]="control.tooltip"
            [tooltipPosition]="control.tooltipPosition"
            [tooltipSize]="control?.tooltipSize"
            [tooltipPreline]="control?.tooltipPreline"
            [removeTooltipArrow]="control?.removeTooltipArrow"
            [tooltipAutoPosition]="control?.tooltipAutoPosition"
            [button]="!!option.icon"
            [icon]="option.icon"
            [color]="option.color"
            [theme]="!!option.icon && !option.label ? 'icon' : 'secondary'"
            [attr.data-automation-id]="control.key + '-' + (option?.label || option?.value)"
          ></novo-radio>
        </novo-radio-group>
      </div>
    </ng-template>

    <!--Time-->
    <ng-template novoTemplate="time" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-time-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [placeholder]="control.placeholder"
          [military]="control.military"
        ></novo-time-picker-input>
      </div>
    </ng-template>

    <!--Native Input--->
    <ng-template novoTemplate="native-input" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container novo-control-input-with-label"
        [tooltip]="control?.tooltip"
        [tooltipPosition]="control?.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <input
          [formControlName]="control.key"
          [id]="control.key"
          [type]="control.type"
          [placeholder]="control?.placeholder"
          (input)="methods.emitChange($event)"
          (focus)="methods.handleFocus($event)"
          (blur)="methods.handleBlur($event)"
        />
      </div>
    </ng-template>

    <!--Date-->
    <ng-template novoTemplate="date" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control.tooltip"
        [tooltipPosition]="control.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-date-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [start]="control.startDate"
          [end]="control.endDate"
          [format]="control.dateFormat"
          [allowInvalidDate]="control.allowInvalidDate"
          [textMaskEnabled]="control.textMaskEnabled"
          [placeholder]="control.placeholder"
          [weekStart]="control.weekStart"
          [disabledDateMessage]="control.disabledDateMessage"
          (focusEvent)="methods.handleFocus($event)"
          (blurEvent)="methods.handleBlur($event)"
          (changeEvent)="methods.emitChange($event)"
        ></novo-date-picker-input>
      </div>
    </ng-template>

    <!--Date and Time-->
    <ng-template novoTemplate="date-time" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div
        [formGroup]="form"
        class="novo-control-input-container"
        [tooltip]="control.tooltip"
        [tooltipPosition]="control.tooltipPosition"
        [tooltipSize]="control?.tooltipSize"
        [tooltipPreline]="control?.tooltipPreline"
        [removeTooltipArrow]="control?.removeTooltipArrow"
        [tooltipAutoPosition]="control?.tooltipAutoPosition"
      >
        <novo-date-time-picker-input
          [attr.id]="control.key"
          [name]="control.key"
          [formControlName]="control.key"
          [start]="control.startDate"
          [end]="control.endDate"
          [placeholder]="control.placeholder"
          [military]="control.military"
          [weekStart]="control.weekStart"
          (focusEvent)="methods.handleFocus($event)"
          (blurEvent)="methods.handleBlur($event)"
          (changeEvent)="methods.emitChange($event)"
        ></novo-date-time-picker-input>
      </div>
    </ng-template>

    <!--Address-->
    <ng-template novoTemplate="address" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-address
          [formControlName]="control.key"
          [config]="control?.config"
          [readOnly]="control?.readOnly"
          (change)="methods.handleAddressChange($event)"
          (focus)="methods.handleFocus($event.event, $event.field)"
          (blur)="methods.handleBlur($event.event, $event.field)"
          (validityChange)="methods.updateValidity()"
        ></novo-address>
      </div>
    </ng-template>

    <!--Checkbox-->
    <ng-template novoTemplate="checkbox" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-checkbox
          [formControlName]="control?.key"
          [name]="control?.key"
          [label]="control?.checkboxLabel"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [layoutOptions]="control?.layoutOptions"
        ></novo-checkbox>
      </div>
    </ng-template>

    <!--Switch-->
    <ng-template novoTemplate="switch" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-switch
          [formControlName]="control?.key"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
        ></novo-switch>
      </div>
    </ng-template>

    <!--Checklist-->
    <ng-template novoTemplate="checklist" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-check-list
          [formControlName]="control.key"
          [name]="control.key"
          [options]="control?.options"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [tooltipPreline]="control?.tooltipPreline"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          (onSelect)="methods.modelChange($event)"
        ></novo-check-list>
      </div>
    </ng-template>

    <!--QuickNote-->
    <ng-template novoTemplate="quick-note" let-control let-form="form" let-errors="errors" let-methods="methods">
      <div [formGroup]="form">
        <novo-quick-note
          [formControlName]="control.key"
          [startupFocus]="control?.startupFocus"
          [placeholder]="control?.placeholder"
          [config]="control?.config"
          (change)="methods.modelChange($event)"
          [tooltip]="control?.tooltip"
          [tooltipPosition]="control?.tooltipPosition"
          [tooltipSize]="control?.tooltipSize"
          [removeTooltipArrow]="control?.removeTooltipArrow"
          [tooltipAutoPosition]="control?.tooltipAutoPosition"
          [tooltipPreline]="control?.tooltipPreline"
        ></novo-quick-note>
      </div>
    </ng-template>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoTemplateService }]; }, propDecorators: { defaultTemplates: [{
                type: ViewChildren,
                args: [NovoTemplate]
            }] } });

// NG
class NovoFieldsetHeaderElement {
    constructor() {
        this.icon = 'section';
    }
}
NovoFieldsetHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldsetHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoFieldsetHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldsetHeaderElement, selector: "novo-fieldset-header", inputs: { title: "title", icon: "icon" }, host: { classAttribute: "novo-fieldset-header" }, ngImport: i0, template: `
    <novo-title smaller>
      <novo-icon>{{ icon?.replace('bhi-', '') }}</novo-icon
      >{{ title }}
    </novo-title>
  `, isInline: true, components: [{ type: NovoTitle, selector: "novo-title,[novo-title]" }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldsetHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-fieldset-header',
                    template: `
    <novo-title smaller>
      <novo-icon>{{ icon?.replace('bhi-', '') }}</novo-icon
      >{{ title }}
    </novo-title>
  `,
                    host: {
                        class: 'novo-fieldset-header',
                    },
                }]
        }], propDecorators: { title: [{
                type: Input
            }], icon: [{
                type: Input
            }] } });
class NovoFieldsetElement {
    constructor() {
        this.controls = [];
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
        this.hidden = false;
    }
}
NovoFieldsetElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldsetElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoFieldsetElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFieldsetElement, selector: "novo-fieldset", inputs: { controls: "controls", form: "form", title: "title", icon: "icon", index: "index", autoFocus: "autoFocus", isEmbedded: "isEmbedded", isInlineEmbedded: "isInlineEmbedded", hidden: "hidden" }, ngImport: i0, template: `
    <div class="novo-fieldset-container">
      <novo-fieldset-header
        [icon]="icon"
        [title]="title"
        *ngIf="title"
        [class.embedded]="isEmbedded"
        [class.inline-embedded]="isInlineEmbedded"
        [class.hidden]="hidden"
      ></novo-fieldset-header>
      <ng-container *ngFor="let control of controls; let controlIndex = index">
        <div class="novo-form-row" [class.disabled]="control.disabled" *ngIf="control.__type !== 'GroupedControl'">
          <novo-control [autoFocus]="autoFocus && index === 0 && controlIndex === 0" [control]="control" [form]="form"></novo-control>
        </div>
        <div *ngIf="control.__type === 'GroupedControl'">TODO - GroupedControl</div>
      </ng-container>
    </div>
  `, isInline: true, components: [{ type: NovoFieldsetHeaderElement, selector: "novo-fieldset-header", inputs: ["title", "icon"] }, { type: NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFieldsetElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-fieldset',
                    template: `
    <div class="novo-fieldset-container">
      <novo-fieldset-header
        [icon]="icon"
        [title]="title"
        *ngIf="title"
        [class.embedded]="isEmbedded"
        [class.inline-embedded]="isInlineEmbedded"
        [class.hidden]="hidden"
      ></novo-fieldset-header>
      <ng-container *ngFor="let control of controls; let controlIndex = index">
        <div class="novo-form-row" [class.disabled]="control.disabled" *ngIf="control.__type !== 'GroupedControl'">
          <novo-control [autoFocus]="autoFocus && index === 0 && controlIndex === 0" [control]="control" [form]="form"></novo-control>
        </div>
        <div *ngIf="control.__type === 'GroupedControl'">TODO - GroupedControl</div>
      </ng-container>
    </div>
  `,
                }]
        }], propDecorators: { controls: [{
                type: Input
            }], form: [{
                type: Input
            }], title: [{
                type: Input
            }], icon: [{
                type: Input
            }], index: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], isEmbedded: [{
                type: Input
            }], isInlineEmbedded: [{
                type: Input
            }], hidden: [{
                type: Input
            }] } });
class NovoDynamicFormElement {
    constructor(element, templates) {
        this.element = element;
        this.templates = templates;
        this.controls = [];
        this.fieldsets = [];
        this.hideNonRequiredFields = true;
        this.autoFocusFirstField = false;
        this.allFieldsRequired = false;
        this.allFieldsNotRequired = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.numControls = 0;
    }
    ngOnInit() {
        this.ngOnChanges();
    }
    ngOnChanges(changes) {
        this.form.layout = this.layout;
        if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
            this.fieldsets = [
                {
                    controls: this.controls,
                },
            ];
            this.numControls = this.controls.length;
        }
        else if (this.fieldsets) {
            this.fieldsets.forEach((fieldset) => {
                this.numControls = this.numControls + fieldset.controls.length;
            });
        }
        const requiredFields = [];
        const nonRequiredFields = [];
        this.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                if (control.required) {
                    requiredFields.push(control);
                }
                else {
                    nonRequiredFields.push(control);
                }
            });
        });
        this.allFieldsRequired = requiredFields.length === this.numControls;
        this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
        if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
            this.fieldsets.forEach((fieldset) => {
                fieldset.controls.forEach((control) => {
                    this.form.controls[control.key].hidden = false;
                });
            });
        }
        this.form.fieldsets = [...this.fieldsets];
    }
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((template) => {
                this.templates.addCustom(template.name, template.template);
            });
        }
    }
    showAllFields() {
        this.form.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                const ctl = this.form.controls[control.key];
                if (!this.fieldsAlreadyHidden.includes(control.key)) {
                    ctl.hidden = false;
                }
            });
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    showOnlyRequired(hideRequiredWithValue) {
        this.fieldsAlreadyHidden = [];
        this.form.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                const ctl = this.form.controls[control.key];
                if (ctl.hidden) {
                    this.fieldsAlreadyHidden.push(control.key);
                }
                // Hide any non-required fields
                if (!control.required) {
                    ctl.hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue &&
                    !Helpers.isBlank(this.form.getRawValue()[control.key]) &&
                    (!control.isEmpty || (control.isEmpty && control.isEmpty(ctl)))) {
                    ctl.hidden = true;
                }
                // Don't hide fields with errors
                if (ctl.errors) {
                    ctl.hidden = false;
                }
            });
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    get values() {
        return this.form ? this.form.getRawValue() : null;
    }
    get isValid() {
        return this.form ? this.form.valid : false;
    }
    updatedValues() {
        let ret = null;
        this.form.fieldsets.forEach((fieldset) => {
            fieldset.controls.forEach((control) => {
                if (this.form.controls[control.key].dirty || control.dirty) {
                    if (!ret) {
                        ret = {};
                    }
                    ret[control.key] = this.form.getRawValue()[control.key];
                }
            });
        });
        return ret;
    }
    forceValidation() {
        Object.keys(this.form.controls).forEach((key) => {
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.getRawValue()[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
}
NovoDynamicFormElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDynamicFormElement, deps: [{ token: i0.ElementRef }, { token: NovoTemplateService }], target: i0.ɵɵFactoryTarget.Component });
NovoDynamicFormElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDynamicFormElement, selector: "novo-dynamic-form", inputs: { controls: "controls", fieldsets: "fieldsets", form: "form", layout: "layout", hideNonRequiredFields: "hideNonRequiredFields", autoFocusFirstField: "autoFocusFirstField" }, providers: [NovoTemplateService], queries: [{ propertyName: "customTemplates", predicate: NovoTemplate }], usesOnChanges: true, ngImport: i0, template: `
    <novo-control-templates></novo-control-templates>
    <div class="novo-form-container">
      <header>
        <ng-content select="form-title"></ng-content>
        <ng-content select="form-subtitle"></ng-content>
      </header>
      <form class="novo-form" [formGroup]="form">
        <ng-container *ngFor="let fieldset of form.fieldsets; let i = index">
          <novo-fieldset
            *ngIf="fieldset.controls.length"
            [index]="i"
            [autoFocus]="autoFocusFirstField"
            [icon]="fieldset.icon"
            [controls]="fieldset.controls"
            [title]="fieldset.title"
            [form]="form"
            [isEmbedded]="fieldset.isEmbedded"
            [isInlineEmbedded]="fieldset.isInlineEmbedded"
            [hidden]="fieldset.hidden"
          ></novo-fieldset>
        </ng-container>
      </form>
    </div>
  `, isInline: true, components: [{ type: NovoControlTemplates, selector: "novo-control-templates" }, { type: NovoFieldsetElement, selector: "novo-fieldset", inputs: ["controls", "form", "title", "icon", "index", "autoFocus", "isEmbedded", "isInlineEmbedded", "hidden"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDynamicFormElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-dynamic-form',
                    template: `
    <novo-control-templates></novo-control-templates>
    <div class="novo-form-container">
      <header>
        <ng-content select="form-title"></ng-content>
        <ng-content select="form-subtitle"></ng-content>
      </header>
      <form class="novo-form" [formGroup]="form">
        <ng-container *ngFor="let fieldset of form.fieldsets; let i = index">
          <novo-fieldset
            *ngIf="fieldset.controls.length"
            [index]="i"
            [autoFocus]="autoFocusFirstField"
            [icon]="fieldset.icon"
            [controls]="fieldset.controls"
            [title]="fieldset.title"
            [form]="form"
            [isEmbedded]="fieldset.isEmbedded"
            [isInlineEmbedded]="fieldset.isInlineEmbedded"
            [hidden]="fieldset.hidden"
          ></novo-fieldset>
        </ng-container>
      </form>
    </div>
  `,
                    providers: [NovoTemplateService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoTemplateService }]; }, propDecorators: { controls: [{
                type: Input
            }], fieldsets: [{
                type: Input
            }], form: [{
                type: Input
            }], layout: [{
                type: Input
            }], hideNonRequiredFields: [{
                type: Input
            }], autoFocusFirstField: [{
                type: Input
            }], customTemplates: [{
                type: ContentChildren,
                args: [NovoTemplate]
            }] } });

// NG
class NovoFormElement {
    constructor(templates) {
        this.templates = templates;
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    get value() {
        return this.form.getRawValue();
    }
    get isValid() {
        return this.form.valid;
    }
    ngOnInit() {
        this.form.layout = this.layout;
    }
    ngAfterContentInit() {
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach((template) => {
                this.templates.addCustom(template.name, template.template);
            });
        }
    }
    showAllFields() {
        Object.keys(this.form.controls).forEach((key) => {
            this.form.controls[key].hidden = false;
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    }
    showOnlyRequired(hideRequiredWithValue) {
        Object.keys(this.form.controls).forEach((key) => {
            // Hide any non-required fields
            if (!this.form.controls[key].required) {
                this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(this.form.getRawValue()[key])) {
                this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (this.form.controls[key].errors) {
                this.form.controls[key].hidden = false;
            }
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    }
    forceValidation() {
        Object.keys(this.form.controls).forEach((key) => {
            const control = this.form.controls[key];
            if (control.required && Helpers.isBlank(this.form.getRawValue()[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    }
}
NovoFormElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormElement, deps: [{ token: NovoTemplateService }], target: i0.ɵɵFactoryTarget.Component });
NovoFormElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoFormElement, selector: "novo-form", inputs: { form: "form", layout: "layout", hideHeader: "hideHeader" }, providers: [NovoTemplateService], queries: [{ propertyName: "customTemplates", predicate: NovoTemplate }], ngImport: i0, template: `
    <novo-control-templates></novo-control-templates>
    <div class="novo-form-container">
      <header *ngIf="!hideHeader">
        <ng-content select="form-title"></ng-content>
        <ng-content select="form-subtitle"></ng-content>
      </header>
      <form class="novo-form" [formGroup]="form">
        <ng-content></ng-content>
      </form>
    </div>
  `, isInline: true, components: [{ type: NovoControlTemplates, selector: "novo-control-templates" }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-form',
                    template: `
    <novo-control-templates></novo-control-templates>
    <div class="novo-form-container">
      <header *ngIf="!hideHeader">
        <ng-content select="form-title"></ng-content>
        <ng-content select="form-subtitle"></ng-content>
      </header>
      <form class="novo-form" [formGroup]="form">
        <ng-content></ng-content>
      </form>
    </div>
  `,
                    providers: [NovoTemplateService],
                }]
        }], ctorParameters: function () { return [{ type: NovoTemplateService }]; }, propDecorators: { form: [{
                type: Input
            }], layout: [{
                type: Input
            }], hideHeader: [{
                type: Input
            }], customTemplates: [{
                type: ContentChildren,
                args: [NovoTemplate]
            }] } });

class NovoHeaderSpacer {
}
NovoHeaderSpacer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderSpacer, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoHeaderSpacer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoHeaderSpacer, selector: "header-spacer", ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderSpacer, decorators: [{
            type: Component,
            args: [{
                    selector: 'header-spacer',
                    template: `<ng-content></ng-content>`,
                }]
        }] });
class NovoUtilsComponent {
}
NovoUtilsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoUtilsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoUtilsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoUtilsComponent, selector: "utils", ngImport: i0, template: `<ng-content></ng-content>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoUtilsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'utils',
                    template: `<ng-content></ng-content>`,
                }]
        }] });
class NovoUtilActionComponent {
}
NovoUtilActionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoUtilActionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoUtilActionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoUtilActionComponent, selector: "util-action, novo-action", inputs: { icon: "icon", size: "size", inverse: "inverse", disabled: "disabled" }, host: { classAttribute: "novo-action" }, ngImport: i0, template: `
    <novo-button theme="icon" [icon]="icon" [size]="size" [attr.inverse]="inverse" [disabled]="disabled">
      <ng-content></ng-content>
    </novo-button>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoUtilActionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'util-action, novo-action',
                    template: `
    <novo-button theme="icon" [icon]="icon" [size]="size" [attr.inverse]="inverse" [disabled]="disabled">
      <ng-content></ng-content>
    </novo-button>
  `,
                    host: {
                        class: 'novo-action',
                    },
                }]
        }], propDecorators: { icon: [{
                type: Input
            }], size: [{
                type: Input
            }], inverse: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
class NovoHeaderComponent {
    constructor() {
        this.role = 'heading';
        this.headerClass = 'novo-header';
        this.condensed = false;
        this.inverse = 'inverse';
    }
    get hb_isSizeSmall() {
        return this.size === 'small';
    }
    get hb_isSizeLarge() {
        return this.size === 'large';
    }
    get hb_isSizeDefault() {
        return !['small', 'large'].includes(this.size);
    }
    set theme(theme) {
        this._theme = theme;
        this.inverse = theme === 'white' || theme === 'off-white' || theme === 'light' ? undefined : 'inverse';
    }
    get theme() {
        return this._theme;
    }
}
NovoHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoHeaderComponent, selector: "novo-header,header[theme],header[accent]", inputs: { condensed: "condensed", title: "title", subTitle: "subTitle", icon: "icon", size: "size", theme: "theme" }, host: { properties: { "attr.role": "this.role", "class": "this.headerClass", "class.condensed": "this.condensed", "class.header-size-small": "this.hb_isSizeSmall", "class.header-size-large": "this.hb_isSizeLarge", "class.header-size-default": "this.hb_isSizeDefault", "attr.theme": "this.theme" } }, ngImport: i0, template: `
    <section>
      <div class="header-title">
        <ng-content select="[prefix]"></ng-content>
        <ng-container *ngIf="title">
          <novo-icon class="header-icon" *ngIf="icon">{{ icon }}</novo-icon>
          <div class="header-titles">
            <novo-title size="xl">{{ title }}</novo-title>
            <novo-title size="md" *ngIf="subTitle">{{ subTitle }}</novo-title>
          </div>
        </ng-container>
        <ng-container *ngIf="!title">
          <ng-content select="novo-icon, [novo-icon]"></ng-content>
          <div class="header-titles">
            <ng-content select="h1, h2, h3, h4, h5, h6, small, novo-title, [novo-title], [novo-subtitle]"></ng-content>
          </div>
        </ng-container>
      </div>
      <ng-content select="section"></ng-content>
      <span class="spacer"></span>
      <div class="header-actions">
        <ng-content select="novo-action,[novo-action]"></ng-content>
      </div>
      <ng-content select="utils"></ng-content>
      <ng-content select="[suffix]"></ng-content>
    </section>
    <ng-content></ng-content>
  `, isInline: true, components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoTitle, selector: "novo-title,[novo-title]" }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoHeaderComponent.prototype, "condensed", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-header,header[theme],header[accent]',
                    template: `
    <section>
      <div class="header-title">
        <ng-content select="[prefix]"></ng-content>
        <ng-container *ngIf="title">
          <novo-icon class="header-icon" *ngIf="icon">{{ icon }}</novo-icon>
          <div class="header-titles">
            <novo-title size="xl">{{ title }}</novo-title>
            <novo-title size="md" *ngIf="subTitle">{{ subTitle }}</novo-title>
          </div>
        </ng-container>
        <ng-container *ngIf="!title">
          <ng-content select="novo-icon, [novo-icon]"></ng-content>
          <div class="header-titles">
            <ng-content select="h1, h2, h3, h4, h5, h6, small, novo-title, [novo-title], [novo-subtitle]"></ng-content>
          </div>
        </ng-container>
      </div>
      <ng-content select="section"></ng-content>
      <span class="spacer"></span>
      <div class="header-actions">
        <ng-content select="novo-action,[novo-action]"></ng-content>
      </div>
      <ng-content select="utils"></ng-content>
      <ng-content select="[suffix]"></ng-content>
    </section>
    <ng-content></ng-content>
  `,
                }]
        }], propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], headerClass: [{
                type: HostBinding,
                args: ['class']
            }], condensed: [{
                type: HostBinding,
                args: ['class.condensed']
            }, {
                type: Input
            }], title: [{
                type: Input
            }], subTitle: [{
                type: Input
            }], icon: [{
                type: Input
            }], size: [{
                type: Input
            }], hb_isSizeSmall: [{
                type: HostBinding,
                args: ['class.header-size-small']
            }], hb_isSizeLarge: [{
                type: HostBinding,
                args: ['class.header-size-large']
            }], hb_isSizeDefault: [{
                type: HostBinding,
                args: ['class.header-size-default']
            }], theme: [{
                type: HostBinding,
                args: ['attr.theme']
            }, {
                type: Input
            }] } });

class NovoHeaderModule {
}
NovoHeaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoHeaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderModule, declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer], imports: [CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule], exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer] });
NovoHeaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderModule, imports: [[CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHeaderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoCommonModule, NovoIconModule, NovoButtonModule],
                    declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                    exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                }]
        }] });

// NG2
class NovoModalModule {
}
NovoModalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoModalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalModule, declarations: [NovoModalContainerComponent, NovoModalElement, NovoModalNotificationElement], imports: [OverlayModule, PortalModule, CommonModule, NovoButtonModule], exports: [NovoModalElement, NovoModalNotificationElement] });
NovoModalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalModule, providers: [NovoModalService], imports: [[OverlayModule, PortalModule, CommonModule, NovoButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoModalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [OverlayModule, PortalModule, CommonModule, NovoButtonModule],
                    declarations: [NovoModalContainerComponent, NovoModalElement, NovoModalNotificationElement],
                    exports: [NovoModalElement, NovoModalNotificationElement],
                    providers: [NovoModalService],
                }]
        }] });

// NG2
class NovoQuickNoteModule {
}
NovoQuickNoteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQuickNoteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoQuickNoteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQuickNoteModule, declarations: [QuickNoteElement, QuickNoteResults], imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoPipesModule], exports: [QuickNoteElement, QuickNoteResults] });
NovoQuickNoteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQuickNoteModule, imports: [[CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoPipesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQuickNoteModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoPipesModule],
                    declarations: [QuickNoteElement, QuickNoteResults],
                    exports: [QuickNoteElement, QuickNoteResults],
                }]
        }] });

// NG2
class NovoRadioModule {
}
NovoRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioModule, declarations: [NovoRadioElement, NovoRadioGroup], imports: [CommonModule, NovoButtonModule], exports: [NovoRadioElement, NovoRadioGroup] });
NovoRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioModule, imports: [[CommonModule, NovoButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRadioModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoRadioElement, NovoRadioGroup],
                    exports: [NovoRadioElement, NovoRadioGroup],
                }]
        }] });

// NG2
class NovoTipWellModule {
}
NovoTipWellModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTipWellModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTipWellModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTipWellModule, declarations: [NovoTipWellElement], imports: [CommonModule, NovoButtonModule], exports: [NovoTipWellElement] });
NovoTipWellModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTipWellModule, imports: [[CommonModule, NovoButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTipWellModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoTipWellElement],
                    exports: [NovoTipWellElement],
                }]
        }] });

// NG2
class NovoFormModule {
}
NovoFormModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoFormModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormModule, declarations: [NovoAutoSize,
        NovoControlElement,
        NovoDynamicFormElement,
        NovoFormElement,
        NovoFieldsetElement,
        NovoFieldsetHeaderElement,
        ControlConfirmModal,
        ControlPromptModal,
        NovoControlGroup,
        NovoControlTemplates], imports: [CommonModule,
        OverlayModule,
        ReactiveFormsModule,
        NovoRadioModule,
        NovoTilesModule,
        NovoSelectModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoDateTimePickerModule,
        NovoNovoCKEditorModule,
        NovoFormExtrasModule,
        NovoQuickNoteModule,
        NovoDateTimePickerModule,
        NovoHeaderModule,
        NovoTooltipModule,
        NovoDragulaModule,
        IMaskDirectiveModule,
        TextMaskModule,
        NovoTipWellModule,
        NovoModalModule,
        NovoButtonModule,
        NovoAceEditorModule,
        NovoCommonModule,
        NovoCheckboxModule,
        NovoIconModule,
        NovoRadioModule,
        NovoSwitchModule], exports: [NovoAutoSize,
        NovoDynamicFormElement,
        NovoControlElement,
        NovoFormElement,
        NovoFieldsetHeaderElement,
        NovoControlGroup,
        NovoControlTemplates] });
NovoFormModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormModule, providers: [NovoTemplateService], imports: [[
            CommonModule,
            OverlayModule,
            ReactiveFormsModule,
            NovoRadioModule,
            NovoTilesModule,
            NovoSelectModule,
            NovoPickerModule,
            NovoChipsModule,
            NovoDatePickerModule,
            NovoTimePickerModule,
            NovoDateTimePickerModule,
            NovoNovoCKEditorModule,
            NovoFormExtrasModule,
            NovoQuickNoteModule,
            NovoDateTimePickerModule,
            NovoHeaderModule,
            NovoTooltipModule,
            NovoDragulaModule,
            IMaskDirectiveModule,
            TextMaskModule,
            NovoTipWellModule,
            NovoModalModule,
            NovoButtonModule,
            NovoAceEditorModule,
            NovoCommonModule,
            NovoCheckboxModule,
            NovoIconModule,
            NovoRadioModule,
            NovoSwitchModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoFormModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        OverlayModule,
                        ReactiveFormsModule,
                        NovoRadioModule,
                        NovoTilesModule,
                        NovoSelectModule,
                        NovoPickerModule,
                        NovoChipsModule,
                        NovoDatePickerModule,
                        NovoTimePickerModule,
                        NovoDateTimePickerModule,
                        NovoNovoCKEditorModule,
                        NovoFormExtrasModule,
                        NovoQuickNoteModule,
                        NovoDateTimePickerModule,
                        NovoHeaderModule,
                        NovoTooltipModule,
                        NovoDragulaModule,
                        IMaskDirectiveModule,
                        TextMaskModule,
                        NovoTipWellModule,
                        NovoModalModule,
                        NovoButtonModule,
                        NovoAceEditorModule,
                        NovoCommonModule,
                        NovoCheckboxModule,
                        NovoIconModule,
                        NovoRadioModule,
                        NovoSwitchModule,
                    ],
                    declarations: [
                        NovoAutoSize,
                        NovoControlElement,
                        NovoDynamicFormElement,
                        NovoFormElement,
                        NovoFieldsetElement,
                        NovoFieldsetHeaderElement,
                        ControlConfirmModal,
                        ControlPromptModal,
                        NovoControlGroup,
                        NovoControlTemplates,
                    ],
                    exports: [
                        NovoAutoSize,
                        NovoDynamicFormElement,
                        NovoControlElement,
                        NovoFormElement,
                        NovoFieldsetHeaderElement,
                        NovoControlGroup,
                        NovoControlTemplates,
                    ],
                    providers: [NovoTemplateService],
                }]
        }] });

/**
 * Throws an exception when two NovoSidenav are matching the same position.
 * @docs-private
 */
function throwNovoDuplicatedSidenavError(position) {
    throw Error(`A drawer was already declared for 'position="${position}"'`);
}
/** Configures whether drawers should use auto sizing by default. */
const NOVO_LAYOUT_DEFAULT_AUTOSIZE = new InjectionToken('NOVO_LAYOUT_DEFAULT_AUTOSIZE', {
    providedIn: 'root',
    factory: NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY,
});
/**
 * Used to provide a drawer container to a drawer while avoiding circular references.
 * @docs-private
 */
const NOVO_LAYOUT_CONTAINER = new InjectionToken('NOVO_LAYOUT_CONTAINER');
/** @docs-private */
function NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY() {
    return false;
}

class NovoLayoutContent extends CdkScrollable {
    constructor(_changeDetectorRef, _container, // NovoLayoutContainer
    elementRef, scrollDispatcher, ngZone) {
        super(elementRef, scrollDispatcher, ngZone);
        this._changeDetectorRef = _changeDetectorRef;
        this._container = _container;
    }
    ngAfterContentInit() {
        this._container._contentMarginChanges.subscribe(() => {
            this._changeDetectorRef.markForCheck();
        });
    }
    getHostElement() {
        return this.elementRef.nativeElement;
    }
}
NovoLayoutContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutContent, deps: [{ token: i0.ChangeDetectorRef }, { token: NOVO_LAYOUT_CONTAINER }, { token: i0.ElementRef }, { token: i1$1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NovoLayoutContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoLayoutContent, selector: "novo-layout-content", host: { classAttribute: "novo-layout-content" }, exportAs: ["novoLayoutContent"], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutContent, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-layout-content',
                    exportAs: 'novoLayoutContent',
                    template: '<ng-content></ng-content>',
                    host: {
                        class: 'novo-layout-content',
                        // '[style.margin-left.px]': '_container._contentMargins.left',
                        // '[style.margin-right.px]': '_container._contentMargins.right',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_LAYOUT_CONTAINER]
                }] }, { type: i0.ElementRef }, { type: i1$1.ScrollDispatcher }, { type: i0.NgZone }]; } });

class NovoRailComponent extends CdkScrollable {
    constructor(elementRef, scrollDispatcher, ngZone) {
        super(elementRef, scrollDispatcher, ngZone);
    }
    ngAfterContentInit() { }
}
NovoRailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRailComponent, deps: [{ token: i0.ElementRef }, { token: i1$1.ScrollDispatcher }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });
NovoRailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoRailComponent, selector: "novo-rail", host: { classAttribute: "novo-rail" }, usesInheritance: true, ngImport: i0, template: `
    <div class="novo-rail-contents">
      <ng-content></ng-content>
    </div>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoRailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-rail',
                    template: `
    <div class="novo-rail-contents">
      <ng-content></ng-content>
    </div>
  `,
                    host: {
                        class: 'novo-rail',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$1.ScrollDispatcher }, { type: i0.NgZone }]; } });

/**
 * Animations used by the Material drawers.
 * @docs-private
 */
const novoSidenavAnimations = {
    /** Animation that slides a drawer in and out. */
    transformDrawer: trigger('transform', [
        // We remove the `transform` here completely, rather than setting it to zero, because:
        // 1. Having a transform can cause elements with ripples or an animated
        //    transform to shift around in Chrome with an RTL layout (see #10023).
        // 2. 3d transforms causes text to appear blurry on IE and Edge.
        state('open, open-instant', style({
            transform: 'none',
            visibility: 'visible',
        })),
        state('void', style({
            // Avoids the shadow showing up when closed in SSR.
            'box-shadow': 'none',
            visibility: 'hidden',
        })),
        transition('void => open-instant', animate('0ms')),
        transition('void <=> open, open-instant => void', animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)')),
    ]),
};

class NovoSidenavComponent {
    constructor(_elementRef, _focusTrapFactory, _focusMonitor, _platform, _ngZone, _doc, _container) {
        this._elementRef = _elementRef;
        this._focusTrapFactory = _focusTrapFactory;
        this._focusMonitor = _focusMonitor;
        this._platform = _platform;
        this._ngZone = _ngZone;
        this._doc = _doc;
        this._container = _container;
        this._fixedInViewport = false;
        this._fixedTopGap = 0;
        this._fixedBottomGap = 0;
        this._elementFocusedBeforeDrawerWasOpened = null;
        /** Whether the drawer is initialized. Used for disabling the initial animation. */
        this._enableAnimations = false;
        this._position = 'start';
        this._mode = 'over';
        this._disableClose = false;
        this._opened = false;
        /** Emits whenever the drawer has started animating. */
        this._animationStarted = new Subject();
        /** Emits whenever the drawer is done animating. */
        this._animationEnd = new Subject();
        /** Current state of the sidenav animation. */
        // @HostBinding is used in the class as it is expected to be extended.  Since @Component decorator
        // metadata is not inherited by child classes, instead the host binding data is defined in a way
        // that can be inherited.
        // tslint:disable:no-host-decorator-in-concrete
        this._animationState = 'void';
        /** Event emitted when the drawer open state is changed. */
        this.openedChange = 
        // Note this has to be async in order to avoid some issues with two-bindings (see #8872).
        new EventEmitter(/* isAsync */ true);
        /** Event emitted when the drawer has been opened. */
        this._openedStream = this.openedChange.pipe(filter((o) => o), map(() => { }));
        /** Event emitted when the drawer has started opening. */
        this.openedStart = this._animationStarted.pipe(filter((e) => e.fromState !== e.toState && e.toState.indexOf('open') === 0), mapTo(undefined));
        /** Event emitted when the drawer has been closed. */
        this._closedStream = this.openedChange.pipe(filter((o) => !o), map(() => { }));
        /** Event emitted when the drawer has started closing. */
        this.closedStart = this._animationStarted.pipe(filter((e) => e.fromState !== e.toState && e.toState === 'void'), mapTo(undefined));
        /** Emits when the component is destroyed. */
        this._destroyed = new Subject();
        /** Event emitted when the drawer's position changes. */
        // tslint:disable-next-line:no-output-on-prefix
        this.onPositionChanged = new EventEmitter();
        /**
         * An observable that emits when the drawer mode changes. This is used by the drawer container to
         * to know when to when the mode changes so it can adapt the margins on the content.
         */
        this._modeChanged = new Subject();
        this.openedChange.subscribe((opened) => {
            if (opened) {
                if (this._doc) {
                    this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement;
                }
                this._takeFocus();
            }
            else if (this._isFocusWithinDrawer()) {
                this._restoreFocus();
            }
        });
        /**
         * Listen to `keydown` events outside the zone so that change detection is not run every
         * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed
         * and we don't have close disabled.
         */
        this._ngZone.runOutsideAngular(() => {
            fromEvent(this._elementRef.nativeElement, 'keydown')
                .pipe(filter((event) => {
                return event.key === "Escape" /* Escape */ && !this.disableClose && !hasModifierKey(event);
            }), takeUntil(this._destroyed))
                .subscribe((event) => this._ngZone.run(() => {
                this.close();
                event.stopPropagation();
                event.preventDefault();
            }));
        });
        // We need a Subject with distinctUntilChanged, because the `done` event
        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084
        this._animationEnd
            .pipe(distinctUntilChanged((x, y) => {
            return x.fromState === y.fromState && x.toState === y.toState;
        }))
            .subscribe((event) => {
            const { fromState, toState } = event;
            if ((toState.indexOf('open') === 0 && fromState === 'void') || (toState === 'void' && fromState.indexOf('open') === 0)) {
                this.openedChange.emit(this._opened);
            }
        });
    }
    /** Whether the sidenav is fixed in the viewport. */
    get fixedInViewport() {
        return this._fixedInViewport;
    }
    set fixedInViewport(value) {
        this._fixedInViewport = coerceBooleanProperty(value);
    }
    /**
     * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed
     * mode.
     */
    get fixedTopGap() {
        return this._fixedTopGap;
    }
    set fixedTopGap(value) {
        this._fixedTopGap = coerceNumberProperty(value);
    }
    /**
     * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in
     * fixed mode.
     */
    get fixedBottomGap() {
        return this._fixedBottomGap;
    }
    set fixedBottomGap(value) {
        this._fixedBottomGap = coerceNumberProperty(value);
    }
    /** The side that the drawer is attached to. */
    get position() {
        return this._position;
    }
    set position(value) {
        // Make sure we have a valid value.
        value = value === 'end' ? 'end' : 'start';
        if (value !== this._position) {
            this._position = value;
            this.onPositionChanged.emit();
        }
    }
    /** Mode of the drawer; one of 'over', 'push' or 'side'. */
    get mode() {
        return this._mode;
    }
    set mode(value) {
        this._mode = value;
        this._updateFocusTrapState();
        this._modeChanged.next();
    }
    /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */
    get disableClose() {
        return this._disableClose;
    }
    set disableClose(value) {
        this._disableClose = coerceBooleanProperty(value);
    }
    /**
     * Whether the drawer should focus the first focusable element automatically when opened.
     * Defaults to false in when `mode` is set to `side`, otherwise defaults to `true`. If explicitly
     * enabled, focus will be moved into the sidenav in `side` mode as well.
     */
    get autoFocus() {
        const value = this._autoFocus;
        // Note that usually we disable auto focusing in `side` mode, because we don't know how the
        // sidenav is being used, but in some cases it still makes sense to do it. If the consumer
        // explicitly enabled `autoFocus`, we take it as them always wanting to enable it.
        return value == null ? this.mode !== 'side' : value;
    }
    set autoFocus(value) {
        this._autoFocus = coerceBooleanProperty(value);
    }
    /**
     * Whether the drawer is opened. We overload this because we trigger an event when it
     * starts or end.
     */
    get opened() {
        return this._opened;
    }
    set opened(value) {
        this.toggle(coerceBooleanProperty(value));
    }
    /**
     * Moves focus into the drawer. Note that this works even if
     * the focus trap is disabled in `side` mode.
     */
    _takeFocus() {
        if (!this.autoFocus || !this._focusTrap) {
            return;
        }
        this._focusTrap.focusInitialElementWhenReady().then((hasMovedFocus) => {
            // If there were no focusable elements, focus the sidenav itself so the keyboard navigation
            // still works. We need to check that `focus` is a function due to Universal.
            if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {
                this._elementRef.nativeElement.focus();
            }
        });
    }
    /**
     * Restores focus to the element that was originally focused when the drawer opened.
     * If no element was focused at that time, the focus will be restored to the drawer.
     */
    _restoreFocus() {
        if (!this.autoFocus) {
            return;
        }
        // Note that we don't check via `instanceof HTMLElement` so that we can cover SVGs as well.
        if (this._elementFocusedBeforeDrawerWasOpened) {
            this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);
        }
        else {
            this._elementRef.nativeElement.blur();
        }
        this._elementFocusedBeforeDrawerWasOpened = null;
        this._openedVia = null;
    }
    /** Whether focus is currently within the drawer. */
    _isFocusWithinDrawer() {
        const activeEl = this._doc?.activeElement;
        return !!activeEl && this._elementRef.nativeElement.contains(activeEl);
    }
    ngAfterContentInit() {
        this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
        this._updateFocusTrapState();
    }
    ngAfterContentChecked() {
        // Enable the animations after the lifecycle hooks have run, in order to avoid animating
        // drawers that are open by default. When we're on the server, we shouldn't enable the
        // animations, because we don't want the drawer to animate the first time the user sees
        // the page.
        if (this._platform.isBrowser) {
            this._enableAnimations = true;
        }
    }
    ngOnDestroy() {
        if (this._focusTrap) {
            this._focusTrap.destroy();
        }
        this._animationStarted.complete();
        this._animationEnd.complete();
        this._modeChanged.complete();
        this._destroyed.next();
        this._destroyed.complete();
    }
    /**
     * Open the drawer.
     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
     * Used for focus management after the sidenav is closed.
     */
    open(openedVia) {
        return this.toggle(true, openedVia);
    }
    /** Close the drawer. */
    close() {
        return this.toggle(false);
    }
    /** Closes the drawer with context that the backdrop was clicked. */
    _closeViaBackdropClick() {
        // If the drawer is closed upon a backdrop click, we always want to restore focus. We
        // don't need to check whether focus is currently in the drawer, as clicking on the
        // backdrop causes blurring of the active element.
        return this._setOpen(/* isOpen */ false, /* restoreFocus */ true);
    }
    /**
     * Toggle this drawer.
     * @param isOpen Whether the drawer should be open.
     * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.
     * Used for focus management after the sidenav is closed.
     */
    toggle(isOpen = !this.opened, openedVia) {
        // If the focus is currently inside the drawer content and we are closing the drawer,
        // restore the focus to the initially focused element (when the drawer opened).
        return this._setOpen(isOpen, /* restoreFocus */ !isOpen && this._isFocusWithinDrawer(), openedVia);
    }
    /**
     * Toggles the opened state of the drawer.
     * @param isOpen Whether the drawer should open or close.
     * @param restoreFocus Whether focus should be restored on close.
     * @param openedVia Focus origin that can be optionally set when opening a drawer. The
     *   origin will be used later when focus is restored on drawer close.
     */
    _setOpen(isOpen, restoreFocus, openedVia = 'program') {
        this._opened = isOpen;
        if (isOpen) {
            this._animationState = this._enableAnimations ? 'open' : 'open-instant';
            this._openedVia = openedVia;
        }
        else {
            this._animationState = 'void';
            if (restoreFocus) {
                this._restoreFocus();
            }
        }
        this._updateFocusTrapState();
        return new Promise((resolve) => {
            this.openedChange.pipe(take(1)).subscribe((open) => resolve(open ? 'open' : 'close'));
        });
    }
    _getWidth() {
        return this._elementRef.nativeElement ? this._elementRef.nativeElement.offsetWidth || 0 : 0;
    }
    /** Updates the enabled state of the focus trap. */
    _updateFocusTrapState() {
        if (this._focusTrap) {
            // The focus trap is only enabled when the drawer is open in any mode other than side.
            this._focusTrap.enabled = this.opened && this.mode !== 'side';
        }
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    _animationStartListener(event) {
        this._animationStarted.next(event);
    }
    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.
    // In Ivy the `host` bindings will be merged when this class is extended, whereas in
    // ViewEngine they're overwritten.
    _animationDoneListener(event) {
        this._animationEnd.next(event);
    }
}
NovoSidenavComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSidenavComponent, deps: [{ token: i0.ElementRef }, { token: i1$5.FocusTrapFactory }, { token: i1$5.FocusMonitor }, { token: i1$6.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }, { token: NOVO_LAYOUT_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoSidenavComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSidenavComponent, selector: "novo-sidenav", inputs: { fixedInViewport: "fixedInViewport", fixedTopGap: "fixedTopGap", fixedBottomGap: "fixedBottomGap", position: "position", mode: "mode", disableClose: "disableClose", autoFocus: "autoFocus", opened: "opened" }, outputs: { openedChange: "openedChange", _openedStream: "opened", openedStart: "openedStart", _closedStream: "closed", closedStart: "closedStart", onPositionChanged: "positionChanged" }, host: { attributes: { "tabIndex": "-1" }, listeners: { "@transform.start": "_animationStartListener($event)", "@transform.done": "_animationDoneListener($event)" }, properties: { "attr.align": "null", "class.novo-sidenav-end": "position === \"end\"", "class.novo-sidenav-over": "mode === \"over\"", "class.novo-sidenav-push": "mode === \"push\"", "class.novo-sidenav-side": "mode === \"side\"", "class.novo-sidenav-opened": "opened", "class.novo-sidenav-fixed": "fixedInViewport", "style.top.px": "fixedInViewport ? fixedTopGap : null", "style.bottom.px": "fixedInViewport ? fixedBottomGap : null", "@transform": "this._animationState" }, classAttribute: "novo-sidenav" }, exportAs: ["novoSidenav"], ngImport: i0, template: "<div class=\"novo-sidenav-inner-container\">\n  <ng-content></ng-content>\n</div>", styles: [".novo-sidenav-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.novo-sidenav-fixed{position:fixed}.novo-sidenav{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}.novo-sidenav[theme=black]{color:#fff;background:#000000}.novo-sidenav[theme=white]{color:#3d464d;background:#ffffff}.novo-sidenav[theme=gray],.novo-sidenav[theme=grey]{color:#3d464d;background:#9e9e9e}.novo-sidenav[theme=offWhite],.novo-sidenav[theme=bright]{color:#3d464d;background:#f7f7f7}.novo-sidenav[theme=light]{color:#3d464d;background:#dbdbdb}.novo-sidenav[theme=neutral]{color:#fff;background:#4f5361}.novo-sidenav[theme=dark]{color:#fff;background:#3d464d}.novo-sidenav[theme=orange]{color:#3d464d;background:#ff6900}.novo-sidenav[theme=navigation]{color:#fff;background:#202945}.novo-sidenav[theme=skyBlue]{color:#fff;background:#009bdf}.novo-sidenav[theme=steel]{color:#fff;background:#5b6770}.novo-sidenav[theme=metal]{color:#fff;background:#637893}.novo-sidenav[theme=sand]{color:#3d464d;background:#f4f4f4}.novo-sidenav[theme=silver]{color:#3d464d;background:#e2e2e2}.novo-sidenav[theme=stone]{color:#3d464d;background:#bebebe}.novo-sidenav[theme=ash]{color:#3d464d;background:#a0a0a0}.novo-sidenav[theme=slate]{color:#fff;background:#707070}.novo-sidenav[theme=onyx]{color:#fff;background:#526980}.novo-sidenav[theme=charcoal]{color:#fff;background:#282828}.novo-sidenav[theme=moonlight]{color:#fff;background:#1a242f}.novo-sidenav[theme=midnight]{color:#fff;background:#202945}.novo-sidenav[theme=darkness]{color:#fff;background:#161f27}.novo-sidenav[theme=navy]{color:#fff;background:#0d2d42}.novo-sidenav[theme=aqua]{color:#3d464d;background:#3bafda}.novo-sidenav[theme=ocean]{color:#fff;background:#4a89dc}.novo-sidenav[theme=mint]{color:#3d464d;background:#37bc9b}.novo-sidenav[theme=grass]{color:#fff;background:#8cc152}.novo-sidenav[theme=sunflower]{color:#fff;background:#f6b042}.novo-sidenav[theme=bittersweet]{color:#fff;background:#eb6845}.novo-sidenav[theme=grapefruit]{color:#fff;background:#da4453}.novo-sidenav[theme=carnation]{color:#fff;background:#d770ad}.novo-sidenav[theme=lavender]{color:#fff;background:#967adc}.novo-sidenav[theme=mountain]{color:#fff;background:#9678b6}.novo-sidenav[theme=info],.novo-sidenav[theme=positive]{color:#fff;background:#4a89dc}.novo-sidenav[theme=success]{color:#fff;background:#8cc152}.novo-sidenav[theme=negative],.novo-sidenav[theme=danger],.novo-sidenav[theme=error]{color:#fff;background:#da4453}.novo-sidenav[theme=warning]{color:#fff;background:#f6b042}.novo-sidenav[theme=empty]{color:#3d464d;background:#cccdcc}.novo-sidenav[theme=disabled]{color:#3d464d;background:#bebebe}.novo-sidenav[theme=background]{color:#3d464d;background:#f7f7f7}.novo-sidenav[theme=backgroundDark]{color:#3d464d;background:#e2e2e2}.novo-sidenav[theme=presentation]{color:#fff;background:#5b6770}.novo-sidenav[theme=bullhorn]{color:#3d464d;background:#ff6900}.novo-sidenav[theme=pulse]{color:#3d464d;background:#3bafda}.novo-sidenav[theme=company]{color:#fff;background:#3399dd}.novo-sidenav[theme=candidate]{color:#fff;background:#44bb77}.novo-sidenav[theme=lead]{color:#fff;background:#aa6699}.novo-sidenav[theme=contact],.novo-sidenav[theme=clientcontact]{color:#fff;background:#ffaa44}.novo-sidenav[theme=opportunity]{color:#fff;background:#662255}.novo-sidenav[theme=job],.novo-sidenav[theme=joborder]{color:#fff;background:#bb5566}.novo-sidenav[theme=submission]{color:#3d464d;background:#a9adbb}.novo-sidenav[theme=sendout]{color:#fff;background:#747884}.novo-sidenav[theme=placement]{color:#fff;background:#0b344f}.novo-sidenav[theme=note]{color:#fff;background:#747884}.novo-sidenav[theme=contract]{color:#fff;background:#454ea0}.novo-sidenav[theme=jobCode],.novo-sidenav[theme=earnCode],.novo-sidenav[theme=invoiceStatement],.novo-sidenav[theme=billableCharge],.novo-sidenav[theme=payableCharge],.novo-sidenav[theme=user],.novo-sidenav[theme=corporateUser],.novo-sidenav[theme=distributionList],.novo-sidenav[theme=credential],.novo-sidenav[theme=person]{color:#fff;background:#696d79}.novo-sidenav,[dir=rtl] .novo-sidenav.novo-sidenav-end{border-right:solid 1px var(--border)}[dir=rtl] .novo-sidenav,.novo-sidenav.novo-sidenav-end{border-left:solid 1px var(--border);border-right:none}.novo-sidenav.novo-sidenav-side{z-index:2}.novo-sidenav.novo-sidenav-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .novo-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .novo-sidenav.novo-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}\n"], animations: [novoSidenavAnimations.transformDrawer], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSidenavComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-sidenav', exportAs: 'novoSidenav', animations: [novoSidenavAnimations.transformDrawer], host: {
                        class: 'novo-sidenav',
                        tabIndex: '-1',
                        // must prevent the browser from aligning text based on value
                        '[attr.align]': 'null',
                        '[class.novo-sidenav-end]': 'position === "end"',
                        '[class.novo-sidenav-over]': 'mode === "over"',
                        '[class.novo-sidenav-push]': 'mode === "push"',
                        '[class.novo-sidenav-side]': 'mode === "side"',
                        '[class.novo-sidenav-opened]': 'opened',
                        '[class.novo-sidenav-fixed]': 'fixedInViewport',
                        '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',
                        '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<div class=\"novo-sidenav-inner-container\">\n  <ng-content></ng-content>\n</div>", styles: [".novo-sidenav-inner-container{width:100%;height:100%;overflow:auto;-webkit-overflow-scrolling:touch}.novo-sidenav-fixed{position:fixed}.novo-sidenav{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}.novo-sidenav[theme=black]{color:#fff;background:#000000}.novo-sidenav[theme=white]{color:#3d464d;background:#ffffff}.novo-sidenav[theme=gray],.novo-sidenav[theme=grey]{color:#3d464d;background:#9e9e9e}.novo-sidenav[theme=offWhite],.novo-sidenav[theme=bright]{color:#3d464d;background:#f7f7f7}.novo-sidenav[theme=light]{color:#3d464d;background:#dbdbdb}.novo-sidenav[theme=neutral]{color:#fff;background:#4f5361}.novo-sidenav[theme=dark]{color:#fff;background:#3d464d}.novo-sidenav[theme=orange]{color:#3d464d;background:#ff6900}.novo-sidenav[theme=navigation]{color:#fff;background:#202945}.novo-sidenav[theme=skyBlue]{color:#fff;background:#009bdf}.novo-sidenav[theme=steel]{color:#fff;background:#5b6770}.novo-sidenav[theme=metal]{color:#fff;background:#637893}.novo-sidenav[theme=sand]{color:#3d464d;background:#f4f4f4}.novo-sidenav[theme=silver]{color:#3d464d;background:#e2e2e2}.novo-sidenav[theme=stone]{color:#3d464d;background:#bebebe}.novo-sidenav[theme=ash]{color:#3d464d;background:#a0a0a0}.novo-sidenav[theme=slate]{color:#fff;background:#707070}.novo-sidenav[theme=onyx]{color:#fff;background:#526980}.novo-sidenav[theme=charcoal]{color:#fff;background:#282828}.novo-sidenav[theme=moonlight]{color:#fff;background:#1a242f}.novo-sidenav[theme=midnight]{color:#fff;background:#202945}.novo-sidenav[theme=darkness]{color:#fff;background:#161f27}.novo-sidenav[theme=navy]{color:#fff;background:#0d2d42}.novo-sidenav[theme=aqua]{color:#3d464d;background:#3bafda}.novo-sidenav[theme=ocean]{color:#fff;background:#4a89dc}.novo-sidenav[theme=mint]{color:#3d464d;background:#37bc9b}.novo-sidenav[theme=grass]{color:#fff;background:#8cc152}.novo-sidenav[theme=sunflower]{color:#fff;background:#f6b042}.novo-sidenav[theme=bittersweet]{color:#fff;background:#eb6845}.novo-sidenav[theme=grapefruit]{color:#fff;background:#da4453}.novo-sidenav[theme=carnation]{color:#fff;background:#d770ad}.novo-sidenav[theme=lavender]{color:#fff;background:#967adc}.novo-sidenav[theme=mountain]{color:#fff;background:#9678b6}.novo-sidenav[theme=info],.novo-sidenav[theme=positive]{color:#fff;background:#4a89dc}.novo-sidenav[theme=success]{color:#fff;background:#8cc152}.novo-sidenav[theme=negative],.novo-sidenav[theme=danger],.novo-sidenav[theme=error]{color:#fff;background:#da4453}.novo-sidenav[theme=warning]{color:#fff;background:#f6b042}.novo-sidenav[theme=empty]{color:#3d464d;background:#cccdcc}.novo-sidenav[theme=disabled]{color:#3d464d;background:#bebebe}.novo-sidenav[theme=background]{color:#3d464d;background:#f7f7f7}.novo-sidenav[theme=backgroundDark]{color:#3d464d;background:#e2e2e2}.novo-sidenav[theme=presentation]{color:#fff;background:#5b6770}.novo-sidenav[theme=bullhorn]{color:#3d464d;background:#ff6900}.novo-sidenav[theme=pulse]{color:#3d464d;background:#3bafda}.novo-sidenav[theme=company]{color:#fff;background:#3399dd}.novo-sidenav[theme=candidate]{color:#fff;background:#44bb77}.novo-sidenav[theme=lead]{color:#fff;background:#aa6699}.novo-sidenav[theme=contact],.novo-sidenav[theme=clientcontact]{color:#fff;background:#ffaa44}.novo-sidenav[theme=opportunity]{color:#fff;background:#662255}.novo-sidenav[theme=job],.novo-sidenav[theme=joborder]{color:#fff;background:#bb5566}.novo-sidenav[theme=submission]{color:#3d464d;background:#a9adbb}.novo-sidenav[theme=sendout]{color:#fff;background:#747884}.novo-sidenav[theme=placement]{color:#fff;background:#0b344f}.novo-sidenav[theme=note]{color:#fff;background:#747884}.novo-sidenav[theme=contract]{color:#fff;background:#454ea0}.novo-sidenav[theme=jobCode],.novo-sidenav[theme=earnCode],.novo-sidenav[theme=invoiceStatement],.novo-sidenav[theme=billableCharge],.novo-sidenav[theme=payableCharge],.novo-sidenav[theme=user],.novo-sidenav[theme=corporateUser],.novo-sidenav[theme=distributionList],.novo-sidenav[theme=credential],.novo-sidenav[theme=person]{color:#fff;background:#696d79}.novo-sidenav,[dir=rtl] .novo-sidenav.novo-sidenav-end{border-right:solid 1px var(--border)}[dir=rtl] .novo-sidenav,.novo-sidenav.novo-sidenav-end{border-left:solid 1px var(--border);border-right:none}.novo-sidenav.novo-sidenav-side{z-index:2}.novo-sidenav.novo-sidenav-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .novo-sidenav{transform:translate3d(100%,0,0)}[dir=rtl] .novo-sidenav.novo-sidenav-end{left:0;right:auto;transform:translate3d(-100%,0,0)}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1$5.FocusTrapFactory }, { type: i1$5.FocusMonitor }, { type: i1$6.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_LAYOUT_CONTAINER]
                }] }]; }, propDecorators: { fixedInViewport: [{
                type: Input
            }], fixedTopGap: [{
                type: Input
            }], fixedBottomGap: [{
                type: Input
            }], position: [{
                type: Input
            }], mode: [{
                type: Input
            }], disableClose: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], opened: [{
                type: Input
            }], _animationState: [{
                type: HostBinding,
                args: ['@transform']
            }], openedChange: [{
                type: Output
            }], _openedStream: [{
                type: Output,
                args: ['opened']
            }], openedStart: [{
                type: Output
            }], _closedStream: [{
                type: Output,
                args: ['closed']
            }], closedStart: [{
                type: Output
            }], onPositionChanged: [{
                type: Output,
                args: ['positionChanged']
            }], _animationStartListener: [{
                type: HostListener,
                args: ['@transform.start', ['$event']]
            }], _animationDoneListener: [{
                type: HostListener,
                args: ['@transform.done', ['$event']]
            }] } });

class NovoLayoutContainer {
    constructor(_dir, _element, _ngZone, _changeDetectorRef, viewportRuler, defaultAutosize = false, _animationMode) {
        this._dir = _dir;
        this._element = _element;
        this._ngZone = _ngZone;
        this._changeDetectorRef = _changeDetectorRef;
        this._animationMode = _animationMode;
        /** Drawers that belong to this container. */
        this._drawers = new QueryList();
        /** Event emitted when the drawer backdrop is clicked. */
        this.backdropClick = new EventEmitter();
        /** Emits when the component is destroyed. */
        this._destroyed = new Subject();
        /** Emits on every ngDoCheck. Used for debouncing reflows. */
        this._doCheckSubject = new Subject();
        /**
         * Margins to be applied to the content. These are used to push / shrink the drawer content when a
         * drawer is open. We use margin rather than transform even for push mode because transform breaks
         * fixed position elements inside of the transformed element.
         */
        this._contentMargins = { left: null, right: null };
        this._contentMarginChanges = new Subject();
        // If a `Dir` directive exists up the tree, listen direction changes
        // and update the left/right properties to point to the proper start/end.
        if (_dir) {
            _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
                this._validateDrawers();
                this.updateContentMargins();
            });
        }
        // Since the minimum width of the sidenav depends on the viewport width,
        // we need to recompute the margins if the viewport changes.
        viewportRuler
            .change()
            .pipe(takeUntil(this._destroyed))
            .subscribe(() => this.updateContentMargins());
        this._autosize = defaultAutosize;
    }
    /** The drawer child with the `start` position. */
    get start() {
        return this._start;
    }
    /** The drawer child with the `end` position. */
    get end() {
        return this._end;
    }
    /**
     * Whether to automatically resize the container whenever
     * the size of any of its drawers changes.
     *
     * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring
     * the drawers on every change detection cycle. Can be configured globally via the
     * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.
     */
    get autosize() {
        return this._autosize;
    }
    set autosize(value) {
        this._autosize = coerceBooleanProperty(value);
    }
    /**
     * Whether the drawer container should have a backdrop while one of the sidenavs is open.
     * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`
     * mode as well.
     */
    get hasBackdrop() {
        if (this._backdropOverride == null) {
            return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';
        }
        return this._backdropOverride;
    }
    set hasBackdrop(value) {
        this._backdropOverride = value == null ? null : coerceBooleanProperty(value);
    }
    /** Reference to the CdkScrollable instance that wraps the scrollable content. */
    get scrollable() {
        return this._userContent || this._content;
    }
    ngAfterContentInit() {
        this._allDrawers.changes
            .pipe(startWith(this._allDrawers), takeUntil(this._destroyed))
            .subscribe((drawer) => {
            this._drawers.reset(drawer.filter((item) => !item._container || item._container === this));
            this._drawers.notifyOnChanges();
        });
        this._drawers.changes.pipe(startWith(null)).subscribe(() => {
            this._validateDrawers();
            this._drawers.forEach((drawer) => {
                this._watchDrawerToggle(drawer);
                this._watchDrawerPosition(drawer);
                this._watchDrawerMode(drawer);
            });
            if (!this._drawers.length || this._isDrawerOpen(this._start) || this._isDrawerOpen(this._end)) {
                this.updateContentMargins();
            }
            this._changeDetectorRef.markForCheck();
        });
        // Avoid hitting the NgZone through the debounce timeout.
        this._ngZone.runOutsideAngular(() => {
            this._doCheckSubject
                .pipe(debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps
            takeUntil(this._destroyed))
                .subscribe(() => this.updateContentMargins());
        });
    }
    ngOnDestroy() {
        this._contentMarginChanges.complete();
        this._doCheckSubject.complete();
        this._drawers.destroy();
        this._destroyed.next();
        this._destroyed.complete();
    }
    /** Calls `open` of both start and end drawers */
    open() {
        this._drawers.forEach((drawer) => drawer.open());
    }
    /** Calls `close` of both start and end drawers */
    close() {
        this._drawers.forEach((drawer) => drawer.close());
    }
    /**
     * Recalculates and updates the inline styles for the content. Note that this should be used
     * sparingly, because it causes a reflow.
     */
    updateContentMargins() {
        // 1. For drawers in `over` mode, they don't affect the content.
        // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the
        //    left margin (for left drawer) or right margin (for right the drawer).
        // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by
        //    adding to the left or right margin and simultaneously subtracting the same amount of
        //    margin from the other side.
        let left = 0;
        let right = 0;
        if (this._left && this._left.opened) {
            if (this._left.mode === 'side') {
                left += this._left._getWidth();
            }
            else if (this._left.mode === 'push') {
                const width = this._left._getWidth();
                left += width;
                right -= width;
            }
        }
        if (this._right && this._right.opened) {
            if (this._right.mode === 'side') {
                right += this._right._getWidth();
            }
            else if (this._right.mode === 'push') {
                const width = this._right._getWidth();
                right += width;
                left -= width;
            }
        }
        // If either `right` or `left` is zero, don't set a style to the element. This
        // allows users to specify a custom size via CSS class in SSR scenarios where the
        // measured widths will always be zero. Note that we reset to `null` here, rather
        // than below, in order to ensure that the types in the `if` below are consistent.
        left = left || null;
        right = right || null;
        if (left !== this._contentMargins.left || right !== this._contentMargins.right) {
            this._contentMargins = { left, right };
            // Pull back into the NgZone since in some cases we could be outside. We need to be careful
            // to do it only when something changed, otherwise we can end up hitting the zone too often.
            this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));
        }
    }
    ngDoCheck() {
        // If users opted into autosizing, do a check every change detection cycle.
        if (this._autosize && this._isPushed()) {
            // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.
            this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());
        }
    }
    /**
     * Subscribes to drawer events in order to set a class on the main container element when the
     * drawer is open and the backdrop is visible. This ensures any overflow on the container element
     * is properly hidden.
     */
    _watchDrawerToggle(drawer) {
        drawer._animationStarted
            .pipe(filter((event) => event.fromState !== event.toState), takeUntil(this._drawers.changes))
            .subscribe((event) => {
            // Set the transition class on the container so that the animations occur. This should not
            // be set initially because animations should only be triggered via a change in state.
            if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {
                this._element.nativeElement.classList.add('mat-drawer-transition');
            }
            this.updateContentMargins();
            this._changeDetectorRef.markForCheck();
        });
        if (drawer.mode !== 'side') {
            drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() => this._setContainerClass(drawer.opened));
        }
    }
    /**
     * Subscribes to drawer onPositionChanged event in order to
     * re-validate drawers when the position changes.
     */
    _watchDrawerPosition(drawer) {
        if (!drawer) {
            return;
        }
        // NOTE: We need to wait for the microtask queue to be empty before validating,
        // since both drawers may be swapping positions at the same time.
        drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {
            this._ngZone.onMicrotaskEmpty.pipe(take(1)).subscribe(() => {
                this._validateDrawers();
            });
        });
    }
    /** Subscribes to changes in drawer mode so we can run change detection. */
    _watchDrawerMode(drawer) {
        if (drawer) {
            drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed))).subscribe(() => {
                this.updateContentMargins();
                this._changeDetectorRef.markForCheck();
            });
        }
    }
    /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */
    _setContainerClass(isAdd) {
        const classList = this._element.nativeElement.classList;
        const className = 'mat-drawer-container-has-open';
        if (isAdd) {
            classList.add(className);
        }
        else {
            classList.remove(className);
        }
    }
    /** Validate the state of the drawer children components. */
    _validateDrawers() {
        this._start = this._end = null;
        // Ensure that we have at most one start and one end drawer.
        this._drawers.forEach((drawer) => {
            if (drawer.position === 'end') {
                if (this._end != null) {
                    throw new Error('Duplication drawers at end');
                    // throwMatDuplicatedDrawerError('end');
                }
                this._end = drawer;
            }
            else {
                if (this._start != null) {
                    throw new Error('Duplication drawers at start');
                }
                this._start = drawer;
            }
        });
        this._right = this._left = null;
        // Detect if we're LTR or RTL.
        if (this._dir && this._dir.value === 'rtl') {
            this._left = this._end;
            this._right = this._start;
        }
        else {
            this._left = this._start;
            this._right = this._end;
        }
    }
    /** Whether the container is being pushed to the side by one of the drawers. */
    _isPushed() {
        return (this._isDrawerOpen(this._start) && this._start.mode !== 'over') || (this._isDrawerOpen(this._end) && this._end.mode !== 'over');
    }
    _onBackdropClicked() {
        this.backdropClick.emit();
        this._closeModalDrawersViaBackdrop();
    }
    _closeModalDrawersViaBackdrop() {
        // Close all open drawers where closing is not disabled and the mode is not `side`.
        [this._start, this._end]
            .filter((drawer) => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))
            .forEach((drawer) => drawer._closeViaBackdropClick());
    }
    _isShowingBackdrop() {
        return ((this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||
            (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end)));
    }
    _canHaveBackdrop(drawer) {
        return drawer.mode !== 'side' || !!this._backdropOverride;
    }
    _isDrawerOpen(drawer) {
        return drawer != null && drawer.opened;
    }
}
NovoLayoutContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutContainer, deps: [{ token: i1$8.Directionality, optional: true }, { token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i1$1.ViewportRuler }, { token: NOVO_LAYOUT_DEFAULT_AUTOSIZE }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoLayoutContainer.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoLayoutContainer, selector: "novo-layout-container", inputs: { autosize: "autosize", hasBackdrop: "hasBackdrop" }, outputs: { backdropClick: "backdropClick" }, host: { properties: { "class.novo-layout-container-explicit-backdrop": "_backdropOverride" }, classAttribute: "novo-layout-container" }, providers: [
        {
            provide: NOVO_LAYOUT_CONTAINER,
            useExisting: NovoLayoutContainer,
        },
    ], queries: [{ propertyName: "_rail", first: true, predicate: NovoRailComponent, descendants: true }, { propertyName: "_content", first: true, predicate: NovoLayoutContent, descendants: true }, { propertyName: "_allDrawers", predicate: NovoSidenavComponent, descendants: true }], viewQueries: [{ propertyName: "_userContent", first: true, predicate: NovoLayoutContent, descendants: true }], exportAs: ["novoLayoutContainer"], ngImport: i0, template: "<div class=\"novo-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\"\n  [class.novo-drawer-shown]=\"_isShowingBackdrop()\"></div>\n\n<ng-content select=\"novo-sidenav\"></ng-content>\n\n<div class=\"novo-layout-content-container\"\n  [class.and-has-rail]=\"_rail\"\n  [style.margin-left.px]=\"_contentMargins.left\"\n  [style.margin-right.px]=\"_contentMargins.right\">\n  <ng-content select=\"novo-rail\"></ng-content>\n\n  <ng-content select=\"novo-layout-content\">\n  </ng-content>\n\n  <novo-layout-content *ngIf=\"!_content\" cdkScrollable>\n    <ng-content></ng-content>\n  </novo-layout-content>\n</div>", styles: [".novo-layout-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden;height:100%}.novo-layout-container[fullscreen].novo-layout-container-has-open{overflow:hidden}.novo-layout-container.novo-layout-container-explicit-backdrop .novo-drawer-side{z-index:3}.novo-layout-container.ng-animate-disabled .novo-drawer-backdrop,.novo-layout-container.ng-animate-disabled .novo-layout-content,.ng-animate-disabled .novo-layout-container .novo-drawer-backdrop,.ng-animate-disabled .novo-layout-container .novo-layout-content{transition:none}.novo-drawer-backdrop{display:block;position:absolute;background:#000;top:0;bottom:0;left:0;right:0;z-index:3;visibility:hidden;opacity:.5}.novo-drawer-backdrop.novo-drawer-shown{visibility:visible}.novo-drawer-transition .novo-drawer-backdrop{transition-duration:.1s;transition-timing-function:ease-out;transition-property:background-color,visibility}.novo-layout-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.novo-drawer-transition .novo-layout-content{transition-duration:.1s;transition-timing-function:ease-out;transition-property:transform,margin-left,margin-right}.novo-rail{display:inline-flex;flex-direction:column;align-items:flex-start;justify-content:flex-start;height:inherit;height:100%;min-width:5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content;background:var(--background-bright)}.novo-rail .novo-rail-contents{display:inline-flex;flex-direction:column;width:-webkit-fill-available}.novo-layout-content-container{display:grid;grid-template-columns:1fr;height:100%}.novo-layout-content-container.and-has-rail{grid-template-columns:auto 1fr}\n"], components: [{ type: NovoLayoutContent, selector: "novo-layout-content", exportAs: ["novoLayoutContent"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutContainer, decorators: [{
            type: Component,
            args: [{ selector: 'novo-layout-container', exportAs: 'novoLayoutContainer', host: {
                        class: 'novo-layout-container',
                        '[class.novo-layout-container-explicit-backdrop]': '_backdropOverride',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, providers: [
                        {
                            provide: NOVO_LAYOUT_CONTAINER,
                            useExisting: NovoLayoutContainer,
                        },
                    ], template: "<div class=\"novo-drawer-backdrop\" (click)=\"_onBackdropClicked()\" *ngIf=\"hasBackdrop\"\n  [class.novo-drawer-shown]=\"_isShowingBackdrop()\"></div>\n\n<ng-content select=\"novo-sidenav\"></ng-content>\n\n<div class=\"novo-layout-content-container\"\n  [class.and-has-rail]=\"_rail\"\n  [style.margin-left.px]=\"_contentMargins.left\"\n  [style.margin-right.px]=\"_contentMargins.right\">\n  <ng-content select=\"novo-rail\"></ng-content>\n\n  <ng-content select=\"novo-layout-content\">\n  </ng-content>\n\n  <novo-layout-content *ngIf=\"!_content\" cdkScrollable>\n    <ng-content></ng-content>\n  </novo-layout-content>\n</div>", styles: [".novo-layout-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden;height:100%}.novo-layout-container[fullscreen].novo-layout-container-has-open{overflow:hidden}.novo-layout-container.novo-layout-container-explicit-backdrop .novo-drawer-side{z-index:3}.novo-layout-container.ng-animate-disabled .novo-drawer-backdrop,.novo-layout-container.ng-animate-disabled .novo-layout-content,.ng-animate-disabled .novo-layout-container .novo-drawer-backdrop,.ng-animate-disabled .novo-layout-container .novo-layout-content{transition:none}.novo-drawer-backdrop{display:block;position:absolute;background:#000;top:0;bottom:0;left:0;right:0;z-index:3;visibility:hidden;opacity:.5}.novo-drawer-backdrop.novo-drawer-shown{visibility:visible}.novo-drawer-transition .novo-drawer-backdrop{transition-duration:.1s;transition-timing-function:ease-out;transition-property:background-color,visibility}.novo-layout-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.novo-drawer-transition .novo-layout-content{transition-duration:.1s;transition-timing-function:ease-out;transition-property:transform,margin-left,margin-right}.novo-rail{display:inline-flex;flex-direction:column;align-items:flex-start;justify-content:flex-start;height:inherit;height:100%;min-width:5rem;width:-webkit-max-content;width:-moz-max-content;width:max-content;background:var(--background-bright)}.novo-rail .novo-rail-contents{display:inline-flex;flex-direction:column;width:-webkit-fill-available}.novo-layout-content-container{display:grid;grid-template-columns:1fr;height:100%}.novo-layout-content-container.and-has-rail{grid-template-columns:auto 1fr}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$8.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i1$1.ViewportRuler }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [NOVO_LAYOUT_DEFAULT_AUTOSIZE]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [ANIMATION_MODULE_TYPE]
                }] }]; }, propDecorators: { _allDrawers: [{
                type: ContentChildren,
                args: [NovoSidenavComponent, {
                        // We need to use `descendants: true`, because Ivy will no longer match
                        // indirect descendants if it's left as false.
                        descendants: true,
                    }]
            }], _rail: [{
                type: ContentChild,
                args: [NovoRailComponent]
            }], _content: [{
                type: ContentChild,
                args: [NovoLayoutContent]
            }], _userContent: [{
                type: ViewChild,
                args: [NovoLayoutContent]
            }], autosize: [{
                type: Input
            }], hasBackdrop: [{
                type: Input
            }], backdropClick: [{
                type: Output
            }] } });

// NG2
class NovoLayoutModule {
}
NovoLayoutModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoLayoutModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutModule, declarations: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent, NovoRailComponent], imports: [CommonModule], exports: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent, NovoRailComponent] });
NovoLayoutModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoLayoutModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent, NovoRailComponent],
                    exports: [NovoLayoutContainer, NovoLayoutContent, NovoSidenavComponent, NovoRailComponent],
                }]
        }] });

class MenuContentComponent {
    constructor() {
        this.menuItems = [];
        this.isLeaf = false;
        ///
        this.openSubMenu = new EventEmitter();
        this.closeLeafMenu = new EventEmitter();
        this.closeAllMenus = new EventEmitter();
        // @ViewChild('menu') public menuElement: ElementRef;
        // @ViewChildren('li') public menuItemElements: QueryList<ElementRef>;
        this.autoFocus = false;
        this.subscription = new Subscription();
    }
    ngOnInit() { }
    ngAfterViewInit() {
        if (this.autoFocus) {
            setTimeout(() => this.focus());
        }
        this.overlay.updatePosition();
        this._keyManager = new ActiveDescendantKeyManager(this.menu.menuOptions).withWrap();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    focus() {
        if (this.autoFocus) {
            // this.menuElement.nativeElement.focus();
        }
    }
    stopEvent($event) {
        $event.stopPropagation();
    }
    isMenuItemEnabled(menuItem) {
        return this.evaluateIfFunction(menuItem && menuItem.menuItemEnabled);
    }
    isMenuItemVisible(menuItem) {
        return this.evaluateIfFunction(menuItem && menuItem.menuItemVisible);
    }
    evaluateIfFunction(value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    }
    isDisabled(link) {
        return link.enabled && !link.enabled(this.item);
    }
    onKeyEvent(event) {
        if (!this.isLeaf) {
            return;
        }
        this._keyManager.onKeydown(event);
    }
    keyboardOpenSubMenu(event) {
        if (!this.isLeaf) {
            return;
        }
        this.cancelEvent(event);
        const menuItem = this.menuItems[this._keyManager.activeItemIndex];
        if (menuItem) {
            this.onOpenSubMenu(menuItem);
        }
    }
    keyboardMenuItemSelect(event) {
        if (!this.isLeaf) {
            return;
        }
        this.cancelEvent(event);
        const menuItem = this.menuItems[this._keyManager.activeItemIndex];
        const option = this._keyManager.activeItem;
        option._clickViaInteraction();
        // if (menuItem) {
        //   this.onMenuItemSelect(menuItem, event);
        // }
    }
    onCloseLeafMenu(event) {
        if (!this.isLeaf) {
            return;
        }
        this.cancelEvent(event);
        this.closeLeafMenu.emit({ exceptRootMenu: event.key === "ArrowLeft" /* ArrowLeft */, event });
    }
    // @HostListener('document:contextmenu', ['$event'])
    closeMenu(event) {
        if (event.type === 'click' && event.button === 2) {
            return;
        }
        this.closeAllMenus.emit({ event });
    }
    onMouseLeave(event) {
        if (this.isLeaf) {
            this.closeLeafMenu.emit({ exceptRootMenu: true, event });
        }
    }
    onOpenSubMenu(menuItem, event) {
        // const anchorElementRef = this.menuItemElements.toArray()[this._keyManager.activeItemIndex];
        // const anchorElement = anchorElementRef && anchorElementRef.nativeElement;
        // this.openSubMenu.emit({
        //   anchorElement,
        //   menu: menuItem.subMenu,
        //   event,
        //   item: this.item,
        //   // parentMenu: this,
        // });
    }
    onMenuItemSelect(menuItem, event) {
        event.preventDefault();
        event.stopPropagation();
        this.onOpenSubMenu(menuItem, event);
        // if (!menuItem.subMenu) {
        //   menuItem.triggerExecute(this.item, event);
        // }
    }
    cancelEvent(event) {
        if (!event) {
            return;
        }
        const target = event.target;
        if (['INPUT', 'TEXTAREA', 'SELECT'].indexOf(target.tagName) > -1 || target.isContentEditable) {
            return;
        }
        event.preventDefault();
        event.stopPropagation();
    }
}
MenuContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
MenuContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: MenuContentComponent, selector: "menu-content", inputs: { menuItems: "menuItems", item: "item", event: "event", menu: "menu", parentMenu: "parentMenu", menuClass: "menuClass", overlay: "overlay", isLeaf: "isLeaf" }, outputs: { openSubMenu: "openSubMenu", closeLeafMenu: "closeLeafMenu", closeAllMenus: "closeAllMenus" }, host: { listeners: { "window:keydown.ArrowDown": "onKeyEvent($event)", "window:keydown.ArrowUp": "onKeyEvent($event)", "window:keydown.ArrowRight": "keyboardOpenSubMenu($event)", "window:keydown.Enter": "keyboardMenuItemSelect($event)", "window:keydown.Space": "keyboardMenuItemSelect($event)", "window:keydown.Escape": "onCloseLeafMenu($event)", "window:keydown.ArrowLeft": "onCloseLeafMenu($event)", "document:click": "closeMenu($event)", "mouseleave": "onMouseLeave($event)" } }, ngImport: i0, template: `<div class="menu-container novo-menu" [ngClass]="menuClass" tabindex="0">
    <ul #menu class="menu" style="position: static; float: none;" tabindex="0">
      <ng-container *ngFor="let menuItem of menuItems; let i = index">
        <ng-template [ngTemplateOutlet]="menuItem.template" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>
        <!-- <novo-icon class="sub-menu-caret" suffix *ngIf="!!menuItem.subMenu" size="small" color="ash">expand</novo-icon> -->
      </ng-container>
    </ul>
  </div> `, isInline: true, styles: [":host .passive{display:block;padding:3px 20px;clear:both;font-weight:400;white-space:nowrap}:host .menu-container{width:180px}:host .menu-container .menu{cursor:default;list-style:none;background-color:var(--background-bright);-webkit-padding-start:0px!important;padding-inline-start:0px!important;box-shadow:0 -1px 3px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}:host .menu-container .menu :hover{background:rgba(74,137,220,.1);color:#3d464d}:host .menu-container .menu :active{background:rgba(74,137,220,.4)}:host .menu-container .menu .menu-item-container{display:flex;align-items:center;position:relative}:host .menu-container .menu .menu-item-container .sub-menu-caret{position:absolute;right:.5rem}:host .menu-container .menu .menu-item{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;cursor:pointer;margin:0;padding:1rem 1rem 1rem 1.25rem;box-sizing:border-box;display:flex;align-items:center;gap:1rem;flex:1}:host .menu-container .menu .menu-item.text-capitalize{text-transform:capitalize}:host .menu-container .menu .menu-item.text-uppercase{text-transform:uppercase}:host .menu-container .menu .menu-item.text-nowrap{white-space:nowrap}:host .menu-container .menu .menu-item.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host .menu-container .menu .menu-item.text-size-default{font-size:inherit}:host .menu-container .menu .menu-item.text-size-body{font-size:1.3rem}:host .menu-container .menu .menu-item.text-size-xs{font-size:1rem}:host .menu-container .menu .menu-item.text-size-sm{font-size:1.2rem}:host .menu-container .menu .menu-item.text-size-md{font-size:1.3rem}:host .menu-container .menu .menu-item.text-size-lg{font-size:1.6rem}:host .menu-container .menu .menu-item.text-size-xl{font-size:2rem}:host .menu-container .menu .menu-item.text-size-2xl{font-size:2.6rem}:host .menu-container .menu .menu-item.text-size-3xl{font-size:3.2rem}:host .menu-container .menu .menu-item.text-size-smaller{font-size:.8em}:host .menu-container .menu .menu-item.text-size-larger{font-size:1.2em}:host .menu-container .menu .menu-item.text-color-black{color:#000}:host .menu-container .menu .menu-item.text-color-white{color:#fff}:host .menu-container .menu .menu-item.text-color-gray{color:#9e9e9e}:host .menu-container .menu .menu-item.text-color-grey{color:#9e9e9e}:host .menu-container .menu .menu-item.text-color-offWhite{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-bright{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-light{color:#dbdbdb}:host .menu-container .menu .menu-item.text-color-neutral{color:#4f5361}:host .menu-container .menu .menu-item.text-color-dark{color:#3d464d}:host .menu-container .menu .menu-item.text-color-orange{color:#ff6900}:host .menu-container .menu .menu-item.text-color-navigation{color:#202945}:host .menu-container .menu .menu-item.text-color-skyBlue{color:#009bdf}:host .menu-container .menu .menu-item.text-color-steel{color:#5b6770}:host .menu-container .menu .menu-item.text-color-metal{color:#637893}:host .menu-container .menu .menu-item.text-color-sand{color:#f4f4f4}:host .menu-container .menu .menu-item.text-color-silver{color:#e2e2e2}:host .menu-container .menu .menu-item.text-color-stone{color:#bebebe}:host .menu-container .menu .menu-item.text-color-ash{color:#a0a0a0}:host .menu-container .menu .menu-item.text-color-slate{color:#707070}:host .menu-container .menu .menu-item.text-color-onyx{color:#526980}:host .menu-container .menu .menu-item.text-color-charcoal{color:#282828}:host .menu-container .menu .menu-item.text-color-moonlight{color:#1a242f}:host .menu-container .menu .menu-item.text-color-midnight{color:#202945}:host .menu-container .menu .menu-item.text-color-darkness{color:#161f27}:host .menu-container .menu .menu-item.text-color-navy{color:#0d2d42}:host .menu-container .menu .menu-item.text-color-aqua{color:#3bafda}:host .menu-container .menu .menu-item.text-color-ocean{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-mint{color:#37bc9b}:host .menu-container .menu .menu-item.text-color-grass{color:#8cc152}:host .menu-container .menu .menu-item.text-color-sunflower{color:#f6b042}:host .menu-container .menu .menu-item.text-color-bittersweet{color:#eb6845}:host .menu-container .menu .menu-item.text-color-grapefruit{color:#da4453}:host .menu-container .menu .menu-item.text-color-carnation{color:#d770ad}:host .menu-container .menu .menu-item.text-color-lavender{color:#967adc}:host .menu-container .menu .menu-item.text-color-mountain{color:#9678b6}:host .menu-container .menu .menu-item.text-color-info{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-positive{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-success{color:#8cc152}:host .menu-container .menu .menu-item.text-color-negative{color:#da4453}:host .menu-container .menu .menu-item.text-color-danger{color:#da4453}:host .menu-container .menu .menu-item.text-color-error{color:#da4453}:host .menu-container .menu .menu-item.text-color-warning{color:#f6b042}:host .menu-container .menu .menu-item.text-color-empty{color:#cccdcc}:host .menu-container .menu .menu-item.text-color-disabled{color:#bebebe}:host .menu-container .menu .menu-item.text-color-background{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-backgroundDark{color:#e2e2e2}:host .menu-container .menu .menu-item.text-color-presentation{color:#5b6770}:host .menu-container .menu .menu-item.text-color-bullhorn{color:#ff6900}:host .menu-container .menu .menu-item.text-color-pulse{color:#3bafda}:host .menu-container .menu .menu-item.text-color-company{color:#39d}:host .menu-container .menu .menu-item.text-color-candidate{color:#4b7}:host .menu-container .menu .menu-item.text-color-lead{color:#a69}:host .menu-container .menu .menu-item.text-color-contact{color:#fa4}:host .menu-container .menu .menu-item.text-color-clientcontact{color:#fa4}:host .menu-container .menu .menu-item.text-color-opportunity{color:#625}:host .menu-container .menu .menu-item.text-color-job{color:#b56}:host .menu-container .menu .menu-item.text-color-joborder{color:#b56}:host .menu-container .menu .menu-item.text-color-submission{color:#a9adbb}:host .menu-container .menu .menu-item.text-color-sendout{color:#747884}:host .menu-container .menu .menu-item.text-color-placement{color:#0b344f}:host .menu-container .menu .menu-item.text-color-note{color:#747884}:host .menu-container .menu .menu-item.text-color-contract{color:#454ea0}:host .menu-container .menu .menu-item.text-color-jobCode{color:#696d79}:host .menu-container .menu .menu-item.text-color-earnCode{color:#696d79}:host .menu-container .menu .menu-item.text-color-invoiceStatement{color:#696d79}:host .menu-container .menu .menu-item.text-color-billableCharge{color:#696d79}:host .menu-container .menu .menu-item.text-color-payableCharge{color:#696d79}:host .menu-container .menu .menu-item.text-color-user{color:#696d79}:host .menu-container .menu .menu-item.text-color-corporateUser{color:#696d79}:host .menu-container .menu .menu-item.text-color-distributionList{color:#696d79}:host .menu-container .menu .menu-item.text-color-credential{color:#696d79}:host .menu-container .menu .menu-item.text-color-person{color:#696d79}:host .menu-container .menu .menu-item.margin-before{margin-top:.4rem}:host .menu-container .menu .menu-item.margin-after{margin-bottom:.8rem}:host .menu-container .menu .menu-item.text-length-small{max-width:40ch}:host .menu-container .menu .menu-item.text-length-medium{max-width:55ch}:host .menu-container .menu .menu-item.text-length-large{max-width:70ch}:host .menu-container .menu .menu-item.text-weight-hairline{font-weight:100}:host .menu-container .menu .menu-item.text-weight-thin{font-weight:200}:host .menu-container .menu .menu-item.text-weight-light{font-weight:300}:host .menu-container .menu .menu-item.text-weight-normal{font-weight:400}:host .menu-container .menu .menu-item.text-weight-medium{font-weight:500}:host .menu-container .menu .menu-item.text-weight-semibold{font-weight:600}:host .menu-container .menu .menu-item.text-weight-bold{font-weight:700}:host .menu-container .menu .menu-item.text-weight-extrabold{font-weight:800}:host .menu-container .menu .menu-item.text-weight-heavy{font-weight:900}:host .menu-container .menu .menu-item.text-weight-lighter{font-weight:lighter}:host .menu-container .menu .menu-item.text-weight-bolder{font-weight:bolder}:host .menu-container .menu .divider{order:none;height:1px;background:#e2e2e2}:host .menu-container .menu a.disabled{color:#bebebe;cursor:not-allowed}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuContentComponent, decorators: [{
            type: Component,
            args: [{ selector: 'menu-content', template: `<div class="menu-container novo-menu" [ngClass]="menuClass" tabindex="0">
    <ul #menu class="menu" style="position: static; float: none;" tabindex="0">
      <ng-container *ngFor="let menuItem of menuItems; let i = index">
        <ng-template [ngTemplateOutlet]="menuItem.template" [ngTemplateOutletContext]="{ $implicit: item }"></ng-template>
        <!-- <novo-icon class="sub-menu-caret" suffix *ngIf="!!menuItem.subMenu" size="small" color="ash">expand</novo-icon> -->
      </ng-container>
    </ul>
  </div> `, styles: [":host .passive{display:block;padding:3px 20px;clear:both;font-weight:400;white-space:nowrap}:host .menu-container{width:180px}:host .menu-container .menu{cursor:default;list-style:none;background-color:var(--background-bright);-webkit-padding-start:0px!important;padding-inline-start:0px!important;box-shadow:0 -1px 3px -2px #0003,0 2px 2px #00000024,0 1px 5px #0000001f}:host .menu-container .menu :hover{background:rgba(74,137,220,.1);color:#3d464d}:host .menu-container .menu :active{background:rgba(74,137,220,.4)}:host .menu-container .menu .menu-item-container{display:flex;align-items:center;position:relative}:host .menu-container .menu .menu-item-container .sub-menu-caret{position:absolute;right:.5rem}:host .menu-container .menu .menu-item{display:inline;font-weight:400;color:inherit;font-size:var(--font-size-text);transition:color .2s ease-out,opacity .2s ease-out;vertical-align:middle;cursor:pointer;margin:0;padding:1rem 1rem 1rem 1.25rem;box-sizing:border-box;display:flex;align-items:center;gap:1rem;flex:1}:host .menu-container .menu .menu-item.text-capitalize{text-transform:capitalize}:host .menu-container .menu .menu-item.text-uppercase{text-transform:uppercase}:host .menu-container .menu .menu-item.text-nowrap{white-space:nowrap}:host .menu-container .menu .menu-item.text-ellipsis{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}:host .menu-container .menu .menu-item.text-size-default{font-size:inherit}:host .menu-container .menu .menu-item.text-size-body{font-size:1.3rem}:host .menu-container .menu .menu-item.text-size-xs{font-size:1rem}:host .menu-container .menu .menu-item.text-size-sm{font-size:1.2rem}:host .menu-container .menu .menu-item.text-size-md{font-size:1.3rem}:host .menu-container .menu .menu-item.text-size-lg{font-size:1.6rem}:host .menu-container .menu .menu-item.text-size-xl{font-size:2rem}:host .menu-container .menu .menu-item.text-size-2xl{font-size:2.6rem}:host .menu-container .menu .menu-item.text-size-3xl{font-size:3.2rem}:host .menu-container .menu .menu-item.text-size-smaller{font-size:.8em}:host .menu-container .menu .menu-item.text-size-larger{font-size:1.2em}:host .menu-container .menu .menu-item.text-color-black{color:#000}:host .menu-container .menu .menu-item.text-color-white{color:#fff}:host .menu-container .menu .menu-item.text-color-gray{color:#9e9e9e}:host .menu-container .menu .menu-item.text-color-grey{color:#9e9e9e}:host .menu-container .menu .menu-item.text-color-offWhite{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-bright{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-light{color:#dbdbdb}:host .menu-container .menu .menu-item.text-color-neutral{color:#4f5361}:host .menu-container .menu .menu-item.text-color-dark{color:#3d464d}:host .menu-container .menu .menu-item.text-color-orange{color:#ff6900}:host .menu-container .menu .menu-item.text-color-navigation{color:#202945}:host .menu-container .menu .menu-item.text-color-skyBlue{color:#009bdf}:host .menu-container .menu .menu-item.text-color-steel{color:#5b6770}:host .menu-container .menu .menu-item.text-color-metal{color:#637893}:host .menu-container .menu .menu-item.text-color-sand{color:#f4f4f4}:host .menu-container .menu .menu-item.text-color-silver{color:#e2e2e2}:host .menu-container .menu .menu-item.text-color-stone{color:#bebebe}:host .menu-container .menu .menu-item.text-color-ash{color:#a0a0a0}:host .menu-container .menu .menu-item.text-color-slate{color:#707070}:host .menu-container .menu .menu-item.text-color-onyx{color:#526980}:host .menu-container .menu .menu-item.text-color-charcoal{color:#282828}:host .menu-container .menu .menu-item.text-color-moonlight{color:#1a242f}:host .menu-container .menu .menu-item.text-color-midnight{color:#202945}:host .menu-container .menu .menu-item.text-color-darkness{color:#161f27}:host .menu-container .menu .menu-item.text-color-navy{color:#0d2d42}:host .menu-container .menu .menu-item.text-color-aqua{color:#3bafda}:host .menu-container .menu .menu-item.text-color-ocean{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-mint{color:#37bc9b}:host .menu-container .menu .menu-item.text-color-grass{color:#8cc152}:host .menu-container .menu .menu-item.text-color-sunflower{color:#f6b042}:host .menu-container .menu .menu-item.text-color-bittersweet{color:#eb6845}:host .menu-container .menu .menu-item.text-color-grapefruit{color:#da4453}:host .menu-container .menu .menu-item.text-color-carnation{color:#d770ad}:host .menu-container .menu .menu-item.text-color-lavender{color:#967adc}:host .menu-container .menu .menu-item.text-color-mountain{color:#9678b6}:host .menu-container .menu .menu-item.text-color-info{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-positive{color:#4a89dc}:host .menu-container .menu .menu-item.text-color-success{color:#8cc152}:host .menu-container .menu .menu-item.text-color-negative{color:#da4453}:host .menu-container .menu .menu-item.text-color-danger{color:#da4453}:host .menu-container .menu .menu-item.text-color-error{color:#da4453}:host .menu-container .menu .menu-item.text-color-warning{color:#f6b042}:host .menu-container .menu .menu-item.text-color-empty{color:#cccdcc}:host .menu-container .menu .menu-item.text-color-disabled{color:#bebebe}:host .menu-container .menu .menu-item.text-color-background{color:#f7f7f7}:host .menu-container .menu .menu-item.text-color-backgroundDark{color:#e2e2e2}:host .menu-container .menu .menu-item.text-color-presentation{color:#5b6770}:host .menu-container .menu .menu-item.text-color-bullhorn{color:#ff6900}:host .menu-container .menu .menu-item.text-color-pulse{color:#3bafda}:host .menu-container .menu .menu-item.text-color-company{color:#39d}:host .menu-container .menu .menu-item.text-color-candidate{color:#4b7}:host .menu-container .menu .menu-item.text-color-lead{color:#a69}:host .menu-container .menu .menu-item.text-color-contact{color:#fa4}:host .menu-container .menu .menu-item.text-color-clientcontact{color:#fa4}:host .menu-container .menu .menu-item.text-color-opportunity{color:#625}:host .menu-container .menu .menu-item.text-color-job{color:#b56}:host .menu-container .menu .menu-item.text-color-joborder{color:#b56}:host .menu-container .menu .menu-item.text-color-submission{color:#a9adbb}:host .menu-container .menu .menu-item.text-color-sendout{color:#747884}:host .menu-container .menu .menu-item.text-color-placement{color:#0b344f}:host .menu-container .menu .menu-item.text-color-note{color:#747884}:host .menu-container .menu .menu-item.text-color-contract{color:#454ea0}:host .menu-container .menu .menu-item.text-color-jobCode{color:#696d79}:host .menu-container .menu .menu-item.text-color-earnCode{color:#696d79}:host .menu-container .menu .menu-item.text-color-invoiceStatement{color:#696d79}:host .menu-container .menu .menu-item.text-color-billableCharge{color:#696d79}:host .menu-container .menu .menu-item.text-color-payableCharge{color:#696d79}:host .menu-container .menu .menu-item.text-color-user{color:#696d79}:host .menu-container .menu .menu-item.text-color-corporateUser{color:#696d79}:host .menu-container .menu .menu-item.text-color-distributionList{color:#696d79}:host .menu-container .menu .menu-item.text-color-credential{color:#696d79}:host .menu-container .menu .menu-item.text-color-person{color:#696d79}:host .menu-container .menu .menu-item.margin-before{margin-top:.4rem}:host .menu-container .menu .menu-item.margin-after{margin-bottom:.8rem}:host .menu-container .menu .menu-item.text-length-small{max-width:40ch}:host .menu-container .menu .menu-item.text-length-medium{max-width:55ch}:host .menu-container .menu .menu-item.text-length-large{max-width:70ch}:host .menu-container .menu .menu-item.text-weight-hairline{font-weight:100}:host .menu-container .menu .menu-item.text-weight-thin{font-weight:200}:host .menu-container .menu .menu-item.text-weight-light{font-weight:300}:host .menu-container .menu .menu-item.text-weight-normal{font-weight:400}:host .menu-container .menu .menu-item.text-weight-medium{font-weight:500}:host .menu-container .menu .menu-item.text-weight-semibold{font-weight:600}:host .menu-container .menu .menu-item.text-weight-bold{font-weight:700}:host .menu-container .menu .menu-item.text-weight-extrabold{font-weight:800}:host .menu-container .menu .menu-item.text-weight-heavy{font-weight:900}:host .menu-container .menu .menu-item.text-weight-lighter{font-weight:lighter}:host .menu-container .menu .menu-item.text-weight-bolder{font-weight:bolder}:host .menu-container .menu .divider{order:none;height:1px;background:#e2e2e2}:host .menu-container .menu a.disabled{color:#bebebe;cursor:not-allowed}\n"] }]
        }], ctorParameters: function () { return []; }, propDecorators: { menuItems: [{
                type: Input
            }], item: [{
                type: Input
            }], event: [{
                type: Input
            }], menu: [{
                type: Input
            }], parentMenu: [{
                type: Input
            }], menuClass: [{
                type: Input
            }], overlay: [{
                type: Input
            }], isLeaf: [{
                type: Input
            }], openSubMenu: [{
                type: Output
            }], closeLeafMenu: [{
                type: Output
            }], closeAllMenus: [{
                type: Output
            }], onKeyEvent: [{
                type: HostListener,
                args: ['window:keydown.ArrowDown', ['$event']]
            }, {
                type: HostListener,
                args: ['window:keydown.ArrowUp', ['$event']]
            }], keyboardOpenSubMenu: [{
                type: HostListener,
                args: ['window:keydown.ArrowRight', ['$event']]
            }], keyboardMenuItemSelect: [{
                type: HostListener,
                args: ['window:keydown.Enter', ['$event']]
            }, {
                type: HostListener,
                args: ['window:keydown.Space', ['$event']]
            }], onCloseLeafMenu: [{
                type: HostListener,
                args: ['window:keydown.Escape', ['$event']]
            }, {
                type: HostListener,
                args: ['window:keydown.ArrowLeft', ['$event']]
            }], closeMenu: [{
                type: HostListener,
                args: ['document:click', ['$event']]
            }], onMouseLeave: [{
                type: HostListener,
                args: ['mouseleave', ['$event']]
            }] } });

/**
 * This is a structural directive now.  Should only be used on `novo-options`
 */
class MenuItemDirective {
    constructor(template, elementRef) {
        this.template = template;
        this.elementRef = elementRef;
        this.menuItemEnabled = true;
        this.menuItemVisible = true;
    }
}
MenuItemDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
MenuItemDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuItemDirective, selector: "[menuItem]", inputs: { menuItemEnabled: "menuItemEnabled", menuItemVisible: "menuItemVisible" }, queries: [{ propertyName: "optionRef", first: true, predicate: NovoOption, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuItemDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[menuItem]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ElementRef }]; }, propDecorators: { menuItemEnabled: [{
                type: Input
            }], menuItemVisible: [{
                type: Input
            }], optionRef: [{
                type: ContentChild,
                args: [NovoOption]
            }] } });

class NovoMenuService {
    constructor(overlay, scrollStrategy) {
        this.overlay = overlay;
        this.scrollStrategy = scrollStrategy;
        this.isDestroyingLeafMenu = false;
        this.show = new Subject();
        this.triggerClose = new Subject();
        this.close = new Subject();
        this.overlays = [];
        this.fakeElement = {
            getBoundingClientRect: () => ({
                bottom: 0,
                height: 0,
                left: 0,
                right: 0,
                top: 0,
                width: 0,
                x: 0,
                y: 0,
            }),
        };
    }
    openMenu(context) {
        const { anchorElement, event, parentMenu } = context;
        if (!parentMenu) {
            const mouseEvent = event;
            this.fakeElement.getBoundingClientRect = () => ({
                bottom: mouseEvent.clientY,
                height: 0,
                left: mouseEvent.clientX,
                right: mouseEvent.clientX,
                top: mouseEvent.clientY,
                width: 0,
                x: mouseEvent.clientX,
                y: mouseEvent.clientY,
            });
            this.closeAllMenus({ eventType: 'cancel', event });
            const positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo(new ElementRef(anchorElement || this.fakeElement))
                .withFlexibleDimensions(false)
                .withPositions([
                { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },
                { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom' },
                { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },
                { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },
                { originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center' },
                { originX: 'start', originY: 'center', overlayX: 'end', overlayY: 'center' },
            ]);
            this.overlays = [
                this.overlay.create({
                    positionStrategy,
                    panelClass: 'novo-menu',
                    scrollStrategy: this.scrollStrategy.close(),
                }),
            ];
            this.attachMenu(this.overlays[0], context);
        }
        else {
            const positionStrategy = this.overlay
                .position()
                .flexibleConnectedTo(new ElementRef(event ? event.target : anchorElement))
                .withFlexibleDimensions(false)
                .withPositions([
                { originX: 'end', originY: 'top', overlayX: 'start', overlayY: 'top' },
                { originX: 'start', originY: 'top', overlayX: 'end', overlayY: 'top' },
                { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },
                { originX: 'start', originY: 'bottom', overlayX: 'end', overlayY: 'bottom' },
            ]);
            const newOverlay = this.overlay.create({
                positionStrategy,
                panelClass: 'novo-menu',
                scrollStrategy: this.scrollStrategy.close(),
            });
            // this.destroySubMenus(parentMenu);
            this.overlays = this.overlays.concat(newOverlay);
            this.attachMenu(newOverlay, context);
        }
    }
    attachMenu(overlay, context) {
        const { event, item, menu, menuItems, menuClass, menuTrigger } = context;
        const menuContent = overlay.attach(new ComponentPortal(MenuContentComponent));
        menuContent.instance.event = event;
        menuContent.instance.item = item;
        menuContent.instance.menu = menu;
        menuContent.instance.menuItems = menuItems;
        menuContent.instance.overlay = overlay;
        menuContent.instance.isLeaf = true;
        menuContent.instance.menuClass = menuClass;
        overlay.menu = menuContent.instance;
        if (!!menuTrigger) {
            menuTrigger.menuContent = menuContent.instance;
        }
        const subscriptions = new Subscription();
        // subscriptions.add(
        //   menuContent.instance.execute
        //     .asObservable()
        //     .subscribe((executeEvent) => this.closeAllMenus({ eventType: 'execute', ...executeEvent })),
        // );
        subscriptions.add(menuContent.instance.closeAllMenus
            .asObservable()
            .subscribe((closeAllEvent) => this.closeAllMenus({ eventType: 'cancel', ...closeAllEvent })));
        subscriptions.add(menuContent.instance.closeLeafMenu.asObservable().subscribe((closeLeafMenuEvent) => this.destroyLeafMenu(closeLeafMenuEvent)));
        subscriptions.add(menuContent.instance.openSubMenu.asObservable().subscribe((subMenuEvent) => {
            this.destroySubMenus(menuContent.instance);
            if (!subMenuEvent.menu) {
                menuContent.instance.isLeaf = true;
                return;
            }
            menuContent.instance.isLeaf = false;
            this.show.next(subMenuEvent);
        }));
        menuContent.onDestroy(() => {
            // menuItems.forEach((menuItem) => (menuItem.isActive = false));
            subscriptions.unsubscribe();
        });
        menuContent.changeDetectorRef.detectChanges();
    }
    closeAllMenus(closeEvent) {
        if (this.overlays) {
            this.close.next(closeEvent);
            this.overlays.forEach((overlay, index) => {
                overlay.detach();
                overlay.dispose();
            });
        }
        this.overlays = [];
    }
    hasOpenMenus() {
        return this.overlays?.length > 0;
    }
    getLastAttachedOverlay() {
        let overlay = this.overlays[this.overlays.length - 1];
        while (this.overlays.length > 1 && overlay && !overlay.hasAttached()) {
            overlay.detach();
            overlay.dispose();
            this.overlays = this.overlays.slice(0, -1);
            overlay = this.overlays[this.overlays.length - 1];
        }
        return overlay;
    }
    destroyLeafMenu({ exceptRootMenu, event } = {}) {
        if (this.isDestroyingLeafMenu) {
            return;
        }
        this.isDestroyingLeafMenu = true;
        setTimeout(() => {
            const overlay = this.getLastAttachedOverlay();
            if (this.overlays.length > 1 && overlay) {
                overlay.detach();
                overlay.dispose();
            }
            if (!exceptRootMenu && this.overlays.length > 0 && overlay) {
                this.close.next({ eventType: 'cancel', event });
                overlay.detach();
                overlay.dispose();
            }
            const newLeaf = this.getLastAttachedOverlay();
            if (newLeaf) {
                newLeaf.menu.isLeaf = true;
            }
            this.isDestroyingLeafMenu = false;
        });
    }
    destroySubMenus(menu) {
        const overlay = menu.overlay;
        const index = this.overlays.indexOf(overlay);
        this.overlays.slice(index + 1).forEach((subMenuOverlay) => {
            subMenuOverlay.detach();
            subMenuOverlay.dispose();
        });
    }
    isLeafMenu(menuContent) {
        const overlay = this.getLastAttachedOverlay();
        return menuContent.overlay === overlay;
    }
}
NovoMenuService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuService, deps: [{ token: i1$1.Overlay }, { token: i1$1.ScrollStrategyOptions }], target: i0.ɵɵFactoryTarget.Injectable });
NovoMenuService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i1$1.ScrollStrategyOptions }]; } });

const MENU_OPTIONS = new InjectionToken('MENU_OPTIONS');
const PARENT_MENU = new InjectionToken('PARENT_MENU');

class MenuComponent {
    constructor(menuService, changeDetector, elementRef, options) {
        this.menuService = menuService;
        this.changeDetector = changeDetector;
        this.elementRef = elementRef;
        this.options = options;
        this.menuClass = '';
        this.autoFocus = false;
        this.disabled = false;
        this.close = new EventEmitter();
        this.open = new EventEmitter();
        this.visibleMenuItems = [];
        this.links = [];
        this.subscription = new Subscription();
        if (options) {
            this.autoFocus = options.autoFocus;
        }
        this.subscription.add(menuService.show.subscribe((menuEvent) => {
            this.onMenuEvent(menuEvent);
        }));
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    onMenuEvent(menuEvent) {
        if (this.disabled) {
            return;
        }
        const { menu, event, item } = menuEvent;
        if (menu && menu !== this) {
            return;
        }
        this.event = event;
        this.item = item;
        this.setVisibleMenuItems();
        this.menuService.openMenu({ ...menuEvent, menuItems: this.visibleMenuItems, menuClass: this.menuClass });
        this.menuService.close
            .asObservable()
            .pipe(first())
            .subscribe((closeEvent) => this.close.emit(closeEvent));
        this.open.next(menuEvent);
    }
    isMenuItemVisible(menuItem) {
        return this.evaluateIfFunction(menuItem.menuItemVisible);
    }
    setVisibleMenuItems() {
        this.visibleMenuItems = this.menuItems.filter((menuItem) => this.isMenuItemVisible(menuItem));
    }
    evaluateIfFunction(value) {
        if (value instanceof Function) {
            return value(this.item);
        }
        return value;
    }
}
MenuComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuComponent, deps: [{ token: NovoMenuService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MENU_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });
MenuComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: MenuComponent, selector: "novo-menu", inputs: { menuClass: "menuClass", autoFocus: "autoFocus", disabled: "disabled" }, outputs: { close: "close", open: "open" }, providers: [{ provide: PARENT_MENU, useExisting: MenuComponent }], queries: [{ propertyName: "menuItems", predicate: MenuItemDirective }, { propertyName: "menuOptions", predicate: NovoOption }], viewQueries: [{ propertyName: "menuElement", first: true, predicate: ["menu"], descendants: true }], ngImport: i0, template: ``, isInline: true, styles: [".cdk-overlay-container{position:fixed;z-index:z(overlay);pointer-events:none;top:0;left:0;width:100%;height:100%}.novo-menu.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box}\n"], encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuComponent, decorators: [{
            type: Component,
            args: [{
                    encapsulation: ViewEncapsulation.None,
                    selector: 'novo-menu',
                    styles: [
                        `
      .cdk-overlay-container {
        position: fixed;
        z-index: z(overlay);
        pointer-events: none;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      .novo-menu.cdk-overlay-pane {
        position: absolute;
        pointer-events: auto;
        box-sizing: border-box;
      }
    `,
                    ],
                    template: ``,
                    providers: [{ provide: PARENT_MENU, useExisting: MenuComponent }],
                }]
        }], ctorParameters: function () { return [{ type: NovoMenuService }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [MENU_OPTIONS]
                }] }]; }, propDecorators: { menuClass: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], disabled: [{
                type: Input
            }], close: [{
                type: Output
            }], open: [{
                type: Output
            }], menuItems: [{
                type: ContentChildren,
                args: [MenuItemDirective]
            }], menuOptions: [{
                type: ContentChildren,
                args: [NovoOption]
            }], menuElement: [{
                type: ViewChild,
                args: ['menu']
            }] } });

class MenuDirective {
    constructor(element, menuService, cdr, _parentMenu) {
        this.element = element;
        this.menuService = menuService;
        this.cdr = cdr;
        this._parentMenu = _parentMenu;
        this.waitWhenOpen = false;
        this.capture = false;
        this.anchor = false;
        this.trigger = 'click';
        this.isSubMenu = false;
        this.isActive = false;
        if (!!this._parentMenu) {
            this.isSubMenu = true;
            this.trigger = 'mouseenter';
        }
    }
    get hb_menuActive() {
        return this.isActive;
    }
    ngOnInit() {
        this.subscription = this.menuService.close.subscribe(() => {
            this.isActive = false;
            this.cdr.detectChanges();
        });
    }
    ngOnDestroy() {
        this.isActive = false;
        this.subscription.unsubscribe();
    }
    onMenuClick(event) {
        if (this.trigger !== event.type) {
            return;
        }
        if (this.trigger === 'click' && event.button !== 0) {
            return;
        }
        else if (this.trigger === 'contextmenu' && event.button !== 2) {
            return;
        }
        else if (this.waitWhenOpen && this.menuService.hasOpenMenus()) {
            return;
        }
        if (!this.menu.disabled) {
            this.menuService.show.next({
                menu: this.menu,
                event,
                item: this.menuContext,
                anchorElement: this.anchor ? this.element.nativeElement : null,
                parentMenu: this._parentMenu,
                menuTrigger: this,
            });
            this.isActive = true;
            event.preventDefault();
            event.stopPropagation();
            this.cdr.detectChanges();
        }
    }
}
MenuDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuDirective, deps: [{ token: i0.ElementRef }, { token: NovoMenuService }, { token: i0.ChangeDetectorRef }, { token: PARENT_MENU, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
MenuDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: MenuDirective, selector: "[menu]", inputs: { menuContext: "menuContext", menu: "menu", menuContent: "menuContent", waitWhenOpen: "waitWhenOpen", capture: "capture", anchor: "anchor", trigger: "trigger" }, host: { listeners: { "click": "onMenuClick($event)", "contextmenu": "onMenuClick($event)", "mouseenter": "onMenuClick($event)" }, properties: { "class.menu-active": "this.hb_menuActive" } }, ngImport: i0 });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], MenuDirective.prototype, "waitWhenOpen", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], MenuDirective.prototype, "capture", void 0);
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], MenuDirective.prototype, "anchor", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: MenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[menu]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoMenuService }, { type: i0.ChangeDetectorRef }, { type: MenuComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [PARENT_MENU]
                }] }]; }, propDecorators: { menuContext: [{
                type: Input
            }], menu: [{
                type: Input
            }], menuContent: [{
                type: Input
            }], waitWhenOpen: [{
                type: Input
            }], capture: [{
                type: Input
            }], anchor: [{
                type: Input
            }], trigger: [{
                type: Input
            }], hb_menuActive: [{
                type: HostBinding,
                args: ['class.menu-active']
            }], onMenuClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }, {
                type: HostListener,
                args: ['contextmenu', ['$event']]
            }, {
                type: HostListener,
                args: ['mouseenter', ['$event']]
            }] } });

class NovoMenuModule {
    static forRoot(options) {
        return {
            ngModule: NovoMenuModule,
            providers: [
                NovoMenuService,
                {
                    provide: MENU_OPTIONS,
                    useValue: options,
                },
                { provide: OverlayContainer, useClass: FullscreenOverlayContainer },
            ],
        };
    }
}
NovoMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuModule, declarations: [MenuDirective, MenuComponent, MenuContentComponent, MenuItemDirective], imports: [CommonModule, OverlayModule, NovoCommonModule, NovoIconModule], exports: [MenuDirective, MenuComponent, MenuItemDirective] });
NovoMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuModule, imports: [[CommonModule, OverlayModule, NovoCommonModule, NovoIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMenuModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MenuDirective, MenuComponent, MenuContentComponent, MenuItemDirective],
                    exports: [MenuDirective, MenuComponent, MenuItemDirective],
                    imports: [CommonModule, OverlayModule, NovoCommonModule, NovoIconModule],
                }]
        }] });

/*
 * Public API Surface of ngx-contextmenu
 */

// NG2
// Value accessor for the component (supports ngModel)
const CHIPS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoMultiPickerElement),
    multi: true,
};
class NovoMultiPickerElement {
    constructor(element, labels) {
        this.element = element;
        this.labels = labels;
        this.placeholder = '';
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.items = [];
        this._items = new ReplaySubject(1);
        this.selected = null;
        this.config = {};
        // private data model
        this._value = {};
        this.notShown = {};
        this.onModelChange = () => { };
        this.onModelTouched = () => { };
        this.chipsCount = 4;
    }
    get value() {
        return this._value;
    }
    set value(selectedItems) {
        if (selectedItems) {
            this.types.forEach((x) => (this._value[x.value] = selectedItems[x.value]));
        }
        else {
            this._value = {};
            this.types.forEach((x) => (this._value[x.value] = []));
        }
        this.changed.emit(selectedItems);
        this.onModelChange(selectedItems);
    }
    ngOnInit() {
        this.selectAllOption = this.source.selectAllOption || false;
        this.chipsCount = this.source.chipsCount || 4;
        this.strictRelationship = this.source.strictRelationship || false;
        this.setupOptions();
    }
    clearValue() {
        this.types.forEach((type) => this.modifyAllOfType(type.value, 'unselect'));
        this.items = [];
        this._items.next(this.items);
        this.setInitialValue(null);
        this.onModelChange(this.value);
    }
    removeFromDisplay(event, item) {
        this.remove(true, item);
        this.modifyAffectedParentsOrChildren(false, item);
    }
    setupOptions() {
        this.options = this.source.options || [];
        this._options = [];
        if (this.options) {
            this.options.forEach((option) => {
                const formattedOption = this.setupOptionsByType(option);
                this._options.push(formattedOption);
            });
        }
        this.source.options = this._options;
    }
    setupOptionsByType(section) {
        const formattedSection = {
            type: section.type,
            label: section.label || section.type,
        };
        formattedSection.data = section.data.map((item) => {
            return this.formatOption(section, item);
        });
        if (this.selectAllOption) {
            const selectAll = this.createSelectAllOption(section);
            formattedSection.data.splice(0, 0, selectAll);
        }
        formattedSection.originalData = formattedSection.data.slice();
        return formattedSection;
    }
    formatOption(section, item) {
        const obj = {
            value: section.field ? item[section.field] : item.value || item,
            label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
            type: section.type,
            checked: undefined,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (obj.isChildOf) {
            obj[section.isChildOf] = item[section.isChildOf];
        }
        return obj;
    }
    createSelectAllOption(section) {
        const selectAll = {
            value: 'ALL',
            label: `All ${section.type}`,
            type: section.type,
            checked: this.model && this.model.length && this.model.indexOf('ALL') !== -1,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (section.isChildOf) {
            const allParents = section.data.reduce((accum, next) => {
                return accum.concat(next[section.isChildOf]);
            }, []);
            selectAll[section.isChildOf] = allParents;
        }
        return selectAll;
    }
    deselectAll() {
        this.selected = null;
    }
    select(event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
    }
    onFocus(e) {
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(e);
    }
    clickOption(event) {
        if (event && !(event instanceof Event)) {
            if (event.checked === false) {
                this.remove(null, event);
            }
            else {
                this.add(event);
            }
            this.modifyAffectedParentsOrChildren(event.checked, event);
            // Set focus on the picker
            const input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
    }
    add(event) {
        if (event.value === 'ALL') {
            this.modifyAllOfType(event.type, 'select');
        }
        else {
            this.updateDisplayItems(event, 'add');
            this.value[event.type].push(event.value);
            this.updateAllItemState(event.type);
            this.triggerValueUpdate();
        }
        this.updateParentOrChildren(event, 'select');
        this.select(null, event);
    }
    updateAllItemState(type) {
        const allOfType = this.getAllOfType(type);
        const allOfTypeSelected = this.allItemsSelected(allOfType, type);
        if (allOfTypeSelected) {
            this.selectAll(allOfType, type);
        }
        return { allOfType, allOfTypeSelected };
    }
    setIndeterminateState(allOfType, status) {
        if (!this.selectAllOption) {
            return;
        }
        const allItem = allOfType[0];
        allItem.indeterminate = status;
    }
    updateDisplayItems(item, action) {
        const adding = action === 'add';
        if (adding) {
            this.items.push(item);
        }
        else {
            if (this.items.indexOf(item) > -1) {
                this.items.splice(this.items.indexOf(item), 1);
            }
        }
        this.updateDisplayText(this.items);
        this._items.next(this.items);
    }
    updateDisplayText(items) {
        this.notShown = [];
        const notShown = items.slice(this.chipsCount);
        if (notShown.length > 0) {
            this.types.forEach((type) => {
                let count;
                const selectedOfType = notShown.filter((x) => x.type === type.value);
                if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                    count = this.getAllOfType(type.value).length - 1;
                }
                else {
                    count = selectedOfType.length;
                }
                const displayType = count === 1 ? type.singular : type.plural || type.value;
                if (count > 0) {
                    this.notShown.push({ type: displayType, count });
                }
            });
        }
    }
    remove(event, item) {
        let triggeredByEvent;
        if (event) {
            triggeredByEvent = true;
        }
        const itemToRemove = item;
        if (itemToRemove.value === 'ALL') {
            triggeredByEvent = false;
            this.modifyAllOfType(itemToRemove.type, 'unselect');
        }
        else if (this.allOfTypeSelected(itemToRemove.type)) {
            this.handleRemoveItemIfAllSelected(itemToRemove);
        }
        this.removeItem(item, triggeredByEvent);
    }
    removeItem(item, triggeredByEvent) {
        item.checked = false;
        this.deselectAll();
        this.removeValue(item);
        if (item.value !== 'ALL') {
            this.updateParentOrChildren(item, 'unselect');
        }
        if (triggeredByEvent) {
            this.modifyAffectedParentsOrChildren(false, item);
        }
    }
    removeValue(item) {
        const updatedValues = this.value[item.type].filter((x) => x !== item.value);
        this.value[item.type] = updatedValues;
        this.triggerValueUpdate();
        this.updateDisplayItems(item, 'remove');
    }
    onKeyDown(event) {
        if (event.key === "Backspace" /* Backspace */) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(null, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    }
    allOfTypeSelected(type) {
        return this.items.filter((x) => x.type === type && x.value === 'ALL').length > 0;
    }
    modifyAllOfType(type, action) {
        const selecting = action === 'select';
        const allOfType = this.getAllOfType(type);
        allOfType.forEach((item) => {
            item.checked = selecting;
            item.indeterminate = false;
        });
        if (selecting) {
            this.selectAll(allOfType, type);
        }
        else {
            this.items = [...this.items.filter((x) => x.type !== type)];
            this._items.next(this.items);
            this.value[type] = [];
        }
        if (this.selectAllOption) {
            this.updateAllParentsOrChildren(allOfType[0], action);
        }
        this.triggerValueUpdate();
    }
    triggerValueUpdate() {
        const updatedObject = {};
        this.types.forEach((x) => (updatedObject[x.value] = this.value[x.value]));
        this.value = updatedObject;
    }
    selectAll(allOfType, type) {
        if (!this.selectAllOption) {
            return;
        }
        allOfType[0].checked = true;
        const values = allOfType.map((i) => {
            return i.value;
        });
        // remove 'ALL' value
        values.splice(0, 1);
        this.value[type] = values;
        const updatedItems = this.items.filter((x) => x.type !== type);
        this.items = updatedItems;
        this.updateDisplayItems(allOfType[0], 'add');
    }
    handleRemoveItemIfAllSelected(item) {
        if (!this.selectAllOption) {
            return;
        }
        const type = item.type;
        const allOfType = this.getAllOfType(type);
        const allItem = allOfType[0];
        this.removeItem(allItem);
        allItem.indeterminate = true;
        const selectedItems = allOfType.filter((i) => i.checked === true);
        this.items = [...this.items, ...selectedItems];
        const values = selectedItems.map((i) => {
            return i.value;
        });
        this.value[type] = [...values];
    }
    handleOutsideClick(event) {
        // If the elements doesn't contain the target element, it is an outside click
        if (!this.element.nativeElement.contains(event.target)) {
            this.blur.emit(event);
            this.deselectAll();
        }
    }
    getAllOfType(type) {
        return this._options.filter((x) => x.type === type)[0].originalData;
    }
    updateParentOrChildren(item, action) {
        if (this.strictRelationship && item.isParentOf) {
            this.updateChildrenValue(item, action);
        }
        else if (item.isChildOf && this.selectAllOption) {
            this.updateParentValue(item, action);
        }
    }
    modifyAffectedParentsOrChildren(selecting, itemChanged) {
        if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
            return;
        }
        const parent = this.types.filter((x) => !!x.isParentOf)[0];
        const parentType = parent.value;
        const allParentType = this.getAllOfType(parentType);
        const childType = allParentType[0].isParentOf;
        const allChildren = this.getAllOfType(childType);
        const allCheckedChildren = allChildren.filter((x) => !!x.checked);
        allParentType.forEach((obj) => {
            if (obj.value === 'ALL') {
                return;
            }
            const selectedChildrenOfParent = allCheckedChildren.filter((x) => {
                return x[parentType].filter((y) => y === obj.value).length > 0;
            });
            if (selecting) {
                if (obj.checked) {
                    return;
                }
                obj.indeterminate = selectedChildrenOfParent.length > 0;
            }
            else {
                const allChildrenOfParent = allChildren.filter((x) => {
                    return x.value !== 'ALL' && x[parentType].filter((y) => y === obj.value).length > 0;
                });
                if (selectedChildrenOfParent.length > 0) {
                    if (obj.checked) {
                        if (this.strictRelationship && allChildrenOfParent.length !== selectedChildrenOfParent.length) {
                            obj.indeterminate = true;
                            obj.checked = false;
                            this.removeValue(obj);
                            this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                    else {
                        obj.indeterminate = true;
                    }
                    if (this.strictRelationship && itemChanged.type !== parentType) {
                        if (obj.checked) {
                            obj.checked = false;
                            this.removeValue(obj);
                            this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                }
                else {
                    obj.indeterminate = false;
                    if (allChildrenOfParent.length === 0) {
                        // if it has no children and is checked, it should stay checked
                        return;
                    }
                    else if (this.strictRelationship && itemChanged.type !== parentType) {
                        this.remove(null, obj);
                    }
                }
            }
        });
        if (this.selectAllOption) {
            this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
        }
    }
    updateAllParentsOrChildren(allItem, action) {
        if (allItem.isParentOf) {
            this.updateAllChildrenValue(allItem, action);
        }
        else if (allItem.isChildOf) {
            this.updateAllParentValue(allItem, action);
        }
    }
    updateAllChildrenValue(item, action) {
        const selecting = action === 'select';
        const childType = item.isParentOf;
        const potentialChildren = this.getAllOfType(childType);
        if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
            this.remove(null, potentialChildren[0]);
            return;
        }
        potentialChildren.forEach((x) => {
            if (x.value === 'ALL' && !x.checked) {
                if (selecting) {
                    x.checked = true;
                }
                x.indeterminate = selecting;
            }
            else {
                if (x.checked && !selecting) {
                    this.remove(null, x);
                }
                x.checked = selecting;
            }
        });
    }
    updateAllParentValue(item, action) {
        const selecting = action === 'select';
        const parentType = item.isChildOf;
        const potentialParents = this.getAllOfType(parentType);
        potentialParents.forEach((x) => {
            if (!x.checked) {
                x.indeterminate = selecting;
            }
        });
    }
    updateIndeterminateStates(allParentType, allChildren, allCheckedChildren) {
        const allCheckedOrIndeterminateParents = allParentType.filter((x) => (!!x.checked || !!x.indeterminate) && x.value !== 'ALL');
        const isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
        const isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
        this.setIndeterminateState(allParentType, isParentIndeterminate);
        this.setIndeterminateState(allChildren, isChildIndeterminate);
    }
    updateChildrenValue(parent, action) {
        const selecting = action === 'select';
        const childType = parent.isParentOf;
        const potentialChildren = this.getAllOfType(childType);
        potentialChildren.forEach((x) => {
            if (x.value === 'ALL') {
                return;
            }
            if (x[parent.type].filter((y) => y === parent.value).length > 0) {
                if (x.checked && !selecting) {
                    x.checked = false;
                    if (this.allOfTypeSelected(childType)) {
                        this.handleRemoveItemIfAllSelected(x);
                    }
                    else {
                        this.removeValue(x);
                    }
                }
                x.checked = selecting;
            }
        });
    }
    updateParentValue(child, action) {
        const allParentType = this.getAllOfType(child.isChildOf);
        if (allParentType[0].checked && action !== 'select') {
            this.handleRemoveItemIfAllSelected(allParentType[0]);
        }
    }
    addIndividualChildren(children) {
        let parentAlreadySelected = false;
        children.forEach((x) => {
            if (x.isChildOf) {
                // only add children if their parents are not already selected
                x[x.isChildOf].forEach((parent) => {
                    if (this.value[x.isChildOf].filter((p) => p === parent).length > 0) {
                        parentAlreadySelected = true;
                    }
                });
            }
            if (this.value[x.type].filter((item) => item === x.value).length === 0 && !parentAlreadySelected) {
                this.add(x);
            }
        });
    }
    setInitialValue(model) {
        this.items = [];
        this.value = model || {};
        if (!this.types) {
            return;
        }
        this.types.forEach((typeObj) => {
            const type = typeObj.value;
            if (this.value[type]) {
                let indeterminateIsSet = false;
                const options = this.updateAllItemState(type);
                const optionsByType = options.allOfType;
                const allSelected = options.allOfTypeSelected;
                this.value[type].forEach((item) => {
                    if (!allSelected && !indeterminateIsSet) {
                        indeterminateIsSet = true;
                        this.setIndeterminateState(optionsByType, true);
                    }
                    const value = optionsByType.filter((x) => x.value === item)[0];
                    value.checked = true;
                    if (!allSelected) {
                        this.updateDisplayItems(value, 'add');
                    }
                    if (this.strictRelationship && value.isParentOf) {
                        this.updateChildrenValue(value, 'select');
                    }
                });
                if (typeObj.isChildOf) {
                    this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                }
            }
            else {
                this.value[type] = [];
            }
        });
    }
    allItemsSelected(optionsByType, type) {
        return this.value[type].length === optionsByType.length - 1;
    }
    // Set touched on blur
    onTouched(e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    }
    writeValue(model) {
        this.model = model;
        this.setInitialValue(model);
    }
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
}
NovoMultiPickerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiPickerElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoMultiPickerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoMultiPickerElement, selector: "multi-picker", inputs: { source: "source", placeholder: "placeholder", types: "types", value: "value" }, outputs: { changed: "changed", focus: "focus", blur: "blur" }, host: { properties: { "class.with-value": "items.length > 0" } }, providers: [CHIPS_VALUE_ACCESSOR], ngImport: i0, template: `
    <novo-chip
      *ngFor="let item of _items | async | slice: 0:chipsCount"
      [type]="item.type"
      [class.selected]="item == selected"
      (removed)="removeFromDisplay($event, item)"
      (selectionChange)="select($event, item)"
    >
      {{ item.label }}
    </novo-chip>
    <div *ngIf="items.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div>
    <div class="chip-input-container">
      <novo-picker
        clearValueOnSelect="true"
        [config]="source"
        [placeholder]="placeholder"
        (select)="clickOption($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (blur)="onTouched($event)"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <i class="bhi-search" [class.has-value]="items.length"></i>
    <label class="clear-all" *ngIf="items.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
  `, isInline: true, components: [{ type: NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { type: NovoPickerElement, selector: "novo-picker", inputs: ["config", "placeholder", "clearValueOnSelect", "closeOnSelect", "selected", "appendToBody", "parentScrollSelector", "parentScrollAction", "containerClass", "side", "autoSelectFirstOption", "overrideElement", "disablePickerInput"], outputs: ["changed", "select", "focus", "blur", "typing"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "slice": i1.SlicePipe, "async": i1.AsyncPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiPickerElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'multi-picker',
                    providers: [CHIPS_VALUE_ACCESSOR],
                    template: `
    <novo-chip
      *ngFor="let item of _items | async | slice: 0:chipsCount"
      [type]="item.type"
      [class.selected]="item == selected"
      (removed)="removeFromDisplay($event, item)"
      (selectionChange)="select($event, item)"
    >
      {{ item.label }}
    </novo-chip>
    <div *ngIf="items.length > chipsCount">
      <ul class="summary">
        <li *ngFor="let type of notShown">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>
      </ul>
    </div>
    <div class="chip-input-container">
      <novo-picker
        clearValueOnSelect="true"
        [config]="source"
        [placeholder]="placeholder"
        (select)="clickOption($event)"
        (keydown)="onKeyDown($event)"
        (focus)="onFocus($event)"
        (blur)="onTouched($event)"
        [overrideElement]="element"
      >
      </novo-picker>
    </div>
    <i class="bhi-search" [class.has-value]="items.length"></i>
    <label class="clear-all" *ngIf="items.length" (click)="clearValue()">{{ labels.clearAll }} <i class="bhi-times"></i></label>
  `,
                    host: {
                        '[class.with-value]': 'items.length > 0',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }]; }, propDecorators: { source: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], types: [{
                type: Input
            }], changed: [{
                type: Output
            }], focus: [{
                type: Output
            }], blur: [{
                type: Output
            }], value: [{
                type: Input
            }] } });

// NG2
class NovoMultiPickerModule {
}
NovoMultiPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoMultiPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiPickerModule, declarations: [NovoMultiPickerElement], imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule], exports: [NovoMultiPickerElement] });
NovoMultiPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiPickerModule, imports: [[CommonModule, FormsModule, NovoPickerModule, NovoChipsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoMultiPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule],
                    declarations: [NovoMultiPickerElement],
                    exports: [NovoMultiPickerElement],
                }]
        }] });

// NG2
class NonIdealStateElement {
    constructor() {
        this.hb_class = 'novo-non-ideal-state';
        this.theme = 'light';
    }
}
NonIdealStateElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NonIdealStateElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NonIdealStateElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NonIdealStateElement, selector: "novo-non-ideal-state", inputs: { theme: "theme", icon: "icon", title: "title", description: "description" }, host: { properties: { "class": "this.hb_class" } }, ngImport: i0, template: `
    <novo-icon class="novo-non-ideal-state-icon" *ngIf="icon" [color]="theme">{{ icon }}</novo-icon>
    <ng-content select="novo-icon"></ng-content>
    <ng-content select="novo-icon,novo-loading,novo-avatar"></ng-content>
    <novo-title class="novo-non-ideal-state-title" *ngIf="title" marginBefore>{{ title }}</novo-title>
    <ng-content select="novo-title"></ng-content>
    <novo-text *ngIf="description" block marginBefore marginAfter>{{ description }}</novo-text>
    <ng-content select="novo-text"></ng-content>
    <ng-content></ng-content>
  `, isInline: true, styles: [":host{padding:2rem;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center}:host .novo-non-ideal-state-icon{font-size:xx-large}:host button{display:inline-block}\n"], components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoTitle, selector: "novo-title,[novo-title]" }, { type: NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NonIdealStateElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-non-ideal-state', template: `
    <novo-icon class="novo-non-ideal-state-icon" *ngIf="icon" [color]="theme">{{ icon }}</novo-icon>
    <ng-content select="novo-icon"></ng-content>
    <ng-content select="novo-icon,novo-loading,novo-avatar"></ng-content>
    <novo-title class="novo-non-ideal-state-title" *ngIf="title" marginBefore>{{ title }}</novo-title>
    <ng-content select="novo-title"></ng-content>
    <novo-text *ngIf="description" block marginBefore marginAfter>{{ description }}</novo-text>
    <ng-content select="novo-text"></ng-content>
    <ng-content></ng-content>
  `, styles: [":host{padding:2rem;display:flex;flex-direction:column;justify-content:center;align-items:center;text-align:center}:host .novo-non-ideal-state-icon{font-size:xx-large}:host button{display:inline-block}\n"] }]
        }], propDecorators: { hb_class: [{
                type: HostBinding,
                args: ['class']
            }], theme: [{
                type: Input
            }], icon: [{
                type: Input
            }], title: [{
                type: Input
            }], description: [{
                type: Input
            }] } });

// NG2
class NovoNonIdealStateModule {
}
NovoNonIdealStateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNonIdealStateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoNonIdealStateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNonIdealStateModule, declarations: [NonIdealStateElement], imports: [CommonModule, NovoIconModule, NovoCommonModule], exports: [NonIdealStateElement] });
NovoNonIdealStateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNonIdealStateModule, imports: [[CommonModule, NovoIconModule, NovoCommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoNonIdealStateModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoIconModule, NovoCommonModule],
                    declarations: [NonIdealStateElement],
                    exports: [NonIdealStateElement],
                }]
        }] });

class GooglePlacesService {
    constructor(_http, platformId, _global, _localStorageService) {
        this._http = _http;
        this.platformId = platformId;
        this._global = _global;
        this._localStorageService = _localStorageService;
    }
    getPredictions(url, query) {
        return new Promise((resolve) => {
            this._http.get(url + '?query=' + query).subscribe((data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
    getLatLngDetail(url, lat, lng) {
        return new Promise((resolve) => {
            this._http.get(url + '?lat=' + lat + '&lng=' + lng).subscribe((data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
    getPlaceDetails(url, placeId) {
        return new Promise((resolve) => {
            this._http.get(url + '?query=' + placeId).subscribe((data) => {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
    getGeoCurrentLocation() {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                if (_window.navigator.geolocation) {
                    _window.navigator.geolocation.getCurrentPosition((pos) => {
                        const latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                        resolve(latlng);
                    });
                }
                else {
                    resolve(false);
                }
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoLatLngDetail(latlng) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const geocoder = new _window.google.maps.Geocoder();
                geocoder.geocode({ location: latlng }, (results, status) => {
                    if (status === 'OK') {
                        this.getGeoPlaceDetail(results[0].place_id).then((result) => {
                            if (result) {
                                resolve(result);
                            }
                            else {
                                resolve(false);
                            }
                        });
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoPrediction(params) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const placesService = new _window.google.maps.places.AutocompleteService();
                let queryInput = {};
                const promiseArr = [];
                if (params.countryRestriction.length) {
                    queryInput = {
                        input: params.query,
                        componentRestrictions: { country: params.countryRestriction },
                    };
                }
                else {
                    queryInput = {
                        input: params.query,
                    };
                }
                if (params.geoLocation) {
                    queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                    queryInput.radius = params.radius;
                }
                if (params.geoTypes.length) {
                    for (let i = 0; i < params.geoTypes.length; i++) {
                        const _tempQuery = queryInput;
                        _tempQuery.types = new Array(params.geoTypes[i]);
                        promiseArr.push(this.geoPredictionCall(placesService, _tempQuery));
                    }
                }
                else {
                    promiseArr.push(this.geoPredictionCall(placesService, queryInput));
                }
                Promise.all(promiseArr).then((values) => {
                    const val = values;
                    if (val.length > 1) {
                        let _tempArr = [];
                        for (let j = 0; j < val.length; j++) {
                            if (val[j] && val[j].length) {
                                _tempArr = _tempArr.concat(val[j]);
                            }
                        }
                        _tempArr = this.getUniqueResults(_tempArr);
                        resolve(_tempArr);
                    }
                    else {
                        resolve(values[0]);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoPlaceDetail(placeId) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                placesService.getDetails({ placeId }, (result, status) => {
                    if (result === null || result.length === 0) {
                        this.getGeoPaceDetailByReferance(result.referance).then((referanceData) => {
                            if (!referanceData) {
                                resolve(false);
                            }
                            else {
                                resolve(referanceData);
                            }
                        });
                    }
                    else {
                        resolve(result);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    getGeoPaceDetailByReferance(referance) {
        return new Promise((resolve) => {
            if (isPlatformBrowser(this.platformId)) {
                const _window = this._global.nativeGlobal;
                const placesService = new _window.google.maps.places.PlacesService();
                placesService.getDetails({ reference: referance }, (result, status) => {
                    if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    }
    addRecentList(localStorageName, result, itemSavedLength) {
        this.getRecentList(localStorageName).then((data) => {
            if (data) {
                for (let i = 0; i < data.length; i++) {
                    if (data[i].description === result.description) {
                        data.splice(i, 1);
                        break;
                    }
                }
                data.unshift(result);
                if (data.length > itemSavedLength) {
                    data.pop();
                }
                this._localStorageService.setItem(localStorageName, JSON.stringify(data));
            }
        });
    }
    getRecentList(localStorageName) {
        return new Promise((resolve) => {
            let value = this._localStorageService.getItem(localStorageName);
            if (value) {
                value = JSON.parse(value);
            }
            else {
                value = [];
            }
            resolve(value);
        });
    }
    getUniqueResults(arr) {
        return Array.from(arr.reduce((m, t) => m.set(t.place_id, t), new Map()).values());
    }
    geoPredictionCall(placesService, queryInput) {
        const _window = this._global.nativeGlobal;
        return new Promise((resolve) => {
            placesService.getPlacePredictions(queryInput, (result, status) => {
                if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                    resolve(result);
                }
                else {
                    resolve(false);
                }
            });
        });
    }
}
GooglePlacesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesService, deps: [{ token: i4$1.HttpClient }, { token: PLATFORM_ID }, { token: GlobalRef }, { token: LocalStorageService }], target: i0.ɵɵFactoryTarget.Injectable });
GooglePlacesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i4$1.HttpClient }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: GlobalRef }, { type: LocalStorageService }]; } });

// NG2
class PlacesListComponent {
    constructor(platformId, _elmRef, _global, _googlePlacesService) {
        this.platformId = platformId;
        this._elmRef = _elmRef;
        this._global = _global;
        this._googlePlacesService = _googlePlacesService;
        this.term = '';
        this.termChange = new EventEmitter();
        this.select = new EventEmitter();
        this.locationInput = '';
        this.gettingCurrentLocationFlag = false;
        this.dropdownOpen = false;
        this.recentDropdownOpen = false;
        this.queryItems = [];
        this.isSettingsError = false;
        this.settingsErrorMsg = '';
        this.settings = {};
        this.moduleinit = false;
        this.selectedDataIndex = -1;
        this.recentSearchData = [];
        this.userSelectedOption = '';
        this.defaultSettings = {
            geoPredictionServerUrl: '',
            geoLatLangServiceUrl: '',
            geoLocDetailServerUrl: '',
            geoCountryRestriction: [],
            geoTypes: [],
            geoLocation: [],
            geoRadius: 0,
            serverResponseListHierarchy: [],
            serverResponseatLangHierarchy: [],
            serverResponseDetailHierarchy: [],
            resOnSearchButtonClickOnly: false,
            useGoogleGeoApi: true,
            inputPlaceholderText: 'Enter Area Name',
            inputString: '',
            showSearchButton: true,
            showRecentSearch: true,
            showCurrentLocation: true,
            recentStorageName: 'recentSearches',
            noOfRecentSearchSave: 5,
            currentLocIconUrl: '',
            searchIconUrl: '',
            locationIconUrl: '',
        };
    }
    ngOnInit() {
        if (!this.moduleinit) {
            this.moduleInit();
        }
    }
    ngOnChanges() {
        this.moduleinit = true;
        this.moduleInit();
        this.searchinputCallback(null);
    }
    // function called when click event happens in input box. (Binded with view)
    searchinputClickCallback(event) {
        event.target.select();
        this.searchinputCallback(event);
    }
    // function called when there is a change in input. (Binded with view)
    searchinputCallback(event) {
        const inputVal = this.locationInput;
        if (inputVal) {
            this.getListQuery(inputVal);
        }
        else {
            this.queryItems = [];
            if (this.userSelectedOption) {
                this.userQuerySubmit('false');
            }
            this.userSelectedOption = '';
            if (this.settings.showRecentSearch) {
                this.showRecentSearch();
            }
            else {
                this.dropdownOpen = false;
            }
        }
    }
    // function to execute when user hover over autocomplete list.(binded with view)
    activeListNode(index) {
        for (let i = 0; i < this.queryItems.length; i++) {
            if (index === i) {
                this.queryItems[i].active = true;
                this.selectedDataIndex = index;
            }
            else {
                this.queryItems[i].active = false;
            }
        }
    }
    // function to execute when user select the autocomplete list.(binded with view)
    selectedListNode(event, index) {
        this.dropdownOpen = false;
        if (this.recentDropdownOpen) {
            this.setRecentLocation(this.queryItems[index]);
        }
        else {
            this.getPlaceLocationInfo(this.queryItems[index]);
        }
    }
    // function to close the autocomplete list when clicked outside. (binded with view)
    closeAutocomplete(event) {
        if (!this._elmRef.nativeElement.contains(event.target)) {
            this.selectedDataIndex = -1;
            this.dropdownOpen = false;
        }
    }
    // function to manually trigger the callback to parent component when clicked search button.
    userQuerySubmit(selectedOption) {
        const _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
        if (_userOption) {
            this.select.emit(this.userSelectedOption);
        }
        else {
            // this.select.emit(false);
        }
    }
    // function to get user current location from the device.
    currentLocationSelected() {
        if (isPlatformBrowser(this.platformId)) {
            this.gettingCurrentLocationFlag = true;
            this.dropdownOpen = false;
            this._googlePlacesService.getGeoCurrentLocation().then((result) => {
                if (!result) {
                    this.gettingCurrentLocationFlag = false;
                }
                else {
                    this.getCurrentLocationInfo(result);
                }
            });
        }
    }
    // module initialization happens. function called by ngOninit and ngOnChange
    moduleInit() {
        this.settings = this.setUserSettings();
        // condition to check if Radius is set without location detail.
        if (this.settings.geoRadius) {
            if (this.settings.geoLocation.length !== 2) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
            }
        }
        // condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
        if (this.settings.geoLocation.length === 2 && !this.settings.geoRadius) {
            this.settings.geoRadius = 20000000;
        }
        if (this.settings.showRecentSearch) {
            this.getRecentLocations();
        }
        if (!this.settings.useGoogleGeoApi) {
            if (!this.settings.geoPredictionServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
            }
            if (!this.settings.geoLatLangServiceUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
            }
            if (!this.settings.geoLocDetailServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
            }
        }
        this.locationInput = this.term;
    }
    // function to process the search query when pressed enter.
    processSearchQuery() {
        if (this.queryItems.length) {
            if (this.selectedDataIndex > -1) {
                this.selectedListNode(null, this.selectedDataIndex);
            }
            else {
                this.selectedListNode(null, 0);
            }
        }
    }
    // function to set user settings if it is available.
    setUserSettings() {
        const _tempObj = {};
        if (this.userSettings && typeof this.userSettings === 'object') {
            const keys = Object.keys(this.defaultSettings);
            for (const value of keys) {
                _tempObj[value] = this.userSettings[value] !== undefined ? this.userSettings[value] : this.defaultSettings[value];
            }
            return _tempObj;
        }
        else {
            return this.defaultSettings;
        }
    }
    // function to get the autocomplete list based on user input.
    getListQuery(value) {
        this.recentDropdownOpen = false;
        if (this.settings.useGoogleGeoApi) {
            const _tempParams = {
                query: value,
                countryRestriction: this.settings.geoCountryRestriction,
                geoTypes: this.settings.geoTypes,
            };
            if (this.settings.geoLocation.length === 2) {
                _tempParams.geoLocation = this.settings.geoLocation;
                _tempParams.radius = this.settings.geoRadius;
            }
            this._googlePlacesService.getGeoPrediction(_tempParams).then((result) => {
                this.updateListItem(result);
            });
        }
        else {
            this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then((result) => {
                result = this.extractServerList(this.settings.serverResponseListHierarchy, result);
                this.updateListItem(result);
            });
        }
    }
    // function to extratc custom data which is send by the server.
    extractServerList(arrayList, data) {
        if (arrayList.length) {
            let _tempData = data;
            for (const key of arrayList) {
                _tempData = _tempData[key];
            }
            return _tempData;
        }
        else {
            return data;
        }
    }
    // function to update the predicted list.
    updateListItem(listData) {
        this.queryItems = listData ? listData : [];
        this.dropdownOpen = true;
    }
    // function to show the recent search result.
    showRecentSearch() {
        this.recentDropdownOpen = true;
        this.dropdownOpen = true;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then((result) => {
            if (result) {
                this.queryItems = result;
            }
            else {
                this.queryItems = [];
            }
        });
    }
    // function to execute to get location detail based on latitude and longitude.
    getCurrentLocationInfo(latlng) {
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoLatLngDetail(latlng).then((result) => {
                if (result) {
                    this.setRecentLocation(result);
                }
                this.gettingCurrentLocationFlag = false;
            });
        }
        else {
            this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then((result) => {
                if (result) {
                    result = this.extractServerList(this.settings.serverResponseatLangHierarchy, result);
                    this.setRecentLocation(result);
                }
                this.gettingCurrentLocationFlag = false;
            });
        }
    }
    // function to retrive the location info based on goovle place id.
    getPlaceLocationInfo(selectedData) {
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then((data) => {
                if (data) {
                    this.setRecentLocation(data);
                }
            });
        }
        else {
            this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then((result) => {
                if (result) {
                    result = this.extractServerList(this.settings.serverResponseDetailHierarchy, result);
                    this.setRecentLocation(result);
                }
            });
        }
    }
    // function to store the selected user search in the localstorage.
    setRecentLocation(data) {
        data = JSON.parse(JSON.stringify(data));
        data.description = data.description ? data.description : data.formatted_address;
        data.active = false;
        this.selectedDataIndex = -1;
        this.locationInput = data.description;
        if (this.settings.showRecentSearch) {
            this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
            this.getRecentLocations();
        }
        this.userSelectedOption = data;
        // below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
        if (!this.settings.resOnSearchButtonClickOnly) {
            this.select.emit(data);
            this.termChange.emit(data);
        }
    }
    // function to retrive the stored recent user search from the localstorage.
    getRecentLocations() {
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then((data) => {
            this.recentSearchData = data && data.length ? data : [];
        });
    }
}
PlacesListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PlacesListComponent, deps: [{ token: PLATFORM_ID }, { token: i0.ElementRef }, { token: GlobalRef }, { token: GooglePlacesService }], target: i0.ɵɵFactoryTarget.Component });
PlacesListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: PlacesListComponent, selector: "google-places-list", inputs: { userSettings: "userSettings", term: "term" }, outputs: { termChange: "termChange", select: "select" }, usesOnChanges: true, ngImport: i0, template: `
    <novo-list direction="vertical">
      <novo-list-item *ngFor="let data of queryItems; let $index = index" (click)="selectedListNode($event, $index)">
        <item-header>
          <item-avatar icon="location"></item-avatar>
          <item-title>{{ data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description }}</item-title>
        </item-header>
        <item-content>{{ data.structured_formatting?.secondary_text }}</item-content>
      </novo-list-item>
    </novo-list>
  `, isInline: true, components: [{ type: NovoListElement, selector: "novo-list", inputs: ["theme", "direction"] }, { type: NovoListItemElement, selector: "novo-list-item, a[list-item], button[list-item]" }, { type: NovoItemHeaderElement, selector: "item-header, novo-item-header" }, { type: NovoItemAvatarElement, selector: "item-avatar, novo-item-avatar", inputs: ["icon", "color"] }, { type: NovoItemTitleElement, selector: "item-title, novo-item-title" }, { type: NovoItemContentElement, selector: "item-content, novo-item-content", inputs: ["direction"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PlacesListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'google-places-list',
                    template: `
    <novo-list direction="vertical">
      <novo-list-item *ngFor="let data of queryItems; let $index = index" (click)="selectedListNode($event, $index)">
        <item-header>
          <item-avatar icon="location"></item-avatar>
          <item-title>{{ data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description }}</item-title>
        </item-header>
        <item-content>{{ data.structured_formatting?.secondary_text }}</item-content>
      </novo-list-item>
    </novo-list>
  `,
                }]
        }], ctorParameters: function () { return [{ type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: i0.ElementRef }, { type: GlobalRef }, { type: GooglePlacesService }]; }, propDecorators: { userSettings: [{
                type: Input
            }], term: [{
                type: Input
            }], termChange: [{
                type: Output
            }], select: [{
                type: Output
            }] } });

class GooglePlacesModule {
}
GooglePlacesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
GooglePlacesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesModule, declarations: [PlacesListComponent], imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule], exports: [PlacesListComponent] });
GooglePlacesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesModule, providers: [GooglePlacesService], imports: [[CommonModule, HttpClientModule, FormsModule, NovoListModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: GooglePlacesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PlacesListComponent],
                    imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule],
                    exports: [PlacesListComponent],
                    providers: [GooglePlacesService],
                }]
        }] });

class PopOverContent {
    constructor(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.placement = 'top';
        this.animation = true;
        this.onCloseFromOutside = new EventEmitter();
        this.top = -10000;
        this.left = -10000;
        this.displayType = 'none';
        this.isHidden = false;
    }
    ngAfterViewInit() {
        this.show();
        this.cdr.detectChanges();
    }
    toggle() {
        if (this.isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    show() {
        if (!this.popover || !this.popover.getElement()) {
            return;
        }
        const p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
        this.displayType = 'block';
        this.top = p.top;
        this.left = p.left;
        this.isHidden = false;
    }
    hide() {
        this.top = -10000;
        this.left = -10000;
        this.isHidden = true;
        this.popover.hide();
    }
    hideFromPopover() {
        this.top = -10000;
        this.left = -10000;
    }
    positionElements(hostEl, targetEl, positionStr, appendToBody = false) {
        const positionStrParts = positionStr.split('-');
        const mainSide = (this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl));
        const orientation = (this.effectiveAlignment = positionStrParts[1] || 'center');
        const hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        const targetElWidth = targetEl.offsetWidth;
        const targetElHeight = targetEl.offsetHeight;
        const shiftWidth = {
            center() {
                return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
            },
            right() {
                return hostElPos.left;
            },
            left() {
                return hostElPos.left + (hostElPos.width - targetElWidth);
            },
        };
        const shiftHeight = {
            center() {
                return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
            },
            bottom() {
                return hostElPos.top;
            },
            top() {
                return hostElPos.top + (hostElPos.height - targetElHeight);
            },
        };
        let targetElPos;
        switch (mainSide) {
            case 'right':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left + hostElPos.width,
                };
                break;
            case 'left':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left - targetElWidth,
                };
                break;
            case 'bottom':
                targetElPos = {
                    top: hostElPos.top + hostElPos.height,
                    left: shiftWidth[orientation](),
                };
                break;
            default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[orientation](),
                };
                break;
        }
        return targetElPos;
    }
    position(nativeEl) {
        let offsetParentBCR = { top: 0, left: 0 };
        const elBCR = this.offset(nativeEl);
        const offsetParentEl = this.parentOffsetEl(nativeEl);
        if (offsetParentEl !== window.document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        const boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left,
        };
    }
    offset(nativeEl) {
        const boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft),
        };
    }
    getStyle(nativeEl, cssProp) {
        if (nativeEl.currentStyle) {
            return nativeEl.currentStyle[cssProp];
        }
        if (window.getComputedStyle) {
            return window.getComputedStyle(nativeEl)[cssProp];
        }
        return nativeEl.style[cssProp];
    }
    isStaticPositioned(nativeEl) {
        return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
    }
    parentOffsetEl(nativeEl) {
        let offsetParent = nativeEl.offsetParent || window.document;
        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || window.document;
    }
    getEffectivePlacement(desiredPlacement, hostElement, targetElement) {
        const hostElBoundingRect = hostElement.getBoundingClientRect();
        if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
            return 'top';
        }
        if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
            return 'right';
        }
        if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
            return 'left';
        }
        return desiredPlacement;
    }
}
PopOverContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PopOverContent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
PopOverContent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: PopOverContent, selector: "popover-content", inputs: { content: "content", placement: "placement", title: "title", animation: "animation" }, viewQueries: [{ propertyName: "popoverDiv", first: true, predicate: ["popoverDiv"], descendants: true }], ngImport: i0, template: `
    <div
      #popoverDiv
      class="popover {{ effectivePlacement }}"
      [style.top]="top + 'px'"
      [style.left]="left + 'px'"
      [class.fade]="animation"
      style="display: block"
      role="popover"
    >
      <div class="arrow {{ effectiveAlignment }}"></div>
      <div class="popover-title" [hidden]="!title">{{ title }}</div>
      <div class="popover-content">
        <ng-content></ng-content>
        <div class="popover-content-text">{{ content }}</div>
      </div>
    </div>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PopOverContent, decorators: [{
            type: Component,
            args: [{
                    selector: 'popover-content',
                    template: `
    <div
      #popoverDiv
      class="popover {{ effectivePlacement }}"
      [style.top]="top + 'px'"
      [style.left]="left + 'px'"
      [class.fade]="animation"
      style="display: block"
      role="popover"
    >
      <div class="arrow {{ effectiveAlignment }}"></div>
      <div class="popover-title" [hidden]="!title">{{ title }}</div>
      <div class="popover-content">
        <ng-content></ng-content>
        <div class="popover-content-text">{{ content }}</div>
      </div>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { content: [{
                type: Input
            }], placement: [{
                type: Input
            }], title: [{
                type: Input
            }], animation: [{
                type: Input
            }], popoverDiv: [{
                type: ViewChild,
                args: ['popoverDiv']
            }] } });

// NG2
class PopOverDirective {
    constructor(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.PopoverComponent = PopOverContent;
        this.popoverOnHover = false;
        this.popoverDismissTimeout = 0;
        this.onShown = new EventEmitter();
        this.onHidden = new EventEmitter();
    }
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    showOrHideOnClick() {
        if (this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.toggle();
    }
    showOnHover() {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.show();
    }
    hideOnHover() {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.hide();
    }
    ngOnChanges(changes) {
        if (changes.popoverDisabled) {
            if (changes.popoverDisabled.currentValue) {
                this.hide();
            }
        }
        if (changes.popoverAlways) {
            if (changes.popoverAlways.currentValue) {
                this.show();
            }
        }
    }
    toggle() {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    }
    show() {
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            const factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
            if (!this.visible) {
                return;
            }
            this.popover = this.viewContainerRef.createComponent(factory);
            const popover = this.popover.instance;
            popover.popover = this;
            popover.content = this.content;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(() => this.hide());
            if (this.popoverDismissTimeout > 0) {
                setTimeout(() => this.hide(), this.popoverDismissTimeout);
            }
        }
        else {
            const popover = this.content;
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(() => this.hide());
            if (this.popoverDismissTimeout > 0) {
                setTimeout(() => this.hide(), this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.onShown.emit(this);
    }
    hide() {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        if (this.popover) {
            this.popover.destroy();
        }
        if (this.content instanceof PopOverContent) {
            this.content.hideFromPopover();
        }
        this.onHidden.emit(this);
    }
    getElement() {
        return this.viewContainerRef.element.nativeElement;
    }
}
PopOverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PopOverDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Directive });
PopOverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: PopOverDirective, selector: "[popover]", inputs: { content: ["popover", "content"], popoverDisabled: "popoverDisabled", popoverAlways: "popoverAlways", popoverAnimation: "popoverAnimation", popoverPlacement: "popoverPlacement", popoverTitle: "popoverTitle", popoverOnHover: "popoverOnHover", popoverDismissTimeout: "popoverDismissTimeout" }, outputs: { onShown: "onShown", onHidden: "onHidden" }, host: { listeners: { "click": "showOrHideOnClick()", "focusin": "showOnHover()", "mouseenter": "showOnHover()", "focusout": "hideOnHover()", "mouseleave": "hideOnHover()" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PopOverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[popover]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { content: [{
                type: Input,
                args: ['popover']
            }], popoverDisabled: [{
                type: Input
            }], popoverAlways: [{
                type: Input
            }], popoverAnimation: [{
                type: Input
            }], popoverPlacement: [{
                type: Input
            }], popoverTitle: [{
                type: Input
            }], popoverOnHover: [{
                type: Input
            }], popoverDismissTimeout: [{
                type: Input
            }], onShown: [{
                type: Output
            }], onHidden: [{
                type: Output
            }], showOrHideOnClick: [{
                type: HostListener,
                args: ['click']
            }], showOnHover: [{
                type: HostListener,
                args: ['focusin']
            }, {
                type: HostListener,
                args: ['mouseenter']
            }], hideOnHover: [{
                type: HostListener,
                args: ['focusout']
            }, {
                type: HostListener,
                args: ['mouseleave']
            }] } });

// NG2
class NovoPopOverModule {
}
NovoPopOverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPopOverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoPopOverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPopOverModule, declarations: [PopOverContent, PopOverDirective], exports: [PopOverContent, PopOverDirective] });
NovoPopOverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPopOverModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoPopOverModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [PopOverContent, PopOverDirective],
                    exports: [PopOverContent, PopOverDirective],
                }]
        }] });

var ProgressAppearance;
(function (ProgressAppearance) {
    ProgressAppearance["LINEAR"] = "linear";
    ProgressAppearance["RADIAL"] = "radial";
})(ProgressAppearance || (ProgressAppearance = {}));
/**
 * Used to provide a progress container to a progress bar while avoiding circular references.
 * @docs-private
 */
const NOVO_PROGRESS_CONTAINER = new InjectionToken('NOVO_PROGRESS_CONTAINER');

// NG2
// make radio-button-group ids unique
let nextId = 0;
// Value accessor for the component (supports ngModel)
const PROGRESS_BAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoProgressBarElement),
    multi: true,
};
class NovoProgressBarElement {
    constructor(ref, progress) {
        this.ref = ref;
        this.progress = progress;
        this._uniqueId = `novo-progress-${++nextId}`;
        this.appearance = ProgressAppearance.LINEAR;
        this.id = this._uniqueId;
        this.name = this._uniqueId;
        this.tabindex = 0;
        this.indeterminate = false;
        // Radial Value
        this.radius = 54;
        this.circumference = 2 * Math.PI * this.radius;
        this.striped = false;
        this.animated = false;
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._percent = 0;
        this._value = 0;
        this._disabled = false;
        this.onChangeCallback = (_) => {
            // placeholder
        };
        this.onTouchedCallback = () => {
            // placeholder
        };
        // NovoProgressElement
        this.progress = progress;
    }
    get width() {
        if (this.isRadial()) {
            return `100%`;
        }
        return `${this._percent * 100}%`;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        if (this.value !== value) {
            this._value = value;
            if (this.progress) {
                this._percent = this.value / this.progress.total;
            }
            else {
                this._percent = value;
            }
            this.dashoffset = this.circumference * (1 - this._percent);
            this.onChangeCallback(this._value);
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled || (this.progress != null && this.progress.disabled);
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngOnInit() {
        if (this.indeterminate) {
            this.striped = true;
            this.animated = true;
            this._value = this.progress?.total || 100;
        }
        if (this.progress) {
            this._percent = this._value / this.progress.total;
            this.appearance = this.progress.appearance;
        }
    }
    writeValue(value) {
        this.value = value;
        this.ref.markForCheck();
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    setDisabledState(disabled) {
        this.disabled = disabled;
    }
    isLinear() {
        return this.appearance === ProgressAppearance.LINEAR;
    }
    isRadial() {
        return this.appearance === ProgressAppearance.RADIAL;
    }
}
NovoProgressBarElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressBarElement, deps: [{ token: i0.ChangeDetectorRef }, { token: NOVO_PROGRESS_CONTAINER, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoProgressBarElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoProgressBarElement, selector: "novo-progress-bar", inputs: { id: "id", name: "name", tabindex: "tabindex", label: "label", theme: "theme", color: "color", indeterminate: "indeterminate", striped: "striped", animated: "animated", value: "value", disabled: "disabled" }, outputs: { change: "change", blur: "blur", focus: "focus" }, host: { properties: { "class": "this.appearance", "class.striped": "this.striped", "class.animated": "this.animated", "style.width": "this.width", "class.disabled": "this.disabled" } }, providers: [PROGRESS_BAR_VALUE_ACCESSOR], ngImport: i0, template: `
    <div *ngIf="isLinear()" class="progress-bar"></div>
    <svg *ngIf="isRadial()" width="120" height="120">
      <circle
        [style.strokeDasharray]="circumference"
        [style.strokeDashoffset]="dashoffset"
        [attr.r]="radius"
        cx="60"
        cy="60"
        stroke-width="4"
        fill="transparent"
        class="progress__value"
      />
      <!-- <text x="18" y="20.35" class="percentage">30%</text> -->
    </svg>
  `, isInline: true, styles: [":host{display:flex;height:100%}:host.linear{background-color:#4a89dc}:host.linear[color=black]{color:#fff;background:#000000}:host.linear[color=white]{color:#3d464d;background:#ffffff}:host.linear[color=gray]{color:#3d464d;background:#9e9e9e}:host.linear[color=grey]{color:#3d464d;background:#9e9e9e}:host.linear[color=offWhite]{color:#3d464d;background:#f7f7f7}:host.linear[color=bright]{color:#3d464d;background:#f7f7f7}:host.linear[color=light]{color:#3d464d;background:#dbdbdb}:host.linear[color=neutral]{color:#fff;background:#4f5361}:host.linear[color=dark]{color:#fff;background:#3d464d}:host.linear[color=orange]{color:#3d464d;background:#ff6900}:host.linear[color=navigation]{color:#fff;background:#202945}:host.linear[color=skyBlue]{color:#fff;background:#009bdf}:host.linear[color=steel]{color:#fff;background:#5b6770}:host.linear[color=metal]{color:#fff;background:#637893}:host.linear[color=sand]{color:#3d464d;background:#f4f4f4}:host.linear[color=silver]{color:#3d464d;background:#e2e2e2}:host.linear[color=stone]{color:#3d464d;background:#bebebe}:host.linear[color=ash]{color:#3d464d;background:#a0a0a0}:host.linear[color=slate]{color:#fff;background:#707070}:host.linear[color=onyx]{color:#fff;background:#526980}:host.linear[color=charcoal]{color:#fff;background:#282828}:host.linear[color=moonlight]{color:#fff;background:#1a242f}:host.linear[color=midnight]{color:#fff;background:#202945}:host.linear[color=darkness]{color:#fff;background:#161f27}:host.linear[color=navy]{color:#fff;background:#0d2d42}:host.linear[color=aqua]{color:#3d464d;background:#3bafda}:host.linear[color=ocean]{color:#fff;background:#4a89dc}:host.linear[color=mint]{color:#3d464d;background:#37bc9b}:host.linear[color=grass]{color:#fff;background:#8cc152}:host.linear[color=sunflower]{color:#fff;background:#f6b042}:host.linear[color=bittersweet]{color:#fff;background:#eb6845}:host.linear[color=grapefruit]{color:#fff;background:#da4453}:host.linear[color=carnation]{color:#fff;background:#d770ad}:host.linear[color=lavender]{color:#fff;background:#967adc}:host.linear[color=mountain]{color:#fff;background:#9678b6}:host.linear[color=info]{color:#fff;background:#4a89dc}:host.linear[color=positive]{color:#fff;background:#4a89dc}:host.linear[color=success]{color:#fff;background:#8cc152}:host.linear[color=negative]{color:#fff;background:#da4453}:host.linear[color=danger]{color:#fff;background:#da4453}:host.linear[color=error]{color:#fff;background:#da4453}:host.linear[color=warning]{color:#fff;background:#f6b042}:host.linear[color=empty]{color:#3d464d;background:#cccdcc}:host.linear[color=disabled]{color:#3d464d;background:#bebebe}:host.linear[color=background]{color:#3d464d;background:#f7f7f7}:host.linear[color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host.linear[color=presentation]{color:#fff;background:#5b6770}:host.linear[color=bullhorn]{color:#3d464d;background:#ff6900}:host.linear[color=pulse]{color:#3d464d;background:#3bafda}:host.linear[color=company]{color:#fff;background:#3399dd}:host.linear[color=candidate]{color:#fff;background:#44bb77}:host.linear[color=lead]{color:#fff;background:#aa6699}:host.linear[color=contact]{color:#fff;background:#ffaa44}:host.linear[color=clientcontact]{color:#fff;background:#ffaa44}:host.linear[color=opportunity]{color:#fff;background:#662255}:host.linear[color=job]{color:#fff;background:#bb5566}:host.linear[color=joborder]{color:#fff;background:#bb5566}:host.linear[color=submission]{color:#3d464d;background:#a9adbb}:host.linear[color=sendout]{color:#fff;background:#747884}:host.linear[color=placement]{color:#fff;background:#0b344f}:host.linear[color=note]{color:#fff;background:#747884}:host.linear[color=contract]{color:#fff;background:#454ea0}:host.linear[color=jobCode]{color:#fff;background:#696d79}:host.linear[color=earnCode]{color:#fff;background:#696d79}:host.linear[color=invoiceStatement]{color:#fff;background:#696d79}:host.linear[color=billableCharge]{color:#fff;background:#696d79}:host.linear[color=payableCharge]{color:#fff;background:#696d79}:host.linear[color=user]{color:#fff;background:#696d79}:host.linear[color=corporateUser]{color:#fff;background:#696d79}:host.linear[color=distributionList]{color:#fff;background:#696d79}:host.linear[color=credential]{color:#fff;background:#696d79}:host.linear[color=person]{color:#fff;background:#696d79}:host.linear:first-child{border-radius:.2em 0 0 .2em}:host.linear:last-child{border-radius:0 .2em .2em 0}:host.linear.striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:40px 40px}:host.linear.animated{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}:host.radial{position:absolute}:host.radial[color=black] svg circle{stroke:#000}:host.radial[color=white] svg circle{stroke:#fff}:host.radial[color=gray] svg circle{stroke:#9e9e9e}:host.radial[color=grey] svg circle{stroke:#9e9e9e}:host.radial[color=offWhite] svg circle{stroke:#f7f7f7}:host.radial[color=bright] svg circle{stroke:#f7f7f7}:host.radial[color=light] svg circle{stroke:#dbdbdb}:host.radial[color=neutral] svg circle{stroke:#4f5361}:host.radial[color=dark] svg circle{stroke:#3d464d}:host.radial[color=orange] svg circle{stroke:#ff6900}:host.radial[color=navigation] svg circle{stroke:#202945}:host.radial[color=skyBlue] svg circle{stroke:#009bdf}:host.radial[color=steel] svg circle{stroke:#5b6770}:host.radial[color=metal] svg circle{stroke:#637893}:host.radial[color=sand] svg circle{stroke:#f4f4f4}:host.radial[color=silver] svg circle{stroke:#e2e2e2}:host.radial[color=stone] svg circle{stroke:#bebebe}:host.radial[color=ash] svg circle{stroke:#a0a0a0}:host.radial[color=slate] svg circle{stroke:#707070}:host.radial[color=onyx] svg circle{stroke:#526980}:host.radial[color=charcoal] svg circle{stroke:#282828}:host.radial[color=moonlight] svg circle{stroke:#1a242f}:host.radial[color=midnight] svg circle{stroke:#202945}:host.radial[color=darkness] svg circle{stroke:#161f27}:host.radial[color=navy] svg circle{stroke:#0d2d42}:host.radial[color=aqua] svg circle{stroke:#3bafda}:host.radial[color=ocean] svg circle{stroke:#4a89dc}:host.radial[color=mint] svg circle{stroke:#37bc9b}:host.radial[color=grass] svg circle{stroke:#8cc152}:host.radial[color=sunflower] svg circle{stroke:#f6b042}:host.radial[color=bittersweet] svg circle{stroke:#eb6845}:host.radial[color=grapefruit] svg circle{stroke:#da4453}:host.radial[color=carnation] svg circle{stroke:#d770ad}:host.radial[color=lavender] svg circle{stroke:#967adc}:host.radial[color=mountain] svg circle{stroke:#9678b6}:host.radial[color=info] svg circle{stroke:#4a89dc}:host.radial[color=positive] svg circle{stroke:#4a89dc}:host.radial[color=success] svg circle{stroke:#8cc152}:host.radial[color=negative] svg circle{stroke:#da4453}:host.radial[color=danger] svg circle{stroke:#da4453}:host.radial[color=error] svg circle{stroke:#da4453}:host.radial[color=warning] svg circle{stroke:#f6b042}:host.radial[color=empty] svg circle{stroke:#cccdcc}:host.radial[color=disabled] svg circle{stroke:#bebebe}:host.radial[color=background] svg circle{stroke:#f7f7f7}:host.radial[color=backgroundDark] svg circle{stroke:#e2e2e2}:host.radial[color=presentation] svg circle{stroke:#5b6770}:host.radial[color=bullhorn] svg circle{stroke:#ff6900}:host.radial[color=pulse] svg circle{stroke:#3bafda}:host.radial[color=company] svg circle{stroke:#39d}:host.radial[color=candidate] svg circle{stroke:#4b7}:host.radial[color=lead] svg circle{stroke:#a69}:host.radial[color=contact] svg circle{stroke:#fa4}:host.radial[color=clientcontact] svg circle{stroke:#fa4}:host.radial[color=opportunity] svg circle{stroke:#625}:host.radial[color=job] svg circle{stroke:#b56}:host.radial[color=joborder] svg circle{stroke:#b56}:host.radial[color=submission] svg circle{stroke:#a9adbb}:host.radial[color=sendout] svg circle{stroke:#747884}:host.radial[color=placement] svg circle{stroke:#0b344f}:host.radial[color=note] svg circle{stroke:#747884}:host.radial[color=contract] svg circle{stroke:#454ea0}:host.radial[color=jobCode] svg circle{stroke:#696d79}:host.radial[color=earnCode] svg circle{stroke:#696d79}:host.radial[color=invoiceStatement] svg circle{stroke:#696d79}:host.radial[color=billableCharge] svg circle{stroke:#696d79}:host.radial[color=payableCharge] svg circle{stroke:#696d79}:host.radial[color=user] svg circle{stroke:#696d79}:host.radial[color=corporateUser] svg circle{stroke:#696d79}:host.radial[color=distributionList] svg circle{stroke:#696d79}:host.radial[color=credential] svg circle{stroke:#696d79}:host.radial[color=person] svg circle{stroke:#696d79}:host.radial svg circle{stroke:#4a89dc;transform-origin:50% 50%;transform:rotate(-90deg);transition:.35s stroke-dashoffset}:host.radial svg text{fill:#666;font-family:sans-serif;font-size:.5em;text-anchor:middle}@-webkit-keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}@keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressBarElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-progress-bar', providers: [PROGRESS_BAR_VALUE_ACCESSOR], template: `
    <div *ngIf="isLinear()" class="progress-bar"></div>
    <svg *ngIf="isRadial()" width="120" height="120">
      <circle
        [style.strokeDasharray]="circumference"
        [style.strokeDashoffset]="dashoffset"
        [attr.r]="radius"
        cx="60"
        cy="60"
        stroke-width="4"
        fill="transparent"
        class="progress__value"
      />
      <!-- <text x="18" y="20.35" class="percentage">30%</text> -->
    </svg>
  `, styles: [":host{display:flex;height:100%}:host.linear{background-color:#4a89dc}:host.linear[color=black]{color:#fff;background:#000000}:host.linear[color=white]{color:#3d464d;background:#ffffff}:host.linear[color=gray]{color:#3d464d;background:#9e9e9e}:host.linear[color=grey]{color:#3d464d;background:#9e9e9e}:host.linear[color=offWhite]{color:#3d464d;background:#f7f7f7}:host.linear[color=bright]{color:#3d464d;background:#f7f7f7}:host.linear[color=light]{color:#3d464d;background:#dbdbdb}:host.linear[color=neutral]{color:#fff;background:#4f5361}:host.linear[color=dark]{color:#fff;background:#3d464d}:host.linear[color=orange]{color:#3d464d;background:#ff6900}:host.linear[color=navigation]{color:#fff;background:#202945}:host.linear[color=skyBlue]{color:#fff;background:#009bdf}:host.linear[color=steel]{color:#fff;background:#5b6770}:host.linear[color=metal]{color:#fff;background:#637893}:host.linear[color=sand]{color:#3d464d;background:#f4f4f4}:host.linear[color=silver]{color:#3d464d;background:#e2e2e2}:host.linear[color=stone]{color:#3d464d;background:#bebebe}:host.linear[color=ash]{color:#3d464d;background:#a0a0a0}:host.linear[color=slate]{color:#fff;background:#707070}:host.linear[color=onyx]{color:#fff;background:#526980}:host.linear[color=charcoal]{color:#fff;background:#282828}:host.linear[color=moonlight]{color:#fff;background:#1a242f}:host.linear[color=midnight]{color:#fff;background:#202945}:host.linear[color=darkness]{color:#fff;background:#161f27}:host.linear[color=navy]{color:#fff;background:#0d2d42}:host.linear[color=aqua]{color:#3d464d;background:#3bafda}:host.linear[color=ocean]{color:#fff;background:#4a89dc}:host.linear[color=mint]{color:#3d464d;background:#37bc9b}:host.linear[color=grass]{color:#fff;background:#8cc152}:host.linear[color=sunflower]{color:#fff;background:#f6b042}:host.linear[color=bittersweet]{color:#fff;background:#eb6845}:host.linear[color=grapefruit]{color:#fff;background:#da4453}:host.linear[color=carnation]{color:#fff;background:#d770ad}:host.linear[color=lavender]{color:#fff;background:#967adc}:host.linear[color=mountain]{color:#fff;background:#9678b6}:host.linear[color=info]{color:#fff;background:#4a89dc}:host.linear[color=positive]{color:#fff;background:#4a89dc}:host.linear[color=success]{color:#fff;background:#8cc152}:host.linear[color=negative]{color:#fff;background:#da4453}:host.linear[color=danger]{color:#fff;background:#da4453}:host.linear[color=error]{color:#fff;background:#da4453}:host.linear[color=warning]{color:#fff;background:#f6b042}:host.linear[color=empty]{color:#3d464d;background:#cccdcc}:host.linear[color=disabled]{color:#3d464d;background:#bebebe}:host.linear[color=background]{color:#3d464d;background:#f7f7f7}:host.linear[color=backgroundDark]{color:#3d464d;background:#e2e2e2}:host.linear[color=presentation]{color:#fff;background:#5b6770}:host.linear[color=bullhorn]{color:#3d464d;background:#ff6900}:host.linear[color=pulse]{color:#3d464d;background:#3bafda}:host.linear[color=company]{color:#fff;background:#3399dd}:host.linear[color=candidate]{color:#fff;background:#44bb77}:host.linear[color=lead]{color:#fff;background:#aa6699}:host.linear[color=contact]{color:#fff;background:#ffaa44}:host.linear[color=clientcontact]{color:#fff;background:#ffaa44}:host.linear[color=opportunity]{color:#fff;background:#662255}:host.linear[color=job]{color:#fff;background:#bb5566}:host.linear[color=joborder]{color:#fff;background:#bb5566}:host.linear[color=submission]{color:#3d464d;background:#a9adbb}:host.linear[color=sendout]{color:#fff;background:#747884}:host.linear[color=placement]{color:#fff;background:#0b344f}:host.linear[color=note]{color:#fff;background:#747884}:host.linear[color=contract]{color:#fff;background:#454ea0}:host.linear[color=jobCode]{color:#fff;background:#696d79}:host.linear[color=earnCode]{color:#fff;background:#696d79}:host.linear[color=invoiceStatement]{color:#fff;background:#696d79}:host.linear[color=billableCharge]{color:#fff;background:#696d79}:host.linear[color=payableCharge]{color:#fff;background:#696d79}:host.linear[color=user]{color:#fff;background:#696d79}:host.linear[color=corporateUser]{color:#fff;background:#696d79}:host.linear[color=distributionList]{color:#fff;background:#696d79}:host.linear[color=credential]{color:#fff;background:#696d79}:host.linear[color=person]{color:#fff;background:#696d79}:host.linear:first-child{border-radius:.2em 0 0 .2em}:host.linear:last-child{border-radius:0 .2em .2em 0}:host.linear.striped{background-image:linear-gradient(45deg,rgba(255,255,255,.15) 25%,transparent 25%,transparent 50%,rgba(255,255,255,.15) 50%,rgba(255,255,255,.15) 75%,transparent 75%,transparent);background-size:40px 40px}:host.linear.animated{-webkit-animation:progress-bar-stripes 2s linear infinite;animation:progress-bar-stripes 2s linear infinite}:host.radial{position:absolute}:host.radial[color=black] svg circle{stroke:#000}:host.radial[color=white] svg circle{stroke:#fff}:host.radial[color=gray] svg circle{stroke:#9e9e9e}:host.radial[color=grey] svg circle{stroke:#9e9e9e}:host.radial[color=offWhite] svg circle{stroke:#f7f7f7}:host.radial[color=bright] svg circle{stroke:#f7f7f7}:host.radial[color=light] svg circle{stroke:#dbdbdb}:host.radial[color=neutral] svg circle{stroke:#4f5361}:host.radial[color=dark] svg circle{stroke:#3d464d}:host.radial[color=orange] svg circle{stroke:#ff6900}:host.radial[color=navigation] svg circle{stroke:#202945}:host.radial[color=skyBlue] svg circle{stroke:#009bdf}:host.radial[color=steel] svg circle{stroke:#5b6770}:host.radial[color=metal] svg circle{stroke:#637893}:host.radial[color=sand] svg circle{stroke:#f4f4f4}:host.radial[color=silver] svg circle{stroke:#e2e2e2}:host.radial[color=stone] svg circle{stroke:#bebebe}:host.radial[color=ash] svg circle{stroke:#a0a0a0}:host.radial[color=slate] svg circle{stroke:#707070}:host.radial[color=onyx] svg circle{stroke:#526980}:host.radial[color=charcoal] svg circle{stroke:#282828}:host.radial[color=moonlight] svg circle{stroke:#1a242f}:host.radial[color=midnight] svg circle{stroke:#202945}:host.radial[color=darkness] svg circle{stroke:#161f27}:host.radial[color=navy] svg circle{stroke:#0d2d42}:host.radial[color=aqua] svg circle{stroke:#3bafda}:host.radial[color=ocean] svg circle{stroke:#4a89dc}:host.radial[color=mint] svg circle{stroke:#37bc9b}:host.radial[color=grass] svg circle{stroke:#8cc152}:host.radial[color=sunflower] svg circle{stroke:#f6b042}:host.radial[color=bittersweet] svg circle{stroke:#eb6845}:host.radial[color=grapefruit] svg circle{stroke:#da4453}:host.radial[color=carnation] svg circle{stroke:#d770ad}:host.radial[color=lavender] svg circle{stroke:#967adc}:host.radial[color=mountain] svg circle{stroke:#9678b6}:host.radial[color=info] svg circle{stroke:#4a89dc}:host.radial[color=positive] svg circle{stroke:#4a89dc}:host.radial[color=success] svg circle{stroke:#8cc152}:host.radial[color=negative] svg circle{stroke:#da4453}:host.radial[color=danger] svg circle{stroke:#da4453}:host.radial[color=error] svg circle{stroke:#da4453}:host.radial[color=warning] svg circle{stroke:#f6b042}:host.radial[color=empty] svg circle{stroke:#cccdcc}:host.radial[color=disabled] svg circle{stroke:#bebebe}:host.radial[color=background] svg circle{stroke:#f7f7f7}:host.radial[color=backgroundDark] svg circle{stroke:#e2e2e2}:host.radial[color=presentation] svg circle{stroke:#5b6770}:host.radial[color=bullhorn] svg circle{stroke:#ff6900}:host.radial[color=pulse] svg circle{stroke:#3bafda}:host.radial[color=company] svg circle{stroke:#39d}:host.radial[color=candidate] svg circle{stroke:#4b7}:host.radial[color=lead] svg circle{stroke:#a69}:host.radial[color=contact] svg circle{stroke:#fa4}:host.radial[color=clientcontact] svg circle{stroke:#fa4}:host.radial[color=opportunity] svg circle{stroke:#625}:host.radial[color=job] svg circle{stroke:#b56}:host.radial[color=joborder] svg circle{stroke:#b56}:host.radial[color=submission] svg circle{stroke:#a9adbb}:host.radial[color=sendout] svg circle{stroke:#747884}:host.radial[color=placement] svg circle{stroke:#0b344f}:host.radial[color=note] svg circle{stroke:#747884}:host.radial[color=contract] svg circle{stroke:#454ea0}:host.radial[color=jobCode] svg circle{stroke:#696d79}:host.radial[color=earnCode] svg circle{stroke:#696d79}:host.radial[color=invoiceStatement] svg circle{stroke:#696d79}:host.radial[color=billableCharge] svg circle{stroke:#696d79}:host.radial[color=payableCharge] svg circle{stroke:#696d79}:host.radial[color=user] svg circle{stroke:#696d79}:host.radial[color=corporateUser] svg circle{stroke:#696d79}:host.radial[color=distributionList] svg circle{stroke:#696d79}:host.radial[color=credential] svg circle{stroke:#696d79}:host.radial[color=person] svg circle{stroke:#696d79}:host.radial svg circle{stroke:#4a89dc;transform-origin:50% 50%;transform:rotate(-90deg);transition:.35s stroke-dashoffset}:host.radial svg text{fill:#666;font-family:sans-serif;font-size:.5em;text-anchor:middle}@-webkit-keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}@keyframes progress-bar-stripes{0%{background-position:0 0}to{background-position:40px 0}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NOVO_PROGRESS_CONTAINER]
                }] }]; }, propDecorators: { appearance: [{
                type: HostBinding,
                args: ['class']
            }], id: [{
                type: Input
            }], name: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], label: [{
                type: Input
            }], theme: [{
                type: Input
            }], color: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], striped: [{
                type: HostBinding,
                args: ['class.striped']
            }, {
                type: Input
            }], animated: [{
                type: HostBinding,
                args: ['class.animated']
            }, {
                type: Input
            }], width: [{
                type: HostBinding,
                args: ['style.width']
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], value: [{
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.disabled']
            }] } });

// NG2
class NovoProgressElement {
    constructor() {
        this.total = 100;
        this.radius = 54;
        this.striped = false;
        // Private vars for getters
        this._appearance = ProgressAppearance.LINEAR;
        this._disabled = false;
    }
    get appearance() {
        return this._appearance;
    }
    set appearance(value) {
        if (this._appearance !== value) {
            this._appearance = value;
            this._updateBarAppearance();
        }
    }
    // Disabled State
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = !!value;
    }
    ngAfterContentInit() {
        this._updateBarRadius();
    }
    _updateBarAppearance() {
        if (this._bars) {
            this._bars.forEach((bar) => {
                bar.appearance = this.appearance;
            });
        }
    }
    _updateBarRadius() {
        if (this._bars) {
            this._bars.forEach((bar, i) => {
                bar.radius = this.radius - i * 5;
            });
        }
    }
}
NovoProgressElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoProgressElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoProgressElement, selector: "novo-progress", inputs: { color: "color", theme: "theme", total: "total", radius: "radius", striped: "striped", appearance: "appearance", disabled: "disabled" }, host: { properties: { "class.striped": "this.striped", "class": "this.appearance", "class.disabled": "this.disabled" } }, providers: [
        {
            provide: NOVO_PROGRESS_CONTAINER,
            useExisting: NovoProgressElement,
        },
    ], queries: [{ propertyName: "_bars", predicate: i0.forwardRef(function () { return NovoProgressBarElement; }), descendants: true }], ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, styles: [":host{display:flex;position:relative;border-radius:.2em}:host.striped{background-image:linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 25%,transparent 50%,rgba(0,0,0,.25) 50%,rgba(0,0,0,.25) 75%,transparent 75%,transparent);background-size:20px 20px}:host.linear{width:200px;height:1.2em;background-color:#f7f7f7;border:1px solid #cccdcc}:host.radial{width:9.2em;height:9.2em}\n"] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-progress', template: ` <ng-content></ng-content> `, providers: [
                        {
                            provide: NOVO_PROGRESS_CONTAINER,
                            useExisting: NovoProgressElement,
                        },
                    ], styles: [":host{display:flex;position:relative;border-radius:.2em}:host.striped{background-image:linear-gradient(45deg,rgba(0,0,0,.25) 25%,transparent 25%,transparent 50%,rgba(0,0,0,.25) 50%,rgba(0,0,0,.25) 75%,transparent 75%,transparent);background-size:20px 20px}:host.linear{width:200px;height:1.2em;background-color:#f7f7f7;border:1px solid #cccdcc}:host.radial{width:9.2em;height:9.2em}\n"] }]
        }], propDecorators: { color: [{
                type: Input
            }], theme: [{
                type: Input
            }], total: [{
                type: Input
            }], radius: [{
                type: Input
            }], striped: [{
                type: HostBinding,
                args: ['class.striped']
            }, {
                type: Input
            }], appearance: [{
                type: HostBinding,
                args: ['class']
            }, {
                type: Input
            }], disabled: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.disabled']
            }], _bars: [{
                type: ContentChildren,
                args: [forwardRef(() => NovoProgressBarElement), { descendants: true }]
            }] } });

// NG2
class NovoProgressModule {
}
NovoProgressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoProgressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressModule, declarations: [NovoProgressBarElement, NovoProgressElement], imports: [CommonModule], exports: [NovoProgressBarElement, NovoProgressElement] });
NovoProgressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoProgressModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoProgressBarElement, NovoProgressElement],
                    exports: [NovoProgressBarElement, NovoProgressElement],
                }]
        }] });

var Conjunction;
(function (Conjunction) {
    Conjunction["AND"] = "and";
    Conjunction["OR"] = "or";
    Conjunction["NOT"] = "not";
})(Conjunction || (Conjunction = {}));

const defaultEditTypeFn = (field) => {
    return field.inputType || field.dataType || field.type;
};
class QueryBuilderService {
    constructor(labels) {
        this.labels = labels;
        this._customFieldDefs = new Set();
        this._fieldDefsByName = new Map();
        /**
         * Will dispatch when properties changes, subscribe to this if component should
         * re-render when props are updated
         */
        this.stateChanges = new Subject();
        this._editTypeFn = defaultEditTypeFn;
        this._config = { fields: [] };
    }
    /**
     * Function to determine operator and input templates for a field.  Value passed
     * through the criteria builder Input.
     */
    get editTypeFn() {
        return this._editTypeFn;
    }
    set editTypeFn(value) {
        this._editTypeFn = value ?? defaultEditTypeFn;
        this.stateChanges.next();
    }
    /**
     * The field configuration to control which types of fields are available to select
     * within the Condition Builder.
     */
    get config() {
        return this._config;
    }
    set config(value) {
        this._config = value;
        this.stateChanges.next();
    }
    /**
     * The configuration to control which types of conjuntions can be used in the query builder.
     * Value passed through the criteria builder Input
     * eg. and, or, not
     */
    get allowedGroupings() {
        return this._allowedGroupings;
    }
    set allowedGroupings(value) {
        this._allowedGroupings = value;
        this.stateChanges.next();
    }
    /** Adds a field definition that was not included as part of the content children. */
    registerFieldDef(fieldDef) {
        this._customFieldDefs.add(fieldDef);
        this._fieldDefsByName.set(fieldDef.name, fieldDef);
    }
    /** Removes a field definition that was not included as part of the content children. */
    unregisterFieldDef(fieldDef) {
        this._customFieldDefs.delete(fieldDef);
        this._fieldDefsByName.delete(fieldDef.name);
    }
    getFieldDefsByName() {
        return this._fieldDefsByName;
    }
    getConjunctionLabel(conjunction) {
        switch (conjunction.replace('$', '').toLowerCase()) {
            case Conjunction.OR:
                return this.labels.or;
            case Conjunction.NOT:
                return this.labels.not;
            case Conjunction.AND:
            default:
                return this.labels.and;
        }
    }
}
QueryBuilderService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QueryBuilderService, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Injectable });
QueryBuilderService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QueryBuilderService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: QueryBuilderService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; } });

const NOVO_QUERY_BUILDER = new InjectionToken('NOVO_QUERY_BUILDER');
const NOVO_CRITERIA_BUILDER = new InjectionToken('NOVO_CRITERIA_BUILDER');
const NOVO_CONDITION_BUILDER = new InjectionToken('NOVO_CONDITION_BUILDER');

/**
 * Directive for providing a custom clear-icon.
 * e.g.
 * <novo-select-search [formControl]="bankFilterCtrl">
 *   <novo-icon novoSelectSearchClear>x</novo-icon>
 * </novo-select-search>
 */
class NovoSelectSearchClearDirective {
}
NovoSelectSearchClearDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchClearDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoSelectSearchClearDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSelectSearchClearDirective, selector: "[novoSelectSearchClear]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchClearDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSelectSearchClear]',
                }]
        }] });

/** The max height of the select's overlay panel. */
const SELECT_PANEL_MAX_HEIGHT = 256;
let autoIncrement = 1;
/* tslint:disable:member-ordering component-selector */
/**
 * Component providing an input field for searching NovoSelectElement options.
 *
 * Example usage:
 *
 * interface Bank {
 *  id: string;
 *  name: string;
 * }
 *
 * @Component({
 *   selector: 'my-app-data-selection',
 *   template: `
 *     <novo-form-field>
 *       <novo-select [formControl]="bankCtrl" placeholder="Bank">
 *         <novo-option>
 *           <ngx-novo-select-search [formControl]="bankFilterCtrl"></ngx-novo-select-search>
 *         </novo-option>
 *         <novo-option *ngFor="let bank of filteredBanks | async" [value]="bank.id">
 *           {{bank.name}}
 *         </novo-option>
 *       </novo-select>
 *     </novo-form-field>
 *   `
 * })
 * export class DataSelectionComponent implements OnInit, OnDestroy {
 *
 *   // control for the selected bank
 *   public bankCtrl: FormControl = new FormControl();
 *   // control for the NovoSelectElement filter keyword
 *   public bankFilterCtrl: FormControl = new FormControl();
 *
 *   // list of banks
 *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];
 *   // list of banks filtered by search keyword
 *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);
 *
 *   // Subject that emits when the component has been destroyed.
 *   private _onDestroy = new Subject<void>();
 *
 *
 *   ngOnInit() {
 *     // load the initial bank list
 *     this.filteredBanks.next(this.banks.slice());
 *     // listen for search field value changes
 *     this.bankFilterCtrl.valueChanges
 *       .pipe(takeUntil(this._onDestroy))
 *       .subscribe(() => {
 *         this.filterBanks();
 *       });
 *   }
 *
 *   ngOnDestroy() {
 *     this._onDestroy.next();
 *     this._onDestroy.complete();
 *   }
 *
 *   private filterBanks() {
 *     if (!this.banks) {
 *       return;
 *     }
 *
 *     // get the search keyword
 *     let search = this.bankFilterCtrl.value;
 *     if (!search) {
 *       this.filteredBanks.next(this.banks.slice());
 *       return;
 *     } else {
 *       search = search.toLowerCase();
 *     }
 *
 *     // filter the banks
 *     this.filteredBanks.next(
 *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)
 *     );
 *   }
 * }
 */
class NovoSelectSearchComponent {
    constructor(novoSelect, changeDetectorRef, _viewportRuler, novoOption = null, liveAnnouncer, matFormField = null) {
        this.novoSelect = novoSelect;
        this.changeDetectorRef = changeDetectorRef;
        this._viewportRuler = _viewportRuler;
        this.novoOption = novoOption;
        this.liveAnnouncer = liveAnnouncer;
        this.matFormField = matFormField;
        this.name = 'select-search-' + autoIncrement++;
        /** Label of the search placeholder */
        this.placeholderLabel = 'Search';
        /** Type of the search input field */
        this.type = 'text';
        /** Label to be shown when no entries are found. Set to null if no message should be shown. */
        this.noEntriesFoundLabel = 'No Records Found';
        /**
         *  Text that is appended to the currently active item label announced by screen readers,
         *  informing the user of the current index, value and total options.
         *  eg: Bank R (Germany) 1 of 6
         */
        this.indexAndLengthScreenReaderText = ' of ';
        /**
         * Whether or not the search field should be cleared after the dropdown menu is closed.
         * Useful for server-side filtering.
         */
        this.clearSearchInput = true;
        /** Whether to show the search-in-progress indicator */
        this.searching = false;
        /** Disables initial focusing of the input field */
        this.disableInitialFocus = false;
        /** Enable clear input on escape pressed */
        this.enableClearOnEscapePressed = false;
        /**
         * Prevents home / end key being propagated to novo-select,
         * allowing to move the cursor within the search input instead of navigating the options
         */
        this.preventHomeEndKeyPropagation = false;
        /** Disables scrolling to active options when option list changes. Useful for server-side search */
        this.disableScrollToActiveOnOptionsChanged = false;
        /** Adds 508 screen reader support for search box */
        this.ariaLabel = 'dropdown search';
        /** Whether to show Select All Checkbox (for novo-select[multi=true]) */
        this.showToggleAllCheckbox = false;
        /** select all checkbox checked state */
        this.toggleAllCheckboxChecked = false;
        /** select all checkbox indeterminate state */
        this.toggleAllCheckboxIndeterminate = false;
        /** Display a message in a tooltip on the toggle-all checkbox */
        this.toggleAllCheckboxTooltipMessage = '';
        /** Define the position of the tooltip on the toggle-all checkbox. */
        this.toogleAllCheckboxTooltipPosition = 'below';
        /** Show/Hide the search clear button of the search input */
        this.hideClearSearchButton = false;
        /**
         * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).
         * Defaults to false, so selected options are only restored while filtering is active.
         */
        this.alwaysRestoreSelectedOptionsMulti = false;
        /** Output emitter to send to parent component with the toggle all boolean */
        this.toggleAll = new EventEmitter();
        this.onTouched = (_) => { };
        this._options$ = new BehaviorSubject(null);
        this.optionsList$ = this._options$.pipe(switchMap((_options) => _options
            ? _options.changes.pipe(map((options) => options.toArray()), startWith(_options.toArray()))
            : of(null)));
        this.optionsLength$ = this.optionsList$.pipe(map((options) => (options ? options.length : 0)));
        this._formControl = new FormControl('');
        /** whether to show the no entries found message */
        this._showNoEntriesFound$ = combineLatest([this._formControl.valueChanges, this.optionsLength$]).pipe(map(([value, optionsLength]) => this.noEntriesFoundLabel && value && optionsLength === this.getOptionsLengthOffset()));
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    get isInsideNovoOption() {
        return !!this.novoOption;
    }
    /** Current search value */
    get value() {
        return this._formControl.value;
    }
    /** Reference to the NovoSelectElement options */
    set _options(_options) {
        this._options$.next(_options);
    }
    get _options() {
        return this._options$.getValue();
    }
    ngOnInit() {
        // set custom panel class
        // const panelClass = 'novo-select-search-panel';
        // if (this.novoSelect.panelClass) {
        //   if (Array.isArray(this.novoSelect.panelClass)) {
        //     (<string[]>this.novoSelect.panelClass).push(panelClass);
        //   } else if (typeof this.novoSelect.panelClass === 'string') {
        //     this.novoSelect.panelClass = [this.novoSelect.panelClass, panelClass];
        //   } else if (typeof this.novoSelect.panelClass === 'object') {
        //     this.novoSelect.panelClass[panelClass] = true;
        //   }
        // } else {
        //   this.novoSelect.panelClass = panelClass;
        // }
        // set custom novo-option class if the component was placed inside a novo-option
        if (this.novoOption) {
            this.novoOption.novoInert = true;
            this.novoOption._getHostElement().classList.add('contains-novo-select-search');
        }
        else {
            console.error('<novo-select-search> must be placed inside a <novo-option> element');
        }
        // when the select dropdown panel is opened or closed
        this.novoSelect.openedChange.pipe(delay(1), takeUntil(this._onDestroy)).subscribe((opened) => {
            if (opened) {
                this.updateInputWidth();
                // focus the search field when opening
                if (!this.disableInitialFocus) {
                    this._focus();
                }
            }
            else {
                // clear it when closing
                if (this.clearSearchInput) {
                    this._reset();
                }
            }
        });
        // set the first item active after the options changed
        this.novoSelect.openedChange
            .pipe(take(1))
            .pipe(takeUntil(this._onDestroy))
            .subscribe(() => {
            if (this.novoSelect._keyManager) {
                this.novoSelect._keyManager.change
                    .pipe(takeUntil(this._onDestroy))
                    .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());
            }
            else {
                console.log('_keyManager was not initialized.');
            }
            this._options = this.novoSelect.contentOptions;
            // Closure variable for tracking the most recent first option.
            // In order to avoid avoid causing the list to
            // scroll to the top when options are added to the bottom of
            // the list (eg: infinite scroll), we compare only
            // the changes to the first options to determine if we
            // should set the first item as active.
            // This prevents unnecessary scrolling to the top of the list
            // when options are appended, but allows the first item
            // in the list to be set as active by default when there
            // is no active selection
            let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];
            this._options.changes.pipe(takeUntil(this._onDestroy)).subscribe(() => {
                // avoid "expression has been changed" error
                setTimeout(() => {
                    // Convert the QueryList to an array
                    const options = this._options.toArray();
                    // The true first item is offset by 1
                    const currentFirstOption = options[this.getOptionsLengthOffset()];
                    const keyManager = this.novoSelect._keyManager;
                    if (keyManager && this.novoSelect.panelOpen) {
                        // set first item active and input width
                        // Check to see if the first option in these changes is different from the previous.
                        const firstOptionIsChanged = !this.novoSelect.compareWith(previousFirstOption, currentFirstOption);
                        // CASE: The first option is different now.
                        // Indiciates we should set it as active and scroll to the top.
                        if (firstOptionIsChanged ||
                            !keyManager.activeItem ||
                            !options.find((option) => this.novoSelect.compareWith(option, keyManager.activeItem))) {
                            keyManager.setFirstItemActive();
                        }
                        // wait for panel width changes
                        setTimeout(() => {
                            this.updateInputWidth();
                        });
                        if (!this.disableScrollToActiveOnOptionsChanged) {
                            this.adjustScrollTopToFitActiveOptionIntoView();
                        }
                    }
                    // Update our reference
                    previousFirstOption = currentFirstOption;
                });
            });
        });
        // add or remove css class depending on whether to show the no entries found message
        // note: this is hacky
        this._showNoEntriesFound$.pipe(takeUntil(this._onDestroy)).subscribe((showNoEntriesFound) => {
            // set no entries found class on mat option
            if (this.novoOption) {
                if (showNoEntriesFound) {
                    this.novoOption._getHostElement().classList.add('novo-select-search-no-entries-found');
                }
                else {
                    this.novoOption._getHostElement().classList.remove('novo-select-search-no-entries-found');
                }
            }
        });
        // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized
        this._viewportRuler
            .change()
            .pipe(takeUntil(this._onDestroy))
            .subscribe(() => {
            if (this.novoSelect.panelOpen) {
                this.updateInputWidth();
            }
        });
        this.initMultipleHandling();
        this.optionsList$.pipe(takeUntil(this._onDestroy)).subscribe(() => {
            // update view when available options change
            this.changeDetectorRef.markForCheck();
        });
    }
    _emitSelectAllBooleanToParent(state) {
        this.toggleAll.emit(state);
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    _isToggleAllCheckboxVisible() {
        return this.novoSelect.multiple && this.showToggleAllCheckbox;
    }
    /**
     * Handles the key down event with NovoSelectElement.
     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.
     * @param event
     */
    _handleKeydown(event) {
        // Prevent propagation for all alphanumeric characters in order to avoid selection issues
        if ((event.key && event.key.length === 1) ||
            isAlphaNumeric(event.key) ||
            event.key === " " /* Space */ ||
            (this.preventHomeEndKeyPropagation && (event.key === "Home" /* Home */ || event.key === "End" /* End */))) {
            event.stopPropagation();
        }
        if (this.novoSelect.multiple && event.key && event.key === "Enter" /* Enter */) {
            // Regain focus after multiselect, so we can further type
            setTimeout(() => this._focus());
        }
        // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field
        if (this.enableClearOnEscapePressed === true && event.key === "Escape" /* Escape */ && this.value) {
            this._reset(true);
            event.stopPropagation();
        }
    }
    /**
     * Handles the key up event with NovoSelectElement.
     * Allows e.g. the announcing of the currently activeDescendant by screen readers.
     */
    _handleKeyup(event) {
        if (event.key === "ArrowUp" /* ArrowUp */ || event.key === "ArrowDown" /* ArrowDown */) {
            const ariaActiveDescendantId = this.novoSelect._getAriaActiveDescendant();
            const index = this._options.toArray().findIndex((item) => item.id === ariaActiveDescendantId);
            if (index !== -1) {
                const activeDescendant = this._options.toArray()[index];
                this.liveAnnouncer.announce(activeDescendant.viewValue + ' ' + this.getAriaIndex(index) + this.indexAndLengthScreenReaderText + this.getAriaLength());
            }
        }
    }
    /**
     * Calculate the index of the current option, taking the offset to length into account.
     * examples:
     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.
     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.
     */
    getAriaIndex(optionIndex) {
        if (this.getOptionsLengthOffset() === 0) {
            return optionIndex + 1;
        }
        return optionIndex;
    }
    /**
     * Calculate the length of the options, taking the offset to length into account.
     * examples:
     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.
     *    Case 2 [1, 2, 3] will have length of options.length.
     */
    getAriaLength() {
        return this._options.toArray().length - this.getOptionsLengthOffset();
    }
    writeValue(value) {
        this._lastExternalInputValue = value;
        this._formControl.setValue(value);
        this.changeDetectorRef.markForCheck();
    }
    onBlur() {
        this.onTouched();
    }
    registerOnChange(fn) {
        this._formControl.valueChanges
            .pipe(filter((value) => value !== this._lastExternalInputValue), tap(() => (this._lastExternalInputValue = undefined)), takeUntil(this._onDestroy))
            .subscribe(fn);
    }
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * Focuses the search input field
     */
    _focus() {
        if (!this.searchSelectInput || !this.novoSelect.panel) {
            return;
        }
        // save and restore scrollTop of panel, since it will be reset by focus()
        // note: this is hacky
        const panel = this.novoSelect.panel.nativeElement;
        const scrollTop = panel.scrollTop;
        // focus
        this.searchSelectInput.nativeElement.focus();
        panel.scrollTop = scrollTop;
    }
    /**
     * Resets the current search value
     * @param focus whether to focus after resetting
     */
    _reset(focus) {
        this._formControl.setValue('');
        if (focus) {
            this._focus();
        }
    }
    /**
     * Initializes handling <novo-select [multiple]="true">
     * Note: to improve this code, novo-select should be extended to allow disabling resetting the selection while filtering.
     */
    initMultipleHandling() {
        if (!this.novoSelect.ngControl) {
            if (this.novoSelect.multiple) {
                // note: the access to novoSelect.ngControl (instead of novoSelect.value / novoSelect.valueChanges)
                // is necessary to properly work in multi-selection mode.
                console.error('the novo-select containing novo-select-search must have a ngModel or formControl directive when multiple=true');
            }
            return;
        }
        // if <novo-select [multiple]="true">
        // store previously selected values and restore them when they are deselected
        // because the option is not available while we are currently filtering
        this.previousSelectedValues = this.novoSelect.ngControl.value;
        this.novoSelect.ngControl.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe((values) => {
            let restoreSelectedValues = false;
            if (this.novoSelect.multiple) {
                if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length)) &&
                    this.previousSelectedValues &&
                    Array.isArray(this.previousSelectedValues)) {
                    if (!values || !Array.isArray(values)) {
                        values = [];
                    }
                    const optionValues = this.novoSelect.options.map((option) => option.value);
                    this.previousSelectedValues.forEach((previousValue) => {
                        if (!values.some((v) => this.novoSelect.compareWith(v, previousValue)) &&
                            !optionValues.some((v) => this.novoSelect.compareWith(v, previousValue))) {
                            // if a value that was selected before is deselected and not found in the options, it was deselected
                            // due to the filtering, so we restore it.
                            values.push(previousValue);
                            restoreSelectedValues = true;
                        }
                    });
                }
            }
            this.previousSelectedValues = values;
            if (restoreSelectedValues) {
                // TODO: Fix this
                // this.novoSelect._onChange(values);
            }
        });
    }
    /**
     * Scrolls the currently active option into the view if it is not yet visible.
     */
    adjustScrollTopToFitActiveOptionIntoView() {
        if (this.novoSelect.panel && this.novoSelect.contentOptions.length > 0) {
            const novoOptionHeight = this.getNovoOptionHeight();
            const activeOptionIndex = this.novoSelect._keyManager.activeItemIndex || 0;
            const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.novoSelect.contentOptions, this.novoSelect.optionGroups);
            // If the component is in a NovoOption, the activeItemIndex will be offset by one.
            const indexOfOptionToFitIntoView = (this.novoOption ? -1 : 0) + labelCount + activeOptionIndex;
            const currentScrollTop = this.novoSelect.panel.nativeElement.scrollTop;
            const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;
            const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / novoOptionHeight);
            const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / novoOptionHeight) - 1;
            if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {
                this.novoSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * novoOptionHeight;
            }
            else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {
                this.novoSelect.panel.nativeElement.scrollTop =
                    (indexOfOptionToFitIntoView + 1) * novoOptionHeight - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);
            }
        }
    }
    /**
     *  Set the width of the innerSelectSearch to fit even custom scrollbars
     *  And support all Operation Systems
     */
    updateInputWidth() {
        if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {
            return;
        }
        let element = this.innerSelectSearch.nativeElement;
        let panelElement;
        while ((element = element.parentElement)) {
            if (element.classList.contains('novo-select-panel')) {
                panelElement = element;
                break;
            }
        }
        if (panelElement) {
            this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';
        }
    }
    getNovoOptionHeight() {
        if (this.novoSelect.contentOptions.length > 0) {
            return this.novoSelect.contentOptions.first._getHostElement().getBoundingClientRect().height;
        }
        return 0;
    }
    /**
     * Determine the offset to length that can be caused by the optional novoOption used as a search input.
     */
    getOptionsLengthOffset() {
        if (this.novoOption) {
            return 1;
        }
        else {
            return 0;
        }
    }
}
NovoSelectSearchComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchComponent, deps: [{ token: NovoSelectElement }, { token: i0.ChangeDetectorRef }, { token: i7.ViewportRuler }, { token: NovoOption, optional: true }, { token: i1$5.LiveAnnouncer }, { token: NovoFieldElement, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoSelectSearchComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSelectSearchComponent, selector: "novo-select-search", inputs: { name: "name", placeholderLabel: "placeholderLabel", type: "type", noEntriesFoundLabel: "noEntriesFoundLabel", indexAndLengthScreenReaderText: "indexAndLengthScreenReaderText", clearSearchInput: "clearSearchInput", searching: "searching", disableInitialFocus: "disableInitialFocus", enableClearOnEscapePressed: "enableClearOnEscapePressed", preventHomeEndKeyPropagation: "preventHomeEndKeyPropagation", disableScrollToActiveOnOptionsChanged: "disableScrollToActiveOnOptionsChanged", ariaLabel: "ariaLabel", showToggleAllCheckbox: "showToggleAllCheckbox", toggleAllCheckboxChecked: "toggleAllCheckboxChecked", toggleAllCheckboxIndeterminate: "toggleAllCheckboxIndeterminate", toggleAllCheckboxTooltipMessage: "toggleAllCheckboxTooltipMessage", toogleAllCheckboxTooltipPosition: "toogleAllCheckboxTooltipPosition", hideClearSearchButton: "hideClearSearchButton", alwaysRestoreSelectedOptionsMulti: "alwaysRestoreSelectedOptionsMulti" }, outputs: { toggleAll: "toggleAll" }, host: { properties: { "class.novo-select-search-inside-novo-option": "this.isInsideNovoOption" } }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => NovoSelectSearchComponent),
            multi: true,
        },
    ], queries: [{ propertyName: "clearIcon", first: true, predicate: NovoSelectSearchClearDirective, descendants: true }], viewQueries: [{ propertyName: "searchSelectInput", first: true, predicate: ["searchSelectInput"], descendants: true, read: ElementRef, static: true }, { propertyName: "innerSelectSearch", first: true, predicate: ["innerSelectSearch"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<novo-field\n  #innerSelectSearch\n  class=\"novo-select-search-inner\"\n  [ngClass]=\"{'novo-select-search-inner-multiple': novoSelect.multiple, 'novo-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\">\n\n  <novo-checkbox *ngIf=\"_isToggleAllCheckboxVisible()\"\n    novoPrefix\n    [color]=\"'primary'\"\n    class=\"novo-select-search-toggle-all-checkbox\"\n    [checked]=\"toggleAllCheckboxChecked\"\n    [indeterminate]=\"toggleAllCheckboxIndeterminate\"\n    [tooltip]=\"toggleAllCheckboxTooltipMessage\"\n    tooltipClass=\"ngx-novo-select-search-toggle-all-tooltip\"\n    [tooltipPosition]=\"toogleAllCheckboxTooltipPosition\"\n    (change)=\"_emitSelectAllBooleanToParent($event.checked)\"></novo-checkbox>\n\n  <novo-icon\n    novoPrefix\n    class=\"novo-select-search-icon\">search</novo-icon>\n\n  <input class=\"novo-select-search-input\"\n    #searchSelectInput\n    novoInput\n    [name]=\"name\"\n    autocomplete=\"off\"\n    [type]=\"type\"\n    [formControl]=\"_formControl\"\n    (keydown)=\"_handleKeydown($event)\"\n    (keyup)=\"_handleKeyup($event)\"\n    (blur)=\"onBlur()\"\n    [placeholder]=\"placeholderLabel\"\n    [attr.aria-label]=\"ariaLabel\" />\n\n  <novo-spinner *ngIf=\"searching\"\n    novoSuffix\n    class=\"novo-select-search-spinner\"\n    diameter=\"16\"></novo-spinner>\n\n  <novo-button\n    novoSuffix\n    *ngIf=\"!hideClearSearchButton && value && !searching\"\n    aria-label=\"Clear\"\n    (click)=\"_reset(true)\"\n    theme=\"icon\"\n    size=\"small\"\n    class=\"novo-select-search-clear\">\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[novoSelectSearchClear]\"></ng-content>\n    <ng-template #defaultIcon>\n      <novo-icon>close</novo-icon>\n    </ng-template>\n  </novo-button>\n\n  <ng-content select=\".novo-select-search-custom-header-content\"></ng-content>\n\n</novo-field>\n\n<div *ngIf=\"_showNoEntriesFound$ | async\"\n  class=\"novo-select-search-no-entries-found\">\n  {{noEntriesFoundLabel}}\n</div>", styles: [":host{display:block;width:100%}.novo-select-search-hidden{visibility:hidden}.novo-select-search-inner{width:100%;background-color:var(--background-bright);-webkit-transform:translate3d(0,0,0)}.novo-select-search-inner.novo-select-search-inner-multiple{width:100%}.novo-select-search-inner.novo-select-search-inner-multiple.novo-select-search-inner-toggle-all{display:flex;align-items:center}.novo-select-search-icon{padding:var(--spacing-md)}::ng-deep .novo-select-search-panel{transform:none!important;overflow-x:hidden}.novo-select-search-no-entries-found{padding:16px}:host.novo-select-search-inside-novo-option .novo-select-search-input{padding-top:0;padding-bottom:0;height:3.6rem;line-height:3.6rem}:host.novo-select-search-inside-novo-option .novo-select-search-clear{top:6px}:host.novo-select-search-inside-novo-option .novo-select-search-icon-prefix{left:16px;top:7px}::ng-deep .novo-option.contains-novo-select-search{padding:0!important;border:none}::ng-deep .novo-option.contains-novo-select-search .novo-icon{margin-right:0;margin-left:0}::ng-deep .novo-option.contains-novo-select-search .novo-option-pseudo-checkbox{display:none}.novo-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .novo-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\n"], components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoSpinnerElement, selector: "novo-spinner", inputs: ["theme", "color", "size", "inverse"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: NovoFieldPrefixDirective, selector: "[novoPrefix]" }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-select-search', providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => NovoSelectSearchComponent),
                            multi: true,
                        },
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<novo-field\n  #innerSelectSearch\n  class=\"novo-select-search-inner\"\n  [ngClass]=\"{'novo-select-search-inner-multiple': novoSelect.multiple, 'novo-select-search-inner-toggle-all': _isToggleAllCheckboxVisible() }\">\n\n  <novo-checkbox *ngIf=\"_isToggleAllCheckboxVisible()\"\n    novoPrefix\n    [color]=\"'primary'\"\n    class=\"novo-select-search-toggle-all-checkbox\"\n    [checked]=\"toggleAllCheckboxChecked\"\n    [indeterminate]=\"toggleAllCheckboxIndeterminate\"\n    [tooltip]=\"toggleAllCheckboxTooltipMessage\"\n    tooltipClass=\"ngx-novo-select-search-toggle-all-tooltip\"\n    [tooltipPosition]=\"toogleAllCheckboxTooltipPosition\"\n    (change)=\"_emitSelectAllBooleanToParent($event.checked)\"></novo-checkbox>\n\n  <novo-icon\n    novoPrefix\n    class=\"novo-select-search-icon\">search</novo-icon>\n\n  <input class=\"novo-select-search-input\"\n    #searchSelectInput\n    novoInput\n    [name]=\"name\"\n    autocomplete=\"off\"\n    [type]=\"type\"\n    [formControl]=\"_formControl\"\n    (keydown)=\"_handleKeydown($event)\"\n    (keyup)=\"_handleKeyup($event)\"\n    (blur)=\"onBlur()\"\n    [placeholder]=\"placeholderLabel\"\n    [attr.aria-label]=\"ariaLabel\" />\n\n  <novo-spinner *ngIf=\"searching\"\n    novoSuffix\n    class=\"novo-select-search-spinner\"\n    diameter=\"16\"></novo-spinner>\n\n  <novo-button\n    novoSuffix\n    *ngIf=\"!hideClearSearchButton && value && !searching\"\n    aria-label=\"Clear\"\n    (click)=\"_reset(true)\"\n    theme=\"icon\"\n    size=\"small\"\n    class=\"novo-select-search-clear\">\n    <ng-content *ngIf=\"clearIcon; else defaultIcon\" select=\"[novoSelectSearchClear]\"></ng-content>\n    <ng-template #defaultIcon>\n      <novo-icon>close</novo-icon>\n    </ng-template>\n  </novo-button>\n\n  <ng-content select=\".novo-select-search-custom-header-content\"></ng-content>\n\n</novo-field>\n\n<div *ngIf=\"_showNoEntriesFound$ | async\"\n  class=\"novo-select-search-no-entries-found\">\n  {{noEntriesFoundLabel}}\n</div>", styles: [":host{display:block;width:100%}.novo-select-search-hidden{visibility:hidden}.novo-select-search-inner{width:100%;background-color:var(--background-bright);-webkit-transform:translate3d(0,0,0)}.novo-select-search-inner.novo-select-search-inner-multiple{width:100%}.novo-select-search-inner.novo-select-search-inner-multiple.novo-select-search-inner-toggle-all{display:flex;align-items:center}.novo-select-search-icon{padding:var(--spacing-md)}::ng-deep .novo-select-search-panel{transform:none!important;overflow-x:hidden}.novo-select-search-no-entries-found{padding:16px}:host.novo-select-search-inside-novo-option .novo-select-search-input{padding-top:0;padding-bottom:0;height:3.6rem;line-height:3.6rem}:host.novo-select-search-inside-novo-option .novo-select-search-clear{top:6px}:host.novo-select-search-inside-novo-option .novo-select-search-icon-prefix{left:16px;top:7px}::ng-deep .novo-option.contains-novo-select-search{padding:0!important;border:none}::ng-deep .novo-option.contains-novo-select-search .novo-icon{margin-right:0;margin-left:0}::ng-deep .novo-option.contains-novo-select-search .novo-option-pseudo-checkbox{display:none}.novo-select-search-toggle-all-checkbox{padding-left:16px;padding-bottom:2px}:host-context([dir=rtl]) .novo-select-search-toggle-all-checkbox{padding-left:0;padding-right:16px}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoSelectElement, decorators: [{
                    type: Inject,
                    args: [NovoSelectElement]
                }] }, { type: i0.ChangeDetectorRef }, { type: i7.ViewportRuler }, { type: NovoOption, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NovoOption]
                }] }, { type: i1$5.LiveAnnouncer }, { type: NovoFieldElement, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [NovoFieldElement]
                }] }]; }, propDecorators: { name: [{
                type: Input
            }], placeholderLabel: [{
                type: Input
            }], type: [{
                type: Input
            }], noEntriesFoundLabel: [{
                type: Input
            }], indexAndLengthScreenReaderText: [{
                type: Input
            }], clearSearchInput: [{
                type: Input
            }], searching: [{
                type: Input
            }], disableInitialFocus: [{
                type: Input
            }], enableClearOnEscapePressed: [{
                type: Input
            }], preventHomeEndKeyPropagation: [{
                type: Input
            }], disableScrollToActiveOnOptionsChanged: [{
                type: Input
            }], ariaLabel: [{
                type: Input
            }], showToggleAllCheckbox: [{
                type: Input
            }], toggleAllCheckboxChecked: [{
                type: Input
            }], toggleAllCheckboxIndeterminate: [{
                type: Input
            }], toggleAllCheckboxTooltipMessage: [{
                type: Input
            }], toogleAllCheckboxTooltipPosition: [{
                type: Input
            }], hideClearSearchButton: [{
                type: Input
            }], alwaysRestoreSelectedOptionsMulti: [{
                type: Input
            }], toggleAll: [{
                type: Output
            }], searchSelectInput: [{
                type: ViewChild,
                args: ['searchSelectInput', { read: ElementRef, static: true }]
            }], innerSelectSearch: [{
                type: ViewChild,
                args: ['innerSelectSearch', { read: ElementRef, static: true }]
            }], clearIcon: [{
                type: ContentChild,
                args: [NovoSelectSearchClearDirective, { static: false }]
            }], isInsideNovoOption: [{
                type: HostBinding,
                args: ['class.novo-select-search-inside-novo-option']
            }] } });

/**
 * Provides a handle for the table to grab the view container's ng-container to insert data rows.
 * @docs-private
 */
class ConditionInputOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
}
ConditionInputOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionInputOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ConditionInputOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: ConditionInputOutlet, selector: "[conditionInputOutlet]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionInputOutlet, decorators: [{
            type: Directive,
            args: [{ selector: '[conditionInputOutlet]' }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });
/**
 * Provides a handle for the table to grab the view container's ng-container to insert data rows.
 * @docs-private
 */
class ConditionOperatorOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
}
ConditionOperatorOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionOperatorOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ConditionOperatorOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: ConditionOperatorOutlet, selector: "[conditionOperatorOutlet]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionOperatorOutlet, decorators: [{
            type: Directive,
            args: [{ selector: '[conditionOperatorOutlet]' }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });
class ConditionBuilderComponent {
    constructor(labels, cdr, qbs, controlContainer) {
        this.labels = labels;
        this.cdr = cdr;
        this.qbs = qbs;
        this.controlContainer = controlContainer;
        this.searchTerm = new FormControl();
        this._lastContext = {};
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    ngOnInit() {
        this.parentForm = this.controlContainer.control;
        this.parentForm.valueChanges.subscribe((value) => {
            Promise.resolve().then(() => this.onFieldSelect());
        });
    }
    ngAfterContentInit() {
        const { fields = [] } = this.qbs.config || {};
        fields.length && this.changeFieldOptions(fields[0]);
        this.searches = this.searchTerm.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe((term) => {
            this.results$ = Promise.resolve(this.fieldConfig.options.filter((f) => f.name.toLowerCase().includes(term.toLowerCase()) || f.label?.toLowerCase().includes(term.toLowerCase())));
            this.cdr.markForCheck();
        });
    }
    ngAfterViewInit() {
        if (this.parentForm.value?.field !== null) {
            Promise.resolve().then(() => this.onFieldSelect());
        }
    }
    ngOnDestroy() {
        this.searches.unsubscribe();
        // Clear all outlets and Maps
        [this._operatorOutlet.viewContainer, this._inputOutlet.viewContainer].forEach((def) => {
            def.clear();
        });
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Updates the Conditions "Field" Options to Change base on new Scope
     * @param fieldConfig
     */
    changeFieldOptions(fieldConfig) {
        this.fieldConfig = fieldConfig;
        this.searchTerm.setValue('');
        this.results$ = Promise.resolve(this.fieldConfig.options);
    }
    getField() {
        const { field } = this.parentForm?.value;
        if (!field)
            return null;
        return this.fieldConfig.find(field);
    }
    getDefaultField() {
        const fields = this.fieldConfig.options;
        if (fields && fields.length) {
            return fields[0].name;
        }
        return null;
    }
    onFieldSelect() {
        const fieldConf = this.getField();
        if (!fieldConf) {
            this.parentForm.get('field').setValue(this.getDefaultField());
            return;
        }
        else {
            this.fieldDisplayWith = () => fieldConf.label || fieldConf.name;
        }
        const { field, operator } = this.parentForm.value;
        if (this._lastContext.field !== field) {
            if (!!this._lastContext.field) {
                // only clearing operator/value is field was previously defined so we can preload values onto the form
                this.parentForm.get('value').setValue(null);
                this.parentForm.get('operator').setValue(null);
            }
            this.createFieldTemplates();
        }
        this._lastContext = { ...this.parentForm.value };
        this.cdr.markForCheck();
    }
    findDefinitionForField(field) {
        if (!field)
            return;
        const editType = this.qbs.editTypeFn(field);
        // Don't look at dataSpecialization it is no good, this misses currency, and percent
        const { name, inputType, dataType, type } = field;
        const fieldDefsByName = this.qbs.getFieldDefsByName();
        // Check Fields by priority for match Field Definition
        const key = [name, editType?.toUpperCase(), 'DEFAULT'].find((it) => fieldDefsByName.has(it));
        return fieldDefsByName.get(key);
    }
    createFieldTemplates() {
        const definition = this.findDefinitionForField(this.getField());
        if (!this.parentForm.get('operator').value) {
            this.parentForm.get('operator').setValue(definition.defaultOperator);
        }
        this.createFieldOperators(definition);
        this.createFieldInput(definition);
    }
    createFieldOperators(definition) {
        this._operatorOutlet.viewContainer.clear();
        if (definition) {
            const context = { $implicit: this.parentForm, fieldMeta: this.getField() };
            this._operatorOutlet.viewContainer.createEmbeddedView(definition.fieldOperators.template, context);
        }
        this.cdr.markForCheck();
    }
    createFieldInput(definition) {
        this._inputOutlet.viewContainer.clear();
        if (definition) {
            const context = { $implicit: this.parentForm, fieldMeta: this.getField(), viewIndex: this.groupIndex.toString() + this.andIndex.toString() };
            this._inputOutlet.viewContainer.createEmbeddedView(definition.fieldInput.template, context);
        }
        this.cdr.markForCheck();
    }
}
ConditionBuilderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionBuilderComponent, deps: [{ token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: QueryBuilderService }, { token: i4.ControlContainer }], target: i0.ɵɵFactoryTarget.Component });
ConditionBuilderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ConditionBuilderComponent, selector: "novo-condition-builder", inputs: { label: "label", isFirst: "isFirst", andIndex: "andIndex", groupIndex: "groupIndex" }, providers: [{ provide: NOVO_CONDITION_BUILDER, useExisting: ConditionBuilderComponent }], viewQueries: [{ propertyName: "_operatorOutlet", first: true, predicate: ConditionOperatorOutlet, descendants: true, static: true }, { propertyName: "_inputOutlet", first: true, predicate: ConditionInputOutlet, descendants: true, static: true }], ngImport: i0, template: "<form [formGroup]=\"parentForm\">\n  <novo-grid gap=\"1rem\" [columns]=\"isFirst ? '20rem 13rem 1fr' : '16rem 13rem 1fr'\" align=\"end\">\n    <novo-field class=\"condition-field\">\n      <novo-select\n        [placeholder]=\"labels.chooseAField\"\n        formControlName=\"field\"\n        (onSelect)=\"onFieldSelect()\"\n        overlayWidth=\"24rem\"\n        overlayHeight=\"20rem\"\n        [displayWith]=\"fieldDisplayWith\"\n        [style.minWidth.px]=\"160\"\n        [style.maxWidth.px]=\"isFirst ? 200 : 160\">\n        <novo-optgroup class=\"filter-search-results\">\n          <novo-option>\n            <novo-select-search [formControl]=\"searchTerm\" [clearSearchInput]=\"false\"></novo-select-search>\n          </novo-option>\n          <ng-container *ngIf=\"results$ | async as results; else loading\">\n            <ng-container *ngIf=\"results.length\">\n              <novo-option *ngFor=\"let field of results\" value=\"{{ field.name }}\"\n                [attr.data-automation-id]=\"field.name\">\n                {{ field.label || field.name }}\n              </novo-option>\n            </ng-container>\n          </ng-container>\n        </novo-optgroup>\n      </novo-select>\n    </novo-field>\n\n    <div class=\"condition-operator\">\n      <ng-container conditionOperatorOutlet></ng-container>\n    </div>\n\n    <div class=\"condition-input\">\n      <ng-container conditionInputOutlet></ng-container>\n    </div>\n  </novo-grid>\n  <ng-content></ng-content>\n</form>\n\n<!-- EMPTY STATE TEMPLATE -->\n<!-- <ng-template #empty>\n  <novo-non-ideal-state>\n    <novo-icon size=\"xl\" color=\"grapefruit\">search</novo-icon>\n    <novo-title>No results found.</novo-title>\n    <novo-text>Your search didn't find anything. Try searching for something else.</novo-text>\n  </novo-non-ideal-state>\n</ng-template> -->\n\n<!-- LOADING TEMPLATE -->\n<ng-template #loading>\n  <novo-loading></novo-loading>\n</ng-template>", styles: [":host{position:relative;display:block;width:100%}:host .condition-field{grid-template-columns:minmax(-webkit-fit-content,1fr);grid-template-columns:minmax(fit-content,1fr);width:100%;width:-webkit-fill-available}:host .condition-operator::ng-deep .novo-select{min-width:13rem}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(-webkit-fit-content,1fr);grid-template-columns:minmax(fit-content,1fr);width:-webkit-fill-available}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host .condition-input::ng-deep novo-field{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}:host .condition-input::ng-deep .novo-field-infix{white-space:nowrap;overflow:hidden}:host .condition-input::ng-deep novo-chips{border-bottom:none!important}:host .condition-input::ng-deep novo-chips input{padding-left:0!important}:host .condition-input::ng-deep novo-radio-group{padding:0!important}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem auto;align-items:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;overflow:hidden;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}\n"], components: [{ type: NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoSelectSearchComponent, selector: "novo-select-search", inputs: ["name", "placeholderLabel", "type", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: GapDirective, selector: "[gap]", inputs: ["gap"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i4.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: ConditionOperatorOutlet, selector: "[conditionOperatorOutlet]" }, { type: ConditionInputOutlet, selector: "[conditionInputOutlet]" }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-condition-builder', providers: [{ provide: NOVO_CONDITION_BUILDER, useExisting: ConditionBuilderComponent }], changeDetection: ChangeDetectionStrategy.OnPush, template: "<form [formGroup]=\"parentForm\">\n  <novo-grid gap=\"1rem\" [columns]=\"isFirst ? '20rem 13rem 1fr' : '16rem 13rem 1fr'\" align=\"end\">\n    <novo-field class=\"condition-field\">\n      <novo-select\n        [placeholder]=\"labels.chooseAField\"\n        formControlName=\"field\"\n        (onSelect)=\"onFieldSelect()\"\n        overlayWidth=\"24rem\"\n        overlayHeight=\"20rem\"\n        [displayWith]=\"fieldDisplayWith\"\n        [style.minWidth.px]=\"160\"\n        [style.maxWidth.px]=\"isFirst ? 200 : 160\">\n        <novo-optgroup class=\"filter-search-results\">\n          <novo-option>\n            <novo-select-search [formControl]=\"searchTerm\" [clearSearchInput]=\"false\"></novo-select-search>\n          </novo-option>\n          <ng-container *ngIf=\"results$ | async as results; else loading\">\n            <ng-container *ngIf=\"results.length\">\n              <novo-option *ngFor=\"let field of results\" value=\"{{ field.name }}\"\n                [attr.data-automation-id]=\"field.name\">\n                {{ field.label || field.name }}\n              </novo-option>\n            </ng-container>\n          </ng-container>\n        </novo-optgroup>\n      </novo-select>\n    </novo-field>\n\n    <div class=\"condition-operator\">\n      <ng-container conditionOperatorOutlet></ng-container>\n    </div>\n\n    <div class=\"condition-input\">\n      <ng-container conditionInputOutlet></ng-container>\n    </div>\n  </novo-grid>\n  <ng-content></ng-content>\n</form>\n\n<!-- EMPTY STATE TEMPLATE -->\n<!-- <ng-template #empty>\n  <novo-non-ideal-state>\n    <novo-icon size=\"xl\" color=\"grapefruit\">search</novo-icon>\n    <novo-title>No results found.</novo-title>\n    <novo-text>Your search didn't find anything. Try searching for something else.</novo-text>\n  </novo-non-ideal-state>\n</ng-template> -->\n\n<!-- LOADING TEMPLATE -->\n<ng-template #loading>\n  <novo-loading></novo-loading>\n</ng-template>", styles: [":host{position:relative;display:block;width:100%}:host .condition-field{grid-template-columns:minmax(-webkit-fit-content,1fr);grid-template-columns:minmax(fit-content,1fr);width:100%;width:-webkit-fill-available}:host .condition-operator::ng-deep .novo-select{min-width:13rem}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(-webkit-fit-content,1fr);grid-template-columns:minmax(fit-content,1fr);width:-webkit-fill-available}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host .condition-input::ng-deep novo-field{width:-webkit-fit-content;width:-moz-fit-content;width:fit-content}:host .condition-input::ng-deep .novo-field-infix{white-space:nowrap;overflow:hidden}:host .condition-input::ng-deep novo-chips{border-bottom:none!important}:host .condition-input::ng-deep novo-chips input{padding-left:0!important}:host .condition-input::ng-deep novo-radio-group{padding:0!important}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem auto;align-items:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;overflow:hidden;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}\n"] }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: QueryBuilderService }, { type: i4.ControlContainer }]; }, propDecorators: { _operatorOutlet: [{
                type: ViewChild,
                args: [ConditionOperatorOutlet, { static: true }]
            }], _inputOutlet: [{
                type: ViewChild,
                args: [ConditionInputOutlet, { static: true }]
            }], label: [{
                type: Input
            }], isFirst: [{
                type: Input
            }], andIndex: [{
                type: Input
            }], groupIndex: [{
                type: Input
            }] } });

/**
 * Contained within a novoConditionField definition describing what input should be
 * used to capture the compare value of the Condtion
 */
class NovoConditionInputDef {
    constructor(/** @docs-private */ template) {
        this.template = template;
    }
}
NovoConditionInputDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoConditionInputDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoConditionInputDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoConditionInputDef, selector: "[novoConditionInputDef]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoConditionInputDef, decorators: [{
            type: Directive,
            args: [{ selector: '[novoConditionInputDef]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * Contained within a novoConditionField definition describing what operators should be available.
 */
class NovoConditionOperatorsDef {
    constructor(/** @docs-private */ template) {
        this.template = template;
    }
}
NovoConditionOperatorsDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoConditionOperatorsDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoConditionOperatorsDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoConditionOperatorsDef, decorators: [{
            type: Directive,
            args: [{ selector: '[novoConditionOperatorsDef]' }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });
/**
 * Field Field definition for the QueryBuilder.
 * Defines the inputType and operators to use for the query builder.
 */
class BaseConditionFieldDef {
    constructor() { }
    /** Unique name for this field. */
    get name() {
        return this._name;
    }
    set name(name) {
        this._setNameInput(name);
    }
    /**
     * Overridable method that sets the css classes that will be added to every cell in this
     * column.
     * In the future, columnCssClassName will change from type string[] to string and this
     * will set a single string value.
     * @docs-private
     */
    _updateFieldCssClassName() {
        this._fieldCssClassName = [`novo-filter-field-${this.cssClassFriendlyName}`];
    }
    _setNameInput(value) {
        // If the directive is set without a name (updated programmatically), then this setter will
        // trigger with an empty string and should not overwrite the programmatically set value.
        if (value) {
            this._name = value;
            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');
            this._updateFieldCssClassName();
        }
    }
}
BaseConditionFieldDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BaseConditionFieldDef, deps: [], target: i0.ɵɵFactoryTarget.Directive });
BaseConditionFieldDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: BaseConditionFieldDef, inputs: { name: ["novoFilterFieldDef", "name"] }, queries: [{ propertyName: "fieldInput", first: true, predicate: NovoConditionInputDef, descendants: true }, { propertyName: "fieldOperators", first: true, predicate: NovoConditionOperatorsDef, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BaseConditionFieldDef, decorators: [{
            type: Directive
        }], ctorParameters: function () { return []; }, propDecorators: { name: [{
                type: Input,
                args: ['novoFilterFieldDef']
            }], fieldInput: [{
                type: ContentChild,
                args: [NovoConditionInputDef]
            }], fieldOperators: [{
                type: ContentChild,
                args: [NovoConditionOperatorsDef]
            }] } });
class NovoConditionFieldDef extends BaseConditionFieldDef {
    constructor(qbs) {
        super();
        this.qbs = qbs;
    }
    register() {
        this.qbs.registerFieldDef(this);
    }
    unregister() {
        this.qbs.unregisterFieldDef(this);
    }
}
NovoConditionFieldDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoConditionFieldDef, deps: [{ token: QueryBuilderService }], target: i0.ɵɵFactoryTarget.Directive });
NovoConditionFieldDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoConditionFieldDef, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoConditionFieldDef]',
                }]
        }], ctorParameters: function () { return [{ type: QueryBuilderService }]; } });

class AbstractConditionFieldDef {
    constructor(labels) {
        this.labels = labels;
    }
    /** Column name that should be used to reference this column. */
    get name() {
        return this._name;
    }
    set name(name) {
        this._name = name;
        // With Ivy, inputs can be initialized before static query results are
        // available. In that case, we defer the synchronization until "ngOnInit" fires.
        this._syncFieldDefName();
    }
    ngOnInit() {
        this._syncFieldDefName();
        this._syncFieldDefOperatorValue();
        // Need to add self to FilterBuilder because "ContentChildren won't find it"
        this.fieldDef?.register();
    }
    ngOnDestroy() {
        this.fieldDef?.unregister();
    }
    onOperatorSelect(formGroup) {
        formGroup.get('value').setValue(null);
    }
    /** Synchronizes the column definition name with the text column name. */
    _syncFieldDefName() {
        if (this.fieldDef) {
            this.fieldDef.name = this.name;
        }
    }
    _syncFieldDefOperatorValue() {
        if (this.fieldDef) {
            this.fieldDef.defaultOperator = this.defaultOperator;
        }
    }
}
AbstractConditionFieldDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AbstractConditionFieldDef, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Directive });
AbstractConditionFieldDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: AbstractConditionFieldDef, inputs: { name: "name" }, viewQueries: [{ propertyName: "fieldDef", first: true, predicate: NovoConditionFieldDef, descendants: true, static: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: AbstractConditionFieldDef, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { name: [{
                type: Input
            }], fieldDef: [{
                type: ViewChild,
                args: [NovoConditionFieldDef, { static: true }]
            }] } });

/**
 * Handle selection of field values when a list of options is provided.
 */
class NovoDefaultAddressConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = 'includeAny';
    }
}
NovoDefaultAddressConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultAddressConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultAddressConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultAddressConditionDef, selector: "novo-address-condition-def", usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="includeAny">{{ labels.includeAny }}</novo-option>
          <novo-option value="excludeAny">{{ labels.exclude }}</novo-option>
          <novo-option value="radius">{{ labels.radius }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup; viewIndex as viewIndex; fieldMeta as meta" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['includeAny', 'excludeAny', 'radius']">
          <novo-select formControlName="value" [placeholder]="labels.select" [multiple]="true"> </novo-select>
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: SwitchCasesDirective, selector: "[novoSwitchCases]", inputs: ["novoSwitchCases"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultAddressConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-address-condition-def',
                    template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="includeAny">{{ labels.includeAny }}</novo-option>
          <novo-option value="excludeAny">{{ labels.exclude }}</novo-option>
          <novo-option value="radius">{{ labels.radius }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup; viewIndex as viewIndex; fieldMeta as meta" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['includeAny', 'excludeAny', 'radius']">
          <novo-select formControlName="value" [placeholder]="labels.select" [multiple]="true"> </novo-select>
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

/**
 * When constructing a query using a field that is a boolean with only true/false as possible values.
 */
class NovoDefaultBooleanConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = 'include';
    }
}
NovoDefaultBooleanConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultBooleanConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultBooleanConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultBooleanConditionDef, selector: "novo-boolean-condition-def", usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="include">{{ labels.equals }}</novo-option>
          <novo-option value="exclude">{{ labels.doesNotEqual }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <novo-field *novoConditionInputDef="let formGroup" [style.width.px]="125" [formGroup]="formGroup">
        <novo-radio-group formControlName="value">
          <novo-radio [value]="true">{{ formGroup.value.operator === 'isNull' ? labels.yes : labels.true }}</novo-radio>
          <novo-radio [value]="false">{{ formGroup.value.operator === 'isNull' ? labels.no : labels.false }}</novo-radio>
        </novo-radio-group>
      </novo-field>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultBooleanConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-boolean-condition-def',
                    template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="include">{{ labels.equals }}</novo-option>
          <novo-option value="exclude">{{ labels.doesNotEqual }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <novo-field *novoConditionInputDef="let formGroup" [style.width.px]="125" [formGroup]="formGroup">
        <novo-radio-group formControlName="value">
          <novo-radio [value]="true">{{ formGroup.value.operator === 'isNull' ? labels.yes : labels.true }}</novo-radio>
          <novo-radio [value]="false">{{ formGroup.value.operator === 'isNull' ? labels.no : labels.false }}</novo-radio>
        </novo-radio-group>
      </novo-field>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

/**
 * Most complicated of the default conditions defs, a date needs to provide a different
 * input type depending on the operator selected.
 */
class NovoDefaultDateConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = 'within';
    }
    closePanel(event, viewIndex) {
        const overlay = this.overlayChildren.find(item => item.overlayId === viewIndex);
        overlay.closePanel(event);
    }
}
NovoDefaultDateConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultDateConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultDateConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultDateConditionDef, selector: "novo-date-condition-def", viewQueries: [{ propertyName: "overlayChildren", predicate: NovoPickerToggleElement, descendants: true }], usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef="DATE">
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="before">{{ labels.before }}</novo-option>
          <novo-option value="after">{{ labels.after }}</novo-option>
          <novo-option value="between">{{ labels.between }}</novo-option>
          <novo-option value="within">{{ labels.within }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup; viewIndex as viewIndex" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['before', 'after']">
          <input novoInput dateFormat="iso8601" [picker]="datepicker" formControlName="value" />
          <novo-picker-toggle triggerOnFocus [overlayId]="viewIndex" novoSuffix icon="calendar">
            <novo-date-picker (onSelect)="closePanel($event, viewIndex)" #datepicker></novo-date-picker>
          </novo-picker-toggle>
        </novo-field>
        <novo-field *novoSwitchCases="['between']">
          <input novoInput dateRangeFormat="date" [picker]="daterangepicker" formControlName="value" />
          <novo-picker-toggle [for]="daterangepicker" triggerOnFocus [overlayId]="viewIndex" novoSuffix icon="calendar">
            <novo-date-picker #daterangepicker (onSelect)="closePanel($event, viewIndex)" mode="range" numberOfMonths="2"></novo-date-picker>
          </novo-picker-toggle>
        </novo-field>
        <novo-field *novoSwitchCases="['within']">
          <novo-select [placeholder]="labels.selectDateRange" formControlName="value">
            <novo-option value="7">{{ labels.next7Days }}</novo-option>
            <novo-option value="-7">{{ labels.past7Days }}</novo-option>
            <novo-option value="-30">{{ labels.past30Days }}</novo-option>
            <novo-option value="-90">{{ labels.past90Days }}</novo-option>
          </novo-select>
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoPickerToggleElement, selector: "novo-picker-toggle", inputs: ["for", "icon", "tabIndex", "aria-label", "triggerOnFocus", "overlayId", "disabled"], exportAs: ["novoPickerToggle"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: SwitchCasesDirective, selector: "[novoSwitchCases]", inputs: ["novoSwitchCases"] }, { type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: NovoDateFormatDirective, selector: "input[dateFormat]", inputs: ["dateFormat"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: NovoPickerDirective, selector: "input[picker]", inputs: ["picker", "autocomplete"] }, { type: NovoFieldSuffixDirective, selector: "[novoSuffix]" }, { type: NovoDateRangeFormatDirective, selector: "input[dateRangeFormat]", inputs: ["dateRangeFormat"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultDateConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-date-condition-def',
                    template: `
    <ng-container novoConditionFieldDef="DATE">
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="before">{{ labels.before }}</novo-option>
          <novo-option value="after">{{ labels.after }}</novo-option>
          <novo-option value="between">{{ labels.between }}</novo-option>
          <novo-option value="within">{{ labels.within }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup; viewIndex as viewIndex" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['before', 'after']">
          <input novoInput dateFormat="iso8601" [picker]="datepicker" formControlName="value" />
          <novo-picker-toggle triggerOnFocus [overlayId]="viewIndex" novoSuffix icon="calendar">
            <novo-date-picker (onSelect)="closePanel($event, viewIndex)" #datepicker></novo-date-picker>
          </novo-picker-toggle>
        </novo-field>
        <novo-field *novoSwitchCases="['between']">
          <input novoInput dateRangeFormat="date" [picker]="daterangepicker" formControlName="value" />
          <novo-picker-toggle [for]="daterangepicker" triggerOnFocus [overlayId]="viewIndex" novoSuffix icon="calendar">
            <novo-date-picker #daterangepicker (onSelect)="closePanel($event, viewIndex)" mode="range" numberOfMonths="2"></novo-date-picker>
          </novo-picker-toggle>
        </novo-field>
        <novo-field *novoSwitchCases="['within']">
          <novo-select [placeholder]="labels.selectDateRange" formControlName="value">
            <novo-option value="7">{{ labels.next7Days }}</novo-option>
            <novo-option value="-7">{{ labels.past7Days }}</novo-option>
            <novo-option value="-30">{{ labels.past30Days }}</novo-option>
            <novo-option value="-90">{{ labels.past90Days }}</novo-option>
          </novo-select>
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }], propDecorators: { overlayChildren: [{
                type: ViewChildren,
                args: [NovoPickerToggleElement]
            }] } });

/**
 * Any condition that has a type of ID usually only is queried by ID.
 */
class NovoDefaultIdConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = 'equalTo';
    }
}
NovoDefaultIdConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultIdConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultIdConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultIdConditionDef, selector: "novo-id-condition-def", usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator">
          <novo-option value="equalTo">{{ labels.equalTo }}</novo-option>
          <ng-content></ng-content>
        </novo-select>
      </novo-field>
      <novo-field *novoConditionInputDef="let formGroup" [formGroup]="formGroup">
        <input novoInput type="number" min="1" step="1" formControlName="value" />
      </novo-field>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: i4.MinValidator, selector: "input[type=number][min][formControlName],input[type=number][min][formControl],input[type=number][min][ngModel]", inputs: ["min"] }, { type: i4.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultIdConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-id-condition-def',
                    template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator">
          <novo-option value="equalTo">{{ labels.equalTo }}</novo-option>
          <ng-content></ng-content>
        </novo-select>
      </novo-field>
      <novo-field *novoConditionInputDef="let formGroup" [formGroup]="formGroup">
        <input novoInput type="number" min="1" step="1" formControlName="value" />
      </novo-field>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

/**
 * When constructing a query using a field that is an Int, Double, Number ...etc.
 * TODO: Do we implment currency formation here potentially>.?
 */
class NovoDefaultNumberConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = 'equalTo';
    }
}
NovoDefaultNumberConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultNumberConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultNumberConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultNumberConditionDef, selector: "novo-number-condition-def", usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="greaterThan">{{ labels.greaterThan }}</novo-option>
          <novo-option value="lessThan">{{ labels.lessThan }}</novo-option>
          <novo-option value="equalTo">{{ labels.equalTo }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['greaterThan', 'lessThan', 'equalTo']">
          <input novoInput type="number" formControlName="value" />
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: SwitchCasesDirective, selector: "[novoSwitchCases]", inputs: ["novoSwitchCases"] }, { type: NovoInput, selector: "input[novoInput], textarea[novoInput], select[novoInput]", inputs: ["disabled", "id", "placeholder", "required", "type", "value", "readonly"] }, { type: i4.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultNumberConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-number-condition-def',
                    template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="greaterThan">{{ labels.greaterThan }}</novo-option>
          <novo-option value="lessThan">{{ labels.lessThan }}</novo-option>
          <novo-option value="equalTo">{{ labels.equalTo }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['greaterThan', 'lessThan', 'equalTo']">
          <input novoInput type="number" formControlName="value" />
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

/**
 * Handle selection of field values when a list of options is provided.
 */
class NovoDefaultPickerConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.defaultOperator = 'includeAny';
    }
}
NovoDefaultPickerConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultPickerConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultPickerConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultPickerConditionDef, selector: "novo-picker-condition-def", usesInheritance: true, ngImport: i0, template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="includeAny">{{ labels.includeAny }}</novo-option>
          <novo-option value="includeAll">{{ labels.includeAll }}</novo-option>
          <novo-option value="excludeAny">{{ labels.exclude }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup; fieldMeta as meta" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['includeAny', 'includeAll', 'excludeAny']">
          <novo-select formControlName="value" [placeholder]="labels.select" [multiple]="true">
            <!-- WHat about optionUrl/optionType -->
            <novo-option *ngFor="let option of meta?.options" [value]="option.value" [attr.data-automation-value]="option.label">
              {{ option.label }}
            </novo-option>
          </novo-select>
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: SwitchCasesDirective, selector: "[novoSwitchCases]", inputs: ["novoSwitchCases"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultPickerConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-picker-condition-def',
                    template: `
    <ng-container novoConditionFieldDef>
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="includeAny">{{ labels.includeAny }}</novo-option>
          <novo-option value="includeAll">{{ labels.includeAll }}</novo-option>
          <novo-option value="excludeAny">{{ labels.exclude }}</novo-option>
          <novo-option value="isNull">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup; fieldMeta as meta" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['includeAny', 'includeAll', 'excludeAny']">
          <novo-select formControlName="value" [placeholder]="labels.select" [multiple]="true">
            <!-- WHat about optionUrl/optionType -->
            <novo-option *ngFor="let option of meta?.options" [value]="option.value" [attr.data-automation-value]="option.label">
              {{ option.label }}
            </novo-option>
          </novo-select>
        </novo-field>
        <novo-field *novoSwitchCases="['isNull']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

/**
 * Constructing filters against String fields can be complex. Each "chip" added to the
 * condition can be independently used to query a database.  Not all systems support
 * querying within a text column, ie sql unless LIKE is enabled. This could result in a
 * performance penalty.
 */
class NovoDefaultStringConditionDef extends AbstractConditionFieldDef {
    constructor() {
        super(...arguments);
        this.separatorKeysCodes = [ENTER, COMMA];
        this.defaultOperator = 'includeAny';
    }
    getValue(formGroup) {
        return formGroup.value?.value || [];
    }
    add(event, formGroup) {
        const input = event.input;
        input.value = '';
        const valueToAdd = event.value;
        if (valueToAdd !== '') {
            const current = this.getValue(formGroup);
            if (!Array.isArray(current)) {
                formGroup.get('value').setValue([valueToAdd]);
            }
            else {
                formGroup.get('value').setValue([...current, valueToAdd]);
            }
        }
    }
    remove(valueToRemove, formGroup) {
        const current = this.getValue(formGroup);
        const index = current.indexOf(valueToRemove);
        if (index >= 0) {
            const oldValue = [...current];
            oldValue.splice(index, 1);
            formGroup.get('value').setValue(oldValue);
        }
    }
}
NovoDefaultStringConditionDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultStringConditionDef, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDefaultStringConditionDef.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDefaultStringConditionDef, selector: "novo-string-condition-def", usesInheritance: true, ngImport: i0, template: `
    <!-- fieldTypes should be UPPERCASE -->
    <ng-container novoConditionFieldDef="STRING">
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="includeAny">{{ labels.includeAny }}</novo-option>
          <novo-option value="includeAll">{{ labels.includeAll }}</novo-option>
          <novo-option value="excludeAny">{{ labels.exclude }}</novo-option>
          <novo-option value="isEmpty">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['includeAny', 'includeAll', 'excludeAny']">
          <novo-chip-list #chipList aria-label="filter value" formControlName="value">
            <novo-chip *ngFor="let chip of formGroup.value?.value || []" [value]="chip" (removed)="remove(chip, formGroup)">
              {{ chip }}
              <novo-icon novoChipRemove>close</novo-icon>
            </novo-chip>
            <input
              novoChipInput
              [placeholder]="labels.typeToAddChips"
              autocomplete="off"
              (novoChipInputTokenEnd)="add($event, formGroup)"
            />
          </novo-chip-list>
          <novo-autocomplete></novo-autocomplete>
        </novo-field>
        <novo-field *novoSwitchCases="['isEmpty']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `, isInline: true, components: [{ type: NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"], outputs: ["valueChanges", "stateChanges"] }, { type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoChipList, selector: "novo-chip-list", inputs: ["errorStateMatcher", "multiple", "stacked", "compareWith", "value", "required", "placeholder", "disabled", "aria-orientation", "selectable", "tabIndex"], outputs: ["change", "valueChange"], exportAs: ["novoChipList"] }, { type: NovoChipElement, selector: "novo-chip, [novo-chip]", inputs: ["color", "tabIndex", "size", "type", "selected", "value", "selectable", "disabled", "removable"], outputs: ["selectionChange", "destroyed", "removed"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoAutocompleteElement, selector: "novo-autocomplete", inputs: ["tabIndex", "triggerOn", "displayWith", "aria-label", "multiple", "disabled"], outputs: ["optionSelected", "optionActivated"], exportAs: ["novoAutocomplete"] }, { type: NovoRadioGroup, selector: "novo-radio-group", inputs: ["id", "tabindex", "errorStateMatcher", "appearance", "value", "name", "disabled", "required", "placeholder"], outputs: ["change", "blur"] }, { type: NovoRadioElement, selector: "novo-radio", inputs: ["id", "name", "tabindex", "vertical", "label", "button", "theme", "size", "icon", "color", "checked", "value", "disabled"], outputs: ["change", "blur", "focus"] }], directives: [{ type: NovoConditionFieldDef, selector: "[novoConditionFieldDef]" }, { type: NovoConditionOperatorsDef, selector: "[novoConditionOperatorsDef]" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: NovoConditionInputDef, selector: "[novoConditionInputDef]" }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: SwitchCasesDirective, selector: "[novoSwitchCases]", inputs: ["novoSwitchCases"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: NovoChipRemove, selector: "[novoChipRemove]" }, { type: NovoChipInput, selector: "input[novoChipInput]", inputs: ["novoChipInputAddOnBlur", "novoChipInputSeparatorKeyCodes", "placeholder", "id", "disabled"], outputs: ["novoChipInputTokenEnd"], exportAs: ["novoChipInput", "novoChipInputFor"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDefaultStringConditionDef, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-string-condition-def',
                    template: `
    <!-- fieldTypes should be UPPERCASE -->
    <ng-container novoConditionFieldDef="STRING">
      <novo-field *novoConditionOperatorsDef="let formGroup" [formGroup]="formGroup">
        <novo-select [placeholder]="labels.operator" formControlName="operator" (onSelect)="onOperatorSelect(formGroup)">
          <novo-option value="includeAny">{{ labels.includeAny }}</novo-option>
          <novo-option value="includeAll">{{ labels.includeAll }}</novo-option>
          <novo-option value="excludeAny">{{ labels.exclude }}</novo-option>
          <novo-option value="isEmpty">{{ labels.isEmpty }}</novo-option>
        </novo-select>
      </novo-field>
      <ng-container *novoConditionInputDef="let formGroup" [ngSwitch]="formGroup.value.operator" [formGroup]="formGroup">
        <novo-field *novoSwitchCases="['includeAny', 'includeAll', 'excludeAny']">
          <novo-chip-list #chipList aria-label="filter value" formControlName="value">
            <novo-chip *ngFor="let chip of formGroup.value?.value || []" [value]="chip" (removed)="remove(chip, formGroup)">
              {{ chip }}
              <novo-icon novoChipRemove>close</novo-icon>
            </novo-chip>
            <input
              novoChipInput
              [placeholder]="labels.typeToAddChips"
              autocomplete="off"
              (novoChipInputTokenEnd)="add($event, formGroup)"
            />
          </novo-chip-list>
          <novo-autocomplete></novo-autocomplete>
        </novo-field>
        <novo-field *novoSwitchCases="['isEmpty']">
          <novo-radio-group formControlName="value">
            <novo-radio [value]="true">{{ labels.yes }}</novo-radio>
            <novo-radio [value]="false">{{ labels.no }}</novo-radio>
          </novo-radio-group>
        </novo-field>
      </ng-container>
    </ng-container>
  `,
                    encapsulation: ViewEncapsulation.None,
                    // Change detection is intentionally not set to OnPush. This component's template will be provided
                    // to the table to be inserted into its view. This is problematic when change detection runs since
                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which
                    // mean's the template in the table's view will not have the updated value (and in fact will cause
                    // an ExpressionChangedAfterItHasBeenCheckedError).
                    // tslint:disable-next-line:validate-decorators
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }] });

const EMPTY_CONDITION$1 = {
    field: null,
    operator: null,
    value: null,
};
class ConditionGroupComponent {
    constructor(qbs, labels, controlContainer, formBuilder, cdr) {
        this.qbs = qbs;
        this.labels = labels;
        this.controlContainer = controlContainer;
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.controlName = '$' + Conjunction.AND;
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    ngOnInit() {
        this.parentForm = this.controlContainer.control;
        this.controlName = Object.keys(this.parentForm.controls)[0];
        merge(this.parentForm.parent.valueChanges, this.qbs.stateChanges)
            .pipe(takeUntil(this._onDestroy))
            .subscribe(() => this.cdr.markForCheck());
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    updateControlName(value) {
        const name = `$${value.replace('$', '')}`;
        if (name !== this.controlName) {
            const current = this.parentForm.get(this.controlName).value;
            this.parentForm.controls[name] = this.parentForm.controls[this.controlName];
            delete this.parentForm.controls[this.controlName];
            this.controlName = name;
            this.parentForm.get(this.controlName).setValue(current);
            this.cdr.markForCheck();
        }
    }
    get root() {
        return this.parentForm.get(this.controlName);
    }
    addCondition(data) {
        const conditon = this.newCondition(data);
        this.root.push(conditon);
        this.cdr.markForCheck();
    }
    removeCondition(index) {
        this.root.removeAt(index);
        this.cdr.markForCheck();
    }
    newCondition({ field, operator, value } = EMPTY_CONDITION$1) {
        return this.formBuilder.group({
            field: [field, Validators.required],
            operator: [operator, Validators.required],
            value: [value],
        });
    }
    cantRemoveRow(isFirst) {
        if (this.parentForm.parent.length > 1)
            return false;
        return this.root.length <= 1;
    }
}
ConditionGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionGroupComponent, deps: [{ token: QueryBuilderService }, { token: NovoLabelService }, { token: i4.ControlContainer }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
ConditionGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: ConditionGroupComponent, selector: "novo-condition-group", inputs: { controlName: "controlName", groupIndex: "groupIndex" }, host: { classAttribute: "novo-condition-group" }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ConditionGroupComponent), multi: true }], ngImport: i0, template: "<div [formGroup]=\"parentForm\" class=\"condition-group-container\">\n  <novo-stack [formArrayName]=\"controlName\" gap=\"md\">\n    <ng-container\n      *ngFor=\"let andGroup of root.controls; let andIndex = index; let isFirst = first;let isLast = last;\">\n      <ng-container [formGroupName]=\"andIndex\">\n        <novo-flex class=\"condition-row\" align=\"end\" gap=\"sm\">\n          <novo-dropdown *ngIf=\"!isFirst && qbs.allowedGroupings.length > 1; else labeledGroup\">\n            <button theme=\"dialogue\" icon=\"collapse\" size=\"sm\">{{qbs.getConjunctionLabel(controlName)}}</button>\n            <novo-optgroup>\n              <novo-option *ngFor=\"let c of qbs.allowedGroupings\" (click)=\"updateControlName(c)\">\n                {{qbs.getConjunctionLabel(c)}}</novo-option>\n            </novo-optgroup>\n          </novo-dropdown>\n          <ng-template #labeledGroup>\n            <novo-label *ngIf=\"!isFirst\" color=\"ash\" size=\"xs\" uppercase padding=\"sm\">\n              {{qbs.getConjunctionLabel(controlName)}}</novo-label>\n          </ng-template>\n          <novo-condition-builder [groupIndex]=\"groupIndex\" [andIndex]=\"andIndex\" [isFirst]=\"isFirst\"></novo-condition-builder>\n          <novo-button theme=\"icon\" icon=\"delete-o\" color=\"negative\" (click)=\"removeCondition(andIndex)\"\n            [disabled]=\"cantRemoveRow(isFirst)\">\n          </novo-button>\n        </novo-flex>\n      </ng-container>\n    </ng-container>\n    <button theme=\"dialogue\" data-automation-id=\"add-advanced-search-condition\" icon=\"add-thin\" side=\"left\" size=\"sm\" uppercase padding=\"sm\" (click)=\"addCondition()\">\n      {{ labels.addCondition }}</button>\n  </novo-stack>\n  <!-- <button class=\"and-or-button\" theme=\"secondary\" size=\"sm\" (click)=\"addRootCondition()\">{{ addCriteriaLabel }}</button> -->\n</div>", styles: [":host{position:relative;display:block;border:1px solid var(--border);border-radius:var(--border-radius-round);padding:var(--spacing-md);width:100%}:host .condition-row{width:100%}\n"], components: [{ type: NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { type: NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoLabel, selector: "novo-label,[novo-label]" }, { type: ConditionBuilderComponent, selector: "novo-condition-builder", inputs: ["label", "isFirst", "andIndex", "groupIndex"] }], directives: [{ type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: GapDirective, selector: "[gap]", inputs: ["gap"] }, { type: i4.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ConditionGroupComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-condition-group', changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ConditionGroupComponent), multi: true }], host: {
                        class: 'novo-condition-group',
                    }, template: "<div [formGroup]=\"parentForm\" class=\"condition-group-container\">\n  <novo-stack [formArrayName]=\"controlName\" gap=\"md\">\n    <ng-container\n      *ngFor=\"let andGroup of root.controls; let andIndex = index; let isFirst = first;let isLast = last;\">\n      <ng-container [formGroupName]=\"andIndex\">\n        <novo-flex class=\"condition-row\" align=\"end\" gap=\"sm\">\n          <novo-dropdown *ngIf=\"!isFirst && qbs.allowedGroupings.length > 1; else labeledGroup\">\n            <button theme=\"dialogue\" icon=\"collapse\" size=\"sm\">{{qbs.getConjunctionLabel(controlName)}}</button>\n            <novo-optgroup>\n              <novo-option *ngFor=\"let c of qbs.allowedGroupings\" (click)=\"updateControlName(c)\">\n                {{qbs.getConjunctionLabel(c)}}</novo-option>\n            </novo-optgroup>\n          </novo-dropdown>\n          <ng-template #labeledGroup>\n            <novo-label *ngIf=\"!isFirst\" color=\"ash\" size=\"xs\" uppercase padding=\"sm\">\n              {{qbs.getConjunctionLabel(controlName)}}</novo-label>\n          </ng-template>\n          <novo-condition-builder [groupIndex]=\"groupIndex\" [andIndex]=\"andIndex\" [isFirst]=\"isFirst\"></novo-condition-builder>\n          <novo-button theme=\"icon\" icon=\"delete-o\" color=\"negative\" (click)=\"removeCondition(andIndex)\"\n            [disabled]=\"cantRemoveRow(isFirst)\">\n          </novo-button>\n        </novo-flex>\n      </ng-container>\n    </ng-container>\n    <button theme=\"dialogue\" data-automation-id=\"add-advanced-search-condition\" icon=\"add-thin\" side=\"left\" size=\"sm\" uppercase padding=\"sm\" (click)=\"addCondition()\">\n      {{ labels.addCondition }}</button>\n  </novo-stack>\n  <!-- <button class=\"and-or-button\" theme=\"secondary\" size=\"sm\" (click)=\"addRootCondition()\">{{ addCriteriaLabel }}</button> -->\n</div>", styles: [":host{position:relative;display:block;border:1px solid var(--border);border-radius:var(--border-radius-round);padding:var(--spacing-md);width:100%}:host .condition-row{width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: QueryBuilderService }, { type: NovoLabelService }, { type: i4.ControlContainer }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { controlName: [{
                type: Input
            }], groupIndex: [{
                type: Input
            }] } });

const EMPTY_CONDITION = {
    field: null,
    operator: null,
    value: null,
};
class CriteriaBuilderComponent {
    constructor(controlContainer, formBuilder, cdr, qbs) {
        this.controlContainer = controlContainer;
        this.formBuilder = formBuilder;
        this.cdr = cdr;
        this.qbs = qbs;
        this.allowedGroupings = [Conjunction.AND, Conjunction.OR, Conjunction.NOT];
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    ngOnInit() {
        this.parentForm = this.controlContainer.control;
        this.innerForm = this.formBuilder.group({
            criteria: this.formBuilder.array([]),
        });
        this.parentForm.valueChanges.pipe(takeUntil(this._onDestroy)).subscribe((value) => {
            Promise.resolve().then(() => {
                this.setInitalValue(value[this.controlName]);
                this.cdr.markForCheck();
            });
        });
        this.innerForm.valueChanges
            .pipe(debounce(() => interval(10)), takeUntil(this._onDestroy))
            .subscribe((value) => {
            const result = value.criteria.filter((it, i) => {
                const key = Object.keys(it)[0];
                if (it[key].length === 0) {
                    this.removeConditionGroupAt(i);
                }
                return it[key].length > 0;
            });
            Promise.resolve().then(() => {
                this.parentForm.get(this.controlName).setValue(result, { emitEvent: false });
                this.cdr.markForCheck();
            });
        });
    }
    ngAfterContentChecked() {
        this._configureQueryBuilderService();
        this.cdr.detectChanges();
    }
    ngAfterViewInit() {
        this._registerFieldDefs();
    }
    ngOnDestroy() {
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    isConditionGroup(group) {
        return Object.keys(group).every((key) => ['$and', '$or', '$not'].includes(key));
    }
    setInitalValue(value) {
        if (value.length && this.isConditionGroup(value[0])) {
            value.forEach((it) => this.addConditionGroup(it));
        }
        else {
            this.addConditionGroup({ $and: value });
        }
    }
    get root() {
        return this.innerForm.get('criteria');
    }
    addConditionGroup(data = { $and: [EMPTY_CONDITION] }) {
        this.root.push(this.newConditionGroup(data));
        this.cdr.markForCheck();
    }
    newConditionGroup(data) {
        const controls = Object.entries(data).reduce((obj, [key, val]) => {
            return {
                ...obj,
                [key]: this.formBuilder.array(val.map((it) => this.newCondition(it))),
            };
        }, {});
        return this.formBuilder.group(controls);
    }
    newCondition({ field, operator, value } = EMPTY_CONDITION) {
        return this.formBuilder.group({
            field: [field, Validators.required],
            operator: [operator, Validators.required],
            value: [value],
        });
    }
    removeConditionGroupAt(index) {
        this.root.removeAt(index, { emitEvent: false });
    }
    clearAllConditions() {
        while (this.root.length) {
            this.root.removeAt(0);
        }
    }
    _configureQueryBuilderService() {
        this.qbs.config = this.config;
        this.qbs.editTypeFn = this.editTypeFn;
        this.qbs.allowedGroupings = this.allowedGroupings;
    }
    _registerFieldDefs() {
        const defs = [...Array.from(this._contentFieldDefs)];
        defs.forEach((fieldDef) => {
            this.qbs.registerFieldDef(fieldDef);
        });
    }
}
CriteriaBuilderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CriteriaBuilderComponent, deps: [{ token: i4.ControlContainer }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }, { token: QueryBuilderService }], target: i0.ɵɵFactoryTarget.Component });
CriteriaBuilderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: CriteriaBuilderComponent, selector: "novo-criteria-builder", inputs: { config: "config", controlName: "controlName", allowedGroupings: "allowedGroupings", editTypeFn: "editTypeFn" }, host: { classAttribute: "novo-criteria-builder" }, providers: [
        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CriteriaBuilderComponent), multi: true },
        { provide: NOVO_CRITERIA_BUILDER, useExisting: CriteriaBuilderComponent },
        { provide: QueryBuilderService, useClass: QueryBuilderService },
    ], queries: [{ propertyName: "_contentFieldDefs", predicate: NovoConditionFieldDef, descendants: true }], ngImport: i0, template: "<form [formGroup]=\"innerForm\">\n  <novo-stack [formArrayName]=\"controlName\" class=\"criteria-builder-inner\">\n    <ng-container\n      *ngFor=\"let andGroup of root.controls; let andIndex = index; let isFirst = first;let isLastAnd = last;\">\n      <novo-label *ngIf=\"!isFirst\" color=\"ash\" size=\"xs\" uppercase padding=\"sm\">{{qbs.getConjunctionLabel('and')}}\n      </novo-label>\n      <novo-condition-group [groupIndex]=\"andIndex\" [formGroupName]=\"andIndex\"></novo-condition-group>\n    </ng-container>\n  </novo-stack>\n</form>\n<novo-id-condition-def name=\"ID\"></novo-id-condition-def>\n<novo-date-condition-def name=\"TIMESTAMP\"></novo-date-condition-def>\n<novo-string-condition-def name=\"STRING\"></novo-string-condition-def>\n<novo-number-condition-def name=\"FLOAT\"></novo-number-condition-def>\n<novo-number-condition-def name=\"INTEGER\"></novo-number-condition-def>\n<novo-number-condition-def name=\"BIGDECIMAL\"></novo-number-condition-def>\n<novo-number-condition-def name=\"DOUBLE\"></novo-number-condition-def>\n<novo-address-condition-def name=\"ADDRESS\"></novo-address-condition-def>\n<novo-boolean-condition-def name=\"BOOLEAN\"></novo-boolean-condition-def>\n<novo-picker-condition-def name=\"SELECT\"></novo-picker-condition-def>\n<novo-string-condition-def name=\"DEFAULT\"></novo-string-condition-def>\n\n<!-- \n  {\n    $and: [{\n      $or: [{\n        entity: 'JobOrder'\n        field: 'categories',\n        operator: 'doesNotContain',\n        value: 'Healthcare'\n      }]\n    }]\n  }\n -->", styles: [":host{position:relative;display:block;width:76rem}:host .criteria-builder-inner{padding-bottom:1rem}\n"], components: [{ type: NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { type: NovoLabel, selector: "novo-label,[novo-label]" }, { type: ConditionGroupComponent, selector: "novo-condition-group", inputs: ["controlName", "groupIndex"] }, { type: NovoDefaultIdConditionDef, selector: "novo-id-condition-def" }, { type: NovoDefaultDateConditionDef, selector: "novo-date-condition-def" }, { type: NovoDefaultStringConditionDef, selector: "novo-string-condition-def" }, { type: NovoDefaultNumberConditionDef, selector: "novo-number-condition-def" }, { type: NovoDefaultAddressConditionDef, selector: "novo-address-condition-def" }, { type: NovoDefaultBooleanConditionDef, selector: "novo-boolean-condition-def" }, { type: NovoDefaultPickerConditionDef, selector: "novo-picker-condition-def" }], directives: [{ type: i4.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i4.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i4.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { type: i4.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: CriteriaBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-criteria-builder', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CriteriaBuilderComponent), multi: true },
                        { provide: NOVO_CRITERIA_BUILDER, useExisting: CriteriaBuilderComponent },
                        { provide: QueryBuilderService, useClass: QueryBuilderService },
                    ], host: {
                        class: 'novo-criteria-builder',
                    }, template: "<form [formGroup]=\"innerForm\">\n  <novo-stack [formArrayName]=\"controlName\" class=\"criteria-builder-inner\">\n    <ng-container\n      *ngFor=\"let andGroup of root.controls; let andIndex = index; let isFirst = first;let isLastAnd = last;\">\n      <novo-label *ngIf=\"!isFirst\" color=\"ash\" size=\"xs\" uppercase padding=\"sm\">{{qbs.getConjunctionLabel('and')}}\n      </novo-label>\n      <novo-condition-group [groupIndex]=\"andIndex\" [formGroupName]=\"andIndex\"></novo-condition-group>\n    </ng-container>\n  </novo-stack>\n</form>\n<novo-id-condition-def name=\"ID\"></novo-id-condition-def>\n<novo-date-condition-def name=\"TIMESTAMP\"></novo-date-condition-def>\n<novo-string-condition-def name=\"STRING\"></novo-string-condition-def>\n<novo-number-condition-def name=\"FLOAT\"></novo-number-condition-def>\n<novo-number-condition-def name=\"INTEGER\"></novo-number-condition-def>\n<novo-number-condition-def name=\"BIGDECIMAL\"></novo-number-condition-def>\n<novo-number-condition-def name=\"DOUBLE\"></novo-number-condition-def>\n<novo-address-condition-def name=\"ADDRESS\"></novo-address-condition-def>\n<novo-boolean-condition-def name=\"BOOLEAN\"></novo-boolean-condition-def>\n<novo-picker-condition-def name=\"SELECT\"></novo-picker-condition-def>\n<novo-string-condition-def name=\"DEFAULT\"></novo-string-condition-def>\n\n<!-- \n  {\n    $and: [{\n      $or: [{\n        entity: 'JobOrder'\n        field: 'categories',\n        operator: 'doesNotContain',\n        value: 'Healthcare'\n      }]\n    }]\n  }\n -->", styles: [":host{position:relative;display:block;width:76rem}:host .criteria-builder-inner{padding-bottom:1rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i4.ControlContainer }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }, { type: QueryBuilderService }]; }, propDecorators: { config: [{
                type: Input
            }], controlName: [{
                type: Input
            }], allowedGroupings: [{
                type: Input
            }], editTypeFn: [{
                type: Input
            }], _contentFieldDefs: [{
                type: ContentChildren,
                args: [NovoConditionFieldDef, { descendants: true }]
            }] } });

// export const NovoSelectSearchVersion = '3.3.0';
class NovoSelectSearchModule {
}
NovoSelectSearchModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoSelectSearchModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchModule, declarations: [NovoSelectSearchComponent, NovoSelectSearchClearDirective], imports: [CommonModule,
        ReactiveFormsModule,
        NovoCheckboxModule,
        NovoButtonModule,
        NovoCommonModule,
        NovoIconModule,
        NovoLoadingModule,
        NovoTooltipModule,
        NovoFieldModule], exports: [NovoSelectSearchComponent, NovoSelectSearchClearDirective] });
NovoSelectSearchModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchModule, imports: [[
            CommonModule,
            ReactiveFormsModule,
            NovoCheckboxModule,
            NovoButtonModule,
            NovoCommonModule,
            NovoIconModule,
            NovoLoadingModule,
            NovoTooltipModule,
            NovoFieldModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelectSearchModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        ReactiveFormsModule,
                        NovoCheckboxModule,
                        NovoButtonModule,
                        NovoCommonModule,
                        NovoIconModule,
                        NovoLoadingModule,
                        NovoTooltipModule,
                        NovoFieldModule,
                    ],
                    declarations: [NovoSelectSearchComponent, NovoSelectSearchClearDirective],
                    exports: [NovoSelectSearchComponent, NovoSelectSearchClearDirective],
                }]
        }] });

class NovoQueryBuilderModule {
}
NovoQueryBuilderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQueryBuilderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoQueryBuilderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQueryBuilderModule, declarations: [CriteriaBuilderComponent,
        ConditionBuilderComponent,
        ConditionInputOutlet,
        ConditionOperatorOutlet,
        ConditionGroupComponent,
        NovoDefaultAddressConditionDef,
        NovoDefaultBooleanConditionDef,
        NovoDefaultDateConditionDef,
        NovoConditionOperatorsDef,
        NovoConditionInputDef,
        NovoConditionFieldDef,
        NovoDefaultStringConditionDef,
        NovoDefaultNumberConditionDef,
        NovoDefaultIdConditionDef,
        NovoDefaultPickerConditionDef], imports: [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        DragDropModule,
        CdkTableModule,
        NovoButtonModule,
        NovoCommonModule,
        NovoFormModule,
        NovoSelectModule,
        NovoNonIdealStateModule,
        NovoFieldModule,
        NovoOptionModule,
        NovoFlexModule,
        NovoTabModule,
        NovoLoadingModule,
        NovoCardModule,
        NovoDatePickerModule,
        NovoIconModule,
        NovoRadioModule,
        NovoSearchBoxModule,
        NovoSwitchModule,
        NovoChipsModule,
        NovoSelectSearchModule,
        NovoDropdownModule], exports: [CriteriaBuilderComponent,
        ConditionBuilderComponent,
        NovoDefaultAddressConditionDef,
        NovoDefaultBooleanConditionDef,
        NovoDefaultDateConditionDef,
        NovoConditionOperatorsDef,
        NovoConditionInputDef,
        NovoConditionFieldDef,
        NovoDefaultStringConditionDef,
        NovoDefaultNumberConditionDef,
        NovoDefaultIdConditionDef,
        NovoDefaultPickerConditionDef] });
NovoQueryBuilderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQueryBuilderModule, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            DragDropModule,
            CdkTableModule,
            NovoButtonModule,
            NovoCommonModule,
            NovoFormModule,
            NovoSelectModule,
            NovoNonIdealStateModule,
            NovoFieldModule,
            NovoOptionModule,
            NovoFlexModule,
            NovoTabModule,
            NovoLoadingModule,
            NovoCardModule,
            NovoDatePickerModule,
            NovoIconModule,
            NovoRadioModule,
            NovoSearchBoxModule,
            NovoSwitchModule,
            NovoChipsModule,
            NovoSelectSearchModule,
            NovoDropdownModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoQueryBuilderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        DragDropModule,
                        CdkTableModule,
                        NovoButtonModule,
                        NovoCommonModule,
                        NovoFormModule,
                        NovoSelectModule,
                        NovoNonIdealStateModule,
                        NovoFieldModule,
                        NovoOptionModule,
                        NovoFlexModule,
                        NovoTabModule,
                        NovoLoadingModule,
                        NovoCardModule,
                        NovoDatePickerModule,
                        NovoIconModule,
                        NovoRadioModule,
                        NovoSearchBoxModule,
                        NovoSwitchModule,
                        NovoChipsModule,
                        NovoSelectSearchModule,
                        NovoDropdownModule,
                    ],
                    declarations: [
                        CriteriaBuilderComponent,
                        ConditionBuilderComponent,
                        ConditionInputOutlet,
                        ConditionOperatorOutlet,
                        ConditionGroupComponent,
                        NovoDefaultAddressConditionDef,
                        NovoDefaultBooleanConditionDef,
                        NovoDefaultDateConditionDef,
                        NovoConditionOperatorsDef,
                        NovoConditionInputDef,
                        NovoConditionFieldDef,
                        NovoDefaultStringConditionDef,
                        NovoDefaultNumberConditionDef,
                        NovoDefaultIdConditionDef,
                        NovoDefaultPickerConditionDef,
                    ],
                    exports: [
                        CriteriaBuilderComponent,
                        ConditionBuilderComponent,
                        NovoDefaultAddressConditionDef,
                        NovoDefaultBooleanConditionDef,
                        NovoDefaultDateConditionDef,
                        NovoConditionOperatorsDef,
                        NovoConditionInputDef,
                        NovoConditionFieldDef,
                        NovoDefaultStringConditionDef,
                        NovoDefaultNumberConditionDef,
                        NovoDefaultIdConditionDef,
                        NovoDefaultPickerConditionDef,
                    ],
                }]
        }] });

class ActivityTableRenderers {
    static propertyRenderer(prop) {
        const ret = (data) => {
            // TODO - allow for dots and sub props
            return data[prop];
        };
        return ret;
    }
    static dateRenderer(prop) {
        const ret = (data) => {
            return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
        };
        return ret;
    }
}

class NovoActivityTableState {
    constructor() {
        this.id = Math.random();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new EventEmitter();
        this.onReset = new EventEmitter();
    }
    get userFiltered() {
        return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
    }
    reset(fireUpdate = true, persistUserFilters) {
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.onReset.emit(true);
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    }
}
NovoActivityTableState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableState, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
NovoActivityTableState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableState });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableState, decorators: [{
            type: Injectable
        }] });

class NovoSortFilter {
    constructor(state) {
        this.state = state;
    }
    filter(id, value, transform) {
        let filter;
        if (!Helpers.isBlank(value)) {
            filter = { id, value, transform };
        }
        else {
            filter = undefined;
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter, sort: this.state.sort });
    }
    sort(id, value, transform) {
        const sort = { id, value, transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort, filter: this.state.filter });
    }
}
NovoSortFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSortFilter, deps: [{ token: NovoActivityTableState }], target: i0.ɵɵFactoryTarget.Directive });
NovoSortFilter.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSortFilter, selector: "[novoSortFilter]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSortFilter, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSortFilter]',
                }]
        }], ctorParameters: function () { return [{ type: NovoActivityTableState }]; } });
class NovoSelection {
    constructor(state) {
        this.state = state;
        this.novoSelectAllToggle = new EventEmitter();
        this.allRows = new Map();
    }
    register(id, row) {
        this.allRows.set(id, row);
    }
    deregister(id) {
        this.allRows.delete(id);
        this.state.selectedRows.delete(id);
        clearTimeout(this.throttleTimeout);
        this.throttleTimeout = setTimeout(() => {
            if (this.state.selectedRows.size === 0) {
                this.novoSelectAllToggle.emit(false);
            }
        });
    }
    ngOnDestroy() {
        this.allRows.clear();
        this.state.selectedRows.clear();
    }
    toggle(id, selected, row) {
        if (selected) {
            this.state.selectedRows.set(id, row);
        }
        else {
            this.state.selectedRows.delete(id);
        }
    }
    selectAll(value) {
        if (value) {
            this.state.selectedRows = new Map(this.allRows);
        }
        else {
            this.state.selectedRows.clear();
        }
        this.novoSelectAllToggle.emit(value);
    }
}
NovoSelection.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelection, deps: [{ token: NovoActivityTableState }], target: i0.ɵɵFactoryTarget.Directive });
NovoSelection.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSelection, selector: "[novoSelection]", outputs: { novoSelectAllToggle: "novoSelectAllToggle" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSelection, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSelection]',
                }]
        }], ctorParameters: function () { return [{ type: NovoActivityTableState }]; }, propDecorators: { novoSelectAllToggle: [{
                type: Output
            }] } });

/** Workaround for https://github.com/angular/angular/issues/17849 */
const _NovoCellDef = CdkCellDef;
const _NovoHeaderCellDef = CdkHeaderCellDef;
const _NovoColumnDef = CdkColumnDef;
const _NovoHeaderCell = CdkHeaderCell;
const _NovoCell = CdkCell;
class NovoSimpleCellDef extends _NovoCellDef {
}
NovoSimpleCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleCellDef, selector: "[novoSimpleCellDef]", providers: [{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCellDef, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSimpleCellDef]',
                    providers: [{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }],
                }]
        }] });
class NovoSimpleHeaderCellDef extends _NovoHeaderCellDef {
}
NovoSimpleHeaderCellDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleHeaderCellDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleHeaderCellDef, selector: "[novoSimpleHeaderCellDef]", providers: [{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderCellDef, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSimpleHeaderCellDef]',
                    providers: [{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }],
                }]
        }] });
class NovoSimpleColumnDef extends _NovoColumnDef {
    get name() {
        return this._name;
    }
    set name(name) {
        this._setNameInput(name);
    }
    /**
     * This has been extracted to a util because of TS 4 and VE.
     * View Engine doesn't support property rename inheritance.
     * TS 4.0 doesn't allow properties to override accessors or vice-versa.
     * @docs-private
     */
    _setNameInput(value) {
        // If the directive is set without a name (updated programatically), then this setter will
        // trigger with an empty string and should not overwrite the programatically set value.
        if (value) {
            this._name = value;
            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');
            this._updateColumnCssClassName();
        }
    }
}
NovoSimpleColumnDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleColumnDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleColumnDef, selector: "[novoSimpleColumnDef]", inputs: { name: ["novoSimpleColumnDef", "name"] }, providers: [{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleColumnDef, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSimpleColumnDef]',
                    providers: [{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }],
                }]
        }], propDecorators: { name: [{
                type: Input,
                args: ['novoSimpleColumnDef']
            }] } });
class NovoSimpleHeaderCell extends _NovoHeaderCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
    }
    ngOnInit() {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
        }
    }
}
NovoSimpleHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleHeaderCell, selector: "novo-simple-header-cell", inputs: { column: "column" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderCell, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-simple-header-cell',
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], column: [{
                type: Input
            }] } });
class NovoSimpleEmptyHeaderCell extends _NovoHeaderCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
    }
}
NovoSimpleEmptyHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleEmptyHeaderCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleEmptyHeaderCell.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleEmptyHeaderCell, selector: "novo-simple-empty-header-cell", host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleEmptyHeaderCell, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-simple-empty-header-cell',
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class NovoSimpleCheckboxHeaderCell extends _NovoHeaderCell {
    constructor(columnDef, elementRef, renderer, ref, _selection) {
        super(columnDef, elementRef);
        this._selection = _selection;
        this.role = 'columnheader';
        this.selectAll = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-header-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
        this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe((value) => {
            this.selectAll = value;
            ref.markForCheck();
        });
    }
    ngOnDestroy() {
        this.selectAllSubscription.unsubscribe();
    }
    toggle(value) {
        this._selection.selectAll(value);
    }
}
NovoSimpleCheckboxHeaderCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCheckboxHeaderCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }, { token: NovoSelection, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoSimpleCheckboxHeaderCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleCheckboxHeaderCell, selector: "novo-simple-checkbox-header-cell", host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: `<novo-checkbox [(ngModel)]="selectAll" (ngModelChange)="toggle($event)"></novo-checkbox>`, isInline: true, components: [{ type: NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }], directives: [{ type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCheckboxHeaderCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-checkbox-header-cell',
                    template: `<novo-checkbox [(ngModel)]="selectAll" (ngModelChange)="toggle($event)"></novo-checkbox>`,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: NovoSelection, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class NovoSimpleCell extends _NovoCell {
    constructor(columnDef, elementRef, renderer) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
    }
    ngOnInit() {
        if (this.column.customClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', `${this.column.width}px`);
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', `${this.column.width}px`);
            // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
        }
        // else {
        //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        // }
    }
    onClick(event) {
        Helpers.swallowEvent(event);
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
        return;
    }
}
NovoSimpleCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
NovoSimpleCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleCell, selector: "novo-simple-cell", inputs: { row: "row", column: "column" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: ` <span [class.clickable]="!!column.onClick" (click)="onClick($event)" #span>{{ column.renderer(row) }}</span> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-cell',
                    template: ` <span [class.clickable]="!!column.onClick" (click)="onClick($event)" #span>{{ column.renderer(row) }}</span> `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], row: [{
                type: Input
            }], column: [{
                type: Input
            }] } });
class NovoSimpleCheckboxCell extends _NovoCell {
    constructor(columnDef, elementRef, renderer, _selection) {
        super(columnDef, elementRef);
        this.columnDef = columnDef;
        this._selection = _selection;
        this.role = 'gridcell';
        this.selected = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, `novo-checkbox-column-${columnDef.cssClassFriendlyName}`);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
        this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe((value) => {
            this.selected = value;
        });
    }
    ngOnInit() {
        this._selection.register(this.row.id || this.index, this.row);
        this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
    }
    ngOnDestroy() {
        this._selection.deregister(this.row.id || this.index);
        this.selectAllSubscription.unsubscribe();
    }
    toggle(value) {
        this._selection.toggle(this.row.id || this.index, value, this.row);
    }
}
NovoSimpleCheckboxCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCheckboxCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NovoSelection, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoSimpleCheckboxCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleCheckboxCell, selector: "novo-simple-checkbox-cell", inputs: { row: "row", index: "index" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: ` <novo-checkbox [ngModel]="selected" (ngModelChange)="toggle($event)"></novo-checkbox> `, isInline: true, components: [{ type: NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }], directives: [{ type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCheckboxCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-checkbox-cell',
                    template: ` <novo-checkbox [ngModel]="selected" (ngModelChange)="toggle($event)"></novo-checkbox> `,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NovoSelection, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], row: [{
                type: Input
            }], index: [{
                type: Input
            }] } });
class NovoSimpleActionCell extends _NovoCell {
    constructor(columnDef, elementRef, renderer, labels) {
        super(columnDef, elementRef);
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.labels = labels;
        this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', `novo-action-column-${columnDef.cssClassFriendlyName}`);
    }
    ngOnInit() {
        if (this.column.options) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
        }
    }
    isDisabled(check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledCheck) {
            return check.disabledCheck(row);
        }
        return false;
    }
}
NovoSimpleActionCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleActionCell, deps: [{ token: i1$9.CdkColumnDef }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoSimpleActionCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleActionCell, selector: "novo-simple-action-cell", inputs: { row: "row", column: "column" }, host: { properties: { "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: `
    <ng-container *ngIf="!column.options">
      <novo-button theme="icon" [icon]="column.icon" (click)="column.onClick(row)" [disabled]="isDisabled(column, row)"></novo-button>
    </ng-container>
    <ng-container *ngIf="column.options">
      <novo-dropdown parentScrollSelector=".novo-simple-table" containerClass="novo-table-dropdown-cell">
        <novo-button type="button" theme="dialogue" icon="collapse" inverse>{{ column.label || labels.actions }}</novo-button>
        <list>
          <item *ngFor="let option of column.options" (action)="option.onClick(row)" [disabled]="isDisabled(option, row)">
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </item>
        </list>
      </novo-dropdown>
    </ng-container>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoDropdownListElement, selector: "list" }, { type: NovoItemElement, selector: "item", inputs: ["disabled", "keepOpen"], outputs: ["action"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleActionCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-action-cell',
                    template: `
    <ng-container *ngIf="!column.options">
      <novo-button theme="icon" [icon]="column.icon" (click)="column.onClick(row)" [disabled]="isDisabled(column, row)"></novo-button>
    </ng-container>
    <ng-container *ngIf="column.options">
      <novo-dropdown parentScrollSelector=".novo-simple-table" containerClass="novo-table-dropdown-cell">
        <novo-button type="button" theme="dialogue" icon="collapse" inverse>{{ column.label || labels.actions }}</novo-button>
        <list>
          <item *ngFor="let option of column.options" (action)="option.onClick(row)" [disabled]="isDisabled(option, row)">
            <span [attr.data-automation-id]="option.label">{{ option.label }}</span>
          </item>
        </list>
      </novo-dropdown>
    </ng-container>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1$9.CdkColumnDef }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: NovoLabelService }]; }, propDecorators: { role: [{
                type: HostBinding,
                args: ['attr.role']
            }], row: [{
                type: Input
            }], column: [{
                type: Input
            }] } });

class NovoSimpleFilterFocus {
    constructor(element) {
        this.element = element;
    }
    ngAfterViewInit() {
        this.element.nativeElement.focus();
    }
}
NovoSimpleFilterFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleFilterFocus, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleFilterFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleFilterFocus, selector: "[novoSimpleFilterFocus]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleFilterFocus, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSimpleFilterFocus]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
class NovoSimpleCellHeader {
    constructor(changeDetectorRef, labels, state, _sort, _cdkColumnDef) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state.updates.subscribe((change) => {
            if (change.sort && change.sort.id === this.id) {
                this.icon = `sort-${change.sort.value}`;
                this.sortActive = true;
            }
            else {
                this.icon = 'sortable';
                this.sortActive = false;
            }
            if (change.filter && change.filter.id === this.id) {
                this.filterActive = true;
                this.filter = change.filter.value;
            }
            else {
                this.filterActive = false;
                this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    get config() {
        return this._config;
    }
    set config(v) {
        if (!v) {
            this._config = {
                sortable: false,
                filterable: false,
                filterConfig: {
                    type: 'text',
                },
            };
        }
        else {
            this._config = {
                sortable: coerceBooleanProperty(v.sortable),
                filterable: coerceBooleanProperty(v.filterable),
                transforms: v.transforms || {},
                filterConfig: v.filterConfig || {
                    type: 'text',
                },
            };
            if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                this._config.filterConfig.options = this.getDefaultDateFilterOptions();
            }
        }
    }
    ngOnInit() {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = `sort-${this.defaultSort.value}`;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    }
    ngOnDestroy() {
        this._rerenderSubscription.unsubscribe();
    }
    sort() {
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            this.direction = this.getNextSortDirection(this.direction);
            this._sort.sort(this.id, this.direction, this._config.transforms.sort);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    toggleCustomRange(event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    }
    filterData(filter) {
        let actualFilter = filter;
        if (this.config.filterConfig.type === 'date' && filter) {
            this.activeDateFilter = filter.label || this.labels.customDateRange;
            if (filter.startDate && filter.endDate) {
                actualFilter = {
                    min: dateFns.startOfDay(filter.startDate.date),
                    max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(filter.endDate.date), 1)),
                };
            }
            else {
                actualFilter = {
                    min: filter.min ? dateFns.addDays(dateFns.startOfToday(), filter.min) : dateFns.startOfToday(),
                    max: filter.max ? dateFns.addDays(dateFns.startOfTomorrow(), filter.max) : dateFns.startOfTomorrow(),
                };
            }
        }
        if (actualFilter && actualFilter.hasOwnProperty('value')) {
            actualFilter = filter.value;
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(() => {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            this._sort.filter(this.id, actualFilter, this.config.transforms.filter);
            this.changeDetectorRef.markForCheck();
        }, 300);
    }
    clearFilter() {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    }
    getNextSortDirection(direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    }
    getDefaultDateFilterOptions() {
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    }
}
NovoSimpleCellHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCellHeader, deps: [{ token: i0.ChangeDetectorRef }, { token: NovoLabelService }, { token: NovoActivityTableState }, { token: NovoSortFilter, optional: true }, { token: i1$9.CdkColumnDef, optional: true }], target: i0.ɵɵFactoryTarget.Component });
NovoSimpleCellHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleCellHeader, selector: "[novo-simple-cell-config]", inputs: { defaultSort: "defaultSort", config: ["novo-simple-cell-config", "config"] }, viewQueries: [{ propertyName: "dropdown", first: true, predicate: NovoDropdownElement, descendants: true }], ngImport: i0, template: `
    <label (click)="sort()" data-automation-id="novo-activity-table-label" [class.sort-disabled]="!config.sortable">
      <ng-content></ng-content>
    </label>
    <div>
      <novo-button
        *ngIf="config.sortable"
        theme="icon"
        [icon]="icon"
        (click)="sort()"
        [class.active]="sortActive"
        data-automation-id="novo-activity-table-sort"
      ></novo-button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-simple-table"
        containerClass="simple-table-dropdown"
        data-automation-id="novo-activity-table-filter"
      >
        <novo-button type="button" theme="icon" icon="filter" [class.active]="filterActive"></novo-button>
        <div class="header">
          <span>{{ labels.filters }}</span>
          <novo-button
            theme="dialogue"
            color="negative"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter"
            data-automation-id="novo-activity-table-filter-clear"
          >
            {{ labels.clear }}
          </novo-button>
        </div>
        <ng-container [ngSwitch]="config.filterConfig.type">
          <novo-optgroup *ngSwitchCase="'date'">
            <ng-container *ngIf="!showCustomRange">
              <novo-option
                [class.active]="activeDateFilter === option.label"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-activity-table-filter-' + option.label"
              >
                {{ option.label }} <i class="bhi-check" *ngIf="activeDateFilter === option.label"></i>
              </novo-option>
            </ng-container>
            <novo-option
              [class.active]="labels.customDateRange === activeDateFilter"
              (click)="toggleCustomRange($event, true)"
              *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              [keepOpen]="true"
            >
              {{ labels.customDateRange }} <i class="bhi-check" *ngIf="labels.customDateRange === activeDateFilter"></i>
            </novo-option>
            <div class="calendar-container" *ngIf="showCustomRange">
              <div (click)="toggleCustomRange($event, false)"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
              <novo-date-picker (onSelect)="filterData($event)" [(ngModel)]="filter" range="true"></novo-date-picker>
            </div>
          </novo-optgroup>
          <novo-optgroup *ngSwitchCase="'select'">
            <novo-option
              [class.active]="filter === option"
              *ngFor="let option of config.filterConfig.options"
              (click)="filterData(option)"
              [attr.data-automation-id]="'novo-activity-table-filter-' + (option?.label || option)"
            >
              <span>{{ option?.label || option }}</span>
              <i class="bhi-check" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"></i>
            </novo-option>
          </novo-optgroup>
          <novo-optgroup *ngSwitchDefault>
            <novo-option class="filter-search" keepOpen>
              <input
                type="text"
                [(ngModel)]="filter"
                (ngModelChange)="filterData($event)"
                novoSimpleFilterFocus
                data-automation-id="novo-activity-table-filter-input"
              />
            </novo-option>
          </novo-optgroup>
        </ng-container>
      </novo-dropdown>
    </div>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: NovoSimpleFilterFocus, selector: "[novoSimpleFilterFocus]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleCellHeader, decorators: [{
            type: Component,
            args: [{
                    selector: '[novo-simple-cell-config]',
                    template: `
    <label (click)="sort()" data-automation-id="novo-activity-table-label" [class.sort-disabled]="!config.sortable">
      <ng-content></ng-content>
    </label>
    <div>
      <novo-button
        *ngIf="config.sortable"
        theme="icon"
        [icon]="icon"
        (click)="sort()"
        [class.active]="sortActive"
        data-automation-id="novo-activity-table-sort"
      ></novo-button>
      <novo-dropdown
        *ngIf="config.filterable"
        side="right"
        parentScrollSelector=".novo-simple-table"
        containerClass="simple-table-dropdown"
        data-automation-id="novo-activity-table-filter"
      >
        <novo-button type="button" theme="icon" icon="filter" [class.active]="filterActive"></novo-button>
        <div class="header">
          <span>{{ labels.filters }}</span>
          <novo-button
            theme="dialogue"
            color="negative"
            icon="times"
            (click)="clearFilter()"
            *ngIf="filter"
            data-automation-id="novo-activity-table-filter-clear"
          >
            {{ labels.clear }}
          </novo-button>
        </div>
        <ng-container [ngSwitch]="config.filterConfig.type">
          <novo-optgroup *ngSwitchCase="'date'">
            <ng-container *ngIf="!showCustomRange">
              <novo-option
                [class.active]="activeDateFilter === option.label"
                *ngFor="let option of config.filterConfig.options"
                (click)="filterData(option)"
                [attr.data-automation-id]="'novo-activity-table-filter-' + option.label"
              >
                {{ option.label }} <i class="bhi-check" *ngIf="activeDateFilter === option.label"></i>
              </novo-option>
            </ng-container>
            <novo-option
              [class.active]="labels.customDateRange === activeDateFilter"
              (click)="toggleCustomRange($event, true)"
              *ngIf="config.filterConfig.allowCustomRange && !showCustomRange"
              [keepOpen]="true"
            >
              {{ labels.customDateRange }} <i class="bhi-check" *ngIf="labels.customDateRange === activeDateFilter"></i>
            </novo-option>
            <div class="calendar-container" *ngIf="showCustomRange">
              <div (click)="toggleCustomRange($event, false)"><i class="bhi-previous"></i>{{ labels.backToPresetFilters }}</div>
              <novo-date-picker (onSelect)="filterData($event)" [(ngModel)]="filter" range="true"></novo-date-picker>
            </div>
          </novo-optgroup>
          <novo-optgroup *ngSwitchCase="'select'">
            <novo-option
              [class.active]="filter === option"
              *ngFor="let option of config.filterConfig.options"
              (click)="filterData(option)"
              [attr.data-automation-id]="'novo-activity-table-filter-' + (option?.label || option)"
            >
              <span>{{ option?.label || option }}</span>
              <i class="bhi-check" *ngIf="option.hasOwnProperty('value') ? filter === option.value : filter === option"></i>
            </novo-option>
          </novo-optgroup>
          <novo-optgroup *ngSwitchDefault>
            <novo-option class="filter-search" keepOpen>
              <input
                type="text"
                [(ngModel)]="filter"
                (ngModelChange)="filterData($event)"
                novoSimpleFilterFocus
                data-automation-id="novo-activity-table-filter-input"
              />
            </novo-option>
          </novo-optgroup>
        </ng-container>
      </novo-dropdown>
    </div>
  `,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NovoLabelService }, { type: NovoActivityTableState }, { type: NovoSortFilter, decorators: [{
                    type: Optional
                }] }, { type: i1$9.CdkColumnDef, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { dropdown: [{
                type: ViewChild,
                args: [NovoDropdownElement]
            }], defaultSort: [{
                type: Input
            }], config: [{
                type: Input,
                args: ['novo-simple-cell-config']
            }] } });

const DEFAULT_PAGE_SIZE = 50;
class NovoSimpleTablePagination {
    constructor(changeDetectorRef, labels, state) {
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._page = 0;
        this._length = 0;
        this._pageSizeOptions = [];
        this.pageChange = new EventEmitter();
        if (state && state.onReset) {
            this.resetSubscription = this.state.onReset.subscribe((clear) => {
                if (clear) {
                    this.page = 0;
                    this.changeDetectorRef.markForCheck();
                }
            });
        }
    }
    get page() {
        return this._page;
    }
    set page(page) {
        this._page = page;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.page = this._page;
    }
    get length() {
        return this._length;
    }
    set length(length) {
        this._length = length;
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    }
    get pageSize() {
        return this._pageSize;
    }
    set pageSize(pageSize) {
        this._pageSize = pageSize;
        this.updateDisplayedPageSizeOptions();
        this.state.pageSize = this._pageSize;
    }
    get pageSizeOptions() {
        return this._pageSizeOptions;
    }
    set pageSizeOptions(pageSizeOptions) {
        this._pageSizeOptions = pageSizeOptions;
        this.updateDisplayedPageSizeOptions();
    }
    ngOnInit() {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    }
    ngOnDestroy() {
        this.resetSubscription.unsubscribe();
    }
    nextPage() {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.emitPageEvent();
    }
    previousPage() {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.emitPageEvent();
    }
    hasPreviousPage() {
        return this.page >= 1 && this.pageSize !== 0;
    }
    hasNextPage() {
        const numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    }
    changePageSize(pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    }
    updateDisplayedPageSizeOptions() {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize = this.pageSizeOptions.length !== 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;
        }
        this.displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this.displayedPageSizeOptions.push(this.pageSize);
        }
        this.displayedPageSizeOptions.sort((a, b) => a - b);
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    }
    emitPageEvent() {
        const event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.updates.next(event);
    }
}
NovoSimpleTablePagination.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleTablePagination, deps: [{ token: i0.ChangeDetectorRef }, { token: NovoLabelService }, { token: NovoActivityTableState }], target: i0.ɵɵFactoryTarget.Component });
NovoSimpleTablePagination.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleTablePagination, selector: "novo-simple-table-pagination", inputs: { page: "page", length: "length", pageSize: "pageSize", pageSizeOptions: "pageSizeOptions" }, outputs: { pageChange: "pageChange" }, ngImport: i0, template: `
    <div class="novo-simple-table-pagination-size">
      <novo-tiles
        *ngIf="displayedPageSizeOptions.length > 1"
        [(ngModel)]="pageSize"
        [options]="displayedPageSizeOptions"
        (onChange)="changePageSize($event)"
        data-automation-id="novo-simple-table-pagination-tiles"
      >
      </novo-tiles>
      <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
    </div>

    <div class="novo-simple-table-range-label-long" data-automation-id="novo-simple-table-pagination-range-label-long">
      {{ longRangeLabel }}
    </div>
    <div class="novo-simple-table-range-label-short" data-automation-id="novo-simple-table-pagination-range-label-short">
      {{ shortRangeLabel }}
    </div>

    <novo-button
      theme="dialogue"
      type="button"
      class="novo-simple-table-pagination-navigation-previous"
      (click)="previousPage()"
      icon="previous"
      side="left"
      [disabled]="!hasPreviousPage()"
      data-automation-id="novo-simple-table-pagination-previous"
    >
      <span>{{ labels.previous }}</span>
    </novo-button>
    <novo-button
      theme="dialogue"
      type="button"
      class="novo-simple-table-pagination-navigation-next"
      (click)="nextPage()"
      icon="next"
      side="right"
      [disabled]="!hasNextPage()"
      data-automation-id="novo-simple-table-pagination-next"
    >
      <span>{{ labels.next }}</span>
    </novo-button>
  `, isInline: true, components: [{ type: NovoTilesElement, selector: "novo-tiles", inputs: ["name", "options", "required", "controlDisabled"], outputs: ["onChange", "onSelectedOptionClick", "onDisabledOptionClick"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleTablePagination, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-table-pagination',
                    template: `
    <div class="novo-simple-table-pagination-size">
      <novo-tiles
        *ngIf="displayedPageSizeOptions.length > 1"
        [(ngModel)]="pageSize"
        [options]="displayedPageSizeOptions"
        (onChange)="changePageSize($event)"
        data-automation-id="novo-simple-table-pagination-tiles"
      >
      </novo-tiles>
      <div *ngIf="displayedPageSizeOptions.length <= 1">{{ pageSize }}</div>
    </div>

    <div class="novo-simple-table-range-label-long" data-automation-id="novo-simple-table-pagination-range-label-long">
      {{ longRangeLabel }}
    </div>
    <div class="novo-simple-table-range-label-short" data-automation-id="novo-simple-table-pagination-range-label-short">
      {{ shortRangeLabel }}
    </div>

    <novo-button
      theme="dialogue"
      type="button"
      class="novo-simple-table-pagination-navigation-previous"
      (click)="previousPage()"
      icon="previous"
      side="left"
      [disabled]="!hasPreviousPage()"
      data-automation-id="novo-simple-table-pagination-previous"
    >
      <span>{{ labels.previous }}</span>
    </novo-button>
    <novo-button
      theme="dialogue"
      type="button"
      class="novo-simple-table-pagination-navigation-next"
      (click)="nextPage()"
      icon="next"
      side="right"
      [disabled]="!hasNextPage()"
      data-automation-id="novo-simple-table-pagination-next"
    >
      <span>{{ labels.next }}</span>
    </novo-button>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: NovoLabelService }, { type: NovoActivityTableState }]; }, propDecorators: { page: [{
                type: Input
            }], length: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], pageSizeOptions: [{
                type: Input
            }], pageChange: [{
                type: Output
            }] } });

/** Workaround for https://github.com/angular/angular/issues/17849 */
const _NovoHeaderRowDef = CdkHeaderRowDef;
const _NovoCdkRowDef = CdkRowDef;
const _NovoHeaderRow = CdkHeaderRow;
const _NovoRow = CdkRow;
class NovoSimpleHeaderRowDef extends _NovoHeaderRowDef {
}
NovoSimpleHeaderRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleHeaderRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleHeaderRowDef, selector: "[novoSimpleHeaderRowDef]", inputs: { columns: ["novoSimpleHeaderRowDef", "columns"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderRowDef, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSimpleHeaderRowDef]',
                    providers: [{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }],
                }]
        }], propDecorators: { columns: [{
                type: Input,
                args: ['novoSimpleHeaderRowDef']
            }] } });
class NovoSimpleRowDef extends _NovoCdkRowDef {
}
NovoSimpleRowDef.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoSimpleRowDef.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleRowDef, selector: "[novoSimpleRowDef]", inputs: { columns: ["novoSimpleRowDefColumns", "columns"] }, providers: [{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleRowDef, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoSimpleRowDef]',
                    providers: [{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }],
                }]
        }], propDecorators: { columns: [{
                type: Input,
                args: ['novoSimpleRowDefColumns']
            }] } });
class NovoSimpleHeaderRow extends _NovoHeaderRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-simple-header-row';
        this.role = 'row';
    }
}
NovoSimpleHeaderRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoSimpleHeaderRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleHeaderRow, selector: "novo-simple-header-row", host: { properties: { "class": "this.rowClass", "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, directives: [{ type: i1$9.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleHeaderRow, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-header-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { rowClass: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
class NovoSimpleRow extends _NovoRow {
    constructor() {
        super(...arguments);
        this.rowClass = 'novo-simple-row';
        this.role = 'row';
    }
}
NovoSimpleRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleRow, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoSimpleRow.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSimpleRow, selector: "novo-simple-row", host: { properties: { "class": "this.rowClass", "attr.role": "this.role" } }, usesInheritance: true, ngImport: i0, template: "<ng-container cdkCellOutlet></ng-container>", isInline: true, directives: [{ type: i1$9.CdkCellOutlet, selector: "[cdkCellOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleRow, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-row',
                    template: CDK_ROW_TEMPLATE,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { rowClass: [{
                type: HostBinding,
                args: ['class']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });

class RemoteActivityTableService {
}
class StaticActivityTableService {
    constructor(data = []) {
        this.data = data;
    }
    getTableResults(sort, filter, page = 0, pageSize, globalSearch, outsideFilter) {
        let ret = Helpers.deepClone(this.data);
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter((item) => Object.keys(item).some((key) => `${item[key]}`.toLowerCase().includes(globalSearch.toLowerCase())));
            }
            if (filter) {
                const value = Helpers.isString(filter.value) ? filter.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter.value;
                ret = ret.filter(Helpers.filterByField(filter.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: ret, total: this.data.length });
    }
}
class ActivityTableDataSource extends DataSource {
    constructor(tableService, state, ref) {
        super();
        this.tableService = tableService;
        this.state = state;
        this.ref = ref;
        this.total = 0;
        this.current = 0;
        this.loading = false;
        this.pristine = true;
    }
    get totallyEmpty() {
        return this.total === 0;
    }
    get currentlyEmpty() {
        return this.current === 0;
    }
    connect() {
        const displayDataChanges = [this.state.updates];
        return merge(...displayDataChanges).pipe(startWith(null), switchMap(() => {
            this.pristine = false;
            this.loading = true;
            return this.tableService.getTableResults(this.state.sort, this.state.filter, this.state.page, this.state.pageSize, this.state.globalSearch, this.state.outsideFilter);
        }), map((data) => {
            this.loading = false;
            this.total = data.total;
            this.current = data.results.length;
            setTimeout(() => {
                this.ref.markForCheck();
            });
            return data.results;
        }), catchError((error) => {
            console.error(error); // tslint: disable-line
            this.loading = false;
            return of(null);
        }));
    }
    disconnect() { }
}

class NovoTable extends CdkTable {
}
NovoTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTable, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTable, selector: "novo-simple-table", usesInheritance: true, ngImport: i0, template: "\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n", isInline: true, directives: [{ type: i1$9.HeaderRowOutlet, selector: "[headerRowOutlet]" }, { type: i1$9.DataRowOutlet, selector: "[rowOutlet]" }, { type: i1$9.NoDataRowOutlet, selector: "[noDataRowOutlet]" }, { type: i1$9.FooterRowOutlet, selector: "[footerRowOutlet]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTable, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-simple-table',
                    template: CDK_TABLE_TEMPLATE,
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });
class NovoActivityTableActions {
}
NovoActivityTableActions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableActions, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoActivityTableActions.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoActivityTableActions, selector: "novo-activity-table-actions", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableActions, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-activity-table-actions',
                }]
        }] });
class NovoActivityTableCustomHeader {
}
NovoActivityTableCustomHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableCustomHeader, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoActivityTableCustomHeader.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoActivityTableCustomHeader, selector: "novo-activity-table-custom-header", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableCustomHeader, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-activity-table-custom-header',
                }]
        }] });
class NovoActivityTableCustomFilter {
}
NovoActivityTableCustomFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableCustomFilter, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoActivityTableCustomFilter.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoActivityTableCustomFilter, selector: "novo-activity-table-custom-filter", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableCustomFilter, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-activity-table-custom-filter',
                }]
        }] });
class NovoActivityTableEmptyMessage {
}
NovoActivityTableEmptyMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableEmptyMessage, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoActivityTableEmptyMessage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoActivityTableEmptyMessage, selector: "novo-activity-table-empty-message", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableEmptyMessage, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-activity-table-empty-message',
                }]
        }] });
class NovoActivityTableNoResultsMessage {
}
NovoActivityTableNoResultsMessage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableNoResultsMessage, deps: [], target: i0.ɵɵFactoryTarget.Directive });
NovoActivityTableNoResultsMessage.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoActivityTableNoResultsMessage, selector: "novo-activity-table-no-results-message", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTableNoResultsMessage, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-activity-table-no-results-message',
                }]
        }] });
class NovoActivityTable {
    constructor(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.loading = true;
        notify('[Deprecated]: The simple table is deprecated. Please migrate to novo-data-tables!');
    }
    set customFilter(v) {
        this._customFilter = coerceBooleanProperty(v);
    }
    get customFilter() {
        return this._customFilter;
    }
    set forceShowHeader(v) {
        this._forceShowHeader = coerceBooleanProperty(v);
    }
    get forceShowHeader() {
        return this._forceShowHeader;
    }
    set hideGlobalSearch(v) {
        this._hideGlobalSearch = coerceBooleanProperty(v);
        this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
    }
    get hideGlobalSearch() {
        return this._hideGlobalSearch;
    }
    set debug(v) {
        this._debug = coerceBooleanProperty(v);
    }
    get debug() {
        return this._debug;
    }
    get empty() {
        return this.dataSource && this.dataSource.totallyEmpty;
    }
    get loadingClass() {
        return this.loading || (this.dataSource && this.dataSource.loading);
    }
    ngOnChanges(changes) {
        this.loading = changes.activityService && !changes.activityService.currentValue;
        this.ref.detectChanges();
        if (changes.activityService && changes.activityService.currentValue) {
            this.loading = false;
            this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
            this.ref.detectChanges();
        }
        if (changes.outsideFilter && changes.outsideFilter.currentValue) {
            if (!this.outsideFilterSubscription) {
                this.outsideFilterSubscription = this.outsideFilter.subscribe((filter) => {
                    this.state.outsideFilter = filter;
                    this.state.updates.next({ globalSearch: this.state.globalSearch, filter: this.state.filter, sort: this.state.sort });
                    this.ref.markForCheck();
                });
            }
        }
    }
    ngOnDestroy() {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    }
    ngAfterContentInit() {
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    }
    onSearchChange(term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    }
}
NovoActivityTable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTable, deps: [{ token: NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: NovoActivityTableState }], target: i0.ɵɵFactoryTarget.Component });
NovoActivityTable.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoActivityTable, selector: "novo-activity-table", inputs: { activityService: "activityService", columns: "columns", displayedColumns: "displayedColumns", actionColumns: "actionColumns", paginationOptions: "paginationOptions", searchOptions: "searchOptions", defaultSort: "defaultSort", outsideFilter: "outsideFilter", customFilter: "customFilter", forceShowHeader: "forceShowHeader", hideGlobalSearch: "hideGlobalSearch", debug: "debug" }, host: { properties: { "class.global-search-hidden": "this.globalSearchHiddenClassToggle", "class.empty": "this.empty", "class.loading": "this.loadingClass" } }, providers: [
        NovoActivityTableState,
        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },
        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },
    ], usesOnChanges: true, ngImport: i0, template: `
    <div *ngIf="debug">
      <p>Total: {{ dataSource?.total }}</p>
      <p>Current: {{ dataSource?.current }}</p>
      <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>
      <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>
      <p>Loading (DataSource): {{ dataSource?.loading }}</p>
      <p>User Filtered: {{ state.userFiltered }}</p>
      <p>Loading (Table): {{ loading }}</p>
    </div>
    <header *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader">
      <ng-content select="[novo-activity-table-custom-header]"></ng-content>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-simple-table-pagination
        *ngIf="paginationOptions"
        [length]="dataSource?.total"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
      >
      </novo-simple-table-pagination>
      <div class="novo-activity-table-actions">
        <ng-content select="[novo-activity-table-actions]"></ng-content>
      </div>
    </header>
    <div class="novo-activity-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-activity-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-activity-table-filter-container">
      <div class="novo-activity-table-custom-filter" *ngIf="customFilter">
        <ng-content select="[novo-activity-table-custom-filter]"></ng-content>
      </div>
      <div class="novo-activity-table-container">
        <novo-simple-table
          *ngIf="columns?.length > 0"
          [dataSource]="dataSource"
          novoSortFilter
          novoSelection
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered">
          <ng-content></ng-content>
          <ng-container novoSimpleColumnDef="selection">
            <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>
            <novo-simple-checkbox-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [index]="i"></novo-simple-checkbox-cell>
          </ng-container>
          <ng-container *ngFor="let column of actionColumns" [novoSimpleColumnDef]="column.id">
            <novo-simple-empty-header-cell
              [class.button-header-cell]="!column.options"
              [class.dropdown-header-cell]="column.options"
              *novoSimpleHeaderCellDef
            ></novo-simple-empty-header-cell>
            <novo-simple-action-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [column]="column"></novo-simple-action-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns" [novoSimpleColumnDef]="column.id">
            <novo-simple-header-cell
              *novoSimpleHeaderCellDef
              [column]="column"
              [novo-simple-cell-config]="column.config"
              [defaultSort]="defaultSort"
              >{{ column.label }}</novo-simple-header-cell>
            <novo-simple-cell *novoSimpleCellDef="let row" [column]="column" [row]="row"></novo-simple-cell>
          </ng-container>
          <novo-simple-header-row *novoSimpleHeaderRowDef="displayedColumns"></novo-simple-header-row>
          <novo-simple-row *novoSimpleRowDef="let row; columns: displayedColumns"></novo-simple-row>
        </novo-simple-table>
        <div
          class="novo-activity-table-no-results-container"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div #filtered><ng-content select="[novo-activity-table-no-results-message]"></ng-content></div>
          <div class="novo-activity-table-empty-message" *ngIf="filtered.childNodes.length == 0">
            <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
          </div>
        </div>
        <div
          class="novo-activity-table-empty-container"
          *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
        >
          <div #empty><ng-content select="[novo-activity-table-empty-message]"></ng-content></div>
          <div class="novo-activity-table-empty-message" *ngIf="empty.childNodes.length == 0">
            <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
          </div>
        </div>
      </div>
    </div>
  `, isInline: true, components: [{ type: NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen", "hasBackdrop", "allowPropagation"], outputs: ["searchChanged", "applySearch"] }, { type: NovoSimpleTablePagination, selector: "novo-simple-table-pagination", inputs: ["page", "length", "pageSize", "pageSizeOptions"], outputs: ["pageChange"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoTable, selector: "novo-simple-table" }, { type: NovoSimpleCheckboxHeaderCell, selector: "novo-simple-checkbox-header-cell" }, { type: NovoSimpleCheckboxCell, selector: "novo-simple-checkbox-cell", inputs: ["row", "index"] }, { type: NovoSimpleActionCell, selector: "novo-simple-action-cell", inputs: ["row", "column"] }, { type: NovoSimpleCellHeader, selector: "[novo-simple-cell-config]", inputs: ["defaultSort", "novo-simple-cell-config"] }, { type: NovoSimpleCell, selector: "novo-simple-cell", inputs: ["row", "column"] }, { type: NovoSimpleHeaderRow, selector: "novo-simple-header-row" }, { type: NovoSimpleRow, selector: "novo-simple-row" }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: NovoSortFilter, selector: "[novoSortFilter]" }, { type: NovoSelection, selector: "[novoSelection]", outputs: ["novoSelectAllToggle"] }, { type: NovoSimpleColumnDef, selector: "[novoSimpleColumnDef]", inputs: ["novoSimpleColumnDef"] }, { type: NovoSimpleHeaderCellDef, selector: "[novoSimpleHeaderCellDef]" }, { type: NovoSimpleCellDef, selector: "[novoSimpleCellDef]" }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: NovoSimpleEmptyHeaderCell, selector: "novo-simple-empty-header-cell" }, { type: NovoSimpleHeaderCell, selector: "novo-simple-header-cell", inputs: ["column"] }, { type: NovoSimpleHeaderRowDef, selector: "[novoSimpleHeaderRowDef]", inputs: ["novoSimpleHeaderRowDef"] }, { type: NovoSimpleRowDef, selector: "[novoSimpleRowDef]", inputs: ["novoSimpleRowDefColumns"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoActivityTable, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-activity-table',
                    template: `
    <div *ngIf="debug">
      <p>Total: {{ dataSource?.total }}</p>
      <p>Current: {{ dataSource?.current }}</p>
      <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>
      <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>
      <p>Loading (DataSource): {{ dataSource?.loading }}</p>
      <p>User Filtered: {{ state.userFiltered }}</p>
      <p>Loading (Table): {{ loading }}</p>
    </div>
    <header *ngIf="(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader">
      <ng-content select="[novo-activity-table-custom-header]"></ng-content>
      <novo-search
        alwaysOpen="true"
        (searchChanged)="onSearchChange($event)"
        [(ngModel)]="state.globalSearch"
        *ngIf="!hideGlobalSearch"
        [placeholder]="searchOptions?.placeholder"
        [hint]="searchOptions?.tooltip"
      >
      </novo-search>
      <novo-simple-table-pagination
        *ngIf="paginationOptions"
        [length]="dataSource?.total"
        [page]="paginationOptions.page"
        [pageSize]="paginationOptions.pageSize"
        [pageSizeOptions]="paginationOptions.pageSizeOptions"
      >
      </novo-simple-table-pagination>
      <div class="novo-activity-table-actions">
        <ng-content select="[novo-activity-table-actions]"></ng-content>
      </div>
    </header>
    <div class="novo-activity-table-loading-mask" *ngIf="dataSource?.loading || loading" data-automation-id="novo-activity-table-loading">
      <novo-loading></novo-loading>
    </div>
    <div class="novo-activity-table-filter-container">
      <div class="novo-activity-table-custom-filter" *ngIf="customFilter">
        <ng-content select="[novo-activity-table-custom-filter]"></ng-content>
      </div>
      <div class="novo-activity-table-container">
        <novo-simple-table
          *ngIf="columns?.length > 0"
          [dataSource]="dataSource"
          novoSortFilter
          novoSelection
          [class.empty]="dataSource?.currentlyEmpty && state.userFiltered"
          [hidden]="dataSource?.totallyEmpty && !state.userFiltered">
          <ng-content></ng-content>
          <ng-container novoSimpleColumnDef="selection">
            <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>
            <novo-simple-checkbox-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [index]="i"></novo-simple-checkbox-cell>
          </ng-container>
          <ng-container *ngFor="let column of actionColumns" [novoSimpleColumnDef]="column.id">
            <novo-simple-empty-header-cell
              [class.button-header-cell]="!column.options"
              [class.dropdown-header-cell]="column.options"
              *novoSimpleHeaderCellDef
            ></novo-simple-empty-header-cell>
            <novo-simple-action-cell *novoSimpleCellDef="let row; let i = index" [row]="row" [column]="column"></novo-simple-action-cell>
          </ng-container>
          <ng-container *ngFor="let column of columns" [novoSimpleColumnDef]="column.id">
            <novo-simple-header-cell
              *novoSimpleHeaderCellDef
              [column]="column"
              [novo-simple-cell-config]="column.config"
              [defaultSort]="defaultSort"
              >{{ column.label }}</novo-simple-header-cell>
            <novo-simple-cell *novoSimpleCellDef="let row" [column]="column" [row]="row"></novo-simple-cell>
          </ng-container>
          <novo-simple-header-row *novoSimpleHeaderRowDef="displayedColumns"></novo-simple-header-row>
          <novo-simple-row *novoSimpleRowDef="let row; columns: displayedColumns"></novo-simple-row>
        </novo-simple-table>
        <div
          class="novo-activity-table-no-results-container"
          *ngIf="dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine"
        >
          <div #filtered><ng-content select="[novo-activity-table-no-results-message]"></ng-content></div>
          <div class="novo-activity-table-empty-message" *ngIf="filtered.childNodes.length == 0">
            <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
          </div>
        </div>
        <div
          class="novo-activity-table-empty-container"
          *ngIf="dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine"
        >
          <div #empty><ng-content select="[novo-activity-table-empty-message]"></ng-content></div>
          <div class="novo-activity-table-empty-message" *ngIf="empty.childNodes.length == 0">
            <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
          </div>
        </div>
      </div>
    </div>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        NovoActivityTableState,
                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },
                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: NovoActivityTableState }]; }, propDecorators: { globalSearchHiddenClassToggle: [{
                type: HostBinding,
                args: ['class.global-search-hidden']
            }], activityService: [{
                type: Input
            }], columns: [{
                type: Input
            }], displayedColumns: [{
                type: Input
            }], actionColumns: [{
                type: Input
            }], paginationOptions: [{
                type: Input
            }], searchOptions: [{
                type: Input
            }], defaultSort: [{
                type: Input
            }], outsideFilter: [{
                type: Input
            }], customFilter: [{
                type: Input
            }], forceShowHeader: [{
                type: Input
            }], hideGlobalSearch: [{
                type: Input
            }], debug: [{
                type: Input
            }], empty: [{
                type: HostBinding,
                args: ['class.empty']
            }], loadingClass: [{
                type: HostBinding,
                args: ['class.loading']
            }] } });

class NovoSimpleTableModule {
}
NovoSimpleTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoSimpleTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleTableModule, declarations: [NovoTable,
        NovoSimpleCellDef,
        NovoSimpleHeaderCellDef,
        NovoSimpleColumnDef,
        NovoActivityTableEmptyMessage,
        NovoActivityTableNoResultsMessage,
        NovoSimpleHeaderRowDef,
        NovoSimpleRowDef,
        NovoSimpleCellHeader,
        NovoSortFilter,
        NovoSimpleActionCell,
        NovoSimpleEmptyHeaderCell,
        NovoSimpleHeaderCell,
        NovoSimpleCell,
        NovoSimpleHeaderRow,
        NovoSimpleRow,
        NovoSimpleFilterFocus,
        NovoSimpleTablePagination,
        NovoActivityTableCustomHeader,
        NovoSimpleCheckboxCell,
        NovoSimpleCheckboxHeaderCell,
        NovoSelection,
        NovoActivityTable,
        NovoActivityTableActions,
        NovoActivityTableCustomFilter], imports: [NovoDatePickerModule,
        CdkTableModule,
        CommonModule,
        FormsModule,
        NovoCommonModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoFormExtrasModule,
        NovoLoadingModule,
        NovoTilesModule,
        NovoSearchBoxModule,
        NovoCheckboxModule,
        NovoOptionModule], exports: [NovoTable,
        NovoSimpleCellDef,
        NovoSimpleHeaderCellDef,
        NovoSimpleColumnDef,
        NovoActivityTableEmptyMessage,
        NovoActivityTableNoResultsMessage,
        NovoSimpleHeaderRowDef,
        NovoSimpleRowDef,
        NovoSimpleCellHeader,
        NovoSortFilter,
        NovoSimpleActionCell,
        NovoSimpleEmptyHeaderCell,
        NovoSimpleHeaderCell,
        NovoSimpleCell,
        NovoSimpleHeaderRow,
        NovoSimpleRow,
        NovoSimpleFilterFocus,
        NovoSimpleTablePagination,
        NovoActivityTableCustomHeader,
        NovoSimpleCheckboxCell,
        NovoSimpleCheckboxHeaderCell,
        NovoSelection,
        NovoActivityTable,
        NovoActivityTableActions,
        NovoActivityTableCustomFilter] });
NovoSimpleTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleTableModule, providers: [NovoActivityTableState], imports: [[
            NovoDatePickerModule,
            CdkTableModule,
            CommonModule,
            FormsModule,
            NovoCommonModule,
            NovoButtonModule,
            NovoDropdownModule,
            NovoFormExtrasModule,
            NovoLoadingModule,
            NovoTilesModule,
            NovoSearchBoxModule,
            NovoCheckboxModule,
            NovoOptionModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSimpleTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        NovoDatePickerModule,
                        CdkTableModule,
                        CommonModule,
                        FormsModule,
                        NovoCommonModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoFormExtrasModule,
                        NovoLoadingModule,
                        NovoTilesModule,
                        NovoSearchBoxModule,
                        NovoCheckboxModule,
                        NovoOptionModule,
                    ],
                    exports: [
                        NovoTable,
                        NovoSimpleCellDef,
                        NovoSimpleHeaderCellDef,
                        NovoSimpleColumnDef,
                        NovoActivityTableEmptyMessage,
                        NovoActivityTableNoResultsMessage,
                        NovoSimpleHeaderRowDef,
                        NovoSimpleRowDef,
                        NovoSimpleCellHeader,
                        NovoSortFilter,
                        NovoSimpleActionCell,
                        NovoSimpleEmptyHeaderCell,
                        NovoSimpleHeaderCell,
                        NovoSimpleCell,
                        NovoSimpleHeaderRow,
                        NovoSimpleRow,
                        NovoSimpleFilterFocus,
                        NovoSimpleTablePagination,
                        NovoActivityTableCustomHeader,
                        NovoSimpleCheckboxCell,
                        NovoSimpleCheckboxHeaderCell,
                        NovoSelection,
                        NovoActivityTable,
                        NovoActivityTableActions,
                        NovoActivityTableCustomFilter,
                    ],
                    declarations: [
                        NovoTable,
                        NovoSimpleCellDef,
                        NovoSimpleHeaderCellDef,
                        NovoSimpleColumnDef,
                        NovoActivityTableEmptyMessage,
                        NovoActivityTableNoResultsMessage,
                        NovoSimpleHeaderRowDef,
                        NovoSimpleRowDef,
                        NovoSimpleCellHeader,
                        NovoSortFilter,
                        NovoSimpleActionCell,
                        NovoSimpleEmptyHeaderCell,
                        NovoSimpleHeaderCell,
                        NovoSimpleCell,
                        NovoSimpleHeaderRow,
                        NovoSimpleRow,
                        NovoSimpleFilterFocus,
                        NovoSimpleTablePagination,
                        NovoActivityTableCustomHeader,
                        NovoSimpleCheckboxCell,
                        NovoSimpleCheckboxHeaderCell,
                        NovoSelection,
                        NovoActivityTable,
                        NovoActivityTableActions,
                        NovoActivityTableCustomFilter,
                    ],
                    providers: [NovoActivityTableState],
                }]
        }] });

// NG2
class NovoSliderElement {
    constructor(element, labels) {
        this.element = element;
        this.labels = labels;
        this.currentSlide = 0;
        this.start = true;
        this.end = true;
        this.currSlides = ['active'];
        this.handleKeyDownFunc = this.handleKeyDown.bind(this);
    }
    ngOnInit() {
        for (let i = 0; i < this.slides; i++) {
            this.currSlides[i] = i > 0 ? 'inactive' : 'active';
        }
        // Catch Tab Events
        this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
    }
    ngOnDestroy() {
        this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
    }
    handleKeyDown(event) {
        if (event.key === "Tab" /* Tab */) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    }
    changeSlide(direction) {
        if (direction === 'next') {
            if (this.currentSlide === this.slides - 1) {
                return;
            }
            this.currentSlide++;
        }
        else {
            if (this.currentSlide === 0) {
                return;
            }
            this.currentSlide--;
        }
        for (let i = 0; i < this.slides; i++) {
            this.currSlides[i] = 'inactive';
        }
        this.currSlides[this.currentSlide] = 'active';
        this.start = this.currentSlide === 0;
        this.end = this.currentSlide === this.slides - 1;
        this.currentClass = `slide-${this.currentSlide}`;
    }
}
NovoSliderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSliderElement, deps: [{ token: i0.ElementRef }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
NovoSliderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoSliderElement, selector: "novo-slider", inputs: { slides: "slides" }, host: { properties: { "class": "currentClass" } }, ngImport: i0, template: `
    <section class="slides">
      <ng-content select="div[slide]"></ng-content>
    </section>
    <div class="controls">
      <button *ngIf="!start" theme="icon" icon="previous" (click)="changeSlide('back')"></button>
      <div class="indicators">
        <div class="indicator-circle" *ngFor="let indicator of currSlides; let i = index" [ngClass]="indicator"></div>
      </div>
      <button *ngIf="!end" theme="primary" icon="next" (click)="changeSlide('next')">{{ labels.next }}</button>
      <ng-content select="button" *ngIf="end"></ng-content>
    </div>
  `, isInline: true, components: [{ type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSliderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-slider',
                    template: `
    <section class="slides">
      <ng-content select="div[slide]"></ng-content>
    </section>
    <div class="controls">
      <button *ngIf="!start" theme="icon" icon="previous" (click)="changeSlide('back')"></button>
      <div class="indicators">
        <div class="indicator-circle" *ngFor="let indicator of currSlides; let i = index" [ngClass]="indicator"></div>
      </div>
      <button *ngIf="!end" theme="primary" icon="next" (click)="changeSlide('next')">{{ labels.next }}</button>
      <ng-content select="button" *ngIf="end"></ng-content>
    </div>
  `,
                    host: {
                        '[class]': 'currentClass',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: NovoLabelService }]; }, propDecorators: { slides: [{
                type: Input
            }] } });

// NG2
class NovoSliderModule {
}
NovoSliderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSliderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoSliderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSliderModule, declarations: [NovoSliderElement], imports: [CommonModule, NovoButtonModule], exports: [NovoSliderElement] });
NovoSliderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSliderModule, imports: [[CommonModule, NovoButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoSliderModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoSliderElement],
                    exports: [NovoSliderElement],
                }]
        }] });

class NovoStepLabel extends CdkStepLabel {
    constructor(template) {
        super(template);
    }
}
NovoStepLabel.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepLabel, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoStepLabel.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoStepLabel, selector: "[novoStepLabel]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepLabel, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoStepLabel]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });

class NovoStepStatus {
    constructor() { }
}
NovoStepStatus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepStatus, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoStepStatus.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoStepStatus, selector: "novo-step-status", inputs: { state: "state" }, host: { classAttribute: "novo-step-status" }, ngImport: i0, template: "<div class=\"novo-stepper-status-line\" [ngClass]=\"state\"></div>\n<div [ngSwitch]=\"state\" class=\"novo-stepper-status-icon\">\n  <novo-icon color=\"positive\" *ngSwitchCase=\"'edit'\">check-circle</novo-icon>\n  <novo-icon color=\"positive\" *ngSwitchCase=\"'done'\">check-circle-filled</novo-icon>\n  <novo-icon color=\"positive\" *ngSwitchDefault>circle-o</novo-icon>\n</div>", components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepStatus, decorators: [{
            type: Component,
            args: [{ selector: 'novo-step-status', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, host: {
                        class: 'novo-step-status',
                    }, template: "<div class=\"novo-stepper-status-line\" [ngClass]=\"state\"></div>\n<div [ngSwitch]=\"state\" class=\"novo-stepper-status-icon\">\n  <novo-icon color=\"positive\" *ngSwitchCase=\"'edit'\">check-circle</novo-icon>\n  <novo-icon color=\"positive\" *ngSwitchCase=\"'done'\">check-circle-filled</novo-icon>\n  <novo-icon color=\"positive\" *ngSwitchDefault>circle-o</novo-icon>\n</div>" }]
        }], ctorParameters: function () { return []; }, propDecorators: { state: [{
                type: Input
            }] } });

class NovoStepHeader extends CdkStepHeader {
    constructor(_focusMonitor, _element) {
        super(_element);
        this._focusMonitor = _focusMonitor;
        this._element = _element;
        _focusMonitor.monitor(_element.nativeElement, true);
    }
    /** Index of the given step. */
    get index() {
        return this._index;
    }
    set index(value) {
        this._index = coerceNumberProperty(value);
    }
    /** Whether the given step is selected. */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        this._selected = coerceBooleanProperty(value);
    }
    /** Whether the given step label is active. */
    get active() {
        return this._active;
    }
    set active(value) {
        this._active = coerceBooleanProperty(value);
    }
    /** Whether the given step label is active. */
    get touched() {
        return this.selected || this.state === 'edit' || this.state === 'done';
    }
    /** Whether the given step is optional. */
    get optional() {
        return this._optional;
    }
    set optional(value) {
        this._optional = coerceBooleanProperty(value);
    }
    ngOnDestroy() {
        this._focusMonitor.stopMonitoring(this._element.nativeElement);
    }
    /** Returns string label of given step if it is a text label. */
    _stringLabel() {
        return this.label instanceof NovoStepLabel ? null : this.label;
    }
    /** Returns NovoStepLabel if the label of given step is a template label. */
    _templateLabel() {
        return this.label instanceof NovoStepLabel ? this.label : null;
    }
    /** Returns the host HTML element. */
    _getHostElement() {
        return this._element.nativeElement;
    }
}
NovoStepHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepHeader, deps: [{ token: i1$5.FocusMonitor }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoStepHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoStepHeader, selector: "novo-step-header", inputs: { theme: "theme", color: "color", icon: "icon", state: "state", label: "label", iconOverrides: "iconOverrides", index: "index", selected: "selected", active: "active", optional: "optional" }, host: { attributes: { "role": "tab" }, classAttribute: "novo-step-header" }, usesInheritance: true, ngImport: i0, template: "<div [class.novo-step-icon]=\"touched\"\n  [class.novo-step-icon-not-touched]=\"!touched\">\n  <ng-container *ngIf=\"icon\">\n    <novo-icon raised=\"true\" [theme]=\"theme\">{{icon}}</novo-icon>\n  </ng-container>\n  <ng-container *ngIf=\"!icon\">\n    <span class=\"novo-step-number\">{{index + 1}}</span>\n  </ng-container>\n</div>\n<div class=\"novo-step-label\"\n  [class.novo-step-label-active]=\"active\"\n  [class.novo-step-label-selected]=\"selected\">\n  <!-- If there is a label template, use it. -->\n  <ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\">\n  </ng-container>\n  <!-- It there is no label template, fall back to the text label. -->\n  <div class=\"novo-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div>\n</div>\n<novo-step-status [state]=\"state\"></novo-step-status>", styles: [".novo-step-header{overflow:visible;outline:none;cursor:pointer;position:relative}.novo-step-optional{font-size:12px}.novo-step-icon,.novo-step-icon-not-touched{border-radius:50%;height:24px;width:24px;align-items:center;justify-content:center;display:flex}.novo-step-icon .novo-step-number,.novo-step-icon-not-touched .novo-step-number{font-size:1em;min-width:1.6em;height:1.6em;box-shadow:2px 2px #0003;display:flex;align-items:center;justify-content:center;border-radius:4px}.novo-step-icon .novo-step-number{background:#4a89dc;color:#fff}.novo-step-icon-not-touched .novo-step-number{background:#a9adbb;color:#fff}.novo-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle;text-align:center;padding:4px 0}.novo-step-text-label{text-align:center;text-overflow:ellipsis;overflow:hidden}\n"], components: [{ type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoStepStatus, selector: "novo-step-status", inputs: ["state"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepHeader, decorators: [{
            type: Component,
            args: [{ selector: 'novo-step-header', host: {
                        class: 'novo-step-header',
                        role: 'tab',
                    }, preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [class.novo-step-icon]=\"touched\"\n  [class.novo-step-icon-not-touched]=\"!touched\">\n  <ng-container *ngIf=\"icon\">\n    <novo-icon raised=\"true\" [theme]=\"theme\">{{icon}}</novo-icon>\n  </ng-container>\n  <ng-container *ngIf=\"!icon\">\n    <span class=\"novo-step-number\">{{index + 1}}</span>\n  </ng-container>\n</div>\n<div class=\"novo-step-label\"\n  [class.novo-step-label-active]=\"active\"\n  [class.novo-step-label-selected]=\"selected\">\n  <!-- If there is a label template, use it. -->\n  <ng-container *ngIf=\"_templateLabel()\" [ngTemplateOutlet]=\"_templateLabel()!.template\">\n  </ng-container>\n  <!-- It there is no label template, fall back to the text label. -->\n  <div class=\"novo-step-text-label\" *ngIf=\"_stringLabel()\">{{label}}</div>\n</div>\n<novo-step-status [state]=\"state\"></novo-step-status>", styles: [".novo-step-header{overflow:visible;outline:none;cursor:pointer;position:relative}.novo-step-optional{font-size:12px}.novo-step-icon,.novo-step-icon-not-touched{border-radius:50%;height:24px;width:24px;align-items:center;justify-content:center;display:flex}.novo-step-icon .novo-step-number,.novo-step-icon-not-touched .novo-step-number{font-size:1em;min-width:1.6em;height:1.6em;box-shadow:2px 2px #0003;display:flex;align-items:center;justify-content:center;border-radius:4px}.novo-step-icon .novo-step-number{background:#4a89dc;color:#fff}.novo-step-icon-not-touched .novo-step-number{background:#a9adbb;color:#fff}.novo-step-label{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle;text-align:center;padding:4px 0}.novo-step-text-label{text-align:center;text-overflow:ellipsis;overflow:hidden}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$5.FocusMonitor }, { type: i0.ElementRef }]; }, propDecorators: { theme: [{
                type: Input
            }], color: [{
                type: Input
            }], icon: [{
                type: Input
            }], state: [{
                type: Input
            }], label: [{
                type: Input
            }], iconOverrides: [{
                type: Input
            }], index: [{
                type: Input
            }], selected: [{
                type: Input
            }], active: [{
                type: Input
            }], optional: [{
                type: Input
            }] } });

/** Button that moves to the next step in a stepper workflow. */
class NovoStepperNext extends CdkStepperNext {
}
NovoStepperNext.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperNext, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoStepperNext.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoStepperNext, selector: "button[novoStepperNext],novo-button[novoStepperNext]", inputs: { type: "type" }, host: { properties: { "type": "type" }, classAttribute: "novo-stepper-next" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperNext, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[novoStepperNext],novo-button[novoStepperNext]',
                    host: {
                        class: 'novo-stepper-next',
                        '[type]': 'type',
                    },
                    inputs: ['type'],
                }]
        }] });
/** Button that moves to the previous step in a stepper workflow. */
class NovoStepperPrevious extends CdkStepperPrevious {
}
NovoStepperPrevious.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperPrevious, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoStepperPrevious.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoStepperPrevious, selector: "button[novoStepperPrevious],novo-button[novoStepperPrevious]", inputs: { type: "type" }, host: { properties: { "type": "type" }, classAttribute: "novo-stepper-previous" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperPrevious, decorators: [{
            type: Directive,
            args: [{
                    selector: 'button[novoStepperPrevious],novo-button[novoStepperPrevious]',
                    host: {
                        class: 'novo-stepper-previous',
                        '[type]': 'type',
                    },
                    inputs: ['type'],
                }]
        }] });

/** Animations used by the Novo steppers. */
const novoStepperAnimations = {
    /** Animation that transitions the step along the X axis in a horizontal stepper. */
    horizontalStepTransition: trigger('stepTransition', [
        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        state('current', style({ transform: 'none', visibility: 'visible' })),
        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
    ]),
    /** Animation that transitions the step along the Y axis in a vertical stepper. */
    verticalStepTransition: trigger('stepTransition', [
        state('previous', style({ height: '0px', visibility: 'hidden' })),
        state('next', style({ height: '0px', visibility: 'hidden' })),
        state('current', style({ height: '*', visibility: 'visible' })),
        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
};

class NovoStep extends CdkStep {
    constructor(stepper) {
        super(stepper);
    }
}
NovoStep.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStep, deps: [{ token: forwardRef(() => NovoStepper) }], target: i0.ɵɵFactoryTarget.Component });
NovoStep.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoStep, selector: "novo-step", inputs: { theme: "theme", color: "color", icon: "icon" }, providers: [{ provide: CdkStep, useExisting: NovoStep }], queries: [{ propertyName: "stepLabel", first: true, predicate: NovoStepLabel, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template><ng-content></ng-content></ng-template>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStep, decorators: [{
            type: Component,
            args: [{ selector: 'novo-step', preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: CdkStep, useExisting: NovoStep }], template: "<ng-template><ng-content></ng-content></ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i1$a.CdkStepper, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => NovoStepper)]
                }] }]; }, propDecorators: { stepLabel: [{
                type: ContentChild,
                args: [NovoStepLabel]
            }], theme: [{
                type: Input
            }], color: [{
                type: Input
            }], icon: [{
                type: Input
            }] } });
class NovoStepper extends CdkStepper {
    constructor() {
        super(...arguments);
        /** Consumer-specified template-refs to be used to override the header icons. */
        this._iconOverrides = {};
    }
    get completed() {
        try {
            const steps = this.steps.toArray();
            const length = steps.length - 1;
            return steps[length].completed && length === this.selectedIndex;
        }
        catch (err) {
            return false;
        }
    }
    ngAfterContentInit() {
        // Mark the component for change detection whenever the content children query changes
        this.steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());
    }
    complete() {
        try {
            const steps = this.steps.toArray();
            steps[this.selectedIndex].completed = true;
            this.next();
            this._stateChanged();
        }
        catch (err) {
            // do nothing
        }
    }
    getIndicatorType(index) {
        const steps = this.steps.toArray();
        if (index === this.selectedIndex) {
            if (steps[index] && index === steps.length - 1 && steps[index].completed) {
                return 'done';
            }
            return 'edit';
        }
        if (index < this.selectedIndex) {
            return 'done';
        }
        return 'none';
    }
}
NovoStepper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepper, deps: null, target: i0.ɵɵFactoryTarget.Directive });
NovoStepper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoStepper, selector: "[novoStepper]", providers: [
        { provide: CdkStep, useExisting: NovoStep },
        { provide: CdkStepper, useExisting: NovoStepper },
    ], queries: [{ propertyName: "steps", predicate: NovoStep, descendants: true }, { propertyName: "_icons", predicate: NovoIconComponent }], viewQueries: [{ propertyName: "_stepHeader", predicate: NovoStepHeader, descendants: true }], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepper, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoStepper]',
                    providers: [
                        { provide: CdkStep, useExisting: NovoStep },
                        { provide: CdkStepper, useExisting: NovoStepper },
                    ],
                }]
        }], propDecorators: { _stepHeader: [{
                type: ViewChildren,
                args: [NovoStepHeader]
            }], steps: [{
                type: ContentChildren,
                args: [NovoStep, { descendants: true }]
            }], _icons: [{
                type: ContentChildren,
                args: [NovoIconComponent]
            }] } });
class NovoHorizontalStepper extends NovoStepper {
}
NovoHorizontalStepper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHorizontalStepper, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoHorizontalStepper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoHorizontalStepper, selector: "novo-horizontal-stepper", host: { attributes: { "aria-orientation": "horizontal", "role": "tablist" }, classAttribute: "novo-stepper-horizontal" }, providers: [
        { provide: NovoStepper, useExisting: NovoHorizontalStepper },
        { provide: CdkStepper, useExisting: NovoHorizontalStepper },
    ], exportAs: ["novoHorizontalStepper"], usesInheritance: true, ngImport: i0, template: "<div class=\"novo-horizontal-stepper-header-container\">\n  <div class=\"novo-stepper-horizontal-line complete\"></div>\n  <ng-container *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header class=\"novo-horizontal-stepper-header\"\n      (click)=\"step.select()\"\n      (keydown)=\"_onKeydown($event)\"\n      [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n      [id]=\"_getStepLabelId(i)\"\n      [attr.aria-controls]=\"_getStepContentId(i)\"\n      [attr.aria-selected]=\"selectedIndex == i\"\n      [index]=\"i\"\n      [theme]=\"step.theme\"\n      [color]=\"step.color\"\n      [icon]=\"step.icon\"\n      [state]=\"getIndicatorType(i)\"\n      [label]=\"step.stepLabel || step.label\"\n      [selected]=\"selectedIndex === i\"\n      [active]=\"step.completed || selectedIndex === i || !linear\"\n      [optional]=\"step.optional\"\n      [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n  </ng-container>\n  <div class=\"novo-stepper-horizontal-line\" [class.complete]=\"completed\"></div>\n</div>\n\n<div class=\"novo-horizontal-content-container\">\n  <div *ngFor=\"let step of _steps; let i = index\"\n    class=\"novo-horizontal-stepper-content\" role=\"tabpanel\"\n    [@stepTransition]=\"_getAnimationDirection(i)\"\n    [id]=\"_getStepContentId(i)\"\n    [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n    [attr.aria-expanded]=\"selectedIndex === i\">\n    <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n  </div>\n</div>", styles: [".novo-stepper-vertical,.novo-stepper-horizontal{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f7f7f7}.novo-stepper-horizontal-line{border-bottom:1px solid #dbdbdb;flex:auto;min-width:0px;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:\"\";display:block;background:#ffffff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left-width:1px;border-left-style:solid;border-left-color:#dbdbdb}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:after{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}\n"], components: [{ type: NovoStepHeader, selector: "novo-step-header", inputs: ["theme", "color", "icon", "state", "label", "iconOverrides", "index", "selected", "active", "optional"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], animations: [novoStepperAnimations.horizontalStepTransition], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoHorizontalStepper, decorators: [{
            type: Component,
            args: [{ selector: 'novo-horizontal-stepper', exportAs: 'novoHorizontalStepper', host: {
                        class: 'novo-stepper-horizontal',
                        'aria-orientation': 'horizontal',
                        role: 'tablist',
                    }, animations: [novoStepperAnimations.horizontalStepTransition], providers: [
                        { provide: NovoStepper, useExisting: NovoHorizontalStepper },
                        { provide: CdkStepper, useExisting: NovoHorizontalStepper },
                    ], preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"novo-horizontal-stepper-header-container\">\n  <div class=\"novo-stepper-horizontal-line complete\"></div>\n  <ng-container *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n    <novo-step-header class=\"novo-horizontal-stepper-header\"\n      (click)=\"step.select()\"\n      (keydown)=\"_onKeydown($event)\"\n      [tabIndex]=\"_getFocusIndex() === i ? 0 : -1\"\n      [id]=\"_getStepLabelId(i)\"\n      [attr.aria-controls]=\"_getStepContentId(i)\"\n      [attr.aria-selected]=\"selectedIndex == i\"\n      [index]=\"i\"\n      [theme]=\"step.theme\"\n      [color]=\"step.color\"\n      [icon]=\"step.icon\"\n      [state]=\"getIndicatorType(i)\"\n      [label]=\"step.stepLabel || step.label\"\n      [selected]=\"selectedIndex === i\"\n      [active]=\"step.completed || selectedIndex === i || !linear\"\n      [optional]=\"step.optional\"\n      [iconOverrides]=\"_iconOverrides\">\n    </novo-step-header>\n  </ng-container>\n  <div class=\"novo-stepper-horizontal-line\" [class.complete]=\"completed\"></div>\n</div>\n\n<div class=\"novo-horizontal-content-container\">\n  <div *ngFor=\"let step of _steps; let i = index\"\n    class=\"novo-horizontal-stepper-content\" role=\"tabpanel\"\n    [@stepTransition]=\"_getAnimationDirection(i)\"\n    [id]=\"_getStepContentId(i)\"\n    [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n    [attr.aria-expanded]=\"selectedIndex === i\">\n    <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n  </div>\n</div>", styles: [".novo-stepper-vertical,.novo-stepper-horizontal{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f7f7f7}.novo-stepper-horizontal-line{border-bottom:1px solid #dbdbdb;flex:auto;min-width:0px;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:\"\";display:block;background:#ffffff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left-width:1px;border-left-style:solid;border-left-color:#dbdbdb}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:after{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}\n"] }]
        }] });
class NovoVerticalStepper extends NovoStepper {
    constructor(dir, changeDetectorRef, elementRef) {
        super(dir, changeDetectorRef, elementRef, '');
        this._orientation = 'vertical';
    }
}
NovoVerticalStepper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoVerticalStepper, deps: [{ token: i1$8.Directionality, optional: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoVerticalStepper.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoVerticalStepper, selector: "novo-vertical-stepper", host: { attributes: { "aria-orientation": "vertical", "role": "tablist" }, classAttribute: "novo-stepper-vertical" }, providers: [
        { provide: NovoStepper, useExisting: NovoVerticalStepper },
        { provide: CdkStepper, useExisting: NovoVerticalStepper },
    ], exportAs: ["novoVerticalStepper"], usesInheritance: true, ngImport: i0, template: "<div class=\"novo-step\" *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n  <novo-step-header class=\"novo-vertical-stepper-header\"\n    (click)=\"step.select()\"\n    (keydown)=\"_onKeydown($event)\"\n    [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\"\n    [id]=\"_getStepLabelId(i)\"\n    [attr.aria-controls]=\"_getStepContentId(i)\"\n    [attr.aria-selected]=\"selectedIndex === i\"\n    [index]=\"i\"\n    [theme]=\"step.theme\"\n    [color]=\"step.color\"\n    [icon]=\"step.icon\"\n    [state]=\"getIndicatorType(i)\"\n    [label]=\"step.stepLabel || step.label\"\n    [selected]=\"selectedIndex === i\"\n    [active]=\"step.completed || selectedIndex === i || !linear\"\n    [optional]=\"step.optional\"\n    [iconOverrides]=\"_iconOverrides\">\n  </novo-step-header>\n\n  <div class=\"novo-vertical-content-container\" [class.novo-stepper-vertical-line]=\"!isLast\"\n    [ngClass]=\"getIndicatorType(i)\">\n    <div class=\"novo-vertical-stepper-content\" role=\"tabpanel\"\n      [@stepTransition]=\"_getAnimationDirection(i)\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n      <div class=\"novo-vertical-content\">\n        <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n      </div>\n    </div>\n  </div>\n</div>", styles: [".novo-stepper-vertical,.novo-stepper-horizontal{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f7f7f7}.novo-stepper-horizontal-line{border-bottom:1px solid #dbdbdb;flex:auto;min-width:0px;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:\"\";display:block;background:#ffffff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left-width:1px;border-left-style:solid;border-left-color:#dbdbdb}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:after{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}\n"], components: [{ type: NovoStepHeader, selector: "novo-step-header", inputs: ["theme", "color", "icon", "state", "label", "iconOverrides", "index", "selected", "active", "optional"] }], directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], animations: [novoStepperAnimations.verticalStepTransition], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoVerticalStepper, decorators: [{
            type: Component,
            args: [{ selector: 'novo-vertical-stepper', exportAs: 'novoVerticalStepper', host: {
                        class: 'novo-stepper-vertical',
                        'aria-orientation': 'vertical',
                        role: 'tablist',
                    }, animations: [novoStepperAnimations.verticalStepTransition], providers: [
                        { provide: NovoStepper, useExisting: NovoVerticalStepper },
                        { provide: CdkStepper, useExisting: NovoVerticalStepper },
                    ], preserveWhitespaces: false, changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"novo-step\" *ngFor=\"let step of _steps; let i = index; let isLast = last\">\n  <novo-step-header class=\"novo-vertical-stepper-header\"\n    (click)=\"step.select()\"\n    (keydown)=\"_onKeydown($event)\"\n    [tabIndex]=\"_getFocusIndex() == i ? 0 : -1\"\n    [id]=\"_getStepLabelId(i)\"\n    [attr.aria-controls]=\"_getStepContentId(i)\"\n    [attr.aria-selected]=\"selectedIndex === i\"\n    [index]=\"i\"\n    [theme]=\"step.theme\"\n    [color]=\"step.color\"\n    [icon]=\"step.icon\"\n    [state]=\"getIndicatorType(i)\"\n    [label]=\"step.stepLabel || step.label\"\n    [selected]=\"selectedIndex === i\"\n    [active]=\"step.completed || selectedIndex === i || !linear\"\n    [optional]=\"step.optional\"\n    [iconOverrides]=\"_iconOverrides\">\n  </novo-step-header>\n\n  <div class=\"novo-vertical-content-container\" [class.novo-stepper-vertical-line]=\"!isLast\"\n    [ngClass]=\"getIndicatorType(i)\">\n    <div class=\"novo-vertical-stepper-content\" role=\"tabpanel\"\n      [@stepTransition]=\"_getAnimationDirection(i)\"\n      [id]=\"_getStepContentId(i)\"\n      [attr.aria-labelledby]=\"_getStepLabelId(i)\"\n      [attr.aria-expanded]=\"selectedIndex === i\">\n      <div class=\"novo-vertical-content\">\n        <ng-container [ngTemplateOutlet]=\"step.content\"></ng-container>\n      </div>\n    </div>\n  </div>\n</div>", styles: [".novo-stepper-vertical,.novo-stepper-horizontal{display:block}.novo-horizontal-stepper-header-container{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f7f7f7}.novo-stepper-horizontal-line{border-bottom:1px solid #dbdbdb;flex:auto;min-width:0px;height:80px}.novo-stepper-horizontal-line.complete{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header .novo-step-status{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line{width:100%;position:absolute}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #dbdbdb}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.edit:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-line.done:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon{position:relative}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon:before{content:\"\";display:block;background:#ffffff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header .novo-step-status .novo-stepper-status-icon>*{position:relative;z-index:1}.novo-vertical-stepper-header{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header .novo-step-icon,.novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:12px}[dir=rtl] .novo-vertical-stepper-header .novo-step-icon,[dir=rtl] .novo-vertical-stepper-header .novo-step-icon-not-touched{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false]{height:0}.novo-horizontal-content-container{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container{margin-left:36px;border:0;position:relative}[dir=rtl] .novo-vertical-content-container{margin-left:0;margin-right:36px}.novo-stepper-vertical-line:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left-width:1px;border-left-style:solid;border-left-color:#dbdbdb}[dir=rtl] .novo-stepper-vertical-line:before{left:auto;right:0}.novo-stepper-vertical-line.edit:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical-line.done:after{border-left-color:1px solid #4a89dc}.novo-stepper-vertical novo-step-status{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content{overflow:hidden}.novo-vertical-content{padding:0 24px 24px}.novo-step:last-child .novo-vertical-content-container{border:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1$8.Directionality, decorators: [{
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; } });

class NovoStepperModule {
}
NovoStepperModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoStepperModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperModule, declarations: [NovoHorizontalStepper,
        NovoVerticalStepper,
        NovoStep,
        NovoStepLabel,
        NovoStepper,
        NovoStepHeader,
        NovoStepStatus,
        NovoStepperNext,
        NovoStepperPrevious], imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule], exports: [NovoHorizontalStepper,
        NovoVerticalStepper,
        NovoStep,
        NovoStepLabel,
        NovoStepper,
        NovoStepHeader,
        NovoStepStatus,
        NovoStepperNext,
        NovoStepperPrevious] });
NovoStepperModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperModule, imports: [[CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoStepperModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule],
                    exports: [
                        NovoHorizontalStepper,
                        NovoVerticalStepper,
                        NovoStep,
                        NovoStepLabel,
                        NovoStepper,
                        NovoStepHeader,
                        NovoStepStatus,
                        NovoStepperNext,
                        NovoStepperPrevious,
                    ],
                    declarations: [
                        NovoHorizontalStepper,
                        NovoVerticalStepper,
                        NovoStep,
                        NovoStepLabel,
                        NovoStepper,
                        NovoStepHeader,
                        NovoStepStatus,
                        NovoStepperNext,
                        NovoStepperPrevious,
                    ],
                }]
        }] });

class NovoTabbedGroupPickerElement {
    constructor(labelService, ref) {
        this.labelService = labelService;
        this.ref = ref;
        this.multiple = true;
        this.selectionChange = new EventEmitter();
        this.displayTabIndex = 0;
        this.filterText = new BehaviorSubject('');
        this.loading = true;
        this.showClearAll = false;
        // Initial height based on 13 px font rendered in chrome. Actual height retrieved onDropdownToggled.
        this.scrollViewportHeight = 351;
        this.virtualScrollItemSize = 39;
        this.getSelectedState = (childArray) => {
            const numberOfSelectedItems = childArray.filter(({ selected }) => selected).length;
            if (!numberOfSelectedItems) {
                return undefined;
            }
            return numberOfSelectedItems === childArray.length ? 'selected' : 'indeterminate';
        };
        this.filter = (searchTerm) => {
            this.displayTabs.forEach((displayTab, i) => (displayTab.data = this.tabs[i].data.filter((item) => item[displayTab.labelField].toLowerCase().includes(searchTerm.toLowerCase()))));
            this.ref.markForCheck();
        };
    }
    get displayTab() {
        return this.displayTabs[this.displayTabIndex];
    }
    set displayTab(tab) {
        this.displayTabIndex = this.tabs.map(({ typeName }) => typeName).indexOf(tab.typeName);
    }
    get minBufferPx() {
        return this.scrollViewportHeight; // render at least 2x the number of items visible (viewport + min buffer)
    }
    get maxBufferPx() {
        return 2 * this.scrollViewportHeight; // render at most 3x the number of items visible (viewport + max buffer)
    }
    ngOnInit() {
        this.setupDisplayData();
        this.createChildrenReferences();
        this.initializeDescendantSelection();
        this.updateParentsAndQuickSelect();
        this.updateClearAll();
        this.loading = false;
        this.filterTextSubscription = this.filterText.pipe(debounceTime(300)).subscribe({
            next: this.filter,
        });
    }
    ngOnDestroy() {
        if (this.filterTextSubscription) {
            this.filterTextSubscription.unsubscribe();
        }
    }
    changeTab(tab) {
        this.displayTab = tab;
        if (this.scrollableInstance) {
            this.scrollableInstance.scrollTo({ behavior: 'auto', top: 0 });
        }
    }
    getPixelHeight(element) {
        return Number(getComputedStyle(element, '').height.match(/(\d+(\.\d+)?)px$/)[1]);
    }
    setupDisplayData() {
        // shallow copy here so that reassigning displayTabs[i].data doesn't mutate tabs[i].data
        // but both data values point to the same items
        this.displayTabs = this.tabs.map((tab) => ({ ...tab }));
        this.displayTab = this.tabs[0];
    }
    // Replace each parent's child object with a reference to the child to avoid
    // a child lookup for selected status; linking references allows M x N
    // time complexity instead of M x N^2
    createChildrenReferences() {
        this.tabs.forEach((tab) => {
            // would rather filter but TypeScript still wants a type narrowing here
            if ('childTypeName' in tab) {
                const childTab = this.tabs.find(({ typeName }) => typeName === tab.childTypeName);
                const compareFunction = this.makeCompareFunction(childTab.valueField);
                const warnFunction = this.makeWarningFunction(tab.typeName, childTab.typeName, childTab.valueField);
                const sortedChildren = childTab.data.slice().sort(compareFunction);
                tab.data
                    .filter(({ children }) => children && children.length)
                    .forEach((parent) => this.replaceChildrenWithReferences(parent, sortedChildren, compareFunction, warnFunction));
            }
        });
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items
                .filter((parent) => 'all' in parent)
                .forEach((parent) => {
                parent.children = this.tabs.find(({ typeName }) => parent.childTypeName === typeName).data;
            });
            this.quickSelectConfig.items
                .filter((parent) => !('all' in parent))
                .forEach((parent) => {
                const childTab = this.tabs.find(({ typeName }) => typeName === parent.childTypeName);
                const compareFunction = this.makeCompareFunction(childTab.valueField);
                const warnFunction = this.makeWarningFunction(parent.label, childTab.typeName, childTab.valueField);
                const sortedChildren = childTab.data.slice().sort(compareFunction);
                this.replaceChildrenWithReferences(parent, sortedChildren, compareFunction, warnFunction);
            });
        }
    }
    makeCompareFunction(key) {
        return (a, b) => {
            const aValue = (a && a[key]) || a;
            const bValue = (b && b[key]) || b;
            if (aValue < bValue) {
                return -1;
            }
            else if (aValue > bValue) {
                return 1;
            }
            else if (aValue === bValue) {
                return 0;
            }
            else {
                return undefined;
            }
        };
    }
    replaceChildrenWithReferences(parent, sortedData, compareFunction, warnFunction) {
        parent.children = parent.children
            .map((child) => binarySearch(child, sortedData, compareFunction) || warnFunction(child))
            .filter(Boolean); // since map can return undefined, remove undefined elements
    }
    makeWarningFunction(parentLabel, childLabel, childValueField) {
        return (child) => {
            const childValue = child[childValueField] || child;
            console.warn(`No ${childLabel} found with value ${childValue} for parent ${parentLabel}`);
        };
    }
    onDropdownToggle(event) {
        if (event) {
            this.scrollViewportHeight = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement);
            this.virtualScrollItemSize = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement.querySelector('novo-list-item'));
        }
    }
    onItemToggled(item) {
        if (Array.isArray(item.children)) {
            this.updateDescendants(item.selected, item.children);
        }
        this.updateParentsAndQuickSelect();
        this.updateClearAll(item.selected);
        this.emitSelectedValues();
        this.ref.markForCheck();
    }
    initializeDescendantSelection() {
        this.tabs.forEach((tab) => {
            if ('childTypeName' in tab && tab.data && tab.data.length) {
                tab.data.forEach((parent) => {
                    if (parent.selected && parent.children && parent.children.length) {
                        parent.children.forEach((child) => {
                            child.selected = true;
                        });
                    }
                });
            }
        });
    }
    updateDescendants(parentIsSelected, children) {
        children.forEach((item) => {
            parentIsSelected ? (item.selected = true) : delete item.selected;
            if (Array.isArray(item.children)) {
                this.updateDescendants(item.selected, item.children);
            }
        });
    }
    updateClearAll(itemWasJustSelected) {
        this.showClearAll = itemWasJustSelected
            ? true
            : this.tabs.some((tab) => {
                if (tab.childTypeName) {
                    return tab.data.some(({ selected, indeterminate }) => selected || indeterminate);
                }
                else {
                    return tab.data.some(({ selected }) => selected);
                }
            });
    }
    updateParentsAndQuickSelect() {
        // mutate here to avoid dereferencing the objects in displayTabs
        this.tabs
            .filter((tab) => 'childTypeName' in tab && !!tab.childTypeName)
            .forEach((tab) => {
            const parents = tab.data.filter(({ children }) => children && children.length);
            parents.forEach((parent) => {
                ['indeterminate', 'selected'].forEach((selectedStateOption) => delete parent[selectedStateOption]);
                const selectedState = this.getSelectedState(parent.children);
                if (selectedState) {
                    parent[selectedState] = true;
                }
            });
        });
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach((quickSelect) => {
                delete quickSelect.selected;
                const selectedState = this.getSelectedState(quickSelect.children);
                if (selectedState) {
                    quickSelect[selectedState] = true;
                }
            });
        }
    }
    emitSelectedValues() {
        const selectedValues = this.tabs.map((tab) => ({
            ...tab,
            data: tab.data.filter(({ selected }) => selected),
        }));
        this.selectionChange.emit(selectedValues);
    }
    deselectEverything(event) {
        Helpers.swallowEvent(event);
        this.showClearAll = false;
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach((quickSelect) => {
                delete quickSelect.selected;
            });
        }
        this.tabs.forEach((tab) => {
            if (tab.childTypeName) {
                tab.data.forEach((item) => {
                    delete item.selected;
                    delete item.indeterminate;
                    item.children.forEach((child) => delete child.selected);
                });
            }
            else {
                tab.data.forEach((item) => delete item.selected);
            }
        });
        this.emitSelectedValues();
        this.ref.markForCheck();
    }
    onClearFilter(event) {
        Helpers.swallowEvent(event);
        this.filterText.next('');
    }
    onFilter(event) {
        this.filterText.next(event.target.value);
    }
}
NovoTabbedGroupPickerElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabbedGroupPickerElement, deps: [{ token: NovoLabelService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoTabbedGroupPickerElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTabbedGroupPickerElement, selector: "novo-tabbed-group-picker", inputs: { buttonConfig: "buttonConfig", tabs: "tabs", quickSelectConfig: "quickSelectConfig" }, outputs: { selectionChange: "selectionChange" }, providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoTabbedGroupPickerElement }], viewQueries: [{ propertyName: "scrollableInstance", first: true, predicate: ["tabbedGroupPickerVirtualScrollViewport"], descendants: true }], ngImport: i0, template: "<novo-dropdown (toggled)=\"onDropdownToggle($event)\" multiple>\n  <novo-button\n    class=\"tabbed-group-picker-button\"\n    [theme]=\"buttonConfig.theme\"\n    [side]=\"buttonConfig.side\"\n    [icon]=\"buttonConfig.icon\"\n    [loading]=\"loading\">\n    <div class=\"tabbed-group-picker-button-label\">{{ buttonConfig.label }}</div>\n  </novo-button>\n  <div class=\"tabbed-group-picker-search\" data-automation-id=\"tabbed-group-picker-search\">\n    <input type=\"text\" [placeholder]=\"labelService.search\" [value]=\"filterText | async\" (input)=\"onFilter($event)\" />\n    <i class=\"bhi-search\" *ngIf=\"!(filterText | async)\"></i>\n    <i class=\"bhi-times\" *ngIf=\"(filterText | async)\" (click)=\"onClearFilter($event)\"></i>\n  </div>\n  <div class=\"tabbed-group-picker-column-container\">\n    <div class=\"tabbed-group-picker-column left\">\n      <novo-nav theme=\"white\" direction=\"vertical\">\n        <novo-tab *ngFor=\"let tab of displayTabs\" [attr.data-automation-id]=\"tab.typeName\"\n          (activeChange)=\"changeTab(tab)\">\n          <span>{{ tab.typeLabel }} ({{ tab.data.length }})</span><i class=\"bhi-next\"></i>\n        </novo-tab>\n      </novo-nav>\n      <novo-button *ngIf=\"showClearAll\" class=\"clear-all-button\" theme=\"dialogue\" icon=\"times\" side=\"right\"\n        color=\"grapefruit\" (click)=\"deselectEverything($event)\">{{ labelService.clear }}</novo-button>\n    </div>\n    <div class=\"tabbed-group-picker-column right\">\n      <div class=\"quick-select\" *ngIf=\"quickSelectConfig && !(filterText | async)\">\n        <!-- <div class=\"quick-select-label\">{{ quickSelectConfig.label }}</div> -->\n        <novo-optgroup class=\"quick-select-list\" [label]=\"quickSelectConfig.label\">\n          <novo-option\n            class=\"quick-select-item\"\n            *ngFor=\"let quickSelect of quickSelectConfig.items\"\n            [attr.data-automation-id]=\"quickSelect.label\"\n            [selected]=\"quickSelect.selected\"\n            (click)=\"quickSelect.selected = !quickSelect.selected; onItemToggled(quickSelect)\"\n            novoInert>\n            {{quickSelect.label}}\n            <!-- <novo-checkbox\n              [label]=\"quickSelect.label\"\n              [name]=\"'selected'\"\n              [(ngModel)]=\"quickSelect.selected\"\n              (ngModelChange)=\"onItemToggled(quickSelect)\"></novo-checkbox> -->\n          </novo-option>\n        </novo-optgroup>\n      </div>\n      <novo-optgroup *ngIf=\"displayTab.data.length\">\n        <cdk-virtual-scroll-viewport\n          [itemSize]=\"virtualScrollItemSize\"\n          [maxBufferPx]=\"maxBufferPx\"\n          [minBufferPx]=\"minBufferPx\"\n          #tabbedGroupPickerVirtualScrollViewport>\n          <novo-option\n            *cdkVirtualFor=\"let item of displayTab.data\"\n            [attr.data-automation-id]=\"item[displayTab.labelField]\"\n            [selected]=\"item.selected\"\n            (click)=\"item.selected = !item.selected; onItemToggled(item)\"\n            novoInert>\n            {{item[displayTab.labelField]}}\n\n            <!-- <novo-checkbox\n              [label]=\"item[displayTab.labelField]\"\n              [name]=\"'selected'\"\n              [indeterminate]=\"item.indeterminate\"\n              [(ngModel)]=\"item.selected\"\n              (ngModelChange)=\"onItemToggled(item)\">\n            </novo-checkbox> -->\n          </novo-option>\n        </cdk-virtual-scroll-viewport>\n      </novo-optgroup>\n      <div class=\"tabbed-group-picker-empty-item\" *ngIf=\"!displayTab.data.length && (filterText | async)\">\n        <i class=\"{{ displayTab.icon || 'bhi-search' }}\"></i>\n        <div class=\"empty-item-main-message\">{{ labelService.tabbedGroupPickerEmpty }}</div>\n        <div class=\"empty-item-sub-message\">{{ labelService.tabbedGroupClearSuggestion(displayTab.typeLabel) }}\n        </div>\n      </div>\n    </div>\n  </div>\n</novo-dropdown>", components: [{ type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { type: NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: i7.CdkVirtualScrollViewport, selector: "cdk-virtual-scroll-viewport", inputs: ["orientation", "appendOnly"], outputs: ["scrolledIndexChange"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.CdkFixedSizeVirtualScroll, selector: "cdk-virtual-scroll-viewport[itemSize]", inputs: ["itemSize", "minBufferPx", "maxBufferPx"] }, { type: i7.CdkVirtualForOf, selector: "[cdkVirtualFor][cdkVirtualForOf]", inputs: ["cdkVirtualForOf", "cdkVirtualForTrackBy", "cdkVirtualForTemplate", "cdkVirtualForTemplateCacheSize"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabbedGroupPickerElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-tabbed-group-picker', changeDetection: ChangeDetectionStrategy.OnPush, providers: [{ provide: NOVO_OPTION_PARENT_COMPONENT, useExisting: NovoTabbedGroupPickerElement }], template: "<novo-dropdown (toggled)=\"onDropdownToggle($event)\" multiple>\n  <novo-button\n    class=\"tabbed-group-picker-button\"\n    [theme]=\"buttonConfig.theme\"\n    [side]=\"buttonConfig.side\"\n    [icon]=\"buttonConfig.icon\"\n    [loading]=\"loading\">\n    <div class=\"tabbed-group-picker-button-label\">{{ buttonConfig.label }}</div>\n  </novo-button>\n  <div class=\"tabbed-group-picker-search\" data-automation-id=\"tabbed-group-picker-search\">\n    <input type=\"text\" [placeholder]=\"labelService.search\" [value]=\"filterText | async\" (input)=\"onFilter($event)\" />\n    <i class=\"bhi-search\" *ngIf=\"!(filterText | async)\"></i>\n    <i class=\"bhi-times\" *ngIf=\"(filterText | async)\" (click)=\"onClearFilter($event)\"></i>\n  </div>\n  <div class=\"tabbed-group-picker-column-container\">\n    <div class=\"tabbed-group-picker-column left\">\n      <novo-nav theme=\"white\" direction=\"vertical\">\n        <novo-tab *ngFor=\"let tab of displayTabs\" [attr.data-automation-id]=\"tab.typeName\"\n          (activeChange)=\"changeTab(tab)\">\n          <span>{{ tab.typeLabel }} ({{ tab.data.length }})</span><i class=\"bhi-next\"></i>\n        </novo-tab>\n      </novo-nav>\n      <novo-button *ngIf=\"showClearAll\" class=\"clear-all-button\" theme=\"dialogue\" icon=\"times\" side=\"right\"\n        color=\"grapefruit\" (click)=\"deselectEverything($event)\">{{ labelService.clear }}</novo-button>\n    </div>\n    <div class=\"tabbed-group-picker-column right\">\n      <div class=\"quick-select\" *ngIf=\"quickSelectConfig && !(filterText | async)\">\n        <!-- <div class=\"quick-select-label\">{{ quickSelectConfig.label }}</div> -->\n        <novo-optgroup class=\"quick-select-list\" [label]=\"quickSelectConfig.label\">\n          <novo-option\n            class=\"quick-select-item\"\n            *ngFor=\"let quickSelect of quickSelectConfig.items\"\n            [attr.data-automation-id]=\"quickSelect.label\"\n            [selected]=\"quickSelect.selected\"\n            (click)=\"quickSelect.selected = !quickSelect.selected; onItemToggled(quickSelect)\"\n            novoInert>\n            {{quickSelect.label}}\n            <!-- <novo-checkbox\n              [label]=\"quickSelect.label\"\n              [name]=\"'selected'\"\n              [(ngModel)]=\"quickSelect.selected\"\n              (ngModelChange)=\"onItemToggled(quickSelect)\"></novo-checkbox> -->\n          </novo-option>\n        </novo-optgroup>\n      </div>\n      <novo-optgroup *ngIf=\"displayTab.data.length\">\n        <cdk-virtual-scroll-viewport\n          [itemSize]=\"virtualScrollItemSize\"\n          [maxBufferPx]=\"maxBufferPx\"\n          [minBufferPx]=\"minBufferPx\"\n          #tabbedGroupPickerVirtualScrollViewport>\n          <novo-option\n            *cdkVirtualFor=\"let item of displayTab.data\"\n            [attr.data-automation-id]=\"item[displayTab.labelField]\"\n            [selected]=\"item.selected\"\n            (click)=\"item.selected = !item.selected; onItemToggled(item)\"\n            novoInert>\n            {{item[displayTab.labelField]}}\n\n            <!-- <novo-checkbox\n              [label]=\"item[displayTab.labelField]\"\n              [name]=\"'selected'\"\n              [indeterminate]=\"item.indeterminate\"\n              [(ngModel)]=\"item.selected\"\n              (ngModelChange)=\"onItemToggled(item)\">\n            </novo-checkbox> -->\n          </novo-option>\n        </cdk-virtual-scroll-viewport>\n      </novo-optgroup>\n      <div class=\"tabbed-group-picker-empty-item\" *ngIf=\"!displayTab.data.length && (filterText | async)\">\n        <i class=\"{{ displayTab.icon || 'bhi-search' }}\"></i>\n        <div class=\"empty-item-main-message\">{{ labelService.tabbedGroupPickerEmpty }}</div>\n        <div class=\"empty-item-sub-message\">{{ labelService.tabbedGroupClearSuggestion(displayTab.typeLabel) }}\n        </div>\n      </div>\n    </div>\n  </div>\n</novo-dropdown>" }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { scrollableInstance: [{
                type: ViewChild,
                args: ['tabbedGroupPickerVirtualScrollViewport']
            }], buttonConfig: [{
                type: Input
            }], tabs: [{
                type: Input
            }], quickSelectConfig: [{
                type: Input
            }], selectionChange: [{
                type: Output
            }] } });

// NG2
class NovoTabbedGroupPickerModule {
}
NovoTabbedGroupPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabbedGroupPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTabbedGroupPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabbedGroupPickerModule, declarations: [NovoTabbedGroupPickerElement], imports: [CommonModule,
        FormsModule,
        ScrollingModule,
        NovoTabModule,
        NovoListModule,
        NovoFormExtrasModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoOptionModule,
        NovoCheckboxModule], exports: [NovoTabbedGroupPickerElement] });
NovoTabbedGroupPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabbedGroupPickerModule, providers: [NovoLabelService], imports: [[
            CommonModule,
            FormsModule,
            ScrollingModule,
            NovoTabModule,
            NovoListModule,
            NovoFormExtrasModule,
            NovoButtonModule,
            NovoDropdownModule,
            NovoOptionModule,
            NovoCheckboxModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTabbedGroupPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        ScrollingModule,
                        NovoTabModule,
                        NovoListModule,
                        NovoFormExtrasModule,
                        NovoButtonModule,
                        NovoDropdownModule,
                        NovoOptionModule,
                        NovoCheckboxModule,
                    ],
                    providers: [NovoLabelService],
                    declarations: [NovoTabbedGroupPickerElement],
                    exports: [NovoTabbedGroupPickerElement],
                }]
        }] });

class BaseRenderer {
    constructor() {
        this._data = {};
        this._value = '';
        this.meta = {};
    }
    get data() {
        return this._data;
    }
    set data(d) {
        this._data = d;
    }
    get value() {
        return this._value;
    }
    set value(v) {
        this._value = v;
    }
}

// NG2
class DateCell extends BaseRenderer {
    constructor(labels) {
        super();
        this.labels = labels;
    }
    set value(v) {
        this._value = v;
    }
    get value() {
        return this._value;
    }
    getFormattedDate() {
        return this.labels.formatDate(this.value);
    }
}
DateCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateCell, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
DateCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: DateCell, selector: "date-cell", inputs: { value: "value" }, usesInheritance: true, ngImport: i0, template: `
    <div class="date-cell">
      <label>{{ getFormattedDate() }}</label>
    </div>
  `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DateCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'date-cell',
                    template: `
    <div class="date-cell">
      <label>{{ getFormattedDate() }}</label>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { value: [{
                type: Input
            }] } });

// NG2
class NovoDropdownCell extends BaseRenderer {
    set value(v) {
        this._value = v;
    }
    get value() {
        return this._value;
    }
    ngOnInit() {
        // Check for and fix bad config
        if (!this.meta.dropdownCellConfig) {
            throw new Error('Missing "dropdownCellConfig" on the column setup');
        }
    }
    onClick(config, option, value) {
        const callback = option.callback || config.callback;
        callback(this.data, value || option);
    }
}
NovoDropdownCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownCell, deps: null, target: i0.ɵɵFactoryTarget.Component });
NovoDropdownCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoDropdownCell, selector: "novo-dropdown-cell", inputs: { meta: "meta", value: "value" }, usesInheritance: true, ngImport: i0, template: `
    <novo-dropdown parentScrollSelector=".table-container" containerClass="novo-table-dropdown-cell">
      <novo-button type="button" theme="secondary" icon="collapse" inverse>
        <span data-automation-id="novo-dropdown-cell-value">{{ value }}</span>
      </novo-button>
      <list>
        <ng-container *ngFor="let config of meta.dropdownCellConfig; let i = index">
          <dropdown-item-header *ngIf="config.category">{{ config.category }}</dropdown-item-header>
          <item
            *ngFor="let option of config.options"
            (action)="onClick(config, option, option.value)"
            [class.active]="(option || option.value) === value"
          >
            <span [attr.data-automation-id]="option.label || option">{{ option.label || option }}</span>
            <i *ngIf="(option || option.value) === value" class="bhi-check"></i>
          </item>
          <hr *ngIf="i < meta.dropdownCellConfig.length - 1" />
        </ng-container>
      </list>
    </novo-dropdown>
  `, isInline: true, components: [{ type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoDropdownListElement, selector: "list" }, { type: NovoDropDownItemHeaderElement, selector: "dropdown-item-header" }, { type: NovoItemElement, selector: "item", inputs: ["disabled", "keepOpen"], outputs: ["action"] }], directives: [{ type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoDropdownCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-dropdown-cell',
                    template: `
    <novo-dropdown parentScrollSelector=".table-container" containerClass="novo-table-dropdown-cell">
      <novo-button type="button" theme="secondary" icon="collapse" inverse>
        <span data-automation-id="novo-dropdown-cell-value">{{ value }}</span>
      </novo-button>
      <list>
        <ng-container *ngFor="let config of meta.dropdownCellConfig; let i = index">
          <dropdown-item-header *ngIf="config.category">{{ config.category }}</dropdown-item-header>
          <item
            *ngFor="let option of config.options"
            (action)="onClick(config, option, option.value)"
            [class.active]="(option || option.value) === value"
          >
            <span [attr.data-automation-id]="option.label || option">{{ option.label || option }}</span>
            <i *ngIf="(option || option.value) === value" class="bhi-check"></i>
          </item>
          <hr *ngIf="i < meta.dropdownCellConfig.length - 1" />
        </ng-container>
      </list>
    </novo-dropdown>
  `,
                }]
        }], propDecorators: { meta: [{
                type: Input
            }], value: [{
                type: Input
            }] } });

// NG2
class NovoTableKeepFilterFocus {
    constructor(element) {
        this.element = element;
    }
    ngAfterViewInit() {
        this.element.nativeElement.focus();
    }
}
NovoTableKeepFilterFocus.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableKeepFilterFocus, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoTableKeepFilterFocus.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoTableKeepFilterFocus, selector: "[keepFilterFocused]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableKeepFilterFocus, decorators: [{
            type: Directive,
            args: [{
                    selector: '[keepFilterFocused]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });

// NG2
class Pagination {
    constructor(labels) {
        this.labels = labels;
        this.itemsPerPage = 10;
        this.pageChange = new EventEmitter();
        this.itemsPerPageChange = new EventEmitter();
        this.onPageChange = new EventEmitter();
        this.maxPagesDisplayed = 5;
    }
    get disablePageSelection() {
        return this.pageSelectDisabled;
    }
    set disablePageSelection(val) {
        this.pageSelectDisabled = coerceBooleanProperty(val);
    }
    ngOnInit() {
        this.label = this.label || this.labels.itemsPerPage;
        this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
    }
    ngOnChanges(changes) {
        this.page = this.page || 1;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    }
    getDefaultRowOptions() {
        return [
            { value: 10, label: '10' },
            { value: 25, label: '25' },
            { value: 50, label: '50' },
            { value: 100, label: '100' },
        ];
    }
    onPageSizeChanged(event) {
        this.page = 1;
        this.itemsPerPage = event.selected;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.itemsPerPageChange.emit(this.itemsPerPage);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    }
    selectPage(page, event) {
        if (event) {
            event.preventDefault();
        }
        this.page = page;
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    }
    noPrevious() {
        return this.page === 1;
    }
    noNext() {
        return this.page === this.totalPages;
    }
    // Create page object used in template
    makePage(num, text, isActive) {
        return { num, text, active: isActive };
    }
    getPages(currentPage, totalPages) {
        const pages = [];
        // Default page limits
        let startPage = 1;
        let endPage = totalPages;
        const isMaxSized = this.maxPagesDisplayed < totalPages;
        // recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
            endPage = startPage + this.maxPagesDisplayed - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - this.maxPagesDisplayed + 1;
            }
        }
        // Add page number links
        for (let num = startPage; num <= endPage; num++) {
            const page = this.makePage(num, num.toString(), num === currentPage);
            pages.push(page);
        }
        return pages;
    }
    calculateTotalPages() {
        const totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    }
}
Pagination.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Pagination, deps: [{ token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Component });
Pagination.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: Pagination, selector: "novo-pagination", inputs: { page: "page", totalItems: "totalItems", itemsPerPage: "itemsPerPage", rowOptions: "rowOptions", label: "label", disablePageSelection: "disablePageSelection" }, outputs: { pageChange: "pageChange", itemsPerPageChange: "itemsPerPageChange", onPageChange: "onPageChange" }, usesOnChanges: true, ngImport: i0, template: `
    <ng-container *ngIf="rowOptions.length > 1">
      <h5 class="rows">{{ label }}</h5>
      <novo-select
        [options]="rowOptions"
        [placeholder]="labels.select"
        [(ngModel)]="itemsPerPage"
        (onSelect)="onPageSizeChanged($event)"
        data-automation-id="pager-select"
      ></novo-select>
      <span class="spacer"></span>
    </ng-container>
    <ul class="pager" data-automation-id="pager">
      <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ disabled: noPrevious() }">
        <i class="bhi-previous" data-automation-id="pager-previous"></i>
      </li>
      <li
        class="page"
        [ngClass]="{ active: p.active }"
        [class.disabled]="disablePageSelection"
        *ngFor="let p of pages"
        (click)="selectPage(p.num, $event)"
      >
        {{ p.text }}
      </li>
      <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ disabled: noNext() }">
        <i class="bhi-next" data-automation-id="pager-next"></i>
      </li>
    </ul>
  `, isInline: true, components: [{ type: NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Pagination, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-pagination',
                    template: `
    <ng-container *ngIf="rowOptions.length > 1">
      <h5 class="rows">{{ label }}</h5>
      <novo-select
        [options]="rowOptions"
        [placeholder]="labels.select"
        [(ngModel)]="itemsPerPage"
        (onSelect)="onPageSizeChanged($event)"
        data-automation-id="pager-select"
      ></novo-select>
      <span class="spacer"></span>
    </ng-container>
    <ul class="pager" data-automation-id="pager">
      <li class="page" (click)="selectPage(page - 1)" [ngClass]="{ disabled: noPrevious() }">
        <i class="bhi-previous" data-automation-id="pager-previous"></i>
      </li>
      <li
        class="page"
        [ngClass]="{ active: p.active }"
        [class.disabled]="disablePageSelection"
        *ngFor="let p of pages"
        (click)="selectPage(p.num, $event)"
      >
        {{ p.text }}
      </li>
      <li class="page" (click)="selectPage(page + 1)" [ngClass]="{ disabled: noNext() }">
        <i class="bhi-next" data-automation-id="pager-next"></i>
      </li>
    </ul>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }]; }, propDecorators: { page: [{
                type: Input
            }], totalItems: [{
                type: Input
            }], itemsPerPage: [{
                type: Input
            }], rowOptions: [{
                type: Input
            }], label: [{
                type: Input
            }], disablePageSelection: [{
                type: Input
            }], pageChange: [{
                type: Output
            }], itemsPerPageChange: [{
                type: Output
            }], onPageChange: [{
                type: Output
            }] } });

// NG2
class PercentageCell extends BaseRenderer {
}
PercentageCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PercentageCell, deps: null, target: i0.ɵɵFactoryTarget.Component });
PercentageCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: PercentageCell, selector: "percentage-cell", usesInheritance: true, ngImport: i0, template: ` <div class="percentage" *ngIf="value || value === 0">{{ value | percent: '1.0-2' }}</div> `, isInline: true, directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "percent": i1.PercentPipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: PercentageCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'percentage-cell',
                    template: ` <div class="percentage" *ngIf="value || value === 0">{{ value | percent: '1.0-2' }}</div> `,
                }]
        }] });

// NG2
class RowDetails {
    constructor(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
    }
    ngOnInit() {
        if (this.renderer) {
            if (this.renderer.prototype instanceof BaseRenderer) {
                const componentRef = this.componentUtils.append(this.renderer, this.container);
                componentRef.instance.data = this.data;
            }
            else {
                this.value = this.renderer(this.data);
            }
        }
        else {
            // this.value = this.row[this.column.name];
        }
    }
}
RowDetails.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RowDetails, deps: [{ token: i0.ElementRef }, { token: ComponentUtils }], target: i0.ɵɵFactoryTarget.Component });
RowDetails.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: RowDetails, selector: "novo-row-details", inputs: { data: "data", renderer: "renderer" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: ` <span #container></span> <span>{{ value }}</span> `, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RowDetails, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-row-details',
                    template: ` <span #container></span> <span>{{ value }}</span> `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ComponentUtils }]; }, propDecorators: { container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef, static: true }]
            }], data: [{
                type: Input
            }], renderer: [{
                type: Input
            }] } });

// NG2
class NovoTableActionsElement {
}
NovoTableActionsElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableActionsElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoTableActionsElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTableActionsElement, selector: "novo-table-actions", ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableActionsElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-table-actions',
                    template: '<ng-content></ng-content>',
                }]
        }] });

// NG2
class TableCell {
    constructor(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
        this.element = element;
        this.componentUtils = componentUtils;
    }
    ngOnInit() {
        this.column._type = this.column.type || 'text';
        if (this.column.renderer) {
            if (this.column.renderer.prototype instanceof BaseRenderer) {
                this.column._type = 'custom';
                const componentRef = this.componentUtils.append(this.column.renderer, this.container);
                componentRef.instance.meta = this.column;
                componentRef.instance.data = this.row;
                componentRef.instance.value = this.form && this.hasEditor ? this.form.getRawValue()[this.column.name] : this.row[this.column.name];
                // TODO - save ref to this and update in the valueChanges below!!
            }
            else {
                // TODO - wtf to do here?
                this.value = this.column.renderer(this.row);
            }
        }
        else {
            this.value = this.form && this.hasEditor ? this.form.getRawValue()[this.column.name] : this.row[this.column.name];
        }
        if (this.form && this.hasEditor) {
            this.valueChangeSubscription = this.form.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe((value) => {
                this.value = value[this.column.name];
            });
        }
    }
    ngOnDestroy() {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    }
    onClick(event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
    }
}
TableCell.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TableCell, deps: [{ token: i0.ElementRef }, { token: ComponentUtils }], target: i0.ɵɵFactoryTarget.Component });
TableCell.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: TableCell, selector: "novo-table-cell", inputs: { column: "column", row: "row", form: "form", hasEditor: "hasEditor" }, viewQueries: [{ propertyName: "container", first: true, predicate: ["container"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `
    <div [ngSwitch]="column._type">
      <span #container></span>
      <date-cell *ngSwitchCase="'date'" [value]="value"></date-cell>
      <a *ngSwitchCase="'link'" (click)="onClick($event)">{{ value }}</a> <span *ngSwitchDefault>{{ value }}</span>
    </div>
  `, isInline: true, components: [{ type: DateCell, selector: "date-cell", inputs: ["value"] }], directives: [{ type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TableCell, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-table-cell',
                    template: `
    <div [ngSwitch]="column._type">
      <span #container></span>
      <date-cell *ngSwitchCase="'date'" [value]="value"></date-cell>
      <a *ngSwitchCase="'link'" (click)="onClick($event)">{{ value }}</a> <span *ngSwitchDefault>{{ value }}</span>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: ComponentUtils }]; }, propDecorators: { container: [{
                type: ViewChild,
                args: ['container', { read: ViewContainerRef, static: true }]
            }], column: [{
                type: Input
            }], row: [{
                type: Input
            }], form: [{
                type: Input
            }], hasEditor: [{
                type: Input
            }] } });

// NG2
class TableFilter {
    constructor(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onFilterChange = new EventEmitter();
        this.element = element;
        this.renderer = renderer;
    }
    ngOnInit() {
        this.ngOnChanges();
    }
    ngOnChanges(changes) {
        let label = '';
        if (this.config.freetextFilter) {
            label = this.config.freetextFilter;
        }
        else if (this.config.filter) {
            label = this.config.filter;
        }
        this.renderer.setProperty(this.element, 'value', label);
    }
    onChangeFilter(event) {
        clearTimeout(this.filterThrottle);
        if ("Enter" /* Enter */ === event.key) {
            this.config.filter = event.target.value;
            this.onFilterChange.emit({ filtering: this.config });
        }
        else {
            this.filterThrottle = setTimeout(() => {
                this.config.filter = event.target.value;
                this.onFilterChange.emit({ filtering: this.config });
            }, 300);
        }
    }
    onClick(event) {
        Helpers.swallowEvent(event);
    }
}
TableFilter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TableFilter, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
TableFilter.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: TableFilter, selector: "[novoTableFilter]", inputs: { config: ["novoTableFilter", "config"] }, outputs: { onFilterChange: "onFilterChange" }, host: { listeners: { "keydown": "onChangeFilter($event)", "click": "onClick($event)" } }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: TableFilter, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoTableFilter]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { config: [{
                type: Input,
                args: ['novoTableFilter']
            }], onFilterChange: [{
                type: Output
            }], onChangeFilter: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event']]
            }] } });

// NG2
class NovoTableFooterElement {
}
NovoTableFooterElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableFooterElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoTableFooterElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTableFooterElement, selector: "novo-table-footer", ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableFooterElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-table-footer',
                    template: '<ng-content></ng-content>',
                }]
        }] });

// NG2
class NovoTableHeaderElement {
}
NovoTableHeaderElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableHeaderElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoTableHeaderElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTableHeaderElement, selector: "novo-table-header", ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableHeaderElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-table-header',
                    template: '<ng-content></ng-content>',
                }]
        }] });

// NG2
class ThOrderable {
    constructor(element) {
        this.element = element;
        this.onOrderChange = new EventEmitter();
        this.element = element;
    }
    get index() {
        let index = null;
        if (this.element.nativeElement && this.element.nativeElement.parentNode) {
            const children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
            index = children.indexOf(this.element.nativeElement);
        }
        return index;
    }
    ngOnInit() {
        if (this.column.ordering) {
            this.element.nativeElement.setAttribute('draggable', true);
            this.table = this.findTable(this.element.nativeElement);
        }
    }
    onDragStart(event) {
        if (this.column.ordering) {
            this.element.nativeElement.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
            this.clone = this.table.cloneNode(true);
            this.clone.style.position = 'absolute';
            this.clone.style.left = '100%';
            this.clone.style.width = '150px';
            this.deleteColumns(this.clone);
            document.body.appendChild(this.clone);
            event.dataTransfer.setDragImage(this.clone, 75, 30);
        }
    }
    deleteColumns(table) {
        // TODO: `table` should be immutable and this method should return the modified data to its caller
        if (table.rows.length > 0) {
            const allRows = table.rows;
            for (let i = 0; i < allRows.length; i++) {
                if (i > 10) {
                    table.deleteRow(-1);
                }
                else {
                    const cellLength = allRows[i].cells.length;
                    for (let c = 0; c < cellLength; c++) {
                        if (c < this.index) {
                            allRows[i].deleteCell(0);
                        }
                        else if (c > this.index) {
                            allRows[i].deleteCell(-1);
                        }
                    }
                }
            }
        }
    }
    findTable(start) {
        let htmlElementNode = start;
        while (htmlElementNode) {
            htmlElementNode = htmlElementNode.parentNode;
            if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                return htmlElementNode;
            }
        }
        return undefined;
    }
    onDrag(event) {
        Helpers.swallowEvent(event);
        return false;
    }
    onDragEnd(event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        this.element.nativeElement.classList.remove('dragging');
        document.body.removeChild(this.clone);
        return false;
    }
    onDrop(event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        const data = JSON.parse(event.dataTransfer.getData('text/plain'));
        this.onOrderChange.emit({
            first: data,
            second: this.column,
        });
        return false;
    }
    onDragOver(event) {
        Helpers.swallowEvent(event);
        event.dataTransfer.dropEffect = 'move';
        return false;
    }
    onDragEnter(event) {
        this.element.nativeElement.classList.add('over');
        this.target = event.target;
    }
    onDragLeave(event) {
        this.element.nativeElement.classList.remove('over');
    }
}
ThOrderable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ThOrderable, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ThOrderable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: ThOrderable, selector: "[novoThOrderable]", inputs: { column: ["novoThOrderable", "column"] }, outputs: { onOrderChange: "onOrderChange" }, host: { listeners: { "dragstart": "onDragStart($event)", "dragover": "onDragOver($event)", "dragenter": "onDragEnter($event)", "dragleave": "onDragLeave($event)", "dragend": "onDragEnd($event)", "drop": "onDrop($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ThOrderable, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoThOrderable]',
                    host: {
                        '(dragstart)': 'onDragStart($event)',
                        '(dragover)': 'onDragOver($event)',
                        '(dragenter)': 'onDragEnter($event)',
                        '(dragleave)': 'onDragLeave($event)',
                        '(dragend)': 'onDragEnd($event)',
                        '(drop)': 'onDrop($event)',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { column: [{
                type: Input,
                args: ['novoThOrderable']
            }], onOrderChange: [{
                type: Output
            }] } });

// NG2
class ThSortable {
    constructor() {
        this.onSortChange = new EventEmitter();
    }
    onToggleSort(event) {
        if (event) {
            // event.preventDefault();
        }
        if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
            switch (this.column.sort) {
                case 'asc':
                    this.column.sort = 'desc';
                    break;
                default:
                    this.column.sort = 'asc';
                    break;
            }
            this.onSortChange.emit(this.column);
        }
    }
}
ThSortable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ThSortable, deps: [], target: i0.ɵɵFactoryTarget.Directive });
ThSortable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: ThSortable, selector: "[novoThSortable]", inputs: { config: ["novoThSortable", "config"], column: "column" }, outputs: { onSortChange: "onSortChange" }, host: { listeners: { "click": "onToggleSort($event)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ThSortable, decorators: [{
            type: Directive,
            args: [{
                    selector: '[novoThSortable]',
                    host: {
                        '(click)': 'onToggleSort($event)',
                    },
                }]
        }], propDecorators: { config: [{
                type: Input,
                args: ['novoThSortable']
            }], column: [{
                type: Input
            }], onSortChange: [{
                type: Output
            }] } });

// NG2
class NovoTableExtrasModule {
}
NovoTableExtrasModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableExtrasModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTableExtrasModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableExtrasModule, declarations: [NovoTableHeaderElement,
        NovoTableFooterElement,
        NovoTableActionsElement,
        NovoTableKeepFilterFocus,
        Pagination,
        RowDetails,
        TableCell,
        TableFilter,
        ThOrderable,
        ThSortable,
        DateCell,
        PercentageCell,
        NovoDropdownCell], imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule, NovoCommonModule], exports: [NovoTableHeaderElement,
        NovoTableFooterElement,
        NovoTableActionsElement,
        NovoTableKeepFilterFocus,
        Pagination,
        RowDetails,
        TableCell,
        TableFilter,
        ThOrderable,
        ThSortable,
        DateCell,
        PercentageCell,
        NovoDropdownCell] });
NovoTableExtrasModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableExtrasModule, imports: [[CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule, NovoCommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableExtrasModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule, NovoCommonModule],
                    declarations: [
                        NovoTableHeaderElement,
                        NovoTableFooterElement,
                        NovoTableActionsElement,
                        NovoTableKeepFilterFocus,
                        Pagination,
                        RowDetails,
                        TableCell,
                        TableFilter,
                        ThOrderable,
                        ThSortable,
                        DateCell,
                        PercentageCell,
                        NovoDropdownCell,
                    ],
                    exports: [
                        NovoTableHeaderElement,
                        NovoTableFooterElement,
                        NovoTableActionsElement,
                        NovoTableKeepFilterFocus,
                        Pagination,
                        RowDetails,
                        TableCell,
                        TableFilter,
                        ThOrderable,
                        ThSortable,
                        DateCell,
                        PercentageCell,
                        NovoDropdownCell,
                    ],
                }]
        }] });

// NG2
// TODO - support (1) clicking cell to edit, (2) clicking row to edit, (3) button to trigger full table to edit
var NovoTableMode;
(function (NovoTableMode) {
    NovoTableMode[NovoTableMode["VIEW"] = 1] = "VIEW";
    NovoTableMode[NovoTableMode["EDIT"] = 2] = "EDIT";
})(NovoTableMode || (NovoTableMode = {}));
class NovoTableElement {
    constructor(labels, formUtils, builder, cdr) {
        this.labels = labels;
        this.formUtils = formUtils;
        this.builder = builder;
        this.cdr = cdr;
        this.config = {};
        this.columns = [];
        this.skipSortAndFilterClear = false;
        this.mode = NovoTableMode.VIEW;
        this.editable = false;
        this.rowIdentifier = 'id';
        this.name = 'table';
        this.onRowClick = new EventEmitter();
        this.onRowSelect = new EventEmitter();
        this.onTableChange = new EventEmitter();
        this._rows = [];
        this.selected = [];
        this.activeId = 0;
        this.master = false;
        this.expandAll = false;
        this.indeterminate = false;
        this.lastPage = 0;
        this.selectedPageCount = 0;
        this.showSelectAllMessage = false;
        this.pagedData = [];
        // Map to keep track of what dropdowns are toggled
        // Used to properly *ngIf the <novo-optgroup> so that the keepFilterFocused Directive
        // will properly fire the ngAfterViewInit event
        this.toggledDropdownMap = {};
        this.NovoTableMode = NovoTableMode;
        this.tableForm = new FormGroup({});
        this.footers = [];
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        this.loading = false;
        notify('[Deprecated]: The table is deprecated. Please migrate to novo-data-tables!');
    }
    set rows(rows) {
        this.dataProvider = rows;
        if (rows && rows.length > 0) {
            this.setupColumnDefaults();
        }
        // this is a temporary/hacky fix until async dataloading is handled within the table
        if (!this.skipSortAndFilterClear) {
            this.clearAllSortAndFilters();
        }
    }
    get rows() {
        return this._rows;
    }
    set dataProvider(dp) {
        this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
        this._dataProvider.dataChange.pipe(debounceTime(100)).subscribe((event) => {
            switch (event.type) {
                case CollectionEvent.CHANGE:
                    this._rows = event.data;
                    // Setup form
                    this.tableForm = this.builder.group({
                        rows: this.builder.array([]),
                    });
                    // Remove all selection on sort change if selection is on
                    if (this.config.rowSelectionStyle === 'checkbox') {
                        this.pagedData = event.data;
                        this.pageSelected = this.pagedData.filter((r) => r._selected);
                        this.rowSelectHandler();
                    }
                    // Find that columns we might need to sum up via the footer
                    let columnsToSum = [];
                    const columnSums = {};
                    if (this.config.footers) {
                        this.config.footers.forEach((config) => {
                            columnsToSum.push(...config.columns);
                        });
                        // Only have unique columns, filter out duplicates
                        columnsToSum = columnsToSum.filter((item, index, array) => array.indexOf(item) === index);
                    }
                    // Make a form for each row
                    const tableFormRows = this.tableForm.controls.rows;
                    this._rows.forEach((row, index) => {
                        const rowControls = [];
                        row.controls = {};
                        row._editing = {};
                        row._expanded = this.config.expandAll;
                        row.rowId = this._rows.length;
                        this.columns.forEach((column) => {
                            // Use the control passed or use a ReadOnlyControl so that the form has the values
                            const control = column.editorConfig
                                ? ControlFactory.create(column.editorType, column.editorConfig)
                                : new ReadOnlyControl({ key: column.name });
                            row.controls[column.name] = control;
                            rowControls.push(control);
                        });
                        this.formUtils.setInitialValues(rowControls, row, false);
                        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
                        // Setup the total footer if configured
                        // Array of keys to total
                        if (columnsToSum.length !== 0) {
                            columnsToSum.forEach((column) => {
                                if (Helpers.isBlank(columnSums[column])) {
                                    columnSums[column] = 0;
                                }
                                columnSums[column] += row[column];
                            });
                        }
                    });
                    if (this.mode === NovoTableMode.EDIT) {
                        this.setTableEdit();
                    }
                    // Setup the footers (if any)
                    if (this.config.footers) {
                        this.footers = [];
                        this.config.footers.forEach((footerConfig, footerConfigIndex) => {
                            const footer = {};
                            footer[footerConfig.labelColumn] = footerConfig.label;
                            footerConfig.columns.forEach((column) => {
                                if (footerConfig.method === 'AVG' && this._rows.length !== 0) {
                                    footer[column] = columnSums[column] / this._rows.length;
                                }
                                else {
                                    footer[column] = columnSums[column];
                                }
                            });
                            this.footers.push(footer);
                        });
                    }
                    break;
                default:
                    break;
            }
        });
        if (this.config.paging) {
            this._dataProvider.page = this.config.paging.current;
            this._dataProvider.pageSize = this.config.paging.itemsPerPage;
        }
        else {
            // Paging turned off, return basically all of the data
            this._dataProvider.page = 1;
            this._dataProvider.pageSize = 500;
        }
        if (dp && dp.length > 0) {
            this.setupColumnDefaults();
        }
        this._dataProvider.refresh();
    }
    get dataProvider() {
        return this._dataProvider;
    }
    get editing() {
        return this.mode === NovoTableMode.EDIT;
    }
    get formValue() {
        return this.tableForm.getRawValue();
    }
    onDropdownToggled(event, column) {
        this.toggledDropdownMap[column] = event;
        this.cdr.markForCheck();
    }
    focusInput() {
        if (this.filterInputs && this.filterInputs.length) {
            this.filterInputs.forEach((filterInput) => {
                if (filterInput.nativeElement) {
                    setTimeout(() => filterInput.nativeElement.focus(), 0);
                }
            });
        }
    }
    onPageChange(event) {
        // this.dataProvider.page = event.page;
        // this.dataProvider.pageSize = event.itemsPerPage;
    }
    getOptionDataAutomationId(option) {
        if (!Helpers.isBlank(option.value)) {
            return option.value;
        }
        return option;
    }
    setupColumnDefaults() {
        // Check columns for cell option types
        this.columns.forEach((column) => {
            if (column && column.type) {
                switch (column.type) {
                    case 'date':
                        // Set options based on dates if there are none
                        column.options = column.options || this.getDefaultOptions(column);
                        break;
                    default:
                        break;
                }
            }
        });
    }
    ngDoCheck() {
        if (this.config.paging && this.config.paging.current !== this.lastPage) {
            this.rowSelectHandler();
            this.showSelectAllMessage = false;
        }
        this.lastPage = this.config.paging ? this.config.paging.current : 1;
    }
    getPageStart() {
        return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
    }
    getPageEnd() {
        return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
    }
    getRowControlForm(i) {
        const tableFormRows = this.tableForm.controls.rows;
        return tableFormRows.controls[i];
    }
    onFilterClick(column, filter) {
        if (filter.range && !column.calendarShow) {
            column.calenderShow = true;
            return;
        }
        if (Array.isArray(column.filter) && column.multiple) {
            if (~column.filter.indexOf(filter)) {
                // Remove filter
                column.filter.splice(column.filter.indexOf(filter), 1);
                if (filter.range) {
                    column.calenderShow = false;
                }
                if (column.filter.length === 0) {
                    column.filter = null;
                }
            }
            else {
                // Add filter
                column.filter.push(filter);
            }
        }
        else if (column.multiple) {
            column.filter = new Array();
            column.filter.push(Helpers.isBlank(filter.value) ? filter : filter.value);
        }
        else {
            column.filter = Helpers.isBlank(filter.value) ? filter : filter.value;
        }
        this.onFilterChange();
    }
    onFilterClear(column) {
        setTimeout(() => {
            column.filter = null;
            column.freetextFilter = null;
            this.onFilterChange();
            if (column.originalOptions) {
                column.options = column.originalOptions;
            }
        });
    }
    clearAllSortAndFilters() {
        if (this.config.filtering) {
            this.columns.forEach((column) => {
                column.filter = null;
                column.sort = null;
            });
        }
    }
    /**
     * @description This method updates the row data to reflect the active filters.
     */
    onFilterChange(event) {
        if (this.config.filtering) {
            // Array of filters
            const filters = this.columns.filter((col) => !Helpers.isEmpty(col.filter));
            if (filters.length) {
                let query = {};
                for (const column of filters) {
                    if (Helpers.isFunction(column.match)) {
                        query[column.name] = (value, record) => {
                            return column.match(record, column.filter);
                        };
                    }
                    else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                        query = Object.assign({}, query, column.preFilter(this.escapeCharacters(column.filter)));
                    }
                    else if (Array.isArray(column.filter)) {
                        // The filters are an array (multi-select), check value
                        let options = column.filter;
                        // We have an array of {value: '', labels: ''}
                        if (options[0].value || options[0].label) {
                            options = column.filter.map((opt) => opt.value);
                        }
                        query[column.name] = { any: options };
                    }
                    else if (column.type && column.type === 'date') {
                        if (column.filter.startDate && column.filter.endDate) {
                            query[column.name] = {
                                min: dateFns.startOfDay(column.filter.startDate),
                                max: dateFns.startOfDay(dateFns.addDays(dateFns.startOfDay(column.filter.endDate), 1)),
                            };
                        }
                        else {
                            query[column.name] = {
                                min: column.filter.min ? dateFns.addDays(dateFns.startOfToday(), column.filter.min) : dateFns.startOfToday(),
                                max: column.filter.max ? dateFns.addDays(dateFns.startOfTomorrow(), column.filter.max) : dateFns.startOfTomorrow(),
                            };
                        }
                    }
                    else {
                        query[column.name] = column.filter;
                    }
                }
                if (Helpers.isFunction(this.config.filtering)) {
                    this.config.filtering(query);
                }
                else {
                    this._dataProvider.filter = query;
                }
            }
            else {
                this._dataProvider.filter = {};
            }
            // Trickle down to keep sort
            // this.onSortChange(this.currentSortColumn);
            this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        }
    }
    escapeCharacters(filter) {
        if (typeof filter === 'string') {
            return filter.replace(/'/g, "''");
        }
        return filter;
    }
    isFilterActive(column, filter) {
        // TODO: This needs to be refactored
        let isActive = false;
        if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter)) {
            if (Array.isArray(column.filter)) {
                if (typeof filter !== 'string') {
                    isActive = column.filter.some((item) => {
                        return item.label === filter.label;
                    });
                }
                else {
                    isActive = column.filter.includes(filter);
                }
            }
            else {
                if (typeof column.filter === typeof filter) {
                    isActive = column.filter === filter;
                }
                else {
                    isActive = column.filter === filter.value;
                }
            }
        }
        return isActive;
    }
    onSortChange(column) {
        this.currentSortColumn = column;
        const sortedColumns = this.columns.filter((thisColumn) => {
            return thisColumn.sort && thisColumn !== this.currentSortColumn;
        });
        for (const sortedColumn of sortedColumns) {
            sortedColumn.sort = null;
        }
        if (column) {
            if (Helpers.isFunction(this.config.sorting)) {
                this.config.sorting();
            }
            else if (Helpers.isFunction(column.preSort)) {
                this._dataProvider.sort = [].concat(column.preSort(column));
            }
            else {
                this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
            }
        }
        // Fire table change event
        // this.fireTableChangeEvent();
        // If paging, reset page
        if (this.config.paging) {
            this.config.paging.current = 1;
        }
        // Remove all selection on sort change if selection is on
        if (this.config.rowSelectionStyle === 'checkbox') {
            this.selectAll(false);
        }
    }
    fireTableChangeEvent() {
        // Construct a table change object
        const onTableChange = {};
        const filters = this.columns.filter((col) => col.filter && col.filter.length);
        onTableChange.filter = filters.length ? filters : false;
        onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
        onTableChange.rows = this.rows;
        // Emit event
        this.onTableChange.emit(onTableChange);
    }
    findColumnIndex(value) {
        for (let i = 0; i < this.columns.length; i += 1) {
            if (this.columns[i].name === value) {
                return i;
            }
        }
        return null;
    }
    onOrderChange(event) {
        const oldIndex = this.findColumnIndex(event.first.name);
        const newIndex = this.findColumnIndex(event.second.name);
        this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
        this.onSortChange(this.currentSortColumn);
    }
    expandAllOnPage(expanded) {
        this.config.expandAll = !expanded;
        for (const row of this.dataProvider.list) {
            row._expanded = this.config.expandAll;
        }
    }
    selectPage(data) {
        if (!this.master) {
            this.selectAll(false);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.showSelectAllMessage = false;
        }
        else {
            this.indeterminate = false;
            // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
            for (const row of this.pagedData) {
                row._selected = this.master;
            }
            this.selected = this.dataProvider.list.filter((r) => r._selected);
            this.pageSelected = this.pagedData.filter((r) => r._selected);
            this.emitSelected(this.selected);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount++;
            this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
        }
        this.cdr.detectChanges();
    }
    selectAll(value) {
        this.master = value;
        this.indeterminate = false;
        for (const row of this.dataProvider.list) {
            row._selected = value;
        }
        this.selected = value ? this.dataProvider.list : [];
        this.showSelectAllMessage = false;
        this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        this.rowSelectHandler();
    }
    rowSelectHandler(data) {
        // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
        this.pageSelected = this.pagedData.filter((r) => r._selected);
        this.selected = this.dataProvider.list.filter((r) => r._selected);
        if (this.pageSelected.length === 0) {
            this.master = false;
            this.indeterminate = false;
        }
        else if (this.pageSelected.length === this.pagedData.length) {
            this.master = true;
            this.indeterminate = false;
        }
        else {
            this.master = false;
            this.indeterminate = true;
            // Breaking the selected page count
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        }
        this.emitSelected(this.selected);
    }
    emitSelected(selected) {
        this.onRowSelect.emit({ length: selected.length, selected });
    }
    rowClickHandler(row) {
        if (this.config.rowSelect) {
            this.activeId = row.id || 0;
            this.onRowClick.emit(row);
        }
    }
    getDefaultOptions(column) {
        // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
        const opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        if (column && column.range) {
            opts.push({
                label: this.labels.customDateRange,
                range: true,
            });
        }
        return opts;
    }
    onCalenderSelect(column, event) {
        setTimeout(() => {
            if (event.startDate && event.endDate) {
                this.onFilterChange();
            }
        }, 10);
    }
    onFilterKeywords(config) {
        if (config && config.filtering && config.filtering.freetextFilter) {
            const filterKeywords = config.filtering.freetextFilter.toLowerCase();
            if (!config.filtering.originalOptions) {
                config.filtering.originalOptions = config.filtering.options;
            }
            const newOptions = config.filtering.originalOptions.filter((option) => {
                let value = option && option.label ? option.label : option;
                value = value.toLowerCase() ? value.toLowerCase() : value;
                if (value === filterKeywords) {
                    return true;
                }
                else if (~value.indexOf(filterKeywords) || ~value.indexOf(filterKeywords)) {
                    return true;
                }
                return false;
            });
            config.filtering.options = newOptions;
            config.filtering.filter = config.filtering.freetextFilter;
        }
        else {
            config.filtering.options = config.filtering.originalOptions;
        }
        this.onFilterChange();
    }
    /**
     * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * @memberOf NovoTableElement
     */
    setTableEdit(rowNumber, columnNumber) {
        this.mode = NovoTableMode.EDIT;
        this._dataProvider.edit();
        this._rows.forEach((row, rowIndex) => {
            row._editing = row._editing || {};
            this.columns.forEach((column, columnIndex) => {
                if (column.viewOnly) {
                    row._editing[column.name] = false;
                }
                else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) &&
                    !Helpers.isEmpty(columnNumber) &&
                    rowIndex === Number(rowNumber) &&
                    columnIndex === Number(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else {
                    row._editing[column.name] = false;
                }
            });
        });
    }
    /**
     * @description Leaves edit mode for the Table and puts everything back to VIEW only
     * @memberOf NovoTableElement
     * @param cancel - whether or not to save data or undo
     */
    leaveEditMode(cancel) {
        this.mode = NovoTableMode.VIEW;
        this._rows.forEach((row) => {
            row._editing = row._editing || {};
            this.columns.forEach((column) => {
                row._editing[column.name] = false;
            });
        });
        if (cancel) {
            this._dataProvider.undo();
        }
        else {
            this._dataProvider.commit();
        }
        this.hideToastMessage();
    }
    /**
     * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * @memberOf NovoTableElement
     */
    addEditableRow(defaultValue = {}) {
        const tableFormRows = this.tableForm.controls.rows;
        const row = {};
        const rowControls = [];
        row.controls = {};
        row._editing = {};
        row.rowId = this._rows.length + 1;
        this.columns.forEach((column) => {
            // Use the control passed or use a ReadOnlyControl so that the form has the values
            const control = column.editorConfig
                ? ControlFactory.create(column.editorType, column.editorConfig)
                : new ReadOnlyControl({ key: column.name });
            control.value = null; // remove copied column value
            row.controls[column.name] = control;
            row._editing[column.name] = !column.viewOnly;
            rowControls.push(control);
        });
        this.formUtils.setInitialValues(rowControls, defaultValue, false);
        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
        this._rows.push(row);
    }
    /**
     * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * @memberOf NovoTableElement
     */
    validateAndGetUpdatedData() {
        if (this.tableForm && this.tableForm.controls && this.tableForm.controls.rows) {
            const changedRows = [];
            const errors = [];
            // Go over the FormArray's controls
            this.tableForm.controls.rows.controls.forEach((formGroup, index) => {
                let changedRow = null;
                let error = null;
                // Go over the form group controls
                Object.keys(formGroup.controls).forEach((key) => {
                    const control = formGroup.controls[key];
                    // Handle value changing
                    if (control && control.dirty && !control.errors) {
                        if (!changedRow) {
                            // Append the ID, so we have some key to save against
                            changedRow = {};
                            if (this._rows[index].id) {
                                changedRow.id = this._rows[index].id;
                            }
                        }
                        // If dirty, grab value off the form
                        changedRow[key] = this.tableForm.getRawValue().rows[index][key];
                        // Set value back to row (should be already done via the server call, but do it anyway)
                        this._rows[index][key] = changedRow[key];
                    }
                    else if (control && control.errors) {
                        // Handle errors
                        if (!error) {
                            error = {};
                        }
                        error[key] = control.errors;
                        control.markAsDirty();
                        control.markAsTouched();
                    }
                });
                if (changedRow) {
                    changedRows.push(changedRow);
                }
                if (error) {
                    errors.push({ errors: error, row: this._rows[index], index });
                }
            });
            // Return errors if any, otherwise return the changed rows
            if (errors.length === 0) {
                return { changed: changedRows };
            }
            return { errors };
        }
    }
    /**
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    cancelEditing() {
        this.leaveEditMode(true);
    }
    /**
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    saveChanges() {
        this.leaveEditMode(false);
    }
    /**
     * @description Displays a toast message inside of the table
     * @memberOf NovoTableElement
     */
    displayToastMessage(toast, hideDelay) {
        this.loading = false;
        this.toast = toast;
        if (hideDelay) {
            setTimeout(() => this.hideToastMessage(), hideDelay);
        }
    }
    /**
     * @description Force hide the toast message
     * @memberOf NovoTableElement
     */
    hideToastMessage() {
        this.toast = null;
        // Hack to make the table display properly after hiding the toast
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
        setTimeout(() => {
            this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        });
    }
    /**
     * @description display the loading overlay on the table
     * @memberOf NovoTableElement
     */
    toggleLoading(show) {
        this.loading = show;
    }
    /**
     * @description hide a column in edit or view mode
     * @memberOf NovoTableElement
     */
    isColumnHidden(column) {
        return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
    }
}
NovoTableElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableElement, deps: [{ token: NovoLabelService }, { token: FormUtils }, { token: i4.FormBuilder }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
NovoTableElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoTableElement, selector: "novo-table", inputs: { config: "config", columns: "columns", theme: "theme", skipSortAndFilterClear: "skipSortAndFilterClear", mode: "mode", editable: "editable", rowIdentifier: "rowIdentifier", name: "name", rows: "rows", dataProvider: "dataProvider" }, outputs: { onRowClick: "onRowClick", onRowSelect: "onRowSelect", onTableChange: "onTableChange" }, host: { properties: { "attr.theme": "theme", "class.editing": "mode === NovoTableMode.EDIT", "class.novo-table-loading": "loading" }, classAttribute: "novo-table" }, viewQueries: [{ propertyName: "filterInputs", predicate: ["filterInput"], descendants: true, read: ElementRef }], ngImport: i0, template: `
    <header *ngIf="columns.length">
      <ng-content select="novo-table-header"></ng-content>
      <div class="header-actions">
        <novo-pagination
          *ngIf="config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())"
          [rowOptions]="config.paging.rowOptions"
          [disablePageSelection]="config.paging.disablePageSelection"
          [(page)]="dataProvider.page"
          [(itemsPerPage)]="dataProvider.pageSize"
          [totalItems]="dataProvider.total"
          (onPageChange)="onPageChange($event)"
        >
        </novo-pagination>
        <ng-content select="novo-table-actions"></ng-content>
      </div>
    </header>
    <div class="novo-table-loading-overlay" *ngIf="loading || dataProvider.isLoading()">
      <novo-loading></novo-loading>
    </div>
    <novo-toast *ngIf="toast" [theme]="toast?.theme" [icon]="toast?.icon" [message]="toast?.message"></novo-toast>
    <div class="table-container" *ngIf="!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast">
      <novo-form hideHeader="true" [form]="tableForm">
        <table class="table table-striped dataTable" [class.table-details]="config.hasDetails" role="grid">
          <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->
          <thead *ngIf="columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)">
            <tr role="row">
              <!-- DETAILS -->
              <th class="row-actions" *ngIf="config.hasDetails">
                <novo-button
                  theme="icon"
                  icon="next"
                  (click)="expandAllOnPage(config.expandAll)"
                  *ngIf="!config.expandAll"
                  data-automation-id="expand-all"
                ></novo-button>
                <novo-button
                  theme="icon"
                  icon="sort-desc"
                  (click)="expandAllOnPage(config.expandAll)"
                  *ngIf="config.expandAll"
                  data-automation-id="collapse-all"
                ></novo-button>
              </th>
              <!-- CHECKBOX -->
              <th class="row-actions checkbox mass-action" *ngIf="config.rowSelectionStyle === 'checkbox'">
                <novo-checkbox
                  [(ngModel)]="master"
                  [indeterminate]="pageSelected.length > 0 && pageSelected.length < pagedData.length"
                  (ngModelChange)="selectPage($event)"
                  data-automation-id="select-all-checkbox"
                  [tooltip]="master ? labels.deselectAll : labels.selectAllOnPage"
                  tooltipPosition="right"
                ></novo-checkbox>
              </th>
              <!-- TABLE HEADERS -->
              <th
                *ngFor="let column of columns"
                [ngClass]="{
                  'mass-action': config?.rowSelectionStyle === 'checkbox',
                  actions: column?.actions?.items?.length > 0,
                  preview: column?.name === 'preview'
                }"
                [novoThOrderable]="column"
                (onOrderChange)="onOrderChange($event)"
                [hidden]="isColumnHidden(column)"
              >
                <div class="th-group" [attr.data-automation-id]="column.id || column.name" *ngIf="!column.hideHeader">
                  <!-- LABEL & SORT ARROWS -->
                  <div
                    class="th-title"
                    [ngClass]="config.sorting !== false && column.sorting !== false ? 'sortable' : ''"
                    [novoThSortable]="config"
                    [column]="column"
                    (onSortChange)="onSortChange($event)"
                  >
                    <label>{{ column.title || column.label }}</label>
                    <div
                      class="table-sort-icons"
                      tooltipPosition="bottom"
                      [tooltip]="labels.sort"
                      [ngClass]="column.sort || ''"
                      *ngIf="config.sorting !== false && column.sorting !== false"
                    >
                      <i class="bhi-arrow-up"></i>
                      <i class="bhi-arrow-down"></i>
                    </div>
                  </div>
                  <!-- FILTER DROP-DOWN -->
                  <novo-dropdown
                    side="default"
                    *ngIf="config.filtering !== false && column.filtering !== false"
                    class="column-filters"
                    (toggled)="onDropdownToggled($event, column.name)"
                    parentScrollSelector=".table-container"
                    containerClass="table-dropdown"
                  >
                    <novo-button
                      type="button"
                      theme="icon"
                      icon="filter"
                      tooltipPosition="bottom"
                      [tooltip]="labels.filters"
                      [class.filtered]="column.filter || column.filter === false"
                      (click)="focusInput()"
                    ></novo-button>
                    <!-- FILTER OPTIONS LIST -->
                    <novo-optgroup
                      *ngIf="
                        (column?.options?.length || column?.originalOptions?.length) &&
                        column?.type !== 'date' &&
                        toggledDropdownMap[column.name]
                      "
                    >
                      <novo-option class="filter-search" novoInert>
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <novo-button
                            theme="dialogue"
                            color="negative"
                            icon="times"
                            (click)="onFilterClear(column)"
                            *ngIf="column.filter || column.filter === false"
                          >
                            {{ labels.clear }}
                          </novo-button>
                        </div>
                        <input
                          type="text"
                          *ngIf="!!column.allowCustomTextOption"
                          [attr.id]="column.name + '-input'"
                          [novoTableFilter]="column"
                          (onFilterChange)="onFilterKeywords($event)"
                          [(ngModel)]="column.freetextFilter"
                          keepFilterFocused
                          #filterInput
                        />
                      </novo-option>
                      <novo-option
                        [ngClass]="{ active: isFilterActive(column, option) }"
                        *ngFor="let option of column.options"
                        (click)="onFilterClick(column, option)"
                        [attr.data-automation-id]="getOptionDataAutomationId(option)"
                      >
                        <span>{{ option?.label || option }}</span> <i class="bhi-check" *ngIf="isFilterActive(column, option)"></i>
                      </novo-option>
                    </novo-optgroup>
                    <!-- FILTER SEARCH INPUT -->
                    <novo-optgroup *ngIf="!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]">
                      <novo-option class="filter-search" novoInert>
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <novo-button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">
                            {{ labels.clear }}
                          </novo-button>
                        </div>
                        <input
                          type="text"
                          [attr.id]="column.name + '-input'"
                          [novoTableFilter]="column"
                          (onFilterChange)="onFilterChange($event)"
                          [(ngModel)]="column.filter"
                          keepFilterFocused
                          #filterInput
                        />
                      </novo-option>
                    </novo-optgroup>
                    <!-- FILTER DATE OPTIONS -->
                    <novo-optgroup *ngIf="column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]">
                      <novo-option class="filter-search" *ngIf="!column.calenderShow" novoInert>
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <novo-button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">
                            {{ labels.clear }}
                          </novo-button>
                        </div>
                      </novo-option>
                      <novo-option
                        [class.active]="isFilterActive(column, option)"
                        *ngFor="let option of column.options"
                        (click)="onFilterClick(column, option)"
                        [keepOpen]="option.range"
                        [hidden]="column.calenderShow"
                        [attr.data-automation-id]="option?.label || option"
                      >
                        {{ option?.label || option }}
                        <novo-icon novoSuffix color="positive" *ngIf="isFilterActive(column, option)">check</novo-icon>
                      </novo-option>
                      <novo-option class="calendar-container" *ngIf="column.calenderShow" keepOpen novoInert>
                        <novo-stack>
                          <div class="back-link" (click)="column.calenderShow = false">
                            <i class="bhi-previous"></i>{{ labels.backToPresetFilters }}
                          </div>
                          <novo-date-picker
                            (onSelect)="onCalenderSelect(column, $event)"
                            [(ngModel)]="column.filter"
                            mode="range"
                          ></novo-date-picker>
                        </novo-stack>
                      </novo-option>
                    </novo-optgroup>
                  </novo-dropdown>
                </div>
              </th>
            </tr>
          </thead>
          <!-- TABLE DATA -->
          <tbody *ngIf="!dataProvider.isEmpty() || editing">
            <tr
              class="table-selection-row"
              *ngIf="config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled"
              data-automation-id="table-selection-row"
            >
              <td colspan="100%">
                {{ labels.selectedRecords(selected.length) }}
                <a (click)="selectAll(true)" data-automation-id="all-matching-records">{{ labels.totalRecords(dataProvider.total) }}</a>
              </td>
            </tr>
            <ng-template ngFor let-row="$implicit" let-i="index" [ngForOf]="rows">
              <tr
                class="table-row"
                [ngClass]="row.customClass || ''"
                [id]="name + '-' + row[rowIdentifier]"
                [attr.data-automation-id]="row.id"
                (click)="rowClickHandler(row)"
                [class.active]="row.id === activeId"
              >
                <td class="row-actions" *ngIf="config.hasDetails">
                  <novo-button theme="icon" icon="next" (click)="row._expanded = !row._expanded" *ngIf="!row._expanded"></novo-button>
                  <novo-button theme="icon" icon="sort-desc" (click)="row._expanded = !row._expanded" *ngIf="row._expanded"></novo-button>
                </td>
                <td class="row-actions checkbox" *ngIf="config.rowSelectionStyle === 'checkbox'">
                  <novo-checkbox
                    [(ngModel)]="row._selected"
                    (ngModelChange)="rowSelectHandler(row)"
                    data-automation-id="select-row-checkbox"
                  ></novo-checkbox>
                </td>
                <td
                  *ngFor="let column of columns"
                  [attr.data-automation-id]="column.id || column.name"
                  [class.novo-form-row]="editable"
                  [hidden]="isColumnHidden(column)"
                >
                  <novo-table-cell
                    *ngIf="row._editing && !row._editing[column.name]"
                    [hasEditor]="editable"
                    [column]="column"
                    [row]="row"
                    [form]="getRowControlForm(i)"
                  ></novo-table-cell>
                  <novo-control
                    *ngIf="row._editing && row._editing[column.name]"
                    condensed="true"
                    [form]="getRowControlForm(i)"
                    [control]="row.controls[column.name]"
                  ></novo-control>
                </td>
              </tr>
              <tr
                class="details-row"
                *ngIf="config.hasDetails"
                [hidden]="!row._expanded"
                [attr.data-automation-id]="'details-row-' + row.id"
              >
                <td class="row-actions"></td>
                <td [attr.colspan]="config.rowSelectionStyle === 'checkbox' ? columns.length + 1 : columns.length">
                  <novo-row-details [data]="row" [renderer]="config.detailsRenderer"></novo-row-details>
                </td>
              </tr>
            </ng-template>
          </tbody>
          <!-- NO TABLE DATA PLACEHOLDER -->
          <tbody
            class="table-message"
            *ngIf="dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing"
            data-automation-id="empty-table"
          >
            <tr>
              <td colspan="100%">
                <div #emptymessage><ng-content select="[table-empty-message]"></ng-content></div>
                <div class="table-empty-message" *ngIf="emptymessage.childNodes.length == 0">
                  <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <!-- NO MATCHING RECORDS -->
          <tbody class="table-message" *ngIf="dataProvider.isEmpty() && dataProvider.isFiltered()" data-automation-id="empty-table">
            <tr>
              <td colspan="100%">
                <div #nomatchmessage><ng-content select="[table-no-matching-records-message]"></ng-content></div>
                <div class="no-matching-records" *ngIf="nomatchmessage.childNodes.length == 0">
                  <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <!-- TABLE DATA ERROR PLACEHOLDER -->
          <tbody class="table-message" *ngIf="dataProvider.hasErrors()" data-automation-id="table-errors">
            <tr>
              <td colspan="100%">
                <div #errormessage><ng-content select="[table-error-message]"></ng-content></div>
                <div class="table-error-message" *ngIf="errormessage.childNodes.length == 0">
                  <h4><i class="bhi-caution"></i> {{ labels.erroredTableMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <tfoot *ngIf="!config.footers" [ngClass]="dataProvider.length % 2 == 0 ? 'odd' : 'even'">
            <tr>
              <td colspan="100%">
                <ng-content select="novo-table-footer"></ng-content>
              </td>
            </tr>
          </tfoot>
          <tfoot *ngFor="let footer of footers; let i = index" class="novo-table-total-footer">
            <tr>
              <td *ngFor="let column of columns" [attr.data-automation-id]="(column.id || column.name) + '-total-' + i">
                {{ footer[column.name] }}
              </td>
            </tr>
          </tfoot>
        </table>
      </novo-form>
    </div>
  `, isInline: true, components: [{ type: Pagination, selector: "novo-pagination", inputs: ["page", "totalItems", "itemsPerPage", "rowOptions", "label", "disablePageSelection"], outputs: ["pageChange", "itemsPerPageChange", "onPageChange"] }, { type: NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { type: NovoToastElement, selector: "novo-toast", inputs: ["appearance", "theme", "icon", "title", "action", "hasDialogue", "link", "isCloseable", "message"], outputs: ["closed"] }, { type: NovoFormElement, selector: "novo-form", inputs: ["form", "layout", "hideHeader"] }, { type: NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }, { type: NovoCheckboxElement, selector: "novo-checkbox", inputs: ["aria-label", "aria-labelledby", "aria-describedby", "id", "name", "label", "disabled", "layoutOptions", "color", "value", "tabIndex", "required", "checked", "indeterminate"], outputs: ["change", "indeterminateChange", "onSelect"] }, { type: NovoDropdownElement, selector: "novo-dropdown", inputs: ["parentScrollSelector", "parentScrollAction", "containerClass", "side", "scrollStrategy", "keepOpen", "height", "width", "appendToBody", "multiple"], outputs: ["toggled"] }, { type: NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { type: NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { type: NovoDatePickerElement, selector: "novo-date-picker", inputs: ["minYear", "maxYear", "start", "end", "inline", "weekStart", "preselected", "hideOverflowDays", "hideFooter", "disabledDateMessage", "numberOfMonths", "mode", "range", "weekRangeSelect"], outputs: ["onSelect"] }, { type: TableCell, selector: "novo-table-cell", inputs: ["column", "row", "form", "hasEditor"] }, { type: NovoControlElement, selector: "novo-control", inputs: ["control", "form", "condensed", "autoFocus"], outputs: ["change", "edit", "save", "delete", "upload", "blur", "focus"] }, { type: RowDetails, selector: "novo-row-details", inputs: ["data", "renderer"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: TooltipDirective, selector: "[tooltip]", inputs: ["tooltip", "tooltipPosition", "tooltipType", "tooltipSize", "tooltipBounce", "tooltipNoAnimate", "tooltipRounded", "tooltipAlways", "tooltipActive", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "tooltipIsHTML"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: ThOrderable, selector: "[novoThOrderable]", inputs: ["novoThOrderable"], outputs: ["onOrderChange"] }, { type: ThSortable, selector: "[novoThSortable]", inputs: ["novoThSortable", "column"], outputs: ["onSortChange"] }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: NovoTableKeepFilterFocus, selector: "[keepFilterFocused]" }, { type: TableFilter, selector: "[novoTableFilter]", inputs: ["novoTableFilter"], outputs: ["onFilterChange"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-table',
                    host: {
                        class: 'novo-table',
                        '[attr.theme]': 'theme',
                        '[class.editing]': 'mode === NovoTableMode.EDIT',
                        '[class.novo-table-loading]': 'loading',
                    },
                    // directives: [],
                    template: `
    <header *ngIf="columns.length">
      <ng-content select="novo-table-header"></ng-content>
      <div class="header-actions">
        <novo-pagination
          *ngIf="config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())"
          [rowOptions]="config.paging.rowOptions"
          [disablePageSelection]="config.paging.disablePageSelection"
          [(page)]="dataProvider.page"
          [(itemsPerPage)]="dataProvider.pageSize"
          [totalItems]="dataProvider.total"
          (onPageChange)="onPageChange($event)"
        >
        </novo-pagination>
        <ng-content select="novo-table-actions"></ng-content>
      </div>
    </header>
    <div class="novo-table-loading-overlay" *ngIf="loading || dataProvider.isLoading()">
      <novo-loading></novo-loading>
    </div>
    <novo-toast *ngIf="toast" [theme]="toast?.theme" [icon]="toast?.icon" [message]="toast?.message"></novo-toast>
    <div class="table-container" *ngIf="!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast">
      <novo-form hideHeader="true" [form]="tableForm">
        <table class="table table-striped dataTable" [class.table-details]="config.hasDetails" role="grid">
          <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->
          <thead *ngIf="columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)">
            <tr role="row">
              <!-- DETAILS -->
              <th class="row-actions" *ngIf="config.hasDetails">
                <novo-button
                  theme="icon"
                  icon="next"
                  (click)="expandAllOnPage(config.expandAll)"
                  *ngIf="!config.expandAll"
                  data-automation-id="expand-all"
                ></novo-button>
                <novo-button
                  theme="icon"
                  icon="sort-desc"
                  (click)="expandAllOnPage(config.expandAll)"
                  *ngIf="config.expandAll"
                  data-automation-id="collapse-all"
                ></novo-button>
              </th>
              <!-- CHECKBOX -->
              <th class="row-actions checkbox mass-action" *ngIf="config.rowSelectionStyle === 'checkbox'">
                <novo-checkbox
                  [(ngModel)]="master"
                  [indeterminate]="pageSelected.length > 0 && pageSelected.length < pagedData.length"
                  (ngModelChange)="selectPage($event)"
                  data-automation-id="select-all-checkbox"
                  [tooltip]="master ? labels.deselectAll : labels.selectAllOnPage"
                  tooltipPosition="right"
                ></novo-checkbox>
              </th>
              <!-- TABLE HEADERS -->
              <th
                *ngFor="let column of columns"
                [ngClass]="{
                  'mass-action': config?.rowSelectionStyle === 'checkbox',
                  actions: column?.actions?.items?.length > 0,
                  preview: column?.name === 'preview'
                }"
                [novoThOrderable]="column"
                (onOrderChange)="onOrderChange($event)"
                [hidden]="isColumnHidden(column)"
              >
                <div class="th-group" [attr.data-automation-id]="column.id || column.name" *ngIf="!column.hideHeader">
                  <!-- LABEL & SORT ARROWS -->
                  <div
                    class="th-title"
                    [ngClass]="config.sorting !== false && column.sorting !== false ? 'sortable' : ''"
                    [novoThSortable]="config"
                    [column]="column"
                    (onSortChange)="onSortChange($event)"
                  >
                    <label>{{ column.title || column.label }}</label>
                    <div
                      class="table-sort-icons"
                      tooltipPosition="bottom"
                      [tooltip]="labels.sort"
                      [ngClass]="column.sort || ''"
                      *ngIf="config.sorting !== false && column.sorting !== false"
                    >
                      <i class="bhi-arrow-up"></i>
                      <i class="bhi-arrow-down"></i>
                    </div>
                  </div>
                  <!-- FILTER DROP-DOWN -->
                  <novo-dropdown
                    side="default"
                    *ngIf="config.filtering !== false && column.filtering !== false"
                    class="column-filters"
                    (toggled)="onDropdownToggled($event, column.name)"
                    parentScrollSelector=".table-container"
                    containerClass="table-dropdown"
                  >
                    <novo-button
                      type="button"
                      theme="icon"
                      icon="filter"
                      tooltipPosition="bottom"
                      [tooltip]="labels.filters"
                      [class.filtered]="column.filter || column.filter === false"
                      (click)="focusInput()"
                    ></novo-button>
                    <!-- FILTER OPTIONS LIST -->
                    <novo-optgroup
                      *ngIf="
                        (column?.options?.length || column?.originalOptions?.length) &&
                        column?.type !== 'date' &&
                        toggledDropdownMap[column.name]
                      "
                    >
                      <novo-option class="filter-search" novoInert>
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <novo-button
                            theme="dialogue"
                            color="negative"
                            icon="times"
                            (click)="onFilterClear(column)"
                            *ngIf="column.filter || column.filter === false"
                          >
                            {{ labels.clear }}
                          </novo-button>
                        </div>
                        <input
                          type="text"
                          *ngIf="!!column.allowCustomTextOption"
                          [attr.id]="column.name + '-input'"
                          [novoTableFilter]="column"
                          (onFilterChange)="onFilterKeywords($event)"
                          [(ngModel)]="column.freetextFilter"
                          keepFilterFocused
                          #filterInput
                        />
                      </novo-option>
                      <novo-option
                        [ngClass]="{ active: isFilterActive(column, option) }"
                        *ngFor="let option of column.options"
                        (click)="onFilterClick(column, option)"
                        [attr.data-automation-id]="getOptionDataAutomationId(option)"
                      >
                        <span>{{ option?.label || option }}</span> <i class="bhi-check" *ngIf="isFilterActive(column, option)"></i>
                      </novo-option>
                    </novo-optgroup>
                    <!-- FILTER SEARCH INPUT -->
                    <novo-optgroup *ngIf="!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]">
                      <novo-option class="filter-search" novoInert>
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <novo-button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">
                            {{ labels.clear }}
                          </novo-button>
                        </div>
                        <input
                          type="text"
                          [attr.id]="column.name + '-input'"
                          [novoTableFilter]="column"
                          (onFilterChange)="onFilterChange($event)"
                          [(ngModel)]="column.filter"
                          keepFilterFocused
                          #filterInput
                        />
                      </novo-option>
                    </novo-optgroup>
                    <!-- FILTER DATE OPTIONS -->
                    <novo-optgroup *ngIf="column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]">
                      <novo-option class="filter-search" *ngIf="!column.calenderShow" novoInert>
                        <div class="header">
                          <span>{{ labels.filters }}</span>
                          <novo-button theme="dialogue" color="negative" icon="times" (click)="onFilterClear(column)" *ngIf="column.filter">
                            {{ labels.clear }}
                          </novo-button>
                        </div>
                      </novo-option>
                      <novo-option
                        [class.active]="isFilterActive(column, option)"
                        *ngFor="let option of column.options"
                        (click)="onFilterClick(column, option)"
                        [keepOpen]="option.range"
                        [hidden]="column.calenderShow"
                        [attr.data-automation-id]="option?.label || option"
                      >
                        {{ option?.label || option }}
                        <novo-icon novoSuffix color="positive" *ngIf="isFilterActive(column, option)">check</novo-icon>
                      </novo-option>
                      <novo-option class="calendar-container" *ngIf="column.calenderShow" keepOpen novoInert>
                        <novo-stack>
                          <div class="back-link" (click)="column.calenderShow = false">
                            <i class="bhi-previous"></i>{{ labels.backToPresetFilters }}
                          </div>
                          <novo-date-picker
                            (onSelect)="onCalenderSelect(column, $event)"
                            [(ngModel)]="column.filter"
                            mode="range"
                          ></novo-date-picker>
                        </novo-stack>
                      </novo-option>
                    </novo-optgroup>
                  </novo-dropdown>
                </div>
              </th>
            </tr>
          </thead>
          <!-- TABLE DATA -->
          <tbody *ngIf="!dataProvider.isEmpty() || editing">
            <tr
              class="table-selection-row"
              *ngIf="config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled"
              data-automation-id="table-selection-row"
            >
              <td colspan="100%">
                {{ labels.selectedRecords(selected.length) }}
                <a (click)="selectAll(true)" data-automation-id="all-matching-records">{{ labels.totalRecords(dataProvider.total) }}</a>
              </td>
            </tr>
            <ng-template ngFor let-row="$implicit" let-i="index" [ngForOf]="rows">
              <tr
                class="table-row"
                [ngClass]="row.customClass || ''"
                [id]="name + '-' + row[rowIdentifier]"
                [attr.data-automation-id]="row.id"
                (click)="rowClickHandler(row)"
                [class.active]="row.id === activeId"
              >
                <td class="row-actions" *ngIf="config.hasDetails">
                  <novo-button theme="icon" icon="next" (click)="row._expanded = !row._expanded" *ngIf="!row._expanded"></novo-button>
                  <novo-button theme="icon" icon="sort-desc" (click)="row._expanded = !row._expanded" *ngIf="row._expanded"></novo-button>
                </td>
                <td class="row-actions checkbox" *ngIf="config.rowSelectionStyle === 'checkbox'">
                  <novo-checkbox
                    [(ngModel)]="row._selected"
                    (ngModelChange)="rowSelectHandler(row)"
                    data-automation-id="select-row-checkbox"
                  ></novo-checkbox>
                </td>
                <td
                  *ngFor="let column of columns"
                  [attr.data-automation-id]="column.id || column.name"
                  [class.novo-form-row]="editable"
                  [hidden]="isColumnHidden(column)"
                >
                  <novo-table-cell
                    *ngIf="row._editing && !row._editing[column.name]"
                    [hasEditor]="editable"
                    [column]="column"
                    [row]="row"
                    [form]="getRowControlForm(i)"
                  ></novo-table-cell>
                  <novo-control
                    *ngIf="row._editing && row._editing[column.name]"
                    condensed="true"
                    [form]="getRowControlForm(i)"
                    [control]="row.controls[column.name]"
                  ></novo-control>
                </td>
              </tr>
              <tr
                class="details-row"
                *ngIf="config.hasDetails"
                [hidden]="!row._expanded"
                [attr.data-automation-id]="'details-row-' + row.id"
              >
                <td class="row-actions"></td>
                <td [attr.colspan]="config.rowSelectionStyle === 'checkbox' ? columns.length + 1 : columns.length">
                  <novo-row-details [data]="row" [renderer]="config.detailsRenderer"></novo-row-details>
                </td>
              </tr>
            </ng-template>
          </tbody>
          <!-- NO TABLE DATA PLACEHOLDER -->
          <tbody
            class="table-message"
            *ngIf="dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing"
            data-automation-id="empty-table"
          >
            <tr>
              <td colspan="100%">
                <div #emptymessage><ng-content select="[table-empty-message]"></ng-content></div>
                <div class="table-empty-message" *ngIf="emptymessage.childNodes.length == 0">
                  <h4><i class="bhi-search-question"></i> {{ labels.emptyTableMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <!-- NO MATCHING RECORDS -->
          <tbody class="table-message" *ngIf="dataProvider.isEmpty() && dataProvider.isFiltered()" data-automation-id="empty-table">
            <tr>
              <td colspan="100%">
                <div #nomatchmessage><ng-content select="[table-no-matching-records-message]"></ng-content></div>
                <div class="no-matching-records" *ngIf="nomatchmessage.childNodes.length == 0">
                  <h4><i class="bhi-search-question"></i> {{ labels.noMatchingRecordsMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <!-- TABLE DATA ERROR PLACEHOLDER -->
          <tbody class="table-message" *ngIf="dataProvider.hasErrors()" data-automation-id="table-errors">
            <tr>
              <td colspan="100%">
                <div #errormessage><ng-content select="[table-error-message]"></ng-content></div>
                <div class="table-error-message" *ngIf="errormessage.childNodes.length == 0">
                  <h4><i class="bhi-caution"></i> {{ labels.erroredTableMessage }}</h4>
                </div>
              </td>
            </tr>
          </tbody>
          <tfoot *ngIf="!config.footers" [ngClass]="dataProvider.length % 2 == 0 ? 'odd' : 'even'">
            <tr>
              <td colspan="100%">
                <ng-content select="novo-table-footer"></ng-content>
              </td>
            </tr>
          </tfoot>
          <tfoot *ngFor="let footer of footers; let i = index" class="novo-table-total-footer">
            <tr>
              <td *ngFor="let column of columns" [attr.data-automation-id]="(column.id || column.name) + '-total-' + i">
                {{ footer[column.name] }}
              </td>
            </tr>
          </tfoot>
        </table>
      </novo-form>
    </div>
  `,
                }]
        }], ctorParameters: function () { return [{ type: NovoLabelService }, { type: FormUtils }, { type: i4.FormBuilder }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { filterInputs: [{
                type: ViewChildren,
                args: ['filterInput', { read: ElementRef }]
            }], config: [{
                type: Input
            }], columns: [{
                type: Input
            }], theme: [{
                type: Input
            }], skipSortAndFilterClear: [{
                type: Input
            }], mode: [{
                type: Input
            }], editable: [{
                type: Input
            }], rowIdentifier: [{
                type: Input
            }], name: [{
                type: Input
            }], onRowClick: [{
                type: Output
            }], onRowSelect: [{
                type: Output
            }], onTableChange: [{
                type: Output
            }], rows: [{
                type: Input
            }], dataProvider: [{
                type: Input
            }] } });

// NG2
class NovoToastModule {
}
NovoToastModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoToastModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastModule, declarations: [NovoToastElement], imports: [CommonModule, NovoButtonModule], exports: [NovoToastElement] });
NovoToastModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastModule, imports: [[CommonModule, NovoButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToastModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoButtonModule],
                    declarations: [NovoToastElement],
                    exports: [NovoToastElement],
                }]
        }] });

// NG2
class NovoTableModule {
}
NovoTableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoTableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableModule, declarations: [NovoTableElement], imports: [CommonModule,
        FormsModule,
        NovoFormModule,
        NovoTableExtrasModule,
        NovoToastModule,
        NovoButtonModule,
        NovoTooltipModule,
        NovoDropdownModule,
        NovoLoadingModule,
        NovoDatePickerModule,
        NovoFormExtrasModule,
        NovoCheckboxModule,
        TextMaskModule,
        IMaskDirectiveModule,
        NovoOptionModule,
        NovoCommonModule,
        NovoFlexModule,
        NovoIconModule], exports: [NovoTableElement] });
NovoTableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableModule, imports: [[
            CommonModule,
            FormsModule,
            NovoFormModule,
            NovoTableExtrasModule,
            NovoToastModule,
            NovoButtonModule,
            NovoTooltipModule,
            NovoDropdownModule,
            NovoLoadingModule,
            NovoDatePickerModule,
            NovoFormExtrasModule,
            NovoCheckboxModule,
            TextMaskModule,
            IMaskDirectiveModule,
            NovoOptionModule,
            NovoCommonModule,
            NovoFlexModule,
            NovoIconModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoTableModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        NovoFormModule,
                        NovoTableExtrasModule,
                        NovoToastModule,
                        NovoButtonModule,
                        NovoTooltipModule,
                        NovoDropdownModule,
                        NovoLoadingModule,
                        NovoDatePickerModule,
                        NovoFormExtrasModule,
                        NovoCheckboxModule,
                        TextMaskModule,
                        IMaskDirectiveModule,
                        NovoOptionModule,
                        NovoCommonModule,
                        NovoFlexModule,
                        NovoIconModule,
                    ],
                    declarations: [NovoTableElement],
                    exports: [NovoTableElement],
                }]
        }] });

// Boilerplate for applying mixins to NovoToolbar.
/** @docs-private */
const _NovoToolbarBase = mixinColor(class {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
    }
});
class NovoToolbarRow extends _NovoToolbarBase {
    constructor(elementRef) {
        super(elementRef);
    }
}
NovoToolbarRow.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbarRow, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
NovoToolbarRow.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: NovoToolbarRow, selector: "novo-toolbar-row", inputs: { color: "color", gap: "gap" }, host: { classAttribute: "novo-toolbar-row" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbarRow, decorators: [{
            type: Directive,
            args: [{
                    selector: 'novo-toolbar-row',
                    host: { class: 'novo-toolbar-row' },
                    inputs: ['color', 'gap'],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
class NovoToolbar extends _NovoToolbarBase {
    constructor(elementRef) {
        super(elementRef);
    }
}
NovoToolbar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbar, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });
NovoToolbar.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoToolbar, selector: "novo-toolbar", inputs: { color: "color", gap: "gap" }, host: { properties: { "class.novo-toolbar-multiple-rows": "_toolbarRows.length > 0", "class.novo-toolbar-single-row": "_toolbarRows.length === 0" }, classAttribute: "novo-toolbar" }, queries: [{ propertyName: "_toolbarRows", predicate: NovoToolbarRow, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-content></ng-content>\n<ng-content select=\"novo-toolbar-row\"></ng-content>", styles: [".novo-toolbar .novo-toolbar-row,.novo-toolbar.novo-toolbar-single-row{display:flex;box-sizing:border-box;background-color:var(--background-bright);color:var(--text-main);padding:0 1rem;width:100%;flex-direction:row;align-items:center;min-height:5rem;white-space:nowrap}.novo-toolbar .novo-toolbar-row .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row novo-nav,.novo-toolbar .novo-toolbar-row novo-tab,.novo-toolbar.novo-toolbar-single-row .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row novo-nav,.novo-toolbar.novo-toolbar-single-row novo-tab{height:inherit;min-height:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black,.novo-toolbar .novo-toolbar-row.novo-theme-black,.novo-toolbar.novo-toolbar-single-row.novo-color-black,.novo-toolbar.novo-toolbar-single-row.novo-theme-black{color:#fff;background:#000000}.novo-toolbar .novo-toolbar-row.novo-color-black>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-black novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-black novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-black .links button,.novo-toolbar .novo-toolbar-row.novo-color-black .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-black .links button,.novo-toolbar .novo-toolbar-row.novo-theme-black .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-black .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-black .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-black .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-black .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-black,.novo-toolbar.novo-toolbar-single-row.novo-accent-black{border-bottom:2px solid #000000}.novo-toolbar .novo-toolbar-row.novo-color-white,.novo-toolbar .novo-toolbar-row.novo-theme-white,.novo-toolbar.novo-toolbar-single-row.novo-color-white,.novo-toolbar.novo-toolbar-single-row.novo-theme-white{color:#3d464d;background:#ffffff}.novo-toolbar .novo-toolbar-row.novo-color-white>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-white novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-white novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-white novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-white .links button,.novo-toolbar .novo-toolbar-row.novo-color-white .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-white .links button,.novo-toolbar .novo-toolbar-row.novo-theme-white .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-white .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-white .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-white .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-white .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-white .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-white,.novo-toolbar.novo-toolbar-single-row.novo-accent-white{border-bottom:2px solid #ffffff}.novo-toolbar .novo-toolbar-row.novo-color-gray,.novo-toolbar .novo-toolbar-row.novo-theme-gray,.novo-toolbar.novo-toolbar-single-row.novo-color-gray,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray{color:#3d464d;background:#9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-gray novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-gray .links button,.novo-toolbar .novo-toolbar-row.novo-color-gray .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-gray .links button,.novo-toolbar .novo-toolbar-row.novo-theme-gray .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-gray .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-gray .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-gray,.novo-toolbar.novo-toolbar-single-row.novo-accent-gray{border-bottom:2px solid #9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-grey,.novo-toolbar .novo-toolbar-row.novo-theme-grey,.novo-toolbar.novo-toolbar-single-row.novo-color-grey,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey{color:#3d464d;background:#9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grey novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grey .links button,.novo-toolbar .novo-toolbar-row.novo-color-grey .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grey .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grey .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grey .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grey .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-grey,.novo-toolbar.novo-toolbar-single-row.novo-accent-grey{border-bottom:2px solid #9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-offWhite,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite{color:#3d464d;background:#f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite .links button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .links button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-accent-offWhite{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-bright,.novo-toolbar .novo-toolbar-row.novo-theme-bright,.novo-toolbar.novo-toolbar-single-row.novo-color-bright,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright{color:#3d464d;background:#f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bright novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bright .links button,.novo-toolbar .novo-toolbar-row.novo-color-bright .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bright .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bright .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bright .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bright .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-bright,.novo-toolbar.novo-toolbar-single-row.novo-accent-bright{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-light,.novo-toolbar .novo-toolbar-row.novo-theme-light,.novo-toolbar.novo-toolbar-single-row.novo-color-light,.novo-toolbar.novo-toolbar-single-row.novo-theme-light{color:#3d464d;background:#dbdbdb}.novo-toolbar .novo-toolbar-row.novo-color-light>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-light novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-light novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-light novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-light .links button,.novo-toolbar .novo-toolbar-row.novo-color-light .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-light .links button,.novo-toolbar .novo-toolbar-row.novo-theme-light .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-light .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-light .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-light .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-light .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-light .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-light,.novo-toolbar.novo-toolbar-single-row.novo-accent-light{border-bottom:2px solid #dbdbdb}.novo-toolbar .novo-toolbar-row.novo-color-neutral,.novo-toolbar .novo-toolbar-row.novo-theme-neutral,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral{color:#fff;background:#4f5361}.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-neutral .links button,.novo-toolbar .novo-toolbar-row.novo-color-neutral .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .links button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-neutral .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-neutral,.novo-toolbar.novo-toolbar-single-row.novo-accent-neutral{border-bottom:2px solid #4f5361}.novo-toolbar .novo-toolbar-row.novo-color-dark,.novo-toolbar .novo-toolbar-row.novo-theme-dark,.novo-toolbar.novo-toolbar-single-row.novo-color-dark,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark{color:#fff;background:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-dark novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-dark .links button,.novo-toolbar .novo-toolbar-row.novo-color-dark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-dark .links button,.novo-toolbar .novo-toolbar-row.novo-theme-dark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-dark .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-dark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-dark,.novo-toolbar.novo-toolbar-single-row.novo-accent-dark{border-bottom:2px solid #3d464d}.novo-toolbar .novo-toolbar-row.novo-color-orange,.novo-toolbar .novo-toolbar-row.novo-theme-orange,.novo-toolbar.novo-toolbar-single-row.novo-color-orange,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange{color:#3d464d;background:#ff6900}.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-orange novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-orange .links button,.novo-toolbar .novo-toolbar-row.novo-color-orange .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-orange .links button,.novo-toolbar .novo-toolbar-row.novo-theme-orange .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-orange .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-orange .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-orange,.novo-toolbar.novo-toolbar-single-row.novo-accent-orange{border-bottom:2px solid #ff6900}.novo-toolbar .novo-toolbar-row.novo-color-navigation,.novo-toolbar .novo-toolbar-row.novo-theme-navigation,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation{color:#fff;background:#202945}.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navigation .links button,.novo-toolbar .novo-toolbar-row.novo-color-navigation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navigation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-navigation,.novo-toolbar.novo-toolbar-single-row.novo-accent-navigation{border-bottom:2px solid #202945}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue{color:#fff;background:#009bdf}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .links button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .links button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-accent-skyBlue{border-bottom:2px solid #009bdf}.novo-toolbar .novo-toolbar-row.novo-color-steel,.novo-toolbar .novo-toolbar-row.novo-theme-steel,.novo-toolbar.novo-toolbar-single-row.novo-color-steel,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel{color:#fff;background:#5b6770}.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-steel novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-steel .links button,.novo-toolbar .novo-toolbar-row.novo-color-steel .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-steel .links button,.novo-toolbar .novo-toolbar-row.novo-theme-steel .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-steel .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-steel .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-steel,.novo-toolbar.novo-toolbar-single-row.novo-accent-steel{border-bottom:2px solid #5b6770}.novo-toolbar .novo-toolbar-row.novo-color-metal,.novo-toolbar .novo-toolbar-row.novo-theme-metal,.novo-toolbar.novo-toolbar-single-row.novo-color-metal,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal{color:#fff;background:#637893}.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-metal novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-metal .links button,.novo-toolbar .novo-toolbar-row.novo-color-metal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-metal .links button,.novo-toolbar .novo-toolbar-row.novo-theme-metal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-metal .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-metal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-metal,.novo-toolbar.novo-toolbar-single-row.novo-accent-metal{border-bottom:2px solid #637893}.novo-toolbar .novo-toolbar-row.novo-color-sand,.novo-toolbar .novo-toolbar-row.novo-theme-sand,.novo-toolbar.novo-toolbar-single-row.novo-color-sand,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand{color:#3d464d;background:#f4f4f4}.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sand novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sand .links button,.novo-toolbar .novo-toolbar-row.novo-color-sand .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sand .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sand .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sand .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sand .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-sand,.novo-toolbar.novo-toolbar-single-row.novo-accent-sand{border-bottom:2px solid #f4f4f4}.novo-toolbar .novo-toolbar-row.novo-color-silver,.novo-toolbar .novo-toolbar-row.novo-theme-silver,.novo-toolbar.novo-toolbar-single-row.novo-color-silver,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver{color:#3d464d;background:#e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-silver novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-silver .links button,.novo-toolbar .novo-toolbar-row.novo-color-silver .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-silver .links button,.novo-toolbar .novo-toolbar-row.novo-theme-silver .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-silver .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-silver .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-silver,.novo-toolbar.novo-toolbar-single-row.novo-accent-silver{border-bottom:2px solid #e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-stone,.novo-toolbar .novo-toolbar-row.novo-theme-stone,.novo-toolbar.novo-toolbar-single-row.novo-color-stone,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone{color:#3d464d;background:#bebebe}.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-stone novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-stone .links button,.novo-toolbar .novo-toolbar-row.novo-color-stone .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-stone .links button,.novo-toolbar .novo-toolbar-row.novo-theme-stone .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-stone .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-stone .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-stone,.novo-toolbar.novo-toolbar-single-row.novo-accent-stone{border-bottom:2px solid #bebebe}.novo-toolbar .novo-toolbar-row.novo-color-ash,.novo-toolbar .novo-toolbar-row.novo-theme-ash,.novo-toolbar.novo-toolbar-single-row.novo-color-ash,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash{color:#3d464d;background:#a0a0a0}.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ash novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ash .links button,.novo-toolbar .novo-toolbar-row.novo-color-ash .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ash .links button,.novo-toolbar .novo-toolbar-row.novo-theme-ash .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ash .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-ash .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-ash,.novo-toolbar.novo-toolbar-single-row.novo-accent-ash{border-bottom:2px solid #a0a0a0}.novo-toolbar .novo-toolbar-row.novo-color-slate,.novo-toolbar .novo-toolbar-row.novo-theme-slate,.novo-toolbar.novo-toolbar-single-row.novo-color-slate,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate{color:#fff;background:#707070}.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-slate novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-slate .links button,.novo-toolbar .novo-toolbar-row.novo-color-slate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-slate .links button,.novo-toolbar .novo-toolbar-row.novo-theme-slate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-slate .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-slate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-slate,.novo-toolbar.novo-toolbar-single-row.novo-accent-slate{border-bottom:2px solid #707070}.novo-toolbar .novo-toolbar-row.novo-color-onyx,.novo-toolbar .novo-toolbar-row.novo-theme-onyx,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx{color:#fff;background:#526980}.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-onyx .links button,.novo-toolbar .novo-toolbar-row.novo-color-onyx .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .links button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-onyx .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-onyx,.novo-toolbar.novo-toolbar-single-row.novo-accent-onyx{border-bottom:2px solid #526980}.novo-toolbar .novo-toolbar-row.novo-color-charcoal,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal{color:#fff;background:#282828}.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal .links button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .links button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-accent-charcoal{border-bottom:2px solid #282828}.novo-toolbar .novo-toolbar-row.novo-color-moonlight,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight{color:#fff;background:#1a242f}.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight .links button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .links button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-accent-moonlight{border-bottom:2px solid #1a242f}.novo-toolbar .novo-toolbar-row.novo-color-midnight,.novo-toolbar .novo-toolbar-row.novo-theme-midnight,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight{color:#fff;background:#202945}.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-midnight .links button,.novo-toolbar .novo-toolbar-row.novo-color-midnight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .links button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-midnight .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-midnight,.novo-toolbar.novo-toolbar-single-row.novo-accent-midnight{border-bottom:2px solid #202945}.novo-toolbar .novo-toolbar-row.novo-color-darkness,.novo-toolbar .novo-toolbar-row.novo-theme-darkness,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness{color:#fff;background:#161f27}.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-darkness .links button,.novo-toolbar .novo-toolbar-row.novo-color-darkness .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .links button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-darkness .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-darkness,.novo-toolbar.novo-toolbar-single-row.novo-accent-darkness{border-bottom:2px solid #161f27}.novo-toolbar .novo-toolbar-row.novo-color-navy,.novo-toolbar .novo-toolbar-row.novo-theme-navy,.novo-toolbar.novo-toolbar-single-row.novo-color-navy,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy{color:#fff;background:#0d2d42}.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navy novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navy .links button,.novo-toolbar .novo-toolbar-row.novo-color-navy .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navy .links button,.novo-toolbar .novo-toolbar-row.novo-theme-navy .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navy .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-navy .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-navy,.novo-toolbar.novo-toolbar-single-row.novo-accent-navy{border-bottom:2px solid #0d2d42}.novo-toolbar .novo-toolbar-row.novo-color-aqua,.novo-toolbar .novo-toolbar-row.novo-theme-aqua,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua{color:#3d464d;background:#3bafda}.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-aqua .links button,.novo-toolbar .novo-toolbar-row.novo-color-aqua .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .links button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-aqua .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-aqua,.novo-toolbar.novo-toolbar-single-row.novo-accent-aqua{border-bottom:2px solid #3bafda}.novo-toolbar .novo-toolbar-row.novo-color-ocean,.novo-toolbar .novo-toolbar-row.novo-theme-ocean,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean{color:#fff;background:#4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ocean .links button,.novo-toolbar .novo-toolbar-row.novo-color-ocean .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .links button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ocean .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-ocean,.novo-toolbar.novo-toolbar-single-row.novo-accent-ocean{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-mint,.novo-toolbar .novo-toolbar-row.novo-theme-mint,.novo-toolbar.novo-toolbar-single-row.novo-color-mint,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint{color:#3d464d;background:#37bc9b}.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mint novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mint .links button,.novo-toolbar .novo-toolbar-row.novo-color-mint .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mint .links button,.novo-toolbar .novo-toolbar-row.novo-theme-mint .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mint .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-mint .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-mint,.novo-toolbar.novo-toolbar-single-row.novo-accent-mint{border-bottom:2px solid #37bc9b}.novo-toolbar .novo-toolbar-row.novo-color-grass,.novo-toolbar .novo-toolbar-row.novo-theme-grass,.novo-toolbar.novo-toolbar-single-row.novo-color-grass,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass{color:#fff;background:#8cc152}.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grass novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grass .links button,.novo-toolbar .novo-toolbar-row.novo-color-grass .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grass .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grass .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grass .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grass .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-grass,.novo-toolbar.novo-toolbar-single-row.novo-accent-grass{border-bottom:2px solid #8cc152}.novo-toolbar .novo-toolbar-row.novo-color-sunflower,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower{color:#fff;background:#f6b042}.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower .links button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-accent-sunflower{border-bottom:2px solid #f6b042}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet{color:#fff;background:#eb6845}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .links button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-accent-bittersweet{border-bottom:2px solid #eb6845}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .links button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-accent-grapefruit{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-carnation,.novo-toolbar .novo-toolbar-row.novo-theme-carnation,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation{color:#fff;background:#d770ad}.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-carnation .links button,.novo-toolbar .novo-toolbar-row.novo-color-carnation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-carnation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-carnation,.novo-toolbar.novo-toolbar-single-row.novo-accent-carnation{border-bottom:2px solid #d770ad}.novo-toolbar .novo-toolbar-row.novo-color-lavender,.novo-toolbar .novo-toolbar-row.novo-theme-lavender,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender{color:#fff;background:#967adc}.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lavender .links button,.novo-toolbar .novo-toolbar-row.novo-color-lavender .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .links button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lavender .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-lavender,.novo-toolbar.novo-toolbar-single-row.novo-accent-lavender{border-bottom:2px solid #967adc}.novo-toolbar .novo-toolbar-row.novo-color-mountain,.novo-toolbar .novo-toolbar-row.novo-theme-mountain,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain{color:#fff;background:#9678b6}.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mountain .links button,.novo-toolbar .novo-toolbar-row.novo-color-mountain .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .links button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mountain .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-mountain,.novo-toolbar.novo-toolbar-single-row.novo-accent-mountain{border-bottom:2px solid #9678b6}.novo-toolbar .novo-toolbar-row.novo-color-info,.novo-toolbar .novo-toolbar-row.novo-theme-info,.novo-toolbar.novo-toolbar-single-row.novo-color-info,.novo-toolbar.novo-toolbar-single-row.novo-theme-info{color:#fff;background:#4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-info>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-info novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-info novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-info novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-info .links button,.novo-toolbar .novo-toolbar-row.novo-color-info .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-info .links button,.novo-toolbar .novo-toolbar-row.novo-theme-info .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-info .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-info .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-info .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-info .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-info .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-info,.novo-toolbar.novo-toolbar-single-row.novo-accent-info{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-positive,.novo-toolbar .novo-toolbar-row.novo-theme-positive,.novo-toolbar.novo-toolbar-single-row.novo-color-positive,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive{color:#fff;background:#4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-positive novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-positive .links button,.novo-toolbar .novo-toolbar-row.novo-color-positive .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-positive .links button,.novo-toolbar .novo-toolbar-row.novo-theme-positive .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-positive .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-positive .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-positive,.novo-toolbar.novo-toolbar-single-row.novo-accent-positive{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-success,.novo-toolbar .novo-toolbar-row.novo-theme-success,.novo-toolbar.novo-toolbar-single-row.novo-color-success,.novo-toolbar.novo-toolbar-single-row.novo-theme-success{color:#fff;background:#8cc152}.novo-toolbar .novo-toolbar-row.novo-color-success>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-success novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-success novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-success novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-success .links button,.novo-toolbar .novo-toolbar-row.novo-color-success .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-success .links button,.novo-toolbar .novo-toolbar-row.novo-theme-success .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-success .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-success .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-success .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-success .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-success .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-success,.novo-toolbar.novo-toolbar-single-row.novo-accent-success{border-bottom:2px solid #8cc152}.novo-toolbar .novo-toolbar-row.novo-color-negative,.novo-toolbar .novo-toolbar-row.novo-theme-negative,.novo-toolbar.novo-toolbar-single-row.novo-color-negative,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-negative novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-negative .links button,.novo-toolbar .novo-toolbar-row.novo-color-negative .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-negative .links button,.novo-toolbar .novo-toolbar-row.novo-theme-negative .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-negative .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-negative .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-negative,.novo-toolbar.novo-toolbar-single-row.novo-accent-negative{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-danger,.novo-toolbar .novo-toolbar-row.novo-theme-danger,.novo-toolbar.novo-toolbar-single-row.novo-color-danger,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-danger novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-danger .links button,.novo-toolbar .novo-toolbar-row.novo-color-danger .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-danger .links button,.novo-toolbar .novo-toolbar-row.novo-theme-danger .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-danger .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-danger .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-danger,.novo-toolbar.novo-toolbar-single-row.novo-accent-danger{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-error,.novo-toolbar .novo-toolbar-row.novo-theme-error,.novo-toolbar.novo-toolbar-single-row.novo-color-error,.novo-toolbar.novo-toolbar-single-row.novo-theme-error{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-error>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-error novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-error novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-error novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-error .links button,.novo-toolbar .novo-toolbar-row.novo-color-error .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-error .links button,.novo-toolbar .novo-toolbar-row.novo-theme-error .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-error .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-error .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-error .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-error .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-error .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-error,.novo-toolbar.novo-toolbar-single-row.novo-accent-error{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-warning,.novo-toolbar .novo-toolbar-row.novo-theme-warning,.novo-toolbar.novo-toolbar-single-row.novo-color-warning,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning{color:#fff;background:#f6b042}.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-warning novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-warning .links button,.novo-toolbar .novo-toolbar-row.novo-color-warning .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-warning .links button,.novo-toolbar .novo-toolbar-row.novo-theme-warning .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-warning .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-warning .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-warning,.novo-toolbar.novo-toolbar-single-row.novo-accent-warning{border-bottom:2px solid #f6b042}.novo-toolbar .novo-toolbar-row.novo-color-empty,.novo-toolbar .novo-toolbar-row.novo-theme-empty,.novo-toolbar.novo-toolbar-single-row.novo-color-empty,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty{color:#3d464d;background:#cccdcc}.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-empty novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-empty .links button,.novo-toolbar .novo-toolbar-row.novo-color-empty .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-empty .links button,.novo-toolbar .novo-toolbar-row.novo-theme-empty .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-empty .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-empty .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-empty,.novo-toolbar.novo-toolbar-single-row.novo-accent-empty{border-bottom:2px solid #cccdcc}.novo-toolbar .novo-toolbar-row.novo-color-disabled,.novo-toolbar .novo-toolbar-row.novo-theme-disabled,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled{color:#3d464d;background:#bebebe}.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-disabled .links button,.novo-toolbar .novo-toolbar-row.novo-color-disabled .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .links button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-disabled .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-disabled,.novo-toolbar.novo-toolbar-single-row.novo-accent-disabled{border-bottom:2px solid #bebebe}.novo-toolbar .novo-toolbar-row.novo-color-background,.novo-toolbar .novo-toolbar-row.novo-theme-background,.novo-toolbar.novo-toolbar-single-row.novo-color-background,.novo-toolbar.novo-toolbar-single-row.novo-theme-background{color:#3d464d;background:#f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-background>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-background novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-background novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-background novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-background .links button,.novo-toolbar .novo-toolbar-row.novo-color-background .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-background .links button,.novo-toolbar .novo-toolbar-row.novo-theme-background .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-background .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-background .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-background .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-background .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-background .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-background,.novo-toolbar.novo-toolbar-single-row.novo-accent-background{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark{color:#3d464d;background:#e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .links button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .links button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-accent-backgroundDark{border-bottom:2px solid #e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-presentation,.novo-toolbar .novo-toolbar-row.novo-theme-presentation,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation{color:#fff;background:#5b6770}.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-presentation .links button,.novo-toolbar .novo-toolbar-row.novo-color-presentation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-presentation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-presentation,.novo-toolbar.novo-toolbar-single-row.novo-accent-presentation{border-bottom:2px solid #5b6770}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn{color:#3d464d;background:#ff6900}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .links button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-accent-bullhorn{border-bottom:2px solid #ff6900}.novo-toolbar .novo-toolbar-row.novo-color-pulse,.novo-toolbar .novo-toolbar-row.novo-theme-pulse,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse{color:#3d464d;background:#3bafda}.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-pulse .links button,.novo-toolbar .novo-toolbar-row.novo-color-pulse .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .links button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-pulse .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-pulse,.novo-toolbar.novo-toolbar-single-row.novo-accent-pulse{border-bottom:2px solid #3bafda}.novo-toolbar .novo-toolbar-row.novo-color-company,.novo-toolbar .novo-toolbar-row.novo-theme-company,.novo-toolbar.novo-toolbar-single-row.novo-color-company,.novo-toolbar.novo-toolbar-single-row.novo-theme-company{color:#fff;background:#3399dd}.novo-toolbar .novo-toolbar-row.novo-color-company>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-company novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-company novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-company novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-company .links button,.novo-toolbar .novo-toolbar-row.novo-color-company .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-company .links button,.novo-toolbar .novo-toolbar-row.novo-theme-company .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-company .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-company .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-company .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-company .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-company .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-company,.novo-toolbar.novo-toolbar-single-row.novo-accent-company{border-bottom:2px solid #3399dd}.novo-toolbar .novo-toolbar-row.novo-color-candidate,.novo-toolbar .novo-toolbar-row.novo-theme-candidate,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate{color:#fff;background:#44bb77}.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-candidate .links button,.novo-toolbar .novo-toolbar-row.novo-color-candidate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .links button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-candidate .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-candidate,.novo-toolbar.novo-toolbar-single-row.novo-accent-candidate{border-bottom:2px solid #44bb77}.novo-toolbar .novo-toolbar-row.novo-color-lead,.novo-toolbar .novo-toolbar-row.novo-theme-lead,.novo-toolbar.novo-toolbar-single-row.novo-color-lead,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead{color:#fff;background:#aa6699}.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lead novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lead .links button,.novo-toolbar .novo-toolbar-row.novo-color-lead .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lead .links button,.novo-toolbar .novo-toolbar-row.novo-theme-lead .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lead .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-lead .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-lead,.novo-toolbar.novo-toolbar-single-row.novo-accent-lead{border-bottom:2px solid #aa6699}.novo-toolbar .novo-toolbar-row.novo-color-contact,.novo-toolbar .novo-toolbar-row.novo-theme-contact,.novo-toolbar.novo-toolbar-single-row.novo-color-contact,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact{color:#fff;background:#ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contact novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contact .links button,.novo-toolbar .novo-toolbar-row.novo-color-contact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contact .links button,.novo-toolbar .novo-toolbar-row.novo-theme-contact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contact .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-contact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-contact,.novo-toolbar.novo-toolbar-single-row.novo-accent-contact{border-bottom:2px solid #ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact{color:#fff;background:#ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .links button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .links button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-accent-clientcontact{border-bottom:2px solid #ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-opportunity,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity{color:#fff;background:#662255}.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity .links button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .links button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-accent-opportunity{border-bottom:2px solid #662255}.novo-toolbar .novo-toolbar-row.novo-color-job,.novo-toolbar .novo-toolbar-row.novo-theme-job,.novo-toolbar.novo-toolbar-single-row.novo-color-job,.novo-toolbar.novo-toolbar-single-row.novo-theme-job{color:#fff;background:#bb5566}.novo-toolbar .novo-toolbar-row.novo-color-job>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-job novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-job novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-job novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-job .links button,.novo-toolbar .novo-toolbar-row.novo-color-job .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-job .links button,.novo-toolbar .novo-toolbar-row.novo-theme-job .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-job .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-job .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-job .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-job .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-job .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-job,.novo-toolbar.novo-toolbar-single-row.novo-accent-job{border-bottom:2px solid #bb5566}.novo-toolbar .novo-toolbar-row.novo-color-joborder,.novo-toolbar .novo-toolbar-row.novo-theme-joborder,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder{color:#fff;background:#bb5566}.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-joborder .links button,.novo-toolbar .novo-toolbar-row.novo-color-joborder .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .links button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-joborder .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-joborder,.novo-toolbar.novo-toolbar-single-row.novo-accent-joborder{border-bottom:2px solid #bb5566}.novo-toolbar .novo-toolbar-row.novo-color-submission,.novo-toolbar .novo-toolbar-row.novo-theme-submission,.novo-toolbar.novo-toolbar-single-row.novo-color-submission,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission{color:#3d464d;background:#a9adbb}.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-submission novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-submission .links button,.novo-toolbar .novo-toolbar-row.novo-color-submission .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-submission .links button,.novo-toolbar .novo-toolbar-row.novo-theme-submission .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-submission .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-submission .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-submission,.novo-toolbar.novo-toolbar-single-row.novo-accent-submission{border-bottom:2px solid #a9adbb}.novo-toolbar .novo-toolbar-row.novo-color-sendout,.novo-toolbar .novo-toolbar-row.novo-theme-sendout,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout{color:#fff;background:#747884}.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sendout .links button,.novo-toolbar .novo-toolbar-row.novo-color-sendout .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sendout .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-sendout,.novo-toolbar.novo-toolbar-single-row.novo-accent-sendout{border-bottom:2px solid #747884}.novo-toolbar .novo-toolbar-row.novo-color-placement,.novo-toolbar .novo-toolbar-row.novo-theme-placement,.novo-toolbar.novo-toolbar-single-row.novo-color-placement,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement{color:#fff;background:#0b344f}.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-placement novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-placement .links button,.novo-toolbar .novo-toolbar-row.novo-color-placement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-placement .links button,.novo-toolbar .novo-toolbar-row.novo-theme-placement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-placement .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-placement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-placement,.novo-toolbar.novo-toolbar-single-row.novo-accent-placement{border-bottom:2px solid #0b344f}.novo-toolbar .novo-toolbar-row.novo-color-note,.novo-toolbar .novo-toolbar-row.novo-theme-note,.novo-toolbar.novo-toolbar-single-row.novo-color-note,.novo-toolbar.novo-toolbar-single-row.novo-theme-note{color:#fff;background:#747884}.novo-toolbar .novo-toolbar-row.novo-color-note>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-note novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-note novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-note novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-note .links button,.novo-toolbar .novo-toolbar-row.novo-color-note .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-note .links button,.novo-toolbar .novo-toolbar-row.novo-theme-note .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-note .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-note .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-note .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-note .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-note .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-note,.novo-toolbar.novo-toolbar-single-row.novo-accent-note{border-bottom:2px solid #747884}.novo-toolbar .novo-toolbar-row.novo-color-contract,.novo-toolbar .novo-toolbar-row.novo-theme-contract,.novo-toolbar.novo-toolbar-single-row.novo-color-contract,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract{color:#fff;background:#454ea0}.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contract novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contract .links button,.novo-toolbar .novo-toolbar-row.novo-color-contract .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contract .links button,.novo-toolbar .novo-toolbar-row.novo-theme-contract .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contract .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-contract .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-contract,.novo-toolbar.novo-toolbar-single-row.novo-accent-contract{border-bottom:2px solid #454ea0}.novo-toolbar .novo-toolbar-row.novo-color-jobCode,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode .links button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .links button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-accent-jobCode{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-earnCode,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode .links button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .links button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-accent-earnCode{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .links button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .links button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-accent-invoiceStatement{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-accent-billableCharge{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-accent-payableCharge{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-user,.novo-toolbar .novo-toolbar-row.novo-theme-user,.novo-toolbar.novo-toolbar-single-row.novo-color-user,.novo-toolbar.novo-toolbar-single-row.novo-theme-user{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-user>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-user novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-user novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-user novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-user .links button,.novo-toolbar .novo-toolbar-row.novo-color-user .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-user .links button,.novo-toolbar .novo-toolbar-row.novo-theme-user .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-user .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-user .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-user .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-user .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-user .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-user,.novo-toolbar.novo-toolbar-single-row.novo-accent-user{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .links button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .links button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-accent-corporateUser{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-distributionList,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList .links button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .links button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-accent-distributionList{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-credential,.novo-toolbar .novo-toolbar-row.novo-theme-credential,.novo-toolbar.novo-toolbar-single-row.novo-color-credential,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-credential novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-credential .links button,.novo-toolbar .novo-toolbar-row.novo-color-credential .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-credential .links button,.novo-toolbar .novo-toolbar-row.novo-theme-credential .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-credential .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-credential .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-credential,.novo-toolbar.novo-toolbar-single-row.novo-accent-credential{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-person,.novo-toolbar .novo-toolbar-row.novo-theme-person,.novo-toolbar.novo-toolbar-single-row.novo-color-person,.novo-toolbar.novo-toolbar-single-row.novo-theme-person{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-person>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-person novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-person novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-person novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-person .links button,.novo-toolbar .novo-toolbar-row.novo-color-person .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-person .links button,.novo-toolbar .novo-toolbar-row.novo-theme-person .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-person .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-person .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-person .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-person .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-person .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-person,.novo-toolbar.novo-toolbar-single-row.novo-accent-person{border-bottom:2px solid #696d79}.novo-toolbar.novo-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbar, decorators: [{
            type: Component,
            args: [{ selector: 'novo-toolbar', inputs: ['color', 'gap'], host: {
                        class: 'novo-toolbar',
                        '[class.novo-toolbar-multiple-rows]': '_toolbarRows.length > 0',
                        '[class.novo-toolbar-single-row]': '_toolbarRows.length === 0',
                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: "<ng-content></ng-content>\n<ng-content select=\"novo-toolbar-row\"></ng-content>", styles: [".novo-toolbar .novo-toolbar-row,.novo-toolbar.novo-toolbar-single-row{display:flex;box-sizing:border-box;background-color:var(--background-bright);color:var(--text-main);padding:0 1rem;width:100%;flex-direction:row;align-items:center;min-height:5rem;white-space:nowrap}.novo-toolbar .novo-toolbar-row .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row novo-nav,.novo-toolbar .novo-toolbar-row novo-tab,.novo-toolbar.novo-toolbar-single-row .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row novo-nav,.novo-toolbar.novo-toolbar-single-row novo-tab{height:inherit;min-height:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black,.novo-toolbar .novo-toolbar-row.novo-theme-black,.novo-toolbar.novo-toolbar-single-row.novo-color-black,.novo-toolbar.novo-toolbar-single-row.novo-theme-black{color:#fff;background:#000000}.novo-toolbar .novo-toolbar-row.novo-color-black>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-black>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-black novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-black>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-black>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-black>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-black novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-black .links button,.novo-toolbar .novo-toolbar-row.novo-color-black .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-black novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-black .links button,.novo-toolbar .novo-toolbar-row.novo-theme-black .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-black novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-black .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-black .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-black .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-black .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-black .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-black .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-black,.novo-toolbar.novo-toolbar-single-row.novo-accent-black{border-bottom:2px solid #000000}.novo-toolbar .novo-toolbar-row.novo-color-white,.novo-toolbar .novo-toolbar-row.novo-theme-white,.novo-toolbar.novo-toolbar-single-row.novo-color-white,.novo-toolbar.novo-toolbar-single-row.novo-theme-white{color:#3d464d;background:#ffffff}.novo-toolbar .novo-toolbar-row.novo-color-white>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-white>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-white novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-white>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-white>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-white>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-white novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-white novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-white .links button,.novo-toolbar .novo-toolbar-row.novo-color-white .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-white novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-white .links button,.novo-toolbar .novo-toolbar-row.novo-theme-white .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-white novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-white .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-white .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-white .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-white .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-white .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-white .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-white,.novo-toolbar.novo-toolbar-single-row.novo-accent-white{border-bottom:2px solid #ffffff}.novo-toolbar .novo-toolbar-row.novo-color-gray,.novo-toolbar .novo-toolbar-row.novo-theme-gray,.novo-toolbar.novo-toolbar-single-row.novo-color-gray,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray{color:#3d464d;background:#9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-gray>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-gray>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-gray>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-gray novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-gray novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-gray .links button,.novo-toolbar .novo-toolbar-row.novo-color-gray .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-gray novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-gray .links button,.novo-toolbar .novo-toolbar-row.novo-theme-gray .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-gray .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-gray .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-gray .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-gray .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-gray,.novo-toolbar.novo-toolbar-single-row.novo-accent-gray{border-bottom:2px solid #9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-grey,.novo-toolbar .novo-toolbar-row.novo-theme-grey,.novo-toolbar.novo-toolbar-single-row.novo-color-grey,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey{color:#3d464d;background:#9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grey>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grey>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grey>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grey novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grey novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grey .links button,.novo-toolbar .novo-toolbar-row.novo-color-grey .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grey novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grey .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grey .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grey .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grey .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grey .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grey .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-grey,.novo-toolbar.novo-toolbar-single-row.novo-accent-grey{border-bottom:2px solid #9e9e9e}.novo-toolbar .novo-toolbar-row.novo-color-offWhite,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite{color:#3d464d;background:#f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-offWhite>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite .links button,.novo-toolbar .novo-toolbar-row.novo-color-offWhite .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .links button,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-offWhite .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-offWhite .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-offWhite,.novo-toolbar.novo-toolbar-single-row.novo-accent-offWhite{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-bright,.novo-toolbar .novo-toolbar-row.novo-theme-bright,.novo-toolbar.novo-toolbar-single-row.novo-color-bright,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright{color:#3d464d;background:#f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bright>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bright>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bright>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bright novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bright novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bright .links button,.novo-toolbar .novo-toolbar-row.novo-color-bright .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bright novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bright .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bright .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bright .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bright .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bright .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bright .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-bright,.novo-toolbar.novo-toolbar-single-row.novo-accent-bright{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-light,.novo-toolbar .novo-toolbar-row.novo-theme-light,.novo-toolbar.novo-toolbar-single-row.novo-color-light,.novo-toolbar.novo-toolbar-single-row.novo-theme-light{color:#3d464d;background:#dbdbdb}.novo-toolbar .novo-toolbar-row.novo-color-light>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-light>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-light novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-light>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-light>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-light>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-light novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-light novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-light .links button,.novo-toolbar .novo-toolbar-row.novo-color-light .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-light novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-light .links button,.novo-toolbar .novo-toolbar-row.novo-theme-light .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-light novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-light .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-light .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-light .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-light .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-light .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-light .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-light,.novo-toolbar.novo-toolbar-single-row.novo-accent-light{border-bottom:2px solid #dbdbdb}.novo-toolbar .novo-toolbar-row.novo-color-neutral,.novo-toolbar .novo-toolbar-row.novo-theme-neutral,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral{color:#fff;background:#4f5361}.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-neutral>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-neutral>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-neutral novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-neutral .links button,.novo-toolbar .novo-toolbar-row.novo-color-neutral .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .links button,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-neutral .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-neutral .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-neutral .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-neutral .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-neutral,.novo-toolbar.novo-toolbar-single-row.novo-accent-neutral{border-bottom:2px solid #4f5361}.novo-toolbar .novo-toolbar-row.novo-color-dark,.novo-toolbar .novo-toolbar-row.novo-theme-dark,.novo-toolbar.novo-toolbar-single-row.novo-color-dark,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark{color:#fff;background:#3d464d}.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-dark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-dark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-dark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-dark novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-dark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-dark .links button,.novo-toolbar .novo-toolbar-row.novo-color-dark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-dark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-dark .links button,.novo-toolbar .novo-toolbar-row.novo-theme-dark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-dark .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-dark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-dark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-dark .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-dark,.novo-toolbar.novo-toolbar-single-row.novo-accent-dark{border-bottom:2px solid #3d464d}.novo-toolbar .novo-toolbar-row.novo-color-orange,.novo-toolbar .novo-toolbar-row.novo-theme-orange,.novo-toolbar.novo-toolbar-single-row.novo-color-orange,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange{color:#3d464d;background:#ff6900}.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-orange>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-orange>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-orange>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-orange novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-orange novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-orange .links button,.novo-toolbar .novo-toolbar-row.novo-color-orange .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-orange novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-orange .links button,.novo-toolbar .novo-toolbar-row.novo-theme-orange .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-orange .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-orange .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-orange .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-orange .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-orange,.novo-toolbar.novo-toolbar-single-row.novo-accent-orange{border-bottom:2px solid #ff6900}.novo-toolbar .novo-toolbar-row.novo-color-navigation,.novo-toolbar .novo-toolbar-row.novo-theme-navigation,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation{color:#fff;background:#202945}.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-navigation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-navigation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-navigation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navigation .links button,.novo-toolbar .novo-toolbar-row.novo-color-navigation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navigation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-navigation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-navigation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-navigation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-navigation,.novo-toolbar.novo-toolbar-single-row.novo-accent-navigation{border-bottom:2px solid #202945}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue{color:#fff;background:#009bdf}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .links button,.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .links button,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-skyBlue .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-skyBlue .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-skyBlue,.novo-toolbar.novo-toolbar-single-row.novo-accent-skyBlue{border-bottom:2px solid #009bdf}.novo-toolbar .novo-toolbar-row.novo-color-steel,.novo-toolbar .novo-toolbar-row.novo-theme-steel,.novo-toolbar.novo-toolbar-single-row.novo-color-steel,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel{color:#fff;background:#5b6770}.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-steel>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-steel>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-steel>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-steel novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-steel novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-steel .links button,.novo-toolbar .novo-toolbar-row.novo-color-steel .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-steel novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-steel .links button,.novo-toolbar .novo-toolbar-row.novo-theme-steel .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-steel .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-steel .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-steel .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-steel .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-steel,.novo-toolbar.novo-toolbar-single-row.novo-accent-steel{border-bottom:2px solid #5b6770}.novo-toolbar .novo-toolbar-row.novo-color-metal,.novo-toolbar .novo-toolbar-row.novo-theme-metal,.novo-toolbar.novo-toolbar-single-row.novo-color-metal,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal{color:#fff;background:#637893}.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-metal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-metal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-metal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-metal novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-metal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-metal .links button,.novo-toolbar .novo-toolbar-row.novo-color-metal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-metal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-metal .links button,.novo-toolbar .novo-toolbar-row.novo-theme-metal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-metal .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-metal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-metal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-metal .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-metal,.novo-toolbar.novo-toolbar-single-row.novo-accent-metal{border-bottom:2px solid #637893}.novo-toolbar .novo-toolbar-row.novo-color-sand,.novo-toolbar .novo-toolbar-row.novo-theme-sand,.novo-toolbar.novo-toolbar-single-row.novo-color-sand,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand{color:#3d464d;background:#f4f4f4}.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sand>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sand>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sand>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sand novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sand novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sand .links button,.novo-toolbar .novo-toolbar-row.novo-color-sand .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sand novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sand .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sand .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sand .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sand .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sand .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sand .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-sand,.novo-toolbar.novo-toolbar-single-row.novo-accent-sand{border-bottom:2px solid #f4f4f4}.novo-toolbar .novo-toolbar-row.novo-color-silver,.novo-toolbar .novo-toolbar-row.novo-theme-silver,.novo-toolbar.novo-toolbar-single-row.novo-color-silver,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver{color:#3d464d;background:#e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-silver>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-silver>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-silver>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-silver novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-silver novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-silver .links button,.novo-toolbar .novo-toolbar-row.novo-color-silver .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-silver novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-silver .links button,.novo-toolbar .novo-toolbar-row.novo-theme-silver .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-silver .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-silver .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-silver .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-silver .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-silver,.novo-toolbar.novo-toolbar-single-row.novo-accent-silver{border-bottom:2px solid #e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-stone,.novo-toolbar .novo-toolbar-row.novo-theme-stone,.novo-toolbar.novo-toolbar-single-row.novo-color-stone,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone{color:#3d464d;background:#bebebe}.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-stone>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-stone>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-stone>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-stone novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-stone novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-stone .links button,.novo-toolbar .novo-toolbar-row.novo-color-stone .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-stone novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-stone .links button,.novo-toolbar .novo-toolbar-row.novo-theme-stone .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-stone .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-stone .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-stone .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-stone .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-stone,.novo-toolbar.novo-toolbar-single-row.novo-accent-stone{border-bottom:2px solid #bebebe}.novo-toolbar .novo-toolbar-row.novo-color-ash,.novo-toolbar .novo-toolbar-row.novo-theme-ash,.novo-toolbar.novo-toolbar-single-row.novo-color-ash,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash{color:#3d464d;background:#a0a0a0}.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-ash>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-ash>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-ash>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ash novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-ash novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ash .links button,.novo-toolbar .novo-toolbar-row.novo-color-ash .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-ash novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ash .links button,.novo-toolbar .novo-toolbar-row.novo-theme-ash .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ash .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-ash .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-ash .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-ash .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-ash,.novo-toolbar.novo-toolbar-single-row.novo-accent-ash{border-bottom:2px solid #a0a0a0}.novo-toolbar .novo-toolbar-row.novo-color-slate,.novo-toolbar .novo-toolbar-row.novo-theme-slate,.novo-toolbar.novo-toolbar-single-row.novo-color-slate,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate{color:#fff;background:#707070}.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-slate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-slate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-slate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-slate novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-slate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-slate .links button,.novo-toolbar .novo-toolbar-row.novo-color-slate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-slate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-slate .links button,.novo-toolbar .novo-toolbar-row.novo-theme-slate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-slate .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-slate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-slate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-slate .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-slate,.novo-toolbar.novo-toolbar-single-row.novo-accent-slate{border-bottom:2px solid #707070}.novo-toolbar .novo-toolbar-row.novo-color-onyx,.novo-toolbar .novo-toolbar-row.novo-theme-onyx,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx{color:#fff;background:#526980}.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-onyx>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-onyx>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-onyx novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-onyx .links button,.novo-toolbar .novo-toolbar-row.novo-color-onyx .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .links button,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-onyx .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-onyx .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-onyx .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-onyx .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-onyx,.novo-toolbar.novo-toolbar-single-row.novo-accent-onyx{border-bottom:2px solid #526980}.novo-toolbar .novo-toolbar-row.novo-color-charcoal,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal{color:#fff;background:#282828}.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-charcoal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal .links button,.novo-toolbar .novo-toolbar-row.novo-color-charcoal .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .links button,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-charcoal .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-charcoal .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-charcoal,.novo-toolbar.novo-toolbar-single-row.novo-accent-charcoal{border-bottom:2px solid #282828}.novo-toolbar .novo-toolbar-row.novo-color-moonlight,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight{color:#fff;background:#1a242f}.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-moonlight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight .links button,.novo-toolbar .novo-toolbar-row.novo-color-moonlight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .links button,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-moonlight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-moonlight .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-moonlight,.novo-toolbar.novo-toolbar-single-row.novo-accent-moonlight{border-bottom:2px solid #1a242f}.novo-toolbar .novo-toolbar-row.novo-color-midnight,.novo-toolbar .novo-toolbar-row.novo-theme-midnight,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight{color:#fff;background:#202945}.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-midnight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-midnight>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-midnight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-midnight .links button,.novo-toolbar .novo-toolbar-row.novo-color-midnight .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .links button,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-midnight .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-midnight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-midnight .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-midnight .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-midnight,.novo-toolbar.novo-toolbar-single-row.novo-accent-midnight{border-bottom:2px solid #202945}.novo-toolbar .novo-toolbar-row.novo-color-darkness,.novo-toolbar .novo-toolbar-row.novo-theme-darkness,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness{color:#fff;background:#161f27}.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-darkness>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-darkness>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-darkness novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-darkness .links button,.novo-toolbar .novo-toolbar-row.novo-color-darkness .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .links button,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-darkness .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-darkness .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-darkness .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-darkness .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-darkness,.novo-toolbar.novo-toolbar-single-row.novo-accent-darkness{border-bottom:2px solid #161f27}.novo-toolbar .novo-toolbar-row.novo-color-navy,.novo-toolbar .novo-toolbar-row.novo-theme-navy,.novo-toolbar.novo-toolbar-single-row.novo-color-navy,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy{color:#fff;background:#0d2d42}.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-navy>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-navy>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-navy>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navy novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-navy novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-navy .links button,.novo-toolbar .novo-toolbar-row.novo-color-navy .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-navy novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-navy .links button,.novo-toolbar .novo-toolbar-row.novo-theme-navy .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-navy .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-navy .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-navy .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-navy .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-navy,.novo-toolbar.novo-toolbar-single-row.novo-accent-navy{border-bottom:2px solid #0d2d42}.novo-toolbar .novo-toolbar-row.novo-color-aqua,.novo-toolbar .novo-toolbar-row.novo-theme-aqua,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua{color:#3d464d;background:#3bafda}.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-aqua>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-aqua>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-aqua novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-aqua .links button,.novo-toolbar .novo-toolbar-row.novo-color-aqua .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .links button,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-aqua .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-aqua .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-aqua .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-aqua .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-aqua,.novo-toolbar.novo-toolbar-single-row.novo-accent-aqua{border-bottom:2px solid #3bafda}.novo-toolbar .novo-toolbar-row.novo-color-ocean,.novo-toolbar .novo-toolbar-row.novo-theme-ocean,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean{color:#fff;background:#4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-ocean>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-ocean>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-ocean novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-ocean .links button,.novo-toolbar .novo-toolbar-row.novo-color-ocean .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .links button,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-ocean .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-ocean .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-ocean .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-ocean .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-ocean,.novo-toolbar.novo-toolbar-single-row.novo-accent-ocean{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-mint,.novo-toolbar .novo-toolbar-row.novo-theme-mint,.novo-toolbar.novo-toolbar-single-row.novo-color-mint,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint{color:#3d464d;background:#37bc9b}.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-mint>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-mint>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-mint>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mint novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-mint novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mint .links button,.novo-toolbar .novo-toolbar-row.novo-color-mint .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-mint novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mint .links button,.novo-toolbar .novo-toolbar-row.novo-theme-mint .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mint .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-mint .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-mint .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-mint .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-mint,.novo-toolbar.novo-toolbar-single-row.novo-accent-mint{border-bottom:2px solid #37bc9b}.novo-toolbar .novo-toolbar-row.novo-color-grass,.novo-toolbar .novo-toolbar-row.novo-theme-grass,.novo-toolbar.novo-toolbar-single-row.novo-color-grass,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass{color:#fff;background:#8cc152}.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grass>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grass>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grass>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grass novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grass novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grass .links button,.novo-toolbar .novo-toolbar-row.novo-color-grass .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grass novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grass .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grass .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grass .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grass .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grass .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grass .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-grass,.novo-toolbar.novo-toolbar-single-row.novo-accent-grass{border-bottom:2px solid #8cc152}.novo-toolbar .novo-toolbar-row.novo-color-sunflower,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower{color:#fff;background:#f6b042}.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sunflower>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower .links button,.novo-toolbar .novo-toolbar-row.novo-color-sunflower .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sunflower .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sunflower .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-sunflower,.novo-toolbar.novo-toolbar-single-row.novo-accent-sunflower{border-bottom:2px solid #f6b042}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet{color:#fff;background:#eb6845}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .links button,.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bittersweet .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bittersweet .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-bittersweet,.novo-toolbar.novo-toolbar-single-row.novo-accent-bittersweet{border-bottom:2px solid #eb6845}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .links button,.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .links button,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-grapefruit .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-grapefruit .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-grapefruit,.novo-toolbar.novo-toolbar-single-row.novo-accent-grapefruit{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-carnation,.novo-toolbar .novo-toolbar-row.novo-theme-carnation,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation{color:#fff;background:#d770ad}.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-carnation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-carnation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-carnation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-carnation .links button,.novo-toolbar .novo-toolbar-row.novo-color-carnation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-carnation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-carnation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-carnation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-carnation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-carnation,.novo-toolbar.novo-toolbar-single-row.novo-accent-carnation{border-bottom:2px solid #d770ad}.novo-toolbar .novo-toolbar-row.novo-color-lavender,.novo-toolbar .novo-toolbar-row.novo-theme-lavender,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender{color:#fff;background:#967adc}.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-lavender>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-lavender>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-lavender novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lavender .links button,.novo-toolbar .novo-toolbar-row.novo-color-lavender .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .links button,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lavender .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-lavender .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-lavender .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-lavender .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-lavender,.novo-toolbar.novo-toolbar-single-row.novo-accent-lavender{border-bottom:2px solid #967adc}.novo-toolbar .novo-toolbar-row.novo-color-mountain,.novo-toolbar .novo-toolbar-row.novo-theme-mountain,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain{color:#fff;background:#9678b6}.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-mountain>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-mountain>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-mountain novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-mountain .links button,.novo-toolbar .novo-toolbar-row.novo-color-mountain .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .links button,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-mountain .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-mountain .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-mountain .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-mountain .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-mountain,.novo-toolbar.novo-toolbar-single-row.novo-accent-mountain{border-bottom:2px solid #9678b6}.novo-toolbar .novo-toolbar-row.novo-color-info,.novo-toolbar .novo-toolbar-row.novo-theme-info,.novo-toolbar.novo-toolbar-single-row.novo-color-info,.novo-toolbar.novo-toolbar-single-row.novo-theme-info{color:#fff;background:#4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-info>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-info>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-info novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-info>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-info>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-info>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-info novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-info novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-info .links button,.novo-toolbar .novo-toolbar-row.novo-color-info .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-info novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-info .links button,.novo-toolbar .novo-toolbar-row.novo-theme-info .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-info novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-info .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-info .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-info .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-info .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-info .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-info .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-info,.novo-toolbar.novo-toolbar-single-row.novo-accent-info{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-positive,.novo-toolbar .novo-toolbar-row.novo-theme-positive,.novo-toolbar.novo-toolbar-single-row.novo-color-positive,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive{color:#fff;background:#4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-positive>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-positive>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-positive>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-positive novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-positive novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-positive .links button,.novo-toolbar .novo-toolbar-row.novo-color-positive .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-positive novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-positive .links button,.novo-toolbar .novo-toolbar-row.novo-theme-positive .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-positive .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-positive .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-positive .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-positive .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-positive,.novo-toolbar.novo-toolbar-single-row.novo-accent-positive{border-bottom:2px solid #4a89dc}.novo-toolbar .novo-toolbar-row.novo-color-success,.novo-toolbar .novo-toolbar-row.novo-theme-success,.novo-toolbar.novo-toolbar-single-row.novo-color-success,.novo-toolbar.novo-toolbar-single-row.novo-theme-success{color:#fff;background:#8cc152}.novo-toolbar .novo-toolbar-row.novo-color-success>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-success>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-success novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-success>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-success>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-success>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-success novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-success novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-success .links button,.novo-toolbar .novo-toolbar-row.novo-color-success .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-success novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-success .links button,.novo-toolbar .novo-toolbar-row.novo-theme-success .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-success novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-success .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-success .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-success .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-success .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-success .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-success .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-success,.novo-toolbar.novo-toolbar-single-row.novo-accent-success{border-bottom:2px solid #8cc152}.novo-toolbar .novo-toolbar-row.novo-color-negative,.novo-toolbar .novo-toolbar-row.novo-theme-negative,.novo-toolbar.novo-toolbar-single-row.novo-color-negative,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-negative>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-negative>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-negative>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-negative novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-negative novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-negative .links button,.novo-toolbar .novo-toolbar-row.novo-color-negative .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-negative novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-negative .links button,.novo-toolbar .novo-toolbar-row.novo-theme-negative .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-negative .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-negative .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-negative .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-negative .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-negative,.novo-toolbar.novo-toolbar-single-row.novo-accent-negative{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-danger,.novo-toolbar .novo-toolbar-row.novo-theme-danger,.novo-toolbar.novo-toolbar-single-row.novo-color-danger,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-danger>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-danger>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-danger>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-danger novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-danger novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-danger .links button,.novo-toolbar .novo-toolbar-row.novo-color-danger .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-danger novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-danger .links button,.novo-toolbar .novo-toolbar-row.novo-theme-danger .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-danger .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-danger .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-danger .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-danger .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-danger,.novo-toolbar.novo-toolbar-single-row.novo-accent-danger{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-error,.novo-toolbar .novo-toolbar-row.novo-theme-error,.novo-toolbar.novo-toolbar-single-row.novo-color-error,.novo-toolbar.novo-toolbar-single-row.novo-theme-error{color:#fff;background:#da4453}.novo-toolbar .novo-toolbar-row.novo-color-error>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-error>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-error novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-error>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-error>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-error>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-error novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-error novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-error .links button,.novo-toolbar .novo-toolbar-row.novo-color-error .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-error novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-error .links button,.novo-toolbar .novo-toolbar-row.novo-theme-error .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-error novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-error .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-error .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-error .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-error .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-error .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-error .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-error,.novo-toolbar.novo-toolbar-single-row.novo-accent-error{border-bottom:2px solid #da4453}.novo-toolbar .novo-toolbar-row.novo-color-warning,.novo-toolbar .novo-toolbar-row.novo-theme-warning,.novo-toolbar.novo-toolbar-single-row.novo-color-warning,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning{color:#fff;background:#f6b042}.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-warning>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-warning>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-warning>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-warning novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-warning novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-warning .links button,.novo-toolbar .novo-toolbar-row.novo-color-warning .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-warning novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-warning .links button,.novo-toolbar .novo-toolbar-row.novo-theme-warning .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-warning .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-warning .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-warning .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-warning .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-warning,.novo-toolbar.novo-toolbar-single-row.novo-accent-warning{border-bottom:2px solid #f6b042}.novo-toolbar .novo-toolbar-row.novo-color-empty,.novo-toolbar .novo-toolbar-row.novo-theme-empty,.novo-toolbar.novo-toolbar-single-row.novo-color-empty,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty{color:#3d464d;background:#cccdcc}.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-empty>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-empty>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-empty>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-empty novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-empty novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-empty .links button,.novo-toolbar .novo-toolbar-row.novo-color-empty .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-empty novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-empty .links button,.novo-toolbar .novo-toolbar-row.novo-theme-empty .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-empty .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-empty .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-empty .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-empty .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-empty,.novo-toolbar.novo-toolbar-single-row.novo-accent-empty{border-bottom:2px solid #cccdcc}.novo-toolbar .novo-toolbar-row.novo-color-disabled,.novo-toolbar .novo-toolbar-row.novo-theme-disabled,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled{color:#3d464d;background:#bebebe}.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-disabled>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-disabled>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-disabled novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-disabled .links button,.novo-toolbar .novo-toolbar-row.novo-color-disabled .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .links button,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-disabled .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-disabled .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-disabled .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-disabled .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-disabled,.novo-toolbar.novo-toolbar-single-row.novo-accent-disabled{border-bottom:2px solid #bebebe}.novo-toolbar .novo-toolbar-row.novo-color-background,.novo-toolbar .novo-toolbar-row.novo-theme-background,.novo-toolbar.novo-toolbar-single-row.novo-color-background,.novo-toolbar.novo-toolbar-single-row.novo-theme-background{color:#3d464d;background:#f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-background>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-background>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-background novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-background>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-background>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-background>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-background novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-background novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-background .links button,.novo-toolbar .novo-toolbar-row.novo-color-background .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-background novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-background .links button,.novo-toolbar .novo-toolbar-row.novo-theme-background .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-background novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-background .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-background .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-background .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-background .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-background .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-background .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-background,.novo-toolbar.novo-toolbar-single-row.novo-accent-background{border-bottom:2px solid #f7f7f7}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark{color:#3d464d;background:#e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .links button,.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .links button,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-backgroundDark .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-backgroundDark .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-backgroundDark,.novo-toolbar.novo-toolbar-single-row.novo-accent-backgroundDark{border-bottom:2px solid #e2e2e2}.novo-toolbar .novo-toolbar-row.novo-color-presentation,.novo-toolbar .novo-toolbar-row.novo-theme-presentation,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation{color:#fff;background:#5b6770}.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-presentation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-presentation>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-presentation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-presentation .links button,.novo-toolbar .novo-toolbar-row.novo-color-presentation .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .links button,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-presentation .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-presentation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-presentation .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-presentation .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-presentation,.novo-toolbar.novo-toolbar-single-row.novo-accent-presentation{border-bottom:2px solid #5b6770}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn{color:#3d464d;background:#ff6900}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .links button,.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .links button,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-bullhorn .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-bullhorn .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-bullhorn,.novo-toolbar.novo-toolbar-single-row.novo-accent-bullhorn{border-bottom:2px solid #ff6900}.novo-toolbar .novo-toolbar-row.novo-color-pulse,.novo-toolbar .novo-toolbar-row.novo-theme-pulse,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse{color:#3d464d;background:#3bafda}.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-pulse>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-pulse>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-pulse novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-pulse .links button,.novo-toolbar .novo-toolbar-row.novo-color-pulse .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .links button,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-pulse .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-pulse .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-pulse .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-pulse .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-pulse,.novo-toolbar.novo-toolbar-single-row.novo-accent-pulse{border-bottom:2px solid #3bafda}.novo-toolbar .novo-toolbar-row.novo-color-company,.novo-toolbar .novo-toolbar-row.novo-theme-company,.novo-toolbar.novo-toolbar-single-row.novo-color-company,.novo-toolbar.novo-toolbar-single-row.novo-theme-company{color:#fff;background:#3399dd}.novo-toolbar .novo-toolbar-row.novo-color-company>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-company>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-company novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-company>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-company>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-company>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-company novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-company novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-company .links button,.novo-toolbar .novo-toolbar-row.novo-color-company .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-company novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-company .links button,.novo-toolbar .novo-toolbar-row.novo-theme-company .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-company novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-company .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-company .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-company .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-company .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-company .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-company .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-company,.novo-toolbar.novo-toolbar-single-row.novo-accent-company{border-bottom:2px solid #3399dd}.novo-toolbar .novo-toolbar-row.novo-color-candidate,.novo-toolbar .novo-toolbar-row.novo-theme-candidate,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate{color:#fff;background:#44bb77}.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-candidate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-candidate>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-candidate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-candidate .links button,.novo-toolbar .novo-toolbar-row.novo-color-candidate .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .links button,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-candidate .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-candidate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-candidate .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-candidate .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-candidate,.novo-toolbar.novo-toolbar-single-row.novo-accent-candidate{border-bottom:2px solid #44bb77}.novo-toolbar .novo-toolbar-row.novo-color-lead,.novo-toolbar .novo-toolbar-row.novo-theme-lead,.novo-toolbar.novo-toolbar-single-row.novo-color-lead,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead{color:#fff;background:#aa6699}.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-lead>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-lead>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-lead>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lead novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-lead novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-lead .links button,.novo-toolbar .novo-toolbar-row.novo-color-lead .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-lead novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-lead .links button,.novo-toolbar .novo-toolbar-row.novo-theme-lead .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-lead .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-lead .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-lead .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-lead .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-lead,.novo-toolbar.novo-toolbar-single-row.novo-accent-lead{border-bottom:2px solid #aa6699}.novo-toolbar .novo-toolbar-row.novo-color-contact,.novo-toolbar .novo-toolbar-row.novo-theme-contact,.novo-toolbar.novo-toolbar-single-row.novo-color-contact,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact{color:#fff;background:#ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-contact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-contact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-contact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contact novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-contact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contact .links button,.novo-toolbar .novo-toolbar-row.novo-color-contact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-contact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contact .links button,.novo-toolbar .novo-toolbar-row.novo-theme-contact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contact .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-contact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-contact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-contact .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-contact,.novo-toolbar.novo-toolbar-single-row.novo-accent-contact{border-bottom:2px solid #ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact{color:#fff;background:#ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .links button,.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .links button,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-clientcontact .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-clientcontact .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-clientcontact,.novo-toolbar.novo-toolbar-single-row.novo-accent-clientcontact{border-bottom:2px solid #ffaa44}.novo-toolbar .novo-toolbar-row.novo-color-opportunity,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity{color:#fff;background:#662255}.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-opportunity>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity .links button,.novo-toolbar .novo-toolbar-row.novo-color-opportunity .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .links button,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-opportunity .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-opportunity .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-opportunity,.novo-toolbar.novo-toolbar-single-row.novo-accent-opportunity{border-bottom:2px solid #662255}.novo-toolbar .novo-toolbar-row.novo-color-job,.novo-toolbar .novo-toolbar-row.novo-theme-job,.novo-toolbar.novo-toolbar-single-row.novo-color-job,.novo-toolbar.novo-toolbar-single-row.novo-theme-job{color:#fff;background:#bb5566}.novo-toolbar .novo-toolbar-row.novo-color-job>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-job>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-job novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-job>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-job>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-job>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-job novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-job novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-job .links button,.novo-toolbar .novo-toolbar-row.novo-color-job .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-job novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-job .links button,.novo-toolbar .novo-toolbar-row.novo-theme-job .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-job novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-job .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-job .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-job .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-job .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-job .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-job .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-job,.novo-toolbar.novo-toolbar-single-row.novo-accent-job{border-bottom:2px solid #bb5566}.novo-toolbar .novo-toolbar-row.novo-color-joborder,.novo-toolbar .novo-toolbar-row.novo-theme-joborder,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder{color:#fff;background:#bb5566}.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-joborder>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-joborder>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-joborder novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-joborder .links button,.novo-toolbar .novo-toolbar-row.novo-color-joborder .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .links button,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-joborder .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-joborder .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-joborder .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-joborder .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-joborder,.novo-toolbar.novo-toolbar-single-row.novo-accent-joborder{border-bottom:2px solid #bb5566}.novo-toolbar .novo-toolbar-row.novo-color-submission,.novo-toolbar .novo-toolbar-row.novo-theme-submission,.novo-toolbar.novo-toolbar-single-row.novo-color-submission,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission{color:#3d464d;background:#a9adbb}.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-submission>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-submission>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-submission>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-submission novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-submission novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-submission .links button,.novo-toolbar .novo-toolbar-row.novo-color-submission .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-submission novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-submission .links button,.novo-toolbar .novo-toolbar-row.novo-theme-submission .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-submission .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-submission .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-submission .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-submission .novo-divider.novo-divider-vertical{border-right-color:#3d464d}.novo-toolbar .novo-toolbar-row.novo-accent-submission,.novo-toolbar.novo-toolbar-single-row.novo-accent-submission{border-bottom:2px solid #a9adbb}.novo-toolbar .novo-toolbar-row.novo-color-sendout,.novo-toolbar .novo-toolbar-row.novo-theme-sendout,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout{color:#fff;background:#747884}.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-sendout>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-sendout>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-sendout novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-sendout .links button,.novo-toolbar .novo-toolbar-row.novo-color-sendout .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .links button,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-sendout .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-sendout .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-sendout .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-sendout .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-sendout,.novo-toolbar.novo-toolbar-single-row.novo-accent-sendout{border-bottom:2px solid #747884}.novo-toolbar .novo-toolbar-row.novo-color-placement,.novo-toolbar .novo-toolbar-row.novo-theme-placement,.novo-toolbar.novo-toolbar-single-row.novo-color-placement,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement{color:#fff;background:#0b344f}.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-placement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-placement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-placement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-placement novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-placement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-placement .links button,.novo-toolbar .novo-toolbar-row.novo-color-placement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-placement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-placement .links button,.novo-toolbar .novo-toolbar-row.novo-theme-placement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-placement .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-placement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-placement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-placement .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-placement,.novo-toolbar.novo-toolbar-single-row.novo-accent-placement{border-bottom:2px solid #0b344f}.novo-toolbar .novo-toolbar-row.novo-color-note,.novo-toolbar .novo-toolbar-row.novo-theme-note,.novo-toolbar.novo-toolbar-single-row.novo-color-note,.novo-toolbar.novo-toolbar-single-row.novo-theme-note{color:#fff;background:#747884}.novo-toolbar .novo-toolbar-row.novo-color-note>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-note>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-note novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-note>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-note>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-note>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-note novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-note novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-note .links button,.novo-toolbar .novo-toolbar-row.novo-color-note .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-note novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-note .links button,.novo-toolbar .novo-toolbar-row.novo-theme-note .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-note novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-note .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-note .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-note .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-note .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-note .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-note .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-note,.novo-toolbar.novo-toolbar-single-row.novo-accent-note{border-bottom:2px solid #747884}.novo-toolbar .novo-toolbar-row.novo-color-contract,.novo-toolbar .novo-toolbar-row.novo-theme-contract,.novo-toolbar.novo-toolbar-single-row.novo-color-contract,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract{color:#fff;background:#454ea0}.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-contract>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-contract>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-contract>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contract novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-contract novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-contract .links button,.novo-toolbar .novo-toolbar-row.novo-color-contract .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-contract novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-contract .links button,.novo-toolbar .novo-toolbar-row.novo-theme-contract .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-contract .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-contract .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-contract .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-contract .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-contract,.novo-toolbar.novo-toolbar-single-row.novo-accent-contract{border-bottom:2px solid #454ea0}.novo-toolbar .novo-toolbar-row.novo-color-jobCode,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-jobCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode .links button,.novo-toolbar .novo-toolbar-row.novo-color-jobCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .links button,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-jobCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-jobCode .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-jobCode,.novo-toolbar.novo-toolbar-single-row.novo-accent-jobCode{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-earnCode,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-earnCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode .links button,.novo-toolbar .novo-toolbar-row.novo-color-earnCode .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .links button,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-earnCode .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-earnCode .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-earnCode,.novo-toolbar.novo-toolbar-single-row.novo-accent-earnCode{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .links button,.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .links button,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-invoiceStatement .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-invoiceStatement .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-invoiceStatement,.novo-toolbar.novo-toolbar-single-row.novo-accent-invoiceStatement{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-billableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-billableCharge .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-billableCharge,.novo-toolbar.novo-toolbar-single-row.novo-accent-billableCharge{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .links button,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-payableCharge .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-payableCharge .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-payableCharge,.novo-toolbar.novo-toolbar-single-row.novo-accent-payableCharge{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-user,.novo-toolbar .novo-toolbar-row.novo-theme-user,.novo-toolbar.novo-toolbar-single-row.novo-color-user,.novo-toolbar.novo-toolbar-single-row.novo-theme-user{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-user>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-user>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-user novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-user>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-user>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-user>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-user novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-user novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-user .links button,.novo-toolbar .novo-toolbar-row.novo-color-user .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-user novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-user .links button,.novo-toolbar .novo-toolbar-row.novo-theme-user .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-user novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-user .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-user .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-user .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-user .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-user .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-user .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-user,.novo-toolbar.novo-toolbar-single-row.novo-accent-user{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .links button,.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .links button,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-corporateUser .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-corporateUser .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-corporateUser,.novo-toolbar.novo-toolbar-single-row.novo-accent-corporateUser{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-distributionList,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-distributionList>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList .links button,.novo-toolbar .novo-toolbar-row.novo-color-distributionList .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .links button,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-distributionList .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-distributionList .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-distributionList,.novo-toolbar.novo-toolbar-single-row.novo-accent-distributionList{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-credential,.novo-toolbar .novo-toolbar-row.novo-theme-credential,.novo-toolbar.novo-toolbar-single-row.novo-color-credential,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-credential>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-credential>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-credential>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-credential novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-credential novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-credential .links button,.novo-toolbar .novo-toolbar-row.novo-color-credential .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-credential novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-credential .links button,.novo-toolbar .novo-toolbar-row.novo-theme-credential .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-credential .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-credential .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-credential .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-credential .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-credential,.novo-toolbar.novo-toolbar-single-row.novo-accent-credential{border-bottom:2px solid #696d79}.novo-toolbar .novo-toolbar-row.novo-color-person,.novo-toolbar .novo-toolbar-row.novo-theme-person,.novo-toolbar.novo-toolbar-single-row.novo-color-person,.novo-toolbar.novo-toolbar-single-row.novo-theme-person{color:#fff;background:#696d79}.novo-toolbar .novo-toolbar-row.novo-color-person>novo-text,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-label,.novo-toolbar .novo-toolbar-row.novo-color-person>novo-icon,.novo-toolbar .novo-toolbar-row.novo-color-person novo-title,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-text,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-label,.novo-toolbar .novo-toolbar-row.novo-theme-person>novo-icon,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-title,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-color-person>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-title,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-text,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-label,.novo-toolbar.novo-toolbar-single-row.novo-theme-person>novo-icon,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-title{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-person novo-action button,.novo-toolbar .novo-toolbar-row.novo-color-person novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-color-person .links button,.novo-toolbar .novo-toolbar-row.novo-color-person .links novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-action button,.novo-toolbar .novo-toolbar-row.novo-theme-person novo-action novo-button,.novo-toolbar .novo-toolbar-row.novo-theme-person .links button,.novo-toolbar .novo-toolbar-row.novo-theme-person .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-color-person novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-color-person .links button,.novo-toolbar.novo-toolbar-single-row.novo-color-person .links novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-action button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person novo-action novo-button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .links button,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .links novo-button{color:inherit}.novo-toolbar .novo-toolbar-row.novo-color-person .novo-divider.novo-divider-vertical,.novo-toolbar .novo-toolbar-row.novo-theme-person .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-color-person .novo-divider.novo-divider-vertical,.novo-toolbar.novo-toolbar-single-row.novo-theme-person .novo-divider.novo-divider-vertical{border-right-color:#fff}.novo-toolbar .novo-toolbar-row.novo-accent-person,.novo-toolbar.novo-toolbar-single-row.novo-accent-person{border-bottom:2px solid #696d79}.novo-toolbar.novo-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { _toolbarRows: [{
                type: ContentChildren,
                args: [NovoToolbarRow, { descendants: true }]
            }] } });

// NG2
class NovoToolbarModule {
}
NovoToolbarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoToolbarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbarModule, declarations: [NovoToolbar, NovoToolbarRow], imports: [CommonModule], exports: [NovoToolbar, NovoToolbarRow] });
NovoToolbarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbarModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoToolbarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [NovoToolbar, NovoToolbarRow],
                    exports: [NovoToolbar, NovoToolbarRow],
                }]
        }] });

// NG2
class Unless {
    constructor(templateRef, viewContainer, security) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.security = security;
        this.permissions = '';
        this.isDisplayed = false;
        this.security.subscribe(this.check.bind(this));
    }
    set bhUnless(value) {
        this.permissions = value || '';
        this.check();
    }
    check() {
        let display = false;
        if (~this.permissions.indexOf('||')) {
            const ps = this.permissions.split('||');
            for (const p of ps) {
                if (this.security.has(p.trim())) {
                    display = true;
                }
            }
        }
        else {
            display = this.permissions.split('&&').every((p) => this.security.has(p.trim()));
        }
        if (display) {
            if (!this.isDisplayed) {
                this.isDisplayed = true;
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
        else {
            this.isDisplayed = false;
            this.viewContainer.clear();
        }
    }
}
Unless.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Unless, deps: [{ token: i0.TemplateRef }, { token: i0.ViewContainerRef }, { token: Security }], target: i0.ɵɵFactoryTarget.Directive });
Unless.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: Unless, selector: "[bhUnless]", inputs: { bhUnless: "bhUnless" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: Unless, decorators: [{
            type: Directive,
            args: [{
                    selector: '[bhUnless]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }, { type: Security }]; }, propDecorators: { bhUnless: [{
                type: Input
            }] } });

// NG2
class UnlessModule {
}
UnlessModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: UnlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
UnlessModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: UnlessModule, declarations: [Unless], imports: [CommonModule], exports: [Unless] });
UnlessModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: UnlessModule, imports: [[CommonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: UnlessModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule],
                    declarations: [Unless],
                    exports: [Unless],
                }]
        }] });

// NG2
/**
 * @classdesc
 * Renders data appropriately based on the data type found in Meta
 * All data types defined by bullhorn should be supported:
 *
 * - **String**: trims value and returns
 * - **Integer**: return value
 * - **Double**: return value fixed to 2 decimals
 * - **BigDecimal**: return value fixed to 2 decimals
 * - **Address**: only city and/or state returned
 * - **Address1**: only city and/or state returned
 * - **AddressWithoutCountry**: only city and/or state returned
 * - **Currency**: put a $ in front
 * - **Percentage**: divide by 100 fix to 2 decimals place and return
 * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
 * - **Array**: returns list comma separated
 * - **DateTime**: formats the date
 * - **TimeStamp**: formats the date
 * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
 * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
 *
 * @example
 * ```
 * {{ expression | render:field }}
 * ```
 */
class RenderPipe {
    constructor(changeDetector, sanitizationService, labels) {
        this.changeDetector = changeDetector;
        this.sanitizationService = sanitizationService;
        this.labels = labels;
    }
    equals(objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        if (objectOne !== objectOne && objectTwo !== objectTwo) {
            return true;
        }
        const t1 = typeof objectOne;
        const t2 = typeof objectTwo;
        let length;
        let key;
        let keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(objectOne)) {
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                length = objectOne.length;
                if (length === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (objectOne[key]) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    }
    getEntityLabel(item, entity) {
        switch (entity) {
            case 'CorporateUser':
            case 'ClientContact':
            case 'ClientContact1':
            case 'ClientContact2':
            case 'ClientContact3':
            case 'ClientContact4':
            case 'ClientContact5':
            case 'Lead':
            case 'Candidate':
            case 'Person':
                return `${item.firstName || ''} ${item.lastName || ''}`.trim();
            case 'ClientCorporation':
            case 'ClientCorporation1':
            case 'ClientCorporation2':
            case 'ClientCorporation3':
            case 'ClientCorporation4':
            case 'ClientCorporation5':
                return `${item.name || ''}`.trim();
            case 'JobOrder':
            case 'JobOrder1':
            case 'JobOrder2':
            case 'JobOrder3':
            case 'JobOrder4':
            case 'JobOrder5':
            case 'Opportunity':
                return `${item.title || ''}`.trim();
            case 'Placement':
                let label = '';
                if (item.candidate) {
                    label = `${item.candidate.firstName} ${item.candidate.lastName}`.trim();
                }
                if (item.jobOrder) {
                    label = `${label} - ${item.jobOrder.title}`.trim();
                }
                return label;
            default:
                return '';
        }
    }
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * @param args - fields can either be sent as a list of arguments or as an Array
     * @return text
     */
    render(value, args) {
        let type = null;
        let text = value;
        // Handle when we don't have meta, but passing an entity
        if (value && value._subtype && !args) {
            return this.getEntityLabel(value, value._subtype);
        }
        // Stop logic for nulls
        if (value === undefined || value === null || !args) {
            return text;
        }
        if (args.formatter && typeof args.formatter === 'function') {
            return args.formatter(value, args);
        }
        // TODO move this to a service
        // Determine TYPE because its not just 1 value that determines this.
        if (args.type === 'TO_MANY') {
            type = 'ToMany';
        }
        else if (args.type === 'TO_ONE') {
            type = args.associatedEntity.entity;
        }
        else if (args.dataSpecialization === 'DATETIME') {
            type = 'DateTime';
        }
        else if (args.dataSpecialization === 'YEAR') {
            type = 'Year';
        }
        else if (args.dataSpecialization === 'TIME') {
            type = 'Time';
        }
        else if (args.dataSpecialization === 'DATE' && args.dataType === 'Date') {
            type = 'Date';
        }
        else if (args.dataType === 'Timestamp') {
            type = 'Timestamp';
        }
        else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
            type = 'Phone';
        }
        else if (args.name && args.name.substring(0, 5) === 'email') {
            type = 'Email';
        }
        else if ((args.name && args.name === 'address.countryID') || args.optionsType === 'Country') {
            type = 'Country';
        }
        else if (args.optionsType === 'SkillText') {
            type = 'SkillText';
        }
        else if (args.options || args.inputType === 'SELECT' || args.inputType === 'CHECKBOX') {
            type = 'Options';
        }
        else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
            type = this.capitalize(args.dataSpecialization.toLowerCase());
        }
        else {
            type = args.dataType || 'default';
        }
        // Transform data here
        try {
            switch (type) {
                case 'Address':
                case 'Address1':
                case 'AddressWithoutCountry':
                case 'SecondaryAddress':
                case 'BillingAddress':
                    const country = findByCountryId(Number(value.countryName));
                    text = '';
                    if (value.address1 || value.address2) {
                        text += `${value.address1 || ''} ${value.address2 || ''}<br />\n`;
                    }
                    text += `${value.city || ''} ${value.state || ''} ${value.zip || ''}${value.city || value.state || value.zip ? '<br />\n' : ''}`;
                    text += `${country ? country.name : value.countryName || ''}${country || value.countryName ? '<br />\n' : ''}`;
                    text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                    break;
                case 'DateTime':
                case 'Timestamp':
                    text = this.labels.formatDateShort(value);
                    break;
                case 'Date':
                    text = this.labels.formatDate(new Date(value));
                    break;
                case 'Year':
                    text = new Date(value).getFullYear();
                    break;
                case 'Time':
                    text = this.labels.formatTimeWithFormat(value, { hour: 'numeric', minute: 'numeric' });
                    break;
                case 'Phone':
                case 'Email':
                    text = value;
                    break;
                case 'Money':
                    text = this.labels.formatCurrency(value);
                    break;
                case 'Percentage':
                    text = this.labels.formatNumber(parseFloat(value).toString(), { style: 'percent', minimumFractionDigits: 2 });
                    break;
                case 'Double':
                case 'BigDecimal':
                    text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                    break;
                case 'Integer':
                    text = value;
                    break;
                case 'BusinessSector':
                case 'Category':
                case 'Certification':
                case 'ClientCorporation':
                case 'CorporationDepartment':
                case 'DistributionList':
                case 'Skill':
                case 'Tearsheet':
                case 'Specialty':
                    text = value.label || value.name || '';
                    break;
                case 'SkillText':
                    text = Array.isArray(value) ? value.join(', ') : value;
                    break;
                case 'Lead':
                case 'Candidate':
                case 'ClientContact':
                case 'CorporateUser':
                case 'Person':
                    text = value.label || `${value.firstName || ''} ${value.lastName || ''}`;
                    break;
                case 'Opportunity':
                case 'JobOrder':
                    text = value.label || value.title || '';
                    break;
                case 'Placement':
                    if (value.candidate) {
                        text = `${value.candidate.firstName || ''} ${value.candidate.lastName || ''}`;
                    }
                    if (value.jobOrder) {
                        text = value.candidate ? `${text} - ${value.jobOrder.title || ''}` : `${value.jobOrder.title || ''}`;
                    }
                    break;
                case 'JobSubmission':
                    text =
                        value.label ||
                            `${value.jobOrder ? `${value.jobOrder.title} - ` : ''} ${value.candidate ? value.candidate.firstName : ''} ${value.candidate ? value.candidate.lastName : ''}`;
                    break;
                case 'WorkersCompensationRate':
                    text = `${value.compensation ? `${value.compensation.code} - ` : ''} ${value.compensation ? value.compensation.name : ''}`;
                    break;
                case 'Options':
                    text = this.options(value, args.options, args);
                    break;
                case 'ToMany':
                    if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'firstName', 'lastName');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'name');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                        text = this.concat(value.data, 'externalListName');
                    }
                    else {
                        text = `${value.total || ''}`;
                    }
                    break;
                case 'Country':
                    const countryObj = findByCountryId(Number(value));
                    text = countryObj ? countryObj.name : value;
                    break;
                case 'Html':
                    if (Array.isArray(value)) {
                        value = value.join(' ');
                    }
                    if (typeof text === 'string') {
                        text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                    }
                    break;
                case 'CandidateComment':
                    text = value.comments ? `${this.labels.formatDateShort(value.dateLastModified)} (${value.name}) - ${value.comments}` : '';
                    break;
                default:
                    text = value.trim ? value.trim() : value;
                    break;
            }
            return text;
        }
        catch (e) {
            console.error(`WARNING: There was a problem rendering the value of the field: ${args.label}. Please check the configuration`);
            console.error(e);
            return text;
        }
    }
    updateValue(value, args) {
        this.value = this.render(value, args);
        this.changeDetector.markForCheck();
    }
    transform(value, args) {
        if (value === undefined || value === null) {
            return '';
        }
        if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
            return this.value;
        }
        this.lastValue = value;
        this.lastArgs = args;
        this.updateValue(this.lastValue, this.lastArgs);
        return this.value;
    }
    /**
     * Simple function concat a list of fields from a list of objects
     * @param list - the list of values to use
     * @param fields - list of fields to extract
     */
    concat(list, ...fields) {
        const data = [];
        for (const item of list) {
            const label = [];
            for (const field of fields) {
                label.push(`${item[field]}`);
            }
            data.push(label.join(' '));
        }
        return data.join(', ');
    }
    /**
     * Simple function to look up the **label** to display from options
     * @param value - the value to find
     * @param list - list of options (label/value pairs)
     */
    options(value, list, args) {
        if (!Array.isArray(value)) {
            value = [value];
        }
        try {
            return value.map((item) => {
                for (const option of list) {
                    if (option.value === item) {
                        return option.label;
                    }
                }
                return item;
            });
        }
        catch (e) {
            if (!args.optionsType) {
                throw Error(e);
            }
            return value;
        }
    }
    getNumberDecimalPlaces(value) {
        let decimalPlaces;
        if (value) {
            const numberString = parseFloat(value).toString();
            const decimalPlace = (numberString || '').split('.')[1] || '';
            decimalPlaces = decimalPlace.length;
        }
        return decimalPlaces || 1;
    }
    /**
     * Capitalizes the first letter
     */
    capitalize(value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    }
}
RenderPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RenderPipe, deps: [{ token: i0.ChangeDetectorRef }, { token: i1$2.DomSanitizer }, { token: NovoLabelService }], target: i0.ɵɵFactoryTarget.Pipe });
RenderPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RenderPipe, name: "render", pure: false });
RenderPipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RenderPipe });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: RenderPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'render',
                    pure: false,
                }]
        }, {
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i1$2.DomSanitizer }, { type: NovoLabelService }]; } });

// NG2
class EntityList {
    constructor() {
        this.baseEntity = '';
        this.ENTITY_SHORT_NAMES = {
            Lead: 'lead',
            ClientContact: 'contact',
            ClientContact1: 'contact',
            ClientContact2: 'contact',
            ClientContact3: 'contact',
            ClientContact4: 'contact',
            ClientContact5: 'contact',
            ClientCorporation: 'company',
            ClientCorporation1: 'company',
            ClientCorporation2: 'company',
            ClientCorporation3: 'company',
            ClientCorporation4: 'company',
            ClientCorporation5: 'company',
            Opportunity: 'opportunity',
            Task: 'task',
            Note: 'note',
            CorporateUser: 'user',
            Candidate: 'candidate',
            JobOrder: 'job',
            JobOrder1: 'job',
            JobOrder2: 'job',
            JobOrder3: 'job',
            JobOrder4: 'job',
            JobOrder5: 'job',
            Placement: 'placement',
            JobSubmission: 'submission',
            CandidateReference: 'references',
            DistributionList: 'distributionList',
            Appointment: 'appointment',
        };
    }
    ngOnInit() {
        // use a local copy of the meta to set the type to TO_ONE for proper display
        // without changing the input object
        this.metaDisplay = Helpers.deepClone(this.meta);
        this.metaDisplay.type = 'TO_ONE';
        this.baseEntity = this.meta.associatedEntity.entity;
        for (const entity of this.data.data) {
            entity.isLinkable = this.isLinkable(entity);
            entity.class = this.getClass(entity);
        }
    }
    getClass(entity) {
        return this.ENTITY_SHORT_NAMES[entity.personSubtype];
    }
    openLink(entity) {
        entity.openLink(entity);
    }
    isLinkable(entity) {
        return entity.openLink;
    }
}
EntityList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EntityList, deps: [], target: i0.ɵɵFactoryTarget.Component });
EntityList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: EntityList, selector: "novo-entity-list", inputs: { data: "data", meta: "meta" }, ngImport: i0, template: `
    <div *ngFor="let entity of data.data" class="entity">
      <a *ngIf="entity.isLinkable" (click)="openLink(entity)">
        <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render: metaDisplay }}
      </a>
      <span *ngIf="!entity.isLinkable && entity.personSubtype">
        <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render: metaDisplay }}
      </span>
      <span *ngIf="!entity.isLinkable && !entity.personSubtype">
        {{ entity | render: metaDisplay }}
      </span>
    </div>
  `, isInline: true, directives: [{ type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "render": RenderPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: EntityList, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-entity-list',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    template: `
    <div *ngFor="let entity of data.data" class="entity">
      <a *ngIf="entity.isLinkable" (click)="openLink(entity)">
        <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render: metaDisplay }}
      </a>
      <span *ngIf="!entity.isLinkable && entity.personSubtype">
        <i class="bhi-circle {{ entity.class }}"></i>{{ entity | render: metaDisplay }}
      </span>
      <span *ngIf="!entity.isLinkable && !entity.personSubtype">
        {{ entity | render: metaDisplay }}
      </span>
    </div>
  `,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { data: [{
                type: Input
            }], meta: [{
                type: Input
            }] } });

var NOVO_VALUE_TYPE;
(function (NOVO_VALUE_TYPE) {
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["DEFAULT"] = 0] = "DEFAULT";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["ENTITY_LIST"] = 1] = "ENTITY_LIST";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["LINK"] = 2] = "LINK";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["INTERNAL_LINK"] = 3] = "INTERNAL_LINK";
})(NOVO_VALUE_TYPE || (NOVO_VALUE_TYPE = {}));
var NOVO_VALUE_THEME;
(function (NOVO_VALUE_THEME) {
    NOVO_VALUE_THEME[NOVO_VALUE_THEME["DEFAULT"] = 0] = "DEFAULT";
    NOVO_VALUE_THEME[NOVO_VALUE_THEME["MOBILE"] = 1] = "MOBILE";
})(NOVO_VALUE_THEME || (NOVO_VALUE_THEME = {}));
class NovoValueElement {
    constructor() {
        this.meta = { type: 'SCALAR', label: '' }; // TODO use interface
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.row = false;
        this.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
        this.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
        this.customClass = '';
    }
    set label(lbl) {
        this.meta.label = lbl;
    }
    get label() {
        return this.meta.label;
    }
    set type(typ) {
        this.meta.type = typ;
    }
    get type() {
        return this.meta.type;
    }
    set icon(value) {
        this.meta.icon = value;
    }
    get icon() {
        return this.meta.icon;
    }
    ngOnInit() {
        if (Helpers.isEmpty(this.meta)) {
            this.meta = {
                label: '',
            };
        }
    }
    get isMobile() {
        return this.theme === NOVO_VALUE_THEME.MOBILE;
    }
    iconClass(icon) {
        let iconClass = '';
        if (icon && icon.iconCls) {
            iconClass = `bhi-${icon.iconCls} actions`;
            if (icon.onIconClick) {
                iconClass = `${iconClass} clickable`;
            }
            return iconClass;
        }
        return iconClass;
    }
    get isDefault() {
        return true;
    }
    get showLabel() {
        return (this._type === NOVO_VALUE_TYPE.INTERNAL_LINK || this._type === NOVO_VALUE_TYPE.LINK || this._type === NOVO_VALUE_TYPE.ENTITY_LIST);
    }
    get showIcon() {
        return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
    }
    onValueClick(icon) {
        if (icon.onIconClick && typeof icon.onIconClick === 'function') {
            icon.onIconClick(this.data, this.meta);
        }
    }
    openLink() {
        if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
            this.meta.openLink(this.data, this.meta);
        }
    }
    ngOnChanges(changes) {
        if (this.meta && this.isLinkField(this.meta, this.data)) {
            this._type = NOVO_VALUE_TYPE.LINK;
            // Make sure the value has a protocol, otherwise the URL will be relative
            const hasProtocol = new RegExp('^(http|https)://', 'i');
            if (!hasProtocol.test(this.data)) {
                this.url = `http://${this.data}`;
            }
            else {
                this.url = this.data;
            }
        }
        else if (this.isEntityList(this.meta.type)) {
            this._type = NOVO_VALUE_TYPE.ENTITY_LIST;
        }
        else if (this.isHTMLField(this.meta)) {
            this.customClass = this.meta.customClass ? this.meta.customClass : '';
            if (this.meta.stripHTML && this.data && this.data.replace) {
                this.data = this.data.replace(/<(?!style|\/style).+?>/gi, '').trim();
            }
        }
        else if (this.meta && this.meta.associatedEntity) {
            switch (this.meta.associatedEntity.entity) {
                case 'ClientCorporation':
                case 'ClientContact':
                case 'Candidate':
                case 'Opportunity':
                case 'JobOrder':
                case 'Placement':
                case 'Lead':
                    this._type = NOVO_VALUE_TYPE.INTERNAL_LINK;
                    break;
                default:
                    break;
            }
        }
    }
    isLinkField(field, data) {
        const linkFields = ['companyURL', 'clientCorporationCompanyURL'];
        const regex = new RegExp('^(https?://(?:www.|(?!www))[^s.]+.[^s]{2,}|www.[^s]+.[^s]{2,})$', 'gi');
        const isURL = Helpers.isString(data) && regex.exec(data.trim());
        return linkFields.indexOf(field.name) > -1 || !!isURL || field.type === NOVO_VALUE_TYPE.LINK;
    }
    isEntityList(type) {
        return type === 'TO_MANY';
    }
    isHTMLField(meta) {
        return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
    }
}
NovoValueElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoValueElement, deps: [], target: i0.ɵɵFactoryTarget.Component });
NovoValueElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: NovoValueElement, selector: "novo-value", inputs: { data: "data", meta: "meta", theme: "theme", row: "row", label: "label", type: "type", icon: "icon" }, host: { properties: { "class.horizontal": "this.row", "class.mobile": "this.isMobile" } }, usesOnChanges: true, ngImport: i0, template: `
    <div class="value-outer" [ngClass]="customClass">
      <novo-label>{{ meta.label }}</novo-label>
      <span class="value">
        <i *ngIf="meta.showEntityIcon" class="bhi-circle {{ meta.entityIconClass }}"></i>
        <novo-icon *ngIf="meta?.icon">{{ meta.icon }}</novo-icon>
        <ng-container [ngSwitch]="_type">
          <a *ngSwitchCase="NOVO_VALUE_TYPE.INTERNAL_LINK" (click)="openLink()" [innerHTML]="data | render: meta"></a>
          <a *ngSwitchCase="NOVO_VALUE_TYPE.LINK" class="value" [href]="url" target="_blank" [innerHTML]="data | render: meta"></a>
          <novo-entity-list *ngSwitchCase="NOVO_VALUE_TYPE.ENTITY_LIST" [data]="data" [meta]="meta"></novo-entity-list>
          <novo-text *ngSwitchDefault [innerHTML]="data | render: meta"></novo-text>
        </ng-container>
      </span>
    </div>
    <div class="actions" *ngIf="showIcon">
      <i *ngFor="let icon of meta.icons" [class]="iconClass(icon)" (click)="onValueClick(icon)"></i>
    </div>
  `, isInline: true, components: [{ type: NovoLabel, selector: "novo-label,[novo-label]" }, { type: NovoIconComponent, selector: "novo-icon", inputs: ["raised", "theme", "shape", "color", "size", "smaller", "larger", "alt", "name"] }, { type: EntityList, selector: "novo-entity-list", inputs: ["data", "meta"] }, { type: NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "render": RenderPipe } });
__decorate([
    BooleanInput(),
    __metadata("design:type", Boolean)
], NovoValueElement.prototype, "row", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoValueElement, decorators: [{
            type: Component,
            args: [{
                    selector: 'novo-value',
                    template: `
    <div class="value-outer" [ngClass]="customClass">
      <novo-label>{{ meta.label }}</novo-label>
      <span class="value">
        <i *ngIf="meta.showEntityIcon" class="bhi-circle {{ meta.entityIconClass }}"></i>
        <novo-icon *ngIf="meta?.icon">{{ meta.icon }}</novo-icon>
        <ng-container [ngSwitch]="_type">
          <a *ngSwitchCase="NOVO_VALUE_TYPE.INTERNAL_LINK" (click)="openLink()" [innerHTML]="data | render: meta"></a>
          <a *ngSwitchCase="NOVO_VALUE_TYPE.LINK" class="value" [href]="url" target="_blank" [innerHTML]="data | render: meta"></a>
          <novo-entity-list *ngSwitchCase="NOVO_VALUE_TYPE.ENTITY_LIST" [data]="data" [meta]="meta"></novo-entity-list>
          <novo-text *ngSwitchDefault [innerHTML]="data | render: meta"></novo-text>
        </ng-container>
      </span>
    </div>
    <div class="actions" *ngIf="showIcon">
      <i *ngFor="let icon of meta.icons" [class]="iconClass(icon)" (click)="onValueClick(icon)"></i>
    </div>
  `,
                }]
        }], propDecorators: { data: [{
                type: Input
            }], meta: [{
                type: Input
            }], theme: [{
                type: Input
            }], row: [{
                type: HostBinding,
                args: ['class.horizontal']
            }, {
                type: Input
            }], label: [{
                type: Input
            }], type: [{
                type: Input
            }], icon: [{
                type: Input
            }], isMobile: [{
                type: HostBinding,
                args: ['class.mobile']
            }] } });

// NG2
class NovoValueModule {
}
NovoValueModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoValueModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoValueModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoValueModule, declarations: [NovoValueElement, RenderPipe, EntityList], imports: [CommonModule, NovoCommonModule, NovoIconModule], exports: [NovoValueElement, RenderPipe, EntityList] });
NovoValueModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoValueModule, imports: [[CommonModule, NovoCommonModule, NovoIconModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoValueModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, NovoCommonModule, NovoIconModule],
                    declarations: [NovoValueElement, RenderPipe, EntityList],
                    exports: [NovoValueElement, RenderPipe, EntityList],
                }]
        }] });

// NG2
class NovoElementsModule {
}
NovoElementsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoElementsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementsModule, imports: [ReactiveFormsModule], exports: [NovoAsideModule,
        NovoAvatarModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoLoadingModule,
        NovoCardModule,
        NovoAgendaModule,
        NovoCalendarModule,
        NovoCheckboxModule,
        NovoFlexModule,
        NovoLayoutModule,
        NovoDividerModule,
        NovoToastModule,
        NovoTooltipModule,
        NovoHeaderModule,
        NovoTabModule,
        NovoTilesModule,
        NovoModalModule,
        NovoQuickNoteModule,
        NovoRadioModule,
        NovoDropdownModule,
        NovoSelectModule,
        NovoListModule,
        NovoSwitchModule,
        NovoDragulaModule,
        NovoSliderModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoDateTimePickerModule,
        NovoNovoCKEditorModule,
        NovoTipWellModule,
        NovoSimpleTableModule,
        NovoTableModule,
        NovoTableExtrasModule,
        NovoFormModule,
        NovoFormExtrasModule,
        NovoCategoryDropdownModule,
        NovoMultiPickerModule,
        NovoPopOverModule,
        NovoDataTableModule,
        NovoSearchBoxModule,
        NovoProgressModule,
        NovoOverlayModule,
        GooglePlacesModule,
        NovoValueModule,
        NovoAceEditorModule,
        NovoIconModule,
        NovoExpansionModule,
        UnlessModule,
        NovoCommonModule,
        NovoOptionModule,
        NovoStepperModule,
        NovoToolbarModule,
        ScrollingModule,
        NovoTabbedGroupPickerModule,
        NovoNonIdealStateModule,
        NovoBreadcrumbModule,
        NovoFieldModule,
        NovoColorPickerModule,
        NovoMenuModule,
        NovoSelectSearchModule,
        NovoQueryBuilderModule] });
NovoElementsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementsModule, providers: [
        { provide: ComponentUtils, useClass: ComponentUtils },
        { provide: DateFormatService, useClass: DateFormatService },
        { provide: NovoLabelService, useClass: NovoLabelService },
        { provide: NovoDragulaService, useClass: NovoDragulaService },
        { provide: GooglePlacesService, useClass: GooglePlacesService },
        { provide: GlobalRef, useClass: BrowserGlobalRef },
        { provide: LocalStorageService, useClass: LocalStorageService },
        { provide: OptionsService, useClass: OptionsService },
        { provide: FormUtils, useClass: FormUtils },
    ], imports: [[ReactiveFormsModule], NovoAsideModule,
        NovoAvatarModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoLoadingModule,
        NovoCardModule,
        NovoAgendaModule,
        NovoCalendarModule,
        NovoCheckboxModule,
        NovoFlexModule,
        NovoLayoutModule,
        NovoDividerModule,
        NovoToastModule,
        NovoTooltipModule,
        NovoHeaderModule,
        NovoTabModule,
        NovoTilesModule,
        NovoModalModule,
        NovoQuickNoteModule,
        NovoRadioModule,
        NovoDropdownModule,
        NovoSelectModule,
        NovoListModule,
        NovoSwitchModule,
        NovoDragulaModule,
        NovoSliderModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoDateTimePickerModule,
        NovoNovoCKEditorModule,
        NovoTipWellModule,
        NovoSimpleTableModule,
        NovoTableModule,
        NovoTableExtrasModule,
        NovoFormModule,
        NovoFormExtrasModule,
        NovoCategoryDropdownModule,
        NovoMultiPickerModule,
        NovoPopOverModule,
        NovoDataTableModule,
        NovoSearchBoxModule,
        NovoProgressModule,
        NovoOverlayModule,
        GooglePlacesModule,
        NovoValueModule,
        NovoAceEditorModule,
        NovoIconModule,
        NovoExpansionModule,
        UnlessModule,
        NovoCommonModule,
        NovoOptionModule,
        NovoStepperModule,
        NovoToolbarModule,
        ScrollingModule,
        NovoTabbedGroupPickerModule,
        NovoNonIdealStateModule,
        NovoBreadcrumbModule,
        NovoFieldModule,
        NovoColorPickerModule,
        NovoMenuModule,
        NovoSelectSearchModule,
        NovoQueryBuilderModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [ReactiveFormsModule],
                    exports: [
                        NovoAsideModule,
                        NovoAvatarModule,
                        NovoPipesModule,
                        NovoButtonModule,
                        NovoLoadingModule,
                        NovoCardModule,
                        NovoAgendaModule,
                        NovoCalendarModule,
                        NovoCheckboxModule,
                        NovoFlexModule,
                        NovoLayoutModule,
                        NovoDividerModule,
                        NovoToastModule,
                        NovoTooltipModule,
                        NovoHeaderModule,
                        NovoTabModule,
                        NovoTilesModule,
                        NovoModalModule,
                        NovoQuickNoteModule,
                        NovoRadioModule,
                        NovoDropdownModule,
                        NovoSelectModule,
                        NovoListModule,
                        NovoSwitchModule,
                        NovoDragulaModule,
                        NovoSliderModule,
                        NovoPickerModule,
                        NovoChipsModule,
                        NovoDatePickerModule,
                        NovoTimePickerModule,
                        NovoDateTimePickerModule,
                        NovoNovoCKEditorModule,
                        NovoTipWellModule,
                        NovoSimpleTableModule,
                        NovoTableModule,
                        NovoTableExtrasModule,
                        NovoFormModule,
                        NovoFormExtrasModule,
                        NovoCategoryDropdownModule,
                        NovoMultiPickerModule,
                        NovoPopOverModule,
                        NovoDataTableModule,
                        NovoSearchBoxModule,
                        NovoProgressModule,
                        NovoOverlayModule,
                        GooglePlacesModule,
                        NovoValueModule,
                        NovoAceEditorModule,
                        NovoIconModule,
                        NovoExpansionModule,
                        UnlessModule,
                        NovoCommonModule,
                        NovoOptionModule,
                        NovoStepperModule,
                        NovoToolbarModule,
                        ScrollingModule,
                        NovoTabbedGroupPickerModule,
                        NovoNonIdealStateModule,
                        NovoBreadcrumbModule,
                        NovoFieldModule,
                        NovoColorPickerModule,
                        NovoMenuModule,
                        NovoSelectSearchModule,
                        NovoQueryBuilderModule,
                    ],
                    providers: [
                        { provide: ComponentUtils, useClass: ComponentUtils },
                        { provide: DateFormatService, useClass: DateFormatService },
                        { provide: NovoLabelService, useClass: NovoLabelService },
                        { provide: NovoDragulaService, useClass: NovoDragulaService },
                        { provide: GooglePlacesService, useClass: GooglePlacesService },
                        { provide: GlobalRef, useClass: BrowserGlobalRef },
                        { provide: LocalStorageService, useClass: LocalStorageService },
                        { provide: OptionsService, useClass: OptionsService },
                        { provide: FormUtils, useClass: FormUtils },
                    ],
                }]
        }] });

// NG2
const NOVO_ELEMENTS_PROVIDERS = [
    { provide: NovoDragulaService, useClass: NovoDragulaService },
    // { provide: NovoAsideRef, useClass: NovoAsideRef },
    { provide: NovoAsideService, useClass: NovoAsideService },
    // { provide: NovoModalRef, useClass: NovoModalRef },
    { provide: NovoModalService, useClass: NovoModalService },
    { provide: GooglePlacesService, useClass: GooglePlacesService },
    { provide: NovoToastService, useClass: NovoToastService },
    { provide: ComponentUtils, useClass: ComponentUtils },
    { provide: GlobalRef, useClass: BrowserGlobalRef },
    { provide: LocalStorageService, useClass: LocalStorageService },
    { provide: OptionsService, useClass: OptionsService },
    FieldInteractionApi,
    DateFormatService,
    NovoTemplateService,
];
class NovoElementProviders {
    static forRoot(options) {
        return {
            ngModule: NovoElementProviders,
            providers: [
                ...NOVO_ELEMENTS_PROVIDERS,
                {
                    provide: MENU_OPTIONS,
                    useValue: options && options.menu,
                },
            ],
        };
    }
    static forChild() {
        return {
            ngModule: NovoElementProviders,
        };
    }
}
NovoElementProviders.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementProviders, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NovoElementProviders.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementProviders });
NovoElementProviders.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementProviders, imports: [[]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: NovoElementProviders, decorators: [{
            type: NgModule,
            args: [{
                    imports: [],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractConditionFieldDef, AccentColorDirective, AceEditorControl, ActivityTableDataSource, ActivityTableRenderers, AddressControl, AppBridge, AppBridgeHandler, AppBridgeService, ArrayCollection, AsideComponent, BackgroundColorDirective, BaseConditionFieldDef, BaseControl, BasePickerResults, BaseRenderer, BooleanInput, BorderDirective, BreadcrumbElement, BreadcrumbItemElement, BreadcrumbService, BrowserGlobalRef, COUNTRIES, CalendarEventResponse, Can, CardActionsElement, CardContentElement, CardElement, CardFooterElement, CardHeaderElement, CheckListControl, CheckboxControl, ChecklistPickerResults, CollectionEvent, ComponentUtils, ConditionBuilderComponent, ConditionInputOutlet, ConditionOperatorOutlet, Conjunction, ControlConfirmModal, ControlFactory, ControlPromptModal, CriteriaBuilderComponent, CustomControl, DATEFORMAT_VALUE_ACCESSOR, DATERANGEFORMAT_VALUE_ACCESSOR, DATETIMEFORMAT_VALUE_ACCESSOR, DATE_FORMATS, DataTableBigDecimalRendererPipe, DataTableInterpolatePipe, DataTableSource, DataTableState, DateCell, DateControl, DateFormatService, DateTableCurrencyRendererPipe, DateTableDateRendererPipe, DateTableDateTimeRendererPipe, DateTableNumberRendererPipe, DateTableTimeRendererPipe, DateTimeControl, DayOfMonthPipe, DecodeURIPipe, DefaultDateSelectionStrategy, DefaultPipe, Deferred, DevAppBridge, DevAppBridgeService, DistributionListPickerResults, EXPANSION_PANEL_ANIMATION_TIMING, EditState, EditorControl, EndOfWeekDisplayPipe, EntityList, EntityPickerResult, EntityPickerResults, ErrorStateMatcher, FieldInteractionApi, FileControl, FillColorDirective, FlexDirective, FormUtils, FormValidators, GapDirective, GlobalRef, GooglePlacesModule, GooglePlacesService, GroupByPipe, GroupedControl, GroupedMultiPickerResults, Helpers, HighlightPipe, HoursPipe, IsoDatePipe, IsoDateRangePipe, IsoTimePipe, IsoTimeRangePipe, KeyCodes, LocalStorageService, MarginDirective, MenuComponent, MenuContentComponent, MenuDirective, MenuItemDirective, MixedMultiPickerResults, MonthDayPipe, MonthPipe, MultiDateSelectionStrategy, NOVO_BREADCRUMB_REF, NOVO_CHIPS_DEFAULT_OPTIONS, NOVO_CONDITION_BUILDER, NOVO_CRITERIA_BUILDER, NOVO_DATA_TABLE_REF, NOVO_DATE_SELECTION_STRATEGY, NOVO_DATE_SELECTION_STRATEGY_PROVIDER, NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY, NOVO_ELEMENTS_LABELS_PROVIDERS, NOVO_FORM_FIELD, NOVO_INPUT_FORMAT, NOVO_INPUT_VALUE_ACCESSOR, NOVO_LAYOUT_CONTAINER, NOVO_LAYOUT_DEFAULT_AUTOSIZE, NOVO_LAYOUT_DEFAULT_AUTOSIZE_FACTORY, NOVO_OPTGROUP, NOVO_OPTION_PARENT_COMPONENT, NOVO_PROGRESS_CONTAINER, NOVO_QUERY_BUILDER, NOVO_RADIO_GROUP, NOVO_VALUE_THEME, NOVO_VALUE_TYPE, NativeSelectControl, NodeGlobalRef, NonIdealStateElement, NovoAccordion, NovoAceEditor, NovoAceEditorModule, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter, NovoActivityTableCustomHeader, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage, NovoActivityTableState, NovoAddressElement, NovoAgendaAllDayEventElement, NovoAgendaDateChangeElement, NovoAgendaDayEventElement, NovoAgendaDayViewElement, NovoAgendaHourSegmentElement, NovoAgendaModule, NovoAgendaMonthDayElement, NovoAgendaMonthHeaderElement, NovoAgendaMonthViewElement, NovoAgendaWeekEventElement, NovoAgendaWeekHeaderElement, NovoAgendaWeekViewElement, NovoAsideModule, NovoAsideRef, NovoAsideService, NovoAutoSize, NovoAutocompleteElement, NovoAvatarElement, NovoAvatarModule, NovoAvatarStackElement, NovoBaseTextElement, NovoBoxElement, NovoBreadcrumbModule, NovoButtonElement, NovoButtonModule, NovoCKEditorElement, NovoCalendarElement, NovoCalendarModule, NovoCaption, NovoCardModule, NovoCategoryDropdownElement, NovoCategoryDropdownModule, NovoCheckListElement, NovoCheckboxChange, NovoCheckboxElement, NovoCheckboxModule, NovoChipAvatar, NovoChipElement, NovoChipInput, NovoChipList, NovoChipListChange, NovoChipRemove, NovoChipSelectionChange, NovoChipsElement, NovoChipsModule, NovoColorInputElement, NovoColorPickerComponent, NovoColorPickerModule, NovoColorSwatchComponent, NovoCommonModule, NovoConditionFieldDef, NovoConditionInputDef, NovoConditionOperatorsDef, NovoControlElement, NovoControlGroup, NovoControlTemplates, NovoDataTable, NovoDataTableCell, NovoDataTableCellHeader, NovoDataTableCheckboxCell, NovoDataTableCheckboxHeaderCell, NovoDataTableClearButton, NovoDataTableExpandCell, NovoDataTableExpandDirective, NovoDataTableExpandHeaderCell, NovoDataTableFilterUtils, NovoDataTableHeaderCell, NovoDataTableHeaderRow, NovoDataTableModule, NovoDataTablePagination, NovoDataTableRow, NovoDataTableSortButton, NovoDataTableSortFilter, NovoDateFormatDirective, NovoDatePickerElement, NovoDatePickerInputElement, NovoDatePickerModule, NovoDateRangeFormatDirective, NovoDateRangeInputElement, NovoDateTimeFormatDirective, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoDateTimePickerModule, NovoDefaultAddressConditionDef, NovoDefaultBooleanConditionDef, NovoDefaultDateConditionDef, NovoDefaultIdConditionDef, NovoDefaultNumberConditionDef, NovoDefaultPickerConditionDef, NovoDefaultStringConditionDef, NovoDividerComponent, NovoDividerModule, NovoDragulaElement, NovoDragulaModule, NovoDragulaService, NovoDropDownItemHeaderElement, NovoDropDownTrigger, NovoDropdownCell, NovoDropdownElement, NovoDropdownListElement, NovoDropdownModule, NovoDynamicFormElement, NovoElementProviders, NovoElementsModule, NovoErrorElement, NovoEventTypeLegendElement, NovoExpansionModule, NovoExpansionPanel, NovoExpansionPanelActionRow, NovoExpansionPanelContent, NovoExpansionPanelDescription, NovoExpansionPanelHeader, NovoExpansionPanelTitle, NovoFieldControl, NovoFieldElement, NovoFieldModule, NovoFieldPrefixDirective, NovoFieldSuffixDirective, NovoFieldsElement, NovoFieldsetElement, NovoFieldsetHeaderElement, NovoFile, NovoFileInputElement, NovoFlexElement, NovoFlexModule, NovoFormControl, NovoFormElement, NovoFormExtrasModule, NovoFormGroup, NovoFormModule, NovoGridElement, NovoHeaderComponent, NovoHeaderModule, NovoHeaderSpacer, NovoHintElement, NovoHorizontalStepper, NovoIconComponent, NovoIconModule, NovoInput, NovoIsLoadingDirective, NovoItemAvatarElement, NovoItemContentElement, NovoItemDateElement, NovoItemElement, NovoItemEndElement, NovoItemHeaderElement, NovoItemTitleElement, NovoLabel, NovoLabelService, NovoLayoutContainer, NovoLayoutContent, NovoLayoutModule, NovoLink, NovoListElement, NovoListItemElement, NovoListModule, NovoLoadedDirective, NovoLoadingElement, NovoLoadingModule, NovoMenuModule, NovoMenuService, NovoModalContainerComponent, NovoModalElement, NovoModalModule, NovoModalNotificationElement, NovoModalParams, NovoModalRef, NovoModalService, NovoMonthSelectElement, NovoMonthViewElement, NovoMultiDateInputElement, NovoMultiPickerElement, NovoMultiPickerModule, NovoNavContentElement, NovoNavElement, NovoNavHeaderElement, NovoNavOutletElement, NovoNonIdealStateModule, NovoNovoCKEditorModule, NovoOptgroup, NovoOptgroupBase, NovoOptgroupMixinBase, NovoOption, NovoOptionBase, NovoOptionModule, NovoOptionSelectedEvent, NovoOptionSelectionChange, NovoOverlayModule, NovoOverlayTemplateComponent, NovoPickerDirective, NovoPickerElement, NovoPickerModule, NovoPickerToggleElement, NovoPipesModule, NovoPopOverModule, NovoProgressBarElement, NovoProgressElement, NovoProgressModule, NovoPseudoCheckbox, NovoPseudoCheckboxModule, NovoQueryBuilderModule, NovoQuickNoteModule, NovoRadioElement, NovoRadioGroup, NovoRadioModule, NovoRailComponent, NovoRowChipElement, NovoRowChipsElement, NovoSearchBoxElement, NovoSearchBoxModule, NovoSelectChange, NovoSelectElement, NovoSelectModule, NovoSelectSearchClearDirective, NovoSelectSearchComponent, NovoSelectSearchModule, NovoSelection, NovoSidenavComponent, NovoSimpleActionCell, NovoSimpleCell, NovoSimpleCellDef, NovoSimpleCellHeader, NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSimpleColumnDef, NovoSimpleEmptyHeaderCell, NovoSimpleFilterFocus, NovoSimpleHeaderCell, NovoSimpleHeaderCellDef, NovoSimpleHeaderRow, NovoSimpleHeaderRowDef, NovoSimpleRow, NovoSimpleRowDef, NovoSimpleTableModule, NovoSimpleTablePagination, NovoSkeletonDirective, NovoSliderElement, NovoSliderModule, NovoSortFilter, NovoSpinnerElement, NovoStackElement, NovoStep, NovoStepHeader, NovoStepLabel, NovoStepStatus, NovoStepper, NovoStepperModule, NovoStepperNext, NovoStepperPrevious, NovoSwitchElement, NovoSwitchModule, NovoTabButtonElement, NovoTabElement, NovoTabLinkElement, NovoTabModule, NovoTabbedGroupPickerElement, NovoTabbedGroupPickerModule, NovoTable, NovoTableActionsElement, NovoTableElement, NovoTableExtrasModule, NovoTableFooterElement, NovoTableHeaderElement, NovoTableKeepFilterFocus, NovoTableMode, NovoTableModule, NovoTemplate, NovoTemplateService, NovoText, NovoTheme, NovoThemeOptions, NovoTilesElement, NovoTilesModule, NovoTimeFormatDirective, NovoTimePickerElement, NovoTimePickerInputElement, NovoTimePickerModule, NovoTipWellElement, NovoTipWellModule, NovoTitle, NovoToastElement, NovoToastModule, NovoToastService, NovoToolbar, NovoToolbarModule, NovoToolbarRow, NovoTooltip, NovoTooltipModule, NovoUtilActionComponent, NovoUtilsComponent, NovoValueElement, NovoValueModule, NovoVerticalStepper, NovoYearSelectElement, OptionsService, OutsideClick, PaddingDirective, PagedArrayCollection, Pagination, PercentageCell, PickerControl, PickerResults, PlacesListComponent, PluralPipe, PopOverContent, PopOverDirective, ProgressAppearance, QuickNoteControl, QuickNoteElement, QuickNoteResults, REMOVABLE_REF, RadioControl, RangeSelectionStrategy, ReadOnlyControl, RemoteActivityTableService, RemoteDataTableService, RenderPipe, RowDetails, Security, SelectControl, ShowOnDirtyErrorStateMatcher, SkillsSpecialtyPickerResults, SortDirection, StaticActivityTableService, StaticDataTableService, SwitchCasesDirective, SwitchControl, TIMEFORMAT_VALUE_ACCESSOR, TIME_FORMATS, TIME_VALUE_FORMATS, TableCell, TableFilter, TablePickerControl, TextAreaControl, TextBoxControl, TextColorDirective, ThOrderable, ThSortable, ThemeColorDirective, TilesControl, TimeControl, TimezoneControl, TooltipDirective, Unless, UnlessModule, VisibleDirective, WeekSelectionStrategy, WeekdayPipe, WorkersCompCodesPickerResults, YearPipe, _NovoCdkRowDef, _NovoCell, _NovoCellDef, _NovoColumnDef, _NovoHeaderCell, _NovoHeaderCellDef, _NovoHeaderRow, _NovoHeaderRowDef, _NovoRow, _countGroupLabelsBeforeOption, _getOptionScrollPosition, binarySearch, can, findByCountryCode, findByCountryId, findByCountryName, getCountries, getDayView, getDayViewHourGrid, getMonthView, getSpacingToken, getStateObjects, getStates, getWeekView, getWeekViewEventOffset, getWeekViewHeader, interpolateCell, isAlphaNumeric, mixinColor, mixinDisabled, mixinErrorState, mixinOverlay, mixinRequired, mixinSize, mixinTabIndex, notify, novoExpansionAnimations, novoStepperAnimations, slideInOut, throwNovoDuplicatedSidenavError, zoomInOut };
//# sourceMappingURL=novo-elements.mjs.map
