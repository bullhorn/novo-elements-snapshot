{"version":3,"file":"novo-elements-types.mjs","sources":["../../../projects/elements/types/date.types.ts","../../../projects/elements/types/form.types.ts","../../../projects/elements/types/novo-elements-types.ts"],"sourcesContent":["export type DateLike = Date | string | number;\n\nexport class DateRange<D = DateLike> {\n  // tslint:disable-next-line:no-unused-variable\n  private _disableStructuralEquivalency: never;\n\n  constructor(\n    /** The start date of the range. */\n    readonly start: D | null,\n    /** The end date of the range. */\n    readonly end: D | null,\n  ) {}\n}\n\nexport interface RangeModel {\n  startDate: Date;\n  endDate: Date;\n}\n\nexport interface DataTableRangeModel {\n  min: Date;\n  max: Date;\n}\n\nexport type modelTypes = Date | Date[] | RangeModel | DataTableRangeModel;\n\nexport interface Day {\n  date: Date;\n  isCurrentMonth?: boolean;\n  isToday?: boolean;\n  name?: string;\n  number?: string | number;\n}\n\nexport interface NovoDateSelectEvent {\n  event: Event;\n  day: Day;\n}\n\nexport interface NovoMonthSelectEvent {\n  event: Event;\n  month: number;\n}\n\nexport interface NovoYearSelectEvent {\n  event: Event;\n  year: number;\n}\n\nexport type DatePickerValueFormats = 'date' | 'iso8601';\n\nexport type DatePickerSelectModes = 'single' | 'multiple' | 'range' | 'week';\n\nexport type rangeSelectModes = 'startDate' | 'endDate';\n\n/** Object that can be provided in order to customize the date range selection behavior. */\nexport interface NovoDateSelectionStrategy<D = DateLike> {\n  /**\n   * Called when the user has finished selecting a value.\n   * @param date Date that was selected. Will be null if the user cleared the selection.\n   * @param currentValue Current value that is currently show in the calendar.\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\n   *    event, but it may get expanded in the future.\n   */\n  selectionFinished(date: DateLike | null, currentValue: D, event: Event): D;\n\n  /**\n   * Called when the user has activated a new date (e.g. by hovering over\n   * it or moving focus) and the calendar tries to display a date range.\n   *\n   * @param activeDate Date that the user has activated. Will be null if the user moved\n   *    focus to an element that's no a calendar cell.\n   * @param currentRange Range that is currently shown in the calendar.\n   * @param event DOM event that caused the preview to be changed. Will be either a\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\n   */\n  createPreview(activeDate: DateLike | null, currentValue: D, event: Event): D;\n\n  isSelected(activeDate: DateLike | null, currentValue: D): boolean;\n}\n\nexport interface OverlayDate {\n  date: Date;\n  type: string;\n}\n","import { EventEmitter } from '@angular/core';\n\nexport interface IMaskOptions {\n  mask: any;\n  keepCharPositions: boolean;\n  guide: boolean;\n}\n\nexport abstract class ControlConfig {\n  alwaysActive?: Boolean;\n  allowInvalidDate?: boolean;\n  appendToBody: boolean; // Deprecated;\n  associatedEntity: string;\n  asyncValidators?: Array<any>;\n  checkboxLabel: string;\n  closeOnSelect: boolean;\n  config: any;\n  controlType: string;\n  currencyFormat: string;\n  customControl?: any;\n  customControlConfig?: any;\n  dataSpecialization: string;\n  dataType: string;\n  dateFormat?: string;\n  description?: string;\n  dirty: boolean;\n  disabled: boolean;\n  enabled: boolean;\n  encrypted: boolean;\n  endDate?: Date | Number;\n  fileBrowserImageUploadUrl?: string;\n  forceClear: EventEmitter<any>;\n  headerConfig: any;\n  hidden: boolean;\n  interactions: Array<{ event?: 'change' | 'focus' | string; invokeOnInit?: boolean; script? }>;\n  isEmpty?: Function;\n  key: string;\n  label: string;\n  maskOptions?: IMaskOptions;\n  maxlength: number;\n  metaType: string;\n  military?: boolean;\n  minimal?: boolean;\n  minlength: number;\n  multiple: boolean;\n  name: string;\n  options: Array<any>;\n  optionsType: string;\n  parentScrollSelector: string;\n  placeholder: string;\n  readOnly: boolean; // \"disabled\", so it appears in the model still;\n  removeTooltipArrow?: boolean;\n  required: boolean;\n  restrictFieldInteractions?: boolean;\n  sortOrder: number;\n  startDate?: Date | Number;\n  startupFocus?: boolean;\n  subType?: string;\n  template?: any;\n  textMaskEnabled?: boolean;\n  tooltip?: string;\n  tooltipAutoPosition?: boolean;\n  tooltipPosition?: string;\n  tooltipPreline?: boolean;\n  tooltipSize?: string;\n  type: string;\n  validators: Array<any>;\n  value: any;\n  warning?: string;\n  width: number;\n  layoutOptions?: {\n    customActions?: boolean;\n    download?: boolean;\n    draggable?: boolean;\n    edit?: boolean;\n    iconStyle?: string;\n    labelStyle?: string;\n    order?: string;\n    removable?: boolean;\n    customValidation?: { action: string; fn: Function }[];\n    removableWhenNew?: boolean;\n  };\n  tipWell?: {\n    button?: boolean;\n    icon?: string;\n    tip: string;\n  };\n  isEmbedded = false;\n  isInlineEmbedded = false;\n  weekStart?: number;\n  highlighted = false;\n  disabledDateMessage?: string;\n}\n\nexport type NovoControlConfig = Partial<ControlConfig>;\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"MAEa,SAAS,CAAA;AAIpB,IAAA,WAAA;;IAEW,KAAe;;IAEf,GAAa,EAAA;AAFb,QAAA,IAAK,CAAA,KAAA,GAAL,KAAK,CAAU;AAEf,QAAA,IAAG,CAAA,GAAA,GAAH,GAAG,CAAU;KACpB;AACL;;MCJqB,aAAa,CAAA;AAAnC,IAAA,WAAA,GAAA;AA+EE,QAAA,IAAU,CAAA,UAAA,GAAG,KAAK,CAAC;AACnB,QAAA,IAAgB,CAAA,gBAAA,GAAG,KAAK,CAAC;AAEzB,QAAA,IAAW,CAAA,WAAA,GAAG,KAAK,CAAC;KAErB;AAAA;;AC5FD;;AAEG;;;;"}