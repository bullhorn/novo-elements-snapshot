{"version":3,"file":"FormUtils.d.ts","sources":["FormUtils.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NovoControlConfig } from '../../elements/form/FormControls';\r\nimport { NovoFieldset, FormField } from '../../elements/form/FormInterfaces';\r\nimport { NovoFormGroup } from '../../elements/form/NovoFormGroup';\r\nimport { NovoLabelService } from '../../services/novo-label-service';\r\nimport { OptionsService } from './../../services/options/OptionsService';\r\nexport declare class FormUtils {\r\n    labels: NovoLabelService;\r\n    optionsService: OptionsService;\r\n    ASSOCIATED_ENTITY_LIST: string[];\r\n    ENTITY_PICKER_LIST: string[];\r\n    constructor(labels: NovoLabelService, optionsService: OptionsService);\r\n    toFormGroup(controls: Array<any>): NovoFormGroup;\r\n    emptyFormGroup(): NovoFormGroup;\r\n    addControls(formGroup: NovoFormGroup, controls: Array<NovoControlConfig>): void;\r\n    removeControls(formGroup: NovoFormGroup, controls: Array<NovoControlConfig>): void;\r\n    toFormGroupFromFieldset(fieldsets: Array<NovoFieldset>): NovoFormGroup;\r\n    hasAssociatedEntity(field: FormField): boolean;\r\n    determineInputType(field: FormField): string;\r\n    isFieldEncrypted(key: string): boolean;\r\n    getControlForField(field: any, http: any, config: {\r\n        token?: string;\r\n        restUrl?: string;\r\n        military?: boolean;\r\n        weekStart?: number;\r\n    }, overrides?: any, forTable?: boolean, fieldData?: any): any;\r\n    private shouldCreateControl;\r\n    toControls(meta: any, currencyFormat: any, http: any, config: {\r\n        token?: string;\r\n        restUrl?: string;\r\n        military?: boolean;\r\n        weekStart?: number;\r\n    }, overrides?: any, forTable?: boolean): any[];\r\n    toTableControls(meta: any, currencyFormat: any, http: any, config: {\r\n        token?: string;\r\n        restUrl?: string;\r\n        military?: boolean;\r\n    }, overrides?: any): {};\r\n    toFieldSets(meta: any, currencyFormat: any, http: any, config: {\r\n        token?: string;\r\n        restUrl?: string;\r\n        military?: boolean;\r\n        weekStart?: number;\r\n    }, overrides?: any, data?: {\r\n        [key: string]: any;\r\n    }): NovoFieldset[];\r\n    private isEmbeddedField;\r\n    private createControl;\r\n    private isEmbeddedFieldData;\r\n    private getFieldData;\r\n    private getEmbeddedFieldData;\r\n    private getFormFields;\r\n    private getInlineEmbeddedFields;\r\n    private getAssociatedFieldsForInlineEmbedded;\r\n    private getEmbeddedFields;\r\n    private isHeader;\r\n    private insertHeaderToFieldsets;\r\n    private markControlAsEmbedded;\r\n    getControlOptions(field: any, http: any, config: {\r\n        token?: string;\r\n        restUrl?: string;\r\n        military?: boolean;\r\n    }, fieldData?: any): any;\r\n    private getWorkflowOptions;\r\n    setInitialValues(controls: Array<NovoControlConfig>, values: any, keepClean?: boolean, keyOverride?: string): void;\r\n    setInitialValuesFieldsets(fieldsets: Array<NovoFieldset>, values: any, keepClean?: boolean): void;\r\n    forceShowAllControls(controls: Array<NovoControlConfig>): void;\r\n    forceShowAllControlsInFieldsets(fieldsets: Array<NovoFieldset>): void;\r\n    forceValidation(form: NovoFormGroup): void;\r\n    isAddressEmpty(control: any): boolean;\r\n    private getStartDateFromRange;\r\n    /**\r\n     * Get the min start date of a Date base on field data.\r\n     */\r\n    private getStartDate;\r\n    private inferStartDate;\r\n    inflateEmbeddedProperties(data: object): object;\r\n}\r\n"]}