{"version":3,"file":"FormUtils.d.ts","sources":["FormUtils.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NovoControlConfig } from '../../elements/form/FormControls';\nimport { NovoFieldset, FormField } from '../../elements/form/FormInterfaces';\nimport { NovoFormGroup } from '../../elements/form/NovoFormGroup';\nimport { NovoLabelService } from '../../services/novo-label-service';\nimport { OptionsService } from './../../services/options/OptionsService';\nexport declare class FormUtils {\n    labels: NovoLabelService;\n    optionsService: OptionsService;\n    ASSOCIATED_ENTITY_LIST: string[];\n    ENTITY_PICKER_LIST: string[];\n    constructor(labels: NovoLabelService, optionsService: OptionsService);\n    toFormGroup(controls: Array<any>): NovoFormGroup;\n    emptyFormGroup(): NovoFormGroup;\n    addControls(formGroup: NovoFormGroup, controls: Array<NovoControlConfig>): void;\n    removeControls(formGroup: NovoFormGroup, controls: Array<NovoControlConfig>): void;\n    toFormGroupFromFieldset(fieldsets: Array<NovoFieldset>): NovoFormGroup;\n    hasAssociatedEntity(field: FormField): boolean;\n    determineInputType(field: FormField): string;\n    isFieldEncrypted(key: string): boolean;\n    getControlForField(field: any, http: any, config: {\n        token?: string;\n        restUrl?: string;\n        military?: boolean;\n        weekStart?: number;\n    }, overrides?: any, forTable?: boolean, fieldData?: any): any;\n    private shouldCreateControl;\n    toControls(meta: any, currencyFormat: any, http: any, config: {\n        token?: string;\n        restUrl?: string;\n        military?: boolean;\n        weekStart?: number;\n    }, overrides?: any, forTable?: boolean): any[];\n    toTableControls(meta: any, currencyFormat: any, http: any, config: {\n        token?: string;\n        restUrl?: string;\n        military?: boolean;\n    }, overrides?: any): {};\n    toFieldSets(meta: any, currencyFormat: any, http: any, config: {\n        token?: string;\n        restUrl?: string;\n        military?: boolean;\n        weekStart?: number;\n    }, overrides?: any, data?: {\n        [key: string]: any;\n    }): NovoFieldset[];\n    private isEmbeddedField;\n    private createControl;\n    private isEmbeddedFieldData;\n    private getFieldData;\n    private getEmbeddedFieldData;\n    private getFormFields;\n    private getInlineEmbeddedFields;\n    private getAssociatedFieldsForInlineEmbedded;\n    private getEmbeddedFields;\n    private isHeader;\n    private insertHeaderToFieldsets;\n    private markControlAsEmbedded;\n    getControlOptions(field: any, http: any, config: {\n        token?: string;\n        restUrl?: string;\n        military?: boolean;\n    }, fieldData?: any): any;\n    private getWorkflowOptions;\n    setInitialValues(controls: Array<NovoControlConfig>, values: any, keepClean?: boolean, keyOverride?: string): void;\n    setInitialValuesFieldsets(fieldsets: Array<NovoFieldset>, values: any, keepClean?: boolean): void;\n    forceShowAllControls(controls: Array<NovoControlConfig>): void;\n    forceShowAllControlsInFieldsets(fieldsets: Array<NovoFieldset>): void;\n    forceValidation(form: NovoFormGroup): void;\n    isAddressEmpty(control: any): boolean;\n    private getStartDateFromRange;\n    /**\n     * Get the min start date of a Date base on field data.\n     */\n    private getStartDate;\n    private inferStartDate;\n    inflateEmbeddedProperties(data: object): object;\n}\n"]}