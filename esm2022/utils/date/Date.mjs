import { addDays, addMonths, addWeeks, differenceInCalendarDays, differenceInDays, differenceInSeconds, endOfDay, endOfMonth, endOfWeek, format, getMonth, getYear, isAfter, isBefore, isSameDay, isSameMonth, isSameSecond, isWithinInterval, setHours, setMinutes, startOfDay, startOfMinute, startOfMonth, startOfWeek } from 'date-fns';
import { convertTokens } from './convert-tokens';
import { legacyParse } from './legacy-parse';
/**
 * This DateUtil is a wrapper for calling new date-fns v2 functions with existing legacy
 * v1 function calls without having to refactor too much code and potentially introduce
 * breaking changes.
 *
 * The old calls generally called date-fns functions with loosely-typed date values, often
 * of type DateLike (Date | string | number). This was a problem when upgrading to date-fns
 * v2 since functions are now typed more strongly and no longer accept strings.
 *
 * If you are adding a new component/feature and looking here to add a new date-fns wrapper
 * function, strongly consider not doing that and instead refactoring your code to not use
 * DateLike, and calling the date-fns function(s) directly.
 **/
export class DateUtil {
    static getDateFromAnyType(date) {
        return legacyParse(date);
    }
    static getWeekDayFromNumber(weekDay) {
        if (0 <= weekDay && weekDay <= 6) {
            return weekDay;
        }
        else {
            console.warn('Invalid weekDay value:', weekDay);
            return 0;
        }
    }
    static parse(date, options) {
        return legacyParse(date, options);
    }
    static format(date, formatString) {
        if (!date) {
            return '';
        }
        date = this.getDateFromAnyType(date);
        formatString = convertTokens(formatString);
        return format(date, formatString);
    }
    static addDays(date, days) {
        date = this.getDateFromAnyType(date);
        return addDays(date, days);
    }
    static addWeeks(date, weeks) {
        date = this.getDateFromAnyType(date);
        return addWeeks(date, weeks);
    }
    static addMonths(date, months) {
        date = this.getDateFromAnyType(date);
        return addMonths(date, months);
    }
    static startOfMinute(date) {
        date = this.getDateFromAnyType(date);
        return startOfMinute(date);
    }
    static startOfDay(date) {
        date = this.getDateFromAnyType(date);
        return startOfDay(date);
    }
    static startOfWeek(date, options) {
        date = this.getDateFromAnyType(date);
        if (options?.weekStartsOn) {
            options.weekStartsOn = this.getWeekDayFromNumber(options.weekStartsOn);
        }
        return startOfWeek(date, options);
    }
    static startOfMonth(date) {
        date = this.getDateFromAnyType(date);
        return startOfMonth(date);
    }
    static endOfDay(date) {
        date = this.getDateFromAnyType(date);
        return endOfDay(date);
    }
    static endOfWeek(date, options) {
        date = this.getDateFromAnyType(date);
        if (options?.weekStartsOn) {
            options.weekStartsOn = this.getWeekDayFromNumber(options.weekStartsOn);
        }
        return endOfWeek(date, options);
    }
    static endOfMonth(date) {
        date = this.getDateFromAnyType(date);
        return endOfMonth(date);
    }
    static isSameDay(dateLeft, dateRight) {
        dateLeft = this.getDateFromAnyType(dateLeft);
        dateRight = this.getDateFromAnyType(dateRight);
        return isSameDay(dateLeft, dateRight);
    }
    static isSameMonth(dateLeft, dateRight) {
        dateLeft = this.getDateFromAnyType(dateLeft);
        dateRight = this.getDateFromAnyType(dateRight);
        return isSameMonth(dateLeft, dateRight);
    }
    static isSameSecond(dateLeft, dateRight) {
        dateLeft = this.getDateFromAnyType(dateLeft);
        dateRight = this.getDateFromAnyType(dateRight);
        return isSameSecond(dateLeft, dateRight);
    }
    static differenceInSeconds(date, start) {
        date = this.getDateFromAnyType(date);
        start = this.getDateFromAnyType(start);
        return differenceInSeconds(date, start);
    }
    static differenceInCalendarDays(date, start) {
        date = this.getDateFromAnyType(date);
        start = this.getDateFromAnyType(start);
        return differenceInCalendarDays(date, start);
    }
    static differenceInDays(date, start) {
        date = this.getDateFromAnyType(date);
        start = this.getDateFromAnyType(start);
        return differenceInDays(date, start);
    }
    static isWithinRange(date, start, end) {
        date = this.getDateFromAnyType(date);
        const interval = {
            start: this.getDateFromAnyType(start),
            end: this.getDateFromAnyType(end),
        };
        /**
         * Need extra error handling here to retain backwards compatibility because the new
         * isWithinInterval replacement function throws an error for Invalid Dates and Invalid
         * Intervals instead of returning true or false.
         **/
        try {
            return isWithinInterval(date, interval);
        }
        catch (e) {
            console.warn(e.toString());
            return false;
        }
    }
    static getMonth(date) {
        date = this.getDateFromAnyType(date);
        return getMonth(date);
    }
    static getYear(date) {
        date = this.getDateFromAnyType(date);
        return getYear(date);
    }
    static setMinutes(date, minutes) {
        date = this.getDateFromAnyType(date);
        return setMinutes(date, minutes);
    }
    static setHours(date, hours) {
        date = this.getDateFromAnyType(date);
        return setHours(date, hours);
    }
    static isBefore(date, minDate) {
        date = this.getDateFromAnyType(date);
        return isBefore(date, minDate);
    }
    static isAfter(date, maxDate) {
        date = this.getDateFromAnyType(date);
        return isAfter(date, maxDate);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25vdm8tZWxlbWVudHMvc3JjL3V0aWxzL2RhdGUvRGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQzVCLHdCQUF3QixFQUFFLGdCQUFnQixFQUMxQyxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFDL0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxnQkFBZ0IsRUFDekUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQzdFLE1BQU0sVUFBVSxDQUFDO0FBQ2xCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQXNCLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBSWpFOzs7Ozs7Ozs7Ozs7SUFZSTtBQUNKLE1BQU0sT0FBTyxRQUFRO0lBQ2pCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFjO1FBQ3BDLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsT0FBcUI7UUFDN0MsSUFBSSxDQUFDLElBQUksT0FBTyxJQUFJLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztZQUMvQixPQUFPLE9BQWMsQ0FBQztRQUMxQixDQUFDO2FBQU0sQ0FBQztZQUNKLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDaEQsT0FBTyxDQUFDLENBQUM7UUFDYixDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBUyxFQUFFLE9BQTRC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dGVudCI6WyJpbXBvcnQge1xuICAgIERheSxcbiAgICBhZGREYXlzLCBhZGRNb250aHMsIGFkZFdlZWtzLFxuICAgIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cywgZGlmZmVyZW5jZUluRGF5cyxcbiAgICBkaWZmZXJlbmNlSW5TZWNvbmRzLCBlbmRPZkRheSwgZW5kT2ZNb250aCwgZW5kT2ZXZWVrLCBmb3JtYXQsIGdldE1vbnRoLCBnZXRZZWFyLFxuICAgIGlzQWZ0ZXIsIGlzQmVmb3JlLCBpc1NhbWVEYXksIGlzU2FtZU1vbnRoLCBpc1NhbWVTZWNvbmQsIGlzV2l0aGluSW50ZXJ2YWwsXG4gICAgc2V0SG91cnMsIHNldE1pbnV0ZXMsIHN0YXJ0T2ZEYXksIHN0YXJ0T2ZNaW51dGUsIHN0YXJ0T2ZNb250aCwgc3RhcnRPZldlZWtcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuaW1wb3J0IHsgY29udmVydFRva2VucyB9IGZyb20gJy4vY29udmVydC10b2tlbnMnO1xuaW1wb3J0IHsgTGVnYWN5UGFyc2VPcHRpb25zLCBsZWdhY3lQYXJzZSB9IGZyb20gJy4vbGVnYWN5LXBhcnNlJztcblxudHlwZSBEYXRlTGlrZSA9IERhdGUgfCBzdHJpbmcgfCBudW1iZXI7XG5cbi8qKlxuICogVGhpcyBEYXRlVXRpbCBpcyBhIHdyYXBwZXIgZm9yIGNhbGxpbmcgbmV3IGRhdGUtZm5zIHYyIGZ1bmN0aW9ucyB3aXRoIGV4aXN0aW5nIGxlZ2FjeVxuICogdjEgZnVuY3Rpb24gY2FsbHMgd2l0aG91dCBoYXZpbmcgdG8gcmVmYWN0b3IgdG9vIG11Y2ggY29kZSBhbmQgcG90ZW50aWFsbHkgaW50cm9kdWNlXG4gKiBicmVha2luZyBjaGFuZ2VzLlxuICpcbiAqIFRoZSBvbGQgY2FsbHMgZ2VuZXJhbGx5IGNhbGxlZCBkYXRlLWZucyBmdW5jdGlvbnMgd2l0aCBsb29zZWx5LXR5cGVkIGRhdGUgdmFsdWVzLCBvZnRlblxuICogb2YgdHlwZSBEYXRlTGlrZSAoRGF0ZSB8IHN0cmluZyB8IG51bWJlcikuIFRoaXMgd2FzIGEgcHJvYmxlbSB3aGVuIHVwZ3JhZGluZyB0byBkYXRlLWZuc1xuICogdjIgc2luY2UgZnVuY3Rpb25zIGFyZSBub3cgdHlwZWQgbW9yZSBzdHJvbmdseSBhbmQgbm8gbG9uZ2VyIGFjY2VwdCBzdHJpbmdzLlxuICpcbiAqIElmIHlvdSBhcmUgYWRkaW5nIGEgbmV3IGNvbXBvbmVudC9mZWF0dXJlIGFuZCBsb29raW5nIGhlcmUgdG8gYWRkIGEgbmV3IGRhdGUtZm5zIHdyYXBwZXJcbiAqIGZ1bmN0aW9uLCBzdHJvbmdseSBjb25zaWRlciBub3QgZG9pbmcgdGhhdCBhbmQgaW5zdGVhZCByZWZhY3RvcmluZyB5b3VyIGNvZGUgdG8gbm90IHVzZVxuICogRGF0ZUxpa2UsIGFuZCBjYWxsaW5nIHRoZSBkYXRlLWZucyBmdW5jdGlvbihzKSBkaXJlY3RseS5cbiAqKi9cbmV4cG9ydCBjbGFzcyBEYXRlVXRpbCB7XG4gICAgc3RhdGljIGdldERhdGVGcm9tQW55VHlwZShkYXRlOiBEYXRlTGlrZSk6IERhdGUgfCBudW1iZXIge1xuICAgICAgICByZXR1cm4gbGVnYWN5UGFyc2UoZGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGdldFdlZWtEYXlGcm9tTnVtYmVyKHdlZWtEYXk6IG51bWJlciB8IERheSk6IERheSB7XG4gICAgICAgIGlmICgwIDw9IHdlZWtEYXkgJiYgd2Vla0RheSA8PSA2KSB7XG4gICAgICAgICAgICByZXR1cm4gd2Vla0RheSBhcyBEYXk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ludmFsaWQgd2Vla0RheSB2YWx1ZTonLCB3ZWVrRGF5KTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhdGljIHBhcnNlKGRhdGU6IGFueSwgb3B0aW9ucz86IExlZ2FjeVBhcnNlT3B0aW9ucyk6IERhdGUge1xuICAgICAgICByZXR1cm4gbGVnYWN5UGFyc2UoZGF0ZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZvcm1hdChkYXRlLCBmb3JtYXRTdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBpZiAoIWRhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIGZvcm1hdFN0cmluZyA9IGNvbnZlcnRUb2tlbnMoZm9ybWF0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIGZvcm1hdChkYXRlLCBmb3JtYXRTdHJpbmcpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGREYXlzKGRhdGUsIGRheXM6IG51bWJlcik6IERhdGUge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIHJldHVybiBhZGREYXlzKGRhdGUsIGRheXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBhZGRXZWVrcyhkYXRlLCB3ZWVrczogbnVtYmVyKTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGFkZFdlZWtzKGRhdGUsIHdlZWtzKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgYWRkTW9udGhzKGRhdGUsIG1vbnRoczogbnVtYmVyKTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGFkZE1vbnRocyhkYXRlLCBtb250aHMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzdGFydE9mTWludXRlKGRhdGU6IERhdGVMaWtlKTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIHN0YXJ0T2ZNaW51dGUoZGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHN0YXJ0T2ZEYXkoZGF0ZTogRGF0ZUxpa2UpOiBEYXRlIHtcbiAgICAgICAgZGF0ZSA9IHRoaXMuZ2V0RGF0ZUZyb21BbnlUeXBlKGRhdGUpO1xuICAgICAgICByZXR1cm4gc3RhcnRPZkRheShkYXRlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc3RhcnRPZldlZWsoZGF0ZTogRGF0ZUxpa2UsIG9wdGlvbnM/KTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgaWYgKG9wdGlvbnM/LndlZWtTdGFydHNPbikge1xuICAgICAgICAgICAgb3B0aW9ucy53ZWVrU3RhcnRzT24gPSB0aGlzLmdldFdlZWtEYXlGcm9tTnVtYmVyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RhcnRPZldlZWsoZGF0ZSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgc3RhdGljIHN0YXJ0T2ZNb250aChkYXRlOiBEYXRlTGlrZSk6IERhdGUge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIHJldHVybiBzdGFydE9mTW9udGgoZGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGVuZE9mRGF5KGRhdGU6IERhdGVMaWtlKTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGVuZE9mRGF5KGRhdGUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbmRPZldlZWsoZGF0ZTogRGF0ZUxpa2UsIG9wdGlvbnM/KTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgaWYgKG9wdGlvbnM/LndlZWtTdGFydHNPbikge1xuICAgICAgICAgICAgb3B0aW9ucy53ZWVrU3RhcnRzT24gPSB0aGlzLmdldFdlZWtEYXlGcm9tTnVtYmVyKG9wdGlvbnMud2Vla1N0YXJ0c09uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW5kT2ZXZWVrKGRhdGUsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBlbmRPZk1vbnRoKGRhdGU6IERhdGVMaWtlKTogRGF0ZSB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGVuZE9mTW9udGgoZGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzU2FtZURheShkYXRlTGVmdDogRGF0ZUxpa2UsIGRhdGVSaWdodDogRGF0ZUxpa2UpOiBib29sZWFuIHtcbiAgICAgICAgZGF0ZUxlZnQgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlTGVmdCk7XG4gICAgICAgIGRhdGVSaWdodCA9IHRoaXMuZ2V0RGF0ZUZyb21BbnlUeXBlKGRhdGVSaWdodCk7XG4gICAgICAgIHJldHVybiBpc1NhbWVEYXkoZGF0ZUxlZnQsIGRhdGVSaWdodCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzU2FtZU1vbnRoKGRhdGVMZWZ0OiBEYXRlTGlrZSwgZGF0ZVJpZ2h0OiBEYXRlTGlrZSk6IGJvb2xlYW4ge1xuICAgICAgICBkYXRlTGVmdCA9IHRoaXMuZ2V0RGF0ZUZyb21BbnlUeXBlKGRhdGVMZWZ0KTtcbiAgICAgICAgZGF0ZVJpZ2h0ID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZVJpZ2h0KTtcbiAgICAgICAgcmV0dXJuIGlzU2FtZU1vbnRoKGRhdGVMZWZ0LCBkYXRlUmlnaHQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc1NhbWVTZWNvbmQoZGF0ZUxlZnQ6IERhdGVMaWtlLCBkYXRlUmlnaHQ6IERhdGVMaWtlKTogYm9vbGVhbiB7XG4gICAgICAgIGRhdGVMZWZ0ID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZUxlZnQpO1xuICAgICAgICBkYXRlUmlnaHQgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlUmlnaHQpO1xuICAgICAgICByZXR1cm4gaXNTYW1lU2Vjb25kKGRhdGVMZWZ0LCBkYXRlUmlnaHQpO1xuICAgIH1cblxuICAgIHN0YXRpYyBkaWZmZXJlbmNlSW5TZWNvbmRzKGRhdGU6IERhdGVMaWtlLCBzdGFydDogRGF0ZUxpa2UpOiBudW1iZXIge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIHN0YXJ0ID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoc3RhcnQpO1xuICAgICAgICByZXR1cm4gZGlmZmVyZW5jZUluU2Vjb25kcyhkYXRlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlOiBEYXRlTGlrZSwgc3RhcnQ6IERhdGVMaWtlKTogbnVtYmVyIHtcbiAgICAgICAgZGF0ZSA9IHRoaXMuZ2V0RGF0ZUZyb21BbnlUeXBlKGRhdGUpO1xuICAgICAgICBzdGFydCA9IHRoaXMuZ2V0RGF0ZUZyb21BbnlUeXBlKHN0YXJ0KTtcbiAgICAgICAgcmV0dXJuIGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyhkYXRlLCBzdGFydCk7XG4gICAgfVxuXG4gICAgc3RhdGljIGRpZmZlcmVuY2VJbkRheXMoZGF0ZTogRGF0ZUxpa2UsIHN0YXJ0OiBEYXRlTGlrZSk6IG51bWJlciB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgc3RhcnQgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShzdGFydCk7XG4gICAgICAgIHJldHVybiBkaWZmZXJlbmNlSW5EYXlzKGRhdGUsIHN0YXJ0KTtcbiAgICB9XG5cbiAgICBzdGF0aWMgaXNXaXRoaW5SYW5nZShkYXRlOiBEYXRlTGlrZSB8IG51bGwsIHN0YXJ0OiBEYXRlTGlrZSwgZW5kOiBEYXRlTGlrZSk6IGJvb2xlYW4ge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIGNvbnN0IGludGVydmFsID0ge1xuICAgICAgICAgICAgc3RhcnQ6IHRoaXMuZ2V0RGF0ZUZyb21BbnlUeXBlKHN0YXJ0KSxcbiAgICAgICAgICAgIGVuZDogdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZW5kKSxcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTmVlZCBleHRyYSBlcnJvciBoYW5kbGluZyBoZXJlIHRvIHJldGFpbiBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBiZWNhdXNlIHRoZSBuZXdcbiAgICAgICAgICogaXNXaXRoaW5JbnRlcnZhbCByZXBsYWNlbWVudCBmdW5jdGlvbiB0aHJvd3MgYW4gZXJyb3IgZm9yIEludmFsaWQgRGF0ZXMgYW5kIEludmFsaWRcbiAgICAgICAgICogSW50ZXJ2YWxzIGluc3RlYWQgb2YgcmV0dXJuaW5nIHRydWUgb3IgZmFsc2UuXG4gICAgICAgICAqKi9cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICByZXR1cm4gaXNXaXRoaW5JbnRlcnZhbChkYXRlLCBpbnRlcnZhbCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oZS50b1N0cmluZygpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0TW9udGgoZGF0ZTogRGF0ZUxpa2UpOiBudW1iZXIge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIHJldHVybiBnZXRNb250aChkYXRlKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0WWVhcihkYXRlOiBEYXRlTGlrZSk6IG51bWJlciB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGdldFllYXIoZGF0ZSk7XG4gICAgfVxuXG4gICAgc3RhdGljIHNldE1pbnV0ZXMoZGF0ZTogRGF0ZUxpa2UsIG1pbnV0ZXM6IG51bWJlcikge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIHJldHVybiBzZXRNaW51dGVzKGRhdGUsIG1pbnV0ZXMpO1xuICAgIH1cblxuICAgIHN0YXRpYyBzZXRIb3VycyhkYXRlOiBEYXRlTGlrZSwgaG91cnM6IG51bWJlcikge1xuICAgICAgICBkYXRlID0gdGhpcy5nZXREYXRlRnJvbUFueVR5cGUoZGF0ZSk7XG4gICAgICAgIHJldHVybiBzZXRIb3VycyhkYXRlLCBob3Vycyk7XG4gICAgfVxuXG4gICAgc3RhdGljIGlzQmVmb3JlKGRhdGU6IERhdGVMaWtlLCBtaW5EYXRlOiBEYXRlIHwgbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGlzQmVmb3JlKGRhdGUsIG1pbkRhdGUpO1xuICAgIH1cblxuICAgIHN0YXRpYyBpc0FmdGVyKGRhdGU6IERhdGVMaWtlLCBtYXhEYXRlOiBEYXRlIHwgbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGRhdGUgPSB0aGlzLmdldERhdGVGcm9tQW55VHlwZShkYXRlKTtcbiAgICAgICAgcmV0dXJuIGlzQWZ0ZXIoZGF0ZSwgbWF4RGF0ZSk7XG4gICAgfVxufVxuIl19