import { addHours, addMinutes, differenceInMinutes, getDay } from 'date-fns';
import { DateUtil } from '../date';
const WEEKEND_DAY_NUMBERS = [0, 6];
const DAYS_IN_WEEK = 7;
const HOURS_IN_DAY = 24;
const MINUTES_IN_HOUR = 60;
export var CalendarEventResponse;
(function (CalendarEventResponse) {
    CalendarEventResponse[CalendarEventResponse["Maybe"] = 0] = "Maybe";
    CalendarEventResponse[CalendarEventResponse["Accepted"] = 1] = "Accepted";
    CalendarEventResponse[CalendarEventResponse["Rejected"] = 2] = "Rejected";
})(CalendarEventResponse || (CalendarEventResponse = {}));
function getExcludedDays({ startDate, days, excluded }) {
    if (excluded.length < 1) {
        return 0;
    }
    let day = startDate.getDay();
    let reduce = 0;
    for (let i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some((e) => e === day)) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
function getWeekViewEventSpan({ event, offset, startOfWeek, excluded, }) {
    const begin = event.start < startOfWeek ? startOfWeek : event.start;
    let span = 1;
    if (event.end) {
        span = DateUtil.differenceInDays(addMinutes(DateUtil.endOfDay(event.end), 1), DateUtil.startOfDay(begin));
    }
    const totalLength = offset + span;
    if (totalLength > DAYS_IN_WEEK) {
        span = DAYS_IN_WEEK - offset;
    }
    return span - getExcludedDays({ startDate: begin, days: span, excluded });
}
export function getWeekViewEventOffset({ event, startOfWeek, excluded = [], }) {
    if (event.start < startOfWeek) {
        return 0;
    }
    const distance = DateUtil.differenceInDays(event.start, startOfWeek);
    return distance - getExcludedDays({ startDate: startOfWeek, days: distance, excluded });
}
function isEventIsPeriod({ event, periodStart, periodEnd }) {
    const eventStart = event.start;
    const eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (DateUtil.isSameSecond(eventStart, periodStart) || DateUtil.isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (DateUtil.isSameSecond(eventEnd, periodStart) || DateUtil.isSameSecond(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
function getEventsInPeriod({ events, periodStart, periodEnd }) {
    return events.filter((event) => isEventIsPeriod({ event, periodStart, periodEnd }));
}
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter((event) => {
        const eventStart = event.start;
        const eventEnd = event.end || eventStart;
        const startOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfDay(eventStart), dayStart.hour), dayStart.minute);
        const endOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
        return DateUtil.isAfter(eventEnd, startOfView) && DateUtil.isBefore(eventStart, endOfView);
    });
}
function getWeekDay({ date }) {
    const today = DateUtil.startOfDay(new Date());
    return {
        date,
        isPast: date < today,
        isToday: DateUtil.isSameDay(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(getDay(date)) > -1,
    };
}
export function getWeekViewHeader({ viewDate, weekStartsOn, excluded = [], }) {
    const start = DateUtil.startOfWeek(viewDate, { weekStartsOn });
    const days = [];
    for (let i = 0; i < DAYS_IN_WEEK; i++) {
        const date = DateUtil.addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            days.push(getWeekDay({ date }));
        }
    }
    return days;
}
export function getWeekView({ events = [], viewDate, weekStartsOn, excluded = [], hourSegments, segmentHeight, dayStart, dayEnd, }) {
    if (!events) {
        events = [];
    }
    const startOfViewWeek = DateUtil.startOfWeek(viewDate, { weekStartsOn });
    const endOfViewWeek = DateUtil.endOfWeek(viewDate, { weekStartsOn });
    const maxRange = DAYS_IN_WEEK - excluded.length;
    const eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
        .map((event) => {
        const offset = getWeekViewEventOffset({ event, startOfWeek: startOfViewWeek, excluded });
        const span = 1; // getWeekViewEventSpan({ event, offset, startOfWeek: startOfViewWeek, excluded });
        return { event, offset, span };
    })
        .filter((e) => e.offset < maxRange)
        .filter((e) => e.span > 0)
        .map((entry) => ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0,
    }))
        .sort((itemA, itemB) => {
        const startSecondsDiff = DateUtil.differenceInSeconds(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return DateUtil.differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    })
        .map((entry) => {
        const startOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
        const endOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfMinute(DateUtil.endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
        const eventStart = entry.event.start;
        const eventEnd = entry.event.end || eventStart;
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        if (eventStart > startOfView) {
            entry.top += differenceInMinutes(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        const startsBeforeDay = eventStart < startOfView;
        const endsAfterDay = eventEnd > endOfView;
        const startDate = startsBeforeDay ? startOfView : eventStart;
        const endDate = endsAfterDay ? endOfView : eventEnd;
        let height = differenceInMinutes(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    });
    const eventRows = [];
    const allocatedEvents = [];
    eventsMapped.forEach((event, index) => {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            const otherRowEvents = eventsMapped.slice(index + 1).filter((nextEvent) => {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            });
            if (otherRowEvents.length > 0) {
                const totalEventsForRow = otherRowEvents.length + 1;
                event.span = 1 / totalEventsForRow;
                let nextOffset = event.span + event.offset;
                otherRowEvents.forEach((nextEvent) => {
                    nextEvent.offset = nextOffset;
                    nextEvent.span = event.span;
                    nextOffset = nextEvent.span + nextEvent.offset;
                });
                allocatedEvents.push(...otherRowEvents);
            }
            eventRows.push({
                row: [event, ...otherRowEvents],
            });
        }
    });
    return eventRows;
}
export function getMonthView({ events = [], viewDate, weekStartsOn, excluded = [], }) {
    if (!events) {
        events = [];
    }
    const start = DateUtil.startOfWeek(DateUtil.startOfMonth(viewDate), { weekStartsOn });
    const end = DateUtil.endOfWeek(DateUtil.endOfMonth(viewDate), { weekStartsOn });
    const eventsInMonth = getEventsInPeriod({
        events,
        periodStart: start,
        periodEnd: end,
    });
    const days = [];
    for (let i = 0; i < DateUtil.differenceInDays(end, start) + 1; i++) {
        const date = DateUtil.addDays(start, i);
        if (!excluded.some((e) => date.getDay() === e)) {
            const day = getWeekDay({ date });
            const calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: DateUtil.startOfDay(date),
                periodEnd: DateUtil.endOfDay(date),
            });
            day.inMonth = DateUtil.isSameMonth(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    }
    const totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    const rows = Math.floor(days.length / totalDaysVisibleInWeek);
    const rowOffsets = [];
    for (let i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets,
        totalDaysVisibleInWeek,
        days,
    };
}
export function getDayView({ events = [], viewDate, hourSegments, dayStart, dayEnd, eventWidth, segmentHeight }) {
    if (!events) {
        events = [];
    }
    const startOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfDay(viewDate), dayStart.hour), dayStart.minute);
    const endOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfMinute(DateUtil.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    const previousDayEvents = [];
    const dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter((event) => !event.allDay),
        periodStart: startOfView,
        periodEnd: endOfView,
    }), dayStart, dayEnd)
        .sort((eventA, eventB) => {
        return eventA.start.valueOf() - eventB.start.valueOf();
    })
        .map((event) => {
        const eventStart = event.start;
        const eventEnd = event.end || eventStart;
        const startsBeforeDay = eventStart < startOfView;
        const endsAfterDay = eventEnd > endOfView;
        const hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        let top = 0;
        if (eventStart > startOfView) {
            top += differenceInMinutes(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        const startDate = startsBeforeDay ? startOfView : eventStart;
        const endDate = endsAfterDay ? endOfView : eventEnd;
        let height = differenceInMinutes(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        const bottom = top + height;
        const overlappingPreviousEvents = previousDayEvents.filter((previousEvent) => {
            const previousEventTop = previousEvent.top;
            const previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        });
        let left = 0;
        while (overlappingPreviousEvents.some((previousEvent) => previousEvent.left === left)) {
            left += eventWidth;
        }
        const dayEvent = {
            event,
            height,
            width: eventWidth,
            top,
            left,
            startsBeforeDay,
            endsAfterDay,
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    })
        .filter((dayEvent) => dayEvent.height > 0);
    const width = Math.max(...dayViewEvents.map((event) => event.left + event.width));
    const allDayEvents = getEventsInPeriod({
        events: events.filter((event) => event.allDay),
        periodStart: DateUtil.startOfDay(startOfView),
        periodEnd: DateUtil.endOfDay(endOfView),
    });
    return {
        events: dayViewEvents,
        width,
        allDayEvents,
    };
}
export function getDayViewHourGrid({ viewDate, hourSegments, dayStart, dayEnd, }) {
    const hours = [];
    const startOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfDay(viewDate), dayStart.hour), dayStart.minute);
    const endOfView = DateUtil.setMinutes(DateUtil.setHours(DateUtil.startOfMinute(DateUtil.endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    const segmentDuration = MINUTES_IN_HOUR / hourSegments;
    const startOfViewDay = DateUtil.startOfDay(viewDate);
    for (let i = 0; i < HOURS_IN_DAY; i++) {
        const segments = [];
        for (let j = 0; j < hourSegments; j++) {
            const date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date,
                    isStart: j === 0,
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments });
        }
    }
    return hours;
}
//# sourceMappingURL=data:application/json;base64,