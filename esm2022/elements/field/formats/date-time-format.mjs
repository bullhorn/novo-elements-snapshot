import { Directive, EventEmitter, Input, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IMaskDirective } from 'angular-imask';
import { isValid } from 'date-fns';
import { MaskedEnum, MaskedRange } from 'imask';
import { NovoLabelService } from 'novo-elements/services';
import { DateUtil } from 'novo-elements/utils';
import { DATE_FORMATS, NOVO_INPUT_FORMAT } from './base-format';
import * as i0 from "@angular/core";
import * as i1 from "novo-elements/services";
export const DATETIMEFORMAT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => NovoDateTimeFormatDirective),
    multi: true,
};
export class NovoDateTimeFormatDirective extends IMaskDirective {
    constructor(labels) {
        super();
        this.labels = labels;
        this.valueChange = new EventEmitter();
        this.military = false;
        this.dateTimeFormat = DATE_FORMATS.DATE;
        this.initFormatOptions();
    }
    initFormatOptions() {
        const amFormat = this.labels.timeFormatAM.toUpperCase();
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        this.unmask = 'typed'; // typing is to work around angular-imask bug
        this.imask = {
            mask: Date,
            pattern: this.military ? 'm{/}`d{/}`Y, HH:mm' : 'm{/}`d{/}`Y, HH:mm aa',
            overwrite: true,
            autofix: true,
            lazy: false,
            min: new Date(1900, 0, 1),
            max: new Date(2100, 0, 1),
            prepare: (str) => str.toUpperCase(),
            format: (date) => this.formatValue(date),
            parse: (str) => DateUtil.parse(str),
            blocks: {
                d: {
                    mask: MaskedRange,
                    placeholderChar: 'D',
                    from: 1,
                    to: 31,
                    maxLength: 2,
                },
                m: {
                    mask: MaskedRange,
                    placeholderChar: 'M',
                    from: 1,
                    to: 12,
                    maxLength: 2,
                },
                Y: {
                    mask: MaskedRange,
                    placeholderChar: 'Y',
                    from: 1900,
                    to: 9999,
                },
                HH: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 23,
                },
                hh: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 1,
                    to: 12,
                },
                mm: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                ss: {
                    mask: MaskedRange,
                    placeholderChar: '-',
                    maxLength: 2,
                    from: 0,
                    to: 59,
                },
                aa: {
                    mask: MaskedEnum,
                    placeholderChar: '-',
                    enum: ['AM', 'PM', 'am', 'pm', amFormat, pmFormat],
                },
            },
        };
    }
    ngOnChanges(changes) {
        if (Object.keys(changes).some((key) => ['military', 'dateFormat'].includes(key))) {
            this.initFormatOptions();
        }
    }
    _checkInput(event) {
        if (document.activeElement === event.target) {
            const text = event.target.value;
            const dateTime = text.split(', ');
            const hour = dateTime[1].slice(0, 2);
            if ((this.military && Number(dateTime[1][0]) > 2) || (!this.military && Number(dateTime[1][0]) > 1)) {
                event.preventDefault();
                const value = `0${dateTime[1]}`;
                event.target.value = value;
                // this.onChange(value);
            }
            if (!this.military) {
                const input = dateTime[1].substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
                const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
                if (timePeriod) {
                    event.target.value = `${dateTime[0]}, ${dateTime[1].slice(0, 5)} ${timePeriod}`;
                }
                if (event.target.selectionStart >= 3 && this.hourOneFormatRequired(hour)) {
                    event.target.value = `${dateTime[0]}, 01:${event.target.value.slice(3, event.target.value.length)}`;
                }
            }
        }
    }
    _handleBlur(event) {
        const text = event.target.value;
        const dateTime = text.split(', ');
        const hour = dateTime[1].slice(0, 2);
        if (!this.military) {
            const input = dateTime[1].substr(5, 4).replace(/\-/g, '').trim().slice(0, 2);
            const timePeriod = this.imask.blocks.aa.enum.find((it) => it[0] === input[0]);
            if (this.hourOneFormatRequired(hour)) {
                event.target.value = `${dateTime[0]}, 01:${dateTime[1].slice(3, dateTime[1].length)}`;
            }
            if (!timePeriod) {
                event.target.value = `${dateTime[0]}, ${dateTime[1].slice(0, 5)} --`;
            }
        }
    }
    _handleKeydown(event) {
        const input = event.target;
        const dateTime = input.value.split(', ');
        const hour = dateTime[1].slice(0, 2);
        if (event.key === "Backspace" /* Key.Backspace */ && input.selectionStart === dateTime[1].length) {
            event.target.value = `${dateTime[1].slice(0, 5)} --`;
        }
        else if (event.key === "Tab" /* Key.Tab */ && input.selectionStart <= 2 && this.hourOneFormatRequired(hour)) {
            event.preventDefault();
            event.stopPropagation();
            event.stopImmediatePropagation();
            input.value = `${dateTime[0]}, 01:${dateTime[1].slice(3, dateTime[1].length)}`;
            input.setSelectionRange(15, 15);
        }
        else if (event.key === "ArrowRight" /* Key.ArrowRight */ && input.selectionStart >= 2 && this.hourOneFormatRequired(hour)) {
            input.value = `${dateTime[0]}, 01:${dateTime[1].slice(3, dateTime[1].length)}`;
            input.setSelectionRange(14, 14);
        }
    }
    normalize(value) {
        const pattern = this.labels.dateFormat.toUpperCase();
        return DateUtil.format(value ? DateUtil.parse(value) : null, pattern);
    }
    formatAsIso(date) {
        if (date && isValid(date)) {
            return date.toISOString();
        }
        return null;
    }
    convertTime12to24(time12h) {
        const pmFormat = this.labels.timeFormatPM.toUpperCase();
        const [time, meridian] = time12h.split(' ');
        let [hours, minutes] = time.split(':');
        if (hours === '12') {
            hours = '00';
        }
        if (['PM', pmFormat].includes(meridian)) {
            hours = `${parseInt(hours, 10) + 12}`.padStart(2, '0');
        }
        return `${hours}:${minutes}`;
    }
    convertTime24to12(time24h) {
        if (time24h.length === 5) {
            const date = DateUtil.parse(`2020-01-01T${time24h}`);
            return DateUtil.format(date, 'hh:mm A');
        }
        return time24h;
    }
    formatValue(value) {
        if (value == null)
            return '';
        // Use `parse` because it keeps dates in locale
        const date = DateUtil.parse(value);
        if (isValid(date)) {
            const dateFormat = `${this.labels.dateFormat.toUpperCase()}, ${this.military ? 'HH:mm' : 'hh:mm A'}`;
            return DateUtil.format(date, dateFormat);
        }
        return this.normalize(value);
    }
    writeValue(value) {
        super.writeValue(this.formatValue(value));
    }
    registerOnChange(fn) {
        this.onChange = (date) => {
            let formatted = date;
            switch (this.dateTimeFormat) {
                case DATE_FORMATS.ISO8601:
                    formatted = this.formatAsIso(date);
                    break;
                case DATE_FORMATS.STRING:
                    formatted = this.formatValue(date);
                    break;
                default:
                    formatted = date;
                    break;
            }
            this.valueChange.emit(date);
            fn(formatted);
        };
    }
    hourOneFormatRequired(hourInput) {
        return hourInput === '-1' || hourInput === '1-';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: NovoDateTimeFormatDirective, deps: [{ token: i1.NovoLabelService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.3.12", type: NovoDateTimeFormatDirective, selector: "input[dateTimeFormat]", inputs: { military: "military", dateTimeFormat: "dateTimeFormat" }, host: { listeners: { "input": "_checkInput($event)", "blur": "_handleBlur($event)", "keydown": "_handleKeydown($event)" }, classAttribute: "novo-date-time-format" }, providers: [DATETIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateTimeFormatDirective }], usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.12", ngImport: i0, type: NovoDateTimeFormatDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[dateTimeFormat]',
                    host: {
                        class: 'novo-date-time-format',
                        '(input)': '_checkInput($event)',
                        '(blur)': '_handleBlur($event)',
                        '(keydown)': '_handleKeydown($event)',
                    },
                    providers: [DATETIMEFORMAT_VALUE_ACCESSOR, { provide: NOVO_INPUT_FORMAT, useExisting: NovoDateTimeFormatDirective }],
                }]
        }], ctorParameters: () => [{ type: i1.NovoLabelService }], propDecorators: { military: [{
                type: Input
            }], dateTimeFormat: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,