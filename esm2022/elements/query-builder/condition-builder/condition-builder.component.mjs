import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Directive, ElementRef, HostBinding, Input, Optional, SkipSelf, ViewChild, ViewContainerRef, computed, input } from '@angular/core';
import { ControlContainer, FormControl } from '@angular/forms';
import { NovoLabelService } from 'novo-elements/services';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { QueryBuilderService } from '../query-builder.service';
import { NOVO_CONDITION_BUILDER } from '../query-builder.tokens';
import * as i0 from "@angular/core";
import * as i1 from "novo-elements/services";
import * as i2 from "../query-builder.service";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/common";
import * as i5 from "novo-elements/elements/common";
import * as i6 from "novo-elements/elements/select";
import * as i7 from "novo-elements/elements/field";
import * as i8 from "novo-elements/elements/flex";
import * as i9 from "novo-elements/elements/loading";
import * as i10 from "novo-elements/elements/select-search";
import * as i11 from "../condition-templates/condition-templates.component";
/**
 * Provides a handle for the table to grab the view container's ng-container to insert data rows.
 * @docs-private
 */
export class ConditionInputOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: ConditionInputOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.3", type: ConditionInputOutlet, selector: "[conditionInputOutlet]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: ConditionInputOutlet, decorators: [{
            type: Directive,
            args: [{ selector: '[conditionInputOutlet]' }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });
/**
 * Provides a handle for the table to grab the view container's ng-container to insert data rows.
 * @docs-private
 */
export class ConditionOperatorOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: ConditionOperatorOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.2.3", type: ConditionOperatorOutlet, selector: "[conditionOperatorOutlet]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: ConditionOperatorOutlet, decorators: [{
            type: Directive,
            args: [{ selector: '[conditionOperatorOutlet]' }]
        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });
export class ConditionBuilderComponent {
    constructor(labels, cdr, queryBuilderService, controlContainer) {
        this.labels = labels;
        this.cdr = cdr;
        this.queryBuilderService = queryBuilderService;
        this.controlContainer = controlContainer;
        this.hideOperator = input(true);
        this.conditionType = input();
        // This component can either be directly hosted as a host to a condition, or it can be part of a condition group within a criteria builder.
        // In the former case, config will come from inputs, and we will instantiate our own QueryBuilderService. In the latter, it comes from
        // the QueryBuilderService.
        this.inputConfig = input(null, { alias: 'config' });
        this.inputEditTypeFn = input(null, { alias: 'editTypeFn' });
        this.config = computed(() => {
            if (this.isConditionHost) {
                this.queryBuilderService.config = this.inputConfig();
            }
            return this.queryBuilderService.config;
        });
        this.editTypeFn = computed(() => {
            if (this.isConditionHost) {
                this.queryBuilderService.editTypeFn = this.inputEditTypeFn();
            }
            return this.queryBuilderService.editTypeFn;
        });
        this.searchTerm = new FormControl();
        this.staticFieldSelection = computed(() => this.config().staticFieldSelection);
        this._lastContext = {};
        this.isConditionHost = false;
        this.gridColumns = computed(() => {
            if (this.staticFieldSelection()) {
                return '13rem 1fr';
            }
            else {
                const firstColumnWidth = this.hideOperator() ? '20rem' : '16rem';
                return `${firstColumnWidth} 13rem 1fr`;
            }
        });
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
        if (!queryBuilderService.componentHost) {
            queryBuilderService.componentHost = this;
            this.isConditionHost = true;
            this.groupIndex = 0;
            this.andIndex = 0;
        }
    }
    ngOnInit() {
        this.parentForm = this.controlContainer.control;
        this.parentForm.controls.field.valueChanges.subscribe((value) => {
            Promise.resolve().then(() => this.updateFieldSelection());
        });
    }
    ngOnChanges(changes) {
        if (changes.inputConfig?.previousValue?.staticFieldSelection &&
            changes.inputConfig.previousValue.staticFieldSelection !== changes.inputConfig.currentValue.staticFieldSelection) {
            this.parentForm.controls.field.setValue(changes.inputConfig.currentValue.staticFieldSelection);
        }
    }
    ngAfterContentInit() {
        const allFields = this.config()?.fields || [];
        const scopedFields = this.scope ? allFields.find((field) => field.value === this.scope) : allFields[0];
        allFields.length && this.changeFieldOptions(scopedFields);
        this.searches = this.searchTerm.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe((term) => {
            this.results$ = Promise.resolve(this.fieldConfig.options.filter((f) => f.name.toLowerCase().includes(term.toLowerCase()) || f.label?.toLowerCase().includes(term.toLowerCase())));
            this.cdr.markForCheck();
        });
    }
    ngAfterViewInit() {
        if (this.parentForm.value?.field !== null) {
            Promise.resolve().then(() => this.updateFieldSelection());
        }
    }
    ngOnDestroy() {
        this.searches.unsubscribe();
        // Clear all outlets and Maps
        [this._operatorOutlet.viewContainer, this._inputOutlet.viewContainer].forEach((def) => {
            def.clear();
        });
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Updates the Conditions "Field" Options to Change base on new Scope
     * @param fieldConfig
     */
    changeFieldOptions(fieldConfig) {
        this.fieldConfig = fieldConfig;
        this.searchTerm.setValue('');
        this.results$ = Promise.resolve(this.fieldConfig.options);
    }
    getField() {
        const field = this.parentForm?.value?.field;
        if (!field)
            return null;
        return this.fieldConfig.find(field);
    }
    getDefaultField() {
        const fields = this.fieldConfig.options;
        if (fields?.length) {
            return fields[0].name;
        }
        return null;
    }
    updateFieldSelection() {
        const fieldConf = this.getField();
        if (!fieldConf) {
            this.parentForm.get('field').setValue(this.getDefaultField());
            return;
        }
        else {
            this.fieldDisplayWith = () => fieldConf.label || fieldConf.name;
            this.displayIcon = fieldConf.icon || null;
        }
        const { field } = this.parentForm.value;
        if (this._lastContext.field !== field) {
            if (this._lastContext.field) {
                // only clearing operator/value if field was previously defined so we can preload values onto the form
                this.parentForm.get('value').setValue(null);
                this.parentForm.get('operator').setValue(null);
            }
            this.createFieldTemplates();
        }
        setTimeout(() => this.updateConditionType());
        this._lastContext = { ...this.parentForm.value };
        this.cdr.markForCheck();
    }
    updateConditionType() {
        this.parentForm.get('conditionType')?.setValue(this.conditionType());
    }
    findDefinitionForField(field) {
        if (!field)
            return;
        const editType = this.editTypeFn()(field);
        // Don't look at dataSpecialization it is no good, this misses currency, and percent
        const { name } = field;
        const fieldDefsByName = this.queryBuilderService.getFieldDefsByName();
        // Check Fields by priority for match Field Definition
        const key = [name, editType?.toUpperCase(), 'DEFAULT'].find((it) => fieldDefsByName.has(it));
        return fieldDefsByName.get(key);
    }
    createFieldTemplates() {
        const definition = this.findDefinitionForField(this.getField());
        if (!this.parentForm.get('operator').value) {
            this.parentForm.get('operator').setValue(definition.defaultOperator);
        }
        this.createFieldOperators(definition);
        this.createFieldInput(definition);
    }
    createFieldOperators(definition) {
        this._operatorOutlet.viewContainer.clear();
        if (definition) {
            const context = { $implicit: this.parentForm, fieldMeta: this.getField() };
            this._operatorOutlet.viewContainer.createEmbeddedView(definition.fieldOperators.template, context);
        }
        this.cdr.markForCheck();
    }
    createFieldInput(definition) {
        this._inputOutlet.viewContainer.clear();
        if (definition) {
            const context = { $implicit: this.parentForm, fieldMeta: this.getField(), viewIndex: this.groupIndex.toString() + this.andIndex.toString() };
            this._inputOutlet.viewContainer.createEmbeddedView(definition.fieldInput.template, context);
        }
        this.cdr.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: ConditionBuilderComponent, deps: [{ token: i1.NovoLabelService }, { token: i0.ChangeDetectorRef }, { token: i2.QueryBuilderService }, { token: i3.ControlContainer }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.1.0", version: "17.2.3", type: ConditionBuilderComponent, selector: "novo-condition-builder", inputs: { label: { classPropertyName: "label", publicName: "label", isSignal: false, isRequired: false, transformFunction: null }, scope: { classPropertyName: "scope", publicName: "scope", isSignal: false, isRequired: false, transformFunction: null }, andIndex: { classPropertyName: "andIndex", publicName: "andIndex", isSignal: false, isRequired: false, transformFunction: null }, groupIndex: { classPropertyName: "groupIndex", publicName: "groupIndex", isSignal: false, isRequired: false, transformFunction: null }, addressConfig: { classPropertyName: "addressConfig", publicName: "addressConfig", isSignal: false, isRequired: false, transformFunction: null }, hideOperator: { classPropertyName: "hideOperator", publicName: "hideOperator", isSignal: true, isRequired: false, transformFunction: null }, conditionType: { classPropertyName: "conditionType", publicName: "conditionType", isSignal: true, isRequired: false, transformFunction: null }, inputConfig: { classPropertyName: "inputConfig", publicName: "config", isSignal: true, isRequired: false, transformFunction: null }, inputEditTypeFn: { classPropertyName: "inputEditTypeFn", publicName: "editTypeFn", isSignal: true, isRequired: false, transformFunction: null } }, host: { properties: { "class.condition-host": "this.isConditionHost" } }, providers: [{ provide: NOVO_CONDITION_BUILDER, useExisting: ConditionBuilderComponent },
            {
                provide: QueryBuilderService,
                deps: [NovoLabelService, [new SkipSelf(), new Optional(), QueryBuilderService]],
                useFactory: (labelService, queryBuilderService) => {
                    if (!queryBuilderService) {
                        queryBuilderService = new QueryBuilderService(labelService);
                    }
                    return queryBuilderService;
                }
            }
        ], viewQueries: [{ propertyName: "_operatorOutlet", first: true, predicate: ConditionOperatorOutlet, descendants: true, static: true }, { propertyName: "_inputOutlet", first: true, predicate: ConditionInputOutlet, descendants: true, static: true }], usesOnChanges: true, ngImport: i0, template: "<form [formGroup]=\"parentForm\">\n  <novo-grid gap=\"1rem\" [columns]=\"gridColumns()\" align=\"end\">\n    <novo-field class=\"condition-field\" *ngIf=\"!staticFieldSelection()\">\n      <novo-select\n        [placeholder]=\"labels.chooseAField\"\n        formControlName=\"field\"\n        (onSelect)=\"updateFieldSelection()\"\n        overlayWidth=\"24rem\"\n        overlayHeight=\"20rem\"\n        [displayWith]=\"fieldDisplayWith\"\n        [style.minWidth.px]=\"160\"\n        [style.maxWidth.px]=\"(hideOperator() || isConditionHost) ? 200 : 160\"\n        [displayIcon]=\"displayIcon\">\n        <novo-optgroup class=\"filter-search-results\">\n          <novo-option>\n            <novo-select-search [formControl]=\"searchTerm\" [clearSearchInput]=\"false\"></novo-select-search>\n          </novo-option>\n          <ng-container *ngIf=\"results$ | async as results; else loading\">\n            <ng-container *ngIf=\"results.length\">\n              <novo-option *ngFor=\"let field of results\" value=\"{{ field.name }}\"\n                [attr.data-automation-id]=\"field.name\">\n                {{ field.label || field.name }}\n              </novo-option>\n            </ng-container>\n          </ng-container>\n        </novo-optgroup>\n      </novo-select>\n    </novo-field>\n\n    <div class=\"condition-operator\">\n      <ng-container conditionOperatorOutlet></ng-container>\n    </div>\n\n    <div class=\"condition-input\">\n      <ng-container conditionInputOutlet></ng-container>\n    </div>\n  </novo-grid>\n  <ng-content></ng-content>\n</form>\n\n<novo-condition-templates *ngIf=\"isConditionHost\" [addressConfig]=\"addressConfig\"/>\n\n<!-- LOADING TEMPLATE -->\n<ng-template #loading>\n  <novo-loading></novo-loading>\n</ng-template>\n", styles: [":host{position:relative;display:block;width:100%}:host.condition-host{padding:var(--spacing-md);margin-bottom:1rem}:host .condition-field{grid-template-columns:minmax(fit-content,1fr);width:100%;width:-webkit-fill-available}:host .condition-operator::ng-deep .novo-select{min-width:13rem}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(fit-content,1fr);width:-webkit-fill-available}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host .condition-input::ng-deep novo-field{width:fit-content}:host .condition-input::ng-deep novo-field.address-radius{width:100px;min-width:100px;max-width:100px;margin-right:1rem}:host .condition-input::ng-deep novo-field.address-radius novo-select{min-width:70px}:host .condition-input::ng-deep .novo-field-infix{white-space:nowrap;overflow:hidden}:host .condition-input::ng-deep novo-chip-list{width:36rem}:host .condition-input::ng-deep novo-chip-list novo-chip{max-width:33rem}:host .condition-input::ng-deep novo-chips{border-bottom:none!important}:host .condition-input::ng-deep novo-chips input{padding-left:0!important}:host .condition-input::ng-deep novo-radio-group{padding:0!important}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem auto;align-items:center;text-align:center;-webkit-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;overflow:hidden;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}\n"], dependencies: [{ kind: "directive", type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i3.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { kind: "directive", type: i5.GapDirective, selector: "[gap]", inputs: ["gap"] }, { kind: "component", type: i6.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayIcon", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { kind: "component", type: i7.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "customOverlayOrigin", "width"], outputs: ["valueChanges", "stateChanges"] }, { kind: "component", type: i5.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "novoInert", "value", "disabled"], exportAs: ["novoOption"] }, { kind: "component", type: i5.NovoOptgroup, selector: "novo-optgroup", inputs: ["disabled", "label"], exportAs: ["novoOptgroup"] }, { kind: "component", type: i8.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { kind: "component", type: i9.NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }, { kind: "component", type: i10.NovoSelectSearchComponent, selector: "novo-select-search", inputs: ["name", "placeholderLabel", "type", "noEntriesFoundLabel", "indexAndLengthScreenReaderText", "clearSearchInput", "searching", "disableInitialFocus", "enableClearOnEscapePressed", "preventHomeEndKeyPropagation", "disableScrollToActiveOnOptionsChanged", "ariaLabel", "showToggleAllCheckbox", "toggleAllCheckboxChecked", "toggleAllCheckboxIndeterminate", "toggleAllCheckboxTooltipMessage", "toogleAllCheckboxTooltipPosition", "hideClearSearchButton", "alwaysRestoreSelectedOptionsMulti"], outputs: ["toggleAll"] }, { kind: "directive", type: ConditionInputOutlet, selector: "[conditionInputOutlet]" }, { kind: "directive", type: ConditionOperatorOutlet, selector: "[conditionOperatorOutlet]" }, { kind: "component", type: i11.NovoConditionTemplatesComponent, selector: "novo-condition-templates", inputs: ["addressConfig"] }, { kind: "pipe", type: i4.AsyncPipe, name: "async" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.3", ngImport: i0, type: ConditionBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-condition-builder', providers: [{ provide: NOVO_CONDITION_BUILDER, useExisting: ConditionBuilderComponent },
                        {
                            provide: QueryBuilderService,
                            deps: [NovoLabelService, [new SkipSelf(), new Optional(), QueryBuilderService]],
                            useFactory: (labelService, queryBuilderService) => {
                                if (!queryBuilderService) {
                                    queryBuilderService = new QueryBuilderService(labelService);
                                }
                                return queryBuilderService;
                            }
                        }
                    ], changeDetection: ChangeDetectionStrategy.OnPush, template: "<form [formGroup]=\"parentForm\">\n  <novo-grid gap=\"1rem\" [columns]=\"gridColumns()\" align=\"end\">\n    <novo-field class=\"condition-field\" *ngIf=\"!staticFieldSelection()\">\n      <novo-select\n        [placeholder]=\"labels.chooseAField\"\n        formControlName=\"field\"\n        (onSelect)=\"updateFieldSelection()\"\n        overlayWidth=\"24rem\"\n        overlayHeight=\"20rem\"\n        [displayWith]=\"fieldDisplayWith\"\n        [style.minWidth.px]=\"160\"\n        [style.maxWidth.px]=\"(hideOperator() || isConditionHost) ? 200 : 160\"\n        [displayIcon]=\"displayIcon\">\n        <novo-optgroup class=\"filter-search-results\">\n          <novo-option>\n            <novo-select-search [formControl]=\"searchTerm\" [clearSearchInput]=\"false\"></novo-select-search>\n          </novo-option>\n          <ng-container *ngIf=\"results$ | async as results; else loading\">\n            <ng-container *ngIf=\"results.length\">\n              <novo-option *ngFor=\"let field of results\" value=\"{{ field.name }}\"\n                [attr.data-automation-id]=\"field.name\">\n                {{ field.label || field.name }}\n              </novo-option>\n            </ng-container>\n          </ng-container>\n        </novo-optgroup>\n      </novo-select>\n    </novo-field>\n\n    <div class=\"condition-operator\">\n      <ng-container conditionOperatorOutlet></ng-container>\n    </div>\n\n    <div class=\"condition-input\">\n      <ng-container conditionInputOutlet></ng-container>\n    </div>\n  </novo-grid>\n  <ng-content></ng-content>\n</form>\n\n<novo-condition-templates *ngIf=\"isConditionHost\" [addressConfig]=\"addressConfig\"/>\n\n<!-- LOADING TEMPLATE -->\n<ng-template #loading>\n  <novo-loading></novo-loading>\n</ng-template>\n", styles: [":host{position:relative;display:block;width:100%}:host.condition-host{padding:var(--spacing-md);margin-bottom:1rem}:host .condition-field{grid-template-columns:minmax(fit-content,1fr);width:100%;width:-webkit-fill-available}:host .condition-operator::ng-deep .novo-select{min-width:13rem}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical{grid-template-columns:minmax(fit-content,1fr);width:-webkit-fill-available}:host .condition-input::ng-deep novo-field.novo-field-layout-vertical .novo-input-element{width:100%}:host .condition-input::ng-deep novo-field{width:fit-content}:host .condition-input::ng-deep novo-field.address-radius{width:100px;min-width:100px;max-width:100px;margin-right:1rem}:host .condition-input::ng-deep novo-field.address-radius novo-select{min-width:70px}:host .condition-input::ng-deep .novo-field-infix{white-space:nowrap;overflow:hidden}:host .condition-input::ng-deep novo-chip-list{width:36rem}:host .condition-input::ng-deep novo-chip-list novo-chip{max-width:33rem}:host .condition-input::ng-deep novo-chips{border-bottom:none!important}:host .condition-input::ng-deep novo-chips input{padding-left:0!important}:host .condition-input::ng-deep novo-radio-group{padding:0!important}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem auto;align-items:center;text-align:center;-webkit-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;overflow:hidden;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}\n"] }]
        }], ctorParameters: () => [{ type: i1.NovoLabelService }, { type: i0.ChangeDetectorRef }, { type: i2.QueryBuilderService }, { type: i3.ControlContainer }], propDecorators: { _operatorOutlet: [{
                type: ViewChild,
                args: [ConditionOperatorOutlet, { static: true }]
            }], _inputOutlet: [{
                type: ViewChild,
                args: [ConditionInputOutlet, { static: true }]
            }], label: [{
                type: Input
            }], scope: [{
                type: Input
            }], andIndex: [{
                type: Input
            }], groupIndex: [{
                type: Input
            }], addressConfig: [{
                type: Input
            }], isConditionHost: [{
                type: HostBinding,
                args: ['class.condition-host']
            }] } });
//# sourceMappingURL=data:application/json;base64,