{"version":3,"file":"novo-elements-addons-dragula.mjs","sources":["../../../projects/novo-elements/src/addons/dragula/DragulaService.ts","../../../projects/novo-elements/src/addons/dragula/Dragula.ts","../../../projects/novo-elements/src/addons/dragula/Dragula.module.ts","../../../projects/novo-elements/src/addons/dragula/novo-elements-addons-dragula.ts"],"sourcesContent":["// NG2\nimport { EventEmitter, Injectable } from '@angular/core';\n// Vendor\nimport dragula from '@bullhorn/dragula';\n\n/**\n* @deprecated since v8.0.0 - slated for deletion.\n*\n* Moving away from all CommonJS dependencies to improve tree-shaking.\n*\n* Please look at built-in ng or third party drag-drop libraries like\n* angular-draggable-droppable, ngx-drag-drop, ngx-sortablejs, ng2-dragula.\n*/\n@Injectable()\nexport class NovoDragulaService {\n  cancel: EventEmitter<any> = new EventEmitter();\n  cloned: EventEmitter<any> = new EventEmitter();\n  drag: EventEmitter<any> = new EventEmitter();\n  dragend: EventEmitter<any> = new EventEmitter();\n  drop: EventEmitter<any> = new EventEmitter();\n  out: EventEmitter<any> = new EventEmitter();\n  over: EventEmitter<any> = new EventEmitter();\n  remove: EventEmitter<any> = new EventEmitter();\n  shadow: EventEmitter<any> = new EventEmitter();\n  dropModel: EventEmitter<any> = new EventEmitter();\n  removeModel: EventEmitter<any> = new EventEmitter();\n  events: Array<string> = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];\n  bags: Array<any> = [];\n\n  add(name, drake) {\n    let bag = this.find(name);\n    if (bag) {\n      throw new Error(`Bag named: ${name} already exists.`);\n    }\n    bag = {\n      name,\n      drake,\n    };\n    this.bags.push(bag);\n    if (drake.models) {\n      // models to sync with (must have same structure as containers)\n      this.handleModels(name, drake);\n    }\n    if (!bag.initEvents) {\n      this.setupEvents(bag);\n    }\n    return bag;\n  }\n\n  find(name) {\n    for (let i = 0; i < this.bags.length; i++) {\n      if (this.bags[i].name === name) {\n        return this.bags[i];\n      }\n    }\n    return null;\n  }\n\n  destroy(name) {\n    const bag = this.find(name);\n    const i = this.bags.indexOf(bag);\n    this.bags.splice(i, 1);\n    bag.drake.destroy();\n  }\n\n  setOptions(name, options) {\n    const bag = this.add(name, dragula(options));\n    this.handleModels(name, bag.drake);\n  }\n\n  handleModels(name, drake) {\n    let dragElm;\n    let dragIndex;\n    let dropIndex;\n    let sourceModel;\n    drake.on('remove', (el, source) => {\n      if (!drake.models) {\n        return;\n      }\n      sourceModel = drake.models[drake.containers.indexOf(source)];\n      sourceModel.splice(dragIndex, 1);\n      this.removeModel.emit([name, el, source]);\n    });\n    drake.on('drag', (el, source) => {\n      dragElm = el;\n      dragIndex = this.domIndexOf(el, source);\n    });\n    drake.on('drop', (dropElm, target, source) => {\n      if (!drake.models) {\n        return;\n      }\n      dropIndex = this.domIndexOf(dropElm, target);\n      sourceModel = drake.models[drake.containers.indexOf(source)];\n      if (target === source) {\n        sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);\n      } else {\n        const notCopy = dragElm === dropElm;\n        const targetModel = drake.models[drake.containers.indexOf(target)];\n        const dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));\n\n        if (notCopy) {\n          sourceModel.splice(dragIndex, 1);\n        }\n        targetModel.splice(dropIndex, 0, dropElmModel);\n        target.removeChild(dropElm); // element must be removed for ngFor to apply correctly\n      }\n      this.dropModel.emit([name, dropElm, target, source]);\n    });\n  }\n\n  setupEvents(bag) {\n    bag.initEvents = true;\n    const that = this;\n    const emitter = (type) => {\n      function replicate() {\n        const args = Array.prototype.slice.call(arguments);\n        that[type].emit([bag.name].concat(args));\n      }\n\n      bag.drake.on(type, replicate);\n    };\n    this.events.forEach(emitter);\n  }\n\n  domIndexOf(child, parent) {\n    return Array.prototype.indexOf.call(parent.children, child);\n  }\n}\n","// NG2\nimport { Directive, ElementRef, Input, OnChanges, OnInit } from '@angular/core';\n// Vendor\nimport dragula from '@bullhorn/dragula';\n// APP\nimport { notify } from 'novo-elements/utils';\nimport { NovoDragulaService } from './DragulaService';\n\n/**\n* @deprecated since v8.0.0 - slated for deletion.\n*\n* Moving away from all CommonJS dependencies to improve tree-shaking.\n*\n* Please look at built-in ng or third party drag-drop libraries like\n* angular-draggable-droppable, ngx-drag-drop, ngx-sortablejs, ng2-dragula.\n*/\n@Directive({\n  selector: '[dragula]',\n})\nexport class NovoDragulaElement implements OnInit, OnChanges {\n  @Input('dragula')\n  bag: any;\n  @Input()\n  dragulaModel: any;\n  drake: any = null;\n  container: any;\n\n  constructor(element: ElementRef, private dragulaService: NovoDragulaService) {\n    notify('[dragula] has been deprecated - please look at built-in ng or third party drag-drop libraries instead');\n    this.container = element.nativeElement;\n  }\n\n  ngOnInit() {\n    const bag = this.dragulaService.find(this.bag);\n\n    if (bag) {\n      this.drake = bag.drake;\n      this.checkModel();\n      this.drake.containers.push(this.container);\n    } else {\n      this.drake = dragula({\n        containers: [this.container],\n      });\n      this.checkModel();\n      this.dragulaService.add(this.bag, this.drake);\n    }\n  }\n\n  checkModel() {\n    if (this.dragulaModel) {\n      if (this.drake.models) {\n        this.drake.models.push(this.dragulaModel);\n      } else {\n        this.drake.models = [this.dragulaModel];\n      }\n    }\n  }\n\n  ngOnChanges(changes) {\n    if (changes && changes.dragulaModel) {\n      if (this.drake) {\n        if (this.drake.models) {\n          const modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);\n          this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);\n        } else {\n          this.drake.models = [changes.dragulaModel.currentValue];\n        }\n      }\n    }\n  }\n}\n","// NG2\nimport { NgModule } from '@angular/core';\n// APP\nimport { NovoDragulaElement } from './Dragula';\n\n/**\n* @deprecated since v8.0.0 - slated for deletion.\n*\n* Moving away from all CommonJS dependencies to improve tree-shaking.\n*\n* Please look at built-in ng or third party drag-drop libraries like\n* angular-draggable-droppable, ngx-drag-drop, ngx-sortablejs, ng2-dragula.\n*/\n@NgModule({\n  declarations: [NovoDragulaElement],\n  exports: [NovoDragulaElement],\n})\nexport class NovoDragulaModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["i1.NovoDragulaService"],"mappings":"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"}