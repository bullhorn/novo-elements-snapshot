import { addDays, addMonths, addWeeks, differenceInCalendarDays, differenceInDays, differenceInSeconds, endOfDay, endOfMonth, endOfWeek, format, getMonth, getYear, isAfter, isBefore, isSameDay, isSameMonth, isSameSecond, isWithinInterval, setHours, setMinutes, startOfDay, startOfMinute, startOfMonth, startOfWeek } from 'date-fns';
import { convertTokens } from './convert-tokens';
import { legacyParse } from './legacy-parse';
/**
 * This DateUtil is a wrapper for calling new date-fns v2 functions with existing legacy
 * v1 function calls without having to refactor too much code and potentially introduce
 * breaking changes.
 *
 * The old calls generally called date-fns functions with loosely-typed date values, often
 * of type DateLike (Date | string | number). This was a problem when upgrading to date-fns
 * v2 since functions are now typed more strongly and no longer accept strings.
 *
 * If you are adding a new component/feature and looking here to add a new date-fns wrapper
 * function, strongly consider not doing that and instead refactoring your code to not use
 * DateLike, and calling the date-fns function(s) directly.
 **/
export class DateUtil {
    static getDateFromAnyType(date) {
        return legacyParse(date);
    }
    static getWeekDayFromNumber(weekDay) {
        if (0 <= weekDay && weekDay <= 6) {
            return weekDay;
        }
        else {
            console.warn('Invalid weekDay value:', weekDay);
            return 0;
        }
    }
    static parse(date, options) {
        return legacyParse(date, options);
    }
    static format(date, formatString) {
        if (!date) {
            return '';
        }
        date = this.getDateFromAnyType(date);
        formatString = convertTokens(formatString);
        return format(date, formatString);
    }
    static addDays(date, days) {
        date = this.getDateFromAnyType(date);
        return addDays(date, days);
    }
    static addWeeks(date, weeks) {
        date = this.getDateFromAnyType(date);
        return addWeeks(date, weeks);
    }
    static addMonths(date, months) {
        date = this.getDateFromAnyType(date);
        return addMonths(date, months);
    }
    static startOfMinute(date) {
        date = this.getDateFromAnyType(date);
        return startOfMinute(date);
    }
    static startOfDay(date) {
        date = this.getDateFromAnyType(date);
        return startOfDay(date);
    }
    static startOfWeek(date, options) {
        date = this.getDateFromAnyType(date);
        if (options?.weekStartsOn) {
            options.weekStartsOn = this.getWeekDayFromNumber(options.weekStartsOn);
        }
        return startOfWeek(date, options);
    }
    static startOfMonth(date) {
        date = this.getDateFromAnyType(date);
        return startOfMonth(date);
    }
    static endOfDay(date) {
        date = this.getDateFromAnyType(date);
        return endOfDay(date);
    }
    static endOfWeek(date, options) {
        date = this.getDateFromAnyType(date);
        if (options?.weekStartsOn) {
            options.weekStartsOn = this.getWeekDayFromNumber(options.weekStartsOn);
        }
        return endOfWeek(date, options);
    }
    static endOfMonth(date) {
        date = this.getDateFromAnyType(date);
        return endOfMonth(date);
    }
    static isSameDay(dateLeft, dateRight) {
        dateLeft = this.getDateFromAnyType(dateLeft);
        dateRight = this.getDateFromAnyType(dateRight);
        return isSameDay(dateLeft, dateRight);
    }
    static isSameMonth(dateLeft, dateRight) {
        dateLeft = this.getDateFromAnyType(dateLeft);
        dateRight = this.getDateFromAnyType(dateRight);
        return isSameMonth(dateLeft, dateRight);
    }
    static isSameSecond(dateLeft, dateRight) {
        dateLeft = this.getDateFromAnyType(dateLeft);
        dateRight = this.getDateFromAnyType(dateRight);
        return isSameSecond(dateLeft, dateRight);
    }
    static differenceInSeconds(date, start) {
        date = this.getDateFromAnyType(date);
        start = this.getDateFromAnyType(start);
        return differenceInSeconds(date, start);
    }
    static differenceInCalendarDays(date, start) {
        date = this.getDateFromAnyType(date);
        start = this.getDateFromAnyType(start);
        return differenceInCalendarDays(date, start);
    }
    static differenceInDays(date, start) {
        date = this.getDateFromAnyType(date);
        start = this.getDateFromAnyType(start);
        return differenceInDays(date, start);
    }
    static isWithinRange(date, start, end) {
        date = this.getDateFromAnyType(date);
        const interval = {
            start: this.getDateFromAnyType(start),
            end: this.getDateFromAnyType(end),
        };
        /**
         * Need extra error handling here to retain backwards compatibility because the new
         * isWithinInterval replacement function throws an error for Invalid Dates and Invalid
         * Intervals instead of returning true or false.
         **/
        try {
            return isWithinInterval(date, interval);
        }
        catch (e) {
            console.warn(e.toString());
            return false;
        }
    }
    static getMonth(date) {
        date = this.getDateFromAnyType(date);
        return getMonth(date);
    }
    static getYear(date) {
        date = this.getDateFromAnyType(date);
        return getYear(date);
    }
    static setMinutes(date, minutes) {
        date = this.getDateFromAnyType(date);
        return setMinutes(date, minutes);
    }
    static setHours(date, hours) {
        date = this.getDateFromAnyType(date);
        return setHours(date, hours);
    }
    static isBefore(date, minDate) {
        date = this.getDateFromAnyType(date);
        return isBefore(date, minDate);
    }
    static isAfter(date, maxDate) {
        date = this.getDateFromAnyType(date);
        return isAfter(date, maxDate);
    }
}
//# sourceMappingURL=data:application/json;base64,