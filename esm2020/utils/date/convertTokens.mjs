/**
 * Copyright Â© 2022 Sasha Koss
 * https://www.npmjs.com/package/@date-fns/upgrade
 **/
const tokensMap = {
    // 'D MMMM': '',
    // 'Do MMMM': '',
    // 'DD MMMM': '',
    M: 'L',
    Mo: 'Mo',
    MM: 'LL',
    MMM: 'LLL',
    MMMM: 'LLLL',
    Q: 'q',
    Qo: 'qo',
    D: 'd',
    Do: 'do',
    DD: 'dd',
    DDD: 'D',
    DDDo: 'Do',
    DDDD: 'DDD',
    d: 'i',
    do: 'io',
    dd: 'iiiiii',
    ddd: 'iii',
    dddd: 'iiii',
    A: 'a',
    a: 'a',
    aa: 'aaaa',
    E: 'i',
    W: 'I',
    Wo: 'Io',
    WW: 'II',
    YY: 'yy',
    YYYY: 'yyyy',
    GG: 'RR',
    GGGG: 'RRRR',
    H: 'H',
    HH: 'HH',
    h: 'h',
    hh: 'hh',
    m: 'm',
    mm: 'mm',
    s: 's',
    ss: 'ss',
    S: 'S',
    SS: 'SS',
    SSS: 'SSS',
    Z: 'xxx',
    ZZ: 'xx',
    X: 't',
    x: 'T'
};
const v1tokens = Object.keys(tokensMap)
    .sort()
    .reverse();
const tokensRegExp = new RegExp('(\\[[^\\[]*\\])|(\\\\)?' + '(' + v1tokens.join('|') + '|.)', 'g');
export function convertTokens(format) {
    const tokensCaptures = format.match(tokensRegExp);
    if (tokensCaptures) {
        return tokensCaptures
            .reduce((acc, tokenString, index) => {
            const v2token = tokensMap[tokenString];
            if (!v2token) {
                const escapedCaptures = tokenString.match(/^\[(.+)\]$/);
                if (escapedCaptures) {
                    acc.textBuffer.push(escapedCaptures[1]);
                }
                else {
                    acc.textBuffer.push(tokenString);
                }
            }
            const endOfString = index === tokensCaptures.length - 1;
            if (acc.textBuffer.length && (v2token || endOfString)) {
                acc.formatBuffer.push(`'${acc.textBuffer.join('')}'`);
                acc.textBuffer = [];
            }
            if (v2token)
                acc.formatBuffer.push(v2token);
            return acc;
        }, { formatBuffer: [], textBuffer: [] })
            .formatBuffer.join('');
    }
    else {
        return format;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydFRva2Vucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2VsZW1lbnRzL3V0aWxzL2RhdGUvY29udmVydFRva2Vucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0lBR0k7QUFNSixNQUFNLFNBQVMsR0FBYztJQUMzQixnQkFBZ0I7SUFDaEIsaUJBQWlCO0lBQ2pCLGlCQUFpQjtJQUNqQixDQUFDLEVBQUUsR0FBRztJQUNOLEVBQUUsRUFBRSxJQUFJO0lBQ1IsRUFBRSxFQUFFLElBQUk7SUFDUixHQUFHLEVBQUUsS0FBSztJQUNWLElBQUksRUFBRSxNQUFNO0lBQ1osQ0FBQyxFQUFFLEdBQUc7SUFDTixFQUFFLEVBQUUsSUFBSTtJQUNSLENBQUMsRUFBRSxHQUFHO0lBQ04sRUFBRSxFQUFFLElBQUk7SUFDUixFQUFFLEVBQUUsSUFBSTtJQUNSLEdBQUcsRUFBRSxHQUFHO0lBQ1IsSUFBSSxFQUFFLElBQUk7SUFDVixJQUFJLEVBQUUsS0FBSztJQUNYLENBQUMsRUFBRSxHQUFHO0lBQ04sRUFBRSxFQUFFLElBQUk7SUFDUixFQUFFLEVBQUUsUUFBUTtJQUNaLEdBQUcsRUFBRSxLQUFLO0lBQ1YsSUFBSSxFQUFFLE1BQU07SUFDWixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sRUFBRSxFQUFFLE1BQU07SUFDVixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0lBQ04sRUFBRSxFQUFFLElBQUk7SUFDUixFQUFFLEVBQUUsSUFBSTtJQUNSLEVBQUUsRUFBRSxJQUFJO0lBQ1IsSUFBSSxFQUFFLE1BQU07SUFDWixFQUFFLEVBQUUsSUFBSTtJQUNSLElBQUksRUFBRSxNQUFNO0lBQ1osQ0FBQyxFQUFFLEdBQUc7SUFDTixFQUFFLEVBQUUsSUFBSTtJQUNSLENBQUMsRUFBRSxHQUFHO0lBQ04sRUFBRSxFQUFFLElBQUk7SUFDUixDQUFDLEVBQUUsR0FBRztJQUNOLEVBQUUsRUFBRSxJQUFJO0lBQ1IsQ0FBQyxFQUFFLEdBQUc7SUFDTixFQUFFLEVBQUUsSUFBSTtJQUNSLENBQUMsRUFBRSxHQUFHO0lBQ04sRUFBRSxFQUFFLElBQUk7SUFDUixHQUFHLEVBQUUsS0FBSztJQUNWLENBQUMsRUFBRSxLQUFLO0lBQ1IsRUFBRSxFQUFFLElBQUk7SUFDUixDQUFDLEVBQUUsR0FBRztJQUNOLENBQUMsRUFBRSxHQUFHO0NBQ1AsQ0FBQTtBQUVELE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0tBQ3BDLElBQUksRUFBRTtLQUNOLE9BQU8sRUFBRSxDQUFBO0FBRVosTUFBTSxZQUFZLEdBQUcsSUFBSSxNQUFNLENBQzdCLHlCQUF5QixHQUFHLEdBQUcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssRUFDNUQsR0FBRyxDQUNKLENBQUE7QUFPRCxNQUFNLFVBQVUsYUFBYSxDQUFDLE1BQWM7SUFDMUMsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNqRCxJQUFJLGNBQWMsRUFBRTtRQUNsQixPQUFPLGNBQWM7YUFDbEIsTUFBTSxDQUNMLENBQUMsR0FBRyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUMxQixNQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsV0FBVyxDQUFDLENBQUE7WUFFdEMsSUFBSSxDQUFDLE9BQU8sRUFBRTtnQkFDWixNQUFNLGVBQWUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO2dCQUN2RCxJQUFJLGVBQWUsRUFBRTtvQkFDbkIsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7aUJBQ3hDO3FCQUFNO29CQUNMLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO2lCQUNqQzthQUNGO1lBRUQsTUFBTSxXQUFXLEdBQUcsS0FBSyxLQUFLLGNBQWMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFBO1lBQ3ZELElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxNQUFNLElBQUksQ0FBQyxPQUFPLElBQUksV0FBVyxDQUFDLEVBQUU7Z0JBQ3JELEdBQUcsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFBO2dCQUNyRCxHQUFHLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQTthQUNwQjtZQUVELElBQUksT0FBTztnQkFBRSxHQUFHLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQTtZQUUzQyxPQUFPLEdBQUcsQ0FBQTtRQUNaLENBQUMsRUFDRCxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBa0IsQ0FDckQ7YUFDQSxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0tBQ3pCO1NBQU07UUFDTCxPQUFPLE1BQU0sQ0FBQTtLQUNkO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKiBcbiAqIENvcHlyaWdodCDCqSAyMDIyIFNhc2hhIEtvc3NcbiAqIGh0dHBzOi8vd3d3Lm5wbWpzLmNvbS9wYWNrYWdlL0BkYXRlLWZucy91cGdyYWRlXG4gKiovXG5cbnR5cGUgVG9rZW5zTWFwID0ge1xuICBbdjF0b2tlbjogc3RyaW5nXTogc3RyaW5nXG59XG5cbmNvbnN0IHRva2Vuc01hcDogVG9rZW5zTWFwID0ge1xuICAvLyAnRCBNTU1NJzogJycsXG4gIC8vICdEbyBNTU1NJzogJycsXG4gIC8vICdERCBNTU1NJzogJycsXG4gIE06ICdMJyxcbiAgTW86ICdNbycsXG4gIE1NOiAnTEwnLFxuICBNTU06ICdMTEwnLFxuICBNTU1NOiAnTExMTCcsXG4gIFE6ICdxJyxcbiAgUW86ICdxbycsXG4gIEQ6ICdkJyxcbiAgRG86ICdkbycsXG4gIEREOiAnZGQnLFxuICBEREQ6ICdEJyxcbiAgREREbzogJ0RvJyxcbiAgRERERDogJ0RERCcsXG4gIGQ6ICdpJyxcbiAgZG86ICdpbycsXG4gIGRkOiAnaWlpaWlpJyxcbiAgZGRkOiAnaWlpJyxcbiAgZGRkZDogJ2lpaWknLFxuICBBOiAnYScsXG4gIGE6ICdhJyxcbiAgYWE6ICdhYWFhJyxcbiAgRTogJ2knLFxuICBXOiAnSScsXG4gIFdvOiAnSW8nLFxuICBXVzogJ0lJJyxcbiAgWVk6ICd5eScsXG4gIFlZWVk6ICd5eXl5JyxcbiAgR0c6ICdSUicsXG4gIEdHR0c6ICdSUlJSJyxcbiAgSDogJ0gnLFxuICBISDogJ0hIJyxcbiAgaDogJ2gnLFxuICBoaDogJ2hoJyxcbiAgbTogJ20nLFxuICBtbTogJ21tJyxcbiAgczogJ3MnLFxuICBzczogJ3NzJyxcbiAgUzogJ1MnLFxuICBTUzogJ1NTJyxcbiAgU1NTOiAnU1NTJyxcbiAgWjogJ3h4eCcsXG4gIFpaOiAneHgnLFxuICBYOiAndCcsXG4gIHg6ICdUJ1xufVxuXG5jb25zdCB2MXRva2VucyA9IE9iamVjdC5rZXlzKHRva2Vuc01hcClcbiAgLnNvcnQoKVxuICAucmV2ZXJzZSgpXG5cbmNvbnN0IHRva2Vuc1JlZ0V4cCA9IG5ldyBSZWdFeHAoXG4gICcoXFxcXFtbXlxcXFxbXSpcXFxcXSl8KFxcXFxcXFxcKT8nICsgJygnICsgdjF0b2tlbnMuam9pbignfCcpICsgJ3wuKScsXG4gICdnJ1xuKVxuXG50eXBlIFRva2Vuc0J1ZmZlciA9IHtcbiAgZm9ybWF0QnVmZmVyOiBzdHJpbmdbXVxuICB0ZXh0QnVmZmVyOiBzdHJpbmdbXVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY29udmVydFRva2Vucyhmb3JtYXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IHRva2Vuc0NhcHR1cmVzID0gZm9ybWF0Lm1hdGNoKHRva2Vuc1JlZ0V4cClcbiAgaWYgKHRva2Vuc0NhcHR1cmVzKSB7XG4gICAgcmV0dXJuIHRva2Vuc0NhcHR1cmVzXG4gICAgICAucmVkdWNlKFxuICAgICAgICAoYWNjLCB0b2tlblN0cmluZywgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCB2MnRva2VuID0gdG9rZW5zTWFwW3Rva2VuU3RyaW5nXVxuXG4gICAgICAgICAgaWYgKCF2MnRva2VuKSB7XG4gICAgICAgICAgICBjb25zdCBlc2NhcGVkQ2FwdHVyZXMgPSB0b2tlblN0cmluZy5tYXRjaCgvXlxcWyguKylcXF0kLylcbiAgICAgICAgICAgIGlmIChlc2NhcGVkQ2FwdHVyZXMpIHtcbiAgICAgICAgICAgICAgYWNjLnRleHRCdWZmZXIucHVzaChlc2NhcGVkQ2FwdHVyZXNbMV0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhY2MudGV4dEJ1ZmZlci5wdXNoKHRva2VuU3RyaW5nKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGVuZE9mU3RyaW5nID0gaW5kZXggPT09IHRva2Vuc0NhcHR1cmVzLmxlbmd0aCAtIDFcbiAgICAgICAgICBpZiAoYWNjLnRleHRCdWZmZXIubGVuZ3RoICYmICh2MnRva2VuIHx8IGVuZE9mU3RyaW5nKSkge1xuICAgICAgICAgICAgYWNjLmZvcm1hdEJ1ZmZlci5wdXNoKGAnJHthY2MudGV4dEJ1ZmZlci5qb2luKCcnKX0nYClcbiAgICAgICAgICAgIGFjYy50ZXh0QnVmZmVyID0gW11cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodjJ0b2tlbikgYWNjLmZvcm1hdEJ1ZmZlci5wdXNoKHYydG9rZW4pXG5cbiAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgIH0sXG4gICAgICAgIHsgZm9ybWF0QnVmZmVyOiBbXSwgdGV4dEJ1ZmZlcjogW10gfSBhcyBUb2tlbnNCdWZmZXJcbiAgICAgIClcbiAgICAgIC5mb3JtYXRCdWZmZXIuam9pbignJylcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZm9ybWF0XG4gIH1cbn0iXX0=