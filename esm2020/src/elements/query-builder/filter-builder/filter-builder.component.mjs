import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, Directive, ElementRef, Input, QueryList, ViewChild, ViewContainerRef, } from '@angular/core';
import { ControlContainer, FormControl } from '@angular/forms';
import { Subject } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';
import { NOVO_FILTER_BUILDER } from '../query-builder.tokens';
import { NovoFilterFieldDef, NovoFilterFieldTypeDef } from './base-filter-field.definition';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../flex/Grid";
import * as i3 from "../../field/field";
import * as i4 from "../../select/Select";
import * as i5 from "../../tabs/Tabs";
import * as i6 from "../../search/SearchBox";
import * as i7 from "../../common/option/option.component";
import * as i8 from "../../non-ideal-state/NonIdealState";
import * as i9 from "../../loading/Loading";
import * as i10 from "../../common/directives/space.directive";
import * as i11 from "../../common/directives/theme.directive";
import * as i12 from "@angular/common";
/**
 * Provides a handle for the table to grab the view container's ng-container to insert data rows.
 * @docs-private
 */
export class QueryFilterInputOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
}
QueryFilterInputOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: QueryFilterInputOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
QueryFilterInputOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.0", type: QueryFilterInputOutlet, selector: "[queryFilterInputOutlet]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: QueryFilterInputOutlet, decorators: [{
            type: Directive,
            args: [{ selector: '[queryFilterInputOutlet]' }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });
/**
 * Provides a handle for the table to grab the view container's ng-container to insert data rows.
 * @docs-private
 */
export class QueryFilterOperatorOutlet {
    constructor(viewContainer, elementRef) {
        this.viewContainer = viewContainer;
        this.elementRef = elementRef;
    }
}
QueryFilterOperatorOutlet.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: QueryFilterOperatorOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
QueryFilterOperatorOutlet.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.0", type: QueryFilterOperatorOutlet, selector: "[queryFilterOperatorOutlet]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: QueryFilterOperatorOutlet, decorators: [{
            type: Directive,
            args: [{ selector: '[queryFilterOperatorOutlet]' }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });
export const defaultEditTypeFn = (field) => {
    return (field.inputType || field.dataType || field.type).toLowerCase();
};
export class FilterBuilderComponent {
    constructor(controlContainer, cdr) {
        this.controlContainer = controlContainer;
        this.cdr = cdr;
        this.config = { fields: [] };
        this.editTypeFn = defaultEditTypeFn;
        this.searchTerm = new FormControl();
        this._lastContext = {};
        this._customFieldDefs = new Set();
        this._fieldDefsByName = new Map();
        /** Subject that emits when the component has been destroyed. */
        this._onDestroy = new Subject();
    }
    ngOnInit() {
        this.parentForm = this.controlContainer.control;
    }
    ngAfterContentInit() {
        const { fields = [] } = this.config || {};
        fields.length && this.changeFieldOptions(fields[0]);
        this.searches = this.searchTerm.valueChanges.pipe(debounceTime(300), distinctUntilChanged()).subscribe((term) => {
            this.results$ = Promise.resolve(this.fieldConfig.options.filter((f) => f.name.toLowerCase().includes(term.toLowerCase()) || f.label?.toLowerCase().includes(term.toLowerCase())));
            this.cdr.markForCheck();
        });
    }
    ngAfterContentChecked() {
        this._cacheFieldDefs();
    }
    ngOnDestroy() {
        this.searches.unsubscribe();
        // Clear all outlets and Maps
        [this._operatorOutlet.viewContainer, this._inputOutlet.viewContainer, this._customFieldDefs, this._fieldDefsByName].forEach((def) => {
            def.clear();
        });
        // this._contentFieldTypeDefs = [];
        // this._contentFieldDefs = [];
        this._onDestroy.next();
        this._onDestroy.complete();
    }
    /**
     * Updates the Conditions "Field" Options to Change base on new Scope
     * @param fieldConfig
     */
    changeFieldOptions(fieldConfig) {
        // this.fields = entity.filter(term);
        this.fieldConfig = fieldConfig;
        this.searchTerm.setValue('');
        this.results$ = Promise.resolve(this.fieldConfig.options);
    }
    getField() {
        const { field } = this.parentForm?.value;
        if (!field)
            return null;
        const fieldName = field.split('.')[1];
        return this.fieldConfig.find(fieldName);
    }
    getDefaultField() {
        const fields = this.fieldConfig.options;
        if (fields && fields.length) {
            return fields[0].name;
        }
        return null;
    }
    onFieldSelect() {
        const fieldConf = this.getField();
        if (!fieldConf) {
            this.parentForm.get('field').setValue(this.getDefaultField());
            console.warn(`No field found for field '${fieldConf.name}'. `);
            return;
        }
        const { field, operator } = this.parentForm.value;
        if (this._lastContext.field !== field) {
            this.createFieldTemplates();
        }
        if (this._lastContext.operator !== operator) {
            this.parentForm.get('value').setValue(null);
        }
        this._lastContext = { ...this.parentForm.value };
        this.cdr.markForCheck();
    }
    /** Adds a field definition that was not included as part of the content children. */
    addFieldDef(fieldDef) {
        this._customFieldDefs.add(fieldDef);
    }
    /** Removes a field definition that was not included as part of the content children. */
    removeFieldDef(fieldDef) {
        this._customFieldDefs.delete(fieldDef);
    }
    _cacheFieldDefs() {
        this._fieldDefsByName.clear();
        const defs = [
            // Dynamically Added Definitions
            ...Array.from(this._customFieldDefs),
            // Definitions added as Content
            ...Array.from(this._contentFieldTypeDefs),
            ...Array.from(this._contentFieldDefs),
        ];
        defs.forEach((fieldDef) => {
            if (this._fieldDefsByName.has(fieldDef.name)) {
                // throw new Error(`duplicate field name for ${fieldDef.name}`);
                console.warn(`duplicate field name for ${fieldDef.name}`);
            }
            this._fieldDefsByName.set(fieldDef.name, fieldDef);
        });
    }
    findDefinitionForField(field) {
        if (!field)
            return;
        const editType = this.editTypeFn(field);
        // Don't look at dataSpecialization it is no good, this misses currency, and percent
        const { name, inputType, dataType, type } = field;
        // Check Fields by priority for match Field Definition
        const key = [name, editType, inputType, dataType, type, 'default'].find((it) => this._fieldDefsByName.has(it));
        // console.log('looking for input', name, inputType, dataSpecialization, dataType, type, this._fieldDefsByName);
        return this._fieldDefsByName.get(key);
    }
    createFieldTemplates() {
        const definition = this.findDefinitionForField(this.getField());
        console.log('found def', definition);
        this.parentForm.get('operator').setValue(definition.defaultOperator);
        this.parentForm.get('value').setValue(null);
        this.createFieldOperators(definition);
        this.createFieldInput(definition);
    }
    createFieldOperators(definition) {
        this._operatorOutlet.viewContainer.clear();
        if (definition) {
            const context = { $implicit: this.parentForm, fieldMeta: this.getField() };
            this._operatorOutlet.viewContainer.createEmbeddedView(definition.fieldOperators.template, context);
        }
        this.cdr.markForCheck();
    }
    createFieldInput(definition) {
        this._inputOutlet.viewContainer.clear();
        if (definition) {
            const context = { $implicit: this.parentForm, fieldMeta: this.getField() };
            this._inputOutlet.viewContainer.createEmbeddedView(definition.fieldInput.template, context);
        }
        this.cdr.markForCheck();
    }
}
FilterBuilderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: FilterBuilderComponent, deps: [{ token: i1.ControlContainer }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
FilterBuilderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.0", type: FilterBuilderComponent, selector: "novo-filter-builder", inputs: { label: "label", config: "config", editTypeFn: "editTypeFn" }, providers: [{ provide: NOVO_FILTER_BUILDER, useExisting: FilterBuilderComponent }], queries: [{ propertyName: "_contentFieldTypeDefs", predicate: NovoFilterFieldTypeDef, descendants: true }, { propertyName: "_contentFieldDefs", predicate: NovoFilterFieldDef, descendants: true }], viewQueries: [{ propertyName: "_operatorOutlet", first: true, predicate: QueryFilterOperatorOutlet, descendants: true, static: true }, { propertyName: "_inputOutlet", first: true, predicate: QueryFilterInputOutlet, descendants: true, static: true }], ngImport: i0, template: "<form [formGroup]=\"parentForm\">\n  <novo-grid gap=\"1rem\" columns=\"16rem 10rem 1fr\">\n    <novo-field class=\"condition-field\">\n      <novo-select\n        placeholder=\"Choose a field...\"\n        formControlName=\"field\"\n        (onSelect)=\"onFieldSelect()\"\n        overlayWidth=\"auto\"\n        overlayHeight=\"auto\"\n        [style.minWidth.px]=\"160\">\n        <div class=\"field-select-picker\">\n          <novo-nav theme=\"white\" direction=\"vertical\">\n            <novo-tab *ngFor=\"let entity of config?.fields\" (activeChange)=\"changeFieldOptions(entity)\">\n              {{ entity.label }}\n            </novo-tab>\n          </novo-nav>\n          <div class=\"filter-search-results\">\n            <novo-search alwaysOpen=\"true\" [formControl]=\"searchTerm\"></novo-search>\n            <ng-container *ngIf=\"results$ | async as results; else loading\">\n              <ng-container *ngIf=\"results.length; else empty\">\n                <novo-option *ngFor=\"let field of results\" value=\"{{ fieldConfig.value }}.{{ field.name }}\">\n                  {{ field.label || field.name }}\n                </novo-option>\n              </ng-container>\n              <!-- EMPTY STATE TEMPLATE -->\n              <ng-template #empty>\n                <novo-non-ideal-state\n                  icon=\"search\"\n                  title=\"No results found.\"\n                  description=\"Your search didn't find anything. Try searching for something else.\">\n                </novo-non-ideal-state>\n              </ng-template>\n            </ng-container>\n            <!-- LOADING TEMPLATE -->\n            <ng-template #loading>\n              <novo-loading></novo-loading>\n            </ng-template>\n          </div>\n        </div>\n      </novo-select>\n    </novo-field>\n\n    <div class=\"condition-operator\">\n      <ng-container queryFilterOperatorOutlet></ng-container>\n    </div>\n\n    <div class=\"condition-value\">\n      <ng-container queryFilterInputOutlet></ng-container>\n    </div>\n  </novo-grid>\n</form>", styles: [":host{position:relative;display:block;width:100%}:host .condition-operator::ng-deep .novo-select{min-width:10rem!important}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem auto;align-items:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;overflow:hidden;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.field-select-picker{display:grid;grid-template-columns:-webkit-min-content 1fr;grid-template-columns:min-content 1fr;background-color:#fff;overflow:auto;box-shadow:0 1px 2px #00000026;height:219px;width:32rem}.field-select-picker .filter-search-results{border-left:1px solid #dbdbdb;height:100%;overflow-y:scroll}\n"], components: [{ type: i2.NovoGridElement, selector: "novo-grid", inputs: ["direction", "align", "justify", "columns"] }, { type: i3.NovoFieldElement, selector: "novo-field", inputs: ["layout", "appearance", "width"] }, { type: i4.NovoSelectElement, selector: "novo-select", inputs: ["disabled", "required", "tabIndex", "id", "name", "options", "placeholder", "readonly", "headerConfig", "position", "overlayWidth", "overlayHeight", "displayWith", "compareWith", "value", "multiple"], outputs: ["onSelect", "selectionChange", "valueChange", "openedChange", "opened", "closed"] }, { type: i5.NovoNavElement, selector: "novo-nav", inputs: ["theme", "direction", "outlet", "router", "condensed", "selectedIndex"], outputs: ["selectedIndexChange"] }, { type: i5.NovoTabElement, selector: "novo-tab", inputs: ["active", "color", "disabled"], outputs: ["activeChange"] }, { type: i6.NovoSearchBoxElement, selector: "novo-search", inputs: ["name", "icon", "position", "placeholder", "alwaysOpen", "theme", "color", "closeOnSelect", "displayField", "displayValue", "hint", "keepOpen"], outputs: ["searchChanged", "applySearch"] }, { type: i7.NovoOption, selector: "novo-option", inputs: ["selected", "keepOpen", "inert", "value", "disabled"], exportAs: ["novoOption"] }, { type: i8.NonIdealStateElement, selector: "novo-non-ideal-state", inputs: ["theme", "icon", "title", "description"] }, { type: i9.NovoLoadingElement, selector: "novo-loading", inputs: ["theme", "color", "size"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i10.GapDirective, selector: "[gap]", inputs: ["gap"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i11.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }, { type: i12.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: QueryFilterOperatorOutlet, selector: "[queryFilterOperatorOutlet]" }, { type: QueryFilterInputOutlet, selector: "[queryFilterInputOutlet]" }], pipes: { "async": i12.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: FilterBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-filter-builder', providers: [{ provide: NOVO_FILTER_BUILDER, useExisting: FilterBuilderComponent }], changeDetection: ChangeDetectionStrategy.OnPush, template: "<form [formGroup]=\"parentForm\">\n  <novo-grid gap=\"1rem\" columns=\"16rem 10rem 1fr\">\n    <novo-field class=\"condition-field\">\n      <novo-select\n        placeholder=\"Choose a field...\"\n        formControlName=\"field\"\n        (onSelect)=\"onFieldSelect()\"\n        overlayWidth=\"auto\"\n        overlayHeight=\"auto\"\n        [style.minWidth.px]=\"160\">\n        <div class=\"field-select-picker\">\n          <novo-nav theme=\"white\" direction=\"vertical\">\n            <novo-tab *ngFor=\"let entity of config?.fields\" (activeChange)=\"changeFieldOptions(entity)\">\n              {{ entity.label }}\n            </novo-tab>\n          </novo-nav>\n          <div class=\"filter-search-results\">\n            <novo-search alwaysOpen=\"true\" [formControl]=\"searchTerm\"></novo-search>\n            <ng-container *ngIf=\"results$ | async as results; else loading\">\n              <ng-container *ngIf=\"results.length; else empty\">\n                <novo-option *ngFor=\"let field of results\" value=\"{{ fieldConfig.value }}.{{ field.name }}\">\n                  {{ field.label || field.name }}\n                </novo-option>\n              </ng-container>\n              <!-- EMPTY STATE TEMPLATE -->\n              <ng-template #empty>\n                <novo-non-ideal-state\n                  icon=\"search\"\n                  title=\"No results found.\"\n                  description=\"Your search didn't find anything. Try searching for something else.\">\n                </novo-non-ideal-state>\n              </ng-template>\n            </ng-container>\n            <!-- LOADING TEMPLATE -->\n            <ng-template #loading>\n              <novo-loading></novo-loading>\n            </ng-template>\n          </div>\n        </div>\n      </novo-select>\n    </novo-field>\n\n    <div class=\"condition-operator\">\n      <ng-container queryFilterOperatorOutlet></ng-container>\n    </div>\n\n    <div class=\"condition-value\">\n      <ng-container queryFilterInputOutlet></ng-container>\n    </div>\n  </novo-grid>\n</form>", styles: [":host{position:relative;display:block;width:100%}:host .condition-operator::ng-deep .novo-select{min-width:10rem!important}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem auto;align-items:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;overflow:hidden;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}.field-select-picker{display:grid;grid-template-columns:-webkit-min-content 1fr;grid-template-columns:min-content 1fr;background-color:#fff;overflow:auto;box-shadow:0 1px 2px #00000026;height:219px;width:32rem}.field-select-picker .filter-search-results{border-left:1px solid #dbdbdb;height:100%;overflow-y:scroll}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _operatorOutlet: [{
                type: ViewChild,
                args: [QueryFilterOperatorOutlet, { static: true }]
            }], _inputOutlet: [{
                type: ViewChild,
                args: [QueryFilterInputOutlet, { static: true }]
            }], _contentFieldTypeDefs: [{
                type: ContentChildren,
                args: [NovoFilterFieldTypeDef, { descendants: true }]
            }], _contentFieldDefs: [{
                type: ContentChildren,
                args: [NovoFilterFieldDef, { descendants: true }]
            }], label: [{
                type: Input
            }], config: [{
                type: Input
            }], editTypeFn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,