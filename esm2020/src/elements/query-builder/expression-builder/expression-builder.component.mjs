import { Component, forwardRef, Input } from '@angular/core';
import { ControlContainer, FormBuilder, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { NOVO_EXPRESSION_BUILDER } from '../query-builder.tokens';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../../flex/Flex";
import * as i3 from "../../common/typography/caption/caption.component";
import * as i4 from "../../common/typography/text/text.component";
import * as i5 from "../filter-builder/filter-builder.component";
import * as i6 from "../filter-builder/default-condition-defs/date-filter-field.definition";
import * as i7 from "../filter-builder/default-condition-defs/string-filter-field.definition";
import * as i8 from "../filter-builder/default-condition-defs/id-filter-field.definition";
import * as i9 from "../filter-builder/default-condition-defs/number-filter-field.definition";
import * as i10 from "../filter-builder/default-condition-defs/picker-filter-field.definition";
import * as i11 from "../../button/Button";
import * as i12 from "@angular/common";
import * as i13 from "../../common/directives/space.directive";
import * as i14 from "../../common/directives/theme.directive";
export class ExpressionBuilderComponent {
    constructor(controlContainer, formBuilder) {
        this.controlContainer = controlContainer;
        this.formBuilder = formBuilder;
    }
    ngOnInit() {
        this.parentForm = this.controlContainer.control;
    }
    handleAddOrFilter(evt) {
        // console.log('Add Or', evt);
    }
    handleAddAndFilter(evt) {
        // console.log('Add And', evt);
        this.addAndGroup();
    }
    andGroups() {
        return this.parentForm.get(this.controlName);
    }
    newAndGroup() {
        return this.formBuilder.group({
            $or: this.formBuilder.array([this.newOrGroup()]),
        });
    }
    addAndGroup() {
        this.andGroups().push(this.newAndGroup());
        // console.log(this.parentForm.value);
    }
    removeAndGroup(index) {
        this.andGroups().removeAt(index);
    }
    orGroups(index) {
        return this.andGroups().at(index).get('$or');
    }
    newOrGroup() {
        return this.formBuilder.group({
            field: [null, Validators.required],
            operator: [null, Validators.required],
            value: [null, Validators.required],
        });
    }
    addOrGroup(index) {
        this.orGroups(index).push(this.newOrGroup());
    }
    removeOrGroup(index, orIndex) {
        this.orGroups(index).removeAt(orIndex);
        if (!this.orGroups(index).controls.length) {
            this.removeAndGroup(index);
        }
    }
    canAddGroup() {
        // console.log('can Add Group', this.andGroups().controls, this.parentForm.valid);
        if (this.andGroups().controls.length < 1)
            return true;
        const len = this.andGroups().controls.length - 1;
        const last = this.orGroups(len).controls.length - 1;
        // console.log('last value', this.orGroups(len).at(last).value);
        const { field, value } = this.orGroups(len).at(last).value;
        return !!field && !!value;
    }
}
ExpressionBuilderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: ExpressionBuilderComponent, deps: [{ token: i1.ControlContainer }, { token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
ExpressionBuilderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.0", type: ExpressionBuilderComponent, selector: "novo-expression-builder", inputs: { config: "config", controlName: "controlName" }, providers: [
        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ExpressionBuilderComponent), multi: true },
        { provide: NOVO_EXPRESSION_BUILDER, useExisting: ExpressionBuilderComponent },
    ], ngImport: i0, template: "<form [formGroup]=\"parentForm\">\n  <novo-stack [formArrayName]=\"controlName\" class=\"expression-builder\">\n    <ng-container *ngFor=\"let andGroup of andGroups().controls; let andIndex = index; let isFirst = first\">\n      <div *ngIf=\"!isFirst\" class=\"and-connector\" aria-hidden=\"false\">\n        <div class=\"and-connector-line\"></div>\n        <novo-caption class=\"and-connector-text\">and</novo-caption>\n      </div>\n      <ng-container [formGroupName]=\"andIndex\">\n        <novo-stack\n          class=\"expression-group\"\n          [class.with-conditions]=\"orGroups(andIndex).controls.length > 1\"\n          [class.with-one-condition]=\"orGroups(andIndex).controls.length == 1\"\n          formArrayName=\"$or\">\n          <ng-container\n            *ngFor=\"\n              let orGroup of orGroups(andIndex).controls;\n              let orIndex = index;\n              let isFirstOr = first;\n              let isLastOr = last\n            \">\n            <novo-flex class=\"expression-block\" [class.or-block]=\"orGroups(andIndex).controls.length > 1 && !isLastOr\">\n              <div *ngIf=\"!isFirstOr\" class=\"or-connector\" aria-hidden=\"false\">\n                <!-- <div class=\"or-connector-line\"></div> -->\n                <novo-text class=\"or-connector-text\" color=\"ocean\" weight=\"bold\" padding=\"sm\" mx=\"lg\">OR</novo-text>\n              </div>\n              <novo-filter-builder [formGroupName]=\"orIndex\" [config]=\"config\">\n                <novo-date-filter-field-def name=\"Timestamp\"></novo-date-filter-field-def>\n                <novo-string-filter-field-def name=\"String\"></novo-string-filter-field-def>\n                <novo-id-filter-field-def name=\"ID\"></novo-id-filter-field-def>\n                <novo-number-filter-field-def name=\"Float\"></novo-number-filter-field-def>\n                <novo-number-filter-field-def name=\"Integer\"></novo-number-filter-field-def>\n                <novo-number-filter-field-def name=\"BigDecimal\"></novo-number-filter-field-def>\n                <novo-picker-filter-field-def name=\"SELECT\"></novo-picker-filter-field-def>\n                <ng-content></ng-content>\n              </novo-filter-builder>\n              <button *ngIf=\"isLastOr\" theme=\"secondary\" size=\"sm\" class=\"and-or-filter-button\"\n                (click)=\"addOrGroup(andIndex)\">Or</button>\n              <novo-button theme=\"icon\" icon=\"delete-o\" (click)=\"removeOrGroup(andIndex, orIndex)\"></novo-button>\n            </novo-flex>\n\n          </ng-container>\n        </novo-stack>\n      </ng-container>\n    </ng-container>\n  </novo-stack>\n  <button class=\"and-or-filter-button\" theme=\"secondary\" size=\"sm\" (click)=\"addAndGroup()\"\n    [disabled]=\"!canAddGroup()\">Add Criteria</button>\n</form>\n<!-- \n  {\n    $and: [{\n      $or: [{\n        entity: 'JobOrder'\n        field: 'categories',\n        operator: 'doesNotContain',\n        value: 'Healthcare'\n      }]\n    }]\n  }\n -->", styles: [":host{position:relative;display:block}:host .expression-builder .expression-block{width:100%;padding-bottom:.4rem}:host .expression-builder .expression-group{width:100%;border:1px solid transparent;border-radius:.4rem}:host .expression-builder .expression-group.with-conditions{padding:.5rem;margin-bottom:.5rem;border-color:#e6e6e6}:host .expression-builder .expression-group.with-one-condition{border-bottom:1px solid #e6e6e6}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem;align-items:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}:host .and-connector{background:#fff;padding:0 5px;position:relative;width:100%}:host .and-connector .and-connector-line{height:1px;width:100%}:host .and-connector .and-connector-text{background-color:#fff;background-color:var(--background-alt, #ffffff);margin:-8px 0 0 10px;position:absolute;text-align:center;text-transform:uppercase}\n"], components: [{ type: i2.NovoStackElement, selector: "novo-stack,novo-column", inputs: ["direction", "align"] }, { type: i3.NovoCaption, selector: "novo-caption,[novo-caption]" }, { type: i2.NovoFlexElement, selector: "novo-flex,novo-row", inputs: ["direction", "align", "justify", "wrap", "gap"] }, { type: i4.NovoText, selector: "novo-text,[novo-text]", inputs: ["block"] }, { type: i5.FilterBuilderComponent, selector: "novo-filter-builder", inputs: ["label", "config", "editTypeFn"] }, { type: i6.NovoDefaultDateFilterFieldDef, selector: "novo-date-filter-field-def" }, { type: i7.NovoDefaultStringFilterFieldDef, selector: "novo-string-filter-field-def" }, { type: i8.NovoDefaultIdFilterFieldDef, selector: "novo-id-filter-field-def" }, { type: i9.NovoDefaultNumberFilterFieldDef, selector: "novo-number-filter-field-def" }, { type: i10.NovoDefaultPickerFilterFieldDef, selector: "novo-picker-filter-field-def" }, { type: i11.NovoButtonElement, selector: "novo-button,button[theme]", inputs: ["color", "side", "size", "theme", "loading", "icon", "disabled"] }], directives: [{ type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.FormArrayName, selector: "[formArrayName]", inputs: ["formArrayName"] }, { type: i12.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i12.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }, { type: i13.PaddingDirective, selector: "[p],[padding],[paddingTop],[paddingRight],[paddingBottom],[paddingLeft],[paddingX],[paddingY],[pt],[pr],[pb],[pl],[px],[py]", inputs: ["padding", "p", "paddingLeft", "pl", "paddingRight", "pr", "paddingTop", "pt", "paddingBottom", "pb", "paddingX", "px", "paddingY", "py"] }, { type: i13.MarginDirective, selector: "[m],[margin],[marginTop],[marginRight],[marginBottom],[marginLeft],[marginX],[marginY],[mt],[mr],[mb],[ml],[mx],[my]", inputs: ["margin", "m", "marginLeft", "ml", "marginRight", "mr", "marginTop", "mt", "marginBottom", "mb", "marginX", "mx", "marginY", "my"] }, { type: i14.ThemeColorDirective, selector: "[theme]", inputs: ["theme"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.0", ngImport: i0, type: ExpressionBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'novo-expression-builder', providers: [
                        { provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ExpressionBuilderComponent), multi: true },
                        { provide: NOVO_EXPRESSION_BUILDER, useExisting: ExpressionBuilderComponent },
                    ], template: "<form [formGroup]=\"parentForm\">\n  <novo-stack [formArrayName]=\"controlName\" class=\"expression-builder\">\n    <ng-container *ngFor=\"let andGroup of andGroups().controls; let andIndex = index; let isFirst = first\">\n      <div *ngIf=\"!isFirst\" class=\"and-connector\" aria-hidden=\"false\">\n        <div class=\"and-connector-line\"></div>\n        <novo-caption class=\"and-connector-text\">and</novo-caption>\n      </div>\n      <ng-container [formGroupName]=\"andIndex\">\n        <novo-stack\n          class=\"expression-group\"\n          [class.with-conditions]=\"orGroups(andIndex).controls.length > 1\"\n          [class.with-one-condition]=\"orGroups(andIndex).controls.length == 1\"\n          formArrayName=\"$or\">\n          <ng-container\n            *ngFor=\"\n              let orGroup of orGroups(andIndex).controls;\n              let orIndex = index;\n              let isFirstOr = first;\n              let isLastOr = last\n            \">\n            <novo-flex class=\"expression-block\" [class.or-block]=\"orGroups(andIndex).controls.length > 1 && !isLastOr\">\n              <div *ngIf=\"!isFirstOr\" class=\"or-connector\" aria-hidden=\"false\">\n                <!-- <div class=\"or-connector-line\"></div> -->\n                <novo-text class=\"or-connector-text\" color=\"ocean\" weight=\"bold\" padding=\"sm\" mx=\"lg\">OR</novo-text>\n              </div>\n              <novo-filter-builder [formGroupName]=\"orIndex\" [config]=\"config\">\n                <novo-date-filter-field-def name=\"Timestamp\"></novo-date-filter-field-def>\n                <novo-string-filter-field-def name=\"String\"></novo-string-filter-field-def>\n                <novo-id-filter-field-def name=\"ID\"></novo-id-filter-field-def>\n                <novo-number-filter-field-def name=\"Float\"></novo-number-filter-field-def>\n                <novo-number-filter-field-def name=\"Integer\"></novo-number-filter-field-def>\n                <novo-number-filter-field-def name=\"BigDecimal\"></novo-number-filter-field-def>\n                <novo-picker-filter-field-def name=\"SELECT\"></novo-picker-filter-field-def>\n                <ng-content></ng-content>\n              </novo-filter-builder>\n              <button *ngIf=\"isLastOr\" theme=\"secondary\" size=\"sm\" class=\"and-or-filter-button\"\n                (click)=\"addOrGroup(andIndex)\">Or</button>\n              <novo-button theme=\"icon\" icon=\"delete-o\" (click)=\"removeOrGroup(andIndex, orIndex)\"></novo-button>\n            </novo-flex>\n\n          </ng-container>\n        </novo-stack>\n      </ng-container>\n    </ng-container>\n  </novo-stack>\n  <button class=\"and-or-filter-button\" theme=\"secondary\" size=\"sm\" (click)=\"addAndGroup()\"\n    [disabled]=\"!canAddGroup()\">Add Criteria</button>\n</form>\n<!-- \n  {\n    $and: [{\n      $or: [{\n        entity: 'JobOrder'\n        field: 'categories',\n        operator: 'doesNotContain',\n        value: 'Healthcare'\n      }]\n    }]\n  }\n -->", styles: [":host{position:relative;display:block}:host .expression-builder .expression-block{width:100%;padding-bottom:.4rem}:host .expression-builder .expression-group{width:100%;border:1px solid transparent;border-radius:.4rem}:host .expression-builder .expression-group.with-conditions{padding:.5rem;margin-bottom:.5rem;border-color:#e6e6e6}:host .expression-builder .expression-group.with-one-condition{border-bottom:1px solid #e6e6e6}:host .and-or-filter-button{box-sizing:border-box;background:#fff;border:1px solid #ddd;color:#5691f5;display:inline-block;position:relative;cursor:pointer;margin:.4rem;align-items:center;text-align:center;-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;white-space:nowrap;text-transform:uppercase;transition:box-shadow .4s cubic-bezier(.25,.8,.25,1),background-color .4s cubic-bezier(.25,.8,.25,1)}:host .and-connector{background:#fff;padding:0 5px;position:relative;width:100%}:host .and-connector .and-connector-line{height:1px;width:100%}:host .and-connector .and-connector-text{background-color:#fff;background-color:var(--background-alt, #ffffff);margin:-8px 0 0 10px;position:absolute;text-align:center;text-transform:uppercase}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer }, { type: i1.FormBuilder }]; }, propDecorators: { config: [{
                type: Input
            }], controlName: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,