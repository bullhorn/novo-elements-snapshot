import { Component, Input, TemplateRef } from '@angular/core';
import { BreadcrumbService } from './Breadcrumb.service';
import { NOVO_BREADCRUMB_REF } from './Breadcrumb.tokens';
import * as i0 from "@angular/core";
import * as i1 from "./Breadcrumb.service";
import * as i2 from "./breadcrumb-item/BreadcrumbItem";
import * as i3 from "@angular/common";
export class BreadcrumbElement {
    constructor(breadcrumbService) {
        this.breadcrumbService = breadcrumbService;
        this.source = [];
    }
    navigateTo($event, item) {
        this.breadcrumbService.navigateTo($event, item);
    }
}
BreadcrumbElement.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbElement, deps: [{ token: i1.BreadcrumbService }], target: i0.ɵɵFactoryTarget.Component });
BreadcrumbElement.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.11", type: BreadcrumbElement, selector: "novo-breadcrumb", inputs: { separatorIcon: "separatorIcon", source: "source" }, providers: [{ provide: NOVO_BREADCRUMB_REF, useExisting: BreadcrumbElement }], ngImport: i0, template: "<ng-container *ngIf=\"source && source.length\">\n  <novo-breadcrumb-item *ngFor=\"let item of source\" [showMenu]=\"item.showMenu\" [isSearch]=\"item.isSearch\"\n    [menuList]=\"item.menuList\" [customMenuTemplate]=\"item.customMenuTemplate\">\n    <a *ngIf=\"!item.noNavigation && (!item.linkType || item.linkType === 'hrefLink')\" rel=\"noopener\" [href]=\"item.link\"\n      [target]=\"item.target ? item.target : '_self'\">{{ item.title }}</a>\n    <a *ngIf=\"!item.noNavigation && item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\"\n      [href]=\"item.link\" (click)=\"navigateTo($event, item)\">{{ item.title }}</a>\n    <span *ngIf=\"item.noNavigation\">{{ item.title }}</span>\n  </novo-breadcrumb-item>\n</ng-container>\n<ng-container *ngIf=\"!(source && source.length)\">\n  <ng-content></ng-content>\n</ng-container>", styles: [":host{display:flex;align-items:center}:host ::ng-deep novo-breadcrumb-item:last-child .novo-breadcrumb-separator{display:none}\n"], components: [{ type: i2.BreadcrumbItemElement, selector: "novo-breadcrumb-item", inputs: ["showMenu", "customMenuTemplate", "menuList", "isSearch"], outputs: ["toggleEvent"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: BreadcrumbElement, decorators: [{
            type: Component,
            args: [{ selector: 'novo-breadcrumb', providers: [{ provide: NOVO_BREADCRUMB_REF, useExisting: BreadcrumbElement }], template: "<ng-container *ngIf=\"source && source.length\">\n  <novo-breadcrumb-item *ngFor=\"let item of source\" [showMenu]=\"item.showMenu\" [isSearch]=\"item.isSearch\"\n    [menuList]=\"item.menuList\" [customMenuTemplate]=\"item.customMenuTemplate\">\n    <a *ngIf=\"!item.noNavigation && (!item.linkType || item.linkType === 'hrefLink')\" rel=\"noopener\" [href]=\"item.link\"\n      [target]=\"item.target ? item.target : '_self'\">{{ item.title }}</a>\n    <a *ngIf=\"!item.noNavigation && item.linkType === 'routerLink'\" rel=\"noopener\" [target]=\"item.target\"\n      [href]=\"item.link\" (click)=\"navigateTo($event, item)\">{{ item.title }}</a>\n    <span *ngIf=\"item.noNavigation\">{{ item.title }}</span>\n  </novo-breadcrumb-item>\n</ng-container>\n<ng-container *ngIf=\"!(source && source.length)\">\n  <ng-content></ng-content>\n</ng-container>", styles: [":host{display:flex;align-items:center}:host ::ng-deep novo-breadcrumb-item:last-child .novo-breadcrumb-separator{display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.BreadcrumbService }]; }, propDecorators: { separatorIcon: [{
                type: Input
            }], source: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQnJlYWRjcnVtYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25vdm8tZWxlbWVudHMvc3JjL2VsZW1lbnRzL2JyZWFkY3J1bWJzL0JyZWFkY3J1bWIudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9ub3ZvLWVsZW1lbnRzL3NyYy9lbGVtZW50cy9icmVhZGNydW1icy9CcmVhZGNydW1iLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7OztBQVMxRCxNQUFNLE9BQU8saUJBQWlCO0lBSTVCLFlBQW9CLGlCQUFvQztRQUFwQyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBRi9DLFdBQU0sR0FBd0IsRUFBRSxDQUFDO0lBRWlCLENBQUM7SUFFNUQsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJO1FBQ3JCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7OytHQVJVLGlCQUFpQjttR0FBakIsaUJBQWlCLHdHQUZqQixDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLDBCQ1QvRSx3MUJBWWU7NEZEREYsaUJBQWlCO2tCQU43QixTQUFTOytCQUNFLGlCQUFpQixhQUdoQixDQUFDLEVBQUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFdBQVcsbUJBQW1CLEVBQUUsQ0FBQzt3R0FHcEUsYUFBYTtzQkFBckIsS0FBSztnQkFDRyxNQUFNO3NCQUFkLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJlYWRjcnVtYlNlcnZpY2UgfSBmcm9tICcuL0JyZWFkY3J1bWIuc2VydmljZSc7XG5pbXBvcnQgeyBOT1ZPX0JSRUFEQ1JVTUJfUkVGIH0gZnJvbSAnLi9CcmVhZGNydW1iLnRva2Vucyc7XG5pbXBvcnQgeyBTb3VyY2VDb25maWcgfSBmcm9tICcuL0JyZWFkY3J1bWIudHlwZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdub3ZvLWJyZWFkY3J1bWInLFxuICB0ZW1wbGF0ZVVybDogJy4vQnJlYWRjcnVtYi5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vQnJlYWRjcnVtYi5zY3NzJ10sXG4gIHByb3ZpZGVyczogW3sgcHJvdmlkZTogTk9WT19CUkVBRENSVU1CX1JFRiwgdXNlRXhpc3Rpbmc6IEJyZWFkY3J1bWJFbGVtZW50IH1dLFxufSlcbmV4cG9ydCBjbGFzcyBCcmVhZGNydW1iRWxlbWVudCB7XG4gIEBJbnB1dCgpIHNlcGFyYXRvckljb246IFRlbXBsYXRlUmVmPGFueT47XG4gIEBJbnB1dCgpIHNvdXJjZTogQXJyYXk8U291cmNlQ29uZmlnPiA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYnJlYWRjcnVtYlNlcnZpY2U6IEJyZWFkY3J1bWJTZXJ2aWNlKSB7fVxuXG4gIG5hdmlnYXRlVG8oJGV2ZW50LCBpdGVtKSB7XG4gICAgdGhpcy5icmVhZGNydW1iU2VydmljZS5uYXZpZ2F0ZVRvKCRldmVudCwgaXRlbSk7XG4gIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJzb3VyY2UgJiYgc291cmNlLmxlbmd0aFwiPlxuICA8bm92by1icmVhZGNydW1iLWl0ZW0gKm5nRm9yPVwibGV0IGl0ZW0gb2Ygc291cmNlXCIgW3Nob3dNZW51XT1cIml0ZW0uc2hvd01lbnVcIiBbaXNTZWFyY2hdPVwiaXRlbS5pc1NlYXJjaFwiXG4gICAgW21lbnVMaXN0XT1cIml0ZW0ubWVudUxpc3RcIiBbY3VzdG9tTWVudVRlbXBsYXRlXT1cIml0ZW0uY3VzdG9tTWVudVRlbXBsYXRlXCI+XG4gICAgPGEgKm5nSWY9XCIhaXRlbS5ub05hdmlnYXRpb24gJiYgKCFpdGVtLmxpbmtUeXBlIHx8IGl0ZW0ubGlua1R5cGUgPT09ICdocmVmTGluaycpXCIgcmVsPVwibm9vcGVuZXJcIiBbaHJlZl09XCJpdGVtLmxpbmtcIlxuICAgICAgW3RhcmdldF09XCJpdGVtLnRhcmdldCA/IGl0ZW0udGFyZ2V0IDogJ19zZWxmJ1wiPnt7IGl0ZW0udGl0bGUgfX08L2E+XG4gICAgPGEgKm5nSWY9XCIhaXRlbS5ub05hdmlnYXRpb24gJiYgaXRlbS5saW5rVHlwZSA9PT0gJ3JvdXRlckxpbmsnXCIgcmVsPVwibm9vcGVuZXJcIiBbdGFyZ2V0XT1cIml0ZW0udGFyZ2V0XCJcbiAgICAgIFtocmVmXT1cIml0ZW0ubGlua1wiIChjbGljayk9XCJuYXZpZ2F0ZVRvKCRldmVudCwgaXRlbSlcIj57eyBpdGVtLnRpdGxlIH19PC9hPlxuICAgIDxzcGFuICpuZ0lmPVwiaXRlbS5ub05hdmlnYXRpb25cIj57eyBpdGVtLnRpdGxlIH19PC9zcGFuPlxuICA8L25vdm8tYnJlYWRjcnVtYi1pdGVtPlxuPC9uZy1jb250YWluZXI+XG48bmctY29udGFpbmVyICpuZ0lmPVwiIShzb3VyY2UgJiYgc291cmNlLmxlbmd0aClcIj5cbiAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9uZy1jb250YWluZXI+Il19