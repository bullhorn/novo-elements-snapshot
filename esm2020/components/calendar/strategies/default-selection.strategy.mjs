import { Injectable, InjectionToken, Optional, SkipSelf } from '@angular/core';
import { isSameDay } from 'date-fns';
import * as i0 from "@angular/core";
/** Injection token used to customize the date range selection behavior. */
export const NOVO_DATE_SELECTION_STRATEGY = new InjectionToken('NOVO_DATE_SELECTION_STRATEGY');
/** Provides the default date selection behavior. Single Date */
export class DefaultDateSelectionStrategy {
    selectionFinished(date, currentValue, event) {
        return [date];
    }
    createPreview(activeDate, [currentDate]) {
        return [activeDate];
    }
    isSelected(activeDate, [currentDate]) {
        return isSameDay(activeDate, currentDate);
    }
}
DefaultDateSelectionStrategy.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultDateSelectionStrategy, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DefaultDateSelectionStrategy.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultDateSelectionStrategy, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DefaultDateSelectionStrategy, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: `root`,
                }]
        }] });
/** @docs-private */
export function NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY(parent) {
    return parent || new DefaultDateSelectionStrategy();
}
/** @docs-private */
export const NOVO_DATE_SELECTION_STRATEGY_PROVIDER = {
    provide: NOVO_DATE_SELECTION_STRATEGY,
    deps: [[new Optional(), new SkipSelf(), NOVO_DATE_SELECTION_STRATEGY]],
    useFactory: NOVO_DATE_SELECTION_STRATEGY_PROVIDER_FACTORY,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1zZWxlY3Rpb24uc3RyYXRlZ3kuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9lbGVtZW50cy9jb21wb25lbnRzL2NhbGVuZGFyL3N0cmF0ZWdpZXMvZGVmYXVsdC1zZWxlY3Rpb24uc3RyYXRlZ3kudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFtQixVQUFVLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEcsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFHckMsMkVBQTJFO0FBQzNFLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLElBQUksY0FBYyxDQUE0Qiw4QkFBOEIsQ0FBQyxDQUFDO0FBRTFILGdFQUFnRTtBQUloRSxNQUFNLE9BQU8sNEJBQTRCO0lBQ3ZDLGlCQUFpQixDQUFDLElBQXFCLEVBQUUsWUFBd0IsRUFBRSxLQUFZO1FBQzdFLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQixDQUFDO0lBRUQsYUFBYSxDQUFDLFVBQTJCLEVBQUUsQ0FBQyxXQUFXLENBQWE7UUFDbEUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxVQUFVLENBQUMsVUFBMkIsRUFBRSxDQUFDLFdBQVcsQ0FBYTtRQUMvRCxPQUFPLFNBQVMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDNUMsQ0FBQzs7MEhBWFUsNEJBQTRCOzhIQUE1Qiw0QkFBNEIsY0FGM0IsTUFBTTs0RkFFUCw0QkFBNEI7a0JBSHhDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COztBQWVELG9CQUFvQjtBQUNwQixNQUFNLFVBQVUsNkNBQTZDLENBQUMsTUFBMEM7SUFDdEcsT0FBTyxNQUFNLElBQUksSUFBSSw0QkFBNEIsRUFBRSxDQUFDO0FBQ3RELENBQUM7QUFFRCxvQkFBb0I7QUFDcEIsTUFBTSxDQUFDLE1BQU0scUNBQXFDLEdBQW9CO0lBQ3BFLE9BQU8sRUFBRSw0QkFBNEI7SUFDckMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsNEJBQTRCLENBQUMsQ0FBQztJQUN0RSxVQUFVLEVBQUUsNkNBQTZDO0NBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYWN0b3J5UHJvdmlkZXIsIEluamVjdGFibGUsIEluamVjdGlvblRva2VuLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzU2FtZURheSB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IERhdGVMaWtlLCBOb3ZvRGF0ZVNlbGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnbm92by1lbGVtZW50cy90eXBlcyc7XG5cbi8qKiBJbmplY3Rpb24gdG9rZW4gdXNlZCB0byBjdXN0b21pemUgdGhlIGRhdGUgcmFuZ2Ugc2VsZWN0aW9uIGJlaGF2aW9yLiAqL1xuZXhwb3J0IGNvbnN0IE5PVk9fREFURV9TRUxFQ1RJT05fU1RSQVRFR1kgPSBuZXcgSW5qZWN0aW9uVG9rZW48Tm92b0RhdGVTZWxlY3Rpb25TdHJhdGVneT4oJ05PVk9fREFURV9TRUxFQ1RJT05fU1RSQVRFR1knKTtcblxuLyoqIFByb3ZpZGVzIHRoZSBkZWZhdWx0IGRhdGUgc2VsZWN0aW9uIGJlaGF2aW9yLiBTaW5nbGUgRGF0ZSAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiBgcm9vdGAsXG59KVxuZXhwb3J0IGNsYXNzIERlZmF1bHREYXRlU2VsZWN0aW9uU3RyYXRlZ3kgaW1wbGVtZW50cyBOb3ZvRGF0ZVNlbGVjdGlvblN0cmF0ZWd5PERhdGVMaWtlW10+IHtcbiAgc2VsZWN0aW9uRmluaXNoZWQoZGF0ZTogRGF0ZUxpa2UgfCBudWxsLCBjdXJyZW50VmFsdWU6IERhdGVMaWtlW10sIGV2ZW50OiBFdmVudCk6IERhdGVMaWtlW10ge1xuICAgIHJldHVybiBbZGF0ZV07XG4gIH1cblxuICBjcmVhdGVQcmV2aWV3KGFjdGl2ZURhdGU6IERhdGVMaWtlIHwgbnVsbCwgW2N1cnJlbnREYXRlXTogRGF0ZUxpa2VbXSkge1xuICAgIHJldHVybiBbYWN0aXZlRGF0ZV07XG4gIH1cblxuICBpc1NlbGVjdGVkKGFjdGl2ZURhdGU6IERhdGVMaWtlIHwgbnVsbCwgW2N1cnJlbnREYXRlXTogRGF0ZUxpa2VbXSkge1xuICAgIHJldHVybiBpc1NhbWVEYXkoYWN0aXZlRGF0ZSwgY3VycmVudERhdGUpO1xuICB9XG59XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgZnVuY3Rpb24gTk9WT19EQVRFX1NFTEVDVElPTl9TVFJBVEVHWV9QUk9WSURFUl9GQUNUT1JZKHBhcmVudDogTm92b0RhdGVTZWxlY3Rpb25TdHJhdGVneTx1bmtub3duPikge1xuICByZXR1cm4gcGFyZW50IHx8IG5ldyBEZWZhdWx0RGF0ZVNlbGVjdGlvblN0cmF0ZWd5KCk7XG59XG5cbi8qKiBAZG9jcy1wcml2YXRlICovXG5leHBvcnQgY29uc3QgTk9WT19EQVRFX1NFTEVDVElPTl9TVFJBVEVHWV9QUk9WSURFUjogRmFjdG9yeVByb3ZpZGVyID0ge1xuICBwcm92aWRlOiBOT1ZPX0RBVEVfU0VMRUNUSU9OX1NUUkFURUdZLFxuICBkZXBzOiBbW25ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKSwgTk9WT19EQVRFX1NFTEVDVElPTl9TVFJBVEVHWV1dLFxuICB1c2VGYWN0b3J5OiBOT1ZPX0RBVEVfU0VMRUNUSU9OX1NUUkFURUdZX1BST1ZJREVSX0ZBQ1RPUlksXG59O1xuIl19