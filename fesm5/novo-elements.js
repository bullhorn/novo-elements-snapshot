import { forwardRef, EventEmitter, ɵɵdirectiveInject, ElementRef, ɵɵdefineComponent, ɵɵProvidersFeature, ɵsetClassMetadata, Component, Input, Output, ɵɵdefineNgModule, ɵɵdefineInjector, ɵɵsetNgModuleScope, NgModule, ɵɵelement, ɵɵnextContext, ɵɵproperty, ɵɵelementStart, ɵɵnamespaceSVG, ɵɵtext, ɵɵelementEnd, ɵɵattribute, ɵɵprojectionDef, ɵɵtemplate, ɵɵprojection, ɵɵadvance, ChangeDetectionStrategy, ɵɵpureFunction5, ɵɵtextInterpolate, ViewContainerRef, ɵɵdefineDirective, ɵɵlistener, Directive, HostListener, ɵɵdefinePipe, ɵɵdefineInjectable, Pipe, Injectable, ɵɵgetCurrentView, ɵɵrestoreView, ɵɵpipe, ɵɵpipeBind2, ɵɵtemplateRefExtractor, ɵɵreference, ɵɵpureFunction2, LOCALE_ID, Inject, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵclassProp, ɵɵtextInterpolate1, ɵɵpureFunction3, ɵɵstyleProp, ɵɵclassMap, ɵɵpureFunction7, ChangeDetectorRef, ɵɵNgOnChangesFeature, ɵɵpureFunction4, ɵɵinject, Optional, ɵɵtextInterpolate2, HostBinding, ɵɵcontentQuery, TemplateRef, ɵɵqueryRefresh, ɵɵloadQuery, ContentChildren, ɵɵpropertyInterpolate, ɵɵsanitizeHtml, ɵɵpureFunction1, ɵɵclassMapInterpolate1, ɵɵInheritDefinitionFeature, Injector, ComponentFactoryResolver, NgZone, ɵɵviewQuery, ViewChild, isDevMode, ɵɵclassMapInterpolate2, ɵɵstaticViewQuery, ɵɵpipeBind1, Renderer2, ɵɵpureFunction0, ɵɵhostProperty, ɵɵgetInheritedFactory, ɵɵelementContainer, ɵɵelementContainerStart, ɵɵelementContainerEnd, ɵɵpropertyInterpolate1, ɵɵsanitizeUrl, ViewChildren, ɵɵsetComponentScope, ViewEncapsulation, Host, ContentChild, ɵɵupdateSyntheticHostBinding, ɵɵtextInterpolate3, PLATFORM_ID, ɵɵinjectPipeChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, DefaultValueAccessor, NgControlStatus, NgModel, FormsModule, MaxLengthValidator, CheckboxControlValueAccessor, ReactiveFormsModule, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, NumberValueAccessor, RangeValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatusGroup, RequiredValidator, MinLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, NgModelGroup, NgForm, Validators, FormControl, FormGroup, FormBuilder, FormGroupDirective, FormControlName, FormControlDirective, FormGroupName, FormArrayName } from '@angular/forms';
import 'brace/index';
import 'brace/theme/chrome';
import 'brace/mode/javascript';
import 'brace/ext/language_tools.js';
import { CommonModule, NgIf, NgClass, NgTemplateOutlet, NgForOf, NgSwitch, NgSwitchCase, SlicePipe, DOCUMENT, AsyncPipe, NgSwitchDefault, NgComponentOutlet, NgStyle, NgPlural, NgPluralCase, UpperCasePipe, LowerCasePipe, JsonPipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe, isPlatformBrowser } from '@angular/common';
import { OverlayConfig, Overlay, OverlayModule } from '@angular/cdk/overlay';
import { ComponentPortal, TemplatePortal, CdkPortalOutlet, PortalModule, CdkPortal, TemplatePortalDirective, PortalHostDirective } from '@angular/cdk/portal';
import { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';
import { __values, __spread, __extends, __read, __assign } from 'tslib';
import { addDays, addWeeks, addMonths, startOfWeek, endOfWeek, differenceInDays, addMinutes, endOfDay, startOfDay, isSameSecond, setMinutes, setHours, startOfMinute, isAfter, isBefore, isSameDay, getDay, differenceInSeconds, differenceInMinutes, startOfMonth, endOfMonth, isSameMonth, addHours, subMonths, getYear, getMonth, getDate, setYear, setMonth, setDate, addSeconds, startOfToday, endOfToday, isToday, isValid, format, setMilliseconds, setSeconds, getHours, getMinutes, getSeconds, getMilliseconds, isDate, parse, startOfTomorrow } from 'date-fns';
import { from, merge, of, fromEvent, ReplaySubject, Subject, Subscription, BehaviorSubject } from 'rxjs';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { filter, first, switchMap, debounceTime, distinctUntilChanged, startWith, map, catchError, take, takeUntil } from 'rxjs/operators';
import { ScrollingModule, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf } from '@angular/cdk/scrolling';
import { DomSanitizer } from '@angular/platform-browser';
import { DataSource, CdkColumnDef, CdkCell, CdkCellOutlet, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkRow, CdkHeaderCell, CdkTableModule, CdkTable, CdkRowDef, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkFooterCell, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, CDK_TABLE_TEMPLATE } from '@angular/cdk/table';
import { FocusMonitor, A11yModule, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus } from '@angular/cdk/a11y';
import * as dragulaImported from '@bullhorn/dragula';
import { ESCAPE, ENTER, TAB, SPACE } from '@angular/cdk/keycodes';
import { MaskedInputDirective, TextMaskModule } from 'angular2-text-mask';
import createAutoCorrectedDatePipe from 'text-mask-addons/dist/createAutoCorrectedDatePipe';
import { CdkAccordion, CdkAccordionItem, CdkAccordionModule } from '@angular/cdk/accordion';
import { UniqueSelectionDispatcher } from '@angular/cdk/collections';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { CdkStepLabel, CdkStepHeader, CdkStep, CdkStepper, CdkStepperModule, CdkStepperNext, CdkStepperPrevious } from '@angular/cdk/stepper';
import { Directionality } from '@angular/cdk/bidi';

// @dynamic
var Helpers = /** @class */ (function () {
    function Helpers() {
    }
    /**
     * Swallows an event to stop further execution
     */
    Helpers.swallowEvent = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
    };
    Helpers.interpolate = function (str, props) {
        if (this.isDate(props)) {
            props = this.dateToObject(props);
        }
        return str.replace(/\$([\w\.]+)/g, function (original, key) {
            var keys = key.split('.');
            var value = props[keys.shift()];
            while (keys.length && value !== undefined) {
                var k = keys.shift();
                value = k ? value[k] : value + ".";
            }
            return value !== undefined ? value : '';
        });
    };
    Helpers.interpolateWithFallback = function (formatString, data) {
        // Format string can be an array, it will attempt to interpolate each item
        // in the array, if there is a failure to replace it will mark it as such
        // It will either return the first successful replacement of ALL variables,
        // or an empty string
        if (Array.isArray(formatString)) {
            var successes_1 = [];
            var failures_1 = [];
            formatString.forEach(function (format) {
                var isSuccess = true;
                var attempt = format.replace(/\$([\w\.]+)/g, function (original, key) {
                    var keys = key.split('.');
                    var value = data[keys.shift()];
                    while (keys.length && value !== undefined) {
                        var k = keys.shift();
                        value = k ? value[k] : value + ".";
                    }
                    if (isSuccess && Helpers.isEmpty(value)) {
                        isSuccess = false;
                    }
                    return Helpers.isEmpty(value) ? '' : value;
                });
                if (isSuccess) {
                    successes_1.push(attempt);
                }
                else {
                    failures_1.push(attempt);
                }
            });
            if (successes_1.length !== 0) {
                return successes_1[0];
            }
            return '';
        }
        else {
            return Helpers.interpolate(formatString, data);
        }
    };
    /**
     * Verifies that an object has every property expected by a string to interpolate
     * @param str   The string to interpolate
     * @param props The params to replace in string.
     */
    Helpers.validateInterpolationProps = function (str, props) {
        var keys = str.match(/\$([\w\.]+)/g);
        return keys.every(function (key) {
            return props.hasOwnProperty(key.substr(1));
        });
    };
    Helpers.isObject = function (item) {
        return item && typeof item === 'object' && !Array.isArray(item) && item !== null;
    };
    /**
     * Checks to see if the object is a string
     */
    Helpers.isString = function (obj) {
        return typeof obj === 'string';
    };
    Helpers.escapeString = function (obj) {
        if (Helpers.isString(obj)) {
            return obj.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        }
        return obj;
    };
    Helpers.isNumber = function (val, includeNegatives) {
        if (includeNegatives === void 0) { includeNegatives = false; }
        var numberRegex = includeNegatives ? /^-{0,1}\d*\.?\d*$/ : /^\d*\.?\d*$/;
        if (typeof val === 'string') {
            return val.length > 0 && val !== '.' && numberRegex.test(val);
        }
        else {
            return !isNaN(parseFloat(val));
        }
    };
    /**
     * Checks to see if the object is a undefined or null
     */
    Helpers.isBlank = function (obj) {
        return obj === undefined || obj === null;
    };
    /**
     * Checks to see if the object is a undefined or null
     */
    Helpers.isEmpty = function (obj) {
        return Helpers.isBlank(obj) || obj === '' || (Array.isArray(obj) && obj.length === 0);
    };
    /**
     * Checks to see if the object is a function
     */
    Helpers.isFunction = function (obj) {
        return !!(obj && obj.constructor && obj.call && obj.apply);
    };
    /**
     * Checks to see if the object is a Date
     */
    Helpers.isDate = function (obj) {
        return obj instanceof Date;
    };
    Helpers.convertToArray = function (obj) {
        if (obj === undefined) {
            return [];
        }
        else if (!Array.isArray(obj)) {
            return [obj];
        }
        return obj;
    };
    Helpers.sortByField = function (fields, reverse) {
        if (reverse === void 0) { reverse = false; }
        return function (previous, current) {
            if (Helpers.isFunction(fields)) {
                return fields(reverse ? 'desc' : 'asc', previous, current);
            }
            if (!Array.isArray(fields)) {
                fields = [fields];
            }
            for (var i = 0; i < fields.length; i++) {
                var field = fields[i];
                var first = previous[field] || '';
                var second = current[field] || '';
                if (Helpers.isDate(first) && Helpers.isDate(second)) {
                    // Dates
                    first = first.getTime();
                    second = second.getTime();
                }
                else if (Helpers.isString(first) && Helpers.isString(second)) {
                    // Basic strings
                    first = first.toLowerCase();
                    second = second.toLowerCase();
                }
                else {
                    // Numbers
                    first = isNaN(Number(first)) ? first : Number(first);
                    second = isNaN(Number(second)) ? second : Number(second);
                }
                if (first > second) {
                    return reverse ? -1 : 1;
                }
                else if (first < second) {
                    return reverse ? 1 : -1;
                }
            }
            return 0;
        };
    };
    Helpers.filterByField = function (key, value) {
        return function (item) {
            var results = [];
            var field = can(item).have(key);
            if (value instanceof Function) {
                results.push(value(field, item));
            }
            else if (Array.isArray(value)) {
                results.push(value.includes(field));
            }
            else if (value instanceof Object) {
                if (field instanceof Date) {
                    field = field.getTime();
                }
                if (value.min) {
                    results.push(field >= value.min);
                }
                if (value.max) {
                    results.push(field <= value.max);
                }
                if (value.any && Array.isArray(value.any)) {
                    if (Array.isArray(field)) {
                        results.push(value.any.some(function (v) { return field.includes(v); }));
                    }
                    else {
                        results.push(value.any.includes(field));
                    }
                }
                if (value.all && Array.isArray(value.all)) {
                    results.push(value.all.every(function (v) { return field.includes(v); }));
                }
                if (value.not) {
                    results.push(!Helpers.filterByField(key, value.not)(item));
                }
                for (var subkey in value) {
                    if (['min', 'max', 'any', 'all', 'not'].indexOf(subkey) < 0) {
                        var subvalue = value[subkey];
                        results.push(Helpers.filterByField(key + "." + subkey, subvalue)(item));
                    }
                }
            }
            else {
                results.push(JSON.stringify(field).match(new RegExp(value, 'gi')));
            }
            return results.every(function (x) { return x; });
        };
    };
    Helpers.findAncestor = function (element, selector) {
        while ((element = element.parentElement) && !element.matches.call(element, selector))
            ; // tslint:disable-line
        return element;
    };
    Helpers.deepClone = function (item) {
        if (Array.isArray(item)) {
            var newArr = [];
            for (var i = item.length; i-- > 0;) {
                // tslint:disable-line
                newArr[i] = Helpers.deepClone(item[i]);
            }
            return newArr;
        }
        if (typeof item === 'function' && !/\(\) \{ \[native/.test(item.toString())) {
            var obj = void 0;
            for (var k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        if (item && typeof item === 'object') {
            var obj = {};
            for (var k in item) {
                if (k in item) {
                    obj[k] = Helpers.deepClone(item[k]);
                }
            }
            return obj;
        }
        return item;
    };
    Helpers.deepAssign = function () {
        var objs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            objs[_i] = arguments[_i];
        }
        if (objs.length < 2) {
            throw new Error('Need two or more objects to merge');
        }
        var target = Object.assign({}, objs[0]);
        var _loop_1 = function (i) {
            var source = Object.assign({}, objs[i]);
            Object.keys(source).forEach(function (prop) {
                var value = source[prop];
                if (Helpers.isObject(value)) {
                    if (target.hasOwnProperty(prop) && Helpers.isObject(target[prop])) {
                        target[prop] = Helpers.deepAssign(target[prop], value);
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else if (Array.isArray(value)) {
                    if (target.hasOwnProperty(prop) && Array.isArray(target[prop])) {
                        var targetArray_1 = target[prop];
                        value.forEach(function (sourceItem, itemIndex) {
                            if (itemIndex < targetArray_1.length) {
                                var targetItem = targetArray_1[itemIndex];
                                if (Object.is(targetItem, sourceItem)) {
                                    return;
                                }
                                if (Helpers.isObject(targetItem) && Helpers.isObject(sourceItem)) {
                                    targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else if (Array.isArray(targetItem) && Array.isArray(sourceItem)) {
                                    targetArray_1[itemIndex] = Helpers.deepAssign(targetItem, sourceItem);
                                }
                                else {
                                    targetArray_1[itemIndex] = sourceItem;
                                }
                            }
                            else {
                                targetArray_1.push(sourceItem);
                            }
                        });
                    }
                    else {
                        target[prop] = value;
                    }
                }
                else {
                    target[prop] = value;
                }
            });
        };
        for (var i = 1; i < objs.length; i++) {
            _loop_1(i);
        }
        return target;
    };
    /**
     * Workaround for Edge browser since Element:nextElementSibling is undefined inside of template directives
     * @param element any document element
     * @returns the next sibling node that is of type: Element
     */
    Helpers.getNextElementSibling = function (element) {
        if (element.nextElementSibling) {
            return element.nextElementSibling;
        }
        else {
            var e = element.nextSibling;
            while (e && 1 !== e.nodeType) {
                e = e.nextSibling;
            }
            return e;
        }
    };
    Helpers.dateToObject = function (date) {
        var dateObj = {
            day: '',
            dayPeriod: '',
            era: '',
            hour: '',
            minute: '',
            month: '',
            second: '',
            weekday: '',
            year: '',
        };
        Intl.DateTimeFormat('en-US', {
            day: 'numeric',
            era: 'short',
            hour: 'numeric',
            minute: 'numeric',
            month: 'numeric',
            second: 'numeric',
            weekday: 'long',
            year: 'numeric',
        })
            .formatToParts(date)
            .forEach(function (dateTimeFormatPart) {
            if (dateTimeFormatPart.type !== 'literal') {
                dateObj[dateTimeFormatPart.type] = dateTimeFormatPart.value;
            }
        });
        return dateObj;
    };
    return Helpers;
}());
var Can = /** @class */ (function () {
    function Can(obj) {
        this.obj = obj;
    }
    Can.prototype.have = function (key) {
        var props = key.split('.');
        var item = this.obj;
        for (var i = 0; i < props.length; i++) {
            item = item[props[i]];
            if (this.check(item) === false) {
                return item;
            }
        }
        return item;
    };
    Can.prototype.check = function (thing) {
        return thing !== void 0;
    };
    return Can;
}());
function can(obj) {
    return new Can(obj);
}
// Assumes data is already sorted
function binarySearch(item, array, compare) {
    return search(0, array.length - 1);
    function search(min, max) {
        if (min > max) {
            return undefined;
        }
        var guess = min + Math.floor((max - min) / 2);
        var comparison = compare(item, array[guess]);
        if (comparison === 0) {
            return array[guess];
        }
        else if (comparison === -1) {
            return search(min, guess - 1);
        }
        else if (comparison === 1) {
            return search(guess + 1, max);
        }
        else {
            throw new Error("Input mismatch: " + JSON.stringify(item) + " not comparable to " + JSON.stringify(array[guess]));
        }
    }
}

// NG2
var ACE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoAceEditor; }),
    multi: true,
};
var NovoAceEditor = /** @class */ (function () {
    function NovoAceEditor(elementRef) {
        this.elementRef = elementRef;
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this._options = {
            showPrintMargin: false,
            displayIndentGuides: true,
        };
        this._theme = 'chrome';
        this._mode = 'javascript';
        this.text = '';
        this.onChange = function (_) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(NovoAceEditor.prototype, "theme", {
        set: function (theme) {
            this.setTheme(theme);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoAceEditor.prototype, "options", {
        set: function (options) {
            this.setOptions(options);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoAceEditor.prototype, "mode", {
        set: function (mode) {
            this.setMode(mode);
        },
        enumerable: true,
        configurable: true
    });
    NovoAceEditor.prototype.ngOnDestroy = function () {
        if (this.editor) {
            this.editor.destroy();
        }
    };
    NovoAceEditor.prototype.ngOnInit = function () {
        this.initializeEditor();
        this.initializeOptions();
        this.initializeEvents();
    };
    NovoAceEditor.prototype.initializeEditor = function () {
        var el = this.elementRef.nativeElement;
        this.editor = ace.edit(el);
        this.editor.$blockScrolling = Infinity;
    };
    NovoAceEditor.prototype.initializeOptions = function () {
        this.setOptions(this._options || {});
        this.setTheme(this._theme);
        this.setMode(this._mode);
    };
    NovoAceEditor.prototype.initializeEvents = function () {
        var _this = this;
        this.editor.on('focus', function (event) { return _this.focus.emit(event); });
        this.editor.on('blur', function (event) { return _this.focus.emit(event); });
        this.editor.on('change', function () { return _this.updateText(); });
        this.editor.on('paste', function () { return _this.updateText(); });
    };
    NovoAceEditor.prototype.updateText = function () {
        var newVal = this.editor.getValue();
        if (newVal === this.oldText) {
            return;
        }
        this.text = newVal;
        this.onChange(newVal);
        this.oldText = newVal;
    };
    NovoAceEditor.prototype.setText = function (text) {
        if (Helpers.isBlank(text)) {
            text = '';
        }
        if (this.text !== text) {
            this.text = text;
            this.editor.setValue(text);
            this.onChange(text);
            this.editor.clearSelection();
        }
    };
    NovoAceEditor.prototype.setOptions = function (options) {
        this._options = options;
        this.editor.setOptions(options || {});
    };
    NovoAceEditor.prototype.setTheme = function (theme) {
        this._theme = theme;
        this.editor.setTheme("ace/theme/" + theme);
    };
    NovoAceEditor.prototype.setMode = function (mode) {
        this._mode = mode;
        this.editor.getSession().setMode("ace/mode/" + this._mode);
    };
    NovoAceEditor.prototype.writeValue = function (value) {
        this.setText(value);
    };
    NovoAceEditor.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NovoAceEditor.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NovoAceEditor.ɵfac = function NovoAceEditor_Factory(t) { return new (t || NovoAceEditor)(ɵɵdirectiveInject(ElementRef)); };
    NovoAceEditor.ɵcmp = ɵɵdefineComponent({ type: NovoAceEditor, selectors: [["novo-ace-editor"]], inputs: { theme: "theme", options: "options", mode: "mode", name: "name" }, outputs: { blur: "blur", focus: "focus" }, features: [ɵɵProvidersFeature([ACE_VALUE_ACCESSOR])], decls: 0, vars: 0, template: function NovoAceEditor_Template(rf, ctx) { }, encapsulation: 2 });
    return NovoAceEditor;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAceEditor, [{
        type: Component,
        args: [{
                selector: 'novo-ace-editor',
                template: '',
                providers: [ACE_VALUE_ACCESSOR],
            }]
    }], function () { return [{ type: ElementRef }]; }, { theme: [{
            type: Input
        }], options: [{
            type: Input
        }], mode: [{
            type: Input
        }], name: [{
            type: Input
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }] }); })();

// NG2
var NovoAceEditorModule = /** @class */ (function () {
    function NovoAceEditorModule() {
    }
    NovoAceEditorModule.ɵmod = ɵɵdefineNgModule({ type: NovoAceEditorModule });
    NovoAceEditorModule.ɵinj = ɵɵdefineInjector({ factory: function NovoAceEditorModule_Factory(t) { return new (t || NovoAceEditorModule)(); }, imports: [[CommonModule]] });
    return NovoAceEditorModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoAceEditorModule, { declarations: [NovoAceEditor], imports: [CommonModule], exports: [NovoAceEditor] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAceEditorModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoAceEditor],
                exports: [NovoAceEditor],
            }]
    }], null, null); })();

// NG2
var _c0 = ["theme", ""];
function NovoButtonElement_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 3);
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r0.icon);
} }
function NovoButtonElement_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 3);
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r1.icon);
} }
function NovoButtonElement_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "i", 4);
    ɵɵnamespaceSVG();
    ɵɵelementStart(1, "svg", 5);
    ɵɵelementStart(2, "style", 6);
    ɵɵtext(3, " .spinner { fill: #ffffff; } ");
    ɵɵelementEnd();
    ɵɵelement(4, "path", 7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
var _c1 = ["*"];
var NovoButtonElement = /** @class */ (function () {
    function NovoButtonElement() {
        this.side = 'right';
    }
    Object.defineProperty(NovoButtonElement.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (icon) {
            if (icon) {
                this._icon = "bhi-" + icon;
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoButtonElement.ɵfac = function NovoButtonElement_Factory(t) { return new (t || NovoButtonElement)(); };
    NovoButtonElement.ɵcmp = ɵɵdefineComponent({ type: NovoButtonElement, selectors: [["button", "theme", ""]], hostVars: 5, hostBindings: function NovoButtonElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("theme", ctx.theme)("color", ctx.color)("icon", ctx.icon)("loading", ctx.loading)("side", ctx.side);
        } }, inputs: { color: "color", side: "side", theme: "theme", loading: "loading", icon: "icon" }, attrs: _c0, ngContentSelectors: _c1, decls: 5, vars: 3, consts: [[1, "flex-wrapper"], [3, "ngClass", 4, "ngIf"], ["class", "loading", 4, "ngIf"], [3, "ngClass"], [1, "loading"], ["version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", 0, "xmlns", "a", "http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/", "x", "0px", "y", "0px", "width", "18.2px", "height", "18.5px", "viewBox", "0 0 18.2 18.5", 0, "xml", "space", "preserve", 2, "enable-background", "new 0 0 18.2 18.5"], ["type", "text/css"], ["d", "M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z", 1, "spinner"]], template: function NovoButtonElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, NovoButtonElement_i_1_Template, 1, 1, "i", 1);
            ɵɵprojection(2);
            ɵɵtemplate(3, NovoButtonElement_i_3_Template, 1, 1, "i", 1);
            ɵɵtemplate(4, NovoButtonElement_i_4_Template, 5, 0, "i", 2);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.icon && ctx.side === "left" && !ctx.loading);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.icon && ctx.side === "right" && !ctx.loading);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.loading);
        } }, directives: [NgIf, NgClass], encapsulation: 2, changeDetection: 0 });
    return NovoButtonElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoButtonElement, [{
        type: Component,
        args: [{
                selector: 'button[theme]',
                host: {
                    '[attr.theme]': 'theme',
                    '[attr.color]': 'color',
                    '[attr.icon]': 'icon',
                    '[attr.loading]': 'loading',
                    '[attr.side]': 'side',
                },
                template: "\n    <div class=\"flex-wrapper\">\n      <!--Left Icon-->\n      <i *ngIf=\"icon && side === 'left' && !loading\" [ngClass]=\"icon\"></i>\n      <!--Transcluded Content-->\n      <ng-content></ng-content>\n      <!--Right Icon-->\n      <i *ngIf=\"icon && side === 'right' && !loading\" [ngClass]=\"icon\"></i>\n      <!--Loading-->\n      <i *ngIf=\"loading\" class=\"loading\">\n        <svg\n          version=\"1.1\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n          xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n          x=\"0px\"\n          y=\"0px\"\n          width=\"18.2px\"\n          height=\"18.5px\"\n          viewBox=\"0 0 18.2 18.5\"\n          style=\"enable-background:new 0 0 18.2 18.5;\"\n          xml:space=\"preserve\"\n        >\n          <style type=\"text/css\">\n            .spinner {\n              fill: #ffffff;\n            }\n          </style>\n          <path\n            class=\"spinner\"\n            d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                        c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                        c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"\n          />\n        </svg>\n      </i>\n    </div>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { color: [{
            type: Input
        }], side: [{
            type: Input
        }], theme: [{
            type: Input
        }], loading: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();

// NG2
var NovoButtonModule = /** @class */ (function () {
    function NovoButtonModule() {
    }
    NovoButtonModule.ɵmod = ɵɵdefineNgModule({ type: NovoButtonModule });
    NovoButtonModule.ɵinj = ɵɵdefineInjector({ factory: function NovoButtonModule_Factory(t) { return new (t || NovoButtonModule)(); }, imports: [[CommonModule]] });
    return NovoButtonModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoButtonModule, { declarations: [NovoButtonElement], imports: [CommonModule], exports: [NovoButtonElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoButtonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoButtonElement],
                exports: [NovoButtonElement],
            }]
    }], null, null); })();

// NG2
var _c0$1 = function (a0, a1, a2, a3, a4) { return [a0, a1, a2, a3, a4]; };
var NovoTooltip = /** @class */ (function () {
    function NovoTooltip() {
    }
    NovoTooltip.ɵfac = function NovoTooltip_Factory(t) { return new (t || NovoTooltip)(); };
    NovoTooltip.ɵcmp = ɵɵdefineComponent({ type: NovoTooltip, selectors: [["novo-tooltip"]], decls: 2, vars: 9, consts: [[3, "ngClass"]], template: function NovoTooltip_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵtext(1);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("@state", ctx.noAnimate ? "no-animation" : "visible")("ngClass", ɵɵpureFunction5(3, _c0$1, ctx.tooltipType, ctx.rounded ? "rounded" : "", ctx.size ? ctx.size : "", ctx.preline ? "preline" : "", ctx.position));
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.message);
        } }, directives: [NgClass], styles: ["novo-tooltip[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]{background:#383838;color:#fff;padding:8px 10px;font-size:12px;font-family:\"Helvetica Neue\",Helvetica,Arial,sans-serif;line-height:12px;white-space:nowrap;text-shadow:0 -1px 0 #000;box-shadow:4px 4px 8px rgba(0,0,0,.3)}novo-tooltip[_ngcontent-%COMP%]   div.error[_ngcontent-%COMP%]{background-color:#b34e4d;text-shadow:0 -1px 0 #592726}novo-tooltip[_ngcontent-%COMP%]   div.info[_ngcontent-%COMP%]{background-color:#3986ac;text-shadow:0 -1px 0 #1a3c4d}novo-tooltip[_ngcontent-%COMP%]   div.warning[_ngcontent-%COMP%]{background-color:#c09854;text-shadow:0 -1px 0 #6c5328}novo-tooltip[_ngcontent-%COMP%]   div.success[_ngcontent-%COMP%]{background-color:#458746;text-shadow:0 -1px 0 #1a321a}novo-tooltip[_ngcontent-%COMP%]   div.rounded[_ngcontent-%COMP%]{border-radius:4px}novo-tooltip[_ngcontent-%COMP%]   div.extra-large[_ngcontent-%COMP%], novo-tooltip[_ngcontent-%COMP%]   div.large[_ngcontent-%COMP%], novo-tooltip[_ngcontent-%COMP%]   div.medium[_ngcontent-%COMP%], novo-tooltip[_ngcontent-%COMP%]   div.small[_ngcontent-%COMP%]{white-space:normal;line-height:1.4em;word-wrap:break-word}novo-tooltip[_ngcontent-%COMP%]   div.extra-large[_ngcontent-%COMP%]{width:400px;font-size:1.2vh}novo-tooltip[_ngcontent-%COMP%]   div.large[_ngcontent-%COMP%]{width:300px}novo-tooltip[_ngcontent-%COMP%]   div.medium[_ngcontent-%COMP%]{width:150px}novo-tooltip[_ngcontent-%COMP%]   div.small[_ngcontent-%COMP%]{width:80px}novo-tooltip[_ngcontent-%COMP%]   div.preline[_ngcontent-%COMP%]{white-space:pre-line}novo-tooltip[_ngcontent-%COMP%]   div.top[_ngcontent-%COMP%]:before{margin-bottom:-11px;left:calc(50% - 6px);bottom:0;border-top-color:#383838}novo-tooltip[_ngcontent-%COMP%]   div.top.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.top.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.top.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.top.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.top-left[_ngcontent-%COMP%]:before{border-top-color:#383838;margin-right:0;margin-bottom:-11px;right:0;bottom:0}novo-tooltip[_ngcontent-%COMP%]   div.top-left.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.top-left.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.top-left.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.top-left.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.top-right[_ngcontent-%COMP%]:before{border-top-color:#383838;margin-left:0;margin-bottom:-11px;left:0;bottom:0}novo-tooltip[_ngcontent-%COMP%]   div.top-right.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.top-right.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.top-right.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.top-right.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.bottom[_ngcontent-%COMP%]:before{margin-top:-11px;left:calc(50% - 6px);top:0;border-bottom-color:#383838}novo-tooltip[_ngcontent-%COMP%]   div.bottom.error[_ngcontent-%COMP%]:before{border-top-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.bottom.info[_ngcontent-%COMP%]:before{border-top-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.bottom.warning[_ngcontent-%COMP%]:before{border-top-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.bottom.success[_ngcontent-%COMP%]:before{border-top-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left[_ngcontent-%COMP%]:before{border-bottom-color:#383838;margin-right:0;margin-top:-11px;right:0;top:0}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.error[_ngcontent-%COMP%]:before{border-bottom-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.info[_ngcontent-%COMP%]:before{border-bottom-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.warning[_ngcontent-%COMP%]:before{border-bottom-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.bottom-left.success[_ngcontent-%COMP%]:before{border-bottom-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right[_ngcontent-%COMP%]:before{border-bottom-color:#383838;margin-left:0;margin-top:-11px;left:0;top:0}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.error[_ngcontent-%COMP%]:before{border-bottom-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.info[_ngcontent-%COMP%]:before{border-bottom-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.warning[_ngcontent-%COMP%]:before{border-bottom-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.bottom-right.success[_ngcontent-%COMP%]:before{border-bottom-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.left[_ngcontent-%COMP%]:before{border-left-color:#383838;margin-right:-11px;margin-bottom:-6px;right:0;bottom:50%}novo-tooltip[_ngcontent-%COMP%]   div.left.error[_ngcontent-%COMP%]:before{border-left-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.left.info[_ngcontent-%COMP%]:before{border-left-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.left.warning[_ngcontent-%COMP%]:before{border-left-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.left.success[_ngcontent-%COMP%]:before{border-left-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div.right[_ngcontent-%COMP%]:before{left:0;bottom:50%;border-right-color:#383838;margin-left:-11px;margin-bottom:-6px}novo-tooltip[_ngcontent-%COMP%]   div.right.error[_ngcontent-%COMP%]:before{border-right-color:#b34e4d}novo-tooltip[_ngcontent-%COMP%]   div.right.info[_ngcontent-%COMP%]:before{border-right-color:#3986ac}novo-tooltip[_ngcontent-%COMP%]   div.right.warning[_ngcontent-%COMP%]:before{border-right-color:#c09854}novo-tooltip[_ngcontent-%COMP%]   div.right.success[_ngcontent-%COMP%]:before{border-right-color:#458746}novo-tooltip[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]:before{content:\"\";position:absolute;background:0 0;border:6px solid transparent;box-sizing:border-box}"], data: { animation: [
                trigger('state', [
                    state('initial, void, hidden', style({ opacity: '0' })),
                    state('visible', style({ opacity: '1' })),
                    transition('* => visible', [
                        style({
                            opacity: 0,
                            visibility: 'visible',
                        }),
                        animate('0.3s ease-in'),
                    ]),
                    transition('* => hidden', [
                        style({
                            opacity: 1,
                            visibility: 'hidden',
                        }),
                        animate('0.3s ease-in'),
                    ]),
                ]),
            ] } });
    return NovoTooltip;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTooltip, [{
        type: Component,
        args: [{
                selector: 'novo-tooltip',
                template: "<div [@state]=\"noAnimate ? 'no-animation' : 'visible'\"\n  [ngClass]=\"[tooltipType, this.rounded ? 'rounded' : '', size ? size : '', this.preline? 'preline' : '', position]\">{{message}}</div>",
                styleUrls: ['./Tooltip.scss'],
                animations: [
                    trigger('state', [
                        state('initial, void, hidden', style({ opacity: '0' })),
                        state('visible', style({ opacity: '1' })),
                        transition('* => visible', [
                            style({
                                opacity: 0,
                                visibility: 'visible',
                            }),
                            animate('0.3s ease-in'),
                        ]),
                        transition('* => hidden', [
                            style({
                                opacity: 1,
                                visibility: 'hidden',
                            }),
                            animate('0.3s ease-in'),
                        ]),
                    ]),
                ],
            }]
    }], null, null); })();

// NG
var TooltipDirective = /** @class */ (function () {
    function TooltipDirective(overlay, viewContainerRef, elementRef) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.elementRef = elementRef;
        this.position = 'top';
        this.type = 'normal';
        this.active = true;
        this.removeArrow = false;
        this.autoPosition = false;
    }
    TooltipDirective.prototype.isPosition = function (position) {
        return position.toLowerCase() === (this.position || '').toLowerCase();
    };
    TooltipDirective.prototype.isType = function (type) {
        return type.toLowerCase() === (this.type || '').toLowerCase();
    };
    TooltipDirective.prototype.isSize = function (size) {
        return size.toLowerCase() === (this.size || '').toLowerCase();
    };
    TooltipDirective.prototype.onMouseEnter = function () {
        if (this.tooltip && this.active && !this.always) {
            this.show();
        }
    };
    TooltipDirective.prototype.onMouseLeave = function () {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    };
    TooltipDirective.prototype.ngOnInit = function () {
        if (this.tooltip && this.always && this.active) {
            this.show();
        }
    };
    TooltipDirective.prototype.ngOnDestroy = function () {
        if (this.overlayRef && !this.always) {
            this.hide();
            this.overlayRef.dispose();
        }
    };
    TooltipDirective.prototype.show = function () {
        var overlayState = new OverlayConfig();
        overlayState.positionStrategy = this.getPosition();
        if (this.always) {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.reposition();
        }
        else {
            overlayState.scrollStrategy = this.overlay.scrollStrategies.close();
        }
        overlayState.scrollStrategy.enable();
        this.overlayRef = this.overlay.create(overlayState);
        this.overlayRef.detach();
        this.portal = this.portal || new ComponentPortal(NovoTooltip, this.viewContainerRef);
        var tooltipInstance = this.overlayRef.attach(this.portal).instance;
        tooltipInstance.message = this.tooltip;
        tooltipInstance.tooltipType = this.type;
        tooltipInstance.rounded = this.rounded;
        tooltipInstance.size = this.size;
        tooltipInstance.preline = this.preline;
        tooltipInstance.noAnimate = this.noAnimate;
        tooltipInstance.position = this.removeArrow ? 'no-arrow' : this.position;
    };
    TooltipDirective.prototype.hide = function () {
        if (this.overlayRef) {
            this.overlayRef.detach();
        }
    };
    TooltipDirective.prototype.getPosition = function () {
        var strategy;
        var originPosition;
        var overlayPosition;
        var offsetX;
        var offsetY;
        switch (this.position) {
            case 'right':
                originPosition = { originX: 'end', originY: 'center' };
                overlayPosition = { overlayX: 'start', overlayY: 'center' };
                offsetX = 8;
                offsetY = 0;
                break;
            case 'bottom':
                originPosition = { originX: 'center', originY: 'bottom' };
                overlayPosition = { overlayX: 'center', overlayY: 'top' };
                offsetX = 0;
                offsetY = 8;
                break;
            case 'top':
                originPosition = { originX: 'center', originY: 'top' };
                overlayPosition = { overlayX: 'center', overlayY: 'bottom' };
                offsetX = 0;
                offsetY = -8;
                break;
            case 'left':
                originPosition = { originX: 'start', originY: 'center' };
                overlayPosition = { overlayX: 'end', overlayY: 'center' };
                offsetX = -8;
                offsetY = 0;
                break;
            case 'top-left':
                originPosition = { originX: 'start', originY: 'top' };
                overlayPosition = { overlayX: 'end', overlayY: 'bottom' };
                offsetX = 8;
                offsetY = -8;
                break;
            case 'bottom-left':
                originPosition = { originX: 'start', originY: 'bottom' };
                overlayPosition = { overlayX: 'end', overlayY: 'top' };
                offsetX = 8;
                offsetY = 8;
                break;
            case 'top-right':
                originPosition = { originX: 'end', originY: 'top' };
                overlayPosition = { overlayX: 'start', overlayY: 'bottom' };
                offsetX = -8;
                offsetY = -8;
                break;
            case 'bottom-right':
                originPosition = { originX: 'end', originY: 'bottom' };
                overlayPosition = { overlayX: 'start', overlayY: 'top' };
                offsetX = -8;
                offsetY = 8;
                break;
            default:
                break;
        }
        strategy = this.overlay
            .position()
            .connectedTo(this.elementRef, originPosition, overlayPosition)
            .withOffsetX(offsetX)
            .withOffsetY(offsetY);
        return this.autoPosition ? this.withFallbackStrategy(strategy) : strategy;
    };
    TooltipDirective.prototype.withFallbackStrategy = function (strategy) {
        strategy
            .withFallbackPosition({ originX: 'center', originY: 'bottom' }, { overlayX: 'center', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'end', originY: 'center' }, { overlayX: 'start', overlayY: 'center' }, 8, 0)
            .withFallbackPosition({ originX: 'start', originY: 'center' }, { overlayX: 'end', overlayY: 'center' }, -8, 0)
            .withFallbackPosition({ originX: 'center', originY: 'top' }, { overlayX: 'center', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, 0, 8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 0, -8)
            .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }, 8, -8)
            .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }, 8, 8)
            .withFallbackPosition({ originX: 'end', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }, -8, -8)
            .withFallbackPosition({ originX: 'end', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }, -8, 8);
        return strategy;
    };
    TooltipDirective.ɵfac = function TooltipDirective_Factory(t) { return new (t || TooltipDirective)(ɵɵdirectiveInject(Overlay), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ElementRef)); };
    TooltipDirective.ɵdir = ɵɵdefineDirective({ type: TooltipDirective, selectors: [["", "tooltip", ""]], hostVars: 1, hostBindings: function TooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("mouseenter", function TooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function TooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });
        } if (rf & 2) {
            ɵɵattribute("data-hint", ctx.tooltip);
        } }, inputs: { tooltip: "tooltip", position: ["tooltipPosition", "position"], type: ["tooltipType", "type"], size: ["tooltipSize", "size"], bounce: ["tooltipBounce", "bounce"], noAnimate: ["tooltipNoAnimate", "noAnimate"], rounded: ["tooltipRounded", "rounded"], always: ["tooltipAlways", "always"], active: ["tooltipActive", "active"], preline: ["tooltipPreline", "preline"], removeArrow: ["removeTooltipArrow", "removeArrow"], autoPosition: ["tooltipAutoPosition", "autoPosition"] } });
    return TooltipDirective;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(TooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[tooltip]',
                host: {
                    '[attr.data-hint]': 'tooltip',
                },
            }]
    }], function () { return [{ type: Overlay }, { type: ViewContainerRef }, { type: ElementRef }]; }, { tooltip: [{
            type: Input
        }], position: [{
            type: Input,
            args: ['tooltipPosition']
        }], type: [{
            type: Input,
            args: ['tooltipType']
        }], size: [{
            type: Input,
            args: ['tooltipSize']
        }], bounce: [{
            type: Input,
            args: ['tooltipBounce']
        }], noAnimate: [{
            type: Input,
            args: ['tooltipNoAnimate']
        }], rounded: [{
            type: Input,
            args: ['tooltipRounded']
        }], always: [{
            type: Input,
            args: ['tooltipAlways']
        }], active: [{
            type: Input,
            args: ['tooltipActive']
        }], preline: [{
            type: Input,
            args: ['tooltipPreline']
        }], removeArrow: [{
            type: Input,
            args: ['removeTooltipArrow']
        }], autoPosition: [{
            type: Input,
            args: ['tooltipAutoPosition']
        }], onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }] }); })();

// NG2
var NovoTooltipModule = /** @class */ (function () {
    function NovoTooltipModule() {
    }
    NovoTooltipModule.ɵmod = ɵɵdefineNgModule({ type: NovoTooltipModule });
    NovoTooltipModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTooltipModule_Factory(t) { return new (t || NovoTooltipModule)(); }, imports: [[CommonModule]] });
    return NovoTooltipModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTooltipModule, { declarations: [TooltipDirective, NovoTooltip], imports: [CommonModule], exports: [TooltipDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTooltipModule, [{
        type: NgModule,
        args: [{
                declarations: [TooltipDirective, NovoTooltip],
                exports: [TooltipDirective],
                entryComponents: [NovoTooltip],
                imports: [CommonModule],
            }]
    }], null, null); })();

// NG2
// Rule storage - pluralize and singularize need to be run sequentially,
// while other rules can be optimized using an object for instant lookups.
var pluralRules = [];
var singularRules = [];
var uncountables = {};
var irregularPlurals = {};
var irregularSingles = {};
/**
 * Title case a string.
 */
function toTitleCase(str) {
    return str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();
}
/**
 * Sanitize a pluralization rule to a usable regular expression.
 */
function sanitizeRule(rule) {
    if (typeof rule === 'string') {
        return new RegExp('^' + rule + '$', 'i');
    }
    return rule;
}
/**
 * Pass in a word token to produce a function that can replicate the case on
 * another word.
 */
function restoreCase(word, token) {
    // Upper cased words. E.g. "HELLO".
    if (word === word.toUpperCase()) {
        return token.toUpperCase();
    }
    // Title cased words. E.g. "Title".
    if (word[0] === word[0].toUpperCase()) {
        return toTitleCase(token);
    }
    // Lower cased words. E.g. "test".
    return token.toLowerCase();
}
/**
 * Interpolate a regexp string.
 */
function interpolate(str, args) {
    return str.replace(/\$(\d{1,2})/g, function (match, index) {
        return args[index] || '';
    });
}
/**
 * Sanitize a word by passing in the word and sanitization rules.
 */
function sanitizeWord(token, word, collection) {
    // Empty string or doesn't need fixing.
    if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
    }
    var len = collection.length;
    var _loop_1 = function () {
        var rule = collection[len];
        // If the rule passes, return the replacement.
        if (rule[0].test(word)) {
            return { value: word.replace(rule[0], function (match, index, words) {
                    var result = interpolate(rule[1], [match, index, words]);
                    if (match === '') {
                        return restoreCase(words[index - 1], result);
                    }
                    return restoreCase(match, result);
                }) };
        }
    };
    // Iterate over the sanitization rules and use the first one to match.
    while (len--) {
        var state_1 = _loop_1();
        if (typeof state_1 === "object")
            return state_1.value;
    }
    return word;
}
/**
 * Replace a word with the updated word.
 */
function replaceWord(replaceMap, keepMap, rules) {
    return function (word) {
        // Get the correct token and case restoration functions.
        var token = word.toLowerCase();
        // Check against the keep object map.
        if (keepMap.hasOwnProperty(token)) {
            return restoreCase(word, token);
        }
        // Check against the replacement map for a direct word replacement.
        if (replaceMap.hasOwnProperty(token)) {
            return restoreCase(word, replaceMap[token]);
        }
        // Run all the rules against the word.
        return sanitizeWord(token, word, rules);
    };
}
var Pluralize = /** @class */ (function () {
    function Pluralize() {
    }
    Pluralize.pluralize = function (word, count, inclusive) {
        if (count === void 0) { count = 1; }
        var pluralized = count === 1 ? Pluralize.singular(word) : Pluralize.plural(word);
        return (inclusive ? count + " " : '') + pluralized;
    };
    Pluralize.singular = function (word) {
        return replaceWord(irregularSingles, irregularPlurals, pluralRules)(word);
    };
    Pluralize.plural = function (word) {
        return replaceWord(irregularPlurals, irregularSingles, singularRules)(word);
    };
    Pluralize.addPluralRule = function (rule, replacement) {
        pluralRules.push([sanitizeRule(rule), replacement]);
    };
    Pluralize.addSingularRule = function (rule, replacement) {
        singularRules.push([sanitizeRule(rule), replacement]);
    };
    Pluralize.addUncountableRule = function (word) {
        if (typeof word === 'string') {
            uncountables[word.toLowerCase()] = true;
            return;
        }
        // Set singular and plural references for the word.
        Pluralize.addPluralRule(word, '$0');
        Pluralize.addSingularRule(word, '$0');
    };
    Pluralize.addIrregularRule = function (single, plural) {
        var one = plural.toLowerCase();
        var many = single.toLowerCase();
        irregularSingles[one] = many;
        irregularPlurals[many] = one;
    };
    return Pluralize;
}());
/**
 * Irregular rules.
 */
[
    // Pronouns.
    ['I', 'we'],
    ['me', 'us'],
    ['he', 'they'],
    ['she', 'they'],
    ['them', 'them'],
    ['myself', 'ourselves'],
    ['yourself', 'yourselves'],
    ['itself', 'themselves'],
    ['herself', 'themselves'],
    ['himself', 'themselves'],
    ['themself', 'themselves'],
    ['is', 'are'],
    ['this', 'these'],
    ['that', 'those'],
    // Words ending in with a consonant and `o`.
    ['echo', 'echoes'],
    ['dingo', 'dingoes'],
    ['volcano', 'volcanoes'],
    ['tornado', 'tornadoes'],
    ['torpedo', 'torpedoes'],
    // Ends with `us`.
    ['genus', 'genera'],
    ['viscus', 'viscera'],
    // Ends with `ma`.
    ['stigma', 'stigmata'],
    ['stoma', 'stomata'],
    ['dogma', 'dogmata'],
    ['lemma', 'lemmata'],
    ['schema', 'schemata'],
    ['anathema', 'anathemata'],
    // Other irregular rules.
    ['ox', 'oxen'],
    ['axe', 'axes'],
    ['die', 'dice'],
    ['yes', 'yeses'],
    ['foot', 'feet'],
    ['eave', 'eaves'],
    ['goose', 'geese'],
    ['tooth', 'teeth'],
    ['quiz', 'quizzes'],
    ['human', 'humans'],
    ['proof', 'proofs'],
    ['carve', 'carves'],
    ['valve', 'valves'],
    ['thief', 'thieves'],
    ['genie', 'genies'],
    ['groove', 'grooves'],
    ['pickaxe', 'pickaxes'],
    ['whiskey', 'whiskies'],
].forEach(function (rule) {
    return Pluralize.addIrregularRule(rule[0], rule[1]);
});
/**
 * Pluralization rules.
 */
[
    [/s?$/i, 's'],
    [/([^aeiou]ese)$/i, '$1'],
    [/(ax|test)is$/i, '$1es'],
    [/(alias|[^aou]us|tlas|gas|ris)$/i, '$1es'],
    [/(e[mn]u)s?$/i, '$1s'],
    [/([^l]ias|[aeiou]las|[emjzr]as|[iu]am)$/i, '$1'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],
    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],
    [/(seraph|cherub)(?:im)?$/i, '$1im'],
    [/(her|at|gr)o$/i, '$1oes'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],
    [/sis$/i, 'ses'],
    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],
    [/([^aeiouy]|qu)y$/i, '$1ies'],
    [/([^ch][ieo][ln])ey$/i, '$1ies'],
    [/(x|ch|ss|sh|zz)$/i, '$1es'],
    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],
    [/(m|l)(?:ice|ouse)$/i, '$1ice'],
    [/(pe)(?:rson|ople)$/i, '$1ople'],
    [/(child)(?:ren)?$/i, '$1ren'],
    [/eaux$/i, '$0'],
    [/m[ae]n$/i, 'men'],
    ['thou', 'you'],
].forEach(function (rule) {
    return Pluralize.addPluralRule(rule[0], rule[1]);
});
/**
 * Singularization rules.
 */
[
    [/s$/i, ''],
    [/(ss)$/i, '$1'],
    [/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)(?:sis|ses)$/i, '$1sis'],
    [/(^analy)(?:sis|ses)$/i, '$1sis'],
    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, '$1fe'],
    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],
    [/([^aeiouy]|qu)ies$/i, '$1y'],
    [/(^[pl]|zomb|^(?:neck)?t|[aeo][lt]|cut)ies$/i, '$1ie'],
    [/(\b(?:mon|smil))ies$/i, '$1ey'],
    [/(m|l)ice$/i, '$1ouse'],
    [/(seraph|cherub)im$/i, '$1'],
    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|tlas|gas|(?:her|at|gr)o|ris)(?:es)?$/i, '$1'],
    [/(e[mn]u)s?$/i, '$1'],
    [/(movie|twelve)s$/i, '$1'],
    [/(cris|test|diagnos)(?:is|es)$/i, '$1is'],
    [/(alumn|syllab|octop|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],
    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],
    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],
    [/(alumn|alg|vertebr)ae$/i, '$1a'],
    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],
    [/(matr|append)ices$/i, '$1ix'],
    [/(pe)(rson|ople)$/i, '$1rson'],
    [/(child)ren$/i, '$1'],
    [/(eau)x?$/i, '$1'],
    [/men$/i, 'man'],
].forEach(function (rule) {
    return Pluralize.addSingularRule(rule[0], rule[1]);
});
/**
 * Uncountable rules.
 */
[
    // Singular words with no plurals.
    'advice',
    'adulthood',
    'agenda',
    'aid',
    'alcohol',
    'ammo',
    'athletics',
    'bison',
    'blood',
    'bream',
    'buffalo',
    'butter',
    'carp',
    'cash',
    'chassis',
    'chess',
    'clothing',
    'commerce',
    'cod',
    'cooperation',
    'corps',
    'digestion',
    'debris',
    'diabetes',
    'energy',
    'equipment',
    'elk',
    'excretion',
    'expertise',
    'flounder',
    'fun',
    'gallows',
    'garbage',
    'graffiti',
    'headquarters',
    'health',
    'herpes',
    'highjinks',
    'homework',
    'housework',
    'information',
    'jeans',
    'justice',
    'kudos',
    'labour',
    'literature',
    'machinery',
    'mackerel',
    'media',
    'mews',
    'moose',
    'music',
    'news',
    'pike',
    'plankton',
    'pliers',
    'pollution',
    'premises',
    'rain',
    'research',
    'rice',
    'salmon',
    'scissors',
    'series',
    'sewage',
    'shambles',
    'shrimp',
    'species',
    'staff',
    'swine',
    'trout',
    'traffic',
    'transporation',
    'tuna',
    'wealth',
    'welfare',
    'whiting',
    'wildebeest',
    'wildlife',
    'you',
    // Regexes.
    /pox$/i,
    /ois$/i,
    /deer$/i,
    /fish$/i,
    /sheep$/i,
    /measles$/i,
    /[^aeiou]ese$/i,
].forEach(Pluralize.addUncountableRule);
var PluralPipe = /** @class */ (function () {
    function PluralPipe() {
    }
    PluralPipe.prototype.transform = function (value) {
        return Pluralize.pluralize(value);
    };
    PluralPipe.ɵfac = function PluralPipe_Factory(t) { return new (t || PluralPipe)(); };
    PluralPipe.ɵpipe = ɵɵdefinePipe({ name: "plural", type: PluralPipe, pure: true });
    PluralPipe.ɵprov = ɵɵdefineInjectable({ token: PluralPipe, factory: PluralPipe.ɵfac });
    return PluralPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(PluralPipe, [{
        type: Pipe,
        args: [{ name: 'plural' }]
    }, {
        type: Injectable
    }], null, null); })();

// NG2
var DecodeURIPipe = /** @class */ (function () {
    function DecodeURIPipe() {
    }
    DecodeURIPipe.prototype.transform = function (encodedString) {
        var decodedString = '';
        if (!Helpers.isBlank(encodedString) && typeof encodedString === 'string') {
            decodedString = decodeURIComponent(encodedString);
        }
        return decodedString;
    };
    DecodeURIPipe.ɵfac = function DecodeURIPipe_Factory(t) { return new (t || DecodeURIPipe)(); };
    DecodeURIPipe.ɵpipe = ɵɵdefinePipe({ name: "decodeURI", type: DecodeURIPipe, pure: true });
    DecodeURIPipe.ɵprov = ɵɵdefineInjectable({ token: DecodeURIPipe, factory: DecodeURIPipe.ɵfac });
    return DecodeURIPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DecodeURIPipe, [{
        type: Pipe,
        args: [{ name: 'decodeURI' }]
    }, {
        type: Injectable
    }], null, null); })();

var GroupByPipe = /** @class */ (function () {
    function GroupByPipe() {
    }
    GroupByPipe.prototype.transform = function (input, prop) {
        var e_1, _a;
        if (!Array.isArray(input)) {
            return input;
        }
        var arr = {};
        try {
            for (var input_1 = __values(input), input_1_1 = input_1.next(); !input_1_1.done; input_1_1 = input_1.next()) {
                var value = input_1_1.value;
                var field = can(value).have(prop);
                if (Helpers.isBlank(arr[field])) {
                    arr[field] = [];
                }
                arr[field].push(value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (input_1_1 && !input_1_1.done && (_a = input_1.return)) _a.call(input_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return Object.keys(arr).map(function (key) { return ({ key: key, value: arr[key] }); });
    };
    GroupByPipe.ɵfac = function GroupByPipe_Factory(t) { return new (t || GroupByPipe)(); };
    GroupByPipe.ɵpipe = ɵɵdefinePipe({ name: "groupBy", type: GroupByPipe, pure: true });
    return GroupByPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(GroupByPipe, [{
        type: Pipe,
        args: [{
                name: 'groupBy',
            }]
    }], null, null); })();

// NG2
var NovoPipesModule = /** @class */ (function () {
    function NovoPipesModule() {
    }
    NovoPipesModule.ɵmod = ɵɵdefineNgModule({ type: NovoPipesModule });
    NovoPipesModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPipesModule_Factory(t) { return new (t || NovoPipesModule)(); } });
    return NovoPipesModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPipesModule, { declarations: [PluralPipe, DecodeURIPipe, GroupByPipe], exports: [PluralPipe, DecodeURIPipe, GroupByPipe] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPipesModule, [{
        type: NgModule,
        args: [{
                declarations: [PluralPipe, DecodeURIPipe, GroupByPipe],
                exports: [PluralPipe, DecodeURIPipe, GroupByPipe],
            }]
    }], null, null); })();

function NovoEventTypeLegendElement_ng_template_0_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 4);
    ɵɵlistener("click", function NovoEventTypeLegendElement_ng_template_0_div_1_Template_div_click_0_listener($event) { ɵɵrestoreView(_r6); var type_r4 = ctx.$implicit; var ctx_r5 = ɵɵnextContext(2); $event.stopPropagation(); return ctx_r5.eventTypeClicked.emit({ event: type_r4 == null ? null : type_r4.key }); });
    ɵɵelement(1, "div", 5);
    ɵɵelementStart(2, "div");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var type_r4 = ctx.$implicit;
    ɵɵadvance(3);
    ɵɵtextInterpolate(type_r4 == null ? null : type_r4.key);
} }
function NovoEventTypeLegendElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtemplate(1, NovoEventTypeLegendElement_ng_template_0_div_1_Template, 4, 1, "div", 3);
    ɵɵpipe(2, "groupBy");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ɵɵpipeBind2(2, 1, ctx_r1.events, "type"));
} }
function NovoEventTypeLegendElement_ng_template_2_Template(rf, ctx) { }
var _c0$2 = function (a0, a1) { return { events: a0, eventTypeClicked: a1 }; };
var NovoEventTypeLegendElement = /** @class */ (function () {
    function NovoEventTypeLegendElement() {
        this.eventTypeClicked = new EventEmitter();
    }
    NovoEventTypeLegendElement.ɵfac = function NovoEventTypeLegendElement_Factory(t) { return new (t || NovoEventTypeLegendElement)(); };
    NovoEventTypeLegendElement.ɵcmp = ɵɵdefineComponent({ type: NovoEventTypeLegendElement, selectors: [["novo-event-type-legend"]], inputs: { events: "events", customTemplate: "customTemplate" }, outputs: { eventTypeClicked: "eventTypeClicked" }, decls: 3, vars: 5, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-event-legend"], ["class", "cal-event-type", 3, "click", 4, "ngFor", "ngForOf"], [1, "cal-event-type", 3, "click"], [1, "cal-event-type-swatch"]], template: function NovoEventTypeLegendElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoEventTypeLegendElement_ng_template_0_Template, 3, 4, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoEventTypeLegendElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$2, ctx.events, ctx.eventTypeClicked));
        } }, directives: [NgTemplateOutlet, NgForOf], pipes: [GroupByPipe], encapsulation: 2 });
    return NovoEventTypeLegendElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoEventTypeLegendElement, [{
        type: Component,
        args: [{
                selector: 'novo-event-type-legend',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-event-legend\">\n        <div class=\"cal-event-type\"\n          *ngFor=\"let type of events | groupBy : 'type'\"\n          (click)=\"$event.stopPropagation(); eventTypeClicked.emit({event:type?.key})\">\n          <div class=\"cal-event-type-swatch\"></div><div>{{type?.key}}</div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{events: events, eventTypeClicked: eventTypeClicked}\">\n    </ng-template>\n  ",
            }]
    }], null, { events: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventTypeClicked: [{
            type: Output
        }] }); })();

var MonthPipe = /** @class */ (function () {
    function MonthPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    MonthPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'long'; }
        return new Intl.DateTimeFormat(locale, { month: method }).format(date);
    };
    MonthPipe.ɵfac = function MonthPipe_Factory(t) { return new (t || MonthPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    MonthPipe.ɵpipe = ɵɵdefinePipe({ name: "month", type: MonthPipe, pure: true });
    return MonthPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(MonthPipe, [{
        type: Pipe,
        args: [{ name: 'month' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

var YearPipe = /** @class */ (function () {
    function YearPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    YearPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { year: method }).format(date);
    };
    YearPipe.ɵfac = function YearPipe_Factory(t) { return new (t || YearPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    YearPipe.ɵpipe = ɵɵdefinePipe({ name: "year", type: YearPipe, pure: true });
    return YearPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(YearPipe, [{
        type: Pipe,
        args: [{ name: 'year' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

var MonthDayPipe = /** @class */ (function () {
    function MonthDayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    MonthDayPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(date);
    };
    MonthDayPipe.ɵfac = function MonthDayPipe_Factory(t) { return new (t || MonthDayPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    MonthDayPipe.ɵpipe = ɵɵdefinePipe({ name: "monthday", type: MonthDayPipe, pure: true });
    return MonthDayPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(MonthDayPipe, [{
        type: Pipe,
        args: [{ name: 'monthday' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

var EndOfWeekDisplayPipe = /** @class */ (function () {
    function EndOfWeekDisplayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    EndOfWeekDisplayPipe.prototype.transform = function (endOfWeek, startOfWeek, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        if (endOfWeek.getMonth() === startOfWeek.getMonth()) {
            return new Intl.DateTimeFormat(locale, { day: 'numeric' }).format(endOfWeek);
        }
        return new Intl.DateTimeFormat(locale, { month: method, day: 'numeric' }).format(endOfWeek);
    };
    EndOfWeekDisplayPipe.ɵfac = function EndOfWeekDisplayPipe_Factory(t) { return new (t || EndOfWeekDisplayPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    EndOfWeekDisplayPipe.ɵpipe = ɵɵdefinePipe({ name: "endofweekdisplay", type: EndOfWeekDisplayPipe, pure: true });
    return EndOfWeekDisplayPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(EndOfWeekDisplayPipe, [{
        type: Pipe,
        args: [{ name: 'endofweekdisplay' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

var WeekdayPipe = /** @class */ (function () {
    function WeekdayPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    WeekdayPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'short'; }
        return new Intl.DateTimeFormat(locale, { weekday: method }).format(date);
    };
    WeekdayPipe.ɵfac = function WeekdayPipe_Factory(t) { return new (t || WeekdayPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    WeekdayPipe.ɵpipe = ɵɵdefinePipe({ name: "weekday", type: WeekdayPipe, pure: true });
    return WeekdayPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(WeekdayPipe, [{
        type: Pipe,
        args: [{ name: 'weekday' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

var DayOfMonthPipe = /** @class */ (function () {
    function DayOfMonthPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    DayOfMonthPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { day: method }).format(date);
    };
    DayOfMonthPipe.ɵfac = function DayOfMonthPipe_Factory(t) { return new (t || DayOfMonthPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    DayOfMonthPipe.ɵpipe = ɵɵdefinePipe({ name: "dayofmonth", type: DayOfMonthPipe, pure: true });
    return DayOfMonthPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DayOfMonthPipe, [{
        type: Pipe,
        args: [{ name: 'dayofmonth' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

function NovoCalendarDateChangeElement_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "month");
    ɵɵpipe(3, "year");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ctx_r0.viewDate, ctx_r0.locale) + " " + ɵɵpipeBind2(3, 4, ctx_r0.viewDate, ctx_r0.locale));
} }
function NovoCalendarDateChangeElement_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "monthday");
    ɵɵpipe(3, "endofweekdisplay");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind3(2, 1, ctx_r1.startOfWeek, ctx_r1.locale, "long") + " - " + ɵɵpipeBind4(3, 5, ctx_r1.endOfWeek, ctx_r1.startOfWeek, ctx_r1.locale, "long"));
} }
function NovoCalendarDateChangeElement_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "weekday");
    ɵɵpipe(3, "month");
    ɵɵpipe(4, "dayofmonth");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind3(2, 1, ctx_r2.viewDate, ctx_r2.locale, "long") + ", " + ɵɵpipeBind2(3, 5, ctx_r2.viewDate, ctx_r2.locale) + " " + ɵɵpipeBind2(4, 8, ctx_r2.viewDate, ctx_r2.locale));
} }
var NovoCalendarDateChangeElement = /** @class */ (function () {
    function NovoCalendarDateChangeElement(locale) {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    NovoCalendarDateChangeElement.prototype.subtractDate = function () {
        this.changeDate(-1);
    };
    NovoCalendarDateChangeElement.prototype.addDate = function () {
        this.changeDate(1);
    };
    NovoCalendarDateChangeElement.prototype.changeDate = function (unit) {
        var addFn = {
            day: addDays,
            week: addWeeks,
            month: addMonths,
        }[this.view];
        this.viewDateChange.emit(addFn(this.viewDate, unit));
    };
    Object.defineProperty(NovoCalendarDateChangeElement.prototype, "startOfWeek", {
        get: function () {
            return startOfWeek(this.viewDate);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarDateChangeElement.prototype, "endOfWeek", {
        get: function () {
            return endOfWeek(this.viewDate);
        },
        enumerable: true,
        configurable: true
    });
    NovoCalendarDateChangeElement.ɵfac = function NovoCalendarDateChangeElement_Factory(t) { return new (t || NovoCalendarDateChangeElement)(ɵɵdirectiveInject(LOCALE_ID)); };
    NovoCalendarDateChangeElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarDateChangeElement, selectors: [["novo-calendar-date-change"]], inputs: { view: "view", viewDate: "viewDate", locale: "locale" }, outputs: { viewDateChange: "viewDateChange" }, decls: 7, vars: 4, consts: [[1, "cal-date-change"], [1, "bhi-arrow-left", 3, "click"], [3, "ngSwitch"], [4, "ngSwitchCase"], [1, "bhi-arrow-right", 3, "click"]], template: function NovoCalendarDateChangeElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "i", 1);
            ɵɵlistener("click", function NovoCalendarDateChangeElement_Template_i_click_1_listener() { return ctx.subtractDate(); });
            ɵɵelementEnd();
            ɵɵelementStart(2, "span", 2);
            ɵɵtemplate(3, NovoCalendarDateChangeElement_span_3_Template, 4, 7, "span", 3);
            ɵɵtemplate(4, NovoCalendarDateChangeElement_span_4_Template, 4, 10, "span", 3);
            ɵɵtemplate(5, NovoCalendarDateChangeElement_span_5_Template, 5, 11, "span", 3);
            ɵɵelementEnd();
            ɵɵelementStart(6, "i", 4);
            ɵɵlistener("click", function NovoCalendarDateChangeElement_Template_i_click_6_listener() { return ctx.addDate(); });
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngSwitch", ctx.view);
            ɵɵadvance(1);
            ɵɵproperty("ngSwitchCase", "month");
            ɵɵadvance(1);
            ɵɵproperty("ngSwitchCase", "week");
            ɵɵadvance(1);
            ɵɵproperty("ngSwitchCase", "day");
        } }, directives: [NgSwitch, NgSwitchCase], pipes: [MonthPipe, YearPipe, MonthDayPipe, EndOfWeekDisplayPipe, WeekdayPipe, DayOfMonthPipe], encapsulation: 2 });
    return NovoCalendarDateChangeElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarDateChangeElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-date-change',
                template: "\n    <div class=\"cal-date-change\">\n        <i class=\"bhi-arrow-left\" (click)=\"subtractDate()\" ></i>\n        <span [ngSwitch]=\"view\">\n            <span *ngSwitchCase=\"'month'\">{{ ( viewDate | month:locale ) + ' ' + ( viewDate | year:locale ) }}</span>\n            <span *ngSwitchCase=\"'week'\">{{ ( startOfWeek | monthday:locale:'long' ) + ' - ' + ( endOfWeek | endofweekdisplay:startOfWeek:locale:'long' ) }}</span>\n            <span *ngSwitchCase=\"'day'\">{{ ( viewDate | weekday:locale:'long' ) + ', ' + ( viewDate | month:locale ) + ' ' + ( viewDate | dayofmonth:locale ) }}</span>\n        </span>\n        <i class=\"bhi-arrow-right\" (click)=\"addDate()\"></i>\n    </div>\n  ",
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { view: [{
            type: Input
        }], viewDate: [{
            type: Input
        }], locale: [{
            type: Input
        }], viewDateChange: [{
            type: Output
        }] }); })();

var WEEKEND_DAY_NUMBERS = [0, 6];
var DAYS_IN_WEEK = 7;
var HOURS_IN_DAY = 24;
var MINUTES_IN_HOUR = 60;
var CalendarEventResponse;
(function (CalendarEventResponse) {
    CalendarEventResponse[CalendarEventResponse["Maybe"] = 0] = "Maybe";
    CalendarEventResponse[CalendarEventResponse["Accepted"] = 1] = "Accepted";
    CalendarEventResponse[CalendarEventResponse["Rejected"] = 2] = "Rejected";
})(CalendarEventResponse || (CalendarEventResponse = {}));
function getExcludedDays(_a) {
    var startDate = _a.startDate, days = _a.days, excluded = _a.excluded;
    if (excluded.length < 1) {
        return 0;
    }
    var day = startDate.getDay();
    var reduce = 0;
    for (var i = 0; i < days; i++) {
        if (day === DAYS_IN_WEEK) {
            day = 0;
        }
        if (excluded.some(function (e) { return e === day; })) {
            reduce++;
        }
        day++;
    }
    return reduce;
}
function getWeekViewEventSpan(_a) {
    var event = _a.event, offset = _a.offset, startOfWeek = _a.startOfWeek, excluded = _a.excluded;
    var begin = event.start < startOfWeek ? startOfWeek : event.start;
    var span = 1;
    if (event.end) {
        span = differenceInDays(addMinutes(endOfDay(event.end), 1), startOfDay(begin));
    }
    var totalLength = offset + span;
    if (totalLength > DAYS_IN_WEEK) {
        span = DAYS_IN_WEEK - offset;
    }
    return span - getExcludedDays({ startDate: begin, days: span, excluded: excluded });
}
function getWeekViewEventOffset(_a) {
    var event = _a.event, startOfWeek = _a.startOfWeek, _b = _a.excluded, excluded = _b === void 0 ? [] : _b;
    if (event.start < startOfWeek) {
        return 0;
    }
    var distance = differenceInDays(event.start, startOfWeek);
    return distance - getExcludedDays({ startDate: startOfWeek, days: distance, excluded: excluded });
}
function isEventIsPeriod(_a) {
    var event = _a.event, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    var eventStart = event.start;
    var eventEnd = event.end || event.start;
    if (eventStart > periodStart && eventStart < periodEnd) {
        return true;
    }
    if (eventEnd > periodStart && eventEnd < periodEnd) {
        return true;
    }
    if (eventStart < periodStart && eventEnd > periodEnd) {
        return true;
    }
    if (isSameSecond(eventStart, periodStart) || isSameSecond(eventStart, periodEnd)) {
        return true;
    }
    if (isSameSecond(eventEnd, periodStart) || isSameSecond(eventEnd, periodEnd)) {
        return true;
    }
    return false;
}
function getEventsInPeriod(_a) {
    var events = _a.events, periodStart = _a.periodStart, periodEnd = _a.periodEnd;
    return events.filter(function (event) { return isEventIsPeriod({ event: event, periodStart: periodStart, periodEnd: periodEnd }); });
}
function getEventsInTimeRange(events, dayStart, dayEnd) {
    return events.filter(function (event) {
        var eventStart = event.start;
        var eventEnd = event.end || eventStart;
        var startOfView = setMinutes(setHours(startOfDay(eventStart), dayStart.hour), dayStart.minute);
        var endOfView = setMinutes(setHours(startOfMinute(eventStart), dayEnd.hour), dayEnd.minute);
        return isAfter(eventEnd, startOfView) && isBefore(eventStart, endOfView);
    });
}
function getWeekDay(_a) {
    var date = _a.date;
    var today = startOfDay(new Date());
    return {
        date: date,
        isPast: date < today,
        isToday: isSameDay(date, today),
        isFuture: date > today,
        isWeekend: WEEKEND_DAY_NUMBERS.indexOf(getDay(date)) > -1,
    };
}
function getWeekViewHeader(_a) {
    var viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _b = _a.excluded, excluded = _b === void 0 ? [] : _b;
    var start = startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var days = [];
    var _loop_1 = function (i) {
        var date = addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            days.push(getWeekDay({ date: date }));
        }
    };
    for (var i = 0; i < DAYS_IN_WEEK; i++) {
        _loop_1(i);
    }
    return days;
}
function getWeekView(_a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c, hourSegments = _a.hourSegments, segmentHeight = _a.segmentHeight, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
    if (!events) {
        events = [];
    }
    var startOfViewWeek = startOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var endOfViewWeek = endOfWeek(viewDate, { weekStartsOn: weekStartsOn });
    var maxRange = DAYS_IN_WEEK - excluded.length;
    var eventsMapped = getEventsInTimeRange(getEventsInPeriod({ events: events, periodStart: startOfViewWeek, periodEnd: endOfViewWeek }), dayStart, dayEnd)
        .map(function (event) {
        var offset = getWeekViewEventOffset({ event: event, startOfWeek: startOfViewWeek, excluded: excluded });
        var span = 1; // getWeekViewEventSpan({ event, offset, startOfWeek: startOfViewWeek, excluded });
        return { event: event, offset: offset, span: span };
    })
        .filter(function (e) { return e.offset < maxRange; })
        .filter(function (e) { return e.span > 0; })
        .map(function (entry) { return ({
        event: entry.event,
        offset: entry.offset,
        span: entry.span,
        startsBeforeWeek: entry.event.start < startOfViewWeek,
        endsAfterWeek: (entry.event.end || entry.event.start) > endOfViewWeek,
        top: 0,
    }); })
        .sort(function (itemA, itemB) {
        var startSecondsDiff = differenceInSeconds(itemA.event.start, itemB.event.start);
        if (startSecondsDiff === 0) {
            return differenceInSeconds(itemB.event.end || itemB.event.start, itemA.event.end || itemA.event.start);
        }
        return startSecondsDiff;
    })
        .map(function (entry) {
        var startOfView = setMinutes(setHours(startOfDay(entry.event.start), dayStart.hour), dayStart.minute);
        var endOfView = setMinutes(setHours(startOfMinute(endOfDay(entry.event.start)), dayEnd.hour), dayEnd.minute);
        var eventStart = entry.event.start;
        var eventEnd = entry.event.end || eventStart;
        var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        if (eventStart > startOfView) {
            entry.top += differenceInMinutes(eventStart, startOfView);
        }
        entry.top *= hourHeightModifier;
        var startsBeforeDay = eventStart < startOfView;
        var endsAfterDay = eventEnd > endOfView;
        var startDate = startsBeforeDay ? startOfView : eventStart;
        var endDate = endsAfterDay ? endOfView : eventEnd;
        var height = differenceInMinutes(endDate, startDate);
        if (!entry.event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        entry.height = height;
        return entry;
    });
    var eventRows = [];
    var allocatedEvents = [];
    eventsMapped.forEach(function (event, index) {
        if (allocatedEvents.indexOf(event) === -1) {
            allocatedEvents.push(event);
            var otherRowEvents = eventsMapped.slice(index + 1).filter(function (nextEvent) {
                return nextEvent.top === event.top && nextEvent.offset === event.offset;
            });
            if (otherRowEvents.length > 0) {
                var totalEventsForRow = otherRowEvents.length + 1;
                event.span = 1 / totalEventsForRow;
                var nextOffset_1 = event.span + event.offset;
                otherRowEvents.forEach(function (nextEvent) {
                    nextEvent.offset = nextOffset_1;
                    nextEvent.span = event.span;
                    nextOffset_1 = nextEvent.span + nextEvent.offset;
                });
                allocatedEvents.push.apply(allocatedEvents, __spread(otherRowEvents));
            }
            eventRows.push({
                row: __spread([event], otherRowEvents),
            });
        }
    });
    return eventRows;
}
function getMonthView(_a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, weekStartsOn = _a.weekStartsOn, _c = _a.excluded, excluded = _c === void 0 ? [] : _c;
    if (!events) {
        events = [];
    }
    var start = startOfWeek(startOfMonth(viewDate), { weekStartsOn: weekStartsOn });
    var end = endOfWeek(endOfMonth(viewDate), { weekStartsOn: weekStartsOn });
    var eventsInMonth = getEventsInPeriod({
        events: events,
        periodStart: start,
        periodEnd: end,
    });
    var days = [];
    var _loop_2 = function (i) {
        var date = addDays(start, i);
        if (!excluded.some(function (e) { return date.getDay() === e; })) {
            var day = getWeekDay({ date: date });
            var calEvents = getEventsInPeriod({
                events: eventsInMonth,
                periodStart: startOfDay(date),
                periodEnd: endOfDay(date),
            });
            day.inMonth = isSameMonth(date, viewDate);
            day.events = calEvents;
            day.badgeTotal = calEvents.length;
            days.push(day);
        }
    };
    for (var i = 0; i < differenceInDays(end, start) + 1; i++) {
        _loop_2(i);
    }
    var totalDaysVisibleInWeek = DAYS_IN_WEEK - excluded.length;
    var rows = Math.floor(days.length / totalDaysVisibleInWeek);
    var rowOffsets = [];
    for (var i = 0; i < rows; i++) {
        rowOffsets.push(i * totalDaysVisibleInWeek);
    }
    return {
        rowOffsets: rowOffsets,
        totalDaysVisibleInWeek: totalDaysVisibleInWeek,
        days: days,
    };
}
function getDayView(_a) {
    var _b = _a.events, events = _b === void 0 ? [] : _b, viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd, eventWidth = _a.eventWidth, segmentHeight = _a.segmentHeight;
    if (!events) {
        events = [];
    }
    var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    var previousDayEvents = [];
    var dayViewEvents = getEventsInTimeRange(getEventsInPeriod({
        events: events.filter(function (event) { return !event.allDay; }),
        periodStart: startOfView,
        periodEnd: endOfView,
    }), dayStart, dayEnd)
        .sort(function (eventA, eventB) {
        return eventA.start.valueOf() - eventB.start.valueOf();
    })
        .map(function (event) {
        var eventStart = event.start;
        var eventEnd = event.end || eventStart;
        var startsBeforeDay = eventStart < startOfView;
        var endsAfterDay = eventEnd > endOfView;
        var hourHeightModifier = (hourSegments * segmentHeight) / MINUTES_IN_HOUR;
        var top = 0;
        if (eventStart > startOfView) {
            top += differenceInMinutes(eventStart, startOfView);
        }
        top *= hourHeightModifier;
        var startDate = startsBeforeDay ? startOfView : eventStart;
        var endDate = endsAfterDay ? endOfView : eventEnd;
        var height = differenceInMinutes(endDate, startDate);
        if (!event.end) {
            height = segmentHeight;
        }
        else {
            height *= hourHeightModifier;
        }
        var bottom = top + height;
        var overlappingPreviousEvents = previousDayEvents.filter(function (previousEvent) {
            var previousEventTop = previousEvent.top;
            var previousEventBottom = previousEvent.top + previousEvent.height;
            if (top < previousEventBottom && previousEventBottom < bottom) {
                return true;
            }
            else if (previousEventTop <= top && bottom <= previousEventBottom) {
                return true;
            }
            return false;
        });
        var left = 0;
        while (overlappingPreviousEvents.some(function (previousEvent) { return previousEvent.left === left; })) {
            left += eventWidth;
        }
        var dayEvent = {
            event: event,
            height: height,
            width: eventWidth,
            top: top,
            left: left,
            startsBeforeDay: startsBeforeDay,
            endsAfterDay: endsAfterDay,
        };
        if (height > 0) {
            previousDayEvents.push(dayEvent);
        }
        return dayEvent;
    })
        .filter(function (dayEvent) { return dayEvent.height > 0; });
    var width = Math.max.apply(Math, __spread(dayViewEvents.map(function (event) { return event.left + event.width; })));
    var allDayEvents = getEventsInPeriod({
        events: events.filter(function (event) { return event.allDay; }),
        periodStart: startOfDay(startOfView),
        periodEnd: endOfDay(endOfView),
    });
    return {
        events: dayViewEvents,
        width: width,
        allDayEvents: allDayEvents,
    };
}
function getDayViewHourGrid(_a) {
    var viewDate = _a.viewDate, hourSegments = _a.hourSegments, dayStart = _a.dayStart, dayEnd = _a.dayEnd;
    var hours = [];
    var startOfView = setMinutes(setHours(startOfDay(viewDate), dayStart.hour), dayStart.minute);
    var endOfView = setMinutes(setHours(startOfMinute(endOfDay(viewDate)), dayEnd.hour), dayEnd.minute);
    var segmentDuration = MINUTES_IN_HOUR / hourSegments;
    var startOfViewDay = startOfDay(viewDate);
    for (var i = 0; i < HOURS_IN_DAY; i++) {
        var segments = [];
        for (var j = 0; j < hourSegments; j++) {
            var date = addMinutes(addHours(startOfViewDay, i), j * segmentDuration);
            if (date >= startOfView && date < endOfView) {
                segments.push({
                    date: date,
                    isStart: j === 0,
                });
            }
        }
        if (segments.length > 0) {
            hours.push({ segments: segments });
        }
    }
    return hours;
}

function NovoCalendarMonthHeaderElement_ng_template_0_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵtext(1);
    ɵɵpipe(2, "weekday");
    ɵɵelementEnd();
} if (rf & 2) {
    var day_r4 = ctx.$implicit;
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵclassProp("calendar-past", day_r4.isPast)("calendar-today", day_r4.isToday)("calendar-future", day_r4.isFuture)("calendar-weekend", day_r4.isWeekend);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(2, 9, day_r4.date, ctx_r3.locale), " ");
} }
function NovoCalendarMonthHeaderElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵelementStart(1, "div", 3);
    ɵɵelementStart(2, "button", 4);
    ɵɵlistener("click", function NovoCalendarMonthHeaderElement_ng_template_0_Template_button_click_2_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(); return ctx_r5.prevMonth($event); });
    ɵɵelementEnd();
    ɵɵelementStart(3, "div", 5);
    ɵɵtext(4);
    ɵɵpipe(5, "month");
    ɵɵelementEnd();
    ɵɵelementStart(6, "button", 6);
    ɵɵlistener("click", function NovoCalendarMonthHeaderElement_ng_template_0_Template_button_click_6_listener($event) { ɵɵrestoreView(_r6); var ctx_r7 = ɵɵnextContext(); return ctx_r7.nextMonth($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(7, "div", 7);
    ɵɵtemplate(8, NovoCalendarMonthHeaderElement_ng_template_0_div_8_Template, 3, 12, "div", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(4);
    ɵɵtextInterpolate(ɵɵpipeBind2(5, 2, ctx_r1.viewDate, ctx_r1.locale));
    ɵɵadvance(4);
    ɵɵproperty("ngForOf", ctx_r1.days);
} }
function NovoCalendarMonthHeaderElement_ng_template_2_Template(rf, ctx) { }
var _c0$3 = function (a0, a1, a2) { return { days: a0, locale: a1, viewDate: a2 }; };
var NovoCalendarMonthHeaderElement = /** @class */ (function () {
    function NovoCalendarMonthHeaderElement() {
        /**
         * Called when the view date is changed
         */
        this.viewDateChange = new EventEmitter();
    }
    NovoCalendarMonthHeaderElement.prototype.prevMonth = function (event) {
        this.viewDateChange.emit(subMonths(this.viewDate, 1));
    };
    NovoCalendarMonthHeaderElement.prototype.nextMonth = function (event) {
        this.viewDateChange.emit(addMonths(this.viewDate, 1));
    };
    NovoCalendarMonthHeaderElement.ɵfac = function NovoCalendarMonthHeaderElement_Factory(t) { return new (t || NovoCalendarMonthHeaderElement)(); };
    NovoCalendarMonthHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarMonthHeaderElement, selectors: [["novo-calendar-month-header"]], inputs: { viewDate: "viewDate", days: "days", locale: "locale", customTemplate: "customTemplate" }, outputs: { viewDateChange: "viewDateChange" }, decls: 3, vars: 6, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "calendar-header"], [1, "calendar-header-top"], ["theme", "icon", "icon", "previous", 3, "click"], [1, "calendar-month"], ["theme", "icon", "icon", "next", 3, "click"], [1, "calendar-weekdays"], ["class", "calendar-weekday", 3, "calendar-past", "calendar-today", "calendar-future", "calendar-weekend", 4, "ngFor", "ngForOf"], [1, "calendar-weekday"]], template: function NovoCalendarMonthHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarMonthHeaderElement_ng_template_0_Template, 9, 5, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarMonthHeaderElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$3, ctx.days, ctx.locale, ctx.viewDate));
        } }, directives: [NgTemplateOutlet, NovoButtonElement, NgForOf], pipes: [MonthPipe, WeekdayPipe], encapsulation: 2 });
    return NovoCalendarMonthHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarMonthHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-month-header',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"calendar-header\">\n        <div class=\"calendar-header-top\">\n          <button theme=\"icon\" icon=\"previous\" (click)=\"prevMonth($event)\"></button>\n          <div class=\"calendar-month\">{{ viewDate | month:locale }}</div>\n          <button theme=\"icon\" icon=\"next\" (click)=\"nextMonth($event)\"></button>\n        </div>\n        <div class=\"calendar-weekdays\">\n          <div\n            class=\"calendar-weekday\"\n            *ngFor=\"let day of days\"\n            [class.calendar-past]=\"day.isPast\"\n            [class.calendar-today]=\"day.isToday\"\n            [class.calendar-future]=\"day.isFuture\"\n            [class.calendar-weekend]=\"day.isWeekend\">\n            {{ day.date | weekday:locale }}\n          </div>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, viewDate: viewDate}\">\n    </ng-template>\n  ",
            }]
    }], null, { viewDate: [{
            type: Input
        }], days: [{
            type: Input
        }], locale: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], viewDateChange: [{
            type: Output
        }] }); })();

function NovoCalendarMonthDayElement_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 7);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.day.badgeTotal);
} }
function NovoCalendarMonthDayElement_ng_template_0_div_6_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8);
    ɵɵlistener("click", function NovoCalendarMonthDayElement_ng_template_0_div_6_Template_div_click_0_listener($event) { ɵɵrestoreView(_r7); var type_r5 = ctx.$implicit; var ctx_r6 = ɵɵnextContext(2); $event.stopPropagation(); return ctx_r6.eventClicked.emit({ event: type_r5 == null ? null : type_r5.value[0] }); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var type_r5 = ctx.$implicit;
    ɵɵstyleProp("background-color", type_r5 == null ? null : type_r5.value[0] == null ? null : type_r5.value[0].color.primary);
    ɵɵproperty("ngClass", type_r5 == null ? null : type_r5.value[0] == null ? null : type_r5.value[0].cssClass);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", type_r5 == null ? null : type_r5.value.length, " ");
} }
function NovoCalendarMonthDayElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtemplate(1, NovoCalendarMonthDayElement_ng_template_0_span_1_Template, 2, 1, "span", 3);
    ɵɵelementStart(2, "span", 4);
    ɵɵtext(3);
    ɵɵpipe(4, "dayofmonth");
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "div", 5);
    ɵɵtemplate(6, NovoCalendarMonthDayElement_ng_template_0_div_6_Template, 2, 4, "div", 6);
    ɵɵpipe(7, "groupBy");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.day.badgeTotal > 0);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind2(4, 3, ctx_r1.day.date, ctx_r1.locale));
    ɵɵadvance(3);
    ɵɵproperty("ngForOf", ɵɵpipeBind2(7, 6, ctx_r1.day.events, "type"));
} }
function NovoCalendarMonthDayElement_ng_template_2_Template(rf, ctx) { }
var _c0$4 = function (a0, a1, a2, a3, a4, a5, a6) { return { day: a0, locale: a1, tooltipPosition: a2, eventClicked: a3, accepted: a4, rejected: a5, maybes: a6 }; };
var NovoCalendarMonthDayElement = /** @class */ (function () {
    function NovoCalendarMonthDayElement() {
        this.eventClicked = new EventEmitter();
    }
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "accepted", {
        get: function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return evt.response === CalendarEventResponse.Accepted;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "rejected", {
        get: function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return evt.response === CalendarEventResponse.Rejected;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoCalendarMonthDayElement.prototype, "maybes", {
        get: function () {
            if (!this.day) {
                return [];
            }
            return this.day.events.filter(function (evt) {
                return evt.response === CalendarEventResponse.Maybe;
            });
        },
        enumerable: true,
        configurable: true
    });
    NovoCalendarMonthDayElement.ɵfac = function NovoCalendarMonthDayElement_Factory(t) { return new (t || NovoCalendarMonthDayElement)(); };
    NovoCalendarMonthDayElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarMonthDayElement, selectors: [["novo-calendar-month-day"]], hostVars: 22, hostBindings: function NovoCalendarMonthDayElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassMap("calendar-cell calendar-day-cell " + (ctx.day == null ? null : ctx.day.cssClass));
            ɵɵstyleProp("background-color", ctx.day.backgroundColor);
            ɵɵclassProp("calendar-day-accepted", ctx.accepted.length)("calendar-day-rejected", ctx.rejected.length)("calendar-past", ctx.day.isPast)("calendar-today", ctx.day.isToday)("calendar-future", ctx.day.isFuture)("calendar-weekend", ctx.day.isWeekend)("calendar-in-month", ctx.day.inMonth)("calendar-out-month", !ctx.day.inMonth)("calendar-has-events", ctx.day.events.length > 0);
        } }, inputs: { day: "day", locale: "locale", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 10, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "calendar-day-top"], ["class", "calendar-day-badge", 4, "ngIf"], [1, "calendar-day-number"], [1, "calendar-events"], ["class", "calendar-event", 3, "backgroundColor", "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "calendar-day-badge"], [1, "calendar-event", 3, "ngClass", "click"]], template: function NovoCalendarMonthDayElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarMonthDayElement_ng_template_0_Template, 8, 9, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarMonthDayElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction7(2, _c0$4, ctx.day, ctx.locale, ctx.tooltipPosition, ctx.eventClicked, ctx.accepted, ctx.rejected, ctx.maybes));
        } }, directives: [NgTemplateOutlet, NgIf, NgForOf, NgClass], pipes: [DayOfMonthPipe, GroupByPipe], encapsulation: 2 });
    return NovoCalendarMonthDayElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarMonthDayElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-month-day',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"calendar-day-top\">\n        <span class=\"calendar-day-badge\" *ngIf=\"day.badgeTotal > 0\">{{ day.badgeTotal }}</span>\n        <span class=\"calendar-day-number\">{{ day.date | dayofmonth:locale }}</span>\n      </div>\n      <div class=\"calendar-events\">\n        <div\n          class=\"calendar-event\"\n          *ngFor=\"let type of day.events | groupBy : 'type'\"\n          [style.backgroundColor]=\"type?.value[0]?.color.primary\"\n          [ngClass]=\"type?.value[0]?.cssClass\"\n          (click)=\"$event.stopPropagation(); eventClicked.emit({event:type?.value[0]})\">\n          {{type?.value.length}}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        day: day,\n        locale: locale,\n        tooltipPosition: tooltipPosition,\n        eventClicked: eventClicked,\n        accepted: accepted,\n        rejected: rejected,\n        maybes: maybes\n      }\">\n    </ng-template>\n  ",
                host: {
                    '[class]': '"calendar-cell calendar-day-cell " + day?.cssClass',
                    '[class.calendar-day-accepted]': 'accepted.length',
                    '[class.calendar-day-rejected]': 'rejected.length',
                    '[class.calendar-past]': 'day.isPast',
                    '[class.calendar-today]': 'day.isToday',
                    '[class.calendar-future]': 'day.isFuture',
                    '[class.calendar-weekend]': 'day.isWeekend',
                    '[class.calendar-in-month]': 'day.inMonth',
                    '[class.calendar-out-month]': '!day.inMonth',
                    '[class.calendar-has-events]': 'day.events.length > 0',
                    '[style.backgroundColor]': 'day.backgroundColor',
                },
            }]
    }], null, { day: [{
            type: Input
        }], locale: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

function NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-month-day", 6);
    ɵɵlistener("click", function NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template_novo_calendar_month_day_click_0_listener() { ɵɵrestoreView(_r5); var day_r3 = ctx.$implicit; var ctx_r4 = ɵɵnextContext(2); return ctx_r4.dayClicked.emit({ day: day_r3 }); })("eventClicked", function NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template_novo_calendar_month_day_eventClicked_0_listener($event) { ɵɵrestoreView(_r5); var day_r3 = ctx.$implicit; var ctx_r6 = ɵɵnextContext(2); return ctx_r6.eventClicked.emit({ day: day_r3, event: $event.event }); });
    ɵɵelementEnd();
} if (rf & 2) {
    var day_r3 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵproperty("day", day_r3)("locale", ctx_r2.locale)("customTemplate", ctx_r2.cellTemplate);
} }
function NovoCalendarMonthViewElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "div", 4);
    ɵɵtemplate(2, NovoCalendarMonthViewElement_div_3_novo_calendar_month_day_2_Template, 1, 3, "novo-calendar-month-day", 5);
    ɵɵpipe(3, "slice");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var rowIndex_r1 = ctx.$implicit;
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ɵɵpipeBind3(3, 1, ctx_r0.view.days, rowIndex_r1, rowIndex_r1 + ctx_r0.view.totalDaysVisibleInWeek));
} }
/**
 * Shows all events on a given month. Example usage:
 *
 * ```
 * &lt;novo-calendar-month-view
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-month-view&gt;
 * ```
 */
var NovoCalendarMonthViewElement = /** @class */ (function () {
    /**
     * @hidden
     */
    function NovoCalendarMonthViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The locale used to format dates
         */
        this.locale = 'en-US';
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when the day cell is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        this.viewDateChange = new EventEmitter();
        this.locale = locale;
    }
    /**
     * @hidden
     */
    NovoCalendarMonthViewElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.markForCheck();
            });
        }
    };
    /**
     * @hidden
     */
    NovoCalendarMonthViewElement.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.viewDate || changes.events || changes.excludeDays) {
            this.refreshBody();
        }
    };
    /**
     * @hidden
     */
    NovoCalendarMonthViewElement.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    NovoCalendarMonthViewElement.prototype.eventDropped = function (day, event) {
        var year = getYear(day.date);
        var month = getMonth(day.date);
        var date = getDate(day.date);
        var newStart = setYear(setMonth(setDate(event.start, date), month), year);
        var newEnd;
        if (event.end) {
            var secondsDiff = differenceInSeconds(newStart, event.start);
            newEnd = addSeconds(event.end, secondsDiff);
        }
        this.eventTimesChanged.emit({ event: event, newStart: newStart, newEnd: newEnd });
    };
    NovoCalendarMonthViewElement.prototype.refreshHeader = function () {
        this.columnHeaders = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    };
    NovoCalendarMonthViewElement.prototype.refreshBody = function () {
        var _this = this;
        this.view = getMonthView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
        if (this.dayModifier) {
            this.view.days.forEach(function (day) { return _this.dayModifier(day); });
        }
    };
    NovoCalendarMonthViewElement.prototype.refreshAll = function () {
        this.refreshHeader();
        this.refreshBody();
        this.viewDateChange.emit(this.viewDate);
    };
    NovoCalendarMonthViewElement.ɵfac = function NovoCalendarMonthViewElement_Factory(t) { return new (t || NovoCalendarMonthViewElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
    NovoCalendarMonthViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarMonthViewElement, selectors: [["novo-calendar-month"]], inputs: { viewDate: "viewDate", events: "events", excludeDays: "excludeDays", dayModifier: "dayModifier", refresh: "refresh", locale: "locale", tooltipPosition: "tooltipPosition", weekStartsOn: "weekStartsOn", headerTemplate: "headerTemplate", cellTemplate: "cellTemplate" }, outputs: { dayClicked: "dayClicked", eventClicked: "eventClicked", eventTimesChanged: "eventTimesChanged", viewDateChange: "viewDateChange" }, features: [ɵɵNgOnChangesFeature], decls: 4, vars: 5, consts: [[1, "calendar-month-view"], [3, "viewDate", "days", "locale", "customTemplate", "viewDateChange"], [1, "calendar-days"], [4, "ngFor", "ngForOf"], [1, "calendar-cell-row"], [3, "day", "locale", "customTemplate", "click", "eventClicked", 4, "ngFor", "ngForOf"], [3, "day", "locale", "customTemplate", "click", "eventClicked"]], template: function NovoCalendarMonthViewElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "novo-calendar-month-header", 1);
            ɵɵlistener("viewDateChange", function NovoCalendarMonthViewElement_Template_novo_calendar_month_header_viewDateChange_1_listener($event) { return ctx.viewDate = $event; })("viewDateChange", function NovoCalendarMonthViewElement_Template_novo_calendar_month_header_viewDateChange_1_listener() { return ctx.refreshAll(); });
            ɵɵelementEnd();
            ɵɵelementStart(2, "div", 2);
            ɵɵtemplate(3, NovoCalendarMonthViewElement_div_3_Template, 4, 5, "div", 3);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("viewDate", ctx.viewDate)("days", ctx.columnHeaders)("locale", ctx.locale)("customTemplate", ctx.headerTemplate);
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx.view.rowOffsets);
        } }, directives: [NovoCalendarMonthHeaderElement, NgForOf, NovoCalendarMonthDayElement], pipes: [SlicePipe], encapsulation: 2 });
    return NovoCalendarMonthViewElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarMonthViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-month',
                template: "\n    <div class=\"calendar-month-view\">\n       <novo-calendar-month-header\n         [(viewDate)]=\"viewDate\"\n         [days]=\"columnHeaders\"\n         [locale]=\"locale\"\n         [customTemplate]=\"headerTemplate\"\n         (viewDateChange)=\"refreshAll()\">\n       </novo-calendar-month-header>\n      <div class=\"calendar-days\">\n        <div *ngFor=\"let rowIndex of view.rowOffsets\">\n          <div class=\"calendar-cell-row\">\n            <novo-calendar-month-day\n              *ngFor=\"let day of view.days | slice : rowIndex : rowIndex + (view.totalDaysVisibleInWeek)\"\n              [day]=\"day\"\n              [locale]=\"locale\"\n              [customTemplate]=\"cellTemplate\"\n              (click)=\"dayClicked.emit({day: day})\"\n              (eventClicked)=\"eventClicked.emit({ day: day, event: $event.event})\">\n            </novo-calendar-month-day>\n          </div>\n        </div>\n      </div>\n    </div>\n  ",
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { viewDate: [{
            type: Input
        }], events: [{
            type: Input
        }], excludeDays: [{
            type: Input
        }], dayModifier: [{
            type: Input
        }], refresh: [{
            type: Input
        }], locale: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], weekStartsOn: [{
            type: Input
        }], headerTemplate: [{
            type: Input
        }], cellTemplate: [{
            type: Input
        }], dayClicked: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }], viewDateChange: [{
            type: Output
        }] }); })();

function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 4);
    ɵɵlistener("click", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_click_0_listener() { ɵɵrestoreView(_r6); var day_r4 = ctx.$implicit; var ctx_r5 = ɵɵnextContext(2); return ctx_r5.dayClicked.emit({ date: day_r4.date }); })("dragEnter", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_dragEnter_0_listener() { var day_r4 = ctx.$implicit; return day_r4.dragOver = true; })("dragLeave", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_dragLeave_0_listener() { var day_r4 = ctx.$implicit; return day_r4.dragOver = false; })("drop", function NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template_div_drop_0_listener($event) { ɵɵrestoreView(_r6); var day_r4 = ctx.$implicit; var ctx_r9 = ɵɵnextContext(2); day_r4.dragOver = false; return ctx_r9.eventDropped.emit({ event: $event.dropData.event, newStart: day_r4.date }); });
    ɵɵelementStart(1, "b");
    ɵɵtext(2);
    ɵɵpipe(3, "weekday");
    ɵɵelementEnd();
    ɵɵelement(4, "br");
    ɵɵelementStart(5, "span");
    ɵɵtext(6);
    ɵɵpipe(7, "monthday");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var day_r4 = ctx.$implicit;
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵclassProp("cal-past", day_r4.isPast)("cal-today", day_r4.isToday)("cal-future", day_r4.isFuture)("cal-weekend", day_r4.isWeekend)("cal-drag-over", day_r4.dragOver);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind3(3, 12, day_r4.date, ctx_r3.locale, "long"));
    ɵɵadvance(4);
    ɵɵtextInterpolate(ɵɵpipeBind2(7, 16, day_r4.date, ctx_r3.locale));
} }
function NovoCalendarWeekHeaderElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtemplate(1, NovoCalendarWeekHeaderElement_ng_template_0_div_1_Template, 8, 19, "div", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.days);
} }
function NovoCalendarWeekHeaderElement_ng_template_2_Template(rf, ctx) { }
var _c0$5 = function (a0, a1, a2, a3) { return { days: a0, locale: a1, dayClicked: a2, eventDropped: a3 }; };
var NovoCalendarWeekHeaderElement = /** @class */ (function () {
    function NovoCalendarWeekHeaderElement() {
        this.dayClicked = new EventEmitter();
        this.eventDropped = new EventEmitter();
    }
    NovoCalendarWeekHeaderElement.ɵfac = function NovoCalendarWeekHeaderElement_Factory(t) { return new (t || NovoCalendarWeekHeaderElement)(); };
    NovoCalendarWeekHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarWeekHeaderElement, selectors: [["novo-calendar-week-header"]], inputs: { days: "days", locale: "locale", customTemplate: "customTemplate" }, outputs: { dayClicked: "dayClicked", eventDropped: "eventDropped" }, decls: 3, vars: 7, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-day-headers"], ["class", "cal-header", "mwlDroppable", "", 3, "cal-past", "cal-today", "cal-future", "cal-weekend", "cal-drag-over", "click", "dragEnter", "dragLeave", "drop", 4, "ngFor", "ngForOf"], ["mwlDroppable", "", 1, "cal-header", 3, "click", "dragEnter", "dragLeave", "drop"]], template: function NovoCalendarWeekHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarWeekHeaderElement_ng_template_0_Template, 2, 1, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarWeekHeaderElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction4(2, _c0$5, ctx.days, ctx.locale, ctx.dayClicked, ctx.eventDropped));
        } }, directives: [NgTemplateOutlet, NgForOf], pipes: [WeekdayPipe, MonthDayPipe], encapsulation: 2 });
    return NovoCalendarWeekHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarWeekHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-week-header',
                template: "\n    <ng-template #defaultTemplate>\n      <div class=\"cal-day-headers\">\n        <div\n          class=\"cal-header\"\n          *ngFor=\"let day of days\"\n          [class.cal-past]=\"day.isPast\"\n          [class.cal-today]=\"day.isToday\"\n          [class.cal-future]=\"day.isFuture\"\n          [class.cal-weekend]=\"day.isWeekend\"\n          [class.cal-drag-over]=\"day.dragOver\"\n          (click)=\"dayClicked.emit({date: day.date})\"\n          mwlDroppable\n          (dragEnter)=\"day.dragOver = true\"\n          (dragLeave)=\"day.dragOver = false\"\n          (drop)=\"day.dragOver = false; eventDropped.emit({event: $event.dropData.event, newStart: day.date})\">\n          <b>{{ day.date | weekday:locale:'long'}}</b><br>\n          <span>{{ day.date | monthday:locale }}</span>\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{days: days, locale: locale, dayClicked: dayClicked, eventDropped: eventDropped}\">\n    </ng-template>\n  ",
            }]
    }], null, { days: [{
            type: Input
        }], locale: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], dayClicked: [{
            type: Output
        }], eventDropped: [{
            type: Output
        }] }); })();

function NovoCalendarWeekEventElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoCalendarWeekEventElement_ng_template_0_Template_div_click_0_listener() { ɵɵrestoreView(_r4); var ctx_r3 = ɵɵnextContext(); return ctx_r3.eventClicked.emit({ event: ctx_r3.weekEvent.event }); });
    ɵɵelement(1, "div", 3);
    ɵɵelementStart(2, "div", 4);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 5);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("cal-starts-within-week", !ctx_r1.weekEvent.startsBeforeWeek)("cal-ends-within-week", !ctx_r1.weekEvent.endsAfterWeek);
    ɵɵproperty("ngClass", ctx_r1.weekEvent.event == null ? null : ctx_r1.weekEvent.event.cssClass)("tooltip", ctx_r1.weekEvent.event.description)("tooltipPosition", ctx_r1.tooltipPosition);
    ɵɵadvance(1);
    ɵɵstyleProp("background-color", ctx_r1.weekEvent.event.color.primary);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.weekEvent.event == null ? null : ctx_r1.weekEvent.event.title);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.weekEvent.event == null ? null : ctx_r1.weekEvent.event.description);
} }
function NovoCalendarWeekEventElement_ng_template_2_Template(rf, ctx) { }
var _c0$6 = function (a0, a1, a2) { return { weekEvent: a0, tooltipPosition: a1, eventClicked: a2 }; };
var NovoCalendarWeekEventElement = /** @class */ (function () {
    function NovoCalendarWeekEventElement() {
        this.eventClicked = new EventEmitter();
    }
    NovoCalendarWeekEventElement.ɵfac = function NovoCalendarWeekEventElement_Factory(t) { return new (t || NovoCalendarWeekEventElement)(); };
    NovoCalendarWeekEventElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarWeekEventElement, selectors: [["novo-calendar-week-event"]], inputs: { weekEvent: "weekEvent", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 6, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-event", 3, "ngClass", "tooltip", "tooltipPosition", "click"], [1, "cal-event-ribbon"], [1, "cal-event-title"], [1, "cal-event-description"]], template: function NovoCalendarWeekEventElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarWeekEventElement_ng_template_0_Template, 6, 11, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarWeekEventElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$6, ctx.weekEvent, ctx.tooltipPosition, ctx.eventClicked));
        } }, directives: [NgTemplateOutlet, NgClass, TooltipDirective], encapsulation: 2 });
    return NovoCalendarWeekEventElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarWeekEventElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-week-event',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [class.cal-starts-within-week]=\"!weekEvent.startsBeforeWeek\"\n        [class.cal-ends-within-week]=\"!weekEvent.endsAfterWeek\"\n        [ngClass]=\"weekEvent.event?.cssClass\"\n        [tooltip]=\"weekEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({event: weekEvent.event})\">\n        <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"weekEvent.event.color.primary\"></div>\n        <div class=\"cal-event-title\">{{weekEvent.event?.title}}</div>\n        <div class=\"cal-event-description\">{{weekEvent.event?.description}}</div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{weekEvent: weekEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}\">\n    </ng-template>\n  ",
            }]
    }], null, { weekEvent: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

var HoursPipe = /** @class */ (function () {
    function HoursPipe(locale) {
        if (locale === void 0) { locale = 'en-US'; }
        this.locale = locale;
    }
    HoursPipe.prototype.transform = function (date, locale, method) {
        if (locale === void 0) { locale = this.locale; }
        if (method === void 0) { method = 'numeric'; }
        return new Intl.DateTimeFormat(locale, { hour: method }).format(date);
    };
    HoursPipe.ɵfac = function HoursPipe_Factory(t) { return new (t || HoursPipe)(ɵɵdirectiveInject(LOCALE_ID)); };
    HoursPipe.ɵpipe = ɵɵdefinePipe({ name: "hours", type: HoursPipe, pure: true });
    return HoursPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(HoursPipe, [{
        type: Pipe,
        args: [{ name: 'hours' }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();

function NovoCalendarHourSegmentElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵelementStart(1, "div", 3);
    ɵɵtext(2);
    ɵɵpipe(3, "hours");
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("cal-hour-start", ctx_r1.segment.isStart)("cal-after-hour-start", !ctx_r1.segment.isStart);
    ɵɵproperty("ngClass", ctx_r1.segment.cssClass);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(3, 6, ctx_r1.segment.date, ctx_r1.locale), " ");
} }
function NovoCalendarHourSegmentElement_ng_template_2_Template(rf, ctx) { }
var _c0$7 = function (a0, a1) { return { segment: a0, locale: a1 }; };
var NovoCalendarHourSegmentElement = /** @class */ (function () {
    function NovoCalendarHourSegmentElement() {
    }
    NovoCalendarHourSegmentElement.ɵfac = function NovoCalendarHourSegmentElement_Factory(t) { return new (t || NovoCalendarHourSegmentElement)(); };
    NovoCalendarHourSegmentElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarHourSegmentElement, selectors: [["novo-calendar-day-hour-segment"]], inputs: { segment: "segment", locale: "locale", customTemplate: "customTemplate" }, decls: 3, vars: 5, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-hour-segment", 3, "ngClass"], [1, "cal-time"]], template: function NovoCalendarHourSegmentElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarHourSegmentElement_ng_template_0_Template, 4, 9, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarHourSegmentElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$7, ctx.segment, ctx.locale));
        } }, directives: [NgTemplateOutlet, NgClass], pipes: [HoursPipe], encapsulation: 2 });
    return NovoCalendarHourSegmentElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarHourSegmentElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-day-hour-segment',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-hour-segment\"\n        [class.cal-hour-start]=\"segment.isStart\"\n        [class.cal-after-hour-start]=\"!segment.isStart\"\n        [ngClass]=\"segment.cssClass\">\n        <div class=\"cal-time\">\n          {{ segment.date | hours:locale }}\n        </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        segment: segment,\n        locale: locale\n      }\">\n    </ng-template>\n  ",
            }]
    }], null, { segment: [{
            type: Input
        }], locale: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }] }); })();

function NovoCalendarWeekViewElement_div_3_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 7, 8);
    ɵɵelementStart(2, "novo-calendar-week-event", 9);
    ɵɵlistener("eventClicked", function NovoCalendarWeekViewElement_div_3_div_2_Template_novo_calendar_week_event_eventClicked_2_listener($event) { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(2); return ctx_r8.eventClicked.emit($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var weekEvent_r6 = ctx.$implicit;
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵstyleProp("width", 100 / ctx_r5.days.length * weekEvent_r6.span + "%")("margin-top", weekEvent_r6.top, "px")("height", weekEvent_r6.height, "px")("margin-left", 100 / ctx_r5.days.length * weekEvent_r6.offset + "%");
    ɵɵadvance(2);
    ɵɵproperty("weekEvent", weekEvent_r6)("tooltipPosition", ctx_r5.tooltipPosition)("customTemplate", ctx_r5.eventTemplate);
} }
function NovoCalendarWeekViewElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", null, 5);
    ɵɵtemplate(2, NovoCalendarWeekViewElement_div_3_div_2_Template, 3, 11, "div", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    var eventRow_r3 = ctx.$implicit;
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", eventRow_r3.row);
} }
function NovoCalendarWeekViewElement_div_4_novo_calendar_day_hour_segment_1_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-day-hour-segment", 12);
    ɵɵlistener("click", function NovoCalendarWeekViewElement_div_4_novo_calendar_day_hour_segment_1_Template_novo_calendar_day_hour_segment_click_0_listener() { ɵɵrestoreView(_r14); var segment_r12 = ctx.$implicit; var ctx_r13 = ɵɵnextContext(2); return ctx_r13.hourSegmentClicked.emit({ date: segment_r12.date }); });
    ɵɵelementEnd();
} if (rf & 2) {
    var segment_r12 = ctx.$implicit;
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵproperty("segment", segment_r12)("locale", ctx_r11.locale)("customTemplate", ctx_r11.hourSegmentTemplate);
} }
function NovoCalendarWeekViewElement_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 10);
    ɵɵtemplate(1, NovoCalendarWeekViewElement_div_4_novo_calendar_day_hour_segment_1_Template, 1, 3, "novo-calendar-day-hour-segment", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    var hour_r10 = ctx.$implicit;
    ɵɵstyleProp("min-width", 70, "px");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", hour_r10.segments);
} }
/**
 * @hidden
 */
var SEGMENT_HEIGHT = 30;
/**
 * @hidden
 */
var MINUTES_IN_HOUR$1 = 60;
/**
 * Shows all events on a given week. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-week
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-week&gt;
 * ```
 */
var NovoCalendarWeekViewElement = /** @class */ (function () {
    /**
     * @hidden
     */
    function NovoCalendarWeekViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * An array of day indexes (0 = sunday, 1 = monday etc) that will be hidden on the view
         */
        this.excludeDays = [];
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'bottom';
        /**
         * The precision to display events.
         * `days` will round event start and end dates to the nearest day and `minutes` will not do this rounding
         */
        this.precision = 'days';
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when a header week day is clicked
         */
        this.dayClicked = new EventEmitter();
        /**
         * Called when the event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.eventRows = [];
        this.locale = locale;
    }
    /**
     * @hidden
     */
    NovoCalendarWeekViewElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     */
    NovoCalendarWeekViewElement.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate || changes.excludeDays) {
            this.refreshHeader();
        }
        if (changes.events || changes.viewDate || changes.excludeDays) {
            this.refreshBody();
        }
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
    };
    /**
     * @hidden
     */
    NovoCalendarWeekViewElement.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /*
      resizeStarted(weekViewContainer: HTMLElement, weekEvent: WeekViewEvent, resizeEvent: ResizeEvent): void {
        this.currentResize = {
          originalOffset: weekEvent.offset,
          originalSpan: weekEvent.span,
          edge: typeof resizeEvent.edges.left !== 'undefined' ? 'left' : 'right'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(weekViewContainer, this.getDayColumnWidth(weekViewContainer));
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(weekEvent: WeekViewEvent, resizeEvent: ResizeEvent, dayWidth: number): void {
        if (resizeEvent.edges.left) {
          const diff: number = Math.round(+resizeEvent.edges.left / dayWidth);
          weekEvent.offset = this.currentResize.originalOffset + diff;
          weekEvent.span = this.currentResize.originalSpan - diff;
        } else if (resizeEvent.edges.right) {
          const diff: number = Math.round(+resizeEvent.edges.right / dayWidth);
          weekEvent.span = this.currentResize.originalSpan + diff;
        }
      }
  
      resizeEnded(weekEvent: WeekViewEvent): void {
  
        let daysDiff: number;
        if (this.currentResize.edge === 'left') {
          daysDiff = weekEvent.offset - this.currentResize.originalOffset;
        } else {
          daysDiff = weekEvent.span - this.currentResize.originalSpan;
        }
  
        weekEvent.offset = this.currentResize.originalOffset;
        weekEvent.span = this.currentResize.originalSpan;
  
        let newStart: Date = weekEvent.event.start;
        let newEnd: Date = weekEvent.event.end;
        if (this.currentResize.edge === 'left') {
          newStart = addDays(newStart, daysDiff);
        } else if (newEnd) {
          newEnd = addDays(newEnd, daysDiff);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
        this.currentResize = null;
  
      }
  
      eventDragged(weekEvent: WeekViewEvent, draggedByPx: number, dayWidth: number): void {
  
        const daysDragged: number = draggedByPx / dayWidth;
        const newStart: Date = addDays(weekEvent.event.start, daysDragged);
        let newEnd: Date;
        if (weekEvent.event.end) {
          newEnd = addDays(weekEvent.event.end, daysDragged);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: weekEvent.event});
  
      }
  
      dragStart(weekViewContainer: HTMLElement, event: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(weekViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
      */
    NovoCalendarWeekViewElement.prototype.getDayColumnWidth = function (eventRowContainer) {
        return Math.floor(eventRowContainer.offsetWidth / this.days.length);
    };
    NovoCalendarWeekViewElement.prototype.refreshHeader = function () {
        this.days = getWeekViewHeader({
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
        });
    };
    NovoCalendarWeekViewElement.prototype.refreshBody = function () {
        this.eventRows = getWeekView({
            events: this.events,
            viewDate: this.viewDate,
            weekStartsOn: this.weekStartsOn,
            excluded: this.excludeDays,
            hourSegments: this.hourSegments,
            segmentHeight: SEGMENT_HEIGHT,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
    };
    NovoCalendarWeekViewElement.prototype.refreshHourGrid = function () {
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        // if (this.hourSegmentModifier) {
        //   this.hours.forEach(hour => {
        //     hour.segments.forEach(segment => this.hourSegmentModifier(segment));
        //   });
        // }
    };
    NovoCalendarWeekViewElement.prototype.refreshAll = function () {
        this.refreshHeader();
        this.refreshHourGrid();
        this.refreshBody();
    };
    NovoCalendarWeekViewElement.ɵfac = function NovoCalendarWeekViewElement_Factory(t) { return new (t || NovoCalendarWeekViewElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
    NovoCalendarWeekViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarWeekViewElement, selectors: [["novo-calendar-week"]], inputs: { viewDate: "viewDate", events: "events", excludeDays: "excludeDays", refresh: "refresh", locale: "locale", tooltipPosition: "tooltipPosition", weekStartsOn: "weekStartsOn", headerTemplate: "headerTemplate", eventTemplate: "eventTemplate", precision: "precision", hourSegments: "hourSegments", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", hourSegmentTemplate: "hourSegmentTemplate" }, outputs: { hourSegmentClicked: "hourSegmentClicked", dayClicked: "dayClicked", eventClicked: "eventClicked", eventTimesChanged: "eventTimesChanged" }, features: [ɵɵNgOnChangesFeature], decls: 5, vars: 5, consts: [[1, "cal-week-view"], ["weekViewContainer", ""], [3, "days", "locale", "customTemplate", "dayClicked"], [4, "ngFor", "ngForOf"], ["class", "cal-hour", 3, "minWidth", 4, "ngFor", "ngForOf"], ["eventRowContainer", ""], ["class", "cal-event-container", 3, "width", "marginTop", "height", "marginLeft", 4, "ngFor", "ngForOf"], [1, "cal-event-container"], ["event", ""], [3, "weekEvent", "tooltipPosition", "customTemplate", "eventClicked"], [1, "cal-hour"], [3, "segment", "locale", "customTemplate", "click", 4, "ngFor", "ngForOf"], [3, "segment", "locale", "customTemplate", "click"]], template: function NovoCalendarWeekViewElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0, 1);
            ɵɵelementStart(2, "novo-calendar-week-header", 2);
            ɵɵlistener("dayClicked", function NovoCalendarWeekViewElement_Template_novo_calendar_week_header_dayClicked_2_listener($event) { return ctx.dayClicked.emit($event); });
            ɵɵelementEnd();
            ɵɵtemplate(3, NovoCalendarWeekViewElement_div_3_Template, 3, 1, "div", 3);
            ɵɵtemplate(4, NovoCalendarWeekViewElement_div_4_Template, 2, 3, "div", 4);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("days", ctx.days)("locale", ctx.locale)("customTemplate", ctx.headerTemplate);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.eventRows);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.hours);
        } }, directives: [NovoCalendarWeekHeaderElement, NgForOf, NovoCalendarWeekEventElement, NovoCalendarHourSegmentElement], encapsulation: 2 });
    return NovoCalendarWeekViewElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarWeekViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-week',
                template: "\n    <div class=\"cal-week-view\" #weekViewContainer>\n      <novo-calendar-week-header\n        [days]=\"days\"\n        [locale]=\"locale\"\n        [customTemplate]=\"headerTemplate\"\n        (dayClicked)=\"dayClicked.emit($event)\">\n      </novo-calendar-week-header>\n      <div *ngFor=\"let eventRow of eventRows\" #eventRowContainer>\n        <div\n          class=\"cal-event-container\"\n          #event\n          *ngFor=\"let weekEvent of eventRow.row\"\n          [style.width]=\"((100 / days.length) * weekEvent.span) + '%'\"\n          [style.marginTop.px]=\"weekEvent.top\"\n          [style.height.px]=\"weekEvent.height\"\n          [style.marginLeft]=\"((100 / days.length) * weekEvent.offset) + '%'\">\n          <novo-calendar-week-event\n            [weekEvent]=\"weekEvent\"\n            [tooltipPosition]=\"tooltipPosition\"\n            [customTemplate]=\"eventTemplate\"\n            (eventClicked)=\"eventClicked.emit($event)\">\n          </novo-calendar-week-event>\n        </div>\n      </div>\n      <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"70\">\n        <novo-calendar-day-hour-segment\n          *ngFor=\"let segment of hour.segments\"\n          [segment]=\"segment\"\n          [locale]=\"locale\"\n          [customTemplate]=\"hourSegmentTemplate\"\n          (click)=\"hourSegmentClicked.emit({date: segment.date})\">\n        </novo-calendar-day-hour-segment>\n      </div>\n    </div>\n  ",
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { viewDate: [{
            type: Input
        }], events: [{
            type: Input
        }], excludeDays: [{
            type: Input
        }], refresh: [{
            type: Input
        }], locale: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], weekStartsOn: [{
            type: Input
        }], headerTemplate: [{
            type: Input
        }], eventTemplate: [{
            type: Input
        }], precision: [{
            type: Input
        }], hourSegments: [{
            type: Input
        }], dayStartHour: [{
            type: Input
        }], dayStartMinute: [{
            type: Input
        }], dayEndHour: [{
            type: Input
        }], dayEndMinute: [{
            type: Input
        }], hourSegmentTemplate: [{
            type: Input
        }], hourSegmentClicked: [{
            type: Output
        }], dayClicked: [{
            type: Output
        }], eventClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }] }); })();

function NovoCalendarAllDayEventElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 2);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵstyleProp("background-color", ctx_r1.event.color.secondary)("border-color", ctx_r1.event.color.primary);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.event.title, " ");
} }
function NovoCalendarAllDayEventElement_ng_template_2_Template(rf, ctx) { }
var _c0$8 = function (a0, a1) { return { event: a0, eventClicked: a1 }; };
var NovoCalendarAllDayEventElement = /** @class */ (function () {
    function NovoCalendarAllDayEventElement() {
        this.eventClicked = new EventEmitter();
    }
    NovoCalendarAllDayEventElement.ɵfac = function NovoCalendarAllDayEventElement_Factory(t) { return new (t || NovoCalendarAllDayEventElement)(); };
    NovoCalendarAllDayEventElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarAllDayEventElement, selectors: [["novo-calendar-all-day-event"]], inputs: { event: "event", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 5, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-all-day-event"]], template: function NovoCalendarAllDayEventElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarAllDayEventElement_ng_template_0_Template, 2, 5, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarAllDayEventElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$8, ctx.event, ctx.eventClicked));
        } }, directives: [NgTemplateOutlet], encapsulation: 2 });
    return NovoCalendarAllDayEventElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarAllDayEventElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-all-day-event',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-all-day-event\"\n        [style.backgroundColor]=\"event.color.secondary\"\n        [style.borderColor]=\"event.color.primary\">\n        {{event.title}}\n        <!--<novo-calendar-event-title\n          [event]=\"event\"\n          view=\"day\"\n          (click)=\"eventClicked.emit()\">\n        </novo-calendar-event-title>\n        <novo-calendar-event-actions [event]=\"event\"></novo-calendar-event-actions>-->\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{\n        event: event,\n        eventClicked: eventClicked\n      }\">\n    </ng-template>\n  ",
            }]
    }], null, { event: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

function NovoCalendarDayEventElement_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoCalendarDayEventElement_ng_template_0_Template_div_click_0_listener() { ɵɵrestoreView(_r4); var ctx_r3 = ɵɵnextContext(); return ctx_r3.eventClicked.emit({ event: ctx_r3.dayEvent.event }); });
    ɵɵelement(1, "div", 3);
    ɵɵelementStart(2, "div", 4);
    ɵɵelementStart(3, "div", 5);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "div", 6);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵstyleProp("border-color", ctx_r1.dayEvent.event.color.secondary);
    ɵɵclassProp("cal-starts-within-day", !ctx_r1.dayEvent.startsBeforeDay)("cal-ends-within-day", !ctx_r1.dayEvent.endsAfterDay);
    ɵɵproperty("ngClass", ctx_r1.dayEvent.event.cssClass)("tooltip", ctx_r1.dayEvent.event.description)("tooltipPosition", ctx_r1.tooltipPosition);
    ɵɵadvance(1);
    ɵɵstyleProp("background-color", ctx_r1.dayEvent.event.color.primary);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.dayEvent.event.title);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.dayEvent.event == null ? null : ctx_r1.dayEvent.event.description);
} }
function NovoCalendarDayEventElement_ng_template_2_Template(rf, ctx) { }
var _c0$9 = function (a0, a1, a2) { return { dayEvent: a0, tooltipPosition: a1, eventClicked: a2 }; };
var NovoCalendarDayEventElement = /** @class */ (function () {
    function NovoCalendarDayEventElement() {
        this.eventClicked = new EventEmitter();
    }
    NovoCalendarDayEventElement.ɵfac = function NovoCalendarDayEventElement_Factory(t) { return new (t || NovoCalendarDayEventElement)(); };
    NovoCalendarDayEventElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarDayEventElement, selectors: [["novo-calendar-day-event"]], inputs: { dayEvent: "dayEvent", tooltipPosition: "tooltipPosition", customTemplate: "customTemplate" }, outputs: { eventClicked: "eventClicked" }, decls: 3, vars: 6, consts: [["defaultTemplate", ""], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "cal-event", 3, "ngClass", "tooltip", "tooltipPosition", "click"], [1, "cal-event-ribbon"], [1, "cal-event-group"], [1, "cal-event-title"], [1, "cal-event-description"]], template: function NovoCalendarDayEventElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCalendarDayEventElement_ng_template_0_Template, 7, 13, "ng-template", null, 0, ɵɵtemplateRefExtractor);
            ɵɵtemplate(2, NovoCalendarDayEventElement_ng_template_2_Template, 0, 0, "ng-template", 1);
        } if (rf & 2) {
            var _r0 = ɵɵreference(1);
            ɵɵadvance(2);
            ɵɵproperty("ngTemplateOutlet", ctx.customTemplate || _r0)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$9, ctx.dayEvent, ctx.tooltipPosition, ctx.eventClicked));
        } }, directives: [NgTemplateOutlet, NgClass, TooltipDirective], encapsulation: 2 });
    return NovoCalendarDayEventElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarDayEventElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-day-event',
                template: "\n    <ng-template #defaultTemplate>\n      <div\n        class=\"cal-event\"\n        [style.borderColor]=\"dayEvent.event.color.secondary\"\n        [class.cal-starts-within-day]=\"!dayEvent.startsBeforeDay\"\n        [class.cal-ends-within-day]=\"!dayEvent.endsAfterDay\"\n        [ngClass]=\"dayEvent.event.cssClass\"\n        [tooltip]=\"dayEvent.event.description\"\n        [tooltipPosition]=\"tooltipPosition\"\n        (click)=\"eventClicked.emit({event: dayEvent.event})\">\n          <div class=\"cal-event-ribbon\" [style.backgroundColor]=\"dayEvent.event.color.primary\"></div>\n          <div class=\"cal-event-group\">\n            <div class=\"cal-event-title\">{{dayEvent.event.title}}</div>\n            <div class=\"cal-event-description\">{{dayEvent.event?.description}}</div>\n          </div>\n      </div>\n    </ng-template>\n    <ng-template\n      [ngTemplateOutlet]=\"customTemplate || defaultTemplate\"\n      [ngTemplateOutletContext]=\"{dayEvent: dayEvent, tooltipPosition: tooltipPosition, eventClicked: eventClicked}\">\n    </ng-template>\n  ",
            }]
    }], null, { dayEvent: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], customTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }] }); })();

function NovoCalendarDayViewElement_novo_calendar_all_day_event_2_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-all-day-event", 7);
    ɵɵlistener("eventClicked", function NovoCalendarDayViewElement_novo_calendar_all_day_event_2_Template_novo_calendar_all_day_event_eventClicked_0_listener() { ɵɵrestoreView(_r6); var event_r4 = ctx.$implicit; var ctx_r5 = ɵɵnextContext(); return ctx_r5.eventClicked.emit({ event: event_r4 }); });
    ɵɵelementEnd();
} if (rf & 2) {
    var event_r4 = ctx.$implicit;
    var ctx_r1 = ɵɵnextContext();
    ɵɵproperty("event", event_r4)("customTemplate", ctx_r1.allDayEventTemplate);
} }
function NovoCalendarDayViewElement_div_5_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8, 9);
    ɵɵelementStart(2, "novo-calendar-day-event", 10);
    ɵɵlistener("eventClicked", function NovoCalendarDayViewElement_div_5_Template_novo_calendar_day_event_eventClicked_2_listener($event) { ɵɵrestoreView(_r10); var ctx_r9 = ɵɵnextContext(); return ctx_r9.eventClicked.emit($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var dayEvent_r7 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext();
    ɵɵstyleProp("margin-top", dayEvent_r7.top, "px")("height", dayEvent_r7.height, "px")("margin-left", dayEvent_r7.left + 70, "px")("width", dayEvent_r7.width - 1, "px");
    ɵɵadvance(2);
    ɵɵproperty("dayEvent", dayEvent_r7)("tooltipPosition", ctx_r2.tooltipPosition)("customTemplate", ctx_r2.eventTemplate);
} }
function NovoCalendarDayViewElement_div_6_novo_calendar_day_hour_segment_1_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-calendar-day-hour-segment", 13);
    ɵɵlistener("click", function NovoCalendarDayViewElement_div_6_novo_calendar_day_hour_segment_1_Template_novo_calendar_day_hour_segment_click_0_listener() { ɵɵrestoreView(_r15); var segment_r13 = ctx.$implicit; var ctx_r14 = ɵɵnextContext(2); return ctx_r14.hourSegmentClicked.emit({ date: segment_r13.date }); });
    ɵɵelementEnd();
} if (rf & 2) {
    var segment_r13 = ctx.$implicit;
    var ctx_r12 = ɵɵnextContext(2);
    ɵɵproperty("segment", segment_r13)("locale", ctx_r12.locale)("customTemplate", ctx_r12.hourSegmentTemplate);
} }
function NovoCalendarDayViewElement_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 11);
    ɵɵtemplate(1, NovoCalendarDayViewElement_div_6_novo_calendar_day_hour_segment_1_Template, 1, 3, "novo-calendar-day-hour-segment", 12);
    ɵɵelementEnd();
} if (rf & 2) {
    var hour_r11 = ctx.$implicit;
    var ctx_r3 = ɵɵnextContext();
    ɵɵstyleProp("min-width", (ctx_r3.view == null ? null : ctx_r3.view.width) + 70, "px");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", hour_r11.segments);
} }
/**
 * @hidden
 */
var SEGMENT_HEIGHT$1 = 30;
/**
 * @hidden
 */
var MINUTES_IN_HOUR$2 = 60;
/**
 * Shows all events on a given day. Example usage:
 *
 * ```typescript
 * &lt;novo-calendar-day
 *  [viewDate]="viewDate"
 *  [events]="events"&gt;
 * &lt;/novo-calendar-day&gt;
 * ```
 */
var NovoCalendarDayViewElement = /** @class */ (function () {
    /**
     * @hidden
     */
    function NovoCalendarDayViewElement(cdr, locale) {
        this.cdr = cdr;
        /**
         * An array of events to display on view
         */
        this.events = [];
        /**
         * The number of segments in an hour. Must be <= 6
         */
        this.hourSegments = 2;
        /**
         * The day start hours in 24 hour time. Must be 0-23
         */
        this.dayStartHour = 0;
        /**
         * The day start minutes. Must be 0-59
         */
        this.dayStartMinute = 0;
        /**
         * The day end hours in 24 hour time. Must be 0-23
         */
        this.dayEndHour = 23;
        /**
         * The day end minutes. Must be 0-59
         */
        this.dayEndMinute = 59;
        /**
         * The width in pixels of each event on the view
         */
        this.eventWidth = 150;
        /**
         * The grid size to snap resizing and dragging of events to
         */
        this.eventSnapSize = 30;
        /**
         * The placement of the event tooltip
         */
        this.tooltipPosition = 'top';
        /**
         * Called when an event title is clicked
         */
        this.eventClicked = new EventEmitter();
        /**
         * Called when an hour segment is clicked
         */
        this.hourSegmentClicked = new EventEmitter();
        /**
         * Called when an event is resized or dragged and dropped
         */
        this.eventTimesChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.hours = [];
        /**
         * @hidden
         */
        this.width = 0;
        this.locale = locale;
    }
    /**
     * @hidden
     */
    NovoCalendarDayViewElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.refresh) {
            this.refreshSubscription = this.refresh.subscribe(function () {
                _this.refreshAll();
                _this.cdr.detectChanges();
            });
        }
    };
    /**
     * @hidden
     */
    NovoCalendarDayViewElement.prototype.ngOnDestroy = function () {
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
    };
    /**
     * @hidden
     */
    NovoCalendarDayViewElement.prototype.ngOnChanges = function (changes) {
        if (changes.viewDate || changes.dayStartHour || changes.dayStartMinute || changes.dayEndHour || changes.dayEndMinute) {
            this.refreshHourGrid();
        }
        if (changes.viewDate ||
            changes.events ||
            changes.dayStartHour ||
            changes.dayStartMinute ||
            changes.dayEndHour ||
            changes.dayEndMinute ||
            changes.eventWidth) {
            this.refreshView();
        }
    };
    /*
      eventDropped(dropEvent: {dropData?: {event?: CalendarEvent}}, segment: DayViewHourSegment): void {
        if (dropEvent.dropData && dropEvent.dropData.event) {
          this.eventTimesChanged.emit({event: dropEvent.dropData.event, newStart: segment.date});
        }
      }
  
      resizeStarted(event: DayViewEvent, resizeEvent: ResizeEvent, dayViewContainer: HTMLElement): void {
        this.currentResize = {
          originalTop: event.top,
          originalHeight: event.height,
          edge: typeof resizeEvent.edges.top !== 'undefined' ? 'top' : 'bottom'
        };
        const resizeHelper: CalendarResizeHelper = new CalendarResizeHelper(dayViewContainer);
        this.validateResize = ({rectangle}) => resizeHelper.validateResize({rectangle});
        this.cdr.detectChanges();
      }
  
      resizing(event: DayViewEvent, resizeEvent: ResizeEvent): void {
        if (resizeEvent.edges.top) {
          event.top = this.currentResize.originalTop + +resizeEvent.edges.top;
          event.height = this.currentResize.originalHeight - +resizeEvent.edges.top;
        } else if (resizeEvent.edges.bottom) {
          event.height = this.currentResize.originalHeight + +resizeEvent.edges.bottom;
        }
      }
  
      resizeEnded(dayEvent: DayViewEvent): void {
  
        let pixelsMoved: number;
        if (this.currentResize.edge === 'top') {
          pixelsMoved = (dayEvent.top - this.currentResize.originalTop);
        } else {
          pixelsMoved = (dayEvent.height - this.currentResize.originalHeight);
        }
  
        dayEvent.top = this.currentResize.originalTop;
        dayEvent.height = this.currentResize.originalHeight;
  
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = pixelsMoved * pixelAmountInMinutes;
        let newStart: Date = dayEvent.event.start;
        let newEnd: Date = dayEvent.event.end;
        if (this.currentResize.edge === 'top') {
          newStart = addMinutes(newStart, minutesMoved);
        } else if (newEnd) {
          newEnd = addMinutes(newEnd, minutesMoved);
        }
  
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
        this.currentResize = null;
  
      }
  
      dragStart(event: HTMLElement, dayViewContainer: HTMLElement): void {
        const dragHelper: CalendarDragHelper = new CalendarDragHelper(dayViewContainer, event);
        this.validateDrag = ({x, y}) => !this.currentResize && dragHelper.validateDrag({x, y});
        this.cdr.detectChanges();
      }
  
      eventDragged(dayEvent: DayViewEvent, draggedInPixels: number): void {
        const pixelAmountInMinutes: number = MINUTES_IN_HOUR / (this.hourSegments * SEGMENT_HEIGHT);
        const minutesMoved: number = draggedInPixels * pixelAmountInMinutes;
        const newStart: Date = addMinutes(dayEvent.event.start, minutesMoved);
        let newEnd: Date;
        if (dayEvent.event.end) {
          newEnd = addMinutes(dayEvent.event.end, minutesMoved);
        }
        this.eventTimesChanged.emit({newStart, newEnd, event: dayEvent.event});
      }
      */
    NovoCalendarDayViewElement.prototype.refreshHourGrid = function () {
        var _this = this;
        this.hours = getDayViewHourGrid({
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
        });
        if (this.hourSegmentModifier) {
            this.hours.forEach(function (hour) {
                hour.segments.forEach(function (segment) { return _this.hourSegmentModifier(segment); });
            });
        }
    };
    NovoCalendarDayViewElement.prototype.refreshView = function () {
        this.view = getDayView({
            events: this.events,
            viewDate: this.viewDate,
            hourSegments: this.hourSegments,
            dayStart: {
                hour: this.dayStartHour,
                minute: this.dayStartMinute,
            },
            dayEnd: {
                hour: this.dayEndHour,
                minute: this.dayEndMinute,
            },
            eventWidth: this.eventWidth,
            segmentHeight: SEGMENT_HEIGHT$1,
        });
    };
    NovoCalendarDayViewElement.prototype.refreshAll = function () {
        this.refreshHourGrid();
        this.refreshView();
    };
    NovoCalendarDayViewElement.ɵfac = function NovoCalendarDayViewElement_Factory(t) { return new (t || NovoCalendarDayViewElement)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
    NovoCalendarDayViewElement.ɵcmp = ɵɵdefineComponent({ type: NovoCalendarDayViewElement, selectors: [["novo-calendar-day"]], inputs: { viewDate: "viewDate", events: "events", hourSegments: "hourSegments", dayStartHour: "dayStartHour", dayStartMinute: "dayStartMinute", dayEndHour: "dayEndHour", dayEndMinute: "dayEndMinute", eventWidth: "eventWidth", refresh: "refresh", locale: "locale", hourSegmentModifier: "hourSegmentModifier", eventSnapSize: "eventSnapSize", tooltipPosition: "tooltipPosition", hourSegmentTemplate: "hourSegmentTemplate", allDayEventTemplate: "allDayEventTemplate", eventTemplate: "eventTemplate" }, outputs: { eventClicked: "eventClicked", hourSegmentClicked: "hourSegmentClicked", eventTimesChanged: "eventTimesChanged" }, features: [ɵɵNgOnChangesFeature], decls: 7, vars: 3, consts: [[1, "cal-day-view"], ["dayViewContainer", ""], [3, "event", "customTemplate", "eventClicked", 4, "ngFor", "ngForOf"], [1, "cal-hour-rows"], [1, "cal-events"], ["class", "cal-event-container", 3, "marginTop", "height", "marginLeft", "width", 4, "ngFor", "ngForOf"], ["class", "cal-hour", 3, "minWidth", 4, "ngFor", "ngForOf"], [3, "event", "customTemplate", "eventClicked"], [1, "cal-event-container"], ["event", ""], [3, "dayEvent", "tooltipPosition", "customTemplate", "eventClicked"], [1, "cal-hour"], [3, "segment", "locale", "customTemplate", "click", 4, "ngFor", "ngForOf"], [3, "segment", "locale", "customTemplate", "click"]], template: function NovoCalendarDayViewElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0, 1);
            ɵɵtemplate(2, NovoCalendarDayViewElement_novo_calendar_all_day_event_2_Template, 1, 2, "novo-calendar-all-day-event", 2);
            ɵɵelementStart(3, "div", 3);
            ɵɵelementStart(4, "div", 4);
            ɵɵtemplate(5, NovoCalendarDayViewElement_div_5_Template, 3, 11, "div", 5);
            ɵɵelementEnd();
            ɵɵtemplate(6, NovoCalendarDayViewElement_div_6_Template, 2, 3, "div", 6);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx.view.allDayEvents);
            ɵɵadvance(3);
            ɵɵproperty("ngForOf", ctx.view == null ? null : ctx.view.events);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.hours);
        } }, directives: [NgForOf, NovoCalendarAllDayEventElement, NovoCalendarDayEventElement, NovoCalendarHourSegmentElement], encapsulation: 2 });
    return NovoCalendarDayViewElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarDayViewElement, [{
        type: Component,
        args: [{
                selector: 'novo-calendar-day',
                template: "\n    <div class=\"cal-day-view\" #dayViewContainer>\n      <novo-calendar-all-day-event\n        *ngFor=\"let event of view.allDayEvents\"\n        [event]=\"event\"\n        [customTemplate]=\"allDayEventTemplate\"\n        (eventClicked)=\"eventClicked.emit({event: event})\">\n      </novo-calendar-all-day-event>\n      <div class=\"cal-hour-rows\">\n        <div class=\"cal-events\">\n          <div\n            #event\n            *ngFor=\"let dayEvent of view?.events\"\n            class=\"cal-event-container\"\n            [style.marginTop.px]=\"dayEvent.top\"\n            [style.height.px]=\"dayEvent.height\"\n            [style.marginLeft.px]=\"dayEvent.left + 70\"\n            [style.width.px]=\"dayEvent.width - 1\">\n            <novo-calendar-day-event\n              [dayEvent]=\"dayEvent\"\n              [tooltipPosition]=\"tooltipPosition\"\n              [customTemplate]=\"eventTemplate\"\n              (eventClicked)=\"eventClicked.emit($event)\">\n            </novo-calendar-day-event>\n          </div>\n        </div>\n        <div class=\"cal-hour\" *ngFor=\"let hour of hours\" [style.minWidth.px]=\"view?.width + 70\">\n          <novo-calendar-day-hour-segment\n            *ngFor=\"let segment of hour.segments\"\n            [segment]=\"segment\"\n            [locale]=\"locale\"\n            [customTemplate]=\"hourSegmentTemplate\"\n            (click)=\"hourSegmentClicked.emit({date: segment.date})\">\n          </novo-calendar-day-hour-segment>\n        </div>\n      </div>\n    </div>\n  ",
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { viewDate: [{
            type: Input
        }], events: [{
            type: Input
        }], hourSegments: [{
            type: Input
        }], dayStartHour: [{
            type: Input
        }], dayStartMinute: [{
            type: Input
        }], dayEndHour: [{
            type: Input
        }], dayEndMinute: [{
            type: Input
        }], eventWidth: [{
            type: Input
        }], refresh: [{
            type: Input
        }], locale: [{
            type: Input
        }], hourSegmentModifier: [{
            type: Input
        }], eventSnapSize: [{
            type: Input
        }], tooltipPosition: [{
            type: Input
        }], hourSegmentTemplate: [{
            type: Input
        }], allDayEventTemplate: [{
            type: Input
        }], eventTemplate: [{
            type: Input
        }], eventClicked: [{
            type: Output
        }], hourSegmentClicked: [{
            type: Output
        }], eventTimesChanged: [{
            type: Output
        }] }); })();

// NG2
var NovoCalendarModule = /** @class */ (function () {
    function NovoCalendarModule() {
    }
    NovoCalendarModule.ɵmod = ɵɵdefineNgModule({ type: NovoCalendarModule });
    NovoCalendarModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCalendarModule_Factory(t) { return new (t || NovoCalendarModule)(); }, imports: [[CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule]] });
    return NovoCalendarModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCalendarModule, { declarations: [NovoEventTypeLegendElement,
        NovoCalendarMonthViewElement,
        NovoCalendarMonthHeaderElement,
        NovoCalendarMonthDayElement,
        NovoCalendarWeekViewElement,
        NovoCalendarWeekHeaderElement,
        NovoCalendarWeekEventElement,
        NovoCalendarDayViewElement,
        NovoCalendarDayEventElement,
        NovoCalendarHourSegmentElement,
        NovoCalendarAllDayEventElement,
        NovoCalendarDateChangeElement,
        WeekdayPipe,
        DayOfMonthPipe,
        MonthPipe,
        MonthDayPipe,
        YearPipe,
        HoursPipe,
        EndOfWeekDisplayPipe], imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule], exports: [NovoEventTypeLegendElement,
        NovoCalendarMonthViewElement,
        NovoCalendarMonthHeaderElement,
        NovoCalendarMonthDayElement,
        NovoCalendarWeekViewElement,
        NovoCalendarWeekHeaderElement,
        NovoCalendarWeekEventElement,
        NovoCalendarDayViewElement,
        NovoCalendarDayEventElement,
        NovoCalendarHourSegmentElement,
        NovoCalendarAllDayEventElement,
        NovoCalendarDateChangeElement,
        WeekdayPipe,
        DayOfMonthPipe,
        MonthPipe,
        MonthDayPipe,
        YearPipe,
        HoursPipe,
        EndOfWeekDisplayPipe] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCalendarModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule, NovoTooltipModule, NovoPipesModule],
                declarations: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe,
                ],
                exports: [
                    NovoEventTypeLegendElement,
                    NovoCalendarMonthViewElement,
                    NovoCalendarMonthHeaderElement,
                    NovoCalendarMonthDayElement,
                    NovoCalendarWeekViewElement,
                    NovoCalendarWeekHeaderElement,
                    NovoCalendarWeekEventElement,
                    NovoCalendarDayViewElement,
                    NovoCalendarDayEventElement,
                    NovoCalendarHourSegmentElement,
                    NovoCalendarAllDayEventElement,
                    NovoCalendarDateChangeElement,
                    WeekdayPipe,
                    DayOfMonthPipe,
                    MonthPipe,
                    MonthDayPipe,
                    YearPipe,
                    HoursPipe,
                    EndOfWeekDisplayPipe,
                ],
            }]
    }], null, null); })();

// NG2
var NovoLabelService = /** @class */ (function () {
    function NovoLabelService(userLocale) {
        if (userLocale === void 0) { userLocale = 'en-US'; }
        this.userLocale = userLocale;
        this.filters = 'Filter';
        this.clear = 'Clear';
        this.sort = 'Sort';
        this.distributionListOwner = 'Owner';
        this.dateAdded = 'Date Added';
        this.emptyTableMessage = 'No Records to display...';
        this.noMatchingRecordsMessage = 'No Matching Records';
        this.erroredTableMessage = 'Oops! An error occurred.';
        this.pickerError = 'Oops! An error occurred.';
        this.pickerTextFieldEmpty = 'Begin typing to see results.';
        this.pickerEmpty = 'No results to display...';
        this.tabbedGroupPickerEmpty = 'No results found';
        this.quickNoteError = 'Oops! An error occurred.';
        this.quickNoteEmpty = 'No results to display...';
        this.required = 'Required';
        this.numberTooLarge = 'Number is too large';
        this.save = 'Save';
        this.cancel = 'Cancel';
        this.next = 'Next';
        this.itemsPerPage = 'Items per page:';
        this.select = 'Select...';
        this.selected = 'Selected';
        this.selectAllOnPage = 'Select all on page';
        this.deselectAll = 'Deselect all';
        this.refresh = 'Refresh';
        this.close = 'Close';
        this.move = 'Move';
        this.startDate = 'Start Date';
        this.endDate = 'End Date';
        this.rate = 'Rate';
        this.more = 'more';
        this.clearAll = 'CLEAR ALL';
        this.clearAllNormalCase = 'Clear All';
        this.clearSort = 'Clear Sort';
        this.clearFilter = 'Clear Filter';
        this.today = 'Today';
        this.now = 'Now';
        this.isRequired = 'is required';
        this.notValidYear = 'is not a valid year';
        this.isTooLarge = 'is too large';
        this.invalidAddress = 'requires at least one field filled out';
        this.invalidEmail = 'requires a valid email (ex. abc@123.com)';
        this.minLength = 'is required to be a minimum length of';
        this.past1Day = 'Past 1 Day';
        this.past7Days = 'Past 7 Days';
        this.past30Days = 'Past 30 Days';
        this.past90Days = 'Past 90 Days';
        this.past1Year = 'Past 1 Year';
        this.next1Day = 'Next 1 Day';
        this.next7Days = 'Next 7 Days';
        this.next30Days = 'Next 30 Days';
        this.next90Days = 'Next 90 Days';
        this.next1Year = 'Next 1 Year';
        this.customDateRange = 'Custom Date Range';
        this.backToPresetFilters = 'Back to Preset Filters';
        this.okGotIt = 'Ok, Got it';
        this.address = 'Address';
        this.address1 = 'Address';
        this.apt = 'Apt'; // TODO delete
        this.address2 = 'Apt';
        this.city = 'City / Locality';
        this.state = 'State / Region';
        this.zip = 'Postal Code';
        this.zipCode = 'Postal Code'; // TODO delete
        this.country = 'Country';
        this.or = 'or';
        this.clickToBrowse = 'click to browse';
        this.chooseAFile = 'Choose a file';
        this.no = 'No';
        this.yes = 'Yes';
        this.search = 'SEARCH';
        this.noItems = 'There are no items';
        this.dateFormat = 'MM/dd/yyyy';
        this.dateFormatPlaceholder = 'MM/DD/YYYY';
        this.timeFormatPlaceholderAM = 'hh:mm AM';
        this.timeFormatPlaceholder24Hour = 'HH:mm';
        this.timeFormatAM = 'AM';
        this.timeFormatPM = 'PM';
        this.confirmChangesModalMessage = 'Are you sure you want to change this field?';
        this.promptModalMessage = 'Do you want to perform the following changes?';
        this.asyncFailure = 'Async validation was not called within the 10s threshold, you might want to reload the page to try again';
        this.previous = 'Previous';
        this.actions = 'Actions';
        this.all = 'All';
        this.groupedMultiPickerEmpty = 'No items to display';
        this.groupedMultiPickerSelectCategory = 'Select a category from the right to get started';
        this.add = 'Add';
        this.encryptedFieldTooltip = 'This data has been stored at the highest level of security';
        this.noStatesForCountry = 'No states available for the selected country';
        this.selectCountryFirst = 'Please select a country before selecting a state';
        this.invalidIntegerInput = 'Special characters are not allowed for';
        this.maxRecordsReached = 'Sorry, you have reached the maximum number of records allowed for this field';
        this.selectFilterOptions = 'Please select one or more filter options below.';
    }
    NovoLabelService.prototype.maxlengthMetWithField = function (field, maxlength) {
        return "Sorry, you have reached the maximum character count of " + maxlength + " for " + field + ".";
    };
    NovoLabelService.prototype.maxlengthMet = function (maxlength) {
        return "Sorry, you have reached the maximum character count of " + maxlength + " for this field.";
    };
    NovoLabelService.prototype.invalidMaxlengthWithField = function (field, maxlength) {
        return "Sorry, you have exceeded the maximum character count of " + maxlength + " for " + field + ".";
    };
    NovoLabelService.prototype.invalidMaxlength = function (maxlength) {
        return "Sorry, you have exceeded the maximum character count of " + maxlength + " for this field.";
    };
    NovoLabelService.prototype.getToManyPlusMore = function (toMany) {
        return "+" + toMany.quantity + " more";
    };
    NovoLabelService.prototype.selectedRecords = function (selected) {
        return selected + " records are selected.";
    };
    NovoLabelService.prototype.showingXofXResults = function (shown, total) {
        return "Showing " + shown + " of " + total + " Results.";
    };
    NovoLabelService.prototype.totalRecords = function (total, select) {
        if (select === void 0) { select = false; }
        return select ? "Select all " + total + " records." : "De-select remaining " + total + " records.";
    };
    NovoLabelService.prototype.dateFormatString = function () {
        return this.dateFormat;
    };
    NovoLabelService.prototype.tabbedGroupClearSuggestion = function (tabLabelPlural) {
        return "Clear your search to see all " + tabLabelPlural + ".";
    };
    NovoLabelService.prototype.formatDateWithFormat = function (value, format) {
        var date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        return new Intl.DateTimeFormat(this.userLocale, format).format(date);
    };
    NovoLabelService.prototype.formatToTimeOnly = function (param) { };
    NovoLabelService.prototype.formatToDateOnly = function (param) { };
    NovoLabelService.prototype.formatTimeWithFormat = function (value, format) {
        var date = value instanceof Date ? value : new Date(value);
        if (date.getTime() !== date.getTime()) {
            return value;
        }
        var timeParts = Intl.DateTimeFormat(this.userLocale, format)
            .formatToParts(date)
            .reduce(function (obj, part) {
            obj[part.type] = part.value;
            return obj;
        }, {});
        var dayperiod = timeParts.dayperiod ? timeParts.dayperiod : '';
        return timeParts.hour + ":" + timeParts.minute + dayperiod;
    };
    NovoLabelService.prototype.getWeekdays = function () {
        var _this = this;
        function getDay(dayOfWeek) {
            var dt = new Date();
            return dt.setDate(dt.getDate() - dt.getDay() + dayOfWeek);
        }
        return [getDay(0), getDay(1), getDay(2), getDay(3), getDay(4), getDay(5), getDay(6)].reduce(function (weekdays, dt) {
            weekdays.push(new Intl.DateTimeFormat(_this.userLocale, { weekday: 'long' }).format(dt));
            return weekdays;
        }, []);
    };
    NovoLabelService.prototype.getMonths = function () {
        var _this = this;
        function getMonth(month) {
            var dt = new Date();
            return dt.setMonth(month, 1);
        }
        return [
            getMonth(0),
            getMonth(1),
            getMonth(2),
            getMonth(3),
            getMonth(4),
            getMonth(5),
            getMonth(6),
            getMonth(7),
            getMonth(8),
            getMonth(9),
            getMonth(10),
            getMonth(11),
        ].reduce(function (months, dt) {
            months.push(new Intl.DateTimeFormat(_this.userLocale, { month: 'long' }).format(dt));
            return months;
        }, []);
    };
    NovoLabelService.prototype.getProperty = function (value) {
        return this[value];
    };
    NovoLabelService.prototype.getRangeText = function (page, pageSize, length, short) {
        if (length === 0 || pageSize === 0) {
            return "Displaying 0 of " + length;
        }
        length = Math.max(length, 0);
        var startIndex = page * pageSize;
        // If the start index exceeds the list length, do not try and fix the end index to the end.
        var endIndex = startIndex < length ? Math.min(startIndex + pageSize, length) : startIndex + pageSize;
        return short ? startIndex + 1 + " - " + endIndex + "/" + length : "Displaying " + (startIndex + 1) + " - " + endIndex + " of " + length;
    };
    NovoLabelService.prototype.formatCurrency = function (value) {
        var options = { style: 'currency', currency: 'USD' };
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    };
    NovoLabelService.prototype.formatBigDecimal = function (value) {
        var valueAsString = value ? value.toString() : '0';
        // truncate at two decimals (do not round)
        var decimalIndex = valueAsString.indexOf('.');
        if (decimalIndex > -1 && decimalIndex + 3 < valueAsString.length) {
            valueAsString = valueAsString.substring(0, valueAsString.indexOf('.') + 3);
        }
        // convert back to number
        var truncatedValue = Number(valueAsString);
        var options = { style: 'decimal', minimumFractionDigits: 2, maximumFractionDigits: 2 };
        var _value = new Intl.NumberFormat(this.userLocale, options).format(truncatedValue);
        if (value < 0) {
            _value = "(" + _value.slice(1) + ")";
        }
        return _value;
    };
    NovoLabelService.prototype.formatNumber = function (value, options) {
        return new Intl.NumberFormat(this.userLocale, options).format(value);
    };
    NovoLabelService.prototype.formatDateShort = function (value) {
        var options = {
            // DD/MM/YYYY, HH:MM A - 02/14/2017, 1:17 PM
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
            hour: 'numeric',
            minute: '2-digit',
        };
        var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    NovoLabelService.prototype.formatTime = function (value) {
        var options = {
            // HH:MM A - 1:17 PM
            hour: 'numeric',
            minute: '2-digit',
        };
        var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    NovoLabelService.prototype.formatDate = function (value) {
        var options = {
            // DD/MM/YYYY - 02/14/2017
            month: '2-digit',
            day: '2-digit',
            year: 'numeric',
        };
        var _value = value === null || value === undefined || value === '' ? new Date() : new Date(value);
        return new Intl.DateTimeFormat(this.userLocale, options).format(_value);
    };
    NovoLabelService.ɵfac = function NovoLabelService_Factory(t) { return new (t || NovoLabelService)(ɵɵinject(LOCALE_ID, 8)); };
    NovoLabelService.ɵprov = ɵɵdefineInjectable({ token: NovoLabelService, factory: NovoLabelService.ɵfac });
    return NovoLabelService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLabelService, [{
        type: Injectable
    }], function () { return [{ type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, null); })();
var NOVO_ELEMENTS_LABELS_PROVIDERS = [{ provide: NovoLabelService, useClass: NovoLabelService }];

var NovoLoadingElement = /** @class */ (function () {
    function NovoLoadingElement() {
    }
    NovoLoadingElement.ɵfac = function NovoLoadingElement_Factory(t) { return new (t || NovoLoadingElement)(); };
    NovoLoadingElement.ɵcmp = ɵɵdefineComponent({ type: NovoLoadingElement, selectors: [["novo-loading"]], hostVars: 2, hostBindings: function NovoLoadingElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassMap(ctx.theme || "");
        } }, inputs: { theme: "theme" }, decls: 5, vars: 0, consts: [[1, "dot"]], template: function NovoLoadingElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "span", 0);
            ɵɵelement(1, "span", 0);
            ɵɵelement(2, "span", 0);
            ɵɵelement(3, "span", 0);
            ɵɵelement(4, "span", 0);
        } }, encapsulation: 2 });
    return NovoLoadingElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLoadingElement, [{
        type: Component,
        args: [{
                selector: 'novo-loading',
                host: {
                    '[class]': 'theme || ""',
                },
                template: "\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n        <span class=\"dot\"></span>\n    ",
            }]
    }], null, { theme: [{
            type: Input
        }] }); })();
var NovoSpinnerElement = /** @class */ (function () {
    function NovoSpinnerElement() {
    }
    NovoSpinnerElement.ɵfac = function NovoSpinnerElement_Factory(t) { return new (t || NovoSpinnerElement)(); };
    NovoSpinnerElement.ɵcmp = ɵɵdefineComponent({ type: NovoSpinnerElement, selectors: [["novo-spinner"]], inputs: { theme: "theme", inverse: "inverse", baseHref: "baseHref" }, decls: 33, vars: 4, consts: [["height", "100", "width", "100", "viewBox", "0 0 100 100", "version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", 1, "bullhornSpinner", 3, "ngClass"], ["id", "gooEffect"], ["in", "SourceGraphic", "stdDeviation", "5", "result", "blur"], ["in", "blur", "mode", "matrix", "values", "\n                            1.3 0 0 0 0\n                            0 1.3 0 0 0\n                            0 0 1.3 0 0\n                            0 0 0 19 -7", "result", "gooEffect"], ["in", "SourceGraphic", "in2", "gooEffect", "operator", "atop"], ["d", "M 43 43 L 54 45 L 80 40 L 43 43", "stroke", "none", "fill", "none", "id", "firstLinePath"], ["d", "M 43 43 L 48 41 L 48 18 L 43 43", "stroke", "none", "fill", "none", "id", "secondLinePath"], ["d", "M 43 43 L 42 45 L 15 40 L 43 43", "stroke", "none", "fill", "none", "id", "thirdLinePath"], ["d", "M 43 43 L 44 52 L 29 78 L 43 43", "stroke", "none", "fill", "none", "id", "fourthLinePath"], ["d", "M 43 43 L 52 52 L 68 78 L 43 43", "stroke", "none", "fill", "none", "id", "fifthLinePath"], ["transform", "translate(7, 7)", 1, "circleGroup"], ["r", "6", "cx", "0", "cy", "0"], ["dur", "3.4", "repeatCount", "indefinite"], [0, "xlink", "href", "#firstLinePath"], [0, "xlink", "href", "#secondLinePath"], [0, "xlink", "href", "#thirdLinePath"], [0, "xlink", "href", "#fourthLinePath"], [0, "xlink", "href", "#fifthLinePath"]], template: function NovoSpinnerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵnamespaceSVG();
            ɵɵelementStart(0, "svg", 0);
            ɵɵelementStart(1, "title");
            ɵɵtext(2, "Bullhorn Spinner Animation");
            ɵɵelementEnd();
            ɵɵelementStart(3, "desc");
            ɵɵtext(4, "Spinner animation indicating loading");
            ɵɵelementEnd();
            ɵɵelementStart(5, "defs");
            ɵɵelementStart(6, "style");
            ɵɵtext(7);
            ɵɵelementEnd();
            ɵɵelementStart(8, "filter", 1);
            ɵɵelement(9, "feGaussianBlur", 2);
            ɵɵelement(10, "feColorMatrix", 3);
            ɵɵelement(11, "feComposite", 4);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelement(12, "path", 5);
            ɵɵelement(13, "path", 6);
            ɵɵelement(14, "path", 7);
            ɵɵelement(15, "path", 8);
            ɵɵelement(16, "path", 9);
            ɵɵelementStart(17, "g", 10);
            ɵɵelementStart(18, "circle", 11);
            ɵɵelementStart(19, "animateMotion", 12);
            ɵɵelement(20, "mpath", 13);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(21, "circle", 11);
            ɵɵelementStart(22, "animateMotion", 12);
            ɵɵelement(23, "mpath", 14);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(24, "circle", 11);
            ɵɵelementStart(25, "animateMotion", 12);
            ɵɵelement(26, "mpath", 15);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(27, "circle", 11);
            ɵɵelementStart(28, "animateMotion", 12);
            ɵɵelement(29, "mpath", 16);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(30, "circle", 11);
            ɵɵelementStart(31, "animateMotion", 12);
            ɵɵelement(32, "mpath", 17);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngClass", ctx.theme);
            ɵɵattribute("inverse", ctx.inverse);
            ɵɵadvance(7);
            ɵɵtextInterpolate2(" .bullhornSpinner g.circleGroup { -webkit-filter: url(\"", ctx.baseHref || "", "#gooEffect\"); filter: url(\"", ctx.baseHref || "", "#gooEffect\"); } _:-webkit-full-screen:not(:root:root), .bullhornSpinner g.circleGroup { -webkit-filter: none; filter: none; } @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) { .bullhornSpinner g.circleGroup { -webkit-filter: none; filter: none; } } @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) { .bullhornSpinner g.circleGroup { -webkit-filter: none; filter: none; } } ");
        } }, directives: [NgClass], encapsulation: 2 });
    return NovoSpinnerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSpinnerElement, [{
        type: Component,
        args: [{
                selector: 'novo-spinner',
                template: "\n        <svg class=\"bullhornSpinner\" [ngClass]=\"theme\" height=\"100\" width=\"100\" viewBox=\"0 0 100 100\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.inverse]=\"inverse\">\n            <title>Bullhorn Spinner Animation</title>\n            <desc>Spinner animation indicating loading</desc>\n            <defs>\n                <style>\n                    .bullhornSpinner g.circleGroup {\n                        -webkit-filter: url(\"{{baseHref || ''}}#gooEffect\");\n                        filter: url(\"{{baseHref || ''}}#gooEffect\");\n                    }\n                    _:-webkit-full-screen:not(:root:root), .bullhornSpinner g.circleGroup {\n                        -webkit-filter: none;\n                        filter: none;\n                    }\n                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {\n                        .bullhornSpinner g.circleGroup {\n                            -webkit-filter: none;\n                            filter: none;\n                        }\n                    }\n                    @supports (-webkit-text-size-adjust:none) and (not (-ms-accelerator:true)) and (not (-moz-appearance:none)) {\n                        .bullhornSpinner g.circleGroup {\n                            -webkit-filter: none;\n                            filter: none;\n                        }\n                    }\n                </style>\n                <filter id=\"gooEffect\">\n                    <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" result=\"blur\" />\n                    <feColorMatrix in=\"blur\" mode=\"matrix\" values=\"\n                            1.3 0 0 0 0\n                            0 1.3 0 0 0\n                            0 0 1.3 0 0\n                            0 0 0 19 -7\" result=\"gooEffect\" />\n                    <feComposite in=\"SourceGraphic\" in2=\"gooEffect\" operator=\"atop\" />\n                </filter>\n            </defs>\n            <path d=\"M 43 43 L 54 45 L 80 40 L 43 43\" stroke=\"none\" fill=\"none\" id=\"firstLinePath\"/>\n            <path d=\"M 43 43 L 48 41 L 48 18 L 43 43\" stroke=\"none\" fill=\"none\" id=\"secondLinePath\"/>\n            <path d=\"M 43 43 L 42 45 L 15 40 L 43 43\" stroke=\"none\" fill=\"none\" id=\"thirdLinePath\"/>\n            <path d=\"M 43 43 L 44 52 L 29 78 L 43 43\" stroke=\"none\" fill=\"none\" id=\"fourthLinePath\"/>\n            <path d=\"M 43 43 L 52 52 L 68 78 L 43 43\" stroke=\"none\" fill=\"none\" id=\"fifthLinePath\"/>\n            <g class=\"circleGroup\" transform=\"translate(7, 7)\">\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#firstLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#secondLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#thirdLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#fourthLinePath\"/>\n                    </animateMotion>\n                </circle>\n                <circle r=\"6\" cx=\"0\" cy=\"0\">\n                    <!-- Define the motion path animation -->\n                    <animateMotion dur=\"3.4\" repeatCount=\"indefinite\">\n                        <mpath xlink:href=\"#fifthLinePath\"/>\n                    </animateMotion>\n                </circle>\n            </g>\n        </svg>\n    ",
            }]
    }], null, { theme: [{
            type: Input
        }], inverse: [{
            type: Input
        }], baseHref: [{
            type: Input
        }] }); })();
var NovoSkeletonDirective = /** @class */ (function () {
    function NovoSkeletonDirective() {
        this.skeleton = true;
    }
    NovoSkeletonDirective.ɵfac = function NovoSkeletonDirective_Factory(t) { return new (t || NovoSkeletonDirective)(); };
    NovoSkeletonDirective.ɵdir = ɵɵdefineDirective({ type: NovoSkeletonDirective, selectors: [["", "skeleton", ""]], hostVars: 2, hostBindings: function NovoSkeletonDirective_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("skeleton", ctx.skeleton);
        } } });
    return NovoSkeletonDirective;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSkeletonDirective, [{
        type: Directive,
        args: [{
                selector: '[skeleton]',
            }]
    }], null, { skeleton: [{
            type: HostBinding,
            args: ['class.skeleton']
        }] }); })();
var NovoLoadedDirective = /** @class */ (function () {
    function NovoLoadedDirective() {
    }
    NovoLoadedDirective.ɵfac = function NovoLoadedDirective_Factory(t) { return new (t || NovoLoadedDirective)(); };
    NovoLoadedDirective.ɵdir = ɵɵdefineDirective({ type: NovoLoadedDirective, selectors: [["", "loaded", ""]] });
    return NovoLoadedDirective;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLoadedDirective, [{
        type: Directive,
        args: [{
                selector: '[loaded]',
            }]
    }], null, null); })();
var NovoIsLoadingDirective = /** @class */ (function () {
    function NovoIsLoadingDirective(viewContainer) {
        this.viewContainer = viewContainer;
        this.hasView = false;
        this.skeletonViews = [];
        this.loadedViews = [];
    }
    Object.defineProperty(NovoIsLoadingDirective.prototype, "isLoading", {
        set: function (condition) {
            if (!condition && !this.hasView) {
                this.destroyViews(this.loadedViews);
                this.skeletonViews = this.createViews(this.skeletonTemplates);
                this.hasView = true;
            }
            else if (condition && this.hasView) {
                this.destroyViews(this.skeletonViews);
                this.loadedViews = this.createViews(this.loadedTemplates);
                this.hasView = false;
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoIsLoadingDirective.prototype.createViews = function (templates) {
        var _this = this;
        return templates && templates.map(function (v) { return _this.viewContainer.createEmbeddedView(v); });
    };
    NovoIsLoadingDirective.prototype.destroyViews = function (views) {
        var e_1, _a;
        if (views) {
            try {
                for (var views_1 = __values(views), views_1_1 = views_1.next(); !views_1_1.done; views_1_1 = views_1.next()) {
                    var view = views_1_1.value;
                    view.destroy();
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (views_1_1 && !views_1_1.done && (_a = views_1.return)) _a.call(views_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    NovoIsLoadingDirective.ɵfac = function NovoIsLoadingDirective_Factory(t) { return new (t || NovoIsLoadingDirective)(ɵɵdirectiveInject(ViewContainerRef)); };
    NovoIsLoadingDirective.ɵdir = ɵɵdefineDirective({ type: NovoIsLoadingDirective, selectors: [["", "isLoading", ""]], contentQueries: function NovoIsLoadingDirective_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoSkeletonDirective, false, TemplateRef);
            ɵɵcontentQuery(dirIndex, NovoLoadedDirective, false, TemplateRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.skeletonTemplates = _t);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.loadedTemplates = _t);
        } }, inputs: { isLoading: "isLoading" } });
    return NovoIsLoadingDirective;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoIsLoadingDirective, [{
        type: Directive,
        args: [{
                selector: '[isLoading]',
            }]
    }], function () { return [{ type: ViewContainerRef }]; }, { skeletonTemplates: [{
            type: ContentChildren,
            args: [NovoSkeletonDirective, { read: TemplateRef }]
        }], loadedTemplates: [{
            type: ContentChildren,
            args: [NovoLoadedDirective, { read: TemplateRef }]
        }], isLoading: [{
            type: Input
        }] }); })();

// NG2
var _c0$a = ["*"];
function CardElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵelement(1, "novo-loading", 13);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r0.cardAutomationId + "-loading");
} }
function CardElement_i_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 14);
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵattribute("data-automation-id", ctx_r1.cardAutomationId + "-move");
} }
function CardElement_i_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 15);
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r2.iconClass);
} }
function CardElement_button_12_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 16);
    ɵɵlistener("click", function CardElement_button_12_Template_button_click_0_listener() { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(); return ctx_r8.toggleRefresh(); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵpropertyInterpolate("tooltip", ctx_r3.labels.refresh);
    ɵɵattribute("data-automation-id", ctx_r3.cardAutomationId + "-refresh");
} }
function CardElement_button_13_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 17);
    ɵɵlistener("click", function CardElement_button_13_Template_button_click_0_listener() { ɵɵrestoreView(_r11); var ctx_r10 = ɵɵnextContext(); return ctx_r10.toggleClose(); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵpropertyInterpolate("tooltip", ctx_r4.labels.close);
    ɵɵattribute("data-automation-id", ctx_r4.cardAutomationId + "-close");
} }
function CardElement_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0, 1, ["*ngIf", "!(loading || config.loading) && !(message || config.message)"]);
} }
function CardElement_p_16_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 15);
} if (rf & 2) {
    var ctx_r12 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r12.messageIconClass);
} }
function CardElement_p_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 18);
    ɵɵtemplate(1, CardElement_p_16_i_1_Template, 1, 1, "i", 6);
    ɵɵelement(2, "span", 19);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext();
    ɵɵattribute("data-automation-id", ctx_r6.cardAutomationId + "-message");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r6.messageIconClass);
    ɵɵadvance(1);
    ɵɵproperty("innerHtml", ctx_r6.message || ctx_r6.config.message, ɵɵsanitizeHtml);
} }
function CardElement_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "!(loading || config.loading) && !(message || config.message)"]);
} }
var _c1$1 = [[["novo-card-actions"]], "*", [["footer"]]];
var _c2 = function (a0) { return { "no-padding": a0 }; };
var _c3 = ["novo-card-actions", "*", "footer"];
var CardActionsElement = /** @class */ (function () {
    function CardActionsElement() {
    }
    CardActionsElement.ɵfac = function CardActionsElement_Factory(t) { return new (t || CardActionsElement)(); };
    CardActionsElement.ɵcmp = ɵɵdefineComponent({ type: CardActionsElement, selectors: [["novo-card-actions"]], ngContentSelectors: _c0$a, decls: 1, vars: 0, template: function CardActionsElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return CardActionsElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardActionsElement, [{
        type: Component,
        args: [{
                selector: 'novo-card-actions',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();
var CardElement = /** @class */ (function () {
    function CardElement(labels) {
        this.padding = true;
        this.config = {};
        this.onClose = new EventEmitter();
        this.onRefresh = new EventEmitter();
        this.labels = labels;
    }
    CardElement.prototype.ngOnInit = function () {
        this.config = this.config || {};
    };
    CardElement.prototype.ngOnChanges = function (changes) {
        this.config = this.config || {};
        this.cardAutomationId = (this.title || this.config.title || 'no-title').toLowerCase().replace(/\s/g, '-') + "-card";
        var newIcon = this.icon || this.config.icon;
        var newMessageIcon = this.messageIcon || this.config.messageIcon;
        this.iconClass = newIcon ? "bhi-" + newIcon : null;
        this.messageIconClass = newMessageIcon ? "bhi-" + newMessageIcon : null;
    };
    CardElement.prototype.toggleClose = function () {
        if (!this.config.onClose) {
            this.onClose.next();
        }
        else {
            this.config.onClose();
        }
    };
    CardElement.prototype.toggleRefresh = function () {
        if (!this.config.onRefresh) {
            this.onRefresh.next();
        }
        else {
            this.config.onRefresh();
        }
    };
    CardElement.ɵfac = function CardElement_Factory(t) { return new (t || CardElement)(ɵɵdirectiveInject(NovoLabelService)); };
    CardElement.ɵcmp = ɵɵdefineComponent({ type: CardElement, selectors: [["novo-card"]], inputs: { padding: "padding", config: "config", title: "title", message: "message", messageIcon: "messageIcon", icon: "icon", iconTooltip: "iconTooltip", refresh: "refresh", close: "close", move: "move", loading: "loading" }, outputs: { onClose: "onClose", onRefresh: "onRefresh" }, features: [ɵɵNgOnChangesFeature], ngContentSelectors: _c3, decls: 18, vars: 19, consts: [[1, "novo-card", 3, "ngClass"], ["class", "card-loading-container", 4, "ngIf"], [1, "title"], ["tooltipPosition", "bottom-right", 3, "tooltip"], ["class", "bhi-move", 4, "ngIf"], ["tooltipPosition", "right", 3, "tooltip"], [3, "ngClass", 4, "ngIf"], [1, "actions"], ["theme", "icon", "icon", "refresh", "tooltipPosition", "bottom-left", 3, "tooltip", "click", 4, "ngIf"], ["theme", "icon", "icon", "close-o", "tooltipPosition", "bottom-left", 3, "tooltip", "click", 4, "ngIf"], [4, "ngIf"], ["class", "card-message", 4, "ngIf"], [1, "card-loading-container"], ["theme", "line"], [1, "bhi-move"], [3, "ngClass"], ["theme", "icon", "icon", "refresh", "tooltipPosition", "bottom-left", 3, "tooltip", "click"], ["theme", "icon", "icon", "close-o", "tooltipPosition", "bottom-left", 3, "tooltip", "click"], [1, "card-message"], [3, "innerHtml"]], template: function CardElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c1$1);
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, CardElement_div_1_Template, 2, 1, "div", 1);
            ɵɵelementStart(2, "header");
            ɵɵelementStart(3, "div", 2);
            ɵɵelementStart(4, "span", 3);
            ɵɵtemplate(5, CardElement_i_5_Template, 1, 1, "i", 4);
            ɵɵelementEnd();
            ɵɵelementStart(6, "h3");
            ɵɵelementStart(7, "span", 5);
            ɵɵtemplate(8, CardElement_i_8_Template, 1, 1, "i", 6);
            ɵɵelementEnd();
            ɵɵtext(9);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(10, "div", 7);
            ɵɵprojection(11);
            ɵɵtemplate(12, CardElement_button_12_Template, 1, 2, "button", 8);
            ɵɵtemplate(13, CardElement_button_13_Template, 1, 2, "button", 9);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(14, "main");
            ɵɵtemplate(15, CardElement_15_Template, 1, 0, undefined, 10);
            ɵɵtemplate(16, CardElement_p_16_Template, 3, 3, "p", 11);
            ɵɵelementEnd();
            ɵɵtemplate(17, CardElement_17_Template, 1, 0, undefined, 10);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("loading", ctx.loading || ctx.config.loading);
            ɵɵproperty("ngClass", ɵɵpureFunction1(17, _c2, !ctx.padding));
            ɵɵattribute("data-automation-id", ctx.cardAutomationId);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.loading || ctx.config.loading);
            ɵɵadvance(3);
            ɵɵpropertyInterpolate("tooltip", ctx.labels.move);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.move || ctx.config.move);
            ɵɵadvance(1);
            ɵɵattribute("data-automation-id", ctx.cardAutomationId + "-title");
            ɵɵadvance(1);
            ɵɵproperty("tooltip", ctx.iconTooltip);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.icon);
            ɵɵadvance(1);
            ɵɵtextInterpolate1(" ", ctx.title || ctx.config.title, "");
            ɵɵadvance(1);
            ɵɵattribute("data-automation-id", ctx.cardAutomationId + "-actions");
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.refresh || ctx.config.refresh);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.close || ctx.config.close);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !(ctx.loading || ctx.config.loading) && !(ctx.message || ctx.config.message));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.loading || ctx.config.loading) && (ctx.message || ctx.config.message));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.loading || ctx.config.loading) && !(ctx.message || ctx.config.message));
        } }, directives: [NgClass, NgIf, TooltipDirective, NovoLoadingElement, NovoButtonElement], encapsulation: 2 });
    return CardElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(CardElement, [{
        type: Component,
        args: [{
                selector: 'novo-card',
                template: "\n        <div class=\"novo-card\" [attr.data-automation-id]=\"cardAutomationId\" [ngClass]=\"{'no-padding': !padding}\" [class.loading]=\"loading || config.loading\">\n            <!--Loading-->\n            <div class=\"card-loading-container\" *ngIf=\"loading || config.loading\">\n                <novo-loading theme=\"line\" [attr.data-automation-id]=\"cardAutomationId + '-loading'\"></novo-loading>\n            </div>\n            <!--Card Header-->\n            <header>\n                <div class=\"title\">\n                    <!--Grabber Icon-->\n                    <span tooltip=\"{{ labels.move }}\" tooltipPosition=\"bottom-right\"><i *ngIf=\"move || config.move\" class=\"bhi-move\" [attr.data-automation-id]=\"cardAutomationId + '-move'\"></i></span>\n                    <!--Card Title-->\n                    <h3 [attr.data-automation-id]=\"cardAutomationId + '-title'\"><span [tooltip]=\"iconTooltip\" tooltipPosition=\"right\"><i *ngIf=\"icon\" [ngClass]=\"iconClass\"></i></span> {{title || config.title}}</h3>\n                </div>\n                <!--Card Actions-->\n                <div class=\"actions\" [attr.data-automation-id]=\"cardAutomationId + '-actions'\">\n                    <ng-content select=\"novo-card-actions\"></ng-content>\n                    <button theme=\"icon\" icon=\"refresh\"  (click)=\"toggleRefresh()\" *ngIf=\"refresh || config.refresh\" [attr.data-automation-id]=\"cardAutomationId + '-refresh'\" tooltip=\"{{ labels.refresh }}\" tooltipPosition=\"bottom-left\"></button>\n                    <button theme=\"icon\" icon=\"close-o\" (click)=\"toggleClose()\" *ngIf=\"close || config.close\" [attr.data-automation-id]=\"cardAutomationId + '-close'\" tooltip=\"{{ labels.close }}\" tooltipPosition=\"bottom-left\"></button>\n                </div>\n            </header>\n            <!--Card Main-->\n            <main>\n                <!--Content (transcluded)-->\n                <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\"></ng-content>\n                <!--Error/Empty Message-->\n                <p class=\"card-message\" *ngIf=\"!(loading || config.loading) && (message || config.message)\" [attr.data-automation-id]=\"cardAutomationId + '-message'\"><i *ngIf=\"messageIconClass\" [ngClass]=\"messageIconClass\"></i> <span [innerHtml]=\"message || config.message\"></span></p>\n            </main>\n            <!--Card Footer-->\n            <ng-content *ngIf=\"!(loading || config.loading) && !(message || config.message)\" select=\"footer\"></ng-content>\n        </div>\n    ",
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { padding: [{
            type: Input
        }], config: [{
            type: Input
        }], title: [{
            type: Input
        }], message: [{
            type: Input
        }], messageIcon: [{
            type: Input
        }], icon: [{
            type: Input
        }], iconTooltip: [{
            type: Input
        }], refresh: [{
            type: Input
        }], close: [{
            type: Input
        }], move: [{
            type: Input
        }], loading: [{
            type: Input
        }], onClose: [{
            type: Output
        }], onRefresh: [{
            type: Output
        }] }); })();

// NG2
var NovoLoadingModule = /** @class */ (function () {
    function NovoLoadingModule() {
    }
    NovoLoadingModule.ɵmod = ɵɵdefineNgModule({ type: NovoLoadingModule });
    NovoLoadingModule.ɵinj = ɵɵdefineInjector({ factory: function NovoLoadingModule_Factory(t) { return new (t || NovoLoadingModule)(); }, imports: [[CommonModule]] });
    return NovoLoadingModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoLoadingModule, { declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective], imports: [CommonModule], exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoLoadingModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
                exports: [NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective],
            }]
    }], null, null); })();

// NG2
var NovoCardModule = /** @class */ (function () {
    function NovoCardModule() {
    }
    NovoCardModule.ɵmod = ɵɵdefineNgModule({ type: NovoCardModule });
    NovoCardModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCardModule_Factory(t) { return new (t || NovoCardModule)(); }, imports: [[CommonModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule]] });
    return NovoCardModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCardModule, { declarations: [CardElement, CardActionsElement], imports: [CommonModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule], exports: [CardElement, CardActionsElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCardModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule, NovoLoadingModule, NovoTooltipModule],
                declarations: [CardElement, CardActionsElement],
                exports: [CardElement, CardActionsElement],
            }]
    }], null, null); })();

// NG2
/**
 * Outside click helper, makes to set the element as inactive when clicking outside of it
 */
var OutsideClick = /** @class */ (function () {
    function OutsideClick(element) {
        this.active = false;
        this.onActiveChange = new EventEmitter();
        // Component element
        this.element = element;
        // Outside click handler
        // Property because `this.func.bind(this)` returns a new function each time
        this.onOutsideClick = this.handleOutsideClick.bind(this);
    }
    /**
     * When the element is destroyed, make sure to remove the handler
     */
    OutsideClick.prototype.ngOnDestroy = function () {
        window.removeEventListener('click', this.onOutsideClick);
    };
    /**
     * Toggles the element as active and adds/removes the outside click handler
     */
    OutsideClick.prototype.toggleActive = function (event, forceValue) {
        // Reverse the active property (if forceValue, use that)
        this.active = !Helpers.isBlank(forceValue) ? forceValue : !this.active;
        // Bind window click events to hide on outside click
        if (this.active) {
            window.addEventListener('click', this.onOutsideClick);
        }
        else {
            window.removeEventListener('click', this.onOutsideClick);
        }
        // Fire the active change event
        this.onActiveChange.emit(this.active);
    };
    /**
     * When clicking outside, checks the element and closes if outside
     */
    OutsideClick.prototype.handleOutsideClick = function (event) {
        // If the elements doesn't contain the target element, it is an outside click
        var outsideClick = !this.element.nativeElement.contains(event.target);
        if (this.otherElement && outsideClick) {
            outsideClick = !this.otherElement.nativeElement.contains(event.target);
        }
        if (outsideClick) {
            this.toggleActive(event, false);
        }
    };
    OutsideClick.ɵfac = function OutsideClick_Factory(t) { return new (t || OutsideClick)(ɵɵdirectiveInject(ElementRef)); };
    OutsideClick.ɵdir = ɵɵdefineDirective({ type: OutsideClick });
    return OutsideClick;
}());

// Helper to keep track of key codes
var KeyCodes = {
    BACKSPACE: 8,
    TAB: 9,
    NUM_CENTER: 12,
    ENTER: 13,
    RETURN: 13,
    SHIFT: 16,
    CTRL: 17,
    ALT: 18,
    PAUSE: 19,
    CAPS_LOCK: 20,
    ESC: 27,
    SPACE: 32,
    PAGE_UP: 33,
    PAGE_DOWN: 34,
    HASH_SYMBOL: 35,
    HOME: 36,
    LEFT: 37,
    UP: 38,
    RIGHT: 39,
    DOWN: 40,
    PRINT_SCREEN: 44,
    INSERT: 45,
    DELETE: 46,
    ZERO: 48,
    ONE: 49,
    TWO: 50,
    THREE: 51,
    FOUR: 52,
    FIVE: 53,
    SIX: 54,
    SEVEN: 55,
    EIGHT: 56,
    NINE: 57,
    AT_SYMBOL: 64,
    A: 65,
    B: 66,
    C: 67,
    D: 68,
    E: 69,
    F: 70,
    G: 71,
    H: 72,
    I: 73,
    J: 74,
    K: 75,
    L: 76,
    M: 77,
    N: 78,
    O: 79,
    P: 80,
    Q: 81,
    R: 82,
    S: 83,
    T: 84,
    U: 85,
    V: 86,
    W: 87,
    X: 88,
    Y: 89,
    Z: 90,
    CONTEXT_MENU: 93,
    NUM_ZERO: 96,
    NUM_ONE: 97,
    NUM_TWO: 98,
    NUM_THREE: 99,
    NUM_FOUR: 100,
    NUM_FIVE: 101,
    NUM_SIX: 102,
    NUM_SEVEN: 103,
    NUM_EIGHT: 104,
    NUM_NINE: 105,
    NUM_MULTIPLY: 106,
    NUM_PLUS: 107,
    NUM_MINUS: 109,
    NUM_PERIOD: 110,
    NUM_DIVISION: 111,
    F1: 112,
    F2: 113,
    F3: 114,
    F4: 115,
    F5: 116,
    F6: 117,
    F7: 118,
    F8: 119,
    F9: 120,
    F10: 121,
    F11: 122,
    F12: 123,
    DASH: 189,
    PERIOD: 190,
    FORWARD_SLASH: 191,
};

// NG2
var _c0$b = ["*"];
var NovoNavElement = /** @class */ (function () {
    function NovoNavElement() {
        this.theme = '';
        this.direction = '';
        this.condensed = false;
        this.items = [];
    }
    NovoNavElement.prototype.select = function (item) {
        /**
         * Deactivate all other tabs
         */
        function _deactivateAllItems(items) {
            items.forEach(function (t) {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
        if (this.outlet) {
            this.outlet.show(this.items.indexOf(item));
        }
        // TODO - remove hack to make DOM rerender - jgodi
        var element = document.querySelector('novo-tab-link.active span.indicator');
        if (element) {
            element.style.opacity = 0.99;
            setTimeout(function () {
                element.style.opacity = 1;
            }, 10);
        }
    };
    NovoNavElement.prototype.add = function (item) {
        if (this.items.length === 0) {
            item.active = true;
            // item.selected.next();
        }
        this.items.push(item);
    };
    NovoNavElement.ɵfac = function NovoNavElement_Factory(t) { return new (t || NovoNavElement)(); };
    NovoNavElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavElement, selectors: [["novo-nav"]], hostVars: 2, hostBindings: function NovoNavElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("condensed", ctx.condensed);
        } }, inputs: { theme: "theme", direction: "direction", outlet: "outlet", router: "router", condensed: "condensed" }, ngContentSelectors: _c0$b, decls: 1, vars: 0, template: function NovoNavElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoNavElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav',
                template: '<ng-content></ng-content>',
            }]
    }], null, { theme: [{
            type: Input
        }], direction: [{
            type: Input
        }], outlet: [{
            type: Input
        }], router: [{
            type: Input
        }], condensed: [{
            type: HostBinding,
            args: ['class.condensed']
        }, {
            type: Input
        }] }); })();
var NovoTabElement = /** @class */ (function () {
    function NovoTabElement(nav) {
        this.active = false;
        this.disabled = false;
        this.activeChange = new EventEmitter();
        this.nav = nav;
        this.nav.add(this);
    }
    NovoTabElement.prototype.select = function () {
        if (!this.disabled) {
            this.activeChange.emit(true);
            this.nav.select(this);
        }
    };
    NovoTabElement.ɵfac = function NovoTabElement_Factory(t) { return new (t || NovoTabElement)(ɵɵdirectiveInject(NovoNavElement)); };
    NovoTabElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabElement, selectors: [["novo-tab"]], hostVars: 4, hostBindings: function NovoTabElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoTabElement_click_HostBindingHandler() { return ctx.select(); });
        } if (rf & 2) {
            ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled);
        } }, inputs: { active: "active", disabled: "disabled" }, outputs: { activeChange: "activeChange" }, ngContentSelectors: _c0$b, decls: 3, vars: 0, consts: [[1, "novo-tab-link"], [1, "indicator"]], template: function NovoTabElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0);
            ɵɵprojection(1);
            ɵɵelementEnd();
            ɵɵelement(2, "span", 1);
        } }, encapsulation: 2 });
    return NovoTabElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabElement, [{
        type: Component,
        args: [{
                selector: 'novo-tab',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: "\n        <div class=\"novo-tab-link\">\n            <ng-content></ng-content>\n        </div>\n        <span class=\"indicator\"></span>\n   ",
            }]
    }], function () { return [{ type: NovoNavElement }]; }, { active: [{
            type: Input
        }], disabled: [{
            type: Input
        }], activeChange: [{
            type: Output
        }] }); })();
var NovoTabButtonElement = /** @class */ (function () {
    function NovoTabButtonElement(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    NovoTabButtonElement.prototype.select = function () {
        if (!this.disabled) {
            this.nav.select(this);
        }
    };
    NovoTabButtonElement.ɵfac = function NovoTabButtonElement_Factory(t) { return new (t || NovoTabButtonElement)(ɵɵdirectiveInject(NovoNavElement)); };
    NovoTabButtonElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabButtonElement, selectors: [["novo-tab-button"]], hostVars: 4, hostBindings: function NovoTabButtonElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoTabButtonElement_click_HostBindingHandler() { return ctx.select(); });
        } if (rf & 2) {
            ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled);
        } }, inputs: { active: "active", disabled: "disabled" }, ngContentSelectors: _c0$b, decls: 1, vars: 0, template: function NovoTabButtonElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoTabButtonElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabButtonElement, [{
        type: Component,
        args: [{
                selector: 'novo-tab-button',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoNavElement }]; }, { active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
var NovoTabLinkElement = /** @class */ (function () {
    function NovoTabLinkElement(nav) {
        this.active = false;
        this.disabled = false;
        this.nav = nav;
        this.nav.add(this);
    }
    NovoTabLinkElement.prototype.select = function () {
        if (!this.disabled) {
            this.nav.select(this);
        }
    };
    NovoTabLinkElement.ɵfac = function NovoTabLinkElement_Factory(t) { return new (t || NovoTabLinkElement)(ɵɵdirectiveInject(NovoNavElement)); };
    NovoTabLinkElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabLinkElement, selectors: [["novo-tab-link"]], hostVars: 4, hostBindings: function NovoTabLinkElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoTabLinkElement_click_HostBindingHandler() { return ctx.select(); });
        } if (rf & 2) {
            ɵɵclassProp("active", ctx.active)("disabled", ctx.disabled);
        } }, inputs: { active: "active", disabled: "disabled" }, ngContentSelectors: _c0$b, decls: 3, vars: 0, consts: [[1, "novo-tab-link"], [1, "indicator"]], template: function NovoTabLinkElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0);
            ɵɵprojection(1);
            ɵɵelementEnd();
            ɵɵelement(2, "span", 1);
        } }, encapsulation: 2 });
    return NovoTabLinkElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabLinkElement, [{
        type: Component,
        args: [{
                selector: 'novo-tab-link',
                host: {
                    '(click)': 'select()',
                    '[class.active]': 'active',
                    '[class.disabled]': 'disabled',
                },
                template: "\n        <div class=\"novo-tab-link\">\n            <ng-content></ng-content>\n        </div>\n        <span class=\"indicator\"></span>\n    ",
            }]
    }], function () { return [{ type: NovoNavElement }]; }, { active: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
var NovoNavOutletElement = /** @class */ (function () {
    function NovoNavOutletElement() {
        this.items = [];
    }
    NovoNavOutletElement.prototype.show = function (index) {
        var item = this.items[index];
        /**
         * Deactivates other tab items
         * @param items - deactivated items
         */
        function _deactivateAllItems(items) {
            items.forEach(function (t) {
                if (t.active === true) {
                    // t.deselected.next();
                }
                t.active = false;
            });
        }
        _deactivateAllItems(this.items);
        item.active = true;
    };
    NovoNavOutletElement.prototype.add = function (item) {
        if (this.items.length === 0) {
            item.active = true;
        }
        this.items.push(item);
    };
    NovoNavOutletElement.ɵfac = function NovoNavOutletElement_Factory(t) { return new (t || NovoNavOutletElement)(); };
    NovoNavOutletElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavOutletElement, selectors: [["novo-nav-outlet"]], ngContentSelectors: _c0$b, decls: 1, vars: 0, template: function NovoNavOutletElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoNavOutletElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavOutletElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav-outlet',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();
var NovoNavContentElement = /** @class */ (function () {
    function NovoNavContentElement(outlet) {
        this.active = false;
        outlet.add(this);
    }
    NovoNavContentElement.ɵfac = function NovoNavContentElement_Factory(t) { return new (t || NovoNavContentElement)(ɵɵdirectiveInject(NovoNavOutletElement)); };
    NovoNavContentElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavContentElement, selectors: [["novo-nav-content"]], hostVars: 2, hostBindings: function NovoNavContentElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("active", ctx.active);
        } }, inputs: { active: "active" }, ngContentSelectors: _c0$b, decls: 1, vars: 0, template: function NovoNavContentElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoNavContentElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavContentElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav-content',
                host: {
                    '[class.active]': 'active',
                },
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoNavOutletElement }]; }, { active: [{
            type: Input
        }] }); })();
var NovoNavHeaderElement = /** @class */ (function () {
    function NovoNavHeaderElement(outlet) {
        this.active = false;
        this.active = this.active || false;
        this.outlet = outlet;
    }
    NovoNavHeaderElement.prototype.show = function (event) {
        try {
            var INDEX = this.outlet.items.indexOf(this.forElement);
            if (INDEX > -1) {
                this.outlet.show(INDEX);
            }
        }
        catch (err) {
            // do nothing
        }
    };
    NovoNavHeaderElement.ɵfac = function NovoNavHeaderElement_Factory(t) { return new (t || NovoNavHeaderElement)(ɵɵdirectiveInject(NovoNavOutletElement)); };
    NovoNavHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoNavHeaderElement, selectors: [["novo-nav-header"]], hostVars: 2, hostBindings: function NovoNavHeaderElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoNavHeaderElement_click_HostBindingHandler($event) { return ctx.show($event); });
        } if (rf & 2) {
            ɵɵclassProp("active", ctx.active);
        } }, inputs: { active: "active", forElement: ["for", "forElement"] }, ngContentSelectors: _c0$b, decls: 1, vars: 0, template: function NovoNavHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoNavHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNavHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-nav-header',
                host: {
                    '[class.active]': 'active',
                    '(click)': 'show($event)',
                },
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoNavOutletElement }]; }, { active: [{
            type: Input
        }], forElement: [{
            type: Input,
            args: ['for']
        }] }); })();

// NG2
var _c0$c = ["*"];
var _c1$2 = [[["item-header"]], [["item-content"]], "*", [["item-end"]]];
var _c2$1 = function (a0) { return { "avatar": a0 }; };
var _c3$1 = ["item-header", "item-content", "*", "item-end"];
function NovoItemAvatarElement_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 1);
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r0.classMap);
} }
var _c4 = [[["item-avatar"]], [["item-title"]], [["item-header-end"]]];
var _c5 = ["item-avatar", "item-title", "item-header-end"];
var NovoListElement = /** @class */ (function () {
    function NovoListElement(element) {
        this.element = element;
    }
    NovoListElement.ɵfac = function NovoListElement_Factory(t) { return new (t || NovoListElement)(ɵɵdirectiveInject(ElementRef)); };
    NovoListElement.ɵcmp = ɵɵdefineComponent({ type: NovoListElement, selectors: [["novo-list"]], hostVars: 5, hostBindings: function NovoListElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("theme", ctx.theme);
            ɵɵclassProp("vertical-list", ctx.direction === "vertical")("horizontal-list", ctx.direction === "horizontal");
        } }, inputs: { theme: "theme", direction: "direction" }, ngContentSelectors: _c0$c, decls: 1, vars: 0, template: function NovoListElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoListElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoListElement, [{
        type: Component,
        args: [{
                selector: 'novo-list',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                    '[attr.theme]': 'theme',
                },
                template: "\n        <ng-content></ng-content>\n    ",
            }]
    }], function () { return [{ type: ElementRef }]; }, { theme: [{
            type: Input
        }], direction: [{
            type: Input
        }] }); })();
var NovoListItemElement = /** @class */ (function () {
    function NovoListItemElement(element) {
        this.element = element;
        this.avatar = false;
    }
    NovoListItemElement.prototype.ngOnInit = function () {
        this.avatar = !!this.element.nativeElement.querySelector('item-avatar');
    };
    NovoListItemElement.ɵfac = function NovoListItemElement_Factory(t) { return new (t || NovoListItemElement)(ɵɵdirectiveInject(ElementRef)); };
    NovoListItemElement.ɵcmp = ɵɵdefineComponent({ type: NovoListItemElement, selectors: [["novo-list-item"]], ngContentSelectors: _c3$1, decls: 5, vars: 3, consts: [[1, "list-item", 3, "ngClass"]], template: function NovoListItemElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c1$2);
            ɵɵelementStart(0, "div", 0);
            ɵɵprojection(1);
            ɵɵprojection(2, 1);
            ɵɵelementEnd();
            ɵɵprojection(3, 2);
            ɵɵprojection(4, 3);
        } if (rf & 2) {
            ɵɵproperty("ngClass", ɵɵpureFunction1(1, _c2$1, ctx.avatar));
        } }, directives: [NgClass], encapsulation: 2 });
    return NovoListItemElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoListItemElement, [{
        type: Component,
        args: [{
                selector: 'novo-list-item',
                template: "\n        <div class=\"list-item\" [ngClass]=\"{'avatar': avatar}\">\n            <ng-content select=\"item-header\"></ng-content>\n            <ng-content select=\"item-content\"></ng-content>\n        </div>\n        <ng-content></ng-content>\n        <ng-content select=\"item-end\"></ng-content>\n    ",
            }]
    }], function () { return [{ type: ElementRef }]; }, null); })();
var NovoItemAvatarElement = /** @class */ (function () {
    function NovoItemAvatarElement() {
    }
    NovoItemAvatarElement.prototype.ngOnChanges = function (changes) {
        this.iconClass = this.icon ? "bhi-" + this.icon : null;
        this.classMap = [this.iconClass, this.icon];
    };
    NovoItemAvatarElement.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    NovoItemAvatarElement.ɵfac = function NovoItemAvatarElement_Factory(t) { return new (t || NovoItemAvatarElement)(); };
    NovoItemAvatarElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemAvatarElement, selectors: [["item-avatar"]], inputs: { icon: "icon" }, features: [ɵɵNgOnChangesFeature], decls: 1, vars: 1, consts: [["theme", "contained", 3, "ngClass", 4, "ngIf"], ["theme", "contained", 3, "ngClass"]], template: function NovoItemAvatarElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoItemAvatarElement_i_0_Template, 1, 1, "i", 0);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.iconClass);
        } }, directives: [NgIf, NgClass], encapsulation: 2 });
    return NovoItemAvatarElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemAvatarElement, [{
        type: Component,
        args: [{
                selector: 'item-avatar',
                template: "\n        <i *ngIf=\"iconClass\" [ngClass]=\"classMap\" theme=\"contained\"></i>\n    ",
            }]
    }], null, { icon: [{
            type: Input
        }] }); })();
var NovoItemTitleElement = /** @class */ (function () {
    function NovoItemTitleElement() {
    }
    NovoItemTitleElement.ɵfac = function NovoItemTitleElement_Factory(t) { return new (t || NovoItemTitleElement)(); };
    NovoItemTitleElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemTitleElement, selectors: [["item-title"]], ngContentSelectors: _c0$c, decls: 2, vars: 0, template: function NovoItemTitleElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "h6");
            ɵɵprojection(1);
            ɵɵelementEnd();
        } }, encapsulation: 2 });
    return NovoItemTitleElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemTitleElement, [{
        type: Component,
        args: [{
                selector: 'item-title',
                template: "\n        <h6><ng-content></ng-content></h6>\n    ",
            }]
    }], null, null); })();
var NovoItemHeaderElement = /** @class */ (function () {
    function NovoItemHeaderElement() {
    }
    NovoItemHeaderElement.ɵfac = function NovoItemHeaderElement_Factory(t) { return new (t || NovoItemHeaderElement)(); };
    NovoItemHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemHeaderElement, selectors: [["item-header"]], ngContentSelectors: _c5, decls: 3, vars: 0, template: function NovoItemHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c4);
            ɵɵprojection(0);
            ɵɵprojection(1, 1);
            ɵɵprojection(2, 2);
        } }, encapsulation: 2 });
    return NovoItemHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemHeaderElement, [{
        type: Component,
        args: [{
                selector: 'item-header',
                template: "\n        <ng-content select=\"item-avatar\"></ng-content>\n        <ng-content select=\"item-title\"></ng-content>\n        <ng-content select=\"item-header-end\"></ng-content>\n    ",
            }]
    }], null, null); })();
var NovoItemDateElement = /** @class */ (function () {
    function NovoItemDateElement() {
    }
    NovoItemDateElement.ɵfac = function NovoItemDateElement_Factory(t) { return new (t || NovoItemDateElement)(); };
    NovoItemDateElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemDateElement, selectors: [["item-header-end"]], ngContentSelectors: _c0$c, decls: 1, vars: 0, template: function NovoItemDateElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoItemDateElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemDateElement, [{
        type: Component,
        args: [{
                selector: 'item-header-end',
                template: "\n        <ng-content></ng-content>\n    ",
            }]
    }], null, null); })();
var NovoItemContentElement = /** @class */ (function () {
    function NovoItemContentElement() {
    }
    NovoItemContentElement.ɵfac = function NovoItemContentElement_Factory(t) { return new (t || NovoItemContentElement)(); };
    NovoItemContentElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemContentElement, selectors: [["item-content"]], hostVars: 4, hostBindings: function NovoItemContentElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("vertical-list", ctx.direction === "vertical")("horizontal-list", ctx.direction === "horizontal");
        } }, inputs: { direction: "direction" }, ngContentSelectors: _c0$c, decls: 1, vars: 0, template: function NovoItemContentElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoItemContentElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemContentElement, [{
        type: Component,
        args: [{
                selector: 'item-content',
                host: {
                    '[class.vertical-list]': 'direction === "vertical"',
                    '[class.horizontal-list]': 'direction === "horizontal"',
                },
                template: "\n        <ng-content></ng-content>\n    ",
            }]
    }], null, { direction: [{
            type: Input
        }] }); })();
var NovoItemEndElement = /** @class */ (function () {
    function NovoItemEndElement() {
    }
    NovoItemEndElement.ɵfac = function NovoItemEndElement_Factory(t) { return new (t || NovoItemEndElement)(); };
    NovoItemEndElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemEndElement, selectors: [["item-end"]], ngContentSelectors: _c0$c, decls: 1, vars: 0, template: function NovoItemEndElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoItemEndElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemEndElement, [{
        type: Component,
        args: [{
                selector: 'item-end',
                template: "\n        <ng-content></ng-content>\n    ",
            }]
    }], null, null); })();

function NovoCategoryDropdownElement_div_1_div_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 12);
} }
function NovoCategoryDropdownElement_div_1_div_1_i_3_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 13);
    ɵɵlistener("click", function NovoCategoryDropdownElement_div_1_div_1_i_3_Template_i_click_0_listener($event) { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(3); return ctx_r8.clearQuery($event); });
    ɵɵelementEnd();
} }
function NovoCategoryDropdownElement_div_1_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8);
    ɵɵelementStart(1, "input", 9);
    ɵɵlistener("input", function NovoCategoryDropdownElement_div_1_div_1_Template_input_input_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r10 = ɵɵnextContext(2); return ctx_r10.queryCategories($event.target.value); });
    ɵɵelementEnd();
    ɵɵtemplate(2, NovoCategoryDropdownElement_div_1_div_1_i_2_Template, 1, 0, "i", 10);
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_div_1_i_3_Template, 1, 0, "i", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("placeholder", ctx_r1.search.placeholder || ctx_r1.labels.search)("value", ctx_r1._query);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r1._query);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1._query);
} }
function NovoCategoryDropdownElement_div_1_novo_tab_3_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tab", 14);
    ɵɵlistener("activeChange", function NovoCategoryDropdownElement_div_1_novo_tab_3_Template_novo_tab_activeChange_0_listener() { ɵɵrestoreView(_r14); var category_r12 = ctx.$implicit; var ctx_r13 = ɵɵnextContext(2); return ctx_r13.onCategorySelected(category_r12); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var category_r12 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", category_r12);
    ɵɵadvance(2);
    ɵɵtextInterpolate2("", category_r12, " (", ctx_r2._categoryMap[category_r12].length, ")");
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item-end", 21);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r18 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(item_r18.hoverText);
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item-end", 21);
    ɵɵelement(1, "i");
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r18 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-", item_r18.hoverIcon, "");
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item-end");
    ɵɵelement(1, "i", 22);
    ɵɵelementEnd();
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 18);
    ɵɵlistener("click", function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r25); var item_r18 = ctx.$implicit; var ctx_r24 = ɵɵnextContext(3); return ctx_r24.select($event, item_r18); });
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_3_Template, 2, 1, "item-end", 19);
    ɵɵtemplate(4, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_4_Template, 2, 3, "item-end", 19);
    ɵɵtemplate(5, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_item_end_5_Template, 2, 0, "item-end", 20);
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r18 = ctx.$implicit;
    ɵɵattribute("data-automation-id", item_r18.label);
    ɵɵadvance(2);
    ɵɵtextInterpolate(item_r18.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r18.hoverText && !item_r18.selected);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r18.hoverIcon && !item_r18.selected);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", item_r18.selected);
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list-item", 23);
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r17 = ɵɵnextContext(3);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r17.search.emptyMessage || ctx_r17.labels.noItems);
} }
function NovoCategoryDropdownElement_div_1_novo_nav_content_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-nav-content");
    ɵɵelementStart(1, "novo-list", 15);
    ɵɵtemplate(2, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_2_Template, 6, 5, "novo-list-item", 16);
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_novo_nav_content_6_novo_list_item_3_Template, 3, 1, "novo-list-item", 17);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var category_r15 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r4._categoryMap[category_r15]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4._categoryMap[category_r15].length === 0 && ctx_r4.search);
} }
function NovoCategoryDropdownElement_div_1_footer_7_a_1_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 18);
    ɵɵlistener("click", function NovoCategoryDropdownElement_div_1_footer_7_a_1_Template_a_click_0_listener($event) { ɵɵrestoreView(_r29); var link_r27 = ctx.$implicit; var ctx_r28 = ɵɵnextContext(3); return ctx_r28.executeClickCallback($event, link_r27); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var link_r27 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(link_r27.label);
} }
function NovoCategoryDropdownElement_div_1_footer_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "footer");
    ɵɵtemplate(1, NovoCategoryDropdownElement_div_1_footer_7_a_1_Template, 2, 1, "a", 16);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵclassMapInterpolate1("novo-category-dropdown-footer-align-", ctx_r5.footer.align || "right", "");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r5.footer.links);
} }
function NovoCategoryDropdownElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵtemplate(1, NovoCategoryDropdownElement_div_1_div_1_Template, 4, 4, "div", 2);
    ɵɵelementStart(2, "novo-nav", 3);
    ɵɵtemplate(3, NovoCategoryDropdownElement_div_1_novo_tab_3_Template, 3, 3, "novo-tab", 4);
    ɵɵelementEnd();
    ɵɵelementStart(4, "novo-nav-outlet", null, 5);
    ɵɵtemplate(6, NovoCategoryDropdownElement_div_1_novo_nav_content_6_Template, 4, 2, "novo-nav-content", 6);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoCategoryDropdownElement_div_1_footer_7_Template, 2, 4, "footer", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    var _r3 = ɵɵreference(5);
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.search);
    ɵɵadvance(1);
    ɵɵproperty("outlet", _r3);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0._categories);
    ɵɵadvance(3);
    ɵɵproperty("ngForOf", ctx_r0._categories);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.footer);
} }
var _c0$d = [[["button"]]];
var _c1$3 = ["button"];
var NovoCategoryDropdownElement = /** @class */ (function (_super) {
    __extends(NovoCategoryDropdownElement, _super);
    function NovoCategoryDropdownElement(element, labels) {
        var _this = _super.call(this, element) || this;
        _this.labels = labels;
        _this._query = '';
        _this._categoryMap = {};
        _this._categories = [];
        // Boolean to keep the selection persist when closing the dropdown
        _this.persistSelection = false;
        // Boolean to close the dropdown on selection
        _this.closeOnSelect = false;
        // Event that is emitted whenever an item is selected
        _this._select = new EventEmitter();
        // Event that is emitted whenever a category is selected
        _this.categorySelected = new EventEmitter();
        _this.clickHandler = _this.toggleActive.bind(_this);
        return _this;
    }
    Object.defineProperty(NovoCategoryDropdownElement.prototype, "categories", {
        set: function (categories) {
            this._masterCategoryMap = Object.assign({}, categories);
            this._categoryMap = Object.assign({}, categories);
            this._categories = Object.keys(categories);
        },
        enumerable: true,
        configurable: true
    });
    NovoCategoryDropdownElement.prototype.ngOnInit = function () {
        var button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
    };
    NovoCategoryDropdownElement.prototype.ngOnDestroy = function () {
        var button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
    };
    NovoCategoryDropdownElement.prototype.onKeyDown = function (event) {
        if (this.active && (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER)) {
            this.toggleActive();
        }
    };
    NovoCategoryDropdownElement.prototype.clearSelection = function () {
        var _this = this;
        this._categories.forEach(function (category) {
            _this._categoryMap[category].forEach(function (item) {
                item.selected = false;
            });
        });
    };
    NovoCategoryDropdownElement.prototype.select = function (event, item) {
        Helpers.swallowEvent(event);
        // If we persist the selection, clear and show a check
        if (this.persistSelection) {
            this.clearSelection();
            item.selected = true;
        }
        // Emit the item
        this._select.emit(item);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    };
    NovoCategoryDropdownElement.prototype.onCategorySelected = function (category) {
        this.categorySelected.emit(category);
    };
    NovoCategoryDropdownElement.prototype.clearQuery = function (event) {
        var _this = this;
        Helpers.swallowEvent(event);
        this._query = '';
        // Reset the categories
        this._categories.forEach(function (category) {
            _this._categoryMap[category] = _this._masterCategoryMap[category];
        });
    };
    NovoCategoryDropdownElement.prototype.queryCategories = function (query) {
        var _this = this;
        // Save the query
        this._query = query;
        // Check timeout
        if (this._queryTimeout) {
            clearTimeout(this._queryTimeout);
        }
        // Store a timeout, to debounce user input
        this._queryTimeout = setTimeout(function () {
            _this._categories.forEach(function (category) {
                if (_this.search.compare) {
                    _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return _this.search.compare(query, item); });
                }
                else {
                    _this._categoryMap[category] = _this._masterCategoryMap[category].filter(function (item) { return ~item.label.toLowerCase().indexOf(query.toLowerCase()); });
                }
            });
        }, this.search.debounce || 300);
    };
    NovoCategoryDropdownElement.prototype.executeClickCallback = function (event, link) {
        link.callback(event);
        // Close, if input is set
        if (this.closeOnSelect) {
            this.toggleActive();
        }
    };
    NovoCategoryDropdownElement.ɵfac = function NovoCategoryDropdownElement_Factory(t) { return new (t || NovoCategoryDropdownElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService)); };
    NovoCategoryDropdownElement.ɵcmp = ɵɵdefineComponent({ type: NovoCategoryDropdownElement, selectors: [["novo-category-dropdown"]], hostVars: 2, hostBindings: function NovoCategoryDropdownElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("keydown", function NovoCategoryDropdownElement_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
        } if (rf & 2) {
            ɵɵclassProp("active", ctx.active);
        } }, inputs: { persistSelection: "persistSelection", closeOnSelect: "closeOnSelect", search: "search", footer: "footer", categories: "categories" }, outputs: { _select: "itemSelected", categorySelected: "categorySelected" }, features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$3, decls: 2, vars: 1, consts: [["class", "dropdown-container", 4, "ngIf"], [1, "dropdown-container"], ["class", "novo-category-dropdown-search", "data-automation-id", "novo-category-dropdown-search", 4, "ngIf"], ["theme", "white", "direction", "vertical", 3, "outlet"], [3, "activeChange", 4, "ngFor", "ngForOf"], ["novoCategoryDropdownOutlet", ""], [4, "ngFor", "ngForOf"], [3, "class", 4, "ngIf"], ["data-automation-id", "novo-category-dropdown-search", 1, "novo-category-dropdown-search"], ["type", "text", 3, "placeholder", "value", "input"], ["class", "bhi-search", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], [1, "bhi-search"], [1, "bhi-times", 3, "click"], [3, "activeChange"], ["direction", "vertical"], [3, "click", 4, "ngFor", "ngForOf"], ["class", "novo-category-dropdown-empty-item", 4, "ngIf"], [3, "click"], ["class", "novo-category-dropdown-hover", 4, "ngIf"], [4, "ngIf"], [1, "novo-category-dropdown-hover"], [1, "bhi-check"], [1, "novo-category-dropdown-empty-item"]], template: function NovoCategoryDropdownElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$d);
            ɵɵprojection(0);
            ɵɵtemplate(1, NovoCategoryDropdownElement_div_1_Template, 8, 5, "div", 0);
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.active);
        } }, directives: [NgIf, NovoNavElement, NgForOf, NovoNavOutletElement, NovoTabElement, NovoNavContentElement, NovoListElement, NovoListItemElement, NovoItemContentElement, NovoItemEndElement], encapsulation: 2 });
    return NovoCategoryDropdownElement;
}(OutsideClick));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCategoryDropdownElement, [{
        type: Component,
        args: [{
                selector: 'novo-category-dropdown',
                template: "\n        <ng-content select=\"button\"></ng-content>\n        <div class=\"dropdown-container\" *ngIf=\"active\">\n            <div class=\"novo-category-dropdown-search\" *ngIf=\"search\" data-automation-id=\"novo-category-dropdown-search\">\n                <input type=\"text\" [placeholder]=\"search.placeholder || labels.search\" [value]=\"_query\" (input)=\"queryCategories($event.target.value)\"/>\n                <i class=\"bhi-search\" *ngIf=\"!_query\"></i>\n                <i class=\"bhi-times\" *ngIf=\"_query\" (click)=\"clearQuery($event)\"></i>\n            </div>\n            <novo-nav theme=\"white\" [outlet]=\"novoCategoryDropdownOutlet\" direction=\"vertical\">\n                <novo-tab *ngFor=\"let category of _categories\" [attr.data-automation-id]=\"category\" (activeChange)=\"onCategorySelected(category)\">\n                    <span>{{ category }} ({{ _categoryMap[category].length }})</span>\n                </novo-tab>\n            </novo-nav>\n            <novo-nav-outlet #novoCategoryDropdownOutlet>\n                <novo-nav-content *ngFor=\"let category of _categories\">\n                    <novo-list direction=\"vertical\">\n                        <novo-list-item *ngFor=\"let item of _categoryMap[category]\" (click)=\"select($event, item)\" [attr.data-automation-id]=\"item.label\">\n                            <item-content>{{ item.label }}</item-content>\n                            <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverText && !item.selected\">{{ item.hoverText }}</item-end>\n                            <item-end class=\"novo-category-dropdown-hover\" *ngIf=\"item.hoverIcon && !item.selected\"><i class=\"bhi-{{ item.hoverIcon }}\"></i></item-end>\n                            <item-end *ngIf=\"item.selected\"><i class=\"bhi-check\"></i></item-end>\n                        </novo-list-item>\n                        <novo-list-item *ngIf=\"_categoryMap[category].length === 0 && search\" class=\"novo-category-dropdown-empty-item\">\n                            <item-content>{{ search.emptyMessage || labels.noItems }}</item-content>\n                        </novo-list-item>\n                    </novo-list>\n                </novo-nav-content>\n            </novo-nav-outlet>\n            <footer *ngIf=\"footer\" class=\"novo-category-dropdown-footer-align-{{ footer.align || 'right' }}\">\n                <a *ngFor=\"let link of footer.links\" (click)=\"executeClickCallback($event, link)\">{{ link.label }}</a>\n            </footer>\n        </div>\n    ",
                host: {
                    '(keydown)': 'onKeyDown($event)',
                    '[class.active]': 'active',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }]; }, { persistSelection: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], search: [{
            type: Input
        }], footer: [{
            type: Input
        }], _select: [{
            type: Output,
            args: ['itemSelected']
        }], categorySelected: [{
            type: Output
        }], categories: [{
            type: Input
        }] }); })();

// NG2
var NovoTabModule = /** @class */ (function () {
    function NovoTabModule() {
    }
    NovoTabModule.ɵmod = ɵɵdefineNgModule({ type: NovoTabModule });
    NovoTabModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTabModule_Factory(t) { return new (t || NovoTabModule)(); }, imports: [[CommonModule]] });
    return NovoTabModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTabModule, { declarations: [NovoNavElement,
        NovoTabElement,
        NovoTabButtonElement,
        NovoTabLinkElement,
        NovoNavOutletElement,
        NovoNavContentElement,
        NovoNavHeaderElement], imports: [CommonModule], exports: [NovoNavElement,
        NovoTabElement,
        NovoTabButtonElement,
        NovoTabLinkElement,
        NovoNavOutletElement,
        NovoNavContentElement,
        NovoNavHeaderElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement,
                ],
                exports: [
                    NovoNavElement,
                    NovoTabElement,
                    NovoTabButtonElement,
                    NovoTabLinkElement,
                    NovoNavOutletElement,
                    NovoNavContentElement,
                    NovoNavHeaderElement,
                ],
            }]
    }], null, null); })();

// NG2
var NovoListModule = /** @class */ (function () {
    function NovoListModule() {
    }
    NovoListModule.ɵmod = ɵɵdefineNgModule({ type: NovoListModule });
    NovoListModule.ɵinj = ɵɵdefineInjector({ factory: function NovoListModule_Factory(t) { return new (t || NovoListModule)(); }, imports: [[CommonModule]] });
    return NovoListModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoListModule, { declarations: [NovoListElement,
        NovoListItemElement,
        NovoItemAvatarElement,
        NovoItemTitleElement,
        NovoItemContentElement,
        NovoItemEndElement,
        NovoItemHeaderElement,
        NovoItemDateElement], imports: [CommonModule], exports: [NovoListElement,
        NovoListItemElement,
        NovoItemAvatarElement,
        NovoItemTitleElement,
        NovoItemHeaderElement,
        NovoItemContentElement,
        NovoItemEndElement,
        NovoItemDateElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoListModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [
                    NovoListElement,
                    NovoListItemElement,
                    NovoItemAvatarElement,
                    NovoItemTitleElement,
                    NovoItemContentElement,
                    NovoItemEndElement,
                    NovoItemHeaderElement,
                    NovoItemDateElement,
                ],
                exports: [
                    NovoListElement,
                    NovoListItemElement,
                    NovoItemAvatarElement,
                    NovoItemTitleElement,
                    NovoItemHeaderElement,
                    NovoItemContentElement,
                    NovoItemEndElement,
                    NovoItemDateElement,
                ],
            }]
    }], null, null); })();

// NG2
var NovoCategoryDropdownModule = /** @class */ (function () {
    function NovoCategoryDropdownModule() {
    }
    NovoCategoryDropdownModule.ɵmod = ɵɵdefineNgModule({ type: NovoCategoryDropdownModule });
    NovoCategoryDropdownModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCategoryDropdownModule_Factory(t) { return new (t || NovoCategoryDropdownModule)(); }, imports: [[CommonModule, NovoTabModule, NovoListModule]] });
    return NovoCategoryDropdownModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCategoryDropdownModule, { declarations: [NovoCategoryDropdownElement], imports: [CommonModule, NovoTabModule, NovoListModule], exports: [NovoCategoryDropdownElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCategoryDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoTabModule, NovoListModule],
                declarations: [NovoCategoryDropdownElement],
                exports: [NovoCategoryDropdownElement],
            }]
    }], null, null); })();

// NG2
var ComponentUtils = /** @class */ (function () {
    function ComponentUtils(componentFactoryResolver) {
        this.componentFactoryResolver = componentFactoryResolver;
    }
    ComponentUtils.prototype.append = function (ComponentClass, location, providers, onTop) {
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(ComponentClass);
        var parent = location.injector;
        var index = onTop ? 0 : location.length;
        return location.createComponent(componentFactory, index, Injector.create({ providers: providers, parent: parent }));
    };
    ComponentUtils.ɵfac = function ComponentUtils_Factory(t) { return new (t || ComponentUtils)(ɵɵinject(ComponentFactoryResolver)); };
    ComponentUtils.ɵprov = ɵɵdefineInjectable({ token: ComponentUtils, factory: ComponentUtils.ɵfac });
    return ComponentUtils;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(ComponentUtils, [{
        type: Injectable
    }], function () { return [{ type: ComponentFactoryResolver }]; }, null); })();

// NG2
/**
 * @description This is the actual list of matches that gets injected into the DOM. It's also the piece that can be
 * overwritten if custom list options are needed.
 */
var BasePickerResults = /** @class */ (function () {
    function BasePickerResults(element, ref) {
        this._term = '';
        this.selected = [];
        this.matches = [];
        this.hasError = false;
        this.isLoading = false;
        this.isStatic = true;
        this.page = 0;
        this.lastPage = false;
        this.autoSelectFirstOption = true;
        this.optionsFunctionHasChanged = false;
        this.selectingMatches = false;
        this.element = element;
        this.ref = ref;
        this.scrollHandler = this.onScrollDown.bind(this);
    }
    BasePickerResults.prototype.cleanUp = function () {
        var element = this.getListElement();
        if (element && element.hasAttribute('scrollListener')) {
            element.removeAttribute('scrollListener');
            element.removeEventListener('scroll', this.scrollHandler);
        }
    };
    BasePickerResults.prototype.onScrollDown = function (event) {
        var element = event.target;
        if (element) {
            var offset = element.offsetHeight + element.scrollTop;
            var bottom = element.scrollHeight - 300;
            if (offset >= bottom) {
                event.stopPropagation();
                if (!this.lastPage && !this.isLoading) {
                    this.processSearch();
                }
            }
        }
    };
    Object.defineProperty(BasePickerResults.prototype, "term", {
        get: function () {
            return this._term;
        },
        set: function (value) {
            if (this.shouldSearch(value)) {
                this._term = value;
                this.page = 0;
                this.optionsFunctionHasChanged = false;
                this.matches = [];
                this.processSearch(true);
            }
            else {
                this.addScrollListener();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BasePickerResults.prototype, "config", {
        get: function () {
            return this._config;
        },
        set: function (value) {
            if (this.config && this.config.options !== value.options) {
                this.optionsFunctionHasChanged = true; // reset page so that new options call is used to search
            }
            this._config = value;
        },
        enumerable: true,
        configurable: true
    });
    BasePickerResults.prototype.shouldSearch = function (value) {
        var termHasChanged = value !== this._term;
        var optionsNotYetCalled = this.page === 0;
        return termHasChanged || optionsNotYetCalled || this.optionsFunctionHasChanged;
    };
    BasePickerResults.prototype.addScrollListener = function () {
        if (this.config.enableInfiniteScroll) {
            var element = this.getListElement();
            if (element && !element.hasAttribute('scrollListener')) {
                element.setAttribute('scrollListener', 'true');
                element.addEventListener('scroll', this.scrollHandler);
            }
        }
    };
    BasePickerResults.prototype.processSearch = function (shouldReset) {
        var _this = this;
        this.hasError = false;
        this.isLoading = true;
        this.ref.markForCheck();
        this.search(this.term).subscribe(function (results) {
            if (shouldReset) {
                _this.matches = [];
            }
            if (_this.isStatic) {
                _this.matches = _this.filterData(results);
            }
            else {
                _this.matches = _this.matches.concat(results);
                _this.lastPage = results && !results.length;
            }
            if (_this.matches.length > 0 && _this.autoSelectFirstOption && !_this.selectingMatches) {
                _this.nextActiveMatch();
            }
            _this.isLoading = false;
            _this.ref.markForCheck();
            setTimeout(function () {
                _this.overlay.updatePosition();
                _this.addScrollListener();
            }); // @bkimball: This was added for Dylan Schulte, 9.18.2017 4:14PM EST, you're welcome!
        }, function (err) {
            _this.hasError = _this.term && _this.term.length !== 0;
            _this.isLoading = false;
            _this.lastPage = true;
            if (_this.term && _this.term.length !== 0) {
                console.error(err); // tslint:disable-lineno
            }
            _this.ref.markForCheck();
        });
    };
    BasePickerResults.prototype.search = function (term, mode) {
        var _this = this;
        var options = this.config.options;
        return from(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(_this.structureArray(options));
                }
                else if (_this.shouldCallOptionsFunction(term)) {
                    if ((options.hasOwnProperty('reject') && options.hasOwnProperty('resolve')) ||
                        Object.getPrototypeOf(options).hasOwnProperty('then')) {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options.then(_this.structureArray.bind(_this)).then(resolve, reject);
                    }
                    else if (typeof options === 'function') {
                        _this.isStatic = false;
                        // Promises (ES6 or Deferred) are resolved whenever they resolve
                        options(term, ++_this.page)
                            .then(_this.structureArray.bind(_this))
                            .then(resolve, reject);
                    }
                    else {
                        // All other kinds of data are rejected
                        reject('The data provided is not an array or a promise');
                        throw new Error('The data provided is not an array or a promise');
                    }
                }
                else {
                    if (_this.config.defaultOptions) {
                        _this.isStatic = false;
                        if (typeof _this.config.defaultOptions === 'function') {
                            var defaultOptions = _this.config.defaultOptions(term, ++_this.page);
                            if (Object.getPrototypeOf(defaultOptions).hasOwnProperty('then')) {
                                defaultOptions.then(_this.structureArray.bind(_this)).then(resolve, reject);
                            }
                            else {
                                resolve(_this.structureArray(defaultOptions));
                            }
                        }
                        else {
                            resolve(_this.structureArray(_this.config.defaultOptions));
                        }
                    }
                    else {
                        // No search term gets rejected
                        reject('No search term');
                    }
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    BasePickerResults.prototype.shouldCallOptionsFunction = function (term) {
        if (this.config && 'minSearchLength' in this.config && Number.isInteger(this.config.minSearchLength)) {
            return typeof term === 'string' && term.length >= this.config.minSearchLength;
        }
        else {
            return !!(term && term.length);
        }
    };
    /**
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    BasePickerResults.prototype.structureArray = function (collection) {
        var _this = this;
        var dataArray = collection.data ? collection.data : collection;
        if (dataArray && (typeof dataArray[0] === 'string' || typeof dataArray[0] === 'number')) {
            return collection.map(function (item) {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return dataArray.map(function (data) {
            var value = _this.config.field ? data[_this.config.field] : data.value || data;
            if (_this.config.valueFormat) {
                value = Helpers.interpolate(_this.config.valueFormat, data);
            }
            var label = _this.config.format ? Helpers.interpolate(_this.config.format, data) : data.label || String(value);
            return { value: value, label: label, data: data };
        });
    };
    /**
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    BasePickerResults.prototype.filterData = function (matches) {
        var _this = this;
        if (this.term && matches) {
            return matches.filter(function (match) {
                return ~String(match.label)
                    .toLowerCase()
                    .indexOf(_this.term.toLowerCase());
            });
        }
        // Show no recent results template
        return matches;
    };
    /**
     * @description This function is called when the user presses the enter key to call the selectMatch method.
     */
    BasePickerResults.prototype.selectActiveMatch = function () {
        this.selectMatch();
    };
    /**
     * @description This function sets activeMatch to the match before the current node.
     */
    BasePickerResults.prototype.prevActiveMatch = function () {
        var index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index - 1 < 0 ? this.matches.length - 1 : index - 1];
        this.scrollToActive();
        this.ref.markForCheck();
    };
    /**
     * @description This function sets activeMatch to the match after the current node.
     */
    BasePickerResults.prototype.nextActiveMatch = function () {
        var index = this.matches.indexOf(this.activeMatch);
        this.activeMatch = this.matches[index + 1 > this.matches.length - 1 ? 0 : index + 1];
        this.scrollToActive();
        this.ref.markForCheck();
    };
    BasePickerResults.prototype.getListElement = function () {
        return this.element.nativeElement;
    };
    BasePickerResults.prototype.getChildrenOfListElement = function () {
        var children = [];
        if (this.getListElement()) {
            children = this.getListElement().children;
        }
        return children;
    };
    BasePickerResults.prototype.scrollToActive = function () {
        var list = this.getListElement();
        var items = this.getChildrenOfListElement();
        var index = this.matches.indexOf(this.activeMatch);
        var item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    /**
     * @description
     */
    BasePickerResults.prototype.selectActive = function (match) {
        this.activeMatch = match;
    };
    /**
     * @description
     */
    BasePickerResults.prototype.isActive = function (match) {
        return this.activeMatch === match;
    };
    /**
     * @description
     */
    BasePickerResults.prototype.selectMatch = function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        var selected = this.activeMatch;
        if (selected && this.parent) {
            this.parent.value = selected;
            this.selectingMatches = true;
            if (this.parent.closeOnSelect) {
                this.parent.hideResults();
                this.selectingMatches = false;
            }
        }
        this.ref.markForCheck();
        return false;
    };
    /**
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    BasePickerResults.prototype.escapeRegexp = function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * @description This function should return a <strong>-tag wrapped HTML string.
     */
    BasePickerResults.prototype.highlight = function (match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    };
    BasePickerResults.prototype.preselected = function (match) {
        if (this.config.preselected) {
            var preselectedFunc_1 = this.config.preselected;
            return (this.selected.findIndex(function (item) {
                return preselectedFunc_1(match, item);
            }) !== -1);
        }
        return (this.selected.findIndex(function (item) {
            var isPreselected = false;
            if (item && item.value && match && match.value) {
                if (item.value.id && match.value.id) {
                    isPreselected = item.value.id === match.value.id;
                }
                else if (item.value instanceof Object && item.value.hasOwnProperty('value')) {
                    isPreselected = item.value.value === match.value;
                }
                else {
                    isPreselected = item.value === match.value;
                }
            }
            return isPreselected;
        }) !== -1);
    };
    BasePickerResults.ɵfac = function BasePickerResults_Factory(t) { return new (t || BasePickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
    BasePickerResults.ɵdir = ɵɵdefineDirective({ type: BasePickerResults, inputs: { matches: "matches" } });
    return BasePickerResults;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(BasePickerResults, [{
        type: Directive
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { matches: [{
            type: Input
        }] }); })();

function PickerResults_novo_list_0_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 7);
    ɵɵlistener("click", function PickerResults_novo_list_0_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r8); var ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectMatch($event); })("mouseenter", function PickerResults_novo_list_0_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r8); var match_r6 = ctx.$implicit; var ctx_r9 = ɵɵnextContext(2); return ctx_r9.selectActive(match_r6); });
    ɵɵelementStart(1, "item-content");
    ɵɵelement(2, "span", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r6 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r6 === ctx_r4.activeMatch)("disabled", ctx_r4.preselected(match_r6));
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r6.label, ctx_r4.term), ɵɵsanitizeHtml);
} }
function PickerResults_novo_list_0_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 9);
} }
function PickerResults_novo_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 4);
    ɵɵtemplate(1, PickerResults_novo_list_0_novo_list_item_1_Template, 3, 5, "novo-list-item", 5);
    ɵɵtemplate(2, PickerResults_novo_list_0_novo_loading_2_Template, 1, 0, "novo-loading", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.isLoading && ctx_r0.matches.length > 0);
} }
function PickerResults_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 10);
    ɵɵelement(1, "novo-loading", 9);
    ɵɵelementEnd();
} }
function PickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerError);
} }
function PickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 12);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.getEmptyMessage());
} }
var PickerResults = /** @class */ (function (_super) {
    __extends(PickerResults, _super);
    function PickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        return _this;
    }
    Object.defineProperty(PickerResults.prototype, "hasNonErrorMessage", {
        get: function () {
            return !this.isLoading && !this.matches.length && !this.hasError;
        },
        enumerable: true,
        configurable: true
    });
    PickerResults.prototype.getEmptyMessage = function () {
        if (this.shouldShowMessageForZeroLengthSearch()) {
            // this property comes from Field Interactions
            return this.config.emptyPickerMessage;
        }
        else {
            return this.term === '' ? this.labels.pickerTextFieldEmpty : this.labels.pickerEmpty;
        }
    };
    PickerResults.prototype.shouldShowMessageForZeroLengthSearch = function () {
        return this.config && this.config.minSearchLength === 0 && this.term === '' && this.config.emptyPickerMessage;
    };
    PickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    PickerResults.ɵfac = function PickerResults_Factory(t) { return new (t || PickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    PickerResults.ɵcmp = ɵɵdefineComponent({ type: PickerResults, selectors: [["picker-results"]], hostAttrs: [1, "active"], features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["direction", "vertical", 4, "ngIf"], ["class", "picker-loader", 4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null-results", 4, "ngIf"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], ["theme", "line"], [1, "picker-loader"], [1, "picker-error"], [1, "picker-null-results"]], template: function PickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, PickerResults_novo_list_0_Template, 3, 2, "novo-list", 0);
            ɵɵtemplate(1, PickerResults_div_1_Template, 2, 0, "div", 1);
            ɵɵtemplate(2, PickerResults_p_2_Template, 2, 1, "p", 2);
            ɵɵtemplate(3, PickerResults_p_3_Template, 2, 1, "p", 3);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.matches.length > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.isLoading && ctx.matches.length === 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasError);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasNonErrorMessage);
        } }, directives: [NgIf, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement, NovoLoadingElement], encapsulation: 2 });
    return PickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(PickerResults, [{
        type: Component,
        args: [{
                selector: 'picker-results',
                host: {
                    class: 'active',
                },
                template: "\n    <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-content> <span [innerHtml]=\"highlight(match.label, term)\"></span> </item-content>\n      </novo-list-item>\n      <novo-loading *ngIf=\"isLoading && matches.length > 0\" theme=\"line\"></novo-loading>\n    </novo-list>\n    <div class=\"picker-loader\" *ngIf=\"isLoading && matches.length === 0\"><novo-loading theme=\"line\"></novo-loading></div>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null-results\" *ngIf=\"hasNonErrorMessage\">{{ getEmptyMessage() }}</p>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, null); })();

var _c0$e = ["panel"];
function NovoOverlayTemplateComponent_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 0, 1);
    ɵɵprojection(2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("id", ctx_r0.id);
} }
var _c1$4 = ["*"];
var NovoOverlayTemplateComponent = /** @class */ (function () {
    function NovoOverlayTemplateComponent(overlay, viewContainerRef, zone, changeDetectorRef, document) {
        this.overlay = overlay;
        this.viewContainerRef = viewContainerRef;
        this.zone = zone;
        this.changeDetectorRef = changeDetectorRef;
        this.document = document;
        this.id = "novo-overlay-" + Date.now();
        this.position = 'default';
        this.scrollStrategy = 'reposition';
        this.closeOnSelect = true;
        this.select = new EventEmitter();
        this.closing = new EventEmitter();
    }
    NovoOverlayTemplateComponent.prototype.ngOnDestroy = function () {
        this.destroyOverlay();
    };
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "panelOpen", {
        get: function () {
            return this.overlayRef && this.overlayRef.hasAttached();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "parent", {
        get: function () {
            return this._parent;
        },
        set: function (value) {
            this._parent = value;
            this.checkSizes();
        },
        enumerable: true,
        configurable: true
    });
    NovoOverlayTemplateComponent.prototype.openPanel = function () {
        var _this = this;
        if (!this.overlayRef) {
            this.createOverlay(this.template);
        }
        else {
            this.checkSizes();
        }
        if (this.overlayRef && !this.overlayRef.hasAttached()) {
            this.overlayRef.attach(this.portal);
            this.closingActionsSubscription = this.subscribeToClosingActions();
        }
        this.changeDetectorRef.markForCheck();
        setTimeout(function () {
            if (_this.overlayRef) {
                _this.overlayRef.updatePosition();
            }
        });
    };
    NovoOverlayTemplateComponent.prototype.closePanel = function () {
        var _this = this;
        this.zone.run(function () {
            if (_this.overlayRef && _this.overlayRef.hasAttached()) {
                _this.overlayRef.detach();
                _this.closingActionsSubscription.unsubscribe();
            }
            _this.closing.emit(true);
            if (_this.panelOpen) {
                _this.changeDetectorRef.markForCheck();
            }
        });
    };
    NovoOverlayTemplateComponent.prototype.onClosingAction = function (event) {
        this.closePanel();
    };
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "panelClosingActions", {
        /**
         * A stream of actions that should close the autocomplete panel, including
         * when an option is selected, on blur, and when TAB is pressed.
         */
        get: function () {
            return merge(
            // this.overlayTemplate._keyManager.tabOut,
            this.outsideClickStream);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoOverlayTemplateComponent.prototype, "outsideClickStream", {
        /** Stream of clicks outside of the autocomplete panel. */
        get: function () {
            var _this = this;
            if (!this.document) {
                return of();
            }
            return merge(fromEvent(this.document, 'mousedown'), fromEvent(this.document, 'touchend')).pipe(filter(function (event) {
                var clickTarget = event.target;
                var clicked = _this.panelOpen &&
                    clickTarget !== _this.getConnectedElement().nativeElement &&
                    !_this.getConnectedElement().nativeElement.contains(clickTarget) &&
                    (!!_this.overlayRef && !_this.overlayRef.overlayElement.contains(clickTarget));
                if (_this.panelOpen && !!_this.overlayRef && _this.overlayRef.overlayElement.contains(clickTarget) && _this.closeOnSelect) {
                    _this.select.emit(event);
                }
                return clicked;
            }));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This method listens to a stream of panel closing actions and resets the
     * stream every time the option list changes.
     */
    NovoOverlayTemplateComponent.prototype.subscribeToClosingActions = function () {
        var _this = this;
        var firstStable = this.zone.onStable.asObservable().pipe(first());
        // const valueChanges = Observable.from(this.value);
        // When the zone is stable initially, and when the option list changes...
        return (merge(firstStable)
            .pipe(
        // create a new stream of panelClosingActions, replacing any previous streams
        // that were created, and flatten it so our stream only emits closing events...
        switchMap(function () {
            return _this.panelClosingActions;
        }), 
        // when the first closing event occurs...
        first())
            // set the value, close the panel, and complete.
            .subscribe(function (event) { return _this.onClosingAction(event); }));
    };
    NovoOverlayTemplateComponent.prototype.createOverlay = function (template) {
        var _this = this;
        this.portal = new TemplatePortal(template, this.viewContainerRef);
        this.overlayRef = this.overlay.create(this.getOverlayConfig());
        this.overlayRef.backdropClick().subscribe(function () { return _this.closePanel(); });
    };
    NovoOverlayTemplateComponent.prototype.destroyOverlay = function () {
        if (this.overlayRef) {
            this.closePanel();
            this.overlayRef.dispose();
            this.overlayRef = undefined;
        }
    };
    NovoOverlayTemplateComponent.prototype.getOverlayConfig = function () {
        var config = new OverlayConfig();
        if (!this.width) {
            config.width = this.getHostWidth();
        }
        else {
            config.width = this.width;
        }
        if (this.height) {
            config.height = this.height;
        }
        config.positionStrategy = this.getPosition();
        config.hasBackdrop = false;
        config.direction = 'ltr';
        config.scrollStrategy = this.getScrollStrategy();
        return config;
    };
    /**
     * Supports the following position strategies:
     * 'default', 'right', 'bottom', 'center', 'bottom-left', 'bottom-right', 'top-left', 'top-right'
     */
    NovoOverlayTemplateComponent.prototype.getPosition = function () {
        if (this.position === 'center') {
            return this.overlay
                .position()
                .connectedTo(this.getConnectedElement(), { originX: 'start', originY: 'center' }, { overlayX: 'start', overlayY: 'center' })
                .withFallbackPosition({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'top' })
                .withFallbackPosition({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'bottom' });
        }
        var _a = __read(this.position.includes('right') ? ['end', 'start'] : ['start', 'end'], 2), originX = _a[0], fallbackX = _a[1];
        var _b = __read(this.position.includes('top') ? ['top', 'bottom'] : ['bottom', 'top'], 2), originY = _b[0], overlayY = _b[1];
        var strategy = this.overlay
            .position()
            .connectedTo(this.getConnectedElement(), { originX: originX, originY: originY }, { overlayX: originX, overlayY: overlayY })
            .withDirection('ltr');
        if (this.position === 'bottom') {
            strategy = strategy.withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' });
        }
        else if (this.position === 'right' || this.position === 'default' || this.position.includes('above-below')) {
            strategy = strategy
                .withFallbackPosition({ originX: originX, originY: 'top' }, { overlayX: originX, overlayY: 'bottom' })
                .withFallbackPosition({ originX: fallbackX, originY: 'bottom' }, { overlayX: fallbackX, overlayY: 'top' })
                .withFallbackPosition({ originX: fallbackX, originY: 'top' }, { overlayX: fallbackX, overlayY: 'bottom' });
            if (!this.position.includes('above-below')) {
                strategy = strategy
                    .withFallbackPosition({ originX: originX, originY: 'center' }, { overlayX: originX, overlayY: 'center' })
                    .withFallbackPosition({ originX: fallbackX, originY: 'center' }, { overlayX: fallbackX, overlayY: 'center' });
            }
        }
        return strategy;
    };
    NovoOverlayTemplateComponent.prototype.getScrollStrategy = function () {
        switch (this.scrollStrategy) {
            case 'block':
                return this.overlay.scrollStrategies.block();
            case 'reposition':
                return this.overlay.scrollStrategies.reposition();
            default:
                return this.overlay.scrollStrategies.close();
        }
    };
    NovoOverlayTemplateComponent.prototype.checkSizes = function () {
        if (this.overlayRef) {
            if (!this.width) {
                this.overlayRef.getConfig().width = this.getHostWidth();
            }
            if (this.height) {
                this.overlayRef.getConfig().height = this.height;
            }
            this.overlayRef.updateSize(this.overlayRef.getConfig());
            this.overlayRef.updatePosition();
            this.changeDetectorRef.markForCheck();
        }
    };
    NovoOverlayTemplateComponent.prototype.getConnectedElement = function () {
        return this.parent;
    };
    NovoOverlayTemplateComponent.prototype.getHostWidth = function () {
        return this.getConnectedElement().nativeElement.getBoundingClientRect().width;
    };
    NovoOverlayTemplateComponent.ɵfac = function NovoOverlayTemplateComponent_Factory(t) { return new (t || NovoOverlayTemplateComponent)(ɵɵdirectiveInject(Overlay), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DOCUMENT, 8)); };
    NovoOverlayTemplateComponent.ɵcmp = ɵɵdefineComponent({ type: NovoOverlayTemplateComponent, selectors: [["novo-overlay-template"]], viewQuery: function NovoOverlayTemplateComponent_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(TemplateRef, true);
            ɵɵviewQuery(_c0$e, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.panel = _t.first);
        } }, inputs: { position: "position", scrollStrategy: "scrollStrategy", width: "width", height: "height", closeOnSelect: "closeOnSelect", parent: "parent" }, outputs: { select: "select", closing: "closing" }, ngContentSelectors: _c1$4, decls: 1, vars: 0, consts: [["role", "listbox", 1, "novo-overlay-panel", 3, "id"], ["panel", ""]], template: function NovoOverlayTemplateComponent_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵtemplate(0, NovoOverlayTemplateComponent_ng_template_0_Template, 3, 1, "ng-template");
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoOverlayTemplateComponent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOverlayTemplateComponent, [{
        type: Component,
        args: [{
                selector: 'novo-overlay-template',
                template: "\n    <ng-template>\n      <div class=\"novo-overlay-panel\" role=\"listbox\" [id]=\"id\" #panel><ng-content></ng-content></div>\n    </ng-template>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: Overlay }, { type: ViewContainerRef }, { type: NgZone }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { template: [{
            type: ViewChild,
            args: [TemplateRef]
        }], panel: [{
            type: ViewChild,
            args: ['panel']
        }], position: [{
            type: Input
        }], scrollStrategy: [{
            type: Input
        }], width: [{
            type: Input
        }], height: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], select: [{
            type: Output
        }], closing: [{
            type: Output
        }], parent: [{
            type: Input
        }] }); })();

var notifications = {};
function notify(message) {
    if (!isDevMode() || message in notifications) {
        return;
    }
    notifications[message] = true;
    console.warn(message); // tslint:disable-line
}

// NG2
var _c0$f = ["results"];
var _c1$5 = ["input"];
function NovoPickerElement_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 8);
} }
function NovoPickerElement_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassMapInterpolate2("bhi-", ctx_r1.config == null ? null : ctx_r1.config.entityIcon, " entity-icon ", ctx_r1.config == null ? null : ctx_r1.config.entityIcon, "");
} }
function NovoPickerElement_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 9);
} }
function NovoPickerElement_i_5_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 10);
    ɵɵlistener("click", function NovoPickerElement_i_5_Template_i_click_0_listener() { ɵɵrestoreView(_r7); var ctx_r6 = ɵɵnextContext(); return ctx_r6.clearValue(true); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("entity-selected", (ctx_r4.config == null ? null : ctx_r4.config.entityIcon) && ctx_r4._value);
} }
var _c2$2 = ["*"];
// Value accessor for the component (supports ngModel)
var PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoPickerElement; }),
    multi: true,
};
/**
 * @description This class is the directive definition of the Picker. If you add and attribute of `picker` to an input,
 * it will create an instance of the picker which wraps the input in all of the picker HTML elements and functionality.
 * Picker should be added as a two-way bound ngModel instance `[(picker)]=""` in order to have the picker options
 * dynamically populate.
 */
var NovoPickerElement = /** @class */ (function () {
    function NovoPickerElement(element, componentUtils, ref) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.ref = ref;
        this.closeOnSelect = true;
        this.selected = [];
        // Deprecated
        this.appendToBody = false;
        // Deprecated
        this.parentScrollAction = 'close';
        // Side the dropdown will open
        this.side = 'left';
        // Autoselects the first option in the results
        this.autoSelectFirstOption = true;
        this._disablePickerInput = false;
        // Emitter for selects
        this.changed = new EventEmitter();
        this.select = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.term = '';
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoPickerElement.prototype, "disablePickerInput", {
        get: function () {
            return this._disablePickerInput;
        },
        // Disable from typing into the picker (result template does everything)
        set: function (v) {
            this._disablePickerInput = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    NovoPickerElement.prototype.ngOnInit = function () {
        var _this = this;
        if (this.overrideElement) {
            this.element = this.overrideElement;
        }
        if (this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        // Custom results template
        this.resultsComponent = this.config.resultsTemplate || PickerResults;
        // Get all distinct key up events from the input and only fire if long enough and distinct
        // let input = this.element.nativeElement.querySelector('input');
        var pasteObserver = fromEvent(this.input.nativeElement, 'paste').pipe(debounceTime(250), distinctUntilChanged());
        pasteObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
        var keyboardObserver = fromEvent(this.input.nativeElement, 'keyup').pipe(debounceTime(250), distinctUntilChanged());
        keyboardObserver.subscribe(function (event) { return _this.onDebouncedKeyup(event); }, function (err) { return _this.hideResults(err); });
    };
    NovoPickerElement.prototype.onDebouncedKeyup = function (event) {
        if ([KeyCodes.ESC, KeyCodes.UP, KeyCodes.DOWN, KeyCodes.ENTER, KeyCodes.TAB].includes(event['keyCode'])) {
            return;
        }
        this.show(event.target.value);
    };
    NovoPickerElement.prototype.openPanel = function () {
        this.container.openPanel();
    };
    NovoPickerElement.prototype.closePanel = function () {
        this.container.closePanel();
    };
    Object.defineProperty(NovoPickerElement.prototype, "panelOpen", {
        get: function () {
            return this.container && this.container.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    NovoPickerElement.prototype.show = function (term) {
        this.openPanel();
        // Show the results inside
        this.showResults(term);
    };
    NovoPickerElement.prototype.onKeyDown = function (event) {
        if (this.disablePickerInput) {
            Helpers.swallowEvent(event);
            return;
        }
        if (this.panelOpen && !this.disablePickerInput) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.hideResults();
                return;
            }
            if (event.keyCode === KeyCodes.UP) {
                this.popup.instance.prevActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.DOWN) {
                this.popup.instance.nextActiveMatch();
                this.ref.markForCheck();
                return;
            }
            if (event.keyCode === KeyCodes.ENTER) {
                var activeMatch_1 = this.popup.instance.activeMatch;
                if (!this.selected.find(function (selected) { return activeMatch_1 && activeMatch_1.value && selected.value === activeMatch_1.value; })) {
                    this.popup.instance.selectActiveMatch();
                    this.ref.markForCheck();
                }
                return;
            }
            if ((event.keyCode === KeyCodes.BACKSPACE || event.keyCode === KeyCodes.DELETE) && !Helpers.isBlank(this._value)) {
                this.clearValue(false);
                this.closePanel();
            }
            if (event.keyCode === KeyCodes.DELETE && Helpers.isBlank(this._value)) {
                this.clearValue(true);
            }
        }
    };
    NovoPickerElement.prototype.clearValue = function (wipeTerm) {
        this._value = null;
        this.select.emit(this._value);
        this.changed.emit({ value: this._value, rawValue: { label: '', value: this._value } });
        this.onModelChange(this._value);
        if (wipeTerm) {
            this.term = '';
            this.hideResults();
        }
        this.ref.markForCheck();
    };
    /**
     * @description When the input's focus event is called this method calls the debounced function that displays the
     * results.
     */
    NovoPickerElement.prototype.onFocus = function (event) {
        if (!this.panelOpen) {
            this.show();
        }
        this.focus.emit(event);
    };
    // Creates an instance of the results (called popup) and adds all the bindings to that instance.
    NovoPickerElement.prototype.showResults = function (term) {
        // Update Matches
        if (this.popup) {
            // Update existing list or create the DOM element
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.ref.markForCheck();
        }
        else {
            this.popup = this.componentUtils.append(this.resultsComponent, this.results);
            this.popup.instance.parent = this;
            this.popup.instance.config = this.config;
            this.popup.instance.term = this.term;
            this.popup.instance.selected = this.selected;
            this.popup.instance.autoSelectFirstOption = this.autoSelectFirstOption;
            this.popup.instance.overlay = this.container.overlayRef;
            this.ref.markForCheck();
        }
    };
    // Tells the overlay component to hide the picker results from the DOM without deleting the dynamically allocated popup instance created in
    // showResults. The popup instance will remain in memory from the first time the results are shown until this component is destroyed.
    NovoPickerElement.prototype.hideResults = function (err) {
        this.closePanel();
        this.ref.markForCheck();
    };
    // Cleans up listeners for the popup - will get executed no matter how the popup is closed.
    NovoPickerElement.prototype.onOverlayClosed = function () {
        if (this.popup && this.popup.instance && this.popup.instance.cleanUp) {
            this.popup.instance.cleanUp();
        }
    };
    Object.defineProperty(NovoPickerElement.prototype, "value", {
        // get accessor
        get: function () {
            return this._value;
        },
        // set accessor including call the onchange callback
        set: function (selected) {
            if (!selected) {
                this.term = '';
                this._value = null;
                this.onModelChange(this._value);
            }
            else if (selected.value !== this._value) {
                this.term = this.clearValueOnSelect ? '' : selected.label;
                this._value = selected.value;
                this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: selected.value } });
                this.select.emit(selected);
                this.onModelChange(selected.value);
                if (this.popup) {
                    this.popup.instance.selected = this.selected;
                }
            }
            else {
                this.changed.emit({ value: selected.value, rawValue: { label: this.term, value: this._value } });
                this.select.emit(selected);
            }
            this.ref.markForCheck();
        },
        enumerable: true,
        configurable: true
    });
    // Makes sure to clear the model if the user clears the text box
    NovoPickerElement.prototype.checkTerm = function (event) {
        this.typing.emit(event);
        if (!event || !event.length) {
            this._value = null;
            this.onModelChange(this._value);
        }
        this.ref.markForCheck();
    };
    // Set touched on blur
    NovoPickerElement.prototype.onTouched = function (event) {
        this.onModelTouched();
        this.blur.emit(event);
    };
    // From ControlValueAccessor interface
    NovoPickerElement.prototype.writeValue = function (value) {
        var _this = this;
        if (this.clearValueOnSelect) {
            this.term = '';
        }
        else {
            if (typeof value === 'string' && !this.config.useGetLabels) {
                this.term = value;
            }
            else if (value && value.label) {
                this.term = value.label;
            }
            else if (value && value.firstName) {
                this.term = value.firstName + " " + value.lastName;
            }
            else if (value && value.name) {
                this.term = value.name;
            }
            else if (typeof this.config.getLabels === 'function') {
                this.config.getLabels(value).then(function (result) {
                    if (result) {
                        _this.term = result.length ? result[0].label || '' : result.label || '';
                    }
                    else {
                        _this.term = value;
                    }
                    _this.ref.markForCheck();
                });
            }
            else if (value && value.title) {
                this.term = value.title;
            }
            else {
                this.term = value || '';
            }
        }
        this._value = value;
        this.ref.markForCheck();
    };
    NovoPickerElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoPickerElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoPickerElement.prototype.setDisabledState = function (disabled) {
        this._disablePickerInput = disabled;
    };
    NovoPickerElement.ɵfac = function NovoPickerElement_Factory(t) { return new (t || NovoPickerElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoPickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoPickerElement, selectors: [["novo-picker"]], viewQuery: function NovoPickerElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(_c0$f, true, ViewContainerRef);
            ɵɵstaticViewQuery(NovoOverlayTemplateComponent, true);
            ɵɵstaticViewQuery(_c1$5, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.results = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
        } }, inputs: { config: "config", placeholder: "placeholder", clearValueOnSelect: "clearValueOnSelect", closeOnSelect: "closeOnSelect", selected: "selected", appendToBody: "appendToBody", parentScrollSelector: "parentScrollSelector", parentScrollAction: "parentScrollAction", containerClass: "containerClass", side: "side", autoSelectFirstOption: "autoSelectFirstOption", overrideElement: "overrideElement", disablePickerInput: "disablePickerInput" }, outputs: { changed: "changed", select: "select", focus: "focus", blur: "blur", typing: "typing" }, features: [ɵɵProvidersFeature([PICKER_VALUE_ACCESSOR])], ngContentSelectors: _c2$2, decls: 10, vars: 12, consts: [["class", "bhi-more", 4, "ngIf"], [3, "class", 4, "ngIf"], ["type", "text", "autocomplete", "off", 1, "picker-input", 3, "ngModel", "placeholder", "disabled", "ngModelChange", "keydown", "focus", "click", "blur"], ["input", ""], ["class", "bhi-search", 4, "ngIf"], ["class", "bhi-times", 3, "entity-selected", "click", 4, "ngIf"], ["position", "above-below", 1, "picker-results-container", 3, "parent", "closing"], ["results", ""], [1, "bhi-more"], [1, "bhi-search"], [1, "bhi-times", 3, "click"]], template: function NovoPickerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵtemplate(0, NovoPickerElement_i_0_Template, 1, 0, "i", 0);
            ɵɵtemplate(1, NovoPickerElement_i_1_Template, 1, 4, "i", 1);
            ɵɵelementStart(2, "input", 2, 3);
            ɵɵlistener("ngModelChange", function NovoPickerElement_Template_input_ngModelChange_2_listener($event) { return ctx.term = $event; })("ngModelChange", function NovoPickerElement_Template_input_ngModelChange_2_listener($event) { return ctx.checkTerm($event); })("keydown", function NovoPickerElement_Template_input_keydown_2_listener($event) { return ctx.onKeyDown($event); })("focus", function NovoPickerElement_Template_input_focus_2_listener($event) { return ctx.onFocus($event); })("click", function NovoPickerElement_Template_input_click_2_listener($event) { return ctx.onFocus($event); })("blur", function NovoPickerElement_Template_input_blur_2_listener($event) { return ctx.onTouched($event); });
            ɵɵelementEnd();
            ɵɵtemplate(4, NovoPickerElement_i_4_Template, 1, 0, "i", 4);
            ɵɵtemplate(5, NovoPickerElement_i_5_Template, 1, 2, "i", 5);
            ɵɵelementStart(6, "novo-overlay-template", 6);
            ɵɵlistener("closing", function NovoPickerElement_Template_novo_overlay_template_closing_6_listener() { return ctx.onOverlayClosed(); });
            ɵɵelement(7, "span", null, 7);
            ɵɵprojection(9);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngIf", (ctx.config == null ? null : ctx.config.entityIcon) && !ctx._value);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.config == null ? null : ctx.config.entityIcon) && ctx._value);
            ɵɵadvance(1);
            ɵɵclassProp("entity-picker", ctx.config == null ? null : ctx.config.entityIcon)("entity-selected", (ctx.config == null ? null : ctx.config.entityIcon) && ctx._value);
            ɵɵproperty("ngModel", ctx.term)("placeholder", ctx.placeholder)("disabled", ctx.disablePickerInput);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", (!ctx._value || ctx.clearValueOnSelect) && !ctx.disablePickerInput);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx._value && !ctx.clearValueOnSelect && !ctx.disablePickerInput);
            ɵɵadvance(1);
            ɵɵproperty("parent", ctx.element);
        } }, directives: [NgIf, DefaultValueAccessor, NgControlStatus, NgModel, NovoOverlayTemplateComponent], encapsulation: 2 });
    return NovoPickerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-picker',
                providers: [PICKER_VALUE_ACCESSOR],
                template: "\n    <i class=\"bhi-more\" *ngIf=\"config?.entityIcon && !_value\"></i>\n    <i class=\"bhi-{{ config?.entityIcon }} entity-icon {{ config?.entityIcon }}\" *ngIf=\"config?.entityIcon && _value\"></i>\n    <input\n      type=\"text\"\n      class=\"picker-input\"\n      [(ngModel)]=\"term\"\n      [class.entity-picker]=\"config?.entityIcon\"\n      [class.entity-selected]=\"config?.entityIcon && _value\"\n      (ngModelChange)=\"checkTerm($event)\"\n      [placeholder]=\"placeholder\"\n      (keydown)=\"onKeyDown($event)\"\n      (focus)=\"onFocus($event)\"\n      (click)=\"onFocus($event)\"\n      (blur)=\"onTouched($event)\"\n      autocomplete=\"off\"\n      #input\n      [disabled]=\"disablePickerInput\"\n    />\n    <i class=\"bhi-search\" *ngIf=\"(!_value || clearValueOnSelect) && !disablePickerInput\"></i>\n    <i\n      class=\"bhi-times\"\n      [class.entity-selected]=\"config?.entityIcon && _value\"\n      *ngIf=\"_value && !clearValueOnSelect && !disablePickerInput\"\n      (click)=\"clearValue(true)\"\n    ></i>\n    <novo-overlay-template class=\"picker-results-container\" [parent]=\"element\" position=\"above-below\" (closing)=\"onOverlayClosed()\">\n      <span #results></span>\n      <ng-content></ng-content>\n    </novo-overlay-template>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }, { type: ChangeDetectorRef }]; }, { results: [{
            type: ViewChild,
            args: ['results', { read: ViewContainerRef, static: true }]
        }], config: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], clearValueOnSelect: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], selected: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], parentScrollSelector: [{
            type: Input
        }], parentScrollAction: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], side: [{
            type: Input
        }], autoSelectFirstOption: [{
            type: Input
        }], overrideElement: [{
            type: Input
        }], disablePickerInput: [{
            type: Input
        }], changed: [{
            type: Output
        }], select: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], typing: [{
            type: Output
        }], container: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent, { static: true }]
        }], input: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }] }); })();

function NovoChipElement_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 3);
} }
function NovoChipElement_i_4_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 4);
    ɵɵlistener("click", function NovoChipElement_i_4_Template_i_click_0_listener($event) { ɵɵrestoreView(_r3); var ctx_r2 = ɵɵnextContext(); return ctx_r2.onRemove($event); });
    ɵɵelementEnd();
} }
var _c0$g = ["*"];
var _c1$6 = ["preview"];
function NovoChipsElement_novo_chip_1_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-chip", 7);
    ɵɵlistener("remove", function NovoChipsElement_novo_chip_1_Template_novo_chip_remove_0_listener($event) { ɵɵrestoreView(_r7); var item_r5 = ctx.$implicit; var ctx_r6 = ɵɵnextContext(); return ctx_r6.remove($event, item_r5); })("select", function NovoChipsElement_novo_chip_1_Template_novo_chip_select_0_listener($event) { ɵɵrestoreView(_r7); var item_r5 = ctx.$implicit; var ctx_r8 = ɵɵnextContext(); return ctx_r8.select($event, item_r5); })("deselect", function NovoChipsElement_novo_chip_1_Template_novo_chip_deselect_0_listener($event) { ɵɵrestoreView(_r7); var item_r5 = ctx.$implicit; var ctx_r9 = ɵɵnextContext(); return ctx_r9.deselect($event, item_r5); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r5 = ctx.$implicit;
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("selected", item_r5 == ctx_r0.selected);
    ɵɵproperty("type", ctx_r0.type || (item_r5 == null ? null : item_r5.value == null ? null : item_r5.value.searchEntity))("disabled", ctx_r0.disablePickerInput);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", item_r5.label, " ");
} }
function NovoChipsElement_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 8);
    ɵɵelementStart(1, "novo-picker", 9);
    ɵɵlistener("ngModelChange", function NovoChipsElement_div_3_Template_novo_picker_ngModelChange_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r10 = ɵɵnextContext(); return ctx_r10.itemToAdd = $event; })("select", function NovoChipsElement_div_3_Template_novo_picker_select_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r12 = ɵɵnextContext(); return ctx_r12.add($event); })("keydown", function NovoChipsElement_div_3_Template_novo_picker_keydown_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r13 = ɵɵnextContext(); return ctx_r13.onKeyDown($event); })("focus", function NovoChipsElement_div_3_Template_novo_picker_focus_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r14 = ɵɵnextContext(); return ctx_r14.onFocus($event); })("typing", function NovoChipsElement_div_3_Template_novo_picker_typing_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r15 = ɵɵnextContext(); return ctx_r15.onTyping($event); })("blur", function NovoChipsElement_div_3_Template_novo_picker_blur_1_listener($event) { ɵɵrestoreView(_r11); var ctx_r16 = ɵɵnextContext(); return ctx_r16.onTouched($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("closeOnSelect", ctx_r1.closeOnSelect)("config", ctx_r1.source)("disablePickerInput", ctx_r1.disablePickerInput)("placeholder", ctx_r1.placeholder)("ngModel", ctx_r1.itemToAdd)("selected", ctx_r1.items)("overrideElement", ctx_r1.element);
} }
function NovoChipsElement_i_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 10);
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("has-value", ctx_r3.items.length);
} }
function NovoChipsElement_label_8_Template(rf, ctx) { if (rf & 1) {
    var _r18 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "label", 11);
    ɵɵlistener("click", function NovoChipsElement_label_8_Template_label_click_0_listener() { ɵɵrestoreView(_r18); var ctx_r17 = ɵɵnextContext(); return ctx_r17.clearValue(); });
    ɵɵtext(1);
    ɵɵelement(2, "i", 12);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ctx_r4.labels.clearAll, " ");
} }
// Value accessor for the component (supports ngModel)
var CHIPS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoChipsElement; }),
    multi: true,
};
var NovoChipElement = /** @class */ (function () {
    function NovoChipElement() {
        this.disabled = false;
        this.select = new EventEmitter();
        this.remove = new EventEmitter();
        this.deselect = new EventEmitter();
    }
    Object.defineProperty(NovoChipElement.prototype, "type", {
        set: function (type) {
            this._type = type ? type.toLowerCase() : null;
        },
        enumerable: true,
        configurable: true
    });
    NovoChipElement.prototype.onRemove = function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.remove.emit(e);
        return false;
    };
    NovoChipElement.prototype.onSelect = function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.select.emit(e);
        return false;
    };
    NovoChipElement.prototype.onDeselect = function (e) {
        if (e) {
            e.stopPropagation();
            e.preventDefault();
        }
        this.deselect.emit(e);
        return false;
    };
    NovoChipElement.ɵfac = function NovoChipElement_Factory(t) { return new (t || NovoChipElement)(); };
    NovoChipElement.ɵcmp = ɵɵdefineComponent({ type: NovoChipElement, selectors: [["chip"], ["novo-chip"]], inputs: { type: "type", disabled: "disabled" }, outputs: { select: "select", remove: "remove", deselect: "deselect" }, ngContentSelectors: _c0$g, decls: 5, vars: 3, consts: [[3, "ngClass", "click", "mouseenter", "mouseleave"], ["class", "bhi-circle", 4, "ngIf"], ["class", "bhi-close", 3, "click", 4, "ngIf"], [1, "bhi-circle"], [1, "bhi-close", 3, "click"]], template: function NovoChipElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "span", 0);
            ɵɵlistener("click", function NovoChipElement_Template_span_click_0_listener($event) { return ctx.onSelect($event); })("mouseenter", function NovoChipElement_Template_span_mouseenter_0_listener($event) { return ctx.onSelect($event); })("mouseleave", function NovoChipElement_Template_span_mouseleave_0_listener($event) { return ctx.onDeselect($event); });
            ɵɵtemplate(1, NovoChipElement_i_1_Template, 1, 0, "i", 1);
            ɵɵelementStart(2, "span");
            ɵɵprojection(3);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵtemplate(4, NovoChipElement_i_4_Template, 1, 0, "i", 2);
        } if (rf & 2) {
            ɵɵproperty("ngClass", ctx._type);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx._type);
            ɵɵadvance(3);
            ɵɵproperty("ngIf", !ctx.disabled);
        } }, directives: [NgClass, NgIf], encapsulation: 2 });
    return NovoChipElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipElement, [{
        type: Component,
        args: [{
                selector: 'chip,novo-chip',
                template: "\n        <span (click)=\"onSelect($event)\" (mouseenter)=\"onSelect($event)\" (mouseleave)=\"onDeselect($event)\" [ngClass]=\"_type\">\n            <i *ngIf=\"_type\" class=\"bhi-circle\"></i>\n            <span><ng-content></ng-content></span>\n        </span>\n        <i class=\"bhi-close\" *ngIf=\"!disabled\" (click)=\"onRemove($event)\"></i>\n    ",
            }]
    }], null, { type: [{
            type: Input
        }], disabled: [{
            type: Input
        }], select: [{
            type: Output
        }], remove: [{
            type: Output
        }], deselect: [{
            type: Output
        }] }); })();
var NovoChipsElement = /** @class */ (function () {
    function NovoChipsElement(element, componentUtils, labels) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.labels = labels;
        this.closeOnSelect = false;
        this.placeholder = '';
        this._disablePickerInput = false;
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.typing = new EventEmitter();
        this.items = [];
        this.selected = null;
        this.config = {};
        // private data model
        this._value = '';
        this._items = new ReplaySubject(1);
        // Placeholders for the callbacks
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoChipsElement.prototype, "disablePickerInput", {
        get: function () {
            return this._disablePickerInput;
        },
        set: function (v) {
            this._disablePickerInput = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    NovoChipsElement.prototype.ngOnInit = function () {
        this.setItems();
    };
    Object.defineProperty(NovoChipsElement.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (selected) {
            this.itemToAdd = '';
            if (selected !== this._value) {
                this._value = selected;
                this.changed.emit({ value: selected, rawValue: this.items });
                this.onModelChange(selected);
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoChipsElement.prototype.clearValue = function () {
        this.items = [];
        this._items.next(this.items);
        this.value = null;
        this.changed.emit({ value: this.value, rawValue: this.items });
        this.onModelChange(this.value);
    };
    NovoChipsElement.prototype.setItems = function () {
        var e_1, _a;
        var _this = this;
        this.items = [];
        if (this.model && Array.isArray(this.model)) {
            var noLabels = [];
            try {
                for (var _b = __values(this.model), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var value = _c.value;
                    var label = void 0;
                    if (this.source && this.source.format && Helpers.validateInterpolationProps(this.source.format, value)) {
                        label = Helpers.interpolate(this.source.format, value);
                    }
                    if (this.source && label && label !== this.source.format) {
                        this.items.push({
                            value: value,
                            label: label,
                        });
                    }
                    else if (this.source.getLabels && typeof this.source.getLabels === 'function') {
                        noLabels.push(value);
                    }
                    else if (this.source.options && Array.isArray(this.source.options)) {
                        this.items.push(this.getLabelFromOptions(value));
                    }
                    else if (this.source.categoryMap && this.source.categoryMap.size) {
                        this.items.push(value);
                    }
                    else {
                        this.items.push({
                            value: value,
                            label: value,
                        });
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            if (noLabels.length > 0 && this.source && this.source.getLabels && typeof this.source.getLabels === 'function') {
                this.source.getLabels(noLabels).then(function (result) {
                    var e_2, _a;
                    try {
                        for (var result_1 = __values(result), result_1_1 = result_1.next(); !result_1_1.done; result_1_1 = result_1.next()) {
                            var value = result_1_1.value;
                            if (value.hasOwnProperty('label')) {
                                _this.items.push({
                                    value: value,
                                    label: value.label,
                                });
                            }
                            else if (_this.source.options && Array.isArray(_this.source.options)) {
                                _this.items.push(_this.getLabelFromOptions(value));
                            }
                            else {
                                _this.items.push(value);
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (result_1_1 && !result_1_1.done && (_a = result_1.return)) _a.call(result_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _this._items.next(_this.items);
                });
            }
        }
        this.changed.emit({ value: this.model, rawValue: this.items });
        this._items.next(this.items);
    };
    NovoChipsElement.prototype.getLabelFromOptions = function (value) {
        var id = value;
        var optLabel = this.source.options.find(function (val) { return val.value === value; });
        if (!optLabel && value.hasOwnProperty('id')) {
            optLabel = this.source.options.find(function (val) { return val.value === value.id; });
            id = value.id;
        }
        return {
            value: id,
            label: optLabel ? optLabel.label : value,
        };
    };
    NovoChipsElement.prototype.deselectAll = function (event) {
        this.selected = null;
        this.hidePreview();
    };
    NovoChipsElement.prototype.select = function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
        this.showPreview();
    };
    NovoChipsElement.prototype.deselect = function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
    };
    NovoChipsElement.prototype.onTyping = function (event) {
        this.typing.emit(event);
    };
    NovoChipsElement.prototype.onFocus = function (event) {
        this.deselectAll();
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(event);
    };
    NovoChipsElement.prototype.add = function (event) {
        if (event && !(event instanceof Event)) {
            this.items.push(event);
            this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
            // Set focus on the picker
            var input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
        this._items.next(this.items);
    };
    NovoChipsElement.prototype.remove = function (event, item) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.items.splice(this.items.indexOf(item), 1);
        this.deselectAll();
        this.value = this.source && this.source.valueFormatter ? this.source.valueFormatter(this.items) : this.items.map(function (i) { return i.value; });
        this.changed.emit({ value: this.value.length ? this.value : '', rawValue: this.items });
        this.onModelChange(this.value.length ? this.value : '');
        this._items.next(this.items);
    };
    NovoChipsElement.prototype.onKeyDown = function (event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(event, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    };
    // Set touched on blur
    NovoChipsElement.prototype.onTouched = function (e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    };
    NovoChipsElement.prototype.writeValue = function (model) {
        this.model = model;
        this.setItems();
    };
    NovoChipsElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoChipsElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoChipsElement.prototype.setDisabledState = function (disabled) {
        this._disablePickerInput = disabled;
    };
    /**
     * @description This method creates an instance of the preview (called popup) and adds all the bindings to that
     * instance. Will reuse the popup or create a new one if it does not already exist. Will only work if there is
     * a previewTemplate given in the config.
     */
    NovoChipsElement.prototype.showPreview = function () {
        if (this.source.previewTemplate) {
            if (!this.popup) {
                this.popup = this.componentUtils.append(this.source.previewTemplate, this.preview);
            }
            this.popup.instance.match = this.selected;
        }
    };
    /**
     * @description - This method deletes the preview popup from the DOM.
     */
    NovoChipsElement.prototype.hidePreview = function () {
        if (this.popup) {
            this.popup.destroy();
            this.popup = null;
        }
    };
    NovoChipsElement.ɵfac = function NovoChipsElement_Factory(t) { return new (t || NovoChipsElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils), ɵɵdirectiveInject(NovoLabelService)); };
    NovoChipsElement.ɵcmp = ɵɵdefineComponent({ type: NovoChipsElement, selectors: [["chips"], ["novo-chips"]], viewQuery: function NovoChipsElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c1$6, true, ViewContainerRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.preview = _t.first);
        } }, hostVars: 4, hostBindings: function NovoChipsElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("with-value", ctx.items.length > 0)("disabled", ctx.disablePickerInput);
        } }, inputs: { closeOnSelect: "closeOnSelect", placeholder: "placeholder", source: "source", maxlength: "maxlength", type: "type", disablePickerInput: "disablePickerInput", value: "value" }, outputs: { changed: "changed", focus: "focus", blur: "blur", typing: "typing" }, features: [ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR])], decls: 9, vars: 6, consts: [[1, "novo-chip-container"], [3, "type", "selected", "disabled", "remove", "select", "deselect", 4, "ngFor", "ngForOf"], ["class", "chip-input-container", 4, "ngIf"], [1, "preview-container"], ["preview", ""], ["class", "bhi-search", 3, "has-value", 4, "ngIf"], ["class", "clear-all", 3, "click", 4, "ngIf"], [3, "type", "disabled", "remove", "select", "deselect"], [1, "chip-input-container"], ["clearValueOnSelect", "true", 3, "closeOnSelect", "config", "disablePickerInput", "placeholder", "ngModel", "selected", "overrideElement", "ngModelChange", "select", "keydown", "focus", "typing", "blur"], [1, "bhi-search"], [1, "clear-all", 3, "click"], [1, "bhi-times"]], template: function NovoChipsElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, NovoChipsElement_novo_chip_1_Template, 2, 5, "novo-chip", 1);
            ɵɵpipe(2, "async");
            ɵɵelementEnd();
            ɵɵtemplate(3, NovoChipsElement_div_3_Template, 2, 7, "div", 2);
            ɵɵelementStart(4, "div", 3);
            ɵɵelement(5, "span", null, 4);
            ɵɵelementEnd();
            ɵɵtemplate(7, NovoChipsElement_i_7_Template, 1, 2, "i", 5);
            ɵɵtemplate(8, NovoChipsElement_label_8_Template, 3, 1, "label", 6);
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ɵɵpipeBind1(2, 4, ctx._items));
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.maxlength || ctx.maxlength && ctx.items.length < ctx.maxlength);
            ɵɵadvance(4);
            ɵɵproperty("ngIf", !ctx.disablePickerInput);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.items.length && !ctx.disablePickerInput);
        } }, directives: [NgForOf, NgIf, NovoChipElement, NovoPickerElement, NgControlStatus, NgModel], pipes: [AsyncPipe], encapsulation: 2 });
    return NovoChipsElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipsElement, [{
        type: Component,
        args: [{
                selector: 'chips,novo-chips',
                providers: [CHIPS_VALUE_ACCESSOR],
                template: "\n        <div class=\"novo-chip-container\">\n          <novo-chip\n              *ngFor=\"let item of _items | async\"\n              [type]=\"type || item?.value?.searchEntity\"\n              [class.selected]=\"item == selected\"\n              [disabled]=\"disablePickerInput\"\n              (remove)=\"remove($event, item)\"\n              (select)=\"select($event, item)\"\n              (deselect)=\"deselect($event, item)\">\n              {{ item.label }}\n          </novo-chip>\n        </div>\n        <div class=\"chip-input-container\" *ngIf=\"!maxlength || (maxlength && items.length < maxlength)\">\n            <novo-picker\n                clearValueOnSelect=\"true\"\n                [closeOnSelect]=\"closeOnSelect\"\n                [config]=\"source\"\n                [disablePickerInput]=\"disablePickerInput\"\n                [placeholder]=\"placeholder\"\n                [(ngModel)]=\"itemToAdd\"\n                (select)=\"add($event)\"\n                (keydown)=\"onKeyDown($event)\"\n                (focus)=\"onFocus($event)\"\n                (typing)=\"onTyping($event)\"\n                (blur)=\"onTouched($event)\"\n                [selected]=\"items\"\n                [overrideElement]=\"element\">\n            </novo-picker>\n        </div>\n        <div class=\"preview-container\">\n            <span #preview></span>\n        </div>\n        <i class=\"bhi-search\" [class.has-value]=\"items.length\" *ngIf=\"!disablePickerInput\"></i>\n        <label class=\"clear-all\" *ngIf=\"items.length && !disablePickerInput\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n   ",
                host: {
                    '[class.with-value]': 'items.length > 0',
                    '[class.disabled]': 'disablePickerInput',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }, { type: NovoLabelService }]; }, { closeOnSelect: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], source: [{
            type: Input
        }], maxlength: [{
            type: Input
        }], type: [{
            type: Input
        }], disablePickerInput: [{
            type: Input
        }], changed: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], typing: [{
            type: Output
        }], preview: [{
            type: ViewChild,
            args: ['preview', { read: ViewContainerRef }]
        }], value: [{
            type: Input
        }] }); })();

// NG2
var NovoOverlayModule = /** @class */ (function () {
    function NovoOverlayModule() {
    }
    NovoOverlayModule.ɵmod = ɵɵdefineNgModule({ type: NovoOverlayModule });
    NovoOverlayModule.ɵinj = ɵɵdefineInjector({ factory: function NovoOverlayModule_Factory(t) { return new (t || NovoOverlayModule)(); }, imports: [[CommonModule, FormsModule, OverlayModule, ScrollingModule],
            ScrollingModule] });
    return NovoOverlayModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoOverlayModule, { declarations: [NovoOverlayTemplateComponent], imports: [CommonModule, FormsModule, OverlayModule, ScrollingModule], exports: [NovoOverlayTemplateComponent, ScrollingModule] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoOverlayModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, OverlayModule, ScrollingModule],
                declarations: [NovoOverlayTemplateComponent],
                exports: [NovoOverlayTemplateComponent, ScrollingModule],
            }]
    }], null, null); })();

// NG2
var _c0$h = ["*"];
// Value accessor for the component (supports ngModel)
var SWITCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoSwitchElement; }),
    multi: true,
};
var NovoSwitchElement = /** @class */ (function () {
    function NovoSwitchElement(ref) {
        this.ref = ref;
        this.onChange = new EventEmitter();
        this._disabled = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    Object.defineProperty(NovoSwitchElement.prototype, "disabled", {
        get: function () {
            return this._disabled;
        },
        set: function (value) {
            this._disabled = !value;
        },
        enumerable: true,
        configurable: true
    });
    NovoSwitchElement.prototype.onKeydown = function (event) {
        if (event.keyCode === KeyCodes.SPACE) {
            event.preventDefault();
            this.toggle(event);
        }
    };
    NovoSwitchElement.prototype.toggle = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.disabled) {
            return;
        }
        this.model = !this.model;
        this.onChange.next(this.model);
        this.onModelChange(this.model);
        this.ref.markForCheck();
    };
    NovoSwitchElement.prototype.writeValue = function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    NovoSwitchElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoSwitchElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoSwitchElement.ɵfac = function NovoSwitchElement_Factory(t) { return new (t || NovoSwitchElement)(ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoSwitchElement.ɵcmp = ɵɵdefineComponent({ type: NovoSwitchElement, selectors: [["novo-switch"]], hostAttrs: ["role", "checkbox"], hostVars: 4, hostBindings: function NovoSwitchElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("keydown", function NovoSwitchElement_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); });
        } if (rf & 2) {
            ɵɵattribute("aria-checked", ctx.model)("aria-disabled", ctx.disabled);
            ɵɵclassMap(ctx.theme);
        } }, inputs: { theme: "theme", disabled: "disabled" }, outputs: { onChange: "onChange" }, features: [ɵɵProvidersFeature([SWITCH_VALUE_ACCESSOR])], ngContentSelectors: _c0$h, decls: 7, vars: 0, consts: [[3, "click"], [1, "novo-switch-container"], [1, "novo-switch-bar"], [1, "novo-switch-thumb-container"], [1, "novo-switch-thumb"], [1, "novo-switch-label"]], template: function NovoSwitchElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0);
            ɵɵlistener("click", function NovoSwitchElement_Template_div_click_0_listener($event) { return ctx.toggle($event); });
            ɵɵelementStart(1, "div", 1);
            ɵɵelement(2, "div", 2);
            ɵɵelementStart(3, "div", 3);
            ɵɵelement(4, "div", 4);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(5, "div", 5);
            ɵɵprojection(6);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } }, encapsulation: 2 });
    return NovoSwitchElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSwitchElement, [{
        type: Component,
        args: [{
                selector: 'novo-switch',
                providers: [SWITCH_VALUE_ACCESSOR],
                template: "\n        <div (click)=\"toggle($event)\">\n            <div class=\"novo-switch-container\">\n                <div class=\"novo-switch-bar\"></div>\n                <div class=\"novo-switch-thumb-container\">\n                    <div class=\"novo-switch-thumb\"></div>\n                </div>\n            </div>\n            <div class=\"novo-switch-label\"><ng-content></ng-content></div>\n        </div>\n    ",
                host: {
                    role: 'checkbox',
                    '[attr.aria-checked]': 'model',
                    '[attr.aria-disabled]': 'disabled',
                    '(keydown)': 'onKeydown($event)',
                    '[class]': 'theme',
                },
            }]
    }], function () { return [{ type: ChangeDetectorRef }]; }, { theme: [{
            type: Input
        }], onChange: [{
            type: Output
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }] }); })();

// NG2
var NovoSwitchModule = /** @class */ (function () {
    function NovoSwitchModule() {
    }
    NovoSwitchModule.ɵmod = ɵɵdefineNgModule({ type: NovoSwitchModule });
    NovoSwitchModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSwitchModule_Factory(t) { return new (t || NovoSwitchModule)(); }, imports: [[CommonModule, FormsModule]] });
    return NovoSwitchModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSwitchModule, { declarations: [NovoSwitchElement], imports: [CommonModule, FormsModule], exports: [NovoSwitchElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSwitchModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NovoSwitchElement],
                exports: [NovoSwitchElement],
            }]
    }], null, null); })();

function EntityPickerResult_novo_list_item_0_p_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 15);
    ɵɵelement(1, "i", 16);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r1.highlight(ctx_r1.match.data.companyName || (ctx_r1.match.data == null ? null : ctx_r1.match.data.clientCorporation == null ? null : ctx_r1.match.data.clientCorporation.name), ctx_r1.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 17);
    ɵɵelement(1, "i", 18);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r2.highlight(ctx_r2.match.data.clientContact.firstName + " " + ctx_r2.match.data.clientContact.lastName, ctx_r2.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 19);
    ɵɵelement(1, "i", 20);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r3.highlight(ctx_r3.match.data.candidate.firstName + " " + ctx_r3.match.data.candidate.lastName, ctx_r3.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 21);
    ɵɵelement(1, "i", 22);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r4.renderTimestamp(ctx_r4.match.data.dateBegin) + " - " + ctx_r4.renderTimestamp(ctx_r4.match.data.dateEnd), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 23);
    ɵɵelement(1, "i", 24);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r5.highlight(ctx_r5.match.data.email, ctx_r5.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 25);
    ɵɵelement(1, "i", 26);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r6.highlight(ctx_r6.match.data.phone, ctx_r6.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_12_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 2);
} if (rf & 2) {
    var ctx_r12 = ɵɵnextContext(3);
    ɵɵproperty("innerHtml", ctx_r12.highlight(ctx_r12.match.data.address.city, ctx_r12.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_12_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1, ", ");
    ɵɵelementEnd();
} }
function EntityPickerResult_novo_list_item_0_p_12_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 2);
} if (rf & 2) {
    var ctx_r14 = ɵɵnextContext(3);
    ɵɵproperty("innerHtml", ctx_r14.highlight(ctx_r14.match.data.address.state, ctx_r14.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 27);
    ɵɵelement(1, "i", 28);
    ɵɵtemplate(2, EntityPickerResult_novo_list_item_0_p_12_span_2_Template, 1, 1, "span", 29);
    ɵɵtemplate(3, EntityPickerResult_novo_list_item_0_p_12_span_3_Template, 2, 0, "span", 0);
    ɵɵtemplate(4, EntityPickerResult_novo_list_item_0_p_12_span_4_Template, 1, 1, "span", 29);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r7.match.data.address.city);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.match.data.address.city && ctx_r7.match.data.address.state);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.match.data.address.state);
} }
function EntityPickerResult_novo_list_item_0_p_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 30);
    ɵɵelement(1, "i", 31);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r8.highlight(ctx_r8.match.data.status, ctx_r8.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 32);
    ɵɵelement(1, "i", 33);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r9.highlight(ctx_r9.match.data.owner.name, ctx_r9.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 34);
    ɵɵelement(1, "i", 35);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r10.highlight(ctx_r10.match.data.primaryDepartment.name, ctx_r10.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_p_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 36);
    ɵɵelement(1, "i", 37);
    ɵɵelement(2, "span", 2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r11.highlight(ctx_r11.match.data.occupation, ctx_r11.term), ɵɵsanitizeHtml);
} }
function EntityPickerResult_novo_list_item_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list-item");
    ɵɵelementStart(1, "item-header");
    ɵɵelement(2, "item-avatar", 1);
    ɵɵelementStart(3, "item-title");
    ɵɵelement(4, "span", 2);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "item-content", 3);
    ɵɵtemplate(6, EntityPickerResult_novo_list_item_0_p_6_Template, 3, 1, "p", 4);
    ɵɵtemplate(7, EntityPickerResult_novo_list_item_0_p_7_Template, 3, 1, "p", 5);
    ɵɵtemplate(8, EntityPickerResult_novo_list_item_0_p_8_Template, 3, 1, "p", 6);
    ɵɵtemplate(9, EntityPickerResult_novo_list_item_0_p_9_Template, 3, 1, "p", 7);
    ɵɵtemplate(10, EntityPickerResult_novo_list_item_0_p_10_Template, 3, 1, "p", 8);
    ɵɵtemplate(11, EntityPickerResult_novo_list_item_0_p_11_Template, 3, 1, "p", 9);
    ɵɵtemplate(12, EntityPickerResult_novo_list_item_0_p_12_Template, 5, 3, "p", 10);
    ɵɵtemplate(13, EntityPickerResult_novo_list_item_0_p_13_Template, 3, 1, "p", 11);
    ɵɵtemplate(14, EntityPickerResult_novo_list_item_0_p_14_Template, 3, 1, "p", 12);
    ɵɵtemplate(15, EntityPickerResult_novo_list_item_0_p_15_Template, 3, 1, "p", 13);
    ɵɵtemplate(16, EntityPickerResult_novo_list_item_0_p_16_Template, 3, 1, "p", 14);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("icon", ctx_r0.getIconForResult(ctx_r0.match.data));
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r0.highlight(ctx_r0.getNameForResult(ctx_r0.match.data), ctx_r0.term), ɵɵsanitizeHtml);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.match.data.companyName || (ctx_r0.match.data == null ? null : ctx_r0.match.data.clientCorporation == null ? null : ctx_r0.match.data.clientCorporation.name));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data == null ? null : ctx_r0.match.data.clientContact == null ? null : ctx_r0.match.data.clientContact.firstName);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.candidate && ctx_r0.match.data.searchEntity === "Placement");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.dateBegin && ctx_r0.match.data.searchEntity === "Placement");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.email);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.phone);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.address && (ctx_r0.match.data.address.city || ctx_r0.match.data.address.state));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.status);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.owner && ctx_r0.match.data.owner.name && ctx_r0.match.data.searchEntity === "Candidate");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.primaryDepartment && ctx_r0.match.data.primaryDepartment.name && ctx_r0.match.data.searchEntity === "CorporateUser");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.match.data.occupation && ctx_r0.match.data.searchEntity === "CorporateUser");
} }
var _c0$i = function (a0) { return { active: a0 }; };
function EntityPickerResults_novo_list_0_entity_picker_result_1_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "entity-picker-result", 6);
    ɵɵlistener("click", function EntityPickerResults_novo_list_0_entity_picker_result_1_Template_entity_picker_result_click_0_listener($event) { ɵɵrestoreView(_r8); var match_r6 = ctx.$implicit; var ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectMatch($event, match_r6); })("mouseenter", function EntityPickerResults_novo_list_0_entity_picker_result_1_Template_entity_picker_result_mouseenter_0_listener() { ɵɵrestoreView(_r8); var match_r6 = ctx.$implicit; var ctx_r9 = ɵɵnextContext(2); return ctx_r9.selectActive(match_r6); });
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r6 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("disabled", ctx_r4.preselected(match_r6));
    ɵɵproperty("match", match_r6)("term", ctx_r4.term)("ngClass", ɵɵpureFunction1(5, _c0$i, ctx_r4.isActive(match_r6)));
} }
function EntityPickerResults_novo_list_0_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 7);
} }
function EntityPickerResults_novo_list_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 3);
    ɵɵtemplate(1, EntityPickerResults_novo_list_0_entity_picker_result_1_Template, 1, 7, "entity-picker-result", 4);
    ɵɵtemplate(2, EntityPickerResults_novo_list_0_novo_loading_2_Template, 1, 0, "novo-loading", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.isLoading && ctx_r0.matches.length > 0);
} }
function EntityPickerResults_p_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.labels.pickerError);
} }
function EntityPickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerEmpty);
} }
function EntityPickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.pickerTextFieldEmpty);
} }
var EntityPickerResult = /** @class */ (function () {
    function EntityPickerResult(labels) {
        this.labels = labels;
    }
    /**
     * @description This function captures the whole query string and replace it with the string that will be used to
     * match.
     */
    EntityPickerResult.prototype.escapeRegexp = function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    /**
     * @description This function should return a <strong>-tag wrapped HTML string.
     */
    EntityPickerResult.prototype.highlight = function (match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query && match ? match.replace(new RegExp(this.escapeRegexp(query.trim()), 'gi'), '<strong>$&</strong>') : match;
    };
    EntityPickerResult.prototype.getIconForResult = function (result) {
        if (result) {
            switch (result.searchEntity) {
                case 'ClientContact':
                    return 'person contact';
                case 'ClientCorporation':
                    return 'company';
                case 'Opportunity':
                    return 'opportunity';
                case 'Candidate':
                    return 'candidate';
                case 'Lead':
                    return 'lead';
                case 'JobOrder':
                    return 'job';
                case 'Placement':
                    return 'star placement';
                case 'CorporateUser':
                    return 'user';
                case 'CorporationDepartment':
                    return 'department';
                default:
                    return '';
            }
        }
        return '';
    };
    EntityPickerResult.prototype.renderTimestamp = function (date) {
        var timestamp = '';
        if (date) {
            timestamp = this.labels.formatDateWithFormat(date, { year: 'numeric', month: 'numeric', day: 'numeric' });
        }
        return timestamp;
    };
    EntityPickerResult.prototype.getNameForResult = function (result) {
        if (result) {
            switch (result.searchEntity) {
                case 'Lead':
                case 'CorporateUser':
                case 'ClientContact':
                case 'Candidate':
                case 'Person':
                    if ('firstName' in result) {
                        return (result.firstName + " " + result.lastName).trim();
                    }
                    return ("" + (result.name || '')).trim();
                case 'ClientCorporation':
                    return ("" + (result.name || '')).trim();
                case 'Opportunity':
                case 'JobOrder':
                    return (result.id + " | " + (result.title || '')).trim();
                case 'Placement':
                    var label = "" + result.id;
                    if (result.candidate || result.jobOrder) {
                        if (result.candidate && result.jobOrder) {
                            label = (label + " | " + result.candidate.firstName + " " + result.candidate.lastName + " - " + result.jobOrder.title).trim();
                        }
                        else if (result.jobOrder) {
                            label = (label + " | " + result.jobOrder.title).trim();
                        }
                        else {
                            label = (label + " | " + result.candidate.firstName + " " + result.candidate.lastName).trim();
                        }
                    }
                    return label;
                default:
                    return ("" + (result.name || '')).trim();
            }
        }
        return '';
    };
    EntityPickerResult.ɵfac = function EntityPickerResult_Factory(t) { return new (t || EntityPickerResult)(ɵɵdirectiveInject(NovoLabelService)); };
    EntityPickerResult.ɵcmp = ɵɵdefineComponent({ type: EntityPickerResult, selectors: [["entity-picker-result"]], inputs: { match: "match", term: "term" }, decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "icon"], [3, "innerHtml"], ["direction", "horizontal"], ["class", "company", 4, "ngIf"], ["class", "contact", 4, "ngIf"], ["class", "candidate", 4, "ngIf"], ["class", "start-date", 4, "ngIf"], ["class", "email", 4, "ngIf"], ["class", "phone", 4, "ngIf"], ["class", "location", 4, "ngIf"], ["class", "status", 4, "ngIf"], ["class", "owner", 4, "ngIf"], ["class", "primary-department", 4, "ngIf"], ["class", "occupation", 4, "ngIf"], [1, "company"], [1, "bhi-company"], [1, "contact"], [1, "bhi-person", "contact", "person"], [1, "candidate"], [1, "bhi-candidate"], [1, "start-date"], [1, "bhi-calendar"], [1, "email"], [1, "bhi-email"], [1, "phone"], [1, "bhi-phone"], [1, "location"], [1, "bhi-location"], [3, "innerHtml", 4, "ngIf"], [1, "status"], [1, "bhi-info"], [1, "owner"], [1, "bhi-person"], [1, "primary-department"], [1, "bhi-department"], [1, "occupation"], [1, "bhi-occupation"]], template: function EntityPickerResult_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, EntityPickerResult_novo_list_item_0_Template, 17, 13, "novo-list-item", 0);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.match.data);
        } }, directives: [NgIf, NovoListItemElement, NovoItemHeaderElement, NovoItemAvatarElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
    return EntityPickerResult;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(EntityPickerResult, [{
        type: Component,
        args: [{
                selector: 'entity-picker-result',
                template: "\n    <novo-list-item *ngIf=\"match.data\">\n      <item-header>\n        <item-avatar [icon]=\"getIconForResult(match.data)\"></item-avatar>\n        <item-title> <span [innerHtml]=\"highlight(getNameForResult(match.data), term)\"></span> </item-title>\n      </item-header>\n      <item-content direction=\"horizontal\">\n        <!-- COMPANY 1 -->\n        <p class=\"company\" *ngIf=\"match.data.companyName || match.data?.clientCorporation?.name\">\n          <i class=\"bhi-company\"></i>\n          <span [innerHtml]=\"highlight(match.data.companyName || match.data?.clientCorporation?.name, term)\"></span>\n        </p>\n        <!-- CLIENT CONTACT -->\n        <p class=\"contact\" *ngIf=\"match.data?.clientContact?.firstName\">\n          <i class=\"bhi-person contact person\"></i>\n          <span [innerHtml]=\"highlight(match.data.clientContact.firstName + ' ' + match.data.clientContact.lastName, term)\"></span>\n        </p>\n        <!-- CANDIDATE -->\n        <p class=\"candidate\" *ngIf=\"match.data.candidate && match.data.searchEntity === 'Placement'\">\n          <i class=\"bhi-candidate\"></i>\n          <span [innerHtml]=\"highlight(match.data.candidate.firstName + ' ' + match.data.candidate.lastName, term)\"></span>\n        </p>\n        <!-- START & END DATE -->\n        <p class=\"start-date\" *ngIf=\"match.data.dateBegin && match.data.searchEntity === 'Placement'\">\n          <i class=\"bhi-calendar\"></i>\n          <span [innerHtml]=\"renderTimestamp(match.data.dateBegin) + ' - ' + renderTimestamp(match.data.dateEnd)\"></span>\n        </p>\n        <!-- EMAIL -->\n        <p class=\"email\" *ngIf=\"match.data.email\">\n          <i class=\"bhi-email\"></i> <span [innerHtml]=\"highlight(match.data.email, term)\"></span>\n        </p>\n        <!-- PHONE -->\n        <p class=\"phone\" *ngIf=\"match.data.phone\">\n          <i class=\"bhi-phone\"></i> <span [innerHtml]=\"highlight(match.data.phone, term)\"></span>\n        </p>\n        <!-- ADDRESS -->\n        <p class=\"location\" *ngIf=\"match.data.address && (match.data.address.city || match.data.address.state)\">\n          <i class=\"bhi-location\"></i> <span *ngIf=\"match.data.address.city\" [innerHtml]=\"highlight(match.data.address.city, term)\"></span>\n          <span *ngIf=\"match.data.address.city && match.data.address.state\">, </span>\n          <span *ngIf=\"match.data.address.state\" [innerHtml]=\"highlight(match.data.address.state, term)\"></span>\n        </p>\n        <!-- STATUS -->\n        <p class=\"status\" *ngIf=\"match.data.status\">\n          <i class=\"bhi-info\"></i> <span [innerHtml]=\"highlight(match.data.status, term)\"></span>\n        </p>\n        <!-- OWNER -->\n        <p class=\"owner\" *ngIf=\"match.data.owner && match.data.owner.name && match.data.searchEntity === 'Candidate'\">\n          <i class=\"bhi-person\"></i> <span [innerHtml]=\"highlight(match.data.owner.name, term)\"></span>\n        </p>\n        <!-- PRIMARY DEPARTMENT -->\n        <p\n          class=\"primary-department\"\n          *ngIf=\"match.data.primaryDepartment && match.data.primaryDepartment.name && match.data.searchEntity === 'CorporateUser'\"\n        >\n          <i class=\"bhi-department\"></i> <span [innerHtml]=\"highlight(match.data.primaryDepartment.name, term)\"></span>\n        </p>\n        <!-- OCCUPATION -->\n        <p class=\"occupation\" *ngIf=\"match.data.occupation && match.data.searchEntity === 'CorporateUser'\">\n          <i class=\"bhi-occupation\"></i> <span [innerHtml]=\"highlight(match.data.occupation, term)\"></span>\n        </p>\n      </item-content>\n    </novo-list-item>\n  ",
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { match: [{
            type: Input
        }], term: [{
            type: Input
        }] }); })();
var EntityPickerResults = /** @class */ (function (_super) {
    __extends(EntityPickerResults, _super);
    function EntityPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        _this.select = new EventEmitter();
        return _this;
    }
    Object.defineProperty(EntityPickerResults.prototype, "hasNonErrorMessage", {
        get: function () {
            return !this.isLoading && !this.matches.length && !this.hasError;
        },
        enumerable: true,
        configurable: true
    });
    EntityPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    EntityPickerResults.prototype.selectMatch = function (event, item) {
        this.select.next(item);
        return _super.prototype.selectMatch.call(this, event, item);
    };
    EntityPickerResults.ɵfac = function EntityPickerResults_Factory(t) { return new (t || EntityPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    EntityPickerResults.ɵcmp = ɵɵdefineComponent({ type: EntityPickerResults, selectors: [["entity-picker-results"]], outputs: { select: "select" }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["direction", "vertical", 4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null-results", 4, "ngIf"], ["direction", "vertical"], [3, "match", "term", "ngClass", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "match", "term", "ngClass", "click", "mouseenter"], ["theme", "line"], [1, "picker-error"], [1, "picker-null-results"]], template: function EntityPickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, EntityPickerResults_novo_list_0_Template, 3, 2, "novo-list", 0);
            ɵɵtemplate(1, EntityPickerResults_p_1_Template, 2, 1, "p", 1);
            ɵɵtemplate(2, EntityPickerResults_p_2_Template, 2, 1, "p", 2);
            ɵɵtemplate(3, EntityPickerResults_p_3_Template, 2, 1, "p", 2);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.matches.length > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasError);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasNonErrorMessage && ctx.term !== "");
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasNonErrorMessage && ctx.term === "");
        } }, directives: [NgIf, NovoListElement, NgForOf, EntityPickerResult, NgClass, NovoLoadingElement], encapsulation: 2 });
    return EntityPickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(EntityPickerResults, [{
        type: Component,
        args: [{
                selector: 'entity-picker-results',
                template: "\n    <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n      <entity-picker-result\n        *ngFor=\"let match of matches\"\n        [match]=\"match\"\n        [term]=\"term\"\n        (click)=\"selectMatch($event, match)\"\n        [ngClass]=\"{ active: isActive(match) }\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n      </entity-picker-result>\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n    </novo-list>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null-results\" *ngIf=\"hasNonErrorMessage && term !== ''\">{{ labels.pickerEmpty }}</p>\n    <p class=\"picker-null-results\" *ngIf=\"hasNonErrorMessage && term === ''\">{{ labels.pickerTextFieldEmpty }}</p>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { select: [{
            type: Output
        }] }); })();

function ChecklistPickerResults_novo_loading_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 4);
} }
function ChecklistPickerResults_ul_1_span_1_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "li", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var section_r5 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(section_r5.label || section_r5.type);
} }
var _c0$j = function (a0) { return { checked: a0 }; };
var _c1$7 = function (a0, a1, a2) { return { "bhi-checkbox-empty": a0, "bhi-checkbox-filled": a1, "bhi-checkbox-indeterminate": a2 }; };
function ChecklistPickerResults_ul_1_span_1_li_2_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 9);
    ɵɵlistener("click", function ChecklistPickerResults_ul_1_span_1_li_2_Template_li_click_0_listener($event) { ɵɵrestoreView(_r13); var match_r10 = ctx.$implicit; var ctx_r12 = ɵɵnextContext(3); return ctx_r12.selectMatch($event, match_r10); })("mouseenter", function ChecklistPickerResults_ul_1_span_1_li_2_Template_li_mouseenter_0_listener() { ɵɵrestoreView(_r13); var match_r10 = ctx.$implicit; var ctx_r14 = ɵɵnextContext(3); return ctx_r14.selectActive(match_r10); });
    ɵɵelementStart(1, "label");
    ɵɵelement(2, "i", 10);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r10 = ctx.$implicit;
    var ctx_r8 = ɵɵnextContext(3);
    ɵɵclassProp("active", match_r10 === ctx_r8.activeMatch);
    ɵɵproperty("ngClass", ɵɵpureFunction1(5, _c0$j, match_r10.checked));
    ɵɵadvance(2);
    ɵɵproperty("ngClass", ɵɵpureFunction3(7, _c1$7, !match_r10.checked, match_r10.checked, match_r10.indeterminate));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", match_r10.label, " ");
} }
function ChecklistPickerResults_ul_1_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtemplate(1, ChecklistPickerResults_ul_1_span_1_li_1_Template, 2, 1, "li", 6);
    ɵɵtemplate(2, ChecklistPickerResults_ul_1_span_1_li_2_Template, 4, 11, "li", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    var section_r5 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", section_r5.data.length > 0);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", section_r5.data);
} }
function ChecklistPickerResults_ul_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "ul");
    ɵɵtemplate(1, ChecklistPickerResults_ul_1_span_1_Template, 3, 2, "span", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
} }
function ChecklistPickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerError);
} }
function ChecklistPickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 12);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.pickerEmpty);
} }
/**
 * @description This is the actual list of matches that gets injected into the DOM.
 */
var ChecklistPickerResults = /** @class */ (function (_super) {
    __extends(ChecklistPickerResults, _super);
    function ChecklistPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.labels = labels;
        return _this;
    }
    ChecklistPickerResults.prototype.search = function () {
        var _this = this;
        var options = this.config.options;
        // only set this the first time
        return from(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (options) {
                // Resolve the data
                if (Array.isArray(options)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(options);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * @param matches - Collection of objects=
     *
     * @description This function loops through the picker options and creates a filtered list of objects that contain
     * the newSearch.
     */
    ChecklistPickerResults.prototype.filterData = function (matches) {
        var _this = this;
        if (this.term && matches) {
            this.filteredMatches = matches.map(function (section) {
                var items = section.originalData.filter(function (match) {
                    return ~String(match.label)
                        .toLowerCase()
                        .indexOf(_this.term.toLowerCase());
                });
                section.data = items;
                return section;
            }, this);
            return this.filteredMatches;
        }
        else if (this.term === '') {
            matches.forEach(function (section) {
                section.data = section.originalData;
            });
            return matches;
        }
        // Show no recent results template
        return matches;
    };
    ChecklistPickerResults.prototype.selectMatch = function (event, item) {
        Helpers.swallowEvent(event);
        if (item.indeterminate) {
            item.indeterminate = false;
            item.checked = true;
        }
        else {
            item.checked = !item.checked;
        }
        var selected = this.activeMatch;
        if (selected) {
            this.parent.value = selected;
        }
        this.ref.markForCheck();
        return false;
    };
    ChecklistPickerResults.ɵfac = function ChecklistPickerResults_Factory(t) { return new (t || ChecklistPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    ChecklistPickerResults.ɵcmp = ɵɵdefineComponent({ type: ChecklistPickerResults, selectors: [["checklist-picker-results"]], hostAttrs: [1, "active", "picker-results"], features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["theme", "line", 4, "ngIf"], [4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null-results", 4, "ngIf"], ["theme", "line"], [4, "ngFor", "ngForOf"], ["class", "header caption", 4, "ngIf"], [3, "ngClass", "active", "click", "mouseenter", 4, "ngFor", "ngForOf"], [1, "header", "caption"], [3, "ngClass", "click", "mouseenter"], [3, "ngClass"], [1, "picker-error"], [1, "picker-null-results"]], template: function ChecklistPickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, ChecklistPickerResults_novo_loading_0_Template, 1, 0, "novo-loading", 0);
            ɵɵtemplate(1, ChecklistPickerResults_ul_1_Template, 2, 1, "ul", 1);
            ɵɵtemplate(2, ChecklistPickerResults_p_2_Template, 2, 1, "p", 2);
            ɵɵtemplate(3, ChecklistPickerResults_p_3_Template, 2, 1, "p", 3);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.isLoading && !ctx.matches.length);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.matches.length > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasError);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.isLoading && !ctx.matches.length && !ctx.hasError && ctx.term !== "");
        } }, directives: [NgIf, NovoLoadingElement, NgForOf, NgClass], encapsulation: 2 });
    return ChecklistPickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(ChecklistPickerResults, [{
        type: Component,
        args: [{
                selector: 'checklist-picker-results',
                host: {
                    class: 'active picker-results',
                },
                template: "\n    <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n    <ul *ngIf=\"matches.length > 0\">\n      <span *ngFor=\"let section of matches; let i = index\">\n        <li class=\"header caption\" *ngIf=\"section.data.length > 0\">{{ section.label || section.type }}</li>\n        <li\n          *ngFor=\"let match of section.data; let i = index\"\n          [ngClass]=\"{ checked: match.checked }\"\n          (click)=\"selectMatch($event, match)\"\n          [class.active]=\"match === activeMatch\"\n          (mouseenter)=\"selectActive(match)\"\n        >\n          <label>\n            <i\n              [ngClass]=\"{\n                'bhi-checkbox-empty': !match.checked,\n                'bhi-checkbox-filled': match.checked,\n                'bhi-checkbox-indeterminate': match.indeterminate\n              }\"\n            ></i>\n            {{ match.label }}\n          </label>\n        </li>\n      </span>\n    </ul>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null-results\" *ngIf=\"!isLoading && !matches.length && !hasError && term !== ''\">{{ labels.pickerEmpty }}</p>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, null); })();

var _c0$k = ["input"];
var _c1$8 = ["list"];
function GroupedMultiPickerResults_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 17);
    ɵɵlistener("click", function GroupedMultiPickerResults_novo_list_item_2_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r12); var ctx_r11 = ɵɵnextContext(); return ctx_r11.selectCategory({ value: "all", label: "all" }); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "span", 18);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "item-end");
    ɵɵelement(5, "i", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("active", (ctx_r0.selectedCategory == null ? null : ctx_r0.selectedCategory.value) === "all")("disabled", ctx_r0.isLoading);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.labels.all);
} }
function GroupedMultiPickerResults_novo_list_item_3_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    var category_r13 = ɵɵnextContext().$implicit;
    ɵɵclassMap(category_r13.iconClass);
} }
function GroupedMultiPickerResults_novo_list_item_3_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 20);
    ɵɵlistener("click", function GroupedMultiPickerResults_novo_list_item_3_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r17); var category_r13 = ctx.$implicit; var ctx_r16 = ɵɵnextContext(); return ctx_r16.selectCategory(category_r13); });
    ɵɵelementStart(1, "item-content");
    ɵɵtemplate(2, GroupedMultiPickerResults_novo_list_item_3_i_2_Template, 1, 2, "i", 21);
    ɵɵelementStart(3, "span", 18);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "item-end");
    ɵɵelement(6, "i", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var category_r13 = ctx.$implicit;
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("active", (ctx_r1.selectedCategory == null ? null : ctx_r1.selectedCategory.value) === category_r13.value)("disabled", ctx_r1.isLoading);
    ɵɵattribute("data-automation-id", category_r13.label);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", category_r13.iconClass);
    ɵɵadvance(2);
    ɵɵtextInterpolate(category_r13.label);
} }
function GroupedMultiPickerResults_footer_4_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "footer", 22);
    ɵɵelementStart(1, "novo-switch", 23);
    ɵɵlistener("ngModelChange", function GroupedMultiPickerResults_footer_4_Template_novo_switch_ngModelChange_1_listener($event) { ɵɵrestoreView(_r19); var ctx_r18 = ɵɵnextContext(); return ctx_r18.customFilterValue = $event; })("onChange", function GroupedMultiPickerResults_footer_4_Template_novo_switch_onChange_1_listener($event) { ɵɵrestoreView(_r19); var ctx_r20 = ɵɵnextContext(); return ctx_r20.fireCustomFilter($event); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label", 18);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r2.isLoading);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r2.customFilterValue);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.customFilterLabel);
} }
function GroupedMultiPickerResults_i_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 24);
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r4.isLoading);
} }
function GroupedMultiPickerResults_i_10_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 25);
    ɵɵlistener("click", function GroupedMultiPickerResults_i_10_Template_i_click_0_listener($event) { ɵɵrestoreView(_r22); var ctx_r21 = ɵɵnextContext(); return ctx_r21.clearSearchTerm($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r5.isLoading);
} }
function GroupedMultiPickerResults_novo_list_item_14_Template(rf, ctx) { if (rf & 1) {
    var _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 26);
    ɵɵlistener("click", function GroupedMultiPickerResults_novo_list_item_14_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r25); var ctx_r24 = ɵɵnextContext(); return ctx_r24.selectMatch($event); })("mouseenter", function GroupedMultiPickerResults_novo_list_item_14_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r25); var match_r23 = ctx.$implicit; var ctx_r26 = ɵɵnextContext(); return ctx_r26.selectActive(match_r23); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "span");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r23 = ctx.$implicit;
    var ctx_r7 = ɵɵnextContext();
    ɵɵclassProp("active", match_r23 === ctx_r7.activeMatch)("disabled", ctx_r7.preselected(match_r23) || ctx_r7.isLoading);
    ɵɵattribute("data-automation-id", match_r23.label);
    ɵɵadvance(3);
    ɵɵtextInterpolate(match_r23.label);
} }
function GroupedMultiPickerResults_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 27);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r8.labels.groupedMultiPickerEmpty, " ");
} }
function GroupedMultiPickerResults_div_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 28);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r9.labels.groupedMultiPickerSelectCategory, " ");
} }
function GroupedMultiPickerResults_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 29);
    ɵɵelement(1, "novo-loading", 30);
    ɵɵelementEnd();
} }
var GroupedMultiPickerResults = /** @class */ (function (_super) {
    __extends(GroupedMultiPickerResults, _super);
    function GroupedMultiPickerResults(element, renderer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.renderer = renderer;
        _this.labels = labels;
        _this.customFilterEnabled = false;
        _this.placeholder = '';
        _this.internalMap = new Map();
        return _this;
    }
    Object.defineProperty(GroupedMultiPickerResults.prototype, "term", {
        set: function (value) {
            var _this = this;
            // Display all only will work for static categories
            if (this.config.displayAll && this.config.getItemsForCategoryAsync) {
                throw new Error('[GroupedMultiPickerResults] - you can only have `displayAll` with a static `categoryMap`. Not available with `getItemsForCategoryAsync`');
            }
            // Custom filter
            if (this.config.customFilter) {
                this.customFilterEnabled = true;
                this.customFilterLabel = this.config.customFilter.label;
                this.customFilterValue = !!this.config.customFilter.defaultFilterValue;
                this.ref.markForCheck();
                if (!this.customFilterLabel || !this.config.customFilter.matchFunction) {
                    throw new Error('[GroupedMultiPickerResults] - custom filter/matchFunction set no label was provided!');
                }
            }
            else {
                this.customFilterEnabled = false;
            }
            // Configure ALL
            if (this.config.displayAll && !this.selectedCategory) {
                this.setAllCategory();
            }
            // Placeholder
            if (this.config.placeholder) {
                this.placeholder = this.config.placeholder;
            }
            // Focus
            setTimeout(function () {
                _this.inputElement.nativeElement.focus();
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupedMultiPickerResults.prototype, "categories", {
        get: function () {
            if (this.config.categories || this.config.categoryMap) {
                return (this.config.categories ||
                    Array.from(this.config.categoryMap.values()).filter(function (category) {
                        return category.value !== 'all';
                    }));
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    GroupedMultiPickerResults.prototype.ngOnInit = function () {
        var _this = this;
        // Subscribe to keyboard events and debounce
        this.keyboardSubscription = fromEvent(this.inputElement.nativeElement, 'keyup')
            .pipe(debounceTime(350), distinctUntilChanged())
            .subscribe(function (event) {
            _this.searchTerm = event.target['value'];
            _this.matches = _this.filterData();
            _this.ref.markForCheck();
        });
    };
    GroupedMultiPickerResults.prototype.ngOnDestroy = function () {
        // Cleanup
        this.keyboardSubscription.unsubscribe();
    };
    GroupedMultiPickerResults.prototype.setAllCategory = function () {
        // If we have display all, set the all categories up
        if (this.config.displayAll) {
            this.selectedCategory = { value: 'all', label: 'all' };
            var allItems_1 = [];
            Array.from(this.config.categoryMap.values())
                .filter(function (category) {
                return category.value !== 'all';
            })
                .forEach(function (v) { return allItems_1.push.apply(allItems_1, __spread(v.items)); });
            this.matches = this.filter(allItems_1);
            this.config.categoryMap.set('all', { value: 'all', label: 'All', items: allItems_1 });
            this.ref.markForCheck();
        }
    };
    GroupedMultiPickerResults.prototype.selectCategory = function (category) {
        // Scroll to top
        this.renderer.setProperty(this.listElement.element.nativeElement, 'scrollTop', 0);
        // Set focus
        this.inputElement.nativeElement.focus();
        // Find new items
        var key = category.value;
        this.selectedCategory = category;
        // Clear
        this.matches = [];
        this.ref.markForCheck();
        // New matches
        this.getNewMatches(category, key);
    };
    GroupedMultiPickerResults.prototype.clearSearchTerm = function (event) {
        Helpers.swallowEvent(event);
        this.searchTerm = '';
        this.selectCategory({ value: this.selectedCategory.value, label: this.selectedCategory.label });
        this.ref.markForCheck();
    };
    GroupedMultiPickerResults.prototype.selectMatch = function (event, item) {
        // Set focus
        this.inputElement.nativeElement.focus();
        return _super.prototype.selectMatch.call(this, event);
    };
    GroupedMultiPickerResults.prototype.fireCustomFilter = function (value) {
        var _this = this;
        this.customFilterValue = value;
        // Clear cache map
        this.internalMap.clear();
        // Only fire if we have a selected category
        if (this.selectCategory) {
            // Find new items
            var key = this.selectedCategory.value;
            // Get new matches
            this.getNewMatches(this.selectedCategory, key);
            this.ref.markForCheck();
        }
        // Focus
        setTimeout(function () {
            _this.inputElement.nativeElement.focus();
        });
    };
    GroupedMultiPickerResults.prototype.filterData = function () {
        if (this.selectedCategory) {
            if (this.config.categoryMap) {
                return this.filter(this.config.categoryMap.get(this.selectedCategory.value).items);
            }
            else {
                return this.filter(this.internalMap.get(this.selectedCategory.value).items);
            }
        }
        return [];
    };
    GroupedMultiPickerResults.prototype.getNewMatches = function (category, key) {
        var _this = this;
        // Get new matches
        if (this.config.categoryMap) {
            this.matches = this.filter(this.config.categoryMap.get(key).items);
            this.ref.markForCheck();
        }
        else {
            if (!this.config.getItemsForCategoryAsync) {
                throw new Error('The "config" for the Chips must include a function "getItemsForCategoryAsync(categoryKey: string)" to retrieve the items by category. Or if you have static data provide a "categoryMap"');
            }
            if (!this.internalMap.get(key)) {
                this.isLoading = true;
                this.config.getItemsForCategoryAsync(key, this.customFilterValue).then(function (items) {
                    _this.internalMap.set(key, { value: category.value, label: category.label, items: items });
                    _this.matches = _this.filter(items, true);
                    _this.isLoading = false;
                    _this.ref.markForCheck();
                    setTimeout(function () {
                        _this.inputElement.nativeElement.focus();
                    });
                });
            }
            else {
                this.matches = this.filter(this.internalMap.get(key).items);
                this.ref.markForCheck();
            }
        }
    };
    GroupedMultiPickerResults.prototype.filter = function (array, ignoreCustomFilter) {
        var _this = this;
        if (ignoreCustomFilter === void 0) { ignoreCustomFilter = false; }
        var matches = array;
        if (this.searchTerm && this.searchTerm.length !== 0 && this.selectedCategory) {
            matches = matches.filter(function (match) {
                var searchTerm = _this.searchTerm.toLowerCase();
                return match.label.toLowerCase().indexOf(searchTerm) > -1 || match.value.toLowerCase().indexOf(searchTerm) > -1;
            });
        }
        if (this.customFilterEnabled && this.config.customFilter.matchFunction && !ignoreCustomFilter) {
            matches = matches.filter(function (match) { return _this.config.customFilter.matchFunction(match, _this.customFilterValue); });
        }
        return matches;
    };
    GroupedMultiPickerResults.ɵfac = function GroupedMultiPickerResults_Factory(t) { return new (t || GroupedMultiPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    GroupedMultiPickerResults.ɵcmp = ɵɵdefineComponent({ type: GroupedMultiPickerResults, selectors: [["grouped-multi-picker-results"]], viewQuery: function GroupedMultiPickerResults_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(_c0$k, true);
            ɵɵviewQuery(_c1$8, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputElement = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.listElement = _t.first);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 18, vars: 13, consts: [[1, "grouped-multi-picker-groups"], ["direction", "vertical"], ["data-automation-id", "display-all", 3, "active", "disabled", "click", 4, "ngIf"], [3, "active", "disabled", "click", 4, "ngFor", "ngForOf"], ["class", "grouped-multi-picker-groups-footer", "data-automation-id", "footer", 3, "disabled", 4, "ngIf"], [1, "grouped-multi-picker-matches"], ["data-automation-id", "input-container", 1, "grouped-multi-picker-input-container", 3, "hidden"], ["autofocus", "", "data-automation-id", "input", 3, "ngModel", "disabled", "placeholder", "ngModelChange"], ["input", ""], ["class", "bhi-search", "data-automation-id", "seach-icon", 3, "disabled", 4, "ngIf"], ["class", "bhi-times", "data-automation-id", "remove-icon", 3, "disabled", "click", 4, "ngIf"], [1, "grouped-multi-picker-list-container"], ["list", ""], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["class", "grouped-multi-picker-no-results", "data-automation-id", "empty-message", 4, "ngIf"], ["class", "grouped-multi-picker-no-category", "data-automation-id", "select-category-message", 4, "ngIf"], ["class", "grouped-multi-picker-loading", "data-automation-id", "loading-message", 4, "ngIf"], ["data-automation-id", "display-all", 3, "click"], ["data-automation-id", "label"], [1, "bhi-next"], [3, "click"], [3, "class", 4, "ngIf"], ["data-automation-id", "footer", 1, "grouped-multi-picker-groups-footer"], ["data-automation-id", "switch", 3, "ngModel", "ngModelChange", "onChange"], ["data-automation-id", "seach-icon", 1, "bhi-search"], ["data-automation-id", "remove-icon", 1, "bhi-times", 3, "click"], [3, "click", "mouseenter"], ["data-automation-id", "empty-message", 1, "grouped-multi-picker-no-results"], ["data-automation-id", "select-category-message", 1, "grouped-multi-picker-no-category"], ["data-automation-id", "loading-message", 1, "grouped-multi-picker-loading"], ["theme", "line"]], template: function GroupedMultiPickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "novo-list", 1);
            ɵɵtemplate(2, GroupedMultiPickerResults_novo_list_item_2_Template, 6, 5, "novo-list-item", 2);
            ɵɵtemplate(3, GroupedMultiPickerResults_novo_list_item_3_Template, 7, 7, "novo-list-item", 3);
            ɵɵelementEnd();
            ɵɵtemplate(4, GroupedMultiPickerResults_footer_4_Template, 4, 4, "footer", 4);
            ɵɵelementEnd();
            ɵɵelementStart(5, "div", 5);
            ɵɵelementStart(6, "div", 6);
            ɵɵelementStart(7, "input", 7, 8);
            ɵɵlistener("ngModelChange", function GroupedMultiPickerResults_Template_input_ngModelChange_7_listener($event) { return ctx.searchTerm = $event; });
            ɵɵelementEnd();
            ɵɵtemplate(9, GroupedMultiPickerResults_i_9_Template, 1, 2, "i", 9);
            ɵɵtemplate(10, GroupedMultiPickerResults_i_10_Template, 1, 2, "i", 10);
            ɵɵelementEnd();
            ɵɵelementStart(11, "div", 11);
            ɵɵelementStart(12, "novo-list", 1, 12);
            ɵɵtemplate(14, GroupedMultiPickerResults_novo_list_item_14_Template, 4, 6, "novo-list-item", 13);
            ɵɵelementEnd();
            ɵɵtemplate(15, GroupedMultiPickerResults_div_15_Template, 2, 1, "div", 14);
            ɵɵtemplate(16, GroupedMultiPickerResults_div_16_Template, 2, 1, "div", 15);
            ɵɵtemplate(17, GroupedMultiPickerResults_div_17_Template, 2, 0, "div", 16);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.config.displayAll);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.categories);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.customFilterEnabled);
            ɵɵadvance(2);
            ɵɵproperty("hidden", !ctx.selectedCategory);
            ɵɵadvance(1);
            ɵɵproperty("ngModel", ctx.searchTerm)("disabled", ctx.isLoading)("placeholder", ctx.placeholder);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.searchTerm);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.searchTerm);
            ɵɵadvance(4);
            ɵɵproperty("ngForOf", ctx.matches);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.matches.length === 0 && !ctx.isLoading && ctx.selectedCategory);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.matches.length === 0 && !ctx.isLoading && !ctx.selectedCategory);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.isLoading);
        } }, directives: [NovoListElement, NgIf, NgForOf, DefaultValueAccessor, NgControlStatus, NgModel, NovoListItemElement, NovoItemContentElement, NovoItemEndElement, NovoSwitchElement, NovoLoadingElement], encapsulation: 2 });
    return GroupedMultiPickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(GroupedMultiPickerResults, [{
        type: Component,
        args: [{
                selector: 'grouped-multi-picker-results',
                template: "\n        <div class=\"grouped-multi-picker-groups\">\n            <novo-list direction=\"vertical\">\n                <novo-list-item\n                    *ngIf=\"config.displayAll\"\n                    (click)=\"selectCategory({ value: 'all', label: 'all' })\"\n                    [class.active]=\"selectedCategory?.value === 'all'\"\n                    data-automation-id=\"display-all\"\n                    [class.disabled]=\"isLoading\">\n                    <item-content>\n                        <span data-automation-id=\"label\">{{ labels.all }}</span>\n                    </item-content>\n                    <item-end>\n                        <i class=\"bhi-next\"></i>\n                    </item-end>\n                </novo-list-item>\n                <novo-list-item\n                    *ngFor=\"let category of categories\"\n                    (click)=\"selectCategory(category)\"\n                    [class.active]=\"selectedCategory?.value === category.value\"\n                    [attr.data-automation-id]=\"category.label\"\n                    [class.disabled]=\"isLoading\">\n                    <item-content>\n                        <i *ngIf=\"category.iconClass\" [class]=\"category.iconClass\"></i>\n                        <span data-automation-id=\"label\">{{ category.label }}</span>\n                    </item-content>\n                    <item-end>\n                        <i class=\"bhi-next\"></i>\n                    </item-end>\n                </novo-list-item>\n            </novo-list>\n            <footer class=\"grouped-multi-picker-groups-footer\" *ngIf=\"customFilterEnabled\" data-automation-id=\"footer\" [class.disabled]=\"isLoading\">\n                <novo-switch [(ngModel)]=\"customFilterValue\" (onChange)=\"fireCustomFilter($event)\" data-automation-id=\"switch\"></novo-switch>\n                <label data-automation-id=\"label\">{{ customFilterLabel }}</label>\n            </footer>\n        </div>\n        <div class=\"grouped-multi-picker-matches\">\n            <div class=\"grouped-multi-picker-input-container\" [hidden]=\"!selectedCategory\" data-automation-id=\"input-container\">\n                <input autofocus #input [(ngModel)]=\"searchTerm\" [disabled]=\"isLoading\" data-automation-id=\"input\" [placeholder]=\"placeholder\"/>\n                <i class=\"bhi-search\" *ngIf=\"!searchTerm\" [class.disabled]=\"isLoading\" data-automation-id=\"seach-icon\"></i>\n                <i class=\"bhi-times\" *ngIf=\"searchTerm\" (click)=\"clearSearchTerm($event)\" [class.disabled]=\"isLoading\" data-automation-id=\"remove-icon\"></i>\n            </div>\n            <div class=\"grouped-multi-picker-list-container\">\n                <novo-list direction=\"vertical\" #list>\n                    <novo-list-item\n                        *ngFor=\"let match of matches\"\n                        (click)=\"selectMatch($event)\"\n                        [class.active]=\"match === activeMatch\"\n                        (mouseenter)=\"selectActive(match)\"\n                        [class.disabled]=\"preselected(match) || isLoading\"\n                        [attr.data-automation-id]=\"match.label\">\n                        <item-content>\n                            <span>{{ match.label }}</span>\n                        </item-content>\n                    </novo-list-item>\n                </novo-list>\n                <div class=\"grouped-multi-picker-no-results\" *ngIf=\"matches.length === 0 && !isLoading && selectedCategory\" data-automation-id=\"empty-message\">\n                    {{ labels.groupedMultiPickerEmpty }}\n                </div>\n                <div class=\"grouped-multi-picker-no-category\" *ngIf=\"matches.length === 0 && !isLoading && !selectedCategory\" data-automation-id=\"select-category-message\">\n                    {{ labels.groupedMultiPickerSelectCategory }}\n                </div>\n                <div class=\"grouped-multi-picker-loading\" *ngIf=\"isLoading\" data-automation-id=\"loading-message\">\n                    <novo-loading theme=\"line\"></novo-loading>\n                </div>\n            </div>\n        </div>\n    ",
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { inputElement: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], listElement: [{
            type: ViewChild,
            args: ['list']
        }] }); })();

function SkillsSpecialtyPickerResults_section_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "section", 4);
    ɵɵelement(1, "novo-loading", 5);
    ɵɵelementEnd();
} }
function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 10);
    ɵɵlistener("click", function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(2); return ctx_r8.selectMatch($event); })("mouseenter", function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r9); var match_r7 = ctx.$implicit; var ctx_r10 = ɵɵnextContext(2); return ctx_r10.selectActive(match_r7); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "h6");
    ɵɵelement(3, "span", 11);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 12);
    ɵɵelement(5, "i", 13);
    ɵɵelement(6, "span", 11);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r7 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r7 === ctx_r4.activeMatch)("disabled", ctx_r4.preselected(match_r7));
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r7.label, ctx_r4.term), ɵɵsanitizeHtml);
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r7.data.categories || match_r7.data.parentCategory.name, ctx_r4.term), ɵɵsanitizeHtml);
} }
function SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list-item");
    ɵɵelementStart(1, "div");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r5.labels.showingXofXResults(ctx_r5.limit, ctx_r5.total));
} }
function SkillsSpecialtyPickerResults_novo_list_1_novo_loading_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 5);
} }
function SkillsSpecialtyPickerResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 6);
    ɵɵtemplate(1, SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_1_Template, 7, 6, "novo-list-item", 7);
    ɵɵtemplate(2, SkillsSpecialtyPickerResults_novo_list_1_novo_list_item_2_Template, 3, 1, "novo-list-item", 8);
    ɵɵtemplate(3, SkillsSpecialtyPickerResults_novo_list_1_novo_loading_3_Template, 1, 0, "novo-loading", 9);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.limitedTo);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isLoading && ctx_r1.matches.length > 0);
} }
function SkillsSpecialtyPickerResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 14);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.pickerError);
} }
function SkillsSpecialtyPickerResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 15);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.pickerEmpty);
} }
var SkillsSpecialtyPickerResults = /** @class */ (function (_super) {
    __extends(SkillsSpecialtyPickerResults, _super);
    function SkillsSpecialtyPickerResults(element, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.element = element;
        _this.labels = labels;
        _this.active = true;
        _this.limitedTo = false;
        _this.limit = 200;
        return _this;
    }
    SkillsSpecialtyPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    SkillsSpecialtyPickerResults.prototype.structureArray = function (collection) {
        var data = collection;
        if (collection.hasOwnProperty('data')) {
            this.limitedTo = collection.limitedTo200;
            this.total = collection.total;
            data = collection.data;
        }
        else if (data.length > this.limit) {
            this.limitedTo = true;
            this.total = data.length;
            data = data.slice(0, this.limit);
        }
        return _super.prototype.structureArray.call(this, data);
    };
    SkillsSpecialtyPickerResults.ɵfac = function SkillsSpecialtyPickerResults_Factory(t) { return new (t || SkillsSpecialtyPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    SkillsSpecialtyPickerResults.ɵcmp = ɵɵdefineComponent({ type: SkillsSpecialtyPickerResults, selectors: [["skill-specialty-picker-results"]], hostVars: 2, hostBindings: function SkillsSpecialtyPickerResults_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("active", ctx.active);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["class", "picker-loading", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null", 4, "ngIf"], [1, "picker-loading"], ["theme", "line"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], [4, "ngIf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], [1, "category"], [1, "bhi-category-tags"], [1, "picker-error"], [1, "picker-null"]], template: function SkillsSpecialtyPickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, SkillsSpecialtyPickerResults_section_0_Template, 2, 0, "section", 0);
            ɵɵtemplate(1, SkillsSpecialtyPickerResults_novo_list_1_Template, 4, 3, "novo-list", 1);
            ɵɵtemplate(2, SkillsSpecialtyPickerResults_p_2_Template, 2, 1, "p", 2);
            ɵɵtemplate(3, SkillsSpecialtyPickerResults_p_3_Template, 2, 1, "p", 3);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.isLoading && !(ctx.matches == null ? null : ctx.matches.length));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.matches.length > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasError);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.isLoading && !ctx.matches.length && !ctx.hasError);
        } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement], encapsulation: 2 });
    return SkillsSpecialtyPickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(SkillsSpecialtyPickerResults, [{
        type: Component,
        args: [{
                selector: 'skill-specialty-picker-results',
                template: "\n    <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\"><novo-loading theme=\"line\"></novo-loading></section>\n    <novo-list *ngIf=\"matches.length > 0\" direction=\"vertical\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-content>\n          <h6><span [innerHtml]=\"highlight(match.label, term)\"></span></h6>\n          <div class=\"category\">\n            <i class=\"bhi-category-tags\"></i\n            ><span [innerHtml]=\"highlight(match.data.categories || match.data.parentCategory.name, term)\"></span>\n          </div>\n        </item-content>\n      </novo-list-item>\n      <novo-list-item *ngIf=\"limitedTo\"\n        ><div>{{ labels.showingXofXResults(limit, total) }}</div></novo-list-item\n      >\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches.length > 0\"></novo-loading>\n    </novo-list>\n    <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.pickerError }}</p>\n    <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.pickerEmpty }}</p>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }] }); })();

function DistributionListPickerResults_section_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "section", 2);
    ɵɵelement(1, "novo-loading", 3);
    ɵɵelementEnd();
} }
var _c0$l = function () { return { year: "numeric", month: "numeric", day: "numeric" }; };
function DistributionListPickerResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 7);
    ɵɵlistener("click", function DistributionListPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(2); return ctx_r5.selectMatch($event); })("mouseenter", function DistributionListPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r6); var match_r4 = ctx.$implicit; var ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectActive(match_r4); });
    ɵɵelementStart(1, "item-header");
    ɵɵelementStart(2, "item-title");
    ɵɵelement(3, "span", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "item-content", 9);
    ɵɵelementStart(5, "p");
    ɵɵelementStart(6, "span", 10);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementStart(8, "span");
    ɵɵtext(9);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(10, "p");
    ɵɵelementStart(11, "span", 10);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r4 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r4 === ctx_r2.activeMatch)("disabled", ctx_r2.preselected(match_r4));
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r2.sanitizeHTML(match_r4.label), ɵɵsanitizeHtml);
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r2.labels.distributionListOwner, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.owner == null ? null : match_r4.data.owner.name);
    ɵɵadvance(3);
    ɵɵtextInterpolate1("", ctx_r2.labels.dateAdded, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatDateWithFormat(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.dateAdded, ɵɵpureFunction0(9, _c0$l)));
} }
function DistributionListPickerResults_novo_list_1_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 3);
} }
function DistributionListPickerResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 4);
    ɵɵtemplate(1, DistributionListPickerResults_novo_list_1_novo_list_item_1_Template, 15, 10, "novo-list-item", 5);
    ɵɵtemplate(2, DistributionListPickerResults_novo_list_1_novo_loading_2_Template, 1, 0, "novo-loading", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isLoading && (ctx_r1.matches == null ? null : ctx_r1.matches.length) > 0);
} }
var DistributionListPickerResults = /** @class */ (function (_super) {
    __extends(DistributionListPickerResults, _super);
    function DistributionListPickerResults(element, sanitizer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.sanitizer = sanitizer;
        _this.labels = labels;
        _this.active = true;
        _this.sanitizer = sanitizer;
        return _this;
    }
    Object.defineProperty(DistributionListPickerResults.prototype, "isHidden", {
        get: function () {
            return this.matches.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    DistributionListPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    DistributionListPickerResults.prototype.sanitizeHTML = function (html) {
        return this.sanitizer.bypassSecurityTrustHtml(html);
    };
    DistributionListPickerResults.ɵfac = function DistributionListPickerResults_Factory(t) { return new (t || DistributionListPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    DistributionListPickerResults.ɵcmp = ɵɵdefineComponent({ type: DistributionListPickerResults, selectors: [["distribution-list-picker-results"]], hostVars: 3, hostBindings: function DistributionListPickerResults_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵhostProperty("hidden", ctx.isHidden);
            ɵɵclassProp("active", ctx.active);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [["class", "picker-loading", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], [1, "picker-loading"], ["theme", "line"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], ["direction", "horizontal"], [1, "label"]], template: function DistributionListPickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, DistributionListPickerResults_section_0_Template, 2, 0, "section", 0);
            ɵɵtemplate(1, DistributionListPickerResults_novo_list_1_Template, 3, 2, "novo-list", 1);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.isLoading && !(ctx.matches == null ? null : ctx.matches.length));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.matches == null ? null : ctx.matches.length) > 0 && !ctx.hasError);
        } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemHeaderElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
    return DistributionListPickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(DistributionListPickerResults, [{
        type: Component,
        args: [{
                selector: 'distribution-list-picker-results',
                template: "\n        <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n            <novo-loading theme=\"line\"></novo-loading>\n        </section>\n        <novo-list direction=\"vertical\" *ngIf=\"matches?.length > 0 && !hasError\">\n            <novo-list-item *ngFor=\"let match of matches\" (click)=\"selectMatch($event)\" [class.active]=\"match === activeMatch\" (mouseenter)=\"selectActive(match)\" [class.disabled]=\"preselected(match)\">\n                <item-header>\n                    <item-title>\n                        <span [innerHtml]=\"sanitizeHTML(match.label)\"></span>\n                    </item-title>\n                </item-header>\n                <item-content direction=\"horizontal\">\n                    <p>\n                        <span class='label'>{{ labels.distributionListOwner }}: </span><span>{{ match?.data?.owner?.name }}</span>\n                    </p>\n                    <p>\n                        <span class='label'>{{ labels.dateAdded }}: </span><span>{{ labels.formatDateWithFormat(match?.data?.dateAdded, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n                    </p>\n                </item-content>\n            </novo-list-item>\n            <novo-loading theme=\"line\" *ngIf=\"isLoading && matches?.length > 0\"></novo-loading>\n        </novo-list>\n    ",
            }]
    }], function () { return [{ type: ElementRef }, { type: DomSanitizer }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], isHidden: [{
            type: HostBinding,
            args: ['hidden']
        }] }); })();

function WorkersCompCodesPickerResults_section_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "section", 2);
    ɵɵelement(1, "novo-loading", 3);
    ɵɵelementEnd();
} }
var _c0$m = function () { return { year: "numeric", month: "numeric", day: "numeric" }; };
function WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 7);
    ɵɵlistener("click", function WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(2); return ctx_r5.selectMatch($event); })("mouseenter", function WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r6); var match_r4 = ctx.$implicit; var ctx_r7 = ɵɵnextContext(2); return ctx_r7.selectActive(match_r4); });
    ɵɵelementStart(1, "item-header");
    ɵɵelementStart(2, "item-title");
    ɵɵelement(3, "span", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(4, "item-content", 9);
    ɵɵelementStart(5, "p");
    ɵɵelementStart(6, "span", 10);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementStart(8, "span");
    ɵɵtext(9);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(10, "p");
    ɵɵelementStart(11, "span", 10);
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(15, "item-content", 9);
    ɵɵelementStart(16, "p");
    ɵɵelementStart(17, "span", 10);
    ɵɵtext(18);
    ɵɵelementEnd();
    ɵɵelementStart(19, "span");
    ɵɵtext(20);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(21, "p");
    ɵɵelementStart(22, "span", 10);
    ɵɵtext(23);
    ɵɵelementEnd();
    ɵɵelementStart(24, "span");
    ɵɵtext(25);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r4 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r4 === ctx_r2.activeMatch)("disabled", ctx_r2.preselected(match_r4));
    ɵɵadvance(3);
    ɵɵproperty("innerHtml", ctx_r2.sanitizeHTML(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.compensation == null ? null : match_r4.data.compensation.code, match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.compensation == null ? null : match_r4.data.compensation.name), ɵɵsanitizeHtml);
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r2.labels.state, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.compensation == null ? null : match_r4.data.compensation.state);
    ɵɵadvance(3);
    ɵɵtextInterpolate1("", ctx_r2.labels.rate, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatCurrency(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.rate));
    ɵɵadvance(4);
    ɵɵtextInterpolate1("", ctx_r2.labels.startDate, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatDateWithFormat(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.startDate, ɵɵpureFunction0(13, _c0$m)));
    ɵɵadvance(3);
    ɵɵtextInterpolate1("", ctx_r2.labels.endDate, ": ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r2.labels.formatDateWithFormat(match_r4 == null ? null : match_r4.data == null ? null : match_r4.data.endDate, ɵɵpureFunction0(14, _c0$m)));
} }
function WorkersCompCodesPickerResults_novo_list_1_novo_loading_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 3);
} }
function WorkersCompCodesPickerResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 4);
    ɵɵtemplate(1, WorkersCompCodesPickerResults_novo_list_1_novo_list_item_1_Template, 26, 15, "novo-list-item", 5);
    ɵɵtemplate(2, WorkersCompCodesPickerResults_novo_list_1_novo_loading_2_Template, 1, 0, "novo-loading", 6);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isLoading && (ctx_r1.matches == null ? null : ctx_r1.matches.length) > 0);
} }
var WorkersCompCodesPickerResults = /** @class */ (function (_super) {
    __extends(WorkersCompCodesPickerResults, _super);
    function WorkersCompCodesPickerResults(element, sanitizer, labels, ref) {
        var _this = _super.call(this, element, ref) || this;
        _this.sanitizer = sanitizer;
        _this.labels = labels;
        _this.active = true;
        _this.sanitizer = sanitizer;
        return _this;
    }
    Object.defineProperty(WorkersCompCodesPickerResults.prototype, "isHidden", {
        get: function () {
            return this.matches.length === 0;
        },
        enumerable: true,
        configurable: true
    });
    WorkersCompCodesPickerResults.prototype.getListElement = function () {
        return this.element.nativeElement.querySelector('novo-list');
    };
    WorkersCompCodesPickerResults.prototype.sanitizeHTML = function (compCode, name) {
        return this.sanitizer.bypassSecurityTrustHtml(compCode + " | " + name);
    };
    WorkersCompCodesPickerResults.ɵfac = function WorkersCompCodesPickerResults_Factory(t) { return new (t || WorkersCompCodesPickerResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    WorkersCompCodesPickerResults.ɵcmp = ɵɵdefineComponent({ type: WorkersCompCodesPickerResults, selectors: [["workers-comp-codes-picker-results"]], hostVars: 3, hostBindings: function WorkersCompCodesPickerResults_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵhostProperty("hidden", ctx.isHidden);
            ɵɵclassProp("active", ctx.active);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [["class", "picker-loading", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], [1, "picker-loading"], ["theme", "line"], ["direction", "vertical"], [3, "active", "disabled", "click", "mouseenter", 4, "ngFor", "ngForOf"], ["theme", "line", 4, "ngIf"], [3, "click", "mouseenter"], [3, "innerHtml"], ["direction", "horizontal"], [1, "label"]], template: function WorkersCompCodesPickerResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, WorkersCompCodesPickerResults_section_0_Template, 2, 0, "section", 0);
            ɵɵtemplate(1, WorkersCompCodesPickerResults_novo_list_1_Template, 3, 2, "novo-list", 1);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.isLoading && !(ctx.matches == null ? null : ctx.matches.length));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.matches == null ? null : ctx.matches.length) > 0 && !ctx.hasError);
        } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemHeaderElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
    return WorkersCompCodesPickerResults;
}(BasePickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(WorkersCompCodesPickerResults, [{
        type: Component,
        args: [{
                selector: 'workers-comp-codes-picker-results',
                template: "\n    <section class=\"picker-loading\" *ngIf=\"isLoading && !matches?.length\">\n      <novo-loading theme=\"line\"></novo-loading>\n    </section>\n    <novo-list direction=\"vertical\" *ngIf=\"matches?.length > 0 && !hasError\">\n      <novo-list-item\n        *ngFor=\"let match of matches\"\n        (click)=\"selectMatch($event)\"\n        [class.active]=\"match === activeMatch\"\n        (mouseenter)=\"selectActive(match)\"\n        [class.disabled]=\"preselected(match)\"\n      >\n        <item-header>\n          <item-title>\n            <span [innerHtml]=\"sanitizeHTML(match?.data?.compensation?.code, match?.data?.compensation?.name)\"></span>\n          </item-title>\n        </item-header>\n        <item-content direction=\"horizontal\">\n          <p>\n            <span class=\"label\">{{ labels.state }}: </span><span>{{ match?.data?.compensation?.state }}</span>\n          </p>\n          <p>\n            <span class=\"label\">{{ labels.rate }}: </span><span>{{ labels.formatCurrency(match?.data?.rate) }}</span>\n          </p>\n        </item-content>\n        <item-content direction=\"horizontal\">\n          <p>\n            <span class=\"label\">{{ labels.startDate }}: </span\n            ><span>{{ labels.formatDateWithFormat(match?.data?.startDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n          </p>\n          <p>\n            <span class=\"label\">{{ labels.endDate }}: </span\n            ><span>{{ labels.formatDateWithFormat(match?.data?.endDate, { year: 'numeric', month: 'numeric', day: 'numeric' }) }}</span>\n          </p>\n        </item-content>\n      </novo-list-item>\n      <novo-loading theme=\"line\" *ngIf=\"isLoading && matches?.length > 0\"></novo-loading>\n    </novo-list>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: DomSanitizer }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { active: [{
            type: HostBinding,
            args: ['class.active']
        }], isHidden: [{
            type: HostBinding,
            args: ['hidden']
        }] }); })();

// NG2
var NovoPickerModule = /** @class */ (function () {
    function NovoPickerModule() {
    }
    NovoPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoPickerModule });
    NovoPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPickerModule_Factory(t) { return new (t || NovoPickerModule)(); }, imports: [[CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule]] });
    return NovoPickerModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPickerModule, { declarations: [NovoPickerElement,
        PickerResults,
        EntityPickerResult,
        EntityPickerResults,
        ChecklistPickerResults,
        GroupedMultiPickerResults,
        DistributionListPickerResults,
        WorkersCompCodesPickerResults,
        SkillsSpecialtyPickerResults], imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule], exports: [NovoPickerElement,
        PickerResults,
        EntityPickerResult,
        EntityPickerResults,
        ChecklistPickerResults,
        GroupedMultiPickerResults,
        DistributionListPickerResults,
        WorkersCompCodesPickerResults,
        SkillsSpecialtyPickerResults] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule, NovoOverlayModule, NovoSwitchModule],
                declarations: [
                    NovoPickerElement,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
                exports: [
                    NovoPickerElement,
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
                entryComponents: [
                    PickerResults,
                    EntityPickerResult,
                    EntityPickerResults,
                    ChecklistPickerResults,
                    GroupedMultiPickerResults,
                    DistributionListPickerResults,
                    WorkersCompCodesPickerResults,
                    SkillsSpecialtyPickerResults,
                ],
            }]
    }], null, null); })();

function NovoRowChipElement_i_2_Template(rf, ctx) { if (rf & 1) {
    var _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 2);
    ɵɵlistener("click", function NovoRowChipElement_i_2_Template_i_click_0_listener($event) { ɵɵrestoreView(_r2); var ctx_r1 = ɵɵnextContext(); return ctx_r1.onRemove($event); });
    ɵɵelementEnd();
} }
var _c0$n = ["*"];
function NovoRowChipsElement_div_0_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r6 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(column_r6.label);
} }
function NovoRowChipsElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, NovoRowChipsElement_div_0_div_1_Template, 2, 1, "div", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.source.columns);
} }
function NovoRowChipsElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.source.emptyReadOnlyMessage);
} }
function NovoRowChipsElement_novo_row_chip_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r9 = ctx.$implicit;
    var item_r7 = ɵɵnextContext().$implicit;
    ɵɵadvance(2);
    ɵɵtextInterpolate(column_r9.data(item_r7));
} }
function NovoRowChipsElement_novo_row_chip_2_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-row-chip", 10);
    ɵɵlistener("remove", function NovoRowChipsElement_novo_row_chip_2_Template_novo_row_chip_remove_0_listener($event) { ɵɵrestoreView(_r12); var item_r7 = ctx.$implicit; var ctx_r11 = ɵɵnextContext(); return ctx_r11.remove($event, item_r7); })("select", function NovoRowChipsElement_novo_row_chip_2_Template_novo_row_chip_select_0_listener($event) { ɵɵrestoreView(_r12); var item_r7 = ctx.$implicit; var ctx_r13 = ɵɵnextContext(); return ctx_r13.select($event, item_r7); });
    ɵɵtemplate(1, NovoRowChipsElement_novo_row_chip_2_div_1_Template, 3, 1, "div", 11);
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r7 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("selected", item_r7 == ctx_r2.selected);
    ɵɵproperty("type", ctx_r2.type || (item_r7 == null ? null : item_r7.value == null ? null : item_r7.value.searchEntity))("disabled", ctx_r2.disablePickerInput);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r2.source.columns);
} }
function NovoRowChipsElement_novo_picker_4_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-picker", 13);
    ɵɵlistener("ngModelChange", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_ngModelChange_0_listener($event) { ɵɵrestoreView(_r15); var ctx_r14 = ɵɵnextContext(); return ctx_r14.itemToAdd = $event; })("select", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_select_0_listener($event) { ɵɵrestoreView(_r15); var ctx_r16 = ɵɵnextContext(); return ctx_r16.add($event); })("keydown", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_keydown_0_listener($event) { ɵɵrestoreView(_r15); var ctx_r17 = ɵɵnextContext(); return ctx_r17.onKeyDown($event); })("focus", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_focus_0_listener($event) { ɵɵrestoreView(_r15); var ctx_r18 = ɵɵnextContext(); return ctx_r18.onFocus($event); })("typing", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_typing_0_listener($event) { ɵɵrestoreView(_r15); var ctx_r19 = ɵɵnextContext(); return ctx_r19.onTyping($event); })("blur", function NovoRowChipsElement_novo_picker_4_Template_novo_picker_blur_0_listener($event) { ɵɵrestoreView(_r15); var ctx_r20 = ɵɵnextContext(); return ctx_r20.onTouched($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵproperty("closeOnSelect", ctx_r3.closeOnSelect)("config", ctx_r3.source)("disablePickerInput", ctx_r3.disablePickerInput)("hidden", ctx_r3.disablePickerInput)("placeholder", ctx_r3.placeholder)("ngModel", ctx_r3.itemToAdd)("selected", ctx_r3.items)("overrideElement", ctx_r3.element);
} }
// Value accessor for the component (supports ngModel)
var CHIPS_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoRowChipsElement; }),
    multi: true,
};
var NovoRowChipElement = /** @class */ (function (_super) {
    __extends(NovoRowChipElement, _super);
    function NovoRowChipElement() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoRowChipElement.prototype.onSelect = function (e) {
        return false;
    };
    NovoRowChipElement.ɵfac = function NovoRowChipElement_Factory(t) { return ɵNovoRowChipElement_BaseFactory(t || NovoRowChipElement); };
    NovoRowChipElement.ɵcmp = ɵɵdefineComponent({ type: NovoRowChipElement, selectors: [["novo-row-chip"]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$n, decls: 3, vars: 1, consts: [[1, "novo-row-chips-columns"], ["class", "bhi-delete-o", 3, "click", 4, "ngIf"], [1, "bhi-delete-o", 3, "click"]], template: function NovoRowChipElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0);
            ɵɵprojection(1);
            ɵɵtemplate(2, NovoRowChipElement_i_2_Template, 1, 0, "i", 1);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.disabled);
        } }, directives: [NgIf], encapsulation: 2 });
    return NovoRowChipElement;
}(NovoChipElement));
var ɵNovoRowChipElement_BaseFactory = ɵɵgetInheritedFactory(NovoRowChipElement);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRowChipElement, [{
        type: Component,
        args: [{
                selector: 'novo-row-chip',
                template: "<div class=\"novo-row-chips-columns\"><ng-content></ng-content><i class=\"bhi-delete-o\" *ngIf=\"!disabled\" (click)=\"onRemove($event)\"></i></div>",
            }]
    }], null, null); })();
var NovoRowChipsElement = /** @class */ (function (_super) {
    __extends(NovoRowChipsElement, _super);
    function NovoRowChipsElement(element, componentUtils, labels) {
        var _this = _super.call(this, element, componentUtils, labels) || this;
        _this.closeOnSelect = true;
        return _this;
    }
    NovoRowChipsElement.prototype.onKeyDown = function (event) {
        return;
    };
    NovoRowChipsElement.ɵfac = function NovoRowChipsElement_Factory(t) { return new (t || NovoRowChipsElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils), ɵɵdirectiveInject(NovoLabelService)); };
    NovoRowChipsElement.ɵcmp = ɵɵdefineComponent({ type: NovoRowChipsElement, selectors: [["novo-row-chips"]], hostVars: 2, hostBindings: function NovoRowChipsElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("with-value", ctx.items.length > 0);
        } }, inputs: { closeOnSelect: "closeOnSelect" }, features: [ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR$1]), ɵɵInheritDefinitionFeature], decls: 8, vars: 6, consts: [["class", "novo-row-chips-columns", 4, "ngIf"], ["class", "novo-row-chips-empty-message", 4, "ngIf"], [3, "type", "selected", "disabled", "remove", "select", 4, "ngFor", "ngForOf"], ["clearValueOnSelect", "true", 3, "closeOnSelect", "config", "disablePickerInput", "hidden", "placeholder", "ngModel", "selected", "overrideElement", "ngModelChange", "select", "keydown", "focus", "typing", "blur", 4, "ngIf"], [1, "preview-container"], ["preview", ""], [1, "novo-row-chips-columns"], ["class", "column-label", 4, "ngFor", "ngForOf"], [1, "column-label"], [1, "novo-row-chips-empty-message"], [3, "type", "disabled", "remove", "select"], ["class", "column-data", 4, "ngFor", "ngForOf"], [1, "column-data"], ["clearValueOnSelect", "true", 3, "closeOnSelect", "config", "disablePickerInput", "hidden", "placeholder", "ngModel", "selected", "overrideElement", "ngModelChange", "select", "keydown", "focus", "typing", "blur"]], template: function NovoRowChipsElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoRowChipsElement_div_0_Template, 2, 1, "div", 0);
            ɵɵtemplate(1, NovoRowChipsElement_div_1_Template, 2, 1, "div", 1);
            ɵɵtemplate(2, NovoRowChipsElement_novo_row_chip_2_Template, 2, 5, "novo-row-chip", 2);
            ɵɵpipe(3, "async");
            ɵɵtemplate(4, NovoRowChipsElement_novo_picker_4_Template, 1, 8, "novo-picker", 3);
            ɵɵelementStart(5, "div", 4);
            ɵɵelement(6, "span", null, 5);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.items.length > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.source.emptyReadOnlyMessage && ctx.disablePickerInput && ctx.items.length === 0);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ɵɵpipeBind1(3, 4, ctx._items));
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.maxlength || ctx.maxlength && ctx.items.length < ctx.maxlength);
        } }, directives: [NgIf, NgForOf, NovoRowChipElement, NovoPickerElement, NgControlStatus, NgModel], pipes: [AsyncPipe], encapsulation: 2 });
    return NovoRowChipsElement;
}(NovoChipsElement));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRowChipsElement, [{
        type: Component,
        args: [{
                selector: 'novo-row-chips',
                providers: [CHIPS_VALUE_ACCESSOR$1],
                host: {
                    '[class.with-value]': 'items.length > 0',
                },
                template: "\n        <div class=\"novo-row-chips-columns\" *ngIf=\"items.length > 0\">\n          <div class=\"column-label\" *ngFor=\"let column of source.columns\">{{ column.label }}</div>\n        </div>\n        <div class=\"novo-row-chips-empty-message\" *ngIf=\"source.emptyReadOnlyMessage && disablePickerInput && items.length === 0\">{{source.emptyReadOnlyMessage}}</div>\n        <novo-row-chip\n          *ngFor=\"let item of _items | async\"\n          [type]=\"type || item?.value?.searchEntity\"\n          [class.selected]=\"item == selected\"\n          [disabled]=\"disablePickerInput\"\n          (remove)=\"remove($event, item)\"\n          (select)=\"select($event, item)\">\n          <div class=\"column-data\" *ngFor=\"let column of source.columns\"><span>{{ column.data(item) }}</span></div>\n        </novo-row-chip>\n        <novo-picker\n            clearValueOnSelect=\"true\"\n            [closeOnSelect]=\"closeOnSelect\"\n            [config]=\"source\"\n            [disablePickerInput]=\"disablePickerInput\"\n            [hidden]=\"disablePickerInput\"\n            [placeholder]=\"placeholder\"\n            [(ngModel)]=\"itemToAdd\"\n            (select)=\"add($event)\"\n            (keydown)=\"onKeyDown($event)\"\n            (focus)=\"onFocus($event)\"\n            (typing)=\"onTyping($event)\"\n            (blur)=\"onTouched($event)\"\n            [selected]=\"items\"\n            [overrideElement]=\"element\"\n            *ngIf=\"!maxlength || (maxlength && items.length < maxlength)\">\n        </novo-picker>\n        <div class=\"preview-container\">\n            <span #preview></span>\n        </div>\n   ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }, { type: NovoLabelService }]; }, { closeOnSelect: [{
            type: Input
        }] }); })();

// NG2
var NovoChipsModule = /** @class */ (function () {
    function NovoChipsModule() {
    }
    NovoChipsModule.ɵmod = ɵɵdefineNgModule({ type: NovoChipsModule });
    NovoChipsModule.ɵinj = ɵɵdefineInjector({ factory: function NovoChipsModule_Factory(t) { return new (t || NovoChipsModule)(); }, imports: [[CommonModule, FormsModule, NovoPickerModule]] });
    return NovoChipsModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoChipsModule, { declarations: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement], imports: [CommonModule, FormsModule, NovoPickerModule], exports: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoChipsModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoPickerModule],
                declarations: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement],
                exports: [NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement],
            }]
    }], null, null); })();

// NG2
var _c0$o = ["host"];
// Value accessor for the component (supports ngModel)
var CKEDITOR_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoCKEditorElement; }),
    multi: true,
};
/**
 * CKEditor component
 * Usage :
 *  <novo-editor [(ngModel)]="data" [config]="{...}" debounce="500"></novo-editor>
 */
var NovoCKEditorElement = /** @class */ (function () {
    function NovoCKEditorElement(zone) {
        this.zone = zone;
        this.startupFocus = false;
        this.fileBrowserImageUploadUrl = '';
        this.disabled = false;
        this.change = new EventEmitter();
        this.ready = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.paste = new EventEmitter();
        this.loaded = new EventEmitter();
        this._value = '';
    }
    Object.defineProperty(NovoCKEditorElement.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (v) {
            if (v !== this._value) {
                this._value = v;
                this.onChange(v);
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoCKEditorElement.prototype.ngOnDestroy = function () {
        var _this = this;
        if (this.instance) {
            this.instance.focusManager.blur(true); // Remove focus from editor
            setTimeout(function () {
                _this.instance.removeAllListeners();
                var aInstance = CKEDITOR.instances[_this.instance.name];
                if (aInstance) {
                    aInstance.destroy();
                }
                _this.instance.destroy();
                _this.instance = null;
            });
        }
    };
    NovoCKEditorElement.prototype.ngAfterViewInit = function () {
        var config = Object.assign(this.getBaseConfig(), this.config);
        if (this.startupFocus) {
            config.startupFocus = true;
        }
        if (this.disabled) {
            config.readOnly = true;
        }
        this.ckeditorInit(config);
    };
    NovoCKEditorElement.prototype.updateValue = function (value) {
        var _this = this;
        this.zone.run(function () {
            _this.value = value;
            _this.onChange(value);
            _this.onTouched();
            _this.change.emit(value);
        });
    };
    NovoCKEditorElement.prototype.ckeditorInit = function (config) {
        var _this = this;
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // CKEditor replace textarea
        this.instance = CKEDITOR.replace(this.host.nativeElement, config);
        // Set initial value
        this.instance.setData(this.value);
        // listen for instanceReady event
        this.instance.on('instanceReady', function (evt) {
            // send the evt to the EventEmitter
            _this.ready.emit(evt);
        });
        // CKEditor change event
        this.instance.on('change', function () {
            _this.onTouched();
            var value = _this.instance.getData();
            // Debounce update
            if (_this.debounce) {
                if (_this.debounceTimeout) {
                    clearTimeout(_this.debounceTimeout);
                }
                _this.debounceTimeout = setTimeout(function () {
                    _this.updateValue(value);
                    _this.debounceTimeout = null;
                }, parseInt(_this.debounce, 10));
            }
            else {
                _this.updateValue(value);
            }
        });
        this.instance.on('blur', function (event) {
            _this.blur.emit(event);
        });
        this.instance.on('focus', function (event) {
            _this.focus.emit(event);
        });
        this.instance.on('paste', function (event) {
            _this.paste.emit(event);
        });
        this.instance.on('loaded', function (event) {
            _this.loaded.emit(event);
        });
    };
    NovoCKEditorElement.prototype.getBaseConfig = function () {
        var baseConfig = {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            removePlugins: 'liststyle,tabletools,contextmenu',
            extraAllowedContent: '*(*){*};table tbody tr td th[*];',
            font_names: 'Arial/Arial, Helvetica, sans-serif;' +
                'Calibri/Calibri, Verdana, Geneva, sans-serif;' +
                'Comic Sans MS/Comic Sans MS, cursive;' +
                'Courier New/Courier New, Courier, monospace;' +
                'Georgia/Georgia, serif;' +
                'Lucida Sans Unicode/Lucida Sans Unicode, Lucida Grande, sans-serif;' +
                'Tahoma/Tahoma, Geneva, sans-serif;' +
                'Times New Roman/Times New Roman, Times, serif;' +
                'Trebuchet MS/Trebuchet MS, Helvetica, sans-serif;' +
                'Verdana/Verdana, Geneva, sans-serif',
        };
        var minimalConfig = {
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
        var extendedConfig = {
            toolbar: [
                { name: 'clipboard', items: ['Paste', 'PasteText', 'PasteFromWord', 'Undo', 'Redo'] },
                {
                    name: 'paragraph',
                    items: [
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Blockquote',
                        'JustifyLeft',
                        'JustifyCenter',
                        'JustifyRight',
                        'JustifyBlock',
                        'BidiLtr',
                        'BidiRtl',
                    ],
                },
                { name: 'links', items: ['Link'] },
                { name: 'insert', items: ['Image', 'Table', 'HorizontalRule'] },
                { name: 'tools', items: ['Maximize', 'Source'] },
                '/',
                { name: 'basicstyles', items: ['Bold', 'Italic', 'Underline', 'Strike', 'Subscript', 'Superscript'] },
                { name: 'styles', items: ['Styles', 'Format', 'Font', 'FontSize'] },
                { name: 'colors', items: ['TextColor', 'BGColor'] },
            ],
            filebrowserImageUploadUrl: this.fileBrowserImageUploadUrl,
        };
        return Object.assign(baseConfig, this.minimal ? minimalConfig : extendedConfig);
    };
    NovoCKEditorElement.prototype.writeValue = function (value) {
        this._value = value;
        if (this.instance) {
            this.instance.setData(value);
        }
    };
    NovoCKEditorElement.prototype.onChange = function (value) { };
    NovoCKEditorElement.prototype.onTouched = function (event) { };
    NovoCKEditorElement.prototype.registerOnChange = function (fn) {
        this.onChange = fn;
    };
    NovoCKEditorElement.prototype.registerOnTouched = function (fn) {
        this.onTouched = fn;
    };
    NovoCKEditorElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
        if (this.instance) {
            CKEDITOR.instances[this.instance.name].setReadOnly(disabled);
        }
    };
    NovoCKEditorElement.prototype.insertText = function (text) {
        var trimmedText = text.trim();
        this.instance.insertText(trimmedText);
    };
    NovoCKEditorElement.ɵfac = function NovoCKEditorElement_Factory(t) { return new (t || NovoCKEditorElement)(ɵɵdirectiveInject(NgZone)); };
    NovoCKEditorElement.ɵcmp = ɵɵdefineComponent({ type: NovoCKEditorElement, selectors: [["novo-editor"]], viewQuery: function NovoCKEditorElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$o, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.host = _t.first);
        } }, inputs: { config: "config", debounce: "debounce", name: "name", minimal: "minimal", startupFocus: "startupFocus", fileBrowserImageUploadUrl: "fileBrowserImageUploadUrl", disabled: "disabled", value: "value" }, outputs: { change: "change", ready: "ready", blur: "blur", focus: "focus", paste: "paste", loaded: "loaded" }, features: [ɵɵProvidersFeature([CKEDITOR_CONTROL_VALUE_ACCESSOR])], decls: 2, vars: 2, consts: [[3, "name", "id"], ["host", ""]], template: function NovoCKEditorElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "textarea", 0, 1);
        } if (rf & 2) {
            ɵɵproperty("name", ctx.name)("id", ctx.name);
        } }, encapsulation: 2 });
    return NovoCKEditorElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCKEditorElement, [{
        type: Component,
        args: [{
                selector: 'novo-editor',
                providers: [CKEDITOR_CONTROL_VALUE_ACCESSOR],
                template: '<textarea [name]="name" [id]="name" #host></textarea>',
            }]
    }], function () { return [{ type: NgZone }]; }, { config: [{
            type: Input
        }], debounce: [{
            type: Input
        }], name: [{
            type: Input
        }], minimal: [{
            type: Input
        }], startupFocus: [{
            type: Input
        }], fileBrowserImageUploadUrl: [{
            type: Input
        }], disabled: [{
            type: Input
        }], change: [{
            type: Output
        }], ready: [{
            type: Output
        }], blur: [{
            type: Output
        }], focus: [{
            type: Output
        }], paste: [{
            type: Output
        }], loaded: [{
            type: Output
        }], host: [{
            type: ViewChild,
            args: ['host']
        }], value: [{
            type: Input
        }] }); })();

// NG2
var NovoNovoCKEditorModule = /** @class */ (function () {
    function NovoNovoCKEditorModule() {
    }
    NovoNovoCKEditorModule.ɵmod = ɵɵdefineNgModule({ type: NovoNovoCKEditorModule });
    NovoNovoCKEditorModule.ɵinj = ɵɵdefineInjector({ factory: function NovoNovoCKEditorModule_Factory(t) { return new (t || NovoNovoCKEditorModule)(); }, imports: [[CommonModule, FormsModule]] });
    return NovoNovoCKEditorModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoNovoCKEditorModule, { declarations: [NovoCKEditorElement], imports: [CommonModule, FormsModule], exports: [NovoCKEditorElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoNovoCKEditorModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule],
                declarations: [NovoCKEditorElement],
                exports: [NovoCKEditorElement],
            }]
    }], null, null); })();

var NovoTemplate = /** @class */ (function () {
    function NovoTemplate(template) {
        this.template = template;
    }
    NovoTemplate.prototype.getType = function () {
        return this.name;
    };
    NovoTemplate.ɵfac = function NovoTemplate_Factory(t) { return new (t || NovoTemplate)(ɵɵdirectiveInject(TemplateRef)); };
    NovoTemplate.ɵdir = ɵɵdefineDirective({ type: NovoTemplate, selectors: [["", "novoTemplate", ""]], inputs: { type: "type", name: ["novoTemplate", "name"] } });
    return NovoTemplate;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTemplate, [{
        type: Directive,
        args: [{
                selector: '[novoTemplate]',
            }]
    }], function () { return [{ type: TemplateRef }]; }, { type: [{
            type: Input
        }], name: [{
            type: Input,
            args: ['novoTemplate']
        }] }); })();

var NovoCommonModule = /** @class */ (function () {
    function NovoCommonModule() {
    }
    NovoCommonModule.ɵmod = ɵɵdefineNgModule({ type: NovoCommonModule });
    NovoCommonModule.ɵinj = ɵɵdefineInjector({ factory: function NovoCommonModule_Factory(t) { return new (t || NovoCommonModule)(); }, imports: [[CommonModule]] });
    return NovoCommonModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoCommonModule, { declarations: [NovoTemplate], imports: [CommonModule], exports: [NovoTemplate] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCommonModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                exports: [NovoTemplate],
                declarations: [NovoTemplate],
            }]
    }], null, null); })();

var NovoDataTableFilterUtils = /** @class */ (function () {
    function NovoDataTableFilterUtils() {
    }
    NovoDataTableFilterUtils.constructFilter = function (filter, type, multiSelect) {
        var actualFilter = filter;
        if (filter) {
            if (type && type === 'date') {
                if (filter.startDate && filter.endDate) {
                    actualFilter = {
                        min: startOfDay(filter.startDate.date),
                        max: startOfDay(addDays(startOfDay(filter.endDate.date), 1)),
                    };
                }
                else {
                    actualFilter = {
                        min: filter.min ? addDays(startOfToday(), filter.min) : startOfToday(),
                        max: filter.max ? addDays(endOfToday(), filter.max) : endOfToday(),
                    };
                }
            }
            if (multiSelect && Array.isArray(filter)) {
                actualFilter = filter.map(function (filterItem) {
                    if (filterItem && filterItem.hasOwnProperty('value')) {
                        return filterItem.value;
                    }
                    return filterItem;
                });
            }
            else if (actualFilter && actualFilter.hasOwnProperty('value')) {
                actualFilter = filter.value;
            }
        }
        return actualFilter;
    };
    return NovoDataTableFilterUtils;
}());

var DataTableState = /** @class */ (function () {
    function DataTableState() {
        this.selectionSource = new Subject();
        this.paginationSource = new Subject();
        this.sortFilterSource = new Subject();
        this.resetSource = new Subject();
        this.expandSource = new Subject();
        this.dataLoaded = new Subject();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.expandedRows = new Set();
        this.isForceRefresh = false;
        this.updates = new EventEmitter();
    }
    Object.defineProperty(DataTableState.prototype, "userFiltered", {
        get: function () {
            return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableState.prototype, "userFilteredInternal", {
        get: function () {
            return !!(this.filter || this.sort || this.globalSearch);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableState.prototype, "selected", {
        get: function () {
            return Array.from(this.selectedRows.values());
        },
        enumerable: true,
        configurable: true
    });
    DataTableState.prototype.reset = function (fireUpdate, persistUserFilters) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    DataTableState.prototype.clearSort = function (fireUpdate) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        this.sort = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    DataTableState.prototype.clearFilter = function (fireUpdate) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        this.filter = undefined;
        this.globalSearch = undefined;
        this.page = 0;
        this.selectedRows.clear();
        this.resetSource.next();
        this.onSortFilterChange();
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    DataTableState.prototype.onSelectionChange = function () {
        this.selectionSource.next();
    };
    DataTableState.prototype.onExpandChange = function (targetId) {
        this.expandSource.next(targetId);
    };
    DataTableState.prototype.onPaginationChange = function (isPageSizeChange, pageSize) {
        this.paginationSource.next({ isPageSizeChange: isPageSizeChange, pageSize: pageSize });
    };
    DataTableState.prototype.onSortFilterChange = function () {
        this.sortFilterSource.next({
            sort: this.sort,
            filter: this.filter,
            globalSearch: this.globalSearch,
        });
    };
    DataTableState.prototype.setInitialSortFilter = function (preferences) {
        if (preferences) {
            if (preferences.sort) {
                this.sort = preferences.sort;
            }
            if (preferences.filter) {
                var filters = Helpers.convertToArray(preferences.filter);
                filters.forEach(function (filter) {
                    filter.value =
                        filter.selectedOption && filter.type
                            ? NovoDataTableFilterUtils.constructFilter(filter.selectedOption, filter.type)
                            : filter.value;
                });
                this.filter = filters;
            }
        }
    };
    DataTableState.ɵfac = function DataTableState_Factory(t) { return new (t || DataTableState)(); };
    DataTableState.ɵprov = ɵɵdefineInjectable({ token: DataTableState, factory: DataTableState.ɵfac });
    return DataTableState;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DataTableState, [{
        type: Injectable
    }], null, null); })();

// NG2
var _c0$p = [[["button"]], "*"];
var _c1$9 = ["button", "*"];
var _c2$3 = ["*"];
var NovoDropdownElement = /** @class */ (function () {
    function NovoDropdownElement(element, ref) {
        this.element = element;
        this.ref = ref;
        this.parentScrollAction = 'close';
        this.side = 'default';
        this.scrollStrategy = 'reposition';
        this.width = -1; // Defaults to dynamic width (no hardcoded width value and no host width lookup)
        this.appendToBody = false; // Deprecated
        this.toggled = new EventEmitter();
        this.activeIndex = -1;
        this.filterTerm = '';
        this.clickHandler = this.togglePanel.bind(this);
        this.closeHandler = this.closePanel.bind(this);
    }
    NovoDropdownElement.prototype.ngOnInit = function () {
        if (this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        // Add a click handler to the button to toggle the menu
        var button = this.element.nativeElement.querySelector('button');
        button.addEventListener('click', this.clickHandler);
        if (this.parentScrollSelector) {
            this.parentScrollElement = Helpers.findAncestor(this.element.nativeElement, this.parentScrollSelector);
        }
    };
    NovoDropdownElement.prototype.ngOnDestroy = function () {
        // Remove listener
        var button = this.element.nativeElement.querySelector('button');
        if (button) {
            button.removeEventListener('click', this.clickHandler);
        }
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
    };
    Object.defineProperty(NovoDropdownElement.prototype, "items", {
        set: function (items) {
            this._items = items;
            this.activeIndex = -1;
            // Get the innerText of all the items to allow for searching
            this._textItems = items.map(function (item) {
                return item.element.nativeElement.innerText;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDropdownElement.prototype, "panelOpen", {
        /** BEGIN: Convenient Panel Methods. */
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    NovoDropdownElement.prototype.openPanel = function () {
        this.overlay.openPanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.addEventListener('scroll', this.closeHandler);
        }
        this.toggled.emit(true);
    };
    NovoDropdownElement.prototype.closePanel = function () {
        this.overlay.closePanel();
        if (this.parentScrollElement && this.parentScrollAction === 'close') {
            this.parentScrollElement.removeEventListener('scroll', this.closeHandler);
        }
        // Clear active index
        if (this.activeIndex !== -1) {
            this._items.toArray()[this.activeIndex].active = false;
        }
        this.activeIndex = -1;
        this.ref.markForCheck();
        this.toggled.emit(false);
    };
    NovoDropdownElement.prototype.togglePanel = function () {
        this.panelOpen ? this.closePanel() : this.openPanel();
    };
    /** END: Convenient Panel Methods. */
    NovoDropdownElement.prototype.onKeyDown = function (event) {
        var _this = this;
        if (this.panelOpen && event.keyCode === KeyCodes.ESC) {
            Helpers.swallowEvent(event);
            // active & esc hit -- close
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            // enter -- perform the "click"
            this._items.toArray()[this.activeIndex].onClick(event);
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            Helpers.swallowEvent(event);
            // down - navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex++;
            if (this.activeIndex === this._items.length) {
                this.activeIndex = 0;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex++;
                if (this.activeIndex === this._items.length) {
                    this.activeIndex = 0;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if (event.keyCode === KeyCodes.UP) {
            Helpers.swallowEvent(event);
            // up -- navigate through the list ignoring disabled ones
            if (this.activeIndex !== -1) {
                this._items.toArray()[this.activeIndex].active = false;
            }
            this.activeIndex--;
            if (this.activeIndex < 0) {
                this.activeIndex = this._items.length - 1;
            }
            while (this._items.toArray()[this.activeIndex].disabled) {
                this.activeIndex--;
                if (this.activeIndex < 0) {
                    this.activeIndex = this._items.length - 1;
                }
            }
            this._items.toArray()[this.activeIndex].active = true;
            this.scrollToActive();
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
            (event.keyCode >= 96 && event.keyCode <= 105) ||
            (event.keyCode >= 48 && event.keyCode <= 57) ||
            event.keyCode === KeyCodes.SPACE) {
            Helpers.swallowEvent(event);
            // A-Z, 0-9, space -- filter the list and scroll to active filter
            // filter has hard reset after 2s
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            var char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            var index = this._textItems.findIndex(function (value) {
                return new RegExp("^" + _this.filterTerm.toLowerCase()).test(value.trim().toLowerCase());
            });
            if (index !== -1) {
                if (this.activeIndex !== -1) {
                    this._items.toArray()[this.activeIndex].active = false;
                }
                this.activeIndex = index;
                this._items.toArray()[this.activeIndex].active = true;
                this.scrollToActive();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            Helpers.swallowEvent(event);
            // backspace, delete -- remove partial filters
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    };
    NovoDropdownElement.prototype.onOverlayKeyDown = function (event) {
        if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.ENTER) {
            Helpers.swallowEvent(event);
            this.closePanel();
        }
    };
    NovoDropdownElement.prototype.scrollToActive = function () {
        var container = this.overlay.overlayRef.overlayElement.querySelector('.dropdown-container');
        var item = this._items.toArray()[this.activeIndex];
        if (container && item) {
            container.scrollTop = item.element.nativeElement.offsetTop;
        }
    };
    NovoDropdownElement.ɵfac = function NovoDropdownElement_Factory(t) { return new (t || NovoDropdownElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoDropdownElement.ɵcmp = ɵɵdefineComponent({ type: NovoDropdownElement, selectors: [["novo-dropdown"]], viewQuery: function NovoDropdownElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoOverlayTemplateComponent, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
        } }, hostBindings: function NovoDropdownElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("keydown", function NovoDropdownElement_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
        } }, inputs: { parentScrollSelector: "parentScrollSelector", parentScrollAction: "parentScrollAction", containerClass: "containerClass", side: "side", scrollStrategy: "scrollStrategy", height: "height", width: "width", appendToBody: "appendToBody" }, outputs: { toggled: "toggled" }, ngContentSelectors: _c1$9, decls: 4, vars: 11, consts: [[3, "parent", "width", "position", "scrollStrategy"], [3, "keydown"]], template: function NovoDropdownElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$p);
            ɵɵprojection(0, 0, ["#trigger", ""]);
            ɵɵelementStart(1, "novo-overlay-template", 0);
            ɵɵelementStart(2, "div", 1);
            ɵɵlistener("keydown", function NovoDropdownElement_Template_div_keydown_2_listener($event) { return ctx.onOverlayKeyDown($event); });
            ɵɵprojection(3, 1);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("parent", ctx.element)("width", ctx.width)("position", ctx.side)("scrollStrategy", ctx.scrollStrategy);
            ɵɵadvance(1);
            ɵɵclassMapInterpolate1("dropdown-container ", ctx.containerClass, "");
            ɵɵstyleProp("height", ctx.height, "px");
            ɵɵclassProp("has-height", !!ctx.height);
        } }, directives: [NovoOverlayTemplateComponent], encapsulation: 2 });
    return NovoDropdownElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownElement, [{
        type: Component,
        args: [{
                selector: 'novo-dropdown',
                template: "\n    <ng-content select=\"button\" #trigger></ng-content>\n    <novo-overlay-template [parent]=\"element\" [width]=\"width\" [position]=\"side\" [scrollStrategy]=\"scrollStrategy\">\n      <div\n        class=\"dropdown-container {{ containerClass }}\"\n        [style.height.px]=\"height\"\n        [class.has-height]=\"!!height\"\n        (keydown)=\"onOverlayKeyDown($event)\"\n      >\n        <ng-content></ng-content>\n      </div>\n    </novo-overlay-template>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { parentScrollSelector: [{
            type: Input
        }], parentScrollAction: [{
            type: Input
        }], containerClass: [{
            type: Input
        }], side: [{
            type: Input
        }], scrollStrategy: [{
            type: Input
        }], height: [{
            type: Input
        }], width: [{
            type: Input
        }], appendToBody: [{
            type: Input
        }], toggled: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
var NovoItemElement = /** @class */ (function () {
    function NovoItemElement(dropdown, element) {
        this.dropdown = dropdown;
        this.element = element;
        this.keepOpen = false;
        this.action = new EventEmitter();
        this.active = false;
    }
    NovoItemElement.prototype.onClick = function (event) {
        // Poor man's disable
        if (!this.disabled) {
            // Close if keepOpen is false
            if (!this.keepOpen) {
                this.dropdown.closePanel();
            }
            // Emit the action
            this.action.emit({ originalEvent: event });
        }
    };
    NovoItemElement.ɵfac = function NovoItemElement_Factory(t) { return new (t || NovoItemElement)(ɵɵdirectiveInject(NovoDropdownElement), ɵɵdirectiveInject(ElementRef)); };
    NovoItemElement.ɵcmp = ɵɵdefineComponent({ type: NovoItemElement, selectors: [["item"]], hostVars: 4, hostBindings: function NovoItemElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoItemElement_click_HostBindingHandler($event) { return ctx.onClick($event); });
        } if (rf & 2) {
            ɵɵclassProp("disabled", ctx.disabled)("active", ctx.active);
        } }, inputs: { disabled: "disabled", keepOpen: "keepOpen" }, outputs: { action: "action" }, ngContentSelectors: _c2$3, decls: 1, vars: 0, template: function NovoItemElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoItemElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoItemElement, [{
        type: Component,
        args: [{
                selector: 'item',
                template: '<ng-content></ng-content>',
                host: {
                    '[class.disabled]': 'disabled',
                    '[class.active]': 'active',
                },
            }]
    }], function () { return [{ type: NovoDropdownElement }, { type: ElementRef }]; }, { disabled: [{
            type: Input
        }], keepOpen: [{
            type: Input
        }], action: [{
            type: Output
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
var NovoDropdownListElement = /** @class */ (function () {
    function NovoDropdownListElement(dropdown) {
        this.dropdown = dropdown;
    }
    NovoDropdownListElement.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.dropdown.items = this.items;
        this.items.changes.subscribe(function () {
            _this.dropdown.items = _this.items;
        });
    };
    NovoDropdownListElement.ɵfac = function NovoDropdownListElement_Factory(t) { return new (t || NovoDropdownListElement)(ɵɵdirectiveInject(NovoDropdownElement)); };
    NovoDropdownListElement.ɵcmp = ɵɵdefineComponent({ type: NovoDropdownListElement, selectors: [["list"]], contentQueries: function NovoDropdownListElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoItemElement, false);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
        } }, ngContentSelectors: _c2$3, decls: 1, vars: 0, template: function NovoDropdownListElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoDropdownListElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownListElement, [{
        type: Component,
        args: [{
                selector: 'list',
                template: '<ng-content></ng-content>',
            }]
    }], function () { return [{ type: NovoDropdownElement }]; }, { items: [{
            type: ContentChildren,
            args: [NovoItemElement]
        }] }); })();
var NovoDropDownItemHeaderElement = /** @class */ (function () {
    function NovoDropDownItemHeaderElement() {
    }
    NovoDropDownItemHeaderElement.ɵfac = function NovoDropDownItemHeaderElement_Factory(t) { return new (t || NovoDropDownItemHeaderElement)(); };
    NovoDropDownItemHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoDropDownItemHeaderElement, selectors: [["dropdown-item-header"]], ngContentSelectors: _c2$3, decls: 1, vars: 0, template: function NovoDropDownItemHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoDropDownItemHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropDownItemHeaderElement, [{
        type: Component,
        args: [{
                selector: 'dropdown-item-header',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

function NovoDataTableClearButton_item_4_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 5);
    ɵɵlistener("click", function NovoDataTableClearButton_item_4_Template_item_click_0_listener() { ɵɵrestoreView(_r4); var ctx_r3 = ɵɵnextContext(); return ctx_r3.clearSort(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.labels.clearSort);
} }
function NovoDataTableClearButton_item_5_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 6);
    ɵɵlistener("click", function NovoDataTableClearButton_item_5_Template_item_click_0_listener() { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(); return ctx_r5.clearFilter(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.labels.clearFilter);
} }
function NovoDataTableClearButton_item_6_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 7);
    ɵɵlistener("click", function NovoDataTableClearButton_item_6_Template_item_click_0_listener() { ɵɵrestoreView(_r8); var ctx_r7 = ɵɵnextContext(); return ctx_r7.clearAll(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.clearAllNormalCase);
} }
var NovoDataTableClearButton = /** @class */ (function () {
    function NovoDataTableClearButton(state, ref, labels) {
        this.state = state;
        this.ref = ref;
        this.labels = labels;
        this.sortClear = new EventEmitter();
        this.filterClear = new EventEmitter();
        this.allClear = new EventEmitter();
    }
    NovoDataTableClearButton.prototype.clearSort = function () {
        this.state.clearSort();
        this.sortClear.emit(true);
    };
    NovoDataTableClearButton.prototype.clearFilter = function () {
        this.state.clearFilter();
        this.filterClear.emit(true);
    };
    NovoDataTableClearButton.prototype.clearAll = function () {
        this.state.reset();
        this.allClear.emit(true);
        this.sortClear.emit(true);
        this.filterClear.emit(true);
    };
    NovoDataTableClearButton.ɵfac = function NovoDataTableClearButton_Factory(t) { return new (t || NovoDataTableClearButton)(ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService)); };
    NovoDataTableClearButton.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableClearButton, selectors: [["novo-data-table-clear-button"]], outputs: { sortClear: "sortClear", filterClear: "filterClear", allClear: "allClear" }, decls: 7, vars: 4, consts: [["side", "right", "data-automation-id", "novo-data-table-clear-dropdown", 1, "novo-data-table-clear-button"], ["type", "button", "theme", "primary", "color", "negative", "icon", "collapse", "data-automation-id", "novo-data-table-clear-dropdown-btn"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-sort", 3, "click", 4, "ngIf"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-filter", 3, "click", 4, "ngIf"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-all", 3, "click", 4, "ngIf"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-sort", 3, "click"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-filter", 3, "click"], ["data-automation-id", "novo-data-table-clear-dropdown-clear-all", 3, "click"]], template: function NovoDataTableClearButton_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-dropdown", 0);
            ɵɵelementStart(1, "button", 1);
            ɵɵtext(2);
            ɵɵelementEnd();
            ɵɵelementStart(3, "list");
            ɵɵtemplate(4, NovoDataTableClearButton_item_4_Template, 2, 1, "item", 2);
            ɵɵtemplate(5, NovoDataTableClearButton_item_5_Template, 2, 1, "item", 3);
            ɵɵtemplate(6, NovoDataTableClearButton_item_6_Template, 2, 1, "item", 4);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.labels.clear);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.state.sort);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.state.filter);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.state.sort && ctx.state.filter);
        } }, directives: [NovoDropdownElement, NovoButtonElement, NovoDropdownListElement, NgIf, NovoItemElement], encapsulation: 2, changeDetection: 0 });
    return NovoDataTableClearButton;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableClearButton, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-clear-button',
                template: "\n    <novo-dropdown side=\"right\" class=\"novo-data-table-clear-button\" data-automation-id=\"novo-data-table-clear-dropdown\">\n      <button type=\"button\" theme=\"primary\" color=\"negative\" icon=\"collapse\" data-automation-id=\"novo-data-table-clear-dropdown-btn\">{{ labels.clear }}</button>\n      <list>\n          <item *ngIf=\"state.sort\" (click)=\"clearSort()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-sort\">{{ labels.clearSort }}</item>\n          <item *ngIf=\"state.filter\" (click)=\"clearFilter()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-filter\">{{ labels.clearFilter }}</item>\n          <item *ngIf=\"state.sort && state.filter\" (click)=\"clearAll()\" data-automation-id=\"novo-data-table-clear-dropdown-clear-all\">{{ labels.clearAllNormalCase }}</item>\n      </list>\n    </novo-dropdown>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: DataTableState }, { type: ChangeDetectorRef }, { type: NovoLabelService }]; }, { sortClear: [{
            type: Output
        }], filterClear: [{
            type: Output
        }], allClear: [{
            type: Output
        }] }); })();

var DataTableSource = /** @class */ (function (_super) {
    __extends(DataTableSource, _super);
    function DataTableSource(tableService, state, ref) {
        var _this = _super.call(this) || this;
        _this.tableService = tableService;
        _this.state = state;
        _this.ref = ref;
        _this.total = 0;
        _this.currentTotal = 0;
        _this.current = 0;
        _this.loading = false;
        _this.pristine = true;
        _this.totalSet = false;
        return _this;
    }
    Object.defineProperty(DataTableSource.prototype, "totallyEmpty", {
        get: function () {
            return this.total === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableSource.prototype, "currentlyEmpty", {
        get: function () {
            return this.current === 0;
        },
        enumerable: true,
        configurable: true
    });
    DataTableSource.prototype.connect = function () {
        var _this = this;
        var displayDataChanges = [this.state.updates];
        return merge.apply(void 0, __spread(displayDataChanges)).pipe(startWith(null), switchMap(function () {
            _this.pristine = false;
            _this.loading = true;
            return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
        }), map(function (data) {
            if (!_this.totalSet || _this.state.isForceRefresh) {
                _this.total = data.total;
                _this.totalSet = true;
                _this.state.isForceRefresh = false;
            }
            else if (data.total > _this.total) {
                _this.total = data.total;
            }
            _this.currentTotal = data.total;
            _this.current = data.results.length;
            _this.data = data.results;
            // Clear selection
            _this.state.selectedRows.clear();
            _this.state.onSelectionChange();
            // Mark changes
            setTimeout(function () {
                _this.ref.markForCheck();
                setTimeout(function () {
                    _this.loading = false;
                    _this.state.dataLoaded.next();
                    _this.ref.markForCheck();
                });
            });
            return data.results;
        }), catchError(function (err, caught) {
            console.error(err, caught); // tslint: disable-line
            _this.loading = false;
            return of(null);
        }));
    };
    DataTableSource.prototype.disconnect = function () { };
    return DataTableSource;
}(DataSource));

var StaticDataTableService = /** @class */ (function () {
    function StaticDataTableService(currentData) {
        if (currentData === void 0) { currentData = []; }
        this.currentData = currentData;
        this.originalData = __spread(currentData);
    }
    StaticDataTableService.prototype.getTableResults = function (sort, filter, page, pageSize, globalSearch, outsideFilter) {
        if (page === void 0) { page = 0; }
        this.currentData = __spread(this.originalData);
        var total = this.originalData.length;
        if (this.currentData.length !== 0) {
            if (globalSearch) {
                this.currentData = this.currentData.filter(function (item) {
                    return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); });
                });
                total = this.currentData.length;
            }
            if (filter) {
                this.currentData = this.filterData(this.currentData, filter);
                total = this.currentData.length;
            }
            if (sort) {
                this.currentData = this.currentData.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
                total = this.currentData.length;
            }
            if (!sort && !filter && !globalSearch && !outsideFilter) {
                this.currentData = __spread(this.originalData);
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                this.currentData = this.currentData.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: this.currentData, total: total });
    };
    StaticDataTableService.prototype.filterData = function (currentData, filter) {
        var filters = Helpers.convertToArray(filter);
        filters.forEach(function (aFilter) {
            if (Array.isArray(aFilter.value)) {
                var values = Helpers.convertToArray(aFilter.value).map(Helpers.escapeString);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, values));
            }
            else {
                var value = Helpers.escapeString(aFilter.value);
                currentData = currentData.filter(Helpers.filterByField(aFilter.id, value));
            }
        });
        return currentData;
    };
    return StaticDataTableService;
}());

var _c0$q = ["novoDataTableContainer"];
function NovoDataTable_header_0_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_header_0_novo_search_2_Template(rf, ctx) { if (rf & 1) {
    var _r31 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-search", 31);
    ɵɵlistener("searchChanged", function NovoDataTable_header_0_novo_search_2_Template_novo_search_searchChanged_0_listener($event) { ɵɵrestoreView(_r31); var ctx_r30 = ɵɵnextContext(2); return ctx_r30.onSearchChange($event); })("ngModelChange", function NovoDataTable_header_0_novo_search_2_Template_novo_search_ngModelChange_0_listener($event) { ɵɵrestoreView(_r31); var ctx_r32 = ɵɵnextContext(2); return ctx_r32.state.globalSearch = $event; });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r27 = ɵɵnextContext(2);
    ɵɵproperty("ngModel", ctx_r27.state.globalSearch)("placeholder", ctx_r27.searchOptions == null ? null : ctx_r27.searchOptions.placeholder)("hint", ctx_r27.searchOptions == null ? null : ctx_r27.searchOptions.tooltip);
} }
function NovoDataTable_header_0_novo_data_table_pagination_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-pagination", 32);
} if (rf & 2) {
    var ctx_r28 = ɵɵnextContext(2);
    ɵɵproperty("theme", ctx_r28.paginationOptions.theme)("length", ctx_r28.dataSource == null ? null : ctx_r28.dataSource.currentTotal)("page", ctx_r28.paginationOptions.page)("pageSize", ctx_r28.paginationOptions.pageSize)("pageSizeOptions", ctx_r28.paginationOptions.pageSizeOptions)("dataFeatureId", ctx_r28.paginatorDataFeatureId);
} }
function NovoDataTable_header_0_div_4_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_header_0_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵtemplate(1, NovoDataTable_header_0_div_4_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r29 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r29.templates["customActions"]);
} }
function NovoDataTable_header_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵtemplate(1, NovoDataTable_header_0_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵtemplate(2, NovoDataTable_header_0_novo_search_2_Template, 1, 3, "novo-search", 28);
    ɵɵtemplate(3, NovoDataTable_header_0_novo_data_table_pagination_3_Template, 1, 6, "novo-data-table-pagination", 29);
    ɵɵtemplate(4, NovoDataTable_header_0_div_4_Template, 2, 1, "div", 30);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("empty", ctx_r0.hideGlobalSearch && !ctx_r0.paginationOptions && !ctx_r0.templates["customActions"]);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r0.templates["customHeader"]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r0.hideGlobalSearch);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.paginationOptions);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.templates["customActions"]);
} }
function NovoDataTable_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵelement(1, "novo-loading");
    ɵɵelementEnd();
} }
function NovoDataTable_div_3_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 35);
    ɵɵtemplate(1, NovoDataTable_div_3_ng_container_1_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r2.templates["customFilter"]);
} }
function NovoDataTable_cdk_table_6_novo_data_table_checkbox_header_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-checkbox-header-cell");
} }
function NovoDataTable_cdk_table_6_novo_data_table_checkbox_cell_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-checkbox-cell", 44);
} if (rf & 2) {
    var row_r42 = ctx.$implicit;
    ɵɵproperty("row", row_r42);
} }
function NovoDataTable_cdk_table_6_novo_data_table_expand_header_cell_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-expand-header-cell");
} }
function NovoDataTable_cdk_table_6_novo_data_table_expand_cell_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-expand-cell", 44);
} if (rf & 2) {
    var row_r44 = ctx.$implicit;
    ɵɵproperty("row", row_r44);
} }
function NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-header-cell", 48);
} if (rf & 2) {
    var column_r46 = ɵɵnextContext().$implicit;
    var ctx_r47 = ɵɵnextContext(2);
    ɵɵclassProp("empty", (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.label))("button-header-cell", (column_r46 == null ? null : column_r46.type) === "expand" || (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options))("dropdown-header-cell", (column_r46 == null ? null : column_r46.type) === "action" && (column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options))("fixed-header", ctx_r47.fixedHeader);
    ɵɵproperty("column", column_r46)("filterTemplate", ctx_r47.templates["column-filter-" + column_r46.id])("novo-data-table-cell-config", column_r46)("resized", ctx_r47.resized)("defaultSort", ctx_r47.defaultSort)("allowMultipleFilters", ctx_r47.allowMultipleFilters);
} }
function NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-cell", 49);
} if (rf & 2) {
    var row_r50 = ctx.$implicit;
    var column_r46 = ɵɵnextContext().$implicit;
    var ctx_r48 = ɵɵnextContext(2);
    ɵɵclassProp("empty", (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.label))("button-cell", (column_r46 == null ? null : column_r46.type) === "expand" || (column_r46 == null ? null : column_r46.type) === "action" && !(column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options))("dropdown-cell", (column_r46 == null ? null : column_r46.type) === "action" && (column_r46 == null ? null : column_r46.action == null ? null : column_r46.action.options));
    ɵɵproperty("resized", ctx_r48.resized)("column", column_r46)("row", row_r50)("template", ctx_r48.columnToTemplate[column_r46.id]);
} }
function NovoDataTable_cdk_table_6_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0, 45);
    ɵɵtemplate(1, NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_header_cell_1_Template, 1, 14, "novo-data-table-header-cell", 46);
    ɵɵtemplate(2, NovoDataTable_cdk_table_6_ng_container_7_novo_data_table_cell_2_Template, 1, 10, "novo-data-table-cell", 47);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var column_r46 = ctx.$implicit;
    ɵɵproperty("cdkColumnDef", column_r46.id);
} }
function NovoDataTable_cdk_table_6_novo_data_table_header_row_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-header-row", 50);
} if (rf & 2) {
    var ctx_r40 = ɵɵnextContext(2);
    ɵɵproperty("fixedHeader", ctx_r40.fixedHeader);
} }
var _c1$a = function (a0) { return { active: a0 }; };
function NovoDataTable_cdk_table_6_novo_data_table_row_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-data-table-row", 51);
} if (rf & 2) {
    var row_r52 = ctx.$implicit;
    var ctx_r41 = ɵɵnextContext(2);
    var _r24 = ɵɵreference(27);
    ɵɵproperty("ngClass", ɵɵpureFunction1(5, _c1$a, row_r52[ctx_r41.rowIdentifier] == ctx_r41.activeRowIdentifier))("novoDataTableExpand", _r24)("row", row_r52)("id", ctx_r41.name + "-" + row_r52[ctx_r41.rowIdentifier])("dataAutomationId", row_r52[ctx_r41.rowIdentifier]);
} }
function NovoDataTable_cdk_table_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "cdk-table", 36);
    ɵɵelementContainerStart(1, 37);
    ɵɵtemplate(2, NovoDataTable_cdk_table_6_novo_data_table_checkbox_header_cell_2_Template, 1, 0, "novo-data-table-checkbox-header-cell", 38);
    ɵɵtemplate(3, NovoDataTable_cdk_table_6_novo_data_table_checkbox_cell_3_Template, 1, 1, "novo-data-table-checkbox-cell", 39);
    ɵɵelementContainerEnd();
    ɵɵelementContainerStart(4, 40);
    ɵɵtemplate(5, NovoDataTable_cdk_table_6_novo_data_table_expand_header_cell_5_Template, 1, 0, "novo-data-table-expand-header-cell", 38);
    ɵɵtemplate(6, NovoDataTable_cdk_table_6_novo_data_table_expand_cell_6_Template, 1, 1, "novo-data-table-expand-cell", 39);
    ɵɵelementContainerEnd();
    ɵɵtemplate(7, NovoDataTable_cdk_table_6_ng_container_7_Template, 3, 1, "ng-container", 41);
    ɵɵtemplate(8, NovoDataTable_cdk_table_6_novo_data_table_header_row_8_Template, 1, 1, "novo-data-table-header-row", 42);
    ɵɵtemplate(9, NovoDataTable_cdk_table_6_novo_data_table_row_9_Template, 1, 7, "novo-data-table-row", 43);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("expandable", ctx_r4.expandable)("empty", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.currentlyEmpty) && ctx_r4.state.userFiltered);
    ɵɵproperty("dataSource", ctx_r4.dataSource)("trackBy", ctx_r4.trackByFn)("hidden", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.totallyEmpty) && !ctx_r4.state.userFiltered);
    ɵɵadvance(7);
    ɵɵproperty("ngForOf", ctx_r4.columns)("ngForTrackBy", ctx_r4.trackColumnsBy);
    ɵɵadvance(1);
    ɵɵproperty("cdkHeaderRowDef", ctx_r4.displayedColumns);
    ɵɵadvance(1);
    ɵɵproperty("cdkRowDefColumns", ctx_r4.displayedColumns);
} }
function NovoDataTable_div_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
var _c2$4 = function (a0, a1) { return { $implicit: a0, data: a1 }; };
function NovoDataTable_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 52);
    ɵɵtemplate(1, NovoDataTable_div_7_ng_container_1_Template, 1, 0, "ng-container", 53);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r5.templates["footer"])("ngTemplateOutletContext", ɵɵpureFunction2(2, _c2$4, ctx_r5.columns, ctx_r5.dataSource.data));
} }
function NovoDataTable_div_8_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 54);
    ɵɵelementStart(1, "div", 55);
    ɵɵtemplate(2, NovoDataTable_div_8_ng_container_2_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext();
    ɵɵstyleProp("left", ctx_r6.scrollLeft, "px");
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r6.templates["noResultsMessage"] || ctx_r6.templates["defaultNoResultsMessage"]);
} }
function NovoDataTable_div_9_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoDataTable_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 56);
    ɵɵelementStart(1, "div", 55);
    ɵɵtemplate(2, NovoDataTable_div_9_ng_container_2_Template, 1, 0, "ng-container", 27);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r7.templates["emptyMessage"] || ctx_r7.templates["defaultNoResultsMessage"]);
} }
function NovoDataTable_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r56 = ctx.$implicit;
    var col_r57 = ctx.col;
    ɵɵstyleProp("width", col_r57 == null ? null : col_r57.width, "px")("min-width", col_r57 == null ? null : col_r57.width, "px")("max-width", col_r57 == null ? null : col_r57.width, "px");
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 7, row_r56[col_r57.id], col_r57));
} }
function NovoDataTable_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableDateRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r58 = ctx.$implicit;
    var col_r59 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r58[col_r59.id], col_r59), col_r59));
} }
function NovoDataTable_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableDateTimeRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r60 = ctx.$implicit;
    var col_r61 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r60[col_r61.id], col_r61), col_r61));
} }
function NovoDataTable_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableTimeRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r62 = ctx.$implicit;
    var col_r63 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r62[col_r63.id], col_r63), col_r63));
} }
function NovoDataTable_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableCurrencyRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r64 = ctx.$implicit;
    var col_r65 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r64[col_r65.id], col_r65), col_r65));
} }
function NovoDataTable_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableBigDecimalRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r66 = ctx.$implicit;
    var col_r67 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r66[col_r67.id], col_r67), col_r67));
} }
function NovoDataTable_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableNumberRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r68 = ctx.$implicit;
    var col_r69 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ɵɵpipeBind2(3, 4, row_r68[col_r69.id], col_r69), col_r69));
} }
function NovoDataTable_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableNumberRenderer");
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r70 = ctx.$implicit;
    var col_r71 = ctx.col;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind3(2, 1, ɵɵpipeBind2(3, 5, row_r70[col_r71.id], col_r71), col_r71, true));
} }
function NovoDataTable_ng_template_18_Template(rf, ctx) { if (rf & 1) {
    var _r75 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 57);
    ɵɵlistener("click", function NovoDataTable_ng_template_18_Template_a_click_0_listener($event) { ɵɵrestoreView(_r75); var col_r73 = ctx.col; var row_r72 = ctx.$implicit; return col_r73.handlers == null ? null : col_r73.handlers.click({ originalEvent: $event, row: row_r72 }); });
    ɵɵtext(1);
    ɵɵpipe(2, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r72 = ctx.$implicit;
    var col_r73 = ctx.col;
    ɵɵstyleProp("width", col_r73 == null ? null : col_r73.width, "px")("min-width", col_r73 == null ? null : col_r73.width, "px")("max-width", col_r73 == null ? null : col_r73.width, "px");
    ɵɵattribute("data-feature-id", col_r73 == null ? null : col_r73.attributes == null ? null : col_r73.attributes.dataFeatureId);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 8, row_r72[col_r73.id], col_r73));
} }
function NovoDataTable_ng_template_19_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "a", 58);
    ɵɵpipe(1, "dataTableInterpolate");
    ɵɵtext(2);
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r76 = ctx.$implicit;
    var col_r77 = ctx.col;
    ɵɵpropertyInterpolate1("href", "tel:", ɵɵpipeBind2(1, 3, row_r76[col_r77.id], col_r77), "", ɵɵsanitizeUrl);
    ɵɵproperty("target", col_r77 == null ? null : col_r77.attributes == null ? null : col_r77.attributes.target);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind2(3, 6, row_r76[col_r77.id], col_r77));
} }
function NovoDataTable_ng_template_20_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "a", 58);
    ɵɵpipe(1, "dataTableInterpolate");
    ɵɵtext(2);
    ɵɵpipe(3, "dataTableInterpolate");
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r78 = ctx.$implicit;
    var col_r79 = ctx.col;
    ɵɵpropertyInterpolate1("href", "mailto:", ɵɵpipeBind2(1, 3, row_r78[col_r79.id], col_r79), "", ɵɵsanitizeUrl);
    ɵɵproperty("target", col_r79 == null ? null : col_r79.attributes == null ? null : col_r79.attributes.target);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ɵɵpipeBind2(3, 6, row_r78[col_r79.id], col_r79));
} }
function NovoDataTable_ng_template_21_Template(rf, ctx) { if (rf & 1) {
    var _r83 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "p", 59);
    ɵɵelementStart(1, "i", 57);
    ɵɵlistener("click", function NovoDataTable_ng_template_21_Template_i_click_1_listener($event) { ɵɵrestoreView(_r83); var col_r81 = ctx.col; var row_r80 = ctx.$implicit; return col_r81.handlers == null ? null : col_r81.handlers.click({ originalEvent: $event, row: row_r80 }); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r80 = ctx.$implicit;
    var col_r81 = ctx.col;
    var ctx_r19 = ɵɵnextContext();
    ɵɵproperty("tooltip", col_r81 == null ? null : col_r81.action == null ? null : col_r81.action.tooltip);
    ɵɵattribute("data-feature-id", col_r81 == null ? null : col_r81.attributes == null ? null : col_r81.attributes.dataFeatureId);
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-", col_r81 == null ? null : col_r81.action == null ? null : col_r81.action.icon, " data-table-icon");
    ɵɵclassProp("disabled", ctx_r19.isDisabled(col_r81, row_r80));
} }
function NovoDataTable_ng_template_22_item_4_Template(rf, ctx) { if (rf & 1) {
    var _r89 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 63);
    ɵɵlistener("action", function NovoDataTable_ng_template_22_item_4_Template_item_action_0_listener($event) { ɵɵrestoreView(_r89); var option_r87 = ctx.$implicit; var row_r84 = ɵɵnextContext().$implicit; return option_r87.handlers.click({ originalEvent: $event == null ? null : $event.originalEvent, row: row_r84 }); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r87 = ctx.$implicit;
    var row_r84 = ɵɵnextContext().$implicit;
    var ctx_r86 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r86.isDisabled(option_r87, row_r84));
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", option_r87.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate(option_r87.label);
} }
function NovoDataTable_ng_template_22_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-dropdown", 60);
    ɵɵelementStart(1, "button", 61);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "list");
    ɵɵtemplate(4, NovoDataTable_ng_template_22_item_4_Template, 3, 3, "item", 62);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var col_r85 = ctx.col;
    ɵɵadvance(1);
    ɵɵproperty("icon", col_r85.action.icon);
    ɵɵadvance(1);
    ɵɵtextInterpolate(col_r85.label);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", col_r85 == null ? null : col_r85.action == null ? null : col_r85.action.options);
} }
function NovoDataTable_ng_template_23_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h4");
    ɵɵelement(1, "i", 64);
    ɵɵtext(2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r21 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r21.labels.noMatchingRecordsMessage, "");
} }
function NovoDataTable_ng_template_24_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h4");
    ɵɵelement(1, "i", 64);
    ɵɵtext(2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r22 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r22.labels.emptyTableMessage, "");
} }
function NovoDataTable_ng_template_25_Template(rf, ctx) { if (rf & 1) {
    ɵɵtext(0, " You did not provide an \"expandedRow\" template! ");
} }
function NovoDataTable_ng_template_26_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
var _c3$2 = function (a0) { return { $implicit: a0 }; };
function NovoDataTable_ng_template_26_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 65);
    ɵɵtemplate(1, NovoDataTable_ng_template_26_ng_container_1_Template, 1, 0, "ng-container", 53);
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r92 = ctx.$implicit;
    var ctx_r25 = ɵɵnextContext();
    ɵɵproperty("@expand", undefined);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r25.templates["expandedRow"])("ngTemplateOutletContext", ɵɵpureFunction1(3, _c3$2, row_r92));
} }
var _c4$1 = function (a0) { return { "novo-data-table-outside-container-fixed": a0 }; };
var _c5$1 = function (a0) { return { "novo-data-table-container-fixed": a0 }; };
var _c6 = ["*"];
var NovoDataTable = /** @class */ (function () {
    function NovoDataTable(labels, ref, state) {
        var _this = this;
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.resized = new EventEmitter();
        this.name = 'novo-data-table';
        this.allowMultipleFilters = false;
        this.rowIdentifier = 'id';
        this.activeRowIdentifier = '';
        // prettier-ignore
        this.trackByFn = function (index, item) { return item.id; };
        this.templates = {};
        this.fixedHeader = false;
        this._hideGlobalSearch = true;
        this.preferencesChanged = new EventEmitter();
        this.loading = true;
        this.columnToTemplate = {};
        this.columnsLoaded = false;
        this.selection = new Set();
        this.scrollLeft = 0;
        this.expandable = false;
        this.initialized = false;
        this.scrollListenerHandler = this.scrollListener.bind(this);
        this.sortFilterSubscription = this.state.sortFilterSource.subscribe(function (event) {
            if (_this.name !== 'novo-data-table') {
                _this.preferencesChanged.emit({ name: _this.name, sort: event.sort, filter: event.filter, globalSearch: event.globalSearch });
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.paginationSubscription = this.state.paginationSource.subscribe(function (event) {
            if (_this.name !== 'novo-data-table') {
                if (event.isPageSizeChange) {
                    _this.preferencesChanged.emit({ name: _this.name, pageSize: event.pageSize });
                }
            }
            else {
                notify('Must have [name] set on data-table to use preferences!');
            }
        });
        this.resetSubscription = this.state.resetSource.subscribe(function () {
            setTimeout(function () {
                _this.ref.detectChanges();
            }, 300);
        });
    }
    Object.defineProperty(NovoDataTable.prototype, "displayedColumns", {
        get: function () {
            return this._disabledColumns;
        },
        set: function (displayedColumns) {
            var _this = this;
            if (this.displayedColumns && this.displayedColumns.length !== 0) {
                if (this.name !== 'novo-data-table') {
                    this.preferencesChanged.emit({
                        name: this.name,
                        displayedColumns: displayedColumns,
                    });
                }
                else {
                    notify('Must have [name] set on data-table to use preferences!');
                }
            }
            this._disabledColumns = displayedColumns;
            this.configureLastDisplayedColumn();
            if (this.initialized) {
                setTimeout(function () {
                    _this.scrollListener();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "dataTableService", {
        set: function (service) {
            this.loading = false;
            if (!service) {
                service = new StaticDataTableService([]);
            }
            this.dataSource = new DataTableSource(service, this.state, this.ref);
            this.ref.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "rows", {
        set: function (rows) {
            this.loading = false;
            var service = new StaticDataTableService(rows);
            this.dataSource = new DataTableSource(service, this.state, this.ref);
            this.ref.detectChanges();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "outsideFilter", {
        set: function (outsideFilter) {
            var _this = this;
            // Unsubscribe
            if (this.outsideFilterSubscription) {
                this.outsideFilterSubscription.unsubscribe();
            }
            if (outsideFilter) {
                // Re-subscribe
                this.outsideFilterSubscription = outsideFilter.subscribe(function (filter) {
                    _this.state.outsideFilter = filter;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "refreshSubject", {
        set: function (refreshSubject) {
            var _this = this;
            // Unsubscribe
            if (this.refreshSubscription) {
                this.refreshSubscription.unsubscribe();
            }
            if (refreshSubject) {
                // Re-subscribe
                this.refreshSubscription = refreshSubject.subscribe(function (filter) {
                    _this.state.isForceRefresh = true;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        set: function (columns) {
            this._columns = columns;
            this.configureColumns();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "customFilter", {
        get: function () {
            return this._customFilter;
        },
        set: function (v) {
            this._customFilter = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "hasExandedRows", {
        get: function () {
            return this._hasExandedRows;
        },
        set: function (v) {
            this._hasExandedRows = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "forceShowHeader", {
        get: function () {
            return this._forceShowHeader;
        },
        set: function (v) {
            this._forceShowHeader = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "hideGlobalSearch", {
        get: function () {
            return this._hideGlobalSearch;
        },
        set: function (v) {
            this._hideGlobalSearch = coerceBooleanProperty(v);
            this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "empty", {
        get: function () {
            return this.dataSource && this.dataSource.totallyEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTable.prototype, "loadingClass", {
        get: function () {
            return this.loading || (this.dataSource && this.dataSource.loading);
        },
        enumerable: true,
        configurable: true
    });
    NovoDataTable.prototype.ngOnDestroy = function () {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
        if (this.novoDataTableContainer) {
            this.novoDataTableContainer.nativeElement.removeEventListener('scroll', this.scrollListenerHandler);
        }
        if (this.refreshSubscription) {
            this.refreshSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
        if (this.sortFilterSubscription) {
            this.sortFilterSubscription.unsubscribe();
        }
    };
    NovoDataTable.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.displayedColumns && this.displayedColumns.length) {
            this.expandable = this.displayedColumns.includes('expand');
        }
        // Default templates defined here
        this.defaultTemplates.forEach(function (item) {
            // Only override if it doesn't already exist
            if (!_this.templates[item.getType()]) {
                _this.templates[item.getType()] = item.template;
            }
        });
        // Custom templates passed in
        this.customTemplates.forEach(function (item) {
            // Override anything that is custom and in HTML
            _this.templates[item.getType()] = item.template;
        });
        // Load columns
        this.configureColumns();
        // State
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        // Scrolling inside table
        this.novoDataTableContainer.nativeElement.addEventListener('scroll', this.scrollListenerHandler);
        this.initialized = true;
        this.ref.markForCheck();
    };
    NovoDataTable.prototype.onSearchChange = function (term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    };
    NovoDataTable.prototype.trackColumnsBy = function (index, item) {
        return item.id;
    };
    NovoDataTable.prototype.isDisabled = function (check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledFunc) {
            return check.disabledFunc(row);
        }
        return false;
    };
    NovoDataTable.prototype.isExpanded = function (row) {
        if (!row) {
            return false;
        }
        return this.state.expandedRows.has("" + row[this.rowIdentifier]);
    };
    NovoDataTable.prototype.expandRow = function (row) {
        var expanded = this.isExpanded(row);
        if (expanded) {
            this.state.expandedRows.delete("" + row[this.rowIdentifier]);
        }
        else {
            this.state.expandedRows.add("" + row[this.rowIdentifier]);
        }
        this.state.onExpandChange(row.id);
    };
    NovoDataTable.prototype.expandRows = function (expand) {
        var _this = this;
        (this.dataSource.data || []).forEach(function (row) {
            if (!expand) {
                _this.state.expandedRows.delete("" + row[_this.rowIdentifier]);
            }
            else {
                _this.state.expandedRows.add("" + row[_this.rowIdentifier]);
            }
        });
        this.state.onExpandChange();
    };
    NovoDataTable.prototype.allCurrentRowsExpanded = function () {
        for (var i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isExpanded((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    };
    NovoDataTable.prototype.isSelected = function (row) {
        if (!row) {
            return false;
        }
        return this.state.selectedRows.has("" + row[this.rowIdentifier]);
    };
    NovoDataTable.prototype.selectRow = function (row) {
        var selected = this.isSelected(row);
        if (selected) {
            this.state.selectedRows.delete("" + row[this.rowIdentifier]);
        }
        else {
            this.state.selectedRows.set("" + row[this.rowIdentifier], row);
        }
        this.state.onSelectionChange();
    };
    NovoDataTable.prototype.selectRows = function (selected) {
        var _this = this;
        (this.dataSource.data || []).forEach(function (row) {
            if (!selected) {
                _this.state.selectedRows.delete("" + row[_this.rowIdentifier]);
            }
            else {
                _this.state.selectedRows.set("" + row[_this.rowIdentifier], row);
            }
        });
        this.state.onSelectionChange();
    };
    NovoDataTable.prototype.allCurrentRowsSelected = function () {
        for (var i = 0; i < (this.dataSource.data || []).length; i++) {
            if (!this.isSelected((this.dataSource.data || [])[i])) {
                return false;
            }
        }
        return true;
    };
    NovoDataTable.prototype.configureLastDisplayedColumn = function () {
        var _this = this;
        if (this.columns && this.displayedColumns && 0 !== this.columns.length && 0 !== this.displayedColumns.length) {
            this.columns.forEach(function (column) {
                if (column.initialResizable) {
                    column.resizable = column.initialResizable.resizable;
                    column.width = column.initialResizable.width;
                    column.initialResizable = undefined;
                }
            });
            var resizableColumns_1 = this.displayedColumns.filter(function (name) {
                return (_this.columns.findIndex(function (column) {
                    return column.resizable && column.id === name;
                }) !== -1);
            });
            if (resizableColumns_1 && resizableColumns_1.length > 0) {
                var lastResizableColumn = this.columns.find(function (column) {
                    return column.id === resizableColumns_1[resizableColumns_1.length - 1];
                });
                lastResizableColumn.initialResizable = {
                    resizable: lastResizableColumn.resizable,
                    width: lastResizableColumn.width,
                };
                lastResizableColumn.width = undefined;
                lastResizableColumn.resizable = false;
            }
        }
    };
    NovoDataTable.prototype.configureColumns = function () {
        var _this = this;
        if (this.columns && this.columns.length !== 0 && Object.keys(this.templates).length !== 0) {
            // Figure the column templates
            this.columns.forEach(function (column) {
                // Figure the template
                var templateName;
                if (column.template) {
                    // Pass it in as template
                    templateName = column.template;
                }
                else if (!!_this.templates[column.id]) {
                    // Custom template for the column id
                    templateName = column.id;
                }
                else {
                    // Default to the defaulCellTemplate
                    if (column.type === 'action') {
                        if (column.action && column.action.options) {
                            if (!column.action.icon) {
                                column.action.icon = 'collapse';
                            }
                            templateName = 'dropdownCellTemplate';
                        }
                        else {
                            templateName = 'buttonCellTemplate';
                        }
                    }
                    else {
                        if (column.type === 'link:tel' || column.type === 'link:mailto') {
                            templateName = column.type.split(':')[1] + "CellTemplate";
                        }
                        else {
                            templateName = column.type + "CellTemplate";
                        }
                    }
                }
                _this.columnToTemplate[column.id] = _this.templates[templateName];
            });
            this.configureLastDisplayedColumn();
            this.columnsLoaded = true;
        }
    };
    NovoDataTable.prototype.scrollListener = function () {
        var target = this.novoDataTableContainer.nativeElement;
        var left = target.scrollLeft;
        if (left !== this.scrollLeft) {
            this.scrollLeft = target.scrollLeft;
        }
        this.ref.markForCheck();
    };
    NovoDataTable.ɵfac = function NovoDataTable_Factory(t) { return new (t || NovoDataTable)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DataTableState)); };
    NovoDataTable.ɵcmp = ɵɵdefineComponent({ type: NovoDataTable, selectors: [["novo-data-table"]], contentQueries: function NovoDataTable_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoTemplate, false);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTemplates = _t);
        } }, viewQuery: function NovoDataTable_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$q, true);
            ɵɵviewQuery(NovoTemplate, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.novoDataTableContainer = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.defaultTemplates = _t);
        } }, hostVars: 6, hostBindings: function NovoDataTable_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("global-search-hidden", ctx.globalSearchHiddenClassToggle)("empty", ctx.empty)("loading", ctx.loadingClass);
        } }, inputs: { displayedColumns: "displayedColumns", paginationOptions: "paginationOptions", searchOptions: "searchOptions", defaultSort: "defaultSort", name: "name", allowMultipleFilters: "allowMultipleFilters", rowIdentifier: "rowIdentifier", activeRowIdentifier: "activeRowIdentifier", trackByFn: "trackByFn", templates: "templates", fixedHeader: "fixedHeader", paginatorDataFeatureId: "paginatorDataFeatureId", dataTableService: "dataTableService", rows: "rows", outsideFilter: "outsideFilter", refreshSubject: "refreshSubject", columns: "columns", customFilter: "customFilter", hasExandedRows: "hasExandedRows", forceShowHeader: "forceShowHeader", hideGlobalSearch: "hideGlobalSearch" }, outputs: { resized: "resized", preferencesChanged: "preferencesChanged" }, features: [ɵɵProvidersFeature([DataTableState])], ngContentSelectors: _c6, decls: 29, vars: 17, consts: [[3, "empty", 4, "ngIf"], ["class", "novo-data-table-loading-mask", "data-automation-id", "novo-data-table-loading", 4, "ngIf"], [1, "novo-data-table-outside-container", 3, "ngClass"], ["class", "novo-data-table-custom-filter", 4, "ngIf"], [1, "novo-data-table-container", 3, "ngClass"], ["novoDataTableContainer", ""], ["novoDataTableSortFilter", "", 3, "dataSource", "trackBy", "expandable", "empty", "hidden", 4, "ngIf"], ["class", "novo-data-table-footer", 4, "ngIf"], ["class", "novo-data-table-no-results-container", 3, "left", 4, "ngIf"], ["class", "novo-data-table-empty-container", 4, "ngIf"], ["novoTemplate", "textCellTemplate"], ["novoTemplate", "dateCellTemplate"], ["novoTemplate", "datetimeCellTemplate"], ["novoTemplate", "timeCellTemplate"], ["novoTemplate", "currencyCellTemplate"], ["novoTemplate", "bigdecimalCellTemplate"], ["novoTemplate", "numberCellTemplate"], ["novoTemplate", "percentCellTemplate"], ["novoTemplate", "linkCellTemplate"], ["novoTemplate", "telCellTemplate"], ["novoTemplate", "mailtoCellTemplate"], ["novoTemplate", "buttonCellTemplate"], ["novoTemplate", "dropdownCellTemplate"], ["novoTemplate", "defaultNoResultsMessage"], ["novoTemplate", "defaultEmptyMessage"], ["novoTemplate", "expandedRow"], ["detailRowTemplate", ""], [4, "ngTemplateOutlet"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange", 4, "ngIf"], [3, "theme", "length", "page", "pageSize", "pageSizeOptions", "dataFeatureId", 4, "ngIf"], ["class", "novo-data-table-actions", 4, "ngIf"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange"], [3, "theme", "length", "page", "pageSize", "pageSizeOptions", "dataFeatureId"], [1, "novo-data-table-actions"], ["data-automation-id", "novo-data-table-loading", 1, "novo-data-table-loading-mask"], [1, "novo-data-table-custom-filter"], ["novoDataTableSortFilter", "", 3, "dataSource", "trackBy", "hidden"], ["cdkColumnDef", "selection"], [4, "cdkHeaderCellDef"], [3, "row", 4, "cdkCellDef"], ["cdkColumnDef", "expand"], [3, "cdkColumnDef", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["data-automation-id", "novo-data-table-header-row", 3, "fixedHeader", 4, "cdkHeaderRowDef"], [3, "ngClass", "novoDataTableExpand", "row", "id", "dataAutomationId", 4, "cdkRowDef", "cdkRowDefColumns"], [3, "row"], [3, "cdkColumnDef"], [3, "column", "filterTemplate", "novo-data-table-cell-config", "resized", "defaultSort", "allowMultipleFilters", "empty", "button-header-cell", "dropdown-header-cell", "fixed-header", 4, "cdkHeaderCellDef"], [3, "resized", "column", "row", "template", "empty", "button-cell", "dropdown-cell", 4, "cdkCellDef"], [3, "column", "filterTemplate", "novo-data-table-cell-config", "resized", "defaultSort", "allowMultipleFilters"], [3, "resized", "column", "row", "template"], ["data-automation-id", "novo-data-table-header-row", 3, "fixedHeader"], [3, "ngClass", "novoDataTableExpand", "row", "id", "dataAutomationId"], [1, "novo-data-table-footer"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "novo-data-table-no-results-container"], [1, "novo-data-table-empty-message"], [1, "novo-data-table-empty-container"], [3, "click"], [3, "href", "target"], ["tooltipPosition", "right", 3, "tooltip"], ["parentScrollSelector", ".novo-data-table-container", "containerClass", "novo-data-table-dropdown"], ["type", "button", "theme", "dialogue", "inverse", "", 3, "icon"], [3, "disabled", "action", 4, "ngFor", "ngForOf"], [3, "disabled", "action"], [1, "bhi-search-question"], [1, "novo-data-table-detail-row", 2, "overflow", "hidden"]], template: function NovoDataTable_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵtemplate(0, NovoDataTable_header_0_Template, 5, 6, "header", 0);
            ɵɵtemplate(1, NovoDataTable_div_1_Template, 2, 0, "div", 1);
            ɵɵelementStart(2, "div", 2);
            ɵɵtemplate(3, NovoDataTable_div_3_Template, 2, 1, "div", 3);
            ɵɵelementStart(4, "div", 4, 5);
            ɵɵtemplate(6, NovoDataTable_cdk_table_6_Template, 10, 11, "cdk-table", 6);
            ɵɵtemplate(7, NovoDataTable_div_7_Template, 2, 5, "div", 7);
            ɵɵtemplate(8, NovoDataTable_div_8_Template, 3, 3, "div", 8);
            ɵɵelementEnd();
            ɵɵtemplate(9, NovoDataTable_div_9_Template, 3, 1, "div", 9);
            ɵɵelementEnd();
            ɵɵtemplate(10, NovoDataTable_ng_template_10_Template, 3, 10, "ng-template", 10);
            ɵɵtemplate(11, NovoDataTable_ng_template_11_Template, 4, 7, "ng-template", 11);
            ɵɵtemplate(12, NovoDataTable_ng_template_12_Template, 4, 7, "ng-template", 12);
            ɵɵtemplate(13, NovoDataTable_ng_template_13_Template, 4, 7, "ng-template", 13);
            ɵɵtemplate(14, NovoDataTable_ng_template_14_Template, 4, 7, "ng-template", 14);
            ɵɵtemplate(15, NovoDataTable_ng_template_15_Template, 4, 7, "ng-template", 15);
            ɵɵtemplate(16, NovoDataTable_ng_template_16_Template, 4, 7, "ng-template", 16);
            ɵɵtemplate(17, NovoDataTable_ng_template_17_Template, 4, 8, "ng-template", 17);
            ɵɵtemplate(18, NovoDataTable_ng_template_18_Template, 3, 11, "ng-template", 18);
            ɵɵtemplate(19, NovoDataTable_ng_template_19_Template, 4, 9, "ng-template", 19);
            ɵɵtemplate(20, NovoDataTable_ng_template_20_Template, 4, 9, "ng-template", 20);
            ɵɵtemplate(21, NovoDataTable_ng_template_21_Template, 2, 7, "ng-template", 21);
            ɵɵtemplate(22, NovoDataTable_ng_template_22_Template, 5, 3, "ng-template", 22);
            ɵɵtemplate(23, NovoDataTable_ng_template_23_Template, 3, 1, "ng-template", 23);
            ɵɵtemplate(24, NovoDataTable_ng_template_24_Template, 3, 1, "ng-template", 24);
            ɵɵtemplate(25, NovoDataTable_ng_template_25_Template, 1, 0, "ng-template", 25);
            ɵɵtemplate(26, NovoDataTable_ng_template_26_Template, 2, 5, "ng-template", null, 26, ɵɵtemplateRefExtractor);
            ɵɵprojection(28);
        } if (rf & 2) {
            ɵɵproperty("ngIf", !((ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !ctx.state.userFiltered) && !ctx.loading || ctx.forceShowHeader);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.loading) || ctx.loading);
            ɵɵadvance(1);
            ɵɵproperty("ngClass", ɵɵpureFunction1(13, _c4$1, ctx.fixedHeader));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.customFilter);
            ɵɵadvance(1);
            ɵɵclassProp("empty-user-filtered", (ctx.dataSource == null ? null : ctx.dataSource.currentlyEmpty) && ctx.state.userFiltered)("empty", (ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.state.userFiltered && !ctx.dataSource.pristine);
            ɵɵproperty("ngClass", ɵɵpureFunction1(15, _c5$1, ctx.fixedHeader));
            ɵɵadvance(2);
            ɵɵproperty("ngIf", (ctx.columns == null ? null : ctx.columns.length) > 0 && ctx.columnsLoaded && ctx.dataSource);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.templates["footer"]);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.currentlyEmpty) && ctx.state.userFiltered && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.dataSource.pristine);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.state.userFiltered && !ctx.dataSource.pristine);
        } }, encapsulation: 2, data: { animation: [
                trigger('expand', [
                    state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                    state('*', style({ height: '*', visibility: 'visible' })),
                    transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                ]),
            ] }, changeDetection: 0 });
    return NovoDataTable;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTable, [{
        type: Component,
        args: [{
                selector: 'novo-data-table',
                animations: [
                    trigger('expand', [
                        state('void', style({ height: '0px', minHeight: '0', visibility: 'hidden' })),
                        state('*', style({ height: '*', visibility: 'visible' })),
                        transition('void <=> *', animate('70ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
                    ]),
                ],
                template: "\n    <header\n      *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\"\n      [class.empty]=\"hideGlobalSearch && !paginationOptions && !templates['customActions']\"\n    >\n      <ng-container *ngTemplateOutlet=\"templates['customHeader']\"></ng-container>\n      <novo-search\n        alwaysOpen=\"true\"\n        (searchChanged)=\"onSearchChange($event)\"\n        [(ngModel)]=\"state.globalSearch\"\n        *ngIf=\"!hideGlobalSearch\"\n        [placeholder]=\"searchOptions?.placeholder\"\n        [hint]=\"searchOptions?.tooltip\"\n      >\n      </novo-search>\n      <novo-data-table-pagination\n        *ngIf=\"paginationOptions\"\n        [theme]=\"paginationOptions.theme\"\n        [length]=\"dataSource?.currentTotal\"\n        [page]=\"paginationOptions.page\"\n        [pageSize]=\"paginationOptions.pageSize\"\n        [pageSizeOptions]=\"paginationOptions.pageSizeOptions\"\n        [dataFeatureId]=\"paginatorDataFeatureId\"\n      >\n      </novo-data-table-pagination>\n      <div class=\"novo-data-table-actions\" *ngIf=\"templates['customActions']\">\n        <ng-container *ngTemplateOutlet=\"templates['customActions']\"></ng-container>\n      </div>\n    </header>\n    <div class=\"novo-data-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-data-table-loading\">\n      <novo-loading></novo-loading>\n    </div>\n    <div class=\"novo-data-table-outside-container\" [ngClass]=\"{ 'novo-data-table-outside-container-fixed': fixedHeader }\">\n      <div class=\"novo-data-table-custom-filter\" *ngIf=\"customFilter\">\n        <ng-container *ngTemplateOutlet=\"templates['customFilter']\"></ng-container>\n      </div>\n      <div\n        #novoDataTableContainer\n        class=\"novo-data-table-container\"\n        [ngClass]=\"{ 'novo-data-table-container-fixed': fixedHeader }\"\n        [class.empty-user-filtered]=\"dataSource?.currentlyEmpty && state.userFiltered\"\n        [class.empty]=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\"\n      >\n        <cdk-table\n          *ngIf=\"columns?.length > 0 && columnsLoaded && dataSource\"\n          [dataSource]=\"dataSource\"\n          [trackBy]=\"trackByFn\"\n          novoDataTableSortFilter\n          [class.expandable]=\"expandable\"\n          [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\"\n          [hidden]=\"dataSource?.totallyEmpty && !state.userFiltered\"\n        >\n          <ng-container cdkColumnDef=\"selection\">\n            <novo-data-table-checkbox-header-cell *cdkHeaderCellDef></novo-data-table-checkbox-header-cell>\n            <novo-data-table-checkbox-cell *cdkCellDef=\"let row; let i = index\" [row]=\"row\"></novo-data-table-checkbox-cell>\n          </ng-container>\n          <ng-container cdkColumnDef=\"expand\">\n            <novo-data-table-expand-header-cell *cdkHeaderCellDef></novo-data-table-expand-header-cell>\n            <novo-data-table-expand-cell *cdkCellDef=\"let row; let i = index\" [row]=\"row\"></novo-data-table-expand-cell>\n          </ng-container>\n          <ng-container *ngFor=\"let column of columns; trackBy: trackColumnsBy\" [cdkColumnDef]=\"column.id\">\n            <novo-data-table-header-cell\n              *cdkHeaderCellDef\n              [column]=\"column\"\n              [filterTemplate]=\"templates['column-filter-' + column.id]\"\n              [novo-data-table-cell-config]=\"column\"\n              [resized]=\"resized\"\n              [defaultSort]=\"defaultSort\"\n              [allowMultipleFilters]=\"allowMultipleFilters\"\n              [class.empty]=\"column?.type === 'action' && !column?.label\"\n              [class.button-header-cell]=\"column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)\"\n              [class.dropdown-header-cell]=\"column?.type === 'action' && column?.action?.options\"\n              [class.fixed-header]=\"fixedHeader\"\n            ></novo-data-table-header-cell>\n            <novo-data-table-cell\n              *cdkCellDef=\"let row\"\n              [resized]=\"resized\"\n              [column]=\"column\"\n              [row]=\"row\"\n              [template]=\"columnToTemplate[column.id]\"\n              [class.empty]=\"column?.type === 'action' && !column?.label\"\n              [class.button-cell]=\"column?.type === 'expand' || (column?.type === 'action' && !column?.action?.options)\"\n              [class.dropdown-cell]=\"column?.type === 'action' && column?.action?.options\"\n            ></novo-data-table-cell>\n          </ng-container>\n          <novo-data-table-header-row\n            *cdkHeaderRowDef=\"displayedColumns\"\n            [fixedHeader]=\"fixedHeader\"\n            data-automation-id=\"novo-data-table-header-row\"\n          ></novo-data-table-header-row>\n          <novo-data-table-row\n            *cdkRowDef=\"let row; columns: displayedColumns\"\n            [ngClass]=\"{ active: row[rowIdentifier] == activeRowIdentifier }\"\n            [novoDataTableExpand]=\"detailRowTemplate\"\n            [row]=\"row\"\n            [id]=\"name + '-' + row[rowIdentifier]\"\n            [dataAutomationId]=\"row[rowIdentifier]\"\n          ></novo-data-table-row>\n        </cdk-table>\n        <div class=\"novo-data-table-footer\" *ngIf=\"templates['footer']\">\n          <ng-container *ngTemplateOutlet=\"templates['footer']; context: { $implicit: columns, data: dataSource.data }\"></ng-container>\n        </div>\n        <div\n          class=\"novo-data-table-no-results-container\"\n          [style.left.px]=\"scrollLeft\"\n          *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\"\n        >\n          <div class=\"novo-data-table-empty-message\">\n            <ng-container *ngTemplateOutlet=\"templates['noResultsMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n          </div>\n        </div>\n      </div>\n      <div\n        class=\"novo-data-table-empty-container\"\n        *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\"\n      >\n        <div class=\"novo-data-table-empty-message\">\n          <ng-container *ngTemplateOutlet=\"templates['emptyMessage'] || templates['defaultNoResultsMessage']\"></ng-container>\n        </div>\n      </div>\n    </div>\n    <!-- DEFAULT CELL TEMPLATE -->\n    <ng-template novoTemplate=\"textCellTemplate\" let-row let-col=\"col\">\n      <span [style.width.px]=\"col?.width\" [style.min-width.px]=\"col?.width\" [style.max-width.px]=\"col?.width\">{{\n        row[col.id] | dataTableInterpolate: col\n      }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"dateCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"datetimeCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableDateTimeRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"timeCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableTimeRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"currencyCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableCurrencyRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"bigdecimalCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableBigDecimalRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"numberCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"percentCellTemplate\" let-row let-col=\"col\">\n      <span>{{ row[col.id] | dataTableInterpolate: col | dataTableNumberRenderer: col:true }}</span>\n    </ng-template>\n    <ng-template novoTemplate=\"linkCellTemplate\" let-row let-col=\"col\">\n      <a\n        [attr.data-feature-id]=\"col?.attributes?.dataFeatureId\"\n        (click)=\"col.handlers?.click({ originalEvent: $event, row: row })\"\n        [style.width.px]=\"col?.width\"\n        [style.min-width.px]=\"col?.width\"\n        [style.max-width.px]=\"col?.width\"\n        >{{ row[col.id] | dataTableInterpolate: col }}</a\n      >\n    </ng-template>\n    <ng-template novoTemplate=\"telCellTemplate\" let-row let-col=\"col\">\n      <a href=\"tel:{{ row[col.id] | dataTableInterpolate: col }}\" [target]=\"col?.attributes?.target\">{{\n        row[col.id] | dataTableInterpolate: col\n      }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"mailtoCellTemplate\" let-row let-col=\"col\">\n      <a href=\"mailto:{{ row[col.id] | dataTableInterpolate: col }}\" [target]=\"col?.attributes?.target\">{{\n        row[col.id] | dataTableInterpolate: col\n      }}</a>\n    </ng-template>\n    <ng-template novoTemplate=\"buttonCellTemplate\" let-row let-col=\"col\">\n      <p [tooltip]=\"col?.action?.tooltip\" tooltipPosition=\"right\" [attr.data-feature-id]=\"col?.attributes?.dataFeatureId\">\n        <i\n          class=\"bhi-{{ col?.action?.icon }} data-table-icon\"\n          (click)=\"col.handlers?.click({ originalEvent: $event, row: row })\"\n          [class.disabled]=\"isDisabled(col, row)\"\n        ></i>\n      </p>\n    </ng-template>\n    <ng-template novoTemplate=\"dropdownCellTemplate\" let-row let-col=\"col\">\n      <novo-dropdown parentScrollSelector=\".novo-data-table-container\" containerClass=\"novo-data-table-dropdown\">\n        <button type=\"button\" theme=\"dialogue\" [icon]=\"col.action.icon\" inverse>{{ col.label }}</button>\n        <list>\n          <item\n            *ngFor=\"let option of col?.action?.options\"\n            (action)=\"option.handlers.click({ originalEvent: $event?.originalEvent, row: row })\"\n            [disabled]=\"isDisabled(option, row)\"\n          >\n            <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n          </item>\n        </list>\n      </novo-dropdown>\n    </ng-template>\n    <ng-template novoTemplate=\"defaultNoResultsMessage\">\n      <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n    </ng-template>\n    <ng-template novoTemplate=\"defaultEmptyMessage\">\n      <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n    </ng-template>\n    <ng-template novoTemplate=\"expandedRow\"> You did not provide an \"expandedRow\" template! </ng-template>\n    <ng-template #detailRowTemplate let-row>\n      <div class=\"novo-data-table-detail-row\" [@expand] style=\"overflow: hidden\">\n        <ng-container *ngTemplateOutlet=\"templates['expandedRow']; context: { $implicit: row }\"></ng-container>\n      </div>\n    </ng-template>\n    <!-- CUSTOM CELLS PASSED IN -->\n    <ng-content></ng-content>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [DataTableState],
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ChangeDetectorRef }, { type: DataTableState }]; }, { globalSearchHiddenClassToggle: [{
            type: HostBinding,
            args: ['class.global-search-hidden']
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }], defaultTemplates: [{
            type: ViewChildren,
            args: [NovoTemplate]
        }], novoDataTableContainer: [{
            type: ViewChild,
            args: ['novoDataTableContainer']
        }], resized: [{
            type: Output
        }], displayedColumns: [{
            type: Input
        }], paginationOptions: [{
            type: Input
        }], searchOptions: [{
            type: Input
        }], defaultSort: [{
            type: Input
        }], name: [{
            type: Input
        }], allowMultipleFilters: [{
            type: Input
        }], rowIdentifier: [{
            type: Input
        }], activeRowIdentifier: [{
            type: Input
        }], trackByFn: [{
            type: Input
        }], templates: [{
            type: Input
        }], fixedHeader: [{
            type: Input
        }], paginatorDataFeatureId: [{
            type: Input
        }], dataTableService: [{
            type: Input
        }], rows: [{
            type: Input
        }], outsideFilter: [{
            type: Input
        }], refreshSubject: [{
            type: Input
        }], columns: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], hasExandedRows: [{
            type: Input
        }], forceShowHeader: [{
            type: Input
        }], hideGlobalSearch: [{
            type: Input
        }], preferencesChanged: [{
            type: Output
        }], empty: [{
            type: HostBinding,
            args: ['class.empty']
        }], loadingClass: [{
            type: HostBinding,
            args: ['class.loading']
        }] }); })();

// NG2
var NovoDropdownModule = /** @class */ (function () {
    function NovoDropdownModule() {
    }
    NovoDropdownModule.ɵmod = ɵɵdefineNgModule({ type: NovoDropdownModule });
    NovoDropdownModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDropdownModule_Factory(t) { return new (t || NovoDropdownModule)(); }, imports: [[NovoOverlayModule]] });
    return NovoDropdownModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDropdownModule, { declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement], imports: [NovoOverlayModule], exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownModule, [{
        type: NgModule,
        args: [{
                imports: [NovoOverlayModule],
                declarations: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement],
                exports: [NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement],
            }]
    }], null, null); })();

var _c0$r = ["dropdownElement"];
function NovoSelectElement_li_7_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 10);
    ɵɵlistener("click", function NovoSelectElement_li_7_button_1_Template_button_click_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(2); ctx_r5.toggleHeader($event); return false; });
    ɵɵelement(1, "i", 11);
    ɵɵtext(2);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate1("\u00A0", ctx_r3.headerConfig.label, " ");
} }
var _c1$b = function (a0) { return { active: a0 }; };
var _c2$5 = function (a0) { return { invalid: a0 }; };
function NovoSelectElement_li_7_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 12);
    ɵɵelementStart(1, "input", 13);
    ɵɵlistener("ngModelChange", function NovoSelectElement_li_7_div_2_Template_input_ngModelChange_1_listener($event) { ɵɵrestoreView(_r8); var ctx_r7 = ɵɵnextContext(2); return ctx_r7.header.value = $event; });
    ɵɵelementEnd();
    ɵɵelementStart(2, "footer");
    ɵɵelementStart(3, "button", 14);
    ɵɵlistener("click", function NovoSelectElement_li_7_div_2_Template_button_click_3_listener($event) { ɵɵrestoreView(_r8); var ctx_r9 = ɵɵnextContext(2); return ctx_r9.toggleHeader($event, false); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "button", 15);
    ɵɵlistener("click", function NovoSelectElement_li_7_div_2_Template_button_click_5_listener() { ɵɵrestoreView(_r8); var ctx_r10 = ɵɵnextContext(2); return ctx_r10.saveHeader(); });
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(7, _c1$b, ctx_r4.header.open));
    ɵɵadvance(1);
    ɵɵproperty("placeholder", ctx_r4.headerConfig.placeholder)("ngModel", ctx_r4.header.value)("ngClass", ɵɵpureFunction1(9, _c2$5, !ctx_r4.header.valid));
    ɵɵattribute("id", ctx_r4.name);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r4.labels.cancel);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r4.labels.save);
} }
function NovoSelectElement_li_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "li", 7);
    ɵɵtemplate(1, NovoSelectElement_li_7_button_1_Template, 3, 1, "button", 8);
    ɵɵtemplate(2, NovoSelectElement_li_7_div_2_Template, 7, 11, "div", 9);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("open", ctx_r1.header.open);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r1.header.open);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.header.open);
} }
function NovoSelectElement_li_8_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 19);
} }
function NovoSelectElement_li_8_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 16);
    ɵɵlistener("click", function NovoSelectElement_li_8_Template_li_click_0_listener() { ɵɵrestoreView(_r15); var option_r11 = ctx.$implicit; var i_r12 = ctx.index; var ctx_r14 = ɵɵnextContext(); return ctx_r14.setValueAndClose({ value: option_r11, index: i_r12 }); });
    ɵɵelement(1, "span", 17);
    ɵɵtemplate(2, NovoSelectElement_li_8_i_2_Template, 1, 0, "i", 18);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r11 = ctx.$implicit;
    var ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c1$b, option_r11.active));
    ɵɵattribute("data-automation-value", option_r11.label);
    ɵɵadvance(1);
    ɵɵproperty("innerHtml", ctx_r2.highlight(option_r11.label, ctx_r2.filterTerm), ɵɵsanitizeHtml);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", option_r11.active);
} }
var _c3$3 = ["*"];
// Value accessor for the component (supports ngModel)
var SELECT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoSelectElement; }),
    multi: true,
};
var NovoSelectElement = /** @class */ (function () {
    function NovoSelectElement(element, labels, ref, focusMonitor, ngZone) {
        this.element = element;
        this.labels = labels;
        this.ref = ref;
        this.focusMonitor = focusMonitor;
        this.ngZone = ngZone;
        this.placeholder = 'Select...';
        this.onSelect = new EventEmitter();
        this.selectedIndex = -1;
        this.empty = true;
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.filterTerm = '';
        this.disabled = false;
    }
    NovoSelectElement.prototype.ngOnInit = function () {
        var _this = this;
        this.focusMonitor.monitor(this.dropdown.nativeElement).subscribe(function (origin) {
            return _this.ngZone.run(function () {
                if (origin === 'keyboard' && !_this.disabled) {
                    _this.openPanel();
                }
            });
        });
        this.ngOnChanges();
    };
    NovoSelectElement.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.readonly = this.readonly === true;
        if (this.options && this.options.length && typeof this.options[0] === 'string') {
            this.filteredOptions = this.options.map(function (item) {
                return { value: item, label: item };
            });
        }
        else {
            this.filteredOptions = (this.options || [])
                .filter(function (item) {
                return !item.readOnly;
            })
                .map(function (element) {
                return __assign(__assign({}, element), { active: false });
            });
        }
        if (!this.model && !this.createdItem) {
            this.clear();
        }
        else if (this.createdItem) {
            var item = this.options.find(function (i) { return i.label === _this.createdItem; });
            var index = this.options.indexOf(item);
            this.select(item, index);
        }
        else {
            this.writeValue(this.model);
        }
        if (this.panelOpen) {
            this.openPanel();
        }
    };
    NovoSelectElement.prototype.ngOnDestroy = function () {
        this.focusMonitor.stopMonitoring(this.dropdown.nativeElement);
    };
    /** BEGIN: Convienient Panel Methods. */
    NovoSelectElement.prototype.openPanel = function () {
        this.overlay.openPanel();
    };
    NovoSelectElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    NovoSelectElement.prototype.togglePanel = function () {
        var _this = this;
        if (this.panelOpen) {
            this.closePanel();
        }
        else {
            setTimeout(function () {
                _this.dropdown.nativeElement.focus();
            });
            this.openPanel();
        }
    };
    Object.defineProperty(NovoSelectElement.prototype, "panelOpen", {
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    NovoSelectElement.prototype.setValueAndClose = function (event) {
        if (event.value && event.index >= 0) {
            this.select(event.value, event.index);
        }
        this.closePanel();
    };
    NovoSelectElement.prototype.select = function (option, i, fireEvents) {
        if (fireEvents === void 0) { fireEvents = true; }
        if (this.selected) {
            this.selected.active = false;
        }
        this.selectedIndex = i;
        this.selected = option;
        this.selected.active = true;
        this.empty = false;
        if (fireEvents) {
            this.onModelChange(this.selected.value);
            this.onSelect.emit({ selected: this.selected.value });
        }
    };
    NovoSelectElement.prototype.clear = function () {
        if (this.selected) {
            this.selected.active = false;
        }
        this.selected = {
            label: this.placeholder,
            value: null,
            active: false,
        };
        this.header = {
            open: false,
            valid: true,
            value: '',
        };
        this.selectedIndex = -1;
        this.empty = true;
    };
    NovoSelectElement.prototype.onKeyDown = function (event) {
        var _this = this;
        // To prevent default window scrolling
        if ([KeyCodes.UP, KeyCodes.DOWN].includes(event.keyCode)) {
            event.preventDefault();
        }
        if ([KeyCodes.ESC, KeyCodes.TAB].includes(event.keyCode)) {
            this.closePanel();
        }
        else if (event.keyCode === KeyCodes.ENTER) {
            if (this.header.open && this.header.value) {
                this.saveHeader();
            }
            else {
                this.setValueAndClose({
                    value: this.filteredOptions[this.selectedIndex],
                    index: this.selectedIndex,
                });
            }
        }
        else if (event.keyCode === KeyCodes.UP) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            if (this.selectedIndex > 0) {
                this.selectedIndex--;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
            }
        }
        else if (event.keyCode === KeyCodes.DOWN) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            if (this.selectedIndex < this.filteredOptions.length - 1) {
                this.selectedIndex++;
                this.select(this.filteredOptions[this.selectedIndex], this.selectedIndex);
                this.scrollToSelected();
                if (this.header.open) {
                    this.toggleHeader(null, false);
                }
            }
        }
        else if (event.keyCode === KeyCodes.UP && this.selectedIndex === 0) {
            if (!this.panelOpen) {
                this.openPanel();
            }
            this.selectedIndex--;
            this.toggleHeader(null, true);
        }
        else if ((event.keyCode >= 65 && event.keyCode <= 90) || event.keyCode === KeyCodes.SPACE) {
            if (event.keyCode === KeyCodes.SPACE) {
                event.preventDefault();
            }
            if (!this.panelOpen) {
                this.openPanel();
            }
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            var char = String.fromCharCode(event.keyCode);
            this.filterTerm = this.filterTerm.concat(char);
            var item = this.filteredOptions.find(function (i) { return i.label.toUpperCase().indexOf(_this.filterTerm) === 0; });
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item));
                this.scrollToSelected();
            }
        }
        else if ([KeyCodes.BACKSPACE, KeyCodes.DELETE].includes(event.keyCode)) {
            clearTimeout(this.filterTermTimeout);
            this.filterTermTimeout = setTimeout(function () {
                _this.filterTerm = '';
            }, 2000);
            this.filterTerm = this.filterTerm.slice(0, -1);
        }
    };
    NovoSelectElement.prototype.scrollToSelected = function () {
        this.scrollToIndex(this.selectedIndex);
    };
    NovoSelectElement.prototype.scrollToIndex = function (index) {
        var element = this.overlay.overlayRef.overlayElement;
        var list = element.querySelector('.novo-select-list');
        var items = list.querySelectorAll('li');
        var item = items[this.headerConfig ? index + 1 : index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    NovoSelectElement.prototype.toggleHeader = function (event, forceValue) {
        if (forceValue === void 0) { forceValue = false; }
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        // Reverse the active property (if forceValue, use that)
        this.header = {
            open: forceValue !== undefined ? forceValue : !this.header.open,
            value: '',
            valid: true,
        };
    };
    NovoSelectElement.prototype.highlight = function (match, query) {
        // Replaces the capture string with a the same string inside of a "strong" tag
        return query ? match.replace(new RegExp(this.escapeRegexp(query), 'gi'), '<strong>$&</strong>') : match;
    };
    NovoSelectElement.prototype.escapeRegexp = function (queryToEscape) {
        // Ex: if the capture is "a" the result will be \a
        return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
    };
    NovoSelectElement.prototype.saveHeader = function () {
        if (this.header.value) {
            this.headerConfig.onSave(this.header.value);
            this.createdItem = this.header.value;
            this.closePanel();
        }
        else {
            this.header.valid = false;
        }
    };
    NovoSelectElement.prototype.writeValue = function (model) {
        this.model = model;
        if (this.options) {
            var item = this.filteredOptions.find(function (i) { return i.value === model || (model && i.value === model.id); });
            if (!item && !Helpers.isEmpty(model)) {
                item = {
                    label: model,
                    value: model,
                };
                if (!item.readOnly) {
                    this.options.unshift(item);
                }
            }
            if (item) {
                this.select(item, this.filteredOptions.indexOf(item), false);
                this.empty = false;
            }
            else {
                this.clear();
            }
        }
        this.ref.markForCheck();
    };
    NovoSelectElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoSelectElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoSelectElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoSelectElement.ɵfac = function NovoSelectElement_Factory(t) { return new (t || NovoSelectElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(FocusMonitor), ɵɵdirectiveInject(NgZone)); };
    NovoSelectElement.ɵcmp = ɵɵdefineComponent({ type: NovoSelectElement, selectors: [["novo-select"]], viewQuery: function NovoSelectElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(NovoOverlayTemplateComponent, true);
            ɵɵstaticViewQuery(_c0$r, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        } }, hostBindings: function NovoSelectElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("keydown", function NovoSelectElement_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
        } }, inputs: { name: "name", options: "options", placeholder: "placeholder", readonly: "readonly", headerConfig: "headerConfig" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([SELECT_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], ngContentSelectors: _c3$3, decls: 9, vars: 11, consts: [["type", "button", 3, "tabIndex", "click"], ["dropdownElement", ""], [1, "bhi-collapse"], ["position", "center", 3, "parent", "closing"], ["tabIndex", "-1", 1, "novo-select-list"], ["class", "select-header", 3, "open", 4, "ngIf"], [3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "select-header"], ["tabIndex", "-1", "type", "button", "class", "header", 3, "click", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["tabIndex", "-1", "type", "button", 1, "header", 3, "click"], [1, "bhi-add-thin"], [3, "ngClass"], ["autofocus", "", "type", "text", "autocomplete", "false", 3, "placeholder", "ngModel", "ngClass", "ngModelChange"], [3, "click"], [1, "primary", 3, "click"], [3, "ngClass", "click"], [3, "innerHtml"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"]], template: function NovoSelectElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0, 1);
            ɵɵlistener("click", function NovoSelectElement_Template_div_click_0_listener() { ctx.togglePanel(); return false; });
            ɵɵtext(2);
            ɵɵelement(3, "i", 2);
            ɵɵelementEnd();
            ɵɵelementStart(4, "novo-overlay-template", 3);
            ɵɵlistener("closing", function NovoSelectElement_Template_novo_overlay_template_closing_4_listener() { return ctx.dropdown.nativeElement.focus(); });
            ɵɵelementStart(5, "ul", 4);
            ɵɵprojection(6);
            ɵɵtemplate(7, NovoSelectElement_li_7_Template, 3, 4, "li", 5);
            ɵɵtemplate(8, NovoSelectElement_li_8_Template, 3, 6, "li", 6);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("empty", ctx.empty);
            ɵɵpropertyInterpolate("tabIndex", ctx.disabled ? 0 - 1 : 0);
            ɵɵadvance(2);
            ɵɵtextInterpolate1(" ", ctx.selected.label, "");
            ɵɵadvance(2);
            ɵɵproperty("parent", ctx.element);
            ɵɵadvance(1);
            ɵɵclassProp("header", ctx.headerConfig)("active", ctx.panelOpen);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.headerConfig);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.filteredOptions);
        } }, directives: [NovoOverlayTemplateComponent, NgIf, NgForOf, NgClass, DefaultValueAccessor, NgControlStatus, NgModel], encapsulation: 2 });
    return NovoSelectElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSelectElement, [{
        type: Component,
        args: [{
                selector: 'novo-select',
                providers: [SELECT_VALUE_ACCESSOR],
                template: "\n    <div #dropdownElement (click)=\"togglePanel(); (false)\" tabIndex=\"{{ disabled ? -1 : 0 }}\" type=\"button\" [class.empty]=\"empty\">\n      {{ selected.label }}<i class=\"bhi-collapse\"></i>\n    </div>\n    <novo-overlay-template [parent]=\"element\" position=\"center\" (closing)=\"dropdown.nativeElement.focus()\">\n      <ul class=\"novo-select-list\" tabIndex=\"-1\" [class.header]=\"headerConfig\" [class.active]=\"panelOpen\">\n        <ng-content></ng-content>\n        <li *ngIf=\"headerConfig\" class=\"select-header\" [class.open]=\"header.open\">\n          <button *ngIf=\"!header.open\" (click)=\"toggleHeader($event); (false)\" tabIndex=\"-1\" type=\"button\" class=\"header\">\n            <i class=\"bhi-add-thin\"></i>&nbsp;{{ headerConfig.label }}\n          </button>\n          <div *ngIf=\"header.open\" [ngClass]=\"{ active: header.open }\">\n            <input\n              autofocus\n              type=\"text\"\n              [placeholder]=\"headerConfig.placeholder\"\n              [attr.id]=\"name\"\n              autocomplete=\"false\"\n              [(ngModel)]=\"header.value\"\n              [ngClass]=\"{ invalid: !header.valid }\"\n            />\n            <footer>\n              <button (click)=\"toggleHeader($event, false)\">{{ labels.cancel }}</button>\n              <button (click)=\"saveHeader()\" class=\"primary\">{{ labels.save }}</button>\n            </footer>\n          </div>\n        </li>\n        <li\n          *ngFor=\"let option of filteredOptions; let i = index\"\n          [ngClass]=\"{ active: option.active }\"\n          (click)=\"setValueAndClose({ value: option, index: i })\"\n          [attr.data-automation-value]=\"option.label\"\n        >\n          <span [innerHtml]=\"highlight(option.label, filterTerm)\"></span> <i *ngIf=\"option.active\" class=\"bhi-check\"></i>\n        </li>\n      </ul>\n    </novo-overlay-template>\n  ",
                host: {
                    '(keydown)': 'onKeyDown($event)',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: FocusMonitor }, { type: NgZone }]; }, { name: [{
            type: Input
        }], options: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], readonly: [{
            type: Input
        }], headerConfig: [{
            type: Input
        }], onSelect: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent, { static: true }]
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdownElement', { static: true }]
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

// NG
var NovoSelectModule = /** @class */ (function () {
    function NovoSelectModule() {
    }
    NovoSelectModule.ɵmod = ɵɵdefineNgModule({ type: NovoSelectModule });
    NovoSelectModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSelectModule_Factory(t) { return new (t || NovoSelectModule)(); }, imports: [[CommonModule, FormsModule, A11yModule, NovoOverlayModule]] });
    return NovoSelectModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSelectModule, { declarations: [NovoSelectElement], imports: [CommonModule, FormsModule, A11yModule, NovoOverlayModule], exports: [NovoSelectElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSelectModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, A11yModule, NovoOverlayModule],
                declarations: [NovoSelectElement],
                exports: [NovoSelectElement],
            }]
    }], null, null); })();

// NG2
var dragula = dragulaImported;
var NovoDragulaService = /** @class */ (function () {
    function NovoDragulaService() {
        this.cancel = new EventEmitter();
        this.cloned = new EventEmitter();
        this.drag = new EventEmitter();
        this.dragend = new EventEmitter();
        this.drop = new EventEmitter();
        this.out = new EventEmitter();
        this.over = new EventEmitter();
        this.remove = new EventEmitter();
        this.shadow = new EventEmitter();
        this.dropModel = new EventEmitter();
        this.removeModel = new EventEmitter();
        this.events = ['cancel', 'cloned', 'drag', 'dragend', 'drop', 'out', 'over', 'remove', 'shadow', 'dropModel', 'removeModel'];
        this.bags = [];
    }
    NovoDragulaService.prototype.add = function (name, drake) {
        var bag = this.find(name);
        if (bag) {
            throw new Error("Bag named: " + name + " already exists.");
        }
        bag = {
            name: name,
            drake: drake,
        };
        this.bags.push(bag);
        if (drake.models) {
            // models to sync with (must have same structure as containers)
            this.handleModels(name, drake);
        }
        if (!bag.initEvents) {
            this.setupEvents(bag);
        }
        return bag;
    };
    NovoDragulaService.prototype.find = function (name) {
        for (var i = 0; i < this.bags.length; i++) {
            if (this.bags[i].name === name) {
                return this.bags[i];
            }
        }
        return null;
    };
    NovoDragulaService.prototype.destroy = function (name) {
        var bag = this.find(name);
        var i = this.bags.indexOf(bag);
        this.bags.splice(i, 1);
        bag.drake.destroy();
    };
    NovoDragulaService.prototype.setOptions = function (name, options) {
        var bag = this.add(name, dragula(options));
        this.handleModels(name, bag.drake);
    };
    NovoDragulaService.prototype.handleModels = function (name, drake) {
        var _this = this;
        var dragElm;
        var dragIndex;
        var dropIndex;
        var sourceModel;
        drake.on('remove', function (el, source) {
            if (!drake.models) {
                return;
            }
            sourceModel = drake.models[drake.containers.indexOf(source)];
            sourceModel.splice(dragIndex, 1);
            _this.removeModel.emit([name, el, source]);
        });
        drake.on('drag', function (el, source) {
            dragElm = el;
            dragIndex = _this.domIndexOf(el, source);
        });
        drake.on('drop', function (dropElm, target, source) {
            if (!drake.models) {
                return;
            }
            dropIndex = _this.domIndexOf(dropElm, target);
            sourceModel = drake.models[drake.containers.indexOf(source)];
            if (target === source) {
                sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);
            }
            else {
                var notCopy = dragElm === dropElm;
                var targetModel = drake.models[drake.containers.indexOf(target)];
                var dropElmModel = notCopy ? sourceModel[dragIndex] : JSON.parse(JSON.stringify(sourceModel[dragIndex]));
                if (notCopy) {
                    sourceModel.splice(dragIndex, 1);
                }
                targetModel.splice(dropIndex, 0, dropElmModel);
                target.removeChild(dropElm); // element must be removed for ngFor to apply correctly
            }
            _this.dropModel.emit([name, dropElm, target, source]);
        });
    };
    NovoDragulaService.prototype.setupEvents = function (bag) {
        bag.initEvents = true;
        var that = this;
        var emitter = function (type) {
            function replicate() {
                var args = Array.prototype.slice.call(arguments);
                that[type].emit([bag.name].concat(args));
            }
            bag.drake.on(type, replicate);
        };
        this.events.forEach(emitter);
    };
    NovoDragulaService.prototype.domIndexOf = function (child, parent) {
        return Array.prototype.indexOf.call(parent.children, child);
    };
    NovoDragulaService.ɵfac = function NovoDragulaService_Factory(t) { return new (t || NovoDragulaService)(); };
    NovoDragulaService.ɵprov = ɵɵdefineInjectable({ token: NovoDragulaService, factory: NovoDragulaService.ɵfac });
    return NovoDragulaService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDragulaService, [{
        type: Injectable
    }], null, null); })();

// NG2
var dragula$1 = dragulaImported;
var NovoDragulaElement = /** @class */ (function () {
    function NovoDragulaElement(element, dragulaService) {
        this.dragulaService = dragulaService;
        this.drake = null;
        this.container = element.nativeElement;
    }
    NovoDragulaElement.prototype.ngOnInit = function () {
        var bag = this.dragulaService.find(this.bag);
        if (bag) {
            this.drake = bag.drake;
            this.checkModel();
            this.drake.containers.push(this.container);
        }
        else {
            this.drake = dragula$1({
                containers: [this.container],
            });
            this.checkModel();
            this.dragulaService.add(this.bag, this.drake);
        }
    };
    NovoDragulaElement.prototype.checkModel = function () {
        if (this.dragulaModel) {
            if (this.drake.models) {
                this.drake.models.push(this.dragulaModel);
            }
            else {
                this.drake.models = [this.dragulaModel];
            }
        }
    };
    NovoDragulaElement.prototype.ngOnChanges = function (changes) {
        if (changes && changes.dragulaModel) {
            if (this.drake) {
                if (this.drake.models) {
                    var modelIndex = this.drake.models.indexOf(changes.dragulaModel.previousValue);
                    this.drake.models.splice(modelIndex, 1, changes.dragulaModel.currentValue);
                }
                else {
                    this.drake.models = [changes.dragulaModel.currentValue];
                }
            }
        }
    };
    NovoDragulaElement.ɵfac = function NovoDragulaElement_Factory(t) { return new (t || NovoDragulaElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoDragulaService)); };
    NovoDragulaElement.ɵdir = ɵɵdefineDirective({ type: NovoDragulaElement, selectors: [["", "dragula", ""]], inputs: { bag: ["dragula", "bag"], dragulaModel: "dragulaModel" }, features: [ɵɵNgOnChangesFeature] });
    return NovoDragulaElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDragulaElement, [{
        type: Directive,
        args: [{
                selector: '[dragula]',
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoDragulaService }]; }, { bag: [{
            type: Input,
            args: ['dragula']
        }], dragulaModel: [{
            type: Input
        }] }); })();

// NG2
var NovoDragulaModule = /** @class */ (function () {
    function NovoDragulaModule() {
    }
    NovoDragulaModule.ɵmod = ɵɵdefineNgModule({ type: NovoDragulaModule });
    NovoDragulaModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDragulaModule_Factory(t) { return new (t || NovoDragulaModule)(); } });
    return NovoDragulaModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDragulaModule, { declarations: [NovoDragulaElement], exports: [NovoDragulaElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDragulaModule, [{
        type: NgModule,
        args: [{
                declarations: [NovoDragulaElement],
                exports: [NovoDragulaElement],
            }]
    }], null, null); })();

/* tslint:disable:quotemark */
/**
 * AUTOGENERATED FILE - DO NOT EDIT
 * Generated by: https://bhsource.bullhorn.com/DEV_WORKSPACE/country-state-parser
 * Last generated on: Tue Feb 26 2019 15:45:12 GMT-0600 (Central Standard Time)
 */
var COUNTRIES = [
    {
        code: 'US',
        id: 1,
        name: 'United States',
        states: [
            {
                code: 'AL',
                name: 'Alabama',
            },
            {
                code: 'AK',
                name: 'Alaska',
            },
            {
                code: 'AZ',
                name: 'Arizona',
            },
            {
                code: 'AR',
                name: 'Arkansas',
            },
            {
                code: 'CA',
                name: 'California',
            },
            {
                code: 'CO',
                name: 'Colorado',
            },
            {
                code: 'CT',
                name: 'Connecticut',
            },
            {
                code: 'DE',
                name: 'Delaware',
            },
            {
                code: 'DC',
                name: 'District Of Columbia',
            },
            {
                code: 'FL',
                name: 'Florida',
            },
            {
                code: 'GA',
                name: 'Georgia',
            },
            {
                code: 'GU',
                name: 'Guam',
            },
            {
                code: 'HI',
                name: 'Hawaii',
            },
            {
                code: 'ID',
                name: 'Idaho',
            },
            {
                code: 'IL',
                name: 'Illinois',
            },
            {
                code: 'IN',
                name: 'Indiana',
            },
            {
                code: 'IA',
                name: 'Iowa',
            },
            {
                code: 'KS',
                name: 'Kansas',
            },
            {
                code: 'KY',
                name: 'Kentucky',
            },
            {
                code: 'LA',
                name: 'Louisiana',
            },
            {
                code: 'ME',
                name: 'Maine',
            },
            {
                code: 'MH',
                name: 'Marshall Islands',
            },
            {
                code: 'MD',
                name: 'Maryland',
            },
            {
                code: 'MA',
                name: 'Massachusetts',
            },
            {
                code: 'MI',
                name: 'Michigan',
            },
            {
                code: 'MN',
                name: 'Minnesota',
            },
            {
                code: 'MS',
                name: 'Mississippi',
            },
            {
                code: 'MO',
                name: 'Missouri',
            },
            {
                code: 'MT',
                name: 'Montana',
            },
            {
                code: 'NE',
                name: 'Nebraska',
            },
            {
                code: 'NV',
                name: 'Nevada',
            },
            {
                code: 'NH',
                name: 'New Hampshire',
            },
            {
                code: 'NJ',
                name: 'New Jersey',
            },
            {
                code: 'NM',
                name: 'New Mexico',
            },
            {
                code: 'NY',
                name: 'New York',
            },
            {
                code: 'NC',
                name: 'North Carolina',
            },
            {
                code: 'ND',
                name: 'North Dakota',
            },
            {
                code: 'MP',
                name: 'Northern Mariana Islands',
            },
            {
                code: 'OH',
                name: 'Ohio',
            },
            {
                code: 'OK',
                name: 'Oklahoma',
            },
            {
                code: 'OR',
                name: 'Oregon',
            },
            {
                code: 'PW',
                name: 'Palau',
            },
            {
                code: 'PA',
                name: 'Pennsylvania',
            },
            {
                code: 'PR',
                name: 'Puerto Rico',
            },
            {
                code: 'RI',
                name: 'Rhode Island',
            },
            {
                code: 'SC',
                name: 'South Carolina',
            },
            {
                code: 'SD',
                name: 'South Dakota',
            },
            {
                code: 'TN',
                name: 'Tennessee',
            },
            {
                code: 'TX',
                name: 'Texas',
            },
            {
                code: 'UT',
                name: 'Utah',
            },
            {
                code: 'VT',
                name: 'Vermont',
            },
            {
                code: 'VI',
                name: 'Virgin Islands',
            },
            {
                code: 'VA',
                name: 'Virginia',
            },
            {
                code: 'WA',
                name: 'Washington',
            },
            {
                code: 'WV',
                name: 'West Virginia',
            },
            {
                code: 'WI',
                name: 'Wisconsin',
            },
            {
                code: 'WY',
                name: 'Wyoming',
            },
        ],
    },
    {
        code: 'UK',
        id: 2359,
        name: 'United Kingdom',
        states: [
            {
                code: 'ABD',
                name: 'Aberdeenshire',
            },
            {
                code: 'ALD',
                name: 'Alderney',
            },
            {
                code: 'ANS',
                name: 'Angus',
            },
            {
                code: 'ANN',
                name: 'Antrim and Newtownabbey',
            },
            {
                code: 'AGB',
                name: 'Argyllshire',
            },
            {
                code: 'ABC',
                name: 'Armagh',
            },
            {
                code: 'EAY',
                name: 'Ayrshire',
            },
            {
                code: 'BLA',
                name: 'Ballymena',
            },
            {
                code: 'BAY',
                name: 'Ballymoney',
            },
            {
                code: 'BNB',
                name: 'Banbridge',
            },
            {
                code: 'BAN',
                name: 'Banffshire',
            },
            {
                code: 'BDF',
                name: 'Bedfordshire',
            },
            {
                code: 'BFS',
                name: 'Belfast',
            },
            {
                code: 'BRK',
                name: 'Berkshire',
            },
            {
                code: 'BGW',
                name: 'Blaenau Gwent',
            },
            {
                code: 'SCB',
                name: 'Borders',
            },
            {
                code: 'BGE',
                name: 'Bridgend',
            },
            {
                code: 'BST',
                name: 'Bristol',
            },
            {
                code: 'BKM',
                name: 'Buckinghamshire',
            },
            {
                code: 'CAY',
                name: 'Caerphilly',
            },
            {
                code: 'CAI',
                name: 'Caithness',
            },
            {
                code: 'CAM',
                name: 'Cambridgeshire',
            },
            {
                code: 'CRF',
                name: 'Cardiff',
            },
            {
                code: 'CMN',
                name: 'Carmarthenshire',
            },
            {
                code: 'CKF',
                name: 'Carrickfergus',
            },
            {
                code: 'CAS',
                name: 'Castlereagh',
            },
            {
                code: 'CGN',
                name: 'Ceredigion',
            },
            {
                code: 'CHE',
                name: 'Cheshire',
            },
            {
                code: 'CLK',
                name: 'Clackmannanshire',
            },
            {
                code: 'CLR',
                name: 'Coleraine',
            },
            {
                code: 'CWY',
                name: 'Conwy',
            },
            {
                code: 'CKT',
                name: 'Cookstown',
            },
            {
                code: 'CON',
                name: 'Cornwall',
            },
            {
                code: 'DUR',
                name: 'County Durham',
            },
            {
                code: 'DRS',
                name: 'County Londonderry',
            },
            {
                code: 'CRA',
                name: 'Craigavon',
            },
            {
                code: 'CMA',
                name: 'Cumbria',
            },
            {
                code: 'DEN',
                name: 'Denbighshire',
            },
            {
                code: 'DBY',
                name: 'Derbyshire',
            },
            {
                code: 'DEV',
                name: 'Devon',
            },
            {
                code: 'DOR',
                name: 'Dorset',
            },
            {
                code: 'EDU',
                name: 'Dumbartonshire',
            },
            {
                code: 'DGY',
                name: 'Dumfries and Galloway',
            },
            {
                code: 'DGN',
                name: 'Dungannon and South Tyrone',
            },
            {
                code: 'ELN',
                name: 'East Lothian',
            },
            {
                code: 'ESX',
                name: 'East Sussex',
            },
            {
                code: 'ERY',
                name: 'East Yorkshire',
            },
            {
                code: 'ESS',
                name: 'Essex',
            },
            {
                code: 'FMO',
                name: 'Fermanagh and Omagh',
            },
            {
                code: 'FIF',
                name: 'Fife',
            },
            {
                code: 'FLN',
                name: 'Flintshire',
            },
            {
                code: 'GLG',
                name: 'Glasgow',
            },
            {
                code: 'GLS',
                name: 'Gloucestershire',
            },
            {
                code: 'LND',
                name: 'Greater London',
            },
            {
                code: 'MAN',
                name: 'Greater Manchester',
            },
            {
                code: 'GSY',
                name: 'Guernsey',
            },
            {
                code: 'GWN',
                name: 'Gwynedd',
            },
            {
                code: 'HAM',
                name: 'Hampshire',
            },
            {
                code: 'HEF',
                name: 'Herefordshire',
            },
            {
                code: 'HRM',
                name: 'Herm',
            },
            {
                code: 'HRT',
                name: 'Hertfordshire',
            },
            {
                code: 'HLD',
                name: 'Highland',
            },
            {
                code: 'INV',
                name: 'Inverness-shire',
            },
            {
                code: 'AGY',
                name: 'Isle of Anglesey',
            },
            {
                code: 'IOM',
                name: 'Isle of Man',
            },
            {
                code: 'IOW',
                name: 'Isle of Wight',
            },
            {
                code: 'JSY',
                name: 'Jersey',
            },
            {
                code: 'KEN',
                name: 'Kent',
            },
            {
                code: 'KCD',
                name: 'Kincardineshire',
            },
            {
                code: 'KKD',
                name: 'Kirkcudbrightshire',
            },
            {
                code: 'LAN',
                name: 'Lancashire',
            },
            {
                code: 'LRN',
                name: 'Larne',
            },
            {
                code: 'LEC',
                name: 'Leicestershire',
            },
            {
                code: 'LMV',
                name: 'Limavady',
            },
            {
                code: 'LIN',
                name: 'Lincolnshire',
            },
            {
                code: 'LBC',
                name: 'Lisburn and Castlereagh',
            },
            {
                code: 'MFT',
                name: 'Magherafelt',
            },
            {
                code: 'MER',
                name: 'Merseyside',
            },
            {
                code: 'MTY',
                name: 'Merthyr Tydfil',
            },
            {
                code: 'MLN',
                name: 'Midlothian',
            },
            {
                code: 'MON',
                name: 'Monmouthshire',
            },
            {
                code: 'MRY',
                name: 'Morayshire',
            },
            {
                code: 'MYL',
                name: 'Moyle',
            },
            {
                code: 'NAI',
                name: 'Nairn',
            },
            {
                code: 'NTL',
                name: 'Neath Port Talbot',
            },
            {
                code: 'NWP',
                name: 'Newport',
            },
            {
                code: 'NMD',
                name: 'Newry, Mourne and Down',
            },
            {
                code: 'NFK',
                name: 'Norfolk',
            },
            {
                code: 'AND',
                name: 'North Down and Ards',
            },
            {
                code: 'NLK',
                name: 'North Lanarkshire',
            },
            {
                code: 'NYK',
                name: 'North Yorkshire',
            },
            {
                code: 'NTH',
                name: 'Northamptonshire',
            },
            {
                code: 'NBL',
                name: 'Northumberland',
            },
            {
                code: 'NTT',
                name: 'Nottinghamshire',
            },
            {
                code: 'OMA',
                name: 'Omagh',
            },
            {
                code: 'ORK',
                name: 'Orkney Islands',
            },
            {
                code: 'OXF',
                name: 'Oxfordshire',
            },
            {
                code: 'PEM',
                name: 'Pembrokeshire',
            },
            {
                code: 'PKN',
                name: 'Perth and Kinross',
            },
            {
                code: 'PER',
                name: 'Perthshire and Kinross',
            },
            {
                code: 'POW',
                name: 'Powys',
            },
            {
                code: 'RCC',
                name: 'Redcar and Cleveland',
            },
            {
                code: 'RFW',
                name: 'Renfrewshire',
            },
            {
                code: 'RCT',
                name: 'Rhondda Cynon Taff',
            },
            {
                code: 'RUT',
                name: 'Rutland',
            },
            {
                code: 'SRK',
                name: 'Sark',
            },
            {
                code: 'ZET',
                name: 'Shetland Islands',
            },
            {
                code: 'SHR',
                name: 'Shropshire',
            },
            {
                code: 'SOM',
                name: 'Somerset',
            },
            {
                code: 'SLK',
                name: 'South Lanarkshire',
            },
            {
                code: 'SYK',
                name: 'South Yorkshire',
            },
            {
                code: 'STS',
                name: 'Staffordshire',
            },
            {
                code: 'STG',
                name: 'Stirlingshire',
            },
            {
                code: 'STR',
                name: 'Strabane',
            },
            {
                code: 'SFK',
                name: 'Suffolk',
            },
            {
                code: 'SRY',
                name: 'Surrey',
            },
            {
                code: 'SSX',
                name: 'Sussex',
            },
            {
                code: 'SUT',
                name: 'Sutherland',
            },
            {
                code: 'SWA',
                name: 'Swansea',
            },
            {
                code: 'TOF',
                name: 'Torfaen',
            },
            {
                code: 'TWR',
                name: 'Tyne and Wear',
            },
            {
                code: 'VGL',
                name: 'Vale of Glamorgan',
            },
            {
                code: 'WAR',
                name: 'Warwickshire',
            },
            {
                code: 'WLN',
                name: 'West Lothian',
            },
            {
                code: 'WMD',
                name: 'West Midlands',
            },
            {
                code: 'WSX',
                name: 'West Sussex',
            },
            {
                code: 'WRY',
                name: 'West Yorkshire',
            },
            {
                code: 'ELS',
                name: 'Western Isles',
            },
            {
                code: 'WIL',
                name: 'Wiltshire',
            },
            {
                code: 'WOR',
                name: 'Worcestershire',
            },
            {
                code: 'WRX',
                name: 'Wrexham',
            },
        ],
    },
    {
        code: 'AF',
        id: 2185,
        name: 'Afghanistan',
        states: [
            {
                code: 'AF01',
                name: 'Badakhshan',
            },
            {
                code: 'AF02',
                name: 'Badghis',
            },
            {
                code: 'AF03',
                name: 'Baghlan',
            },
            {
                code: 'AF30',
                name: 'Balkh',
            },
            {
                code: 'AF05',
                name: 'Bamian',
            },
            {
                code: 'AF41',
                name: 'Daikondi',
            },
            {
                code: 'AF06',
                name: 'Farah',
            },
            {
                code: 'AF07',
                name: 'Faryab',
            },
            {
                code: 'AF08',
                name: 'Ghazni',
            },
            {
                code: 'AF09',
                name: 'Ghowr',
            },
            {
                code: 'AF10',
                name: 'Helmand',
            },
            {
                code: 'AF11',
                name: 'Herat',
            },
            {
                code: 'AF31',
                name: 'Jowzjan',
            },
            {
                code: 'AF13',
                name: 'Kabul',
            },
            {
                code: 'AF23',
                name: 'Kandahar',
            },
            {
                code: 'AF14',
                name: 'Kapisa',
            },
            {
                code: 'AF37',
                name: 'Khowst',
            },
            {
                code: 'AF34',
                name: 'Konar',
            },
            {
                code: 'AF24',
                name: 'Kondoz',
            },
            {
                code: 'AF35',
                name: 'Laghman',
            },
            {
                code: 'AF17',
                name: 'Lowgar',
            },
            {
                code: 'AF18',
                name: 'Nangarhar',
            },
            {
                code: 'AF19',
                name: 'Nimruz',
            },
            {
                code: 'AF38',
                name: 'Nurestan',
            },
            {
                code: 'AF39',
                name: 'Oruzgan',
            },
            {
                code: 'AF36',
                name: 'Paktia',
            },
            {
                code: 'AF29',
                name: 'Paktika',
            },
            {
                code: 'AF42',
                name: 'Panjshir',
            },
            {
                code: 'AF40',
                name: 'Parvan',
            },
            {
                code: 'AF32',
                name: 'Samangan',
            },
            {
                code: 'AF33',
                name: 'Sar-e Pol',
            },
            {
                code: 'AF26',
                name: 'Takhar',
            },
            {
                code: 'AF27',
                name: 'Vardak',
            },
            {
                code: 'AF28',
                name: 'Zabol',
            },
        ],
    },
    {
        code: 'AX',
        id: 2407,
        name: 'Åland Islands',
        states: [],
    },
    {
        code: 'AL',
        id: 2186,
        name: 'Albania',
        states: [],
    },
    {
        code: 'DZ',
        id: 2187,
        name: 'Algeria',
        states: [
            {
                code: 'DZ.AR',
                name: 'Adrar',
            },
            {
                code: 'DZ.AD',
                name: 'Aïn Defla',
            },
            {
                code: 'DZ.AT',
                name: 'Aïn Témouchent',
            },
            {
                code: 'DZ.AL',
                name: 'Algiers',
            },
            {
                code: 'DZ.AN',
                name: 'Annaba',
            },
            {
                code: 'DZ.BT',
                name: 'Batna',
            },
            {
                code: 'DZ.BC',
                name: 'Béchar',
            },
            {
                code: 'DZ.BJ',
                name: 'Béjaïa',
            },
            {
                code: 'DZ.BS',
                name: 'Biskra',
            },
            {
                code: 'DZ.BL',
                name: 'Blida',
            },
            {
                code: 'DZ.BB',
                name: 'Bordj Bou Arréridj',
            },
            {
                code: 'DZ.BU',
                name: 'Bouira',
            },
            {
                code: 'DZ.BM',
                name: 'Boumerdès',
            },
            {
                code: 'DZ.CH',
                name: 'Chlef',
            },
            {
                code: 'DZ.CO',
                name: 'Constantine',
            },
            {
                code: 'DZ.DJ',
                name: 'Djelfa',
            },
            {
                code: 'DZ.EB',
                name: 'El Bayadh',
            },
            {
                code: 'DZ.EO',
                name: 'El Oued',
            },
            {
                code: 'DZ.ET',
                name: 'El Tarf',
            },
            {
                code: 'DZ.GR',
                name: 'Ghardaïa',
            },
            {
                code: 'DZ.GL',
                name: 'Guelma',
            },
            {
                code: 'DZ.IL',
                name: 'Illizi',
            },
            {
                code: 'DZ.JJ',
                name: 'Jijel',
            },
            {
                code: 'DZ.KH',
                name: 'Khenchela',
            },
            {
                code: 'DZ.LG',
                name: 'Laghouat',
            },
            {
                code: 'DZ.MC',
                name: 'Mascara',
            },
            {
                code: 'DZ.MD',
                name: 'Médéa',
            },
            {
                code: 'DZ.ML',
                name: 'Mila',
            },
            {
                code: 'DZ.MG',
                name: 'Mostaganem',
            },
            {
                code: 'DZ.MS',
                name: 'Msila',
            },
            {
                code: 'DZ.NA',
                name: 'Naama',
            },
            {
                code: 'DZ.OR',
                name: 'Oran',
            },
            {
                code: 'DZ.OG',
                name: 'Ouargla',
            },
            {
                code: 'DZ.OB',
                name: 'Oum el Bouaghi',
            },
            {
                code: 'DZ.RE',
                name: 'Relizane',
            },
            {
                code: 'DZ.SD',
                name: 'Saïda',
            },
            {
                code: 'DZ.SF',
                name: 'Sétif',
            },
            {
                code: 'DZ.SB',
                name: 'Sidi Bel Abbès',
            },
            {
                code: 'DZ.SK',
                name: 'Skikda',
            },
            {
                code: 'DZ.SA',
                name: 'Souk Ahras',
            },
            {
                code: 'DZ.TM',
                name: 'Tamanrasset',
            },
            {
                code: 'DZ.TB',
                name: 'Tébessa',
            },
            {
                code: 'DZ.TR',
                name: 'Tiaret',
            },
            {
                code: 'DZ.TN',
                name: 'Tindouf',
            },
            {
                code: 'DZ.TP',
                name: 'Tipaza',
            },
            {
                code: 'DZ.TS',
                name: 'Tissemsilt',
            },
            {
                code: 'DZ.TO',
                name: 'Tizi Ouzou',
            },
            {
                code: 'DZ.TL',
                name: 'Tlemcen',
            },
        ],
    },
    {
        code: 'AS',
        id: 2408,
        name: 'American Samoa',
        states: [],
    },
    {
        code: 'AD',
        id: 2188,
        name: 'Andorra',
        states: [],
    },
    {
        code: 'AO',
        id: 2189,
        name: 'Angola',
        states: [
            {
                code: 'AO19',
                name: 'Bengo',
            },
            {
                code: 'AO01',
                name: 'Benguela',
            },
            {
                code: 'AO02',
                name: 'Bié',
            },
            {
                code: 'AO03',
                name: 'Cabinda',
            },
            {
                code: 'AO04',
                name: 'Cuando Cubango',
            },
            {
                code: 'AO05',
                name: 'Cuanza Norte',
            },
            {
                code: 'AO06',
                name: 'Cuanza Sul',
            },
            {
                code: 'AO07',
                name: 'Cunene',
            },
            {
                code: 'AO08',
                name: 'Huambo',
            },
            {
                code: 'AO09',
                name: 'Huíla',
            },
            {
                code: 'AO20',
                name: 'Luanda',
            },
            {
                code: 'AO17',
                name: 'Lunda Norte',
            },
            {
                code: 'AO18',
                name: 'Lunda Sul',
            },
            {
                code: 'AO12',
                name: 'Malanje',
            },
            {
                code: 'AO14',
                name: 'Moxico',
            },
            {
                code: 'AO13',
                name: 'Namibe',
            },
            {
                code: 'AO15',
                name: 'Uíge',
            },
            {
                code: 'AO16',
                name: 'Zaire',
            },
        ],
    },
    {
        code: 'AI',
        id: 2409,
        name: 'Anguilla',
        states: [],
    },
    {
        code: 'AQ',
        id: 2190,
        name: 'Antarctica',
        states: [],
    },
    {
        code: 'AG',
        id: 2191,
        name: 'Antigua and Barbuda',
        states: [],
    },
    {
        code: 'AR',
        id: 2192,
        name: 'Argentina',
        states: [
            {
                code: 'AR01',
                name: 'Buenos Aires',
            },
            {
                code: 'AR02',
                name: 'Catamarca',
            },
            {
                code: 'AR03',
                name: 'Chaco',
            },
            {
                code: 'AR04',
                name: 'Chubut',
            },
            {
                code: 'AR07',
                name: 'Ciudad de Buenos Aires',
            },
            {
                code: 'AR05',
                name: 'Córdoba',
            },
            {
                code: 'AR06',
                name: 'Corrientes',
            },
            {
                code: 'AR08',
                name: 'Entre Ríos',
            },
            {
                code: 'AR09',
                name: 'Formosa',
            },
            {
                code: 'AR10',
                name: 'Jujuy',
            },
            {
                code: 'AR11',
                name: 'La Pampa',
            },
            {
                code: 'AR12',
                name: 'La Rioja',
            },
            {
                code: 'AR13',
                name: 'Mendoza',
            },
            {
                code: 'AR14',
                name: 'Misiones',
            },
            {
                code: 'AR15',
                name: 'Neuquén',
            },
            {
                code: 'AR16',
                name: 'Río Negro',
            },
            {
                code: 'AR17',
                name: 'Salta',
            },
            {
                code: 'AR18',
                name: 'San Juan',
            },
            {
                code: 'AR19',
                name: 'San Luis',
            },
            {
                code: 'AR20',
                name: 'Santa Cruz',
            },
            {
                code: 'AR21',
                name: 'Santa Fe',
            },
            {
                code: 'AR22',
                name: 'Santiago del Estero',
            },
            {
                code: 'AR23',
                name: 'Tierra del Fuego',
            },
            {
                code: 'AR24',
                name: 'Tucumán',
            },
        ],
    },
    {
        code: 'AM',
        id: 2193,
        name: 'Armenia',
        states: [],
    },
    {
        code: 'AB',
        id: 2373,
        name: 'Aruba',
        states: [
            {
                code: 'AW.AA',
                name: 'Aruba',
            },
        ],
    },
    {
        code: 'AU',
        id: 2194,
        name: 'Australia',
        states: [
            {
                code: 'ACT',
                name: 'Australian Capital Territory',
            },
            {
                code: 'NSW',
                name: 'New South Wales',
            },
            {
                code: 'NT',
                name: 'Northern Territory',
            },
            {
                code: 'QLD',
                name: 'Queensland',
            },
            {
                code: 'SA',
                name: 'South Australia',
            },
            {
                code: 'TAS',
                name: 'Tasmania',
            },
            {
                code: 'VIC',
                name: 'Victoria',
            },
            {
                code: 'WA',
                name: 'Western Australia',
            },
        ],
    },
    {
        code: 'AT',
        id: 2195,
        name: 'Austria',
        states: [
            {
                code: 'AU01',
                name: 'Burgenland',
            },
            {
                code: 'AU02',
                name: 'Carinthia',
            },
            {
                code: 'AU03',
                name: 'Lower Austria',
            },
            {
                code: 'AU05',
                name: 'Salzburg',
            },
            {
                code: 'AU06',
                name: 'Styria',
            },
            {
                code: 'AU07',
                name: 'Tyrol',
            },
            {
                code: 'AU04',
                name: 'Upper Austria',
            },
            {
                code: 'AU09',
                name: 'Vienna',
            },
            {
                code: 'AU08',
                name: 'Vorarlberg',
            },
        ],
    },
    {
        code: 'AZ',
        id: 2196,
        name: 'Azerbaijan',
        states: [
            {
                code: 'AZ-ABS',
                name: 'Absheron',
            },
            {
                code: 'AZ-AGM',
                name: 'Aghdam',
            },
            {
                code: 'AZ-AGS',
                name: 'Aghdash',
            },
            {
                code: 'AZ-AGC',
                name: 'Aghjabedi',
            },
            {
                code: 'AZ-AGA',
                name: 'Aghstafa',
            },
            {
                code: 'AZ-AGU',
                name: 'Aghsu',
            },
            {
                code: 'AZ-AB',
                name: 'Ali-Bairamly',
            },
            {
                code: 'AZ-AST',
                name: 'Astara',
            },
            {
                code: 'AZ-BAB',
                name: 'Babek',
            },
            {
                code: 'AZ-BA',
                name: 'Baku',
            },
            {
                code: 'AZ-BAL',
                name: 'Balaken',
            },
            {
                code: 'AZ-BAR',
                name: 'Barda',
            },
            {
                code: 'AZ-BEY',
                name: 'Beilagan',
            },
            {
                code: 'AZ-BIL',
                name: 'Bilasuvar',
            },
            {
                code: 'AZ-DAS',
                name: 'Dashkesan',
            },
            {
                code: 'AZ-DAV',
                name: 'Devechi',
            },
            {
                code: 'AZ-FUZ',
                name: 'Fizuli',
            },
            {
                code: 'AZ-QAB',
                name: 'Gabala',
            },
            {
                code: 'AZ-GAD',
                name: 'Gadabey',
            },
            {
                code: 'AZ-QAX',
                name: 'Gakh',
            },
            {
                code: 'AZ-GA',
                name: 'Ganja',
            },
            {
                code: 'AZ-QAZ',
                name: 'Gazakh',
            },
            {
                code: 'AZ-GOR',
                name: 'Geranboy',
            },
            {
                code: 'AZ-QOB',
                name: 'Gobustan',
            },
            {
                code: 'AZ-GOY',
                name: 'Goychay',
            },
            {
                code: 'AZ-QBA',
                name: 'Guba',
            },
            {
                code: 'AZ-QBI',
                name: 'Gubadly',
            },
            {
                code: 'AZ-QUS',
                name: 'Gusar',
            },
            {
                code: 'AZ-HAC',
                name: 'Hacuqabul',
            },
            {
                code: 'AZ-IMI',
                name: 'Imishli',
            },
            {
                code: 'AZ-ISM',
                name: 'Ismailly',
            },
            {
                code: 'AZ-CAL',
                name: 'Jalilabad',
            },
            {
                code: 'AZ-CAB',
                name: 'Jebrail',
            },
            {
                code: 'AZ-CUL',
                name: 'Julfa',
            },
            {
                code: 'AZ-KAL',
                name: 'Kelbajar',
            },
            {
                code: 'AZ-XAC',
                name: 'Khachmaz',
            },
            {
                code: 'AZ-XA',
                name: 'Khankendy',
            },
            {
                code: 'AZ-XAN',
                name: 'Khanlar',
            },
            {
                code: 'AZ-XCI',
                name: 'Khojaly',
            },
            {
                code: 'AZ-XVD',
                name: 'Khojavend',
            },
            {
                code: 'AZ-XIZ',
                name: 'Khyzy',
            },
            {
                code: 'AZ-KUR',
                name: 'Kyurdamir',
            },
            {
                code: 'AZ-LAC',
                name: 'Lachin',
            },
            {
                code: 'AZ-LAN',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LA',
                name: 'Lenkaran',
            },
            {
                code: 'AZ-LER',
                name: 'Lerik',
            },
            {
                code: 'AZ-MAS',
                name: 'Masally',
            },
            {
                code: 'AZ-MI',
                name: 'Mingechevir',
            },
            {
                code: 'AZ-NA',
                name: 'Naftalan',
            },
            {
                code: 'AZ-NX',
                name: 'Nakhchivan',
            },
            {
                code: 'AZ-NEF',
                name: 'Neftchala',
            },
            {
                code: 'AZ-OGU',
                name: 'Oghuz',
            },
            {
                code: 'AZ-ORD',
                name: 'Ordubad',
            },
            {
                code: 'AZ-SAT',
                name: 'Saatly',
            },
            {
                code: 'AZ-SAB',
                name: 'Sabirabad',
            },
            {
                code: 'AZ-SAL',
                name: 'Salyan',
            },
            {
                code: 'AZ-SMX',
                name: 'Samuh',
            },
            {
                code: 'AZ-SAD',
                name: 'Sedarak',
            },
            {
                code: 'AZ-SAH',
                name: 'Shahbuz',
            },
            {
                code: 'AZ-SMI',
                name: 'Shamakhy',
            },
            {
                code: 'AZ-SKR',
                name: 'Shamkir',
            },
            {
                code: 'AZ-SAK',
                name: 'Sheki',
            },
            {
                code: 'AZ-SA',
                name: 'Sheki',
            },
            {
                code: 'AZ-SAR',
                name: 'Sherur',
            },
            {
                code: 'AZ-SS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SUS',
                name: 'Shusha',
            },
            {
                code: 'AZ-SIY',
                name: 'Siazan',
            },
            {
                code: 'AZ-SM',
                name: 'Sumgayit',
            },
            {
                code: 'AZ-TAR',
                name: 'Terter',
            },
            {
                code: 'AZ-TOV',
                name: 'Tovuz',
            },
            {
                code: 'AZ-UCA',
                name: 'Ujar',
            },
            {
                code: 'AZ-YAR',
                name: 'Yardymly',
            },
            {
                code: 'AZ-YE',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-YEV',
                name: 'Yevlakh',
            },
            {
                code: 'AZ-ZAQ',
                name: 'Zagatala',
            },
            {
                code: 'AZ-ZAN',
                name: 'Zangilan',
            },
            {
                code: 'AZ-ZAR',
                name: 'Zerdab',
            },
        ],
    },
    {
        code: 'BS',
        id: 2197,
        name: 'Bahamas',
        states: [
            {
                code: 'BF24',
                name: 'Acklins',
            },
            {
                code: 'BF32',
                name: 'Berry Islands',
            },
            {
                code: 'BF05',
                name: 'Bimini',
            },
            {
                code: 'BF36',
                name: 'Black Point',
            },
            {
                code: 'BF06',
                name: 'Cat Island',
            },
            {
                code: 'BF37',
                name: 'Central Abaco',
            },
            {
                code: 'BF38',
                name: 'Central Andros',
            },
            {
                code: 'BF39',
                name: 'Central Eleuthera',
            },
            {
                code: 'BF25',
                name: 'City of Freeport',
            },
            {
                code: 'BF40',
                name: 'Crooked Island',
            },
            {
                code: 'BF41',
                name: 'East Grand Bahama',
            },
            {
                code: 'BF10',
                name: 'Exuma',
            },
            {
                code: 'BF42',
                name: 'Grand Cay',
            },
            {
                code: 'BS.GT\t',
                name: 'Green Turtle Cay',
            },
            {
                code: 'BF22',
                name: 'Harbour Island',
            },
            {
                code: 'BF43',
                name: 'Hope Town',
            },
            {
                code: 'BF13',
                name: 'Inagua',
            },
            {
                code: 'BF15',
                name: 'Long Island',
            },
            {
                code: 'BF44',
                name: 'Mangrove Cay',
            },
            {
                code: 'BF16',
                name: 'Mayaguana',
            },
            {
                code: 'BF45',
                name: "Moore's Island",
            },
            {
                code: 'BS.NW',
                name: 'New Providence',
            },
            {
                code: 'BF46',
                name: 'North Abaco',
            },
            {
                code: 'BF47',
                name: 'North Andros',
            },
            {
                code: 'BF48',
                name: 'North Eleuthera',
            },
            {
                code: 'BF18',
                name: 'Ragged Island',
            },
            {
                code: 'BF49',
                name: 'Rum Cay',
            },
            {
                code: 'BF35',
                name: 'San Salvador',
            },
            {
                code: 'BF50',
                name: 'South Abaco',
            },
            {
                code: 'BF51',
                name: 'South Andros',
            },
            {
                code: 'BF52',
                name: 'South Eleuthera',
            },
            {
                code: 'BF53',
                name: 'Spanish Wells',
            },
            {
                code: 'BF54',
                name: 'West Grand Bahama',
            },
        ],
    },
    {
        code: 'BH',
        id: 2198,
        name: 'Bahrain',
        states: [
            {
                code: 'BA16',
                name: 'Capital',
            },
            {
                code: 'BA19',
                name: 'Central',
            },
            {
                code: 'BA15',
                name: 'Muharraq',
            },
            {
                code: 'BA18',
                name: 'Northern',
            },
            {
                code: 'BA17',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'BD',
        id: 2199,
        name: 'Bangladesh',
        states: [
            {
                code: 'BG85',
                name: 'Barisal',
            },
            {
                code: 'BG84',
                name: 'Chittagong',
            },
            {
                code: 'BG81',
                name: 'Dhaka',
            },
            {
                code: 'BG82',
                name: 'Khulna',
            },
            {
                code: 'BG81',
                name: 'Mymensingh',
            },
            {
                code: 'BG83',
                name: 'Rajshahi',
            },
            {
                code: 'BG87',
                name: 'Rangpur',
            },
            {
                code: 'BG86',
                name: 'Sylhet',
            },
        ],
    },
    {
        code: 'BB',
        id: 2200,
        name: 'Barbados',
        states: [
            {
                code: 'BB01',
                name: 'Christ Church',
            },
            {
                code: 'BB02',
                name: 'Saint Andrew',
            },
            {
                code: 'BB03',
                name: 'Saint George',
            },
            {
                code: 'BB04',
                name: 'Saint James',
            },
            {
                code: 'BB05',
                name: 'Saint John',
            },
            {
                code: 'BB06',
                name: 'Saint Joseph',
            },
            {
                code: 'BB07',
                name: 'Saint Lucy',
            },
            {
                code: 'BB08',
                name: 'Saint Michael',
            },
            {
                code: 'BB09',
                name: 'Saint Peter',
            },
            {
                code: 'BB10',
                name: 'Saint Philip',
            },
            {
                code: 'BB11',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'BY',
        id: 2201,
        name: 'Belarus',
        states: [
            {
                code: 'BO01',
                name: 'Brest',
            },
            {
                code: 'BO02',
                name: 'Gomel',
            },
            {
                code: 'BO03',
                name: 'Grodno',
            },
            {
                code: 'BO05',
                name: 'Minsk',
            },
            {
                code: 'BO04',
                name: 'Minsk City',
            },
            {
                code: 'BO06',
                name: 'Mogilev',
            },
            {
                code: 'BO07',
                name: 'Vitebsk',
            },
        ],
    },
    {
        code: 'BE',
        id: 2202,
        name: 'Belgium',
        states: [
            {
                code: 'BE01',
                name: 'Antwerpen Province',
            },
            {
                code: 'BE11',
                name: 'Brussels-Capital Region',
            },
            {
                code: 'BE12',
                name: 'Flemish Brabant Province',
            },
            {
                code: 'BE03',
                name: 'Hainaut Province',
            },
            {
                code: 'BE04',
                name: 'Liege Province',
            },
            {
                code: 'BE05',
                name: 'Limburg Province',
            },
            {
                code: 'BE06',
                name: 'Luxembourg Province',
            },
            {
                code: 'BE07',
                name: 'Namur Province',
            },
            {
                code: 'BE08',
                name: 'Oost-Vlaanderen Province',
            },
            {
                code: 'BE10',
                name: 'Walloon Brabant Province',
            },
            {
                code: 'BE09',
                name: 'West-Vlaanderen Province',
            },
        ],
    },
    {
        code: 'BZ',
        id: 2203,
        name: 'Belize',
        states: [],
    },
    {
        code: 'BJ',
        id: 2204,
        name: 'Benin',
        states: [
            {
                code: 'BN07',
                name: 'Alibori',
            },
            {
                code: 'BN08',
                name: 'Atacora',
            },
            {
                code: 'BN09',
                name: 'Atlantique',
            },
            {
                code: 'BN10',
                name: 'Borgou',
            },
            {
                code: 'BN11',
                name: 'Collines',
            },
            {
                code: 'BN12',
                name: 'Couffo',
            },
            {
                code: 'BN13',
                name: 'Donga',
            },
            {
                code: 'BN14',
                name: 'Littoral',
            },
            {
                code: 'BN15',
                name: 'Mono',
            },
            {
                code: 'BN16',
                name: 'Ouémé',
            },
            {
                code: 'BN17',
                name: 'Plateau',
            },
            {
                code: 'BN18',
                name: 'Zou',
            },
        ],
    },
    {
        code: 'BU',
        id: 2372,
        name: 'Bermuda',
        states: [
            {
                code: 'BM.BD',
                name: 'Bermuda',
            },
            {
                code: 'BD01',
                name: 'Devonshire',
            },
            {
                code: 'BD03',
                name: 'Hamilton municipality',
            },
            {
                code: 'BD02',
                name: 'Hamilton',
            },
            {
                code: 'BD04',
                name: 'Paget',
            },
            {
                code: 'BD05',
                name: 'Pembroke',
            },
            {
                code: 'BD06',
                name: 'Saint George municipality',
            },
            {
                code: 'BD07',
                name: "Saint George's",
            },
            {
                code: 'BD08',
                name: 'Sandys',
            },
            {
                code: 'BD09',
                name: 'Smiths',
            },
            {
                code: 'BD10',
                name: 'Southampton',
            },
            {
                code: 'BD11',
                name: 'Warwick',
            },
        ],
    },
    {
        code: 'BT',
        id: 2205,
        name: 'Bhutan',
        states: [],
    },
    {
        code: 'BO',
        id: 2206,
        name: 'Bolivia; Plurinational State',
        states: [
            {
                code: 'BL01',
                name: 'Chuquisaca',
            },
            {
                code: 'BL02',
                name: 'Cochabamba',
            },
            {
                code: 'BL03',
                name: 'El Beni',
            },
            {
                code: 'BL04',
                name: 'La Paz',
            },
            {
                code: 'BL05',
                name: 'Oruro',
            },
            {
                code: 'BL06',
                name: 'Pando',
            },
            {
                code: 'BL07',
                name: 'Potosí',
            },
            {
                code: 'BL08',
                name: 'Santa Cruz',
            },
            {
                code: 'BL09',
                name: 'Tarija',
            },
        ],
    },
    {
        code: 'BQ',
        id: 2449,
        name: 'Bonaire',
        states: [
            {
                code: 'BQ.BO',
                name: 'Bonaire',
            },
            {
                code: 'BQ.SB',
                name: 'Saba',
            },
            {
                code: 'BQ.SE',
                name: 'Sint Eustatius',
            },
        ],
    },
    {
        code: 'BA',
        id: 2207,
        name: 'Bosnia and Herzegovina',
        states: [
            {
                code: 'BA-05',
                name: 'Bosansko-podrinjski kanton',
            },
            {
                code: 'BA-BRC',
                name: 'Brcko distrikt',
            },
            {
                code: 'BA-BIH',
                name: 'Federacija Bosna i Hercegovina',
            },
            {
                code: 'BA-07',
                name: 'Hercegovacko-neretvanski kanton',
            },
            {
                code: 'BA-09',
                name: 'Kanton Sarajevo',
            },
            {
                code: 'BA-10',
                name: 'Livanjski kanton',
            },
            {
                code: 'BA-02',
                name: 'Posavski kanton',
            },
            {
                code: 'BA-SRP',
                name: 'Republika Srpska',
            },
            {
                code: 'BA-06',
                name: 'Srednjobosanski kanton',
            },
            {
                code: 'BA-03',
                name: 'Tuzlanski kanton',
            },
            {
                code: 'BA-01',
                name: 'Unsko-sanski kanton',
            },
            {
                code: 'BA-08',
                name: 'Zapadnohercegovacki kanton',
            },
            {
                code: 'BA-04',
                name: 'Zenicko-dobojski kanton',
            },
        ],
    },
    {
        code: 'BW',
        id: 2208,
        name: 'Botswana',
        states: [
            {
                code: 'BC01',
                name: 'Central',
            },
            {
                code: 'BC12',
                name: 'Chobe',
            },
            {
                code: 'BC13',
                name: 'Francistown',
            },
            {
                code: 'BC14',
                name: 'Gaborone',
            },
            {
                code: 'BC03',
                name: 'Ghanzi',
            },
            {
                code: 'BC15',
                name: 'Jwaneng',
            },
            {
                code: 'BC04',
                name: 'Kgalagadi',
            },
            {
                code: 'BC05',
                name: 'Kgatleng',
            },
            {
                code: 'BC06',
                name: 'Kweneng',
            },
            {
                code: 'BC16',
                name: 'Lobatse',
            },
            {
                code: 'BC08',
                name: 'North-East',
            },
            {
                code: 'BC11',
                name: 'North-West',
            },
            {
                code: 'BC17',
                name: 'Selibe Phikwe',
            },
            {
                code: 'BC09',
                name: 'South East',
            },
            {
                code: 'BC10',
                name: 'Southern',
            },
            {
                code: 'BC18',
                name: 'Sowa Town',
            },
        ],
    },
    {
        code: 'BV',
        id: 2410,
        name: 'Bouvet Island',
        states: [],
    },
    {
        code: 'BR',
        id: 2209,
        name: 'Brazil',
        states: [
            {
                code: 'AC',
                name: 'Acre',
            },
            {
                code: 'AL',
                name: 'Alagoas',
            },
            {
                code: 'AP',
                name: 'Amapá',
            },
            {
                code: 'AM',
                name: 'Amazonas',
            },
            {
                code: 'BA',
                name: 'Bahia',
            },
            {
                code: 'CE',
                name: 'Ceará',
            },
            {
                code: 'DF',
                name: 'Distrito Federal',
            },
            {
                code: 'ES',
                name: 'Espírito Santo',
            },
            {
                code: 'GO',
                name: 'Goiás',
            },
            {
                code: 'MA',
                name: 'Maranhão',
            },
            {
                code: 'MT',
                name: 'Mato Grosso',
            },
            {
                code: 'MS',
                name: 'Mato Grosso do Sul',
            },
            {
                code: 'MG',
                name: 'Minas Gerais',
            },
            {
                code: 'PA',
                name: 'Pará',
            },
            {
                code: 'PR',
                name: 'Paraná',
            },
            {
                code: 'PB',
                name: 'Paraíba',
            },
            {
                code: 'PE',
                name: 'Pernambuco',
            },
            {
                code: 'PI',
                name: 'Piauí',
            },
            {
                code: 'RN',
                name: 'Rio Grande do Norte',
            },
            {
                code: 'RS',
                name: 'Rio Grande do Sul',
            },
            {
                code: 'RJ',
                name: 'Rio de Janeiro',
            },
            {
                code: 'RO',
                name: 'Rondônia',
            },
            {
                code: 'RR',
                name: 'Roraima',
            },
            {
                code: 'SC',
                name: 'Santa Catarina',
            },
            {
                code: 'SP',
                name: 'São Paulo',
            },
            {
                code: 'SE',
                name: 'Sergipe',
            },
            {
                code: 'TO',
                name: 'Tocantins',
            },
        ],
    },
    {
        code: 'IO',
        id: 2411,
        name: 'British Indian Ocean Territory',
        states: [],
    },
    {
        code: 'BN',
        id: 2210,
        name: 'Brunei Darussalam',
        states: [
            {
                code: 'BX01',
                name: 'Amo',
            },
            {
                code: 'BX02',
                name: 'Bandar Seri Begawan',
            },
            {
                code: 'BX03',
                name: 'Bangar',
            },
            {
                code: 'BX04',
                name: 'Batu Apoi',
            },
            {
                code: 'BX05',
                name: 'Berakas',
            },
            {
                code: 'BX06',
                name: 'Bokok',
            },
            {
                code: 'BX07',
                name: 'Bukit Sawat',
            },
            {
                code: 'BX08',
                name: 'Burong Pinggai Ayer',
            },
            {
                code: 'BX09',
                name: 'Gadong',
            },
            {
                code: 'BX10',
                name: 'Keriam',
            },
            {
                code: 'BX11',
                name: 'Kianggeh',
            },
            {
                code: 'BX12',
                name: 'Kilanas',
            },
            {
                code: 'BX13',
                name: 'Kiudang',
            },
            {
                code: 'BX14',
                name: 'Kota Batu',
            },
            {
                code: 'BX15',
                name: 'Kuala Balai',
            },
            {
                code: 'BX16',
                name: 'Kuala Belait',
            },
            {
                code: 'BX17',
                name: 'Labi',
            },
            {
                code: 'BX18',
                name: 'Labu',
            },
            {
                code: 'BX19',
                name: 'Lamunin',
            },
            {
                code: 'BX20',
                name: 'Liang',
            },
            {
                code: 'BX21',
                name: 'Lumapas',
            },
            {
                code: 'BX22',
                name: 'Melilas',
            },
            {
                code: 'BX23',
                name: 'Mentiri',
            },
            {
                code: 'BX24',
                name: 'Pekan Tutong',
            },
            {
                code: 'BX25',
                name: 'Pengkalan Batu',
            },
            {
                code: 'BX26',
                name: 'Peramu',
            },
            {
                code: 'BX27',
                name: 'Rambai',
            },
            {
                code: 'BX28',
                name: 'Saba',
            },
            {
                code: 'BX29',
                name: 'Sengkurong',
            },
            {
                code: 'BX30',
                name: 'Serasa',
            },
            {
                code: 'BX31',
                name: 'Seria',
            },
            {
                code: 'BX32',
                name: 'Sukang',
            },
            {
                code: 'BX33',
                name: 'Sungai Kebun',
            },
            {
                code: 'BX34',
                name: 'Sungai Kedayan',
            },
            {
                code: 'BX35',
                name: 'Tamoi',
            },
            {
                code: 'BX36',
                name: 'Tanjong Maya',
            },
            {
                code: 'BX37',
                name: 'Telisai',
            },
            {
                code: 'BX38',
                name: 'Ukong',
            },
        ],
    },
    {
        code: 'BG',
        id: 2211,
        name: 'Bulgaria',
        states: [
            {
                code: 'BU38',
                name: 'Blagoevgrad',
            },
            {
                code: 'BU39',
                name: 'Burgas',
            },
            {
                code: 'BU40',
                name: 'Dobrich',
            },
            {
                code: 'BU41',
                name: 'Gabrovo',
            },
            {
                code: 'BU42',
                name: 'Grad Sofiya',
            },
            {
                code: 'BU43',
                name: 'Khaskovo',
            },
            {
                code: 'BU44',
                name: 'Kurdzhali',
            },
            {
                code: 'BU45',
                name: 'Kyustendil',
            },
            {
                code: 'BU46',
                name: 'Lovech',
            },
            {
                code: 'BU47',
                name: 'Montana',
            },
            {
                code: 'BU48',
                name: 'Pazardzhik',
            },
            {
                code: 'BU49',
                name: 'Pernik',
            },
            {
                code: 'BU50',
                name: 'Pleven',
            },
            {
                code: 'BU51',
                name: 'Plovdiv',
            },
            {
                code: 'BU52',
                name: 'Razgrad',
            },
            {
                code: 'BU53',
                name: 'Ruse',
            },
            {
                code: 'BU54',
                name: 'Shumen',
            },
            {
                code: 'BU55',
                name: 'Silistra',
            },
            {
                code: 'BU56',
                name: 'Sliven',
            },
            {
                code: 'BU57',
                name: 'Smolyan',
            },
            {
                code: 'BU58',
                name: 'Sofiya',
            },
            {
                code: 'BU59',
                name: 'Stara Zagora',
            },
            {
                code: 'BU60',
                name: 'Turgovishte',
            },
            {
                code: 'BU61',
                name: 'Varna',
            },
            {
                code: 'BU62',
                name: 'Veliko Turnovo',
            },
            {
                code: 'BU63',
                name: 'Vidin',
            },
            {
                code: 'BU64',
                name: 'Vratsa',
            },
            {
                code: 'BU65',
                name: 'Yambol',
            },
        ],
    },
    {
        code: 'BF',
        id: 2212,
        name: 'Burkina Faso',
        states: [
            {
                code: 'UV79',
                name: 'Boucle du Mouhoun',
            },
            {
                code: 'UV80',
                name: 'Cascades',
            },
            {
                code: 'UV82',
                name: 'Centre Est',
            },
            {
                code: 'UV83',
                name: 'Centre Nord',
            },
            {
                code: 'UV84',
                name: 'Centre Ouest',
            },
            {
                code: 'UV81',
                name: 'Centre',
            },
            {
                code: 'UV85',
                name: 'Centre Sud',
            },
            {
                code: 'UV86',
                name: 'Est',
            },
            {
                code: 'UV87',
                name: 'Hauts Bassins',
            },
            {
                code: 'UV88',
                name: 'Nord',
            },
            {
                code: 'UV89',
                name: 'Plateau Central',
            },
            {
                code: 'UV90',
                name: 'Sahel',
            },
            {
                code: 'UV91',
                name: 'Sud-Ouest',
            },
        ],
    },
    {
        code: 'BM',
        id: 2385,
        name: 'Burma',
        states: [
            {
                code: 'BM03',
                name: 'Ayeyarwady',
            },
            {
                code: 'BM16',
                name: 'Bago',
            },
            {
                code: 'BM02',
                name: 'Chin',
            },
            {
                code: 'BM04',
                name: 'Kachin',
            },
            {
                code: 'BM06',
                name: 'Kayah',
            },
            {
                code: 'BM05',
                name: 'Kayin',
            },
            {
                code: 'BM15',
                name: 'Magway',
            },
            {
                code: 'BM08',
                name: 'Mandalay',
            },
            {
                code: 'BM13',
                name: 'Mon',
            },
            {
                code: 'BM18',
                name: 'Naypyidaw',
            },
            {
                code: 'BM01',
                name: 'Rakhine',
            },
            {
                code: 'BM10',
                name: 'Sagaing',
            },
            {
                code: 'BM11',
                name: 'Shan',
            },
            {
                code: 'BM12',
                name: 'Tanintharyi',
            },
            {
                code: 'BM17',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'BI',
        id: 2213,
        name: 'Burundi',
        states: [],
    },
    {
        code: 'KH',
        id: 2214,
        name: 'Cambodia',
        states: [
            {
                code: 'CB25',
                name: 'Bântéay Méanchey',
            },
            {
                code: 'CB29',
                name: 'Batdâmbâng',
            },
            {
                code: 'CB02',
                name: 'Kâmpóng Cham',
            },
            {
                code: 'CB03',
                name: 'Kâmpóng Chhnang',
            },
            {
                code: 'CB04',
                name: 'Kâmpóng Spœ',
            },
            {
                code: 'CB05',
                name: 'Kâmpóng Thum',
            },
            {
                code: 'CB21',
                name: 'Kâmpôt',
            },
            {
                code: 'CB07',
                name: 'Kândal',
            },
            {
                code: 'CB08',
                name: 'Kaôh Kong',
            },
            {
                code: 'CB09',
                name: 'Krâchéh',
            },
            {
                code: 'CB26',
                name: 'Krong Keb',
            },
            {
                code: 'CB30',
                name: 'Krong Pailin',
            },
            {
                code: 'CB28',
                name: 'Krong Preah Sihanouk',
            },
            {
                code: 'CB10',
                name: 'Môndól Kiri',
            },
            {
                code: 'CB27',
                name: 'Otdâr Méanchey',
            },
            {
                code: 'CB22',
                name: 'Phnom Penh',
            },
            {
                code: 'CB12',
                name: 'Pouthisat',
            },
            {
                code: 'CB13',
                name: 'Preah Vihéar',
            },
            {
                code: 'CB14',
                name: 'Prey Vêng',
            },
            {
                code: 'CB23',
                name: 'Rôtânôkiri',
            },
            {
                code: 'CB24',
                name: 'Siemréab',
            },
            {
                code: 'CB17',
                name: 'Stœ?ng Trêng',
            },
            {
                code: 'CB18',
                name: 'Svay Rieng',
            },
            {
                code: 'CB19',
                name: 'Takêv',
            },
            {
                code: 'CB31',
                name: 'Tbong Khmum',
            },
        ],
    },
    {
        code: 'CM',
        id: 2215,
        name: 'Cameroon',
        states: [
            {
                code: 'CM10',
                name: 'Adamaoua',
            },
            {
                code: 'CM11',
                name: 'Centre',
            },
            {
                code: 'CM04',
                name: 'Est',
            },
            {
                code: 'CM12',
                name: 'Extrême-Nord',
            },
            {
                code: 'CM05',
                name: 'Littoral',
            },
            {
                code: 'CM07',
                name: 'Nord-Ouest',
            },
            {
                code: 'CM13',
                name: 'Nord',
            },
            {
                code: 'CM08',
                name: 'Ouest',
            },
            {
                code: 'CM09',
                name: 'Sud-Ouest',
            },
            {
                code: 'CM14',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'CA',
        id: 2216,
        name: 'Canada',
        states: [
            {
                code: 'AB',
                name: 'Alberta',
            },
            {
                code: 'BC',
                name: 'British Columbia',
            },
            {
                code: 'MB',
                name: 'Manitoba',
            },
            {
                code: 'NB',
                name: 'New Brunswick',
            },
            {
                code: 'NL',
                name: 'Newfoundland and Labrador',
            },
            {
                code: 'NT',
                name: 'Northwest Territories',
            },
            {
                code: 'NS',
                name: 'Nova Scotia',
            },
            {
                code: 'NU',
                name: 'Nunavut',
            },
            {
                code: 'ON',
                name: 'Ontario',
            },
            {
                code: 'PE',
                name: 'Prince Edward Island',
            },
            {
                code: 'QC',
                name: 'Quebec',
            },
            {
                code: 'SK',
                name: 'Saskatchewan',
            },
            {
                code: 'YT',
                name: 'Yukon',
            },
        ],
    },
    {
        code: 'CV',
        id: 2217,
        name: 'Cape Verde',
        states: [],
    },
    {
        code: 'KY',
        id: 2379,
        name: 'Cayman Islands',
        states: [
            {
                code: 'KY.BT',
                name: 'Bodden Town',
            },
            {
                code: 'KY.CJ',
                name: 'Cayman Islands',
            },
            {
                code: 'KY.EE',
                name: 'East End',
            },
            {
                code: 'KY.GT',
                name: 'George Town',
            },
            {
                code: 'KY.NS',
                name: 'North Side',
            },
            {
                code: 'KY.SI',
                name: 'Sister Islands',
            },
            {
                code: 'KY.WB',
                name: 'West Bay',
            },
        ],
    },
    {
        code: 'CF',
        id: 2218,
        name: 'Central African Republic',
        states: [
            {
                code: 'CT01',
                name: 'Bamingui-Bangoran',
            },
            {
                code: 'CT18',
                name: 'Bangui',
            },
            {
                code: 'CT02',
                name: 'Basse-Kotto',
            },
            {
                code: 'CT05',
                name: 'Haut-Mbomou',
            },
            {
                code: 'CT03',
                name: 'Haute-Kotto',
            },
            {
                code: 'CT06',
                name: 'Kémo',
            },
            {
                code: 'CT07',
                name: 'Lobaye',
            },
            {
                code: 'CT04',
                name: 'Mambéré-Kadéï',
            },
            {
                code: 'CT08',
                name: 'Mbomou',
            },
            {
                code: 'CT15',
                name: 'Nana-Grébizi',
            },
            {
                code: 'CT09',
                name: 'Nana-Mambéré',
            },
            {
                code: 'CT17',
                name: "Ombella-M'Poko",
            },
            {
                code: 'CT11',
                name: 'Ouaka',
            },
            {
                code: 'CT12',
                name: 'Ouham',
            },
            {
                code: 'CT13',
                name: 'Ouham-Pendé',
            },
            {
                code: 'CT16',
                name: 'Sangha-Mbaéré',
            },
            {
                code: 'CT14',
                name: 'Vakaga',
            },
        ],
    },
    {
        code: 'TD',
        id: 2219,
        name: 'Chad',
        states: [
            {
                code: 'CD22',
                name: 'Barh el Ghazel',
            },
            {
                code: 'CD01',
                name: 'Batha',
            },
            {
                code: 'CD23',
                name: 'Borkou',
            },
            {
                code: 'CD15',
                name: 'Chari-Baguirmi',
            },
            {
                code: 'CD27',
                name: 'Ennedi Est',
            },
            {
                code: 'CD28',
                name: 'Ennedi Ouest',
            },
            {
                code: 'CD05',
                name: 'Guéra',
            },
            {
                code: 'CD18',
                name: 'Hadjer-Lamis',
            },
            {
                code: 'CD06',
                name: 'Kanem',
            },
            {
                code: 'CD07',
                name: 'Lac',
            },
            {
                code: 'CD08',
                name: 'Logone Occidental',
            },
            {
                code: 'CD09',
                name: 'Logone Oriental',
            },
            {
                code: 'CD19',
                name: 'Mandoul',
            },
            {
                code: 'CD16',
                name: 'Mayo-Kebbi Est',
            },
            {
                code: 'CD20',
                name: 'Mayo-Kebbi Ouest',
            },
            {
                code: 'CD17',
                name: 'Moyen-Chari',
            },
            {
                code: 'CD12',
                name: 'Ouaddaï',
            },
            {
                code: 'CD13',
                name: 'Salamat',
            },
            {
                code: 'CD25',
                name: 'Sila',
            },
            {
                code: 'CD14',
                name: 'Tandjilé',
            },
            {
                code: 'CD26',
                name: 'Tibesti',
            },
            {
                code: 'CD21',
                name: "Ville de N'Djamena",
            },
            {
                code: 'CD02',
                name: 'Wadi Fira',
            },
        ],
    },
    {
        code: 'CH99',
        id: 2386,
        name: 'Channel Islands',
        states: [],
    },
    {
        code: 'CL',
        id: 2220,
        name: 'Chile',
        states: [
            {
                code: 'CL.AI',
                name: 'Aisén del General Carlos Ibáñez del Campo',
            },
            {
                code: 'CL.AN',
                name: 'Antofagasta',
            },
            {
                code: 'CL.AR',
                name: 'Araucanía',
            },
            {
                code: 'CL.AP',
                name: 'Arica and Parinacota',
            },
            {
                code: 'CL.AT',
                name: 'Atacama',
            },
            {
                code: 'CL.BI',
                name: 'Bío-Bío',
            },
            {
                code: 'CL.CO',
                name: 'Coquimbo',
            },
            {
                code: 'CL.LI',
                name: "Libertador General Bernardo O'Higgins",
            },
            {
                code: 'CL.LG',
                name: 'Los Lagos',
            },
            {
                code: 'CL.LR',
                name: 'Los Ríos',
            },
            {
                code: 'CL.MA',
                name: 'Magallanes y Antártica Chilena',
            },
            {
                code: 'CL.ML',
                name: 'Maule',
            },
            {
                code: 'CL.RM',
                name: 'Región Metropolitana de Santiago',
            },
            {
                code: 'CL.TP',
                name: 'Tarapacá',
            },
            {
                code: 'CL.VS',
                name: 'Valparaíso',
            },
        ],
    },
    {
        code: 'CN',
        id: 2221,
        name: 'China',
        states: [
            {
                code: 'CH01',
                name: 'Anhui',
            },
            {
                code: 'CH22',
                name: 'Beijing',
            },
            {
                code: 'CH33',
                name: 'Chongqing',
            },
            {
                code: 'CH07',
                name: 'Fujian',
            },
            {
                code: 'CH15',
                name: 'Gansu',
            },
            {
                code: 'CH17',
                name: 'Guangdon',
            },
            {
                code: 'CH30',
                name: 'Guangdong',
            },
            {
                code: 'CH16',
                name: 'Guangxi',
            },
            {
                code: 'CH18',
                name: 'Guizhou',
            },
            {
                code: 'CH31',
                name: 'Hainan',
            },
            {
                code: 'CH10',
                name: 'Hebei',
            },
            {
                code: 'CH08',
                name: 'Heilongjiang',
            },
            {
                code: 'CH09',
                name: 'Henan',
            },
            {
                code: 'CH34',
                name: 'Hong Kong',
            },
            {
                code: 'CH12',
                name: 'Hubei',
            },
            {
                code: 'CH11',
                name: 'Hunan',
            },
            {
                code: 'CH04',
                name: 'Jiangsu',
            },
            {
                code: 'CH03',
                name: 'Jiangxi',
            },
            {
                code: 'CH05',
                name: 'Jilin',
            },
            {
                code: 'CH19',
                name: 'Liaoning',
            },
            {
                code: 'CH20',
                name: 'Nei Mongol',
            },
            {
                code: 'CH21',
                name: 'Ningxia',
            },
            {
                code: 'CH06',
                name: 'Qinghai',
            },
            {
                code: 'CH26',
                name: 'Shaanxi',
            },
            {
                code: 'CH25',
                name: 'Shandong',
            },
            {
                code: 'CH23',
                name: 'Shanghai',
            },
            {
                code: 'CH24',
                name: 'Shanxi',
            },
            {
                code: 'CH32',
                name: 'Sichuan',
            },
            {
                code: 'CH27',
                name: 'Sichuan',
            },
            {
                code: 'CH28',
                name: 'Tianjin',
            },
            {
                code: 'CH13',
                name: 'Xinjiang',
            },
            {
                code: 'CH14',
                name: 'Xizang',
            },
            {
                code: 'CH29',
                name: 'Yunnan',
            },
            {
                code: 'CH02',
                name: 'Zhejiang',
            },
        ],
    },
    {
        code: 'CX',
        id: 2412,
        name: 'Christmas Island',
        states: [],
    },
    {
        code: 'CC',
        id: 2413,
        name: 'Cocos (Keeling) Islands',
        states: [],
    },
    {
        code: 'CO',
        id: 2222,
        name: 'Colombia',
        states: [
            {
                code: 'CO01',
                name: 'Amazonas',
            },
            {
                code: 'CO02',
                name: 'Antioquia',
            },
            {
                code: 'CO03',
                name: 'Arauca',
            },
            {
                code: 'CO04',
                name: 'Atlántico',
            },
            {
                code: 'CO35',
                name: 'Bolívar',
            },
            {
                code: 'CO36',
                name: 'Boyacá',
            },
            {
                code: 'CO37',
                name: 'Caldas',
            },
            {
                code: 'CO08',
                name: 'Caquetá',
            },
            {
                code: 'CO32',
                name: 'Casanare',
            },
            {
                code: 'CO09',
                name: 'Cauca',
            },
            {
                code: 'CO10',
                name: 'Cesar',
            },
            {
                code: 'CO11',
                name: 'Chocó',
            },
            {
                code: 'CO12',
                name: 'Córdoba',
            },
            {
                code: 'CO33',
                name: 'Cundinamarca',
            },
            {
                code: 'CO34',
                name: 'Distrito Capital',
            },
            {
                code: 'CO15',
                name: 'Guainía',
            },
            {
                code: 'CO14',
                name: 'Guaviare',
            },
            {
                code: 'CO16',
                name: 'Huila',
            },
            {
                code: 'CO17',
                name: 'La Guajira',
            },
            {
                code: 'CO38',
                name: 'Magdalena',
            },
            {
                code: 'CO19',
                name: 'Meta',
            },
            {
                code: 'CO20',
                name: 'Nariño',
            },
            {
                code: 'CO21',
                name: 'Norte de Santander',
            },
            {
                code: 'CO22',
                name: 'Putumayo',
            },
            {
                code: 'CO23',
                name: 'Quindío',
            },
            {
                code: 'CO24',
                name: 'Risaralda',
            },
            {
                code: 'CO25',
                name: 'San Andrés y Providencia',
            },
            {
                code: 'CO26',
                name: 'Santander',
            },
            {
                code: 'CO27',
                name: 'Sucre',
            },
            {
                code: 'CO28',
                name: 'Tolima',
            },
            {
                code: 'CO29',
                name: 'Valle del Cauca',
            },
            {
                code: 'CO30',
                name: 'Vaupés',
            },
            {
                code: 'CO31',
                name: 'Vichada',
            },
        ],
    },
    {
        code: 'KM',
        id: 2223,
        name: 'Comoros',
        states: [],
    },
    {
        code: 'ZR',
        id: 2368,
        name: 'Congo; Democratic Republic of',
        states: [
            {
                code: 'CD.BU',
                name: 'Bas-Uélé',
            },
            {
                code: 'CD.HK',
                name: 'Haut-Katanga',
            },
            {
                code: 'CD.HL',
                name: 'Haut-Lomami',
            },
            {
                code: 'CD.HU',
                name: 'Haut-Uélé',
            },
            {
                code: 'CD.IT',
                name: 'Ituri',
            },
            {
                code: 'CD.KS',
                name: 'Kasaï',
            },
            {
                code: 'CD.LL',
                name: 'Kasaï-Central',
            },
            {
                code: 'CD.KO',
                name: 'Kasaï Oriental',
            },
            {
                code: 'CD.KN',
                name: 'Kinshasa',
            },
            {
                code: 'CD.BC',
                name: 'Kongo Central',
            },
            {
                code: 'CD.KG',
                name: 'Kwango',
            },
            {
                code: 'CD.KU',
                name: 'Kwilu',
            },
            {
                code: 'CD.LM',
                name: 'Lomami',
            },
            {
                code: 'CD.LB',
                name: 'Lualaba',
            },
            {
                code: 'CD.MA',
                name: 'Mai-Ndombe',
            },
            {
                code: 'CD.MN',
                name: 'Maniema',
            },
            {
                code: 'CD.MO',
                name: 'Mongala',
            },
            {
                code: 'CD.NK',
                name: 'Nord-Kivu',
            },
            {
                code: 'CD.NU',
                name: 'Nord-Ubangi',
            },
            {
                code: 'CD.SN',
                name: 'Sankuru',
            },
            {
                code: 'CD.SK',
                name: 'Sud-Kivu',
            },
            {
                code: 'CD.SU',
                name: 'Sud-Ubangi',
            },
            {
                code: 'CD.TG',
                name: 'Tanganyika',
            },
            {
                code: 'CD.TO',
                name: 'Tshopo',
            },
            {
                code: 'CD.TP',
                name: 'Tshuapa',
            },
            {
                code: 'CD.ET',
                name: 'Équateur',
            },
        ],
    },
    {
        code: 'CG',
        id: 2383,
        name: 'Congo; Republic of',
        states: [],
    },
    {
        code: 'CK',
        id: 2414,
        name: 'Cook Islands',
        states: [],
    },
    {
        code: 'CR',
        id: 2226,
        name: 'Costa Rica',
        states: [
            {
                code: 'CS01',
                name: 'Alajuela',
            },
            {
                code: 'CS02',
                name: 'Cartago',
            },
            {
                code: 'CS03',
                name: 'Guanacaste',
            },
            {
                code: 'CS04',
                name: 'Heredia',
            },
            {
                code: 'CS06',
                name: 'Limón',
            },
            {
                code: 'CS07',
                name: 'Puntarenas',
            },
            {
                code: 'CS08',
                name: 'San José',
            },
        ],
    },
    {
        code: 'CI',
        id: 2227,
        name: "Cote D'Ivoire",
        states: [
            {
                code: 'IV93',
                name: 'Abidjan',
            },
            {
                code: 'IV76',
                name: 'Bas-Sassandra',
            },
            {
                code: 'IV94',
                name: 'Comoé',
            },
            {
                code: 'IV77',
                name: 'Denguélé',
            },
            {
                code: 'IV95',
                name: 'Gôh-Djiboua',
            },
            {
                code: 'IV81',
                name: 'Lacs',
            },
            {
                code: 'IV82',
                name: 'Lagunes',
            },
            {
                code: 'IV78',
                name: 'Montagnes',
            },
            {
                code: 'IV96',
                name: 'Sassandra-Marahoué',
            },
            {
                code: 'IV87',
                name: 'Savanes',
            },
            {
                code: 'IV90',
                name: 'Vallée du Bandama',
            },
            {
                code: 'IV97',
                name: 'Woroba',
            },
            {
                code: 'IV98',
                name: 'Yamoussoukro',
            },
            {
                code: 'IV92',
                name: 'Zanzan',
            },
        ],
    },
    {
        code: 'HR',
        id: 2228,
        name: 'Croatia',
        states: [
            {
                code: 'HR07',
                name: 'Bjelovarsko-bilogorska',
            },
            {
                code: 'HR12',
                name: 'Brodsko-posavska',
            },
            {
                code: 'HR19',
                name: 'Dubrovacko-neretvanska',
            },
            {
                code: 'HR21',
                name: 'Grad Zagreb',
            },
            {
                code: 'HR-18',
                name: 'Istarska',
            },
            {
                code: 'HR04',
                name: 'Karlovacka',
            },
            {
                code: 'HR06',
                name: 'Koprivnicko-križevacka',
            },
            {
                code: 'HR02',
                name: 'Krapinsko-zagorska',
            },
            {
                code: 'HR09',
                name: 'Licko-senjska',
            },
            {
                code: 'HR20',
                name: 'Medimurska',
            },
            {
                code: 'HR14',
                name: 'Osjecko-baranjska',
            },
            {
                code: 'HR11',
                name: 'Požeško-slavonska',
            },
            {
                code: 'HR08',
                name: 'Primorsko-goranska',
            },
            {
                code: 'HR15',
                name: 'Šibensko-kninska',
            },
            {
                code: 'HR03',
                name: 'Sisacko-moslavacka',
            },
            {
                code: 'HR17',
                name: 'Splitsko-dalmatinska',
            },
            {
                code: 'HR05',
                name: 'Varaždinska',
            },
            {
                code: 'HR10',
                name: 'Viroviticko-podravska',
            },
            {
                code: 'HR16',
                name: 'Vukovarsko-srijemska',
            },
            {
                code: 'HR13',
                name: 'Zadarska',
            },
            {
                code: 'HR01',
                name: 'Zagrebacka',
            },
        ],
    },
    {
        code: 'CU',
        id: 2229,
        name: 'Cuba',
        states: [
            {
                code: 'CU17',
                name: 'Artemisa',
            },
            {
                code: 'CU05',
                name: 'Camagüey',
            },
            {
                code: 'CU07',
                name: 'Ciego de Ávila',
            },
            {
                code: 'CU08',
                name: 'Cienfuegos',
            },
            {
                code: 'CU09',
                name: 'Granma',
            },
            {
                code: 'CU10',
                name: 'Guantánamo',
            },
            {
                code: 'CU12',
                name: 'Holguín',
            },
            {
                code: 'CU04',
                name: 'Isla de la Juventud',
            },
            {
                code: 'CU02',
                name: 'La Habana',
            },
            {
                code: 'CU13',
                name: 'Las Tunas',
            },
            {
                code: 'CU03',
                name: 'Matanzas',
            },
            {
                code: 'CU18',
                name: 'Mayabeque',
            },
            {
                code: 'CU01',
                name: 'Pinar del Río',
            },
            {
                code: 'CU14',
                name: 'Sancti Spíritus',
            },
            {
                code: 'CU15',
                name: 'Santiago de Cuba',
            },
            {
                code: 'CU16',
                name: 'Villa Clara',
            },
        ],
    },
    {
        code: 'C999',
        id: 2387,
        name: 'Curacao',
        states: [
            {
                code: 'CW.CU',
                name: 'Curacao',
            },
        ],
    },
    {
        code: 'CY',
        id: 2230,
        name: 'Cyprus',
        states: [
            {
                code: 'CY01',
                name: 'Famagusta',
            },
            {
                code: 'CY02',
                name: 'Kyrenia',
            },
            {
                code: 'CY03',
                name: 'Larnaca',
            },
            {
                code: 'CY05',
                name: 'Limassol',
            },
            {
                code: 'CY04',
                name: 'Nicosia',
            },
            {
                code: 'CY06',
                name: 'Paphos',
            },
        ],
    },
    {
        code: 'CZ',
        id: 2231,
        name: 'Czech Republic',
        states: [
            {
                code: 'JC',
                name: 'Jihoceský kraj',
            },
            {
                code: 'JM',
                name: 'Jihomoravský kraj',
            },
            {
                code: 'KA',
                name: 'Karlovarský kraj',
            },
            {
                code: 'KR',
                name: 'Královéhradecký kraj',
            },
            {
                code: 'LI',
                name: 'Liberecký kraj',
            },
            {
                code: 'MO',
                name: 'Moravskoslezský kraj',
            },
            {
                code: 'OL',
                name: 'Olomoucký kraj',
            },
            {
                code: 'PA',
                name: 'Pardubický kraj',
            },
            {
                code: 'PL',
                name: 'Plzenský kraj',
            },
            {
                code: 'PR',
                name: 'Praha, hlavní mesto',
            },
            {
                code: 'ST',
                name: 'Stredoceský kraj',
            },
            {
                code: 'VY',
                name: 'Vysocina',
            },
            {
                code: 'ZL',
                name: 'Zlínský kraj',
            },
            {
                code: 'US',
                name: 'Ústecký kraj',
            },
        ],
    },
    {
        code: 'DK',
        id: 2232,
        name: 'Denmark',
        states: [
            {
                code: 'DA01',
                name: 'Arhus County',
            },
            {
                code: 'DA02',
                name: 'Bornholm Regional Municipality',
            },
            {
                code: 'DA17',
                name: 'Capital Region',
            },
            {
                code: 'DA18',
                name: 'Central Jutland Region',
            },
            {
                code: 'DA16',
                name: 'Frederiksberg municipal',
            },
            {
                code: 'DA03',
                name: 'Frederiksborg County',
            },
            {
                code: 'DA04',
                name: 'Fyn County',
            },
            {
                code: 'DA06',
                name: 'Kobenhavn County',
            },
            {
                code: 'DA05',
                name: 'Kobenhavn municipal',
            },
            {
                code: 'DA07',
                name: 'Nordjylland County',
            },
            {
                code: 'DA19',
                name: 'North Jutland Region',
            },
            {
                code: 'DA08',
                name: 'Ribe County',
            },
            {
                code: 'DA09',
                name: 'Ringkobing County',
            },
            {
                code: 'DA10',
                name: 'Roskilde County',
            },
            {
                code: 'DA11',
                name: 'Sonderjylland County',
            },
            {
                code: 'DA21',
                name: 'South Denmark Region',
            },
            {
                code: 'DA12',
                name: 'Storstrom County',
            },
            {
                code: 'DA13',
                name: 'Vejle County',
            },
            {
                code: 'DA14',
                name: 'Vestsjaelland County',
            },
            {
                code: 'DA15',
                name: 'Viborg County',
            },
            {
                code: 'DA20',
                name: 'Zealand Region',
            },
        ],
    },
    {
        code: 'DJ',
        id: 2233,
        name: 'Djibouti',
        states: [],
    },
    {
        code: 'DM',
        id: 2234,
        name: 'Dominica',
        states: [],
    },
    {
        code: 'DO',
        id: 2235,
        name: 'Dominican Republic',
        states: [
            {
                code: 'DR01',
                name: 'Azua',
            },
            {
                code: 'DR02',
                name: 'Bahoruco',
            },
            {
                code: 'DR03',
                name: 'Barahona',
            },
            {
                code: 'DR04',
                name: 'Dajabón',
            },
            {
                code: 'DR34',
                name: 'Distrito Nacional',
            },
            {
                code: 'DR06',
                name: 'Duarte',
            },
            {
                code: 'DR28',
                name: 'El Seibo',
            },
            {
                code: 'DR11',
                name: 'Elías Piña',
            },
            {
                code: 'DR08',
                name: 'Espaillat',
            },
            {
                code: 'DR29',
                name: 'Hato Mayor',
            },
            {
                code: 'DR19',
                name: 'Hermanas Mirabal',
            },
            {
                code: 'DR09',
                name: 'Independencia',
            },
            {
                code: 'DR10',
                name: 'La Altagracia',
            },
            {
                code: 'DR12',
                name: 'La Romana',
            },
            {
                code: 'DR30',
                name: 'La Vega',
            },
            {
                code: 'DR14',
                name: 'María Trinidad Sánchez',
            },
            {
                code: 'DR31',
                name: 'Monseñor Nouel',
            },
            {
                code: 'DR15',
                name: 'Monte Cristi',
            },
            {
                code: 'DR32',
                name: 'Monte Plata',
            },
            {
                code: 'DR16',
                name: 'Pedernales',
            },
            {
                code: 'DR35',
                name: 'Peravia',
            },
            {
                code: 'DR18',
                name: 'Puerto Plata',
            },
            {
                code: 'DR20',
                name: 'Samaná',
            },
            {
                code: 'DR33',
                name: 'San Cristóbal',
            },
            {
                code: 'DR36',
                name: 'San José de Ocoa',
            },
            {
                code: 'DR23',
                name: 'San Juan',
            },
            {
                code: 'DR24',
                name: 'San Pedro de Macorís',
            },
            {
                code: 'DR21',
                name: 'Sánchez Ramírez',
            },
            {
                code: 'DR25',
                name: 'Santiago',
            },
            {
                code: 'DR26',
                name: 'Santiago Rodríguez',
            },
            {
                code: 'DR37',
                name: 'Santo Domingo',
            },
            {
                code: 'DR27',
                name: 'Valverde',
            },
        ],
    },
    {
        code: 'EC',
        id: 2236,
        name: 'Ecuador',
        states: [
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC02',
                name: 'Azuay',
            },
            {
                code: 'EC03',
                name: 'Bolívar',
            },
            {
                code: 'EC04',
                name: 'Cañar',
            },
            {
                code: 'EC05',
                name: 'Carchi',
            },
            {
                code: 'EC06',
                name: 'Chimborazo',
            },
            {
                code: 'EC07',
                name: 'Cotopaxi',
            },
            {
                code: 'EC08',
                name: 'El Oro',
            },
            {
                code: 'EC09',
                name: 'Esmeraldas',
            },
            {
                code: 'EC01',
                name: 'Galápagos',
            },
            {
                code: 'EC10',
                name: 'Guayas',
            },
            {
                code: 'EC11',
                name: 'Imbabura',
            },
            {
                code: 'EC12',
                name: 'Loja',
            },
            {
                code: 'EC13',
                name: 'Los Ríos',
            },
            {
                code: 'EC14',
                name: 'Manabí',
            },
            {
                code: 'EC15',
                name: 'Morona-Santiago',
            },
            {
                code: 'EC23',
                name: 'Napo',
            },
            {
                code: 'EC24',
                name: 'Orellana',
            },
            {
                code: 'EC17',
                name: 'Pastaza',
            },
            {
                code: 'EC18',
                name: 'Pichincha',
            },
            {
                code: 'EC25',
                name: 'Santa Elena',
            },
            {
                code: 'EC26',
                name: 'Santo Domingo de los Tsáchilas',
            },
            {
                code: 'EC22',
                name: 'Sucumbíos',
            },
            {
                code: 'EC19',
                name: 'Tungurahua',
            },
            {
                code: 'EC20',
                name: 'Zamora-Chinchipe',
            },
        ],
    },
    {
        code: 'EG',
        id: 2237,
        name: 'Egypt',
        states: [
            {
                code: 'EG01',
                name: 'Ad Daqahliyah',
            },
            {
                code: 'EG02',
                name: 'Al Bahr al Ahmar',
            },
            {
                code: 'EG03',
                name: 'Al Buhayrah',
            },
            {
                code: 'EG04',
                name: 'Al Fayyum',
            },
            {
                code: 'EG05',
                name: 'Al Gharbiyah',
            },
            {
                code: 'EG06',
                name: 'Al Iskandariyah',
            },
            {
                code: 'EG07',
                name: 'Al Isma`iliyah',
            },
            {
                code: 'EG08',
                name: 'Al Jizah',
            },
            {
                code: 'EG09',
                name: 'Al Minufiyah',
            },
            {
                code: 'EG10',
                name: 'Al Minya',
            },
            {
                code: 'EG11',
                name: 'Al Qahirah',
            },
            {
                code: 'EG12',
                name: 'Al Qalyubiyah',
            },
            {
                code: 'EG28',
                name: 'Al Uqsur',
            },
            {
                code: 'EG13',
                name: 'Al Wadi al Jadid',
            },
            {
                code: 'EG15',
                name: 'As Suways',
            },
            {
                code: 'EG14',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'EG16',
                name: 'Aswan',
            },
            {
                code: 'EG17',
                name: 'Asyut',
            },
            {
                code: 'EG18',
                name: 'Bani Suwayf',
            },
            {
                code: 'EG19',
                name: 'Bur Sa`id',
            },
            {
                code: 'EG20',
                name: 'Dumyat',
            },
            {
                code: 'EG26',
                name: 'Janub Sina',
            },
            {
                code: 'EG21',
                name: 'Kafr ash Shaykh',
            },
            {
                code: 'EG22',
                name: 'Matruh',
            },
            {
                code: 'EG23',
                name: 'Qina',
            },
            {
                code: 'EG27',
                name: 'Shamal Sina',
            },
            {
                code: 'EG24',
                name: 'Suhaj',
            },
        ],
    },
    {
        code: 'SV',
        id: 2238,
        name: 'El Salvador',
        states: [
            {
                code: 'ES01',
                name: 'Ahuachapán',
            },
            {
                code: 'ES02',
                name: 'Cabañas',
            },
            {
                code: 'ES03',
                name: 'Chalatenango',
            },
            {
                code: 'ES04',
                name: 'Cuscatlán',
            },
            {
                code: 'ES05',
                name: 'La Libertad',
            },
            {
                code: 'ES06',
                name: 'La Paz',
            },
            {
                code: 'ES07',
                name: 'La Unión',
            },
            {
                code: 'ES08',
                name: 'Morazán',
            },
            {
                code: 'ES09',
                name: 'San Miguel',
            },
            {
                code: 'ES10',
                name: 'San Salvador',
            },
            {
                code: 'ES12',
                name: 'San Vicente',
            },
            {
                code: 'ES11',
                name: 'Santa Ana',
            },
            {
                code: 'ES13',
                name: 'Sonsonate',
            },
            {
                code: 'ES14',
                name: 'Usulután',
            },
        ],
    },
    {
        code: 'GQ',
        id: 2239,
        name: 'Equatorial Guinea',
        states: [],
    },
    {
        code: 'ER',
        id: 2240,
        name: 'Eritrea',
        states: [],
    },
    {
        code: 'EE',
        id: 2241,
        name: 'Estonia',
        states: [
            {
                code: 'EN01',
                name: 'Harju',
            },
            {
                code: 'EN02',
                name: 'Hiiu',
            },
            {
                code: 'EN03',
                name: 'Ida-Viru',
            },
            {
                code: 'EN04',
                name: 'Järva',
            },
            {
                code: 'EN05',
                name: 'Jõgeva',
            },
            {
                code: 'EN07',
                name: 'Lääne',
            },
            {
                code: 'EN08',
                name: 'Lääne-Viru',
            },
            {
                code: 'EN11',
                name: 'Pärnu',
            },
            {
                code: 'EN12',
                name: 'Põlva',
            },
            {
                code: 'EN13',
                name: 'Rapla',
            },
            {
                code: 'EN14',
                name: 'Saare',
            },
            {
                code: 'EN18',
                name: 'Tartu',
            },
            {
                code: 'EN19',
                name: 'Valga',
            },
            {
                code: 'EN20',
                name: 'Viljandi',
            },
            {
                code: 'EN21',
                name: 'Võru',
            },
        ],
    },
    {
        code: 'ET',
        id: 2242,
        name: 'Ethiopia',
        states: [
            {
                code: 'ET44',
                name: 'Addis Ababa',
            },
            {
                code: 'ET45',
                name: 'Afar',
            },
            {
                code: 'ET46',
                name: 'Amhara',
            },
            {
                code: 'ET47',
                name: 'Benshangul-Gumaz',
            },
            {
                code: 'ET48',
                name: 'Dire Dawa',
            },
            {
                code: 'ET49',
                name: 'Gambela Peoples',
            },
            {
                code: 'ET50',
                name: 'Harari People',
            },
            {
                code: 'ET51',
                name: 'Oromia',
            },
            {
                code: 'ET52',
                name: 'Somali',
            },
            {
                code: 'ET54',
                name: 'Southern Nations, Nationalities and Peoples',
            },
            {
                code: 'ET53',
                name: 'Tigray',
            },
        ],
    },
    {
        code: 'FK',
        id: 2415,
        name: 'Falkland Islands (Malvinas)',
        states: [],
    },
    {
        code: 'FI99',
        id: 2388,
        name: 'Faroe Islands',
        states: [],
    },
    {
        code: 'FJ',
        id: 2243,
        name: 'Fiji',
        states: [],
    },
    {
        code: 'FI',
        id: 2244,
        name: 'Finland',
        states: [
            {
                code: 'FI-AL',
                name: 'Ahvenanmaan lääni',
            },
            {
                code: 'AX',
                name: 'Ahvenanmaa',
            },
            {
                code: 'FI.SK',
                name: 'Etelä-Karjala',
            },
            {
                code: 'FI.SO',
                name: 'Etelä-Pohjanmaa',
            },
            {
                code: 'FI.SS',
                name: 'Etelä-Savo',
            },
            {
                code: 'FI-ES',
                name: 'Etelä-Suomen lääni',
            },
            {
                code: 'FI-IS',
                name: 'Itä-Suomen lääni',
            },
            {
                code: 'FI.KA',
                name: 'Kainuu',
            },
            {
                code: 'FI.KH',
                name: 'Kanta-Häme',
            },
            {
                code: 'FI.CO',
                name: 'Keski-Pohjanmaa',
            },
            {
                code: 'FI.CF',
                name: 'Keski-Suomi',
            },
            {
                code: 'FI.KY',
                name: 'Kymenlaakso',
            },
            {
                code: 'FI-LS',
                name: 'Länsi-Suomen lääni',
            },
            {
                code: 'FI-LL',
                name: 'Lapin lääni',
            },
            {
                code: 'FI.LA',
                name: 'Lappi',
            },
            {
                code: 'FI-OL',
                name: 'Oulun lääni',
            },
            {
                code: 'FI.PH',
                name: 'Päijät-Häme',
            },
            {
                code: 'FI.TR',
                name: 'Pirkanmaa',
            },
            {
                code: 'FI.OS',
                name: 'Pohjanmaa',
            },
            {
                code: 'FI.NK',
                name: 'Pohjois-Karjala',
            },
            {
                code: 'FI.NO',
                name: 'Pohjois-Pohjanmaa',
            },
            {
                code: 'FI.NS',
                name: 'Pohjois-Savo',
            },
            {
                code: 'FI.SA',
                name: 'Satakunta',
            },
            {
                code: 'FI.US',
                name: 'Uusimaa',
            },
            {
                code: 'FI.SF',
                name: 'Varsinais-Suomi',
            },
        ],
    },
    {
        code: 'FR',
        id: 2245,
        name: 'France',
        states: [
            {
                code: 'FRC2',
                name: 'Ain',
            },
            {
                code: 'FRC3',
                name: 'Aisne',
            },
            {
                code: 'FRC4',
                name: 'Allier',
            },
            {
                code: 'FRC6',
                name: 'Alpes-Maritimes',
            },
            {
                code: 'FRC5',
                name: 'Alpes-de-Haute-Provence',
            },
            {
                code: 'FRC1',
                name: 'Alsace',
            },
            {
                code: 'FR97',
                name: 'Aquitaine',
            },
            {
                code: 'FRC7',
                name: 'Ardèche',
            },
            {
                code: 'FRC8',
                name: 'Ardennes',
            },
            {
                code: 'FRC9',
                name: 'Ariège',
            },
            {
                code: 'FRD1',
                name: 'Aube',
            },
            {
                code: 'FRD2',
                name: 'Aude',
            },
            {
                code: 'FR.AR',
                name: 'Auvergne-Rhône-Alpes',
            },
            {
                code: 'FR98',
                name: 'Auvergne',
            },
            {
                code: 'FRD3',
                name: 'Aveyron',
            },
            {
                code: 'FRD4',
                name: 'Bas-Rhin',
            },
            {
                code: 'FR99',
                name: 'Basse-Normandie',
            },
            {
                code: 'FRD5',
                name: 'Bouches-du-Rhône',
            },
            {
                code: 'FR.BF',
                name: 'Bourgogne-Franche-Comté',
            },
            {
                code: 'FRA1',
                name: 'Bourgogne',
            },
            {
                code: 'FRA2',
                name: 'Bretagne',
            },
            {
                code: 'FRD8',
                name: 'Calvados',
            },
            {
                code: 'FRD9',
                name: 'Cantal',
            },
            {
                code: 'FRA3',
                name: 'Centre',
            },
            {
                code: 'FR.CN',
                name: 'Centre-Val de Loire',
            },
            {
                code: 'FRA4',
                name: 'Champagne-Ardenne',
            },
            {
                code: 'FRE1',
                name: 'Charente-Maritime',
            },
            {
                code: 'FRE2',
                name: 'Charente',
            },
            {
                code: 'FRE3',
                name: 'Cher',
            },
            {
                code: 'FRE4',
                name: 'Corrèze',
            },
            {
                code: 'FRE5',
                name: 'Corse-du-Sud',
            },
            {
                code: 'FR.CE',
                name: 'Corse',
            },
            {
                code: 'FRD6',
                name: "Côte-d'Or",
            },
            {
                code: 'FRD7',
                name: "Côtes-d'Armor",
            },
            {
                code: 'FRE6',
                name: 'Creuse',
            },
            {
                code: 'FRE7',
                name: 'Deux-Sèvres',
            },
            {
                code: 'FRE8',
                name: 'Dordogne',
            },
            {
                code: 'FRE9',
                name: 'Doubs',
            },
            {
                code: 'FRF1',
                name: 'Drôme',
            },
            {
                code: 'FRF2',
                name: 'Essonne',
            },
            {
                code: 'FRF3',
                name: 'Eure-et-Loir',
            },
            {
                code: 'FRF4',
                name: 'Eure',
            },
            {
                code: 'FRF5',
                name: 'Finistère',
            },
            {
                code: 'FRA6',
                name: 'Franche-Comte',
            },
            {
                code: 'FRF6',
                name: 'Gard',
            },
            {
                code: 'FRF7',
                name: 'Gers',
            },
            {
                code: 'FRF8',
                name: 'Gironde',
            },
            {
                code: 'FR.AO',
                name: 'Grand Est',
            },
            {
                code: 'FRG1',
                name: 'Haut-Rhin',
            },
            {
                code: 'FRG2',
                name: 'Haute-Corse',
            },
            {
                code: 'FRG3',
                name: 'Haute-Garonne',
            },
            {
                code: 'FRG4',
                name: 'Haute-Loire',
            },
            {
                code: 'FRG5',
                name: 'Haute-Marne',
            },
            {
                code: 'FRA7',
                name: 'Haute-Normandie',
            },
            {
                code: 'FRG6',
                name: 'Haute-Saône',
            },
            {
                code: 'FRG7',
                name: 'Haute-Savoie',
            },
            {
                code: 'FRG8',
                name: 'Haute-Vienne',
            },
            {
                code: 'FRG9',
                name: 'Hautes-Alpes',
            },
            {
                code: 'FRH1',
                name: 'Hautes-Pyrénées',
            },
            {
                code: 'FR.NC',
                name: 'Hauts-de-France',
            },
            {
                code: 'FRH2',
                name: 'Hauts-de-Seine',
            },
            {
                code: 'FRF9',
                name: 'Hérault',
            },
            {
                code: 'FRA8',
                name: 'Ile-de-France',
            },
            {
                code: 'FRH3',
                name: 'Ille-et-Vilaine',
            },
            {
                code: 'FRH5',
                name: 'Indre',
            },
            {
                code: 'FRH4',
                name: 'Indre-et-Loire',
            },
            {
                code: 'FRH6',
                name: 'Isère',
            },
            {
                code: 'FRH7',
                name: 'Jura',
            },
            {
                code: 'FRH8',
                name: 'Landes',
            },
            {
                code: 'FRA9',
                name: 'Languedoc-Roussillon',
            },
            {
                code: 'FRB1',
                name: 'Limousin',
            },
            {
                code: 'FRI3',
                name: 'Loir-et-Cher',
            },
            {
                code: 'FRI2',
                name: 'Loiret',
            },
            {
                code: 'FRI1',
                name: 'Loire',
            },
            {
                code: 'FRH9',
                name: 'Loire-Atlantique',
            },
            {
                code: 'FRB2',
                name: 'Lorraine',
            },
            {
                code: 'FRI4',
                name: 'Lot-et-Garonne',
            },
            {
                code: 'FRI5',
                name: 'Lot',
            },
            {
                code: 'FRI6',
                name: 'Lozère',
            },
            {
                code: 'FRI7',
                name: 'Maine-et-Loire',
            },
            {
                code: 'FRI8',
                name: 'Manche',
            },
            {
                code: 'FRI9',
                name: 'Marne',
            },
            {
                code: 'FRJ1',
                name: 'Mayenne',
            },
            {
                code: 'FRJ2',
                name: 'Meurthe-et-Moselle',
            },
            {
                code: 'FRJ3',
                name: 'Meuse',
            },
            {
                code: 'FRB3',
                name: 'Midi-Pyrenees',
            },
            {
                code: 'FRJ4',
                name: 'Morbihan',
            },
            {
                code: 'FRJ5',
                name: 'Moselle',
            },
            {
                code: 'FRJ6',
                name: 'Nièvre',
            },
            {
                code: 'FRJ7',
                name: 'Nord France',
            },
            {
                code: 'FR67',
                name: 'Nord',
            },
            {
                code: 'FR.ND',
                name: 'Normandie',
            },
            {
                code: 'FR.AC',
                name: 'Nouvelle-Aquitaine',
            },
            {
                code: 'FR.LP',
                name: 'Occitanie',
            },
            {
                code: 'FRJ8',
                name: 'Oise',
            },
            {
                code: 'FRJ9',
                name: 'Orne',
            },
            {
                code: 'FRK1',
                name: 'Paris',
            },
            {
                code: 'FRB4',
                name: 'Pas-de-Calais',
            },
            {
                code: 'FRB5',
                name: 'Pays de la Loire',
            },
            {
                code: 'FRB6',
                name: 'Picardie',
            },
            {
                code: 'FRB7',
                name: 'Poitou-Charentes',
            },
            {
                code: 'FRB8',
                name: "Provence-Alpes-Cote d'Azur",
            },
            {
                code: 'FRK2',
                name: 'Puy-de-Dôme',
            },
            {
                code: 'FRK3',
                name: 'Pyrénées-Atlantiques',
            },
            {
                code: 'FRK4',
                name: 'Pyrénées-Orientales',
            },
            {
                code: 'FRB9',
                name: 'Rhône',
            },
            {
                code: 'FRK5',
                name: 'Saône-et-Loire',
            },
            {
                code: 'FRK6',
                name: 'Sarthe',
            },
            {
                code: 'FRK7',
                name: 'Savoie',
            },
            {
                code: 'FRK9',
                name: 'Seine-Maritime',
            },
            {
                code: 'FRL1',
                name: 'Seine-Saint-Denis',
            },
            {
                code: 'FRK8',
                name: 'Seine-et-Marne',
            },
            {
                code: 'FRL2',
                name: 'Somme',
            },
            {
                code: 'FRL3',
                name: 'Tarn-et-Garonne',
            },
            {
                code: 'FRL4',
                name: 'Tarn',
            },
            {
                code: 'FRL5',
                name: 'Territoire de Belfor',
            },
            {
                code: 'FR14',
                name: 'Territoire de Belfort',
            },
            {
                code: 'FRL6',
                name: "Val-d'Oise",
            },
            {
                code: 'FRL7',
                name: 'Val-de-Marne',
            },
            {
                code: 'FRL8',
                name: 'Var',
            },
            {
                code: 'FRL9',
                name: 'Vaucluse',
            },
            {
                code: 'FRM1',
                name: 'Vendée',
            },
            {
                code: 'FRM2',
                name: 'Vienne',
            },
            {
                code: 'FR94',
                name: 'Ville de Paris',
            },
            {
                code: 'FRM3',
                name: 'Vosges',
            },
            {
                code: 'FRM4',
                name: 'Yonne',
            },
            {
                code: 'FRM5',
                name: 'Yvelines',
            },
            {
                code: 'FR.IF',
                name: 'Île-de-France',
            },
        ],
    },
    {
        code: 'GF',
        id: 2416,
        name: 'French Guiana',
        states: [],
    },
    {
        code: 'PF',
        id: 2417,
        name: 'French Polynesia',
        states: [],
    },
    {
        code: 'TF',
        id: 2418,
        name: 'French Southern Territories',
        states: [],
    },
    {
        code: 'GA',
        id: 2246,
        name: 'Gabon',
        states: [
            {
                code: 'GB01',
                name: 'Estuaire',
            },
            {
                code: 'GB02',
                name: 'Haut-Ogooué',
            },
            {
                code: 'GB03',
                name: 'Moyen-Ogooué',
            },
            {
                code: 'GB04',
                name: 'Ngounié',
            },
            {
                code: 'GB05',
                name: 'Nyanga',
            },
            {
                code: 'GB06',
                name: 'Ogooué-Ivindo',
            },
            {
                code: 'GB07',
                name: 'Ogooué-Lolo',
            },
            {
                code: 'GB08',
                name: 'Ogooué-Maritime',
            },
            {
                code: 'GB09',
                name: 'Woleu-Ntem',
            },
        ],
    },
    {
        code: 'GM',
        id: 2389,
        name: 'Gambia',
        states: [
            {
                code: 'GA01',
                name: 'Banjul',
            },
            {
                code: 'GA03',
                name: 'Central River',
            },
            {
                code: 'GA02',
                name: 'Lower River',
            },
            {
                code: 'GA07',
                name: 'North Bank',
            },
            {
                code: 'GA04',
                name: 'Upper River',
            },
            {
                code: 'GA05',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'GE',
        id: 2248,
        name: 'Georgia',
        states: [
            {
                code: 'GG02',
                name: 'Abkhazia',
            },
            {
                code: 'GG04',
                name: 'Ajaria',
            },
            {
                code: 'GG65',
                name: 'Guria',
            },
            {
                code: 'GG66',
                name: 'Imereti',
            },
            {
                code: 'GG67',
                name: 'Kakheti',
            },
            {
                code: 'GG68',
                name: 'Kvemo Kartli',
            },
            {
                code: 'GG69',
                name: 'Mtskheta-Mtianeti',
            },
            {
                code: 'GG70',
                name: 'Racha-Lochkhumi-Kvemo Svaneti',
            },
            {
                code: 'GG71',
                name: 'Samegrelo-Zemo Svaneti',
            },
            {
                code: 'GG72',
                name: 'Samtskhe-Javakheti',
            },
            {
                code: 'GG73',
                name: 'Shida Kartli',
            },
            {
                code: 'GG51',
                name: 'Tbilisi',
            },
        ],
    },
    {
        code: 'DE',
        id: 2249,
        name: 'Germany',
        states: [
            {
                code: 'BW',
                name: 'Baden-Württemberg',
            },
            {
                code: 'BY',
                name: 'Bayern',
            },
            {
                code: 'BE',
                name: 'Berlin',
            },
            {
                code: 'BB',
                name: 'Brandenburg',
            },
            {
                code: 'HB',
                name: 'Bremen',
            },
            {
                code: 'HH',
                name: 'Hamburg',
            },
            {
                code: 'HE',
                name: 'Hessen',
            },
            {
                code: 'MV',
                name: 'Mecklenburg-Vorpommern',
            },
            {
                code: 'NI',
                name: 'Niedersachsen',
            },
            {
                code: 'NW',
                name: 'Nordrhein-Westfalen',
            },
            {
                code: 'RP',
                name: 'Rheinland-Pfalz',
            },
            {
                code: 'SL',
                name: 'Saarland',
            },
            {
                code: 'SN',
                name: 'Sachsen',
            },
            {
                code: 'ST',
                name: 'Sachsen-Anhalt',
            },
            {
                code: 'SH',
                name: 'Schleswig-Holstein',
            },
            {
                code: 'TH',
                name: 'Thüringen',
            },
        ],
    },
    {
        code: 'GH',
        id: 2250,
        name: 'Ghana',
        states: [
            {
                code: 'GH02',
                name: 'Ashanti',
            },
            {
                code: 'GH03',
                name: 'Brong-Ahafo',
            },
            {
                code: 'GH04',
                name: 'Central',
            },
            {
                code: 'GH05',
                name: 'Eastern',
            },
            {
                code: 'GH01',
                name: 'Greater Accra',
            },
            {
                code: 'GH06',
                name: 'Northern',
            },
            {
                code: 'GH10',
                name: 'Upper East',
            },
            {
                code: 'GH11',
                name: 'Upper West',
            },
            {
                code: 'GH08',
                name: 'Volta',
            },
            {
                code: 'GH09',
                name: 'Western',
            },
        ],
    },
    {
        code: 'G999',
        id: 2390,
        name: 'Gibraltar',
        states: [
            {
                code: 'GI.GI',
                name: 'Gibraltar',
            },
        ],
    },
    {
        code: 'GR',
        id: 2251,
        name: 'Greece',
        states: [
            {
                code: '13',
                name: 'Achaïa',
            },
            {
                code: '69',
                name: 'Agio Oros',
            },
            {
                code: '01',
                name: 'Aitolia kai Akarnania',
            },
            {
                code: '11',
                name: 'Argolida',
            },
            {
                code: '12',
                name: 'Arkadia',
            },
            {
                code: '31',
                name: 'Arta',
            },
            {
                code: 'A1',
                name: 'Attiki',
            },
            {
                code: '64',
                name: 'Chalkidiki',
            },
            {
                code: '94',
                name: 'Chania',
            },
            {
                code: '85',
                name: 'Chios',
            },
            {
                code: '81',
                name: 'Dodekanisos',
            },
            {
                code: '52',
                name: 'Drama',
            },
            {
                code: '71',
                name: 'Evros',
            },
            {
                code: '05',
                name: 'Evrytania',
            },
            {
                code: '04',
                name: 'Evvoia',
            },
            {
                code: '63',
                name: 'Florina',
            },
            {
                code: '07',
                name: 'Fokida',
            },
            {
                code: '06',
                name: 'Fthiotida',
            },
            {
                code: '51',
                name: 'Grevena',
            },
            {
                code: '14',
                name: 'Ileia',
            },
            {
                code: '53',
                name: 'Imathia',
            },
            {
                code: '33',
                name: 'Ioannina',
            },
            {
                code: '91',
                name: 'Irakleio',
            },
            {
                code: '41',
                name: 'Karditsa',
            },
            {
                code: '56',
                name: 'Kastoria',
            },
            {
                code: '55',
                name: 'Kavala',
            },
            {
                code: '23',
                name: 'Kefallonia',
            },
            {
                code: '22',
                name: 'Kerkyra',
            },
            {
                code: '57',
                name: 'Kilkis',
            },
            {
                code: '15',
                name: 'Korinthia',
            },
            {
                code: '58',
                name: 'Kozani',
            },
            {
                code: '82',
                name: 'Kyklades',
            },
            {
                code: '16',
                name: 'Lakonia',
            },
            {
                code: '42',
                name: 'Larisa',
            },
            {
                code: '92',
                name: 'Lasithi',
            },
            {
                code: '24',
                name: 'Lefkada',
            },
            {
                code: '83',
                name: 'Lesvos',
            },
            {
                code: '43',
                name: 'Magnisia',
            },
            {
                code: '17',
                name: 'Messinia',
            },
            {
                code: '59',
                name: 'Pella',
            },
            {
                code: '61',
                name: 'Pieria',
            },
            {
                code: '34',
                name: 'Preveza',
            },
            {
                code: '93',
                name: 'Rethymno',
            },
            {
                code: '73',
                name: 'Rodopi',
            },
            {
                code: '84',
                name: 'Samos',
            },
            {
                code: '62',
                name: 'Serres',
            },
            {
                code: '32',
                name: 'Thesprotia',
            },
            {
                code: '54',
                name: 'Thessaloniki',
            },
            {
                code: '44',
                name: 'Trikala',
            },
            {
                code: '03',
                name: 'Voiotia',
            },
            {
                code: '72',
                name: 'Xanthi',
            },
            {
                code: '21',
                name: 'Zakynthos',
            },
        ],
    },
    {
        code: 'GL',
        id: 2252,
        name: 'Greenland',
        states: [],
    },
    {
        code: 'GD',
        id: 2253,
        name: 'Grenada',
        states: [],
    },
    {
        code: 'GP',
        id: 2419,
        name: 'Guadeloupe',
        states: [],
    },
    {
        code: 'GU',
        id: 2376,
        name: 'Guam',
        states: [],
    },
    {
        code: 'GT',
        id: 2371,
        name: 'Guatemala',
        states: [
            {
                code: 'GT01',
                name: 'Alta Verapaz',
            },
            {
                code: 'GT02',
                name: 'Baja Verapaz',
            },
            {
                code: 'GT03',
                name: 'Chimaltenango',
            },
            {
                code: 'GT04',
                name: 'Chiquimula',
            },
            {
                code: 'GT05',
                name: 'El Progreso',
            },
            {
                code: 'GT06',
                name: 'Escuintla',
            },
            {
                code: 'GT07',
                name: 'Guatemala',
            },
            {
                code: 'GT08',
                name: 'Huehuetenango',
            },
            {
                code: 'GT09',
                name: 'Izabal',
            },
            {
                code: 'GT10',
                name: 'Jalapa',
            },
            {
                code: 'GT11',
                name: 'Jutiapa',
            },
            {
                code: 'GT12',
                name: 'Petén',
            },
            {
                code: 'GT13',
                name: 'Quetzaltenango',
            },
            {
                code: 'GT14',
                name: 'Quiché',
            },
            {
                code: 'GT15',
                name: 'Retalhuleu',
            },
            {
                code: 'GT16',
                name: 'Sacatepéquez',
            },
            {
                code: 'GT17',
                name: 'San Marcos',
            },
            {
                code: 'GT18',
                name: 'Santa Rosa',
            },
            {
                code: 'GT19',
                name: 'Sololá',
            },
            {
                code: 'GT20',
                name: 'Suchitepéquez',
            },
            {
                code: 'GT21',
                name: 'Totonicapán',
            },
            {
                code: 'GT22',
                name: 'Zacapa',
            },
        ],
    },
    {
        code: 'GG',
        id: 2420,
        name: 'Guernsey',
        states: [],
    },
    {
        code: 'GN',
        id: 2255,
        name: 'Guinea',
        states: [
            {
                code: 'GV01',
                name: 'Beyla',
            },
            {
                code: 'GV02',
                name: 'Boffa',
            },
            {
                code: 'GV03',
                name: 'Boké',
            },
            {
                code: 'GV04',
                name: 'Conakry',
            },
            {
                code: 'GV30',
                name: 'Coyah',
            },
            {
                code: 'GV05',
                name: 'Dabola',
            },
            {
                code: 'GV06',
                name: 'Dalaba',
            },
            {
                code: 'GV07',
                name: 'Dinguiraye',
            },
            {
                code: 'GV31',
                name: 'Dubréka',
            },
            {
                code: 'GV09',
                name: 'Faranah',
            },
            {
                code: 'GV10',
                name: 'Forécariah',
            },
            {
                code: 'GV11',
                name: 'Fria',
            },
            {
                code: 'GV12',
                name: 'Gaoual',
            },
            {
                code: 'GV13',
                name: 'Guéckédou',
            },
            {
                code: 'GV32',
                name: 'Kankan',
            },
            {
                code: 'GV15',
                name: 'Kérouané',
            },
            {
                code: 'GV16',
                name: 'Kindia',
            },
            {
                code: 'GV17',
                name: 'Kissidougou',
            },
            {
                code: 'GV33',
                name: 'Koubia',
            },
            {
                code: 'GV18',
                name: 'Koundara',
            },
            {
                code: 'GV19',
                name: 'Kouroussa',
            },
            {
                code: 'GV34',
                name: 'Labé',
            },
            {
                code: 'GV35',
                name: 'Lélouma',
            },
            {
                code: 'GV36',
                name: 'Lola',
            },
            {
                code: 'GV21',
                name: 'Macenta',
            },
            {
                code: 'GV22',
                name: 'Mali',
            },
            {
                code: 'GV23',
                name: 'Mamou',
            },
            {
                code: 'GV37',
                name: 'Mandiana',
            },
            {
                code: 'GV38',
                name: 'Nzérékoré',
            },
            {
                code: 'GV25',
                name: 'Pita',
            },
            {
                code: 'GV39',
                name: 'Siguiri',
            },
            {
                code: 'GV27',
                name: 'Télimélé',
            },
            {
                code: 'GV28',
                name: 'Tougué',
            },
            {
                code: 'GV29',
                name: 'Yomou',
            },
        ],
    },
    {
        code: 'GW',
        id: 2256,
        name: 'Guinea-Bissau',
        states: [
            {
                code: 'PU01',
                name: 'Bafatá',
            },
            {
                code: 'PU12',
                name: 'Biombo',
            },
            {
                code: 'PU11',
                name: 'Bissau',
            },
            {
                code: 'PU05',
                name: 'Bolama',
            },
            {
                code: 'PU06',
                name: 'Cacheu',
            },
            {
                code: 'PU10',
                name: 'Gabú',
            },
            {
                code: 'PU04',
                name: 'Oio',
            },
            {
                code: 'PU02',
                name: 'Quinara',
            },
            {
                code: 'PU07',
                name: 'Tombali',
            },
        ],
    },
    {
        code: 'GY',
        id: 2257,
        name: 'Guyana',
        states: [
            {
                code: 'GY10',
                name: 'Barima-Waini',
            },
            {
                code: 'GY11',
                name: 'Cuyuni-Mazaruni',
            },
            {
                code: 'GY12',
                name: 'Demerara-Mahaica',
            },
            {
                code: 'GY13',
                name: 'East Berbice-Corentyne',
            },
            {
                code: 'GY14',
                name: 'Essequibo Islands-West Demerara',
            },
            {
                code: 'GY15',
                name: 'Mahaica-Berbice',
            },
            {
                code: 'GY16',
                name: 'Pomeroon-Supenaam',
            },
            {
                code: 'GY17',
                name: 'Potaro-Siparuni',
            },
            {
                code: 'GY18',
                name: 'Upper Demerara-Berbice',
            },
            {
                code: 'GY19',
                name: 'Upper Takutu-Upper Essequibo',
            },
        ],
    },
    {
        code: 'HT',
        id: 2258,
        name: 'Haiti',
        states: [
            {
                code: 'HA07',
                name: 'Centre',
            },
            {
                code: 'HA14',
                name: "Grand' Anse",
            },
            {
                code: 'HA06',
                name: "L'Artibonite",
            },
            {
                code: 'HA15',
                name: 'Nippes',
            },
            {
                code: 'HA10',
                name: 'Nord-Est',
            },
            {
                code: 'HA03',
                name: 'Nord-Ouest',
            },
            {
                code: 'HA09',
                name: 'Nord',
            },
            {
                code: 'HA11',
                name: 'Ouest',
            },
            {
                code: 'HA13',
                name: 'Sud-Est',
            },
            {
                code: 'HA12',
                name: 'Sud',
            },
        ],
    },
    {
        code: 'HM',
        id: 2421,
        name: 'Heard and McDonald Islands',
        states: [],
    },
    {
        code: 'VA',
        id: 2362,
        name: 'Holy See (Vatican City State)',
        states: [],
    },
    {
        code: 'HN',
        id: 2259,
        name: 'Honduras',
        states: [
            {
                code: 'HO01',
                name: 'Atlántida',
            },
            {
                code: 'HO02',
                name: 'Choluteca',
            },
            {
                code: 'HO03',
                name: 'Colón',
            },
            {
                code: 'HO04',
                name: 'Comayagua',
            },
            {
                code: 'HO05',
                name: 'Copán',
            },
            {
                code: 'HO06',
                name: 'Cortés',
            },
            {
                code: 'HO07',
                name: 'El Paraíso',
            },
            {
                code: 'HO08',
                name: 'Francisco Morazán',
            },
            {
                code: 'HO09',
                name: 'Gracias a Dios',
            },
            {
                code: 'HO10',
                name: 'Intibucá',
            },
            {
                code: 'HO11',
                name: 'Islas de la Bahía',
            },
            {
                code: 'HO12',
                name: 'La Paz',
            },
            {
                code: 'HO13',
                name: 'Lempira',
            },
            {
                code: 'HO14',
                name: 'Ocotepeque',
            },
            {
                code: 'HO15',
                name: 'Olancho',
            },
            {
                code: 'HO16',
                name: 'Santa Bárbara',
            },
            {
                code: 'HO17',
                name: 'Valle',
            },
            {
                code: 'HO18',
                name: 'Yoro',
            },
        ],
    },
    {
        code: 'HK',
        id: 2377,
        name: 'Hong Kong',
        states: [
            {
                code: 'HK001',
                name: 'Hong Kong Island',
            },
            {
                code: 'HK002',
                name: 'Kowloon',
            },
            {
                code: 'HK003',
                name: 'New Territories',
            },
        ],
    },
    {
        code: 'HU',
        id: 2260,
        name: 'Hungary',
        states: [
            {
                code: 'BK',
                name: 'Bács-Kiskun',
            },
            {
                code: 'BA',
                name: 'Baranya',
            },
            {
                code: 'BE',
                name: 'Békés',
            },
            {
                code: 'BC',
                name: 'Békéscsaba',
            },
            {
                code: 'BZ',
                name: 'Borsod-Abaúj-Zemplén',
            },
            {
                code: 'BU',
                name: 'Budapest',
            },
            {
                code: 'CS',
                name: 'Csongrád',
            },
            {
                code: 'DE',
                name: 'Debrecen',
            },
            {
                code: 'DU',
                name: 'Dunaújváros',
            },
            {
                code: 'EG',
                name: 'Eger',
            },
            {
                code: 'ER',
                name: 'Erd',
            },
            {
                code: 'FE',
                name: 'Fejér',
            },
            {
                code: 'GY',
                name: 'Gyor',
            },
            {
                code: 'GS',
                name: 'Gyor-Moson-Sopron',
            },
            {
                code: 'HB',
                name: 'Hajdú-Bihar',
            },
            {
                code: 'HE',
                name: 'Heves',
            },
            {
                code: 'HV',
                name: 'Hódmezovásárhely',
            },
            {
                code: 'JN',
                name: 'Jász-Nagykun-Szolnok',
            },
            {
                code: 'KV',
                name: 'Kaposvár',
            },
            {
                code: 'KM',
                name: 'Kecskemét',
            },
            {
                code: 'KE',
                name: 'Komárom-Esztergom',
            },
            {
                code: 'MI',
                name: 'Miskolc',
            },
            {
                code: 'NK',
                name: 'Nagykanizsa',
            },
            {
                code: 'NO',
                name: 'Nógrád',
            },
            {
                code: 'NY',
                name: 'Nyíregyháza',
            },
            {
                code: 'PS',
                name: 'Pécs',
            },
            {
                code: 'PE',
                name: 'Pest',
            },
            {
                code: 'ST',
                name: 'Salgótarján',
            },
            {
                code: 'SO',
                name: 'Somogy',
            },
            {
                code: 'SN',
                name: 'Sopron',
            },
            {
                code: 'SZ',
                name: 'Szabolcs-Szatmár-Bereg',
            },
            {
                code: 'SD',
                name: 'Szeged',
            },
            {
                code: 'SF',
                name: 'Székesfehérvár',
            },
            {
                code: 'SS',
                name: 'Szekszárd',
            },
            {
                code: 'SK',
                name: 'Szolnok',
            },
            {
                code: 'SH',
                name: 'Szombathely',
            },
            {
                code: 'TB',
                name: 'Tatabánya',
            },
            {
                code: 'TO',
                name: 'Tolna',
            },
            {
                code: 'VA',
                name: 'Vas',
            },
            {
                code: 'VE',
                name: 'Veszprém',
            },
            {
                code: 'VM',
                name: 'Veszprém City',
            },
            {
                code: 'ZA',
                name: 'Zala',
            },
            {
                code: 'ZE',
                name: 'Zalaegerszeg',
            },
        ],
    },
    {
        code: 'IS',
        id: 2261,
        name: 'Iceland',
        states: [
            {
                code: '7',
                name: 'Austurland',
            },
            {
                code: '1',
                name: 'Höfuðborgarsvæði utan Reykjavíkur',
            },
            {
                code: '6',
                name: 'Norðurland eystra',
            },
            {
                code: '5',
                name: 'Norðurland vestra',
            },
            {
                code: '0',
                name: 'Reykjavík',
            },
            {
                code: '8',
                name: 'Suðurland',
            },
            {
                code: '2',
                name: 'Suðurnes',
            },
            {
                code: '4',
                name: 'Vestfirðir',
            },
            {
                code: '3',
                name: 'Vesturland',
            },
        ],
    },
    {
        code: 'IN',
        id: 2262,
        name: 'India',
        states: [
            {
                code: 'AN',
                name: 'Andaman and Nicobar Islands',
            },
            {
                code: 'AP',
                name: 'Andhra Pradesh',
            },
            {
                code: 'AR',
                name: 'Arunachal Pradesh',
            },
            {
                code: 'AS',
                name: 'Assam',
            },
            {
                code: 'BR',
                name: 'Bihar',
            },
            {
                code: 'CH',
                name: 'Chandigarh',
            },
            {
                code: 'CT',
                name: 'Chhattisgarh',
            },
            {
                code: 'DN',
                name: 'Dadra and Nagar Haveli',
            },
            {
                code: 'DD',
                name: 'Daman and Diu',
            },
            {
                code: 'DL',
                name: 'Delhi',
            },
            {
                code: 'GA',
                name: 'Goa',
            },
            {
                code: 'GJ',
                name: 'Gujarat',
            },
            {
                code: 'HR',
                name: 'Haryana',
            },
            {
                code: 'HP',
                name: 'Himachal Pradesh',
            },
            {
                code: 'JK',
                name: 'Jammu and Kashmir',
            },
            {
                code: 'JH',
                name: 'Jharkhand',
            },
            {
                code: 'KA',
                name: 'Karnataka',
            },
            {
                code: 'KL',
                name: 'Kerala',
            },
            {
                code: 'LD',
                name: 'Lakshadweep',
            },
            {
                code: 'MP',
                name: 'Madhya Pradesh',
            },
            {
                code: 'MH',
                name: 'Maharashtra',
            },
            {
                code: 'MN',
                name: 'Manipur',
            },
            {
                code: 'ML',
                name: 'Meghalaya',
            },
            {
                code: 'MZ',
                name: 'Mizoram',
            },
            {
                code: 'NL',
                name: 'Nagaland',
            },
            {
                code: 'OR',
                name: 'Orissa',
            },
            {
                code: 'PY',
                name: 'Pondicherry',
            },
            {
                code: 'PB',
                name: 'Punjab',
            },
            {
                code: 'RJ',
                name: 'Rajasthan',
            },
            {
                code: 'SK',
                name: 'Sikkim',
            },
            {
                code: 'TN',
                name: 'Tamil Nadu',
            },
            {
                code: 'TG',
                name: 'Telangana',
            },
            {
                code: 'TR',
                name: 'Tripura',
            },
            {
                code: 'UP',
                name: 'Uttar Pradesh',
            },
            {
                code: 'UL',
                name: 'Uttaranchal',
            },
            {
                code: 'WB',
                name: 'West Bengal',
            },
        ],
    },
    {
        code: 'ID',
        id: 2263,
        name: 'Indonesia',
        states: [
            {
                code: 'AC',
                name: 'Aceh',
            },
            {
                code: 'BA',
                name: 'Bali',
            },
            {
                code: 'BB',
                name: 'Bangka Belitung',
            },
            {
                code: 'BT',
                name: 'Banten',
            },
            {
                code: 'BE',
                name: 'Bengkulu',
            },
            {
                code: 'GO',
                name: 'Gorontalo',
            },
            {
                code: 'JK',
                name: 'Jakarta Raya',
            },
            {
                code: 'JA',
                name: 'Jambi',
            },
            {
                code: 'JB',
                name: 'Jawa Barat',
            },
            {
                code: 'JT',
                name: 'Jawa Tengah',
            },
            {
                code: 'JI',
                name: 'Jawa Timur',
            },
            {
                code: 'KB',
                name: 'Kalimantan Barat',
            },
            {
                code: 'KS',
                name: 'Kalimantan Selatan',
            },
            {
                code: 'KT',
                name: 'Kalimantan Tengah',
            },
            {
                code: 'KI',
                name: 'Kalimantan Timur',
            },
            {
                code: 'KR',
                name: 'Kepulauan Riau',
            },
            {
                code: 'LA',
                name: 'Lampung',
            },
            {
                code: 'MA',
                name: 'Maluku',
            },
            {
                code: 'MU',
                name: 'Maluku Utara',
            },
            {
                code: 'NB',
                name: 'Nusa Tenggara Barat',
            },
            {
                code: 'NT',
                name: 'Nusa Tenggara Timur',
            },
            {
                code: 'PA',
                name: 'Papua',
            },
            {
                code: 'PB',
                name: 'Papua Barat',
            },
            {
                code: 'RI',
                name: 'Riau',
            },
            {
                code: 'SR',
                name: 'Sulawesi Barat',
            },
            {
                code: 'SN',
                name: 'Sulawesi Selatan',
            },
            {
                code: 'ST',
                name: 'Sulawesi Tengah',
            },
            {
                code: 'SG',
                name: 'Sulawesi Tenggara',
            },
            {
                code: 'SA',
                name: 'Sulawesi Utara',
            },
            {
                code: 'SB',
                name: 'Sumatera Barat',
            },
            {
                code: 'SS',
                name: 'Sumatera Selatan',
            },
            {
                code: 'SU',
                name: 'Sumatera Utara',
            },
            {
                code: 'YO',
                name: 'Yogyakarta',
            },
        ],
    },
    {
        code: 'IR',
        id: 2264,
        name: 'Iran; Islamic Republic of',
        states: [
            {
                code: 'IR44',
                name: 'Alborz',
            },
            {
                code: 'IR32',
                name: 'Ardebil',
            },
            {
                code: 'IR22',
                name: 'Bushehr',
            },
            {
                code: 'IR03',
                name: 'Chahar Mahall and Bakhtiari',
            },
            {
                code: 'IR33',
                name: 'East Azarbaijan',
            },
            {
                code: 'IR28',
                name: 'Esfahan',
            },
            {
                code: 'IR07',
                name: 'Fars',
            },
            {
                code: 'IR08',
                name: 'Gilan',
            },
            {
                code: 'IR37',
                name: 'Golestan',
            },
            {
                code: 'IR09',
                name: 'Hamadan',
            },
            {
                code: 'IR11',
                name: 'Hormozgan',
            },
            {
                code: 'IR42',
                name: 'IRazavi Khorasan',
            },
            {
                code: 'IR10',
                name: 'Ilam',
            },
            {
                code: 'IR29',
                name: 'Kerman',
            },
            {
                code: 'IR13',
                name: 'Kermanshah',
            },
            {
                code: 'IR15',
                name: 'Khuzestan',
            },
            {
                code: 'IR05',
                name: 'Kohgiluyeh and Buyer Ahmad',
            },
            {
                code: 'IR16',
                name: 'Kordestan',
            },
            {
                code: 'IR23',
                name: 'Lorestan',
            },
            {
                code: 'IR34',
                name: 'Markazi',
            },
            {
                code: 'IR35',
                name: 'Mazandaran',
            },
            {
                code: 'IR43',
                name: 'North Khorasan',
            },
            {
                code: 'IR38',
                name: 'Qazvin',
            },
            {
                code: 'IR39',
                name: 'Qom',
            },
            {
                code: 'IR25',
                name: 'Semnan',
            },
            {
                code: 'IR04',
                name: 'Sistan and Baluchestan',
            },
            {
                code: 'IR41',
                name: 'South Khorasan',
            },
            {
                code: 'IR26',
                name: 'Tehran',
            },
            {
                code: 'IR01',
                name: 'West Azarbaijan',
            },
            {
                code: 'IR40',
                name: 'Yazd',
            },
            {
                code: 'IR36',
                name: 'Zanjan',
            },
        ],
    },
    {
        code: 'IQ',
        id: 2265,
        name: 'Iraq',
        states: [
            {
                code: 'IZ01',
                name: 'Al-Anbar',
            },
            {
                code: 'IZ02',
                name: 'Al-Basrah',
            },
            {
                code: 'IZ03',
                name: 'Al-Muthanna',
            },
            {
                code: 'IZ04',
                name: 'Al-Qadisiyah',
            },
            {
                code: 'IZ17',
                name: 'An-Najaf',
            },
            {
                code: 'IZ11',
                name: 'Arbil',
            },
            {
                code: 'IZ05',
                name: 'As-Sulaymaniyah',
            },
            {
                code: 'IZ13',
                name: "At-Ta'mim",
            },
            {
                code: 'IZ06',
                name: 'Babil',
            },
            {
                code: 'IZ07',
                name: 'Baghdad',
            },
            {
                code: 'IZ08',
                name: 'Dahuk',
            },
            {
                code: 'IZ09',
                name: 'Dhi Qar',
            },
            {
                code: 'IZ10',
                name: 'Diyala',
            },
            {
                code: 'IZ12',
                name: 'Karbala',
            },
            {
                code: 'IZ14',
                name: 'Maysan',
            },
            {
                code: 'IZ15',
                name: 'Ninawa',
            },
            {
                code: 'IZ18',
                name: 'Salah ad-Din',
            },
            {
                code: 'IZ16',
                name: 'Wasit',
            },
        ],
    },
    {
        code: 'IE',
        id: 2266,
        name: 'Ireland',
        states: [
            {
                code: 'CW',
                name: 'Carlow',
            },
            {
                code: 'CN',
                name: 'Cavan',
            },
            {
                code: 'CE',
                name: 'Clare',
            },
            {
                code: 'C',
                name: 'Connacht',
            },
            {
                code: 'CO',
                name: 'Cork',
            },
            {
                code: 'DL',
                name: 'Donegal',
            },
            {
                code: 'D',
                name: 'Dublin',
            },
            {
                code: 'G',
                name: 'Galway',
            },
            {
                code: 'KY',
                name: 'Kerry',
            },
            {
                code: 'KE',
                name: 'Kildare',
            },
            {
                code: 'KK',
                name: 'Kilkenny',
            },
            {
                code: 'LS',
                name: 'Laois',
            },
            {
                code: 'L',
                name: 'Leinster',
            },
            {
                code: 'LM',
                name: 'Leitrim',
            },
            {
                code: 'LK',
                name: 'Limerick',
            },
            {
                code: 'LD',
                name: 'Longford',
            },
            {
                code: 'LH',
                name: 'Louth',
            },
            {
                code: 'MO',
                name: 'Mayo',
            },
            {
                code: 'MH',
                name: 'Meath',
            },
            {
                code: 'MN',
                name: 'Monaghan',
            },
            {
                code: 'M',
                name: 'Munster',
            },
            {
                code: 'OY',
                name: 'Offaly',
            },
            {
                code: 'RN',
                name: 'Roscommon',
            },
            {
                code: 'SO',
                name: 'Sligo',
            },
            {
                code: 'TA',
                name: 'Tipperary',
            },
            {
                code: 'U',
                name: 'Ulster',
            },
            {
                code: 'WD',
                name: 'Waterford',
            },
            {
                code: 'WH',
                name: 'Westmeath',
            },
            {
                code: 'WX',
                name: 'Wexford',
            },
            {
                code: 'WW',
                name: 'Wicklow',
            },
        ],
    },
    {
        code: 'IM',
        id: 2445,
        name: 'Isle of Man',
        states: [],
    },
    {
        code: 'IL',
        id: 2267,
        name: 'Israel',
        states: [
            {
                code: 'IS01',
                name: 'HaDarom',
            },
            {
                code: 'IS02',
                name: 'HaMerkaz',
            },
            {
                code: 'IS03',
                name: 'HaZafon',
            },
            {
                code: 'IS04',
                name: 'Haifa',
            },
            {
                code: 'IS06',
                name: 'Jerusalem',
            },
            {
                code: 'IS05',
                name: 'Tel Aviv',
            },
        ],
    },
    {
        code: 'IT',
        id: 2268,
        name: 'Italy',
        states: [
            {
                code: '65',
                name: 'Abruzzo',
            },
            {
                code: 'AG',
                name: 'Agrigento',
            },
            {
                code: 'AL',
                name: 'Alessandria',
            },
            {
                code: 'AN',
                name: 'Ancona',
            },
            {
                code: 'AO',
                name: 'Aosta',
            },
            {
                code: 'AR',
                name: 'Arezzo',
            },
            {
                code: 'AP',
                name: 'Ascoli Piceno',
            },
            {
                code: 'AT',
                name: 'Asti',
            },
            {
                code: 'AV',
                name: 'Avellino',
            },
            {
                code: 'BA',
                name: 'Bari',
            },
            {
                code: 'BT',
                name: 'Barletta-Andria-Trani',
            },
            {
                code: '77',
                name: 'Basilicata',
            },
            {
                code: 'BL',
                name: 'Belluno',
            },
            {
                code: 'BN',
                name: 'Benevento',
            },
            {
                code: 'BG',
                name: 'Bergamo',
            },
            {
                code: 'BI',
                name: 'Biella',
            },
            {
                code: 'BO',
                name: 'Bologna',
            },
            {
                code: 'BZ',
                name: 'Bolzano',
            },
            {
                code: 'BS',
                name: 'Brescia',
            },
            {
                code: 'BR',
                name: 'Brindisi',
            },
            {
                code: 'CA',
                name: 'Cagliari',
            },
            {
                code: '78',
                name: 'Calabria',
            },
            {
                code: 'CL',
                name: 'Caltanissetta',
            },
            {
                code: '72',
                name: 'Campania',
            },
            {
                code: 'CB',
                name: 'Campobasso',
            },
            {
                code: 'CI',
                name: 'Carbonia-Iglesias',
            },
            {
                code: 'CE',
                name: 'Caserta',
            },
            {
                code: 'CT',
                name: 'Catania',
            },
            {
                code: 'CZ',
                name: 'Catanzaro',
            },
            {
                code: 'CH',
                name: 'Chieti',
            },
            {
                code: 'CO',
                name: 'Como',
            },
            {
                code: 'CS',
                name: 'Cosenza',
            },
            {
                code: 'CR',
                name: 'Cremona',
            },
            {
                code: 'KR',
                name: 'Crotone',
            },
            {
                code: 'CN',
                name: 'Cuneo',
            },
            {
                code: '45',
                name: 'Emilia-Romagna',
            },
            {
                code: 'EN',
                name: 'Enna',
            },
            {
                code: 'FM',
                name: 'Fermo',
            },
            {
                code: 'FE',
                name: 'Ferrara',
            },
            {
                code: 'FI',
                name: 'Firenze',
            },
            {
                code: 'FG',
                name: 'Foggia',
            },
            {
                code: 'FC',
                name: 'Forli-Cesena',
            },
            {
                code: '36',
                name: 'Friuli-Venezia Giulia',
            },
            {
                code: 'FR',
                name: 'Frosinone',
            },
            {
                code: 'GE',
                name: 'Genova',
            },
            {
                code: 'GO',
                name: 'Gorizia',
            },
            {
                code: 'GR',
                name: 'Grosseto',
            },
            {
                code: 'IM',
                name: 'Imperia',
            },
            {
                code: 'IS',
                name: 'Isernia',
            },
            {
                code: 'AQ',
                name: "L'Aquila",
            },
            {
                code: 'SP',
                name: 'La Spezia',
            },
            {
                code: 'LT',
                name: 'Latina',
            },
            {
                code: '62',
                name: 'Lazio',
            },
            {
                code: 'LE',
                name: 'Lecce',
            },
            {
                code: 'LC',
                name: 'Lecco',
            },
            {
                code: '42',
                name: 'Liguria',
            },
            {
                code: 'LI',
                name: 'Livorno',
            },
            {
                code: 'LO',
                name: 'Lodi',
            },
            {
                code: '25',
                name: 'Lombardia',
            },
            {
                code: 'LU',
                name: 'Lucca',
            },
            {
                code: 'MC',
                name: 'Macerata',
            },
            {
                code: 'MN',
                name: 'Mantova',
            },
            {
                code: '57',
                name: 'Marche',
            },
            {
                code: 'MS',
                name: 'Massa-Carrara',
            },
            {
                code: 'MT',
                name: 'Matera',
            },
            {
                code: 'VS',
                name: 'Medio Campidano',
            },
            {
                code: 'ME',
                name: 'Messina',
            },
            {
                code: 'MI',
                name: 'Milano',
            },
            {
                code: 'MO',
                name: 'Modena',
            },
            {
                code: '67',
                name: 'Molise',
            },
            {
                code: 'MB',
                name: 'Monza e Brianza',
            },
            {
                code: 'NA',
                name: 'Napoli',
            },
            {
                code: 'NO',
                name: 'Novara',
            },
            {
                code: 'NU',
                name: 'Nuoro',
            },
            {
                code: 'OG',
                name: 'Ogliastra',
            },
            {
                code: 'OT',
                name: 'Olbia-Tempio',
            },
            {
                code: 'OR',
                name: 'Oristano',
            },
            {
                code: 'PD',
                name: 'Padova',
            },
            {
                code: 'PA',
                name: 'Palermo',
            },
            {
                code: 'PR',
                name: 'Parma',
            },
            {
                code: 'PV',
                name: 'Pavia',
            },
            {
                code: 'PG',
                name: 'Perugia',
            },
            {
                code: 'PU',
                name: 'Pesaro e Urbino',
            },
            {
                code: 'PE',
                name: 'Pescara',
            },
            {
                code: 'PC',
                name: 'Piacenza',
            },
            {
                code: '21',
                name: 'Piemonte',
            },
            {
                code: 'PI',
                name: 'Pisa',
            },
            {
                code: 'PT',
                name: 'Pistoia',
            },
            {
                code: 'PN',
                name: 'Pordenone',
            },
            {
                code: 'PZ',
                name: 'Potenza',
            },
            {
                code: 'PO',
                name: 'Prato',
            },
            {
                code: '75',
                name: 'Puglia',
            },
            {
                code: 'RG',
                name: 'Ragusa',
            },
            {
                code: 'RA',
                name: 'Ravenna',
            },
            {
                code: 'RC',
                name: 'Reggio Calabria',
            },
            {
                code: 'RE',
                name: 'Reggio Emilia',
            },
            {
                code: 'RI',
                name: 'Rieti',
            },
            {
                code: 'RN',
                name: 'Rimini',
            },
            {
                code: 'RM',
                name: 'Roma',
            },
            {
                code: 'RO',
                name: 'Rovigo',
            },
            {
                code: 'SA',
                name: 'Salerno',
            },
            {
                code: '88',
                name: 'Sardegna',
            },
            {
                code: 'SS',
                name: 'Sassari',
            },
            {
                code: 'SV',
                name: 'Savona',
            },
            {
                code: '82',
                name: 'Sicilia',
            },
            {
                code: 'SI',
                name: 'Siena',
            },
            {
                code: 'SR',
                name: 'Siracusa',
            },
            {
                code: 'SO',
                name: 'Sondrio',
            },
            {
                code: 'TA',
                name: 'Taranto',
            },
            {
                code: 'TE',
                name: 'Teramo',
            },
            {
                code: 'TR',
                name: 'Terni',
            },
            {
                code: 'TO',
                name: 'Torino',
            },
            {
                code: '52',
                name: 'Toscana',
            },
            {
                code: 'TP',
                name: 'Trapani',
            },
            {
                code: '32',
                name: 'Trentino-Alto Adige',
            },
            {
                code: 'TN',
                name: 'Trento',
            },
            {
                code: 'TV',
                name: 'Treviso',
            },
            {
                code: 'TS',
                name: 'Trieste',
            },
            {
                code: 'UD',
                name: 'Udine',
            },
            {
                code: '55',
                name: 'Umbria',
            },
            {
                code: '23',
                name: "Valle d'Aosta",
            },
            {
                code: 'VA',
                name: 'Varese',
            },
            {
                code: '34',
                name: 'Veneto',
            },
            {
                code: 'VE',
                name: 'Venezia',
            },
            {
                code: 'VB',
                name: 'Verbano-Cusio-Ossola',
            },
            {
                code: 'VC',
                name: 'Vercelli',
            },
            {
                code: 'VR',
                name: 'Verona',
            },
            {
                code: 'VV',
                name: 'Vibo Valentia',
            },
            {
                code: 'VI',
                name: 'Vicenza',
            },
            {
                code: 'VT',
                name: 'Viterbo',
            },
        ],
    },
    {
        code: 'JM',
        id: 2269,
        name: 'Jamaica',
        states: [
            {
                code: 'JM01',
                name: 'Clarendon',
            },
            {
                code: 'JM02',
                name: 'Hanover',
            },
            {
                code: 'JM17',
                name: 'Kingston',
            },
            {
                code: 'JM04',
                name: 'Manchester',
            },
            {
                code: 'JM07',
                name: 'Portland',
            },
            {
                code: 'JM08',
                name: 'Saint Andrew',
            },
            {
                code: 'JM09',
                name: 'Saint Ann',
            },
            {
                code: 'JM10',
                name: 'Saint Catherine',
            },
            {
                code: 'JM11',
                name: 'Saint Elizabeth',
            },
            {
                code: 'JM12',
                name: 'Saint James',
            },
            {
                code: 'JM13',
                name: 'Saint Mary',
            },
            {
                code: 'JM14',
                name: 'Saint Thomas',
            },
            {
                code: 'JM15',
                name: 'Trelawny',
            },
            {
                code: 'JM16',
                name: 'Westmoreland',
            },
        ],
    },
    {
        code: 'JP',
        id: 2270,
        name: 'Japan',
        states: [
            {
                code: 'JP23',
                name: 'Aichi',
            },
            {
                code: 'JP05',
                name: 'Akita',
            },
            {
                code: 'JP02',
                name: 'Aomori',
            },
            {
                code: 'JP12',
                name: 'Chiba',
            },
            {
                code: 'JP38',
                name: 'Ehime',
            },
            {
                code: 'JP18',
                name: 'Fukui',
            },
            {
                code: 'JP40',
                name: 'Fukuoka',
            },
            {
                code: 'JP07',
                name: 'Fukushima',
            },
            {
                code: 'JP21',
                name: 'Gifu',
            },
            {
                code: 'JP10',
                name: 'Gunma',
            },
            {
                code: 'JP34',
                name: 'Hiroshima',
            },
            {
                code: 'JP01',
                name: 'Hokkaido',
            },
            {
                code: 'JP28',
                name: 'Hyogo',
            },
            {
                code: 'JP08',
                name: 'Ibaraki',
            },
            {
                code: 'JP17',
                name: 'Ishikawa',
            },
            {
                code: 'JP03',
                name: 'Iwate',
            },
            {
                code: 'JP37',
                name: 'Kagawa',
            },
            {
                code: 'JP46',
                name: 'Kagoshima',
            },
            {
                code: 'JP14',
                name: 'Kanagawa',
            },
            {
                code: 'JP39',
                name: 'Kochi',
            },
            {
                code: 'JP43',
                name: 'Kumamoto',
            },
            {
                code: 'JP26',
                name: 'Kyoto',
            },
            {
                code: 'JP24',
                name: 'Mie',
            },
            {
                code: 'JP04',
                name: 'Miyagi',
            },
            {
                code: 'JP45',
                name: 'Miyazaki',
            },
            {
                code: 'JP20',
                name: 'Nagano',
            },
            {
                code: 'JP42',
                name: 'Nagasaki',
            },
            {
                code: 'JP29',
                name: 'Nara',
            },
            {
                code: 'JP15',
                name: 'Niigata',
            },
            {
                code: 'JP44',
                name: 'Oita',
            },
            {
                code: 'JP33',
                name: 'Okayama',
            },
            {
                code: 'JP47',
                name: 'Okinawa',
            },
            {
                code: 'JP27',
                name: 'Osaka',
            },
            {
                code: 'JP41',
                name: 'Saga',
            },
            {
                code: 'JP11',
                name: 'Saitama',
            },
            {
                code: 'JP25',
                name: 'Shiga',
            },
            {
                code: 'JP32',
                name: 'Shimane',
            },
            {
                code: 'JP22',
                name: 'Shizuoka',
            },
            {
                code: 'JP09',
                name: 'Tochigi',
            },
            {
                code: 'JP36',
                name: 'Tokushima',
            },
            {
                code: 'JP13',
                name: 'Tokyo',
            },
            {
                code: 'JP31',
                name: 'Tottori',
            },
            {
                code: 'JP16',
                name: 'Toyama',
            },
            {
                code: 'JP30',
                name: 'Wakayama',
            },
            {
                code: 'JP06',
                name: 'Yamagata',
            },
            {
                code: 'JP35',
                name: 'Yamaguchi',
            },
            {
                code: 'JP19',
                name: 'Yamanashi',
            },
        ],
    },
    {
        code: 'JE',
        id: 2422,
        name: 'Jersey',
        states: [],
    },
    {
        code: 'JO',
        id: 2271,
        name: 'Jordan',
        states: [
            {
                code: 'JO01',
                name: 'Ajlun',
            },
            {
                code: 'JO02',
                name: 'Amman',
            },
            {
                code: 'JO03',
                name: 'Aqaba',
            },
            {
                code: 'JO04',
                name: 'Balqa',
            },
            {
                code: 'JO05',
                name: 'Irbid',
            },
            {
                code: 'JO06',
                name: 'JarasJ',
            },
            {
                code: 'JO07',
                name: 'Karak',
            },
            {
                code: 'JO08',
                name: "Ma'an",
            },
            {
                code: 'JO09',
                name: 'Madaba',
            },
            {
                code: 'JO10',
                name: 'Mafraq',
            },
            {
                code: 'JO11',
                name: 'Tafilah',
            },
            {
                code: 'JO12',
                name: 'Zarqa',
            },
        ],
    },
    {
        code: 'KZ',
        id: 2272,
        name: 'Kazakhstan',
        states: [
            {
                code: 'KZ01',
                name: 'Almaty',
            },
            {
                code: 'KZ02',
                name: 'Almaty (City)',
            },
            {
                code: 'KZ03',
                name: 'Aqmola',
            },
            {
                code: 'KZ04',
                name: 'Aqtöbe',
            },
            {
                code: 'KZ05',
                name: 'Astana',
            },
            {
                code: 'KZ06',
                name: 'Atyrau',
            },
            {
                code: 'KZ08',
                name: 'Bayqonyr',
            },
            {
                code: 'KZ15',
                name: 'East Kazakhstan',
            },
            {
                code: 'KZ09',
                name: 'Mangghystau',
            },
            {
                code: 'KZ16',
                name: 'North Kazakhstan',
            },
            {
                code: 'KZ11',
                name: 'Pavlodar',
            },
            {
                code: 'KZ12',
                name: 'Qaraghandy',
            },
            {
                code: 'KZ13',
                name: 'Qostanay',
            },
            {
                code: 'KZ14',
                name: 'Qyzylorda',
            },
            {
                code: 'KZ10',
                name: 'South Kazakhstan',
            },
            {
                code: 'KZ07',
                name: 'West Kazakhstan',
            },
            {
                code: 'KZ17',
                name: 'Zhambyl',
            },
        ],
    },
    {
        code: 'KE',
        id: 2273,
        name: 'Kenya',
        states: [
            {
                code: 'KE10',
                name: 'Baringo',
            },
            {
                code: 'KE11',
                name: 'Bomet',
            },
            {
                code: 'KE12',
                name: 'Bungoma',
            },
            {
                code: 'KE13',
                name: 'Busia',
            },
            {
                code: 'KE14',
                name: 'Elgeyo Marakwet',
            },
            {
                code: 'KE15',
                name: 'Embu',
            },
            {
                code: 'KE16',
                name: 'Garissa',
            },
            {
                code: 'KE17',
                name: 'Homa Bay',
            },
            {
                code: 'KE18',
                name: 'Isiolo',
            },
            {
                code: 'KE19',
                name: 'Kajiado',
            },
            {
                code: 'KE20',
                name: 'Kakamega',
            },
            {
                code: 'KE21',
                name: 'Kericho',
            },
            {
                code: 'KE22',
                name: 'Kiambu',
            },
            {
                code: 'KE23',
                name: 'Kilifi',
            },
            {
                code: 'KE24',
                name: 'Kirinyaga',
            },
            {
                code: 'KE25',
                name: 'Kisii',
            },
            {
                code: 'KE26',
                name: 'Kisumu',
            },
            {
                code: 'KE27',
                name: 'Kitui',
            },
            {
                code: 'KE28',
                name: 'Kwale',
            },
            {
                code: 'KE29',
                name: 'Laikipia',
            },
            {
                code: 'KE30',
                name: 'Lamu',
            },
            {
                code: 'KE31',
                name: 'Machakos',
            },
            {
                code: 'KE32',
                name: 'Makueni',
            },
            {
                code: 'KE33',
                name: 'Mandera',
            },
            {
                code: 'KE34',
                name: 'Marsabit',
            },
            {
                code: 'KE35',
                name: 'Meru',
            },
            {
                code: 'KE36',
                name: 'Migori',
            },
            {
                code: 'KE37',
                name: 'Mombasa',
            },
            {
                code: 'KE38',
                name: 'Murang',
            },
            {
                code: 'KE05',
                name: 'Nairobi',
            },
            {
                code: 'KE39',
                name: 'Nakuru',
            },
            {
                code: 'KE40',
                name: 'Nandi',
            },
            {
                code: 'KE41',
                name: 'Narok',
            },
            {
                code: 'KE42',
                name: 'Nyamira',
            },
            {
                code: 'KE43',
                name: 'Nyandarua',
            },
            {
                code: 'KE44',
                name: 'Nyeri',
            },
            {
                code: 'KE45',
                name: 'Samburu',
            },
            {
                code: 'KE46',
                name: 'Siaya',
            },
            {
                code: 'KE47',
                name: 'Taita Taveta',
            },
            {
                code: 'KE48',
                name: 'Tana River',
            },
            {
                code: 'KE49',
                name: 'Tharaka Nithi',
            },
            {
                code: 'KE50',
                name: 'Trans Nzoia',
            },
            {
                code: 'KE51',
                name: 'Turkana',
            },
            {
                code: 'KE52',
                name: 'Uasin Gishu',
            },
            {
                code: 'KE53',
                name: 'Vihiga',
            },
            {
                code: 'KE54',
                name: 'Wajir',
            },
            {
                code: 'KE55',
                name: 'West Pokot',
            },
        ],
    },
    {
        code: 'KI',
        id: 2391,
        name: 'Kiribati',
        states: [],
    },
    {
        code: 'KP',
        id: 2274,
        name: "Korea; Democratic People's Republic Of (North)",
        states: [
            {
                code: 'KN01',
                name: 'Chagang-do',
            },
            {
                code: 'KN17',
                name: 'Hamgyong-bukto',
            },
            {
                code: 'KN03',
                name: 'Hamgyong-namdo',
            },
            {
                code: 'KN07',
                name: 'Hwanghae-bukto',
            },
            {
                code: 'KN06',
                name: 'Hwanghae-namdo',
            },
            {
                code: 'KN09',
                name: 'Kangwon-do',
            },
            {
                code: 'KN18',
                name: 'Najin Sonbong-si',
            },
            {
                code: 'KN11',
                name: "P'yongan-bukto",
            },
            {
                code: 'KN15',
                name: "P'yongan-namdo",
            },
            {
                code: 'KN12',
                name: "P'yongyang-si",
            },
            {
                code: 'KN13',
                name: 'Yanggang-do',
            },
        ],
    },
    {
        code: 'KR',
        id: 2275,
        name: 'Korea; Republic Of (South)',
        states: [
            {
                code: 'KS10',
                name: 'Busan',
            },
            {
                code: 'KS05',
                name: 'Chungcheongbuk-do',
            },
            {
                code: 'KS17',
                name: 'Chungcheongnam-do',
            },
            {
                code: 'KS15',
                name: 'Daegu',
            },
            {
                code: 'KS19',
                name: 'Daejeon',
            },
            {
                code: 'KS06',
                name: 'Gangwon-do',
            },
            {
                code: 'KS18',
                name: 'Gwangju',
            },
            {
                code: 'KS13',
                name: 'Gyeonggi-do',
            },
            {
                code: 'KS14',
                name: 'Gyeongsangbuk-do',
            },
            {
                code: 'KS20',
                name: 'Gyeongsangnam-do',
            },
            {
                code: 'KS12',
                name: 'Incheon',
            },
            {
                code: 'KS01',
                name: 'Jeju-do',
            },
            {
                code: 'KS03',
                name: 'Jeollabuk-do',
            },
            {
                code: 'KS16',
                name: 'Jeollanam-do',
            },
            {
                code: 'KS22',
                name: 'Sejong',
            },
            {
                code: 'KS11',
                name: 'Seoul',
            },
            {
                code: 'KS21',
                name: 'Ulsan',
            },
        ],
    },
    {
        code: 'KV',
        id: 2392,
        name: 'Kosovo',
        states: [],
    },
    {
        code: 'KW',
        id: 2276,
        name: 'Kuwait',
        states: [
            {
                code: 'KU04',
                name: 'Al Ahmadi',
            },
            {
                code: 'KU07',
                name: 'Al Farwaniyah',
            },
            {
                code: 'KU05',
                name: 'Al Jahrah',
            },
            {
                code: 'KU02',
                name: 'Al Kuwayt',
            },
            {
                code: 'KU08',
                name: 'Hawalli',
            },
            {
                code: 'KU09',
                name: 'Mubarak Al-Kabir',
            },
        ],
    },
    {
        code: 'KG',
        id: 2277,
        name: 'Kyrgyzstan',
        states: [
            {
                code: 'KG09',
                name: 'Batken',
            },
            {
                code: 'KG01',
                name: 'Bishkek',
            },
            {
                code: 'KG02',
                name: 'Chüy',
            },
            {
                code: 'KG03',
                name: 'Jalal-Abad',
            },
            {
                code: 'KG04',
                name: 'Naryn',
            },
            {
                code: 'KG10',
                name: 'Osh [City]',
            },
            {
                code: 'KG08',
                name: 'Osh',
            },
            {
                code: 'KG06',
                name: 'Talas',
            },
            {
                code: 'KG07',
                name: 'Ysyk-Köl',
            },
        ],
    },
    {
        code: 'LA',
        id: 2278,
        name: "Lao People's Democratic Republic",
        states: [
            {
                code: 'LA01',
                name: 'Attapu',
            },
            {
                code: 'LA22',
                name: 'Bokeo',
            },
            {
                code: 'LA23',
                name: 'Bolikhamxai',
            },
            {
                code: 'LA02',
                name: 'Champasak',
            },
            {
                code: 'LA03',
                name: 'Houaphan',
            },
            {
                code: 'LA15',
                name: 'Khammouan',
            },
            {
                code: 'LA16',
                name: 'Louang Namtha',
            },
            {
                code: 'LA17',
                name: 'Louangphrabang',
            },
            {
                code: 'LA07',
                name: 'Oudômxai',
            },
            {
                code: 'LA18',
                name: 'Phôngsali',
            },
            {
                code: 'LA19',
                name: 'Saravan',
            },
            {
                code: 'LA20',
                name: 'Savannakhét',
            },
            {
                code: 'LA27',
                name: 'Vientiane',
            },
            {
                code: 'LA24',
                name: 'Vientiane [prefecture]',
            },
            {
                code: 'LA13',
                name: 'Xaignabouri',
            },
            {
                code: 'LA28',
                name: 'Xaisômboun',
            },
            {
                code: 'LA26',
                name: 'Xékong',
            },
            {
                code: 'LA14',
                name: 'Xiangkhoang',
            },
        ],
    },
    {
        code: 'LV',
        id: 2279,
        name: 'Latvia',
        states: [
            {
                code: 'LG34',
                name: 'Adaži',
            },
            {
                code: 'LG35',
                name: 'Aglona',
            },
            {
                code: 'LG36',
                name: 'Aizkraukle',
            },
            {
                code: 'LG37',
                name: 'Aizpute',
            },
            {
                code: 'LG38',
                name: 'Akniste',
            },
            {
                code: 'LG39',
                name: 'Aloja',
            },
            {
                code: 'LG40',
                name: 'Alsunga',
            },
            {
                code: 'LG41',
                name: 'Aluksne',
            },
            {
                code: 'LG42',
                name: 'Amata',
            },
            {
                code: 'LG43',
                name: 'Ape',
            },
            {
                code: 'LG44',
                name: 'Auce',
            },
            {
                code: 'LG45',
                name: 'Babite',
            },
            {
                code: 'LG46',
                name: 'Baldone',
            },
            {
                code: 'LG47',
                name: 'Baltinava',
            },
            {
                code: 'LG48',
                name: 'Balvi',
            },
            {
                code: 'LG49',
                name: 'Bauska',
            },
            {
                code: 'LG50',
                name: 'Beverina',
            },
            {
                code: 'LG51',
                name: 'Broceni',
            },
            {
                code: 'LG52',
                name: 'Burtnieki',
            },
            {
                code: 'LG53',
                name: 'Carnikava',
            },
            {
                code: 'LG54',
                name: 'Cesis',
            },
            {
                code: 'LG55',
                name: 'Cesvaine',
            },
            {
                code: 'LG56',
                name: 'Cibla',
            },
            {
                code: 'LG57',
                name: 'Dagda',
            },
            {
                code: 'LG06',
                name: 'Daugavpils',
            },
            {
                code: 'LG58',
                name: 'Daugavpils',
            },
            {
                code: 'LG59',
                name: 'Dobele',
            },
            {
                code: 'LG60',
                name: 'Dundaga',
            },
            {
                code: 'LG61',
                name: 'Durbe',
            },
            {
                code: 'LG62',
                name: 'Engure',
            },
            {
                code: 'LG63',
                name: 'Ergli',
            },
            {
                code: 'LG64',
                name: 'Garkalne',
            },
            {
                code: 'LG65',
                name: 'Grobina',
            },
            {
                code: 'LG66',
                name: 'Gulbene',
            },
            {
                code: 'LG67',
                name: 'Iecava',
            },
            {
                code: 'LG68',
                name: 'Ikškile',
            },
            {
                code: 'LG69',
                name: 'Ilukste',
            },
            {
                code: 'LG70',
                name: 'Incukalns',
            },
            {
                code: 'LG71',
                name: 'Jaunjelgava',
            },
            {
                code: 'LG72',
                name: 'Jaunpiebalga',
            },
            {
                code: 'LG73',
                name: 'Jaunpils',
            },
            {
                code: 'LG75',
                name: 'Jekabpils',
            },
            {
                code: 'LG74',
                name: 'Jekabpils',
            },
            {
                code: 'LG76',
                name: 'Jelgava',
            },
            {
                code: 'LG11',
                name: 'Jelgava',
            },
            {
                code: 'LG13',
                name: 'Jurmala',
            },
            {
                code: 'LG77',
                name: 'Kandava',
            },
            {
                code: 'LG78',
                name: 'Karsava',
            },
            {
                code: 'LG79',
                name: 'Kegums',
            },
            {
                code: 'LG80',
                name: 'Kekava',
            },
            {
                code: 'LG81',
                name: 'Kocenu',
            },
            {
                code: 'LG82',
                name: 'Koknese',
            },
            {
                code: 'LG83',
                name: 'Kraslava',
            },
            {
                code: 'LG84',
                name: 'Krimulda',
            },
            {
                code: 'LG85',
                name: 'Krustpils',
            },
            {
                code: 'LG86',
                name: 'Kuldiga',
            },
            {
                code: 'LG87',
                name: 'Lielvarde',
            },
            {
                code: 'LG16',
                name: 'Liepaja',
            },
            {
                code: 'LG88',
                name: 'Ligatne',
            },
            {
                code: 'LG89',
                name: 'Limbaži',
            },
            {
                code: 'LG90',
                name: 'Livani',
            },
            {
                code: 'LG91',
                name: 'Lubana',
            },
            {
                code: 'LG92',
                name: 'Ludza',
            },
            {
                code: 'LG93',
                name: 'Madona',
            },
            {
                code: 'LG94',
                name: 'Malpils',
            },
            {
                code: 'LG95',
                name: 'Marupe',
            },
            {
                code: 'LG96',
                name: 'Mazsalaca',
            },
            {
                code: 'LGF1',
                name: 'Mersraga',
            },
            {
                code: 'LG97',
                name: 'Naukšeni',
            },
            {
                code: 'LG98',
                name: 'Nereta',
            },
            {
                code: 'LG99',
                name: 'Nica',
            },
            {
                code: 'LGA1',
                name: 'Ogre',
            },
            {
                code: 'LGA2',
                name: 'Olaine',
            },
            {
                code: 'LGA3',
                name: 'Ozolnieki',
            },
            {
                code: 'LGA4',
                name: 'Pargauja',
            },
            {
                code: 'LGA5',
                name: 'Pavilosta',
            },
            {
                code: 'LGA6',
                name: 'Plavinas',
            },
            {
                code: 'LGA7',
                name: 'Preili',
            },
            {
                code: 'LGA8',
                name: 'Priekule',
            },
            {
                code: 'LGA9',
                name: 'Priekuli',
            },
            {
                code: 'LGB1',
                name: 'Rauna',
            },
            {
                code: 'LGB2',
                name: 'Rezekne',
            },
            {
                code: 'LG23',
                name: 'Rezekne',
            },
            {
                code: 'LGB3',
                name: 'Riebini',
            },
            {
                code: 'LG25',
                name: 'Riga',
            },
            {
                code: 'LGB4',
                name: 'Roja',
            },
            {
                code: 'LGB5',
                name: 'Ropaži',
            },
            {
                code: 'LGB6',
                name: 'Rucava',
            },
            {
                code: 'LGB7',
                name: 'Rugaji',
            },
            {
                code: 'LGB8',
                name: 'Rujiena',
            },
            {
                code: 'LGB9',
                name: 'Rundale',
            },
            {
                code: 'LGC1',
                name: 'Salacgriva',
            },
            {
                code: 'LGC2',
                name: 'Sala',
            },
            {
                code: 'LGC3',
                name: 'Salaspils',
            },
            {
                code: 'LGC4',
                name: 'Saldus',
            },
            {
                code: 'LGC5',
                name: 'Saulkrasti',
            },
            {
                code: 'LGC6',
                name: 'Seja',
            },
            {
                code: 'LGC7',
                name: 'Sigulda',
            },
            {
                code: 'LGC8',
                name: 'Skriveri',
            },
            {
                code: 'LGC9',
                name: 'Skrunda',
            },
            {
                code: 'LGD1',
                name: 'Smiltene',
            },
            {
                code: 'LGD2',
                name: 'Stopini',
            },
            {
                code: 'LGD3',
                name: 'Strenci',
            },
            {
                code: 'LGD4',
                name: 'Talsi',
            },
            {
                code: 'LGD5',
                name: 'Tervete',
            },
            {
                code: 'LGD6',
                name: 'Tukums',
            },
            {
                code: 'LGD7',
                name: 'Vainode',
            },
            {
                code: 'LGD8',
                name: 'Valka',
            },
            {
                code: 'LGD9',
                name: 'Valmiera',
            },
            {
                code: 'LGE1',
                name: 'Varaklani',
            },
            {
                code: 'LGE2',
                name: 'Varkava',
            },
            {
                code: 'LGE3',
                name: 'Vecpiebalga',
            },
            {
                code: 'LGE4',
                name: 'Vecumnieki',
            },
            {
                code: 'LGE5',
                name: 'Ventspils',
            },
            {
                code: 'LG32',
                name: 'Ventspils',
            },
            {
                code: 'LGE6',
                name: 'Viesite',
            },
            {
                code: 'LGE7',
                name: 'Vilaka',
            },
            {
                code: 'LGE8',
                name: 'Vilani',
            },
            {
                code: 'LGE9',
                name: 'Zilupe',
            },
        ],
    },
    {
        code: 'LB',
        id: 2280,
        name: 'Lebanon',
        states: [
            {
                code: 'LE10',
                name: 'Aakkar',
            },
            {
                code: 'LE07',
                name: 'An Nabatiyah',
            },
            {
                code: 'LE11',
                name: 'Baalbek-Hermel',
            },
            {
                code: 'LE04',
                name: 'Beirut',
            },
            {
                code: 'LE08',
                name: 'Beqaa',
            },
            {
                code: 'LE05',
                name: 'Mount Lebanon',
            },
            {
                code: 'LE09',
                name: 'North Lebanon',
            },
            {
                code: 'LE06',
                name: 'South Lebanon',
            },
        ],
    },
    {
        code: 'LS',
        id: 2281,
        name: 'Lesotho',
        states: [
            {
                code: 'LT10',
                name: 'Berea',
            },
            {
                code: 'LT11',
                name: 'Butha-Buthe',
            },
            {
                code: 'LT12',
                name: 'Leribe',
            },
            {
                code: 'LT14',
                name: 'Mafeteng',
            },
            {
                code: 'LT13',
                name: 'Mafeteng',
            },
            {
                code: 'LT15',
                name: "Mohale's Hoek",
            },
            {
                code: 'LT16',
                name: 'Mokhotlong',
            },
            {
                code: 'LT17',
                name: "Qacha's Nek",
            },
            {
                code: 'LT18',
                name: 'Quthing',
            },
            {
                code: 'LT19',
                name: 'Thaba-Tseka',
            },
        ],
    },
    {
        code: 'LR',
        id: 2282,
        name: 'Liberia',
        states: [
            {
                code: 'LI15',
                name: 'Bomi',
            },
            {
                code: 'LI01',
                name: 'Bong',
            },
            {
                code: 'LI21\t',
                name: 'Gbarpolu',
            },
            {
                code: 'LI11',
                name: 'Grand Bassa',
            },
            {
                code: 'LI12',
                name: 'Grand Cape Mount',
            },
            {
                code: 'LI19',
                name: 'Grand Gedeh',
            },
            {
                code: 'LI16',
                name: 'Grand Kru',
            },
            {
                code: 'LI20',
                name: 'Lofa',
            },
            {
                code: 'LI17',
                name: 'Margibi',
            },
            {
                code: 'LI13',
                name: 'Maryland',
            },
            {
                code: 'LI14',
                name: 'Montserrado',
            },
            {
                code: 'LI09',
                name: 'Nimba',
            },
            {
                code: 'LI22',
                name: 'River Gee',
            },
            {
                code: 'LI18',
                name: 'Rivercess',
            },
            {
                code: 'LI10',
                name: 'Sinoe',
            },
        ],
    },
    {
        code: 'LY',
        id: 2380,
        name: 'Libyan Arab Jamahiriya',
        states: [],
    },
    {
        code: 'LI',
        id: 2284,
        name: 'Liechtenstein',
        states: [],
    },
    {
        code: 'LT',
        id: 2285,
        name: 'Lithuania',
        states: [
            {
                code: 'LH56',
                name: 'Alytus',
            },
            {
                code: 'LH57',
                name: 'Kaunas',
            },
            {
                code: 'LH58',
                name: 'Klaipeda',
            },
            {
                code: 'LH59',
                name: 'Marijampole',
            },
            {
                code: 'LH60',
                name: 'Panevežys',
            },
            {
                code: 'LH61',
                name: 'Siauliai',
            },
            {
                code: 'LH62',
                name: 'Taurage',
            },
            {
                code: 'LH63',
                name: 'Telšiai',
            },
            {
                code: 'LH64',
                name: 'Utena',
            },
            {
                code: 'LH65',
                name: 'Vilnius',
            },
        ],
    },
    {
        code: 'LU',
        id: 2286,
        name: 'Luxembourg',
        states: [
            {
                code: 'LU01',
                name: 'Diekirch',
            },
            {
                code: 'LU02',
                name: 'Grevenmacher',
            },
            {
                code: 'LU03',
                name: 'Luxembourg',
            },
        ],
    },
    {
        code: 'MO',
        id: 2287,
        name: 'Macau',
        states: [],
    },
    {
        code: 'MK',
        id: 2288,
        name: 'Macedonia',
        states: [],
    },
    {
        code: 'YU',
        id: 2367,
        name: 'Macedonia; the Former Yugoslav Republic',
        states: [],
    },
    {
        code: 'MG',
        id: 2289,
        name: 'Madagascar',
        states: [
            {
                code: 'MA05',
                name: 'Antananarivo',
            },
            {
                code: 'MA01',
                name: 'Antsiranana',
            },
            {
                code: 'MA02',
                name: 'Fianarantsoa',
            },
            {
                code: 'MA03',
                name: 'Mahajanga',
            },
            {
                code: 'MA04',
                name: 'Toamasina',
            },
            {
                code: 'MA06',
                name: 'Toliara',
            },
        ],
    },
    {
        code: 'MW',
        id: 2290,
        name: 'Malawi',
        states: [
            {
                code: 'MI26',
                name: 'Balaka',
            },
            {
                code: 'MI24',
                name: 'Blantyre',
            },
            {
                code: 'MI02',
                name: 'Chikwawa',
            },
            {
                code: 'MI03',
                name: 'Chiradzulu',
            },
            {
                code: 'MI04',
                name: 'Chitipa',
            },
            {
                code: 'MI06',
                name: 'Dedza',
            },
            {
                code: 'MI07',
                name: 'Dowa',
            },
            {
                code: 'MI08',
                name: 'Karonga',
            },
            {
                code: 'MI09',
                name: 'Kasungu',
            },
            {
                code: 'MI27',
                name: 'Likoma',
            },
            {
                code: 'MI11',
                name: 'Lilongwe',
            },
            {
                code: 'MI28',
                name: 'Machinga',
            },
            {
                code: 'MI12',
                name: 'Mangochi',
            },
            {
                code: 'MI13',
                name: 'Mchinji',
            },
            {
                code: 'MI29',
                name: 'Mulanje',
            },
            {
                code: 'MI25',
                name: 'Mwanza',
            },
            {
                code: 'MI15',
                name: 'Mzimba',
            },
            {
                code: 'MI31',
                name: 'Neno',
            },
            {
                code: 'MI17',
                name: 'Nkhata Bay',
            },
            {
                code: 'MI18',
                name: 'Nkhotakota',
            },
            {
                code: 'MI19',
                name: 'Nsanje',
            },
            {
                code: 'MI16',
                name: 'Ntcheu',
            },
            {
                code: 'MI20',
                name: 'Ntchisi',
            },
            {
                code: 'MI30',
                name: 'Phalombe',
            },
            {
                code: 'MI21',
                name: 'Rumphi',
            },
            {
                code: 'MI22',
                name: 'Salima',
            },
            {
                code: 'MI05',
                name: 'Thyolo',
            },
            {
                code: 'MI23',
                name: 'Zomba',
            },
        ],
    },
    {
        code: 'MY',
        id: 2291,
        name: 'Malaysia',
        states: [
            {
                code: 'MY01',
                name: 'Johor',
            },
            {
                code: 'MY02',
                name: 'Kedah',
            },
            {
                code: 'MY03',
                name: 'Kelantan',
            },
            {
                code: 'MY04',
                name: 'Melaka',
            },
            {
                code: 'MY05',
                name: 'Negeri Sembilan',
            },
            {
                code: 'MY06',
                name: 'Pahang',
            },
            {
                code: 'MY08',
                name: 'Perak',
            },
            {
                code: 'MY09',
                name: 'Perlis',
            },
            {
                code: 'MY07',
                name: 'Pulau Pinang',
            },
            {
                code: 'MY12',
                name: 'Sabah',
            },
            {
                code: 'MY13',
                name: 'Sarawak',
            },
            {
                code: 'MY10',
                name: 'Selangor',
            },
            {
                code: 'MY11',
                name: 'Terengganu',
            },
            {
                code: 'MY14',
                name: 'W.P. Kuala Lumpur',
            },
            {
                code: 'MY15',
                name: 'W.P. Labuan',
            },
            {
                code: 'MY16',
                name: 'W.P. Putrajaya',
            },
        ],
    },
    {
        code: 'MV',
        id: 2384,
        name: 'Maldives; Republic of',
        states: [],
    },
    {
        code: 'ML',
        id: 2292,
        name: 'Mali',
        states: [
            {
                code: 'ML01',
                name: 'Bamako',
            },
            {
                code: 'ML09',
                name: 'Gao',
            },
            {
                code: 'ML03',
                name: 'Kayes',
            },
            {
                code: 'ML10',
                name: 'Kidal',
            },
            {
                code: 'ML07',
                name: 'Koulikoro',
            },
            {
                code: 'ML.ME',
                name: 'Ménaka',
            },
            {
                code: 'ML04',
                name: 'Mopti',
            },
            {
                code: 'ML05',
                name: 'Ségou',
            },
            {
                code: 'ML06',
                name: 'Sikasso',
            },
            {
                code: 'ML.TD',
                name: 'Taoudénit',
            },
            {
                code: 'ML08',
                name: 'Timbuktu',
            },
        ],
    },
    {
        code: 'MT',
        id: 2293,
        name: 'Malta',
        states: [
            {
                code: 'MT.CE',
                name: 'Central',
            },
            {
                code: 'MT.GO',
                name: 'Gozo',
            },
            {
                code: 'MT.NO',
                name: 'Northern',
            },
            {
                code: 'MT.SE',
                name: 'South Eastern',
            },
            {
                code: 'MT.SO',
                name: 'Southern',
            },
        ],
    },
    {
        code: 'RM',
        id: 2394,
        name: 'Marshall Islands',
        states: [],
    },
    {
        code: 'MQ',
        id: 2423,
        name: 'Martinique',
        states: [],
    },
    {
        code: 'MR',
        id: 2294,
        name: 'Mauritania',
        states: [
            {
                code: 'MR07',
                name: 'Adrar',
            },
            {
                code: 'MR03',
                name: 'Assaba',
            },
            {
                code: 'MR05',
                name: 'Brakna',
            },
            {
                code: 'MR08',
                name: 'Dakhlet Nouadhibou',
            },
            {
                code: 'MR04',
                name: 'Gorgol',
            },
            {
                code: 'MR10',
                name: 'Guidimaka',
            },
            {
                code: 'MR01',
                name: 'Hodh ech Chargui',
            },
            {
                code: 'MR02',
                name: 'Hodh el Gharbi',
            },
            {
                code: 'MR12',
                name: 'Inchiri',
            },
            {
                code: 'MR.NN',
                name: 'Nouakchott Nord',
            },
            {
                code: 'MR13',
                name: 'Nouakchott Ouest',
            },
            {
                code: 'MR.NS',
                name: 'Nouakchott Sud',
            },
            {
                code: 'MR09',
                name: 'Tagant',
            },
            {
                code: 'MR11',
                name: 'Tiris Zemmour',
            },
            {
                code: 'MR06',
                name: 'Trarza',
            },
        ],
    },
    {
        code: 'MU',
        id: 2295,
        name: 'Mauritius',
        states: [
            {
                code: 'MP21',
                name: 'Agalega Islands',
            },
            {
                code: 'MP12',
                name: 'Black River',
            },
            {
                code: 'MP22',
                name: 'Cargados Carajos',
            },
            {
                code: 'MP13',
                name: 'Flacq',
            },
            {
                code: 'MP14',
                name: 'Grand Port',
            },
            {
                code: 'MP15',
                name: 'Moka',
            },
            {
                code: 'MP16',
                name: 'Pamplemousses',
            },
            {
                code: 'MP17',
                name: 'Plaines Wilhems',
            },
            {
                code: 'MP18',
                name: 'Port Louis',
            },
            {
                code: 'MP19',
                name: 'Rivière du Rempart',
            },
            {
                code: 'MP23',
                name: 'Rodrigues',
            },
            {
                code: 'MP20',
                name: 'Savanne',
            },
        ],
    },
    {
        code: 'M999',
        id: 2393,
        name: 'Mayotte',
        states: [],
    },
    {
        code: 'MX',
        id: 2296,
        name: 'Mexico',
        states: [
            {
                code: 'AGU',
                name: 'Aguascalientes',
            },
            {
                code: 'BCS',
                name: 'Baja California Sur',
            },
            {
                code: 'BCN',
                name: 'Baja California',
            },
            {
                code: 'CAM',
                name: 'Campeche',
            },
            {
                code: 'CHP',
                name: 'Chiapas',
            },
            {
                code: 'CHH',
                name: 'Chihuahua',
            },
            {
                code: 'COA',
                name: 'Coahuila',
            },
            {
                code: 'COL',
                name: 'Colima',
            },
            {
                code: 'DIF',
                name: 'Distrito Federal',
            },
            {
                code: 'DUR',
                name: 'Durango',
            },
            {
                code: 'GUA',
                name: 'Guanajuato',
            },
            {
                code: 'GRO',
                name: 'Guerrero',
            },
            {
                code: 'HID',
                name: 'Hidalgo',
            },
            {
                code: 'JAL',
                name: 'Jalisco',
            },
            {
                code: 'MEX',
                name: 'México',
            },
            {
                code: 'MIC',
                name: 'Michoacán',
            },
            {
                code: 'MOR',
                name: 'Morelos',
            },
            {
                code: 'NAY',
                name: 'Nayarit',
            },
            {
                code: 'NLE',
                name: 'Nuevo León',
            },
            {
                code: 'OAX',
                name: 'Oaxaca',
            },
            {
                code: 'PUE',
                name: 'Puebla',
            },
            {
                code: 'QUE',
                name: 'Querétaro',
            },
            {
                code: 'ROO',
                name: 'Quintana Roo',
            },
            {
                code: 'SLP',
                name: 'San Luis Potosí',
            },
            {
                code: 'SIN',
                name: 'Sinaloa',
            },
            {
                code: 'SON',
                name: 'Sonora',
            },
            {
                code: 'TAB',
                name: 'Tabasco',
            },
            {
                code: 'TAM',
                name: 'Tamaulipas',
            },
            {
                code: 'TLA',
                name: 'Tlaxcala',
            },
            {
                code: 'VER',
                name: 'Veracruz',
            },
            {
                code: 'YUC',
                name: 'Yucatán',
            },
            {
                code: 'ZAC',
                name: 'Zacatecas',
            },
        ],
    },
    {
        code: 'FM',
        id: 2297,
        name: 'Micronesia; Federated States of',
        states: [
            {
                code: 'FM03',
                name: 'Chuuk',
            },
            {
                code: 'FM01',
                name: 'Kosrae',
            },
            {
                code: 'FM02',
                name: 'Pohnpei',
            },
            {
                code: 'FM04',
                name: 'Yap',
            },
        ],
    },
    {
        code: 'MD',
        id: 2395,
        name: 'Moldova; Republic of',
        states: [],
    },
    {
        code: 'MC',
        id: 2299,
        name: 'Monaco',
        states: [],
    },
    {
        code: 'MN',
        id: 2300,
        name: 'Mongolia',
        states: [],
    },
    {
        code: 'MJ',
        id: 2396,
        name: 'Montenegro',
        states: [
            {
                code: 'ME-1',
                name: 'Andrijevica',
            },
            {
                code: 'ME-2',
                name: 'Bar',
            },
            {
                code: 'ME-3',
                name: 'Berane',
            },
            {
                code: 'ME-4',
                name: 'Bijelo Polje',
            },
            {
                code: 'ME-5',
                name: 'Budva',
            },
            {
                code: 'ME-6',
                name: 'Cetinje',
            },
            {
                code: 'ME-7',
                name: 'Danilovgrad',
            },
            {
                code: 'ME-8',
                name: 'Herceg Novi',
            },
            {
                code: 'ME-9',
                name: 'Kolašin',
            },
            {
                code: 'ME-10',
                name: 'Kotor',
            },
            {
                code: 'ME-11',
                name: 'Mojkovac',
            },
            {
                code: 'ME-12',
                name: 'Nikšic',
            },
            {
                code: 'ME-13',
                name: 'Plav',
            },
            {
                code: 'ME-14',
                name: 'Pljevlja',
            },
            {
                code: 'ME-15',
                name: 'Plužine',
            },
            {
                code: 'ME-16',
                name: 'Podgorica',
            },
            {
                code: 'ME-17',
                name: 'Rožaje',
            },
            {
                code: 'ME-18',
                name: 'Šavnik',
            },
            {
                code: 'ME-19',
                name: 'Tivat',
            },
            {
                code: 'ME-20',
                name: 'Ulcinj',
            },
            {
                code: 'ME-21',
                name: 'Žabljak',
            },
        ],
    },
    {
        code: 'MS',
        id: 2424,
        name: 'Montserrat',
        states: [],
    },
    {
        code: 'MA',
        id: 2301,
        name: 'Morocco',
        states: [
            {
                code: 'MA.BK',
                name: 'Béni Mellal-Khénifra',
            },
            {
                code: 'MA.CS',
                name: 'Casablanca-Settat',
            },
            {
                code: 'MA.OL',
                name: 'Dakhla-Oued Ed-Dahab',
            },
            {
                code: 'MA.DT',
                name: 'Drâa-Tafilalet',
            },
            {
                code: 'MA.FK',
                name: 'Fès-Meknès',
            },
            {
                code: 'MA.GN',
                name: 'Guelmim-Oued Noun',
            },
            {
                code: 'MA.OF',
                name: "L'oriental",
            },
            {
                code: 'MA.LS',
                name: 'Laâyoune-Sakia al Hamra',
            },
            {
                code: 'MA.MS',
                name: 'Marrakech-Safi',
            },
            {
                code: 'MA.RK',
                name: 'Rabat-Salé-Kénitra',
            },
            {
                code: 'MA.SS',
                name: 'Souss-Massa',
            },
            {
                code: 'MA.TC',
                name: 'Tanger-Tétouan-Al Hoceima',
            },
        ],
    },
    {
        code: 'MZ',
        id: 2302,
        name: 'Mozambique',
        states: [
            {
                code: 'MZ01',
                name: 'Cabo Delgado',
            },
            {
                code: 'MZ02',
                name: 'Gaza',
            },
            {
                code: 'MZ03',
                name: 'Inhambane',
            },
            {
                code: 'MZ10',
                name: 'Manica',
            },
            {
                code: 'MZ11',
                name: 'Maputo [city]',
            },
            {
                code: 'MZ04',
                name: 'Maputo',
            },
            {
                code: 'MZ06',
                name: 'Nampula',
            },
            {
                code: 'MZ07',
                name: 'Niassa',
            },
            {
                code: 'MZ05',
                name: 'Sofala',
            },
            {
                code: 'MZ08',
                name: 'Tete',
            },
            {
                code: 'MZ09',
                name: 'Zambézia',
            },
        ],
    },
    {
        code: 'MM',
        id: 2303,
        name: 'Myanmar',
        states: [
            {
                code: 'MM.AY',
                name: 'Ayeyarwady',
            },
            {
                code: 'MM.BA',
                name: 'Bago',
            },
            {
                code: 'MM.CH',
                name: 'Chin',
            },
            {
                code: 'MM.KC',
                name: 'Kachin',
            },
            {
                code: 'MM.KH',
                name: 'Kayah',
            },
            {
                code: 'MM.KN',
                name: 'Kayin',
            },
            {
                code: 'MM.MG',
                name: 'Magway',
            },
            {
                code: 'MM.ML',
                name: 'Mandalay',
            },
            {
                code: 'MM.MO',
                name: 'Mon',
            },
            {
                code: 'MM.NY',
                name: 'Naypyidaw',
            },
            {
                code: 'MM.RA',
                name: 'Rakhine',
            },
            {
                code: 'MM.SA',
                name: 'Sagaing',
            },
            {
                code: 'MM.SH',
                name: 'Shan',
            },
            {
                code: 'MM.TN',
                name: 'Tanintharyi',
            },
            {
                code: 'MM.YA',
                name: 'Yangon',
            },
        ],
    },
    {
        code: 'NA',
        id: 2304,
        name: 'Namibia',
        states: [
            {
                code: 'WA29',
                name: 'Erongo',
            },
            {
                code: 'WA30',
                name: 'Hardap',
            },
            {
                code: 'WA31',
                name: 'Karas',
            },
            {
                code: 'WA40',
                name: 'Kavango East',
            },
            {
                code: 'WA41',
                name: 'Kavango West',
            },
            {
                code: 'WA21',
                name: 'Khomas',
            },
            {
                code: 'WA32',
                name: 'Kunene',
            },
            {
                code: 'WA33',
                name: 'Ohangwena',
            },
            {
                code: 'WA35',
                name: 'Omaheke',
            },
            {
                code: 'WA36',
                name: 'Omusati',
            },
            {
                code: 'WA37',
                name: 'Oshana',
            },
            {
                code: 'WA38',
                name: 'Oshikoto',
            },
            {
                code: 'WA39',
                name: 'Otjozondjupa',
            },
            {
                code: 'WA28',
                name: 'Zambezi',
            },
        ],
    },
    {
        code: 'NR',
        id: 2397,
        name: 'Nauru',
        states: [],
    },
    {
        code: 'NP',
        id: 2305,
        name: 'Nepal',
        states: [
            {
                code: 'NP.FI',
                name: 'Five',
            },
            {
                code: 'NP.FO',
                name: 'Four',
            },
            {
                code: 'NP.ON',
                name: 'One',
            },
            {
                code: 'NP.SE',
                name: 'Seven',
            },
            {
                code: 'NP.SI',
                name: 'Six',
            },
            {
                code: 'NP.TH',
                name: 'Three',
            },
            {
                code: 'NP.TW',
                name: 'Two',
            },
        ],
    },
    {
        code: 'NL',
        id: 2306,
        name: 'Netherlands',
        states: [
            {
                code: 'DR',
                name: 'Drenthe',
            },
            {
                code: 'FL',
                name: 'Flevoland',
            },
            {
                code: 'FR',
                name: 'Friesland',
            },
            {
                code: 'GE',
                name: 'Gelderland',
            },
            {
                code: 'GR',
                name: 'Groningen',
            },
            {
                code: 'LI',
                name: 'Limburg',
            },
            {
                code: 'NB',
                name: 'Noord-Brabant',
            },
            {
                code: 'NH',
                name: 'Noord-Holland',
            },
            {
                code: 'OV',
                name: 'Overijssel',
            },
            {
                code: 'UT',
                name: 'Utrecht',
            },
            {
                code: 'ZE',
                name: 'Zeeland',
            },
            {
                code: 'ZH',
                name: 'Zuid-Holland',
            },
        ],
    },
    {
        code: 'AN',
        id: 2425,
        name: 'Netherlands Antilles',
        states: [],
    },
    {
        code: 'NC',
        id: 2426,
        name: 'New Caledonia',
        states: [],
    },
    {
        code: 'NZ',
        id: 2307,
        name: 'New Zealand',
        states: [
            {
                code: 'AUK',
                name: 'Auckland',
            },
            {
                code: 'BOP',
                name: 'Bay of Plenty',
            },
            {
                code: 'CAN',
                name: 'Canterbury',
            },
            {
                code: 'CIT',
                name: 'Chatham Islands Territory',
            },
            {
                code: 'GIS',
                name: 'Gisborne',
            },
            {
                code: 'HKB',
                name: "Hawke's Bay",
            },
            {
                code: 'MWT',
                name: 'Manawatu-Wanganui',
            },
            {
                code: 'MBH',
                name: 'Marlborough',
            },
            {
                code: 'NSN',
                name: 'Nelson',
            },
            {
                code: 'N',
                name: 'North Island',
            },
            {
                code: 'NTL',
                name: 'Northland',
            },
            {
                code: 'OTA',
                name: 'Otago',
            },
            {
                code: 'S',
                name: 'South Island',
            },
            {
                code: 'STL',
                name: 'Southland',
            },
            {
                code: 'TKI',
                name: 'Taranaki',
            },
            {
                code: 'TAS',
                name: 'Tasman District',
            },
            {
                code: 'WKO',
                name: 'Waikato',
            },
            {
                code: 'WGN',
                name: 'Wellington',
            },
            {
                code: 'WTC',
                name: 'West Coast',
            },
        ],
    },
    {
        code: 'NI',
        id: 2308,
        name: 'Nicaragua',
        states: [
            {
                code: 'NU01',
                name: 'Boaco',
            },
            {
                code: 'NU02',
                name: 'Carazo',
            },
            {
                code: 'NU03',
                name: 'Chinandega',
            },
            {
                code: 'NU04',
                name: 'Chontales',
            },
            {
                code: 'NU05',
                name: 'Estelí',
            },
            {
                code: 'NU06',
                name: 'Granada',
            },
            {
                code: 'NU07',
                name: 'Jinotega',
            },
            {
                code: 'NU08',
                name: 'León',
            },
            {
                code: 'NU09',
                name: 'Madriz',
            },
            {
                code: 'NU10',
                name: 'Managua',
            },
            {
                code: 'NU11',
                name: 'Masaya',
            },
            {
                code: 'NU12',
                name: 'Matagalpa',
            },
            {
                code: 'NU13',
                name: 'Nueva Segovia',
            },
            {
                code: 'NU17',
                name: 'Región Autónoma del Caribe Norte',
            },
            {
                code: 'NU18',
                name: 'Región Autónoma del Caribe Sur',
            },
            {
                code: 'NU14',
                name: 'Río San Juan',
            },
            {
                code: 'NU15',
                name: 'Rivas',
            },
        ],
    },
    {
        code: 'NE',
        id: 2309,
        name: 'Niger',
        states: [
            {
                code: 'NG01',
                name: 'Agadez',
            },
            {
                code: 'NG02',
                name: 'Diffa',
            },
            {
                code: 'NG03',
                name: 'Dosso',
            },
            {
                code: 'NG04',
                name: 'Maradi',
            },
            {
                code: 'NG08',
                name: 'Niamey',
            },
            {
                code: 'NG06',
                name: 'Tahoua',
            },
            {
                code: 'NG09',
                name: 'Tillabéri',
            },
            {
                code: 'NG07',
                name: 'Zinder',
            },
        ],
    },
    {
        code: 'NG',
        id: 2310,
        name: 'Nigeria',
        states: [
            {
                code: 'NI45',
                name: 'Abia',
            },
            {
                code: 'NI35',
                name: 'Adamawa',
            },
            {
                code: 'NI21',
                name: 'Akwa Ibom',
            },
            {
                code: 'NI25',
                name: 'Anambra',
            },
            {
                code: 'NI46',
                name: 'Bauchi',
            },
            {
                code: 'NI52',
                name: 'Bayelsa',
            },
            {
                code: 'NI26',
                name: 'Benue',
            },
            {
                code: 'NI27',
                name: 'Borno',
            },
            {
                code: 'NI22',
                name: 'Cross River',
            },
            {
                code: 'NI36',
                name: 'Delta',
            },
            {
                code: 'NI53',
                name: 'Ebonyi',
            },
            {
                code: 'NI37',
                name: 'Edo',
            },
            {
                code: 'NI54',
                name: 'Ekiti',
            },
            {
                code: 'NI47',
                name: 'Enugu',
            },
            {
                code: 'NI11',
                name: 'Federal Capital Territory',
            },
            {
                code: 'NI55',
                name: 'Gombe',
            },
            {
                code: 'NI28',
                name: 'Imo',
            },
            {
                code: 'NI39',
                name: 'Jigawa',
            },
            {
                code: 'NI23',
                name: 'Kaduna',
            },
            {
                code: 'NI29',
                name: 'Kano',
            },
            {
                code: 'NI24',
                name: 'Katsina',
            },
            {
                code: 'NI40',
                name: 'Kebbi',
            },
            {
                code: 'NI41',
                name: 'Kogi',
            },
            {
                code: 'NI30',
                name: 'Kwara',
            },
            {
                code: 'NI05',
                name: 'Lagos',
            },
            {
                code: 'NI56',
                name: 'Nassarawa',
            },
            {
                code: 'NI31',
                name: 'Niger',
            },
            {
                code: 'NI16',
                name: 'Ogun',
            },
            {
                code: 'NI48',
                name: 'Ondo',
            },
            {
                code: 'NI42',
                name: 'Osun',
            },
            {
                code: 'NI32',
                name: 'Oyo',
            },
            {
                code: 'NI49',
                name: 'Plateau',
            },
            {
                code: 'NI50',
                name: 'Rivers',
            },
            {
                code: 'NI51',
                name: 'Sokoto',
            },
            {
                code: 'NI43',
                name: 'Taraba',
            },
            {
                code: 'NI44',
                name: 'Yobe',
            },
            {
                code: 'NI57',
                name: 'Zamfara',
            },
        ],
    },
    {
        code: 'NU',
        id: 2427,
        name: 'Niue',
        states: [],
    },
    {
        code: 'NF',
        id: 2428,
        name: 'Norfolk Island',
        states: [],
    },
    {
        code: 'MP',
        id: 2429,
        name: 'Northern Mariana Islands',
        states: [],
    },
    {
        code: 'NO',
        id: 2311,
        name: 'Norway',
        states: [
            {
                code: 'NO02',
                name: 'Akershus',
            },
            {
                code: 'NO09',
                name: 'Aust-Agder',
            },
            {
                code: 'NO06',
                name: 'Buskerud',
            },
            {
                code: 'NO20',
                name: 'Finnmark',
            },
            {
                code: 'NO04',
                name: 'Hedmark',
            },
            {
                code: 'NO12',
                name: 'Hordaland',
            },
            {
                code: 'NO22',
                name: 'Jan Mayen (Arctic Region)',
            },
            {
                code: 'NO15',
                name: 'Møre og Romsdal',
            },
            {
                code: 'NO17',
                name: 'Nord-Trøndelag',
            },
            {
                code: 'NO18',
                name: 'Nordland',
            },
            {
                code: 'NO05',
                name: 'Oppland',
            },
            {
                code: 'NO03',
                name: 'Oslo',
            },
            {
                code: 'NO01',
                name: 'Østfold',
            },
            {
                code: 'NO11',
                name: 'Rogaland',
            },
            {
                code: 'NO14',
                name: 'Sogn og Fjordane',
            },
            {
                code: 'NO16',
                name: 'Sør-Trøndelag',
            },
            {
                code: 'NO21',
                name: 'Svalbard (Arctic Region)',
            },
            {
                code: 'NO08',
                name: 'Telemark',
            },
            {
                code: 'NO19',
                name: 'Troms',
            },
            {
                code: 'NO10',
                name: 'Vest-Agder',
            },
            {
                code: 'NO07',
                name: 'Vestfold',
            },
        ],
    },
    {
        code: 'OM',
        id: 2312,
        name: 'Oman',
        states: [
            {
                code: 'MU01',
                name: 'Ad Dakhliyah',
            },
            {
                code: 'MU09',
                name: 'Adh Dhahirah',
            },
            {
                code: 'MU11',
                name: 'Al Batinah North',
            },
            {
                code: 'MU02',
                name: 'Al Batinah South',
            },
            {
                code: 'MU10',
                name: 'Al Buraymi',
            },
            {
                code: 'MU03',
                name: 'Al Wusta',
            },
            {
                code: 'MU12',
                name: 'Ash Sharqiyah North',
            },
            {
                code: 'MU04',
                name: 'Ash Sharqiyah South',
            },
            {
                code: 'MU08',
                name: 'Dhofar',
            },
            {
                code: 'MU07',
                name: 'Musandam',
            },
            {
                code: 'MU06',
                name: 'Muscat',
            },
        ],
    },
    {
        code: 'PK',
        id: 2313,
        name: 'Pakistan',
        states: [
            {
                code: 'PK06',
                name: 'Azad Kashmir',
            },
            {
                code: 'PK02',
                name: 'Balochistan',
            },
            {
                code: 'PK01',
                name: 'Federally Administered Tribal Areas',
            },
            {
                code: 'PK07',
                name: 'Gilgit-Baltistan',
            },
            {
                code: 'PK08',
                name: 'Islamabad',
            },
            {
                code: 'PK03',
                name: 'Khyber-Pakhtunkhwa',
            },
            {
                code: 'PK04',
                name: 'Punjab',
            },
            {
                code: 'PK05',
                name: 'Sindh',
            },
        ],
    },
    {
        code: 'PW',
        id: 2314,
        name: 'Palau',
        states: [],
    },
    {
        code: 'PS',
        id: 2430,
        name: 'Palestinian Territory; Occupied',
        states: [],
    },
    {
        code: 'PA',
        id: 2315,
        name: 'Panama',
        states: [
            {
                code: 'PM01',
                name: 'Bocas del Toro',
            },
            {
                code: 'PM02\t',
                name: 'Chiriquí',
            },
            {
                code: 'PM03',
                name: 'Coclé',
            },
            {
                code: 'PM04',
                name: 'Coclé',
            },
            {
                code: 'PM05',
                name: 'Darién',
            },
            {
                code: 'PM11',
                name: 'Emberá',
            },
            {
                code: 'PM06',
                name: 'Herrera',
            },
            {
                code: 'PM09',
                name: 'Kuna Yala',
            },
            {
                code: 'PM07',
                name: 'Los Santos',
            },
            {
                code: 'PM12',
                name: 'Ngäbe Buglé',
            },
            {
                code: 'PM13',
                name: 'Panamá Oeste',
            },
            {
                code: 'PM08',
                name: 'Panamá',
            },
            {
                code: 'PM10',
                name: 'Veraguas',
            },
        ],
    },
    {
        code: 'PG',
        id: 2316,
        name: 'Papua New Guinea',
        states: [
            {
                code: 'PP07',
                name: 'Bougainville',
            },
            {
                code: 'PP01',
                name: 'Central',
            },
            {
                code: 'PP08',
                name: 'Chimbu',
            },
            {
                code: 'PP10',
                name: 'East New Britain',
            },
            {
                code: 'PP11',
                name: 'East Sepik',
            },
            {
                code: 'PP09',
                name: 'Eastern Highlands',
            },
            {
                code: 'PP19',
                name: 'Enga',
            },
            {
                code: 'PP02',
                name: 'Gulf',
            },
            {
                code: 'PP21',
                name: 'Hela',
            },
            {
                code: 'PP22',
                name: 'Jiwaka',
            },
            {
                code: 'PP12',
                name: 'Madang',
            },
            {
                code: 'PP13',
                name: 'Manus',
            },
            {
                code: 'PP03',
                name: 'Milne Bay',
            },
            {
                code: 'PP14',
                name: 'Morobe',
            },
            {
                code: 'PP20',
                name: 'National Capital District',
            },
            {
                code: 'PP15',
                name: 'New Ireland',
            },
            {
                code: 'PP04',
                name: 'Northern',
            },
            {
                code: 'PP18',
                name: 'Sandaun',
            },
            {
                code: 'PP05',
                name: 'Southern Highlands',
            },
            {
                code: 'PP17',
                name: 'West New Britain',
            },
            {
                code: 'PP06',
                name: 'Western',
            },
            {
                code: 'PP16',
                name: 'Western Highlands',
            },
        ],
    },
    {
        code: 'PY',
        id: 2317,
        name: 'Paraguay',
        states: [
            {
                code: 'PA23',
                name: 'Alto Paraguay',
            },
            {
                code: 'PA01',
                name: 'Alto Paraná',
            },
            {
                code: 'PA02',
                name: 'Amambay',
            },
            {
                code: 'PA22',
                name: 'Asunción',
            },
            {
                code: 'PA24',
                name: 'Boquerón',
            },
            {
                code: 'PA04',
                name: 'Caaguazú',
            },
            {
                code: 'PA05',
                name: 'Caazapá',
            },
            {
                code: 'PA19',
                name: 'Canindeyú',
            },
            {
                code: 'PA06',
                name: 'Central',
            },
            {
                code: 'PA07',
                name: 'Concepción',
            },
            {
                code: 'PA08',
                name: 'Cordillera',
            },
            {
                code: 'PA10',
                name: 'Guairá',
            },
            {
                code: 'PA11',
                name: 'Itapúa',
            },
            {
                code: 'PA12',
                name: 'Misiones',
            },
            {
                code: 'PA15',
                name: 'Paraguarí',
            },
            {
                code: 'PA16',
                name: 'Presidente Hayes',
            },
            {
                code: 'PA17',
                name: 'San Pedro',
            },
            {
                code: 'PA13',
                name: 'Ñeembucú',
            },
        ],
    },
    {
        code: 'PE',
        id: 2318,
        name: 'Peru',
        states: [
            {
                code: 'PE01',
                name: 'Amazonas',
            },
            {
                code: 'PE02',
                name: 'Ancash',
            },
            {
                code: 'PE03',
                name: 'Apurímac',
            },
            {
                code: 'PE04',
                name: 'Arequipa',
            },
            {
                code: 'PE05',
                name: 'Ayacucho',
            },
            {
                code: 'PE06',
                name: 'Cajamarca',
            },
            {
                code: 'PE07',
                name: 'Callao',
            },
            {
                code: 'PE08',
                name: 'Cusco',
            },
            {
                code: 'PE09',
                name: 'Huancavelica',
            },
            {
                code: 'PE10',
                name: 'Huánuco',
            },
            {
                code: 'PE11',
                name: 'Ica',
            },
            {
                code: 'PE12',
                name: 'Junín',
            },
            {
                code: 'PE13',
                name: 'La Libertad',
            },
            {
                code: 'PE14',
                name: 'Lambayeque',
            },
            {
                code: 'PE15',
                name: 'Lima',
            },
            {
                code: 'PE26',
                name: 'Lima [Province]',
            },
            {
                code: 'PE16',
                name: 'Loreto',
            },
            {
                code: 'PE17',
                name: 'Madre de Dios',
            },
            {
                code: 'PE18',
                name: 'Moquegua',
            },
            {
                code: 'PE19',
                name: 'Pasco',
            },
            {
                code: 'PE20',
                name: 'Piura',
            },
            {
                code: 'PE21',
                name: 'Puno',
            },
            {
                code: 'PE22',
                name: 'San Martín',
            },
            {
                code: 'PE23',
                name: 'Tacna',
            },
            {
                code: 'PE24',
                name: 'Tumbes',
            },
            {
                code: 'PE25',
                name: 'Ucayali',
            },
        ],
    },
    {
        code: 'PH',
        id: 2319,
        name: 'Philippines',
        states: [
            {
                code: 'RP01',
                name: 'Abra',
            },
            {
                code: 'RP02',
                name: 'Agusan del Norte',
            },
            {
                code: 'RP03',
                name: 'Agusan del Sur',
            },
            {
                code: 'RP04',
                name: 'Aklan',
            },
            {
                code: 'RP05',
                name: 'Albay',
            },
            {
                code: 'RP06',
                name: 'Antique',
            },
            {
                code: 'RPH6',
                name: 'Apayao',
            },
            {
                code: 'RPG8',
                name: 'Aurora',
            },
            {
                code: 'RP22',
                name: 'Basilan',
            },
            {
                code: 'RP07',
                name: 'Bataan',
            },
            {
                code: 'RP08',
                name: 'Batanes',
            },
            {
                code: 'RP09',
                name: 'Batangas',
            },
            {
                code: 'RP10',
                name: 'Benguet',
            },
            {
                code: 'RPH9',
                name: 'Biliran',
            },
            {
                code: 'RP11',
                name: 'Bohol',
            },
            {
                code: 'RP12',
                name: 'Bukidnon',
            },
            {
                code: 'RP13',
                name: 'Bulacan',
            },
            {
                code: 'RP14',
                name: 'Cagayan',
            },
            {
                code: 'RP15',
                name: 'Camarines Norte',
            },
            {
                code: 'RP16',
                name: 'Camarines Sur',
            },
            {
                code: 'RP17',
                name: 'Camiguin',
            },
            {
                code: 'RP18',
                name: 'Capiz',
            },
            {
                code: 'RP19',
                name: 'Catanduanes',
            },
            {
                code: 'RP20',
                name: 'Cavite',
            },
            {
                code: 'RP21',
                name: 'Cebu',
            },
            {
                code: 'RPI6',
                name: 'Compostela Valley',
            },
            {
                code: 'RP57',
                name: 'Cotabato',
            },
            {
                code: 'RP26',
                name: 'Davao Oriental',
            },
            {
                code: 'RPI7',
                name: 'Davao del Norte',
            },
            {
                code: 'RP25',
                name: 'Davao del Sur',
            },
            {
                code: 'RPI9',
                name: 'Dinagat Islands',
            },
            {
                code: 'RP23',
                name: 'Eastern Samar',
            },
            {
                code: 'RPJ3',
                name: 'Guimaras',
            },
            {
                code: 'RP27',
                name: 'Ifugao',
            },
            {
                code: 'RP28',
                name: 'Ilocos Norte',
            },
            {
                code: 'RP29',
                name: 'Ilocos Sur',
            },
            {
                code: 'RP30',
                name: 'Iloilo',
            },
            {
                code: 'RP31',
                name: 'Isabela',
            },
            {
                code: 'RPJ7',
                name: 'Kalinga',
            },
            {
                code: 'RP36',
                name: 'La Union',
            },
            {
                code: 'RP33',
                name: 'Laguna',
            },
            {
                code: 'RP34',
                name: 'Lanao del Norte',
            },
            {
                code: 'RP35',
                name: 'Lanao del Sur',
            },
            {
                code: 'RP37',
                name: 'Leyte',
            },
            {
                code: 'RP56',
                name: 'Maguindanao',
            },
            {
                code: 'RP38',
                name: 'Marinduque',
            },
            {
                code: 'RP39',
                name: 'Masbate',
            },
            {
                code: 'RPD9',
                name: 'Metropolitan Manila',
            },
            {
                code: 'RP42',
                name: 'Misamis Occidental',
            },
            {
                code: 'RP43',
                name: 'Misamis Oriental',
            },
            {
                code: 'RP44',
                name: 'Mountain',
            },
            {
                code: 'RPH3',
                name: 'Negros Occidental',
            },
            {
                code: 'RP46',
                name: 'Negros Oriental',
            },
            {
                code: 'RP67',
                name: 'Northern Samar',
            },
            {
                code: 'RP47',
                name: 'Nueva Ecija',
            },
            {
                code: 'RP48',
                name: 'Nueva Vizcaya',
            },
            {
                code: 'RP40',
                name: 'Occidental Mindoro',
            },
            {
                code: 'RP41',
                name: 'Oriental Mindoro',
            },
            {
                code: 'RP49',
                name: 'Palawan',
            },
            {
                code: 'RP50',
                name: 'Pampanga',
            },
            {
                code: 'RP51',
                name: 'Pangasinan',
            },
            {
                code: 'RPH2',
                name: 'Quezon',
            },
            {
                code: 'RP68',
                name: 'Quirino',
            },
            {
                code: 'RP53',
                name: 'Rizal',
            },
            {
                code: 'RP54',
                name: 'Romblon',
            },
            {
                code: 'RP55',
                name: 'Samar',
            },
            {
                code: 'PH72',
                name: 'Sarangani',
            },
            {
                code: 'RP69',
                name: 'Siquijor',
            },
            {
                code: 'RP58',
                name: 'Sorsogon',
            },
            {
                code: 'RP70',
                name: 'South Cotabato',
            },
            {
                code: 'RP59',
                name: 'Southern Leyte',
            },
            {
                code: 'RP71',
                name: 'Sultan Kudarat',
            },
            {
                code: 'RP60',
                name: 'Sulu',
            },
            {
                code: 'RP61',
                name: 'Surigao del Norte',
            },
            {
                code: 'RP62',
                name: 'Surigao del Sur',
            },
            {
                code: 'RPO3',
                name: 'Tarlac',
            },
            {
                code: 'RPO4',
                name: 'Tawi-Tawi',
            },
            {
                code: 'RPP1',
                name: 'Zambales',
            },
            {
                code: 'RPG7',
                name: 'Zamboanga del Norte',
            },
            {
                code: 'RP65',
                name: 'Zamboanga del Sur',
            },
            {
                code: 'RP66',
                name: 'Zamboanga-Sibugay',
            },
        ],
    },
    {
        code: 'PN',
        id: 2431,
        name: 'Pitcairn',
        states: [],
    },
    {
        code: 'PL',
        id: 2320,
        name: 'Poland',
        states: [
            {
                code: 'PL-DS',
                name: 'Dolnoslaskie',
            },
            {
                code: 'PL-KP',
                name: 'Kujawsko-pomorskie',
            },
            {
                code: 'PL-LD',
                name: 'Lódzkie',
            },
            {
                code: 'PL-LU',
                name: 'Lubelskie',
            },
            {
                code: 'PL-LB',
                name: 'Lubuskie',
            },
            {
                code: 'PL-MA',
                name: 'Malopolskie',
            },
            {
                code: 'PL-MZ',
                name: 'Mazowieckie',
            },
            {
                code: 'PL-OP',
                name: 'Opolskie',
            },
            {
                code: 'PL-PK',
                name: 'Podkarpackie',
            },
            {
                code: 'PL-PD',
                name: 'Podlaskie',
            },
            {
                code: 'PL-PM',
                name: 'Pomorskie',
            },
            {
                code: 'PL-SL',
                name: 'Slaskie',
            },
            {
                code: 'PL-SK',
                name: 'Swietokrzyskie',
            },
            {
                code: 'PL-WN',
                name: 'Warminsko-mazurskie',
            },
            {
                code: 'PL-WP',
                name: 'Wielkopolskie',
            },
        ],
    },
    {
        code: 'PT',
        id: 2321,
        name: 'Portugal',
        states: [
            {
                code: 'PO23',
                name: 'Acores Autonomous',
            },
            {
                code: 'PO02',
                name: 'Aveiro',
            },
            {
                code: 'PO03',
                name: 'Beja',
            },
            {
                code: 'PO04',
                name: 'Braga',
            },
            {
                code: 'PO05',
                name: 'Braganca',
            },
            {
                code: 'PO06',
                name: 'Castelo Branco',
            },
            {
                code: 'PO07',
                name: 'Coimbra',
            },
            {
                code: 'PO08',
                name: 'Evora',
            },
            {
                code: 'PO09',
                name: 'Faro',
            },
            {
                code: 'PO11',
                name: 'Guarda',
            },
            {
                code: 'PO13',
                name: 'Leiria',
            },
            {
                code: 'PO14',
                name: 'Lisboa',
            },
            {
                code: 'PO10',
                name: 'Madeira Autonomous',
            },
            {
                code: 'PO16',
                name: 'Portalegre',
            },
            {
                code: 'PO17',
                name: 'Porto',
            },
            {
                code: 'PO18',
                name: 'Santarem',
            },
            {
                code: 'PO19',
                name: 'Setubal',
            },
            {
                code: 'PO20',
                name: 'Viana do Castelo',
            },
            {
                code: 'PO21',
                name: 'Vila Real',
            },
            {
                code: 'PO22',
                name: 'Viseu',
            },
        ],
    },
    {
        code: 'PR',
        id: 2374,
        name: 'Puerto Rico',
        states: [
            {
                code: 'PR.AJ',
                name: 'Adjuntas',
            },
            {
                code: 'PR.AD',
                name: 'Aguada',
            },
            {
                code: 'PR.AL',
                name: 'Aguadilla',
            },
            {
                code: 'PR.AB',
                name: 'Aguas Buenas',
            },
            {
                code: 'PR.AI',
                name: 'Aibonito',
            },
            {
                code: 'PR.AN',
                name: 'Añasco',
            },
            {
                code: 'PR.AC',
                name: 'Arecibo',
            },
            {
                code: 'PR.AR',
                name: 'Arroyo',
            },
            {
                code: 'PR.BC',
                name: 'Barceloneta',
            },
            {
                code: 'PR.BQ',
                name: 'Barranquitas',
            },
            {
                code: 'PR.BY',
                name: 'Bayamón',
            },
            {
                code: 'PR.CR',
                name: 'Cabo Rojo',
            },
            {
                code: 'PR.CG',
                name: 'Caguas',
            },
            {
                code: 'PR.CA',
                name: 'Camuy',
            },
            {
                code: 'PR.CV',
                name: 'Canóvanas',
            },
            {
                code: 'PR.CN',
                name: 'Carolina',
            },
            {
                code: 'PR.CT',
                name: 'Cataño',
            },
            {
                code: 'PR.CY',
                name: 'Cayey',
            },
            {
                code: 'PR.CB',
                name: 'Ceiba',
            },
            {
                code: 'PR.CL',
                name: 'Ciales',
            },
            {
                code: 'PR.CD',
                name: 'Cidra',
            },
            {
                code: 'PR.CO',
                name: 'Coamo',
            },
            {
                code: 'PR.CM',
                name: 'Comerío',
            },
            {
                code: 'PR.CZ',
                name: 'Corozal',
            },
            {
                code: 'PR.CU',
                name: 'Culebra',
            },
            {
                code: 'PR.DO',
                name: 'Dorado',
            },
            {
                code: 'PR.FJ',
                name: 'Fajardo',
            },
            {
                code: 'PR.FL',
                name: 'Florida',
            },
            {
                code: 'PR.GC',
                name: 'Guánica',
            },
            {
                code: 'PR.GM',
                name: 'Guayama',
            },
            {
                code: 'PR.GL',
                name: 'Guayanilla',
            },
            {
                code: 'PR.GB',
                name: 'Guaynabo',
            },
            {
                code: 'PR.GR',
                name: 'Gurabo',
            },
            {
                code: 'PR.HA',
                name: 'Hatillo',
            },
            {
                code: 'PR.HO',
                name: 'Hormigueros',
            },
            {
                code: 'PR.HU',
                name: 'Humacao',
            },
            {
                code: 'PR.IS',
                name: 'Isabela',
            },
            {
                code: 'PR.JY',
                name: 'Jayuya',
            },
            {
                code: 'PR.JD',
                name: 'Juana Díaz',
            },
            {
                code: 'PR.JC',
                name: 'Juncos',
            },
            {
                code: 'PR.LJ',
                name: 'Lajas',
            },
            {
                code: 'PR.LR',
                name: 'Lares',
            },
            {
                code: 'PR.LM',
                name: 'Las Marías',
            },
            {
                code: 'PR.LP',
                name: 'Las Piedras',
            },
            {
                code: 'PR.LZ',
                name: 'Loíza',
            },
            {
                code: 'PR.LQ',
                name: 'Luquillo',
            },
            {
                code: 'PR.MT',
                name: 'Manatí',
            },
            {
                code: 'PR.MR',
                name: 'Maricao',
            },
            {
                code: 'PR.MB',
                name: 'Maunabo',
            },
            {
                code: 'PR.MG',
                name: 'Mayagüez',
            },
            {
                code: 'PR.MC',
                name: 'Moca',
            },
            {
                code: 'PR.MV',
                name: 'Morovis',
            },
            {
                code: 'PR.NG',
                name: 'Naguabo',
            },
            {
                code: 'PR.NR',
                name: 'Naranjito',
            },
            {
                code: 'PR.OR',
                name: 'Orocovis',
            },
            {
                code: 'PR.PT',
                name: 'Patillas',
            },
            {
                code: 'PR.PN\t',
                name: 'Peñuelas',
            },
            {
                code: 'PR.PO',
                name: 'Ponce',
            },
            {
                code: 'PR.QB',
                name: 'Quebradillas',
            },
            {
                code: 'PR.RC',
                name: 'Rincón',
            },
            {
                code: 'PR.RG',
                name: 'Río Grande',
            },
            {
                code: 'PR.SB',
                name: 'Sabana Grande',
            },
            {
                code: 'PR.SA',
                name: 'Salinas',
            },
            {
                code: 'PR.SG',
                name: 'San Germán',
            },
            {
                code: 'PR.SJ',
                name: 'San Juan',
            },
            {
                code: 'PR.SL',
                name: 'San Lorenzo',
            },
            {
                code: 'PR.SS',
                name: 'San Sebastián',
            },
            {
                code: 'PR.SI',
                name: 'Santa Isabel',
            },
            {
                code: 'PR.TA',
                name: 'Toa Alta',
            },
            {
                code: 'PR.TB',
                name: 'Toa Baja',
            },
            {
                code: 'PR.TJ',
                name: 'Trujillo Alto',
            },
            {
                code: 'PR.UT',
                name: 'Utuado',
            },
            {
                code: 'PR.VA',
                name: 'Vega Alta',
            },
            {
                code: 'PR.VB',
                name: 'Vega Baja',
            },
            {
                code: 'PR.VQ',
                name: 'Vieques',
            },
            {
                code: 'PR.VL',
                name: 'Villalba',
            },
            {
                code: 'PR.YB',
                name: 'Yabucoa',
            },
            {
                code: 'PR.YU',
                name: 'Yauco',
            },
        ],
    },
    {
        code: 'QA',
        id: 2322,
        name: 'Qatar',
        states: [
            {
                code: 'QA01',
                name: 'Ad Dawhah',
            },
            {
                code: 'QA13',
                name: 'Al Daayen',
            },
            {
                code: 'QA04',
                name: 'Al Khawr',
            },
            {
                code: 'QA10',
                name: 'Al Wakrah',
            },
            {
                code: 'QA14',
                name: 'Al-Shahaniya',
            },
            {
                code: 'QA06',
                name: 'Ar Rayyan',
            },
            {
                code: 'QA08',
                name: 'Madinat ach Shamal',
            },
            {
                code: 'QA09',
                name: 'Umm Salal',
            },
        ],
    },
    {
        code: 'R999',
        id: 2398,
        name: 'Reunion',
        states: [],
    },
    {
        code: 'RO',
        id: 2323,
        name: 'Romania',
        states: [
            {
                code: 'RO-AB',
                name: 'Alba',
            },
            {
                code: 'RO-AR',
                name: 'Arad',
            },
            {
                code: 'RO-AG',
                name: 'Arges',
            },
            {
                code: 'RO-BC',
                name: 'Bacau',
            },
            {
                code: 'RO-BH',
                name: 'Bihor',
            },
            {
                code: 'RO-BN',
                name: 'Bistrita-Nasaud',
            },
            {
                code: 'RO-BT',
                name: 'Botosani',
            },
            {
                code: 'RO-BR',
                name: 'Braila',
            },
            {
                code: 'RO-BV',
                name: 'Brasov',
            },
            {
                code: 'RO-B',
                name: 'Bucuresti',
            },
            {
                code: 'RO-BZ',
                name: 'Buzau',
            },
            {
                code: 'RO-CL',
                name: 'Calarasi',
            },
            {
                code: 'RO-CS',
                name: 'Caras-Severin',
            },
            {
                code: 'RO-CJ',
                name: 'Cluj',
            },
            {
                code: 'RO-CT',
                name: 'Constanta',
            },
            {
                code: 'RO-CV',
                name: 'Covasna',
            },
            {
                code: 'RO-DB',
                name: 'Dâmbovita',
            },
            {
                code: 'RO-DJ',
                name: 'Dolj',
            },
            {
                code: 'RO-GL',
                name: 'Galati',
            },
            {
                code: 'RO-GR',
                name: 'Giurgiu',
            },
            {
                code: 'RO-GJ',
                name: 'Gorj',
            },
            {
                code: 'RO-HR',
                name: 'Harghita',
            },
            {
                code: 'RO-HD',
                name: 'Hunedoara',
            },
            {
                code: 'RO-IL',
                name: 'Ialomita',
            },
            {
                code: 'RO-IS',
                name: 'Iasi',
            },
            {
                code: 'RO-IF',
                name: 'Ilfov',
            },
            {
                code: 'RO-MM',
                name: 'Maramures',
            },
            {
                code: 'RO-MH',
                name: 'Mehedinti',
            },
            {
                code: 'RO-MS',
                name: 'Mures',
            },
            {
                code: 'RO-NT',
                name: 'Neamt',
            },
            {
                code: 'RO-OT',
                name: 'Olt',
            },
            {
                code: 'RO-PH',
                name: 'Prahova',
            },
            {
                code: 'RO-SJ',
                name: 'Salaj',
            },
            {
                code: 'RO-SM',
                name: 'Satu Mare',
            },
            {
                code: 'RO-SB',
                name: 'Sibiu',
            },
            {
                code: 'RO-SV',
                name: 'Suceava',
            },
            {
                code: 'RO-TR',
                name: 'Teleorman',
            },
            {
                code: 'RO-TM',
                name: 'Timis',
            },
            {
                code: 'RO-TL',
                name: 'Tulcea',
            },
            {
                code: 'RO-VL',
                name: 'Vâlcea',
            },
            {
                code: 'RO-VS',
                name: 'Vaslui',
            },
            {
                code: 'RO-VN',
                name: 'Vrancea',
            },
        ],
    },
    {
        code: 'RU',
        id: 2324,
        name: 'Russian Federation',
        states: [
            {
                code: 'RS01',
                name: 'Adygeya Republic',
            },
            {
                code: 'RS02',
                name: 'Aginskiy Buryatskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS03',
                name: 'Altay Republic',
            },
            {
                code: 'RS04',
                name: 'Altayskiy Kray',
            },
            {
                code: 'RS05',
                name: "Amurskaya Oblast'",
            },
            {
                code: 'RS06',
                name: "Arkhangel'skaya Oblast'",
            },
            {
                code: 'RS07',
                name: "Astrakhanskaya Oblast'",
            },
            {
                code: 'RS08',
                name: 'Bashkortostan Republic',
            },
            {
                code: 'RS09',
                name: "Belgorodskaya Oblast'",
            },
            {
                code: 'RS10',
                name: "Bryanskaya Oblast'",
            },
            {
                code: 'RS11',
                name: 'Buryatiya Republic',
            },
            {
                code: 'RSCI',
                name: 'Chechnya Republic',
            },
            {
                code: 'RS13',
                name: "Chelyabinskaya Oblast'",
            },
            {
                code: 'RS14',
                name: "Chitinskaya Oblast'",
            },
            {
                code: 'RS15',
                name: 'Chukotskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS16',
                name: 'Chuvashiya Republic',
            },
            {
                code: 'RS17',
                name: 'Dagestan Republic',
            },
            {
                code: 'RS18',
                name: 'Evenkiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS20',
                name: "Irkutskaya Oblast'",
            },
            {
                code: 'RS21',
                name: "Ivanovskaya Oblast'",
            },
            {
                code: 'RS22',
                name: 'Kabardino-Balkariya Republic',
            },
            {
                code: 'RS23',
                name: "Kaliningradskaya Oblast'",
            },
            {
                code: 'RS24',
                name: 'Kalmykiya Republic',
            },
            {
                code: 'RS25',
                name: "Kaluzhskaya Oblast'",
            },
            {
                code: 'RS26',
                name: "Kamchatskaya Oblast'",
            },
            {
                code: 'RS27',
                name: 'Karachayevo-Cherkesiya Republic',
            },
            {
                code: 'RS28',
                name: 'Kareliya Republic',
            },
            {
                code: 'RS29',
                name: "Kemerovskaya Oblast'",
            },
            {
                code: 'RS30',
                name: 'Khabarovskiy Kray',
            },
            {
                code: 'RS31',
                name: 'Khakasiya Republic',
            },
            {
                code: 'RS32',
                name: 'Khanty-Mansiyskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS33',
                name: "Kirovskaya Oblast'",
            },
            {
                code: 'RS34',
                name: 'Komi Republic',
            },
            {
                code: 'RS36',
                name: 'Koryakskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS37',
                name: "Kostromskaya Oblast'",
            },
            {
                code: 'RS38',
                name: 'Krasnodarskiy Kray',
            },
            {
                code: 'RS39',
                name: 'Krasnoyarskiy Kray',
            },
            {
                code: 'RS40',
                name: "Kurganskaya Oblast'",
            },
            {
                code: 'RS41',
                name: "Kurskaya Oblast'",
            },
            {
                code: 'RS42',
                name: "Leningradskaya Oblast'",
            },
            {
                code: 'RS43',
                name: "Lipetskaya Oblast'",
            },
            {
                code: 'RS44',
                name: "Magadanskaya Oblast'",
            },
            {
                code: 'RS45',
                name: 'Mariy-El Republic',
            },
            {
                code: 'RS46',
                name: 'Mordoviya Republic',
            },
            {
                code: 'RS47',
                name: "Moskovskaya Oblast'",
            },
            {
                code: 'RS48',
                name: 'Moskva Federal City',
            },
            {
                code: 'RS49',
                name: "Murmanskaya Oblast'",
            },
            {
                code: 'RS50',
                name: 'Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS51',
                name: "Nizhegorodskaya Oblast'",
            },
            {
                code: 'RS52',
                name: "Novgorodskaya Oblast'",
            },
            {
                code: 'RS53',
                name: "Novosibirskaya Oblast'",
            },
            {
                code: 'RS54',
                name: "Omskaya Oblast'",
            },
            {
                code: 'RS55',
                name: "Orenburgskaya Oblast'",
            },
            {
                code: 'RS56',
                name: "Orlovskaya Oblast'",
            },
            {
                code: 'RS57',
                name: "Penzenskaya Oblast'",
            },
            {
                code: 'RS90',
                name: 'Permskiy Kray',
            },
            {
                code: 'RS59',
                name: 'Primorskiy Kray',
            },
            {
                code: 'RS60',
                name: "Pskovskaya Oblast'",
            },
            {
                code: 'RS61',
                name: "Rostovskaya Oblast'",
            },
            {
                code: 'RS62',
                name: "Ryazanskaya Oblast'",
            },
            {
                code: 'RS63',
                name: 'Sakha (Yakutiya) Republic',
            },
            {
                code: 'RS64',
                name: "Sakhalinskaya Oblast'",
            },
            {
                code: 'RS65',
                name: "Samarskaya Oblast'",
            },
            {
                code: 'RS66',
                name: 'Sankt-Peterburg Federal City',
            },
            {
                code: 'RS67',
                name: "Saratovskaya Oblast'",
            },
            {
                code: 'RS68',
                name: 'Severnaya Osetiya-Alaniya Respublika',
            },
            {
                code: 'RS69',
                name: "Smolenskaya Oblast'",
            },
            {
                code: 'RS70',
                name: "Stavropol'skiy Kray",
            },
            {
                code: 'RS71',
                name: "Sverdlovskaya Oblast'",
            },
            {
                code: 'RS72',
                name: "Tambovskaya Oblast'",
            },
            {
                code: 'RS73',
                name: 'Tatarstan Republic',
            },
            {
                code: 'RS74',
                name: 'Taymyrskiy (Dolgano-Nenetskiy) Avtonomnyy Okrug',
            },
            {
                code: 'RS75',
                name: "Tomskaya Oblast'",
            },
            {
                code: 'RS76',
                name: "Tul'skaya Oblast'",
            },
            {
                code: 'RS77',
                name: "Tverskaya Oblast'",
            },
            {
                code: 'RS78',
                name: "Tyumenskaya Oblast'",
            },
            {
                code: 'RS79',
                name: 'Tyva Republic',
            },
            {
                code: 'RS80',
                name: 'Udmurtiya Republic',
            },
            {
                code: 'RS81',
                name: "Ul'yanovskaya Oblast'",
            },
            {
                code: 'RS82',
                name: "Ust'-Ordynskiy Buryatskiy Avtonomnyy Okrug",
            },
            {
                code: 'RS83',
                name: "Vladimirskaya Oblast'",
            },
            {
                code: 'RS84',
                name: "Volgogradskaya Oblast'",
            },
            {
                code: 'RS85',
                name: "Vologodskaya Oblast'",
            },
            {
                code: 'RS86',
                name: "Voronezhskaya Oblast'",
            },
            {
                code: 'RS87',
                name: 'Yamalo-Nenetskiy Avtonomnyy Okrug',
            },
            {
                code: 'RS88',
                name: "Yaroslavskaya Oblast'",
            },
            {
                code: 'RS89',
                name: "Yevreyskaya Avtonomnaya Oblast'",
            },
        ],
    },
    {
        code: 'RW',
        id: 2325,
        name: 'Rwanda',
        states: [
            {
                code: 'RW11',
                name: 'Eastern',
            },
            {
                code: 'RW12',
                name: 'Kigali City',
            },
            {
                code: 'RW13',
                name: 'Northern',
            },
            {
                code: 'RW15',
                name: 'Southern',
            },
            {
                code: 'RW14',
                name: 'Western',
            },
        ],
    },
    {
        code: 'BL',
        id: 2432,
        name: 'Saint Barthélemy',
        states: [],
    },
    {
        code: 'SH',
        id: 2433,
        name: 'Saint Helena; Ascension and Tristan Da Cunha',
        states: [],
    },
    {
        code: 'KN',
        id: 2399,
        name: 'Saint Kitts and Nevis',
        states: [],
    },
    {
        code: 'LC',
        id: 2326,
        name: 'Saint Lucia',
        states: [],
    },
    {
        code: 'MF',
        id: 2434,
        name: 'Saint Martin',
        states: [
            {
                code: 'MF.SM',
                name: 'Saint Martin',
            },
        ],
    },
    {
        code: 'PM',
        id: 2435,
        name: 'Saint Pierre And Miquelon',
        states: [],
    },
    {
        code: 'VC',
        id: 2400,
        name: 'Saint Vincent and Grenadines',
        states: [],
    },
    {
        code: 'WS',
        id: 2401,
        name: 'Samoa',
        states: [
            {
                code: 'WS01',
                name: "A'ana",
            },
            {
                code: 'WS02',
                name: 'Aiga-i-le-Tai',
            },
            {
                code: 'WS03',
                name: 'Atua',
            },
            {
                code: 'WS04',
                name: "Fa'asaleleaga",
            },
            {
                code: 'WS05',
                name: "Gaga'emauga",
            },
            {
                code: 'WS07',
                name: 'Gagaifomauga',
            },
            {
                code: 'WS08',
                name: 'Palauli',
            },
            {
                code: 'WS09',
                name: "Satupa'itea",
            },
            {
                code: 'WS10',
                name: 'Tuamasaga',
            },
            {
                code: 'WS06',
                name: "Va'a-o-Fonoti",
            },
            {
                code: 'WS11',
                name: 'Vaisigano',
            },
        ],
    },
    {
        code: 'SM',
        id: 2327,
        name: 'San Marino',
        states: [],
    },
    {
        code: 'TP',
        id: 2403,
        name: 'Sao Tome and Principe',
        states: [],
    },
    {
        code: 'SA',
        id: 2328,
        name: 'Saudi Arabia',
        states: [
            {
                code: 'SA02',
                name: 'Al Bahah',
            },
            {
                code: 'SA15',
                name: 'Al Hudud ash Shamaliyah',
            },
            {
                code: 'SA20',
                name: 'Al Jawf',
            },
            {
                code: 'SA05',
                name: 'Al Madinah',
            },
            {
                code: 'SA08',
                name: 'Al Qasim',
            },
            {
                code: 'SA10',
                name: 'Ar Riyad',
            },
            {
                code: 'SA06',
                name: 'Ash Sharqiyah',
            },
            {
                code: 'SA11',
                name: 'Asir',
            },
            {
                code: 'SA13',
                name: "Ha'il",
            },
            {
                code: 'SA17',
                name: 'Jizan',
            },
            {
                code: 'SA14',
                name: 'Makkah',
            },
            {
                code: 'SA16',
                name: 'Najran',
            },
            {
                code: 'SA19',
                name: 'Tabuk',
            },
        ],
    },
    {
        code: 'SN',
        id: 2329,
        name: 'Senegal',
        states: [
            {
                code: 'SG01',
                name: 'Dakar',
            },
            {
                code: 'SG03',
                name: 'Diourbel',
            },
            {
                code: 'SG09',
                name: 'Fatick',
            },
            {
                code: 'SG16',
                name: 'Kaffrine',
            },
            {
                code: 'SG10',
                name: 'Kaolack',
            },
            {
                code: 'SG17',
                name: 'Kédougou',
            },
            {
                code: 'SG11',
                name: 'Kolda',
            },
            {
                code: 'SG13',
                name: 'Louga',
            },
            {
                code: 'SG15',
                name: 'Matam',
            },
            {
                code: 'SG14',
                name: 'Saint-Louis',
            },
            {
                code: 'SG18',
                name: 'Sédhiou',
            },
            {
                code: 'SG05',
                name: 'Tambacounda',
            },
            {
                code: 'SG07',
                name: 'Thiès',
            },
            {
                code: 'SG12',
                name: 'Ziguinchor',
            },
        ],
    },
    {
        code: 'RI',
        id: 2402,
        name: 'Serbia',
        states: [
            {
                code: 'RS-00',
                name: 'Belgrade',
            },
            {
                code: 'RS-14',
                name: 'Borski okrug',
            },
            {
                code: 'RS-11',
                name: 'Branicevski okrug',
            },
            {
                code: 'RS-23',
                name: 'Jablanicki okrug',
            },
            {
                code: 'RS-06',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-04',
                name: 'Južnobanatski okrug',
            },
            {
                code: 'RS-09',
                name: 'Kolubarski okrug',
            },
            {
                code: 'RS-25',
                name: 'Kosovski okrug',
            },
            {
                code: 'RS-28',
                name: 'Kosovsko-Mitrovacki okrug',
            },
            {
                code: 'RS-29',
                name: 'Kosovsko-Pomoravski okrug',
            },
            {
                code: 'RS-08',
                name: 'Macvanski okrug',
            },
            {
                code: 'RS-17',
                name: 'Moravicki okrug',
            },
            {
                code: 'RS-20',
                name: 'Nišavski okrug',
            },
            {
                code: 'RS-24',
                name: 'Pcinjski okrug',
            },
            {
                code: 'RS-26',
                name: 'Pecki okrug',
            },
            {
                code: 'RS-22',
                name: 'Pirotski okrug',
            },
            {
                code: 'RS-10',
                name: 'Podunavski okrug',
            },
            {
                code: 'RS-13',
                name: 'Pomoravski okrug',
            },
            {
                code: 'RS-27',
                name: 'Prizrenski okrug',
            },
            {
                code: 'RS-19',
                name: 'Rasinski okrug',
            },
            {
                code: 'RS-18',
                name: 'Raška okrug',
            },
            {
                code: 'RS-01',
                name: 'Severnobacki okrug',
            },
            {
                code: 'RS-03',
                name: 'Severnobanatski okrug',
            },
            {
                code: 'RS-02',
                name: 'Srednjebanatski okrug',
            },
            {
                code: 'RS-07',
                name: 'Sremski okrug',
            },
            {
                code: 'RS-12',
                name: 'Šumadijski okrug',
            },
            {
                code: 'RS-21',
                name: 'Toplièki okrug',
            },
            {
                code: 'RS-15',
                name: 'Zajeèarski okrug',
            },
            {
                code: 'RS-05',
                name: 'Zapadnobaèki okrug',
            },
            {
                code: 'RS-16',
                name: 'Zlatiborski okrug',
            },
        ],
    },
    {
        code: 'SC',
        id: 2331,
        name: 'Seychelles',
        states: [],
    },
    {
        code: 'SL',
        id: 2332,
        name: 'Sierra Leone',
        states: [
            {
                code: 'SL01',
                name: 'Eastern',
            },
            {
                code: 'SL02',
                name: 'Northern',
            },
            {
                code: 'SL03',
                name: 'Southern',
            },
            {
                code: 'SL04',
                name: 'Western',
            },
        ],
    },
    {
        code: 'SG',
        id: 2333,
        name: 'Singapore',
        states: [
            {
                code: 'SG01',
                name: 'Central Singapore',
            },
            {
                code: 'SG02',
                name: 'North East',
            },
            {
                code: 'SG03',
                name: 'North West',
            },
            {
                code: 'SG04',
                name: 'South East',
            },
            {
                code: 'SG05',
                name: 'South West',
            },
        ],
    },
    {
        code: 'SX',
        id: 2448,
        name: 'Sint Maarten',
        states: [
            {
                code: 'SX.SM',
                name: 'Sint Maarten',
            },
        ],
    },
    {
        code: 'SK',
        id: 2334,
        name: 'Slovakia',
        states: [
            {
                code: 'SK-BC',
                name: 'Banskobystrický kraj',
            },
            {
                code: 'SK-BL',
                name: 'Bratislavský kraj',
            },
            {
                code: 'SK-KI',
                name: 'Košický kraj',
            },
            {
                code: 'SK-NI',
                name: 'Nitriansky kraj',
            },
            {
                code: 'SK-PV',
                name: 'Prešovský kraj',
            },
            {
                code: 'SK-TC',
                name: 'Trenciansky kraj',
            },
            {
                code: 'SK-TA',
                name: 'Trnavský kraj',
            },
            {
                code: 'SK-ZI',
                name: 'Žilinský kraj',
            },
        ],
    },
    {
        code: 'SI',
        id: 2335,
        name: 'Slovenia',
        states: [
            {
                code: 'SI-001',
                name: 'Ajdovšcina',
            },
            {
                code: 'SI-195',
                name: 'Apace',
            },
            {
                code: 'SI-002',
                name: 'Beltinci',
            },
            {
                code: 'SI-148',
                name: 'Benedikt',
            },
            {
                code: 'SI-149',
                name: 'Bistrica ob Sotli',
            },
            {
                code: 'SI-003',
                name: 'Bled',
            },
            {
                code: 'SI-150',
                name: 'Bloke',
            },
            {
                code: 'SI-004',
                name: 'Bohinj',
            },
            {
                code: 'SI-005',
                name: 'Borovnica',
            },
            {
                code: 'SI-006',
                name: 'Bovec',
            },
            {
                code: 'SI-151',
                name: 'Braslovce',
            },
            {
                code: 'SI-007',
                name: 'Brda',
            },
            {
                code: 'SI-009',
                name: 'Brežice',
            },
            {
                code: 'SI-008',
                name: 'Brezovica',
            },
            {
                code: 'SI-152',
                name: 'Cankova',
            },
            {
                code: 'SI-011',
                name: 'Celje',
            },
            {
                code: 'SI-012',
                name: 'Cerklje na Gorenjskem',
            },
            {
                code: 'SI-013',
                name: 'Cerknica',
            },
            {
                code: 'SI-014',
                name: 'Cerkno',
            },
            {
                code: 'SI-153',
                name: 'Cerkvenjak',
            },
            {
                code: 'SI-197',
                name: 'Cirkulane',
            },
            {
                code: 'SI-015',
                name: 'Crenšovci',
            },
            {
                code: 'SI-016',
                name: 'Crna na Koroškem',
            },
            {
                code: 'SI-017',
                name: 'Crnomelj',
            },
            {
                code: 'SI-018',
                name: 'Destrnik',
            },
            {
                code: 'SI-019',
                name: 'Divaca',
            },
            {
                code: 'SI-154',
                name: 'Dobje',
            },
            {
                code: 'SI-020',
                name: 'Dobrepolje',
            },
            {
                code: 'SI-155',
                name: 'Dobrna',
            },
            {
                code: 'SI-021',
                name: 'Dobrova-Polhov Gradec',
            },
            {
                code: 'SI-156',
                name: 'Dobrovnik/Dobronak',
            },
            {
                code: 'SI-022',
                name: 'Dol pri Ljubljani',
            },
            {
                code: 'SI-157',
                name: 'Dolenjske Toplice',
            },
            {
                code: 'SI-023',
                name: 'Domžale',
            },
            {
                code: 'SI-024',
                name: 'Dornava',
            },
            {
                code: 'SI-025',
                name: 'Dravograd',
            },
            {
                code: 'SI-026',
                name: 'Duplek',
            },
            {
                code: 'SI-027',
                name: 'Gorenja vas-Poljane',
            },
            {
                code: 'SI-028',
                name: 'Gorišnica',
            },
            {
                code: 'SI-207',
                name: 'Gorje',
            },
            {
                code: 'SI-029',
                name: 'Gornja Radgona',
            },
            {
                code: 'SI-030',
                name: 'Gornji Grad',
            },
            {
                code: 'SI-031',
                name: 'Gornji Petrovci',
            },
            {
                code: 'SI-158',
                name: 'Grad',
            },
            {
                code: 'SI-032',
                name: 'Grosuplje',
            },
            {
                code: 'SI-159',
                name: 'Hajdina',
            },
            {
                code: 'SI-160',
                name: 'Hoce-Slivnica',
            },
            {
                code: 'SI-161',
                name: 'Hodoš/Hodos',
            },
            {
                code: 'SI-162',
                name: 'Horjul',
            },
            {
                code: 'SI-034',
                name: 'Hrastnik',
            },
            {
                code: 'SI-035',
                name: 'Hrpelje-Kozina',
            },
            {
                code: 'SI-036',
                name: 'Idrija',
            },
            {
                code: 'SI-037',
                name: 'Ig',
            },
            {
                code: 'SI-038',
                name: 'Ilirska Bistrica',
            },
            {
                code: 'SI-039',
                name: 'Ivancna Gorica',
            },
            {
                code: 'SI-040',
                name: 'Izola/Isola',
            },
            {
                code: 'SI-041',
                name: 'Jesenice',
            },
            {
                code: 'SI-163',
                name: 'Jezersko',
            },
            {
                code: 'SI-042',
                name: 'Juršinci',
            },
            {
                code: 'SI-043',
                name: 'Kamnik',
            },
            {
                code: 'SI-044',
                name: 'Kanal',
            },
            {
                code: 'SI-045',
                name: 'Kidricevo',
            },
            {
                code: 'SI-046',
                name: 'Kobarid',
            },
            {
                code: 'SI-047',
                name: 'Kobilje',
            },
            {
                code: 'SI-048',
                name: 'Kocevje',
            },
            {
                code: 'SI-049',
                name: 'Komen',
            },
            {
                code: 'SI-164',
                name: 'Komenda',
            },
            {
                code: 'SI-050',
                name: 'Koper/Capodistria',
            },
            {
                code: 'SI-196',
                name: 'Kosanjevica na Krki',
            },
            {
                code: 'SI-165',
                name: 'Kostel',
            },
            {
                code: 'SI-051',
                name: 'Kozje',
            },
            {
                code: 'SI-052',
                name: 'Kranj',
            },
            {
                code: 'SI-053',
                name: 'Kranjska Gora',
            },
            {
                code: 'SI-166',
                name: 'Križevci',
            },
            {
                code: 'SI-054',
                name: 'Krško',
            },
            {
                code: 'SI-055',
                name: 'Kungota',
            },
            {
                code: 'SI-056',
                name: 'Kuzma',
            },
            {
                code: 'SI-057',
                name: 'Laško',
            },
            {
                code: 'SI-058',
                name: 'Lenart',
            },
            {
                code: 'SI-059',
                name: 'Lendava/Lendva',
            },
            {
                code: 'SI-060',
                name: 'Litija',
            },
            {
                code: 'SI-061',
                name: 'Ljubljana',
            },
            {
                code: 'SI-062',
                name: 'Ljubno',
            },
            {
                code: 'SI-063',
                name: 'Ljutomer',
            },
            {
                code: 'SI-208',
                name: 'Log-Dragomer',
            },
            {
                code: 'SI-064',
                name: 'Logatec',
            },
            {
                code: 'SI-065',
                name: 'Loška dolina',
            },
            {
                code: 'SI-066',
                name: 'Loški Potok',
            },
            {
                code: 'SI-167',
                name: 'Lovrenc na Pohorju',
            },
            {
                code: 'SI-067',
                name: 'Luce',
            },
            {
                code: 'SI-068',
                name: 'Lukovica',
            },
            {
                code: 'SI-069',
                name: 'Majšperk',
            },
            {
                code: 'SI-198',
                name: 'Makole',
            },
            {
                code: 'SI-070',
                name: 'Maribor',
            },
            {
                code: 'SI-168',
                name: 'Markovci',
            },
            {
                code: 'SI-071',
                name: 'Medvode',
            },
            {
                code: 'SI-072',
                name: 'Mengeš',
            },
            {
                code: 'SI-073',
                name: 'Metlika',
            },
            {
                code: 'SI-074',
                name: 'Mežica',
            },
            {
                code: 'SI-169',
                name: 'Miklavž na Dravskem polju',
            },
            {
                code: 'SI-075',
                name: 'Miren-Kostanjevica',
            },
            {
                code: 'SI-170',
                name: 'Mirna Pec',
            },
            {
                code: 'SI-076',
                name: 'Mislinja',
            },
            {
                code: 'SI-199',
                name: 'Mokronog-Trebelno',
            },
            {
                code: 'SI-077',
                name: 'Moravce',
            },
            {
                code: 'SI-078',
                name: 'Moravske Toplice',
            },
            {
                code: 'SI-079',
                name: 'Mozirje',
            },
            {
                code: 'SI-080',
                name: 'Murska Sobota',
            },
            {
                code: 'SI-081',
                name: 'Muta',
            },
            {
                code: 'SI-082',
                name: 'Naklo',
            },
            {
                code: 'SI-083',
                name: 'Nazarje',
            },
            {
                code: 'SI-084',
                name: 'Nova Gorica',
            },
            {
                code: 'SI-085',
                name: 'Novo mesto',
            },
            {
                code: 'SI-086',
                name: 'Odranci',
            },
            {
                code: 'SI-171',
                name: 'Oplotnica',
            },
            {
                code: 'SI-087',
                name: 'Ormož',
            },
            {
                code: 'SI-088',
                name: 'Osilnica',
            },
            {
                code: 'SI-089',
                name: 'Pesnica',
            },
            {
                code: 'SI-090',
                name: 'Piran/Pirano',
            },
            {
                code: 'SI-091',
                name: 'Pivka',
            },
            {
                code: 'SI-092',
                name: 'Podcetrtek',
            },
            {
                code: 'SI-172',
                name: 'Podlehnik',
            },
            {
                code: 'SI-093',
                name: 'Podvelka',
            },
            {
                code: 'SI-200',
                name: 'Poljcane',
            },
            {
                code: 'SI-173',
                name: 'Polzela',
            },
            {
                code: 'SI-094',
                name: 'Postojna',
            },
            {
                code: 'SI-174',
                name: 'Prebold',
            },
            {
                code: 'SI-095',
                name: 'Preddvor',
            },
            {
                code: 'SI-175',
                name: 'Prevalje',
            },
            {
                code: 'SI-096',
                name: 'Ptuj',
            },
            {
                code: 'SI-097',
                name: 'Puconci',
            },
            {
                code: 'SI-098',
                name: 'Race-Fram',
            },
            {
                code: 'SI-099',
                name: 'Radece',
            },
            {
                code: 'SI-100',
                name: 'Radenci',
            },
            {
                code: 'SI-101',
                name: 'Radlje ob Dravi',
            },
            {
                code: 'SI-102',
                name: 'Radovljica',
            },
            {
                code: 'SI-103',
                name: 'Ravne na Koroškem',
            },
            {
                code: 'SI-176',
                name: 'Razkrižje',
            },
            {
                code: 'SI-209',
                name: 'Recica ob Savinji',
            },
            {
                code: 'SI-201',
                name: 'Rence-Vogrsko',
            },
            {
                code: 'SI-177',
                name: 'Ribnica na Pohorju',
            },
            {
                code: 'SI-104',
                name: 'Ribnica',
            },
            {
                code: 'SI-106',
                name: 'Rogaška Slatina',
            },
            {
                code: 'SI-105',
                name: 'Rogašovci',
            },
            {
                code: 'SI-107',
                name: 'Rogatec',
            },
            {
                code: 'SI-108',
                name: 'Ruše',
            },
            {
                code: 'SI-033',
                name: 'Šalovci',
            },
            {
                code: 'SI-178',
                name: 'Selnica ob Dravi',
            },
            {
                code: 'SI-109',
                name: 'Semic',
            },
            {
                code: 'SI-183',
                name: 'Šempeter-Vrtojba',
            },
            {
                code: 'SI-117',
                name: 'Šencur',
            },
            {
                code: 'SI-118',
                name: 'Šentilj',
            },
            {
                code: 'SI-119',
                name: 'Šentjernej',
            },
            {
                code: 'SI-120',
                name: 'Šentjur pri Celju',
            },
            {
                code: 'SI-211',
                name: 'Šentrupert',
            },
            {
                code: 'SI-110',
                name: 'Sevnica',
            },
            {
                code: 'SI-111',
                name: 'Sežana',
            },
            {
                code: 'SI-121',
                name: 'Škocjan',
            },
            {
                code: 'SI-122',
                name: 'Škofja Loka',
            },
            {
                code: 'SI-123',
                name: 'Škofljica',
            },
            {
                code: 'SI-112',
                name: 'Slovenj Gradec',
            },
            {
                code: 'SI-113',
                name: 'Slovenska Bistrica',
            },
            {
                code: 'SI-114',
                name: 'Slovenske Konjice',
            },
            {
                code: 'SI-124',
                name: 'Šmarje pri Jelšah',
            },
            {
                code: 'SI-206',
                name: 'Šmarješke Toplice',
            },
            {
                code: 'SI-125',
                name: 'Šmartno ob Paki',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-194',
                name: 'Šmartno pri Litiji',
            },
            {
                code: 'SI-179',
                name: 'Sodražica',
            },
            {
                code: 'SI-180',
                name: 'Solcava',
            },
            {
                code: 'SI-126',
                name: 'Šoštanj',
            },
            {
                code: 'SI-202',
                name: 'Središce ob Dravi',
            },
            {
                code: 'SI-115',
                name: 'Starše',
            },
            {
                code: 'SI-127',
                name: 'Štore',
            },
            {
                code: 'SI-203',
                name: 'Straža',
            },
            {
                code: 'SI-181',
                name: 'Sveta Ana',
            },
            {
                code: 'SI-204',
                name: 'Sveta Trojica v Slovenskih Goricah',
            },
            {
                code: 'SI-182',
                name: 'Sveti Andraž v Slovenskih goricah',
            },
            {
                code: 'SI-116',
                name: 'Sveti Jurij',
            },
            {
                code: 'SI-210',
                name: 'Sveti Jurij v Slovenskih Goricah',
            },
            {
                code: 'SI-205',
                name: 'Sveti Tomaž',
            },
            {
                code: 'SI-184',
                name: 'Tabor',
            },
            {
                code: 'SI-010',
                name: 'Tišina',
            },
            {
                code: 'SI-128',
                name: 'Tolmin',
            },
            {
                code: 'SI-129',
                name: 'Trbovlje',
            },
            {
                code: 'SI-130',
                name: 'Trebnje',
            },
            {
                code: 'SI-185',
                name: 'Trnovska vas',
            },
            {
                code: 'SI-131',
                name: 'Tržic',
            },
            {
                code: 'SI-186',
                name: 'Trzin',
            },
            {
                code: 'SI-132',
                name: 'Turnišce',
            },
            {
                code: 'SI-133',
                name: 'Velenje',
            },
            {
                code: 'SI-187',
                name: 'Velika Polana',
            },
            {
                code: 'SI-134',
                name: 'Velike Lašce',
            },
            {
                code: 'SI-188',
                name: 'Veržej',
            },
            {
                code: 'SI-135',
                name: 'Videm',
            },
            {
                code: 'SI-136',
                name: 'Vipava',
            },
            {
                code: 'SI-137',
                name: 'Vitanje',
            },
            {
                code: 'SI-138',
                name: 'Vodice',
            },
            {
                code: 'SI-139',
                name: 'Vojnik',
            },
            {
                code: 'SI-189',
                name: 'Vransko',
            },
            {
                code: 'SI-140',
                name: 'Vrhnika',
            },
            {
                code: 'SI-141',
                name: 'Vuzenica',
            },
            {
                code: 'SI-142',
                name: 'Zagorje ob Savi',
            },
            {
                code: 'SI-190',
                name: 'Žalec',
            },
            {
                code: 'SI-143',
                name: 'Zavrc',
            },
            {
                code: 'SI-146',
                name: 'Železniki',
            },
            {
                code: 'SI-191',
                name: 'Žetale',
            },
            {
                code: 'SI-147',
                name: 'Žiri',
            },
            {
                code: 'SI-192',
                name: 'Žirovnica',
            },
            {
                code: 'SI-144',
                name: 'Zrece',
            },
            {
                code: 'SI-193',
                name: 'Žužemberk',
            },
        ],
    },
    {
        code: 'SB',
        id: 2336,
        name: 'Solomon Islands',
        states: [],
    },
    {
        code: 'SO',
        id: 2337,
        name: 'Somalia',
        states: [
            {
                code: 'SO21',
                name: 'Awdal',
            },
            {
                code: 'SO01',
                name: 'Bakool',
            },
            {
                code: 'SO02',
                name: 'Banaadir',
            },
            {
                code: 'SO03',
                name: 'Bari',
            },
            {
                code: 'SO04',
                name: 'Bay',
            },
            {
                code: 'SO05',
                name: 'Galguduud',
            },
            {
                code: 'SO06',
                name: 'Gedo',
            },
            {
                code: 'SO07',
                name: 'Hiiraan',
            },
            {
                code: 'SO08',
                name: 'Jubbada Dhexe',
            },
            {
                code: 'SO09',
                name: 'Jubbada Hoose',
            },
            {
                code: 'SO10',
                name: 'Mudug',
            },
            {
                code: 'SO18',
                name: 'Nugaal',
            },
            {
                code: 'SO12',
                name: 'Sanaag',
            },
            {
                code: 'SO13',
                name: 'Shabeellaha Dhexe',
            },
            {
                code: 'SO14',
                name: 'Shabeellaha Hoose',
            },
            {
                code: 'SO22',
                name: 'Sool',
            },
            {
                code: 'SO19',
                name: 'Togdheer',
            },
            {
                code: 'SO20',
                name: 'Woqooyi Galbeed',
            },
        ],
    },
    {
        code: 'ZA',
        id: 2338,
        name: 'South Africa',
        states: [
            {
                code: 'SF01',
                name: 'Cape Province',
            },
            {
                code: 'SF05',
                name: 'Eastern Cape',
            },
            {
                code: 'SF03',
                name: 'Free State',
            },
            {
                code: 'SF06',
                name: 'Gauteng',
            },
            {
                code: 'SF02',
                name: 'KwaZulu-Natal',
            },
            {
                code: 'SF09',
                name: 'Limpopo',
            },
            {
                code: 'SF07',
                name: 'Mpumalanga',
            },
            {
                code: 'SF10',
                name: 'North-West',
            },
            {
                code: 'SF08',
                name: 'Northern Cape',
            },
            {
                code: 'SF04',
                name: 'Transvaal',
            },
            {
                code: 'SF11',
                name: 'Western Cape',
            },
        ],
    },
    {
        code: 'GS',
        id: 2436,
        name: 'South Georgia and the South Sandwich Islands',
        states: [],
    },
    {
        code: 'SS',
        id: 2447,
        name: 'South Sudan',
        states: [
            {
                code: 'OD01',
                name: 'Central Equatoria',
            },
            {
                code: 'OD02',
                name: 'East Equatoria',
            },
            {
                code: 'OD03',
                name: 'Jungoli',
            },
            {
                code: 'OD04',
                name: 'Lakes',
            },
            {
                code: 'OD05',
                name: 'North Bahr-al-Ghazal',
            },
            {
                code: 'OD06',
                name: 'Unity',
            },
            {
                code: 'OD07',
                name: 'Upper Nile',
            },
            {
                code: 'OD08',
                name: 'Warap',
            },
            {
                code: 'OD09',
                name: 'West Bahr-al-Ghazal',
            },
            {
                code: 'OD10',
                name: 'West Equatoria',
            },
        ],
    },
    {
        code: 'ES',
        id: 2339,
        name: 'Spain',
        states: [
            {
                code: 'SP23',
                name: 'A Coruña',
            },
            {
                code: 'SP01',
                name: 'Alava',
            },
            {
                code: 'SP02',
                name: 'Albacete',
            },
            {
                code: 'SP03',
                name: 'Alicante',
            },
            {
                code: 'SP04',
                name: 'Almeria',
            },
            {
                code: 'SP51',
                name: 'Andalucia',
            },
            {
                code: 'SP52',
                name: 'Aragon',
            },
            {
                code: 'SP34',
                name: 'Asturias',
            },
            {
                code: 'SP05',
                name: 'Avila',
            },
            {
                code: 'SP06',
                name: 'Badajoz',
            },
            {
                code: 'SP08',
                name: 'Barcelona',
            },
            {
                code: 'SP09',
                name: 'Burgos',
            },
            {
                code: 'SP10',
                name: 'Caceres',
            },
            {
                code: 'SP11',
                name: 'Cadiz',
            },
            {
                code: 'SP53',
                name: 'Canarias',
            },
            {
                code: 'SP39',
                name: 'Cantabria',
            },
            {
                code: 'SP12',
                name: 'Castellon',
            },
            {
                code: 'SP55',
                name: 'Castilla y Leon',
            },
            {
                code: 'SP54',
                name: 'Castilla-La Mancha',
            },
            {
                code: 'SP56',
                name: 'Cataluna',
            },
            {
                code: 'SP13',
                name: 'Ciudad Real',
            },
            {
                code: 'SP14',
                name: 'Cordoba',
            },
            {
                code: 'SP15',
                name: 'Cuenca',
            },
            {
                code: 'SP57',
                name: 'Extremadura',
            },
            {
                code: 'SP58',
                name: 'Galicia',
            },
            {
                code: 'SP16',
                name: 'Gerona',
            },
            {
                code: 'SP17',
                name: 'Granada',
            },
            {
                code: 'SP18',
                name: 'Guadalajara',
            },
            {
                code: 'SP19',
                name: 'Guipuzcoa',
            },
            {
                code: 'SP20',
                name: 'Huelva',
            },
            {
                code: 'SP21',
                name: 'Huesca',
            },
            {
                code: 'SP07',
                name: 'Islas Baleares',
            },
            {
                code: 'SP22',
                name: 'Jaen',
            },
            {
                code: 'SP23',
                name: 'La Coruna',
            },
            {
                code: 'SP27',
                name: 'La Rioja',
            },
            {
                code: 'SP24',
                name: 'Las Palmas',
            },
            {
                code: 'SP25',
                name: 'Leon',
            },
            {
                code: 'SP26',
                name: 'Lerida',
            },
            {
                code: 'SP28',
                name: 'Lugo',
            },
            {
                code: 'SP29',
                name: 'Madrid',
            },
            {
                code: 'SP30',
                name: 'Malaga',
            },
            {
                code: 'SP31',
                name: 'Murcia',
            },
            {
                code: 'SP32',
                name: 'Navarra',
            },
            {
                code: 'SP33',
                name: 'Orense',
            },
            {
                code: 'SP59',
                name: 'Pais Vasco',
            },
            {
                code: 'SP35',
                name: 'Palencia',
            },
            {
                code: 'SP36',
                name: 'Pontevedra',
            },
            {
                code: 'SP37',
                name: 'Salamanca',
            },
            {
                code: 'SP38',
                name: 'Santa Cruz de Tenerife',
            },
            {
                code: 'SP40',
                name: 'Segovia',
            },
            {
                code: 'SP41',
                name: 'Sevilla',
            },
            {
                code: 'SP42',
                name: 'Soria',
            },
            {
                code: 'SP43',
                name: 'Tarragona',
            },
            {
                code: 'SP44',
                name: 'Teruel',
            },
            {
                code: 'SP45',
                name: 'Toledo',
            },
            {
                code: 'SP46',
                name: 'Valencia',
            },
            {
                code: 'SP60',
                name: 'Valenciana',
            },
            {
                code: 'SP47',
                name: 'Valladolid',
            },
            {
                code: 'SP48',
                name: 'Vizcaya',
            },
            {
                code: 'SP49',
                name: 'Zamora',
            },
            {
                code: 'SP50',
                name: 'Zaragoza',
            },
        ],
    },
    {
        code: 'LK',
        id: 2340,
        name: 'Sri Lanka',
        states: [],
    },
    {
        code: 'SD',
        id: 2341,
        name: 'Sudan',
        states: [
            {
                code: 'SU42',
                name: 'Blue Nile',
            },
            {
                code: 'SU61',
                name: 'Central Darfur',
            },
            {
                code: 'SU60',
                name: 'East Darfur',
            },
            {
                code: 'SU39',
                name: 'Gedarif',
            },
            {
                code: 'SU38',
                name: 'Gezira',
            },
            {
                code: 'SU52',
                name: 'Kassala',
            },
            {
                code: 'SU29',
                name: 'Khartoum',
            },
            {
                code: 'SU55',
                name: 'North Darfur',
            },
            {
                code: 'SU56',
                name: 'North Kordofan',
            },
            {
                code: 'SU43',
                name: 'Northern',
            },
            {
                code: 'SU36',
                name: 'Red Sea',
            },
            {
                code: 'SU53',
                name: 'River Nile',
            },
            {
                code: 'SU58',
                name: 'Sennar',
            },
            {
                code: 'SU49',
                name: 'South Darfur',
            },
            {
                code: 'SU50',
                name: 'South Kordofan',
            },
            {
                code: 'SU47',
                name: 'West Darfur',
            },
            {
                code: 'SU62',
                name: 'West Kordofan',
            },
            {
                code: 'SU41',
                name: 'White Nile',
            },
        ],
    },
    {
        code: 'SR',
        id: 2342,
        name: 'Suriname',
        states: [
            {
                code: 'NS10',
                name: 'Brokopondo',
            },
            {
                code: 'NS11',
                name: 'Commewijne',
            },
            {
                code: 'NS12',
                name: 'Coronie',
            },
            {
                code: 'NS13',
                name: 'Marowijne',
            },
            {
                code: 'NS14',
                name: 'Nickerie',
            },
            {
                code: 'NS16',
                name: 'Paramaribo',
            },
            {
                code: 'NS15',
                name: 'Para',
            },
            {
                code: 'NS17',
                name: 'Saramacca',
            },
            {
                code: 'NS18',
                name: 'Sipaliwini',
            },
            {
                code: 'NS19',
                name: 'Wanica',
            },
        ],
    },
    {
        code: 'SJ',
        id: 2437,
        name: 'Svalbard And Jan Mayen',
        states: [],
    },
    {
        code: 'SZ',
        id: 2343,
        name: 'Swaziland',
        states: [
            {
                code: 'WZ01',
                name: 'Hhohho',
            },
            {
                code: 'WZ02',
                name: 'Lubombo',
            },
            {
                code: 'WZ03',
                name: 'Manzini',
            },
            {
                code: 'WZ04',
                name: 'Shiselweni',
            },
        ],
    },
    {
        code: 'SE',
        id: 2344,
        name: 'Sweden',
        states: [
            {
                code: 'SE-K',
                name: 'Blekinge län',
            },
            {
                code: 'SE-W',
                name: 'Dalarnas län',
            },
            {
                code: 'SE-X',
                name: 'Gävleborgs län',
            },
            {
                code: 'SE-I',
                name: 'Gotlands län',
            },
            {
                code: 'SE-N',
                name: 'Hallands län',
            },
            {
                code: 'SE-Z',
                name: 'Jämtlands län',
            },
            {
                code: 'SE-F',
                name: 'Jönköpings län',
            },
            {
                code: 'SE-H',
                name: 'Kalmar län',
            },
            {
                code: 'SE-G',
                name: 'Kronobergs län',
            },
            {
                code: 'SE-BD',
                name: 'Norrbottens län',
            },
            {
                code: 'SE-M',
                name: 'Skåne län',
            },
            {
                code: 'SE-D',
                name: 'Södermanlands län',
            },
            {
                code: 'SE-AB',
                name: 'Stockholms län',
            },
            {
                code: 'SE-C',
                name: 'Uppsala län',
            },
            {
                code: 'SE-S',
                name: 'Värmlands län',
            },
            {
                code: 'SE-AC',
                name: 'Västerbottens län',
            },
            {
                code: 'SE-Y',
                name: 'Västernorrlands län',
            },
            {
                code: 'SE-U',
                name: 'Västmanlands län',
            },
            {
                code: 'SE-O',
                name: 'Västra Götalands län',
            },
            {
                code: 'SE-T',
                name: 'Örebro län',
            },
            {
                code: 'SE-E',
                name: 'Östergötlands län',
            },
        ],
    },
    {
        code: 'CH',
        id: 2345,
        name: 'Switzerland',
        states: [
            {
                code: 'AG',
                name: 'Aargau',
            },
            {
                code: 'AR',
                name: 'Appenzell Ausserrhoden',
            },
            {
                code: 'AI',
                name: 'Appenzell Innerrhoden',
            },
            {
                code: 'BL',
                name: 'Basel-Landschaft',
            },
            {
                code: 'BS',
                name: 'Basel-Stadt',
            },
            {
                code: 'BE',
                name: 'Bern',
            },
            {
                code: 'FR',
                name: 'Fribourg',
            },
            {
                code: 'GE',
                name: 'Genève',
            },
            {
                code: 'GL',
                name: 'Glarus',
            },
            {
                code: 'GR',
                name: 'Graubünden',
            },
            {
                code: 'JU',
                name: 'Jura',
            },
            {
                code: 'LU',
                name: 'Luzern',
            },
            {
                code: 'NE',
                name: 'Neuchâtel',
            },
            {
                code: 'NW',
                name: 'Nidwalden',
            },
            {
                code: 'OW',
                name: 'Obwalden',
            },
            {
                code: 'SG',
                name: 'Sankt Gallen',
            },
            {
                code: 'SH',
                name: 'Schaffhausen',
            },
            {
                code: 'SZ',
                name: 'Schwyz',
            },
            {
                code: 'SO',
                name: 'Solothurn',
            },
            {
                code: 'TG',
                name: 'Thurgau',
            },
            {
                code: 'TI',
                name: 'Ticino',
            },
            {
                code: 'UR',
                name: 'Uri',
            },
            {
                code: 'VS',
                name: 'Valais',
            },
            {
                code: 'VD',
                name: 'Vaud',
            },
            {
                code: 'ZG',
                name: 'Zug',
            },
            {
                code: 'ZH',
                name: 'Zürich',
            },
        ],
    },
    {
        code: 'SY',
        id: 2381,
        name: 'Syrian Arab Republic',
        states: [
            {
                code: 'SY01',
                name: 'Al Hasakah',
            },
            {
                code: 'SY09',
                name: 'Aleppo',
            },
            {
                code: 'SY04',
                name: 'Ar Raqqah',
            },
            {
                code: 'SY05',
                name: "As Suwayda'",
            },
            {
                code: 'SY13',
                name: 'Damascus',
            },
            {
                code: 'SY06',
                name: 'Dar`a',
            },
            {
                code: 'SY07',
                name: 'Dayr az Zawr',
            },
            {
                code: 'SY10',
                name: 'Hama',
            },
            {
                code: 'SY11',
                name: 'Hims',
            },
            {
                code: 'SY12',
                name: 'Idlib',
            },
            {
                code: 'SY02',
                name: 'Latakia',
            },
            {
                code: 'SY03',
                name: 'Quneitra',
            },
            {
                code: 'SY08',
                name: 'Rif Dimashq',
            },
            {
                code: 'SY14',
                name: 'Tartus',
            },
        ],
    },
    {
        code: 'TW',
        id: 2375,
        name: 'Taiwan',
        states: [
            {
                code: 'TW02',
                name: 'Kaohsiung',
            },
            {
                code: 'TW03',
                name: 'Taipei',
            },
        ],
    },
    {
        code: 'TJ',
        id: 2348,
        name: 'Tajikistan',
        states: [
            {
                code: 'TI01',
                name: 'Badakhshoni Kuni',
            },
            {
                code: 'TI04',
                name: 'Dushanbe',
            },
            {
                code: 'TI02',
                name: 'Khatlon',
            },
            {
                code: 'TI05',
                name: 'Regions of Republican Subordination',
            },
            {
                code: 'TI03',
                name: 'Sogd',
            },
        ],
    },
    {
        code: 'TZ',
        id: 2349,
        name: 'Tanzania',
        states: [
            {
                code: 'TZ26',
                name: 'Arusha',
            },
            {
                code: 'TZ23',
                name: 'Dar es Salaam',
            },
            {
                code: 'TZ03',
                name: 'Dodoma',
            },
            {
                code: 'TZ28',
                name: 'Geita',
            },
            {
                code: 'TZ04',
                name: 'Iringa',
            },
            {
                code: 'TZ19',
                name: 'Kagera',
            },
            {
                code: 'TZ29',
                name: 'Katavi',
            },
            {
                code: 'TZ05',
                name: 'Kigoma',
            },
            {
                code: 'TZ06',
                name: 'Kilimanjaro',
            },
            {
                code: 'TZ07',
                name: 'Lindi',
            },
            {
                code: 'TZ27',
                name: 'Manyara',
            },
            {
                code: 'TZ08',
                name: 'Mara',
            },
            {
                code: 'TZ09',
                name: 'Mbeya',
            },
            {
                code: 'TZ10',
                name: 'Morogoro',
            },
            {
                code: 'TZ11',
                name: 'Mtwara',
            },
            {
                code: 'TZ12',
                name: 'Mwanza',
            },
            {
                code: 'TZ30',
                name: 'Njombe',
            },
            {
                code: 'TZ13',
                name: 'Pemba North',
            },
            {
                code: 'TZ20',
                name: 'Pemba South',
            },
            {
                code: 'TZ02',
                name: 'Pwani',
            },
            {
                code: 'TZ24',
                name: 'Rukwa',
            },
            {
                code: 'TZ14',
                name: 'Ruvuma',
            },
            {
                code: 'TZ15',
                name: 'Shinyanga',
            },
            {
                code: 'TZ31',
                name: 'Simiyu',
            },
            {
                code: 'TZ16',
                name: 'Singida',
            },
            {
                code: 'TZ17',
                name: 'Tabora',
            },
            {
                code: 'TZ18',
                name: 'Tanga',
            },
            {
                code: 'TZ22',
                name: 'Zanzibar North',
            },
            {
                code: 'TZ21',
                name: 'Zanzibar South and Central',
            },
            {
                code: 'TZ25',
                name: 'Zanzibar West',
            },
        ],
    },
    {
        code: 'TH',
        id: 2350,
        name: 'Thailand',
        states: [
            {
                code: 'TH77',
                name: 'Amnat Charoen',
            },
            {
                code: 'TH35',
                name: 'Ang Thong',
            },
            {
                code: 'TH40',
                name: 'Bangkok Metropolis',
            },
            {
                code: 'TH81',
                name: 'Bueng Kan',
            },
            {
                code: 'TH28',
                name: 'Buri Ram',
            },
            {
                code: 'TH44',
                name: 'Chachoengsao',
            },
            {
                code: 'TH32',
                name: 'Chai Nat',
            },
            {
                code: 'TH26',
                name: 'Chaiyaphum',
            },
            {
                code: 'TH48',
                name: 'Chanthaburi',
            },
            {
                code: 'TH02',
                name: 'Chiang Mai',
            },
            {
                code: 'TH03',
                name: 'Chiang Rai',
            },
            {
                code: 'TH46',
                name: 'Chon Buri',
            },
            {
                code: 'TH58',
                name: 'Chumphon',
            },
            {
                code: 'TH23',
                name: 'Kalasin',
            },
            {
                code: 'TH11',
                name: 'Kamphaeng Phet',
            },
            {
                code: 'TH50',
                name: 'Kanchanaburi',
            },
            {
                code: 'TH22',
                name: 'Khon Kaen',
            },
            {
                code: 'TH63',
                name: 'Krabi',
            },
            {
                code: 'TH06',
                name: 'Lampang',
            },
            {
                code: 'TH05',
                name: 'Lamphun',
            },
            {
                code: 'TH18',
                name: 'Loei',
            },
            {
                code: 'TH34',
                name: 'Lop Buri',
            },
            {
                code: 'TH01',
                name: 'Mae Hong Son',
            },
            {
                code: 'TH24',
                name: 'Maha Sarakham',
            },
            {
                code: 'TH78',
                name: 'Mukdahan',
            },
            {
                code: 'TH43',
                name: 'Nakhon Nayok',
            },
            {
                code: 'TH53',
                name: 'Nakhon Pathom',
            },
            {
                code: 'TH73',
                name: 'Nakhon Phanom',
            },
            {
                code: 'TH27',
                name: 'Nakhon Ratchasima',
            },
            {
                code: 'TH16',
                name: 'Nakhon Sawan',
            },
            {
                code: 'TH64',
                name: 'Nakhon Si Thammarat',
            },
            {
                code: 'TH04',
                name: 'Nan',
            },
            {
                code: 'TH31',
                name: 'Narathiwat',
            },
            {
                code: 'TH79',
                name: 'Nong Bua Lam Phu',
            },
            {
                code: 'TH17',
                name: 'Nong Khai',
            },
            {
                code: 'TH38',
                name: 'Nonthaburi',
            },
            {
                code: 'TH39',
                name: 'Pathum Thani',
            },
            {
                code: 'TH69',
                name: 'Pattani',
            },
            {
                code: 'TH61',
                name: 'Phangnga',
            },
            {
                code: 'TH66',
                name: 'Phatthalung',
            },
            {
                code: 'TH41',
                name: 'Phayao',
            },
            {
                code: 'TH14',
                name: 'Phetchabun',
            },
            {
                code: 'TH56',
                name: 'Phetchaburi',
            },
            {
                code: 'TH13',
                name: 'Phichit',
            },
            {
                code: 'TH12',
                name: 'Phitsanulok',
            },
            {
                code: 'TH36',
                name: 'Phra Nakhon Si Ayutthaya',
            },
            {
                code: 'TH07',
                name: 'Phrae',
            },
            {
                code: 'TH62',
                name: 'Phuket',
            },
            {
                code: 'TH74',
                name: 'Prachin Buri',
            },
            {
                code: 'TH57',
                name: 'Prachuap Khiri Khan',
            },
            {
                code: 'TH59',
                name: 'Ranong',
            },
            {
                code: 'TH52',
                name: 'Ratchaburi',
            },
            {
                code: 'TH47',
                name: 'Rayong',
            },
            {
                code: 'TH25',
                name: 'Roi Et',
            },
            {
                code: 'TH80',
                name: 'Sa Kaeo',
            },
            {
                code: 'TH20',
                name: 'Sakon Nakhon',
            },
            {
                code: 'TH42',
                name: 'Samut Prakan',
            },
            {
                code: 'TH55',
                name: 'Samut Sakhon',
            },
            {
                code: 'TH54',
                name: 'Samut Songkhram',
            },
            {
                code: 'TH37',
                name: 'Saraburi',
            },
            {
                code: 'TH67',
                name: 'Satun',
            },
            {
                code: 'TH30',
                name: 'Si Sa Ket',
            },
            {
                code: 'TH33',
                name: 'Sing Buri',
            },
            {
                code: 'TH68',
                name: 'Songkhla',
            },
            {
                code: 'TH09',
                name: 'Sukhothai',
            },
            {
                code: 'TH51',
                name: 'Suphan Buri',
            },
            {
                code: 'TH60',
                name: 'Surat Thani',
            },
            {
                code: 'TH29',
                name: 'Surin',
            },
            {
                code: 'TH08',
                name: 'Tak',
            },
            {
                code: 'TH65',
                name: 'Trang',
            },
            {
                code: 'TH49',
                name: 'Trat',
            },
            {
                code: 'TH75',
                name: 'Ubon Ratchathani',
            },
            {
                code: 'TH76',
                name: 'Udon Thani',
            },
            {
                code: 'TH15',
                name: 'Uthai Thani',
            },
            {
                code: 'TH10',
                name: 'Uttaradit',
            },
            {
                code: 'TH70',
                name: 'Yala',
            },
            {
                code: 'TH72',
                name: 'Yasothon',
            },
        ],
    },
    {
        code: 'TL',
        id: 2404,
        name: 'Timor-Leste',
        states: [],
    },
    {
        code: 'TG',
        id: 2351,
        name: 'Togo',
        states: [
            {
                code: 'TO22',
                name: 'Centrale',
            },
            {
                code: 'TO23',
                name: 'Kara',
            },
            {
                code: 'TO24',
                name: 'Maritime',
            },
            {
                code: 'TO25',
                name: 'Plateaux',
            },
            {
                code: 'TO26',
                name: 'Savanes',
            },
        ],
    },
    {
        code: 'TK',
        id: 2438,
        name: 'Tokelau',
        states: [],
    },
    {
        code: 'TO',
        id: 2405,
        name: 'Tonga',
        states: [],
    },
    {
        code: 'TT',
        id: 2352,
        name: 'Trinidad and Tobago',
        states: [
            {
                code: 'TD01',
                name: 'Arima',
            },
            {
                code: 'TD13',
                name: 'Chaguanas',
            },
            {
                code: 'TD14',
                name: 'Couva/Tabaquite/Talparo',
            },
            {
                code: 'TD15',
                name: 'Diego Martin',
            },
            {
                code: 'TD11',
                name: 'Eastern Tobago',
            },
            {
                code: 'TD16',
                name: 'Mayaro/Rio Claro',
            },
            {
                code: 'TD17',
                name: 'Penal/Debe',
            },
            {
                code: 'TD18',
                name: 'Point Fortin',
            },
            {
                code: 'TD05',
                name: 'Port of Spain',
            },
            {
                code: 'TD19',
                name: 'Princes Town',
            },
            {
                code: 'TD10',
                name: 'San Fernando',
            },
            {
                code: 'TD20',
                name: 'San Juan/Laventille',
            },
            {
                code: 'TD21',
                name: 'Sangre Grande',
            },
            {
                code: 'TD22',
                name: 'Siparia',
            },
            {
                code: 'TD23',
                name: 'Tunapuna/Piarco',
            },
            {
                code: 'TD11',
                name: 'Western Tobago',
            },
        ],
    },
    {
        code: 'TN',
        id: 2353,
        name: 'Tunisia',
        states: [
            {
                code: 'TS38',
                name: 'Ariana',
            },
            {
                code: 'TS17',
                name: 'Béja',
            },
            {
                code: 'TS27',
                name: 'Ben Arous',
            },
            {
                code: 'TS18',
                name: 'Bizerte',
            },
            {
                code: 'TS29',
                name: 'Gabès',
            },
            {
                code: 'TS30',
                name: 'Gafsa',
            },
            {
                code: 'TS06',
                name: 'Jendouba',
            },
            {
                code: 'TS03',
                name: 'Kairouan',
            },
            {
                code: 'TS02',
                name: 'Kassérine',
            },
            {
                code: 'TS31',
                name: 'Kebili',
            },
            {
                code: 'TS14',
                name: 'Le Kef',
            },
            {
                code: 'TS15',
                name: 'Mahdia',
            },
            {
                code: 'TS39',
                name: 'Manouba',
            },
            {
                code: 'TS28',
                name: 'Médenine',
            },
            {
                code: 'TS16',
                name: 'Monastir',
            },
            {
                code: 'TS19',
                name: 'Nabeul',
            },
            {
                code: 'TS32',
                name: 'Sfax',
            },
            {
                code: 'TS33',
                name: 'Sidi Bou Zid',
            },
            {
                code: 'TS22',
                name: 'Siliana',
            },
            {
                code: 'TS23',
                name: 'Sousse',
            },
            {
                code: 'TS34',
                name: 'Tataouine',
            },
            {
                code: 'TS35',
                name: 'Tozeur',
            },
            {
                code: 'TS36',
                name: 'Tunis',
            },
            {
                code: 'TS37',
                name: 'Zaghouan',
            },
        ],
    },
    {
        code: 'TR',
        id: 2354,
        name: 'Turkey',
        states: [
            {
                code: 'TU81',
                name: 'Adana',
            },
            {
                code: 'TU02',
                name: 'Adiyaman',
            },
            {
                code: 'TU03',
                name: 'Afyonkarahisar',
            },
            {
                code: 'TU04',
                name: 'Agri',
            },
            {
                code: 'TU75',
                name: 'Aksaray',
            },
            {
                code: 'TU05',
                name: 'Amasya',
            },
            {
                code: 'TU68',
                name: 'Ankara',
            },
            {
                code: 'TU07',
                name: 'Antalya',
            },
            {
                code: 'TU86',
                name: 'Ardahan',
            },
            {
                code: 'TU08',
                name: 'Artvin',
            },
            {
                code: 'TU09',
                name: 'Aydin',
            },
            {
                code: 'TU10',
                name: 'Balikesir',
            },
            {
                code: 'TU87',
                name: 'Bartin',
            },
            {
                code: 'TU76',
                name: 'Batman',
            },
            {
                code: 'TU77',
                name: 'Bayburt',
            },
            {
                code: 'TU11',
                name: 'Bilecik',
            },
            {
                code: 'TU12',
                name: 'Bingöl',
            },
            {
                code: 'TU13',
                name: 'Bitlis',
            },
            {
                code: 'TU14',
                name: 'Bolu',
            },
            {
                code: 'TU15',
                name: 'Burdur',
            },
            {
                code: 'TU16',
                name: 'Bursa',
            },
            {
                code: 'TU17',
                name: 'Çanakkale',
            },
            {
                code: 'TU82',
                name: 'Çankiri',
            },
            {
                code: 'TU19',
                name: 'Çorum',
            },
            {
                code: 'TU20',
                name: 'Denizli',
            },
            {
                code: 'TU21',
                name: 'Diyarbakir',
            },
            {
                code: 'TU93',
                name: 'Düzce',
            },
            {
                code: 'TU22',
                name: 'Edirne',
            },
            {
                code: 'TU23',
                name: 'Elazig',
            },
            {
                code: 'TU24',
                name: 'Erzincan',
            },
            {
                code: 'TU25',
                name: 'Erzurum',
            },
            {
                code: 'TU26',
                name: 'Eskisehir',
            },
            {
                code: 'TU83',
                name: 'Gaziantep',
            },
            {
                code: 'TU28',
                name: 'Giresun',
            },
            {
                code: 'TU69',
                name: 'Gümüshane',
            },
            {
                code: 'TU70',
                name: 'Hakkari',
            },
            {
                code: 'TU31',
                name: 'Hatay',
            },
            {
                code: 'TU88',
                name: 'Igdir',
            },
            {
                code: 'TU33',
                name: 'Isparta',
            },
            {
                code: 'TU34',
                name: 'Istanbul',
            },
            {
                code: 'TU35',
                name: 'Izmir',
            },
            {
                code: 'TU46',
                name: 'Kahramanmaras',
            },
            {
                code: 'TU89',
                name: 'Karabük',
            },
            {
                code: 'TU78',
                name: 'Karaman',
            },
            {
                code: 'TU84',
                name: 'Kars',
            },
            {
                code: 'TU37',
                name: 'Kastamonu',
            },
            {
                code: 'TU38',
                name: 'Kayseri',
            },
            {
                code: 'TU90',
                name: 'Kilis',
            },
            {
                code: 'TU79',
                name: 'Kirikkale',
            },
            {
                code: 'TU39',
                name: 'Kirklareli',
            },
            {
                code: 'TU40',
                name: 'Kirsehir',
            },
            {
                code: 'TU41',
                name: 'Kocaeli',
            },
            {
                code: 'TU71',
                name: 'Konya',
            },
            {
                code: 'TU43',
                name: 'Kütahya',
            },
            {
                code: 'TU44',
                name: 'Malatya',
            },
            {
                code: 'TU45',
                name: 'Manisa',
            },
            {
                code: 'TU72',
                name: 'Mardin',
            },
            {
                code: 'TU32',
                name: 'Mersin',
            },
            {
                code: 'TU48',
                name: 'Mugla',
            },
            {
                code: 'TU49',
                name: 'Mus',
            },
            {
                code: 'TU50',
                name: 'Nevsehir',
            },
            {
                code: 'TU73',
                name: 'Nigde',
            },
            {
                code: 'TU52',
                name: 'Ordu',
            },
            {
                code: 'TU91',
                name: 'Osmaniye',
            },
            {
                code: 'TU53',
                name: 'Rize',
            },
            {
                code: 'TU54',
                name: 'Sakarya',
            },
            {
                code: 'TU55',
                name: 'Samsun',
            },
            {
                code: 'TU63',
                name: 'Sanliurfa',
            },
            {
                code: 'TU74',
                name: 'Siirt',
            },
            {
                code: 'TU57',
                name: 'Sinop',
            },
            {
                code: 'TU80',
                name: 'Sirnak',
            },
            {
                code: 'TU58',
                name: 'Sivas',
            },
            {
                code: 'TU59',
                name: 'Tekirdag',
            },
            {
                code: 'TU60',
                name: 'Tokat',
            },
            {
                code: 'TU61',
                name: 'Trabzon',
            },
            {
                code: 'TU62',
                name: 'Tunceli',
            },
            {
                code: 'TU64',
                name: 'Usak',
            },
            {
                code: 'TU65',
                name: 'Van',
            },
            {
                code: 'TU92',
                name: 'Yalova',
            },
            {
                code: 'TU66',
                name: 'Yozgat',
            },
            {
                code: 'TU85',
                name: 'Zonguldak',
            },
        ],
    },
    {
        code: 'TM',
        id: 2355,
        name: 'Turkmenistan',
        states: [
            {
                code: 'TX01',
                name: 'Ahal',
            },
            {
                code: 'TM.AB',
                name: 'Ashgabat',
            },
            {
                code: 'TX02',
                name: 'Balkan',
            },
            {
                code: 'TX03',
                name: 'Dashoguz',
            },
            {
                code: 'TX04',
                name: 'Lebap',
            },
            {
                code: 'TX05',
                name: 'Mary',
            },
        ],
    },
    {
        code: 'TC',
        id: 2439,
        name: 'Turks and Caicos Islands',
        states: [],
    },
    {
        code: 'TV',
        id: 2440,
        name: 'Tuvalu',
        states: [],
    },
    {
        code: 'UG',
        id: 2356,
        name: 'Uganda',
        states: [
            {
                code: 'UG.AI',
                name: 'Abim',
            },
            {
                code: 'UG.AD',
                name: 'Adjumani',
            },
            {
                code: 'UG.AG',
                name: 'Agago',
            },
            {
                code: 'UG.AL',
                name: 'Alebtong',
            },
            {
                code: 'UG.AT',
                name: 'Amolatar',
            },
            {
                code: 'UG.AZ',
                name: 'Amudat',
            },
            {
                code: 'UG.AM',
                name: 'Amuria',
            },
            {
                code: 'UG.AY',
                name: 'Amuru',
            },
            {
                code: 'UG.AQ',
                name: 'Apac',
            },
            {
                code: 'UG.AX',
                name: 'Arua',
            },
            {
                code: 'UG.BD',
                name: 'Budaka',
            },
            {
                code: 'UG.BA',
                name: 'Bududa',
            },
            {
                code: 'UG.BI',
                name: 'Bugiri',
            },
            {
                code: 'UG.BH',
                name: 'Buhweju',
            },
            {
                code: 'UG.BZ',
                name: 'Buikwe',
            },
            {
                code: 'UG.BE',
                name: 'Bukedea',
            },
            {
                code: 'UG.BM',
                name: 'Bukomansimbi',
            },
            {
                code: 'UG.BW',
                name: 'Bukwo',
            },
            {
                code: 'UG.BB',
                name: 'Bulambuli',
            },
            {
                code: 'UG.BL',
                name: 'Buliisa',
            },
            {
                code: 'UG.BX',
                name: 'Bundibugyo',
            },
            {
                code: 'UG.BC',
                name: 'Bushenyi',
            },
            {
                code: 'UG.BU',
                name: 'Busia',
            },
            {
                code: 'UG.BJ',
                name: 'Butaleja',
            },
            {
                code: 'UG.BT',
                name: 'Butambala',
            },
            {
                code: 'UG.BV',
                name: 'Buvuma',
            },
            {
                code: 'UG.BY',
                name: 'Buyende',
            },
            {
                code: 'UG.DO',
                name: 'Dokolo',
            },
            {
                code: 'UG.GM',
                name: 'Gomba',
            },
            {
                code: 'UG.GL',
                name: 'Gulu',
            },
            {
                code: 'UG.HO',
                name: 'Hoima',
            },
            {
                code: 'UG.IB',
                name: 'Ibanda',
            },
            {
                code: 'UG.IC',
                name: 'Iganga',
            },
            {
                code: 'UG.NG',
                name: 'Isingiro',
            },
            {
                code: 'UG.JI',
                name: 'Jinja',
            },
            {
                code: 'UG.AB',
                name: 'Kaabong',
            },
            {
                code: 'UG.KA',
                name: 'Kabale',
            },
            {
                code: 'UG.BR',
                name: 'Kabarole',
            },
            {
                code: 'UG.KD',
                name: 'Kaberamaido',
            },
            {
                code: 'UG.KN',
                name: 'Kalangala',
            },
            {
                code: 'UG.RO',
                name: 'Kaliro',
            },
            {
                code: 'UG.QA',
                name: 'Kalungu',
            },
            {
                code: 'UG.KM',
                name: 'Kampala',
            },
            {
                code: 'UG.QU',
                name: 'Kamuli',
            },
            {
                code: 'UG.KE',
                name: 'Kamwenge',
            },
            {
                code: 'UG.UU',
                name: 'Kanungu',
            },
            {
                code: 'UG.QP',
                name: 'Kapchorwa',
            },
            {
                code: 'UG.KS',
                name: 'Kasese',
            },
            {
                code: 'UG.KK',
                name: 'Katakwi',
            },
            {
                code: 'UG.KY',
                name: 'Kayunga',
            },
            {
                code: 'UG.KI',
                name: 'Kibaale',
            },
            {
                code: 'UG.QO',
                name: 'Kiboga',
            },
            {
                code: 'UG.QB',
                name: 'Kibuku',
            },
            {
                code: 'UG.KH',
                name: 'Kiruhuura',
            },
            {
                code: 'UG.QD',
                name: 'Kiryandongo',
            },
            {
                code: 'UG.KR',
                name: 'Kisoro',
            },
            {
                code: 'UG.QT',
                name: 'Kitgum',
            },
            {
                code: 'UG.OK',
                name: 'Koboko',
            },
            {
                code: 'UG.QL',
                name: 'Kole',
            },
            {
                code: 'UG.KF',
                name: 'Kotido',
            },
            {
                code: 'UG.QM',
                name: 'Kumi',
            },
            {
                code: 'UG.QW',
                name: 'Kween',
            },
            {
                code: 'UG.QZ',
                name: 'Kyankwanzi',
            },
            {
                code: 'UG.QG',
                name: 'Kyegegwa',
            },
            {
                code: 'UG.QJ',
                name: 'Kyenjojo',
            },
            {
                code: 'UG.LM',
                name: 'Lamwo',
            },
            {
                code: 'UG.LL',
                name: 'Lira',
            },
            {
                code: 'UG.LK',
                name: 'Luuka',
            },
            {
                code: 'UG.LW',
                name: 'Luwero',
            },
            {
                code: 'UG.LE',
                name: 'Lwengo',
            },
            {
                code: 'UG.LY',
                name: 'Lyantonde',
            },
            {
                code: 'UG.MW',
                name: 'Manafwa',
            },
            {
                code: 'UG.MQ',
                name: 'Masaka',
            },
            {
                code: 'UG.MZ',
                name: 'Masindi',
            },
            {
                code: 'UG.MG',
                name: 'Mayuge',
            },
            {
                code: 'UG.ME',
                name: 'Mbale',
            },
            {
                code: 'UG.RR',
                name: 'Mbarara',
            },
            {
                code: 'UG.MM',
                name: 'Mitoma',
            },
            {
                code: 'UG.TY',
                name: 'Mityana',
            },
            {
                code: 'UG.MX',
                name: 'Moroto',
            },
            {
                code: 'UG.MY',
                name: 'Moyo',
            },
            {
                code: 'UG.MJ',
                name: 'Mpigi',
            },
            {
                code: 'UG.MD',
                name: 'Mubende',
            },
            {
                code: 'UG.MV',
                name: 'Mukono',
            },
            {
                code: 'UG.NI',
                name: 'Nakapiripirit',
            },
            {
                code: 'UG.NK',
                name: 'Nakaseke',
            },
            {
                code: 'UG.NA',
                name: 'Nakasongola',
            },
            {
                code: 'UG.NY',
                name: 'Namayingo',
            },
            {
                code: 'UG.BK',
                name: 'Namutumba',
            },
            {
                code: 'UG.NQ',
                name: 'Napak',
            },
            {
                code: 'UG.NB',
                name: 'Nebbi',
            },
            {
                code: 'UG.NR',
                name: 'Ngora',
            },
            {
                code: 'UG.NO',
                name: 'Ntoroko',
            },
            {
                code: 'UG.NT',
                name: 'Ntungamo',
            },
            {
                code: 'UG.NW',
                name: 'Nwoya',
            },
            {
                code: 'UG.MH',
                name: 'Nyadri',
            },
            {
                code: 'UG.OT',
                name: 'Otuke',
            },
            {
                code: 'UG.OY',
                name: 'Oyam',
            },
            {
                code: 'UG.PR',
                name: 'Pader',
            },
            {
                code: 'UG.PS',
                name: 'Pallisa',
            },
            {
                code: 'UG.RI',
                name: 'Rakai',
            },
            {
                code: 'UG.RZ',
                name: 'Rubirizi',
            },
            {
                code: 'UG.RK',
                name: 'Rukungiri',
            },
            {
                code: 'UG.SE',
                name: 'Sembabule',
            },
            {
                code: 'UG.SX',
                name: 'Serere',
            },
            {
                code: 'UG.SH',
                name: 'Sheema',
            },
            {
                code: 'UG.SK',
                name: 'Sironko',
            },
            {
                code: 'UG.ST',
                name: 'Soroti',
            },
            {
                code: 'UG.TR',
                name: 'Tororo',
            },
            {
                code: 'UG.WA',
                name: 'Wakiso',
            },
            {
                code: 'UG.YU',
                name: 'Yumbe',
            },
            {
                code: 'UG.ZO',
                name: 'Zombo',
            },
        ],
    },
    {
        code: 'UA',
        id: 2357,
        name: 'Ukraine',
        states: [
            {
                code: 'UP01',
                name: 'Cherkasy',
            },
            {
                code: 'UP02',
                name: 'Chernihiv',
            },
            {
                code: 'UP03',
                name: 'Chernivtsi',
            },
            {
                code: 'UP11',
                name: 'Crimea',
            },
            {
                code: 'UP04',
                name: "Dnipropetrovs'k",
            },
            {
                code: 'UP05',
                name: "Donets'k",
            },
            {
                code: 'UP06',
                name: "Ivano-Frankivs'k",
            },
            {
                code: 'UP07',
                name: 'Kharkiv',
            },
            {
                code: 'UP08',
                name: 'Kherson',
            },
            {
                code: 'UP09',
                name: "Khmel'nyts'kyy",
            },
            {
                code: 'UP13',
                name: 'Kiev',
            },
            {
                code: 'UP12',
                name: 'Kiev City',
            },
            {
                code: 'UP10',
                name: 'Kirovohrad',
            },
            {
                code: 'UP15',
                name: "L'viv",
            },
            {
                code: 'UP14',
                name: "Luhans'k",
            },
            {
                code: 'UP16',
                name: 'Mykolayiv',
            },
            {
                code: 'UP17',
                name: 'Odessa',
            },
            {
                code: 'UP18',
                name: 'Poltava',
            },
            {
                code: 'UP19',
                name: 'Rivne',
            },
            {
                code: 'UP20',
                name: "Sevastopol' City",
            },
            {
                code: 'UP21',
                name: 'Sumy',
            },
            {
                code: 'UP22',
                name: "Ternopil'",
            },
            {
                code: 'UP25',
                name: 'Transcarpathia',
            },
            {
                code: 'UP23',
                name: 'Vinnytsya',
            },
            {
                code: 'UP24',
                name: 'Volyn',
            },
            {
                code: 'UP26',
                name: 'Zaporizhzhya',
            },
            {
                code: 'UP27',
                name: 'Zhytomyr',
            },
        ],
    },
    {
        code: 'AE',
        id: 2358,
        name: 'United Arab Emirates',
        states: [
            {
                code: 'AE02',
                name: "'Ajman",
            },
            {
                code: 'AE01',
                name: 'Abu Dhabi',
            },
            {
                code: 'AE04',
                name: 'Al Fujayrah',
            },
            {
                code: 'AE03',
                name: 'Dubai',
            },
            {
                code: 'AE05',
                name: "Ra's al Khaymah",
            },
            {
                code: 'AE06',
                name: 'Sharjah',
            },
            {
                code: 'AE07',
                name: 'Umm al Qaywayn',
            },
        ],
    },
    {
        code: 'UM',
        id: 2441,
        name: 'United States Minor Outlying Islands',
        states: [],
    },
    {
        code: 'UY',
        id: 2360,
        name: 'Uruguay',
        states: [],
    },
    {
        code: 'UZ',
        id: 2361,
        name: 'Uzbekistan',
        states: [
            {
                code: 'UZ01',
                name: 'Andijon',
            },
            {
                code: 'UZ02',
                name: 'Buxoro',
            },
            {
                code: 'UZ03',
                name: 'Farg`ona',
            },
            {
                code: 'UZ15',
                name: 'Jizzax',
            },
            {
                code: 'UZ09',
                name: 'Karakalpakstan',
            },
            {
                code: 'UZ08',
                name: 'Kashkadarya',
            },
            {
                code: 'UZ06',
                name: 'Namangan',
            },
            {
                code: 'UZ07',
                name: 'Navoi',
            },
            {
                code: 'UZ10',
                name: 'Samarkand',
            },
            {
                code: 'UZ16',
                name: 'Sirdaryo',
            },
            {
                code: 'UZ12',
                name: 'Surxondaryo',
            },
            {
                code: 'UZ13',
                name: 'Tashkent City',
            },
            {
                code: 'UZ14',
                name: 'Tashkent',
            },
            {
                code: 'UZ05',
                name: 'Xorazm',
            },
        ],
    },
    {
        code: 'NH',
        id: 2406,
        name: 'Vanuatu',
        states: [],
    },
    {
        code: 'VE',
        id: 2363,
        name: 'Venezuela; Bolivarian Republic of',
        states: [
            {
                code: 'VE01',
                name: 'Amazonas',
            },
            {
                code: 'VE02',
                name: 'Anzoátegui',
            },
            {
                code: 'VE03',
                name: 'Apure',
            },
            {
                code: 'VE04',
                name: 'Aragua',
            },
            {
                code: 'VE05',
                name: 'Barinas',
            },
            {
                code: 'VE06',
                name: 'Bolívar',
            },
            {
                code: 'VE07',
                name: 'Carabobo',
            },
            {
                code: 'VE08',
                name: 'Cojedes',
            },
            {
                code: 'VE09',
                name: 'Delta Amacuro',
            },
            {
                code: 'VE24',
                name: 'Dependencias Federales',
            },
            {
                code: 'VE25',
                name: 'Distrito Capital',
            },
            {
                code: 'VE11',
                name: 'Falcón',
            },
            {
                code: 'VE12',
                name: 'Guárico',
            },
            {
                code: 'VE13',
                name: 'Lara',
            },
            {
                code: 'VE14',
                name: 'Mérida',
            },
            {
                code: 'VE15',
                name: 'Miranda',
            },
            {
                code: 'VE16',
                name: 'Monagas',
            },
            {
                code: 'VE17',
                name: 'Nueva Esparta',
            },
            {
                code: 'VE18',
                name: 'Portuguesa',
            },
            {
                code: 'VE19',
                name: 'Sucre',
            },
            {
                code: 'VE20',
                name: 'Táchira',
            },
            {
                code: 'VE21',
                name: 'Trujillo',
            },
            {
                code: 'VE26',
                name: 'Vargas',
            },
            {
                code: 'VE22',
                name: 'Yaracuy',
            },
            {
                code: 'VE23',
                name: 'Zulia',
            },
        ],
    },
    {
        code: 'VN',
        id: 2364,
        name: 'Vietnam',
        states: [
            {
                code: 'VM01',
                name: 'An Giang',
            },
            {
                code: 'VM45',
                name: 'Ba Ria-Vung Tau',
            },
            {
                code: 'VM72',
                name: 'Bac Can',
            },
            {
                code: 'VM71',
                name: 'Bac Giang',
            },
            {
                code: 'VM73',
                name: 'Bac Lieu',
            },
            {
                code: 'VM74',
                name: 'Bac Ninh',
            },
            {
                code: 'VM03',
                name: 'Ben Tre',
            },
            {
                code: 'VM46',
                name: 'Binh Dinh',
            },
            {
                code: 'VM75',
                name: 'Binh Duong',
            },
            {
                code: 'VM76',
                name: 'Binh Phuoc',
            },
            {
                code: 'VM47',
                name: 'Binh Thuan',
            },
            {
                code: 'VM77',
                name: 'Ca Mau',
            },
            {
                code: 'VM87',
                name: 'Can Tho',
            },
            {
                code: 'VM05',
                name: 'Cao Bang',
            },
            {
                code: 'VM78',
                name: 'Da Nang',
            },
            {
                code: 'VM88',
                name: 'Dac Lac',
            },
            {
                code: 'VM91',
                name: 'Dac Nong',
            },
            {
                code: 'VM92',
                name: 'Dien Bien',
            },
            {
                code: 'VM43',
                name: 'Dong Nai',
            },
            {
                code: 'VM09',
                name: 'Dong Thap',
            },
            {
                code: 'VM49',
                name: 'Gia Lai',
            },
            {
                code: 'VM50',
                name: 'Ha Giang',
            },
            {
                code: 'VM80',
                name: 'Ha Nam',
            },
            {
                code: 'VM52',
                name: 'Ha Tinh',
            },
            {
                code: 'VM79',
                name: 'Hai Duong',
            },
            {
                code: 'VM13',
                name: 'Haiphong',
            },
            {
                code: 'VM44',
                name: 'Hanoi',
            },
            {
                code: 'VM93',
                name: 'Hau Giang',
            },
            {
                code: 'VM20',
                name: 'Ho Chi Minh',
            },
            {
                code: 'VM53',
                name: 'Hoa Binh',
            },
            {
                code: 'VM81',
                name: 'Hung Yen',
            },
            {
                code: 'VM54',
                name: 'Khanh Hoa',
            },
            {
                code: 'VM21',
                name: 'Kien Giang',
            },
            {
                code: 'VM55',
                name: 'Kon Tum',
            },
            {
                code: 'VM89',
                name: 'Lai Chau',
            },
            {
                code: 'VM23',
                name: 'Lam Dong',
            },
            {
                code: 'VM39',
                name: 'Lang Son',
            },
            {
                code: 'VM90',
                name: 'Lao Cai',
            },
            {
                code: 'VM24',
                name: 'Long An',
            },
            {
                code: 'VM82',
                name: 'Nam Dinh',
            },
            {
                code: 'VM58',
                name: 'Nghe An',
            },
            {
                code: 'VM59',
                name: 'Ninh Binh',
            },
            {
                code: 'VM60',
                name: 'Ninh Thuan',
            },
            {
                code: 'VM83',
                name: 'Phu Tho',
            },
            {
                code: 'VM61',
                name: 'Phu Yen',
            },
            {
                code: 'VM62',
                name: 'Quang Binh',
            },
            {
                code: 'VM84',
                name: 'Quang Nam',
            },
            {
                code: 'VM63',
                name: 'Quang Ngai',
            },
            {
                code: 'VM30',
                name: 'Quang Ninh',
            },
            {
                code: 'VM64',
                name: 'Quang Tri',
            },
            {
                code: 'VM65',
                name: 'Soc Trang',
            },
            {
                code: 'VM32',
                name: 'Son La',
            },
            {
                code: 'VM33',
                name: 'Tay Ninh',
            },
            {
                code: 'VM35',
                name: 'Thai Binh',
            },
            {
                code: 'VM85',
                name: 'Thai Nguyen',
            },
            {
                code: 'VM34',
                name: 'Thanh Hoa',
            },
            {
                code: 'VM66',
                name: 'Thua Thien-Hue',
            },
            {
                code: 'VM37',
                name: 'Tien Giang',
            },
            {
                code: 'VM67',
                name: 'Tra Vinh',
            },
            {
                code: 'VM68',
                name: 'Tuyen Quang',
            },
            {
                code: 'VM69',
                name: 'Vinh Long',
            },
            {
                code: 'VM86',
                name: 'Vinh Phuc',
            },
            {
                code: 'VM70',
                name: 'Yen Bai',
            },
        ],
    },
    {
        code: 'VG',
        id: 2446,
        name: 'Virgin Islands; British',
        states: [
            {
                code: 'VG.VI',
                name: 'British Virgin Islands',
            },
        ],
    },
    {
        code: 'VI',
        id: 2442,
        name: 'Virgin Islands; U.S.',
        states: [
            {
                code: '010',
                name: 'Saint Croix',
            },
            {
                code: '020',
                name: 'Saint John',
            },
            {
                code: '030',
                name: 'Saint Thomas',
            },
        ],
    },
    {
        code: 'WF',
        id: 2443,
        name: 'Wallis and Futuna',
        states: [],
    },
    {
        code: 'EH',
        id: 2444,
        name: 'Western Sahara',
        states: [],
    },
    {
        code: 'YE',
        id: 2382,
        name: 'Yemen',
        states: [
            {
                code: 'YM01',
                name: 'Abyan',
            },
            {
                code: 'YM20',
                name: "Al Bayda'",
            },
            {
                code: 'YM18',
                name: "Al Dali'",
            },
            {
                code: 'YM08',
                name: 'Al Hudaydah',
            },
            {
                code: 'YM21',
                name: 'Al Jawf',
            },
            {
                code: 'YM03',
                name: 'Al Mahrah',
            },
            {
                code: 'YM10',
                name: 'Al Mahwit',
            },
            {
                code: 'YM19',
                name: 'Amran',
            },
            {
                code: 'YM11',
                name: 'Dhamar',
            },
            {
                code: 'YM04',
                name: 'Hadramawt',
            },
            {
                code: 'YM22',
                name: 'Hajjah',
            },
            {
                code: 'YM23',
                name: 'Ibb',
            },
            {
                code: 'YM24',
                name: 'Lahij',
            },
            {
                code: 'YM14',
                name: "Ma'rib",
            },
            {
                code: 'YM27',
                name: 'Raymah',
            },
            {
                code: 'YM15',
                name: 'Sa`dah',
            },
            {
                code: 'YM16',
                name: "San`a'",
            },
            {
                code: 'YM26',
                name: "San`a' [City]",
            },
            {
                code: 'YM05',
                name: 'Shabwah',
            },
            {
                code: 'YM28',
                name: 'Socotra',
            },
            {
                code: 'YM25',
                name: 'Ta`izz',
            },
            {
                code: 'YM02',
                name: '`Adan',
            },
        ],
    },
    {
        code: 'ZM',
        id: 2369,
        name: 'Zambia',
        states: [
            {
                code: 'ZA02',
                name: 'Central',
            },
            {
                code: 'ZA08',
                name: 'Copperbelt',
            },
            {
                code: 'ZA03',
                name: 'Eastern',
            },
            {
                code: 'ZA04',
                name: 'Luapula',
            },
            {
                code: 'ZA09',
                name: 'Lusaka',
            },
            {
                code: 'ZA10',
                name: 'Muchinga',
            },
            {
                code: 'ZA06',
                name: 'North-Western',
            },
            {
                code: 'ZA05',
                name: 'Northern',
            },
            {
                code: 'ZA07',
                name: 'Southern',
            },
            {
                code: 'ZA01',
                name: 'Western',
            },
        ],
    },
    {
        code: 'ZW',
        id: 2370,
        name: 'Zimbabwe',
        states: [
            {
                code: 'ZI09',
                name: 'Bulawayo',
            },
            {
                code: 'ZI10',
                name: 'Harare',
            },
            {
                code: 'ZI01',
                name: 'Manicaland',
            },
            {
                code: 'ZI03',
                name: 'Mashonaland Central',
            },
            {
                code: 'ZI04',
                name: 'Mashonaland East',
            },
            {
                code: 'ZI05',
                name: 'Mashonaland West',
            },
            {
                code: 'ZI08',
                name: 'Masvingo',
            },
            {
                code: 'ZI06',
                name: 'Matabeleland North',
            },
            {
                code: 'ZI07',
                name: 'Matabeleland South',
            },
            {
                code: 'ZI02',
                name: 'Midlands',
            },
        ],
    },
    {
        code: 'NONE',
        id: 2378,
        name: '- None Specified -',
        states: [],
    },
];
/**
 * Gets all countries
 */
function getCountries() {
    return COUNTRIES.map(function (country) { return country.name; });
}
/**
 * Gets a country by country ID
 */
function findByCountryId(id) {
    return COUNTRIES.find(function (country) { return country.id === id; });
}
/**
 * Gets a country by country name
 * @param name - Name of country to find
 */
function findByCountryName(name) {
    return COUNTRIES.find(function (country) { return country.name === name.trim(); });
}
/**
 * Gets a country by country code
 * @param code - Code of country to find
 */
function findByCountryCode(code) {
    return COUNTRIES.find(function (country) { return country.code === code.trim(); });
}
/**
 * Gets states by country name
 * @param name - Name of the country to search by
 */
function getStateObjects(name) {
    if (name) {
        var foundCountry = COUNTRIES.find(function (country) { return country.name === name.trim(); });
        return (foundCountry && foundCountry.states) || [];
    }
    return [];
}
/**
 * Gets state names by country name
 * @param name - Name of the country to search by
 */
function getStates(name) {
    return getStateObjects(name).map(function (state) { return state.name; });
}

// NG2
var _c0$s = function (a0, a1) { return { "bhi-circle": a0, "bhi-check": a1 }; };
function NovoAddressElement_span_0_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 9);
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$s, !ctx_r6.valid.address1, ctx_r6.valid.address1));
} }
function NovoAddressElement_span_0_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 6);
    ɵɵtemplate(1, NovoAddressElement_span_0_i_1_Template, 1, 4, "i", 7);
    ɵɵelementStart(2, "input", 8);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_0_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r8); var ctx_r7 = ɵɵnextContext(); return ctx_r7.model.address1 = $event; })("ngModelChange", function NovoAddressElement_span_0_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r8); var ctx_r9 = ɵɵnextContext(); return ctx_r9.updateControl(); })("focus", function NovoAddressElement_span_0_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r8); var ctx_r10 = ɵɵnextContext(); return ctx_r10.isFocused($event, "address1"); })("blur", function NovoAddressElement_span_0_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r8); var ctx_r11 = ɵɵnextContext(); return ctx_r11.isBlurred($event, "address1"); })("input", function NovoAddressElement_span_0_Template_input_input_2_listener($event) { ɵɵrestoreView(_r8); var ctx_r12 = ɵɵnextContext(); return ctx_r12.onInput($event, "address1"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r0.invalid.address1)("focus", ctx_r0.focused.address1)("disabled", ctx_r0.disabled.address1);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.config.address1.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r0.invalidMaxlength.address1);
    ɵɵproperty("placeholder", ctx_r0.config.address1.label)("maxlength", ctx_r0.config == null ? null : ctx_r0.config.address1 == null ? null : ctx_r0.config.address1.maxlength)("ngModel", ctx_r0.model.address1);
} }
function NovoAddressElement_span_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 13);
} if (rf & 2) {
    var ctx_r13 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$s, !ctx_r13.valid.address2, ctx_r13.valid.address2));
} }
function NovoAddressElement_span_1_Template(rf, ctx) { if (rf & 1) {
    var _r15 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 10);
    ɵɵtemplate(1, NovoAddressElement_span_1_i_1_Template, 1, 4, "i", 11);
    ɵɵelementStart(2, "input", 12);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_1_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r15); var ctx_r14 = ɵɵnextContext(); return ctx_r14.model.address2 = $event; })("ngModelChange", function NovoAddressElement_span_1_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r15); var ctx_r16 = ɵɵnextContext(); return ctx_r16.updateControl(); })("focus", function NovoAddressElement_span_1_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r15); var ctx_r17 = ɵɵnextContext(); return ctx_r17.isFocused($event, "address2"); })("blur", function NovoAddressElement_span_1_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r15); var ctx_r18 = ɵɵnextContext(); return ctx_r18.isBlurred($event, "address2"); })("input", function NovoAddressElement_span_1_Template_input_input_2_listener($event) { ɵɵrestoreView(_r15); var ctx_r19 = ɵɵnextContext(); return ctx_r19.onInput($event, "address2"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r1.invalid.address2)("focus", ctx_r1.focused.address2)("disabled", ctx_r1.disabled.address2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.config.address2.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r1.invalidMaxlength.address2);
    ɵɵproperty("placeholder", ctx_r1.config.address2.label)("maxlength", ctx_r1.config == null ? null : ctx_r1.config.address2 == null ? null : ctx_r1.config.address2.maxlength)("ngModel", ctx_r1.model.address2);
} }
function NovoAddressElement_span_2_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    var ctx_r20 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$s, !ctx_r20.valid.city, ctx_r20.valid.city));
} }
function NovoAddressElement_span_2_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 14);
    ɵɵtemplate(1, NovoAddressElement_span_2_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "input", 16);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_2_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r22); var ctx_r21 = ɵɵnextContext(); return ctx_r21.model.city = $event; })("ngModelChange", function NovoAddressElement_span_2_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r22); var ctx_r23 = ɵɵnextContext(); return ctx_r23.updateControl(); })("focus", function NovoAddressElement_span_2_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r22); var ctx_r24 = ɵɵnextContext(); return ctx_r24.isFocused($event, "city"); })("blur", function NovoAddressElement_span_2_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r22); var ctx_r25 = ɵɵnextContext(); return ctx_r25.isBlurred($event, "city"); })("input", function NovoAddressElement_span_2_Template_input_input_2_listener($event) { ɵɵrestoreView(_r22); var ctx_r26 = ɵɵnextContext(); return ctx_r26.onInput($event, "city"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r2.invalid.city)("focus", ctx_r2.focused.city)("disabled", ctx_r2.disabled.city);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.config.city.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r2.invalidMaxlength.city);
    ɵɵproperty("placeholder", ctx_r2.config.city.label)("maxlength", ctx_r2.config == null ? null : ctx_r2.config.city == null ? null : ctx_r2.config.city.maxlength)("ngModel", ctx_r2.model.city);
} }
function NovoAddressElement_span_3_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    var ctx_r27 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$s, !ctx_r27.valid.state, ctx_r27.valid.state));
} }
function NovoAddressElement_span_3_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 18);
    ɵɵtemplate(1, NovoAddressElement_span_3_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "novo-picker", 19);
    ɵɵlistener("changed", function NovoAddressElement_span_3_Template_novo_picker_changed_2_listener($event) { ɵɵrestoreView(_r29); var ctx_r28 = ɵɵnextContext(); return ctx_r28.onStateChange($event); })("ngModelChange", function NovoAddressElement_span_3_Template_novo_picker_ngModelChange_2_listener($event) { ɵɵrestoreView(_r29); var ctx_r30 = ɵɵnextContext(); return ctx_r30.model.state = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r3.invalid.state)("focus", ctx_r3.focused.state)("disabled", ctx_r3.disabled.state);
    ɵɵproperty("tooltip", ctx_r3.tooltip.state);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.config.state.required);
    ɵɵadvance(1);
    ɵɵproperty("config", ctx_r3.config == null ? null : ctx_r3.config.state == null ? null : ctx_r3.config.state.pickerConfig)("placeholder", ctx_r3.config == null ? null : ctx_r3.config.state == null ? null : ctx_r3.config.state.label)("ngModel", ctx_r3.model.state)("disablePickerInput", ctx_r3.disabled.state);
} }
function NovoAddressElement_span_4_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    var ctx_r31 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$s, !ctx_r31.valid.zip, ctx_r31.valid.zip));
} }
function NovoAddressElement_span_4_Template(rf, ctx) { if (rf & 1) {
    var _r33 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 20);
    ɵɵtemplate(1, NovoAddressElement_span_4_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "input", 21);
    ɵɵlistener("ngModelChange", function NovoAddressElement_span_4_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r33); var ctx_r32 = ɵɵnextContext(); return ctx_r32.model.zip = $event; })("ngModelChange", function NovoAddressElement_span_4_Template_input_ngModelChange_2_listener() { ɵɵrestoreView(_r33); var ctx_r34 = ɵɵnextContext(); return ctx_r34.updateControl(); })("focus", function NovoAddressElement_span_4_Template_input_focus_2_listener($event) { ɵɵrestoreView(_r33); var ctx_r35 = ɵɵnextContext(); return ctx_r35.isFocused($event, "zip"); })("blur", function NovoAddressElement_span_4_Template_input_blur_2_listener($event) { ɵɵrestoreView(_r33); var ctx_r36 = ɵɵnextContext(); return ctx_r36.isBlurred($event, "zip"); })("input", function NovoAddressElement_span_4_Template_input_input_2_listener($event) { ɵɵrestoreView(_r33); var ctx_r37 = ɵɵnextContext(); return ctx_r37.onInput($event, "zip"); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r4.invalid.zip)("focus", ctx_r4.focused.zip)("disabled", ctx_r4.disabled.zip);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.config.zip.required);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", ctx_r4.invalidMaxlength.zip);
    ɵɵproperty("placeholder", ctx_r4.config.zip.label)("maxlength", ctx_r4.config == null ? null : ctx_r4.config.zip == null ? null : ctx_r4.config.zip.maxlength)("ngModel", ctx_r4.model.zip);
} }
function NovoAddressElement_span_5_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} if (rf & 2) {
    var ctx_r38 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction2(1, _c0$s, !ctx_r38.valid.countryID, ctx_r38.valid.countryID));
} }
function NovoAddressElement_span_5_Template(rf, ctx) { if (rf & 1) {
    var _r40 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 22);
    ɵɵtemplate(1, NovoAddressElement_span_5_i_1_Template, 1, 4, "i", 15);
    ɵɵelementStart(2, "novo-picker", 23);
    ɵɵlistener("changed", function NovoAddressElement_span_5_Template_novo_picker_changed_2_listener($event) { ɵɵrestoreView(_r40); var ctx_r39 = ɵɵnextContext(); return ctx_r39.onCountryChange($event); })("ngModelChange", function NovoAddressElement_span_5_Template_novo_picker_ngModelChange_2_listener($event) { ɵɵrestoreView(_r40); var ctx_r41 = ɵɵnextContext(); return ctx_r41.model.countryID = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext();
    ɵɵclassProp("invalid", ctx_r5.invalid.countryID)("focus", ctx_r5.focused.countryID)("disabled", ctx_r5.disabled.countryID);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.config.countryID.required);
    ɵɵadvance(1);
    ɵɵproperty("config", ctx_r5.config == null ? null : ctx_r5.config.countryID == null ? null : ctx_r5.config.countryID.pickerConfig)("placeholder", ctx_r5.config.countryID.label)("ngModel", ctx_r5.model.countryID)("disablePickerInput", ctx_r5.disabled.countryID);
} }
// Value accessor for the component (supports ngModel)
var ADDRESS_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoAddressElement; }),
    multi: true,
};
var NovoAddressElement = /** @class */ (function () {
    function NovoAddressElement(labels) {
        this.labels = labels;
        this._readOnly = false;
        this.states = [];
        this.fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.focused = {};
        this.invalid = {};
        this.disabled = {};
        this.invalidMaxlength = {};
        this.valid = {};
        this.tooltip = {};
        this.initComplete = false;
        this.change = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.validityChange = new EventEmitter();
    }
    Object.defineProperty(NovoAddressElement.prototype, "readOnly", {
        get: function () {
            return this._readOnly;
        },
        set: function (readOnly) {
            var _this = this;
            this._readOnly = readOnly;
            this.fieldList.forEach(function (field) {
                _this.disabled[field] = _this._readOnly;
            });
            if (this.model) {
                this.updateStates();
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoAddressElement.prototype.ngOnInit = function () {
        if (!this.config) {
            this.config = {};
        }
        if (this.model) {
            this.writeValue(this.model);
            this.updateControl();
        }
        else if (!this.model) {
            this.model = {};
        }
        this.initConfig();
        if (Helpers.isBlank(this.model.countryID)) {
            this.updateStates();
        }
    };
    NovoAddressElement.prototype.initConfig = function () {
        var _this = this;
        this.fieldList.forEach(function (field) {
            if (!_this.config.hasOwnProperty(field)) {
                _this.config[field] = {
                    hidden: true,
                };
            }
            if (!_this.config[field].hasOwnProperty('label')) {
                _this.config[field].label = _this.labels[field];
            }
            if (_this.config.required) {
                _this.config[field].required = true;
            }
            if (_this.config[field].readOnly || _this.config.readOnly) {
                _this.config[field].readOnly = true;
                _this.disabled[field] = true;
            }
            if (field === 'countryID') {
                if (!_this.config[field].pickerConfig) {
                    _this.config.countryID.pickerConfig = _this.getDefaultCountryConfig();
                }
                _this.config[field].pickerConfig.defaultOptions = _this.config.countryID.pickerConfig.options;
            }
            if (field === 'state') {
                if (!_this.config[field].pickerConfig) {
                    _this.config.state.pickerConfig = _this.getDefaultStateConfig();
                    _this.config[field].pickerConfig.defaultOptions = _this.config[field].pickerConfig.options;
                }
                _this.stateOptions = _this.config[field].pickerConfig.options;
                _this.config[field].pickerConfig.options = function (query) {
                    if (query === void 0) { query = ''; }
                    return _this.stateOptions(query, _this.model.countryID);
                };
                _this.config[field].pickerConfig.defaultOptions = _this.stateOptions;
            }
        });
    };
    NovoAddressElement.prototype.isValid = function (field) {
        var valid = true;
        if (((this.config[field].required && (Helpers.isBlank(this.model[field]) || Helpers.isEmpty(this.model[field]))) ||
            !this.config[field].required) &&
            !(field === 'countryID' && this.config[field].required && !Helpers.isBlank(this.model.countryID)) &&
            !(field === 'state' &&
                this.config[field].required &&
                (!Helpers.isEmpty(this.model.state) ||
                    ((Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                        !Helpers.isBlank(this.model.countryName) &&
                        this.config.state.pickerConfig &&
                        this.config.state.pickerConfig.defaultOptions &&
                        this.config.state.pickerConfig.defaultOptions.length === 0)))) {
            valid = false;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            valid = false;
        }
        this.valid[field] = valid;
    };
    NovoAddressElement.prototype.isInvalid = function (field) {
        var invalid = false;
        var invalidMaxlength = false;
        if ((field !== 'countryID' &&
            field !== 'state' &&
            this.config[field].required &&
            Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.model[field])) ||
            (field === 'countryID' && this.config[field].required && Helpers.isBlank(this.model.countryName) && this.config[field].updated) ||
            (field === 'state' &&
                this.config[field].required &&
                (Helpers.isBlank(this.model.state) || Helpers.isEmpty(this.model.state)) &&
                !Helpers.isBlank(this.model.countryID) &&
                this.config[field].updated &&
                this.config.state.pickerConfig &&
                this.config.state.pickerConfig.defaultOptions &&
                this.config.state.pickerConfig.defaultOptions.length > 0)) {
            invalid = true;
        }
        else if (!Helpers.isEmpty(this.model[field]) &&
            !Helpers.isBlank(this.config[field].maxlength) &&
            this.config[field].maxlength < this.model[field].length) {
            invalid = true;
            invalidMaxlength = true;
        }
        this.invalid[field] = invalid;
        this.invalidMaxlength[field] = invalidMaxlength;
    };
    NovoAddressElement.prototype.onInput = function (event, field) {
        this.isInvalid(field);
        this.isValid(field);
        if (event) {
            this.change.emit({ value: this.model[field], field: field });
        }
    };
    NovoAddressElement.prototype.isFocused = function (event, field) {
        this.focused[field] = true;
        this.focus.emit({ event: event, field: field });
    };
    NovoAddressElement.prototype.isBlurred = function (event, field) {
        this.focused[field] = false;
        this.blur.emit({ event: event, field: field });
    };
    NovoAddressElement.prototype.onCountryChange = function (evt) {
        var country = evt && evt.rawValue ? evt.rawValue : null;
        var field;
        var statesUpdatable = false;
        this.config.countryID.updated = true;
        if (this.config.countryID.pickerConfig) {
            field = this.config.countryID.pickerConfig.field;
        }
        if (country && field && !Helpers.isBlank(country[field]) && this.model.countryID !== country[field]) {
            this.model.countryID = country[field];
            this.model.countryName = Helpers.interpolate(this.config.countryID.pickerConfig.format, country);
            this.disabled.state = false;
            this.tooltip.state = undefined;
            statesUpdatable = true;
        }
        else if (Helpers.isBlank(country) || Helpers.isBlank(country[field])) {
            this.model.countryID = undefined;
            this.model.countryName = undefined;
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            this.invalid.state = false;
            statesUpdatable = true;
        }
        // Update state
        if (statesUpdatable) {
            this.model.state = undefined;
            this.updateStates();
        }
        this.updateControl();
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    };
    NovoAddressElement.prototype.onStateChange = function (evt) {
        var state = evt && evt.value ? evt.value : null;
        this.config.state.updated = true;
        this.model.state = state;
        this.updateControl();
        this.onInput(null, 'state');
    };
    NovoAddressElement.prototype.setStateLabel = function (model) {
        var state = model.state;
        if (!Helpers.isBlank(state)) {
            if (this.config.state.required) {
                this.valid.state = true;
            }
            this.model.state = state;
        }
        else {
            this.model.state = undefined;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    };
    NovoAddressElement.prototype.updateStates = function () {
        var _this = this;
        if (this.config.state.pickerConfig.options && !Helpers.isBlank(this.model.countryID)) {
            this.config.state.pickerConfig.options = function (query) {
                if (query === void 0) { query = ''; }
                return _this.stateOptions(query, _this.model.countryID);
            };
            this.stateOptions('', this.model.countryID).then(function (results) {
                _this.config.state.pickerConfig.defaultOptions = results;
                if (results.length) {
                    _this.tooltip.state = undefined;
                    _this.disabled.state = _this._readOnly;
                    _this.setStateLabel(_this.model);
                }
                else {
                    _this.disabled.state = true;
                    _this.tooltip.state = _this.labels.noStatesForCountry;
                    if (_this.config.state.required) {
                        _this.valid.state = true;
                    }
                }
                _this.validityChange.emit();
                _this.onInput(null, 'state');
            });
        }
        else {
            this.config.state.pickerConfig.defaultOptions = [];
            this.disabled.state = true;
            this.tooltip.state = this.labels.selectCountryFirst;
            if (this.config.state.required) {
                this.valid.state = false;
            }
        }
    };
    NovoAddressElement.prototype.getStateOptions = function (filter, countryID) {
        if (filter === void 0) { filter = ''; }
        if (countryID) {
            var country = findByCountryId(countryID);
            var states = getStates(country.name);
            if (filter) {
                return states.filter(function (name) { return new RegExp("" + filter, 'gi').test(name); });
            }
            return states;
        }
        else {
            return [];
        }
    };
    NovoAddressElement.prototype.updateControl = function () {
        this.onModelChange(this.model);
        this.onInput(null, 'countryID');
        this.onInput(null, 'state');
    };
    NovoAddressElement.prototype.writeValue = function (model) {
        var _this = this;
        var loadingCountries = false;
        if (model) {
            var countryName_1;
            if (model.countryName && model.countryID) {
                countryName_1 = model.countryName;
            }
            else if (model.countryID) {
                if (this.config.countryID.pickerConfig && this.config.countryID.pickerConfig.getLabels) {
                    if (Helpers.isFunction(this.config.countryID.pickerConfig.getLabels)) {
                        var promise = this.config.countryID.pickerConfig.getLabels(model.countryID);
                        loadingCountries = true;
                        if (promise.then) {
                            promise.then(function (result) {
                                loadingCountries = false;
                                countryName_1 = Helpers.interpolateWithFallback(_this.config.countryID.pickerConfig.format, result);
                                _this.model = Object.assign(model, { countryName: countryName_1 });
                                _this.updateStates();
                            });
                        }
                    }
                }
            }
            if (countryName_1) {
                countryName_1 = countryName_1.trim();
                model.state = model.state || '';
                this.model = Object.assign(model, { countryName: countryName_1 });
            }
            else {
                this.model = model;
            }
            if (!loadingCountries && !Helpers.isBlank(this.model.countryID)) {
                this.updateStates();
            }
        }
        this.fieldList.forEach(function (field) {
            _this.onInput(null, field);
        });
    };
    NovoAddressElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoAddressElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoAddressElement.prototype.getDefaultStateConfig = function () {
        var _this = this;
        return {
            field: 'value',
            format: '$label',
            options: function (query, countryID) {
                if (query === void 0) { query = ''; }
                return Promise.resolve(_this.getStateOptions(query, countryID));
            },
            getLabels: function (state) {
                return Promise.resolve(state);
            },
        };
    };
    NovoAddressElement.prototype.getDefaultCountryConfig = function () {
        return {
            field: 'value',
            format: '$label',
            options: function (query) {
                if (query === void 0) { query = ''; }
                return new Promise(function (resolve) {
                    var countries = COUNTRIES;
                    if (query) {
                        countries = countries.filter(function (country) { return new RegExp("" + query, 'gi').test(country.name); });
                    }
                    return resolve(countries.map(function (country) { return ({ value: country.id, label: country.name }); }));
                });
            },
            getLabels: function (countryID) {
                return new Promise(function (resolve) {
                    var country = findByCountryId(countryID);
                    if (country) {
                        resolve({ value: country.id, label: country.name });
                    }
                    else {
                        resolve('');
                    }
                });
            },
        };
    };
    NovoAddressElement.ɵfac = function NovoAddressElement_Factory(t) { return new (t || NovoAddressElement)(ɵɵdirectiveInject(NovoLabelService)); };
    NovoAddressElement.ɵcmp = ɵɵdefineComponent({ type: NovoAddressElement, selectors: [["novo-address"]], inputs: { config: "config", readOnly: "readOnly" }, outputs: { change: "change", focus: "focus", blur: "blur", validityChange: "validityChange" }, features: [ɵɵProvidersFeature([ADDRESS_VALUE_ACCESSOR])], decls: 6, vars: 6, consts: [["class", "street-address", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "apt suite", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "city locality", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "state region", 3, "invalid", "focus", "disabled", "tooltip", 4, "ngIf"], ["class", "zip postal-code", 3, "invalid", "focus", "disabled", 4, "ngIf"], ["class", "country-name", 3, "invalid", "focus", "disabled", 4, "ngIf"], [1, "street-address"], ["class", "required-indicator address1", 3, "ngClass", 4, "ngIf"], ["type", "text", "id", "address1", "name", "address1", "autocomplete", "shipping street-address address-line-1", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "required-indicator", "address1", 3, "ngClass"], [1, "apt", "suite"], ["class", "required-indicator address2", 3, "ngClass", 4, "ngIf"], ["type", "text", "id", "address2", "name", "address2", "autocomplete", "shipping address-line-2", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "required-indicator", "address2", 3, "ngClass"], [1, "city", "locality"], ["class", "required-indicator", 3, "ngClass", 4, "ngIf"], ["type", "text", "id", "city", "name", "city", "autocomplete", "shipping city locality", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "required-indicator", 3, "ngClass"], [1, "state", "region", 3, "tooltip"], ["autocomplete", "shipping region", 3, "config", "placeholder", "ngModel", "disablePickerInput", "changed", "ngModelChange"], [1, "zip", "postal-code"], ["type", "text", "id", "zip", "name", "zip", "autocomplete", "shipping postal-code", 3, "placeholder", "maxlength", "ngModel", "ngModelChange", "focus", "blur", "input"], [1, "country-name"], ["autocomplete", "shipping country", 3, "config", "placeholder", "ngModel", "disablePickerInput", "changed", "ngModelChange"]], template: function NovoAddressElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoAddressElement_span_0_Template, 3, 12, "span", 0);
            ɵɵtemplate(1, NovoAddressElement_span_1_Template, 3, 12, "span", 1);
            ɵɵtemplate(2, NovoAddressElement_span_2_Template, 3, 12, "span", 2);
            ɵɵtemplate(3, NovoAddressElement_span_3_Template, 3, 12, "span", 3);
            ɵɵtemplate(4, NovoAddressElement_span_4_Template, 3, 12, "span", 4);
            ɵɵtemplate(5, NovoAddressElement_span_5_Template, 3, 11, "span", 5);
        } if (rf & 2) {
            ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.address1 == null ? null : ctx.config.address1.hidden));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.address2 == null ? null : ctx.config.address2.hidden));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.city == null ? null : ctx.config.city.hidden));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.state == null ? null : ctx.config.state.hidden));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.zip == null ? null : ctx.config.zip.hidden));
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !(ctx.config == null ? null : ctx.config.countryID == null ? null : ctx.config.countryID.hidden));
        } }, directives: [NgIf, DefaultValueAccessor, MaxLengthValidator, NgControlStatus, NgModel, NgClass, TooltipDirective, NovoPickerElement], encapsulation: 2 });
    return NovoAddressElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAddressElement, [{
        type: Component,
        args: [{
                selector: 'novo-address',
                providers: [ADDRESS_VALUE_ACCESSOR],
                template: "\n    <span\n      *ngIf=\"!config?.address1?.hidden\"\n      class=\"street-address\"\n      [class.invalid]=\"invalid.address1\"\n      [class.focus]=\"focused.address1\"\n      [class.disabled]=\"disabled.address1\"\n    >\n      <i\n        *ngIf=\"config.address1.required\"\n        class=\"required-indicator address1\"\n        [ngClass]=\"{ 'bhi-circle': !valid.address1, 'bhi-check': valid.address1 }\"\n      >\n      </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.address1\"\n        type=\"text\"\n        id=\"address1\"\n        name=\"address1\"\n        [placeholder]=\"config.address1.label\"\n        [maxlength]=\"config?.address1?.maxlength\"\n        autocomplete=\"shipping street-address address-line-1\"\n        [(ngModel)]=\"model.address1\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'address1')\"\n        (blur)=\"isBlurred($event, 'address1')\"\n        (input)=\"onInput($event, 'address1')\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.address2?.hidden\"\n      class=\"apt suite\"\n      [class.invalid]=\"invalid.address2\"\n      [class.focus]=\"focused.address2\"\n      [class.disabled]=\"disabled.address2\"\n    >\n      <i\n        *ngIf=\"config.address2.required\"\n        class=\"required-indicator address2\"\n        [ngClass]=\"{ 'bhi-circle': !valid.address2, 'bhi-check': valid.address2 }\"\n      >\n      </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.address2\"\n        type=\"text\"\n        id=\"address2\"\n        name=\"address2\"\n        [placeholder]=\"config.address2.label\"\n        [maxlength]=\"config?.address2?.maxlength\"\n        autocomplete=\"shipping address-line-2\"\n        [(ngModel)]=\"model.address2\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'address2')\"\n        (blur)=\"isBlurred($event, 'address2')\"\n        (input)=\"onInput($event, 'address2')\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.city?.hidden\"\n      class=\"city locality\"\n      [class.invalid]=\"invalid.city\"\n      [class.focus]=\"focused.city\"\n      [class.disabled]=\"disabled.city\"\n    >\n      <i *ngIf=\"config.city.required\" class=\"required-indicator\" [ngClass]=\"{ 'bhi-circle': !valid.city, 'bhi-check': valid.city }\"> </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.city\"\n        type=\"text\"\n        id=\"city\"\n        name=\"city\"\n        [placeholder]=\"config.city.label\"\n        autocomplete=\"shipping city locality\"\n        [maxlength]=\"config?.city?.maxlength\"\n        [(ngModel)]=\"model.city\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'city')\"\n        (blur)=\"isBlurred($event, 'city')\"\n        (input)=\"onInput($event, 'city')\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.state?.hidden\"\n      class=\"state region\"\n      [class.invalid]=\"invalid.state\"\n      [class.focus]=\"focused.state\"\n      [class.disabled]=\"disabled.state\"\n      [tooltip]=\"tooltip.state\"\n    >\n      <i *ngIf=\"config.state.required\" class=\"required-indicator\" [ngClass]=\"{ 'bhi-circle': !valid.state, 'bhi-check': valid.state }\"> </i>\n      <novo-picker\n        [config]=\"config?.state?.pickerConfig\"\n        [placeholder]=\"config?.state?.label\"\n        (changed)=\"onStateChange($event)\"\n        autocomplete=\"shipping region\"\n        [(ngModel)]=\"model.state\"\n        [disablePickerInput]=\"disabled.state\"\n      ></novo-picker>\n    </span>\n    <span\n      *ngIf=\"!config?.zip?.hidden\"\n      class=\"zip postal-code\"\n      [class.invalid]=\"invalid.zip\"\n      [class.focus]=\"focused.zip\"\n      [class.disabled]=\"disabled.zip\"\n    >\n      <i *ngIf=\"config.zip.required\" class=\"required-indicator\" [ngClass]=\"{ 'bhi-circle': !valid.zip, 'bhi-check': valid.zip }\"> </i>\n      <input\n        [class.maxlength-error]=\"invalidMaxlength.zip\"\n        type=\"text\"\n        id=\"zip\"\n        name=\"zip\"\n        [placeholder]=\"config.zip.label\"\n        autocomplete=\"shipping postal-code\"\n        [maxlength]=\"config?.zip?.maxlength\"\n        [(ngModel)]=\"model.zip\"\n        (ngModelChange)=\"updateControl()\"\n        (focus)=\"isFocused($event, 'zip')\"\n        (blur)=\"isBlurred($event, 'zip')\"\n        (input)=\"onInput($event, 'zip')\"\n      />\n    </span>\n    <span\n      *ngIf=\"!config?.countryID?.hidden\"\n      class=\"country-name\"\n      [class.invalid]=\"invalid.countryID\"\n      [class.focus]=\"focused.countryID\"\n      [class.disabled]=\"disabled.countryID\"\n    >\n      <i\n        *ngIf=\"config.countryID.required\"\n        class=\"required-indicator\"\n        [ngClass]=\"{ 'bhi-circle': !valid.countryID, 'bhi-check': valid.countryID }\"\n      >\n      </i>\n      <novo-picker\n        [config]=\"config?.countryID?.pickerConfig\"\n        [placeholder]=\"config.countryID.label\"\n        (changed)=\"onCountryChange($event)\"\n        autocomplete=\"shipping country\"\n        [(ngModel)]=\"model.countryID\"\n        [disablePickerInput]=\"disabled.countryID\"\n      ></novo-picker>\n    </span>\n  ",
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { config: [{
            type: Input
        }], readOnly: [{
            type: Input
        }], change: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], validityChange: [{
            type: Output
        }] }); })();

// NG2
function NovoCheckboxElement_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.label);
} }
// Value accessor for the component (supports ngModel)
var CHECKBOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoCheckboxElement; }),
    multi: true,
};
var LAYOUT_DEFAULTS = { iconStyle: 'box' };
var NovoCheckboxElement = /** @class */ (function () {
    function NovoCheckboxElement(ref) {
        this.ref = ref;
        this.indeterminate = false;
        this.disabled = false;
        this.onSelect = new EventEmitter();
        this.boxIcon = true;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    NovoCheckboxElement.prototype.ngOnInit = function () {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS, this.layoutOptions);
        this.boxIcon = this.layoutOptions.iconStyle === 'box';
    };
    NovoCheckboxElement.prototype.select = function (event) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            this.model = !this.model;
            this.onModelChange(this.model);
            this.onSelect.emit({ originalEvent: event, value: this.model });
        }
    };
    NovoCheckboxElement.prototype.writeValue = function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    NovoCheckboxElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoCheckboxElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoCheckboxElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoCheckboxElement.ɵfac = function NovoCheckboxElement_Factory(t) { return new (t || NovoCheckboxElement)(ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoCheckboxElement.ɵcmp = ɵɵdefineComponent({ type: NovoCheckboxElement, selectors: [["novo-checkbox"]], inputs: { name: "name", label: "label", indeterminate: "indeterminate", disabled: "disabled", layoutOptions: "layoutOptions" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([CHECKBOX_VALUE_ACCESSOR])], decls: 5, vars: 24, consts: [[1, "check-box-group"], ["type", "checkbox", 3, "name", "ngModel", "disabled", "ngModelChange"], [3, "click"], [4, "ngIf"]], template: function NovoCheckboxElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "input", 1);
            ɵɵlistener("ngModelChange", function NovoCheckboxElement_Template_input_ngModelChange_1_listener($event) { return ctx.model = $event; });
            ɵɵelementEnd();
            ɵɵelementStart(2, "label", 2);
            ɵɵlistener("click", function NovoCheckboxElement_Template_label_click_2_listener($event) { return ctx.select($event); });
            ɵɵelement(3, "i");
            ɵɵtemplate(4, NovoCheckboxElement_span_4_Template, 2, 1, "span", 3);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("checked", ctx.model)("disabled", ctx.disabled);
            ɵɵadvance(1);
            ɵɵproperty("name", ctx.name)("ngModel", ctx.model)("disabled", ctx.disabled);
            ɵɵattribute("id", ctx.name);
            ɵɵadvance(1);
            ɵɵclassProp("disabled", ctx.disabled);
            ɵɵattribute("for", ctx.name);
            ɵɵadvance(1);
            ɵɵclassProp("bhi-checkbox-empty", !ctx.model && !ctx.indeterminate && ctx.boxIcon)("bhi-checkbox-filled", ctx.model && !ctx.indeterminate && ctx.boxIcon)("bhi-checkbox-indeterminate", ctx.indeterminate && ctx.boxIcon)("bhi-circle-o", !ctx.model && !ctx.indeterminate && !ctx.boxIcon)("bhi-check", ctx.model && !ctx.indeterminate && !ctx.boxIcon)("bhi-circle", ctx.indeterminate && !ctx.boxIcon);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.label);
        } }, directives: [CheckboxControlValueAccessor, NgControlStatus, NgModel, NgIf], encapsulation: 2 });
    return NovoCheckboxElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCheckboxElement, [{
        type: Component,
        args: [{
                selector: 'novo-checkbox',
                providers: [CHECKBOX_VALUE_ACCESSOR],
                template: "\n    <div class=\"check-box-group\" [class.checked]=\"model\" [class.disabled]=\"disabled\">\n        <input [name]=\"name\" type=\"checkbox\" [(ngModel)]=\"model\" [attr.id]=\"name\" [disabled]=\"disabled\">\n        <label [attr.for]=\"name\" (click)=\"select($event)\" [class.disabled]=\"disabled\">\n          <i [class.bhi-checkbox-empty]=\"!model && !indeterminate && boxIcon\"\n              [class.bhi-checkbox-filled]=\"model && !indeterminate && boxIcon\"\n              [class.bhi-checkbox-indeterminate]=\"indeterminate && boxIcon\"\n              [class.bhi-circle-o]=\"!model && !indeterminate && !boxIcon\"\n              [class.bhi-check]=\"model && !indeterminate && !boxIcon\"\n              [class.bhi-circle]=\"indeterminate && !boxIcon\"></i>\n          <span *ngIf=\"label\">{{ label }}</span>\n        </label>\n    </div>\n  ",
            }]
    }], function () { return [{ type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], label: [{
            type: Input
        }], indeterminate: [{
            type: Input
        }], disabled: [{
            type: Input
        }], layoutOptions: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

// NG2
var _c0$t = function (a0) { return { checked: a0 }; };
var _c1$c = function (a0, a1) { return { "bhi-checkbox-empty": a0, "bhi-checkbox-filled": a1 }; };
function NovoCheckListElement_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵelementStart(1, "input", 2);
    ɵɵlistener("change", function NovoCheckListElement_div_0_Template_input_change_1_listener($event) { ɵɵrestoreView(_r4); var option_r1 = ctx.$implicit; var ctx_r3 = ɵɵnextContext(); return ctx_r3.select($event, option_r1); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label", 3);
    ɵɵlistener("click", function NovoCheckListElement_div_0_Template_label_click_2_listener($event) { ɵɵrestoreView(_r4); var option_r1 = ctx.$implicit; var ctx_r5 = ɵɵnextContext(); return ctx_r5.select($event, option_r1); });
    ɵɵelement(3, "i", 4);
    ɵɵelementStart(4, "span");
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r0.disabled);
    ɵɵproperty("ngClass", ɵɵpureFunction1(12, _c0$t, option_r1.checked));
    ɵɵattribute("data-automation-id", option_r1.label);
    ɵɵadvance(1);
    ɵɵproperty("name", ctx_r0.name)("ngModel", option_r1.checked)("value", option_r1.checked)("disabled", ctx_r0.disabled);
    ɵɵattribute("id", ctx_r0.name + i_r2);
    ɵɵadvance(1);
    ɵɵattribute("for", ctx_r0.name + i_r2);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction2(14, _c1$c, !option_r1.checked, option_r1.checked));
    ɵɵadvance(2);
    ɵɵtextInterpolate(option_r1.label);
} }
// Value accessor for the component (supports ngModel)
var CHECKLIST_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoCheckListElement; }),
    multi: true,
};
var NovoCheckListElement = /** @class */ (function () {
    function NovoCheckListElement() {
        this.onSelect = new EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    NovoCheckListElement.prototype.ngOnInit = function () {
        this.setModel();
        this.setupOptions();
    };
    NovoCheckListElement.prototype.select = function (event, item) {
        Helpers.swallowEvent(event);
        if (!this.disabled) {
            item.checked = !item.checked;
            this.model = this._options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
            this.onModelChange(this.model.length > 0 ? this.model : '');
            this.onSelect.emit({ selected: this.model });
        }
    };
    NovoCheckListElement.prototype.setupOptions = function () {
        var _this = this;
        this.options = this.options || [];
        this._options = [];
        if (this.options.length && !this.options[0].value) {
            this.options.forEach(function (option) {
                var formattedOption = {
                    value: option,
                    label: option,
                    checked: _this.model && _this.model.length && _this.model.indexOf(option.value) !== -1,
                };
                _this._options.push(formattedOption);
            });
        }
        else {
            this.options.forEach(function (option) {
                var formattedOption = option;
                formattedOption.checked = _this.model && _this.model.length && _this.model.indexOf(option.value) !== -1;
                _this._options.push(formattedOption);
            });
        }
    };
    NovoCheckListElement.prototype.setModel = function () {
        var checkedOptions = this.options.filter(function (checkBox) { return checkBox.checked; }).map(function (x) { return x.value; });
        this.writeValue(checkedOptions);
    };
    NovoCheckListElement.prototype.writeValue = function (model) {
        this.model = model || [];
        if (model) {
            this.setupOptions();
        }
    };
    NovoCheckListElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoCheckListElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoCheckListElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoCheckListElement.ɵfac = function NovoCheckListElement_Factory(t) { return new (t || NovoCheckListElement)(); };
    NovoCheckListElement.ɵcmp = ɵɵdefineComponent({ type: NovoCheckListElement, selectors: [["novo-check-list"]], inputs: { name: "name", options: "options", disabled: "disabled" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([CHECKLIST_VALUE_ACCESSOR])], decls: 1, vars: 1, consts: [["class", "check-box-group", 3, "ngClass", "disabled", 4, "ngFor", "ngForOf"], [1, "check-box-group", 3, "ngClass"], ["type", "checkbox", 3, "name", "ngModel", "value", "disabled", "change"], [3, "click"], [3, "ngClass"]], template: function NovoCheckListElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoCheckListElement_div_0_Template, 6, 17, "div", 0);
        } if (rf & 2) {
            ɵɵproperty("ngForOf", ctx._options);
        } }, directives: [NgForOf, NgClass, CheckboxControlValueAccessor, NgControlStatus, NgModel], encapsulation: 2 });
    return NovoCheckListElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoCheckListElement, [{
        type: Component,
        args: [{
                selector: 'novo-check-list',
                providers: [CHECKLIST_VALUE_ACCESSOR],
                template: "\n    <div\n      class=\"check-box-group\"\n      *ngFor=\"let option of _options; let i = index\"\n      [ngClass]=\"{ checked: option.checked }\"\n      [class.disabled]=\"disabled\"\n      [attr.data-automation-id]=\"option.label\"\n    >\n      <input\n        [name]=\"name\"\n        type=\"checkbox\"\n        [ngModel]=\"option.checked\"\n        [attr.id]=\"name + i\"\n        [value]=\"option.checked\"\n        (change)=\"select($event, option)\"\n        [disabled]=\"disabled\"\n      />\n      <label [attr.for]=\"name + i\" (click)=\"select($event, option)\">\n        <i [ngClass]=\"{ 'bhi-checkbox-empty': !option.checked, 'bhi-checkbox-filled': option.checked }\"></i>\n        <span>{{ option.label }}</span>\n      </label>\n    </div>\n  ",
            }]
    }], null, { name: [{
            type: Input
        }], options: [{
            type: Input
        }], disabled: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

var NovoFile = /** @class */ (function () {
    function NovoFile(file) {
        var _this = this;
        this.name = '';
        this.contentType = '';
        this.lastModified = 0;
        this.size = 0;
        this.loaded = false;
        this.reader = new FileReader();
        this.name = "" + encodeURIComponent(file.name || '');
        this.contentType = file.type;
        this.lastModified = file.lastModified;
        this.size = file.size;
        this.file = file;
        this.reader.onload = function (event) {
            _this.fileContents = event.target.result.split(',')[1];
            _this.dataURL = event.target.result;
            _this.loaded = true;
            if (_this.readPromise) {
                _this.readPromise(_this);
            }
        };
    }
    NovoFile.prototype.read = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.readPromise = resolve;
            // when the file is read it triggers the onload event above.
            _this.reader.readAsDataURL(_this.file);
        });
    };
    NovoFile.prototype.toJSON = function () {
        return {
            name: this.name,
            contentType: this.type,
            lastModified: this.lastModified,
            size: this.size,
            fileContents: this.fileContents,
        };
    };
    return NovoFile;
}());

var _c0$u = ["fileInput"];
var _c1$d = ["fileOutput"];
var _c2$6 = ["container"];
function NovoFileInputElement_ng_template_2_input_1_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 8);
    ɵɵlistener("change", function NovoFileInputElement_ng_template_2_input_1_Template_input_change_0_listener($event) { ɵɵrestoreView(_r10); var ctx_r9 = ɵɵnextContext(2); return ctx_r9.check($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵproperty("name", ctx_r5.name);
    ɵɵattribute("id", ctx_r5.name)("multiple", ctx_r5.multiple)("data-feature-id", ctx_r5.dataFeatureId);
} }
function NovoFileInputElement_ng_template_2_input_2_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 8);
    ɵɵlistener("change", function NovoFileInputElement_ng_template_2_input_2_Template_input_change_0_listener($event) { ɵɵrestoreView(_r12); var ctx_r11 = ɵɵnextContext(2); return ctx_r11.customCheck($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("name", ctx_r6.name);
    ɵɵattribute("id", ctx_r6.name)("multiple", ctx_r6.multiple)("data-feature-id", ctx_r6.dataFeatureId);
} }
function NovoFileInputElement_ng_template_2_label_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 9);
    ɵɵelementStart(1, "div");
    ɵɵelement(2, "i", 10);
    ɵɵtext(3);
    ɵɵelementStart(4, "strong", 11);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext(2);
    ɵɵattribute("for", ctx_r7.name);
    ɵɵadvance(3);
    ɵɵtextInterpolate2("", ctx_r7.placeholder || ctx_r7.labels.chooseAFile, " ", ctx_r7.labels.or, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r7.labels.clickToBrowse);
} }
function NovoFileInputElement_ng_template_2_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 12);
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "small");
    ɵɵtext(4);
    ɵɵelementStart(5, "strong", 11);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵɵnextContext(2);
    ɵɵattribute("for", ctx_r8.name);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r8.placeholder || ctx_r8.labels.chooseAFile);
    ɵɵadvance(2);
    ɵɵtextInterpolate1("", ctx_r8.labels.or, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r8.labels.clickToBrowse);
} }
function NovoFileInputElement_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 3);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_2_input_1_Template, 1, 4, "input", 4);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_2_input_2_Template, 1, 4, "input", 4);
    ɵɵelementStart(3, "section", 5);
    ɵɵtemplate(4, NovoFileInputElement_ng_template_2_label_4_Template, 6, 4, "label", 6);
    ɵɵtemplate(5, NovoFileInputElement_ng_template_2_label_5_Template, 7, 4, "label", 7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r2.disabled)("active", ctx_r2.active);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r2.layoutOptions.customActions);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.layoutOptions.customActions);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", ctx_r2.layoutOptions.labelStyle);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "no-box");
} }
function NovoFileInputElement_ng_template_4_div_1_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 19);
} }
function NovoFileInputElement_ng_template_4_div_1_label_2_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1, "||");
    ɵɵelementEnd();
} }
function NovoFileInputElement_ng_template_4_div_1_label_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label");
    ɵɵelementStart(1, "span");
    ɵɵelementStart(2, "a", 20);
    ɵɵtext(3);
    ɵɵpipe(4, "decodeURI");
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoFileInputElement_ng_template_4_div_1_label_2_span_5_Template, 2, 0, "span", 17);
    ɵɵelementStart(6, "span");
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var file_r14 = ɵɵnextContext().$implicit;
    ɵɵadvance(2);
    ɵɵpropertyInterpolate("href", file_r14.link, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind1(4, 4, file_r14.name));
    ɵɵadvance(2);
    ɵɵproperty("ngIf", file_r14.description);
    ɵɵadvance(2);
    ɵɵtextInterpolate(file_r14.description);
} }
function NovoFileInputElement_ng_template_4_div_1_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label");
    ɵɵtext(1);
    ɵɵpipe(2, "decodeURI");
    ɵɵelementEnd();
} if (rf & 2) {
    var file_r14 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind1(2, 1, file_r14.name));
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 24);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r29); var file_r14 = ɵɵnextContext(3).$implicit; var ctx_r27 = ɵɵnextContext(2); return ctx_r27.download(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-download");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r32 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 25);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r32); var file_r14 = ɵɵnextContext(3).$implicit; var ctx_r30 = ɵɵnextContext(2); return ctx_r30.remove(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-remove");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_1_Template, 1, 1, "button", 22);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_div_4_div_1_button_2_Template, 1, 1, "button", 23);
    ɵɵelementEnd();
} if (rf & 2) {
    var file_r14 = ɵɵnextContext(2).$implicit;
    var ctx_r23 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r23.layoutOptions.download);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r23.disabled && (ctx_r23.layoutOptions.removable || !ctx_r23.layoutOptions.removable && ctx_r23.layoutOptions.removableWhenNew && !file_r14.link));
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r39 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 27);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r39); var file_r14 = ɵɵnextContext(3).$implicit; var ctx_r37 = ɵɵnextContext(2); return ctx_r37.customEdit(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-edit");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r42 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 24);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r42); var file_r14 = ɵɵnextContext(3).$implicit; var ctx_r40 = ɵɵnextContext(2); return ctx_r40.customSave(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-download");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r45 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 25);
    ɵɵlistener("click", function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_3_Template_button_click_0_listener() { ɵɵrestoreView(_r45); var file_r14 = ɵɵnextContext(3).$implicit; var ctx_r43 = ɵɵnextContext(2); return ctx_r43.customDelete(file_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    ɵɵattribute("data-automation-id", "file-remove");
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_1_Template, 1, 1, "button", 26);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_2_Template, 1, 1, "button", 22);
    ɵɵtemplate(3, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_button_3_Template, 1, 1, "button", 23);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r24 = ɵɵnextContext(4);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r24.layoutOptions.edit && !ctx_r24.disabled);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r24.layoutOptions.download);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r24.disabled);
} }
function NovoFileInputElement_ng_template_4_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_div_4_div_1_Template, 3, 2, "div", 17);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_div_4_div_2_Template, 4, 3, "div", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r18 = ɵɵnextContext(3);
    ɵɵattribute("data-automation-id", "file-actions");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r18.layoutOptions.customActions);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.layoutOptions.customActions);
} }
function NovoFileInputElement_ng_template_4_div_1_novo_loading_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading");
} }
function NovoFileInputElement_ng_template_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_i_1_Template, 1, 0, "i", 16);
    ɵɵtemplate(2, NovoFileInputElement_ng_template_4_div_1_label_2_Template, 8, 6, "label", 17);
    ɵɵtemplate(3, NovoFileInputElement_ng_template_4_div_1_label_3_Template, 3, 3, "label", 17);
    ɵɵtemplate(4, NovoFileInputElement_ng_template_4_div_1_div_4_Template, 3, 3, "div", 18);
    ɵɵtemplate(5, NovoFileInputElement_ng_template_4_div_1_novo_loading_5_Template, 1, 0, "novo-loading", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var file_r14 = ctx.$implicit;
    var ctx_r13 = ɵɵnextContext(2);
    ɵɵclassProp("disabled", ctx_r13.disabled);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r13.layoutOptions.draggable);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", file_r14.link);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !file_r14.link);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", file_r14.loaded);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !file_r14.loaded);
} }
function NovoFileInputElement_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵtemplate(1, NovoFileInputElement_ng_template_4_div_1_Template, 6, 7, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵproperty("dragula", ctx_r4.fileOutputBag)("dragulaModel", ctx_r4.files);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r4.files);
} }
// Value accessor for the component (supports ngModel)
var FILE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoFileInputElement; }),
    multi: true,
};
var LAYOUT_DEFAULTS$1 = { order: 'default', download: true, removable: true, labelStyle: 'default', draggable: false };
var NovoFileInputElement = /** @class */ (function () {
    function NovoFileInputElement(element, labels, dragula) {
        this.element = element;
        this.labels = labels;
        this.dragula = dragula;
        this.multiple = false;
        this.disabled = false;
        this.value = [];
        this.edit = new EventEmitter();
        this.save = new EventEmitter();
        this.delete = new EventEmitter();
        this.upload = new EventEmitter();
        this.elements = [];
        this.files = [];
        this.active = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.commands = {
            dragenter: this.dragEnterHandler.bind(this),
            dragleave: this.dragLeaveHandler.bind(this),
            dragover: this.dragOverHandler.bind(this),
            drop: this.dropHandler.bind(this),
        };
    }
    NovoFileInputElement.prototype.ngOnInit = function () {
        var _this = this;
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
            _this.element.nativeElement.addEventListener(type, _this.commands[type]);
        });
        this.updateLayout();
        this.initializeDragula();
        this.setInitialFileList();
        this.dataFeatureId = this.dataFeatureId ? this.dataFeatureId : this.name;
    };
    NovoFileInputElement.prototype.ngOnDestroy = function () {
        var _this = this;
        ['dragenter', 'dragleave', 'dragover', 'drop'].forEach(function (type) {
            _this.element.nativeElement.removeEventListener(type, _this.commands[type]);
        });
        var dragulaHasFileOutputBag = this.dragula.bags.length > 0 && this.dragula.bags.filter(function (x) { return x.name === _this.fileOutputBag; }).length > 0;
        if (dragulaHasFileOutputBag) {
            this.dragula.destroy(this.fileOutputBag);
        }
    };
    NovoFileInputElement.prototype.ngOnChanges = function (changes) {
        this.onModelChange(this.model);
    };
    NovoFileInputElement.prototype.updateLayout = function () {
        this.layoutOptions = Object.assign({}, LAYOUT_DEFAULTS$1, this.layoutOptions);
        this.insertTemplatesBasedOnLayout();
    };
    NovoFileInputElement.prototype.insertTemplatesBasedOnLayout = function () {
        var _this = this;
        var order;
        switch (this.layoutOptions['order']) {
            case 'displayFilesBelow':
                order = ['fileInput', 'fileOutput'];
                break;
            default:
                order = ['fileOutput', 'fileInput'];
        }
        order.forEach(function (template) {
            _this.container.createEmbeddedView(_this[template], 0);
        });
        return order;
    };
    NovoFileInputElement.prototype.initializeDragula = function () {
        var _this = this;
        this.fileOutputBag = "file-output-" + this.dragula.bags.length;
        this.dragula.setOptions(this.fileOutputBag, {
            moves: function (el, container, handle) {
                return _this.layoutOptions.draggable;
            },
        });
    };
    NovoFileInputElement.prototype.setInitialFileList = function () {
        if (this.value) {
            this.files = this.value;
        }
    };
    NovoFileInputElement.prototype.dragEnterHandler = function (event) {
        event.preventDefault();
        event.dataTransfer.dropEffect = 'copy';
        this.target = event.target;
        this.active = true;
    };
    NovoFileInputElement.prototype.dragLeaveHandler = function (event) {
        event.preventDefault();
        if (this.target === event.target) {
            this.active = false;
        }
    };
    NovoFileInputElement.prototype.dragOverHandler = function (event) {
        event.preventDefault();
        // no-op
    };
    NovoFileInputElement.prototype.dropHandler = function (event) {
        event.preventDefault();
        this.visible = false;
        if (event.dataTransfer.types[0] !== 'Files') {
            return;
        }
        var options = this.layoutOptions;
        var filelist = Array.from(event.dataTransfer.files);
        if (options.customActions) {
            this.upload.emit(this.multiple ? filelist : [filelist[0]]);
        }
        else {
            this.process(this.multiple ? filelist : [filelist[0]]);
        }
        this.active = false;
    };
    NovoFileInputElement.prototype.writeValue = function (model) {
        this.model = model;
    };
    NovoFileInputElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoFileInputElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoFileInputElement.prototype.check = function (event) {
        this.process(Array.from(event.target.files));
    };
    NovoFileInputElement.prototype.validate = function (files) {
        var passedValidation = true;
        if (this.layoutOptions.customValidation) {
            this.layoutOptions.customValidation
                .filter(function (validation) { return validation.action === 'upload'; })
                .forEach(function (uploadValidation) {
                passedValidation = uploadValidation.fn(files) && passedValidation;
            });
        }
        return passedValidation;
    };
    NovoFileInputElement.prototype.process = function (filelist) {
        var _this = this;
        if (this.validate(filelist)) {
            Promise.all(filelist.map(function (file) { return _this.readFile(file); })).then(function (files) {
                var _a;
                if (_this.multiple) {
                    (_a = _this.files).push.apply(_a, __spread(files));
                }
                else {
                    _this.files = files;
                }
                _this.model = _this.files;
                _this.onModelChange(_this.model);
            });
        }
    };
    NovoFileInputElement.prototype.download = function (file) {
        window.open(file.dataURL, '_blank');
    };
    NovoFileInputElement.prototype.remove = function (file) {
        this.files.splice(this.files.findIndex(function (f) { return f.name === file.name && f.size === file.size; }), 1);
        this.model = this.files;
        this.onModelChange(this.model);
    };
    NovoFileInputElement.prototype.readFile = function (file) {
        return new NovoFile(file).read();
    };
    NovoFileInputElement.prototype.customEdit = function (file) {
        this.edit.emit(file);
    };
    NovoFileInputElement.prototype.customSave = function (file) {
        this.save.emit(file);
    };
    NovoFileInputElement.prototype.customDelete = function (file) {
        this.delete.emit(file);
    };
    NovoFileInputElement.prototype.customCheck = function (event) {
        this.upload.emit(event);
    };
    NovoFileInputElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoFileInputElement.ɵfac = function NovoFileInputElement_Factory(t) { return new (t || NovoFileInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(NovoDragulaService)); };
    NovoFileInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoFileInputElement, selectors: [["novo-file-input"]], viewQuery: function NovoFileInputElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(_c0$u, true);
            ɵɵstaticViewQuery(_c1$d, true);
            ɵɵstaticViewQuery(_c2$6, true, ViewContainerRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileInput = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.fileOutput = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
        } }, inputs: { name: "name", multiple: "multiple", disabled: "disabled", placeholder: "placeholder", layoutOptions: "layoutOptions", value: "value", dataFeatureId: "dataFeatureId" }, outputs: { edit: "edit", save: "save", delete: "delete", upload: "upload" }, features: [ɵɵProvidersFeature([FILE_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 6, vars: 0, consts: [["container", ""], ["fileInput", ""], ["fileOutput", ""], [1, "file-input-group"], ["type", "file", "tabindex", "-1", 3, "name", "change", 4, "ngIf"], [3, "ngSwitch"], ["class", "no-box", 4, "ngSwitchCase"], ["class", "boxed", 4, "ngSwitchDefault"], ["type", "file", "tabindex", "-1", 3, "name", "change"], [1, "no-box"], [1, "bhi-dropzone"], [1, "link"], [1, "boxed"], [1, "file-output-group", 3, "dragula", "dragulaModel"], ["class", "file-item", 3, "disabled", 4, "ngFor", "ngForOf"], [1, "file-item"], ["class", "bhi-move", 4, "ngIf"], [4, "ngIf"], ["class", "actions", 4, "ngIf"], [1, "bhi-move"], ["target", "_blank", 3, "href"], [1, "actions"], ["type", "button", "theme", "icon", "icon", "save", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "close", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "save", "tabindex", "-1", 3, "click"], ["type", "button", "theme", "icon", "icon", "close", "tabindex", "-1", 3, "click"], ["type", "button", "theme", "icon", "icon", "edit", "tabindex", "-1", 3, "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "edit", "tabindex", "-1", 3, "click"]], template: function NovoFileInputElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "div", null, 0);
            ɵɵtemplate(2, NovoFileInputElement_ng_template_2_Template, 6, 8, "ng-template", null, 1, ɵɵtemplateRefExtractor);
            ɵɵtemplate(4, NovoFileInputElement_ng_template_4_Template, 2, 3, "ng-template", null, 2, ɵɵtemplateRefExtractor);
        } }, directives: [NgIf, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoDragulaElement, NgForOf, NovoButtonElement, NovoLoadingElement], pipes: [DecodeURIPipe], encapsulation: 2 });
    return NovoFileInputElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFileInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-file-input',
                providers: [FILE_VALUE_ACCESSOR],
                template: "\n    <div #container></div>\n    <ng-template #fileInput>\n      <div class=\"file-input-group\" [class.disabled]=\"disabled\" [class.active]=\"active\">\n        <input\n          *ngIf=\"!layoutOptions.customActions\"\n          type=\"file\"\n          [name]=\"name\"\n          [attr.id]=\"name\"\n          (change)=\"check($event)\"\n          [attr.multiple]=\"multiple\"\n          tabindex=\"-1\"\n          [attr.data-feature-id]=\"dataFeatureId\"\n        />\n        <input\n          *ngIf=\"layoutOptions.customActions\"\n          type=\"file\"\n          [name]=\"name\"\n          [attr.id]=\"name\"\n          (change)=\"customCheck($event)\"\n          [attr.multiple]=\"multiple\"\n          tabindex=\"-1\"\n          [attr.data-feature-id]=\"dataFeatureId\"\n        />\n        <section [ngSwitch]=\"layoutOptions.labelStyle\">\n          <label *ngSwitchCase=\"'no-box'\" [attr.for]=\"name\" class=\"no-box\">\n            <div>\n              <i class=\"bhi-dropzone\"></i>{{ placeholder || labels.chooseAFile }} {{ labels.or }}\n              <strong class=\"link\">{{ labels.clickToBrowse }}</strong>\n            </div>\n          </label>\n          <label *ngSwitchDefault [attr.for]=\"name\" class=\"boxed\">\n            <span>{{ placeholder || labels.chooseAFile }}</span>\n            <small\n              >{{ labels.or }} <strong class=\"link\">{{ labels.clickToBrowse }}</strong></small\n            >\n          </label>\n        </section>\n      </div>\n    </ng-template>\n    <ng-template #fileOutput>\n      <div class=\"file-output-group\" [dragula]=\"fileOutputBag\" [dragulaModel]=\"files\">\n        <div class=\"file-item\" *ngFor=\"let file of files\" [class.disabled]=\"disabled\">\n          <i *ngIf=\"layoutOptions.draggable\" class=\"bhi-move\"></i>\n          <label *ngIf=\"file.link\"\n            ><span\n              ><a href=\"{{ file.link }}\" target=\"_blank\">{{ file.name | decodeURI }}</a></span\n            ><span *ngIf=\"file.description\">||</span><span>{{ file.description }}</span></label\n          >\n          <label *ngIf=\"!file.link\">{{ file.name | decodeURI }}</label>\n          <div class=\"actions\" [attr.data-automation-id]=\"'file-actions'\" *ngIf=\"file.loaded\">\n            <div *ngIf=\"!layoutOptions.customActions\">\n              <button\n                *ngIf=\"layoutOptions.download\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"save\"\n                (click)=\"download(file)\"\n                [attr.data-automation-id]=\"'file-download'\"\n                tabindex=\"-1\"\n              ></button>\n              <button\n                *ngIf=\"!disabled && (layoutOptions.removable || (!layoutOptions.removable && layoutOptions.removableWhenNew && !file.link))\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"close\"\n                (click)=\"remove(file)\"\n                [attr.data-automation-id]=\"'file-remove'\"\n                tabindex=\"-1\"\n              ></button>\n            </div>\n            <div *ngIf=\"layoutOptions.customActions\">\n              <button\n                *ngIf=\"layoutOptions.edit && !disabled\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"edit\"\n                (click)=\"customEdit(file)\"\n                [attr.data-automation-id]=\"'file-edit'\"\n                tabindex=\"-1\"\n              ></button>\n              <button\n                *ngIf=\"layoutOptions.download\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"save\"\n                (click)=\"customSave(file)\"\n                [attr.data-automation-id]=\"'file-download'\"\n                tabindex=\"-1\"\n              ></button>\n              <button\n                *ngIf=\"!disabled\"\n                type=\"button\"\n                theme=\"icon\"\n                icon=\"close\"\n                (click)=\"customDelete(file)\"\n                [attr.data-automation-id]=\"'file-remove'\"\n                tabindex=\"-1\"\n              ></button>\n            </div>\n          </div>\n          <novo-loading *ngIf=\"!file.loaded\"></novo-loading>\n        </div>\n      </div>\n    </ng-template>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: NovoDragulaService }]; }, { fileInput: [{
            type: ViewChild,
            args: ['fileInput', { static: true }]
        }], fileOutput: [{
            type: ViewChild,
            args: ['fileOutput', { static: true }]
        }], container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], name: [{
            type: Input
        }], multiple: [{
            type: Input
        }], disabled: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], layoutOptions: [{
            type: Input
        }], value: [{
            type: Input
        }], dataFeatureId: [{
            type: Input
        }], edit: [{
            type: Output
        }], save: [{
            type: Output
        }], delete: [{
            type: Output
        }], upload: [{
            type: Output
        }] }); })();

// NG2
var NovoFormExtrasModule = /** @class */ (function () {
    function NovoFormExtrasModule() {
    }
    NovoFormExtrasModule.ɵmod = ɵɵdefineNgModule({ type: NovoFormExtrasModule });
    NovoFormExtrasModule.ɵinj = ɵɵdefineInjector({ factory: function NovoFormExtrasModule_Factory(t) { return new (t || NovoFormExtrasModule)(); }, imports: [[
                CommonModule,
                FormsModule,
                NovoPipesModule,
                NovoButtonModule,
                NovoSelectModule,
                NovoPickerModule,
                NovoLoadingModule,
                NovoDragulaModule,
                NovoTooltipModule,
            ]] });
    return NovoFormExtrasModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoFormExtrasModule, { declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement], imports: [CommonModule,
        FormsModule,
        NovoPipesModule,
        NovoButtonModule,
        NovoSelectModule,
        NovoPickerModule,
        NovoLoadingModule,
        NovoDragulaModule,
        NovoTooltipModule], exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFormExtrasModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoLoadingModule,
                    NovoDragulaModule,
                    NovoTooltipModule,
                ],
                declarations: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
                exports: [NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement],
            }]
    }], null, null); })();

var _c0$v = function (a0, a1) { return { active: a0, disabled: a1 }; };
function NovoTilesElement_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 2);
    ɵɵlistener("click", function NovoTilesElement_div_1_Template_div_click_0_listener($event) { ɵɵrestoreView(_r4); var option_r1 = ctx.$implicit; var ctx_r3 = ɵɵnextContext(); return ctx_r3.select($event, option_r1); });
    ɵɵelementStart(1, "input", 3);
    ɵɵlistener("change", function NovoTilesElement_div_1_Template_input_change_1_listener($event) { ɵɵrestoreView(_r4); var option_r1 = ctx.$implicit; var ctx_r5 = ɵɵnextContext(); return ctx_r5.select($event, option_r1); })("focus", function NovoTilesElement_div_1_Template_input_focus_1_listener() { ɵɵrestoreView(_r4); var ctx_r6 = ɵɵnextContext(); return ctx_r6.setFocus(true); })("blur", function NovoTilesElement_div_1_Template_input_blur_1_listener() { ɵɵrestoreView(_r4); var ctx_r7 = ɵɵnextContext(); return ctx_r7.setFocus(false); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction2(9, _c0$v, option_r1.checked, option_r1.disabled));
    ɵɵattribute("data-automation-id", option_r1.label || option_r1);
    ɵɵadvance(1);
    ɵɵproperty("name", ctx_r0.name)("value", option_r1.checked || option_r1.value || option_r1)("disabled", ctx_r0.disabled);
    ɵɵattribute("id", ctx_r0.name + i_r2);
    ɵɵadvance(1);
    ɵɵattribute("for", ctx_r0.name + i_r2)("data-automation-id", option_r1.label || option_r1);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r1.label || option_r1, " ");
} }
// Value accessor for the component (supports ngModel)
var TILES_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoTilesElement; }),
    multi: true,
};
var NovoTilesElement = /** @class */ (function () {
    function NovoTilesElement(element, ref) {
        this.element = element;
        this.ref = ref;
        this.name = new Date().getTime().toString();
        this.disabled = false;
        this.onChange = new EventEmitter();
        this.onSelectedOptionClick = new EventEmitter();
        this.onDisabledOptionClick = new EventEmitter();
        this._options = [];
        this.activeTile = null;
        this.focused = false;
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    NovoTilesElement.prototype.setFocus = function (focus) {
        this.focused = focus;
    };
    NovoTilesElement.prototype.ngAfterContentInit = function () {
        this.name = this.name || '';
        this.setupOptions();
    };
    NovoTilesElement.prototype.ngOnChanges = function (change) {
        if (change['options'] && change['options'].currentValue && !change['options'].firstChange) {
            this.name = this.name || '';
            this._options = [];
            this.setupOptions();
        }
    };
    NovoTilesElement.prototype.setupOptions = function () {
        var _this = this;
        if (this.options && this.options.length && (this.options[0].value === undefined || this.options[0].value === null)) {
            this._options = this.options.map(function (x) {
                var item = { value: x, label: x, checked: _this.model === x };
                if (item.checked) {
                    _this.setTile(item);
                }
                return item;
            });
        }
        else {
            this._options = this.options.map(function (x) {
                x.checked = _this.model === x.value || (_this.model && _this.model.id === x.value);
                if (x.checked) {
                    _this.setTile(x);
                }
                return x;
            });
        }
        this.ref.markForCheck();
    };
    NovoTilesElement.prototype.select = function (event, item) {
        var e_1, _a;
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (!item.disabled) {
            if (item.checked) {
                this.onSelectedOptionClick.emit(item);
                return;
            }
            try {
                for (var _b = __values(this._options), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var option = _c.value;
                    option.checked = false;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            item.checked = !item.checked;
            this.onChange.emit(item.value);
            this.onModelChange(item.value);
            this.setTile(item);
            this.model = item.value;
        }
        else {
            this.onDisabledOptionClick.emit(item);
        }
        this.ref.markForCheck();
    };
    NovoTilesElement.prototype.setTile = function (item) {
        if (item) {
            this.activeTile = item.value;
            this.ref.markForCheck();
        }
    };
    NovoTilesElement.prototype.writeValue = function (model) {
        this.model = model;
        if (!Helpers.isBlank(model)) {
            this.setupOptions();
        }
    };
    NovoTilesElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoTilesElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoTilesElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoTilesElement.ɵfac = function NovoTilesElement_Factory(t) { return new (t || NovoTilesElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoTilesElement.ɵcmp = ɵɵdefineComponent({ type: NovoTilesElement, selectors: [["novo-tiles"]], inputs: { name: "name", options: "options", required: "required", disabled: ["controlDisabled", "disabled"] }, outputs: { onChange: "onChange", onSelectedOptionClick: "onSelectedOptionClick", onDisabledOptionClick: "onDisabledOptionClick" }, features: [ɵɵProvidersFeature([TILES_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 2, vars: 5, consts: [[1, "tile-container"], ["class", "tile", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "tile", 3, "ngClass", "click"], ["type", "radio", 1, "tiles-input", 3, "name", "value", "disabled", "change", "focus", "blur"]], template: function NovoTilesElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, NovoTilesElement_div_1_Template, 4, 12, "div", 1);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("active", ctx.focused)("disabled", ctx.disabled);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx._options);
        } }, directives: [NgForOf, NgClass], encapsulation: 2, changeDetection: 0 });
    return NovoTilesElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTilesElement, [{
        type: Component,
        args: [{
                selector: 'novo-tiles',
                providers: [TILES_VALUE_ACCESSOR],
                template: "\n    <div class=\"tile-container\" [class.active]=\"focused\" [class.disabled]=\"disabled\">\n      <div\n        class=\"tile\"\n        *ngFor=\"let option of _options; let i = index\"\n        [ngClass]=\"{ active: option.checked, disabled: option.disabled }\"\n        (click)=\"select($event, option)\"\n        [attr.data-automation-id]=\"option.label || option\"\n      >\n        <input\n          class=\"tiles-input\"\n          [name]=\"name\"\n          type=\"radio\"\n          [value]=\"option.checked || option.value || option\"\n          [attr.id]=\"name + i\"\n          (change)=\"select($event, option)\"\n          (focus)=\"setFocus(true)\"\n          (blur)=\"setFocus(false)\"\n          [disabled]=\"disabled\"\n        />\n        <label [attr.for]=\"name + i\" [attr.data-automation-id]=\"option.label || option\">\n          {{ option.label || option }}\n        </label>\n      </div>\n    </div>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], options: [{
            type: Input
        }], required: [{
            type: Input
        }], disabled: [{
            type: Input,
            args: ['controlDisabled']
        }], onChange: [{
            type: Output
        }], onSelectedOptionClick: [{
            type: Output
        }], onDisabledOptionClick: [{
            type: Output
        }] }); })();

// NG2
var NovoTilesModule = /** @class */ (function () {
    function NovoTilesModule() {
    }
    NovoTilesModule.ɵmod = ɵɵdefineNgModule({ type: NovoTilesModule });
    NovoTilesModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTilesModule_Factory(t) { return new (t || NovoTilesModule)(); }, imports: [[CommonModule, ReactiveFormsModule]] });
    return NovoTilesModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTilesModule, { declarations: [NovoTilesElement], imports: [CommonModule, ReactiveFormsModule], exports: [NovoTilesElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTilesModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, ReactiveFormsModule],
                declarations: [NovoTilesElement],
                exports: [NovoTilesElement],
            }]
    }], null, null); })();

// NG2
var _c0$w = ["input"];
var _c1$e = ["*"];
// Value accessor for the component (supports ngModel)
var SEARCH_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoSearchBoxElement; }),
    multi: true,
};
var NovoSearchBoxElement = /** @class */ (function () {
    function NovoSearchBoxElement(element, labels, _changeDetectorRef, _zone) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this._zone = _zone;
        this.icon = 'search';
        this.placeholder = 'Search...';
        this.alwaysOpen = false;
        this.theme = 'positive';
        this.closeOnSelect = true;
        this.searchChanged = new EventEmitter();
        this.focused = false;
        /** View -> model callback called when value changes */
        this._onChange = function () { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = function () { };
    }
    /**
     * @name showFasterFind
     * @description This function shows the picker and adds the active class (for animation)
     */
    NovoSearchBoxElement.prototype.showSearch = function (event, forceClose) {
        var _this = this;
        if (forceClose === void 0) { forceClose = false; }
        if (!this.panelOpen) {
            // Reset search
            // Set focus on search
            setTimeout(function () {
                var element = _this.input.nativeElement;
                if (element) {
                    element.focus();
                }
            }, 10);
        }
    };
    NovoSearchBoxElement.prototype.onFocus = function () {
        var _this = this;
        this._zone.run(function () {
            _this.focused = true;
            _this.openPanel();
        });
    };
    NovoSearchBoxElement.prototype.onBlur = function () {
        this.focused = false;
    };
    /** BEGIN: Convenient Panel Methods. */
    NovoSearchBoxElement.prototype.openPanel = function () {
        this.overlay.openPanel();
    };
    NovoSearchBoxElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoSearchBoxElement.prototype, "panelOpen", {
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSearchBoxElement.prototype, "active", {
        get: function () {
            return this.panelOpen || this.alwaysOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    NovoSearchBoxElement.prototype._handleKeydown = function (event) {
        if ((event.keyCode === ESCAPE || event.keyCode === ENTER || event.keyCode === TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
        }
    };
    NovoSearchBoxElement.prototype._handleInput = function (event) {
        var _this = this;
        if (document.activeElement === event.target) {
            this._onChange(event.target.value);
            if (this.debounceSearchChange) {
                clearTimeout(this.debounceSearchChange);
            }
            this.debounceSearchChange = setTimeout(function () {
                _this.searchChanged.emit(event.target.value);
            }, 400);
        }
    };
    NovoSearchBoxElement.prototype.writeValue = function (value) {
        this._setValue(value);
    };
    NovoSearchBoxElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoSearchBoxElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoSearchBoxElement.prototype._setValue = function (value) {
        this.value = value;
        var toDisplay = value;
        if (value && this.displayField) {
            toDisplay = value.hasOwnProperty(this.displayField) ? value[this.displayField] : value;
        }
        // Simply falling back to an empty string if the display value is falsy does not work properly.
        // The display value can also be the number zero and shouldn't fall back to an empty string.
        this.displayValue = toDisplay ? toDisplay : '';
        this.input.nativeElement.value = this.displayValue;
        this._changeDetectorRef.markForCheck();
    };
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    NovoSearchBoxElement.prototype.setValueAndClose = function (event) {
        if (event && event.value) {
            this._setValue(event.value);
            this._onChange(event.value);
        }
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    NovoSearchBoxElement.prototype.clearValue = function (skip) {
        this.writeValue(null);
        this._onChange(null);
    };
    NovoSearchBoxElement.ɵfac = function NovoSearchBoxElement_Factory(t) { return new (t || NovoSearchBoxElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NgZone)); };
    NovoSearchBoxElement.ɵcmp = ɵɵdefineComponent({ type: NovoSearchBoxElement, selectors: [["novo-search"]], viewQuery: function NovoSearchBoxElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoOverlayTemplateComponent, true);
            ɵɵstaticViewQuery(_c0$w, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
        } }, hostVars: 4, hostBindings: function NovoSearchBoxElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("focused", ctx.focused)("active", ctx.active);
        } }, inputs: { name: "name", icon: "icon", placeholder: "placeholder", alwaysOpen: "alwaysOpen", theme: "theme", closeOnSelect: "closeOnSelect", displayField: "displayField", displayValue: "displayValue", hint: "hint" }, outputs: { searchChanged: "searchChanged" }, features: [ɵɵProvidersFeature([SEARCH_VALUE_ACCESSOR])], ngContentSelectors: _c1$e, decls: 5, vars: 8, consts: [["theme", "fab", "tooltipPosition", "bottom", "data-automation-id", "novo-search-fab", 3, "color", "icon", "tooltip", "click"], ["type", "text", "data-automation-id", "novo-search-input", 3, "focus", "blur", "keydown", "input"], ["input", ""], ["position", "above-below", 3, "parent", "closeOnSelect", "select", "closing"]], template: function NovoSearchBoxElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "button", 0);
            ɵɵlistener("click", function NovoSearchBoxElement_Template_button_click_0_listener() { return ctx.showSearch(); });
            ɵɵelementEnd();
            ɵɵelementStart(1, "input", 1, 2);
            ɵɵlistener("focus", function NovoSearchBoxElement_Template_input_focus_1_listener() { return ctx.onFocus(); })("blur", function NovoSearchBoxElement_Template_input_blur_1_listener() { return ctx.onBlur(); })("keydown", function NovoSearchBoxElement_Template_input_keydown_1_listener($event) { return ctx._handleKeydown($event); })("input", function NovoSearchBoxElement_Template_input_input_1_listener($event) { return ctx._handleInput($event); });
            ɵɵelementEnd();
            ɵɵelementStart(3, "novo-overlay-template", 3);
            ɵɵlistener("select", function NovoSearchBoxElement_Template_novo_overlay_template_select_3_listener() { return ctx.closePanel(); })("closing", function NovoSearchBoxElement_Template_novo_overlay_template_closing_3_listener() { return ctx.onBlur(); });
            ɵɵprojection(4);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("color", ctx.theme)("icon", ctx.icon)("tooltip", ctx.hint);
            ɵɵadvance(1);
            ɵɵattribute("name", ctx.name)("value", ctx.displayValue)("placeholder", ctx.placeholder);
            ɵɵadvance(2);
            ɵɵproperty("parent", ctx.element)("closeOnSelect", ctx.closeOnSelect);
        } }, directives: [NovoButtonElement, TooltipDirective, NovoOverlayTemplateComponent], encapsulation: 2, changeDetection: 0 });
    return NovoSearchBoxElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSearchBoxElement, [{
        type: Component,
        args: [{
                selector: 'novo-search',
                providers: [SEARCH_VALUE_ACCESSOR],
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n    <!-- SEARCH ICON -->\n    <button\n      theme=\"fab\"\n      [color]=\"theme\"\n      [icon]=\"icon\"\n      (click)=\"showSearch()\"\n      [tooltip]=\"hint\"\n      tooltipPosition=\"bottom\"\n      data-automation-id=\"novo-search-fab\"\n    ></button>\n    <!-- SEARCH INPUT -->\n    <input\n      type=\"text\"\n      [attr.name]=\"name\"\n      [attr.value]=\"displayValue\"\n      [attr.placeholder]=\"placeholder\"\n      (focus)=\"onFocus()\"\n      (blur)=\"onBlur()\"\n      (keydown)=\"_handleKeydown($event)\"\n      (input)=\"_handleInput($event)\"\n      #input\n      data-automation-id=\"novo-search-input\"\n    />\n    <!-- SEARCH OVERLAY -->\n    <novo-overlay-template\n      [parent]=\"element\"\n      [closeOnSelect]=\"closeOnSelect\"\n      position=\"above-below\"\n      (select)=\"closePanel()\"\n      (closing)=\"onBlur()\"\n    >\n      <ng-content></ng-content>\n    </novo-overlay-template>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: NgZone }]; }, { name: [{
            type: Input
        }], icon: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], alwaysOpen: [{
            type: Input
        }], theme: [{
            type: Input
        }], closeOnSelect: [{
            type: Input
        }], displayField: [{
            type: Input
        }], displayValue: [{
            type: Input
        }], hint: [{
            type: Input
        }], searchChanged: [{
            type: Output
        }], focused: [{
            type: HostBinding,
            args: ['class.focused']
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }], input: [{
            type: ViewChild,
            args: ['input', { static: true }]
        }], active: [{
            type: HostBinding,
            args: ['class.active']
        }] }); })();

// NG2
var NovoSearchBoxModule = /** @class */ (function () {
    function NovoSearchBoxModule() {
    }
    NovoSearchBoxModule.ɵmod = ɵɵdefineNgModule({ type: NovoSearchBoxModule });
    NovoSearchBoxModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSearchBoxModule_Factory(t) { return new (t || NovoSearchBoxModule)(); }, imports: [[CommonModule, NovoButtonModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule]] });
    return NovoSearchBoxModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSearchBoxModule, { declarations: [NovoSearchBoxElement], imports: [CommonModule, NovoButtonModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule], exports: [NovoSearchBoxElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSearchBoxModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule, NovoPickerModule, NovoTooltipModule, NovoOverlayModule],
                declarations: [NovoSearchBoxElement],
                exports: [NovoSearchBoxElement],
            }]
    }], null, null); })();

function NovoDatePickerElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 17);
    ɵɵelementStart(1, "h4", 18);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "h2", 19);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "h1", 20);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementStart(7, "h3", 21);
    ɵɵtext(8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.day);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.day);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.month);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.month);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.date);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.date);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", ctx_r0.heading == null ? null : ctx_r0.heading.year);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.heading == null ? null : ctx_r0.heading.year);
} }
function NovoDatePickerElement_div_2_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 22);
    ɵɵelementStart(1, "span", 23);
    ɵɵlistener("click", function NovoDatePickerElement_div_2_Template_span_click_1_listener() { ɵɵrestoreView(_r7); var ctx_r6 = ɵɵnextContext(); return ctx_r6.toggleRangeSelect("startDate"); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 24);
    ɵɵlistener("click", function NovoDatePickerElement_div_2_Template_span_click_3_listener() { ɵɵrestoreView(_r7); var ctx_r8 = ɵɵnextContext(); return ctx_r8.toggleRangeSelect("endDate"); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelement(5, "i", 25);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("week-select-mode", ctx_r1.weekRangeSelect);
    ɵɵadvance(1);
    ɵɵproperty("@startDateTextState", ctx_r1.rangeSelectMode);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.selectedLabel);
    ɵɵadvance(1);
    ɵɵproperty("@endDateTextState", ctx_r1.rangeSelectMode);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.selected2Label);
    ɵɵadvance(1);
    ɵɵproperty("@indicatorState", ctx_r1.rangeSelectMode);
} }
function NovoDatePickerElement_th_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "th", 26);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var day_r9 = ctx.$implicit;
    ɵɵpropertyInterpolate("title", day_r9);
    ɵɵattribute("data-automation-id", day_r9.substr(0, 2));
    ɵɵadvance(1);
    ɵɵtextInterpolate(day_r9.substr(0, 2));
} }
var _c0$x = function (a0, a1, a2, a3, a4, a5, a6) { return { today: a0, "notinmonth": a1, selected: a2, filler: a3, startfill: a4, endfill: a5, "selecting-range": a6 }; };
function NovoDatePickerElement_tr_16_td_1_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "td", 28);
    ɵɵlistener("mouseover", function NovoDatePickerElement_tr_16_td_1_Template_td_mouseover_0_listener($event) { ɵɵrestoreView(_r14); var day_r12 = ctx.$implicit; var ctx_r13 = ɵɵnextContext(2); return ctx_r13.rangeHover($event, day_r12); });
    ɵɵelementStart(1, "button", 29);
    ɵɵlistener("click", function NovoDatePickerElement_tr_16_td_1_Template_button_click_1_listener($event) { ɵɵrestoreView(_r14); var day_r12 = ctx.$implicit; var ctx_r15 = ɵɵnextContext(2); return ctx_r15.select($event, day_r12, true); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var day_r12 = ctx.$implicit;
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction7(5, _c0$x, day_r12.isToday, day_r12.date.getMonth() !== ctx_r11.month.getMonth(), ctx_r11.isSelected(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isFiller(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isStartFill(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isEndFill(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2), ctx_r11.isSelectingRange(ctx_r11.range, day_r12.date, ctx_r11.selected, ctx_r11.selected2, ctx_r11.hoverDay, ctx_r11.rangeSelectMode, ctx_r11.weekRangeSelect)));
    ɵɵattribute("data-automation-id", day_r12.number);
    ɵɵadvance(1);
    ɵɵproperty("disabled", ctx_r11.isDisabled(day_r12.date, ctx_r11.start, ctx_r11.end));
    ɵɵattribute("data-automation-id", day_r12.number);
    ɵɵadvance(1);
    ɵɵtextInterpolate(day_r12.number);
} }
function NovoDatePickerElement_tr_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tr");
    ɵɵtemplate(1, NovoDatePickerElement_tr_16_td_1_Template, 3, 13, "td", 27);
    ɵɵelementEnd();
} if (rf & 2) {
    var week_r10 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", week_r10.days);
} }
var _c1$f = function (a0) { return { selected: a0 }; };
function NovoDatePickerElement_div_18_Template(rf, ctx) { if (rf & 1) {
    var _r19 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 30);
    ɵɵlistener("click", function NovoDatePickerElement_div_18_Template_div_click_0_listener() { ɵɵrestoreView(_r19); var i_r17 = ctx.index; var ctx_r18 = ɵɵnextContext(); return ctx_r18.setMonth(i_r17); });
    ɵɵelementStart(1, "div", 31);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var month_r16 = ctx.$implicit;
    var i_r17 = ctx.index;
    var ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c1$f, i_r17 === (ctx_r4.selected == null ? null : ctx_r4.selected.getMonth())));
    ɵɵattribute("data-automation-id", month_r16);
    ɵɵadvance(1);
    ɵɵtextInterpolate(month_r16);
} }
function NovoDatePickerElement_div_20_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 30);
    ɵɵlistener("click", function NovoDatePickerElement_div_20_Template_div_click_0_listener() { ɵɵrestoreView(_r22); var year_r20 = ctx.$implicit; var ctx_r21 = ɵɵnextContext(); return ctx_r21.setYear(year_r20); });
    ɵɵelementStart(1, "div", 32);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var year_r20 = ctx.$implicit;
    var ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c1$f, year_r20 == (ctx_r5.selected == null ? null : ctx_r5.selected.getFullYear())));
    ɵɵattribute("data-automation-id", year_r20);
    ɵɵadvance(1);
    ɵɵtextInterpolate(year_r20);
} }
// Value accessor for the component (supports ngModel)
var DATE_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDatePickerElement; }),
    multi: true,
};
var NovoDatePickerElement = /** @class */ (function () {
    function NovoDatePickerElement(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        // List of all the weekdays
        this.weekdays = [];
        // List of all months
        this.months = [];
        // List of all years (generated in ngOnInit)
        this.years = [];
        // Default view mode (select days)
        this.view = 'days';
        this.rangeSelectMode = 'startDate';
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    NovoDatePickerElement.prototype.ngOnInit = function () {
        // Determine the year array
        var now = new Date();
        var start = this.minYear ? Number(this.minYear) : now.getFullYear() - 100;
        var end = this.maxYear ? Number(this.maxYear) : now.getFullYear() + 10;
        for (var i = start; i <= end; i++) {
            this.years.push(i);
        }
        // Set weekdays / months
        this.weekdays = this.setupWeekdays();
        this.months = this.labels.getMonths();
        // Set labels
        this.selectedLabel = this.labels.startDate;
        this.selected2Label = this.labels.endDate;
        this.updateView(this.model, false, true);
    };
    NovoDatePickerElement.prototype.ngOnChanges = function (changes) {
        var weekRangeSelectChange = changes['weekRangeSelect'];
        if (weekRangeSelectChange &&
            weekRangeSelectChange.currentValue !== weekRangeSelectChange.previousValue &&
            !weekRangeSelectChange.firstChange) {
            this.clearRange();
        }
        var weekStartChanges = changes['weekStart'];
        if (weekStartChanges && weekStartChanges.currentValue !== weekStartChanges.previousValue && !weekStartChanges.firstChange) {
            this.weekdays = this.setupWeekdays();
            this.updateView(this.model, false, false);
        }
    };
    NovoDatePickerElement.prototype.setupWeekdays = function () {
        var weekdays = this.labels.getWeekdays();
        // Weekstart must be 0-6 (Sunday - Saturday)
        if (!Helpers.isBlank(this.weekStart) && this.weekStart > 0 && this.weekStart <= 6) {
            var newStart = weekdays.splice(this.weekStart);
            weekdays = __spread(newStart, weekdays);
        }
        return weekdays;
    };
    NovoDatePickerElement.prototype.isSelectingRange = function (range, day, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect) {
        if (range && !weekRangeSelect) {
            var isRangeModeEndDate = rangeSelectMode === 'endDate' && (selected && selected2 && isAfter(day, selected2) && isBefore(day, hoverDay));
            var isRangeModeStartDate = rangeSelectMode === 'startDate' && (selected && selected2 && isBefore(day, selected) && isAfter(day, hoverDay));
            var isNotSelected = !selected && selected2 && isBefore(day, selected2) && isAfter(day, hoverDay);
            var isNotSelected2 = selected && !selected2 && isAfter(day, selected) && isBefore(day, hoverDay);
            return isNotSelected2 || isNotSelected || isRangeModeStartDate || isRangeModeEndDate;
        }
        return false;
    };
    NovoDatePickerElement.prototype.isEndFill = function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !isSameDay(selected, selected2) && isSameDay(day, selected2) && isAfter(day, selected);
        }
        return false;
    };
    NovoDatePickerElement.prototype.isStartFill = function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return !isSameDay(selected, selected2) && isSameDay(day, selected) && isBefore(day, selected2);
        }
        return false;
    };
    NovoDatePickerElement.prototype.isFiller = function (range, day, selected, selected2) {
        if (range && selected2 && selected) {
            return ((isAfter(day, selected) && isBefore(day, selected2)) ||
                isSameDay(day, selected) ||
                isSameDay(day, selected2));
        }
        return false;
    };
    NovoDatePickerElement.prototype.isSelected = function (range, day, selected, selected2) {
        if (range) {
            return (day &&
                ((selected &&
                    (day.getDate() === selected.getDate() &&
                        day.getMonth() === selected.getMonth() &&
                        day.getFullYear() === selected.getFullYear())) ||
                    (selected2 &&
                        (day.getDate() === selected2.getDate() &&
                            day.getMonth() === selected2.getMonth() &&
                            day.getFullYear() === selected2.getFullYear()))));
        }
        return day.getDate() === selected.getDate() && day.getMonth() === selected.getMonth() && day.getFullYear() === selected.getFullYear();
    };
    NovoDatePickerElement.prototype.isDisabled = function (day, start, end) {
        return isBefore(day, start) || isAfter(day, end);
    };
    NovoDatePickerElement.prototype.updateView = function (date, fireEvents, markedSelected) {
        if (date && date.startDate === null) {
            this.clearRange();
        }
        else {
            if (!date) {
                this.clearRange();
            }
            var value = date ? new Date(date) : new Date();
            value = this.removeTime(value);
            this.month = new Date(value);
            this.monthLabel = this.labels.formatDateWithFormat(this.month, { month: 'short' });
            var start = new Date(value.getTime());
            start.setDate(1);
            this.removeTime(start.setDate(1));
            this.buildMonth(start, this.month);
            if (markedSelected) {
                this.select(null, { date: value }, fireEvents);
            }
        }
    };
    NovoDatePickerElement.prototype.setToday = function () {
        var tmp = new Date();
        this.updateView(tmp, true, true);
        // Go back to days
        this.open(null, 'days');
    };
    NovoDatePickerElement.prototype.clearRange = function () {
        this.selected = null;
        this.selectedLabel = this.labels.startDate;
        this.selected2 = null;
        this.selected2Label = this.labels.endDate;
    };
    NovoDatePickerElement.prototype.setMonth = function (month) {
        var date = this.month ? this.month : new Date();
        var tmp = setMonth(date, month);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    };
    NovoDatePickerElement.prototype.setYear = function (year) {
        var date = this.month ? this.month : new Date();
        var tmp = setYear(date, year);
        this.updateView(tmp, true, false);
        // Go back to days
        this.open(null, 'days');
    };
    NovoDatePickerElement.prototype.select = function (event, day, fireEvents) {
        Helpers.swallowEvent(event);
        if (this.range) {
            if (this.weekRangeSelect) {
                this.selected = startOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selected2 = endOfWeek(day.date, { weekStartsOn: this.weekStart });
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                // Make sure to fire this, since we default to the current week selected!
                if (!fireEvents && this.weekRangeSelect) {
                    this.fireRangeSelect();
                }
            }
            else if (this.rangeSelectMode === 'startDate') {
                // SET START DATE
                this.selected = startOfDay(day.date);
                this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected2 && isAfter(day.date, this.selected2)) {
                    // CLEAR END DATE
                    this.selected2 = null;
                    this.selected2Label = this.labels.endDate;
                }
                if (event) {
                    this.rangeSelectMode = 'endDate';
                }
            }
            else if (this.rangeSelectMode === 'endDate') {
                // SET END DATE
                this.selected2 = endOfDay(day.date);
                this.selected2Label = this.labels.formatDateWithFormat(this.selected2, {
                    month: 'short',
                    day: '2-digit',
                    year: 'numeric',
                });
                if (this.selected && isBefore(day.date, this.selected)) {
                    // CLEAR START DATE
                    this.selected = null;
                    this.selectedLabel = this.labels.startDate;
                }
                if (event) {
                    this.rangeSelectMode = 'startDate';
                }
            }
        }
        else {
            this.selected = day.date;
            this.selectedLabel = this.labels.formatDateWithFormat(this.selected, {
                month: 'short',
                day: '2-digit',
                year: 'numeric',
            });
            this.updateHeading();
        }
        if (fireEvents && this.selected) {
            // Emit our output
            if (this.range && this.selected && this.selected2) {
                this.fireRangeSelect();
                // Also, update the ngModel
                this._onChange({
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                });
                this.model = {
                    startDate: this.selected,
                    endDate: this.selected2 ? this.selected2 : null,
                };
            }
            if (!this.range) {
                this.onSelect.next({
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                });
                // Also, update the ngModel
                this._onChange(this.selected);
                this.model = this.selected;
            }
        }
    };
    NovoDatePickerElement.prototype.fireRangeSelect = function () {
        // Make sure the start date is before the end date
        if (isBefore(this.selected, this.selected2)) {
            this.onSelect.next({
                startDate: {
                    month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
                    year: this.selected.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
                    date: this.selected,
                },
                endDate: {
                    month: this.labels.formatDateWithFormat(this.selected2, { month: 'long' }),
                    year: this.selected2.getFullYear(),
                    day: this.labels.formatDateWithFormat(this.selected2, { weekday: 'long' }),
                    date: this.selected2,
                },
            });
        }
    };
    NovoDatePickerElement.prototype.open = function (event, type) {
        var _this = this;
        Helpers.swallowEvent(event);
        // If they click the toggle two time in a row, close it (go back to days)
        if (type === this.view) {
            this.view = 'days';
        }
        else {
            this.view = type;
        }
        // Make sure to scroll the selected one into view
        if (this.view === 'years' || this.view === 'months') {
            setTimeout(function () {
                var container = _this.element.nativeElement.querySelector(".calendar-content." + _this.view);
                var selectedItem = _this.element.nativeElement.querySelector(".calendar-content." + _this.view + " ." + (_this.view === 'years' ? 'year' : 'month') + ".selected");
                if (container && selectedItem) {
                    container.scrollTop = selectedItem.offsetTop - 100;
                }
            });
        }
        this.updateHeading();
    };
    NovoDatePickerElement.prototype.prevMonth = function (event) {
        Helpers.swallowEvent(event);
        var tmp = subMonths(this.month, 1);
        this.updateView(tmp, false, false);
    };
    NovoDatePickerElement.prototype.nextMonth = function (event) {
        Helpers.swallowEvent(event);
        var tmp = addMonths(this.month, 1);
        this.updateView(tmp, false, false);
    };
    NovoDatePickerElement.prototype.updateHeading = function () {
        if (!this.selected) {
            return;
        }
        this.heading = {
            month: this.labels.formatDateWithFormat(this.selected, { month: 'long' }),
            year: this.selected.getFullYear(),
            day: this.labels.formatDateWithFormat(this.selected, { weekday: 'long' }),
            date: this.selected.getDate(),
        };
    };
    /**
     * Remove the time aspect of the date
     * @returns with time stripped out
     */
    NovoDatePickerElement.prototype.removeTime = function (date) {
        var ret = new Date(date);
        ret.setHours(12);
        ret.setSeconds(0);
        ret.setMilliseconds(0);
        return ret;
    };
    NovoDatePickerElement.prototype.buildMonth = function (start, month) {
        // Reset the weeks
        this.weeks = [];
        // House keeping variables to know when we are done building the month
        var done = false;
        var date = startOfWeek(start, { weekStartsOn: this.weekStart });
        var monthIndex = date.getMonth();
        var count = 0;
        while (!done) {
            // Build the days for the weeks
            this.weeks.push({ days: this.buildWeek(new Date(date.getTime()), month) });
            // Increment variables for the next iteration
            date = addDays(date, 7);
            done = count++ > 2 && monthIndex !== date.getMonth();
            monthIndex = date.getMonth();
        }
    };
    NovoDatePickerElement.prototype.buildWeek = function (date, month) {
        // Build out of the days of the week
        var days = [];
        // Iterate over the days of the week
        for (var i = 0; i < 7; i++) {
            // Push a variable on the day array with lots of helpers to make the template easier
            days.push({
                name: this.weekdays[i],
                number: date.getDate(),
                isToday: isToday(date),
                date: date,
            });
            // Increment for the next iteration
            date = addDays(date, 1);
        }
        return days;
    };
    NovoDatePickerElement.prototype.toggleRangeSelect = function (range) {
        this.rangeSelectMode = range;
    };
    NovoDatePickerElement.prototype.rangeHover = function (event, day) {
        this.hoverDay = day.date;
    };
    // ValueAccessor Functions
    NovoDatePickerElement.prototype.writeValue = function (model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.updateView(model, false, true);
        }
    };
    NovoDatePickerElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoDatePickerElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoDatePickerElement.ɵfac = function NovoDatePickerElement_Factory(t) { return new (t || NovoDatePickerElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ElementRef)); };
    NovoDatePickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoDatePickerElement, selectors: [["novo-date-picker"]], inputs: { minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", inline: "inline", range: "range", weekRangeSelect: "weekRangeSelect", weekStart: "weekStart" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([DATE_PICKER_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 24, vars: 12, consts: [[1, "calendar"], ["class", "calendar-top", 4, "ngIf"], ["class", "date-range-tabs", 3, "week-select-mode", 4, "ngIf"], [1, "calendar-header"], ["data-automation-id", "calendar-previous", 1, "previous", 3, "click"], [1, "heading"], ["data-automation-id", "header-month", 1, "month", 3, "click"], ["data-automation-id", "header-year", 1, "year", 3, "click"], ["data-automation-id", "calendar-next", 1, "next", 3, "click"], ["cellspacing", "0", "cellpadding", "0", 1, "calendar-content", "days", 3, "hidden"], ["class", "weekday", 3, "title", 4, "ngFor", "ngForOf"], [4, "ngFor", "ngForOf"], [1, "calendar-content", "months", 3, "hidden"], [3, "click", 4, "ngFor", "ngForOf"], [1, "calendar-content", "years", 3, "hidden"], [1, "calendar-footer"], ["data-automation-id", "calendar-today", 1, "today", 3, "click"], [1, "calendar-top"], [1, "day"], [1, "month"], [1, "date"], [1, "year"], [1, "date-range-tabs"], ["data-automation-id", "calendar-start-date", 1, "range-tab", 3, "click"], ["data-automation-id", "calendar-end-date", 1, "range-tab", 3, "click"], [1, "indicator"], [1, "weekday", 3, "title"], [3, "ngClass", "mouseover", 4, "ngFor", "ngForOf"], [3, "ngClass", "mouseover"], [1, "day", 3, "disabled", "click"], [3, "click"], [1, "month", 3, "ngClass"], [1, "year", 3, "ngClass"]], template: function NovoDatePickerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, NovoDatePickerElement_div_1_Template, 9, 8, "div", 1);
            ɵɵtemplate(2, NovoDatePickerElement_div_2_Template, 6, 7, "div", 2);
            ɵɵelementStart(3, "div", 3);
            ɵɵelementStart(4, "span", 4);
            ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_4_listener($event) { return ctx.prevMonth($event); });
            ɵɵelementEnd();
            ɵɵelementStart(5, "span", 5);
            ɵɵelementStart(6, "span", 6);
            ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_6_listener($event) { return ctx.open($event, "months"); });
            ɵɵtext(7);
            ɵɵelementEnd();
            ɵɵelementStart(8, "span", 7);
            ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_8_listener($event) { return ctx.open($event, "years"); });
            ɵɵtext(9);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(10, "span", 8);
            ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_10_listener($event) { return ctx.nextMonth($event); });
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(11, "table", 9);
            ɵɵelementStart(12, "thead");
            ɵɵelementStart(13, "tr");
            ɵɵtemplate(14, NovoDatePickerElement_th_14_Template, 2, 3, "th", 10);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(15, "tbody");
            ɵɵtemplate(16, NovoDatePickerElement_tr_16_Template, 2, 1, "tr", 11);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(17, "section", 12);
            ɵɵtemplate(18, NovoDatePickerElement_div_18_Template, 3, 5, "div", 13);
            ɵɵelementEnd();
            ɵɵelementStart(19, "section", 14);
            ɵɵtemplate(20, NovoDatePickerElement_div_20_Template, 3, 5, "div", 13);
            ɵɵelementEnd();
            ɵɵelementStart(21, "div", 15);
            ɵɵelementStart(22, "span", 16);
            ɵɵlistener("click", function NovoDatePickerElement_Template_span_click_22_listener() { return ctx.setToday(); });
            ɵɵtext(23);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.inline && !ctx.range);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.range);
            ɵɵadvance(5);
            ɵɵtextInterpolate(ctx.monthLabel);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.month == null ? null : ctx.month.getFullYear());
            ɵɵadvance(2);
            ɵɵproperty("hidden", !(ctx.view == "days"));
            ɵɵadvance(3);
            ɵɵproperty("ngForOf", ctx.weekdays);
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx.weeks);
            ɵɵadvance(1);
            ɵɵproperty("hidden", ctx.view !== "months");
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.months);
            ɵɵadvance(1);
            ɵɵproperty("hidden", ctx.view !== "years");
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.years);
            ɵɵadvance(3);
            ɵɵtextInterpolate(ctx.labels.today);
        } }, directives: [NgIf, NgForOf, NgClass], encapsulation: 2, data: { animation: [
                trigger('startDateTextState', [
                    state('startDate', style({
                        opacity: '1.0',
                    })),
                    state('endDate', style({
                        opacity: '0.6',
                    })),
                    transition('startDate <=> endDate', animate('200ms ease-in')),
                ]),
                trigger('endDateTextState', [
                    state('startDate', style({
                        opacity: '0.6',
                    })),
                    state('endDate', style({
                        opacity: '1.0',
                    })),
                    transition('startDate <=> endDate', animate('200ms ease-in')),
                ]),
                trigger('indicatorState', [
                    state('startDate', style({
                        transform: 'translateX(0%)',
                    })),
                    state('endDate', style({
                        transform: 'translateX(100%)',
                    })),
                    transition('startDate <=> endDate', animate('200ms ease-in')),
                ]),
            ] } });
    return NovoDatePickerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDatePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-picker',
                providers: [DATE_PICKER_VALUE_ACCESSOR],
                animations: [
                    trigger('startDateTextState', [
                        state('startDate', style({
                            opacity: '1.0',
                        })),
                        state('endDate', style({
                            opacity: '0.6',
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                    trigger('endDateTextState', [
                        state('startDate', style({
                            opacity: '0.6',
                        })),
                        state('endDate', style({
                            opacity: '1.0',
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                    trigger('indicatorState', [
                        state('startDate', style({
                            transform: 'translateX(0%)',
                        })),
                        state('endDate', style({
                            transform: 'translateX(100%)',
                        })),
                        transition('startDate <=> endDate', animate('200ms ease-in')),
                    ]),
                ],
                template: "\n        <div class=\"calendar\">\n            <div class=\"calendar-top\" *ngIf=\"!inline && !range\">\n                <h4 class=\"day\" [attr.data-automation-id]=\"heading?.day\">{{heading?.day}}</h4>\n                <h2 class=\"month\" [attr.data-automation-id]=\"heading?.month\">{{heading?.month}}</h2>\n                <h1 class=\"date\" [attr.data-automation-id]=\"heading?.date\">{{heading?.date}}</h1>\n                <h3 class=\"year\" [attr.data-automation-id]=\"heading?.year\">{{heading?.year}}</h3>\n            </div>\n            <div class=\"date-range-tabs\" *ngIf=\"range\" [class.week-select-mode]=\"weekRangeSelect\">\n                <span class=\"range-tab\" (click)=\"toggleRangeSelect('startDate')\" [@startDateTextState]=\"rangeSelectMode\" data-automation-id=\"calendar-start-date\">{{selectedLabel}}</span>\n                <span class=\"range-tab\" (click)=\"toggleRangeSelect('endDate')\" [@endDateTextState]=\"rangeSelectMode\" data-automation-id=\"calendar-end-date\">{{selected2Label}}</span>\n                <i class=\"indicator\" [@indicatorState]=\"rangeSelectMode\"></i>\n            </div>\n            <div class=\"calendar-header\">\n                <span class=\"previous\" (click)=\"prevMonth($event)\" data-automation-id=\"calendar-previous\"></span>\n                <span class=\"heading\">\n                    <span class=\"month\" (click)=\"open($event, 'months')\" data-automation-id=\"header-month\">{{monthLabel}}</span>\n                    <span class=\"year\" (click)=\"open($event, 'years')\" data-automation-id=\"header-year\">{{month?.getFullYear()}}</span>\n                </span>\n                <span class=\"next\" (click)=\"nextMonth($event)\" data-automation-id=\"calendar-next\"></span>\n            </div>\n            <table class=\"calendar-content days\" cellspacing=\"0\" cellpadding=\"0\" [hidden]=\"!(view=='days')\">\n                <thead>\n                    <tr>\n                        <th *ngFor=\"let day of weekdays\" title=\"{{day}}\" class=\"weekday\" [attr.data-automation-id]=\"day.substr(0, 2)\">{{day.substr(0, 2)}}</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr *ngFor=\"let week of weeks\">\n                        <td *ngFor=\"let day of week.days\" [ngClass]=\"{\n                            today: day.isToday,\n                            'notinmonth': day.date.getMonth() !== this.month.getMonth(),\n                            selected: isSelected(range, day.date, selected, selected2),\n                            filler: isFiller(range, day.date, selected, selected2),\n                            startfill: isStartFill(range, day.date, selected, selected2),\n                            endfill: isEndFill(range, day.date, selected, selected2),\n                            'selecting-range': isSelectingRange(range, day.date, selected, selected2, hoverDay, rangeSelectMode, weekRangeSelect)\n                           }\" (mouseover)=\"rangeHover($event, day)\" [attr.data-automation-id]=\"day.number\">\n                            <button class=\"day\" [attr.data-automation-id]=\"day.number\" [disabled]=\"isDisabled(day.date, start, end)\" (click)=\"select($event, day, true)\">{{day.number}}</button>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n            <section class=\"calendar-content months\" [hidden]=\"view !== 'months'\">\n                <div *ngFor=\"let month of months;let i = index\" (click)=\"setMonth(i)\">\n                    <div class=\"month\" [ngClass]=\"{selected: i === selected?.getMonth()}\" [attr.data-automation-id]=\"month\">{{month}}</div>\n                </div>\n            </section>\n            <section class=\"calendar-content years\" [hidden]=\"view !== 'years'\">\n                <div *ngFor=\"let year of years\" (click)=\"setYear(year)\">\n                    <div class=\"year\" [ngClass]=\"{selected: year == selected?.getFullYear()}\" [attr.data-automation-id]=\"year\">{{year}}</div>\n                </div>\n            </section>\n            <div class=\"calendar-footer\">\n                <span (click)=\"setToday()\" class=\"today\" data-automation-id=\"calendar-today\">{{ labels.today }}</span>\n            </div>\n        </div>\n    ",
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ElementRef }]; }, { minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], inline: [{
            type: Input
        }], range: [{
            type: Input
        }], weekRangeSelect: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

var DateFormatService = /** @class */ (function () {
    function DateFormatService(labels) {
        this.labels = labels;
    }
    DateFormatService.prototype.getTimeMask = function (militaryTime) {
        var e_1, _a;
        var mask = [/\d/, /\d/, /:/, /\d/, /\d/];
        var timeFormatArray = [];
        var timeFormat = this.labels.timeFormatPlaceholderAM.toLowerCase();
        if (militaryTime) {
            return mask;
        }
        else {
            timeFormatArray = timeFormat.split('hh:mm');
            if (timeFormatArray && timeFormatArray.length) {
                mask = [];
                try {
                    for (var timeFormatArray_1 = __values(timeFormatArray), timeFormatArray_1_1 = timeFormatArray_1.next(); !timeFormatArray_1_1.done; timeFormatArray_1_1 = timeFormatArray_1.next()) {
                        var timeFormatPart = timeFormatArray_1_1.value;
                        if (timeFormatPart === '') {
                            mask = mask.concat([/\d/, /\d|:/, /:|\d/, /\d|\w|\s/, /\d|\s|\w/]);
                        }
                        else if (timeFormatPart.length) {
                            for (var i = 0; i < timeFormatPart.length; i++) {
                                mask.push(/\s|\w|\d|\./);
                            }
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (timeFormatArray_1_1 && !timeFormatArray_1_1.done && (_a = timeFormatArray_1.return)) _a.call(timeFormatArray_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
        }
        return mask;
    };
    DateFormatService.prototype.getDateMask = function () {
        return [/\d/, /\d|\/|\.|\-/, /\/|\.|\-|\d/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d|\/|\.|\-/, /\d/, /\d/];
    };
    DateFormatService.prototype.getDateTimeMask = function (militaryTime) {
        if (militaryTime === void 0) { militaryTime = false; }
        return __spread(this.getDateMask(), [/\,?/, /\s/], this.getTimeMask(militaryTime));
    };
    DateFormatService.prototype.getTimePlaceHolder = function (militaryTime) {
        if (militaryTime) {
            return this.labels.timeFormatPlaceholder24Hour;
        }
        return this.labels.timeFormatPlaceholderAM;
    };
    DateFormatService.prototype.parseDateString = function (dateString) {
        var dateFormat = this.labels.dateFormatString();
        var dateFormatRegex = /(\w+)[\/|\.|\-](\w+)[\/|\.|\-](\w+)/gi;
        var dateValueRegex = /(\d+)[\/|\.|\-](\d+)[\/|\.|\-](\d+)/gi;
        var dateFormatTokens;
        var dateValueTokens;
        var year;
        var month;
        var day;
        var date = new Date();
        if (Helpers.isEmpty(dateFormat)) {
            // Default to MM/dd/yyyy
            dateFormat = 'mm/dd/yyyy';
        }
        else {
            dateFormat = dateFormat.toLowerCase();
        }
        dateFormatTokens = dateFormatRegex.exec(dateFormat);
        dateValueTokens = dateValueRegex.exec(dateString);
        if (dateFormatTokens && dateFormatTokens.length === 4 && dateValueTokens && dateValueTokens.length === 4) {
            for (var i = 1; i < 4; i++) {
                if (dateFormatTokens[i].includes('m')) {
                    month = parseInt(dateValueTokens[i], 10) - 1;
                }
                else if (dateFormatTokens[i].includes('d')) {
                    day = parseInt(dateValueTokens[i], 10);
                }
                else {
                    year = parseInt(dateValueTokens[i], 10);
                }
            }
            if (month >= 0 && month <= 11 && year > 1900 && day > 0 && day <= 31) {
                date = new Date(year, month, day);
            }
        }
        else if (dateFormatTokens && dateFormatTokens.length === 4 && dateString.length >= 1) {
            var twoTokens = /\d{1,4}(\/|\.|\-)(\d{1,2})/.exec(dateString);
            var oneToken = /^(\d{1,4})$/.exec(dateString);
            var delimiter = /\w+(\/|\.|\-)\w+[\/|\.|\-]\w+/gi.exec(dateFormat);
            var dateStringWithDelimiter = dateString[dateString.length - 1].match(/\/|\.|\-/);
            if (twoTokens && twoTokens.length === 3 && this.isValidDatePart(twoTokens[2], dateFormatTokens[2]) && !dateStringWithDelimiter) {
                dateString = "" + dateString + delimiter[1];
            }
            else if (oneToken && oneToken.length === 2 && this.isValidDatePart(oneToken[1], dateFormatTokens[1]) && !dateStringWithDelimiter) {
                dateString = "" + dateString + delimiter[1];
            }
        }
        return [date, dateString];
    };
    DateFormatService.prototype.parseTimeString = function (timeString, militaryTime) {
        var e_2, _a;
        var value = new Date();
        var timeStringParts;
        var amFormat = this.labels.timeFormatAM;
        var pmFormat = this.labels.timeFormatPM;
        if (!(timeString && timeString.includes(':'))) {
            return [value, timeString];
        }
        if (!militaryTime && amFormat && pmFormat) {
            var splits = [];
            var pm = false;
            amFormat = this.labels.timeFormatAM.toLowerCase();
            pmFormat = this.labels.timeFormatPM.toLowerCase();
            timeString = timeString.toLowerCase();
            if (timeString.includes(amFormat)) {
                splits = timeString.split(amFormat);
            }
            else if (timeString.includes(pmFormat)) {
                splits = timeString.split(pmFormat);
                pm = true;
            }
            if (splits && splits.length) {
                try {
                    for (var splits_1 = __values(splits), splits_1_1 = splits_1.next(); !splits_1_1.done; splits_1_1 = splits_1.next()) {
                        var item = splits_1_1.value;
                        if (item && item.trim().includes(':')) {
                            timeStringParts = item.trim().split(':');
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (splits_1_1 && !splits_1_1.done && (_a = splits_1.return)) _a.call(splits_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 2) {
                var hours = parseInt(timeStringParts[0], 10);
                if (hours === 12 && pm) {
                    hours = 12;
                }
                else if (pm) {
                    hours = hours + 12;
                }
                else if (hours === 12) {
                    hours = 0;
                }
                value.setHours(hours);
                value.setMinutes(parseInt(timeStringParts[1], 10));
                value.setSeconds(0);
            }
        }
        else {
            timeStringParts = /(\d{1,2}):(\d{2})/.exec(timeString);
            if (timeStringParts && timeStringParts.length && timeStringParts.length === 3) {
                value.setHours(parseInt(timeStringParts[1], 10));
                value.setMinutes(parseInt(timeStringParts[2], 10));
                value.setSeconds(0);
            }
        }
        return [value, timeString];
    };
    DateFormatService.prototype.parseString = function (dateTimeString, militaryTime, type) {
        switch (type) {
            case 'datetime':
                var str = dateTimeString.replace(/-/g, '/');
                var parts = str.split(' ');
                var _a = __read(this.parseDateString(parts[0]), 2), dt = _a[0], dts = _a[1];
                if (parts.length > 1) {
                    var _b = __read(this.parseTimeString(parts[1], militaryTime), 2), tm = _b[0], tms = _b[1];
                    return [new Date(dt.setHours(tm.getHours(), tm.getMinutes())), dts + " " + tms];
                }
                return [dt, dts];
            case 'date':
                return this.parseDateString(dateTimeString);
            case 'time':
                return this.parseTimeString(dateTimeString, militaryTime);
            default:
                return;
        }
    };
    DateFormatService.prototype.isValidDatePart = function (value, format) {
        var datePart = parseInt(value, 10);
        if (format.includes('m') && (datePart >= 2 || value.length === 2)) {
            return true;
        }
        else if (format.includes('d') && (datePart >= 4 || value.length === 2)) {
            return true;
        }
        else if (format.includes('y') && datePart >= 1000) {
            return true;
        }
        return false;
    };
    DateFormatService.ɵfac = function DateFormatService_Factory(t) { return new (t || DateFormatService)(ɵɵinject(NovoLabelService)); };
    DateFormatService.ɵprov = ɵɵdefineInjectable({ token: DateFormatService, factory: DateFormatService.ɵfac });
    return DateFormatService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateFormatService, [{
        type: Injectable
    }], function () { return [{ type: NovoLabelService }]; }, null); })();

function NovoDatePickerInputElement_i_2_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 6);
    ɵɵlistener("click", function NovoDatePickerInputElement_i_2_Template_i_click_0_listener() { ɵɵrestoreView(_r4); var ctx_r3 = ɵɵnextContext(); return ctx_r3.openPanel(); });
    ɵɵelementEnd();
} }
function NovoDatePickerInputElement_i_3_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 7);
    ɵɵlistener("click", function NovoDatePickerInputElement_i_3_Template_i_click_0_listener() { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(); return ctx_r5.clearValue(); });
    ɵɵelementEnd();
} }
// Value accessor for the component (supports ngModel)
var DATE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDatePickerInputElement; }),
    multi: true,
};
var NovoDatePickerInputElement = /** @class */ (function () {
    function NovoDatePickerInputElement(element, labels, _changeDetectorRef, dateFormatService) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        this.dateFormatService = dateFormatService;
        this.formattedValue = '';
        /** View -> model callback called when value changes */
        this._onChange = function () { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = function () { };
        this.textMaskEnabled = true;
        this.allowInvalidDate = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
        this.placeholder = this.labels.dateFormatString().toUpperCase() || this.labels.dateFormatPlaceholder;
    }
    NovoDatePickerInputElement.prototype.ngOnInit = function () {
        this.userDefinedFormat = this.format ? !this.format.match(/^(DD\/MM\/YYYY|MM\/DD\/YYYY)$/g) : false;
        if (!this.userDefinedFormat && this.textMaskEnabled && !this.allowInvalidDate) {
            this.maskOptions = this.maskOptions || {
                mask: this.dateFormatService.getDateMask(),
                pipe: createAutoCorrectedDatePipe(this.format || this.labels.dateFormatString().toLowerCase()),
                keepCharPositions: false,
                guide: true,
            };
        }
        else {
            this.maskOptions = { mask: false };
        }
    };
    /** BEGIN: Convenient Panel Methods. */
    NovoDatePickerInputElement.prototype.openPanel = function () {
        if (!this.disabled) {
            this.overlay.openPanel();
        }
    };
    NovoDatePickerInputElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoDatePickerInputElement.prototype, "panelOpen", {
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    NovoDatePickerInputElement.prototype._handleKeydown = function (event) {
        if ((event.keyCode === ESCAPE || event.keyCode === ENTER || event.keyCode === TAB) && this.panelOpen) {
            this._handleEvent(event, true);
            this.closePanel();
            event.stopPropagation();
        }
    };
    NovoDatePickerInputElement.prototype._handleInput = function (event) {
        if (document.activeElement === event.target) {
            this._handleEvent(event, false);
        }
    };
    NovoDatePickerInputElement.prototype._handleBlur = function (event) {
        this.blurEvent.emit(event);
    };
    NovoDatePickerInputElement.prototype._handleFocus = function (event) {
        this.openPanel();
        this.focusEvent.emit(event);
    };
    NovoDatePickerInputElement.prototype._handleEvent = function (event, blur) {
        var value = event.target.value;
        if (value === '') {
            this.clearValue();
            this.closePanel();
        }
        else {
            this.formatDate(value, blur);
            this.openPanel();
        }
    };
    NovoDatePickerInputElement.prototype.formatDate = function (value, blur) {
        try {
            var _a = __read(this.dateFormatService.parseString(value, false, 'date'), 2), dateTimeValue = _a[0], formatted = _a[1];
            if (!isNaN(dateTimeValue.getUTCDate())) {
                var dt = new Date(dateTimeValue);
                this.dispatchOnChange(dt, blur);
            }
            else {
                this.dispatchOnChange(null, blur);
            }
        }
        catch (err) { }
    };
    NovoDatePickerInputElement.prototype.writeValue = function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    NovoDatePickerInputElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoDatePickerInputElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoDatePickerInputElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoDatePickerInputElement.prototype.dispatchOnChange = function (newValue, blur, skip) {
        if (blur === void 0) { blur = false; }
        if (skip === void 0) { skip = false; }
        if (newValue !== this.value) {
            this._onChange(newValue);
            if (blur) {
                !skip && this.writeValue(newValue);
            }
            else {
                !skip && this._setCalendarValue(newValue);
            }
        }
    };
    NovoDatePickerInputElement.prototype._setTriggerValue = function (value) {
        this._setCalendarValue(value);
        this._setFormValue(value);
        this._changeDetectorRef.markForCheck();
    };
    NovoDatePickerInputElement.prototype._setCalendarValue = function (value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setHours(this.value.getHours(), this.value.getMinutes()));
        }
        this.value = value;
    };
    NovoDatePickerInputElement.prototype._setFormValue = function (value) {
        if (this.value) {
            var test = this.formatDateValue(this.value);
            this.formattedValue = test;
        }
    };
    /**
     * This method closes the panel, and if a value is specified, also sets the associated
     * control to that value. It will also mark the control as dirty if this interaction
     * stemmed from the user.
     */
    NovoDatePickerInputElement.prototype.setValueAndClose = function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date, true);
        }
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    NovoDatePickerInputElement.prototype.clearValue = function () {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    };
    NovoDatePickerInputElement.prototype.formatDateValue = function (value) {
        var originalValue = value;
        try {
            if (!value) {
                return '';
            }
            if (this.userDefinedFormat && isValid(value)) {
                return format(value, this.format);
            }
            if (!(value instanceof Date)) {
                value = new Date(value);
            }
            if (!(isNaN(value.valueOf()) && this.allowInvalidDate)) {
                return this.labels.formatDateWithFormat(value, {
                    month: '2-digit',
                    day: '2-digit',
                    year: 'numeric',
                });
            }
            else {
                return originalValue;
            }
        }
        catch (err) {
            return '';
        }
    };
    Object.defineProperty(NovoDatePickerInputElement.prototype, "hasValue", {
        get: function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    NovoDatePickerInputElement.ɵfac = function NovoDatePickerInputElement_Factory(t) { return new (t || NovoDatePickerInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DateFormatService)); };
    NovoDatePickerInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoDatePickerInputElement, selectors: [["novo-date-picker-input"]], viewQuery: function NovoDatePickerInputElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoOverlayTemplateComponent, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
        } }, hostVars: 2, hostBindings: function NovoDatePickerInputElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("disabled", ctx.disabled);
        } }, inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", maskOptions: "maskOptions", format: "format", textMaskEnabled: "textMaskEnabled", allowInvalidDate: "allowInvalidDate", disabled: "disabled", weekStart: "weekStart" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR])], decls: 6, vars: 12, consts: [["type", "text", "data-automation-id", "date-input", 3, "name", "ngModel", "textMask", "placeholder", "disabled", "ngModelChange", "focus", "keydown", "input", "blur"], ["input", ""], ["class", "bhi-calendar", 3, "click", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], ["position", "above-below", 3, "parent"], ["inline", "true", 3, "start", "end", "ngModel", "weekStart", "onSelect"], [1, "bhi-calendar", 3, "click"], [1, "bhi-times", 3, "click"]], template: function NovoDatePickerInputElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "input", 0, 1);
            ɵɵlistener("ngModelChange", function NovoDatePickerInputElement_Template_input_ngModelChange_0_listener($event) { return ctx.formattedValue = $event; })("focus", function NovoDatePickerInputElement_Template_input_focus_0_listener($event) { return ctx._handleFocus($event); })("keydown", function NovoDatePickerInputElement_Template_input_keydown_0_listener($event) { return ctx._handleKeydown($event); })("input", function NovoDatePickerInputElement_Template_input_input_0_listener($event) { return ctx._handleInput($event); })("blur", function NovoDatePickerInputElement_Template_input_blur_0_listener($event) { return ctx._handleBlur($event); });
            ɵɵelementEnd();
            ɵɵtemplate(2, NovoDatePickerInputElement_i_2_Template, 1, 0, "i", 2);
            ɵɵtemplate(3, NovoDatePickerInputElement_i_3_Template, 1, 0, "i", 3);
            ɵɵelementStart(4, "novo-overlay-template", 4);
            ɵɵelementStart(5, "novo-date-picker", 5);
            ɵɵlistener("onSelect", function NovoDatePickerInputElement_Template_novo_date_picker_onSelect_5_listener($event) { return ctx.setValueAndClose($event); });
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("name", ctx.name)("ngModel", ctx.formattedValue)("textMask", ctx.maskOptions)("placeholder", ctx.placeholder)("disabled", ctx.disabled);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.hasValue);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasValue);
            ɵɵadvance(1);
            ɵɵproperty("parent", ctx.element);
            ɵɵadvance(1);
            ɵɵproperty("start", ctx.start)("end", ctx.end)("ngModel", ctx.value)("weekStart", ctx.weekStart);
        } }, directives: [DefaultValueAccessor, NgControlStatus, NgModel, MaskedInputDirective, NgIf, NovoOverlayTemplateComponent, NovoDatePickerElement], encapsulation: 2 });
    return NovoDatePickerInputElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDatePickerInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-picker-input',
                providers: [DATE_VALUE_ACCESSOR],
                template: "\n    <input\n      type=\"text\"\n      [name]=\"name\"\n      [(ngModel)]=\"formattedValue\"\n      [textMask]=\"maskOptions\"\n      [placeholder]=\"placeholder\"\n      (focus)=\"_handleFocus($event)\"\n      (keydown)=\"_handleKeydown($event)\"\n      (input)=\"_handleInput($event)\"\n      (blur)=\"_handleBlur($event)\"\n      #input\n      data-automation-id=\"date-input\"\n      [disabled]=\"disabled\"\n    />\n    <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-calendar\"></i>\n    <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-date-picker\n        [start]=\"start\"\n        [end]=\"end\"\n        inline=\"true\"\n        (onSelect)=\"setValueAndClose($event)\"\n        [ngModel]=\"value\"\n        [weekStart]=\"weekStart\"\n      ></novo-date-picker>\n    </novo-overlay-template>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }, { type: DateFormatService }]; }, { name: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], format: [{
            type: Input
        }], textMaskEnabled: [{
            type: Input
        }], allowInvalidDate: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: ['class.disabled']
        }, {
            type: Input
        }], weekStart: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();

// NG2
var NovoDatePickerModule = /** @class */ (function () {
    function NovoDatePickerModule() {
    }
    NovoDatePickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoDatePickerModule });
    NovoDatePickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDatePickerModule_Factory(t) { return new (t || NovoDatePickerModule)(); }, imports: [[CommonModule, FormsModule, NovoOverlayModule, TextMaskModule]] });
    return NovoDatePickerModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDatePickerModule, { declarations: [NovoDatePickerElement, NovoDatePickerInputElement], imports: [CommonModule, FormsModule, NovoOverlayModule, TextMaskModule], exports: [NovoDatePickerElement, NovoDatePickerInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDatePickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoOverlayModule, TextMaskModule],
                declarations: [NovoDatePickerElement, NovoDatePickerInputElement],
                exports: [NovoDatePickerElement, NovoDatePickerInputElement],
            }]
    }], null, null); })();

function NovoDataTableCell_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
var _c0$y = function (a0, a1) { return { $implicit: a0, col: a1 }; };
var NovoDataTableCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCell, _super);
    function NovoDataTableCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'gridcell';
        _this.subscriptions = [];
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-cell');
        return _this;
    }
    NovoDataTableCell.prototype.ngOnInit = function () {
        var _this = this;
        if (this.column.cellClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.cellClass(this.row));
        }
        if (this.column.rightAlignCellContent) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-data-table-cell-align-right');
        }
        this.calculateWidths();
        this.subscriptions.push(this.resized.subscribe(function (column) {
            if (column === _this.column) {
                _this.calculateWidths();
            }
        }));
    };
    NovoDataTableCell.prototype.ngOnDestroy = function () {
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    NovoDataTableCell.prototype.calculateWidths = function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    NovoDataTableCell.ɵfac = function NovoDataTableCell_Factory(t) { return new (t || NovoDataTableCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
    NovoDataTableCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCell, selectors: [["novo-data-table-cell"]], hostVars: 1, hostBindings: function NovoDataTableCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { row: "row", template: "template", column: "column", resized: "resized" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 5, consts: [[4, "ngTemplateOutlet", "ngTemplateOutletContext"]], template: function NovoDataTableCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoDataTableCell_ng_container_0_Template, 1, 0, "ng-container", 0);
        } if (rf & 2) {
            ɵɵproperty("ngTemplateOutlet", ctx.template)("ngTemplateOutletContext", ɵɵpureFunction2(2, _c0$y, ctx.row, ctx.column));
        } }, directives: [NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoDataTableCell;
}(CdkCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-cell',
                template: "\n    <ng-container *ngTemplateOutlet=\"template; context: {$implicit: row, col: column}\"></ng-container>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], template: [{
            type: Input
        }], column: [{
            type: Input
        }], resized: [{
            type: Input
        }] }); })();

var NovoDataTableCheckboxCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCheckboxCell, _super);
    function NovoDataTableCheckboxCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'gridcell';
        _this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-cell');
        _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
            _this.checked = _this.dataTable.isSelected(_this.row);
            _this.ref.markForCheck();
        });
        _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
            _this.checked = false;
            _this.ref.markForCheck();
        });
        return _this;
    }
    NovoDataTableCheckboxCell.prototype.ngOnInit = function () {
        this.checked = this.dataTable.isSelected(this.row);
    };
    NovoDataTableCheckboxCell.prototype.onClick = function () {
        this.dataTable.selectRow(this.row);
    };
    NovoDataTableCheckboxCell.prototype.ngOnDestroy = function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    NovoDataTableCheckboxCell.ɵfac = function NovoDataTableCheckboxCell_Factory(t) { return new (t || NovoDataTableCheckboxCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoDataTableCheckboxCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCheckboxCell, selectors: [["novo-data-table-checkbox-cell"]], hostVars: 1, hostBindings: function NovoDataTableCheckboxCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { row: "row" }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 5, consts: [[1, "data-table-checkbox", 3, "click"], ["type", "checkbox", 3, "checked"]], template: function NovoDataTableCheckboxCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵlistener("click", function NovoDataTableCheckboxCell_Template_div_click_0_listener() { return ctx.onClick(); });
            ɵɵelement(1, "input", 1);
            ɵɵelementStart(2, "label");
            ɵɵelement(3, "i");
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("checked", ctx.checked);
            ɵɵadvance(2);
            ɵɵclassProp("bhi-checkbox-empty", !ctx.checked)("bhi-checkbox-filled", ctx.checked);
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoDataTableCheckboxCell;
}(CdkCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCheckboxCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-checkbox-cell',
                template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\">\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\"\n          [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n    ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }] }); })();

var NovoDataTableExpandCell = /** @class */ (function (_super) {
    __extends(NovoDataTableExpandCell, _super);
    function NovoDataTableExpandCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'gridcell';
        _this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-expand-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-expand-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-cell');
        _this.expandSubscription = _this.dataTable.state.expandSource.subscribe(function () {
            _this.expanded = _this.dataTable.isExpanded(_this.row);
            _this.ref.markForCheck();
        });
        return _this;
    }
    NovoDataTableExpandCell.prototype.ngOnInit = function () {
        this.expanded = this.dataTable.isExpanded(this.row);
    };
    NovoDataTableExpandCell.prototype.onClick = function () {
        this.dataTable.expandRow(this.row);
    };
    NovoDataTableExpandCell.prototype.ngOnDestroy = function () {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    };
    NovoDataTableExpandCell.ɵfac = function NovoDataTableExpandCell_Factory(t) { return new (t || NovoDataTableExpandCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoDataTableExpandCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableExpandCell, selectors: [["novo-data-table-expand-cell"]], hostVars: 1, hostBindings: function NovoDataTableExpandCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { row: "row" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [["novo-data-table-expander", "true", 1, "bhi-next", "data-table-icon"]], template: function NovoDataTableExpandCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "i", 0);
        } if (rf & 2) {
            ɵɵclassProp("expanded", ctx.expanded);
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoDataTableExpandCell;
}(CdkCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableExpandCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-expand-cell',
                template: "\n    <i class=\"bhi-next data-table-icon\" novo-data-table-expander=\"true\" [class.expanded]=\"expanded\"></i>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }] }); })();

var NovoDataTableHeaderRow = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderRow, _super);
    function NovoDataTableHeaderRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-data-table-header-row';
        _this.fixedHeader = false;
        _this.role = 'row';
        return _this;
    }
    NovoDataTableHeaderRow.ɵfac = function NovoDataTableHeaderRow_Factory(t) { return ɵNovoDataTableHeaderRow_BaseFactory(t || NovoDataTableHeaderRow); };
    NovoDataTableHeaderRow.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableHeaderRow, selectors: [["novo-data-table-header-row"]], hostVars: 5, hostBindings: function NovoDataTableHeaderRow_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
            ɵɵclassMap(ctx.rowClass);
            ɵɵclassProp("fixed-header", ctx.fixedHeader);
        } }, inputs: { fixedHeader: "fixedHeader" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoDataTableHeaderRow_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementContainer(0, 0);
        } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoDataTableHeaderRow;
}(CdkHeaderRow));
var ɵNovoDataTableHeaderRow_BaseFactory = ɵɵgetInheritedFactory(NovoDataTableHeaderRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableHeaderRow, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-header-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], fixedHeader: [{
            type: HostBinding,
            args: ['class.fixed-header']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

var NovoDataTableRow = /** @class */ (function (_super) {
    __extends(NovoDataTableRow, _super);
    function NovoDataTableRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-data-table-row';
        _this.role = 'row';
        return _this;
    }
    NovoDataTableRow.ɵfac = function NovoDataTableRow_Factory(t) { return ɵNovoDataTableRow_BaseFactory(t || NovoDataTableRow); };
    NovoDataTableRow.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableRow, selectors: [["novo-data-table-row"]], hostVars: 5, hostBindings: function NovoDataTableRow_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role)("id", ctx.id)("data-automation-id", ctx.dataAutomationId);
            ɵɵclassMap(ctx.rowClass);
        } }, inputs: { id: "id", dataAutomationId: "dataAutomationId" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoDataTableRow_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementContainer(0, 0);
        } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoDataTableRow;
}(CdkRow));
var ɵNovoDataTableRow_BaseFactory = ɵɵgetInheritedFactory(NovoDataTableRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableRow, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], id: [{
            type: HostBinding,
            args: ['attr.id']
        }, {
            type: Input
        }], dataAutomationId: [{
            type: HostBinding,
            args: ['attr.data-automation-id']
        }, {
            type: Input
        }] }); })();

var NovoDataTableSortFilter = /** @class */ (function () {
    function NovoDataTableSortFilter(state) {
        this.state = state;
    }
    NovoDataTableSortFilter.prototype.filter = function (id, type, value, transform, allowMultipleFilters, selectedOption) {
        if (allowMultipleFilters === void 0) { allowMultipleFilters = false; }
        var filter;
        if (allowMultipleFilters) {
            filter = this.resolveMultiFilter(id, type, value, transform, selectedOption);
        }
        else {
            if (!Helpers.isBlank(value)) {
                filter = __assign({ id: id, type: type, value: value, transform: transform }, (selectedOption && { selectedOption: selectedOption }));
            }
            else {
                filter = undefined;
            }
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter: filter, sort: this.state.sort });
        this.state.onSortFilterChange();
    };
    NovoDataTableSortFilter.prototype.sort = function (id, value, transform) {
        var sort = { id: id, value: value, transform: transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort: sort, filter: this.state.filter });
        this.state.onSortFilterChange();
    };
    NovoDataTableSortFilter.prototype.resolveMultiFilter = function (id, type, value, transform, selectedOption) {
        var filter;
        filter = Helpers.convertToArray(this.state.filter);
        var filterIndex = filter.findIndex(function (aFilter) { return aFilter && aFilter.id === id; });
        if (filterIndex > -1) {
            filter.splice(filterIndex, 1);
        }
        if (!Helpers.isBlank(value)) {
            filter = __spread(filter, [__assign({ id: id, type: type, value: value, transform: transform }, (selectedOption && { selectedOption: selectedOption }))]);
        }
        if (filter.length < 1) {
            filter = undefined;
        }
        return filter;
    };
    NovoDataTableSortFilter.ɵfac = function NovoDataTableSortFilter_Factory(t) { return new (t || NovoDataTableSortFilter)(ɵɵdirectiveInject(DataTableState)); };
    NovoDataTableSortFilter.ɵdir = ɵɵdefineDirective({ type: NovoDataTableSortFilter, selectors: [["", "novoDataTableSortFilter", ""]] });
    return NovoDataTableSortFilter;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableSortFilter, [{
        type: Directive,
        args: [{
                selector: '[novoDataTableSortFilter]',
            }]
    }], function () { return [{ type: DataTableState }]; }, null); })();

var _c0$z = ["filterInput"];
var _c1$g = ["optionFilterInput"];
var _c2$7 = ["novo-data-table-cell-config", ""];
function NovoDataTableCellHeader_i_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 6);
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("bhi-", ctx_r0.labelIcon, " label-icon");
} }
function NovoDataTableCellHeader_button_4_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function NovoDataTableCellHeader_button_4_Template_button_click_0_listener() { ɵɵrestoreView(_r5); var ctx_r4 = ɵɵnextContext(); return ctx_r4.sort(); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("active", ctx_r1.sortActive);
    ɵɵproperty("tooltip", ctx_r1.labels.sort)("icon", ctx_r1.icon);
    ɵɵattribute("data-feature-id", "novo-data-table-sort-" + ctx_r1.id);
} }
function NovoDataTableCellHeader_novo_dropdown_5_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 16);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r14); var ctx_r13 = ɵɵnextContext(2); return ctx_r13.clearFilter(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r6.labels.clear, " ");
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_item_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 23);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_item_1_Template_item_click_0_listener() { ɵɵrestoreView(_r22); var option_r19 = ctx.$implicit; var ctx_r21 = ɵɵnextContext(4); return ctx_r21.filterData(option_r19); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_item_1_i_2_Template, 1, 0, "i", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r19 = ctx.$implicit;
    var ctx_r18 = ɵɵnextContext(4);
    ɵɵclassProp("active", ctx_r18.activeDateFilter === option_r19.label);
    ɵɵattribute("data-automation-id", "novo-data-table-filter-" + option_r19.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r19.label, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.activeDateFilter === option_r19.label);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_item_1_Template, 3, 5, "item", 20);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r15 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r15.config.filterConfig.options);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_item_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 23);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 24);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_list_7_item_2_Template_item_click_0_listener($event) { ɵɵrestoreView(_r25); var ctx_r24 = ɵɵnextContext(3); return ctx_r24.toggleCustomRange($event, true); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_list_7_item_2_i_2_Template, 1, 0, "i", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r16 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r16.labels.customDateRange === ctx_r16.activeDateFilter);
    ɵɵproperty("keepOpen", true);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r16.labels.customDateRange, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.labels.customDateRange === ctx_r16.activeDateFilter);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r27 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 25);
    ɵɵelementStart(1, "div", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_list_7_div_3_Template_div_click_1_listener($event) { ɵɵrestoreView(_r27); var ctx_r26 = ɵɵnextContext(3); return ctx_r26.toggleCustomRange($event, false); });
    ɵɵelement(2, "i", 26);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "novo-date-picker", 27);
    ɵɵlistener("onSelect", function NovoDataTableCellHeader_novo_dropdown_5_list_7_div_3_Template_novo_date_picker_onSelect_4_listener($event) { ɵɵrestoreView(_r27); var ctx_r28 = ɵɵnextContext(3); return ctx_r28.filterData($event); })("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_list_7_div_3_Template_novo_date_picker_ngModelChange_4_listener($event) { ɵɵrestoreView(_r27); var ctx_r29 = ɵɵnextContext(3); return ctx_r29.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r17 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r17.labels.backToPresetFilters);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r17.filter);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoDataTableCellHeader_novo_dropdown_5_list_7_ng_container_1_Template, 2, 1, "ng-container", 17);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_list_7_item_2_Template, 3, 5, "item", 18);
    ɵɵtemplate(3, NovoDataTableCellHeader_novo_dropdown_5_list_7_div_3_Template, 5, 2, "div", 19);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r7.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.config.filterConfig.allowCustomRange && !ctx_r7.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.showCustomRange);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_8_item_1_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 23);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_8_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r34 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 21);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_list_8_item_1_Template_item_click_0_listener() { ɵɵrestoreView(_r34); var option_r31 = ctx.$implicit; var ctx_r33 = ɵɵnextContext(3); return ctx_r33.filterData(option_r31); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoDataTableCellHeader_novo_dropdown_5_list_8_item_1_i_3_Template, 1, 0, "i", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r31 = ctx.$implicit;
    var ctx_r30 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r30.filter === option_r31);
    ɵɵattribute("data-automation-id", "novo-data-table-filter-" + ((option_r31 == null ? null : option_r31.label) || option_r31));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r31 == null ? null : option_r31.label) || option_r31);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", option_r31.hasOwnProperty("value") ? ctx_r30.filter === option_r31.value : ctx_r30.filter === option_r31);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoDataTableCellHeader_novo_dropdown_5_list_8_item_1_Template, 4, 5, "item", 20);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r8.config.filterConfig.options);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_9_item_9_Template(rf, ctx) { if (rf & 1) {
    var _r39 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 37);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_list_9_item_9_Template_item_click_0_listener() { ɵɵrestoreView(_r39); var option_r37 = ctx.$implicit; var ctx_r38 = ɵɵnextContext(3); return ctx_r38.toggleSelection(option_r37); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelement(3, "i");
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r37 = ctx.$implicit;
    var ctx_r36 = ɵɵnextContext(3);
    ɵɵproperty("hidden", ctx_r36.multiSelectOptionIsHidden(option_r37))("keepOpen", true);
    ɵɵattribute("data-automation-id", "novo-data-table-filter-" + ((option_r37 == null ? null : option_r37.label) || option_r37));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r37 == null ? null : option_r37.label) || option_r37);
    ɵɵadvance(1);
    ɵɵclassProp("bhi-checkbox-empty", !ctx_r36.isSelected(option_r37, ctx_r36.multiSelectedOptions))("bhi-checkbox-filled", ctx_r36.isSelected(option_r37, ctx_r36.multiSelectedOptions));
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_9_Template(rf, ctx) { if (rf & 1) {
    var _r41 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "div", 28);
    ɵɵlistener("keydown", function NovoDataTableCellHeader_novo_dropdown_5_list_9_Template_div_keydown_1_listener($event) { ɵɵrestoreView(_r41); var ctx_r40 = ɵɵnextContext(2); return ctx_r40.multiSelectOptionFilterHandleKeydown($event); });
    ɵɵelementStart(2, "item", 29);
    ɵɵelementStart(3, "input", 30, 31);
    ɵɵlistener("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_list_9_Template_input_ngModelChange_3_listener($event) { ɵɵrestoreView(_r41); var ctx_r42 = ɵɵnextContext(2); return ctx_r42.optionFilter = $event; })("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_list_9_Template_input_ngModelChange_3_listener($event) { ɵɵrestoreView(_r41); var ctx_r43 = ɵɵnextContext(2); return ctx_r43.multiSelectOptionFilter($event); });
    ɵɵelementEnd();
    ɵɵelement(5, "i", 32);
    ɵɵelementStart(6, "span", 33);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(8, "div", 34);
    ɵɵtemplate(9, NovoDataTableCellHeader_novo_dropdown_5_list_9_item_9_Template, 4, 8, "item", 35);
    ɵɵelementEnd();
    ɵɵelementStart(10, "p", 36);
    ɵɵtext(11);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵproperty("ngModel", ctx_r9.optionFilter);
    ɵɵadvance(3);
    ɵɵproperty("hidden", !ctx_r9.error || !ctx_r9.multiSelectHasVisibleOptions());
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r9.labels.selectFilterOptions);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r9.config.filterConfig.options);
    ɵɵadvance(1);
    ɵɵproperty("hidden", ctx_r9.multiSelectHasVisibleOptions());
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r9.labels.pickerEmpty);
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_10_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
var _c3$4 = function (a0) { return { $implicit: a0 }; };
function NovoDataTableCellHeader_novo_dropdown_5_list_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 29);
    ɵɵtemplate(2, NovoDataTableCellHeader_novo_dropdown_5_list_10_ng_container_2_Template, 1, 0, "ng-container", 38);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", ctx_r10.filterTemplate)("ngTemplateOutletContext", ɵɵpureFunction1(2, _c3$4, ctx_r10.config));
} }
function NovoDataTableCellHeader_novo_dropdown_5_list_11_Template(rf, ctx) { if (rf & 1) {
    var _r47 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 29);
    ɵɵelementStart(2, "input", 39, 40);
    ɵɵlistener("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_list_11_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r47); var ctx_r46 = ɵɵnextContext(2); return ctx_r46.filter = $event; })("ngModelChange", function NovoDataTableCellHeader_novo_dropdown_5_list_11_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r47); var ctx_r48 = ɵɵnextContext(2); return ctx_r48.filterData($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("type", ctx_r11.config.filterConfig.type)("ngModel", ctx_r11.filter);
} }
function NovoDataTableCellHeader_novo_dropdown_5_div_12_Template(rf, ctx) { if (rf & 1) {
    var _r50 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 41);
    ɵɵelementStart(1, "button", 42);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_div_12_Template_button_click_1_listener() { ɵɵrestoreView(_r50); var ctx_r49 = ɵɵnextContext(2); return ctx_r49.cancel(); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "button", 43);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_div_12_Template_button_click_3_listener() { ɵɵrestoreView(_r50); var ctx_r51 = ɵɵnextContext(2); return ctx_r51.filterMultiSelect(); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r12.labels.cancel, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r12.labels.filters, " ");
} }
function NovoDataTableCellHeader_novo_dropdown_5_Template(rf, ctx) { if (rf & 1) {
    var _r53 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-dropdown", 8);
    ɵɵelementStart(1, "button", 9);
    ɵɵlistener("click", function NovoDataTableCellHeader_novo_dropdown_5_Template_button_click_1_listener() { ɵɵrestoreView(_r53); var ctx_r52 = ɵɵnextContext(); return ctx_r52.focusInput(); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "div", 10);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoDataTableCellHeader_novo_dropdown_5_button_5_Template, 2, 1, "button", 11);
    ɵɵelementEnd();
    ɵɵelementContainerStart(6, 12);
    ɵɵtemplate(7, NovoDataTableCellHeader_novo_dropdown_5_list_7_Template, 4, 3, "list", 13);
    ɵɵtemplate(8, NovoDataTableCellHeader_novo_dropdown_5_list_8_Template, 2, 1, "list", 13);
    ɵɵtemplate(9, NovoDataTableCellHeader_novo_dropdown_5_list_9_Template, 12, 6, "list", 13);
    ɵɵtemplate(10, NovoDataTableCellHeader_novo_dropdown_5_list_10_Template, 3, 4, "list", 13);
    ɵɵtemplate(11, NovoDataTableCellHeader_novo_dropdown_5_list_11_Template, 4, 2, "list", 14);
    ɵɵelementContainerEnd();
    ɵɵtemplate(12, NovoDataTableCellHeader_novo_dropdown_5_div_12_Template, 5, 2, "div", 15);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("active", ctx_r2.filterActive);
    ɵɵproperty("tooltip", ctx_r2.labels.filters);
    ɵɵattribute("data-feature-id", "novo-data-table-filter-" + ctx_r2.id);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r2.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.filter !== null && ctx_r2.filter !== undefined && ctx_r2.filter !== "");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", ctx_r2.config.filterConfig.type);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "date");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "select");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "multi-select");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "custom");
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r2.multiSelect);
} }
function NovoDataTableCellHeader_div_7_Template(rf, ctx) { if (rf & 1) {
    var _r55 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 44);
    ɵɵelementStart(1, "span", 45);
    ɵɵlistener("mousedown", function NovoDataTableCellHeader_div_7_Template_span_mousedown_1_listener($event) { ɵɵrestoreView(_r55); var ctx_r54 = ɵɵnextContext(); return ctx_r54.startResize($event); });
    ɵɵtext(2, "\u00A0");
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
var NovoDataTableCellHeader = /** @class */ (function () {
    function NovoDataTableCellHeader(changeDetectorRef, labels, state, renderer, elementRef, _sort, _cdkColumnDef) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.allowMultipleFilters = false;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this.multiSelect = false;
        this.multiSelectedOptions = [];
        this.multiSelectedOptionIsHidden = [];
        this.optionFilter = '';
        this.error = false;
        this.subscriptions = [];
        this._rerenderSubscription = state.updates.subscribe(function (change) { return _this.checkSortFilterState(change); });
    }
    Object.defineProperty(NovoDataTableCellHeader.prototype, "column", {
        set: function (column) {
            this._column = column;
            this.label = column.type === 'action' ? '' : column.label;
            this.labelIcon = column.labelIcon;
            this.config = {
                sortable: !!column.sortable,
                filterable: !!column.filterable,
                resizable: !!column.resizable,
            };
            this.resizable = this.config.resizable;
            var transforms = {};
            if (column.filterable && Helpers.isObject(column.filterable)) {
                this.config.filterConfig = column.filterable;
                if (!this.config.filterConfig.type) {
                    this.config.filterConfig = { type: 'text' };
                }
                if (column.filterable.transform) {
                    transforms.filter = column.filterable.transform;
                }
            }
            else {
                this.config.filterConfig = { type: 'text' };
            }
            if (column.sortable && Helpers.isObject(column.sortable)) {
                if (column.sortable.transform) {
                    transforms.sort = column.sortable.transform;
                }
            }
            if (this.config.filterConfig.type === 'date' && !this.config.filterConfig.options) {
                this.config.filterConfig.options = this.getDefaultDateFilterOptions();
            }
            this.config.transforms = transforms;
        },
        enumerable: true,
        configurable: true
    });
    NovoDataTableCellHeader.prototype.ngOnInit = function () {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        this.checkSortFilterState({ filter: this.state.filter, sort: this.state.sort }, true);
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? __spread(this.filter) : [];
        }
        this.changeDetectorRef.markForCheck();
    };
    NovoDataTableCellHeader.prototype.ngOnDestroy = function () {
        this._rerenderSubscription.unsubscribe();
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
    };
    NovoDataTableCellHeader.prototype.checkSortFilterState = function (sortFilterState, initialConfig) {
        var _this = this;
        if (initialConfig === void 0) { initialConfig = false; }
        if (sortFilterState.sort && sortFilterState.sort.id === this.id) {
            this.icon = "sort-" + sortFilterState.sort.value;
            this.sortActive = true;
        }
        else {
            this.icon = 'sortable';
            this.sortActive = false;
        }
        var tableFilter = Helpers.convertToArray(sortFilterState.filter);
        var thisFilter = tableFilter.find(function (filter) { return filter && filter.id === _this.id; });
        if (thisFilter) {
            this.filterActive = true;
            if (initialConfig && thisFilter.type === 'date' && thisFilter.selectedOption) {
                this.activeDateFilter = thisFilter.selectedOption.label || this.labels.customDateRange;
            }
            this.filter = thisFilter.value;
        }
        else {
            this.filterActive = false;
            this.filter = undefined;
            this.activeDateFilter = undefined;
            this.multiSelectedOptions = [];
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = "sort-" + this.defaultSort.value;
            this.sortActive = true;
        }
        this.multiSelect = this.config.filterConfig && this.config.filterConfig.type ? this.config.filterConfig.type === 'multi-select' : false;
        if (this.multiSelect) {
            this.multiSelectedOptions = this.filter ? __spread(this.filter) : [];
            if (this.config.filterConfig.options) {
                if (typeof this.config.filterConfig.options[0] === 'string') {
                    this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map(function (option) { return ({ option: option, hidden: false }); });
                }
                else {
                    this.multiSelectedOptionIsHidden = this.config.filterConfig.options.map(function (option) { return ({
                        option: option,
                        hidden: false,
                    }); });
                }
            }
        }
        this.changeDetectorRef.markForCheck();
    };
    NovoDataTableCellHeader.prototype.isSelected = function (option, optionsList) {
        var _this = this;
        if (optionsList) {
            var optionValue_1 = option.hasOwnProperty('value') ? option.value : option;
            var found = optionsList.find(function (item) { return _this.optionPresentCheck(item, optionValue_1); });
            return found !== undefined;
        }
        return false;
    };
    NovoDataTableCellHeader.prototype.toggleSelection = function (option) {
        var _this = this;
        var optionValue = option.hasOwnProperty('value') ? option.value : option;
        var optionIndex = this.multiSelectedOptions.findIndex(function (item) { return _this.optionPresentCheck(item, optionValue); });
        this.error = false;
        if (optionIndex > -1) {
            this.multiSelectedOptions.splice(optionIndex, 1);
            if (this.optionFilter &&
                !this.getOptionText(option)
                    .toLowerCase()
                    .startsWith(this.optionFilter.toLowerCase())) {
                this.multiSelectedOptionIsHidden[this.multiSelectedOptionIsHidden.findIndex(function (record) { return record.option === option; })].hidden = true;
            }
        }
        else {
            this.multiSelectedOptions.push(optionValue);
        }
    };
    NovoDataTableCellHeader.prototype.optionPresentCheck = function (item, optionValue) {
        if (item.hasOwnProperty('value')) {
            return item.value === optionValue;
        }
        else {
            return item === optionValue;
        }
    };
    NovoDataTableCellHeader.prototype.cancel = function () {
        this.multiSelectedOptions = this.filter ? __spread(this.filter) : [];
        this.dropdown.closePanel();
        this.clearOptionFilter();
    };
    NovoDataTableCellHeader.prototype.filterMultiSelect = function () {
        if (this.multiSelectedOptions.length === 0 && !this.filter) {
            this.multiSelectHasVisibleOptions() && this.dropdown ? (this.error = true) : null;
        }
        else {
            this.clearOptionFilter();
            var actualFilter = this.multiSelectedOptions.length > 0 ? __spread(this.multiSelectedOptions) : undefined;
            this.filterData(actualFilter);
            this.dropdown.closePanel();
        }
    };
    NovoDataTableCellHeader.prototype.multiSelectOptionFilter = function (optionFilter) {
        var _this = this;
        this.multiSelectedOptionIsHidden.forEach(function (record) {
            if (record.option) {
                record.hidden = !(_this.getOptionText(record.option)
                    .toLowerCase()
                    .startsWith(optionFilter.toLowerCase()) || _this.isSelected(record.option, _this.multiSelectedOptions));
            }
        });
    };
    NovoDataTableCellHeader.prototype.multiSelectOptionIsHidden = function (option) {
        return this.multiSelectedOptionIsHidden.find(function (record) { return record.option === option; }).hidden;
    };
    NovoDataTableCellHeader.prototype.multiSelectHasVisibleOptions = function () {
        return this.multiSelectedOptionIsHidden.some(function (record) { return !record.hidden; });
    };
    NovoDataTableCellHeader.prototype.getOptionText = function (option) {
        if (typeof option !== 'object') {
            return option.toString();
        }
        else {
            var opt = option;
            return (opt.label.length > 0 ? opt.label : opt.value).toString();
        }
    };
    NovoDataTableCellHeader.prototype.multiSelectOptionFilterHandleKeydown = function (event) {
        if (this.multiSelect) {
            this.error = false;
            if (this.dropdown.panelOpen && event.keyCode === KeyCodes.ESC) {
                // escape = clear text box and close
                Helpers.swallowEvent(event);
                this.clearOptionFilter();
                this.dropdown.closePanel();
            }
            else if (event.keyCode === KeyCodes.ENTER) {
                Helpers.swallowEvent(event);
                this.filterMultiSelect();
            }
            else if ((event.keyCode >= 65 && event.keyCode <= 90) ||
                (event.keyCode >= 96 && event.keyCode <= 105) ||
                (event.keyCode >= 48 && event.keyCode <= 57)) {
                this.optionFilterInput.nativeElement.focus();
            }
        }
    };
    NovoDataTableCellHeader.prototype.clearOptionFilter = function () {
        this.error = false;
        if (this.optionFilter.length > 0) {
            this.optionFilter = '';
            this.multiSelectedOptionIsHidden.forEach(function (record) {
                record.hidden = false;
            });
        }
    };
    NovoDataTableCellHeader.prototype.startResize = function (mouseDownEvent) {
        var _this = this;
        mouseDownEvent.preventDefault();
        var minimumWidth = 60 + (this.config.filterable ? 30 : 0) + (this.config.sortable ? 30 : 0);
        var startingWidth = this.elementRef.nativeElement.getBoundingClientRect().width;
        var mouseMoveSubscription = fromEvent(window.document, 'mousemove').subscribe(function (middleMouseEvent) {
            var differenceWidth = middleMouseEvent.clientX - mouseDownEvent.clientX;
            var width = startingWidth + differenceWidth;
            if (width < minimumWidth) {
                width = minimumWidth;
            }
            _this._column.width = width;
            _this.renderer.setStyle(_this.elementRef.nativeElement, 'min-width', _this._column.width + "px");
            _this.renderer.setStyle(_this.elementRef.nativeElement, 'max-width', _this._column.width + "px");
            _this.renderer.setStyle(_this.elementRef.nativeElement, 'width', _this._column.width + "px");
            _this.changeDetectorRef.markForCheck();
            _this.resized.next(_this._column);
        });
        var mouseUpSubscription = fromEvent(window.document, 'mouseup').subscribe(function () {
            mouseUpSubscription.unsubscribe();
            mouseMoveSubscription.unsubscribe();
            _this.changeDetectorRef.markForCheck();
        });
        this.subscriptions.push(mouseMoveSubscription);
        this.subscriptions.push(mouseUpSubscription);
    };
    NovoDataTableCellHeader.prototype.toggleCustomRange = function (event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    };
    NovoDataTableCellHeader.prototype.focusInput = function () {
        var _this = this;
        if (this.filterInput && this.filterInput.nativeElement) {
            setTimeout(function () { return _this.filterInput.nativeElement.focus(); }, 0);
        }
        if (this.multiSelect && this.dropdown) {
            this.dropdown.onKeyDown = function (event) {
                _this.multiSelectOptionFilterHandleKeydown(event);
            };
            setTimeout(function () { return _this.optionFilterInput.nativeElement.focus(); }, 0);
            this.changeDetectorRef.markForCheck();
        }
    };
    NovoDataTableCellHeader.prototype.sort = function () {
        var _this = this;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            _this.direction = _this.getNextSortDirection(_this.direction);
            _this._sort.sort(_this.id, _this.direction, _this.config.transforms.sort);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    NovoDataTableCellHeader.prototype.filterData = function (filter) {
        var _this = this;
        var actualFilter = NovoDataTableFilterUtils.constructFilter(filter, this.config.filterConfig.type, this.multiSelect);
        var selectedOption = this.config.filterConfig.type === 'date' && filter ? filter : undefined;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            _this._sort.filter(_this.id, _this.config.filterConfig.type, actualFilter, _this.config.transforms.filter, _this.allowMultipleFilters, selectedOption);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    NovoDataTableCellHeader.prototype.clearFilter = function () {
        this.filter = undefined;
        this.multiSelectedOptions = [];
        this.activeDateFilter = undefined;
        this.filterData(undefined);
        this.clearOptionFilter();
        this.dropdown.closePanel();
    };
    NovoDataTableCellHeader.prototype.getNextSortDirection = function (direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    };
    NovoDataTableCellHeader.prototype.getDefaultDateFilterOptions = function () {
        var opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    };
    NovoDataTableCellHeader.ɵfac = function NovoDataTableCellHeader_Factory(t) { return new (t || NovoDataTableCellHeader)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoDataTableSortFilter, 8), ɵɵdirectiveInject(CdkColumnDef, 8)); };
    NovoDataTableCellHeader.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCellHeader, selectors: [["", "novo-data-table-cell-config", ""]], viewQuery: function NovoDataTableCellHeader_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$z, true);
            ɵɵviewQuery(NovoDropdownElement, true);
            ɵɵviewQuery(_c1$g, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterInput = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionFilterInput = _t.first);
        } }, hostVars: 2, hostBindings: function NovoDataTableCellHeader_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("keydown", function NovoDataTableCellHeader_keydown_HostBindingHandler($event) { return ctx.multiSelectOptionFilterHandleKeydown($event); });
        } if (rf & 2) {
            ɵɵclassProp("resizable", ctx.resizable);
        } }, inputs: { defaultSort: "defaultSort", allowMultipleFilters: "allowMultipleFilters", resized: "resized", filterTemplate: "filterTemplate", column: ["novo-data-table-cell-config", "column"] }, attrs: _c2$7, decls: 8, vars: 5, consts: [["data-automation-id", "novo-data-table-header-icon", 3, "class", 4, "ngIf"], ["data-automation-id", "novo-data-table-label"], ["tooltipPosition", "right", "theme", "icon", "data-automation-id", "novo-data-table-sort", 3, "tooltip", "icon", "active", "click", 4, "ngIf"], ["side", "right", "parentScrollSelector", ".novo-data-table-container", "containerClass", "data-table-dropdown", "data-automation-id", "novo-data-table-filter", 4, "ngIf"], [1, "spacer"], ["class", "data-table-header-resizable", 4, "ngIf"], ["data-automation-id", "novo-data-table-header-icon"], ["tooltipPosition", "right", "theme", "icon", "data-automation-id", "novo-data-table-sort", 3, "tooltip", "icon", "click"], ["side", "right", "parentScrollSelector", ".novo-data-table-container", "containerClass", "data-table-dropdown", "data-automation-id", "novo-data-table-filter"], ["type", "button", "theme", "icon", "icon", "filter", "tooltipPosition", "right", 3, "tooltip", "click"], [1, "header"], ["theme", "dialogue", "color", "negative", "icon", "times", "data-automation-id", "novo-data-table-filter-clear", 3, "click", 4, "ngIf"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["class", "footer", 4, "ngIf"], ["theme", "dialogue", "color", "negative", "icon", "times", "data-automation-id", "novo-data-table-filter-clear", 3, "click"], [4, "ngIf"], [3, "active", "keepOpen", "click", 4, "ngIf"], ["class", "calendar-container", 4, "ngIf"], [3, "active", "click", 4, "ngFor", "ngForOf"], [3, "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], [3, "keepOpen", "click"], [1, "calendar-container"], [1, "bhi-previous"], ["range", "true", 3, "ngModel", "onSelect", "ngModelChange"], [1, "dropdown-list-filter", 3, "keydown"], ["keepOpen", "true", 1, "filter-search"], ["data-automation-id", "novo-data-table-multi-select-option-filter-input", 3, "ngModel", "ngModelChange"], ["optionFilterInput", ""], [1, "bhi-search"], [1, "error-text", 3, "hidden"], [1, "dropdown-list-options"], [3, "hidden", "keepOpen", "click", 4, "ngFor", "ngForOf"], [1, "filter-null-results", 3, "hidden"], [3, "hidden", "keepOpen", "click"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], ["data-automation-id", "novo-data-table-filter-input", 3, "type", "ngModel", "ngModelChange"], ["filterInput", ""], [1, "footer"], ["theme", "dialogue", "color", "dark", "data-automation-id", "novo-data-table-multi-select-cancel", 3, "click"], ["theme", "dialogue", "color", "positive", "data-automation-id", "novo-data-table-multi-select-filter", 3, "click"], [1, "data-table-header-resizable"], [3, "mousedown"]], template: function NovoDataTableCellHeader_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoDataTableCellHeader_i_0_Template, 1, 3, "i", 0);
            ɵɵelementStart(1, "label", 1);
            ɵɵtext(2);
            ɵɵelementEnd();
            ɵɵelementStart(3, "div");
            ɵɵtemplate(4, NovoDataTableCellHeader_button_4_Template, 1, 5, "button", 2);
            ɵɵtemplate(5, NovoDataTableCellHeader_novo_dropdown_5_Template, 13, 12, "novo-dropdown", 3);
            ɵɵelementEnd();
            ɵɵelement(6, "div", 4);
            ɵɵtemplate(7, NovoDataTableCellHeader_div_7_Template, 3, 0, "div", 5);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.labelIcon);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.label);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.config.sortable);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.config.filterable);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.config.resizable);
        } }, directives: [NgIf, NovoButtonElement, TooltipDirective, NovoDropdownElement, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoDropdownListElement, NgForOf, NovoItemElement, NovoDatePickerElement, NgControlStatus, NgModel, DefaultValueAccessor, NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoDataTableCellHeader;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCellHeader, [{
        type: Component,
        args: [{
                selector: '[novo-data-table-cell-config]',
                template: "\n    <i class=\"bhi-{{ labelIcon }} label-icon\" *ngIf=\"labelIcon\" data-automation-id=\"novo-data-table-header-icon\"></i>\n    <label data-automation-id=\"novo-data-table-label\">{{ label }}</label>\n    <div>\n      <button\n        *ngIf=\"config.sortable\"\n        tooltipPosition=\"right\"\n        [tooltip]=\"labels.sort\"\n        theme=\"icon\"\n        [icon]=\"icon\"\n        (click)=\"sort()\"\n        [class.active]=\"sortActive\"\n        data-automation-id=\"novo-data-table-sort\"\n        [attr.data-feature-id]=\"'novo-data-table-sort-' + this.id\"\n      ></button>\n      <novo-dropdown\n        *ngIf=\"config.filterable\"\n        side=\"right\"\n        parentScrollSelector=\".novo-data-table-container\"\n        containerClass=\"data-table-dropdown\"\n        data-automation-id=\"novo-data-table-filter\"\n      >\n        <button\n          type=\"button\"\n          theme=\"icon\"\n          icon=\"filter\"\n          [class.active]=\"filterActive\"\n          (click)=\"focusInput()\"\n          tooltipPosition=\"right\"\n          [tooltip]=\"labels.filters\"\n          [attr.data-feature-id]=\"'novo-data-table-filter-' + this.id\"\n        ></button>\n        <div class=\"header\">\n          <span>{{ labels.filters }}</span>\n          <button\n            theme=\"dialogue\"\n            color=\"negative\"\n            icon=\"times\"\n            (click)=\"clearFilter()\"\n            *ngIf=\"filter !== null && filter !== undefined && filter !== ''\"\n            data-automation-id=\"novo-data-table-filter-clear\"\n          >\n            {{ labels.clear }}\n          </button>\n        </div>\n        <ng-container [ngSwitch]=\"config.filterConfig.type\">\n          <list *ngSwitchCase=\"'date'\">\n            <ng-container *ngIf=\"!showCustomRange\">\n              <item\n                [class.active]=\"activeDateFilter === option.label\"\n                *ngFor=\"let option of config.filterConfig.options\"\n                (click)=\"filterData(option)\"\n                [attr.data-automation-id]=\"'novo-data-table-filter-' + option.label\"\n              >\n                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n              </item>\n            </ng-container>\n            <item\n              [class.active]=\"labels.customDateRange === activeDateFilter\"\n              (click)=\"toggleCustomRange($event, true)\"\n              *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\"\n              [keepOpen]=\"true\"\n            >\n              {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n            </item>\n            <div class=\"calendar-container\" *ngIf=\"showCustomRange\">\n              <div (click)=\"toggleCustomRange($event, false)\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n              <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n            </div>\n          </list>\n          <list *ngSwitchCase=\"'select'\">\n            <item\n              [class.active]=\"filter === option\"\n              *ngFor=\"let option of config.filterConfig.options\"\n              (click)=\"filterData(option)\"\n              [attr.data-automation-id]=\"'novo-data-table-filter-' + (option?.label || option)\"\n            >\n              <span>{{ option?.label || option }}</span>\n              <i class=\"bhi-check\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n            </item>\n          </list>\n          <list *ngSwitchCase=\"'multi-select'\">\n            <div class=\"dropdown-list-filter\" (keydown)=\"multiSelectOptionFilterHandleKeydown($event)\">\n              <item class=\"filter-search\" keepOpen=\"true\">\n                <input\n                  [(ngModel)]=\"optionFilter\"\n                  (ngModelChange)=\"multiSelectOptionFilter($event)\"\n                  #optionFilterInput\n                  data-automation-id=\"novo-data-table-multi-select-option-filter-input\"\n                />\n                <i class=\"bhi-search\"></i>\n                <span class=\"error-text\" [hidden]=\"!error || !multiSelectHasVisibleOptions()\">{{ labels.selectFilterOptions }}</span>\n              </item>\n            </div>\n            <div class=\"dropdown-list-options\">\n              <item\n                *ngFor=\"let option of config.filterConfig.options\"\n                [hidden]=\"multiSelectOptionIsHidden(option)\"\n                (click)=\"toggleSelection(option)\"\n                [attr.data-automation-id]=\"'novo-data-table-filter-' + (option?.label || option)\"\n                [keepOpen]=\"true\"\n              >\n                <span>{{ option?.label || option }}</span>\n                <i\n                  [class.bhi-checkbox-empty]=\"!isSelected(option, multiSelectedOptions)\"\n                  [class.bhi-checkbox-filled]=\"isSelected(option, multiSelectedOptions)\"\n                ></i>\n              </item>\n            </div>\n            <p class=\"filter-null-results\" [hidden]=\"multiSelectHasVisibleOptions()\">{{ labels.pickerEmpty }}</p>\n          </list>\n          <list *ngSwitchCase=\"'custom'\">\n            <item class=\"filter-search\" keepOpen=\"true\">\n              <ng-container *ngTemplateOutlet=\"filterTemplate; context: { $implicit: config }\"></ng-container>\n            </item>\n          </list>\n          <list *ngSwitchDefault>\n            <item class=\"filter-search\" keepOpen=\"true\">\n              <input\n                [type]=\"config.filterConfig.type\"\n                [(ngModel)]=\"filter\"\n                (ngModelChange)=\"filterData($event)\"\n                #filterInput\n                data-automation-id=\"novo-data-table-filter-input\"\n              />\n            </item>\n          </list>\n        </ng-container>\n        <div class=\"footer\" *ngIf=\"multiSelect\">\n          <button theme=\"dialogue\" color=\"dark\" (click)=\"cancel()\" data-automation-id=\"novo-data-table-multi-select-cancel\">\n            {{ labels.cancel }}\n          </button>\n          <button theme=\"dialogue\" color=\"positive\" (click)=\"filterMultiSelect()\" data-automation-id=\"novo-data-table-multi-select-filter\">\n            {{ labels.filters }}\n          </button>\n        </div>\n      </novo-dropdown>\n    </div>\n    <div class=\"spacer\"></div>\n    <div class=\"data-table-header-resizable\" *ngIf=\"config.resizable\"><span (mousedown)=\"startResize($event)\">&nbsp;</span></div>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: DataTableState }, { type: Renderer2 }, { type: ElementRef }, { type: NovoDataTableSortFilter, decorators: [{
                type: Optional
            }] }, { type: CdkColumnDef, decorators: [{
                type: Optional
            }] }]; }, { filterInput: [{
            type: ViewChild,
            args: ['filterInput']
        }], dropdown: [{
            type: ViewChild,
            args: [NovoDropdownElement]
        }], optionFilterInput: [{
            type: ViewChild,
            args: ['optionFilterInput']
        }], defaultSort: [{
            type: Input
        }], allowMultipleFilters: [{
            type: Input
        }], resized: [{
            type: Input
        }], filterTemplate: [{
            type: Input
        }], resizable: [{
            type: HostBinding,
            args: ['class.resizable']
        }], column: [{
            type: Input,
            args: ['novo-data-table-cell-config']
        }], multiSelectOptionFilterHandleKeydown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

var NovoDataTableExpandHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableExpandHeaderCell, _super);
    function NovoDataTableExpandHeaderCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'columnheader';
        _this.expanded = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-expand-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-expand-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-expand-header-cell');
        _this.expandSubscription = _this.dataTable.state.expandSource.subscribe(function () {
            _this.expanded = _this.dataTable.allCurrentRowsExpanded();
            _this.ref.markForCheck();
        });
        return _this;
    }
    NovoDataTableExpandHeaderCell.prototype.ngOnDestroy = function () {
        if (this.expandSubscription) {
            this.expandSubscription.unsubscribe();
        }
    };
    NovoDataTableExpandHeaderCell.prototype.expandAll = function () {
        this.dataTable.expandRows(!this.expanded);
    };
    NovoDataTableExpandHeaderCell.ɵfac = function NovoDataTableExpandHeaderCell_Factory(t) { return new (t || NovoDataTableExpandHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoDataTableExpandHeaderCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableExpandHeaderCell, selectors: [["novo-data-table-expand-header-cell"]], hostVars: 1, hostBindings: function NovoDataTableExpandHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 2, consts: [["novo-data-table-expander", "true", 1, "bhi-next", "data-table-icon", 3, "click"]], template: function NovoDataTableExpandHeaderCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "i", 0);
            ɵɵlistener("click", function NovoDataTableExpandHeaderCell_Template_i_click_0_listener() { return ctx.expandAll(); });
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("expanded", ctx.expanded);
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoDataTableExpandHeaderCell;
}(CdkHeaderCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableExpandHeaderCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-expand-header-cell',
                template: "\n    <i class=\"bhi-next data-table-icon\" novo-data-table-expander=\"true\" (click)=\"expandAll()\" [class.expanded]=\"expanded\"></i>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

var NovoDataTableCheckboxHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableCheckboxHeaderCell, _super);
    function NovoDataTableCheckboxHeaderCell(columnDef, elementRef, renderer, dataTable, ref) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.dataTable = dataTable;
        _this.ref = ref;
        _this.role = 'columnheader';
        _this.checked = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-checkbox-header-cell');
        _this.selectionSubscription = _this.dataTable.state.selectionSource.subscribe(function () {
            _this.checked = _this.dataTable.allCurrentRowsSelected();
            _this.ref.markForCheck();
        });
        _this.paginationSubscription = _this.dataTable.state.paginationSource.subscribe(function (event) {
            if (event.isPageSizeChange) {
                _this.checked = false;
                _this.dataTable.selectRows(false);
            }
            else {
                _this.checked = _this.dataTable.allCurrentRowsSelected();
            }
            _this.ref.markForCheck();
        });
        _this.resetSubscription = _this.dataTable.state.resetSource.subscribe(function () {
            _this.checked = false;
            _this.ref.markForCheck();
        });
        return _this;
    }
    NovoDataTableCheckboxHeaderCell.prototype.ngOnDestroy = function () {
        if (this.selectionSubscription) {
            this.selectionSubscription.unsubscribe();
        }
        if (this.paginationSubscription) {
            this.paginationSubscription.unsubscribe();
        }
        if (this.resetSubscription) {
            this.resetSubscription.unsubscribe();
        }
    };
    NovoDataTableCheckboxHeaderCell.prototype.onClick = function () {
        this.dataTable.selectRows(!this.checked);
    };
    NovoDataTableCheckboxHeaderCell.ɵfac = function NovoDataTableCheckboxHeaderCell_Factory(t) { return new (t || NovoDataTableCheckboxHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoDataTable), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoDataTableCheckboxHeaderCell.ɵcmp = ɵɵdefineComponent({ type: NovoDataTableCheckboxHeaderCell, selectors: [["novo-data-table-checkbox-header-cell"]], hostVars: 1, hostBindings: function NovoDataTableCheckboxHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 5, consts: [[1, "data-table-checkbox", 3, "click"], ["type", "checkbox", 3, "checked"]], template: function NovoDataTableCheckboxHeaderCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵlistener("click", function NovoDataTableCheckboxHeaderCell_Template_div_click_0_listener() { return ctx.onClick(); });
            ɵɵelement(1, "input", 1);
            ɵɵelementStart(2, "label");
            ɵɵelement(3, "i");
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("checked", ctx.checked);
            ɵɵadvance(2);
            ɵɵclassProp("bhi-checkbox-empty", !ctx.checked)("bhi-checkbox-filled", ctx.checked);
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoDataTableCheckboxHeaderCell;
}(CdkHeaderCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableCheckboxHeaderCell, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-checkbox-header-cell',
                template: "\n    <div class=\"data-table-checkbox\" (click)=\"onClick()\">\n      <input type=\"checkbox\" [checked]=\"checked\">\n      <label>\n        <i [class.bhi-checkbox-empty]=\"!checked\"\n          [class.bhi-checkbox-filled]=\"checked\"></i>\n      </label>\n    </div>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoDataTable }, { type: ChangeDetectorRef }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

var NovoDataTableHeaderCell = /** @class */ (function (_super) {
    __extends(NovoDataTableHeaderCell, _super);
    function NovoDataTableHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-data-table-header-cell');
        return _this;
    }
    NovoDataTableHeaderCell.prototype.ngOnInit = function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    NovoDataTableHeaderCell.ɵfac = function NovoDataTableHeaderCell_Factory(t) { return new (t || NovoDataTableHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
    NovoDataTableHeaderCell.ɵdir = ɵɵdefineDirective({ type: NovoDataTableHeaderCell, selectors: [["novo-data-table-header-cell"]], hostVars: 1, hostBindings: function NovoDataTableHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { column: "column" }, features: [ɵɵInheritDefinitionFeature] });
    return NovoDataTableHeaderCell;
}(CdkHeaderCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableHeaderCell, [{
        type: Directive,
        args: [{
                selector: 'novo-data-table-header-cell',
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], column: [{
            type: Input
        }] }); })();

function NovoDataTablePagination_ng_container_0_novo_tiles_2_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tiles", 8);
    ɵɵlistener("ngModelChange", function NovoDataTablePagination_ng_container_0_novo_tiles_2_Template_novo_tiles_ngModelChange_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(2); return ctx_r5.pageSize = $event; })("onChange", function NovoDataTablePagination_ng_container_0_novo_tiles_2_Template_novo_tiles_onChange_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r7 = ɵɵnextContext(2); return ctx_r7.changePageSize($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵproperty("ngModel", ctx_r2.pageSize)("options", ctx_r2.displayedPageSizeOptions);
} }
function NovoDataTablePagination_ng_container_0_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.pageSize);
} }
function NovoDataTablePagination_ng_container_0_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 9);
} }
function NovoDataTablePagination_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 1);
    ɵɵtemplate(2, NovoDataTablePagination_ng_container_0_novo_tiles_2_Template, 1, 2, "novo-tiles", 2);
    ɵɵtemplate(3, NovoDataTablePagination_ng_container_0_div_3_Template, 2, 1, "div", 0);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 3);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementStart(6, "div", 4);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵtemplate(8, NovoDataTablePagination_ng_container_0_span_8_Template, 1, 0, "span", 5);
    ɵɵelementStart(9, "button", 6);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_0_Template_button_click_9_listener() { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(); return ctx_r8.previousPage(); });
    ɵɵelementStart(10, "span");
    ɵɵtext(11);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(12, "button", 7);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_0_Template_button_click_12_listener() { ɵɵrestoreView(_r9); var ctx_r10 = ɵɵnextContext(); return ctx_r10.nextPage(); });
    ɵɵelementStart(13, "span");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.displayedPageSizeOptions.length > 1);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.displayedPageSizeOptions.length <= 1);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.longRangeLabel, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.shortRangeLabel, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.theme === "basic-wide");
    ɵɵadvance(1);
    ɵɵproperty("disabled", !ctx_r0.hasPreviousPage());
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.labels.previous);
    ɵɵadvance(1);
    ɵɵproperty("disabled", !ctx_r0.hasNextPage());
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.labels.next);
} }
var _c0$A = function (a0) { return { active: a0 }; };
function NovoDataTablePagination_ng_container_1_li_8_Template(rf, ctx) { if (rf & 1) {
    var _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 14);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_1_li_8_Template_li_click_0_listener() { ɵɵrestoreView(_r14); var p_r12 = ctx.$implicit; var ctx_r13 = ɵɵnextContext(2); return ctx_r13.selectPage(p_r12.number - 1); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var p_r12 = ctx.$implicit;
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(2, _c0$A, p_r12.number === ctx_r11.page + 1));
    ɵɵadvance(1);
    ɵɵtextInterpolate(p_r12.text);
} }
var _c1$h = function (a0) { return { "disabled": a0 }; };
function NovoDataTablePagination_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    var _r16 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "h5", 10);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "novo-select", 11);
    ɵɵlistener("ngModelChange", function NovoDataTablePagination_ng_container_1_Template_novo_select_ngModelChange_3_listener($event) { ɵɵrestoreView(_r16); var ctx_r15 = ɵɵnextContext(); return ctx_r15.pageSize = $event; })("onSelect", function NovoDataTablePagination_ng_container_1_Template_novo_select_onSelect_3_listener($event) { ɵɵrestoreView(_r16); var ctx_r17 = ɵɵnextContext(); return ctx_r17.changePageSize($event.selected); });
    ɵɵelementEnd();
    ɵɵelement(4, "span", 12);
    ɵɵelementStart(5, "ul", 13);
    ɵɵelementStart(6, "li", 14);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_1_Template_li_click_6_listener() { ɵɵrestoreView(_r16); var ctx_r18 = ɵɵnextContext(); return ctx_r18.selectPage(ctx_r18.page - 1); });
    ɵɵelement(7, "i", 15);
    ɵɵelementEnd();
    ɵɵtemplate(8, NovoDataTablePagination_ng_container_1_li_8_Template, 2, 4, "li", 16);
    ɵɵelementStart(9, "li", 14);
    ɵɵlistener("click", function NovoDataTablePagination_ng_container_1_Template_li_click_9_listener() { ɵɵrestoreView(_r16); var ctx_r19 = ɵɵnextContext(); return ctx_r19.selectPage(ctx_r19.page + 1); });
    ɵɵelement(10, "i", 17);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.labels.itemsPerPage);
    ɵɵadvance(1);
    ɵɵproperty("options", ctx_r1.displayedPageSizeOptions)("placeholder", ctx_r1.labels.select)("ngModel", ctx_r1.pageSize);
    ɵɵattribute("data-feature-id", ctx_r1.dataFeatureId);
    ɵɵadvance(3);
    ɵɵproperty("ngClass", ɵɵpureFunction1(8, _c1$h, ctx_r1.page === 0));
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.pages);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(10, _c1$h, ctx_r1.page + 1 === ctx_r1.totalPages));
} }
var MAX_PAGES_DISPLAYED = 5;
var NovoDataTablePagination = /** @class */ (function () {
    function NovoDataTablePagination(changeDetectorRef, labels, state) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this.theme = 'standard';
        this._page = 0;
        this._pageSizeOptions = [];
        this._length = 0;
        this.pageChange = new EventEmitter();
        this.resetSubscription = this.state.resetSource.subscribe(function () {
            _this.page = 0;
            _this.changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoDataTablePagination.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (page) {
            this._page = page;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.page = this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "pageSize", {
        get: function () {
            return this._pageSize;
        },
        set: function (pageSize) {
            this._pageSize = pageSize;
            this.updateDisplayedPageSizeOptions();
            this.state.pageSize = this._pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "pageSizeOptions", {
        get: function () {
            return this._pageSizeOptions;
        },
        set: function (pageSizeOptions) {
            this._pageSizeOptions = pageSizeOptions;
            this.updateDisplayedPageSizeOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDataTablePagination.prototype, "length", {
        get: function () {
            return this._length;
        },
        set: function (length) {
            this._length = length;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.totalPages = this.calculateTotalPages();
            this.pages = this.getPages(this.page, this.totalPages);
        },
        enumerable: true,
        configurable: true
    });
    NovoDataTablePagination.prototype.ngOnInit = function () {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    };
    NovoDataTablePagination.prototype.ngOnDestroy = function () {
        this.resetSubscription.unsubscribe();
    };
    NovoDataTablePagination.prototype.selectPage = function (page) {
        this.page = page;
        this.emitPageEvent();
    };
    NovoDataTablePagination.prototype.nextPage = function () {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    };
    NovoDataTablePagination.prototype.previousPage = function () {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.pages = this.getPages(this.page, this.totalPages);
        this.emitPageEvent();
    };
    NovoDataTablePagination.prototype.hasPreviousPage = function () {
        return this.page >= 1 && this.pageSize !== 0;
    };
    NovoDataTablePagination.prototype.hasNextPage = function () {
        var numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    };
    NovoDataTablePagination.prototype.changePageSize = function (pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent(true);
    };
    NovoDataTablePagination.prototype.updateDisplayedPageSizeOptions = function () {
        var _this = this;
        if (!this._initialized) {
            return;
        }
        if (!this.displayedPageSizeOptions) {
            this.displayedPageSizeOptions = [];
            this.pageSizeOptions.forEach(function (option) {
                if (option.hasOwnProperty('value')) {
                    _this.displayedPageSizeOptions.push(option);
                }
                else {
                    _this.displayedPageSizeOptions.push({
                        value: option,
                        label: option,
                    });
                }
            });
        }
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.changeDetectorRef.detectChanges();
    };
    NovoDataTablePagination.prototype.emitPageEvent = function (isPageSizeChange) {
        if (isPageSizeChange === void 0) { isPageSizeChange = false; }
        var event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
            filter: this.state.filter,
            sort: this.state.sort,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.state.updates.next(event);
        this.state.onPaginationChange(isPageSizeChange, this.pageSize);
    };
    NovoDataTablePagination.prototype.calculateTotalPages = function () {
        var totalPages = this.pageSize < 1 ? 1 : Math.ceil(this.length / this.pageSize);
        return Math.max(totalPages || 0, 1);
    };
    NovoDataTablePagination.prototype.makePage = function (number, text, isActive) {
        return {
            number: number,
            text: text,
            active: isActive,
        };
    };
    NovoDataTablePagination.prototype.getPages = function (currentPage, totalPages) {
        var pages = [];
        // Default page limits
        var startPage = 1;
        var endPage = totalPages;
        var isMaxSized = MAX_PAGES_DISPLAYED < totalPages;
        // Recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(MAX_PAGES_DISPLAYED / 2), 1);
            endPage = startPage + MAX_PAGES_DISPLAYED - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - MAX_PAGES_DISPLAYED + 1;
            }
        }
        // Add page number links
        for (var number = startPage; number <= endPage; number++) {
            var page = this.makePage(number, number.toString(), number === currentPage);
            pages.push(page);
        }
        return pages;
    };
    NovoDataTablePagination.ɵfac = function NovoDataTablePagination_Factory(t) { return new (t || NovoDataTablePagination)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DataTableState)); };
    NovoDataTablePagination.ɵcmp = ɵɵdefineComponent({ type: NovoDataTablePagination, selectors: [["novo-data-table-pagination"]], hostVars: 2, hostBindings: function NovoDataTablePagination_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassMap(ctx.theme);
        } }, inputs: { theme: "theme", page: "page", pageSize: "pageSize", dataFeatureId: "dataFeatureId", pageSizeOptions: "pageSizeOptions", length: "length" }, outputs: { pageChange: "pageChange" }, decls: 2, vars: 2, consts: [[4, "ngIf"], [1, "novo-data-table-pagination-size"], ["data-automation-id", "novo-data-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange", 4, "ngIf"], ["data-automation-id", "novo-data-table-pagination-range-label-long", 1, "novo-data-table-range-label-long"], ["data-automation-id", "novo-data-table-pagination-range-label-short", 1, "novo-data-table-range-label-short"], ["class", "spacer novo-data-table-spacer", 4, "ngIf"], ["theme", "dialogue", "type", "button", "icon", "previous", "side", "left", "data-automation-id", "novo-data-table-pagination-previous", 1, "novo-data-table-pagination-navigation-previous", 3, "disabled", "click"], ["theme", "dialogue", "type", "button", "icon", "next", "side", "right", "data-automation-id", "novo-data-table-pagination-next", 1, "novo-data-table-pagination-navigation-next", 3, "disabled", "click"], ["data-automation-id", "novo-data-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange"], [1, "spacer", "novo-data-table-spacer"], [1, "rows"], ["data-automation-id", "pager-select", 3, "options", "placeholder", "ngModel", "ngModelChange", "onSelect"], [1, "spacer"], ["data-automation-id", "pager", 1, "pager"], [1, "page", 3, "ngClass", "click"], ["data-automation-id", "pager-previous", 1, "bhi-previous"], ["class", "page", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["data-automation-id", "pager-next", 1, "bhi-next"]], template: function NovoDataTablePagination_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoDataTablePagination_ng_container_0_Template, 15, 9, "ng-container", 0);
            ɵɵtemplate(1, NovoDataTablePagination_ng_container_1_Template, 11, 12, "ng-container", 0);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.theme === "basic" || ctx.theme === "basic-wide");
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.theme === "standard");
        } }, directives: [NgIf, NovoButtonElement, NovoTilesElement, NgControlStatus, NgModel, NovoSelectElement, NgClass, NgForOf], encapsulation: 2, changeDetection: 0 });
    return NovoDataTablePagination;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTablePagination, [{
        type: Component,
        args: [{
                selector: 'novo-data-table-pagination',
                template: "\n      <ng-container *ngIf=\"theme === 'basic' || theme === 'basic-wide'\">\n        <div class=\"novo-data-table-pagination-size\">\n            <novo-tiles *ngIf=\"displayedPageSizeOptions.length > 1\"\n                        [(ngModel)]=\"pageSize\"\n                        [options]=\"displayedPageSizeOptions\"\n                        (onChange)=\"changePageSize($event)\"\n                        data-automation-id=\"novo-data-table-pagination-tiles\">\n            </novo-tiles>\n            <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n        </div>\n\n        <div class=\"novo-data-table-range-label-long\" data-automation-id=\"novo-data-table-pagination-range-label-long\">\n            {{ longRangeLabel }}\n        </div>\n        <div class=\"novo-data-table-range-label-short\" data-automation-id=\"novo-data-table-pagination-range-label-short\">\n            {{ shortRangeLabel }}\n        </div>\n        <span class=\"spacer novo-data-table-spacer\" *ngIf=\"theme === 'basic-wide'\"></span>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-data-table-pagination-navigation-previous\"\n                (click)=\"previousPage()\"\n                icon=\"previous\"\n                side=\"left\"\n                [disabled]=\"!hasPreviousPage()\"\n                data-automation-id=\"novo-data-table-pagination-previous\">\n            <span>{{ labels.previous }}</span>\n        </button>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-data-table-pagination-navigation-next\"\n                (click)=\"nextPage()\"\n                icon=\"next\"\n                side=\"right\"\n                [disabled]=\"!hasNextPage()\"\n                data-automation-id=\"novo-data-table-pagination-next\">\n            <span>{{ labels.next }}</span>\n        </button>\n      </ng-container>\n      <ng-container *ngIf=\"theme === 'standard'\">\n        <h5 class=\"rows\">{{ labels.itemsPerPage }}</h5>\n        <novo-select\n          [options]=\"displayedPageSizeOptions\"\n          [placeholder]=\"labels.select\"\n          [(ngModel)]=\"pageSize\"\n          (onSelect)=\"changePageSize($event.selected)\"\n          data-automation-id=\"pager-select\"\n          [attr.data-feature-id]=\"dataFeatureId\">\n        </novo-select>\n        <span class=\"spacer\"></span>\n        <ul class=\"pager\" data-automation-id=\"pager\">\n            <li class=\"page\" (click)=\"selectPage(page - 1)\" [ngClass]=\"{ 'disabled': page === 0 }\"><i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i></li>\n            <li class=\"page\" [ngClass]=\"{active: p.number === page + 1}\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.number - 1)\">{{ p.text }}</li>\n            <li class=\"page\" (click)=\"selectPage(page + 1)\" [ngClass]=\"{ 'disabled': page + 1 === totalPages }\"><i class=\"bhi-next\" data-automation-id=\"pager-next\"></i></li>\n        </ul>\n      </ng-container>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: DataTableState }]; }, { theme: [{
            type: HostBinding,
            args: ['class']
        }, {
            type: Input
        }], page: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], dataFeatureId: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], length: [{
            type: Input
        }], pageChange: [{
            type: Output
        }] }); })();

function interpolateCell(value, col) {
    if (col.format) {
        return Helpers.interpolateWithFallback(col.format, value);
    }
    return value;
}
var DataTableInterpolatePipe = /** @class */ (function () {
    function DataTableInterpolatePipe() {
    }
    DataTableInterpolatePipe.prototype.transform = function (value, column) {
        if (!Helpers.isEmpty(value)) {
            return interpolateCell(value, column);
        }
        return '';
    };
    DataTableInterpolatePipe.ɵfac = function DataTableInterpolatePipe_Factory(t) { return new (t || DataTableInterpolatePipe)(); };
    DataTableInterpolatePipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableInterpolate", type: DataTableInterpolatePipe, pure: true });
    return DataTableInterpolatePipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DataTableInterpolatePipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableInterpolate',
                pure: true,
            }]
    }], null, null); })();
var DateTableDateRendererPipe = /** @class */ (function () {
    function DateTableDateRendererPipe(labels) {
        this.labels = labels;
    }
    DateTableDateRendererPipe.prototype.transform = function (value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDate(interpolateCell(value, column));
        }
        return '';
    };
    DateTableDateRendererPipe.ɵfac = function DateTableDateRendererPipe_Factory(t) { return new (t || DateTableDateRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
    DateTableDateRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableDateRenderer", type: DateTableDateRendererPipe, pure: true });
    return DateTableDateRendererPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableDateRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableDateRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
var DateTableDateTimeRendererPipe = /** @class */ (function () {
    function DateTableDateTimeRendererPipe(labels) {
        this.labels = labels;
    }
    DateTableDateTimeRendererPipe.prototype.transform = function (value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatDateShort(interpolateCell(value, column));
        }
        return '';
    };
    DateTableDateTimeRendererPipe.ɵfac = function DateTableDateTimeRendererPipe_Factory(t) { return new (t || DateTableDateTimeRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
    DateTableDateTimeRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableDateTimeRenderer", type: DateTableDateTimeRendererPipe, pure: true });
    return DateTableDateTimeRendererPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableDateTimeRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableDateTimeRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
var DateTableTimeRendererPipe = /** @class */ (function () {
    function DateTableTimeRendererPipe(labels) {
        this.labels = labels;
    }
    DateTableTimeRendererPipe.prototype.transform = function (value, column) {
        if (!Helpers.isEmpty(value)) {
            return column.format ? value : this.labels.formatTime(interpolateCell(value, column));
        }
        return '';
    };
    DateTableTimeRendererPipe.ɵfac = function DateTableTimeRendererPipe_Factory(t) { return new (t || DateTableTimeRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
    DateTableTimeRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableTimeRenderer", type: DateTableTimeRendererPipe, pure: true });
    return DateTableTimeRendererPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableTimeRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableTimeRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
var DateTableNumberRendererPipe = /** @class */ (function () {
    function DateTableNumberRendererPipe(labels) {
        this.labels = labels;
    }
    DateTableNumberRendererPipe.prototype.transform = function (value, column, isPercent) {
        if (isPercent === void 0) { isPercent = false; }
        if (!Helpers.isEmpty(value)) {
            var val = interpolateCell(value, column);
            if (isPercent && Helpers.isNumber(val)) {
                val = "" + Number(val) * 100;
            }
            return "" + this.labels.formatNumber(val) + (isPercent ? '%' : '');
        }
        return '';
    };
    DateTableNumberRendererPipe.ɵfac = function DateTableNumberRendererPipe_Factory(t) { return new (t || DateTableNumberRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
    DateTableNumberRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableNumberRenderer", type: DateTableNumberRendererPipe, pure: true });
    return DateTableNumberRendererPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableNumberRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableNumberRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
var DataTableBigDecimalRendererPipe = /** @class */ (function () {
    function DataTableBigDecimalRendererPipe(labels) {
        this.labels = labels;
    }
    DataTableBigDecimalRendererPipe.prototype.transform = function (value, column) {
        if (!Helpers.isEmpty(value)) {
            var val = interpolateCell(value, column);
            return this.labels.formatBigDecimal(Number(val));
        }
        return '';
    };
    DataTableBigDecimalRendererPipe.ɵfac = function DataTableBigDecimalRendererPipe_Factory(t) { return new (t || DataTableBigDecimalRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
    DataTableBigDecimalRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableBigDecimalRenderer", type: DataTableBigDecimalRendererPipe, pure: true });
    return DataTableBigDecimalRendererPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DataTableBigDecimalRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableBigDecimalRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();
var DateTableCurrencyRendererPipe = /** @class */ (function () {
    function DateTableCurrencyRendererPipe(labels) {
        this.labels = labels;
    }
    DateTableCurrencyRendererPipe.prototype.transform = function (value, column) {
        if (!Helpers.isEmpty(value)) {
            var val = interpolateCell(value, column);
            return this.labels.formatCurrency(Number(val));
        }
        return '';
    };
    DateTableCurrencyRendererPipe.ɵfac = function DateTableCurrencyRendererPipe_Factory(t) { return new (t || DateTableCurrencyRendererPipe)(ɵɵdirectiveInject(NovoLabelService)); };
    DateTableCurrencyRendererPipe.ɵpipe = ɵɵdefinePipe({ name: "dataTableCurrencyRenderer", type: DateTableCurrencyRendererPipe, pure: true });
    return DateTableCurrencyRendererPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateTableCurrencyRendererPipe, [{
        type: Pipe,
        args: [{
                name: 'dataTableCurrencyRenderer',
                pure: true,
            }]
    }], function () { return [{ type: NovoLabelService }]; }, null); })();

var NovoDataTableExpandDirective = /** @class */ (function () {
    function NovoDataTableExpandDirective(vcRef, state, dataTable) {
        var _this = this;
        this.vcRef = vcRef;
        this.state = state;
        this.dataTable = dataTable;
        this.shouldExpandAllRows = function (targetId) { return targetId === undefined; };
        this.shouldExpandOneRow = function (targetId) { return targetId === _this.row.id; };
        this.subscription = this.state.expandSource.subscribe(function (targetId) {
            if (_this.shouldExpandAllRows(targetId) || _this.shouldExpandOneRow(targetId)) {
                if (dataTable.isExpanded(_this.row)) {
                    _this.render();
                }
                else {
                    _this.clear();
                }
            }
        });
    }
    NovoDataTableExpandDirective.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
    };
    NovoDataTableExpandDirective.prototype.onClick = function (event) {
        if (event.target.hasAttribute('novo-data-table-expander')) {
            Helpers.swallowEvent(event);
            this.dataTable.expandRow(this.row);
        }
    };
    NovoDataTableExpandDirective.prototype.clear = function () {
        this.vcRef.clear();
    };
    NovoDataTableExpandDirective.prototype.render = function () {
        this.vcRef.clear();
        if (this.template && this.row) {
            this.vcRef.createEmbeddedView(this.template, { $implicit: this.row });
        }
    };
    NovoDataTableExpandDirective.ɵfac = function NovoDataTableExpandDirective_Factory(t) { return new (t || NovoDataTableExpandDirective)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(DataTableState), ɵɵdirectiveInject(NovoDataTable)); };
    NovoDataTableExpandDirective.ɵdir = ɵɵdefineDirective({ type: NovoDataTableExpandDirective, selectors: [["", "novoDataTableExpand", ""]], hostBindings: function NovoDataTableExpandDirective_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoDataTableExpandDirective_click_HostBindingHandler($event) { return ctx.onClick($event); });
        } }, inputs: { row: "row", template: ["novoDataTableExpand", "template"] } });
    return NovoDataTableExpandDirective;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableExpandDirective, [{
        type: Directive,
        args: [{
                selector: '[novoDataTableExpand]',
            }]
    }], function () { return [{ type: ViewContainerRef }, { type: DataTableState }, { type: NovoDataTable }]; }, { row: [{
            type: Input
        }], template: [{
            type: Input,
            args: ['novoDataTableExpand']
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

var NovoDataTableModule = /** @class */ (function () {
    function NovoDataTableModule() {
    }
    NovoDataTableModule.ɵmod = ɵɵdefineNgModule({ type: NovoDataTableModule });
    NovoDataTableModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDataTableModule_Factory(t) { return new (t || NovoDataTableModule)(); }, providers: [DataTableState], imports: [[
                NovoDatePickerModule,
                CdkTableModule,
                CommonModule,
                FormsModule,
                NovoButtonModule,
                NovoDropdownModule,
                NovoFormExtrasModule,
                NovoLoadingModule,
                NovoTilesModule,
                NovoSearchBoxModule,
                NovoCommonModule,
                NovoSelectModule,
                NovoTooltipModule,
            ]] });
    return NovoDataTableModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDataTableModule, { declarations: [DataTableInterpolatePipe,
        DateTableDateRendererPipe,
        DateTableCurrencyRendererPipe,
        DateTableDateTimeRendererPipe,
        DateTableNumberRendererPipe,
        DateTableTimeRendererPipe,
        DataTableBigDecimalRendererPipe,
        NovoDataTableCellHeader,
        NovoDataTableSortFilter,
        NovoDataTableHeaderCell,
        NovoDataTableCell,
        NovoDataTableHeaderRow,
        NovoDataTableRow,
        NovoDataTablePagination,
        NovoDataTableCheckboxCell,
        NovoDataTableCheckboxHeaderCell,
        NovoDataTableExpandCell,
        NovoDataTableExpandHeaderCell,
        NovoDataTable,
        NovoDataTableExpandDirective,
        NovoDataTableClearButton], imports: [NovoDatePickerModule,
        CdkTableModule,
        CommonModule,
        FormsModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoFormExtrasModule,
        NovoLoadingModule,
        NovoTilesModule,
        NovoSearchBoxModule,
        NovoCommonModule,
        NovoSelectModule,
        NovoTooltipModule], exports: [NovoDataTable,
        DataTableInterpolatePipe,
        DateTableDateRendererPipe,
        DateTableCurrencyRendererPipe,
        DateTableDateTimeRendererPipe,
        DateTableNumberRendererPipe,
        DateTableTimeRendererPipe,
        DataTableBigDecimalRendererPipe,
        NovoDataTableClearButton] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDataTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NovoDatePickerModule,
                    CdkTableModule,
                    CommonModule,
                    FormsModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                    NovoCommonModule,
                    NovoSelectModule,
                    NovoTooltipModule,
                ],
                declarations: [
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    DataTableBigDecimalRendererPipe,
                    NovoDataTableCellHeader,
                    NovoDataTableSortFilter,
                    NovoDataTableHeaderCell,
                    NovoDataTableCell,
                    NovoDataTableHeaderRow,
                    NovoDataTableRow,
                    NovoDataTablePagination,
                    NovoDataTableCheckboxCell,
                    NovoDataTableCheckboxHeaderCell,
                    NovoDataTableExpandCell,
                    NovoDataTableExpandHeaderCell,
                    NovoDataTable,
                    NovoDataTableExpandDirective,
                    NovoDataTableClearButton,
                ],
                providers: [DataTableState],
                exports: [
                    NovoDataTable,
                    DataTableInterpolatePipe,
                    DateTableDateRendererPipe,
                    DateTableCurrencyRendererPipe,
                    DateTableDateTimeRendererPipe,
                    DateTableNumberRendererPipe,
                    DateTableTimeRendererPipe,
                    DataTableBigDecimalRendererPipe,
                    NovoDataTableClearButton,
                ],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoDataTable, [NovoDatePickerElement, NovoDatePickerInputElement, CdkTable, CdkRowDef, CdkCellDef, CdkCellOutlet, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkCell, CdkRow, CdkHeaderCell, CdkFooterCell, CdkHeaderRow, CdkHeaderRowDef, CdkFooterRow, CdkFooterRowDef, DataRowOutlet, HeaderRowOutlet, FooterRowOutlet, CdkTextColumn, NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, NgModel, NgModelGroup, NgForm, NovoButtonElement, NovoDropdownElement, NovoItemElement, NovoDropdownListElement, NovoDropDownItemHeaderElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement, NovoLoadingElement, NovoSpinnerElement, NovoIsLoadingDirective, NovoLoadedDirective, NovoSkeletonDirective, NovoTilesElement, NovoSearchBoxElement, NovoTemplate, NovoSelectElement, TooltipDirective, NovoDataTableCellHeader,
    NovoDataTableSortFilter,
    NovoDataTableHeaderCell,
    NovoDataTableCell,
    NovoDataTableHeaderRow,
    NovoDataTableRow,
    NovoDataTablePagination,
    NovoDataTableCheckboxCell,
    NovoDataTableCheckboxHeaderCell,
    NovoDataTableExpandCell,
    NovoDataTableExpandHeaderCell,
    NovoDataTable,
    NovoDataTableExpandDirective,
    NovoDataTableClearButton], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe, DataTableInterpolatePipe,
    DateTableDateRendererPipe,
    DateTableCurrencyRendererPipe,
    DateTableDateTimeRendererPipe,
    DateTableNumberRendererPipe,
    DateTableTimeRendererPipe,
    DataTableBigDecimalRendererPipe]);

var RemoteDataTableService = /** @class */ (function () {
    function RemoteDataTableService() {
    }
    return RemoteDataTableService;
}());

function NovoTimePickerElement_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 6);
    ɵɵelementStart(1, "span", 7);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtext(3, ":");
    ɵɵelementStart(4, "span", 8);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.hours);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.minutes);
} }
function NovoTimePickerElement_div_3_span_1_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 11);
    ɵɵlistener("click", function NovoTimePickerElement_div_3_span_1_Template_span_click_0_listener($event) { ɵɵrestoreView(_r7); var period_r5 = ctx.$implicit; var ctx_r6 = ɵɵnextContext(2); return ctx_r6.setPeriod($event, period_r5, true); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var period_r5 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", ctx_r4.meridian == period_r5);
    ɵɵattribute("data-automation-id", period_r5);
    ɵɵadvance(1);
    ɵɵtextInterpolate(period_r5);
} }
function NovoTimePickerElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵtemplate(1, NovoTimePickerElement_div_3_span_1_Template, 2, 4, "span", 10);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.MERIDIANS);
} }
function NovoTimePickerElement_div_4_novo_list_item_2_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 17);
} }
function NovoTimePickerElement_div_4_novo_list_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 15);
    ɵɵlistener("click", function NovoTimePickerElement_div_4_novo_list_item_2_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r12); var increment_r9 = ctx.$implicit; var ctx_r11 = ɵɵnextContext(2); return ctx_r11.setValue($event, increment_r9); });
    ɵɵelementStart(1, "item-content");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoTimePickerElement_div_4_novo_list_item_2_i_3_Template, 1, 0, "i", 16);
    ɵɵelementEnd();
} if (rf & 2) {
    var increment_r9 = ctx.$implicit;
    var ctx_r8 = ɵɵnextContext(2);
    ɵɵclassProp("active", increment_r9 == ctx_r8.selected);
    ɵɵattribute("data-automation-id", increment_r9);
    ɵɵadvance(2);
    ɵɵtextInterpolate(increment_r9);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", increment_r9 == ctx_r8.selected);
} }
function NovoTimePickerElement_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵelementStart(1, "novo-list", 13);
    ɵɵtemplate(2, NovoTimePickerElement_div_4_novo_list_item_2_Template, 4, 5, "novo-list-item", 14);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r2.increments);
} }
var _c0$B = function (a0) { return { active: a0 }; };
function NovoTimePickerElement_div_5_span_9_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 30);
    ɵɵlistener("click", function NovoTimePickerElement_div_5_span_9_Template_span_click_0_listener($event) { ɵɵrestoreView(_r17); var hour_r15 = ctx.$implicit; var ctx_r16 = ɵɵnextContext(2); return ctx_r16.setHours($event, hour_r15, true); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var hour_r15 = ctx.$implicit;
    var ctx_r13 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c0$B, ctx_r13.activeHour == hour_r15));
    ɵɵattribute("data-automation-id", hour_r15);
    ɵɵadvance(1);
    ɵɵtextInterpolate(hour_r15);
} }
function NovoTimePickerElement_div_5_span_11_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "span", 31);
    ɵɵlistener("click", function NovoTimePickerElement_div_5_span_11_Template_span_click_0_listener($event) { ɵɵrestoreView(_r20); var minute_r18 = ctx.$implicit; var ctx_r19 = ɵɵnextContext(2); return ctx_r19.setMinutes($event, minute_r18, true); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var minute_r18 = ctx.$implicit;
    var ctx_r14 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c0$B, ctx_r14.activeMinute == minute_r18));
    ɵɵattribute("data-automation-id", minute_r18);
    ɵɵadvance(1);
    ɵɵtextInterpolate(minute_r18);
} }
var _c1$i = function (a0) { return { between: a0 }; };
function NovoTimePickerElement_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 18);
    ɵɵelementStart(1, "div", 19);
    ɵɵelementStart(2, "div", 20);
    ɵɵelement(3, "span", 21);
    ɵɵelementStart(4, "span", 22);
    ɵɵelement(5, "span", 23);
    ɵɵelementEnd();
    ɵɵelementStart(6, "span", 24);
    ɵɵelement(7, "span", 25);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(8, "div", 26);
    ɵɵtemplate(9, NovoTimePickerElement_div_5_span_9_Template, 2, 5, "span", 27);
    ɵɵelementEnd();
    ɵɵelementStart(10, "div", 28);
    ɵɵtemplate(11, NovoTimePickerElement_div_5_span_11_Template, 2, 5, "span", 29);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(4);
    ɵɵproperty("ngClass", ctx_r3.hoursClass);
    ɵɵadvance(2);
    ɵɵproperty("ngClass", ctx_r3.minutesClass);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction1(5, _c1$i, ctx_r3.inBetween));
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r3.HOURS);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r3.MINUTES);
} }
// Value accessor for the component (supports ngModel)
var TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoTimePickerElement; }),
    multi: true,
};
var NovoTimePickerElement = /** @class */ (function () {
    function NovoTimePickerElement() {
        this.military = false;
        this.analog = false;
        this.inline = false;
        this.onSelect = new EventEmitter();
        this.hours = 12;
        this.minutes = 0;
        this.value = null;
        this.increments = [];
        this.MERIDIANS = ['am', 'pm'];
        this.MINUTES = ['05', '10', '15', '20', '25', '30', '35', '40', '45', '50', '55', '00'];
        this.HOURS = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    NovoTimePickerElement.prototype.flatten = function (arr) {
        var _a;
        return (_a = Array.prototype).concat.apply(_a, __spread(arr));
    };
    NovoTimePickerElement.prototype.ngOnInit = function () {
        if (this.military) {
            this.HOURS = __spread(['0'], this.HOURS, ['13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23']);
            this.increments = this.flatten(__spread(this.HOURS.map(function (hour) { return [hour + ":00", hour + ":15", hour + ":30", hour + ":45"]; })));
        }
        else {
            var hours = ['12', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11'];
            this.increments = this.flatten(__spread(hours.map(function (hour) { return [hour + ":00 AM", hour + ":15 AM", hour + ":30 AM", hour + ":45 AM"]; }), hours.map(function (hour) { return [hour + ":00 PM", hour + ":15 PM", hour + ":30 PM", hour + ":45 PM"]; })));
        }
        this.ngOnChanges();
    };
    NovoTimePickerElement.prototype.ngOnChanges = function (changes) {
        if (this.model) {
            this.init(this.model, false);
        }
        else {
            this.selected = null;
            this.init(new Date(), false);
        }
    };
    NovoTimePickerElement.prototype.init = function (value, dispatch) {
        var _value = new Date(value);
        var hours = _value.getHours();
        var minutes = _value.getMinutes();
        if (!this.military) {
            this.meridian = hours >= 12 ? 'pm' : 'am';
            hours = hours % 12;
            hours = hours || 12;
        }
        minutes = minutes < 10 ? "0" + minutes : minutes;
        this.setHours(null, hours, dispatch);
        this.setMinutes(null, minutes, dispatch);
        this.checkBetween(minutes);
    };
    NovoTimePickerElement.prototype.checkBetween = function (value) {
        this.inBetween = this.MINUTES.indexOf(String(value)) < 0;
    };
    NovoTimePickerElement.prototype.setValue = function (event, value) {
        Helpers.swallowEvent(event);
        this.selected = value;
        var _a = __read(value.split(' '), 2), time = _a[0], meridian = _a[1];
        var _b = __read(time.split(':'), 2), hours = _b[0], minutes = _b[1];
        this.hours = hours;
        this.minutes = minutes;
        this.meridian = meridian;
        this.dispatchChange();
    };
    NovoTimePickerElement.prototype.setHours = function (event, hours, dispatch) {
        Helpers.swallowEvent(event);
        this.hours = hours;
        this.hoursClass = "hour-" + hours;
        this.activeHour = hours;
        if (dispatch) {
            this.dispatchChange();
        }
    };
    NovoTimePickerElement.prototype.setMinutes = function (event, minutes, dispatch) {
        Helpers.swallowEvent(event);
        this.minutes = minutes;
        this.minutesClass = "min-" + minutes;
        this.activeMinute = minutes;
        this.checkBetween(minutes);
        if (dispatch) {
            this.dispatchChange();
        }
    };
    NovoTimePickerElement.prototype.setPeriod = function (event, period, dispatch) {
        Helpers.swallowEvent(event);
        this.meridian = period;
        if (dispatch) {
            this.dispatchChange();
        }
    };
    NovoTimePickerElement.prototype.dispatchChange = function () {
        var hours = Number(this.hours);
        if (!this.military) {
            hours = this.meridian.toLowerCase() === 'pm' ? hours + 12 : hours;
            // Special case for 12
            if (this.meridian.toLowerCase() === 'pm' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian.toLowerCase() === 'am' && hours === 12) {
                hours = 0;
            }
        }
        var value = new Date();
        value.setHours(hours);
        value.setMinutes(this.minutes);
        value.setSeconds(0);
        this.value = this.hours + ":" + this.minutes + " " + this.meridian;
        this.onSelect.next({
            hours: hours,
            minutes: this.minutes,
            meridian: this.meridian,
            date: value,
            text: this.value,
        });
        this._onChange(value);
    };
    // ValueAccessor Functions
    NovoTimePickerElement.prototype.writeValue = function (model) {
        this.model = model;
        if (Helpers.isDate(model)) {
            this.init(model, false);
        }
    };
    NovoTimePickerElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoTimePickerElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoTimePickerElement.ɵfac = function NovoTimePickerElement_Factory(t) { return new (t || NovoTimePickerElement)(); };
    NovoTimePickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoTimePickerElement, selectors: [["novo-time-picker"]], hostVars: 2, hostBindings: function NovoTimePickerElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("military", ctx.military);
        } }, inputs: { military: "military", analog: "analog", inline: "inline" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([TIME_PICKER_VALUE_ACCESSOR]), ɵɵNgOnChangesFeature], decls: 6, vars: 8, consts: [[1, "digital"], [1, "digital--inner"], ["class", "digital--clock", 4, "ngIf"], ["class", "control-block", 4, "ngIf"], ["class", "increments", 4, "ngIf"], ["class", "analog", 4, "ngIf"], [1, "digital--clock"], ["data-automation-id", "novo-time-picker-hours", 1, "hours"], ["data-automation-id", "novo-time-picker-minutes", 1, "minutes"], [1, "control-block"], ["class", "digital--period", 3, "active", "click", 4, "ngFor", "ngForOf"], [1, "digital--period", 3, "click"], [1, "increments"], ["direction", "vertical", "data-automation-id", "novo-time-picker-increments"], [3, "active", "click", 4, "ngFor", "ngForOf"], [3, "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], [1, "analog"], [1, "analog--inner"], [1, "analog--face"], [1, "analog--center"], [1, "analog--hand--hours", 3, "ngClass"], [1, "analog--ball"], [1, "analog--hand--minutes", 3, "ngClass"], [1, "analog--ball", 3, "ngClass"], [1, "analog--hours"], ["class", "analog--hour", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "analog--minutes"], ["class", "analog--minute", 3, "ngClass", "click", 4, "ngFor", "ngForOf"], [1, "analog--hour", 3, "ngClass", "click"], [1, "analog--minute", 3, "ngClass", "click"]], template: function NovoTimePickerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "div", 1);
            ɵɵtemplate(2, NovoTimePickerElement_span_2_Template, 6, 2, "span", 2);
            ɵɵtemplate(3, NovoTimePickerElement_div_3_Template, 2, 1, "div", 3);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵtemplate(4, NovoTimePickerElement_div_4_Template, 3, 1, "div", 4);
            ɵɵtemplate(5, NovoTimePickerElement_div_5_Template, 12, 7, "div", 5);
        } if (rf & 2) {
            ɵɵclassProp("inline", ctx.inline)("military", ctx.military);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.inline);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.military);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.analog);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.analog);
        } }, directives: [NgIf, NgForOf, NovoListElement, NovoListItemElement, NovoItemContentElement, NgClass], encapsulation: 2 });
    return NovoTimePickerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-time-picker',
                providers: [TIME_PICKER_VALUE_ACCESSOR],
                template: "\n        <div class=\"digital\" [class.inline]=\"inline\" [class.military]=\"military\">\n            <div class=\"digital--inner\">\n                <span class=\"digital--clock\" *ngIf=\"!inline\">\n                    <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{hours}}</span>:<span class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{minutes}}</span>\n                </span>\n                <div class=\"control-block\" *ngIf=\"!military\">\n                    <span *ngFor=\"let period of MERIDIANS\" class=\"digital--period\" [class.active]=\"meridian==period\" (click)=\"setPeriod($event, period, true)\" [attr.data-automation-id]=\"period\">{{period}}</span>\n                </div>\n            </div>\n        </div>\n        <div class=\"increments\" *ngIf=\"!analog\">\n            <novo-list direction=\"vertical\" data-automation-id=\"novo-time-picker-increments\">\n                <novo-list-item *ngFor=\"let increment of increments\" (click)=\"setValue($event, increment)\" [class.active]=\"increment==selected\" [attr.data-automation-id]=\"increment\">\n                    <item-content>{{increment}}</item-content>\n                    <i *ngIf=\"increment==selected\" class=\"bhi-check\"></i>\n                </novo-list-item>\n            </novo-list>\n        </div>\n        <div class=\"analog\" *ngIf=\"analog\">\n            <div class=\"analog--inner\">\n                <div class=\"analog--face\">\n                    <span class=\"analog--center\"></span>\n                    <span class=\"analog--hand--hours\" [ngClass]=\"hoursClass\">\n                        <span class=\"analog--ball\"></span>\n                    </span>\n                    <span class=\"analog--hand--minutes\" [ngClass]=\"minutesClass\">\n                        <span class=\"analog--ball\" [ngClass]=\"{between: inBetween}\"></span>\n                    </span>\n                </div>\n                <div class=\"analog--hours\">\n                    <span *ngFor=\"let hour of HOURS\" class=\"analog--hour\" [ngClass]=\"{active: activeHour == hour}\" (click)=\"setHours($event, hour, true)\" [attr.data-automation-id]=\"hour\">{{hour}}</span>\n                </div>\n                <div class=\"analog--minutes\">\n                    <span *ngFor=\"let minute of MINUTES\" class=\"analog--minute\" [ngClass]=\"{active: activeMinute == minute}\" (click)=\"setMinutes($event, minute, true)\" [attr.data-automation-id]=\"minute\">{{minute}}</span>\n                </div>\n            </div>\n        </div>\n    ",
                host: {
                    '[class.military]': 'military',
                },
            }]
    }], null, { military: [{
            type: Input
        }], analog: [{
            type: Input
        }], inline: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

// NG2
function NovoDateTimePickerElement_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 13);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.meridian, "");
} }
// Value accessor for the component (supports ngModel)
var DATE_TIME_PICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDateTimePickerElement; }),
    multi: true,
};
var NovoDateTimePickerElement = /** @class */ (function () {
    function NovoDateTimePickerElement(labels, element) {
        this.labels = labels;
        this.element = element;
        this.weekStart = 0;
        // Select callback for output
        this.onSelect = new EventEmitter(false);
        this.componentTabState = 'date';
        this.datePickerValue = new Date();
        this.timePickerValue = new Date();
        this._onChange = function () { };
        this._onTouched = function () { };
    }
    NovoDateTimePickerElement.prototype.toggleView = function (tab) {
        this.componentTabState = tab;
    };
    NovoDateTimePickerElement.prototype.setDateLabels = function (value) {
        this.selectedLabel = this.labels.formatDateWithFormat(value, {
            month: 'short',
            day: '2-digit',
            year: 'numeric',
        });
    };
    NovoDateTimePickerElement.prototype.setTimeLabels = function (value) {
        var hours = value.getHours();
        var minutes = value.getMinutes();
        this.meridian = value.toLocaleTimeString().slice(-2);
        if (!this.military) {
            hours = this.meridian === 'PM' && hours > 12 ? hours - 12 : hours;
            // Special case for 12
            if (this.meridian === 'PM' && hours === 24) {
                hours = 12;
            }
            else if (this.meridian === 'AM' && hours === 0) {
                hours = 12;
            }
        }
        this.hours = hours.toString();
        this.minutes = minutes.toString().length === 1 ? "0" + minutes.toString() : minutes.toString();
    };
    NovoDateTimePickerElement.prototype.onDateSelected = function (event) {
        this.datePickerValue = event.date;
        this.model = this.createFullDateValue(this.datePickerValue, this.timePickerValue);
        this.setDateLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
        this.toggleView('time');
    };
    NovoDateTimePickerElement.prototype.onTimeSelected = function (event) {
        this.timePickerValue = event.date;
        this.model = this.createFullDateValue(this.model, this.timePickerValue);
        this.setTimeLabels(this.model);
        this.onSelect.emit({ date: this.model });
        this._onChange(this.model);
    };
    NovoDateTimePickerElement.prototype.createFullDateValue = function (datePickerValue, timePickerValue) {
        return setMilliseconds(setSeconds(setMinutes(setHours(datePickerValue, getHours(timePickerValue)), getMinutes(timePickerValue)), getSeconds(timePickerValue)), getMilliseconds(timePickerValue));
    };
    // ValueAccessor Functions
    NovoDateTimePickerElement.prototype.writeValue = function (model) {
        this.model = model;
        if (Helpers.isEmpty(model)) {
            this.model = new Date();
        }
        else if (!isNaN(model)) {
            this.model = new Date(model);
        }
        this.datePickerValue = this.model;
        this.timePickerValue = this.model;
        if (Helpers.isDate(this.model)) {
            this.setDateLabels(this.model);
            this.setTimeLabels(this.model);
        }
    };
    NovoDateTimePickerElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoDateTimePickerElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoDateTimePickerElement.ɵfac = function NovoDateTimePickerElement_Factory(t) { return new (t || NovoDateTimePickerElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ElementRef)); };
    NovoDateTimePickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoDateTimePickerElement, selectors: [["novo-date-time-picker"]], inputs: { minYear: "minYear", maxYear: "maxYear", start: "start", end: "end", military: "military", weekStart: "weekStart" }, outputs: { onSelect: "onSelect" }, features: [ɵɵProvidersFeature([DATE_TIME_PICKER_VALUE_ACCESSOR])], decls: 17, vars: 16, consts: [[1, "date-time-container"], [1, "date-time-tabs"], ["data-automation-id", "novo-date-time-date-tab", 1, "date-tab", 3, "click"], ["data-automation-id", "novo-date-time-time-tab", 1, "time-tab", 3, "click"], ["data-automation-id", "novo-time-picker-hours", 1, "hours"], ["data-automation-id", "novo-time-picker-minutes", 1, "minutes"], ["class", "meridian", 4, "ngIf"], [1, "date-time-indicator"], [1, "view-container"], [1, "calendar"], ["inline", "true", 3, "ngModel", "minYear", "maxYear", "start", "end", "weekStart", "onSelect", "ngModelChange"], [1, "time-picker"], ["inline", "true", 3, "ngModel", "military", "onSelect", "ngModelChange"], [1, "meridian"]], template: function NovoDateTimePickerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "div", 1);
            ɵɵelementStart(2, "span", 2);
            ɵɵlistener("click", function NovoDateTimePickerElement_Template_span_click_2_listener() { return ctx.toggleView("date"); });
            ɵɵtext(3);
            ɵɵelementEnd();
            ɵɵelementStart(4, "span", 3);
            ɵɵlistener("click", function NovoDateTimePickerElement_Template_span_click_4_listener() { return ctx.toggleView("time"); });
            ɵɵelementStart(5, "span", 4);
            ɵɵtext(6);
            ɵɵelementEnd();
            ɵɵtext(7, ":");
            ɵɵelementStart(8, "span", 5);
            ɵɵtext(9);
            ɵɵelementEnd();
            ɵɵtemplate(10, NovoDateTimePickerElement_span_10_Template, 2, 1, "span", 6);
            ɵɵelementEnd();
            ɵɵelement(11, "i", 7);
            ɵɵelementEnd();
            ɵɵelementStart(12, "div", 8);
            ɵɵelementStart(13, "div", 9);
            ɵɵelementStart(14, "novo-date-picker", 10);
            ɵɵlistener("onSelect", function NovoDateTimePickerElement_Template_novo_date_picker_onSelect_14_listener($event) { return ctx.onDateSelected($event); })("ngModelChange", function NovoDateTimePickerElement_Template_novo_date_picker_ngModelChange_14_listener($event) { return ctx.model = $event; });
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(15, "div", 11);
            ɵɵelementStart(16, "novo-time-picker", 12);
            ɵɵlistener("onSelect", function NovoDateTimePickerElement_Template_novo_time_picker_onSelect_16_listener($event) { return ctx.onTimeSelected($event); })("ngModelChange", function NovoDateTimePickerElement_Template_novo_time_picker_ngModelChange_16_listener($event) { return ctx.model = $event; });
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("@dateTextState", ctx.componentTabState);
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.selectedLabel);
            ɵɵadvance(1);
            ɵɵproperty("@timeTextState", ctx.componentTabState);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.hours);
            ɵɵadvance(3);
            ɵɵtextInterpolate(ctx.minutes);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.military);
            ɵɵadvance(1);
            ɵɵproperty("@indicatorState", ctx.componentTabState);
            ɵɵadvance(1);
            ɵɵproperty("@containerState", ctx.componentTabState);
            ɵɵadvance(2);
            ɵɵproperty("ngModel", ctx.model)("minYear", ctx.minYear)("maxYear", ctx.maxYear)("start", ctx.start)("end", ctx.end)("weekStart", ctx.weekStart);
            ɵɵadvance(2);
            ɵɵproperty("ngModel", ctx.model)("military", ctx.military);
        } }, directives: [NgIf, NovoDatePickerElement, NgControlStatus, NgModel, NovoTimePickerElement], encapsulation: 2, data: { animation: [
                trigger('dateTextState', [
                    state('date', style({
                        opacity: '1.0',
                    })),
                    state('time', style({
                        opacity: '0.6',
                    })),
                    transition('date <=> time', animate('200ms ease-in')),
                ]),
                trigger('timeTextState', [
                    state('date', style({
                        opacity: '0.6',
                    })),
                    state('time', style({
                        opacity: '1.0',
                    })),
                    transition('date <=> time', animate('200ms ease-in')),
                ]),
                trigger('indicatorState', [
                    state('date', style({
                        transform: 'translateX(0%)',
                    })),
                    state('time', style({
                        transform: 'translateX(100%)',
                    })),
                    transition('date <=> time', animate('200ms ease-in')),
                ]),
                trigger('containerState', [
                    state('date', style({
                        transform: 'translateX(0%)',
                    })),
                    state('time', style({
                        transform: 'translateX(-100%)',
                    })),
                    transition('date <=> time', animate('200ms ease-in')),
                ]),
            ] } });
    return NovoDateTimePickerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateTimePickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-time-picker',
                providers: [DATE_TIME_PICKER_VALUE_ACCESSOR],
                animations: [
                    trigger('dateTextState', [
                        state('date', style({
                            opacity: '1.0',
                        })),
                        state('time', style({
                            opacity: '0.6',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                    trigger('timeTextState', [
                        state('date', style({
                            opacity: '0.6',
                        })),
                        state('time', style({
                            opacity: '1.0',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                    trigger('indicatorState', [
                        state('date', style({
                            transform: 'translateX(0%)',
                        })),
                        state('time', style({
                            transform: 'translateX(100%)',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                    trigger('containerState', [
                        state('date', style({
                            transform: 'translateX(0%)',
                        })),
                        state('time', style({
                            transform: 'translateX(-100%)',
                        })),
                        transition('date <=> time', animate('200ms ease-in')),
                    ]),
                ],
                template: "\n    <div class=\"date-time-container\">\n      <div class=\"date-time-tabs\">\n        <span\n          class=\"date-tab\"\n          (click)=\"toggleView('date')\"\n          [@dateTextState]=\"componentTabState\"\n          data-automation-id=\"novo-date-time-date-tab\"\n          >{{ selectedLabel }}</span\n        >\n        <span\n          class=\"time-tab\"\n          (click)=\"toggleView('time')\"\n          [@timeTextState]=\"componentTabState\"\n          data-automation-id=\"novo-date-time-time-tab\"\n        >\n          <span class=\"hours\" data-automation-id=\"novo-time-picker-hours\">{{ hours }}</span\n          >:<span class=\"minutes\" data-automation-id=\"novo-time-picker-minutes\">{{ minutes }}</span>\n          <span *ngIf=\"!military\" class=\"meridian\"> {{ meridian }}</span>\n        </span>\n        <i class=\"date-time-indicator\" [@indicatorState]=\"componentTabState\"></i>\n      </div>\n      <div class=\"view-container\" [@containerState]=\"componentTabState\">\n        <div class=\"calendar\">\n          <novo-date-picker\n            (onSelect)=\"onDateSelected($event)\"\n            [(ngModel)]=\"model\"\n            inline=\"true\"\n            [minYear]=\"minYear\"\n            [maxYear]=\"maxYear\"\n            [start]=\"start\"\n            [end]=\"end\"\n            [weekStart]=\"weekStart\"\n          ></novo-date-picker>\n        </div>\n        <div class=\"time-picker\">\n          <novo-time-picker (onSelect)=\"onTimeSelected($event)\" [(ngModel)]=\"model\" [military]=\"military\" inline=\"true\"></novo-time-picker>\n        </div>\n      </div>\n    </div>\n  ",
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ElementRef }]; }, { minYear: [{
            type: Input
        }], maxYear: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], military: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], onSelect: [{
            type: Output
        }] }); })();

function NovoTimePickerInputElement_i_2_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 6);
    ɵɵlistener("click", function NovoTimePickerInputElement_i_2_Template_i_click_0_listener() { ɵɵrestoreView(_r4); var ctx_r3 = ɵɵnextContext(); return ctx_r3.openPanel(); });
    ɵɵelementEnd();
} }
function NovoTimePickerInputElement_i_3_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 7);
    ɵɵlistener("click", function NovoTimePickerInputElement_i_3_Template_i_click_0_listener() { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(); return ctx_r5.clearValue(); });
    ɵɵelementEnd();
} }
// Value accessor for the component (supports ngModel)
var DATE_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoTimePickerInputElement; }),
    multi: true,
};
var NovoTimePickerInputElement = /** @class */ (function () {
    function NovoTimePickerInputElement(element, labels, dateFormatService, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this.dateFormatService = dateFormatService;
        this._changeDetectorRef = _changeDetectorRef;
        this.formattedValue = '';
        /** View -> model callback called when value changes */
        this._onChange = function () { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = function () { };
        this.military = false;
        this.disabled = false;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    NovoTimePickerInputElement.prototype.ngOnInit = function () {
        this.placeholder = this.military ? this.labels.timeFormatPlaceholder24Hour : this.labels.timeFormatPlaceholderAM;
        this.maskOptions = {
            mask: this.military ? [/\d/, /\d/, ':', /\d/, /\d/] : [/\d/, /\d/, ':', /\d/, /\d/, ' ', /[aApP上下]/, /[mM午]/],
            pipe: this.military ? createAutoCorrectedDatePipe('HH:MM') : createAutoCorrectedDatePipe('mm:MM'),
            keepCharPositions: false,
            guide: true,
        };
    };
    /** BEGIN: Convenient Panel Methods. */
    NovoTimePickerInputElement.prototype.openPanel = function () {
        var _this = this;
        if (!this.overlay.panelOpen) {
            this.overlay.openPanel();
            var hour_1 = new Date().getHours();
            Promise.resolve(null).then(function () { return _this.scrollToIndex(hour_1 * 4); });
        }
    };
    NovoTimePickerInputElement.prototype.closePanel = function () {
        this.overlay.closePanel();
    };
    Object.defineProperty(NovoTimePickerInputElement.prototype, "panelOpen", {
        get: function () {
            return this.overlay && this.overlay.panelOpen;
        },
        enumerable: true,
        configurable: true
    });
    /** END: Convenient Panel Methods. */
    NovoTimePickerInputElement.prototype._handleKeydown = function (event) {
        if ((event.keyCode === ESCAPE || event.keyCode === ENTER || event.keyCode === TAB) && this.panelOpen) {
            this.closePanel();
            event.stopPropagation();
            event.stopImmediatePropagation();
        }
    };
    NovoTimePickerInputElement.prototype._handleInput = function (event) {
        if (document.activeElement === event.target) {
            // this._onChange((event.target as HTMLInputElement).value);
            var text = event.target.value;
            if (this.military ? text.replace(/_/g, '').length === 5 : text.replace(/_/g, '').length === 8) {
                var _a = __read(this.dateFormatService.parseString(text, this.military, 'time'), 2), dateTimeValue = _a[0], formatted = _a[1];
                this.dispatchOnChange(dateTimeValue);
            }
            else {
                this.dispatchOnChange(null);
            }
            this.openPanel();
            var num = Number(text.split(':')[0]);
            this.scrollToIndex(num * 4);
        }
    };
    NovoTimePickerInputElement.prototype._handleBlur = function (event) {
        this.blurEvent.emit(event);
    };
    NovoTimePickerInputElement.prototype._handleFocus = function (event) {
        this.openPanel();
        this.focusEvent.emit(event);
    };
    NovoTimePickerInputElement.prototype.writeValue = function (value) {
        var _this = this;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    NovoTimePickerInputElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoTimePickerInputElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoTimePickerInputElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoTimePickerInputElement.prototype.dispatchOnChange = function (newValue, skip) {
        if (skip === void 0) { skip = false; }
        if (newValue !== this.value) {
            this._onChange(newValue);
            !skip && this.writeValue(newValue);
        }
    };
    NovoTimePickerInputElement.prototype._setTriggerValue = function (value) {
        if (value instanceof Date && this.value instanceof Date) {
            value = new Date(value.setFullYear(this.value.getFullYear(), this.value.getMonth(), this.value.getDate()));
        }
        this.value = value;
        if (this.value) {
            this.formattedValue = this.formatDateValue(this.value);
        }
        this._changeDetectorRef.markForCheck();
    };
    NovoTimePickerInputElement.prototype.setValue = function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    };
    NovoTimePickerInputElement.prototype.setValueAndClose = function (event) {
        this.setValue(event);
        this.closePanel();
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    NovoTimePickerInputElement.prototype.clearValue = function () {
        this.formattedValue = '';
        this.dispatchOnChange(null);
    };
    NovoTimePickerInputElement.prototype.formatDateValue = function (value) {
        if (!value) {
            return '';
        }
        var format = this.labels.formatTimeWithFormat(value, {
            hour: 'numeric',
            minute: '2-digit',
            hour12: !this.military,
        });
        if (format.split(':')[0].length === 1) {
            return "0" + format;
        }
        return format;
    };
    Object.defineProperty(NovoTimePickerInputElement.prototype, "hasValue", {
        get: function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    NovoTimePickerInputElement.prototype.scrollToIndex = function (index) {
        var element = this.overlay.overlayRef.overlayElement;
        var list = element.querySelector('.increments');
        var items = list.querySelectorAll('novo-list-item');
        var item = items[index];
        if (item) {
            list.scrollTop = item.offsetTop;
        }
    };
    NovoTimePickerInputElement.ɵfac = function NovoTimePickerInputElement_Factory(t) { return new (t || NovoTimePickerInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DateFormatService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoTimePickerInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoTimePickerInputElement, selectors: [["novo-time-picker-input"]], viewQuery: function NovoTimePickerInputElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoOverlayTemplateComponent, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.overlay = _t.first);
        } }, hostVars: 2, hostBindings: function NovoTimePickerInputElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("disabled", ctx.disabled);
        } }, inputs: { name: "name", placeholder: "placeholder", military: "military", maskOptions: "maskOptions", disabled: "disabled" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR$1])], decls: 6, vars: 10, consts: [["type", "text", "data-automation-id", "time-input", 3, "name", "ngModel", "textMask", "placeholder", "disabled", "ngModelChange", "focus", "keydown", "input", "blur"], ["input", ""], ["class", "bhi-clock", 3, "click", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], ["position", "above-below", 3, "parent"], ["inline", "true", 3, "ngModel", "military", "onSelect"], [1, "bhi-clock", 3, "click"], [1, "bhi-times", 3, "click"]], template: function NovoTimePickerInputElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "input", 0, 1);
            ɵɵlistener("ngModelChange", function NovoTimePickerInputElement_Template_input_ngModelChange_0_listener($event) { return ctx.formattedValue = $event; })("focus", function NovoTimePickerInputElement_Template_input_focus_0_listener($event) { return ctx._handleFocus($event); })("keydown", function NovoTimePickerInputElement_Template_input_keydown_0_listener($event) { return ctx._handleKeydown($event); })("input", function NovoTimePickerInputElement_Template_input_input_0_listener($event) { return ctx._handleInput($event); })("blur", function NovoTimePickerInputElement_Template_input_blur_0_listener($event) { return ctx._handleBlur($event); });
            ɵɵelementEnd();
            ɵɵtemplate(2, NovoTimePickerInputElement_i_2_Template, 1, 0, "i", 2);
            ɵɵtemplate(3, NovoTimePickerInputElement_i_3_Template, 1, 0, "i", 3);
            ɵɵelementStart(4, "novo-overlay-template", 4);
            ɵɵelementStart(5, "novo-time-picker", 5);
            ɵɵlistener("onSelect", function NovoTimePickerInputElement_Template_novo_time_picker_onSelect_5_listener($event) { return ctx.setValue($event); });
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("name", ctx.name)("ngModel", ctx.formattedValue)("textMask", ctx.maskOptions)("placeholder", ctx.placeholder)("disabled", ctx.disabled);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.hasValue);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasValue);
            ɵɵadvance(1);
            ɵɵproperty("parent", ctx.element);
            ɵɵadvance(1);
            ɵɵproperty("ngModel", ctx.value)("military", ctx.military);
        } }, directives: [DefaultValueAccessor, NgControlStatus, NgModel, MaskedInputDirective, NgIf, NovoOverlayTemplateComponent, NovoTimePickerElement], encapsulation: 2 });
    return NovoTimePickerInputElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimePickerInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$1],
                template: "\n    <input\n      type=\"text\"\n      [name]=\"name\"\n      [(ngModel)]=\"formattedValue\"\n      [textMask]=\"maskOptions\"\n      [placeholder]=\"placeholder\"\n      (focus)=\"_handleFocus($event)\"\n      (keydown)=\"_handleKeydown($event)\"\n      (input)=\"_handleInput($event)\"\n      (blur)=\"_handleBlur($event)\"\n      #input\n      data-automation-id=\"time-input\"\n      [disabled]=\"disabled\"\n    />\n    <i *ngIf=\"!hasValue\" (click)=\"openPanel()\" class=\"bhi-clock\"></i> <i *ngIf=\"hasValue\" (click)=\"clearValue()\" class=\"bhi-times\"></i>\n\n    <novo-overlay-template [parent]=\"element\" position=\"above-below\">\n      <novo-time-picker inline=\"true\" (onSelect)=\"setValue($event)\" [ngModel]=\"value\" [military]=\"military\"></novo-time-picker>\n    </novo-overlay-template>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], military: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], disabled: [{
            type: HostBinding,
            args: ['class.disabled']
        }, {
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }], overlay: [{
            type: ViewChild,
            args: [NovoOverlayTemplateComponent]
        }] }); })();

// NG
// Value accessor for the component (supports ngModel)
var DATE_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoDateTimePickerInputElement; }),
    multi: true,
};
var NovoDateTimePickerInputElement = /** @class */ (function () {
    function NovoDateTimePickerInputElement(element, labels, _changeDetectorRef) {
        this.element = element;
        this.labels = labels;
        this._changeDetectorRef = _changeDetectorRef;
        /** View -> model callback called when value changes */
        this._onChange = function () { };
        /** View -> model callback called when autocomplete has been touched */
        this._onTouched = function () { };
        this.military = false;
        this.disabled = false;
        this.weekStart = 0;
        this.blurEvent = new EventEmitter();
        this.focusEvent = new EventEmitter();
    }
    NovoDateTimePickerInputElement.prototype.writeValue = function (value) {
        var _this = this;
        this.datePart = isDate(value) ? parse(value) : value;
        this.timePart = isDate(value) ? parse(value) : value;
        Promise.resolve(null).then(function () { return _this._setTriggerValue(value); });
    };
    NovoDateTimePickerInputElement.prototype.updateDate = function (event) {
        this.datePart = event;
        this.checkParts();
    };
    NovoDateTimePickerInputElement.prototype.updateTime = function (event) {
        this.timePart = event;
        this.checkParts();
    };
    NovoDateTimePickerInputElement.prototype.handleBlur = function (event) {
        this.blurEvent.emit(event);
    };
    NovoDateTimePickerInputElement.prototype.handleFocus = function (event) {
        this.focusEvent.emit(event);
    };
    NovoDateTimePickerInputElement.prototype.checkParts = function () {
        try {
            if (this.datePart instanceof Date && this.timePart instanceof Date) {
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else if (this.datePart instanceof Date) {
                this.timePart = new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), 12, 0);
                this.dispatchOnChange(new Date(this.datePart.getFullYear(), this.datePart.getMonth(), this.datePart.getDate(), this.timePart.getHours(), this.timePart.getMinutes()));
            }
            else {
                this.dispatchOnChange(null);
            }
        }
        catch (err) {
            // Date not valid
            this.dispatchOnChange(null);
        }
    };
    NovoDateTimePickerInputElement.prototype.registerOnChange = function (fn) {
        this._onChange = fn;
    };
    NovoDateTimePickerInputElement.prototype.registerOnTouched = function (fn) {
        this._onTouched = fn;
    };
    NovoDateTimePickerInputElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoDateTimePickerInputElement.prototype.dispatchOnChange = function (newValue) {
        if (newValue !== this.value) {
            this._onChange(newValue);
            this._setTriggerValue(newValue);
        }
    };
    NovoDateTimePickerInputElement.prototype._setTriggerValue = function (value) {
        this.value = value;
        this._changeDetectorRef.markForCheck();
    };
    NovoDateTimePickerInputElement.prototype.setValue = function (event) {
        if (event && event.date) {
            this.dispatchOnChange(event.date);
        }
    };
    NovoDateTimePickerInputElement.prototype.setValueAndClose = function (event) {
        this.setValue(event);
    };
    /**
     * Clear any previous selected option and emit a selection change event for this option
     */
    NovoDateTimePickerInputElement.prototype.clearValue = function () {
        this.dispatchOnChange(null);
    };
    Object.defineProperty(NovoDateTimePickerInputElement.prototype, "hasValue", {
        get: function () {
            return !Helpers.isEmpty(this.value);
        },
        enumerable: true,
        configurable: true
    });
    NovoDateTimePickerInputElement.ɵfac = function NovoDateTimePickerInputElement_Factory(t) { return new (t || NovoDateTimePickerInputElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoDateTimePickerInputElement.ɵcmp = ɵɵdefineComponent({ type: NovoDateTimePickerInputElement, selectors: [["novo-date-time-picker-input"]], inputs: { name: "name", start: "start", end: "end", placeholder: "placeholder", maskOptions: "maskOptions", military: "military", disabled: "disabled", format: "format", weekStart: "weekStart" }, outputs: { blurEvent: "blurEvent", focusEvent: "focusEvent" }, features: [ɵɵProvidersFeature([DATE_VALUE_ACCESSOR$2])], decls: 2, vars: 9, consts: [[3, "ngModel", "start", "end", "maskOptions", "disabled", "weekStart", "ngModelChange", "blurEvent", "focusEvent"], [3, "ngModel", "military", "disabled", "ngModelChange", "blurEvent", "focusEvent"]], template: function NovoDateTimePickerInputElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-date-picker-input", 0);
            ɵɵlistener("ngModelChange", function NovoDateTimePickerInputElement_Template_novo_date_picker_input_ngModelChange_0_listener($event) { return ctx.updateDate($event); })("blurEvent", function NovoDateTimePickerInputElement_Template_novo_date_picker_input_blurEvent_0_listener($event) { return ctx.handleBlur($event); })("focusEvent", function NovoDateTimePickerInputElement_Template_novo_date_picker_input_focusEvent_0_listener($event) { return ctx.handleFocus($event); });
            ɵɵelementEnd();
            ɵɵelementStart(1, "novo-time-picker-input", 1);
            ɵɵlistener("ngModelChange", function NovoDateTimePickerInputElement_Template_novo_time_picker_input_ngModelChange_1_listener($event) { return ctx.updateTime($event); })("blurEvent", function NovoDateTimePickerInputElement_Template_novo_time_picker_input_blurEvent_1_listener($event) { return ctx.handleBlur($event); })("focusEvent", function NovoDateTimePickerInputElement_Template_novo_time_picker_input_focusEvent_1_listener($event) { return ctx.handleFocus($event); });
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngModel", ctx.datePart)("start", ctx.start)("end", ctx.end)("maskOptions", ctx.maskOptions)("disabled", ctx.disabled)("weekStart", ctx.weekStart);
            ɵɵadvance(1);
            ɵɵproperty("ngModel", ctx.timePart)("military", ctx.military)("disabled", ctx.disabled);
        } }, directives: [NovoDatePickerInputElement, NgControlStatus, NgModel, NovoTimePickerInputElement], encapsulation: 2 });
    return NovoDateTimePickerInputElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateTimePickerInputElement, [{
        type: Component,
        args: [{
                selector: 'novo-date-time-picker-input',
                providers: [DATE_VALUE_ACCESSOR$2],
                template: "\n    <novo-date-picker-input\n      [ngModel]=\"datePart\"\n      (ngModelChange)=\"updateDate($event)\"\n      [start]=\"start\"\n      [end]=\"end\"\n      [maskOptions]=\"maskOptions\"\n      (blurEvent)=\"handleBlur($event)\"\n      (focusEvent)=\"handleFocus($event)\"\n      [disabled]=\"disabled\"\n      [weekStart]=\"weekStart\"\n    ></novo-date-picker-input>\n    <novo-time-picker-input\n      [ngModel]=\"timePart\"\n      (ngModelChange)=\"updateTime($event)\"\n      [military]=\"military\"\n      (blurEvent)=\"handleBlur($event)\"\n      (focusEvent)=\"handleFocus($event)\"\n      [disabled]=\"disabled\"\n    ></novo-time-picker-input>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], start: [{
            type: Input
        }], end: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], maskOptions: [{
            type: Input
        }], military: [{
            type: Input
        }], disabled: [{
            type: Input
        }], format: [{
            type: Input
        }], weekStart: [{
            type: Input
        }], blurEvent: [{
            type: Output
        }], focusEvent: [{
            type: Output
        }] }); })();

// NG2
var NovoTimePickerModule = /** @class */ (function () {
    function NovoTimePickerModule() {
    }
    NovoTimePickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoTimePickerModule });
    NovoTimePickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTimePickerModule_Factory(t) { return new (t || NovoTimePickerModule)(); }, imports: [[CommonModule, FormsModule, TextMaskModule, NovoOverlayModule, NovoListModule]] });
    return NovoTimePickerModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTimePickerModule, { declarations: [NovoTimePickerElement, NovoTimePickerInputElement], imports: [CommonModule, FormsModule, TextMaskModule, NovoOverlayModule, NovoListModule], exports: [NovoTimePickerElement, NovoTimePickerInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTimePickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, TextMaskModule, NovoOverlayModule, NovoListModule],
                declarations: [NovoTimePickerElement, NovoTimePickerInputElement],
                exports: [NovoTimePickerElement, NovoTimePickerInputElement],
            }]
    }], null, null); })();

// NG2
var NovoDateTimePickerModule = /** @class */ (function () {
    function NovoDateTimePickerModule() {
    }
    NovoDateTimePickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoDateTimePickerModule });
    NovoDateTimePickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoDateTimePickerModule_Factory(t) { return new (t || NovoDateTimePickerModule)(); }, imports: [[CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, TextMaskModule, NovoOverlayModule]] });
    return NovoDateTimePickerModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoDateTimePickerModule, { declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement], imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, TextMaskModule, NovoOverlayModule], exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDateTimePickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoDatePickerModule, NovoTimePickerModule, TextMaskModule, NovoOverlayModule],
                declarations: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
                exports: [NovoDateTimePickerElement, NovoDateTimePickerInputElement],
            }]
    }], null, null); })();

/**
 * Directive for a Material Design Accordion.
 */
var NovoAccordion = /** @class */ (function (_super) {
    __extends(NovoAccordion, _super);
    function NovoAccordion() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._hideToggle = false;
        /**
         * The display mode used for all expansion panels in the accordion. Currently two display
         * modes exist:
         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded
         *     panel at a different elevation from the reset of the accordion.
         *  flat - no spacing is placed around expanded panels, showing all panels at the same
         *     elevation.
         */
        _this.displayMode = 'default';
        return _this;
    }
    Object.defineProperty(NovoAccordion.prototype, "hideToggle", {
        /** Whether the expansion indicator should be hidden. */
        get: function () {
            return this._hideToggle;
        },
        set: function (show) {
            this._hideToggle = coerceBooleanProperty(show);
        },
        enumerable: true,
        configurable: true
    });
    NovoAccordion.ɵfac = function NovoAccordion_Factory(t) { return ɵNovoAccordion_BaseFactory(t || NovoAccordion); };
    NovoAccordion.ɵdir = ɵɵdefineDirective({ type: NovoAccordion, selectors: [["novo-accordion"]], hostAttrs: [1, "novo-accordion"], inputs: { hideToggle: "hideToggle", displayMode: "displayMode" }, exportAs: ["novoAccordion"], features: [ɵɵInheritDefinitionFeature] });
    return NovoAccordion;
}(CdkAccordion));
var ɵNovoAccordion_BaseFactory = ɵɵgetInheritedFactory(NovoAccordion);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAccordion, [{
        type: Directive,
        args: [{
                selector: 'novo-accordion',
                exportAs: 'novoAccordion',
                host: {
                    class: 'novo-accordion',
                },
            }]
    }], null, { hideToggle: [{
            type: Input
        }], displayMode: [{
            type: Input
        }] }); })();

/** Time and timing curve for expansion panel animations. */
var EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';
/** Animations used by the Material expansion panel. */
var novoExpansionAnimations = {
    /** Animation that rotates the indicator arrow. */
    indicatorRotate: trigger('indicatorRotate', [
        state('collapsed', style({ transform: 'rotate(0deg)' })),
        state('expanded', style({ transform: 'rotate(180deg)' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
    /** Animation that expands and collapses the panel header height. */
    expansionHeaderHeight: trigger('expansionHeight', [
        state('collapsed', style({
            height: '{{collapsedHeight}}',
        }), {
            params: { collapsedHeight: '48px' },
        }),
        state('expanded', style({
            height: '{{expandedHeight}}',
        }), {
            params: { expandedHeight: '56px' },
        }),
        transition('expanded <=> collapsed', group([query('@indicatorRotate', animateChild(), { optional: true }), animate(EXPANSION_PANEL_ANIMATION_TIMING)])),
    ]),
    /** Animation that expands and collapses the panel content. */
    bodyExpansion: trigger('bodyExpansion', [
        state('collapsed', style({ height: '0px', visibility: 'hidden' })),
        state('expanded', style({ height: '*', visibility: 'visible' })),
        transition('expanded <=> collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),
    ]),
};

/**
 * Expansion panel content that will be rendered lazily
 * after the panel is opened for the first time.
 */
var NovoExpansionPanelContent = /** @class */ (function () {
    function NovoExpansionPanelContent(_template) {
        this._template = _template;
    }
    NovoExpansionPanelContent.ɵfac = function NovoExpansionPanelContent_Factory(t) { return new (t || NovoExpansionPanelContent)(ɵɵdirectiveInject(TemplateRef)); };
    NovoExpansionPanelContent.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelContent, selectors: [["ng-template", "matExpansionPanelContent", ""]] });
    return NovoExpansionPanelContent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelContent, [{
        type: Directive,
        args: [{
                selector: 'ng-template[matExpansionPanelContent]',
            }]
    }], function () { return [{ type: TemplateRef }]; }, null); })();

function NovoExpansionPanel_ng_template_5_Template(rf, ctx) { }
var _c0$C = [[["novo-expansion-panel-header"]], "*", [["novo-action-row"]]];
var _c1$j = ["novo-expansion-panel-header", "*", "novo-action-row"];
/** Counter for generating unique element ids. */
var uniqueId = 0;
/**
 * `<novo-expansion-panel>`
 *
 * This component can be used as a single element to show expandable content, or as one of
 * multiple children of an element with the NovoAccordion directive attached.
 */
var NovoExpansionPanel = /** @class */ (function (_super) {
    __extends(NovoExpansionPanel, _super);
    function NovoExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef) {
        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;
        _this._viewContainerRef = _viewContainerRef;
        _this._hideToggle = false;
        _this._padding = true;
        _this.opened = new EventEmitter();
        _this.closed = new EventEmitter();
        _this.expandedChange = new EventEmitter();
        /** Stream that emits for changes in `@Input` properties. */
        _this._inputChanges = new Subject();
        /** ID for the associated header element. Used for a11y labelling. */
        _this._headerId = "novo-expansion-panel-header-" + uniqueId++;
        _this.accordion = accordion;
        return _this;
    }
    Object.defineProperty(NovoExpansionPanel.prototype, "hideToggle", {
        /** Whether the toggle indicator should be hidden. */
        get: function () {
            return this._hideToggle;
        },
        set: function (value) {
            this._hideToggle = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoExpansionPanel.prototype, "padding", {
        get: function () {
            return this._padding;
        },
        set: function (value) {
            this._padding = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    /** Whether the expansion indicator should be hidden. */
    NovoExpansionPanel.prototype._getHideToggle = function () {
        if (this.accordion) {
            return this.accordion.hideToggle;
        }
        return this.hideToggle;
    };
    /** Determines whether the expansion panel should have spacing between it and its siblings. */
    NovoExpansionPanel.prototype._hasSpacing = function () {
        if (this.accordion) {
            return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';
        }
        return false;
    };
    /** Gets the expanded state string. */
    NovoExpansionPanel.prototype._getExpandedState = function () {
        return this.expanded ? 'expanded' : 'collapsed';
    };
    NovoExpansionPanel.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this._lazyContent) {
            // Render the content as soon as the panel becomes open.
            this.opened
                .pipe(startWith(null), filter(function () { return _this.expanded && !_this._portal; }), take(1))
                .subscribe(function () {
                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);
            });
        }
    };
    NovoExpansionPanel.prototype.ngOnChanges = function (changes) {
        this._inputChanges.next(changes);
    };
    NovoExpansionPanel.prototype.ngOnDestroy = function () {
        _super.prototype.ngOnDestroy.call(this);
        this._inputChanges.complete();
    };
    NovoExpansionPanel.prototype._bodyAnimation = function (event) {
        var classList = event.element.classList;
        var cssClass = 'novo-expanded';
        var phaseName = event.phaseName, toState = event.toState;
        // Toggle the body's `overflow: hidden` class when closing starts or when expansion ends in
        // order to prevent the cases where switching too early would cause the animation to jump.
        // Note that we do it directly on the DOM element to avoid the slight delay that comes
        // with doing it via change detection.
        if (phaseName === 'done' && toState === 'expanded') {
            classList.add(cssClass);
        }
        else if (phaseName === 'start' && toState === 'collapsed') {
            classList.remove(cssClass);
        }
    };
    NovoExpansionPanel.ɵfac = function NovoExpansionPanel_Factory(t) { return new (t || NovoExpansionPanel)(ɵɵdirectiveInject(NovoAccordion, 9), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(UniqueSelectionDispatcher), ɵɵdirectiveInject(ViewContainerRef)); };
    NovoExpansionPanel.ɵcmp = ɵɵdefineComponent({ type: NovoExpansionPanel, selectors: [["novo-expansion-panel"]], contentQueries: function NovoExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoExpansionPanelContent, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._lazyContent = _t.first);
        } }, hostAttrs: [1, "novo-expansion-panel"], hostVars: 6, hostBindings: function NovoExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("novo-expanded", ctx.expanded)("novo-expansion-panel-spacing", ctx._hasSpacing())("novo-expansion-panel-padding", ctx.padding);
        } }, inputs: { disabled: "disabled", expanded: "expanded", hideToggle: "hideToggle", padding: "padding" }, outputs: { opened: "opened", closed: "closed", expandedChange: "expandedChange" }, exportAs: ["novoExpansionPanel"], features: [ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature], ngContentSelectors: _c1$j, decls: 7, vars: 4, consts: [["role", "region", 1, "novo-expansion-panel-content", 3, "id"], ["body", ""], [1, "novo-expansion-panel-body"], [3, "cdkPortalOutlet"]], template: function NovoExpansionPanel_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$C);
            ɵɵprojection(0);
            ɵɵelementStart(1, "div", 0, 1);
            ɵɵlistener("@bodyExpansion.done", function NovoExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimation($event); })("@bodyExpansion.start", function NovoExpansionPanel_Template_div_animation_bodyExpansion_start_1_listener($event) { return ctx._bodyAnimation($event); });
            ɵɵelementStart(3, "div", 2);
            ɵɵprojection(4, 1);
            ɵɵtemplate(5, NovoExpansionPanel_ng_template_5_Template, 0, 0, "ng-template", 3);
            ɵɵelementEnd();
            ɵɵprojection(6, 2);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("@bodyExpansion", ctx._getExpandedState())("id", ctx.id);
            ɵɵattribute("aria-labelledby", ctx._headerId);
            ɵɵadvance(4);
            ɵɵproperty("cdkPortalOutlet", ctx._portal);
        } }, directives: [CdkPortalOutlet], styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-expansion-panel{background:#fff;color:#3d464d;box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12);box-sizing:content-box;display:block;margin:0 16px;transition:margin 225ms ease-in-out}.novo-action-row{border-top-color:#3d464d}.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused,.novo-expansion-panel:not(.novo-expanded) .novo-expansion-panel-header:not([aria-disabled=true]):hover{background:rgba(0,0,0,.04)}.novo-expansion-panel-header-title{color:#3d464d}.novo-expansion-indicator::after,.novo-expansion-panel-header-description{color:#999}.novo-expansion-panel-header[aria-disabled=true]{color:#999;pointer-events:none}.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-description,.novo-expansion-panel-header[aria-disabled=true] .novo-expansion-panel-header-title{color:inherit}.novo-expansion-panel.novo-expanded[theme=company]{border-top:3px solid #39d}.novo-expansion-panel.novo-expanded[theme=candidate]{border-top:3px solid #4b7}.novo-expansion-panel.novo-expanded[theme=navigation]{border-top:3px solid #2f384f}.novo-expansion-panel.novo-expanded[theme=lead]{border-top:3px solid #a69}.novo-expansion-panel.novo-expanded[theme=contact]{border-top:3px solid #fa4}.novo-expansion-panel.novo-expanded[theme=opportunity]{border-top:3px solid #625}.novo-expansion-panel.novo-expanded[theme=job]{border-top:3px solid #b56}.novo-expansion-panel.novo-expanded[theme=earnCode],.novo-expansion-panel.novo-expanded[theme=jobCode]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=sendout]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=placement]{border-top:3px solid #0b344f}.novo-expansion-panel.novo-expanded[theme=corporateuser],.novo-expansion-panel.novo-expanded[theme=credential],.novo-expansion-panel.novo-expanded[theme=distributionList],.novo-expansion-panel.novo-expanded[theme=task],.novo-expansion-panel.novo-expanded[theme=user]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=aqua]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=ocean]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=mint]{border-top:3px solid #37bc9b}.novo-expansion-panel.novo-expanded[theme=grass]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=sunflower]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=bittersweet]{border-top:3px solid #eb6845}.novo-expansion-panel.novo-expanded[theme=grapefruit]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=carnation]{border-top:3px solid #d770ad}.novo-expansion-panel.novo-expanded[theme=lavender]{border-top:3px solid #967adc}.novo-expansion-panel.novo-expanded[theme=positive]{border-top:3px solid #4a89dc}.novo-expansion-panel.novo-expanded[theme=success]{border-top:3px solid #8cc152}.novo-expansion-panel.novo-expanded[theme=negative]{border-top:3px solid #da4453}.novo-expansion-panel.novo-expanded[theme=warning]{border-top:3px solid #f6b042}.novo-expansion-panel.novo-expanded[theme=black]{border-top:3px solid #000}.novo-expansion-panel.novo-expanded[theme=dark]{border-top:3px solid #3d464d}.novo-expansion-panel.novo-expanded[theme=pulse]{border-top:3px solid #3bafda}.novo-expansion-panel.novo-expanded[theme=neutral]{border-top:3px solid #4f5361}.novo-expansion-panel.novo-expanded[theme=navy]{border-top:3px solid #0d2d42}.novo-expansion-panel.novo-expanded[theme=contract]{border-top:3px solid #454ea0}.novo-expansion-panel.novo-expanded[theme=mountain]{border-top:3px solid #9678b6}.novo-expansion-panel.novo-expanded[theme=billableCharge],.novo-expansion-panel.novo-expanded[theme=invoiceStatement],.novo-expansion-panel.novo-expanded[theme=payableCharge]{border-top:3px solid #696d79}.novo-expansion-panel.novo-expanded[theme=submission]{border-top:3px solid #a9adbb}.novo-expansion-panel.novo-expanded[theme=note]{border-top:3px solid #747884}.novo-expansion-panel.novo-expanded[theme=ash]{border-top:3px solid #a0a0a0}.novo-expansion-panel.novo-expanded[theme=slate]{border-top:3px solid #707070}.novo-expansion-panel.novo-expanded[theme=charcoal]{border-top:3px solid #282828}.novo-expansion-panel.novo-expanded[theme=background]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=background-dark]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=white]{border-top:3px solid #fff}.novo-expansion-panel.novo-expanded[theme=grey]{border-top:3px solid #999}.novo-expansion-panel.novo-expanded[theme=off-white]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=light]{border-top:3px solid #d9dadc}.novo-expansion-panel.novo-expanded[theme=empty]{border-top:3px solid #cccdcc}.novo-expansion-panel.novo-expanded[theme=sand]{border-top:3px solid #f4f4f4}.novo-expansion-panel.novo-expanded[theme=silver]{border-top:3px solid #e2e2e2}.novo-expansion-panel.novo-expanded[theme=stone]{border-top:3px solid #bebebe}.novo-expansion-panel.novo-expanded{margin:16px 4px}.novo-expansion-panel.novo-expanded:first-child{margin-top:0}.novo-expansion-panel.novo-expanded:last-child{margin-bottom:0}.novo-expansion-panel-content{overflow:hidden}.novo-expansion-panel-content.novo-expanded{overflow:visible}.novo-expansion-panel-padding .novo-expansion-panel-body{padding:0 24px 16px}.novo-accordion .novo-expansion-panel-spacing:first-child{margin-top:0}.novo-accordion .novo-expansion-panel-spacing:last-child{margin-bottom:0}.novo-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.novo-action-row button.novo-button{margin-left:8px}[dir=rtl] .novo-action-row button.novo-button{margin-left:0;margin-right:8px}"], encapsulation: 2, data: { animation: [novoExpansionAnimations.bodyExpansion] }, changeDetection: 0 });
    return NovoExpansionPanel;
}(CdkAccordionItem));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanel, [{
        type: Component,
        args: [{
                styleUrls: ['./expansion-panel.scss'],
                selector: 'novo-expansion-panel',
                exportAs: 'novoExpansionPanel',
                templateUrl: './expansion-panel.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [novoExpansionAnimations.bodyExpansion],
                host: {
                    class: 'novo-expansion-panel',
                    '[class.novo-expanded]': 'expanded',
                    '[class.novo-expansion-panel-spacing]': '_hasSpacing()',
                    '[class.novo-expansion-panel-padding]': 'padding',
                },
            }]
    }], function () { return [{ type: NovoAccordion, decorators: [{
                type: Optional
            }, {
                type: Host
            }] }, { type: ChangeDetectorRef }, { type: UniqueSelectionDispatcher }, { type: ViewContainerRef }]; }, { disabled: [{
            type: Input
        }], expanded: [{
            type: Input
        }], hideToggle: [{
            type: Input
        }], padding: [{
            type: Input
        }], opened: [{
            type: Output
        }], closed: [{
            type: Output
        }], expandedChange: [{
            type: Output
        }], _lazyContent: [{
            type: ContentChild,
            args: [NovoExpansionPanelContent]
        }] }); })();
var NovoExpansionPanelActionRow = /** @class */ (function () {
    function NovoExpansionPanelActionRow() {
    }
    NovoExpansionPanelActionRow.ɵfac = function NovoExpansionPanelActionRow_Factory(t) { return new (t || NovoExpansionPanelActionRow)(); };
    NovoExpansionPanelActionRow.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelActionRow, selectors: [["novo-action-row"]], hostAttrs: [1, "novo-action-row"] });
    return NovoExpansionPanelActionRow;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelActionRow, [{
        type: Directive,
        args: [{
                selector: 'novo-action-row',
                host: {
                    class: 'novo-action-row',
                },
            }]
    }], null, null); })();

var _c0$D = function (a0, a1) { return { collapsedHeight: a0, expandedHeight: a1 }; };
var _c1$k = function (a0, a1) { return { value: a0, params: a1 }; };
function NovoExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 2);
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("@indicatorRotate", ctx_r0._getExpandedState());
} }
var _c2$8 = [[["novo-panel-title"]], [["novo-panel-description"]], "*"];
var _c3$5 = ["novo-panel-title", "novo-panel-description", "*"];
/**
 * `<novo-expansion-panel-header>`
 *
 * This component corresponds to the header element of an `<novo-expansion-panel>`.
 */
var NovoExpansionPanelHeader = /** @class */ (function () {
    function NovoExpansionPanelHeader(panel, _element, 
    // private _focusMonitor: FocusMonitor,
    _changeDetectorRef) {
        var _this = this;
        this.panel = panel;
        this._element = _element;
        this._changeDetectorRef = _changeDetectorRef;
        this._parentChangeSubscription = Subscription.EMPTY;
        // Since the toggle state depends on an @Input on the panel, we
        // need to  subscribe and trigger change detection manually.
        this._parentChangeSubscription = merge(panel.opened, panel.closed, panel._inputChanges.pipe(filter(function (changes) { return !!(changes.hideToggle || changes.disabled); }))).subscribe(function () { return _this._changeDetectorRef.markForCheck(); });
        // _focusMonitor.monitor(_element.nativeElement);
    }
    /** Toggles the expanded state of the panel. */
    NovoExpansionPanelHeader.prototype._toggle = function () {
        this.panel.toggle();
    };
    /** Gets whether the panel is expanded. */
    NovoExpansionPanelHeader.prototype._isExpanded = function () {
        return this.panel.expanded;
    };
    /** Gets the expanded state string of the panel. */
    NovoExpansionPanelHeader.prototype._getExpandedState = function () {
        return this.panel._getExpandedState();
    };
    /** Gets the panel id. */
    NovoExpansionPanelHeader.prototype._getPanelId = function () {
        return this.panel.id;
    };
    /** Gets whether the expand indicator should be shown. */
    NovoExpansionPanelHeader.prototype._showToggle = function () {
        return !this.panel.hideToggle && !this.panel.disabled;
    };
    /** Handle keydown event calling to toggle() if appropriate. */
    NovoExpansionPanelHeader.prototype._keydown = function (event) {
        switch (event.keyCode) {
            // Toggle for space and enter keys.
            case SPACE:
            case ENTER:
                event.preventDefault();
                this._toggle();
                break;
            default:
                return;
        }
    };
    NovoExpansionPanelHeader.prototype.ngOnDestroy = function () {
        this._parentChangeSubscription.unsubscribe();
        // this._focusMonitor.stopMonitoring(this._element.nativeElement);
    };
    NovoExpansionPanelHeader.ɵfac = function NovoExpansionPanelHeader_Factory(t) { return new (t || NovoExpansionPanelHeader)(ɵɵdirectiveInject(NovoExpansionPanel, 1), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoExpansionPanelHeader.ɵcmp = ɵɵdefineComponent({ type: NovoExpansionPanelHeader, selectors: [["novo-expansion-panel-header"]], hostAttrs: ["role", "button", 1, "novo-expansion-panel-header"], hostVars: 14, hostBindings: function NovoExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoExpansionPanelHeader_click_HostBindingHandler() { return ctx._toggle(); })("keydown", function NovoExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });
        } if (rf & 2) {
            ɵɵattribute("id", ctx.panel._headerId)("tabindex", ctx.panel.disabled ? 0 - 1 : 0)("aria-controls", ctx._getPanelId())("aria-expanded", ctx._isExpanded())("aria-disabled", ctx.panel.disabled);
            ɵɵupdateSyntheticHostBinding("@expansionHeight", ɵɵpureFunction2(11, _c1$k, ctx._getExpandedState(), ɵɵpureFunction2(8, _c0$D, ctx.collapsedHeight, ctx.expandedHeight)));
            ɵɵclassProp("novo-expanded", ctx._isExpanded());
        } }, inputs: { expandedHeight: "expandedHeight", collapsedHeight: "collapsedHeight" }, ngContentSelectors: _c3$5, decls: 5, vars: 1, consts: [[1, "novo-content"], ["class", "novo-expansion-indicator", 4, "ngIf"], [1, "novo-expansion-indicator"]], template: function NovoExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c2$8);
            ɵɵelementStart(0, "span", 0);
            ɵɵprojection(1);
            ɵɵprojection(2, 1);
            ɵɵprojection(3, 2);
            ɵɵelementEnd();
            ɵɵtemplate(4, NovoExpansionPanelHeader_span_4_Template, 1, 1, "span", 1);
        } if (rf & 2) {
            ɵɵadvance(4);
            ɵɵproperty("ngIf", ctx._showToggle());
        } }, directives: [NgIf], styles: [".novo-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px}.novo-expansion-panel-header:focus,.novo-expansion-panel-header:hover{outline:0}.novo-expansion-panel-header.novo-expanded:focus,.novo-expansion-panel-header.novo-expanded:hover{background:inherit}.novo-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.novo-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.novo-expansion-panel-header-description,.novo-expansion-panel-header-title{display:flex;flex-grow:1;margin-right:16px;align-items:center}[dir=rtl] .novo-expansion-panel-header-description,[dir=rtl] .novo-expansion-panel-header-title{margin-right:0;margin-left:16px}.novo-expansion-panel-header-description{flex-grow:2}.novo-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\"\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}"], encapsulation: 2, data: { animation: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight] }, changeDetection: 0 });
    return NovoExpansionPanelHeader;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelHeader, [{
        type: Component,
        args: [{
                selector: 'novo-expansion-panel-header',
                styleUrls: ['./expansion-panel-header.scss'],
                templateUrl: './expansion-panel-header.html',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                animations: [novoExpansionAnimations.indicatorRotate, novoExpansionAnimations.expansionHeaderHeight],
                host: {
                    class: 'novo-expansion-panel-header',
                    role: 'button',
                    '[attr.id]': 'panel._headerId',
                    '[attr.tabindex]': 'panel.disabled ? -1 : 0',
                    '[attr.aria-controls]': '_getPanelId()',
                    '[attr.aria-expanded]': '_isExpanded()',
                    '[attr.aria-disabled]': 'panel.disabled',
                    '[class.novo-expanded]': '_isExpanded()',
                    '(click)': '_toggle()',
                    '(keydown)': '_keydown($event)',
                    '[@expansionHeight]': "{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }",
                },
            }]
    }], function () { return [{ type: NovoExpansionPanel, decorators: [{
                type: Host
            }] }, { type: ElementRef }, { type: ChangeDetectorRef }]; }, { expandedHeight: [{
            type: Input
        }], collapsedHeight: [{
            type: Input
        }] }); })();
/**
 * `<novo-panel-description>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
var NovoExpansionPanelDescription = /** @class */ (function () {
    function NovoExpansionPanelDescription() {
    }
    NovoExpansionPanelDescription.ɵfac = function NovoExpansionPanelDescription_Factory(t) { return new (t || NovoExpansionPanelDescription)(); };
    NovoExpansionPanelDescription.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelDescription, selectors: [["novo-panel-description"]], hostAttrs: [1, "novo-expansion-panel-header-description"] });
    return NovoExpansionPanelDescription;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelDescription, [{
        type: Directive,
        args: [{
                selector: 'novo-panel-description',
                host: {
                    class: 'novo-expansion-panel-header-description',
                },
            }]
    }], null, null); })();
/**
 * `<novo-panel-title>`
 *
 * This direction is to be used inside of the NovoExpansionPanelHeader component.
 */
var NovoExpansionPanelTitle = /** @class */ (function () {
    function NovoExpansionPanelTitle() {
    }
    NovoExpansionPanelTitle.ɵfac = function NovoExpansionPanelTitle_Factory(t) { return new (t || NovoExpansionPanelTitle)(); };
    NovoExpansionPanelTitle.ɵdir = ɵɵdefineDirective({ type: NovoExpansionPanelTitle, selectors: [["novo-panel-title"]], hostAttrs: [1, "novo-expansion-panel-header-title"] });
    return NovoExpansionPanelTitle;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionPanelTitle, [{
        type: Directive,
        args: [{
                selector: 'novo-panel-title',
                host: {
                    class: 'novo-expansion-panel-header-title',
                },
            }]
    }], null, null); })();

var NovoExpansionModule = /** @class */ (function () {
    function NovoExpansionModule() {
    }
    NovoExpansionModule.ɵmod = ɵɵdefineNgModule({ type: NovoExpansionModule });
    NovoExpansionModule.ɵinj = ɵɵdefineInjector({ factory: function NovoExpansionModule_Factory(t) { return new (t || NovoExpansionModule)(); }, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });
    return NovoExpansionModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoExpansionModule, { declarations: [NovoAccordion,
        NovoExpansionPanel,
        NovoExpansionPanelActionRow,
        NovoExpansionPanelHeader,
        NovoExpansionPanelTitle,
        NovoExpansionPanelDescription,
        NovoExpansionPanelContent], imports: [CommonModule, CdkAccordionModule, PortalModule], exports: [NovoAccordion,
        NovoExpansionPanel,
        NovoExpansionPanelActionRow,
        NovoExpansionPanelHeader,
        NovoExpansionPanelTitle,
        NovoExpansionPanelDescription,
        NovoExpansionPanelContent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoExpansionModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, CdkAccordionModule, PortalModule],
                exports: [
                    NovoAccordion,
                    NovoExpansionPanel,
                    NovoExpansionPanelActionRow,
                    NovoExpansionPanelHeader,
                    NovoExpansionPanelTitle,
                    NovoExpansionPanelDescription,
                    NovoExpansionPanelContent,
                ],
                declarations: [
                    NovoAccordion,
                    NovoExpansionPanel,
                    NovoExpansionPanelActionRow,
                    NovoExpansionPanelHeader,
                    NovoExpansionPanelTitle,
                    NovoExpansionPanelDescription,
                    NovoExpansionPanelContent,
                ],
            }]
    }], null, null); })();

var ControlConfig = /** @class */ (function () {
    function ControlConfig() {
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
    }
    return ControlConfig;
}());
var BaseControl = /** @class */ (function (_super) {
    __extends(BaseControl, _super);
    function BaseControl(type, config) {
        if (type === void 0) { type = 'BaseControl'; }
        if (config === void 0) { config = {}; }
        var _this = _super.call(this) || this;
        _this.__type = 'BaseControl';
        _this.__type = type;
        _this.__config = config;
        _this.validators = config.validators || [];
        _this.asyncValidators = config.asyncValidators || [];
        _this.value = config.value;
        _this.key = config.key || '';
        _this.label = config.label || '';
        _this.checkboxLabel = config.checkboxLabel;
        _this.name = config.name || '';
        _this.required = !!config.required;
        _this.hidden = !!config.hidden;
        _this.encrypted = !!config.encrypted;
        _this.sortOrder = config.sortOrder === undefined ? 1 : config.sortOrder;
        _this.controlType = config.controlType || '';
        _this.type = config.type;
        _this.subType = config.subType;
        _this.metaType = config.metaType;
        _this.placeholder = config.placeholder || '';
        _this.config = config.config || null;
        _this.dirty = !!(config.value !== undefined && config.value !== null);
        _this.multiple = !!config.multiple;
        _this.headerConfig = config.headerConfig || null;
        _this.currencyFormat = config.currencyFormat || null;
        _this.associatedEntity = config.associatedEntity || null;
        _this.optionsType = config.optionsType || null;
        _this.options = config.options || [];
        _this.forceClear = new EventEmitter();
        _this.readOnly = !!config.readOnly || !!config.disabled;
        _this.disabled = !!config.disabled;
        _this.layoutOptions = config.layoutOptions || {};
        _this.military = !!config.military;
        _this.dateFormat = config.dateFormat;
        _this.textMaskEnabled = config.textMaskEnabled;
        _this.maskOptions = config.maskOptions;
        _this.allowInvalidDate = config.allowInvalidDate;
        _this.startDate = config.startDate;
        _this.endDate = config.endDate;
        _this.restrictFieldInteractions = !!config.restrictFieldInteractions;
        if (!Helpers.isEmpty(config.warning)) {
            _this.warning = config.warning;
        }
        if (_this.required) {
            _this.validators.push(Validators.required);
        }
        if (!Helpers.isBlank(config.maxlength)) {
            _this.maxlength = config.maxlength;
            _this.validators.push(Validators.maxLength(_this.maxlength));
        }
        if (!Helpers.isBlank(config.minlength)) {
            _this.minlength = config.minlength;
            _this.validators.push(Validators.minLength(_this.minlength));
        }
        _this.closeOnSelect = !!config.closeOnSelect;
        _this.interactions = config.interactions;
        _this.dataSpecialization = config.dataSpecialization;
        _this.dataType = config.dataType;
        _this.appendToBody = !!config.appendToBody;
        if (_this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        _this.parentScrollSelector = config.parentScrollSelector;
        _this.description = config.description;
        if (config.tooltip) {
            _this.tooltip = config.tooltip;
            _this.tooltipPosition = config.tooltipPosition;
            _this.tooltipSize = config.tooltipSize;
            _this.tooltipPreline = config.tooltipPreline;
            _this.removeTooltipArrow = config.removeTooltipArrow;
            _this.tooltipAutoPosition = config.tooltipAutoPosition;
        }
        _this.template = config.template;
        _this.customControlConfig = config.customControlConfig;
        _this.tipWell = config.tipWell;
        _this.width = config.width;
        _this.startupFocus = !!config.startupFocus;
        if (config.fileBrowserImageUploadUrl) {
            _this.fileBrowserImageUploadUrl = config.fileBrowserImageUploadUrl;
        }
        if (config.isEmpty) {
            _this.isEmpty = config.isEmpty;
        }
        _this.weekStart = config.weekStart || 0;
        return _this;
    }
    return BaseControl;
}(ControlConfig));

var MAX_INTEGER = 2147483647;
var MIN_YEAR = 1753;
var FormValidators = /** @class */ (function () {
    function FormValidators() {
    }
    FormValidators.prototype.showStateRequiredFlag = function (subfield, control) {
        return (subfield === 'state' &&
            !Helpers.isEmpty(control.config.state) &&
            control.config.state.required &&
            Helpers.isBlank(control.value.state) &&
            control.config.state.updated &&
            !Helpers.isBlank(control.value.countryName) &&
            control.config.state.pickerConfig &&
            control.config.state.pickerConfig.defaultOptions &&
            control.config.state.pickerConfig.defaultOptions.length > 0);
    };
    // Makes sure the control value does not exceed the max integer value
    FormValidators.maxInteger = function (control) {
        return control.value < MAX_INTEGER ? null : { integerTooLarge: true };
    };
    // Makes sure the control value is above the minimum year
    FormValidators.minYear = function (control) {
        if (!control.value) {
            return null;
        }
        return control.value >= MIN_YEAR ? null : { minYear: true };
    };
    // Makes sure the control value does not exceed the max number value
    FormValidators.maxDouble = function (control) {
        return control.value < Number.MAX_SAFE_INTEGER ? null : { doubleTooLarge: true };
    };
    // Make sure the control value is an email
    FormValidators.isEmail = function (control) {
        var EMAIL_REGEXP = /^[a-z0-9!#$%&'*+\/=?^_`{|}~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i;
        return !control.value || EMAIL_REGEXP.test(control.value) ? null : { invalidEmail: true };
    };
    // Makes sure the control value is a valid address
    FormValidators.isValidAddress = function (control) {
        var fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        var invalidAddressFields = [];
        var maxlengthFields = [];
        var returnVal = null;
        var maxlengthError = false;
        var showCountryRequiredFlag = function (subfield, ctrl) {
            return (subfield === 'countryID' &&
                !Helpers.isEmpty(ctrl.config.countryID) &&
                ctrl.config.countryID.required &&
                Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.countryID.updated);
        };
        var showStateRequiredFlag = function (subfield, ctrl) {
            return (subfield === 'state' &&
                !Helpers.isEmpty(ctrl.config.state) &&
                ctrl.config.state.required &&
                Helpers.isBlank(ctrl.value.state) &&
                ctrl.config.state.updated &&
                !Helpers.isBlank(ctrl.value.countryName) &&
                ctrl.config.state.pickerConfig &&
                ctrl.config.state.pickerConfig.defaultOptions &&
                ctrl.config.state.pickerConfig.defaultOptions.length > 0);
        };
        if (control.value && control.config) {
            var valid_1 = true;
            var formValidity_1 = true;
            fieldList.forEach(function (subfield) {
                if (!Helpers.isEmpty(control.config[subfield])) {
                    if ((['countryID', 'state'].indexOf(subfield) === -1 &&
                        control.config[subfield].required &&
                        !Helpers.isBlank(control.value[subfield]) &&
                        Helpers.isEmpty(control.value[subfield])) ||
                        showCountryRequiredFlag(subfield, control) ||
                        showStateRequiredFlag(subfield, control)) {
                        valid_1 = false;
                        invalidAddressFields.push(control.config[subfield].label);
                    }
                    if (((subfield !== 'countryID' && control.config[subfield].required && Helpers.isEmpty(control.value[subfield])) ||
                        (subfield === 'countryID' &&
                            !Helpers.isEmpty(control.config.countryID) &&
                            control.config.countryID.required &&
                            Helpers.isEmpty(control.value.countryName))) &&
                        !(subfield === 'state' &&
                            !Helpers.isBlank(control.value.countryName) &&
                            control.config.state.pickerConfig &&
                            control.config.state.pickerConfig.defaultOptions &&
                            control.config.state.pickerConfig.defaultOptions.length === 0)) {
                        formValidity_1 = false;
                    }
                    if (!Helpers.isEmpty(control.config[subfield].maxlength) &&
                        !Helpers.isEmpty(control.value[subfield]) &&
                        control.value[subfield].length > control.config[subfield].maxlength) {
                        maxlengthError = true;
                        maxlengthFields.push(subfield);
                        formValidity_1 = false;
                    }
                }
            });
            if (!valid_1 || !formValidity_1 || maxlengthError) {
                returnVal = {};
            }
            if (!valid_1) {
                returnVal.invalidAddress = true;
                returnVal.invalidAddressFields = invalidAddressFields;
            }
            if (!formValidity_1) {
                returnVal.invalidAddressForForm = true;
            }
            if (maxlengthError) {
                returnVal.maxlength = true;
                returnVal.maxlengthFields = maxlengthFields;
            }
            return returnVal;
        }
        return null;
    };
    return FormValidators;
}());

var AddressControl = /** @class */ (function (_super) {
    __extends(AddressControl, _super);
    function AddressControl(config) {
        var _this = _super.call(this, 'AddressControl', config) || this;
        _this.controlType = 'address';
        _this.validators.push(FormValidators.isValidAddress);
        return _this;
    }
    return AddressControl;
}(BaseControl));

var CheckListControl = /** @class */ (function (_super) {
    __extends(CheckListControl, _super);
    function CheckListControl(config) {
        var _this = _super.call(this, 'CheckListControl', config) || this;
        _this.controlType = 'checklist';
        _this.options = config.options || [];
        return _this;
    }
    return CheckListControl;
}(BaseControl));

var CheckboxControl = /** @class */ (function (_super) {
    __extends(CheckboxControl, _super);
    function CheckboxControl(config) {
        var _this = _super.call(this, 'CheckboxControl', config) || this;
        _this.controlType = 'checkbox';
        return _this;
    }
    return CheckboxControl;
}(BaseControl));

var DateControl = /** @class */ (function (_super) {
    __extends(DateControl, _super);
    function DateControl(config) {
        var _this = _super.call(this, 'DateControl', config) || this;
        _this.controlType = 'date';
        return _this;
    }
    return DateControl;
}(BaseControl));

var DateTimeControl = /** @class */ (function (_super) {
    __extends(DateTimeControl, _super);
    function DateTimeControl(config) {
        var _this = _super.call(this, 'DateTimeControl', config) || this;
        _this.controlType = 'date-time';
        return _this;
    }
    return DateTimeControl;
}(BaseControl));

var EditorControl = /** @class */ (function (_super) {
    __extends(EditorControl, _super);
    function EditorControl(config) {
        var _this = _super.call(this, 'EditorControl', config) || this;
        _this.controlType = 'editor';
        _this.minimal = false;
        return _this;
    }
    return EditorControl;
}(BaseControl));

var AceEditorControl = /** @class */ (function (_super) {
    __extends(AceEditorControl, _super);
    function AceEditorControl(config) {
        var _this = _super.call(this, 'AceEditorControl', config) || this;
        _this.controlType = 'ace-editor';
        return _this;
    }
    return AceEditorControl;
}(BaseControl));

var FileControl = /** @class */ (function (_super) {
    __extends(FileControl, _super);
    function FileControl(config) {
        var _this = _super.call(this, 'FileControl', config) || this;
        _this.controlType = 'file';
        // TODO - translate
        _this.placeholder = config.placeholder;
        _this.multiple = config.multiple;
        return _this;
    }
    return FileControl;
}(BaseControl));

var NativeSelectControl = /** @class */ (function (_super) {
    __extends(NativeSelectControl, _super);
    function NativeSelectControl(config) {
        var _this = _super.call(this, 'NativeSelectControl', config) || this;
        _this.controlType = 'native-select';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return NativeSelectControl;
}(BaseControl));

var PickerControl = /** @class */ (function (_super) {
    __extends(PickerControl, _super);
    function PickerControl(config) {
        var _this = _super.call(this, 'PickerControl', config) || this;
        _this.controlType = 'picker';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return PickerControl;
}(BaseControl));
var TablePickerControl = /** @class */ (function (_super) {
    __extends(TablePickerControl, _super);
    function TablePickerControl(config) {
        var _this = _super.call(this, Object.assign(config, { parentScrollSelector: '.table-container' })) || this;
        _this.__type = 'TablePickerControl';
        return _this;
    }
    return TablePickerControl;
}(PickerControl));

var QuickNoteControl = /** @class */ (function (_super) {
    __extends(QuickNoteControl, _super);
    function QuickNoteControl(config) {
        var _this = _super.call(this, 'QuickNoteControl', config) || this;
        _this.controlType = 'quick-note';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return QuickNoteControl;
}(BaseControl));

var RadioControl = /** @class */ (function (_super) {
    __extends(RadioControl, _super);
    function RadioControl(config) {
        var _this = _super.call(this, 'RadioControl', config) || this;
        _this.controlType = 'radio';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return RadioControl;
}(BaseControl));

var ReadOnlyControl = /** @class */ (function (_super) {
    __extends(ReadOnlyControl, _super);
    function ReadOnlyControl(config) {
        var _this = _super.call(this, 'ReadOnlyControl', config) || this;
        _this.controlType = 'read-only';
        config.readOnly = true;
        return _this;
    }
    return ReadOnlyControl;
}(BaseControl));

var SelectControl = /** @class */ (function (_super) {
    __extends(SelectControl, _super);
    function SelectControl(config) {
        var _this = _super.call(this, 'SelectControl', config) || this;
        _this.controlType = 'select';
        _this.options = [];
        _this.options = config.options || [];
        _this.placeholder = config.placeholder || '';
        return _this;
    }
    return SelectControl;
}(BaseControl));

var TextAreaControl = /** @class */ (function (_super) {
    __extends(TextAreaControl, _super);
    function TextAreaControl(config) {
        var _this = _super.call(this, 'TextAreaControl', config) || this;
        _this.controlType = 'text-area';
        return _this;
    }
    return TextAreaControl;
}(BaseControl));

var TextBoxControl = /** @class */ (function (_super) {
    __extends(TextBoxControl, _super);
    function TextBoxControl(config) {
        var _this = _super.call(this, 'TextBoxControl', config) || this;
        _this.controlType = 'textbox';
        _this.type = _this.getTextboxType(config.type) || '';
        _this.subType = config.type || '';
        _this.setValidators(_this.subType);
        return _this;
    }
    TextBoxControl.prototype.setValidators = function (type) {
        switch (type) {
            case 'email':
                this.validators.push(FormValidators.isEmail);
                break;
            case 'number':
            case 'currency':
                this.validators.push(FormValidators.maxInteger);
                break;
            case 'float':
            case 'percentage':
                this.validators.push(FormValidators.maxDouble);
                break;
            case 'year':
                this.validators.push(FormValidators.minYear);
                break;
            default:
                break;
        }
    };
    TextBoxControl.prototype.getTextboxType = function (type) {
        switch (type) {
            case 'percentage':
            case 'currency':
            case 'float':
            case 'year':
                return 'number';
            default:
                return type;
        }
    };
    return TextBoxControl;
}(BaseControl));

var TilesControl = /** @class */ (function (_super) {
    __extends(TilesControl, _super);
    function TilesControl(config) {
        var _this = _super.call(this, 'TilesControl', config) || this;
        _this.controlType = 'tiles';
        _this.options = [];
        _this.options = config.options || [];
        return _this;
    }
    return TilesControl;
}(BaseControl));

var TimeControl = /** @class */ (function (_super) {
    __extends(TimeControl, _super);
    function TimeControl(config) {
        var _this = _super.call(this, 'TimeControl', config) || this;
        _this.controlType = 'time';
        return _this;
    }
    return TimeControl;
}(BaseControl));

var GroupedControl = /** @class */ (function () {
    function GroupedControl(config) {
        var _this = this;
        this.__type = 'GroupedControl';
        Object.keys(config).forEach(function (key) { return (_this[key] = config[key]); });
    }
    return GroupedControl;
}());

var ControlFactory = /** @class */ (function () {
    function ControlFactory() {
    }
    ControlFactory.create = function (type, config) {
        switch (type) {
            case 'AddressControl':
                return new AddressControl(config);
            case 'CheckboxControl':
                return new CheckboxControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'CheckListControl':
                return new CheckListControl(config);
            case 'DateTimeControl':
                return new DateTimeControl(config);
            case 'EditorControl':
                return new EditorControl(config);
            case 'FileControl':
                return new FileControl(config);
            case 'NativeSelectControl':
                return new NativeSelectControl(config);
            case 'PickerControl':
                return new PickerControl(config);
            case 'TablePickerControl':
                return new TablePickerControl(config);
            case 'QuickNoteControl':
                return new QuickNoteControl(config);
            case 'RadioControl':
                return new RadioControl(config);
            case 'ReadOnlyControl':
                return new ReadOnlyControl(config);
            case 'TextAreaControl':
                return new TextAreaControl(config);
            case 'TextBoxControl':
                return new TextBoxControl(config);
            case 'SelectControl':
                return new SelectControl(config);
            case 'TilesControl':
                return new TilesControl(config);
            case 'TimeControl':
                return new TimeControl(config);
            default:
                console.warn('[ControlFactory] - unable to find control for type. Make sure to set "editorType" and "editorConfig" on your column', type);
                return null;
        }
    };
    return ControlFactory;
}());

var CustomControl = /** @class */ (function (_super) {
    __extends(CustomControl, _super);
    function CustomControl(config) {
        var _this = _super.call(this, config.template, config) || this;
        _this.controlType = 'custom';
        _this.controlType = config.template;
        return _this;
    }
    return CustomControl;
}(BaseControl));

var NovoFormControl = /** @class */ (function (_super) {
    __extends(NovoFormControl, _super);
    function NovoFormControl(value, control) {
        var _this = _super.call(this, value, control.validators, control.asyncValidators) || this;
        _this.displayValueChanges = new EventEmitter();
        _this.valueHistory = [];
        _this.validators = control.validators;
        _this.initialValue = value;
        _this.valueHistory.push(value);
        _this.key = control.key;
        _this.label = control.label;
        _this.readOnly = control.readOnly;
        _this.hidden = control.hidden;
        _this.encrypted = control.encrypted;
        _this.config = control.config;
        _this.type = control.type;
        _this.subType = control.subType;
        _this.required = control.required;
        _this.hasRequiredValidator = _this.required;
        _this.tooltip = control.tooltip;
        _this.tooltipPosition = control.tooltipPosition;
        _this.tooltipSize = control.tooltipSize;
        _this.tooltipPreline = control.tooltipPreline;
        _this.removeTooltipArrow = control.removeTooltipArrow;
        _this.tooltipAutoPosition = control.tooltipAutoPosition;
        _this.label = control.label;
        _this.name = control.name;
        _this.required = control.required;
        _this.sortOrder = control.sortOrder;
        _this.controlType = control.controlType;
        _this.placeholder = control.placeholder;
        _this.minimal = control.minimal;
        _this.multiple = control.multiple;
        _this.headerConfig = control.headerConfig;
        _this.optionsType = control.optionsType;
        _this.readOnly = control.readOnly;
        _this.layoutOptions = control.layoutOptions;
        _this.military = control.military;
        _this.dateFormat = control.dateFormat;
        _this.currencyFormat = control.currencyFormat;
        _this.startDate = control.startDate;
        _this.endDate = control.endDate;
        _this.weekStart = control.weekStart;
        _this.textMaskEnabled = control.textMaskEnabled;
        _this.textMaskEnabled = control.textMaskEnabled;
        _this.maskOptions = control.maskOptions;
        _this.allowInvalidDate = control.allowInvalidDate;
        _this.maxlength = control.maxlength;
        _this.minlength = control.minlength;
        _this.closeOnSelect = control.closeOnSelect;
        _this.interactions = control.interactions;
        _this.checkboxLabel = control.checkboxLabel;
        _this.restrictFieldInteractions = control.restrictFieldInteractions;
        _this.appendToBody = control.appendToBody;
        if (_this.appendToBody) {
            notify("'appendToBody' has been deprecated. Please remove this attribute.");
        }
        _this.parentScrollSelector = control.parentScrollSelector;
        _this.description = control.description;
        _this.options = control.options;
        _this.tipWell = control.tipWell;
        _this.customControlConfig = control.customControlConfig;
        _this.warning = control.warning;
        // Reactive Form, need to enable/disable, can't bind to [disabled]
        if (_this.readOnly) {
            _this.disable();
        }
        else {
            _this.enable();
        }
        return _this;
    }
    /**
     * @param clearValue - flag to reset the control's value
     */
    NovoFormControl.prototype.hide = function (clearValue) {
        if (clearValue === void 0) { clearValue = true; }
        this.hidden = true;
        if (clearValue) {
            this.setValue(null);
        }
    };
    NovoFormControl.prototype.show = function () {
        this.hidden = false;
    };
    NovoFormControl.prototype.setRequired = function (isRequired) {
        this.required = isRequired;
        // Update validators to have the required
        if (this.required && !this.hasRequiredValidator) {
            var validators = __spread(this.validators);
            validators.push(Validators.required);
            // TODO: duplicated below
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
        else if (!this.required && this.hasRequiredValidator) {
            var validators = __spread(this.validators);
            validators = validators.filter(function (val) { return val !== Validators.required; });
            // TODO: duplicated above
            this.setValidators(validators);
            this.updateValueAndValidity({ emitEvent: false });
            this.hasRequiredValidator = this.required;
        }
    };
    NovoFormControl.prototype.setValue = function (value, _a) {
        var _this = this;
        var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;
        this.markAsDirty();
        this.markAsTouched();
        this.displayValueChanges.emit(value);
        _super.prototype.setValue.call(this, value, { onlySelf: onlySelf, emitEvent: emitEvent, emitModelToViewChange: emitModelToViewChange, emitViewToModelChange: emitViewToModelChange });
        // History
        clearTimeout(this.historyTimeout);
        this.historyTimeout = setTimeout(function () {
            _this.valueHistory.push(value);
        }, 300);
    };
    NovoFormControl.prototype.setReadOnly = function (isReadOnly) {
        this.readOnly = isReadOnly;
        if (this.readOnly) {
            this.disable();
        }
        else {
            this.enable();
        }
    };
    /**
     * Disables the control. This means the control will be exempt from validation checks and
     * excluded from the aggregate value of any parent. Its status is `DISABLED`.
     *
     * If the control has children, all children will be disabled to maintain the model.
     */
    NovoFormControl.prototype.disable = function (opts) {
        if (opts === void 0) { opts = { emitEvent: false }; }
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        _super.prototype.disable.call(this, opts);
    };
    NovoFormControl.prototype.enable = function (opts) {
        if (opts === void 0) { opts = { emitEvent: false }; }
        if (typeof opts.emitEvent === 'undefined') {
            opts.emitEvent = false;
        }
        _super.prototype.enable.call(this, opts);
    };
    NovoFormControl.prototype.markAsInvalid = function (message) {
        this.markAsDirty();
        this.markAsTouched();
        this.setErrors(Object.assign({}, this.errors, { custom: message }));
    };
    return NovoFormControl;
}(FormControl));

var NovoFormGroup = /** @class */ (function (_super) {
    __extends(NovoFormGroup, _super);
    function NovoFormGroup() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fieldInteractionEvents = new EventEmitter();
        return _this;
    }
    Object.defineProperty(NovoFormGroup.prototype, "value", {
        get: function () {
            return this.getRawValue();
        },
        set: function (v) {
            this._value = v;
        },
        enumerable: true,
        configurable: true
    });
    NovoFormGroup.prototype.enableAllControls = function () {
        for (var key in this.controls) {
            if (this.controls[key].readOnly) {
                this.controls[key].readOnly = false;
                this.controls[key].enable();
            }
        }
    };
    NovoFormGroup.prototype.disableAllControls = function () {
        for (var key in this.controls) {
            if (!this.controls[key].readOnly) {
                this.controls[key].readOnly = true;
                this.controls[key].disable();
            }
        }
    };
    return NovoFormGroup;
}(FormGroup));

// App
var OptionsService = /** @class */ (function () {
    function OptionsService() {
    }
    OptionsService.prototype.getOptionsConfig = function (http, field, config) {
        return {
            field: 'value',
            format: '$label',
            options: function (query) {
                return new Promise(function (resolve, reject) {
                    if (query && query.length) {
                        http.get(field.optionsUrl + "?filter=" + (query || '')).subscribe(resolve, reject);
                    }
                    else {
                        resolve([]);
                    }
                });
            },
        };
    };
    OptionsService.ɵfac = function OptionsService_Factory(t) { return new (t || OptionsService)(); };
    OptionsService.ɵprov = ɵɵdefineInjectable({ token: OptionsService, factory: OptionsService.ɵfac });
    return OptionsService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(OptionsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

var FormUtils = /** @class */ (function () {
    function FormUtils(labels, optionsService) {
        this.labels = labels;
        this.optionsService = optionsService;
        this.ASSOCIATED_ENTITY_LIST = [
            'Candidate',
            'ClientContact',
            'ClientCorporation',
            'CorporationDepartment',
            'Lead',
            'Opportunity',
            'JobOrder',
            'CorporateUser',
            'Person',
            'Placement',
        ];
        this.ENTITY_PICKER_LIST = [
            'Candidate',
            'CandidateText',
            'Client',
            'ClientText',
            'ClientContact',
            'ClientContactText',
            'ClientCorporation',
            'ClientCorporationText',
            'Lead',
            'LeadText',
            'Opportunity',
            'OpportunityText',
            'JobOrder',
            'JobOrderText',
            'CorporateUser',
            'CorporateUserText',
            'Person',
            'PersonText',
            'Placement',
        ];
    }
    FormUtils.prototype.toFormGroup = function (controls) {
        var group = {};
        controls.forEach(function (control) {
            var value = Helpers.isBlank(control.value) ? '' : control.value;
            group[control.key] = new NovoFormControl(value, control);
        });
        return new NovoFormGroup(group);
    };
    FormUtils.prototype.emptyFormGroup = function () {
        return new NovoFormGroup({});
    };
    FormUtils.prototype.addControls = function (formGroup, controls) {
        controls.forEach(function (control) {
            var value = Helpers.isBlank(control.value) ? '' : control.value;
            var formControl = new NovoFormControl(value, control);
            formGroup.addControl(control.key, formControl);
        });
    };
    FormUtils.prototype.removeControls = function (formGroup, controls) {
        controls.forEach(function (control) {
            formGroup.removeControl(control.key);
        });
    };
    FormUtils.prototype.toFormGroupFromFieldset = function (fieldsets) {
        var controls = [];
        fieldsets.forEach(function (fieldset) {
            controls.push.apply(controls, __spread(fieldset.controls));
        });
        return this.toFormGroup(controls);
    };
    FormUtils.prototype.hasAssociatedEntity = function (field) {
        return !!(field.associatedEntity && ~this.ASSOCIATED_ENTITY_LIST.indexOf(field.associatedEntity.entity));
    };
    FormUtils.prototype.determineInputType = function (field) {
        var type;
        var dataSpecializationTypeMap = {
            DATETIME: 'datetime',
            TIME: 'time',
            MONEY: 'currency',
            PERCENTAGE: 'percentage',
            HTML: 'editor',
            'HTML-MINIMAL': 'editor-minimal',
            YEAR: 'year',
            WORKFLOW_OPTIONS: 'select',
            SPECIALIZED_OPTIONS: 'select',
            WorkflowOptionsLookup: 'select',
            SpecializedOptionsLookup: 'select',
            SimplifiedOptionsLookup: 'select',
        };
        var dataTypeToTypeMap = {
            Timestamp: 'date',
            Date: 'date',
            Boolean: 'tiles',
        };
        var inputTypeToTypeMap = {
            CHECKBOX: 'radio',
            RADIO: 'radio',
            SELECT: 'select',
            TILES: 'tiles',
        };
        var inputTypeMultiToTypeMap = {
            CHECKBOX: 'checklist',
            RADIO: 'checklist',
            SELECT: 'chips',
        };
        var typeToTypeMap = {
            file: 'file',
            COMPOSITE: 'address',
        };
        var numberDataTypeToTypeMap = {
            Double: 'float',
            BigDecimal: 'float',
            Integer: 'number',
        };
        if (field.type === 'TO_MANY') {
            if (this.hasAssociatedEntity(field)) {
                if (field.multiValue === false) {
                    type = 'entitypicker';
                }
                else {
                    type = 'entitychips';
                }
            }
            else {
                if (field.multiValue === false) {
                    type = 'picker';
                }
                else {
                    type = 'chips';
                }
            }
        }
        else if (field.type === 'TO_ONE') {
            if ('SYSTEM' === field.dataSpecialization && ['WorkflowOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                type = dataSpecializationTypeMap[field.dataType];
            }
            else if (['WORKFLOW_OPTIONS', 'SPECIALIZED_OPTIONS'].includes(field.dataSpecialization)) {
                type = dataSpecializationTypeMap[field.dataSpecialization];
            }
            else if (['SimplifiedOptionsLookup', 'SpecializedOptionsLookup'].includes(field.dataType)) {
                if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
                    type = inputTypeToTypeMap[field.inputType];
                }
                else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
                    type = inputTypeMultiToTypeMap[field.inputType];
                }
                else {
                    type = dataSpecializationTypeMap[field.dataType];
                }
            }
            else if (this.hasAssociatedEntity(field)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (field.optionsUrl && field.inputType === 'SELECT') {
            if (field.optionsType && ~this.ENTITY_PICKER_LIST.indexOf(field.optionsType)) {
                type = 'entitypicker'; // TODO!
            }
            else {
                type = 'picker';
            }
        }
        else if (Object.keys(dataSpecializationTypeMap).indexOf(field.dataSpecialization) > -1) {
            type = dataSpecializationTypeMap[field.dataSpecialization];
        }
        else if (Object.keys(dataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = dataTypeToTypeMap[field.dataType];
        }
        else if (field.inputType === 'TEXTAREA') {
            type = 'textarea';
        }
        else if (field.options && Object.keys(inputTypeToTypeMap).indexOf(field.inputType) > -1 && !field.multiValue) {
            type = inputTypeToTypeMap[field.inputType];
        }
        else if (field.options && Object.keys(inputTypeMultiToTypeMap).indexOf(field.inputType) > -1 && field.multiValue) {
            type = inputTypeMultiToTypeMap[field.inputType];
        }
        else if (Object.keys(typeToTypeMap).indexOf(field.type) > -1) {
            type = typeToTypeMap[field.type];
        }
        else if (Object.keys(numberDataTypeToTypeMap).indexOf(field.dataType) > -1) {
            type = numberDataTypeToTypeMap[field.dataType];
        } /* else {
                throw new Error('FormUtils: This field type is unsupported.');
            }*/
        return type;
    };
    FormUtils.prototype.isFieldEncrypted = function (key) {
        return key.indexOf('customEncrypted') > -1;
    };
    FormUtils.prototype.getControlForField = function (field, http, config, overrides, forTable, fieldData) {
        var e_1, _a;
        if (forTable === void 0) { forTable = false; }
        // TODO: if field.type overrides `determineInputType` we should use it in that method or use this method
        // TODO: (cont.) as the setter of the field argument
        var type = this.determineInputType(field) || field.type;
        var control;
        var controlConfig = {
            metaType: field.type,
            type: type,
            key: field.name,
            label: field.label,
            placeholder: field.hint || '',
            required: field.required || field.systemRequired,
            hidden: !field.required,
            encrypted: this.isFieldEncrypted(field.name ? field.name.toString() : ''),
            value: field.value || field.defaultValue,
            sortOrder: field.sortOrder,
            associatedEntity: field.associatedEntity,
            optionsType: field.optionsType,
            multiple: field.multiValue,
            readOnly: !!field.disabled || !!field.readOnly,
            disabled: field.disabled,
            maxlength: field.maxLength,
            interactions: field.interactions,
            dataSpecialization: field.dataSpecialization,
            dataType: field.dataType,
            description: field.description || '',
            tooltip: field.tooltip,
            tooltipPosition: field.tooltipPosition,
            customControl: field.customControl,
            template: field.template,
            customControlConfig: field.customControlConfig,
            restrictFieldInteractions: field.restrictFieldInteractions,
            validators: field.validators,
            warning: field.warning,
            config: field.config || {},
            closeOnSelect: field.closeOnSelect,
            layoutOptions: field.layoutOptions,
        };
        this.inferStartDate(controlConfig, field);
        // TODO: getControlOptions should always return the correct format
        var optionsConfig = this.getControlOptions(field, http, config, fieldData);
        if (Array.isArray(optionsConfig) && !(type === 'chips' || type === 'picker')) {
            controlConfig.options = optionsConfig;
        }
        else if (Array.isArray(optionsConfig) && (type === 'chips' || type === 'picker')) {
            controlConfig.config = {
                options: optionsConfig,
            };
        }
        else if (optionsConfig) {
            controlConfig.config = __assign(__assign({}, optionsConfig), (controlConfig && controlConfig.config));
        }
        if (type === 'year') {
            controlConfig.maxlength = 4;
        }
        // TODO: Overrides should be an iterable of all properties (potentially a private method)
        var overrideResultsTemplate;
        var overridePreviewTemplate;
        if (overrides && overrides[field.name]) {
            if (overrides[field.name].resultsTemplate) {
                overrideResultsTemplate = overrides[field.name].resultsTemplate;
                controlConfig.config.resultsTemplate = overrideResultsTemplate;
                delete overrides[field.name].resultsTemplate;
            }
            if (overrides[field.name].overridePreviewTemplate) {
                overrideResultsTemplate = overrides[field.name].overridePreviewTemplate;
                controlConfig.config.overridePreviewTemplate = overrideResultsTemplate;
                delete overrides[field.name].overridePreviewTemplate;
            }
            if (overrides[field.name].pickerCallback) {
                controlConfig.config.callback = overrides[field.name].pickerCallback;
            }
            if (overrides[field.name].type) {
                type = overrides[field.name].type;
            }
            if (overrides[field.name].columns) {
                controlConfig.config.columns = overrides[field.name].columns;
                controlConfig.closeOnSelect = true;
                delete controlConfig.label;
            }
            if (overrides[field.name].warning) {
                controlConfig.warning = overrides[field.name].warning;
            }
            Object.assign(controlConfig, overrides[field.name]);
        }
        switch (type) {
            case 'entitychips':
                // TODO: This doesn't belong in this codebase
                controlConfig.multiple = true;
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                controlConfig.config.previewTemplate = overridePreviewTemplate || EntityPickerResult;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'chips':
                controlConfig.multiple = true;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'entitypicker':
                // TODO: This doesn't belong in this codebase
                controlConfig.config.resultsTemplate = overrideResultsTemplate || EntityPickerResults;
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'picker':
                // TODO: When appendToBody picker works better in table/form
                control = new PickerControl(controlConfig);
                break;
            case 'datetime':
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateTimeControl(controlConfig);
                break;
            case 'date':
                controlConfig.dateFormat = field.dateFormat;
                controlConfig.textMaskEnabled = field.textMaskEnabled;
                controlConfig.allowInvalidDate = field.allowInvalidDate;
                controlConfig.military = config ? !!config.military : false;
                controlConfig.weekStart = config && config.weekStart ? config.weekStart : 0;
                control = new DateControl(controlConfig);
                break;
            case 'time':
                controlConfig.military = config ? !!config.military : false;
                control = new TimeControl(controlConfig);
                break;
            case 'currency':
            case 'money':
            case 'email':
            case 'percentage':
            case 'float':
            case 'number':
            case 'year':
                // TODO: Only types from `determineInputType` should be used in this class
                if (type === 'money') {
                    type = 'currency';
                }
                controlConfig.type = type;
                control = new TextBoxControl(controlConfig);
                break;
            case 'text':
                control = new TextBoxControl(controlConfig);
                break;
            case 'textarea':
                control = new TextAreaControl(controlConfig);
                break;
            case 'editor':
                control = new EditorControl(controlConfig);
                break;
            case 'editor-minimal':
                control = new EditorControl(controlConfig);
                control.minimal = true;
                break;
            case 'tiles':
                control = new TilesControl(controlConfig);
                break;
            case 'checkbox':
                controlConfig.checkboxLabel = field.checkboxLabel;
                control = new CheckboxControl(controlConfig);
                break;
            case 'checklist':
                control = new CheckListControl(controlConfig);
                break;
            case 'radio':
                control = new RadioControl(controlConfig);
                break;
            case 'select':
                control = new SelectControl(controlConfig);
                break;
            case 'address':
                controlConfig.required = field.required || false;
                if (Helpers.isBlank(controlConfig.config)) {
                    controlConfig.config = {};
                }
                controlConfig.config.required = field.required;
                controlConfig.config.readOnly = controlConfig.readOnly;
                if (field.fields && field.fields.length) {
                    try {
                        for (var _b = __values(field.fields), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var subfield = _c.value;
                            controlConfig.config[subfield.name] = {
                                required: !!subfield.required,
                                hidden: !!subfield.readOnly,
                            };
                            if (!Helpers.isEmpty(subfield.label)) {
                                controlConfig.config[subfield.name].label = subfield.label;
                            }
                            if (!Helpers.isEmpty(subfield.maxLength)) {
                                controlConfig.config[subfield.name].maxlength = subfield.maxLength;
                            }
                            controlConfig.required = controlConfig.required || subfield.required;
                            if (subfield.defaultValue) {
                                if (Helpers.isBlank(controlConfig.value)) {
                                    controlConfig.value = {};
                                }
                                controlConfig.value[subfield.name] = subfield.defaultValue;
                            }
                            else if (subfield.name === 'countryID') {
                                if (Helpers.isBlank(controlConfig.value)) {
                                    controlConfig.value = {};
                                }
                                controlConfig.value[subfield.name] = 1;
                            }
                            if (subfield.name === 'state' || subfield.name === 'countryID') {
                                if (subfield.name === 'countryID') {
                                    subfield.optionsType = 'Country';
                                }
                                if (!subfield.optionsUrl) {
                                    subfield.optionsUrl = "options/" + subfield.optionsType;
                                }
                                controlConfig.config[subfield.name].pickerConfig = this.getControlOptions(subfield, http, config, fieldData);
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
                controlConfig.isEmpty = this.isAddressEmpty;
                control = new AddressControl(controlConfig);
                break;
            case 'file':
                control = new FileControl(controlConfig);
                break;
            case 'custom':
                control = new CustomControl(controlConfig);
                break;
            default:
                control = new TextBoxControl(controlConfig);
                break;
        }
        return control;
    };
    FormUtils.prototype.shouldCreateControl = function (field) {
        if (field.systemRequired) {
            field.readOnly = false;
        }
        return (field.name !== 'id' &&
            (!['SYSTEM', 'SECTION_HEADER'].includes(field.dataSpecialization) ||
                ['address', 'billingAddress', 'secondaryAddress'].includes(field.name)) &&
            !field.readOnly);
    };
    FormUtils.prototype.toControls = function (meta, currencyFormat, http, config, overrides, forTable) {
        var _this = this;
        if (forTable === void 0) { forTable = false; }
        var controls = [];
        if (meta && meta.fields) {
            var fields = meta.fields;
            fields.forEach(function (field) {
                if (_this.shouldCreateControl(field)) {
                    var control = _this.getControlForField(field, http, config, overrides, forTable);
                    // Set currency format
                    if (control.subType === 'currency') {
                        control.currencyFormat = currencyFormat;
                    }
                    // Add to controls
                    controls.push(control);
                }
            });
        }
        return controls;
    };
    FormUtils.prototype.toTableControls = function (meta, currencyFormat, http, config, overrides) {
        var controls = this.toControls(meta, currencyFormat, http, config, overrides, true);
        var ret = {};
        controls.forEach(function (control) {
            ret[control.key] = {
                editorType: control.__type,
                editorConfig: control.__config,
            };
        });
        return ret;
    };
    FormUtils.prototype.toFieldSets = function (meta, currencyFormat, http, config, overrides, data) {
        var _this = this;
        var fieldsets = [];
        var formFields = [];
        if (meta && meta.fields) {
            formFields = this.getFormFields(meta);
            formFields.forEach(function (field) {
                if (_this.isHeader(field)) {
                    if (field.enabled) {
                        _this.insertHeaderToFieldsets(fieldsets, field);
                    }
                }
                else if (_this.isEmbeddedField(field)) {
                    _this.insertHeaderToFieldsets(fieldsets, field);
                    var embeddedFields = _this.getEmbeddedFields(field);
                    embeddedFields.forEach(function (embeddedField) {
                        if (_this.shouldCreateControl(embeddedField)) {
                            var control = _this.createControl(embeddedField, data, http, config, overrides, currencyFormat);
                            control = _this.markControlAsEmbedded(control, field.dataSpecialization ? field.dataSpecialization.toLowerCase() : null);
                            fieldsets[fieldsets.length - 1].controls.push(control);
                        }
                        else if (_this.isHeader(embeddedField)) {
                            _this.insertHeaderToFieldsets(fieldsets, embeddedField);
                        }
                    });
                }
                else if (_this.shouldCreateControl(field)) {
                    var control = _this.createControl(field, data, http, config, overrides, currencyFormat);
                    if (field.inlineEmbeddedAssociatedEntityField) {
                        control = _this.markControlAsEmbedded(control, 'inline_embedded');
                    }
                    if (fieldsets.length === 0) {
                        fieldsets.push({ controls: [] });
                    }
                    fieldsets[fieldsets.length - 1].controls.push(control);
                }
            });
        }
        if (fieldsets.length > 0) {
            return fieldsets;
        }
        else {
            return [
                {
                    controls: this.toControls(meta, currencyFormat, http, config),
                },
            ];
        }
    };
    FormUtils.prototype.isEmbeddedField = function (field) {
        return field.dataSpecialization && ['embedded'].includes(field.dataSpecialization.toLowerCase()) && !field.readOnly;
    };
    FormUtils.prototype.createControl = function (field, data, http, config, overrides, currencyFormat) {
        var fieldData = this.isEmbeddedFieldData(field, data) ? this.getEmbeddedFieldData(field, data) : this.getFieldData(field, data);
        var control = this.getControlForField(field, http, config, overrides, undefined, fieldData);
        // Set currency format
        if (control.subType === 'currency') {
            control.currencyFormat = currencyFormat;
        }
        return control;
    };
    FormUtils.prototype.isEmbeddedFieldData = function (field, data) {
        return data && field.name.includes('.');
    };
    FormUtils.prototype.getFieldData = function (field, data) {
        return (data && data[field.name]) || null;
    };
    FormUtils.prototype.getEmbeddedFieldData = function (field, data) {
        var _a = __read(field.name.split('.'), 2), parentFieldName = _a[0], fieldName = _a[1];
        return (data && data[parentFieldName] && data[parentFieldName][fieldName]) || null;
    };
    FormUtils.prototype.getFormFields = function (meta) {
        var sectionHeaders = meta.sectionHeaders
            ? meta.sectionHeaders.map(function (element) {
                element.isSectionHeader = true;
                return element;
            })
            : [];
        var fields = meta.fields.map(function (field) {
            if (!field.hasOwnProperty('sortOrder')) {
                field.sortOrder = Number.MAX_SAFE_INTEGER - 1;
            }
            return field;
        });
        // build list of fields that should be displayed inline but belong to associated entities
        var inlineEmbeddedAssociatedEntityFields = this.getInlineEmbeddedFields(fields);
        // remove the inline embedded fields because the associated entity fields were extracted above
        // and will be added to the regular list of fields. This prevents the fields from being added multiple times.
        fields = fields.filter(function (f) { return !f.dataSpecialization || f.dataSpecialization.toLowerCase() !== 'inline_embedded'; });
        // sort fields
        return __spread(sectionHeaders, fields, inlineEmbeddedAssociatedEntityFields).sort(Helpers.sortByField(['sortOrder', 'name']));
    };
    FormUtils.prototype.getInlineEmbeddedFields = function (fields) {
        var _this = this;
        var inlineEmbeddedAssociatedEntityFields = [];
        fields
            .filter(function (f) { return f.dataSpecialization && f.dataSpecialization.toLowerCase() === 'inline_embedded'; })
            .forEach(function (f) {
            inlineEmbeddedAssociatedEntityFields = __spread(inlineEmbeddedAssociatedEntityFields, _this.getAssociatedFieldsForInlineEmbedded(f));
        });
        return inlineEmbeddedAssociatedEntityFields;
    };
    FormUtils.prototype.getAssociatedFieldsForInlineEmbedded = function (field) {
        var associatedEntityFields = [];
        associatedEntityFields = this.getEmbeddedFields(field).map(function (aef) {
            aef.inlineEmbeddedAssociatedEntityField = true;
            return aef;
        });
        return associatedEntityFields;
    };
    FormUtils.prototype.getEmbeddedFields = function (subHeader) {
        return subHeader.associatedEntity.fields
            .filter(function (field) { return field.name !== 'id'; })
            .map(function (field) {
            if (!field.name.startsWith(subHeader.name + ".")) {
                field.name = subHeader.name + "." + field.name;
            }
            return field;
        })
            .sort(Helpers.sortByField(['sortOrder', 'name']));
    };
    FormUtils.prototype.isHeader = function (field) {
        return (!Helpers.isBlank(field) &&
            ((field.hasOwnProperty('isSectionHeader') && field.isSectionHeader) ||
                (field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'section_header')));
    };
    FormUtils.prototype.insertHeaderToFieldsets = function (fieldsets, field) {
        var constantProperties = {
            controls: [],
            isEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'embedded',
            isInlineEmbedded: field.dataSpecialization && field.dataSpecialization.toLowerCase() === 'inline_embedded',
            key: field.name,
        };
        if (field.name && field.name.startsWith('customObject') && field.associatedEntity && field.associatedEntity.label) {
            fieldsets.push(__assign({ title: field.associatedEntity.label || field.label, icon: field.icon || 'bhi-card-expand' }, constantProperties));
        }
        else {
            fieldsets.push(__assign({ title: field.label, icon: field.icon || 'bhi-section' }, constantProperties));
        }
    };
    FormUtils.prototype.markControlAsEmbedded = function (control, dataSpecialization) {
        if (Helpers.isBlank(control['config'])) {
            control['config'] = {};
        }
        control['config']['embedded'] = true;
        control.isEmbedded = dataSpecialization === 'embedded';
        control.isInlineEmbedded = dataSpecialization === 'inline_embedded';
        return control;
    };
    FormUtils.prototype.getControlOptions = function (field, http, config, fieldData) {
        // TODO: The token property of config is the only property used; just pass in `token: string`
        if (field.dataType === 'Boolean' && !field.options) {
            // TODO: dataType should only be determined by `determineInputType` which doesn't ever return 'Boolean' it
            // TODO: (cont.) returns `tiles`
            return [{ value: false, label: this.labels.no }, { value: true, label: this.labels.yes }];
        }
        else if (field.workflowOptions && fieldData) {
            return this.getWorkflowOptions(field.workflowOptions, fieldData);
        }
        else if (field.dataSpecialization === 'SPECIALIZED_OPTIONS' ||
            (field.options && ['SpecializedOptionsLookup', 'SimplifiedOptionsLookup'].includes(field.dataType))) {
            return field.options.filter(function (o) { return !o.readOnly; });
        }
        else if (field.optionsUrl) {
            return this.optionsService.getOptionsConfig(http, field, config);
        }
        else if (Array.isArray(field.options) && field.type === 'chips') {
            var options = field.options;
            return {
                field: 'value',
                format: '$label',
                options: options,
            };
        }
        else if (field.options) {
            return field.options;
        }
        return null;
    };
    FormUtils.prototype.getWorkflowOptions = function (workflowOptions, fieldData) {
        var currentValue;
        if (fieldData.id) {
            currentValue = { value: fieldData.id, label: fieldData.label ? fieldData.label : fieldData.id };
        }
        var currentWorkflowOption = fieldData.id ? fieldData.id : 'initial';
        var updateWorkflowOptions = workflowOptions[currentWorkflowOption] || [];
        if (currentValue && !updateWorkflowOptions.find(function (option) { return option.value === currentValue.value; })) {
            updateWorkflowOptions.unshift(currentValue);
        }
        return updateWorkflowOptions;
    };
    FormUtils.prototype.setInitialValues = function (controls, values, keepClean, keyOverride) {
        for (var i = 0; i < controls.length; i++) {
            var control = controls[i];
            var key = keyOverride ? control.key.replace(keyOverride, '') : control.key;
            var value = values[key];
            if (Helpers.isBlank(value)) {
                continue;
            }
            if (Array.isArray(value) && value.length === 0) {
                continue;
            }
            if (Array.isArray(value) && value.length > 0) {
                value = value.filter(function (val) { return !(Object.keys(val).length === 0 && val.constructor === Object); });
                if (value.length === 0) {
                    continue;
                }
            }
            if (value.data && value.data.length === 0) {
                continue;
            }
            if (Object.keys(value).length === 0 && value.constructor === Object) {
                continue;
            }
            if (control.dataType === 'Date' && typeof value === 'string' && control.optionsType !== 'skipConversion') {
                value = startOfDay(value);
            }
            control.value = value;
            // TODO: keepClean is not required, but is always used. It should default (to true?)
            control.dirty = !keepClean;
        }
    };
    FormUtils.prototype.setInitialValuesFieldsets = function (fieldsets, values, keepClean) {
        var _this = this;
        fieldsets.forEach(function (fieldset) {
            _this.setInitialValues(fieldset.controls, values, keepClean);
        });
    };
    FormUtils.prototype.forceShowAllControls = function (controls) {
        controls.forEach(function (control) {
            control.hidden = false;
        });
    };
    FormUtils.prototype.forceShowAllControlsInFieldsets = function (fieldsets) {
        fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                control.hidden = false;
            });
        });
    };
    FormUtils.prototype.forceValidation = function (form) {
        Object.keys(form.controls).forEach(function (key) {
            var control = form.controls[key];
            if (control.required && Helpers.isBlank(form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    FormUtils.prototype.isAddressEmpty = function (control) {
        var fieldList = ['address1', 'address2', 'city', 'state', 'zip', 'countryID'];
        var valid = true;
        if (control.value && control.config) {
            fieldList.forEach(function (subfield) {
                if (((subfield !== 'countryID' &&
                    !Helpers.isEmpty(control.config[subfield]) &&
                    control.config[subfield].required &&
                    (Helpers.isBlank(control.value[subfield]) || Helpers.isEmpty(control.value[subfield]))) ||
                    (subfield === 'countryID' &&
                        !Helpers.isEmpty(control.config.countryID) &&
                        control.config.countryID.required &&
                        Helpers.isEmpty(control.value.countryName))) &&
                    !(subfield === 'state' &&
                        !Helpers.isBlank(control.value.countryName) &&
                        control.config.state.pickerConfig &&
                        control.config.state.pickerConfig.defaultOptions &&
                        control.config.state.pickerConfig.defaultOptions.length === 0)) {
                    valid = false;
                }
            });
        }
        return valid;
    };
    FormUtils.prototype.getStartDateFromRange = function (dateRange) {
        if (dateRange.minDate) {
            return parse(dateRange.minDate);
        }
        else if (dateRange.minOffset) {
            return addDays(startOfToday(), dateRange.minOffset);
        }
    };
    /**
     * Get the min start date of a Date base on field data.
     */
    FormUtils.prototype.getStartDate = function (field) {
        if (field.allowedDateRange) {
            return this.getStartDateFromRange(field.allowedDateRange);
        }
        // there is no restriction on the start date
        return null;
    };
    FormUtils.prototype.inferStartDate = function (controlConfig, field) {
        if (field.dataType === 'Date') {
            var startDate = this.getStartDate(field);
            if (startDate) {
                controlConfig.startDate = startDate;
            }
            return startDate;
        }
    };
    FormUtils.prototype.inflateEmbeddedProperties = function (data) {
        if (data) {
            Object.keys(data)
                .filter(function (fieldName) { return fieldName.includes('.'); })
                .forEach(function (field) {
                var _a = __read(field.split('.'), 2), parentFieldName = _a[0], fieldName = _a[1];
                if (!data[parentFieldName]) {
                    data[parentFieldName] = {};
                }
                data[parentFieldName][fieldName] = data[field];
                delete data[field];
            });
        }
        return data;
    };
    FormUtils.ɵfac = function FormUtils_Factory(t) { return new (t || FormUtils)(ɵɵinject(NovoLabelService), ɵɵinject(OptionsService)); };
    FormUtils.ɵprov = ɵɵdefineInjectable({ token: FormUtils, factory: FormUtils.ɵfac });
    return FormUtils;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(FormUtils, [{
        type: Injectable
    }], function () { return [{ type: NovoLabelService }, { type: OptionsService }]; }, null); })();

/**
 * A Promise that uses the deferred anti-pattern
 */
function Deferred() {
    var temp = {};
    var promise = new Promise(function (resolve, reject) {
        temp.resolve = resolve;
        temp.reject = reject;
    });
    promise.resolve = temp.resolve;
    promise.reject = temp.reject;
    return promise;
}

// NG2
var _c0$E = ["container"];
var _c1$l = [[["header"]], [["section"]], [["button"]]];
var _c2$9 = ["header", "section", "button"];
function NovoModalNotificationElement_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 3);
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r0.iconType);
} }
var _c3$6 = [[["label"]], [["h1"]], [["h2"]], [["p"]], [["button"]]];
var _c4$2 = ["label", "h1", "h2", "p", "button"];
var NovoModalParams = /** @class */ (function () {
    function NovoModalParams() {
    }
    return NovoModalParams;
}());
/**
 * Reference to an opened dialog.
 */
var NovoModalRef = /** @class */ (function () {
    function NovoModalRef() {
        this.component = null;
        this.contentRef = null;
        this.containerRef = null;
        this.isClosed = false;
        this._onClosed = Deferred();
    }
    Object.defineProperty(NovoModalRef.prototype, "onClosed", {
        // Gets a promise that is resolved when the dialog is closed.
        get: function () {
            return this._onClosed;
        },
        enumerable: true,
        configurable: true
    });
    NovoModalRef.prototype.open = function () {
        document.body.classList.add('modal-open');
    };
    NovoModalRef.prototype.close = function (result) {
        document.body.classList.remove('modal-open');
        if (this.contentRef) {
            this.contentRef.destroy();
        }
        if (this.containerRef) {
            this.containerRef.destroy();
        }
        this._onClosed.resolve(result);
    };
    NovoModalRef.ɵfac = function NovoModalRef_Factory(t) { return new (t || NovoModalRef)(); };
    NovoModalRef.ɵprov = ɵɵdefineInjectable({ token: NovoModalRef, factory: NovoModalRef.ɵfac });
    return NovoModalRef;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalRef, [{
        type: Injectable
    }], null, null); })();
var NovoModalContainerElement = /** @class */ (function () {
    function NovoModalContainerElement(modalRef, componentUtils) {
        this.modalRef = modalRef;
        this.componentUtils = componentUtils;
    }
    NovoModalContainerElement.prototype.ngAfterViewInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.modalRef.contentRef = _this.componentUtils.append(_this.modalRef.component, _this.container);
        });
    };
    NovoModalContainerElement.ɵfac = function NovoModalContainerElement_Factory(t) { return new (t || NovoModalContainerElement)(ɵɵdirectiveInject(NovoModalRef), ɵɵdirectiveInject(ComponentUtils)); };
    NovoModalContainerElement.ɵcmp = ɵɵdefineComponent({ type: NovoModalContainerElement, selectors: [["novo-modal-container"]], viewQuery: function NovoModalContainerElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$E, true, ViewContainerRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
        } }, decls: 2, vars: 0, consts: [["container", ""]], template: function NovoModalContainerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "span", null, 0);
        } }, encapsulation: 2 });
    return NovoModalContainerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalContainerElement, [{
        type: Component,
        args: [{
                selector: 'novo-modal-container',
                template: '<span #container></span>',
            }]
    }], function () { return [{ type: NovoModalRef }, { type: ComponentUtils }]; }, { container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef }]
        }] }); })();
var NovoModalElement = /** @class */ (function () {
    function NovoModalElement(modalRef) {
        this.modalRef = modalRef;
    }
    NovoModalElement.prototype.close = function () {
        this.modalRef.close();
    };
    NovoModalElement.ɵfac = function NovoModalElement_Factory(t) { return new (t || NovoModalElement)(ɵɵdirectiveInject(NovoModalRef)); };
    NovoModalElement.ɵcmp = ɵɵdefineComponent({ type: NovoModalElement, selectors: [["novo-modal"]], ngContentSelectors: _c2$9, decls: 4, vars: 0, template: function NovoModalElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c1$l);
            ɵɵprojection(0);
            ɵɵprojection(1, 1);
            ɵɵelementStart(2, "footer");
            ɵɵprojection(3, 2);
            ɵɵelementEnd();
        } }, encapsulation: 2 });
    return NovoModalElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalElement, [{
        type: Component,
        args: [{
                selector: 'novo-modal',
                template: "\n    <ng-content select=\"header\"></ng-content>\n    <ng-content select=\"section\"></ng-content>\n    <footer><ng-content select=\"button\"></ng-content></footer>\n  ",
            }]
    }], function () { return [{ type: NovoModalRef }]; }, null); })();
var NovoModalNotificationElement = /** @class */ (function () {
    function NovoModalNotificationElement(modalRef) {
        this.modalRef = modalRef;
        this.cancel = new EventEmitter();
        this.modalRef = modalRef;
    }
    NovoModalNotificationElement.prototype.close = function () {
        this.cancel.emit();
        this.modalRef.close();
    };
    NovoModalNotificationElement.prototype.ngOnInit = function () {
        switch (this.type) {
            case 'success':
                this.iconType = 'bhi-check';
                break;
            case 'warning':
                this.iconType = 'bhi-caution-o';
                break;
            case 'error':
                this.iconType = 'bhi-caution-o';
                break;
            case 'custom':
                this.iconType = "bhi-" + this.icon;
                break;
            default:
                break;
        }
    };
    NovoModalNotificationElement.ɵfac = function NovoModalNotificationElement_Factory(t) { return new (t || NovoModalNotificationElement)(ɵɵdirectiveInject(NovoModalRef)); };
    NovoModalNotificationElement.ɵcmp = ɵɵdefineComponent({ type: NovoModalNotificationElement, selectors: [["novo-notification"]], inputs: { type: "type", icon: "icon" }, outputs: { cancel: "cancel" }, ngContentSelectors: _c4$2, decls: 10, vars: 1, consts: [["theme", "icon", "icon", "times", 1, "modal-close", 3, "click"], [1, "notification-body"], ["class", "indicator", 3, "ngClass", 4, "ngIf"], [1, "indicator", 3, "ngClass"]], template: function NovoModalNotificationElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c3$6);
            ɵɵelementStart(0, "button", 0);
            ɵɵlistener("click", function NovoModalNotificationElement_Template_button_click_0_listener() { return ctx.close(); });
            ɵɵelementEnd();
            ɵɵelementStart(1, "header");
            ɵɵprojection(2);
            ɵɵelementEnd();
            ɵɵelementStart(3, "section", 1);
            ɵɵtemplate(4, NovoModalNotificationElement_i_4_Template, 1, 1, "i", 2);
            ɵɵprojection(5, 1);
            ɵɵprojection(6, 2);
            ɵɵprojection(7, 3);
            ɵɵelementEnd();
            ɵɵelementStart(8, "footer");
            ɵɵprojection(9, 4);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(4);
            ɵɵproperty("ngIf", ctx.iconType);
        } }, directives: [NovoButtonElement, NgIf, NgClass], encapsulation: 2 });
    return NovoModalNotificationElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalNotificationElement, [{
        type: Component,
        args: [{
                selector: 'novo-notification',
                template: "\n    <button class=\"modal-close\" theme=\"icon\" icon=\"times\" (click)=\"close()\"></button>\n    <header><ng-content select=\"label\"></ng-content></header>\n    <section class=\"notification-body\">\n      <i class=\"indicator\" [ngClass]=\"iconType\" *ngIf=\"iconType\"></i>\n      <ng-content select=\"h1\"></ng-content>\n      <ng-content select=\"h2\"></ng-content>\n      <ng-content select=\"p\"></ng-content>\n    </section>\n    <footer><ng-content select=\"button\"></ng-content></footer>\n  ",
            }]
    }], function () { return [{ type: NovoModalRef }]; }, { type: [{
            type: Input
        }], icon: [{
            type: Input
        }], cancel: [{
            type: Output
        }] }); })();

// NG2
var NovoModalService = /** @class */ (function () {
    function NovoModalService(componentUtils) {
        this.componentUtils = componentUtils;
    }
    Object.defineProperty(NovoModalService.prototype, "parentViewContainer", {
        set: function (view) {
            this._parentViewContainer = view;
        },
        enumerable: true,
        configurable: true
    });
    NovoModalService.prototype.open = function (component, scope) {
        if (scope === void 0) { scope = {}; }
        if (!this._parentViewContainer) {
            throw new Error('No parent view container specified for the ModalService. Set it inside your main application. \nthis.modalService.parentViewContainer = view (ViewContainerRef)');
        }
        var modal = new NovoModalRef();
        modal.component = component;
        modal.open();
        var providers = [{ provide: NovoModalRef, useValue: modal }, { provide: NovoModalParams, useValue: scope }];
        modal.containerRef = this.componentUtils.append(NovoModalContainerElement, this._parentViewContainer, providers);
        return modal;
    };
    NovoModalService.ɵfac = function NovoModalService_Factory(t) { return new (t || NovoModalService)(ɵɵinject(ComponentUtils)); };
    NovoModalService.ɵprov = ɵɵdefineInjectable({ token: NovoModalService, factory: NovoModalService.ɵfac });
    return NovoModalService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalService, [{
        type: Injectable
    }], function () { return [{ type: ComponentUtils }]; }, null); })();

// NG2
function NovoToastElement_h5_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h5");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.title);
} }
function NovoToastElement_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "p", 8);
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("message-only", !ctx_r1.title);
    ɵɵproperty("innerHtml", ctx_r1._message, ɵɵsanitizeHtml);
} }
function NovoToastElement_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵelement(1, "input", 10);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("value", ctx_r2.link);
} }
function NovoToastElement_div_8_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 11);
    ɵɵlistener("click", function NovoToastElement_div_8_Template_div_click_0_listener($event) { ɵɵrestoreView(_r5); var ctx_r4 = ɵɵnextContext(); return ctx_r4.close($event); });
    ɵɵelement(1, "i", 12);
    ɵɵelementEnd();
} }
var _c0$F = ["*"];
var NovoToastElement = /** @class */ (function () {
    function NovoToastElement(sanitizer) {
        this.sanitizer = sanitizer;
        this.theme = 'danger';
        this.icon = 'caution';
        this.hasDialogue = false;
        this.isCloseable = false;
        this.closed = new EventEmitter();
        this.show = false;
        this.animate = false;
        this.parent = null;
        this.launched = false;
    }
    Object.defineProperty(NovoToastElement.prototype, "message", {
        set: function (m) {
            this._message = this.sanitizer.bypassSecurityTrustHtml(m);
        },
        enumerable: true,
        configurable: true
    });
    NovoToastElement.prototype.ngOnInit = function () {
        if (!this.launched) {
            // clear position and time
            this.position = null;
            this.time = null;
            // set icon and styling
            this.iconClass = "bhi-" + this.icon;
            this.alertTheme = this.theme + " toast-container embedded";
            if (this.hasDialogue) {
                this.alertTheme += ' dialogue';
            }
        }
    };
    NovoToastElement.prototype.ngOnChanges = function (changes) {
        // set icon and styling
        this.iconClass = "bhi-" + this.icon;
        this.alertTheme = this.theme + " toast-container embedded";
        if (this.hasDialogue) {
            this.alertTheme += ' dialogue';
        }
    };
    NovoToastElement.prototype.clickHandler = function (event) {
        if (!this.isCloseable) {
            if (event) {
                event.stopPropagation();
                event.preventDefault();
            }
            if (this.parent) {
                this.parent.hide(this);
            }
            else {
                this.closed.emit({ closed: true });
            }
        }
    };
    NovoToastElement.prototype.close = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        if (this.parent) {
            this.parent.hide(this);
        }
        else {
            this.closed.emit({ closed: true });
        }
    };
    NovoToastElement.ɵfac = function NovoToastElement_Factory(t) { return new (t || NovoToastElement)(ɵɵdirectiveInject(DomSanitizer)); };
    NovoToastElement.ɵcmp = ɵɵdefineComponent({ type: NovoToastElement, selectors: [["novo-toast"]], hostVars: 8, hostBindings: function NovoToastElement_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function NovoToastElement_click_HostBindingHandler($event) { return !ctx.isCloseable && ctx.clickHandler($event); });
        } if (rf & 2) {
            ɵɵclassMap(ctx.alertTheme);
            ɵɵclassProp("show", ctx.show)("animate", ctx.animate)("embedded", ctx.embedded);
        } }, inputs: { theme: "theme", icon: "icon", title: "title", hasDialogue: "hasDialogue", link: "link", isCloseable: "isCloseable", message: "message" }, outputs: { closed: "closed" }, features: [ɵɵNgOnChangesFeature], ngContentSelectors: _c0$F, decls: 9, vars: 5, consts: [[1, "toast-icon"], [3, "ngClass"], [1, "toast-content"], [4, "ngIf"], [3, "message-only", "innerHtml", 4, "ngIf"], ["class", "link-generated", 4, "ngIf"], [1, "dialogue"], ["class", "close-icon", 3, "click", 4, "ngIf"], [3, "innerHtml"], [1, "link-generated"], ["type", "text", "onfocus", "this.select();", 3, "value"], [1, "close-icon", 3, "click"], [1, "bhi-times"]], template: function NovoToastElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0);
            ɵɵelement(1, "i", 1);
            ɵɵelementEnd();
            ɵɵelementStart(2, "div", 2);
            ɵɵtemplate(3, NovoToastElement_h5_3_Template, 2, 1, "h5", 3);
            ɵɵtemplate(4, NovoToastElement_p_4_Template, 1, 3, "p", 4);
            ɵɵtemplate(5, NovoToastElement_div_5_Template, 2, 1, "div", 5);
            ɵɵelementStart(6, "div", 6);
            ɵɵprojection(7);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵtemplate(8, NovoToastElement_div_8_Template, 2, 0, "div", 7);
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngClass", ctx.iconClass);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.title);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx._message);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.link);
            ɵɵadvance(3);
            ɵɵproperty("ngIf", ctx.isCloseable);
        } }, directives: [NgClass, NgIf], encapsulation: 2 });
    return NovoToastElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoToastElement, [{
        type: Component,
        args: [{
                selector: 'novo-toast',
                host: {
                    '[class]': 'alertTheme',
                    '[class.show]': 'show',
                    '[class.animate]': 'animate',
                    '[class.embedded]': 'embedded',
                    '(click)': '!isCloseable && clickHandler($event)',
                },
                template: "\n        <div class=\"toast-icon\">\n            <i [ngClass]=\"iconClass\"></i>\n        </div>\n        <div class=\"toast-content\">\n            <h5 *ngIf=\"title\">{{title}}</h5>\n            <p *ngIf=\"_message\" [class.message-only]=\"!title\" [innerHtml]=\"_message\"></p>\n            <div *ngIf=\"link\" class=\"link-generated\">\n                <input type=\"text\" [value]=\"link\" onfocus=\"this.select();\"/>\n            </div>\n            <div class=\"dialogue\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n        <div class=\"close-icon\" *ngIf=\"isCloseable\" (click)=\"close($event)\">\n            <i class=\"bhi-times\"></i>\n        </div>\n    ",
            }]
    }], function () { return [{ type: DomSanitizer }]; }, { theme: [{
            type: Input
        }], icon: [{
            type: Input
        }], title: [{
            type: Input
        }], hasDialogue: [{
            type: Input
        }], link: [{
            type: Input
        }], isCloseable: [{
            type: Input
        }], message: [{
            type: Input
        }], closed: [{
            type: Output
        }] }); })();

// NG2
var NovoToastService = /** @class */ (function () {
    function NovoToastService(componentUtils) {
        this.componentUtils = componentUtils;
        this.references = [];
        this.icons = { default: 'bell', success: 'check', info: 'info', warning: 'warning', danger: 'remove' };
        this.defaults = { hideDelay: 3500, position: 'growlTopRight', theme: 'default' };
    }
    Object.defineProperty(NovoToastService.prototype, "parentViewContainer", {
        set: function (view) {
            this._parentViewContainer = view;
        },
        enumerable: true,
        configurable: true
    });
    NovoToastService.prototype.alert = function (options, toastElement) {
        var _this = this;
        if (toastElement === void 0) { toastElement = NovoToastElement; }
        return new Promise(function (resolve) {
            if (!_this._parentViewContainer) {
                console.error('No parent view container specified for the ToastService. Set it inside your main application. \nthis.toastService.parentViewContainer = view (ViewContainerRef)');
                return;
            }
            var toast = _this.componentUtils.append(toastElement, _this._parentViewContainer);
            _this.references.push(toast);
            _this.handleAlert(toast.instance, options);
            resolve(toast);
        });
    };
    NovoToastService.prototype.isVisible = function (toast) {
        return toast.show;
    };
    NovoToastService.prototype.hide = function (toast) {
        var _this = this;
        toast.animate = false;
        setTimeout(function () {
            toast.show = false;
            var REF = _this.references.filter(function (x) { return x.instance === toast; })[0];
            if (REF) {
                _this.references.splice(_this.references.indexOf(REF), 1);
                REF.destroy();
            }
        }, 300);
    };
    NovoToastService.prototype.handleAlert = function (toast, options) {
        var _this = this;
        this.setToastOnSession(toast, options);
        setTimeout(function () {
            _this.show(toast);
        }, 20);
        if (!toast.isCloseable) {
            this.toastTimer(toast);
        }
    };
    NovoToastService.prototype.setToastOnSession = function (toast, opts) {
        var OPTIONS = typeof opts === 'object' ? opts : {};
        toast.parent = this;
        toast.title = OPTIONS.title || '';
        toast.message = OPTIONS.message || '';
        toast.hideDelay = OPTIONS.hideDelay || this.defaults.hideDelay;
        toast.link = OPTIONS.link || '';
        toast.isCloseable = OPTIONS.isCloseable || false;
        var CUSTOM_CLASS = OPTIONS.customClass || '';
        var ALERT_STYLE = OPTIONS.theme || this.defaults.theme;
        var ALERT_POSITION = OPTIONS.position || this.defaults.position;
        var ALERT_ICON = OPTIONS.icon || this.icons.default;
        toast.iconClass = "bhi-" + ALERT_ICON;
        toast.launched = true;
        toast.alertTheme = ALERT_STYLE + " " + ALERT_POSITION + " " + CUSTOM_CLASS + " toast-container launched";
    };
    NovoToastService.prototype.show = function (toast) {
        toast.show = true;
        setTimeout(addClass, 25);
        /**
         * Adds animate class to be called after a timeout
         **/
        function addClass() {
            toast.animate = true;
        }
    };
    NovoToastService.prototype.toastTimer = function (toast) {
        var _this = this;
        if (toast.hideDelay < 0) {
            return;
        }
        setTimeout(function () {
            _this.hide(toast);
        }, toast.hideDelay);
    };
    NovoToastService.ɵfac = function NovoToastService_Factory(t) { return new (t || NovoToastService)(ɵɵinject(ComponentUtils)); };
    NovoToastService.ɵprov = ɵɵdefineInjectable({ token: NovoToastService, factory: NovoToastService.ɵfac });
    return NovoToastService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoToastService, [{
        type: Injectable
    }], function () { return [{ type: ComponentUtils }]; }, null); })();

// NG2
function ControlConfirmModal_h2_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h2");
    ɵɵelementStart(1, "label");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtext(3);
    ɵɵelement(4, "i", 4);
    ɵɵtext(5);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1("", ctx_r0.params["label"], ":");
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.params["oldValue"], " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r0.params["newValue"], "");
} }
function ControlConfirmModal_h2_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "h2");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.params["message"]);
} }
function ControlPromptModal_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var change_r1 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(change_r1);
} }
var ControlConfirmModal = /** @class */ (function () {
    function ControlConfirmModal(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    ControlConfirmModal.prototype.close = function (result) {
        this.modalRef.close(result);
    };
    ControlConfirmModal.ɵfac = function ControlConfirmModal_Factory(t) { return new (t || ControlConfirmModal)(ɵɵdirectiveInject(NovoModalRef), ɵɵdirectiveInject(NovoModalParams), ɵɵdirectiveInject(NovoLabelService)); };
    ControlConfirmModal.ɵcmp = ɵɵdefineComponent({ type: ControlConfirmModal, selectors: [["control-confirm-modal"]], decls: 9, vars: 8, consts: [["type", "warning"], [4, "ngIf"], ["theme", "standard", 3, "click"], ["theme", "primary", "icon", "check", "autofocus", "", 3, "click"], [1, "bhi-arrow-right"]], template: function ControlConfirmModal_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-notification", 0);
            ɵɵelementStart(1, "h1");
            ɵɵtext(2);
            ɵɵelementEnd();
            ɵɵtemplate(3, ControlConfirmModal_h2_3_Template, 6, 3, "h2", 1);
            ɵɵtemplate(4, ControlConfirmModal_h2_4_Template, 2, 1, "h2", 1);
            ɵɵelementStart(5, "button", 2);
            ɵɵlistener("click", function ControlConfirmModal_Template_button_click_5_listener() { return ctx.close(false); });
            ɵɵtext(6);
            ɵɵelementEnd();
            ɵɵelementStart(7, "button", 3);
            ɵɵlistener("click", function ControlConfirmModal_Template_button_click_7_listener() { return ctx.close(true); });
            ɵɵtext(8);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵattribute("data-automation-id", "field-interaction-modal-" + ctx.params["key"]);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.labels.confirmChangesModalMessage);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.params["message"]);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.params["message"]);
            ɵɵadvance(1);
            ɵɵattribute("data-automation-id", "field-interaction-modal-cancel" + ctx.params["key"]);
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.labels.cancel);
            ɵɵadvance(1);
            ɵɵattribute("data-automation-id", "field-interaction-modal-save-" + ctx.params["key"]);
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.labels.save);
        } }, directives: [NovoModalNotificationElement, NgIf, NovoButtonElement], encapsulation: 2 });
    return ControlConfirmModal;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(ControlConfirmModal, [{
        type: Component,
        args: [{
                selector: 'control-confirm-modal',
                template: "\n        <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n            <h1>{{ labels.confirmChangesModalMessage }}</h1>\n            <h2 *ngIf=\"!params['message']\"><label>{{ params['label'] }}:</label> {{ params['oldValue'] }} <i class=\"bhi-arrow-right\"></i> {{ params['newValue'] }}</h2>\n            <h2 *ngIf=\"params['message']\">{{ params['message'] }}</h2>\n            <button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">{{ labels.cancel }}</button>\n            <button theme=\"primary\" icon=\"check\" (click)=\"close(true)\" autofocus [attr.data-automation-id]=\"'field-interaction-modal-save-' + params['key']\">{{ labels.save }}</button>\n        </novo-notification>\n    ",
            }]
    }], function () { return [{ type: NovoModalRef }, { type: NovoModalParams }, { type: NovoLabelService }]; }, null); })();
var ControlPromptModal = /** @class */ (function () {
    function ControlPromptModal(modalRef, params, labels) {
        this.modalRef = modalRef;
        this.params = params;
        this.labels = labels;
    }
    ControlPromptModal.prototype.close = function (result) {
        this.modalRef.close(result);
    };
    ControlPromptModal.ɵfac = function ControlPromptModal_Factory(t) { return new (t || ControlPromptModal)(ɵɵdirectiveInject(NovoModalRef), ɵɵdirectiveInject(NovoModalParams), ɵɵdirectiveInject(NovoLabelService)); };
    ControlPromptModal.ɵcmp = ɵɵdefineComponent({ type: ControlPromptModal, selectors: [["control-prompt-modal"]], decls: 8, vars: 7, consts: [["type", "warning"], [4, "ngFor", "ngForOf"], ["theme", "standard", 3, "click"], ["theme", "primary", "icon", "check", "autofocus", "", 3, "click"]], template: function ControlPromptModal_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-notification", 0);
            ɵɵelementStart(1, "h1");
            ɵɵtext(2);
            ɵɵelementEnd();
            ɵɵtemplate(3, ControlPromptModal_p_3_Template, 2, 1, "p", 1);
            ɵɵelementStart(4, "button", 2);
            ɵɵlistener("click", function ControlPromptModal_Template_button_click_4_listener() { return ctx.close(false); });
            ɵɵtext(5);
            ɵɵelementEnd();
            ɵɵelementStart(6, "button", 3);
            ɵɵlistener("click", function ControlPromptModal_Template_button_click_6_listener() { return ctx.close(true); });
            ɵɵtext(7);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵattribute("data-automation-id", "field-interaction-modal-" + ctx.params["key"]);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.labels.promptModalMessage);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.params["changes"]);
            ɵɵadvance(1);
            ɵɵattribute("data-automation-id", "field-interaction-modal-cancel" + ctx.params["key"]);
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.labels.cancel);
            ɵɵadvance(1);
            ɵɵattribute("data-automation-id", "field-interaction-modal-yes-" + ctx.params["key"]);
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.labels.yes);
        } }, directives: [NovoModalNotificationElement, NgForOf, NovoButtonElement], encapsulation: 2 });
    return ControlPromptModal;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(ControlPromptModal, [{
        type: Component,
        args: [{
                selector: 'control-prompt-modal',
                template: "\n        <novo-notification type=\"warning\" [attr.data-automation-id]=\"'field-interaction-modal-' + params['key']\">\n            <h1>{{ labels.promptModalMessage }}</h1>\n            <p *ngFor=\"let change of params['changes']\">{{ change }}</p>\n            <button theme=\"standard\" (click)=\"close(false)\" [attr.data-automation-id]=\"'field-interaction-modal-cancel' + params['key']\">{{ labels.cancel }}</button>\n            <button theme=\"primary\" icon=\"check\" (click)=\"close(true)\" autofocus [attr.data-automation-id]=\"'field-interaction-modal-yes-' + params['key']\">{{ labels.yes }}</button>\n        </novo-notification>\n    ",
            }]
    }], function () { return [{ type: NovoModalRef }, { type: NovoModalParams }, { type: NovoLabelService }]; }, null); })();

var CustomHttpImpl = /** @class */ (function () {
    function CustomHttpImpl(http) {
        this.http = http;
        this.mapFn = function (x) { return x; };
    }
    CustomHttpImpl.prototype.get = function (url, options) {
        this.url = url;
        this.options = options;
        return this;
    };
    CustomHttpImpl.prototype.map = function (mapFn) {
        this.mapFn = mapFn;
        return this;
    };
    CustomHttpImpl.prototype.subscribe = function (resolve, reject) {
        return this.http
            .get(this.url, this.options)
            .pipe(map(this.mapFn))
            .subscribe(resolve, reject);
    };
    return CustomHttpImpl;
}());
var FieldInteractionApi = /** @class */ (function () {
    function FieldInteractionApi(toaster, modalService, formUtils, http, labels) {
        var _this = this;
        this.toaster = toaster;
        this.modalService = modalService;
        this.formUtils = formUtils;
        this.http = http;
        this.labels = labels;
        this.getOptionsConfig = function (args, mapper, filteredOptionsCreator, pickerConfigFormat) {
            if (filteredOptionsCreator || 'optionsUrl' in args || 'optionsUrlBuilder' in args || 'optionsPromise' in args) {
                var format = ('format' in args && args.format) || pickerConfigFormat;
                return __assign(__assign({ options: _this.createOptionsFunction(args, mapper, filteredOptionsCreator) }, ('emptyPickerMessage' in args && { emptyPickerMessage: args.emptyPickerMessage })), (format && { format: format }));
            }
            else if ('options' in args && Array.isArray(args.options)) {
                return {
                    options: __spread(args.options),
                };
            }
            else {
                return undefined;
            }
        };
        this.createOptionsFunction = function (config, mapper, filteredOptionsCreator) { return function (query, page) {
            if ('optionsPromise' in config && config.optionsPromise) {
                return config.optionsPromise(query, new CustomHttpImpl(_this.http), page);
            }
            else if (('optionsUrlBuilder' in config && config.optionsUrlBuilder) || ('optionsUrl' in config && config.optionsUrl)) {
                return new Promise(function (resolve, reject) {
                    var url = 'optionsUrlBuilder' in config ? config.optionsUrlBuilder(query) : config.optionsUrl + "?filter=" + (query || '');
                    _this.http
                        .get(url)
                        .pipe(map(function (results) {
                        if (mapper) {
                            return results.map(mapper);
                        }
                        return results;
                    }))
                        .subscribe(resolve, reject);
                });
            }
            else if (filteredOptionsCreator) {
                if ('where' in config) {
                    return filteredOptionsCreator(config.where)(query, page);
                }
                else {
                    return filteredOptionsCreator()(query, page);
                }
            }
        }; };
    }
    Object.defineProperty(FieldInteractionApi.prototype, "associations", {
        get: function () {
            return this.form.hasOwnProperty('associations') ? this.form.associations : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentEntity", {
        get: function () {
            return this.form.hasOwnProperty('currentEntity') ? this.form.currentEntity : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentEntityId", {
        get: function () {
            return this.form.hasOwnProperty('currentEntityId') ? this.form.currentEntityId : undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "isEdit", {
        get: function () {
            return this.form.hasOwnProperty('edit') ? this.form.edit : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "isAdd", {
        get: function () {
            return this.form.hasOwnProperty('edit') ? !this.form.edit : false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "globals", {
        get: function () {
            return this._globals;
        },
        set: function (globals) {
            this._globals = globals;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldInteractionApi.prototype, "currentKey", {
        get: function () {
            return this._currentKey;
        },
        set: function (key) {
            this._currentKey = key;
        },
        enumerable: true,
        configurable: true
    });
    FieldInteractionApi.prototype.isActiveControlValid = function () {
        return !!this.getValue(this.currentKey);
    };
    FieldInteractionApi.prototype.getActiveControl = function () {
        return this.getControl(this.currentKey);
    };
    FieldInteractionApi.prototype.getActiveKey = function () {
        return this.currentKey;
    };
    FieldInteractionApi.prototype.getActiveValue = function () {
        return this.getValue(this.currentKey);
    };
    FieldInteractionApi.prototype.getActiveInitialValue = function () {
        return this.getInitialValue(this.currentKey);
    };
    FieldInteractionApi.prototype.getFieldSet = function (key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        var fieldSet = this.form.fieldsets.find(function (fs) { return fs.key && fs.key.toLowerCase() === key.toLowerCase(); });
        if (!fieldSet) {
            console.error('[FieldInteractionAPI] - could not find a fieldset in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return fieldSet;
    };
    FieldInteractionApi.prototype.getControl = function (key) {
        if (!key) {
            console.error('[FieldInteractionAPI] - invalid or missing "key"'); // tslint:disable-line
            return null;
        }
        var control = this.form.controls[key];
        if (!control) {
            console.error('[FieldInteractionAPI] - could not find a control in the form by the key --', key); // tslint:disable-line
            return null;
        }
        return control;
    };
    FieldInteractionApi.prototype.getValue = function (key) {
        var control = this.getControl(key);
        if (control) {
            return control.value;
        }
        return null;
    };
    FieldInteractionApi.prototype.getRawValue = function (key) {
        var control = this.getControl(key);
        if (control) {
            return control.rawValue;
        }
        return null;
    };
    FieldInteractionApi.prototype.getInitialValue = function (key) {
        var control = this.getControl(key);
        if (control) {
            return control.initialValue;
        }
        return null;
    };
    FieldInteractionApi.prototype.setValue = function (key, value, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value: value });
        }
    };
    FieldInteractionApi.prototype.patchValue = function (key, value, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setValue(value, options);
            this.triggerEvent({ controlKey: key, prop: 'value', value: value });
        }
    };
    FieldInteractionApi.prototype.setReadOnly = function (key, isReadOnly) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setReadOnly(isReadOnly);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: isReadOnly });
        }
    };
    FieldInteractionApi.prototype.setRequired = function (key, required) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.setRequired(required);
            this.triggerEvent({ controlKey: key, prop: 'required', value: required });
        }
    };
    FieldInteractionApi.prototype.hide = function (key, clearValue) {
        if (clearValue === void 0) { clearValue = true; }
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.hide(clearValue);
            this.disable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: true });
        }
        return control;
    };
    FieldInteractionApi.prototype.show = function (key) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.show();
            this.enable(key, { emitEvent: false });
            this.triggerEvent({ controlKey: key, prop: 'hidden', value: false });
        }
    };
    FieldInteractionApi.prototype.hideFieldSetHeader = function (key) {
        var fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = true;
        }
    };
    FieldInteractionApi.prototype.showFieldSetHeader = function (key) {
        var fieldSet = this.getFieldSet(key);
        if (fieldSet) {
            fieldSet.hidden = false;
        }
    };
    FieldInteractionApi.prototype.disable = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.disable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: true });
        }
    };
    FieldInteractionApi.prototype.enable = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.enable(options);
            this.triggerEvent({ controlKey: key, prop: 'readOnly', value: false });
        }
    };
    FieldInteractionApi.prototype.markAsInvalid = function (key, validationMessage) {
        var control = this.getControl(key);
        if (control) {
            if (control && !control.restrictFieldInteractions) {
                control.markAsInvalid(validationMessage);
            }
        }
    };
    FieldInteractionApi.prototype.markAsDirty = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsDirty(options);
        }
    };
    FieldInteractionApi.prototype.markAsPending = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPending(options);
        }
    };
    FieldInteractionApi.prototype.markAsPristine = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsPristine(options);
        }
    };
    FieldInteractionApi.prototype.markAsTouched = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsTouched(options);
        }
    };
    FieldInteractionApi.prototype.markAsUntouched = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.markAsUntouched(options);
        }
    };
    FieldInteractionApi.prototype.updateValueAndValidity = function (key, options) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.updateValueAndValidity(options);
        }
    };
    FieldInteractionApi.prototype.displayToast = function (toastConfig) {
        if (this.toaster) {
            this.toaster.alert(toastConfig);
        }
    };
    FieldInteractionApi.prototype.displayTip = function (key, tip, icon, allowDismiss, sanitize) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tipWell = {
                tip: tip,
                icon: icon,
                button: allowDismiss,
                sanitize: sanitize !== false,
            };
            this.triggerEvent({ controlKey: key, prop: 'tipWell', value: tip });
        }
    };
    FieldInteractionApi.prototype.setTooltip = function (key, tooltip) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control.tooltip = tooltip;
            if (tooltip.length >= 40 && tooltip.length <= 400) {
                control.tooltipSize = 'large';
                control.tooltipPreline = true;
            }
            else if (tooltip.length > 400) {
                control.tooltipSize = 'extra-large';
            }
            this.triggerEvent({ controlKey: key, prop: 'tooltip', value: tooltip });
        }
    };
    FieldInteractionApi.prototype.confirmChanges = function (key, message) {
        var _this = this;
        var history = this.getProperty(key, 'valueHistory');
        var oldValue = history[history.length - 2];
        var newValue = this.getValue(key);
        var label = this.getProperty(key, 'label');
        document.activeElement.blur();
        return this.modalService.open(ControlConfirmModal, { oldValue: oldValue, newValue: newValue, label: label, message: message, key: key }).onClosed.then(function (result) {
            if (!result) {
                _this.setValue(key, oldValue, { emitEvent: false });
            }
        });
    };
    FieldInteractionApi.prototype.promptUser = function (key, changes) {
        var showYes = true;
        document.activeElement.blur();
        return this.modalService.open(ControlPromptModal, { changes: changes, key: key }).onClosed;
    };
    FieldInteractionApi.prototype.setProperty = function (key, prop, value) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            control[prop] = value;
            this.triggerEvent({ controlKey: key, prop: prop, value: value });
        }
    };
    FieldInteractionApi.prototype.getProperty = function (key, prop) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            return control[prop];
        }
        return null;
    };
    FieldInteractionApi.prototype.isValueEmpty = function (key) {
        var value = this.getValue(key);
        return Helpers.isEmpty(value);
    };
    FieldInteractionApi.prototype.isValueBlank = function (key) {
        var value = this.getValue(key);
        return Helpers.isBlank(value);
    };
    FieldInteractionApi.prototype.hasField = function (key) {
        return !!this.form.controls[key];
    };
    FieldInteractionApi.prototype.addStaticOption = function (key, newOption) {
        var control = this.getControl(key);
        var optionToAdd = newOption;
        var isUnique = true;
        if (control && !control.restrictFieldInteractions) {
            var currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                var config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        if (currentOptions[0].value && !optionToAdd.value) {
                            optionToAdd = { value: newOption, label: newOption };
                        }
                        config.options = __spread(currentOptions, [optionToAdd]);
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                if (currentOptions[0].value && !optionToAdd.value) {
                    optionToAdd = { value: newOption, label: newOption };
                }
                // Ensure duplicate values are not added
                currentOptions.forEach(function (option) {
                    if ((option.value && option.value === optionToAdd.value) || option === optionToAdd) {
                        isUnique = false;
                    }
                });
                if (isUnique) {
                    this.setProperty(key, 'options', __spread(currentOptions, [optionToAdd]));
                }
            }
            if (isUnique) {
                this.triggerEvent({ controlKey: key, prop: 'options', value: __spread(currentOptions, [optionToAdd]) });
            }
        }
    };
    FieldInteractionApi.prototype.removeStaticOption = function (key, optionToRemove) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            var currentOptions = this.getProperty(key, 'options');
            if (!currentOptions || !currentOptions.length) {
                var config = this.getProperty(key, 'config');
                if (config) {
                    currentOptions = config.options;
                    if (currentOptions && Array.isArray(currentOptions)) {
                        var index_1 = -1;
                        currentOptions.forEach(function (opt, i) {
                            if (opt.value || opt.label) {
                                if (opt.value === optionToRemove || opt.label === optionToRemove) {
                                    index_1 = i;
                                }
                            }
                            else {
                                if (opt === optionToRemove) {
                                    index_1 = i;
                                }
                            }
                        });
                        if (index_1 !== -1) {
                            currentOptions.splice(index_1, 1);
                        }
                        config.options = __spread(currentOptions);
                        this.setProperty(key, 'config', config);
                    }
                }
            }
            else {
                var index_2 = -1;
                currentOptions.forEach(function (opt, i) {
                    if (opt.value || opt.label) {
                        if (opt.value === optionToRemove || opt.label === optionToRemove) {
                            index_2 = i;
                        }
                    }
                    else {
                        if (opt === optionToRemove) {
                            index_2 = i;
                        }
                    }
                });
                if (index_2 !== -1) {
                    currentOptions.splice(index_2, 1);
                }
                this.setProperty(key, 'options', __spread(currentOptions));
            }
            this.triggerEvent({ controlKey: key, prop: 'options', value: control.options });
        }
    };
    FieldInteractionApi.prototype.modifyPickerConfig = function (key, config, mapper) {
        // call another method to avoid a breaking change but still enable stricter types
        this.mutatePickerConfig(key, config, mapper);
    };
    FieldInteractionApi.prototype.mutatePickerConfig = function (key, args, mapper) {
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            var _a = control.config, minSearchLength = _a.minSearchLength, enableInfiniteScroll = _a.enableInfiniteScroll, filteredOptionsCreator = _a.filteredOptionsCreator, format = _a.format, getLabels = _a.getLabels, emptyPickerMessage = _a.emptyPickerMessage;
            var optionsConfig = this.getOptionsConfig(args, mapper, filteredOptionsCreator, format);
            var newConfig = __assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (emptyPickerMessage && { emptyPickerMessage: emptyPickerMessage })), (Number.isInteger(minSearchLength) && { minSearchLength: minSearchLength })), (enableInfiniteScroll && { enableInfiniteScroll: enableInfiniteScroll })), (filteredOptionsCreator && { filteredOptionsCreator: filteredOptionsCreator })), (getLabels && { getLabels: getLabels })), (optionsConfig && optionsConfig)), { resultsTemplate: control.config.resultsTemplate || ('resultsTemplateType' in args && this.getAppropriateResultsTemplate(args.resultsTemplateType)) });
            this.setProperty(key, 'config', newConfig);
            this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: args });
        }
    };
    FieldInteractionApi.prototype.addPropertiesToPickerConfig = function (key, properties) {
        var control = this.getControl(key);
        if (!control || control.restrictFieldInteractions) {
            return;
        }
        var config = __assign(__assign({}, control.config), properties);
        this.setProperty(key, 'config', config);
        this.triggerEvent({ controlKey: key, prop: 'pickerConfig', value: properties });
    };
    FieldInteractionApi.prototype.getAppropriateResultsTemplate = function (resultsTemplateType) {
        switch (resultsTemplateType) {
            case 'entity-picker':
                return EntityPickerResults;
            default:
                return undefined;
        }
    };
    FieldInteractionApi.prototype.setLoading = function (key, loading) {
        var _this = this;
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            if (loading) {
                this.form.controls[key].fieldInteractionloading = true;
                control.setErrors({ loading: true });
                // History
                clearTimeout(this.asyncBlockTimeout);
                this.asyncBlockTimeout = setTimeout(function () {
                    _this.setLoading(key, false);
                    _this.displayTip(key, _this.labels.asyncFailure, 'info', false);
                    _this.setProperty(key, '_displayedAsyncFailure', true);
                }, 10000);
            }
            else {
                this.form.controls[key].fieldInteractionloading = false;
                clearTimeout(this.asyncBlockTimeout);
                control.setErrors({ loading: null });
                control.updateValueAndValidity({ emitEvent: false });
                if (this.getProperty(key, '_displayedAsyncFailure')) {
                    this.setProperty(key, 'tipWell', null);
                }
            }
            this.triggerEvent({ controlKey: key, prop: 'loading', value: loading });
        }
    };
    FieldInteractionApi.prototype.addControl = function (key, metaForNewField, position, initialValue) {
        if (position === void 0) { position = FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD; }
        if (!metaForNewField.key && !metaForNewField.name) {
            console.error('[FieldInteractionAPI] - missing "key" in meta for new field'); // tslint:disable-line
            return null;
        }
        if (!metaForNewField.key) {
            // If key is not explicitly declared, use name as key
            metaForNewField.key = metaForNewField.name;
        }
        if (this.form.controls[metaForNewField.key]) {
            // Field is already on the form
            return null;
        }
        var control = this.form.controls[key];
        var fieldsetIndex;
        var controlIndex;
        if (control) {
            fieldsetIndex = -1;
            controlIndex = -1;
            this.form.fieldsets.forEach(function (fieldset, fi) {
                fieldset.controls.forEach(function (fieldsetControl, ci) {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex = fi;
                        controlIndex = ci;
                    }
                });
            });
            // Change the position of the newly added field
            switch (position) {
                case FieldInteractionApi.FIELD_POSITIONS.ABOVE_FIELD:
                    // Adding field above active field
                    // index can stay the same
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BELOW_FIELD:
                    // Adding field below active field
                    controlIndex += 1;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.TOP_OF_FORM:
                    // Adding field to the top of the form
                    controlIndex = 0;
                    fieldsetIndex = 0;
                    break;
                case FieldInteractionApi.FIELD_POSITIONS.BOTTOM_OF_FORM:
                    // Adding field to the bottom of the form
                    fieldsetIndex = this.form.fieldsets.length - 1;
                    controlIndex = this.form.fieldsets[fieldsetIndex].controls.length;
                    break;
                default:
                    break;
            }
            if (fieldsetIndex !== -1 && controlIndex !== -1) {
                var novoControl = this.formUtils.getControlForField(metaForNewField, this.http, {});
                novoControl.hidden = false;
                var formControl = new NovoFormControl(initialValue, novoControl);
                this.form.addControl(novoControl.key, formControl);
                this.form.fieldsets[fieldsetIndex].controls.splice(controlIndex, 0, novoControl);
                this.triggerEvent({ controlKey: key, prop: 'addControl', value: formControl });
            }
        }
    };
    FieldInteractionApi.prototype.removeControl = function (key) {
        if (!this.form.controls[key]) {
            // Field is not on the form
            return null;
        }
        var control = this.getControl(key);
        if (control && !control.restrictFieldInteractions) {
            var fieldsetIndex_1 = -1;
            var controlIndex_1 = -1;
            this.form.fieldsets.forEach(function (fieldset, fi) {
                fieldset.controls.forEach(function (fieldsetControl, ci) {
                    if (fieldsetControl.key === key) {
                        fieldsetIndex_1 = fi;
                        controlIndex_1 = ci;
                    }
                });
            });
            if (fieldsetIndex_1 !== -1 && controlIndex_1 !== -1) {
                this.form.removeControl(key);
                this.form.fieldsets[fieldsetIndex_1].controls.splice(controlIndex_1, 1);
                this.triggerEvent({ controlKey: key, prop: 'removeControl', value: key });
            }
        }
    };
    FieldInteractionApi.prototype.debounce = function (func, wait) {
        if (wait === void 0) { wait = 50; }
        var h;
        clearTimeout(h);
        h = setTimeout(function () { return func(); }, wait);
    };
    FieldInteractionApi.prototype.triggerEvent = function (event) {
        if (this.form && this.form.fieldInteractionEvents) {
            this.form.fieldInteractionEvents.emit(event);
        }
    };
    FieldInteractionApi.FIELD_POSITIONS = {
        ABOVE_FIELD: 'ABOVE_FIELD',
        BELOW_FIELD: 'BELOW_FIELD',
        TOP_OF_FORM: 'TOP_OF_FORM',
        BOTTOM_OF_FORM: 'BOTTOM_OF_FORM',
    };
    FieldInteractionApi.ɵfac = function FieldInteractionApi_Factory(t) { return new (t || FieldInteractionApi)(ɵɵinject(NovoToastService), ɵɵinject(NovoModalService), ɵɵinject(FormUtils), ɵɵinject(HttpClient), ɵɵinject(NovoLabelService)); };
    FieldInteractionApi.ɵprov = ɵɵdefineInjectable({ token: FieldInteractionApi, factory: FieldInteractionApi.ɵfac });
    return FieldInteractionApi;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(FieldInteractionApi, [{
        type: Injectable
    }], function () { return [{ type: NovoToastService }, { type: NovoModalService }, { type: FormUtils }, { type: HttpClient }, { type: NovoLabelService }]; }, null); })();

// NG2
var NovoTemplateService = /** @class */ (function () {
    function NovoTemplateService() {
        this.templates = {
            default: {},
            custom: {},
        };
    }
    NovoTemplateService.prototype.getAll = function () {
        var _this = this;
        var templates = {};
        var customTemplateTypes = Object.keys(this.templates.custom);
        var defaultTemplateTypes = Object.keys(this.templates.default);
        defaultTemplateTypes.forEach(function (type) {
            templates[type] = _this.templates.default[type];
        });
        customTemplateTypes.forEach(function (type) {
            templates[type] = _this.templates.custom[type];
        });
        return templates;
    };
    NovoTemplateService.prototype.addDefault = function (key, template) {
        this.templates.default[key] = template;
    };
    NovoTemplateService.prototype.addCustom = function (key, template) {
        this.templates.custom[key] = template;
    };
    NovoTemplateService.ɵfac = function NovoTemplateService_Factory(t) { return new (t || NovoTemplateService)(); };
    NovoTemplateService.ɵprov = ɵɵdefineInjectable({ token: NovoTemplateService, factory: NovoTemplateService.ɵfac });
    return NovoTemplateService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTemplateService, [{
        type: Injectable
    }], function () { return []; }, null); })();

// NG2
function NovoTipWellElement_div_0_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext(2);
    ɵɵclassMapInterpolate1("bhi-", ctx_r1.icon, "");
    ɵɵattribute("data-automation-id", "novo-tip-well-icon-" + ctx_r1.name);
} }
function NovoTipWellElement_div_0_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", "novo-tip-well-tip-" + ctx_r2.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.tip);
} }
function NovoTipWellElement_div_0_p_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "p", 4);
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵproperty("innerHTML", ctx_r3.tipWithStyles, ɵɵsanitizeHtml);
    ɵɵattribute("data-automation-id", "novo-tip-well-tip-" + ctx_r3.name);
} }
function NovoTipWellElement_div_0_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 5);
    ɵɵlistener("click", function NovoTipWellElement_div_0_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(2); return ctx_r5.hideTip(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", "novo-tip-well-button-" + ctx_r4.name);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r4.buttonText, " ");
} }
function NovoTipWellElement_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "div");
    ɵɵtemplate(2, NovoTipWellElement_div_0_i_2_Template, 1, 4, "i", 1);
    ɵɵtemplate(3, NovoTipWellElement_div_0_p_3_Template, 2, 2, "p", 0);
    ɵɵtemplate(4, NovoTipWellElement_div_0_p_4_Template, 1, 2, "p", 2);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTipWellElement_div_0_button_5_Template, 2, 2, "button", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.icon);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.sanitize);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r0.sanitize);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.button);
} }
var NovoTipWellElement = /** @class */ (function () {
    function NovoTipWellElement(labels, sanitizer) {
        this.labels = labels;
        this.sanitizer = sanitizer;
        this.button = true;
        this.sanitize = true;
        this.confirmed = new EventEmitter();
        this.isActive = true;
        this.isActive = true;
        // Check if localStorage is enabled
        this.isLocalStorageEnabled = (function () {
            var isEnabled = false;
            if (typeof localStorage === 'object') {
                try {
                    localStorage.setItem('lsTest', '1');
                    localStorage.removeItem('lsTest');
                    isEnabled = true;
                }
                catch (e) {
                    console.warn('This web browser does not support storing settings locally. In Safari, the most common cause of this is using "Private Browsing Mode". Some settings may not save or some features may not work properly for you.');
                }
            }
            return isEnabled;
        })();
    }
    Object.defineProperty(NovoTipWellElement.prototype, "tipWithStyles", {
        // Trusts the HTML in order to show CSS styles
        get: function () {
            if (!this._tipWithStyles || this._lastTipStyled !== this.tip) {
                this._tipWithStyles = this.sanitizer.bypassSecurityTrustHtml(this.tip);
                this._lastTipStyled = this.tip;
            }
            return this._tipWithStyles;
        },
        enumerable: true,
        configurable: true
    });
    NovoTipWellElement.prototype.ngOnInit = function () {
        this.tip = this.tip || '';
        this.buttonText = this.buttonText || this.labels.okGotIt;
        this.button = typeof this.button === 'string' ? this.button === 'true' : this.button;
        this.icon = this.icon || null;
        // Set a (semi) unique name for the tip-well
        this.name = this.name || Math.round(Math.random() * 100);
        this.localStorageKey = "novo-tw_" + this.name;
        // Check localStorage for state
        if (this.isLocalStorageEnabled) {
            var storedValue = JSON.parse(localStorage.getItem(this.localStorageKey));
            this.isActive = storedValue !== false;
        }
    };
    NovoTipWellElement.prototype.hideTip = function () {
        if (this.isLocalStorageEnabled) {
            localStorage.setItem(this.localStorageKey, JSON.stringify(false));
        }
        this.isActive = false;
        this.confirmed.emit();
    };
    NovoTipWellElement.ɵfac = function NovoTipWellElement_Factory(t) { return new (t || NovoTipWellElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DomSanitizer)); };
    NovoTipWellElement.ɵcmp = ɵɵdefineComponent({ type: NovoTipWellElement, selectors: [["novo-tip-well"]], hostVars: 2, hostBindings: function NovoTipWellElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("active", ctx.isActive);
        } }, inputs: { name: "name", tip: "tip", buttonText: "buttonText", button: "button", icon: "icon", sanitize: "sanitize" }, outputs: { confirmed: "confirmed" }, decls: 1, vars: 1, consts: [[4, "ngIf"], [3, "class", 4, "ngIf"], [3, "innerHTML", 4, "ngIf"], ["theme", "dialogue", 3, "click", 4, "ngIf"], [3, "innerHTML"], ["theme", "dialogue", 3, "click"]], template: function NovoTipWellElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoTipWellElement_div_0_Template, 6, 4, "div", 0);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.isActive);
        } }, directives: [NgIf, NovoButtonElement], encapsulation: 2 });
    return NovoTipWellElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTipWellElement, [{
        type: Component,
        args: [{
                selector: 'novo-tip-well',
                template: "\n    <div *ngIf=\"isActive\">\n      <div>\n        <i class=\"bhi-{{ icon }}\" *ngIf=\"icon\" [attr.data-automation-id]=\"'novo-tip-well-icon-' + name\"></i>\n        <p *ngIf=\"sanitize\" [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\">{{ tip }}</p>\n        <p *ngIf=\"!sanitize\" [attr.data-automation-id]=\"'novo-tip-well-tip-' + name\" [innerHTML]=\"tipWithStyles\"></p>\n      </div>\n      <button theme=\"dialogue\" (click)=\"hideTip()\" *ngIf=\"button\" [attr.data-automation-id]=\"'novo-tip-well-button-' + name\">\n        {{ buttonText }}\n      </button>\n    </div>\n  ",
                host: {
                    '[class.active]': 'isActive',
                },
            }]
    }], function () { return [{ type: NovoLabelService }, { type: DomSanitizer }]; }, { name: [{
            type: Input
        }], tip: [{
            type: Input
        }], buttonText: [{
            type: Input
        }], button: [{
            type: Input
        }], icon: [{
            type: Input
        }], sanitize: [{
            type: Input
        }], confirmed: [{
            type: Output
        }] }); })();

var _c0$G = function (a0) { return { "encrypted": a0 }; };
function NovoControlElement_label_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 13);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction1(3, _c0$G, ctx_r0.form.controls[ctx_r0.control.key].encrypted));
    ɵɵattribute("for", ctx_r0.control.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r0.form.controls[ctx_r0.control.key].label, " ");
} }
function NovoControlElement_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 14);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("novo-control-empty", !ctx_r1.hasValue)("novo-control-focused", ctx_r1.focused)("novo-control-filled", ctx_r1.hasValue)("novo-control-always-active", ctx_r1.alwaysActive || ctx_r1.form.controls[ctx_r1.control.key].placeholder)("novo-control-extra-spacing", ctx_r1.requiresExtraSpacing);
    ɵɵattribute("for", ctx_r1.control.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.form.controls[ctx_r1.control.key].label, " ");
} }
var _c1$m = function (a0, a1) { return { "bhi-circle": a0, "bhi-check": a1 }; };
function NovoControlElement_i_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 15);
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("required-indicator ", ctx_r2.form.controls[ctx_r2.control.key].controlType, "");
    ɵɵproperty("hidden", !ctx_r2.form.controls[ctx_r2.control.key].required || ctx_r2.form.controls[ctx_r2.control.key].readOnly)("ngClass", ɵɵpureFunction2(5, _c1$m, !ctx_r2.isValid, ctx_r2.isValid));
} }
function NovoControlElement_ng_container_10_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0);
} }
function NovoControlElement_ng_container_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoControlElement_ng_container_10_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r3.templates[ctx_r3.form.controls[ctx_r3.control.key].controlType])("ngTemplateOutletContext", ctx_r3.templateContext);
} }
function NovoControlElement_ng_container_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "div", 17);
    ɵɵelement(2, "input", 18);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} }
function NovoControlElement_div_12_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "span", 25);
} }
function NovoControlElement_div_12_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r10.form.controls[ctx_r10.control.key].label), " ", ctx_r10.labels.isRequired, "");
} }
function NovoControlElement_div_12_span_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate3("", ɵɵpipeBind1(2, 3, ctx_r11.form.controls[ctx_r11.control.key].label), " ", ctx_r11.labels.minLength, " ", ctx_r11.form.controls[ctx_r11.control.key].minlength, "");
} }
function NovoControlElement_div_12_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r12.labels.maxlengthMet(ctx_r12.form.controls[ctx_r12.control.key].maxlength));
} }
function NovoControlElement_div_12_span_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r13 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r13.labels.invalidMaxlength(ctx_r13.form.controls[ctx_r13.control.key].maxlength));
} }
function NovoControlElement_div_12_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r14 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r14.labels.maxRecordsReached);
} }
function NovoControlElement_div_12_span_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r15 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r15.form.controls[ctx_r15.control.key].label), " ", ctx_r15.labels.invalidEmail, "");
} }
function NovoControlElement_div_12_span_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r16 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r16.form.controls[ctx_r16.control.key].label), " ", ctx_r16.labels.isTooLarge, "");
} }
function NovoControlElement_div_12_span_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r17 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, ctx_r17.form.controls[ctx_r17.control.key].label), " ", ctx_r17.labels.notValidYear, "");
} }
function NovoControlElement_div_12_span_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r18 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r18.errors.custom);
} }
function NovoControlElement_div_12_span_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r19 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r19.labels.invalidMaxlengthWithField(ctx_r19.control.config[ctx_r19.maxlengthErrorField] == null ? null : ctx_r19.control.config[ctx_r19.maxlengthErrorField].label, ctx_r19.control.config[ctx_r19.maxlengthErrorField] == null ? null : ctx_r19.control.config[ctx_r19.maxlengthErrorField].maxlength), " ");
} }
function NovoControlElement_div_12_span_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r20 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r20.labels.maxlengthMetWithField(ctx_r20.control.config[ctx_r20.maxlengthMetField] == null ? null : ctx_r20.control.config[ctx_r20.maxlengthMetField].label, ctx_r20.control.config[ctx_r20.maxlengthMetField] == null ? null : ctx_r20.control.config[ctx_r20.maxlengthMetField].maxlength), " ");
} }
function NovoControlElement_div_12_span_14_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 25);
    ɵɵtext(1);
    ɵɵpipe(2, "uppercase");
    ɵɵelementEnd();
} if (rf & 2) {
    var invalidAddressField_r27 = ctx.$implicit;
    var ctx_r26 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ɵɵpipeBind1(2, 2, invalidAddressField_r27), " ", ctx_r26.labels.isRequired, " ");
} }
function NovoControlElement_div_12_span_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtemplate(1, NovoControlElement_div_12_span_14_span_1_Template, 3, 4, "span", 26);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r21 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r21.errors == null ? null : ctx_r21.errors.invalidAddressFields);
} }
function NovoControlElement_div_12_span_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 27);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r22 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r22.form.controls[ctx_r22.control.key].description, " ");
} }
function NovoControlElement_div_12_span_16_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 28);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r23 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r23.form.controls[ctx_r23.control.key].warning);
} }
function NovoControlElement_div_12_span_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 29);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r24 = ɵɵnextContext(2);
    ɵɵclassProp("error", (ctx_r24.errors == null ? null : ctx_r24.errors.maxlength) && !(ctx_r24.errors == null ? null : ctx_r24.errors.maxlengthFields) || (ctx_r24.errors == null ? null : ctx_r24.errors.maxlength) && (ctx_r24.errors == null ? null : ctx_r24.errors.maxlengthFields) && ctx_r24.errors.maxlengthFields.includes(ctx_r24.focusedField));
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ctx_r24.itemCount, "/", ctx_r24.maxLength || ctx_r24.form.controls[ctx_r24.control.key].maxlength, "");
} }
function NovoControlElement_div_12_span_18_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span", 30);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r25 = ɵɵnextContext(2);
    ɵɵclassProp("zero-count", ctx_r25.itemCount === 0)("row-picker", ctx_r25.form.controls[ctx_r25.control.key].config.columns);
    ɵɵadvance(1);
    ɵɵtextInterpolate2("", ctx_r25.itemCount, "/", ctx_r25.maxLength || ctx_r25.form.controls[ctx_r25.control.key].maxlength, "");
} }
function NovoControlElement_div_12_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelementStart(1, "div", 19);
    ɵɵtemplate(2, NovoControlElement_div_12_span_2_Template, 1, 0, "span", 20);
    ɵɵtemplate(3, NovoControlElement_div_12_span_3_Template, 3, 4, "span", 20);
    ɵɵtemplate(4, NovoControlElement_div_12_span_4_Template, 3, 5, "span", 20);
    ɵɵtemplate(5, NovoControlElement_div_12_span_5_Template, 2, 1, "span", 20);
    ɵɵtemplate(6, NovoControlElement_div_12_span_6_Template, 2, 1, "span", 20);
    ɵɵtemplate(7, NovoControlElement_div_12_span_7_Template, 2, 1, "span", 20);
    ɵɵtemplate(8, NovoControlElement_div_12_span_8_Template, 3, 4, "span", 20);
    ɵɵtemplate(9, NovoControlElement_div_12_span_9_Template, 3, 4, "span", 20);
    ɵɵtemplate(10, NovoControlElement_div_12_span_10_Template, 3, 4, "span", 9);
    ɵɵtemplate(11, NovoControlElement_div_12_span_11_Template, 2, 1, "span", 20);
    ɵɵtemplate(12, NovoControlElement_div_12_span_12_Template, 2, 1, "span", 20);
    ɵɵtemplate(13, NovoControlElement_div_12_span_13_Template, 2, 1, "span", 20);
    ɵɵtemplate(14, NovoControlElement_div_12_span_14_Template, 2, 1, "span", 9);
    ɵɵtemplate(15, NovoControlElement_div_12_span_15_Template, 2, 1, "span", 21);
    ɵɵtemplate(16, NovoControlElement_div_12_span_16_Template, 2, 1, "span", 22);
    ɵɵelementEnd();
    ɵɵtemplate(17, NovoControlElement_div_12_span_17_Template, 2, 4, "span", 23);
    ɵɵtemplate(18, NovoControlElement_div_12_span_18_Template, 2, 6, "span", 24);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("field-message ", ctx_r5.form.controls[ctx_r5.control.key].controlType, "");
    ɵɵclassProp("has-tip", ctx_r5.form.controls[ctx_r5.control.key].tipWell);
    ɵɵproperty("ngClass", ctx_r5.showErrorState || ctx_r5.showMaxLengthMetMessage ? "error-shown" : "error-hidden");
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ctx_r5.showMessages ? "count-shown messages-shown" : "count-hidden messages-hidden");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showFieldMessage);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.required) && ctx_r5.form.controls[ctx_r5.control.key].controlType !== "address");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.minlength));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && ctx_r5.maxLengthMet && ctx_r5.focused && !(ctx_r5.errors == null ? null : ctx_r5.errors.maxlength) && ctx_r5.form.controls[ctx_r5.control.key].controlType !== "picker");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r5.errors == null ? null : ctx_r5.errors.maxlength) && ctx_r5.focused && !(ctx_r5.errors == null ? null : ctx_r5.errors.maxlengthFields));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.maxLengthMet && ctx_r5.form.controls[ctx_r5.control.key].controlType === "picker");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.invalidEmail));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && ((ctx_r5.errors == null ? null : ctx_r5.errors.integerTooLarge) || (ctx_r5.errors == null ? null : ctx_r5.errors.doubleTooLarge)));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.minYear));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.custom));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (ctx_r5.errors == null ? null : ctx_r5.errors.maxlength) && (ctx_r5.errors == null ? null : ctx_r5.errors.maxlengthFields) && ctx_r5.maxlengthErrorField && ctx_r5.focused);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && ctx_r5.maxlengthMetField && ctx_r5.focused && !(ctx_r5.errors == null ? null : ctx_r5.errors.maxlengthFields == null ? null : ctx_r5.errors.maxlengthFields.includes(ctx_r5.maxlengthMetField)));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isDirty && (ctx_r5.errors == null ? null : ctx_r5.errors.invalidAddress));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.form.controls[ctx_r5.control.key].description);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.form.controls[ctx_r5.control.key].warning);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showCount && ctx_r5.form.controls[ctx_r5.control.key].controlType !== "picker");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showCount && ctx_r5.form.controls[ctx_r5.control.key].controlType === "picker");
} }
function NovoControlElement_novo_tip_well_13_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-tip-well", 31);
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext();
    ɵɵproperty("name", ctx_r6.control.key)("tip", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.tip)("icon", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.icon)("button", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.button)("sanitize", ctx_r6.form.controls[ctx_r6.control.key] == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell == null ? null : ctx_r6.form.controls[ctx_r6.control.key].tipWell.sanitize);
} }
function NovoControlElement_i_14_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "i", 32);
    ɵɵnamespaceSVG();
    ɵɵelementStart(1, "svg", 33);
    ɵɵelementStart(2, "style", 34);
    ɵɵtext(3, " .spinner { fill:#FFFFFF; } ");
    ɵɵelementEnd();
    ɵɵelement(4, "path", 35);
    ɵɵelementEnd();
    ɵɵelementEnd();
} }
var NovoAutoSize = /** @class */ (function () {
    function NovoAutoSize(element) {
        this.element = element;
    }
    NovoAutoSize.prototype.onInput = function (textArea) {
        this.adjust();
    };
    NovoAutoSize.prototype.ngAfterContentInit = function () {
        var _this = this;
        setTimeout(function () {
            _this.adjust();
        });
    };
    NovoAutoSize.prototype.adjust = function () {
        var nativeElement = this.element.nativeElement;
        nativeElement.style.height = nativeElement.style.minHeight;
        nativeElement.style.height = nativeElement.scrollHeight + "px";
    };
    NovoAutoSize.ɵfac = function NovoAutoSize_Factory(t) { return new (t || NovoAutoSize)(ɵɵdirectiveInject(ElementRef)); };
    NovoAutoSize.ɵdir = ɵɵdefineDirective({ type: NovoAutoSize, selectors: [["textarea", "autosize", ""]], hostBindings: function NovoAutoSize_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("input", function NovoAutoSize_input_HostBindingHandler($event) { return ctx.onInput($event.target); });
        } } });
    return NovoAutoSize;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoAutoSize, [{
        type: Directive,
        args: [{
                selector: 'textarea[autosize]',
            }]
    }], function () { return [{ type: ElementRef }]; }, { onInput: [{
            type: HostListener,
            args: ['input', ['$event.target']]
        }] }); })();
// undo all template context references!
var NovoControlElement = /** @class */ (function (_super) {
    __extends(NovoControlElement, _super);
    function NovoControlElement(element, labels, dateFormatService, fieldInteractionApi, templateService, changeDetectorRef, locale) {
        if (locale === void 0) { locale = 'en-US'; }
        var _this = _super.call(this, element) || this;
        _this.labels = labels;
        _this.dateFormatService = dateFormatService;
        _this.fieldInteractionApi = fieldInteractionApi;
        _this.templateService = templateService;
        _this.changeDetectorRef = changeDetectorRef;
        _this.locale = locale;
        _this.condensed = false;
        _this.autoFocus = false;
        _this.change = new EventEmitter();
        _this.edit = new EventEmitter();
        _this.save = new EventEmitter();
        _this.delete = new EventEmitter();
        _this.upload = new EventEmitter();
        _this.formattedValue = '';
        _this.maxLengthMet = false;
        _this.itemCount = 0;
        _this._blurEmitter = new EventEmitter();
        _this._focusEmitter = new EventEmitter();
        _this._focused = false;
        _this._enteredText = '';
        _this._showCount = false;
        _this.maxLengthMetErrorfields = [];
        _this.templates = {};
        _this.loading = false;
        return _this;
    }
    Object.defineProperty(NovoControlElement.prototype, "onBlur", {
        get: function () {
            return this._blurEmitter.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "onFocus", {
        get: function () {
            return this._focusEmitter.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "maxlengthMetField", {
        get: function () {
            var _this = this;
            if (this.maxLengthMetErrorfields && this.maxLengthMetErrorfields.length) {
                return this.maxLengthMetErrorfields.find(function (field) { return field === _this.focusedField; }) || '';
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "maxlengthErrorField", {
        get: function () {
            var _this = this;
            if (this.errors && this.errors.maxlengthFields && this.errors.maxlengthFields.length) {
                return this.errors.maxlengthFields.find(function (field) { return field === _this.focusedField; }) || '';
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showFieldMessage", {
        get: function () {
            return !this.errors && !this.maxLengthMet && Helpers.isBlank(this.control.description);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showMaxLengthMetMessage", {
        get: function () {
            return ((this.isDirty && this.maxLengthMet && this.focused && (!this.errors || (this.errors && !this.errors.maxlength))) ||
                (this.isDirty &&
                    this.maxlengthMetField &&
                    this.focused &&
                    (!this.errors || (this.errors && !this.errors.maxlengthFields.includes(this.maxlengthMetField)))));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showErrorState", {
        get: function () {
            return ((this.isDirty && this.errors) ||
                (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields) ||
                (this.focused && this.errors && this.errors.maxlength && this.errors.maxlengthFields && this.maxlengthErrorField));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showCount", {
        get: function () {
            var MAX_LENGTH_CONTROL_TYPES = ['textbox', 'picker', 'text-area'];
            var charCount = this.focused &&
                !!this.form.controls[this.control.key].maxlength &&
                MAX_LENGTH_CONTROL_TYPES.includes(this.form.controls[this.control.key].controlType);
            return this._showCount || charCount;
        },
        set: function (value) {
            this._showCount = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "showMessages", {
        get: function () {
            return (this.showCount ||
                !Helpers.isEmpty(this.form.controls[this.control.key].warning) ||
                !Helpers.isEmpty(this.form.controls[this.control.key].description));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "decimalSeparator", {
        get: function () {
            return new Intl.NumberFormat(this.locale).format(1.2)[1];
        },
        enumerable: true,
        configurable: true
    });
    NovoControlElement.prototype.ngAfterViewInit = function () {
        var _this = this;
        var DO_NOT_FOCUS_ME = ['picker', 'time', 'date', 'date-time'];
        if (this.autoFocus && !DO_NOT_FOCUS_ME.includes(this.control.controlType)) {
            setTimeout(function () {
                var input = _this.element.nativeElement.querySelector('input');
                if (input) {
                    input.focus();
                }
            });
        }
    };
    NovoControlElement.prototype.ngAfterContentInit = function () {
        var e_1, _a;
        var _this = this;
        // Subscribe to control interactions
        if (this.control.interactions && !this.form.controls[this.control.key].restrictFieldInteractions) {
            var _loop_1 = function (interaction) {
                switch (interaction.event) {
                    case 'blur':
                        this_1.valueChangeSubscription = this_1.onBlur.pipe(debounceTime(300)).subscribe(function () {
                            if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                _this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'focus':
                        this_1.valueChangeSubscription = this_1.onFocus.pipe(debounceTime(300)).subscribe(function () {
                            if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                _this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'change':
                        this_1.valueChangeSubscription = this_1.form.controls[this_1.control.key].valueChanges.pipe(debounceTime(300)).subscribe(function () {
                            if (!_this.form.controls[_this.control.key].restrictFieldInteractions) {
                                _this.executeInteraction(interaction);
                            }
                        });
                        break;
                    case 'init':
                        interaction.invokeOnInit = true;
                        break;
                    default:
                        break;
                }
                if (interaction.invokeOnInit) {
                    if (!this_1.form.controls[this_1.control.key].restrictFieldInteractions) {
                        this_1.executeInteraction(interaction);
                    }
                }
            };
            var this_1 = this;
            try {
                for (var _b = __values(this.control.interactions), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var interaction = _c.value;
                    _loop_1(interaction);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        setTimeout(function () {
            _this.templates = _this.templateService.getAll();
            _this.loading = false;
            _this.changeDetectorRef.markForCheck();
        });
    };
    NovoControlElement.prototype.ngOnInit = function () {
        var _this = this;
        this.loading = true;
        // Make sure to initially format the time controls
        if (this.control && this.form.controls[this.control.key].value) {
            if (this.form.controls[this.control.key].controlType === 'textbox' ||
                this.form.controls[this.control.key].controlType === 'text-area') {
                this.itemCount = this.form.controls[this.control.key].value.length;
            }
        }
        if (this.control) {
            // Listen to clear events
            this.forceClearSubscription = this.control.forceClear.subscribe(function () {
                _this.clearValue();
            });
            // For Asynchronous validations
            this.statusChangeSubscription = this.form.controls[this.control.key].statusChanges.subscribe(function (validity) {
                _this.form.controls[_this.control.key] = _this.templateContext.$implicit;
                if (validity !== 'PENDING' && _this.form.updateValueAndValidity) {
                    _this.form.updateValueAndValidity();
                }
            });
        }
        this.templateContext = {
            $implicit: this.form.controls[this.control.key],
            methods: {
                restrictKeys: this.restrictKeys.bind(this),
                emitChange: this.emitChange.bind(this),
                handleFocus: this.handleFocus.bind(this),
                handlePercentChange: this.handlePercentChange.bind(this),
                handleBlur: this.handleBlur.bind(this),
                handleTextAreaInput: this.handleTextAreaInput.bind(this),
                handleEdit: this.handleEdit.bind(this),
                handleSave: this.handleSave.bind(this),
                handleDelete: this.handleDelete.bind(this),
                handleUpload: this.handleUpload.bind(this),
                modelChange: this.modelChange.bind(this),
                modelChangeWithRaw: this.modelChangeWithRaw.bind(this),
                handleAddressChange: this.handleAddressChange.bind(this),
                handleTyping: this.handleTyping.bind(this),
                updateValidity: this.updateValidity.bind(this),
                toggleActive: this.toggleActive.bind(this),
                validateIntegerInput: this.validateIntegerInput.bind(this),
                validateNumberOnBlur: this.validateNumberOnBlur.bind(this),
            },
            form: this.form,
        };
        this.templateContext.$implicit.tooltipPosition = this.tooltipPosition;
        this.templateContext.$implicit.tooltip = this.tooltip;
        this.templateContext.$implicit.tooltipSize = this.tooltipSize;
        this.templateContext.$implicit.tooltipPreline = this.tooltipPreline;
        this.templateContext.$implicit.removeTooltipArrow = this.removeTooltipArrow;
        this.templateContext.$implicit.startupFocus = this.form.controls[this.control.key].startupFocus;
        this.templateContext.$implicit.fileBrowserImageUploadUrl = this.form.controls[this.control.key].fileBrowserImageUploadUrl;
        this.templateContext.$implicit.minimal = this.form.controls[this.control.key].minimal;
        this.templateContext.$implicit.currencyFormat = this.form.controls[this.control.key].currencyFormat;
        this.templateContext.$implicit.percentValue = this.form.controls[this.control.key].percentValue;
        this.templateContext.$implicit.config = this.form.controls[this.control.key].config;
        if (this.form.controls[this.control.key] && this.form.controls[this.control.key].subType === 'percentage') {
            if (!Helpers.isEmpty(this.form.controls[this.control.key].value)) {
                this.templateContext.$implicit.percentValue = Number((this.form.controls[this.control.key].value * 100).toFixed(6).replace(/\.?0*$/, ''));
            }
            this.percentChangeSubscription = this.form.controls[this.control.key].displayValueChanges.subscribe(function (value) {
                if (!Helpers.isEmpty(value)) {
                    _this.templateContext.$implicit.percentValue = Number((value * 100).toFixed(6).replace(/\.?0*$/, ''));
                }
            });
        }
    };
    NovoControlElement.prototype.ngOnDestroy = function () {
        // Unsubscribe from control interactions
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
        // if (this.dateChangeSubscription) {
        //     this.dateChangeSubscription.unsubscribe();
        // }
        if (this.forceClearSubscription) {
            // Un-listen for clear events
            this.forceClearSubscription.unsubscribe();
        }
        if (this.percentChangeSubscription) {
            // Un-listen for clear events
            this.percentChangeSubscription.unsubscribe();
        }
        if (this.dateChangeSubscription) {
            this.dateChangeSubscription.unsubscribe();
        }
        if (this.statusChangeSubscription) {
            this.statusChangeSubscription.unsubscribe();
        }
        _super.prototype.ngOnDestroy.call(this);
    };
    Object.defineProperty(NovoControlElement.prototype, "errors", {
        get: function () {
            return this.form.controls[this.control.key].errors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "isValid", {
        get: function () {
            return this.form.controls[this.control.key].valid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "isDirty", {
        get: function () {
            return this.form.controls[this.control.key].dirty || this.control.dirty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "hasValue", {
        get: function () {
            return !Helpers.isEmpty(this.form.value[this.control.key]);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "focused", {
        get: function () {
            return this._focused;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltip", {
        get: function () {
            return this.form.controls[this.control.key].tooltip;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipPosition", {
        get: function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPosition)) {
                return 'right';
            }
            return this.form.controls[this.control.key].tooltipPosition;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipSize", {
        get: function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipSize)) {
                return '';
            }
            return this.form.controls[this.control.key].tooltipSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "tooltipPreline", {
        get: function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].tooltipPreline)) {
                return false;
            }
            return this.form.controls[this.control.key].tooltipPreline;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "removeTooltipArrow", {
        get: function () {
            if (Helpers.isBlank(this.form.controls[this.control.key].removeTooltipArrow)) {
                return false;
            }
            return this.form.controls[this.control.key].removeTooltipArrow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "alwaysActive", {
        get: function () {
            // Controls that have the label active if there is any user entered text in the field
            if (this.form.controls[this.control.key].controlType === 'picker' && this._enteredText.length) {
                return true;
            }
            // Controls that always have the label active
            return ([
                'tiles',
                'checklist',
                'checkbox',
                'date',
                'time',
                'date-time',
                'address',
                'file',
                'editor',
                'ace-editor',
                'radio',
                'text-area',
                'quick-note',
            ].indexOf(this.form.controls[this.control.key].controlType) !== -1);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlElement.prototype, "requiresExtraSpacing", {
        get: function () {
            // Chips
            if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].multiple && this.hasValue) {
                return true;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    NovoControlElement.prototype.executeInteraction = function (interaction) {
        var _this = this;
        if (interaction.script && Helpers.isFunction(interaction.script)) {
            setTimeout(function () {
                _this.fieldInteractionApi.form = _this.form;
                _this.fieldInteractionApi.currentKey = _this.control.key;
                try {
                    interaction.script(_this.fieldInteractionApi, _this.control.key);
                }
                catch (err) {
                    console.info('Field Interaction Error!', _this.control.key); // tslint:disable-line
                    console.error(err); // tslint:disable-line
                }
            });
        }
    };
    NovoControlElement.prototype.handleTyping = function (event) {
        this._focused = event && event.length;
        this._enteredText = event;
    };
    NovoControlElement.prototype.handleFocus = function (event, field) {
        this._focused = true;
        this.focusedField = field;
        if (!Helpers.isBlank(this.characterCountField) && this.characterCountField === field) {
            this.showCount = true;
        }
        else if (this.form.controls[this.control.key].controlType === 'address' &&
            field &&
            !Helpers.isEmpty(this.form.value[this.control.key]) &&
            !Helpers.isBlank(this.form.value[this.control.key][field])) {
            this.handleAddressChange({ value: this.form.value[this.control.key][field], field: field });
        }
        this._focusEmitter.emit(event);
    };
    NovoControlElement.prototype.handleBlur = function (event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        this._blurEmitter.emit(event);
    };
    NovoControlElement.prototype.clearValue = function () {
        this.form.controls[this.control.key].setValue(null);
        this.formattedValue = null;
    };
    NovoControlElement.prototype.handleTextAreaInput = function (event) {
        this.emitChange(event);
        this.restrictKeys(event);
    };
    NovoControlElement.prototype.checkMaxLength = function (event) {
        if (this.control && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.target.value.length;
            this.maxLengthMet = event.target.value.length >= this.form.controls[this.control.key].maxlength;
        }
    };
    NovoControlElement.prototype.modelChangeWithRaw = function (event) {
        if (Helpers.isEmpty(event.value)) {
            this._focused = false;
            this._enteredText = '';
        }
        if (this.form.controls[this.control.key].controlType === 'picker' && this.form.controls[this.control.key].maxlength) {
            this.itemCount = event.value ? event.value.length : 0;
            this.maxLengthMet = this.itemCount >= this.form.controls[this.control.key].maxlength ? true : false;
        }
        this.form.controls[this.control.key].rawValue = event.rawValue;
        this.change.emit(event.value);
    };
    NovoControlElement.prototype.modelChange = function (value) {
        if (Helpers.isEmpty(value)) {
            this._focused = false;
            this._enteredText = '';
        }
        this.change.emit(value);
    };
    NovoControlElement.prototype.validateNumberOnBlur = function (event) {
        this._focused = false;
        this.focusedField = '';
        this.showCount = false;
        if (this.form.controls[this.control.key].subType === 'number') {
            this.validateIntegerInput();
        }
        this._blurEmitter.emit(event);
    };
    NovoControlElement.prototype.validateIntegerInput = function () {
        var NUMBERS_ONLY = /^[\d\-]\d*$/;
        if (this.form.controls[this.control.key].value && !NUMBERS_ONLY.test(this.form.controls[this.control.key].value)) {
            this.form.controls[this.control.key].markAsInvalid(this.labels.invalidIntegerInput + " " + this.form.controls[this.control.key].label.toUpperCase());
        }
    };
    NovoControlElement.prototype.restrictKeys = function (event) {
        var NUMBERS_ONLY = /[0-9\-]/;
        var NUMBERS_WITH_DECIMAL_DOT = /[0-9\.\-]/;
        var NUMBERS_WITH_DECIMAL_DOT_AND_COMMA = /[0-9\.\,\-]/;
        var UTILITY_KEYS = ['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'];
        var key = event.key;
        // Numbers or numbers and decimal characters only
        if (this.form.controls[this.control.key].subType === 'number' && !(NUMBERS_ONLY.test(key) || UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        else if (['currency', 'float', 'percentage'].includes(this.form.controls[this.control.key].subType) &&
            !((this.decimalSeparator === '.' && NUMBERS_WITH_DECIMAL_DOT.test(key)) ||
                (this.decimalSeparator === ',' && NUMBERS_WITH_DECIMAL_DOT_AND_COMMA.test(key)) ||
                UTILITY_KEYS.includes(key))) {
            event.preventDefault();
        }
        // Max Length
        if (this.form.controls[this.control.key].maxlength && event.target.value.length >= this.form.controls[this.control.key].maxlength) {
            event.preventDefault();
        }
    };
    NovoControlElement.prototype.handlePercentChange = function (event) {
        var value = event.target['value'];
        var percent = Helpers.isEmpty(value) ? null : Number((value / 100).toFixed(6).replace(/\.?0*$/, ''));
        if (!Helpers.isEmpty(percent)) {
            this.change.emit(percent);
            this.form.controls[this.control.key].setValue(percent);
        }
        else {
            this.change.emit(null);
            this.form.controls[this.control.key].setValue(null);
        }
    };
    NovoControlElement.prototype.handleTabForPickers = function (event) {
        if (this.active && event && event.keyCode) {
            if (event.keyCode === KeyCodes.ESC || event.keyCode === KeyCodes.TAB) {
                this.toggleActive(event, false);
            }
        }
    };
    NovoControlElement.prototype.emitChange = function (value) {
        this.change.emit(value);
        this.checkMaxLength(value);
    };
    NovoControlElement.prototype.handleEdit = function (value) {
        this.edit.emit(value);
    };
    NovoControlElement.prototype.handleSave = function (value) {
        this.save.emit(value);
    };
    NovoControlElement.prototype.handleDelete = function (value) {
        this.delete.emit(value);
    };
    NovoControlElement.prototype.handleUpload = function (value) {
        this.upload.emit(value);
    };
    NovoControlElement.prototype.handleAddressChange = function (data) {
        if (data &&
            !Helpers.isBlank(data.value) &&
            data.field &&
            this.control.config[data.field] &&
            !Helpers.isEmpty(this.control.config[data.field].maxlength)) {
            this.itemCount = data.value.length;
            this.characterCountField = data.field;
            this.maxLength = this.control.config[data.field].maxlength;
            this.showCount = true;
            if (this.maxLength === this.itemCount) {
                this.maxLengthMetErrorfields.push(data.field);
            }
            else {
                this.maxLengthMetErrorfields = this.maxLengthMetErrorfields.filter(function (field) { return field !== data.field; });
            }
        }
    };
    NovoControlElement.prototype.updateValidity = function (shouldEventBeEmitted) {
        var emitEvent = shouldEventBeEmitted ? true : false;
        this.form.controls[this.control.key].updateValueAndValidity({ emitEvent: emitEvent });
    };
    NovoControlElement.ɵfac = function NovoControlElement_Factory(t) { return new (t || NovoControlElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(DateFormatService), ɵɵdirectiveInject(FieldInteractionApi), ɵɵdirectiveInject(NovoTemplateService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(LOCALE_ID)); };
    NovoControlElement.ɵcmp = ɵɵdefineComponent({ type: NovoControlElement, selectors: [["novo-control"]], hostVars: 12, hostBindings: function NovoControlElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("data-control-type", ctx.form.controls[ctx.control.key].controlType)("data-control-key", ctx.control.key);
            ɵɵclassMap(ctx.form.controls[ctx.control.key].controlType);
            ɵɵclassProp("disabled", ctx.form.controls[ctx.control.key].readOnly)("hidden", ctx.form.controls[ctx.control.key].hidden)("inline-embedded", ctx.control.isInlineEmbedded)("embedded", ctx.control.isEmbedded);
        } }, inputs: { control: "control", form: "form", condensed: "condensed", autoFocus: "autoFocus" }, outputs: { change: "change", edit: "edit", save: "save", delete: "delete", upload: "upload", onBlur: "blur", onFocus: "focus" }, features: [ɵɵInheritDefinitionFeature], decls: 15, vars: 24, consts: [[1, "novo-control-container", 3, "hidden"], [3, "tooltip", "tooltipPosition"], [1, "bhi-lock", 3, "hidden"], [3, "ngClass", 4, "ngIf"], [1, "novo-control-outer-container"], ["class", "novo-control-label", 3, "novo-control-empty", "novo-control-focused", "novo-control-filled", "novo-control-always-active", "novo-control-extra-spacing", 4, "ngIf"], [1, "novo-control-inner-container"], [1, "novo-control-inner-input-container"], [3, "hidden", "class", "ngClass", 4, "ngIf"], [4, "ngIf"], [3, "class", "has-tip", "ngClass", 4, "ngIf"], [3, "name", "tip", "icon", "button", "sanitize", 4, "ngIf"], ["class", "loading", 4, "ngIf"], [3, "ngClass"], [1, "novo-control-label"], [3, "hidden", "ngClass"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [1, "novo-control-input-container", "novo-control-input-with-label"], ["type", "text"], [1, "messages", 3, "ngClass"], ["class", "error-text", 4, "ngIf"], ["class", "description", 4, "ngIf"], ["class", "warning-text", 4, "ngIf"], ["class", "character-count", 3, "error", 4, "ngIf"], ["class", "record-count", 3, "zero-count", "row-picker", 4, "ngIf"], [1, "error-text"], ["class", "error-text", 4, "ngFor", "ngForOf"], [1, "description"], [1, "warning-text"], [1, "character-count"], [1, "record-count"], [3, "name", "tip", "icon", "button", "sanitize"], [1, "loading"], ["version", "1.1", "xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", 0, "xmlns", "a", "http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/", "x", "0px", "y", "0px", "width", "18.2px", "height", "18.5px", "viewBox", "0 0 18.2 18.5", 0, "xml", "space", "preserve", 2, "enable-background", "new 0 0 18.2 18.5"], ["type", "text/css"], ["d", "M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z", 1, "spinner"]], template: function NovoControlElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "span", 1);
            ɵɵelement(2, "i", 2);
            ɵɵelementEnd();
            ɵɵtemplate(3, NovoControlElement_label_3_Template, 2, 5, "label", 3);
            ɵɵelementStart(4, "div", 4);
            ɵɵtemplate(5, NovoControlElement_label_5_Template, 2, 12, "label", 5);
            ɵɵelementStart(6, "div", 6);
            ɵɵelementStart(7, "div", 7);
            ɵɵtemplate(8, NovoControlElement_i_8_Template, 1, 8, "i", 8);
            ɵɵelementStart(9, "div");
            ɵɵtemplate(10, NovoControlElement_ng_container_10_Template, 2, 2, "ng-container", 9);
            ɵɵtemplate(11, NovoControlElement_ng_container_11_Template, 3, 0, "ng-container", 9);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵtemplate(12, NovoControlElement_div_12_Template, 19, 24, "div", 10);
            ɵɵtemplate(13, NovoControlElement_novo_tip_well_13_Template, 1, 5, "novo-tip-well", 11);
            ɵɵelementEnd();
            ɵɵtemplate(14, NovoControlElement_i_14_Template, 5, 0, "i", 12);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("hidden", ctx.form.controls[ctx.control.key].hidden || ctx.form.controls[ctx.control.key].type === "hidden" || ctx.form.controls[ctx.control.key].controlType === "hidden");
            ɵɵadvance(1);
            ɵɵproperty("tooltip", ctx.labels.encryptedFieldTooltip)("tooltipPosition", "right");
            ɵɵadvance(1);
            ɵɵproperty("hidden", !ctx.form.controls[ctx.control.key].encrypted);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.form.layout !== "vertical" && ctx.form.controls[ctx.control.key].label && !ctx.condensed);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.form.layout === "vertical" && ctx.form.controls[ctx.control.key].label && !ctx.condensed);
            ɵɵadvance(1);
            ɵɵclassProp("required", ctx.form.controls[ctx.control.key].required && !ctx.form.controls[ctx.control.key].readOnly);
            ɵɵadvance(1);
            ɵɵclassProp("novo-control-filled", ctx.hasValue)("novo-control-empty", !ctx.hasValue);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.condensed || ctx.form.controls[ctx.control.key].required);
            ɵɵadvance(1);
            ɵɵclassMapInterpolate1("novo-control-input ", ctx.form.controls[ctx.control.key].controlType, "");
            ɵɵclassProp("control-disabled", ctx.form.controls[ctx.control.key].disabled);
            ɵɵattribute("data-automation-id", ctx.control.key);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.templates);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.templates || ctx.loading);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.condensed);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.form.controls[ctx.control.key].tipWell);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.form.controls[ctx.control.key].fieldInteractionloading);
        } }, directives: [TooltipDirective, NgIf, NgClass, NgTemplateOutlet, NgForOf, NovoTipWellElement], pipes: [UpperCasePipe], encapsulation: 2 });
    return NovoControlElement;
}(OutsideClick));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoControlElement, [{
        type: Component,
        args: [{
                selector: 'novo-control',
                template: "\n        <div class=\"novo-control-container\" [hidden]=\"form.controls[control.key].hidden || form.controls[control.key].type === 'hidden' || form.controls[control.key].controlType === 'hidden'\">\n            <!--Encrypted Field-->\n            <span [tooltip]=\"labels.encryptedFieldTooltip\" [tooltipPosition]=\"'right'\"><i [hidden]=\"!form.controls[control.key].encrypted\"\n            class=\"bhi-lock\"></i></span>\n            <!--Label (for horizontal)-->\n            <label [attr.for]=\"control.key\" *ngIf=\"form.layout !== 'vertical' && form.controls[control.key].label && !condensed\" [ngClass]=\"{'encrypted': form.controls[control.key].encrypted }\">\n                {{ form.controls[control.key].label }}\n            </label>\n            <div class=\"novo-control-outer-container\">\n                <!--Label (for vertical)-->\n                <label\n                    *ngIf=\"form.layout === 'vertical' && form.controls[control.key].label && !condensed\"\n                    class=\"novo-control-label\"\n                    [attr.for]=\"control.key\"\n                    [class.novo-control-empty]=\"!hasValue\"\n                    [class.novo-control-focused]=\"focused\"\n                    [class.novo-control-filled]=\"hasValue\"\n                    [class.novo-control-always-active]=\"alwaysActive || form.controls[control.key].placeholder\"\n                    [class.novo-control-extra-spacing]=\"requiresExtraSpacing\">\n                    {{ form.controls[control.key].label }}\n                </label>\n                <div class=\"novo-control-inner-container\" [class.required]=\"form.controls[control.key].required && !form.controls[control.key].readOnly\">\n                    <div class=\"novo-control-inner-input-container\" [class.novo-control-filled]=\"hasValue\" [class.novo-control-empty]=\"!hasValue\">\n                      <!--Required Indicator-->\n                        <i [hidden]=\"!form.controls[control.key].required || form.controls[control.key].readOnly\"\n                            class=\"required-indicator {{ form.controls[control.key].controlType }}\"\n                            [ngClass]=\"{'bhi-circle': !isValid, 'bhi-check': isValid}\" *ngIf=\"!condensed || form.controls[control.key].required\">\n                        </i>\n                        <!--Form Controls-->\n                        <div class=\"novo-control-input {{ form.controls[control.key].controlType }}\" [attr.data-automation-id]=\"control.key\" [class.control-disabled]=\"form.controls[control.key].disabled\">\n                            <!--TODO prefix/suffix on the control-->\n                            <ng-container *ngIf=\"templates\">\n                              <ng-container *ngTemplateOutlet=\"templates[form.controls[control.key].controlType]; context: templateContext\"></ng-container>\n                            </ng-container>\n                            <ng-container *ngIf=\"!templates || loading\">\n                                <div class=\"novo-control-input-container novo-control-input-with-label\">\n                                  <input type=\"text\"/>\n                                </div>\n                            </ng-container>\n                        </div>\n                    </div>\n                    <!--Error Message-->\n                    <div class=\"field-message {{ form.controls[control.key].controlType }}\" *ngIf=\"!condensed\" [class.has-tip]=\"form.controls[control.key].tipWell\" [ngClass]=\"showErrorState || showMaxLengthMetMessage ? 'error-shown' : 'error-hidden'\">\n                        <div class=\"messages\" [ngClass]=\"showMessages ? 'count-shown messages-shown' : 'count-hidden messages-hidden'\">\n                            <span class=\"error-text\" *ngIf=\"showFieldMessage\"></span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.required && form.controls[control.key].controlType !== 'address'\">{{ form.controls[control.key].label | uppercase }} {{ labels.isRequired }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.minlength\">{{ form.controls[control.key].label | uppercase }} {{ labels.minLength }} {{ form.controls[control.key].minlength }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && maxLengthMet && focused && !errors?.maxlength && form.controls[control.key].controlType !== 'picker'\">{{ labels.maxlengthMet(form.controls[control.key].maxlength) }}</span>\n                            <span class=\"error-text\" *ngIf=\"errors?.maxlength && focused && !errors?.maxlengthFields\">{{ labels.invalidMaxlength(form.controls[control.key].maxlength) }}</span>\n                            <span class=\"error-text\" *ngIf=\"maxLengthMet && form.controls[control.key].controlType === 'picker'\">{{ labels.maxRecordsReached }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && errors?.invalidEmail\">{{ form.controls[control.key].label | uppercase }} {{ labels.invalidEmail }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && (errors?.integerTooLarge || errors?.doubleTooLarge)\">{{ form.controls[control.key].label | uppercase }} {{ labels.isTooLarge }}</span>\n                            <span *ngIf=\"isDirty && errors?.minYear\">{{ form.controls[control.key].label | uppercase }} {{ labels.notValidYear }}</span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && (errors?.custom)\">{{ errors.custom }}</span>\n                            <span class=\"error-text\" *ngIf=\"errors?.maxlength && errors?.maxlengthFields && maxlengthErrorField && focused\">\n                                {{ labels.invalidMaxlengthWithField(control.config[maxlengthErrorField]?.label, control.config[maxlengthErrorField]?.maxlength) }}\n                            </span>\n                            <span class=\"error-text\" *ngIf=\"isDirty && maxlengthMetField && focused && !errors?.maxlengthFields?.includes(maxlengthMetField)\">\n                              {{ labels.maxlengthMetWithField(control.config[maxlengthMetField]?.label, control.config[maxlengthMetField]?.maxlength) }}\n                            </span>\n                            <span *ngIf=\"isDirty && errors?.invalidAddress\">\n                                <span class=\"error-text\" *ngFor=\"let invalidAddressField of errors?.invalidAddressFields\">{{ invalidAddressField | uppercase }} {{ labels.isRequired }} </span>\n                            </span>\n                            <!--Field Hint-->\n                            <span class=\"description\" *ngIf=\"form.controls[control.key].description\">\n                                {{ form.controls[control.key].description }}\n                            </span>\n                            <span class=\"warning-text\" *ngIf=\"form.controls[control.key].warning\">{{ form.controls[control.key].warning }}</span>\n\n                        </div>\n                        <span class=\"character-count\" [class.error]=\"((errors?.maxlength && !errors?.maxlengthFields) || (errors?.maxlength && errors?.maxlengthFields && errors.maxlengthFields.includes(focusedField)))\" *ngIf=\"showCount && form.controls[control.key].controlType !== 'picker'\">{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span>\n                        <span class=\"record-count\" [class.zero-count]=\"itemCount === 0\" [class.row-picker]=\"form.controls[this.control.key].config.columns\" *ngIf=\"showCount && form.controls[control.key].controlType === 'picker'\">{{ itemCount }}/{{ maxLength || form.controls[control.key].maxlength }}</span>\n                    </div>\n                    <!--Tip Wel-->\n                    <novo-tip-well *ngIf=\"form.controls[control.key].tipWell\" [name]=\"control.key\" [tip]=\"form.controls[control.key]?.tipWell?.tip\" [icon]=\"form.controls[control.key]?.tipWell?.icon\" [button]=\"form.controls[control.key]?.tipWell?.button\" [sanitize]=\"form.controls[control.key]?.tipWell?.sanitize\"></novo-tip-well>\n                </div>\n                <i *ngIf=\"form.controls[control.key].fieldInteractionloading\" class=\"loading\">\n                    <svg version=\"1.1\"\n                     xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:a=\"http://ns.adobe.com/AdobeSVGViewerExtensions/3.0/\"\n                     x=\"0px\" y=\"0px\" width=\"18.2px\" height=\"18.5px\" viewBox=\"0 0 18.2 18.5\" style=\"enable-background:new 0 0 18.2 18.5;\"\n                     xml:space=\"preserve\">\n                    <style type=\"text/css\">\n                        .spinner { fill:#FFFFFF; }\n                    </style>\n                        <path class=\"spinner\" d=\"M9.2,18.5C4.1,18.5,0,14.4,0,9.2S4.1,0,9.2,0c0.9,0,1.9,0.1,2.7,0.4c0.8,0.2,1.2,1.1,1,1.9\n                            c-0.2,0.8-1.1,1.2-1.9,1C10.5,3.1,9.9,3,9.2,3C5.8,3,3,5.8,3,9.2s2.8,6.2,6.2,6.2c2.8,0,5.3-1.9,6-4.7c0.2-0.8,1-1.3,1.8-1.1\n                            c0.8,0.2,1.3,1,1.1,1.8C17.1,15.7,13.4,18.5,9.2,18.5z\"/>\n                    </svg>\n                </i>\n            </div>\n        </div>\n    ",
                host: {
                    '[class]': 'form.controls[control.key].controlType',
                    '[attr.data-control-type]': 'form.controls[control.key].controlType',
                    '[class.disabled]': 'form.controls[control.key].readOnly',
                    '[class.hidden]': 'form.controls[control.key].hidden',
                    '[attr.data-control-key]': 'control.key',
                    '[class.inline-embedded]': 'control.isInlineEmbedded',
                    '[class.embedded]': 'control.isEmbedded',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: DateFormatService }, { type: FieldInteractionApi }, { type: NovoTemplateService }, { type: ChangeDetectorRef }, { type: undefined, decorators: [{
                type: Inject,
                args: [LOCALE_ID]
            }] }]; }, { control: [{
            type: Input
        }], form: [{
            type: Input
        }], condensed: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], change: [{
            type: Output
        }], edit: [{
            type: Output
        }], save: [{
            type: Output
        }], delete: [{
            type: Output
        }], upload: [{
            type: Output
        }], onBlur: [{
            type: Output,
            args: ['blur']
        }], onFocus: [{
            type: Output,
            args: ['focus']
        }] }); })();

// NG
function NovoControlGroup_h6_0_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 11);
} if (rf & 2) {
    var ctx_r9 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r9.icon);
    ɵɵattribute("data-automation-id", "novo-control-group-icon-" + ctx_r9.key);
} }
function NovoControlGroup_h6_0_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 12);
} if (rf & 2) {
    var ctx_r10 = ɵɵnextContext(2);
    ɵɵclassProp("toggled", ctx_r10.toggled);
    ɵɵattribute("data-automation-id", "novo-control-group-collapse-" + ctx_r10.key);
} }
function NovoControlGroup_h6_0_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 13);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", "novo-control-group-description-" + ctx_r11.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r11.description);
} }
function NovoControlGroup_h6_0_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "h6", 6);
    ɵɵelementStart(1, "span", 7);
    ɵɵlistener("click", function NovoControlGroup_h6_0_Template_span_click_1_listener($event) { ɵɵrestoreView(_r13); var ctx_r12 = ɵɵnextContext(); return ctx_r12.toggle($event); });
    ɵɵtemplate(2, NovoControlGroup_h6_0_i_2_Template, 1, 2, "i", 8);
    ɵɵtemplate(3, NovoControlGroup_h6_0_i_3_Template, 1, 3, "i", 9);
    ɵɵelementStart(4, "span");
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoControlGroup_h6_0_label_6_Template, 2, 2, "label", 10);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("clickable", ctx_r0.collapsible);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.icon && !ctx_r0.collapsible);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.collapsible);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", "novo-control-group-label-" + ctx_r0.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.description);
} }
function NovoControlGroup_ng_template_2_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r24 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "novo-control", 19);
    ɵɵlistener("change", function NovoControlGroup_ng_template_2_div_1_Template_novo_control_change_1_listener($event) { ɵɵrestoreView(_r24); var ctx_r23 = ɵɵnextContext(2); return ctx_r23.onChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var c_r22 = ctx.$implicit;
    var ctx_r25 = ɵɵnextContext();
    var form_r15 = ctx_r25.form;
    var key_r16 = ctx_r25.key;
    var index_r14 = ctx_r25.index;
    var ctx_r17 = ɵɵnextContext();
    ɵɵclassMapInterpolate1("novo-control-container ", c_r22.key, "");
    ɵɵstyleProp("max-width", c_r22.width, "px");
    ɵɵclassProp("is-label", c_r22.controlType === "read-only");
    ɵɵadvance(1);
    ɵɵproperty("form", form_r15 == null ? null : form_r15.controls[key_r16]["controls"][index_r14])("control", c_r22)("condensed", !ctx_r17.vertical || c_r22.controlType === "read-only");
} }
function NovoControlGroup_ng_template_2_div_2_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 21);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_div_2_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r29); var index_r14 = ɵɵnextContext(2).index; var ctx_r27 = ɵɵnextContext(); return ctx_r27.editControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r30 = ɵɵnextContext(2);
    var index_r14 = ctx_r30.index;
    var key_r16 = ctx_r30.key;
    var ctx_r26 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r26.disabledArray[index_r14].edit);
    ɵɵattribute("data-automation-id", "novo-control-group-edit-" + key_r16);
} }
function NovoControlGroup_ng_template_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 20);
    ɵɵtemplate(1, NovoControlGroup_ng_template_2_div_2_button_1_Template, 1, 2, "button", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r18 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r18.edit && !ctx_r18.vertical);
} }
function NovoControlGroup_ng_template_2_div_3_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r34 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 22);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_div_3_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r34); var index_r14 = ɵɵnextContext(2).index; var ctx_r32 = ɵɵnextContext(); return ctx_r32.removeControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r35 = ɵɵnextContext(2);
    var index_r14 = ctx_r35.index;
    var key_r16 = ctx_r35.key;
    var ctx_r31 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r31.disabledArray[index_r14].remove);
    ɵɵattribute("data-automation-id", "novo-control-group-delete-" + key_r16);
} }
function NovoControlGroup_ng_template_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 20);
    ɵɵtemplate(1, NovoControlGroup_ng_template_2_div_3_button_1_Template, 1, 2, "button", 18);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r19 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r19.remove && !ctx_r19.vertical);
} }
function NovoControlGroup_ng_template_2_button_4_Template(rf, ctx) { if (rf & 1) {
    var _r38 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 21);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_button_4_Template_button_click_0_listener() { ɵɵrestoreView(_r38); var index_r14 = ɵɵnextContext().index; var ctx_r36 = ɵɵnextContext(); return ctx_r36.editControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r39 = ɵɵnextContext();
    var index_r14 = ctx_r39.index;
    var key_r16 = ctx_r39.key;
    var ctx_r20 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r20.disabledArray[index_r14].edit);
    ɵɵattribute("data-automation-id", "novo-control-group-edit-" + key_r16);
} }
function NovoControlGroup_ng_template_2_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r42 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 22);
    ɵɵlistener("click", function NovoControlGroup_ng_template_2_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r42); var index_r14 = ɵɵnextContext().index; var ctx_r40 = ɵɵnextContext(); return ctx_r40.removeControl(index_r14); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r43 = ɵɵnextContext();
    var index_r14 = ctx_r43.index;
    var key_r16 = ctx_r43.key;
    var ctx_r21 = ɵɵnextContext();
    ɵɵproperty("disabled", !ctx_r21.disabledArray[index_r14].remove);
    ɵɵattribute("data-automation-id", "novo-control-group-delete-" + key_r16);
} }
function NovoControlGroup_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 14);
    ɵɵtemplate(1, NovoControlGroup_ng_template_2_div_1_Template, 2, 10, "div", 15);
    ɵɵtemplate(2, NovoControlGroup_ng_template_2_div_2_Template, 2, 1, "div", 16);
    ɵɵtemplate(3, NovoControlGroup_ng_template_2_div_3_Template, 2, 1, "div", 16);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoControlGroup_ng_template_2_button_4_Template, 1, 2, "button", 17);
    ɵɵtemplate(5, NovoControlGroup_ng_template_2_button_5_Template, 1, 2, "button", 18);
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r2.controls);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.edit && !ctx_r2.vertical);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.remove && !ctx_r2.vertical);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.edit && ctx_r2.vertical);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.remove && ctx_r2.vertical);
} }
function NovoControlGroup_ng_template_4_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var label_r49 = ctx.$implicit;
    ɵɵclassMapInterpolate1("novo-control-group-control-label ", label_r49.key, "");
    ɵɵstyleProp("max-width", label_r49.width, "px");
    ɵɵclassProp("column-required", label_r49.required);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", "novo-control-group-label-" + label_r49.value);
    ɵɵadvance(1);
    ɵɵtextInterpolate(label_r49.value);
} }
function NovoControlGroup_ng_template_4_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 25);
} if (rf & 2) {
    var key_r45 = ɵɵnextContext().key;
    ɵɵattribute("data-automation-id", "novo-control-group-edit-" + key_r45);
} }
function NovoControlGroup_ng_template_4_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 25);
} if (rf & 2) {
    var key_r45 = ɵɵnextContext().key;
    ɵɵattribute("data-automation-id", "novo-control-group-delete-" + key_r45);
} }
function NovoControlGroup_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵtemplate(0, NovoControlGroup_ng_template_4_div_0_Template, 3, 9, "div", 23);
    ɵɵtemplate(1, NovoControlGroup_ng_template_4_div_1_Template, 1, 1, "div", 24);
    ɵɵtemplate(2, NovoControlGroup_ng_template_4_div_2_Template, 1, 1, "div", 24);
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵproperty("ngForOf", ctx_r4.controlLabels);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.edit);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.remove);
} }
function NovoControlGroup_ng_container_6_div_1_ng_template_1_Template(rf, ctx) { }
var _c0$H = function (a0, a1, a2) { return { form: a0, key: a1, controlLabels: a2 }; };
function NovoControlGroup_ng_container_6_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 27);
    ɵɵtemplate(1, NovoControlGroup_ng_container_6_div_1_ng_template_1_Template, 0, 0, "ng-template", 28);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r52 = ɵɵnextContext(2);
    var _r3 = ɵɵreference(5);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r52.columnLabelTemplate || _r3)("ngTemplateOutletContext", ɵɵpureFunction3(2, _c0$H, ctx_r52.form, ctx_r52.key, ctx_r52.controlLabels));
} }
function NovoControlGroup_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoControlGroup_ng_container_6_div_1_Template, 2, 6, "div", 26);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r5.vertical && (ctx_r5.form == null ? null : ctx_r5.form.controls[ctx_r5.key]) && (ctx_r5.form == null ? null : ctx_r5.form.controls[ctx_r5.key]["controls"].length) !== 0);
} }
function NovoControlGroup_ng_container_7_div_1_ng_template_1_Template(rf, ctx) { }
var _c1$n = function (a0, a1, a2, a3) { return { form: a0, index: a1, key: a2, controls: a3 }; };
function NovoControlGroup_ng_container_7_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 30);
    ɵɵtemplate(1, NovoControlGroup_ng_container_7_div_1_ng_template_1_Template, 0, 0, "ng-template", 28);
    ɵɵelementEnd();
} if (rf & 2) {
    var index_r56 = ctx.index;
    var ctx_r54 = ɵɵnextContext(2);
    var _r1 = ɵɵreference(3);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r54.rowTemplate || _r1)("ngTemplateOutletContext", ɵɵpureFunction4(2, _c1$n, ctx_r54.form, index_r56, ctx_r54.key, ctx_r54.controls));
} }
function NovoControlGroup_ng_container_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoControlGroup_ng_container_7_div_1_Template, 2, 7, "div", 29);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r6.form == null ? null : ctx_r6.form.controls[ctx_r6.key]["controls"]);
} }
function NovoControlGroup_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext();
    ɵɵattribute("data-automation-id", "novo-control-group-empty-" + ctx_r7.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r7.emptyMessage, " ");
} }
function NovoControlGroup_p_9_Template(rf, ctx) { if (rf & 1) {
    var _r59 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "p");
    ɵɵelementStart(1, "button", 32);
    ɵɵlistener("click", function NovoControlGroup_p_9_Template_button_click_1_listener() { ɵɵrestoreView(_r59); var ctx_r58 = ɵɵnextContext(); return ctx_r58.addNewControl(); });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", "novo-control-group-bottom-add-" + ctx_r8.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r8.add == null ? null : ctx_r8.add.label, " ");
} }
var NovoControlGroup = /** @class */ (function () {
    function NovoControlGroup(formUtils, fb, ref, labels) {
        this.formUtils = formUtils;
        this.fb = fb;
        this.ref = ref;
        this.labels = labels;
        this._vertical = false;
        this._remove = false;
        this._edit = false;
        this._collapsible = false;
        this.onRemove = new EventEmitter();
        this.onEdit = new EventEmitter();
        this.onAdd = new EventEmitter();
        this.change = new EventEmitter();
        this.controlLabels = [];
        this.toggled = false;
        this.disabledArray = [];
        this.currentIndex = 0;
    }
    Object.defineProperty(NovoControlGroup.prototype, "vertical", {
        get: function () {
            return this._vertical;
        },
        // Sets the display of the group to either be row (default) or vertical via flex-box
        set: function (v) {
            this._vertical = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "remove", {
        get: function () {
            return this._remove;
        },
        // Hide/shows the remove button for removing a control
        set: function (v) {
            this._remove = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "edit", {
        get: function () {
            return this._edit;
        },
        // Hide/shows the edit button for editing a control
        set: function (v) {
            this._edit = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "collapsible", {
        get: function () {
            return this._collapsible;
        },
        // Allows the control to collapse or not
        set: function (v) {
            this._collapsible = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoControlGroup.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        // Icon of the control group (can have bhi prefix or not)
        set: function (v) {
            this._icon = v && v.indexOf('bhi') !== -1 ? v : "bhi-" + v;
        },
        enumerable: true,
        configurable: true
    });
    NovoControlGroup.prototype.ngAfterContentInit = function () {
        if (!this.key) {
            throw new Error('novo-control-group must have the [key] attribute provided!');
        }
    };
    NovoControlGroup.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var initialValueChange = changes['initialValue'];
        // If initial value changes, clear the controls
        if (initialValueChange && initialValueChange.currentValue !== initialValueChange.previousValue && !initialValueChange.firstChange) {
            this.clearControls();
        }
        // Check for array, add a control for each value
        if (this.initialValue && Array.isArray(this.initialValue)) {
            if (this.initialValue.length !== 0) {
                this.currentIndex = 0;
                this.initialValue.forEach(function (value) { return _this.addNewControl(value); });
            }
        }
        else if (this.initialValue) {
            // If value is an object, just add one control
            this.addNewControl(this.initialValue);
        }
        // If we are horizontal, grab the labels to help with layout
        if (!this.vertical) {
            this.controlLabels = (this.controls || []).map(function (control) {
                return {
                    value: control.label,
                    width: control.width,
                    required: control.required,
                    key: control.key,
                };
            });
            this.ref.markForCheck();
        }
    };
    NovoControlGroup.prototype.onChange = function (change) {
        this.change.emit(this);
    };
    NovoControlGroup.prototype.resetAddRemove = function () {
        var _this = this;
        this.disabledArray.forEach(function (item, idx) {
            item.edit = _this.checkCanEdit(idx);
            item.remove = _this.checkCanRemove(idx);
        });
        this.ref.markForCheck();
    };
    NovoControlGroup.prototype.addNewControl = function (value) {
        var control = this.form.controls[this.key];
        var newCtrl = this.buildControl(value);
        if (control) {
            control.push(newCtrl);
        }
        else {
            this.form.addControl(this.key, this.fb.array([newCtrl]));
        }
        this.disabledArray.push({
            edit: true,
            remove: true,
        });
        this.resetAddRemove();
        if (!value) {
            this.onAdd.emit();
        }
        this.currentIndex++;
        this.ref.markForCheck();
    };
    NovoControlGroup.prototype.buildControl = function (value) {
        var newControls = this.getNewControls(this.controls);
        if (value) {
            this.formUtils.setInitialValues(newControls, value);
        }
        var ctrl = this.formUtils.toFormGroup(newControls);
        return ctrl;
    };
    NovoControlGroup.prototype.removeControl = function (index, emitEvent) {
        if (emitEvent === void 0) { emitEvent = true; }
        var control = this.form.controls[this.key];
        if (emitEvent) {
            this.onRemove.emit({ value: control.at(index).value, index: index });
        }
        control.removeAt(index);
        this.disabledArray = this.disabledArray.filter(function (value, idx) { return idx !== index; });
        this.resetAddRemove();
        this.currentIndex--;
        this.ref.markForCheck();
    };
    NovoControlGroup.prototype.editControl = function (index) {
        var control = this.form.controls[this.key];
        this.onEdit.emit({ value: control.at(index).value, index: index });
    };
    NovoControlGroup.prototype.toggle = function (event) {
        Helpers.swallowEvent(event);
        if (this.collapsible) {
            this.toggled = !this.toggled;
            this.ref.markForCheck();
        }
    };
    NovoControlGroup.prototype.clearControls = function () {
        var control = this.form.controls[this.key];
        if (control) {
            for (var i = control.controls.length; i >= 0; i--) {
                this.removeControl(i, false);
            }
            this.currentIndex = 0;
        }
    };
    NovoControlGroup.prototype.checkCanEdit = function (index) {
        if (this.canEdit) {
            var control = this.form.controls[this.key];
            return this.canEdit(control.at(index).value, index);
        }
        return true;
    };
    NovoControlGroup.prototype.checkCanRemove = function (index) {
        if (this.canRemove) {
            var control = this.form.controls[this.key];
            if (control.at(index)) {
                return this.canRemove(control.at(index).value, index);
            }
            return true;
        }
        return true;
    };
    NovoControlGroup.prototype.getNewControls = function (controls) {
        var ret = [];
        (this.controls || []).forEach(function (control) {
            ret.push(new BaseControl(control.__type, control));
        });
        return ret;
    };
    NovoControlGroup.ɵfac = function NovoControlGroup_Factory(t) { return new (t || NovoControlGroup)(ɵɵdirectiveInject(FormUtils), ɵɵdirectiveInject(FormBuilder), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService)); };
    NovoControlGroup.ɵcmp = ɵɵdefineComponent({ type: NovoControlGroup, selectors: [["novo-control-group"]], inputs: { vertical: "vertical", add: "add", remove: "remove", edit: "edit", collapsible: "collapsible", form: "form", controls: "controls", key: "key", label: "label", description: "description", emptyMessage: "emptyMessage", icon: "icon", initialValue: "initialValue", canEdit: "canEdit", canRemove: "canRemove", rowTemplate: "rowTemplate", columnLabelTemplate: "columnLabelTemplate" }, outputs: { onRemove: "onRemove", onEdit: "onEdit", onAdd: "onAdd", change: "change" }, features: [ɵɵNgOnChangesFeature], decls: 10, vars: 11, consts: [["class", "novo-section-header", 4, "ngIf"], [1, "novo-control-group-controls"], ["defaultTemplate", ""], ["defaultColumnLabelTemplate", ""], [4, "ngIf"], ["class", "novo-control-group-empty", 4, "ngIf"], [1, "novo-section-header"], [3, "click"], [3, "ngClass", 4, "ngIf"], ["class", "bhi-next", 3, "toggled", 4, "ngIf"], ["class", "novo-control-group-description", 4, "ngIf"], [3, "ngClass"], [1, "bhi-next"], [1, "novo-control-group-description"], [1, "novo-control-group-control"], [3, "class", "is-label", "max-width", 4, "ngFor", "ngForOf"], ["class", "novo-control-container last", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "edit", "index", "-1", 3, "disabled", "click", 4, "ngIf"], ["type", "button", "theme", "icon", "icon", "delete-o", "index", "-1", 3, "disabled", "click", 4, "ngIf"], [3, "form", "control", "condensed", "change"], [1, "novo-control-container", "last"], ["type", "button", "theme", "icon", "icon", "edit", "index", "-1", 3, "disabled", "click"], ["type", "button", "theme", "icon", "icon", "delete-o", "index", "-1", 3, "disabled", "click"], [3, "class", "max-width", "column-required", 4, "ngFor", "ngForOf"], ["class", "novo-control-group-control-label last", 4, "ngIf"], [1, "novo-control-group-control-label", "last"], ["class", "novo-control-group-labels", 4, "ngIf"], [1, "novo-control-group-labels"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["class", "novo-control-group-row", 4, "ngFor", "ngForOf"], [1, "novo-control-group-row"], [1, "novo-control-group-empty"], ["type", "button", "theme", "dialogue", "icon", "add-thin", "index", "-1", 3, "click"]], template: function NovoControlGroup_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoControlGroup_h6_0_Template, 7, 7, "h6", 0);
            ɵɵelementStart(1, "div", 1);
            ɵɵtemplate(2, NovoControlGroup_ng_template_2_Template, 6, 5, "ng-template", null, 2, ɵɵtemplateRefExtractor);
            ɵɵtemplate(4, NovoControlGroup_ng_template_4_Template, 3, 3, "ng-template", null, 3, ɵɵtemplateRefExtractor);
            ɵɵtemplate(6, NovoControlGroup_ng_container_6_Template, 2, 1, "ng-container", 4);
            ɵɵtemplate(7, NovoControlGroup_ng_container_7_Template, 2, 1, "ng-container", 4);
            ɵɵtemplate(8, NovoControlGroup_div_8_Template, 2, 2, "div", 5);
            ɵɵtemplate(9, NovoControlGroup_p_9_Template, 3, 2, "p", 4);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.label);
            ɵɵadvance(1);
            ɵɵclassProp("vertical", ctx.vertical)("horizontal", !ctx.vertical)("hidden", ctx.collapsible && !ctx.toggled);
            ɵɵadvance(5);
            ɵɵproperty("ngIf", !ctx.vertical && (ctx.form == null ? null : ctx.form.controls[ctx.key]) && (ctx.form == null ? null : ctx.form.controls[ctx.key]["controls"].length) !== 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.form == null ? null : ctx.form.controls[ctx.key]);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.form == null ? null : ctx.form.controls[ctx.key]) && (ctx.form == null ? null : ctx.form.controls[ctx.key]["controls"].length) === 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.add);
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoControlGroup;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoControlGroup, [{
        type: Component,
        args: [{
                selector: 'novo-control-group',
                templateUrl: './ControlGroup.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: FormUtils }, { type: FormBuilder }, { type: ChangeDetectorRef }, { type: NovoLabelService }]; }, { vertical: [{
            type: Input
        }], add: [{
            type: Input
        }], remove: [{
            type: Input
        }], edit: [{
            type: Input
        }], collapsible: [{
            type: Input
        }], form: [{
            type: Input
        }], controls: [{
            type: Input
        }], key: [{
            type: Input
        }], label: [{
            type: Input
        }], description: [{
            type: Input
        }], emptyMessage: [{
            type: Input
        }], icon: [{
            type: Input
        }], initialValue: [{
            type: Input
        }], canEdit: [{
            type: Input
        }], canRemove: [{
            type: Input
        }], rowTemplate: [{
            type: Input
        }], columnLabelTemplate: [{
            type: Input
        }], onRemove: [{
            type: Output
        }], onEdit: [{
            type: Output
        }], onAdd: [{
            type: Output
        }], change: [{
            type: Output
        }] }); })();

// NG2
var _c0$I = ["*"];
var _c1$o = function (a0, a1, a2) { return { "unchecked": a0, "checked": a1, "has-icon": a2 }; };
function NovoRadioElement_button_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "button", 4);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngClass", ɵɵpureFunction3(4, _c1$o, !ctx_r0.checked, ctx_r0.checked, !!ctx_r0.icon))("theme", ctx_r0.theme)("icon", ctx_r0.icon);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.label);
} }
var _c2$a = function (a0, a1) { return { "bhi-radio-empty": a0, "bhi-radio-filled": a1 }; };
function NovoRadioElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelement(1, "i", 5);
    ɵɵtext(2);
    ɵɵprojection(3);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ɵɵpureFunction2(2, _c2$a, !ctx_r1.checked, ctx_r1.checked));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r1.label, " ");
} }
// Value accessor for the component (supports ngModel)
var RADIO_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoRadioElement; }),
    multi: true,
};
var NovoRadioGroup = /** @class */ (function () {
    function NovoRadioGroup() {
    }
    NovoRadioGroup.ɵfac = function NovoRadioGroup_Factory(t) { return new (t || NovoRadioGroup)(); };
    NovoRadioGroup.ɵcmp = ɵɵdefineComponent({ type: NovoRadioGroup, selectors: [["novo-radio-group"]], ngContentSelectors: _c0$I, decls: 1, vars: 0, template: function NovoRadioGroup_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoRadioGroup;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRadioGroup, [{
        type: Component,
        args: [{
                selector: 'novo-radio-group',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();
var NovoRadioElement = /** @class */ (function () {
    function NovoRadioElement(ref) {
        this.ref = ref;
        this.button = false;
        this.theme = 'secondary';
        this.disabled = false;
        this.change = new EventEmitter();
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
    }
    NovoRadioElement.prototype.select = function (event) {
        Helpers.swallowEvent(event);
        // Only change the checked state if this is a new radio, they are not toggle buttons
        if (!this.checked) {
            this.checked = !this.checked;
            this.change.emit(this.value);
            this.onModelChange(this.value);
            this.ref.markForCheck();
        }
    };
    NovoRadioElement.prototype.writeValue = function (model) {
        this.model = model;
        this.ref.markForCheck();
    };
    NovoRadioElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoRadioElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoRadioElement.prototype.setDisabledState = function (disabled) {
        this.disabled = disabled;
    };
    NovoRadioElement.ɵfac = function NovoRadioElement_Factory(t) { return new (t || NovoRadioElement)(ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoRadioElement.ɵcmp = ɵɵdefineComponent({ type: NovoRadioElement, selectors: [["novo-radio"]], hostVars: 2, hostBindings: function NovoRadioElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("vertical", ctx.vertical);
        } }, inputs: { name: "name", value: "value", checked: "checked", vertical: "vertical", label: "label", button: "button", theme: "theme", icon: "icon", disabled: "disabled" }, outputs: { change: "change" }, features: [ɵɵProvidersFeature([RADIO_VALUE_ACCESSOR])], ngContentSelectors: _c0$I, decls: 4, vars: 9, consts: [["type", "radio", 3, "name", "checked", "disabled", "change"], [3, "click"], [3, "ngClass", "theme", "icon", 4, "ngIf"], [4, "ngIf"], [3, "ngClass", "theme", "icon"], [3, "ngClass"]], template: function NovoRadioElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "input", 0);
            ɵɵlistener("change", function NovoRadioElement_Template_input_change_0_listener($event) { return ctx.select($event); });
            ɵɵelementEnd();
            ɵɵelementStart(1, "label", 1);
            ɵɵlistener("click", function NovoRadioElement_Template_label_click_1_listener($event) { return ctx.select($event); });
            ɵɵtemplate(2, NovoRadioElement_button_2_Template, 2, 8, "button", 2);
            ɵɵtemplate(3, NovoRadioElement_div_3_Template, 4, 5, "div", 3);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("name", ctx.name)("checked", ctx.checked)("disabled", ctx.disabled);
            ɵɵattribute("id", ctx.name);
            ɵɵadvance(1);
            ɵɵclassProp("disabled", ctx.disabled);
            ɵɵattribute("for", ctx.name);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.button);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.button);
        } }, directives: [NgIf, NovoButtonElement, NgClass], encapsulation: 2 });
    return NovoRadioElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRadioElement, [{
        type: Component,
        args: [{
                selector: 'novo-radio',
                providers: [RADIO_VALUE_ACCESSOR],
                template: "\n        <input [name]=\"name\" type=\"radio\" [checked]=\"checked\" [attr.id]=\"name\" (change)=\"select($event)\" [disabled]=\"disabled\">\n        <label [attr.for]=\"name\" (click)=\"select($event)\" [class.disabled]=\"disabled\">\n            <button *ngIf=\"button\" [ngClass]=\"{'unchecked': !checked, 'checked': checked, 'has-icon': !!icon}\" [theme]=\"theme\" [icon]=\"icon\">{{ label }}</button>\n            <div *ngIf=\"!button\">\n                <i [ngClass]=\"{'bhi-radio-empty': !checked, 'bhi-radio-filled': checked}\"></i>\n                {{ label }}\n                <ng-content></ng-content>\n            </div>\n        </label>\n    ",
                host: {
                    '[class.vertical]': 'vertical',
                },
            }]
    }], function () { return [{ type: ChangeDetectorRef }]; }, { name: [{
            type: Input
        }], value: [{
            type: Input
        }], checked: [{
            type: Input
        }], vertical: [{
            type: Input
        }], label: [{
            type: Input
        }], button: [{
            type: Input
        }], theme: [{
            type: Input
        }], icon: [{
            type: Input
        }], disabled: [{
            type: Input
        }], change: [{
            type: Output
        }] }); })();

function QuickNoteResults_novo_loading_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-loading", 4);
} }
function QuickNoteResults_novo_list_1_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 6);
    ɵɵlistener("click", function QuickNoteResults_novo_list_1_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r7); var ctx_r6 = ɵɵnextContext(2); return ctx_r6.selectMatch($event); })("mouseenter", function QuickNoteResults_novo_list_1_novo_list_item_1_Template_novo_list_item_mouseenter_0_listener() { ɵɵrestoreView(_r7); var match_r5 = ctx.$implicit; var ctx_r8 = ɵɵnextContext(2); return ctx_r8.selectActive(match_r5); });
    ɵɵelementStart(1, "item-content");
    ɵɵelement(2, "p", 7);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var match_r5 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", match_r5 === ctx_r4.activeMatch);
    ɵɵadvance(2);
    ɵɵproperty("innerHtml", ctx_r4.highlight(match_r5.label, ctx_r4.term), ɵɵsanitizeHtml);
} }
function QuickNoteResults_novo_list_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list");
    ɵɵtemplate(1, QuickNoteResults_novo_list_1_novo_list_item_1_Template, 3, 3, "novo-list-item", 5);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.matches);
} }
function QuickNoteResults_p_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.quickNoteError);
} }
function QuickNoteResults_p_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "p", 9);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labels.quickNoteEmpty);
} }
var QuickNoteResults = /** @class */ (function (_super) {
    __extends(QuickNoteResults, _super);
    function QuickNoteResults(element, labels, ref) {
        var _this = _super.call(this, element, labels, ref) || this;
        _this.labels = labels;
        // Mode that the quick note is in for tagging
        _this.taggingMode = '';
        return _this;
    }
    Object.defineProperty(QuickNoteResults.prototype, "term", {
        get: function () {
            return this._term;
        },
        set: function (value) {
            var _this = this;
            this._term = value.searchTerm;
            this.taggingMode = value.taggingMode;
            this.hasError = false;
            this.isLoading = true;
            this.search(value, this.taggingMode).subscribe(function (results) {
                _this.matches = _this.isStatic ? _this.filterData(results) : results;
                _this.isLoading = false;
            }, function () {
                _this.hasError = true;
                _this.isLoading = false;
            });
        },
        enumerable: true,
        configurable: true
    });
    QuickNoteResults.prototype.search = function (term, taggingMode) {
        var _this = this;
        var searchCall = this.config.options[taggingMode];
        return from(new Promise(function (resolve, reject) {
            // Check if there is match data
            if (searchCall) {
                // Resolve the data
                if (Array.isArray(searchCall)) {
                    _this.isStatic = true;
                    // Arrays are returned immediately
                    resolve(_this.structureArray(searchCall));
                }
                else if ((searchCall.hasOwnProperty('reject') && searchCall.hasOwnProperty('resolve')) ||
                    Object.getPrototypeOf(searchCall).hasOwnProperty('then')) {
                    _this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall.then(_this.structureArray.bind(_this)).then(resolve, reject);
                }
                else if (typeof searchCall === 'function') {
                    _this.isStatic = false;
                    // Promises (ES6 or Deferred) are resolved whenever they resolve
                    searchCall(term)
                        .then(_this.structureArray.bind(_this))
                        .then(resolve, reject);
                }
                else {
                    // All other kinds of data are rejected
                    reject('The data provided is not an array or a promise');
                    throw new Error('The data provided is not an array or a promise');
                }
            }
            else {
                // No data gets rejected
                reject('error');
            }
        }));
    };
    /**
     * @name structureArray
     * @param collection - the data once getData resolves it
     *
     * @description This function structures an array of nodes into an array of objects with a
     * 'name' field by default.
     */
    QuickNoteResults.prototype.structureArray = function (collection) {
        var _this = this;
        if (collection && (typeof collection[0] === 'string' || typeof collection[0] === 'number')) {
            return collection.map(function (item) {
                return {
                    value: item,
                    label: item,
                };
            });
        }
        return collection.map(function (data) {
            var value = _this.config.field ? data[_this.config.field[_this.taggingMode]] : data.value || data;
            var label = _this.config.format ? Helpers.interpolate(_this.config.format[_this.taggingMode], data) : data.label || String(value);
            return { value: value, label: label, data: data };
        });
    };
    /**
     * @name selectMatch
     * @param event
     *
     * @description
     */
    QuickNoteResults.prototype.selectMatch = function (event) {
        if (event) {
            event.stopPropagation();
            event.preventDefault();
        }
        var selected = this.activeMatch;
        if (selected) {
            this.parent.onSelected(this.taggingMode, selected);
            this.parent.hideResults();
        }
        return false;
    };
    QuickNoteResults.ɵfac = function QuickNoteResults_Factory(t) { return new (t || QuickNoteResults)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    QuickNoteResults.ɵcmp = ɵɵdefineComponent({ type: QuickNoteResults, selectors: [["quick-note-results"]], hostAttrs: [1, "active"], features: [ɵɵInheritDefinitionFeature], decls: 4, vars: 4, consts: [["theme", "line", 4, "ngIf"], [4, "ngIf"], ["class", "picker-error", 4, "ngIf"], ["class", "picker-null", 4, "ngIf"], ["theme", "line"], [3, "active", "click", "mouseenter", 4, "ngFor", "ngForOf"], [3, "click", "mouseenter"], [3, "innerHtml"], [1, "picker-error"], [1, "picker-null"]], template: function QuickNoteResults_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, QuickNoteResults_novo_loading_0_Template, 1, 0, "novo-loading", 0);
            ɵɵtemplate(1, QuickNoteResults_novo_list_1_Template, 2, 1, "novo-list", 1);
            ɵɵtemplate(2, QuickNoteResults_p_2_Template, 2, 1, "p", 2);
            ɵɵtemplate(3, QuickNoteResults_p_3_Template, 2, 1, "p", 3);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.isLoading && !ctx.matches.length);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.matches.length > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.hasError);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.isLoading && !ctx.matches.length && !ctx.hasError);
        } }, directives: [NgIf, NovoLoadingElement, NovoListElement, NgForOf, NovoListItemElement, NovoItemContentElement], encapsulation: 2 });
    return QuickNoteResults;
}(PickerResults));
/*@__PURE__*/ (function () { ɵsetClassMetadata(QuickNoteResults, [{
        type: Component,
        args: [{
                selector: 'quick-note-results',
                host: {
                    class: 'active',
                },
                template: "\n        <novo-loading theme=\"line\" *ngIf=\"isLoading && !matches.length\"></novo-loading>\n        <novo-list *ngIf=\"matches.length > 0\">\n            <novo-list-item\n                *ngFor=\"let match of matches\"\n                (click)=\"selectMatch($event)\"\n                [class.active]=\"match===activeMatch\"\n                (mouseenter)=\"selectActive(match)\">\n                <item-content>\n                    <p [innerHtml]=\"highlight(match.label, term)\"></p>\n                </item-content>\n            </novo-list-item>\n        </novo-list>\n        <p class=\"picker-error\" *ngIf=\"hasError\">{{ labels.quickNoteError }}</p>\n        <p class=\"picker-null\" *ngIf=\"!isLoading && !matches.length && !hasError\">{{ labels.quickNoteEmpty }}</p>\n    ",
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }, { type: ChangeDetectorRef }]; }, null); })();

var _c0$J = ["wrapper"];
var _c1$p = ["host"];
var _c2$b = ["results"];
// Value accessor for the component (supports ngModel)
var QUICK_NOTE_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return QuickNoteElement; }),
    multi: true,
};
var QuickNoteElement = /** @class */ (function (_super) {
    __extends(QuickNoteElement, _super);
    function QuickNoteElement(zone, element, componentUtils) {
        var _this = _super.call(this, element) || this;
        _this.zone = zone;
        _this.componentUtils = componentUtils;
        _this.startupFocus = false;
        // Emitter for selects
        _this.focus = new EventEmitter();
        _this.blur = new EventEmitter();
        _this.change = new EventEmitter();
        _this.placeholderVisible = false;
        _this._placeholderElement = null;
        _this.onModelChange = function () { };
        _this.onModelTouched = function () { };
        // Bind to the active change event from the OutsideClick
        _this.onActiveChange.subscribe(function (active) {
            if (!active) {
                setTimeout(function () {
                    _this.hideResults();
                });
            }
        });
        return _this;
    }
    QuickNoteElement.prototype.ngOnInit = function () {
        // Make sure we have a proper config
        if (!this.config) {
            throw new Error('No config set for QuickNote!');
        }
        // Make sure that we have triggers
        if (!this.config.triggers) {
            throw new Error('QuickNote config must supply triggers!');
        }
        // Make sure that we have options
        if (!this.config.options) {
            throw new Error('QuickNote config must supply options!');
        }
        // Allow for callers to use a custom results template class in the config
        this.resultsComponent = this.config.resultsTemplate || QuickNoteResults;
    };
    QuickNoteElement.prototype.ngOnDestroy = function () {
        var _this = this;
        // Tear down the CKEditor instance
        if (this.ckeInstance) {
            this.ckeInstance.focusManager.blur(true); // Remove focus from editor
            setTimeout(function () {
                _this.ckeInstance.removeAllListeners();
                CKEDITOR.instances[_this.ckeInstance.name].destroy();
                _this.ckeInstance.destroy();
                _this.ckeInstance = null;
            });
        }
    };
    /**
     * Connect to key/mouse events from CKEditor after the editor has been initialized
     */
    QuickNoteElement.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!CKEDITOR) {
            console.error('Make sure to include CKEditor sources in your dependencies!');
            return;
        }
        // Replace the textarea with an instance of CKEditor
        this.ckeInstance = CKEDITOR.replace(this.host.nativeElement, this.getCKEditorConfig());
        // Set initial value of the note in the editor
        this.writeValue(this.model);
        // Connect to the key event in CKEditor for showing results dropdown
        this.ckeInstance.on('key', function (event) {
            if (!_this.onKey(event.data.domEvent.$)) {
                event.cancel();
            }
        });
        // Connect to the change event in CKEditor for debouncing user modifications
        this.ckeInstance.on('change', function () {
            // Debounce update
            if (_this.debounceTimeout) {
                clearTimeout(_this.debounceTimeout);
            }
            _this.debounceTimeout = setTimeout(function () {
                // Run within the context of this angular element since we don't need to cancel event
                _this.zone.run(function () {
                    _this.onValueChange();
                });
                _this.debounceTimeout = null;
            }, 250);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('blur', function (event) {
            _this.showPlaceholder();
            _this.blur.emit(event);
        });
        // Propagate blur events from CKEditor to the Element's listeners
        this.ckeInstance.on('focus', function (event) {
            _this.hidePlaceholder();
            _this.focus.emit(event);
        });
        // Show placeholder if the note is empty, after the editor is instantiated
        this.ckeInstance.on('instanceReady', function (event) {
            _this.showPlaceholder();
            // Set editor to readOnly
            if (_this.config.readOnly) {
                _this.ckeInstance.setReadOnly(_this.config.readOnly);
            }
        });
    };
    // Set touched on blur
    QuickNoteElement.prototype.onTouched = function (event) {
        this.onModelTouched();
    };
    /**
     * Handles setting the model and the view from the outside caller or the user's typing
     *
     * @param model A model that has a note (html content) and references (array of objects)
     */
    QuickNoteElement.prototype.writeValue = function (model) {
        // Set value of the model
        if (model && (model.references || model.note)) {
            this.model = {
                note: model.note || '',
                references: model.references || {},
            };
        }
        else {
            this.model = {
                note: model,
                references: {},
            };
        }
        // Set the note html value in the editor
        if (this.ckeInstance) {
            this.ckeInstance.setData(this.model.note);
        }
    };
    QuickNoteElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    QuickNoteElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * If a renderer is not provided, the QuickNote will default to using this one, an anchor tag with no href
     */
    QuickNoteElement.defaultRenderer = function (symbol, item) {
        return "<a>" + symbol + item.label + "</a>";
    };
    /**
     * Returns the renderer for a given tagging mode if it exists in the config, otherwise the default.
     */
    QuickNoteElement.prototype.getRenderer = function (taggingMode) {
        return this.config.renderer ? this.config.renderer[taggingMode] : QuickNoteElement.defaultRenderer;
    };
    /**
     * Called every time a keystroke is made in the editor. Listens for particular keys (e.g. UP arrow, ESC, etc.)
     * to handle certain behaviors of the picker.
     *
     * Runs within the context of the CKEditor, so actions that affect the view have to be run back inside of the
     * Angular zone of this class.
     *
     * @param event The key press event
     * @return true to allow the event to occur, false to cancel the event
     */
    QuickNoteElement.prototype.onKey = function (event) {
        var _this = this;
        if (event.key) {
            if (this.quickNoteResults) {
                // Hide results on escape key
                if (event.keyCode === KeyCodes.ESC) {
                    this.zone.run(function () {
                        _this.hideResults();
                    });
                    return false;
                }
                // Navigation inside the results
                if (event.keyCode === KeyCodes.UP) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.prevActiveMatch();
                    });
                    return false;
                }
                if (event.keyCode === KeyCodes.DOWN) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.nextActiveMatch();
                    });
                    return false;
                }
                if (event.keyCode === KeyCodes.ENTER) {
                    this.zone.run(function () {
                        _this.quickNoteResults.instance.selectActiveMatch();
                    });
                    return false;
                }
            }
            else {
                // Loop through all triggers and turn on tagging mode if the user just pressed a trigger character
                var triggers_1 = this.config.triggers || {};
                Object.keys(triggers_1).forEach(function (key) {
                    var trigger = triggers_1[key] || {};
                    if (event.key === trigger) {
                        _this.isTagging = true;
                        _this.taggingMode = key;
                    }
                });
            }
        }
        return true;
    };
    /**
     * Debounced method that is run in the proper Angular context when the user has modified the CKEditor.
     * After the value has been updated in CKEditor, this will propagate that change to the model and listeners.
     */
    QuickNoteElement.prototype.onValueChange = function () {
        // Get the html text in CKEditor
        var value = this.ckeInstance.getData();
        // Remove empty 'ZERO WIDTH SPACE' characters that can get added erroneously by the editor
        var regex = new RegExp(String.fromCharCode(8203), 'g');
        value = value.replace(regex, '');
        // Make sure that any references in the model are still valid
        this.validateReferences();
        // Possibly show results if the user has entered a search term
        this.showResults();
        // Propagate change to ngModel for form validation, and send null if the note is empty
        var newModel = null;
        if (value) {
            newModel = {
                note: value,
                references: this.model.references,
            };
        }
        // Inform listeners to the ngModel change event that something has changed
        this.onModelChange(newModel);
        // Inform listeners of the `@Output() change` event that the model has been updated
        this.change.emit(newModel);
        // Inform listeners to the ngModel touched event that something has changed
        this.onTouched();
    };
    /**
     * Creates an instance of the results (called popup) and adds all the bindings to that instance.
     */
    QuickNoteElement.prototype.showResults = function () {
        if (this.isTagging) {
            var searchTerm = this.getSearchTerm();
            if (searchTerm.length) {
                // Update Matches
                if (this.quickNoteResults) {
                    // Update existing list
                    this.quickNoteResults.instance.term = {
                        searchTerm: searchTerm,
                        taggingMode: this.taggingMode,
                    };
                }
                else {
                    // Create the results DOM element
                    this.quickNoteResults = this.componentUtils.append(this.resultsComponent, this.results);
                    this.quickNoteResults.instance.parent = this;
                    this.quickNoteResults.instance.config = this.config;
                    this.quickNoteResults.instance.term = {
                        searchTerm: searchTerm,
                        taggingMode: this.taggingMode,
                    };
                    this.positionResultsDropdown();
                }
            }
            else if (this.quickNoteResults) {
                this.quickNoteResults.destroy();
                this.quickNoteResults = null;
            }
            // Tell the OutsideClick base class to start listening for an outside clicks
            this.toggleActive(null, true);
        }
    };
    /**
     * Deletes the picker results from the DOM.
     */
    QuickNoteElement.prototype.hideResults = function () {
        this.isTagging = false;
        if (this.quickNoteResults) {
            this.quickNoteResults.destroy();
            this.quickNoteResults = null;
        }
    };
    /**
     * Handles the selection from the QuickNoteResults Component. Called by the QuickNoteResults component on it's
     * parent (this element).
     *
     * @param taggingMode - type of tags we are looking for
     * @param selected - selected object from the picker that has a label and value
     */
    QuickNoteElement.prototype.onSelected = function (taggingMode, selected) {
        // Turn off tagging
        this.isTagging = false;
        // Replace searchTerm with link
        var symbol = this.config.triggers[taggingMode];
        var renderer = this.getRenderer(taggingMode);
        var renderedText = renderer(symbol, selected);
        this.replaceWordAtCursor(renderedText);
        // Add the new reference, if it doesn't already exist
        this.model.references = this.model.references || {};
        this.model.references[taggingMode] = this.model.references[taggingMode] || [];
        var matchingItems = this.model.references[taggingMode].filter(function (item) { return JSON.stringify(item) === JSON.stringify(selected); });
        if (matchingItems.length === 0) {
            this.model.references[taggingMode].push(selected);
        }
        // Update the quick note with the changes due to the user's selection of an item in the dropdown
        this.onValueChange();
    };
    /**
     * Convenience method that gets the current word that the cursor is on, minus the tag.
     * Also, trims any whitespace before/after the term to aid in searching.
     */
    QuickNoteElement.prototype.getSearchTerm = function () {
        var word = this.getWordAtCursor().trim();
        if (this.isTagging) {
            var symbol = this.config.triggers[this.taggingMode];
            if (!word.includes(symbol)) {
                this.hideResults();
                return '';
            }
            word = word.slice(word.indexOf(symbol) + symbol.length);
        }
        return word;
    };
    /**
     * Gets the current word that the cursor is on CKEditor. Current word starts at the beginning of the line or a
     * tag character if we are in tagging mode. Current word ends at the end of the line or an empty space.
     *
     * @returns plain text string (removes all html formatting)
     */
    QuickNoteElement.prototype.getWordAtCursor = function () {
        var range = this.ckeInstance.getSelection().getRanges()[0];
        var start = range.startContainer;
        if (start.type === CKEDITOR.NODE_TEXT && range.startOffset) {
            var text = start.getText();
            var symbol = this.config.triggers[this.taggingMode];
            var wordStart = text.lastIndexOf(symbol, range.startOffset - 1);
            if (wordStart > 0) {
                var beforeSymbol = text.charAt(wordStart - 1);
                // We don't want to trigger the lookup call unless the symbol was preceded by whitespace
                if (beforeSymbol !== '\u200B' && /\S/.test(beforeSymbol)) {
                    return '';
                }
            }
            else if (start.hasPrevious() && /\S$/.test(start.getPrevious().getText())) {
                // When wordStart is <= 0, we need to check the previous node's text to see if it ended with whitespace or not
                return '';
            }
            var wordEnd = text.indexOf(' ', range.startOffset + 1);
            if (wordStart === -1) {
                wordStart = 0;
            }
            if (wordEnd === -1) {
                wordEnd = text.length;
            }
            return text.substring(wordStart, wordEnd);
        }
        // Selection starts at the 0 index of the text node or there's no previous text node in contents
        return '';
    };
    /**
     * Replaces the word that the user is on with the given html.
     *
     * CKEditor gives us access to the current line of html in the editor, so we replace the content of
     * the line, replacing only the current word.
     */
    QuickNoteElement.prototype.replaceWordAtCursor = function (newWord) {
        var originalWord = this.getWordAtCursor().trim();
        var range = this.ckeInstance.getSelection().getRanges()[0];
        var start = range.startContainer;
        var parentNode = start.getParent();
        if (start.type === CKEDITOR.NODE_TEXT && parentNode) {
            var line = parentNode.getHtml();
            var index = line.lastIndexOf(originalWord);
            if (index >= 0) {
                // Add a space after the replaced word so that multiple references can be added back to back
                var newLine = line.substring(0, index) + newWord + ' ' + line.substring(index + originalWord.length);
                parentNode.setHtml(newLine);
                // Place selection at the end of the line
                range.moveToPosition(parentNode, CKEDITOR.POSITION_BEFORE_END);
                this.ckeInstance.getSelection().selectRanges([range]);
            }
        }
    };
    /**
     * Returns current references, minus any from the model that have been removed from the editor.
     */
    QuickNoteElement.prototype.validateReferences = function () {
        var _this = this;
        var html = this.ckeInstance.document.getBody().getHtml();
        // CKEditor stopped supporting the config.forceSimpleAmpersand setting, so we have to convert '&amp;' to '&'
        // when we pull html from the editor - see: https://dev.ckeditor.com/ticket/13723
        var ampRegex = new RegExp('&amp;', 'g');
        html = html.replace(ampRegex, '&');
        Object.keys(this.model.references).forEach(function (taggingMode) {
            var array = _this.model.references[taggingMode] || [];
            var symbol = _this.config.triggers[taggingMode];
            var renderer = _this.getRenderer(taggingMode);
            _this.model.references[taggingMode] = array.filter(function (item) {
                var renderedText = renderer(symbol, item);
                return html.includes(renderedText);
            });
            // If no references, then delete the key
            if (_this.model.references[taggingMode].length === 0) {
                delete _this.model.references[taggingMode];
            }
        });
    };
    /**
     * Configures the CKEditor for QuickNote functionality.
     *
     * Sets the height of the CKEditor dynamically to the height of the wrapper upon initialization.
     * Removes the toolbar on the bottom and configures a slimmed down version of the toolbar.
     * Removes plugins and turns off setting to allow browser based spell checking.
     */
    QuickNoteElement.prototype.getCKEditorConfig = function () {
        // Use the height of the wrapper element to set the initial height of the editor, then
        // set it to 100% to allow the editor to resize using the grippy.
        var editorHeight = this.wrapper.nativeElement.clientHeight - QuickNoteElement.TOOLBAR_HEIGHT;
        this.wrapper.nativeElement.style.setProperty('height', '100%');
        return {
            enterMode: CKEDITOR.ENTER_BR,
            shiftEnterMode: CKEDITOR.ENTER_P,
            disableNativeSpellChecker: false,
            height: editorHeight,
            startupFocus: this.startupFocus,
            removePlugins: 'liststyle,tabletools,contextmenu',
            toolbar: [
                {
                    name: 'basicstyles',
                    items: [
                        'Styles',
                        'FontSize',
                        'Bold',
                        'Italic',
                        'Underline',
                        'TextColor',
                        '-',
                        'NumberedList',
                        'BulletedList',
                        'Outdent',
                        'Indent',
                        'Link',
                    ],
                },
            ],
        };
    };
    /**
     * Returns the current screen position of the cursor in CKEditor, accounting for any scrolling in the editor.
     */
    QuickNoteElement.prototype.getCursorPosition = function () {
        var range = this.ckeInstance.getSelection().getRanges()[0];
        var parentElement = range.startContainer.$.parentElement;
        var editorElement = this.ckeInstance.editable().$;
        // Since the editor is a text node in the DOM that does not know about it's position, a temporary element has to
        // be inserted in order to locate the cursor position.
        var cursorElement = document.createElement('img');
        cursorElement.setAttribute('src', 'null');
        cursorElement.setAttribute('width', '0');
        cursorElement.setAttribute('height', '0');
        parentElement.appendChild(cursorElement);
        var cursorPosition = {
            top: cursorElement.offsetTop - editorElement.scrollTop,
            left: cursorElement.offsetLeft - editorElement.scrollLeft,
        };
        cursorElement.remove();
        return cursorPosition;
    };
    /**
     * Positions the results dropdown based on the location of the cursor in the text field
     */
    QuickNoteElement.prototype.positionResultsDropdown = function () {
        var MIN_MARGIN_TOP = QuickNoteElement.TOOLBAR_HEIGHT * 2;
        var MAX_MARGIN_TOP = this.getContentHeight() + QuickNoteElement.TOOLBAR_HEIGHT;
        var cursorPosition = this.getCursorPosition();
        var marginTop = cursorPosition.top + QuickNoteElement.TOOLBAR_HEIGHT;
        // Check that the margin is within the visible bounds
        marginTop = Math.max(marginTop, MIN_MARGIN_TOP);
        marginTop = Math.min(marginTop, MAX_MARGIN_TOP);
        // Set the margin-top of the dropdown
        this.quickNoteResults.instance.element.nativeElement.style.setProperty('margin-top', marginTop + 'px');
    };
    /**
     * Returns the height in pixels of the content area - the text that the user has entered.
     */
    QuickNoteElement.prototype.getContentHeight = function () {
        var contentHeight = 0;
        if (this.ckeInstance.ui &&
            this.ckeInstance.ui.contentsElement &&
            this.ckeInstance.ui.contentsElement.$ &&
            this.ckeInstance.ui.contentsElement.$.style) {
            var cssText = this.ckeInstance.ui.contentsElement.$.style.cssText;
            if (cssText.indexOf('height: ') !== -1) {
                var height = cssText.split('height: ')[1];
                height = height.split('px')[0];
                contentHeight = parseInt(height, 10);
            }
        }
        return contentHeight;
    };
    /**
     * Show the placeholder text if the editor is empty
     */
    QuickNoteElement.prototype.showPlaceholder = function () {
        if (!this.ckeInstance.getData() && !this.startupFocus) {
            this.ckeInstance
                .editable()
                .getParent()
                .$.appendChild(this.placeholderElement);
            this.placeholderVisible = true;
        }
    };
    /**
     * Hide the placeholder text by removing the placeholder element from the DOM
     */
    QuickNoteElement.prototype.hidePlaceholder = function () {
        if (this.placeholderVisible) {
            this.ckeInstance
                .editable()
                .getParent()
                .$.removeChild(this.placeholderElement);
            this.placeholderVisible = false;
        }
    };
    Object.defineProperty(QuickNoteElement.prototype, "placeholderElement", {
        /**
         * Get or create the single placeholder object that is constructed only when needed.
         */
        get: function () {
            if (!this._placeholderElement) {
                this._placeholderElement = document.createElement('div');
                this._placeholderElement.className = 'placeholder';
                this._placeholderElement.style.cssText =
                    'margin: 20px; color: #AAAAAA; font-family: sans-serif; font-size: 13px; line-height: 20px; position: absolute; top: 0';
                this._placeholderElement.textContent = this.placeholder;
            }
            return this._placeholderElement;
        },
        enumerable: true,
        configurable: true
    });
    QuickNoteElement.TOOLBAR_HEIGHT = 40; // in pixels - configured by stylesheet
    QuickNoteElement.ɵfac = function QuickNoteElement_Factory(t) { return new (t || QuickNoteElement)(ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils)); };
    QuickNoteElement.ɵcmp = ɵɵdefineComponent({ type: QuickNoteElement, selectors: [["novo-quick-note"]], viewQuery: function QuickNoteElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(_c0$J, true);
            ɵɵstaticViewQuery(_c1$p, true);
            ɵɵstaticViewQuery(_c2$b, true, ViewContainerRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.wrapper = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.host = _t.first);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.results = _t.first);
        } }, inputs: { config: "config", startupFocus: "startupFocus", placeholder: "placeholder" }, outputs: { focus: "focus", blur: "blur", change: "change" }, features: [ɵɵProvidersFeature([QUICK_NOTE_VALUE_ACCESSOR]), ɵɵInheritDefinitionFeature], decls: 6, vars: 0, consts: [[1, "quick-note-wrapper"], ["wrapper", ""], ["host", ""], ["results", ""]], template: function QuickNoteElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0, 1);
            ɵɵelement(2, "textarea", null, 2);
            ɵɵelement(4, "span", null, 3);
            ɵɵelementEnd();
        } }, encapsulation: 2 });
    return QuickNoteElement;
}(OutsideClick));
/*@__PURE__*/ (function () { ɵsetClassMetadata(QuickNoteElement, [{
        type: Component,
        args: [{
                selector: 'novo-quick-note',
                providers: [QUICK_NOTE_VALUE_ACCESSOR],
                template: "\n    <div class=\"quick-note-wrapper\" #wrapper><textarea #host></textarea> <span #results></span></div>\n  ",
            }]
    }], function () { return [{ type: NgZone }, { type: ElementRef }, { type: ComponentUtils }]; }, { wrapper: [{
            type: ViewChild,
            args: ['wrapper', { static: true }]
        }], host: [{
            type: ViewChild,
            args: ['host', { static: true }]
        }], results: [{
            type: ViewChild,
            args: ['results', { read: ViewContainerRef, static: true }]
        }], config: [{
            type: Input
        }], startupFocus: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], change: [{
            type: Output
        }] }); })();

function NovoControlTemplates_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var form_r18 = ctx.form;
    var control_r19 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(form_r18.value[control_r19.key]);
} }
function NovoControlTemplates_ng_template_1_input_1_Template(rf, ctx) { if (rf & 1) {
    var _r31 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 24);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_1_input_1_Template_input_input_0_listener($event) { ɵɵrestoreView(_r31); var methods_r23 = ɵɵnextContext().methods; return methods_r23.emitChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_1_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r31); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_1_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r31); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r20 = ɵɵnextContext().$implicit;
    ɵɵproperty("textMask", control_r20.maskOptions)("formControlName", control_r20.key)("id", control_r20.key)("type", control_r20 == null ? null : control_r20.type)("placeholder", control_r20 == null ? null : control_r20.placeholder);
} }
function NovoControlTemplates_ng_template_1_input_2_Template(rf, ctx) { if (rf & 1) {
    var _r39 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 25);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_1_input_2_Template_input_input_0_listener($event) { ɵɵrestoreView(_r39); var methods_r23 = ɵɵnextContext().methods; return methods_r23.emitChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_2_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r39); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_2_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r39); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r45 = ɵɵnextContext();
    var errors_r22 = ctx_r45.errors;
    var control_r20 = ctx_r45.$implicit;
    ɵɵclassProp("maxlength-error", errors_r22 == null ? null : errors_r22.maxlength);
    ɵɵproperty("formControlName", control_r20.key)("id", control_r20.key)("type", control_r20 == null ? null : control_r20.type)("placeholder", control_r20 == null ? null : control_r20.placeholder)("maxlength", control_r20 == null ? null : control_r20.maxlength);
} }
function NovoControlTemplates_ng_template_1_input_3_Template(rf, ctx) { if (rf & 1) {
    var _r48 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 26, 27);
    ɵɵlistener("keydown", function NovoControlTemplates_ng_template_1_input_3_Template_input_keydown_0_listener($event) { ɵɵrestoreView(_r48); var methods_r23 = ɵɵnextContext().methods; return methods_r23.restrictKeys($event); })("input", function NovoControlTemplates_ng_template_1_input_3_Template_input_input_0_listener($event) { ɵɵrestoreView(_r48); var methods_r23 = ɵɵnextContext().methods; return methods_r23.emitChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_3_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r48); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_3_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r48); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleBlur($event); })("mousewheel", function NovoControlTemplates_ng_template_1_input_3_Template_input_mousewheel_0_listener() { ɵɵrestoreView(_r48); var _r46 = ɵɵreference(1); return _r46.blur(); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r57 = ɵɵnextContext();
    var errors_r22 = ctx_r57.errors;
    var control_r20 = ctx_r57.$implicit;
    ɵɵclassProp("maxlength-error", errors_r22 == null ? null : errors_r22.maxlength);
    ɵɵproperty("formControlName", control_r20.key)("id", control_r20.key)("type", control_r20 == null ? null : control_r20.type)("placeholder", control_r20 == null ? null : control_r20.placeholder)("maxlength", control_r20 == null ? null : control_r20.maxlength);
} }
function NovoControlTemplates_ng_template_1_input_4_Template(rf, ctx) { if (rf & 1) {
    var _r60 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 28, 29);
    ɵɵlistener("keydown", function NovoControlTemplates_ng_template_1_input_4_Template_input_keydown_0_listener($event) { ɵɵrestoreView(_r60); var methods_r23 = ɵɵnextContext().methods; return methods_r23.restrictKeys($event); })("input", function NovoControlTemplates_ng_template_1_input_4_Template_input_input_0_listener($event) { ɵɵrestoreView(_r60); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handlePercentChange($event); })("focus", function NovoControlTemplates_ng_template_1_input_4_Template_input_focus_0_listener($event) { ɵɵrestoreView(_r60); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_1_input_4_Template_input_blur_0_listener($event) { ɵɵrestoreView(_r60); var methods_r23 = ɵɵnextContext().methods; return methods_r23.handleBlur($event); })("mousewheel", function NovoControlTemplates_ng_template_1_input_4_Template_input_mousewheel_0_listener() { ɵɵrestoreView(_r60); var _r58 = ɵɵreference(1); return _r58.blur(); });
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r20 = ɵɵnextContext().$implicit;
    ɵɵproperty("type", control_r20 == null ? null : control_r20.type)("placeholder", control_r20 == null ? null : control_r20.placeholder)("value", control_r20 == null ? null : control_r20.percentValue);
} }
function NovoControlTemplates_ng_template_1_label_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 30);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r20 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(control_r20.currencyFormat);
} }
function NovoControlTemplates_ng_template_1_label_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "label", 30);
    ɵɵtext(1, "%");
    ɵɵelementEnd();
} }
function NovoControlTemplates_ng_template_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 18);
    ɵɵtemplate(1, NovoControlTemplates_ng_template_1_input_1_Template, 1, 5, "input", 19);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_1_input_2_Template, 1, 7, "input", 20);
    ɵɵtemplate(3, NovoControlTemplates_ng_template_1_input_3_Template, 2, 7, "input", 21);
    ɵɵtemplate(4, NovoControlTemplates_ng_template_1_input_4_Template, 2, 3, "input", 22);
    ɵɵtemplate(5, NovoControlTemplates_ng_template_1_label_5_Template, 2, 1, "label", 23);
    ɵɵtemplate(6, NovoControlTemplates_ng_template_1_label_6_Template, 2, 0, "label", 23);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r20 = ctx.$implicit;
    var form_r21 = ctx.form;
    ɵɵproperty("formGroup", form_r21)("tooltip", control_r20 == null ? null : control_r20.tooltip)("tooltipPosition", control_r20 == null ? null : control_r20.tooltipPosition)("tooltipSize", control_r20 == null ? null : control_r20.tooltipSize)("tooltipPreline", control_r20 == null ? null : control_r20.tooltipPreline)("removeTooltipArrow", control_r20 == null ? null : control_r20.removeTooltipArrow)("tooltipAutoPosition", control_r20 == null ? null : control_r20.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r20 == null ? null : control_r20.type) !== "number" && (control_r20 == null ? null : control_r20.textMaskEnabled));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r20 == null ? null : control_r20.type) !== "number" && !(control_r20 == null ? null : control_r20.textMaskEnabled));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r20 == null ? null : control_r20.type) === "number" && (control_r20 == null ? null : control_r20.subType) !== "percentage");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r20 == null ? null : control_r20.type) === "number" && (control_r20 == null ? null : control_r20.subType) === "percentage");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r20 == null ? null : control_r20.subType) === "currency");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (control_r20 == null ? null : control_r20.subType) === "percentage");
} }
function NovoControlTemplates_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    var _r76 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 31);
    ɵɵelementStart(1, "textarea", 32);
    ɵɵlistener("input", function NovoControlTemplates_ng_template_2_Template_textarea_input_1_listener($event) { ɵɵrestoreView(_r76); var methods_r74 = ctx.methods; return methods_r74.handleTextAreaInput($event); })("focus", function NovoControlTemplates_ng_template_2_Template_textarea_focus_1_listener($event) { ɵɵrestoreView(_r76); var methods_r74 = ctx.methods; return methods_r74.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_2_Template_textarea_blur_1_listener($event) { ɵɵrestoreView(_r76); var methods_r74 = ctx.methods; return methods_r74.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r71 = ctx.$implicit;
    var form_r72 = ctx.form;
    var errors_r73 = ctx.errors;
    ɵɵproperty("formGroup", form_r72)("tooltip", control_r71 == null ? null : control_r71.tooltip)("tooltipPosition", control_r71 == null ? null : control_r71.tooltipPosition)("tooltipSize", control_r71 == null ? null : control_r71.tooltipSize)("tooltipPreline", control_r71 == null ? null : control_r71.tooltipPreline)("removeTooltipArrow", control_r71 == null ? null : control_r71.removeTooltipArrow)("tooltipAutoPosition", control_r71 == null ? null : control_r71.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵclassProp("maxlength-error", errors_r73 == null ? null : errors_r73.maxlength);
    ɵɵproperty("name", control_r71.key)("placeholder", control_r71.placeholder)("formControlName", control_r71.key)("maxlength", control_r71 == null ? null : control_r71.maxlength);
    ɵɵattribute("id", control_r71.key);
} }
function NovoControlTemplates_ng_template_3_Template(rf, ctx) { if (rf & 1) {
    var _r84 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-editor", 34);
    ɵɵlistener("focus", function NovoControlTemplates_ng_template_3_Template_novo_editor_focus_1_listener($event) { ɵɵrestoreView(_r84); var methods_r82 = ctx.methods; return methods_r82.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_3_Template_novo_editor_blur_1_listener($event) { ɵɵrestoreView(_r84); var methods_r82 = ctx.methods; return methods_r82.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r79 = ctx.$implicit;
    var form_r80 = ctx.form;
    ɵɵproperty("formGroup", form_r80);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r79.key)("formControlName", control_r79.key)("startupFocus", control_r79.startupFocus)("minimal", control_r79.minimal)("fileBrowserImageUploadUrl", control_r79.fileBrowserImageUploadUrl)("config", control_r79.config);
} }
function NovoControlTemplates_ng_template_4_Template(rf, ctx) { if (rf & 1) {
    var _r91 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-ace-editor", 35);
    ɵɵlistener("focus", function NovoControlTemplates_ng_template_4_Template_novo_ace_editor_focus_1_listener($event) { ɵɵrestoreView(_r91); var methods_r89 = ctx.methods; return methods_r89.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_4_Template_novo_ace_editor_blur_1_listener($event) { ɵɵrestoreView(_r91); var methods_r89 = ctx.methods; return methods_r89.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r86 = ctx.$implicit;
    var form_r87 = ctx.form;
    ɵɵproperty("formGroup", form_r87);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r86.key)("formControlName", control_r86.key);
} }
function NovoControlTemplates_ng_template_5_option_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "option", 39);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r93 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(control_r93.placeholder);
} }
function NovoControlTemplates_ng_template_5_option_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "option", 40);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var opt_r100 = ctx.$implicit;
    ɵɵproperty("value", opt_r100.key);
    ɵɵadvance(1);
    ɵɵtextInterpolate(opt_r100.value);
} }
function NovoControlTemplates_ng_template_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "select", 36);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_5_option_2_Template, 2, 1, "option", 37);
    ɵɵtemplate(3, NovoControlTemplates_ng_template_5_option_3_Template, 2, 2, "option", 38);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r93 = ctx.$implicit;
    var form_r94 = ctx.form;
    ɵɵproperty("formGroup", form_r94);
    ɵɵadvance(1);
    ɵɵproperty("id", control_r93.key)("formControlName", control_r93.key)("tooltip", control_r93.tooltip)("tooltipPosition", control_r93.tooltipPosition)("tooltipSize", control_r93 == null ? null : control_r93.tooltipSize)("tooltipPreline", control_r93 == null ? null : control_r93.tooltipPreline)("removeTooltipArrow", control_r93 == null ? null : control_r93.removeTooltipArrow)("tooltipAutoPosition", control_r93 == null ? null : control_r93.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r93.placeholder);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", control_r93.options);
} }
function NovoControlTemplates_ng_template_6_Template(rf, ctx) { if (rf & 1) {
    var _r106 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-file-input", 41);
    ɵɵlistener("edit", function NovoControlTemplates_ng_template_6_Template_novo_file_input_edit_1_listener($event) { ɵɵrestoreView(_r106); var methods_r104 = ctx.methods; return methods_r104.handleEdit($event); })("save", function NovoControlTemplates_ng_template_6_Template_novo_file_input_save_1_listener($event) { ɵɵrestoreView(_r106); var methods_r104 = ctx.methods; return methods_r104.handleSave($event); })("delete", function NovoControlTemplates_ng_template_6_Template_novo_file_input_delete_1_listener($event) { ɵɵrestoreView(_r106); var methods_r104 = ctx.methods; return methods_r104.handleDelete($event); })("upload", function NovoControlTemplates_ng_template_6_Template_novo_file_input_upload_1_listener($event) { ɵɵrestoreView(_r106); var methods_r104 = ctx.methods; return methods_r104.handleUpload($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r101 = ctx.$implicit;
    var form_r102 = ctx.form;
    ɵɵproperty("formGroup", form_r102);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r101.key)("id", control_r101.key)("name", control_r101.key)("placeholder", control_r101.placeholder)("value", control_r101.value)("multiple", control_r101.multiple)("layoutOptions", control_r101.layoutOptions)("tooltip", control_r101.tooltip)("tooltipPosition", control_r101.tooltipPosition)("tooltipSize", control_r101 == null ? null : control_r101.tooltipSize)("tooltipPreline", control_r101 == null ? null : control_r101.tooltipPreline)("removeTooltipArrow", control_r101 == null ? null : control_r101.removeTooltipArrow)("tooltipAutoPosition", control_r101 == null ? null : control_r101.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_7_Template(rf, ctx) { if (rf & 1) {
    var _r115 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-tiles", 42);
    ɵɵlistener("onChange", function NovoControlTemplates_ng_template_7_Template_novo_tiles_onChange_1_listener($event) { ɵɵrestoreView(_r115); var methods_r113 = ctx.methods; return methods_r113.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r110 = ctx.$implicit;
    var form_r111 = ctx.form;
    ɵɵproperty("formGroup", form_r111);
    ɵɵadvance(1);
    ɵɵproperty("options", control_r110.options)("formControlName", control_r110.key)("tooltip", control_r110.tooltip)("tooltipPosition", control_r110.tooltipPosition)("tooltipSize", control_r110 == null ? null : control_r110.tooltipSize)("tooltipPreline", control_r110 == null ? null : control_r110.tooltipPreline)("removeTooltipArrow", control_r110 == null ? null : control_r110.removeTooltipArrow)("tooltipAutoPosition", control_r110 == null ? null : control_r110.tooltipAutoPosition)("controlDisabled", control_r110.disabled);
} }
function NovoControlTemplates_ng_template_8_novo_picker_1_Template(rf, ctx) { if (rf & 1) {
    var _r124 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-picker", 47);
    ɵɵlistener("select", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_select_0_listener($event) { ɵɵrestoreView(_r124); var methods_r119 = ɵɵnextContext().methods; return methods_r119.modelChange($event); })("changed", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_changed_0_listener($event) { ɵɵrestoreView(_r124); var methods_r119 = ɵɵnextContext().methods; return methods_r119.modelChangeWithRaw($event); })("typing", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_typing_0_listener($event) { ɵɵrestoreView(_r124); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleTyping($event); })("focus", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_focus_0_listener($event) { ɵɵrestoreView(_r124); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_8_novo_picker_1_Template_novo_picker_blur_0_listener($event) { ɵɵrestoreView(_r124); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r116 = ɵɵnextContext().$implicit;
    ɵɵproperty("config", control_r116.config)("formControlName", control_r116.key)("placeholder", control_r116.placeholder)("parentScrollSelector", control_r116.parentScrollSelector)("tooltip", control_r116.tooltip)("tooltipPosition", control_r116.tooltipPosition)("tooltipSize", control_r116 == null ? null : control_r116.tooltipSize)("tooltipPreline", control_r116 == null ? null : control_r116.tooltipPreline)("removeTooltipArrow", control_r116 == null ? null : control_r116.removeTooltipArrow)("tooltipAutoPosition", control_r116 == null ? null : control_r116.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_8_novo_chips_2_Template(rf, ctx) { if (rf & 1) {
    var _r136 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-chips", 48);
    ɵɵlistener("changed", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_changed_0_listener($event) { ɵɵrestoreView(_r136); var methods_r119 = ɵɵnextContext().methods; return methods_r119.modelChangeWithRaw($event); })("typing", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_typing_0_listener($event) { ɵɵrestoreView(_r136); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleTyping($event); })("focus", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_focus_0_listener($event) { ɵɵrestoreView(_r136); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_8_novo_chips_2_Template_novo_chips_blur_0_listener($event) { ɵɵrestoreView(_r136); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r116 = ɵɵnextContext().$implicit;
    ɵɵproperty("source", control_r116.config)("type", control_r116.config.type)("formControlName", control_r116.key)("placeholder", control_r116.placeholder)("maxlength", control_r116 == null ? null : control_r116.maxlength)("closeOnSelect", control_r116.closeOnSelect)("tooltip", control_r116.tooltip)("tooltipPosition", control_r116.tooltipPosition)("tooltipSize", control_r116 == null ? null : control_r116.tooltipSize)("tooltipPreline", control_r116 == null ? null : control_r116.tooltipPreline)("removeTooltipArrow", control_r116 == null ? null : control_r116.removeTooltipArrow)("tooltipAutoPosition", control_r116 == null ? null : control_r116.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template(rf, ctx) { if (rf & 1) {
    var _r146 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-row-chips", 49);
    ɵɵlistener("changed", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_changed_0_listener($event) { ɵɵrestoreView(_r146); var methods_r119 = ɵɵnextContext().methods; return methods_r119.modelChangeWithRaw($event); })("typing", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_typing_0_listener($event) { ɵɵrestoreView(_r146); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleTyping($event); })("focus", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_focus_0_listener($event) { ɵɵrestoreView(_r146); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleFocus($event); })("blur", function NovoControlTemplates_ng_template_8_novo_row_chips_3_Template_novo_row_chips_blur_0_listener($event) { ɵɵrestoreView(_r146); var methods_r119 = ɵɵnextContext().methods; return methods_r119.handleBlur($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r116 = ɵɵnextContext().$implicit;
    ɵɵproperty("source", control_r116.config)("type", control_r116.config.type)("formControlName", control_r116.key)("placeholder", control_r116.placeholder)("closeOnSelect", control_r116.closeOnSelect)("tooltip", control_r116.tooltip)("tooltipPosition", control_r116.tooltipPosition)("tooltipSize", control_r116 == null ? null : control_r116.tooltipSize)("tooltipPreline", control_r116 == null ? null : control_r116.tooltipPreline)("removeTooltipArrow", control_r116 == null ? null : control_r116.removeTooltipArrow)("tooltipAutoPosition", control_r116 == null ? null : control_r116.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 43);
    ɵɵtemplate(1, NovoControlTemplates_ng_template_8_novo_picker_1_Template, 1, 10, "novo-picker", 44);
    ɵɵtemplate(2, NovoControlTemplates_ng_template_8_novo_chips_2_Template, 1, 12, "novo-chips", 45);
    ɵɵtemplate(3, NovoControlTemplates_ng_template_8_novo_row_chips_3_Template, 1, 11, "novo-row-chips", 46);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r116 = ctx.$implicit;
    var form_r117 = ctx.form;
    ɵɵproperty("formGroup", form_r117);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !control_r116.multiple);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r116.multiple && !control_r116.config.columns);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r116.multiple && control_r116.config.columns);
} }
function NovoControlTemplates_ng_template_9_Template(rf, ctx) { if (rf & 1) {
    var _r160 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-select", 50);
    ɵɵlistener("onSelect", function NovoControlTemplates_ng_template_9_Template_novo_select_onSelect_1_listener($event) { ɵɵrestoreView(_r160); var methods_r158 = ctx.methods; return methods_r158.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r155 = ctx.$implicit;
    var form_r156 = ctx.form;
    ɵɵproperty("formGroup", form_r156);
    ɵɵadvance(1);
    ɵɵproperty("options", control_r155.options)("headerConfig", control_r155.headerConfig)("placeholder", control_r155.placeholder)("formControlName", control_r155.key)("tooltip", control_r155.tooltip)("tooltipPosition", control_r155.tooltipPosition)("tooltipSize", control_r155 == null ? null : control_r155.tooltipSize)("tooltipPreline", control_r155 == null ? null : control_r155.tooltipPreline)("removeTooltipArrow", control_r155 == null ? null : control_r155.removeTooltipArrow)("tooltipAutoPosition", control_r155 == null ? null : control_r155.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_10_novo_radio_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-radio", 52);
} if (rf & 2) {
    var option_r166 = ctx.$implicit;
    var ctx_r167 = ɵɵnextContext();
    var control_r161 = ctx_r167.$implicit;
    var form_r162 = ctx_r167.form;
    ɵɵproperty("name", control_r161.key)("formControlName", control_r161.key)("value", option_r166.value)("label", option_r166.label)("checked", option_r166.value === form_r162.value[control_r161.key] || form_r162.value[control_r161.key] && option_r166.value === form_r162.value[control_r161.key].id)("tooltip", control_r161.tooltip)("tooltipPosition", control_r161.tooltipPosition)("tooltipSize", control_r161 == null ? null : control_r161.tooltipSize)("tooltipPreline", control_r161 == null ? null : control_r161.tooltipPreline)("removeTooltipArrow", control_r161 == null ? null : control_r161.removeTooltipArrow)("tooltipAutoPosition", control_r161 == null ? null : control_r161.tooltipAutoPosition)("button", !!option_r166.icon)("icon", option_r166.icon);
    ɵɵattribute("data-automation-id", control_r161.key + "-" + ((option_r166 == null ? null : option_r166.label) || (option_r166 == null ? null : option_r166.value)));
} }
function NovoControlTemplates_ng_template_10_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 43);
    ɵɵtemplate(1, NovoControlTemplates_ng_template_10_novo_radio_1_Template, 1, 14, "novo-radio", 51);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r161 = ctx.$implicit;
    var form_r162 = ctx.form;
    ɵɵproperty("formGroup", form_r162);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", control_r161.options);
} }
function NovoControlTemplates_ng_template_11_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 53);
    ɵɵelement(1, "novo-time-picker-input", 54);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r168 = ctx.$implicit;
    var form_r169 = ctx.form;
    ɵɵproperty("formGroup", form_r169)("tooltip", control_r168 == null ? null : control_r168.tooltip)("tooltipPosition", control_r168 == null ? null : control_r168.tooltipPosition)("tooltipSize", control_r168 == null ? null : control_r168.tooltipSize)("tooltipPreline", control_r168 == null ? null : control_r168.tooltipPreline)("removeTooltipArrow", control_r168 == null ? null : control_r168.removeTooltipArrow)("tooltipAutoPosition", control_r168 == null ? null : control_r168.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r168.key)("formControlName", control_r168.key)("placeholder", control_r168.placeholder)("military", control_r168.military);
    ɵɵattribute("id", control_r168.key);
} }
function NovoControlTemplates_ng_template_12_Template(rf, ctx) { if (rf & 1) {
    var _r177 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 53);
    ɵɵelementStart(1, "novo-date-picker-input", 55);
    ɵɵlistener("focusEvent", function NovoControlTemplates_ng_template_12_Template_novo_date_picker_input_focusEvent_1_listener($event) { ɵɵrestoreView(_r177); var methods_r175 = ctx.methods; return methods_r175.handleFocus($event); })("blurEvent", function NovoControlTemplates_ng_template_12_Template_novo_date_picker_input_blurEvent_1_listener($event) { ɵɵrestoreView(_r177); var methods_r175 = ctx.methods; return methods_r175.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r172 = ctx.$implicit;
    var form_r173 = ctx.form;
    ɵɵproperty("formGroup", form_r173)("tooltip", control_r172.tooltip)("tooltipPosition", control_r172.tooltipPosition)("tooltipSize", control_r172 == null ? null : control_r172.tooltipSize)("tooltipPreline", control_r172 == null ? null : control_r172.tooltipPreline)("removeTooltipArrow", control_r172 == null ? null : control_r172.removeTooltipArrow)("tooltipAutoPosition", control_r172 == null ? null : control_r172.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r172.key)("formControlName", control_r172.key)("start", control_r172.startDate)("end", control_r172.endDate)("format", control_r172.dateFormat)("allowInvalidDate", control_r172.allowInvalidDate)("textMaskEnabled", control_r172.textMaskEnabled)("placeholder", control_r172.placeholder)("weekStart", control_r172.weekStart);
    ɵɵattribute("id", control_r172.key);
} }
function NovoControlTemplates_ng_template_13_Template(rf, ctx) { if (rf & 1) {
    var _r184 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 53);
    ɵɵelementStart(1, "novo-date-time-picker-input", 56);
    ɵɵlistener("focusEvent", function NovoControlTemplates_ng_template_13_Template_novo_date_time_picker_input_focusEvent_1_listener($event) { ɵɵrestoreView(_r184); var methods_r182 = ctx.methods; return methods_r182.handleFocus($event); })("blurEvent", function NovoControlTemplates_ng_template_13_Template_novo_date_time_picker_input_blurEvent_1_listener($event) { ɵɵrestoreView(_r184); var methods_r182 = ctx.methods; return methods_r182.handleBlur($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r179 = ctx.$implicit;
    var form_r180 = ctx.form;
    ɵɵproperty("formGroup", form_r180)("tooltip", control_r179.tooltip)("tooltipPosition", control_r179.tooltipPosition)("tooltipSize", control_r179 == null ? null : control_r179.tooltipSize)("tooltipPreline", control_r179 == null ? null : control_r179.tooltipPreline)("removeTooltipArrow", control_r179 == null ? null : control_r179.removeTooltipArrow)("tooltipAutoPosition", control_r179 == null ? null : control_r179.tooltipAutoPosition);
    ɵɵadvance(1);
    ɵɵproperty("name", control_r179.key)("formControlName", control_r179.key)("start", control_r179.startDate)("end", control_r179.endDate)("placeholder", control_r179.placeholder)("military", control_r179.military)("weekStart", control_r179.weekStart);
    ɵɵattribute("id", control_r179.key);
} }
function NovoControlTemplates_ng_template_14_Template(rf, ctx) { if (rf & 1) {
    var _r191 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-address", 57);
    ɵɵlistener("change", function NovoControlTemplates_ng_template_14_Template_novo_address_change_1_listener($event) { ɵɵrestoreView(_r191); var methods_r189 = ctx.methods; return methods_r189.handleAddressChange($event); })("focus", function NovoControlTemplates_ng_template_14_Template_novo_address_focus_1_listener($event) { ɵɵrestoreView(_r191); var methods_r189 = ctx.methods; return methods_r189.handleFocus($event.event, $event.field); })("blur", function NovoControlTemplates_ng_template_14_Template_novo_address_blur_1_listener($event) { ɵɵrestoreView(_r191); var methods_r189 = ctx.methods; return methods_r189.handleBlur($event.event, $event.field); })("validityChange", function NovoControlTemplates_ng_template_14_Template_novo_address_validityChange_1_listener() { var methods_r189 = ctx.methods; return methods_r189.updateValidity(); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r186 = ctx.$implicit;
    var form_r187 = ctx.form;
    ɵɵproperty("formGroup", form_r187);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r186.key)("config", control_r186 == null ? null : control_r186.config)("readOnly", control_r186 == null ? null : control_r186.readOnly);
} }
function NovoControlTemplates_ng_template_15_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵelement(1, "novo-checkbox", 58);
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r195 = ctx.$implicit;
    var form_r196 = ctx.form;
    ɵɵproperty("formGroup", form_r196);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r195 == null ? null : control_r195.key)("name", control_r195 == null ? null : control_r195.key)("label", control_r195 == null ? null : control_r195.checkboxLabel)("tooltip", control_r195 == null ? null : control_r195.tooltip)("tooltipPosition", control_r195 == null ? null : control_r195.tooltipPosition)("tooltipSize", control_r195 == null ? null : control_r195.tooltipSize)("tooltipPreline", control_r195 == null ? null : control_r195.tooltipPreline)("removeTooltipArrow", control_r195 == null ? null : control_r195.removeTooltipArrow)("tooltipAutoPosition", control_r195 == null ? null : control_r195.tooltipAutoPosition)("layoutOptions", control_r195 == null ? null : control_r195.layoutOptions);
} }
function NovoControlTemplates_ng_template_16_Template(rf, ctx) { if (rf & 1) {
    var _r204 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-check-list", 59);
    ɵɵlistener("onSelect", function NovoControlTemplates_ng_template_16_Template_novo_check_list_onSelect_1_listener($event) { ɵɵrestoreView(_r204); var methods_r202 = ctx.methods; return methods_r202.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r199 = ctx.$implicit;
    var form_r200 = ctx.form;
    ɵɵproperty("formGroup", form_r200);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r199.key)("name", control_r199.key)("options", control_r199 == null ? null : control_r199.options)("tooltip", control_r199 == null ? null : control_r199.tooltip)("tooltipPosition", control_r199 == null ? null : control_r199.tooltipPosition)("tooltipSize", control_r199 == null ? null : control_r199.tooltipSize)("tooltipPreline", control_r199 == null ? null : control_r199.tooltipPreline)("removeTooltipArrow", control_r199 == null ? null : control_r199.removeTooltipArrow)("tooltipAutoPosition", control_r199 == null ? null : control_r199.tooltipAutoPosition);
} }
function NovoControlTemplates_ng_template_17_Template(rf, ctx) { if (rf & 1) {
    var _r210 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 33);
    ɵɵelementStart(1, "novo-quick-note", 60);
    ɵɵlistener("change", function NovoControlTemplates_ng_template_17_Template_novo_quick_note_change_1_listener($event) { ɵɵrestoreView(_r210); var methods_r208 = ctx.methods; return methods_r208.modelChange($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var control_r205 = ctx.$implicit;
    var form_r206 = ctx.form;
    ɵɵproperty("formGroup", form_r206);
    ɵɵadvance(1);
    ɵɵproperty("formControlName", control_r205.key)("startupFocus", control_r205 == null ? null : control_r205.startupFocus)("placeholder", control_r205 == null ? null : control_r205.placeholder)("config", control_r205 == null ? null : control_r205.config)("tooltip", control_r205 == null ? null : control_r205.tooltip)("tooltipPosition", control_r205 == null ? null : control_r205.tooltipPosition)("tooltipSize", control_r205 == null ? null : control_r205.tooltipSize)("removeTooltipArrow", control_r205 == null ? null : control_r205.removeTooltipArrow)("tooltipAutoPosition", control_r205 == null ? null : control_r205.tooltipAutoPosition)("tooltipPreline", control_r205 == null ? null : control_r205.tooltipPreline);
} }
var NovoControlTemplates = /** @class */ (function () {
    function NovoControlTemplates(templates) {
        this.templates = templates;
    }
    NovoControlTemplates.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.defaultTemplates && this.defaultTemplates.length) {
            this.defaultTemplates.forEach(function (template) {
                _this.templates.addDefault(template.name, template.template);
            });
        }
    };
    NovoControlTemplates.ɵfac = function NovoControlTemplates_Factory(t) { return new (t || NovoControlTemplates)(ɵɵdirectiveInject(NovoTemplateService)); };
    NovoControlTemplates.ɵcmp = ɵɵdefineComponent({ type: NovoControlTemplates, selectors: [["novo-control-templates"]], viewQuery: function NovoControlTemplates_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoTemplate, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.defaultTemplates = _t);
        } }, decls: 18, vars: 0, consts: [["novoTemplate", "read-only"], ["novoTemplate", "textbox"], ["novoTemplate", "text-area"], ["novoTemplate", "editor"], ["novoTemplate", "ace-editor"], ["novoTemplate", "native-select"], ["novoTemplate", "file"], ["novoTemplate", "tiles"], ["novoTemplate", "picker"], ["novoTemplate", "select"], ["novoTemplate", "radio"], ["novoTemplate", "time"], ["novoTemplate", "date"], ["novoTemplate", "date-time"], ["novoTemplate", "address"], ["novoTemplate", "checkbox"], ["novoTemplate", "checklist"], ["novoTemplate", "quick-note"], [1, "novo-control-input-container", "novo-control-input-with-label", 3, "formGroup", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], ["autocomplete", "", 3, "textMask", "formControlName", "id", "type", "placeholder", "input", "focus", "blur", 4, "ngIf"], ["autocomplete", "", 3, "maxlength-error", "formControlName", "id", "type", "placeholder", "maxlength", "input", "focus", "blur", 4, "ngIf"], ["step", "any", 3, "maxlength-error", "formControlName", "id", "type", "placeholder", "maxlength", "keydown", "input", "focus", "blur", "mousewheel", 4, "ngIf"], ["step", "any", 3, "type", "placeholder", "value", "keydown", "input", "focus", "blur", "mousewheel", 4, "ngIf"], ["class", "input-label", 4, "ngIf"], ["autocomplete", "", 3, "textMask", "formControlName", "id", "type", "placeholder", "input", "focus", "blur"], ["autocomplete", "", 3, "formControlName", "id", "type", "placeholder", "maxlength", "input", "focus", "blur"], ["step", "any", 3, "formControlName", "id", "type", "placeholder", "maxlength", "keydown", "input", "focus", "blur", "mousewheel"], ["numberInput", ""], ["step", "any", 3, "type", "placeholder", "value", "keydown", "input", "focus", "blur", "mousewheel"], ["percentInput", ""], [1, "input-label"], [1, "textarea-container", 3, "formGroup", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], ["autosize", "", 3, "name", "placeholder", "formControlName", "maxlength", "input", "focus", "blur"], [3, "formGroup"], [3, "name", "formControlName", "startupFocus", "minimal", "fileBrowserImageUploadUrl", "config", "focus", "blur"], [3, "name", "formControlName", "focus", "blur"], [3, "id", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], ["value", "", "disabled", "", "selected", "", "hidden", "", 4, "ngIf"], [3, "value", 4, "ngFor", "ngForOf"], ["value", "", "disabled", "", "selected", "", "hidden", ""], [3, "value"], [3, "formControlName", "id", "name", "placeholder", "value", "multiple", "layoutOptions", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "edit", "save", "delete", "upload"], [3, "options", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "controlDisabled", "onChange"], [1, "novo-control-input-container", 3, "formGroup"], [3, "config", "formControlName", "placeholder", "parentScrollSelector", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "select", "changed", "typing", "focus", "blur", 4, "ngIf"], [3, "source", "type", "formControlName", "placeholder", "maxlength", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur", 4, "ngIf"], [3, "source", "type", "formControlName", "placeholder", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur", 4, "ngIf"], [3, "config", "formControlName", "placeholder", "parentScrollSelector", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "select", "changed", "typing", "focus", "blur"], [3, "source", "type", "formControlName", "placeholder", "maxlength", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur"], [3, "source", "type", "formControlName", "placeholder", "closeOnSelect", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "changed", "typing", "focus", "blur"], [3, "options", "headerConfig", "placeholder", "formControlName", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "onSelect"], [3, "name", "formControlName", "value", "label", "checked", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "button", "icon", 4, "ngFor", "ngForOf"], [3, "name", "formControlName", "value", "label", "checked", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "button", "icon"], [1, "novo-control-input-container", 3, "formGroup", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition"], [3, "name", "formControlName", "placeholder", "military"], [3, "name", "formControlName", "start", "end", "format", "allowInvalidDate", "textMaskEnabled", "placeholder", "weekStart", "focusEvent", "blurEvent"], [3, "name", "formControlName", "start", "end", "placeholder", "military", "weekStart", "focusEvent", "blurEvent"], [3, "formControlName", "config", "readOnly", "change", "focus", "blur", "validityChange"], [3, "formControlName", "name", "label", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "layoutOptions"], [3, "formControlName", "name", "options", "tooltip", "tooltipPosition", "tooltipSize", "tooltipPreline", "removeTooltipArrow", "tooltipAutoPosition", "onSelect"], [3, "formControlName", "startupFocus", "placeholder", "config", "tooltip", "tooltipPosition", "tooltipSize", "removeTooltipArrow", "tooltipAutoPosition", "tooltipPreline", "change"]], template: function NovoControlTemplates_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoControlTemplates_ng_template_0_Template, 2, 1, "ng-template", 0);
            ɵɵtemplate(1, NovoControlTemplates_ng_template_1_Template, 7, 13, "ng-template", 1);
            ɵɵtemplate(2, NovoControlTemplates_ng_template_2_Template, 2, 14, "ng-template", 2);
            ɵɵtemplate(3, NovoControlTemplates_ng_template_3_Template, 2, 7, "ng-template", 3);
            ɵɵtemplate(4, NovoControlTemplates_ng_template_4_Template, 2, 3, "ng-template", 4);
            ɵɵtemplate(5, NovoControlTemplates_ng_template_5_Template, 4, 11, "ng-template", 5);
            ɵɵtemplate(6, NovoControlTemplates_ng_template_6_Template, 2, 14, "ng-template", 6);
            ɵɵtemplate(7, NovoControlTemplates_ng_template_7_Template, 2, 10, "ng-template", 7);
            ɵɵtemplate(8, NovoControlTemplates_ng_template_8_Template, 4, 4, "ng-template", 8);
            ɵɵtemplate(9, NovoControlTemplates_ng_template_9_Template, 2, 11, "ng-template", 9);
            ɵɵtemplate(10, NovoControlTemplates_ng_template_10_Template, 2, 2, "ng-template", 10);
            ɵɵtemplate(11, NovoControlTemplates_ng_template_11_Template, 2, 12, "ng-template", 11);
            ɵɵtemplate(12, NovoControlTemplates_ng_template_12_Template, 2, 17, "ng-template", 12);
            ɵɵtemplate(13, NovoControlTemplates_ng_template_13_Template, 2, 15, "ng-template", 13);
            ɵɵtemplate(14, NovoControlTemplates_ng_template_14_Template, 2, 4, "ng-template", 14);
            ɵɵtemplate(15, NovoControlTemplates_ng_template_15_Template, 2, 11, "ng-template", 15);
            ɵɵtemplate(16, NovoControlTemplates_ng_template_16_Template, 2, 10, "ng-template", 16);
            ɵɵtemplate(17, NovoControlTemplates_ng_template_17_Template, 2, 11, "ng-template", 17);
        } }, directives: [NovoTemplate, NgControlStatusGroup, FormGroupDirective, TooltipDirective, NgIf, DefaultValueAccessor, MaskedInputDirective, NgControlStatus, FormControlName, MaxLengthValidator, NovoAutoSize, NovoCKEditorElement, NovoAceEditor, SelectControlValueAccessor, NgForOf, NgSelectOption, ɵangular_packages_forms_forms_x, NovoFileInputElement, NovoTilesElement, NovoPickerElement, NovoChipsElement, NovoRowChipsElement, NovoSelectElement, NovoRadioElement, NovoTimePickerInputElement, NovoDatePickerInputElement, NovoDateTimePickerInputElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, QuickNoteElement], encapsulation: 2 });
    return NovoControlTemplates;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoControlTemplates, [{
        type: Component,
        args: [{
                selector: 'novo-control-templates',
                template: "\n        <!---Readonly--->\n        <ng-template novoTemplate=\"read-only\" let-form=\"form\" let-control>\n          <div>{{ form.value[control.key] }}</div>\n        </ng-template>\n        <!--Textbox--->\n        <ng-template novoTemplate=\"textbox\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container novo-control-input-with-label\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <input *ngIf=\"control?.type !== 'number' && control?.textMaskEnabled\" [textMask]=\"control.maskOptions\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (input)=\"methods.emitChange($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" autocomplete>\n            <input *ngIf=\"control?.type !== 'number' && !control?.textMaskEnabled\" [class.maxlength-error]=\"errors?.maxlength\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (input)=\"methods.emitChange($event)\" [maxlength]=\"control?.maxlength\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" autocomplete>\n            <input *ngIf=\"control?.type === 'number' && control?.subType !== 'percentage'\" [class.maxlength-error]=\"errors?.maxlength\" [formControlName]=\"control.key\" [id]=\"control.key\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (keydown)=\"methods.restrictKeys($event)\" (input)=\"methods.emitChange($event)\" [maxlength]=\"control?.maxlength\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" step=\"any\" (mousewheel)=\"numberInput.blur()\" #numberInput>\n            <input *ngIf=\"control?.type === 'number' && control?.subType === 'percentage'\" [type]=\"control?.type\" [placeholder]=\"control?.placeholder\" (keydown)=\"methods.restrictKeys($event)\" [value]=\"control?.percentValue\" (input)=\"methods.handlePercentChange($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" step=\"any\" (mousewheel)=\"percentInput.blur()\" #percentInput>\n            <label class=\"input-label\" *ngIf=\"control?.subType === 'currency'\">{{ control.currencyFormat }}</label>\n            <label class=\"input-label\" *ngIf=\"control?.subType === 'percentage'\">%</label>\n          </div>\n        </ng-template>\n\n        <!--Textarea--->\n        <ng-template novoTemplate=\"text-area\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div class=\"textarea-container\" [formGroup]=\"form\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <textarea [class.maxlength-error]=\"errors?.maxlength\" [name]=\"control.key\" [attr.id]=\"control.key\" [placeholder]=\"control.placeholder\" [formControlName]=\"control.key\" autosize (input)=\"methods.handleTextAreaInput($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [maxlength]=\"control?.maxlength\"></textarea>\n          </div>\n        </ng-template>\n\n        <!--Editor-->\n        <ng-template novoTemplate=\"editor\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-editor [name]=\"control.key\" [formControlName]=\"control.key\" [startupFocus]=\"control.startupFocus\" [minimal]=\"control.minimal\" [fileBrowserImageUploadUrl]=\"control.fileBrowserImageUploadUrl\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [config]=\"control.config\"></novo-editor>\n          </div>\n        </ng-template>\n\n        <!--AceEditor-->\n        <ng-template novoTemplate=\"ace-editor\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-ace-editor [name]=\"control.key\" [formControlName]=\"control.key\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\"></novo-ace-editor>\n          </div>\n        </ng-template>\n\n        <!--HTML5 Select-->\n        <ng-template novoTemplate=\"native-select\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <select [id]=\"control.key\" [formControlName]=\"control.key\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n                <option *ngIf=\"control.placeholder\" value=\"\" disabled selected hidden>{{ control.placeholder }}</option>\n                <option *ngFor=\"let opt of control.options\" [value]=\"opt.key\">{{opt.value}}</option>\n            </select>\n          </div>\n        </ng-template>\n\n        <!--File-->\n        <ng-template novoTemplate=\"file\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-file-input [formControlName]=\"control.key\" [id]=\"control.key\" [name]=\"control.key\" [placeholder]=\"control.placeholder\" [value]=\"control.value\" [multiple]=\"control.multiple\" [layoutOptions]=\"control.layoutOptions\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" (edit)=\"methods.handleEdit($event)\" (save)=\"methods.handleSave($event)\" (delete)=\"methods.handleDelete($event)\" (upload)=\"methods.handleUpload($event)\"></novo-file-input>\n          </div>\n        </ng-template>\n\n        <!--Tiles-->\n        <ng-template novoTemplate=\"tiles\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-tiles [options]=\"control.options\" [formControlName]=\"control.key\" (onChange)=\"methods.modelChange($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\"  [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [controlDisabled]=\"control.disabled\"></novo-tiles>\n          </div>\n        </ng-template>\n\n        <!--Picker-->\n        <ng-template novoTemplate=\"picker\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\">\n            <novo-picker [config]=\"control.config\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" [parentScrollSelector]=\"control.parentScrollSelector\" *ngIf=\"!control.multiple\" (select)=\"methods.modelChange($event);\" (changed)=\"methods.modelChangeWithRaw($event)\" (typing)=\"methods.handleTyping($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"></novo-picker>\n            <novo-chips [source]=\"control.config\" [type]=\"control.config.type\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" [maxlength]=\"control?.maxlength\" *ngIf=\"control.multiple && !control.config.columns\" [closeOnSelect]=\"control.closeOnSelect\" (changed)=\"methods.modelChangeWithRaw($event)\" (typing)=\"methods.handleTyping($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"></novo-chips>\n            <novo-row-chips [source]=\"control.config\" [type]=\"control.config.type\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" *ngIf=\"control.multiple && control.config.columns\" [closeOnSelect]=\"control.closeOnSelect\" (changed)=\"methods.modelChangeWithRaw($event)\" (typing)=\"methods.handleTyping($event)\" (focus)=\"methods.handleFocus($event)\" (blur)=\"methods.handleBlur($event)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\"></novo-row-chips>\n          </div>\n        </ng-template>\n\n        <!--Novo Select-->\n        <ng-template novoTemplate=\"select\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-select [options]=\"control.options\" [headerConfig]=\"control.headerConfig\" [placeholder]=\"control.placeholder\" [formControlName]=\"control.key\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" (onSelect)=\"methods.modelChange($event)\"></novo-select>\n          </div>\n        </ng-template>\n\n        <!--Radio-->\n        <ng-template novoTemplate=\"radio\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\">\n            <novo-radio [name]=\"control.key\" [formControlName]=\"control.key\" *ngFor=\"let option of control.options\" [value]=\"option.value\" [label]=\"option.label\" [checked]=\"option.value === form.value[control.key] || (form.value[control.key] && option.value === form.value[control.key].id)\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [button]=\"!!option.icon\" [icon]=\"option.icon\" [attr.data-automation-id]=\"control.key + '-' + (option?.label || option?.value)\"></novo-radio>\n          </div>\n        </ng-template>\n\n        <!--Time-->\n        <ng-template novoTemplate=\"time\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <novo-time-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [placeholder]=\"control.placeholder\" [military]=\"control.military\"></novo-time-picker-input>\n          </div>\n        </ng-template>\n\n        <!--Date-->\n        <ng-template novoTemplate=\"date\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <novo-date-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [start]=\"control.startDate\" [end]=\"control.endDate\" [format]=\"control.dateFormat\" [allowInvalidDate]=\"control.allowInvalidDate\" [textMaskEnabled]=\"control.textMaskEnabled\" [placeholder]=\"control.placeholder\" [weekStart]=\"control.weekStart\" (focusEvent)=\"methods.handleFocus($event)\" (blurEvent)=\"methods.handleBlur($event)\"></novo-date-picker-input>\n          </div>\n        </ng-template>\n\n\n        <!--Date and Time-->\n        <ng-template novoTemplate=\"date-time\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\" class=\"novo-control-input-container\" [tooltip]=\"control.tooltip\" [tooltipPosition]=\"control.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\">\n            <novo-date-time-picker-input [attr.id]=\"control.key\" [name]=\"control.key\" [formControlName]=\"control.key\" [start]=\"control.startDate\" [end]=\"control.endDate\" [placeholder]=\"control.placeholder\" [military]=\"control.military\" [weekStart]=\"control.weekStart\" (focusEvent)=\"methods.handleFocus($event)\" (blurEvent)=\"methods.handleBlur($event)\"></novo-date-time-picker-input>\n          </div>\n        </ng-template>\n\n        <!--Address-->\n        <ng-template novoTemplate=\"address\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-address [formControlName]=\"control.key\" [config]=\"control?.config\" [readOnly]=\"control?.readOnly\" (change)=\"methods.handleAddressChange($event)\" (focus)=\"methods.handleFocus($event.event, $event.field)\" (blur)=\"methods.handleBlur($event.event, $event.field)\"  (validityChange)=\"methods.updateValidity()\"></novo-address>\n          </div>\n        </ng-template>\n\n        <!--Checkbox-->\n        <ng-template novoTemplate=\"checkbox\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-checkbox [formControlName]=\"control?.key\" [name]=\"control?.key\" [label]=\"control?.checkboxLabel\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [layoutOptions]=\"control?.layoutOptions\"></novo-checkbox>\n          </div>\n        </ng-template>\n\n        <!--Checklist-->\n        <ng-template novoTemplate=\"checklist\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-check-list [formControlName]=\"control.key\" [name]=\"control.key\" [options]=\"control?.options\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [tooltipPreline]=\"control?.tooltipPreline\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" (onSelect)=\"methods.modelChange($event)\"></novo-check-list>\n          </div>\n        </ng-template>\n\n        <!--QuickNote-->\n        <ng-template novoTemplate=\"quick-note\" let-control let-form=\"form\" let-errors=\"errors\" let-methods=\"methods\">\n          <div [formGroup]=\"form\">\n            <novo-quick-note [formControlName]=\"control.key\" [startupFocus]=\"control?.startupFocus\" [placeholder]=\"control?.placeholder\" [config]=\"control?.config\" (change)=\"methods.modelChange($event)\" [tooltip]=\"control?.tooltip\" [tooltipPosition]=\"control?.tooltipPosition\" [tooltipSize]=\"control?.tooltipSize\" [removeTooltipArrow]=\"control?.removeTooltipArrow\" [tooltipAutoPosition]=\"control?.tooltipAutoPosition\" [tooltipPreline]=\"control?.tooltipPreline\"></novo-quick-note>\n          </div>\n        </ng-template>\n    ",
            }]
    }], function () { return [{ type: NovoTemplateService }]; }, { defaultTemplates: [{
            type: ViewChildren,
            args: [NovoTemplate]
        }] }); })();

function NovoFieldsetElement_novo_fieldset_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-fieldset-header", 3);
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("embedded", ctx_r0.isEmbedded)("inline-embedded", ctx_r0.isInlineEmbedded)("hidden", ctx_r0.hidden);
    ɵɵproperty("icon", ctx_r0.icon)("title", ctx_r0.title);
} }
function NovoFieldsetElement_ng_container_2_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵelement(1, "novo-control", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext();
    var control_r2 = ctx_r6.$implicit;
    var controlIndex_r3 = ctx_r6.index;
    var ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("disabled", control_r2.disabled);
    ɵɵadvance(1);
    ɵɵproperty("autoFocus", ctx_r4.autoFocus && ctx_r4.index === 0 && controlIndex_r3 === 0)("control", control_r2)("form", ctx_r4.form);
} }
function NovoFieldsetElement_ng_container_2_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1, "TODO - GroupedControl");
    ɵɵelementEnd();
} }
function NovoFieldsetElement_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoFieldsetElement_ng_container_2_div_1_Template, 2, 5, "div", 4);
    ɵɵtemplate(2, NovoFieldsetElement_ng_container_2_div_2_Template, 2, 0, "div", 5);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var control_r2 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r2.__type !== "GroupedControl");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", control_r2.__type === "GroupedControl");
} }
function NovoDynamicFormElement_ng_container_6_novo_fieldset_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-fieldset", 4);
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    var i_r2 = ctx_r4.index;
    var fieldset_r1 = ctx_r4.$implicit;
    var ctx_r3 = ɵɵnextContext();
    ɵɵproperty("index", i_r2)("autoFocus", ctx_r3.autoFocusFirstField)("icon", fieldset_r1.icon)("controls", fieldset_r1.controls)("title", fieldset_r1.title)("form", ctx_r3.form)("isEmbedded", fieldset_r1.isEmbedded)("isInlineEmbedded", fieldset_r1.isInlineEmbedded)("hidden", fieldset_r1.hidden);
} }
function NovoDynamicFormElement_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoDynamicFormElement_ng_container_6_novo_fieldset_1_Template, 1, 9, "novo-fieldset", 3);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var fieldset_r1 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", fieldset_r1.controls.length);
} }
var _c0$K = [[["form-title"]], [["form-subtitle"]]];
var _c1$q = ["form-title", "form-subtitle"];
var NovoFieldsetHeaderElement = /** @class */ (function () {
    function NovoFieldsetHeaderElement() {
    }
    NovoFieldsetHeaderElement.ɵfac = function NovoFieldsetHeaderElement_Factory(t) { return new (t || NovoFieldsetHeaderElement)(); };
    NovoFieldsetHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoFieldsetHeaderElement, selectors: [["novo-fieldset-header"]], inputs: { title: "title", icon: "icon" }, decls: 3, vars: 3, template: function NovoFieldsetHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "h6");
            ɵɵelement(1, "i");
            ɵɵtext(2);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵclassMap(ctx.icon || "bhi-section");
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.title);
        } }, encapsulation: 2 });
    return NovoFieldsetHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldsetHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-fieldset-header',
                template: "\n        <h6><i [class]=\"icon || 'bhi-section'\"></i>{{title}}</h6>\n    ",
            }]
    }], null, { title: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
var NovoFieldsetElement = /** @class */ (function () {
    function NovoFieldsetElement() {
        this.controls = [];
        this.isEmbedded = false;
        this.isInlineEmbedded = false;
        this.hidden = false;
    }
    NovoFieldsetElement.ɵfac = function NovoFieldsetElement_Factory(t) { return new (t || NovoFieldsetElement)(); };
    NovoFieldsetElement.ɵcmp = ɵɵdefineComponent({ type: NovoFieldsetElement, selectors: [["novo-fieldset"]], inputs: { controls: "controls", form: "form", title: "title", icon: "icon", index: "index", autoFocus: "autoFocus", isEmbedded: "isEmbedded", isInlineEmbedded: "isInlineEmbedded", hidden: "hidden" }, decls: 3, vars: 2, consts: [[1, "novo-fieldset-container"], [3, "icon", "title", "embedded", "inline-embedded", "hidden", 4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "icon", "title"], ["class", "novo-form-row", 3, "disabled", 4, "ngIf"], [4, "ngIf"], [1, "novo-form-row"], [3, "autoFocus", "control", "form"]], template: function NovoFieldsetElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, NovoFieldsetElement_novo_fieldset_header_1_Template, 1, 8, "novo-fieldset-header", 1);
            ɵɵtemplate(2, NovoFieldsetElement_ng_container_2_Template, 3, 2, "ng-container", 2);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.title);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.controls);
        } }, directives: [NgIf, NgForOf, NovoFieldsetHeaderElement, NovoControlElement], encapsulation: 2 });
    return NovoFieldsetElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFieldsetElement, [{
        type: Component,
        args: [{
                selector: 'novo-fieldset',
                template: "\n        <div class=\"novo-fieldset-container\">\n            <novo-fieldset-header [icon]=\"icon\" [title]=\"title\" *ngIf=\"title\" [class.embedded]=\"isEmbedded\" [class.inline-embedded]=\"isInlineEmbedded\" [class.hidden]=\"hidden\"></novo-fieldset-header>\n            <ng-container *ngFor=\"let control of controls;let controlIndex = index;\">\n                <div class=\"novo-form-row\" [class.disabled]=\"control.disabled\" *ngIf=\"control.__type !== 'GroupedControl'\">\n                    <novo-control [autoFocus]=\"autoFocus && index === 0 && controlIndex === 0\" [control]=\"control\" [form]=\"form\"></novo-control>\n                </div>\n                <div *ngIf=\"control.__type === 'GroupedControl'\">TODO - GroupedControl</div>\n            </ng-container>\n        </div>\n    ",
            }]
    }], null, { controls: [{
            type: Input
        }], form: [{
            type: Input
        }], title: [{
            type: Input
        }], icon: [{
            type: Input
        }], index: [{
            type: Input
        }], autoFocus: [{
            type: Input
        }], isEmbedded: [{
            type: Input
        }], isInlineEmbedded: [{
            type: Input
        }], hidden: [{
            type: Input
        }] }); })();
var NovoDynamicFormElement = /** @class */ (function () {
    function NovoDynamicFormElement(element, templates) {
        this.element = element;
        this.templates = templates;
        this.controls = [];
        this.fieldsets = [];
        this.hideNonRequiredFields = true;
        this.autoFocusFirstField = false;
        this.allFieldsRequired = false;
        this.allFieldsNotRequired = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.numControls = 0;
    }
    NovoDynamicFormElement.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    NovoDynamicFormElement.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.form.layout = this.layout;
        if (!(this.fieldsets && this.fieldsets.length) && this.controls && this.controls.length) {
            this.fieldsets = [
                {
                    controls: this.controls,
                },
            ];
            this.numControls = this.controls.length;
        }
        else if (this.fieldsets) {
            this.fieldsets.forEach(function (fieldset) {
                _this.numControls = _this.numControls + fieldset.controls.length;
            });
        }
        var requiredFields = [];
        var nonRequiredFields = [];
        this.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                if (control.required) {
                    requiredFields.push(control);
                }
                else {
                    nonRequiredFields.push(control);
                }
            });
        });
        this.allFieldsRequired = requiredFields.length === this.numControls;
        this.allFieldsNotRequired = nonRequiredFields.length === this.numControls;
        if (this.allFieldsNotRequired && this.hideNonRequiredFields) {
            this.fieldsets.forEach(function (fieldset) {
                fieldset.controls.forEach(function (control) {
                    _this.form.controls[control.key].hidden = false;
                });
            });
        }
        this.form.fieldsets = __spread(this.fieldsets);
    };
    NovoDynamicFormElement.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach(function (template) {
                _this.templates.addCustom(template.name, template.template);
            });
        }
    };
    NovoDynamicFormElement.prototype.showAllFields = function () {
        var _this = this;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                var ctl = _this.form.controls[control.key];
                if (!_this.fieldsAlreadyHidden.includes(control.key)) {
                    ctl.hidden = false;
                }
            });
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    };
    NovoDynamicFormElement.prototype.showOnlyRequired = function (hideRequiredWithValue) {
        var _this = this;
        this.fieldsAlreadyHidden = [];
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                var ctl = _this.form.controls[control.key];
                if (ctl.hidden) {
                    _this.fieldsAlreadyHidden.push(control.key);
                }
                // Hide any non-required fields
                if (!control.required) {
                    ctl.hidden = true;
                }
                // Hide required fields that have been successfully filled out
                if (hideRequiredWithValue &&
                    !Helpers.isBlank(_this.form.value[control.key]) &&
                    (!control.isEmpty || (control.isEmpty && control.isEmpty(ctl)))) {
                    ctl.hidden = true;
                }
                // Don't hide fields with errors
                if (ctl.errors) {
                    ctl.hidden = false;
                }
            });
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    };
    Object.defineProperty(NovoDynamicFormElement.prototype, "values", {
        get: function () {
            return this.form ? this.form.value : null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoDynamicFormElement.prototype, "isValid", {
        get: function () {
            return this.form ? this.form.valid : false;
        },
        enumerable: true,
        configurable: true
    });
    NovoDynamicFormElement.prototype.updatedValues = function () {
        var _this = this;
        var ret = null;
        this.form.fieldsets.forEach(function (fieldset) {
            fieldset.controls.forEach(function (control) {
                if (_this.form.controls[control.key].dirty || control.dirty) {
                    if (!ret) {
                        ret = {};
                    }
                    ret[control.key] = _this.form.value[control.key];
                }
            });
        });
        return ret;
    };
    NovoDynamicFormElement.prototype.forceValidation = function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            var control = _this.form.controls[key];
            if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    NovoDynamicFormElement.ɵfac = function NovoDynamicFormElement_Factory(t) { return new (t || NovoDynamicFormElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoTemplateService)); };
    NovoDynamicFormElement.ɵcmp = ɵɵdefineComponent({ type: NovoDynamicFormElement, selectors: [["novo-dynamic-form"]], contentQueries: function NovoDynamicFormElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoTemplate, false);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTemplates = _t);
        } }, inputs: { controls: "controls", fieldsets: "fieldsets", form: "form", layout: "layout", hideNonRequiredFields: "hideNonRequiredFields", autoFocusFirstField: "autoFocusFirstField" }, features: [ɵɵProvidersFeature([NovoTemplateService]), ɵɵNgOnChangesFeature], ngContentSelectors: _c1$q, decls: 7, vars: 2, consts: [[1, "novo-form-container"], [1, "novo-form", 3, "formGroup"], [4, "ngFor", "ngForOf"], [3, "index", "autoFocus", "icon", "controls", "title", "form", "isEmbedded", "isInlineEmbedded", "hidden", 4, "ngIf"], [3, "index", "autoFocus", "icon", "controls", "title", "form", "isEmbedded", "isInlineEmbedded", "hidden"]], template: function NovoDynamicFormElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$K);
            ɵɵelement(0, "novo-control-templates");
            ɵɵelementStart(1, "div", 0);
            ɵɵelementStart(2, "header");
            ɵɵprojection(3);
            ɵɵprojection(4, 1);
            ɵɵelementEnd();
            ɵɵelementStart(5, "form", 1);
            ɵɵtemplate(6, NovoDynamicFormElement_ng_container_6_Template, 2, 1, "ng-container", 2);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(5);
            ɵɵproperty("formGroup", ctx.form);
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.form.fieldsets);
        } }, directives: [NovoControlTemplates, ɵangular_packages_forms_forms_y, NgControlStatusGroup, FormGroupDirective, NgForOf, NgIf, NovoFieldsetElement], encapsulation: 2 });
    return NovoDynamicFormElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDynamicFormElement, [{
        type: Component,
        args: [{
                selector: 'novo-dynamic-form',
                template: "\n        <novo-control-templates></novo-control-templates>\n        <div class=\"novo-form-container\">\n            <header>\n                <ng-content select=\"form-title\"></ng-content>\n                <ng-content select=\"form-subtitle\"></ng-content>\n            </header>\n            <form class=\"novo-form\" [formGroup]=\"form\">\n                <ng-container *ngFor=\"let fieldset of form.fieldsets;let i = index\">\n                    <novo-fieldset *ngIf=\"fieldset.controls.length\" [index]=\"i\" [autoFocus]=\"autoFocusFirstField\" [icon]=\"fieldset.icon\" [controls]=\"fieldset.controls\" [title]=\"fieldset.title\" [form]=\"form\" [isEmbedded]=\"fieldset.isEmbedded\" [isInlineEmbedded]=\"fieldset.isInlineEmbedded\" [hidden]=\"fieldset.hidden\"></novo-fieldset>\n                </ng-container>\n            </form>\n        </div>\n    ",
                providers: [NovoTemplateService],
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoTemplateService }]; }, { controls: [{
            type: Input
        }], fieldsets: [{
            type: Input
        }], form: [{
            type: Input
        }], layout: [{
            type: Input
        }], hideNonRequiredFields: [{
            type: Input
        }], autoFocusFirstField: [{
            type: Input
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }] }); })();

// NG
function NovoFormElement_header_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵprojection(1, 1);
    ɵɵprojection(2, 2);
    ɵɵelementEnd();
} }
var _c0$L = ["*", [["form-title"]], [["form-subtitle"]]];
var _c1$r = ["*", "form-title", "form-subtitle"];
var NovoFormElement = /** @class */ (function () {
    function NovoFormElement(templates) {
        this.templates = templates;
        this.hideHeader = false;
        this.showingAllFields = false;
        this.showingRequiredFields = true;
    }
    Object.defineProperty(NovoFormElement.prototype, "value", {
        get: function () {
            return this.form.getRawValue();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoFormElement.prototype, "isValid", {
        get: function () {
            return this.form.valid;
        },
        enumerable: true,
        configurable: true
    });
    NovoFormElement.prototype.ngOnInit = function () {
        this.form.layout = this.layout;
    };
    NovoFormElement.prototype.ngAfterContentInit = function () {
        var _this = this;
        if (this.customTemplates && this.customTemplates.length) {
            this.customTemplates.forEach(function (template) {
                _this.templates.addCustom(template.name, template.template);
            });
        }
    };
    NovoFormElement.prototype.showAllFields = function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            _this.form.controls[key].hidden = false;
        });
        this.showingAllFields = true;
        this.showingRequiredFields = false;
    };
    NovoFormElement.prototype.showOnlyRequired = function (hideRequiredWithValue) {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            // Hide any non-required fields
            if (!_this.form.controls[key].required) {
                _this.form.controls[key].hidden = true;
            }
            // Hide required fields that have been successfully filled out
            if (hideRequiredWithValue && !Helpers.isBlank(_this.form.value[key])) {
                _this.form.controls[key].hidden = true;
            }
            // Don't hide fields with errors
            if (_this.form.controls[key].errors) {
                _this.form.controls[key].hidden = false;
            }
        });
        this.showingAllFields = false;
        this.showingRequiredFields = true;
        this.forceValidation();
    };
    NovoFormElement.prototype.forceValidation = function () {
        var _this = this;
        Object.keys(this.form.controls).forEach(function (key) {
            var control = _this.form.controls[key];
            if (control.required && Helpers.isBlank(_this.form.value[control.key])) {
                control.markAsDirty();
                control.markAsTouched();
            }
        });
    };
    NovoFormElement.ɵfac = function NovoFormElement_Factory(t) { return new (t || NovoFormElement)(ɵɵdirectiveInject(NovoTemplateService)); };
    NovoFormElement.ɵcmp = ɵɵdefineComponent({ type: NovoFormElement, selectors: [["novo-form"]], contentQueries: function NovoFormElement_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoTemplate, false);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.customTemplates = _t);
        } }, inputs: { form: "form", layout: "layout", hideHeader: "hideHeader" }, features: [ɵɵProvidersFeature([NovoTemplateService])], ngContentSelectors: _c1$r, decls: 5, vars: 2, consts: [[1, "novo-form-container"], [4, "ngIf"], [1, "novo-form", 3, "formGroup"]], template: function NovoFormElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$L);
            ɵɵelement(0, "novo-control-templates");
            ɵɵelementStart(1, "div", 0);
            ɵɵtemplate(2, NovoFormElement_header_2_Template, 3, 0, "header", 1);
            ɵɵelementStart(3, "form", 2);
            ɵɵprojection(4);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ctx.hideHeader);
            ɵɵadvance(1);
            ɵɵproperty("formGroup", ctx.form);
        } }, directives: [NovoControlTemplates, NgIf, ɵangular_packages_forms_forms_y, NgControlStatusGroup, FormGroupDirective], encapsulation: 2 });
    return NovoFormElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFormElement, [{
        type: Component,
        args: [{
                selector: 'novo-form',
                template: "\n        <novo-control-templates></novo-control-templates>\n        <div class=\"novo-form-container\">\n            <header *ngIf=\"!hideHeader\">\n                <ng-content select=\"form-title\"></ng-content>\n                <ng-content select=\"form-subtitle\"></ng-content>\n            </header>\n            <form class=\"novo-form\" [formGroup]=\"form\">\n                <ng-content></ng-content>\n            </form>\n        </div>\n    ",
                providers: [NovoTemplateService],
            }]
    }], function () { return [{ type: NovoTemplateService }]; }, { form: [{
            type: Input
        }], layout: [{
            type: Input
        }], hideHeader: [{
            type: Input
        }], customTemplates: [{
            type: ContentChildren,
            args: [NovoTemplate]
        }] }); })();

// NG2
var NovoRadioModule = /** @class */ (function () {
    function NovoRadioModule() {
    }
    NovoRadioModule.ɵmod = ɵɵdefineNgModule({ type: NovoRadioModule });
    NovoRadioModule.ɵinj = ɵɵdefineInjector({ factory: function NovoRadioModule_Factory(t) { return new (t || NovoRadioModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
    return NovoRadioModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoRadioModule, { declarations: [NovoRadioElement, NovoRadioGroup], imports: [CommonModule, NovoButtonModule], exports: [NovoRadioElement, NovoRadioGroup] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoRadioModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoRadioElement, NovoRadioGroup],
                exports: [NovoRadioElement, NovoRadioGroup],
            }]
    }], null, null); })();

// NG2
var NovoQuickNoteModule = /** @class */ (function () {
    function NovoQuickNoteModule() {
    }
    NovoQuickNoteModule.ɵmod = ɵɵdefineNgModule({ type: NovoQuickNoteModule });
    NovoQuickNoteModule.ɵinj = ɵɵdefineInjector({ factory: function NovoQuickNoteModule_Factory(t) { return new (t || NovoQuickNoteModule)(); }, imports: [[CommonModule, FormsModule, NovoLoadingModule, NovoListModule]] });
    return NovoQuickNoteModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoQuickNoteModule, { declarations: [QuickNoteElement, QuickNoteResults], imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule], exports: [QuickNoteElement, QuickNoteResults] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoQuickNoteModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoLoadingModule, NovoListModule],
                declarations: [QuickNoteElement, QuickNoteResults],
                exports: [QuickNoteElement, QuickNoteResults],
                entryComponents: [QuickNoteResults],
            }]
    }], null, null); })();

var _c0$M = ["*"];
var _c1$s = ["theme", ""];
function NovoHeaderComponent_ng_container_2_i_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 5);
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r2.icon);
} }
function NovoHeaderComponent_ng_container_2_small_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "small");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.subTitle);
} }
function NovoHeaderComponent_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoHeaderComponent_ng_container_2_i_1_Template, 1, 1, "i", 3);
    ɵɵelementStart(2, "div", 4);
    ɵɵelementStart(3, "h1");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoHeaderComponent_ng_container_2_small_5_Template, 2, 1, "small", 1);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.icon);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r0.title);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.subTitle);
} }
function NovoHeaderComponent_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵprojection(1, 4);
    ɵɵelementStart(2, "div", 4);
    ɵɵprojection(3, 5);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} }
var _c2$c = [[["section"]], [["utils"]], [["novo-action"]], "*", [["novo-icon"], ["", "novo-icon", ""]], [["h1"], ["h2"], ["h3"], ["h4"], ["h5"], ["h6"], ["small"], ["", "novo-title", ""], ["", "novo-subtitle", ""]]];
var _c3$7 = ["section", "utils", "novo-action", "*", "novo-icon, [novo-icon]", "h1, h2, h3, h4, h5, h6, small, [novo-title], [novo-subtitle]"];
var NovoHeaderSpacer = /** @class */ (function () {
    function NovoHeaderSpacer() {
    }
    NovoHeaderSpacer.ɵfac = function NovoHeaderSpacer_Factory(t) { return new (t || NovoHeaderSpacer)(); };
    NovoHeaderSpacer.ɵcmp = ɵɵdefineComponent({ type: NovoHeaderSpacer, selectors: [["header-spacer"]], ngContentSelectors: _c0$M, decls: 1, vars: 0, template: function NovoHeaderSpacer_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoHeaderSpacer;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHeaderSpacer, [{
        type: Component,
        args: [{
                selector: 'header-spacer',
                template: "\n    <ng-content></ng-content>\n  ",
            }]
    }], null, null); })();
var NovoUtilsComponent = /** @class */ (function () {
    function NovoUtilsComponent() {
    }
    NovoUtilsComponent.ɵfac = function NovoUtilsComponent_Factory(t) { return new (t || NovoUtilsComponent)(); };
    NovoUtilsComponent.ɵcmp = ɵɵdefineComponent({ type: NovoUtilsComponent, selectors: [["utils"]], ngContentSelectors: _c0$M, decls: 1, vars: 0, template: function NovoUtilsComponent_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoUtilsComponent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoUtilsComponent, [{
        type: Component,
        args: [{
                selector: 'utils',
                template: "\n    <ng-content></ng-content>\n  ",
            }]
    }], null, null); })();
var NovoUtilActionComponent = /** @class */ (function () {
    function NovoUtilActionComponent() {
    }
    NovoUtilActionComponent.ɵfac = function NovoUtilActionComponent_Factory(t) { return new (t || NovoUtilActionComponent)(); };
    NovoUtilActionComponent.ɵcmp = ɵɵdefineComponent({ type: NovoUtilActionComponent, selectors: [["util-action"], ["novo-action"]], inputs: { icon: "icon", inverse: "inverse", disabled: "disabled" }, ngContentSelectors: _c0$M, decls: 2, vars: 3, consts: [["theme", "icon", 3, "icon", "disabled"]], template: function NovoUtilActionComponent_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "button", 0);
            ɵɵprojection(1);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("icon", ctx.icon)("disabled", ctx.disabled);
            ɵɵattribute("inverse", ctx.inverse);
        } }, directives: [NovoButtonElement], encapsulation: 2 });
    return NovoUtilActionComponent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoUtilActionComponent, [{
        type: Component,
        args: [{
                selector: 'util-action, novo-action',
                template: "\n    <button theme=\"icon\" [icon]=\"icon\" [attr.inverse]=\"inverse\" [disabled]=\"disabled\">\n      <ng-content></ng-content>\n    </button>\n  ",
            }]
    }], null, { icon: [{
            type: Input
        }], inverse: [{
            type: Input
        }], disabled: [{
            type: Input
        }] }); })();
var NovoHeaderComponent = /** @class */ (function () {
    function NovoHeaderComponent() {
        this.headerClass = 'novo-header';
        this.condensed = false;
        this.inverse = 'inverse';
    }
    Object.defineProperty(NovoHeaderComponent.prototype, "theme", {
        get: function () {
            return this._theme;
        },
        set: function (theme) {
            this._theme = theme;
            this.inverse = theme === 'white' || theme === 'off-white' || theme === 'light' ? undefined : 'inverse';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoHeaderComponent.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (icon) {
            this._icon = "bhi-" + icon;
        },
        enumerable: true,
        configurable: true
    });
    NovoHeaderComponent.ɵfac = function NovoHeaderComponent_Factory(t) { return new (t || NovoHeaderComponent)(); };
    NovoHeaderComponent.ɵcmp = ɵɵdefineComponent({ type: NovoHeaderComponent, selectors: [["header", "theme", ""]], hostVars: 5, hostBindings: function NovoHeaderComponent_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("theme", ctx.theme);
            ɵɵclassMap(ctx.headerClass);
            ɵɵclassProp("condensed", ctx.condensed);
        } }, inputs: { condensed: "condensed", title: "title", subTitle: "subTitle", theme: "theme", icon: "icon" }, attrs: _c1$s, ngContentSelectors: _c3$7, decls: 9, vars: 2, consts: [[1, "header-title"], [4, "ngIf"], ["flex", ""], ["class", "header-icon", 3, "ngClass", 4, "ngIf"], [1, "header-titles"], [1, "header-icon", 3, "ngClass"]], template: function NovoHeaderComponent_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c2$c);
            ɵɵelementStart(0, "section");
            ɵɵelementStart(1, "div", 0);
            ɵɵtemplate(2, NovoHeaderComponent_ng_container_2_Template, 6, 3, "ng-container", 1);
            ɵɵtemplate(3, NovoHeaderComponent_ng_container_3_Template, 4, 0, "ng-container", 1);
            ɵɵelementEnd();
            ɵɵprojection(4);
            ɵɵelement(5, "span", 2);
            ɵɵprojection(6, 1);
            ɵɵprojection(7, 2);
            ɵɵelementEnd();
            ɵɵprojection(8, 3);
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.title);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.title);
        } }, directives: [NgIf, NgClass], encapsulation: 2 });
    return NovoHeaderComponent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHeaderComponent, [{
        type: Component,
        args: [{
                selector: 'header[theme]',
                template: "\n    <section>\n      <div class=\"header-title\">\n        <ng-container *ngIf=\"title\">\n          <i *ngIf=\"icon\" class=\"header-icon\" [ngClass]=\"icon\"></i>\n          <div class=\"header-titles\">\n            <h1>{{ title }}</h1>\n            <small *ngIf=\"subTitle\">{{ subTitle }}</small>\n          </div>\n        </ng-container>\n        <ng-container *ngIf=\"!title\">\n          <ng-content select=\"novo-icon, [novo-icon]\"></ng-content>\n          <div class=\"header-titles\">\n            <ng-content select=\"h1, h2, h3, h4, h5, h6, small, [novo-title], [novo-subtitle]\"></ng-content>\n          </div>\n        </ng-container>\n      </div>\n      <ng-content select=\"section\"></ng-content>\n      <span flex></span>\n      <ng-content select=\"utils\"></ng-content>\n      <ng-content select=\"novo-action\"></ng-content>\n    </section>\n    <ng-content></ng-content>\n  ",
            }]
    }], null, { headerClass: [{
            type: HostBinding,
            args: ['class']
        }], condensed: [{
            type: HostBinding,
            args: ['class.condensed']
        }, {
            type: Input
        }], title: [{
            type: Input
        }], subTitle: [{
            type: Input
        }], theme: [{
            type: HostBinding,
            args: ['attr.theme']
        }, {
            type: Input
        }], icon: [{
            type: Input
        }] }); })();

var NovoHeaderModule = /** @class */ (function () {
    function NovoHeaderModule() {
    }
    NovoHeaderModule.ɵmod = ɵɵdefineNgModule({ type: NovoHeaderModule });
    NovoHeaderModule.ɵinj = ɵɵdefineInjector({ factory: function NovoHeaderModule_Factory(t) { return new (t || NovoHeaderModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
    return NovoHeaderModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoHeaderModule, { declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer], imports: [CommonModule, NovoButtonModule], exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHeaderModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
                exports: [NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer],
            }]
    }], null, null); })();

// NG2
var NovoTipWellModule = /** @class */ (function () {
    function NovoTipWellModule() {
    }
    NovoTipWellModule.ɵmod = ɵɵdefineNgModule({ type: NovoTipWellModule });
    NovoTipWellModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTipWellModule_Factory(t) { return new (t || NovoTipWellModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
    return NovoTipWellModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTipWellModule, { declarations: [NovoTipWellElement], imports: [CommonModule, NovoButtonModule], exports: [NovoTipWellElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTipWellModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoTipWellElement],
                exports: [NovoTipWellElement],
            }]
    }], null, null); })();

// NG2
var NovoModalModule = /** @class */ (function () {
    function NovoModalModule() {
    }
    NovoModalModule.ɵmod = ɵɵdefineNgModule({ type: NovoModalModule });
    NovoModalModule.ɵinj = ɵɵdefineInjector({ factory: function NovoModalModule_Factory(t) { return new (t || NovoModalModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
    return NovoModalModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoModalModule, { declarations: [NovoModalContainerElement, NovoModalElement, NovoModalNotificationElement], imports: [CommonModule, NovoButtonModule], exports: [NovoModalElement, NovoModalNotificationElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoModalModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoModalContainerElement, NovoModalElement, NovoModalNotificationElement],
                exports: [NovoModalElement, NovoModalNotificationElement],
                entryComponents: [NovoModalContainerElement],
            }]
    }], null, null); })();

// NG2
var NovoFormModule = /** @class */ (function () {
    function NovoFormModule() {
    }
    NovoFormModule.ɵmod = ɵɵdefineNgModule({ type: NovoFormModule });
    NovoFormModule.ɵinj = ɵɵdefineInjector({ factory: function NovoFormModule_Factory(t) { return new (t || NovoFormModule)(); }, providers: [NovoTemplateService], imports: [[
                CommonModule,
                ReactiveFormsModule,
                NovoRadioModule,
                NovoTilesModule,
                NovoSelectModule,
                NovoPickerModule,
                NovoChipsModule,
                NovoDatePickerModule,
                NovoTimePickerModule,
                NovoNovoCKEditorModule,
                NovoFormExtrasModule,
                NovoQuickNoteModule,
                NovoDateTimePickerModule,
                NovoHeaderModule,
                NovoTooltipModule,
                NovoDragulaModule,
                TextMaskModule,
                NovoTipWellModule,
                NovoModalModule,
                NovoButtonModule,
                NovoAceEditorModule,
                NovoCommonModule,
            ]] });
    return NovoFormModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoFormModule, { declarations: [NovoAutoSize,
        NovoControlElement,
        NovoDynamicFormElement,
        NovoFormElement,
        NovoFieldsetElement,
        NovoFieldsetHeaderElement,
        ControlConfirmModal,
        ControlPromptModal,
        NovoControlGroup,
        NovoControlTemplates], imports: [CommonModule,
        ReactiveFormsModule,
        NovoRadioModule,
        NovoTilesModule,
        NovoSelectModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoNovoCKEditorModule,
        NovoFormExtrasModule,
        NovoQuickNoteModule,
        NovoDateTimePickerModule,
        NovoHeaderModule,
        NovoTooltipModule,
        NovoDragulaModule,
        TextMaskModule,
        NovoTipWellModule,
        NovoModalModule,
        NovoButtonModule,
        NovoAceEditorModule,
        NovoCommonModule], exports: [NovoAutoSize,
        NovoDynamicFormElement,
        NovoControlElement,
        NovoFormElement,
        NovoFieldsetHeaderElement,
        NovoControlGroup,
        NovoControlTemplates] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoFormModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    ReactiveFormsModule,
                    NovoRadioModule,
                    NovoTilesModule,
                    NovoSelectModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoFormExtrasModule,
                    NovoQuickNoteModule,
                    NovoDateTimePickerModule,
                    NovoHeaderModule,
                    NovoTooltipModule,
                    NovoDragulaModule,
                    TextMaskModule,
                    NovoTipWellModule,
                    NovoModalModule,
                    NovoButtonModule,
                    NovoAceEditorModule,
                    NovoCommonModule,
                ],
                declarations: [
                    NovoAutoSize,
                    NovoControlElement,
                    NovoDynamicFormElement,
                    NovoFormElement,
                    NovoFieldsetElement,
                    NovoFieldsetHeaderElement,
                    ControlConfirmModal,
                    ControlPromptModal,
                    NovoControlGroup,
                    NovoControlTemplates,
                ],
                exports: [
                    NovoAutoSize,
                    NovoDynamicFormElement,
                    NovoControlElement,
                    NovoFormElement,
                    NovoFieldsetHeaderElement,
                    NovoControlGroup,
                    NovoControlTemplates,
                ],
                entryComponents: [ControlConfirmModal, ControlPromptModal],
                providers: [NovoTemplateService],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoControlGroup, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, ɵangular_packages_forms_forms_y, NgSelectOption, ɵangular_packages_forms_forms_x, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName, NovoRadioElement, NovoRadioGroup, NovoTilesElement, NovoSelectElement, NovoPickerElement, PickerResults, EntityPickerResult, EntityPickerResults, ChecklistPickerResults, GroupedMultiPickerResults, DistributionListPickerResults, WorkersCompCodesPickerResults, SkillsSpecialtyPickerResults, NovoChipElement, NovoChipsElement, NovoRowChipElement, NovoRowChipsElement, NovoDatePickerElement, NovoDatePickerInputElement, NovoTimePickerElement, NovoTimePickerInputElement, NovoCKEditorElement, NovoAddressElement, NovoCheckboxElement, NovoCheckListElement, NovoFileInputElement, QuickNoteElement, QuickNoteResults, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoHeaderComponent, NovoUtilActionComponent, NovoUtilsComponent, NovoHeaderSpacer, TooltipDirective, NovoDragulaElement, MaskedInputDirective, NovoTipWellElement, NovoModalElement, NovoModalNotificationElement, NovoButtonElement, NovoAceEditor, NovoTemplate, NovoAutoSize,
    NovoControlElement,
    NovoDynamicFormElement,
    NovoFormElement,
    NovoFieldsetElement,
    NovoFieldsetHeaderElement,
    ControlConfirmModal,
    ControlPromptModal,
    NovoControlGroup,
    NovoControlTemplates], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

var _c0$N = ["*"];
var NovoIconComponent = /** @class */ (function () {
    function NovoIconComponent(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.size = 'medium';
        this.role = 'img';
    }
    Object.defineProperty(NovoIconComponent.prototype, "alt", {
        get: function () {
            return this.ariaLabel;
        },
        set: function (value) {
            this.ariaLabel = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoIconComponent.prototype, "name", {
        get: function () {
            return this.iconName;
        },
        set: function (iconName) {
            this.iconName = "bhi-" + iconName;
        },
        enumerable: true,
        configurable: true
    });
    NovoIconComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.element.nativeElement.textContent.trim()) {
            Promise.resolve().then(function () {
                _this.name = _this.element.nativeElement.textContent.trim();
                _this.cdr.markForCheck();
            });
        }
    };
    NovoIconComponent.ɵfac = function NovoIconComponent_Factory(t) { return new (t || NovoIconComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoIconComponent.ɵcmp = ɵɵdefineComponent({ type: NovoIconComponent, selectors: [["novo-icon"]], hostVars: 6, hostBindings: function NovoIconComponent_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("raised", ctx.raised)("size", ctx.size)("theme", ctx.theme)("color", ctx.color)("role", ctx.role)("aria-label", ctx.ariaLabel);
        } }, inputs: { raised: "raised", size: "size", theme: "theme", color: "color", alt: "alt", name: "name" }, ngContentSelectors: _c0$N, decls: 3, vars: 2, template: function NovoIconComponent_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "i");
            ɵɵelementStart(1, "span");
            ɵɵprojection(2);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassMap(ctx.iconName);
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoIconComponent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoIconComponent, [{
        type: Component,
        args: [{
                selector: 'novo-icon',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n        <i [class]=\"iconName\"><span><ng-content></ng-content></span></i>\n    ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { raised: [{
            type: HostBinding,
            args: ['attr.raised']
        }, {
            type: Input
        }], size: [{
            type: HostBinding,
            args: ['attr.size']
        }, {
            type: Input
        }], theme: [{
            type: HostBinding,
            args: ['attr.theme']
        }, {
            type: Input
        }], color: [{
            type: HostBinding,
            args: ['attr.color']
        }, {
            type: Input
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], ariaLabel: [{
            type: HostBinding,
            args: ['attr.aria-label']
        }], alt: [{
            type: Input
        }], name: [{
            type: Input
        }] }); })();

var NovoIconModule = /** @class */ (function () {
    function NovoIconModule() {
    }
    NovoIconModule.ɵmod = ɵɵdefineNgModule({ type: NovoIconModule });
    NovoIconModule.ɵinj = ɵɵdefineInjector({ factory: function NovoIconModule_Factory(t) { return new (t || NovoIconModule)(); } });
    return NovoIconModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoIconModule, { declarations: [NovoIconComponent], exports: [NovoIconComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoIconModule, [{
        type: NgModule,
        args: [{
                exports: [NovoIconComponent],
                declarations: [NovoIconComponent],
            }]
    }], null, null); })();

function NovoMultiPickerElement_chip_0_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "chip", 6);
    ɵɵlistener("remove", function NovoMultiPickerElement_chip_0_Template_chip_remove_0_listener($event) { ɵɵrestoreView(_r5); var item_r3 = ctx.$implicit; var ctx_r4 = ɵɵnextContext(); return ctx_r4.removeFromDisplay($event, item_r3); })("select", function NovoMultiPickerElement_chip_0_Template_chip_select_0_listener($event) { ɵɵrestoreView(_r5); var item_r3 = ctx.$implicit; var ctx_r6 = ɵɵnextContext(); return ctx_r6.select($event, item_r3); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r3 = ctx.$implicit;
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("selected", item_r3 == ctx_r0.selected);
    ɵɵproperty("type", item_r3.type);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", item_r3.label, " ");
} }
function NovoMultiPickerElement_div_3_li_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "li");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var type_r8 = ctx.$implicit;
    var ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate3("+ ", type_r8.count, " ", ctx_r7.labels.more, " ", type_r8.type, "");
} }
function NovoMultiPickerElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "ul", 7);
    ɵɵtemplate(2, NovoMultiPickerElement_div_3_li_2_Template, 2, 3, "li", 8);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.notShown);
} }
function NovoMultiPickerElement_label_7_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "label", 9);
    ɵɵlistener("click", function NovoMultiPickerElement_label_7_Template_label_click_0_listener() { ɵɵrestoreView(_r10); var ctx_r9 = ɵɵnextContext(); return ctx_r9.clearValue(); });
    ɵɵtext(1);
    ɵɵelement(2, "i", 10);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ctx_r2.labels.clearAll, " ");
} }
// Value accessor for the component (supports ngModel)
var CHIPS_VALUE_ACCESSOR$2 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NovoMultiPickerElement; }),
    multi: true,
};
var NovoMultiPickerElement = /** @class */ (function () {
    function NovoMultiPickerElement(element, labels) {
        this.element = element;
        this.labels = labels;
        this.placeholder = '';
        this.changed = new EventEmitter();
        this.focus = new EventEmitter();
        this.blur = new EventEmitter();
        this.items = [];
        this._items = new ReplaySubject(1);
        this.selected = null;
        this.config = {};
        // private data model
        this._value = {};
        this.notShown = {};
        this.onModelChange = function () { };
        this.onModelTouched = function () { };
        this.chipsCount = 4;
    }
    Object.defineProperty(NovoMultiPickerElement.prototype, "value", {
        get: function () {
            return this._value;
        },
        set: function (selectedItems) {
            var _this = this;
            if (selectedItems) {
                this.types.forEach(function (x) { return (_this._value[x.value] = selectedItems[x.value]); });
            }
            else {
                this._value = {};
                this.types.forEach(function (x) { return (_this._value[x.value] = []); });
            }
            this.changed.emit(selectedItems);
            this.onModelChange(selectedItems);
        },
        enumerable: true,
        configurable: true
    });
    NovoMultiPickerElement.prototype.ngOnInit = function () {
        this.selectAllOption = this.source.selectAllOption || false;
        this.chipsCount = this.source.chipsCount || 4;
        this.strictRelationship = this.source.strictRelationship || false;
        this.setupOptions();
    };
    NovoMultiPickerElement.prototype.clearValue = function () {
        var _this = this;
        this.types.forEach(function (type) { return _this.modifyAllOfType(type.value, 'unselect'); });
        this.items = [];
        this._items.next(this.items);
        this.setInitialValue(null);
        this.onModelChange(this.value);
    };
    NovoMultiPickerElement.prototype.removeFromDisplay = function (event, item) {
        this.remove(true, item);
        this.modifyAffectedParentsOrChildren(false, item);
    };
    NovoMultiPickerElement.prototype.setupOptions = function () {
        var _this = this;
        this.options = this.source.options || [];
        this._options = [];
        if (this.options) {
            this.options.forEach(function (option) {
                var formattedOption = _this.setupOptionsByType(option);
                _this._options.push(formattedOption);
            });
        }
        this.source.options = this._options;
    };
    NovoMultiPickerElement.prototype.setupOptionsByType = function (section) {
        var _this = this;
        var formattedSection = {
            type: section.type,
            label: section.label || section.type,
        };
        formattedSection.data = section.data.map(function (item) {
            return _this.formatOption(section, item);
        });
        if (this.selectAllOption) {
            var selectAll = this.createSelectAllOption(section);
            formattedSection.data.splice(0, 0, selectAll);
        }
        formattedSection.originalData = formattedSection.data.slice();
        return formattedSection;
    };
    NovoMultiPickerElement.prototype.formatOption = function (section, item) {
        var obj = {
            value: section.field ? item[section.field] : item.value || item,
            label: section.format ? Helpers.interpolate(section.format, item) : item.label || String(item.value || item),
            type: section.type,
            checked: undefined,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (obj.isChildOf) {
            obj[section.isChildOf] = item[section.isChildOf];
        }
        return obj;
    };
    NovoMultiPickerElement.prototype.createSelectAllOption = function (section) {
        var selectAll = {
            value: 'ALL',
            label: "All " + section.type,
            type: section.type,
            checked: this.model && this.model.length && this.model.indexOf('ALL') !== -1,
            isParentOf: section.isParentOf,
            isChildOf: section.isChildOf,
        };
        if (section.isChildOf) {
            var allParents = section.data.reduce(function (accum, next) {
                return accum.concat(next[section.isChildOf]);
            }, []);
            selectAll[section.isChildOf] = allParents;
        }
        return selectAll;
    };
    NovoMultiPickerElement.prototype.deselectAll = function () {
        this.selected = null;
    };
    NovoMultiPickerElement.prototype.select = function (event, item) {
        this.blur.emit(event);
        this.deselectAll();
        this.selected = item;
    };
    NovoMultiPickerElement.prototype.onFocus = function (e) {
        this.element.nativeElement.classList.add('selected');
        this.focus.emit(e);
    };
    NovoMultiPickerElement.prototype.clickOption = function (event) {
        if (event && !(event instanceof Event)) {
            if (event.checked === false) {
                this.remove(null, event);
            }
            else {
                this.add(event);
            }
            this.modifyAffectedParentsOrChildren(event.checked, event);
            // Set focus on the picker
            var input = this.element.nativeElement.querySelector('novo-picker > input');
            if (input) {
                input.focus();
            }
        }
    };
    NovoMultiPickerElement.prototype.add = function (event) {
        if (event.value === 'ALL') {
            this.modifyAllOfType(event.type, 'select');
        }
        else {
            this.updateDisplayItems(event, 'add');
            this.value[event.type].push(event.value);
            this.updateAllItemState(event.type);
            this.triggerValueUpdate();
        }
        this.updateParentOrChildren(event, 'select');
        this.select(null, event);
    };
    NovoMultiPickerElement.prototype.updateAllItemState = function (type) {
        var allOfType = this.getAllOfType(type);
        var allOfTypeSelected = this.allItemsSelected(allOfType, type);
        if (allOfTypeSelected) {
            this.selectAll(allOfType, type);
        }
        return { allOfType: allOfType, allOfTypeSelected: allOfTypeSelected };
    };
    NovoMultiPickerElement.prototype.setIndeterminateState = function (allOfType, status) {
        if (!this.selectAllOption) {
            return;
        }
        var allItem = allOfType[0];
        allItem.indeterminate = status;
    };
    NovoMultiPickerElement.prototype.updateDisplayItems = function (item, action) {
        var adding = action === 'add';
        if (adding) {
            this.items.push(item);
        }
        else {
            if (this.items.indexOf(item) > -1) {
                this.items.splice(this.items.indexOf(item), 1);
            }
        }
        this.updateDisplayText(this.items);
        this._items.next(this.items);
    };
    NovoMultiPickerElement.prototype.updateDisplayText = function (items) {
        var _this = this;
        this.notShown = [];
        var notShown = items.slice(this.chipsCount);
        if (notShown.length > 0) {
            this.types.forEach(function (type) {
                var count;
                var selectedOfType = notShown.filter(function (x) { return x.type === type.value; });
                if (selectedOfType.length === 1 && selectedOfType[0].value === 'ALL') {
                    count = _this.getAllOfType(type.value).length - 1;
                }
                else {
                    count = selectedOfType.length;
                }
                var displayType = count === 1 ? type.singular : type.plural || type.value;
                if (count > 0) {
                    _this.notShown.push({ type: displayType, count: count });
                }
            });
        }
    };
    NovoMultiPickerElement.prototype.remove = function (event, item) {
        var triggeredByEvent;
        if (event) {
            triggeredByEvent = true;
        }
        var itemToRemove = item;
        if (itemToRemove.value === 'ALL') {
            triggeredByEvent = false;
            this.modifyAllOfType(itemToRemove.type, 'unselect');
        }
        else if (this.allOfTypeSelected(itemToRemove.type)) {
            this.handleRemoveItemIfAllSelected(itemToRemove);
        }
        this.removeItem(item, triggeredByEvent);
    };
    NovoMultiPickerElement.prototype.removeItem = function (item, triggeredByEvent) {
        item.checked = false;
        this.deselectAll();
        this.removeValue(item);
        if (item.value !== 'ALL') {
            this.updateParentOrChildren(item, 'unselect');
        }
        if (triggeredByEvent) {
            this.modifyAffectedParentsOrChildren(false, item);
        }
    };
    NovoMultiPickerElement.prototype.removeValue = function (item) {
        var updatedValues = this.value[item.type].filter(function (x) { return x !== item.value; });
        this.value[item.type] = updatedValues;
        this.triggerValueUpdate();
        this.updateDisplayItems(item, 'remove');
    };
    NovoMultiPickerElement.prototype.onKeyDown = function (event) {
        if (event.keyCode === KeyCodes.BACKSPACE) {
            if (event.target && event.target.value.length === 0 && this.items.length) {
                if (event) {
                    event.stopPropagation();
                    event.preventDefault();
                }
                if (this.selected) {
                    this.remove(null, this.selected);
                }
                else {
                    this.select(event, this.items[this.items.length - 1]);
                }
            }
        }
    };
    NovoMultiPickerElement.prototype.allOfTypeSelected = function (type) {
        return this.items.filter(function (x) { return x.type === type && x.value === 'ALL'; }).length > 0;
    };
    NovoMultiPickerElement.prototype.modifyAllOfType = function (type, action) {
        var selecting = action === 'select';
        var allOfType = this.getAllOfType(type);
        allOfType.forEach(function (item) {
            item.checked = selecting;
            item.indeterminate = false;
        });
        if (selecting) {
            this.selectAll(allOfType, type);
        }
        else {
            this.items = __spread(this.items.filter(function (x) { return x.type !== type; }));
            this._items.next(this.items);
            this.value[type] = [];
        }
        if (this.selectAllOption) {
            this.updateAllParentsOrChildren(allOfType[0], action);
        }
        this.triggerValueUpdate();
    };
    NovoMultiPickerElement.prototype.triggerValueUpdate = function () {
        var _this = this;
        var updatedObject = {};
        this.types.forEach(function (x) { return (updatedObject[x.value] = _this.value[x.value]); });
        this.value = updatedObject;
    };
    NovoMultiPickerElement.prototype.selectAll = function (allOfType, type) {
        if (!this.selectAllOption) {
            return;
        }
        allOfType[0].checked = true;
        var values = allOfType.map(function (i) {
            return i.value;
        });
        // remove 'ALL' value
        values.splice(0, 1);
        this.value[type] = values;
        var updatedItems = this.items.filter(function (x) { return x.type !== type; });
        this.items = updatedItems;
        this.updateDisplayItems(allOfType[0], 'add');
    };
    NovoMultiPickerElement.prototype.handleRemoveItemIfAllSelected = function (item) {
        if (!this.selectAllOption) {
            return;
        }
        var type = item.type;
        var allOfType = this.getAllOfType(type);
        var allItem = allOfType[0];
        this.removeItem(allItem);
        allItem.indeterminate = true;
        var selectedItems = allOfType.filter(function (i) { return i.checked === true; });
        this.items = __spread(this.items, selectedItems);
        var values = selectedItems.map(function (i) {
            return i.value;
        });
        this.value[type] = __spread(values);
    };
    NovoMultiPickerElement.prototype.handleOutsideClick = function (event) {
        // If the elements doesn't contain the target element, it is an outside click
        if (!this.element.nativeElement.contains(event.target)) {
            this.blur.emit(event);
            this.deselectAll();
        }
    };
    NovoMultiPickerElement.prototype.getAllOfType = function (type) {
        return this._options.filter(function (x) { return x.type === type; })[0].originalData;
    };
    NovoMultiPickerElement.prototype.updateParentOrChildren = function (item, action) {
        if (this.strictRelationship && item.isParentOf) {
            this.updateChildrenValue(item, action);
        }
        else if (item.isChildOf && this.selectAllOption) {
            this.updateParentValue(item, action);
        }
    };
    NovoMultiPickerElement.prototype.modifyAffectedParentsOrChildren = function (selecting, itemChanged) {
        var _this = this;
        if (!itemChanged.isChildOf && !itemChanged.isParentOf) {
            return;
        }
        var parent = this.types.filter(function (x) { return !!x.isParentOf; })[0];
        var parentType = parent.value;
        var allParentType = this.getAllOfType(parentType);
        var childType = allParentType[0].isParentOf;
        var allChildren = this.getAllOfType(childType);
        var allCheckedChildren = allChildren.filter(function (x) { return !!x.checked; });
        allParentType.forEach(function (obj) {
            if (obj.value === 'ALL') {
                return;
            }
            var selectedChildrenOfParent = allCheckedChildren.filter(function (x) {
                return x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
            });
            if (selecting) {
                if (obj.checked) {
                    return;
                }
                obj.indeterminate = selectedChildrenOfParent.length > 0;
            }
            else {
                var allChildrenOfParent = allChildren.filter(function (x) {
                    return x.value !== 'ALL' && x[parentType].filter(function (y) { return y === obj.value; }).length > 0;
                });
                if (selectedChildrenOfParent.length > 0) {
                    if (obj.checked) {
                        if (_this.strictRelationship && allChildrenOfParent.length !== selectedChildrenOfParent.length) {
                            obj.indeterminate = true;
                            obj.checked = false;
                            _this.removeValue(obj);
                            _this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                    else {
                        obj.indeterminate = true;
                    }
                    if (_this.strictRelationship && itemChanged.type !== parentType) {
                        if (obj.checked) {
                            obj.checked = false;
                            _this.removeValue(obj);
                            _this.addIndividualChildren(selectedChildrenOfParent);
                        }
                    }
                }
                else {
                    obj.indeterminate = false;
                    if (allChildrenOfParent.length === 0) {
                        // if it has no children and is checked, it should stay checked
                        return;
                    }
                    else if (_this.strictRelationship && itemChanged.type !== parentType) {
                        _this.remove(null, obj);
                    }
                }
            }
        });
        if (this.selectAllOption) {
            this.updateIndeterminateStates(allParentType, allChildren, allCheckedChildren);
        }
    };
    NovoMultiPickerElement.prototype.updateAllParentsOrChildren = function (allItem, action) {
        if (allItem.isParentOf) {
            this.updateAllChildrenValue(allItem, action);
        }
        else if (allItem.isChildOf) {
            this.updateAllParentValue(allItem, action);
        }
    };
    NovoMultiPickerElement.prototype.updateAllChildrenValue = function (item, action) {
        var _this = this;
        var selecting = action === 'select';
        var childType = item.isParentOf;
        var potentialChildren = this.getAllOfType(childType);
        if (this.selectAllOption && this.allOfTypeSelected(childType) && !selecting) {
            this.remove(null, potentialChildren[0]);
            return;
        }
        potentialChildren.forEach(function (x) {
            if (x.value === 'ALL' && !x.checked) {
                if (selecting) {
                    x.checked = true;
                }
                x.indeterminate = selecting;
            }
            else {
                if (x.checked && !selecting) {
                    _this.remove(null, x);
                }
                x.checked = selecting;
            }
        });
    };
    NovoMultiPickerElement.prototype.updateAllParentValue = function (item, action) {
        var selecting = action === 'select';
        var parentType = item.isChildOf;
        var potentialParents = this.getAllOfType(parentType);
        potentialParents.forEach(function (x) {
            if (!x.checked) {
                x.indeterminate = selecting;
            }
        });
    };
    NovoMultiPickerElement.prototype.updateIndeterminateStates = function (allParentType, allChildren, allCheckedChildren) {
        var allCheckedOrIndeterminateParents = allParentType.filter(function (x) { return (!!x.checked || !!x.indeterminate) && x.value !== 'ALL'; });
        var isParentIndeterminate = !!allParentType[0].checked ? false : allCheckedOrIndeterminateParents.length > 0;
        var isChildIndeterminate = !!allChildren[0].checked ? false : allCheckedChildren.length > 0;
        this.setIndeterminateState(allParentType, isParentIndeterminate);
        this.setIndeterminateState(allChildren, isChildIndeterminate);
    };
    NovoMultiPickerElement.prototype.updateChildrenValue = function (parent, action) {
        var _this = this;
        var selecting = action === 'select';
        var childType = parent.isParentOf;
        var potentialChildren = this.getAllOfType(childType);
        potentialChildren.forEach(function (x) {
            if (x.value === 'ALL') {
                return;
            }
            if (x[parent.type].filter(function (y) { return y === parent.value; }).length > 0) {
                if (x.checked && !selecting) {
                    x.checked = false;
                    if (_this.allOfTypeSelected(childType)) {
                        _this.handleRemoveItemIfAllSelected(x);
                    }
                    else {
                        _this.removeValue(x);
                    }
                }
                x.checked = selecting;
            }
        });
    };
    NovoMultiPickerElement.prototype.updateParentValue = function (child, action) {
        var allParentType = this.getAllOfType(child.isChildOf);
        if (allParentType[0].checked && action !== 'select') {
            this.handleRemoveItemIfAllSelected(allParentType[0]);
        }
    };
    NovoMultiPickerElement.prototype.addIndividualChildren = function (children) {
        var _this = this;
        var parentAlreadySelected = false;
        children.forEach(function (x) {
            if (x.isChildOf) {
                // only add children if their parents are not already selected
                x[x.isChildOf].forEach(function (parent) {
                    if (_this.value[x.isChildOf].filter(function (p) { return p === parent; }).length > 0) {
                        parentAlreadySelected = true;
                    }
                });
            }
            if (_this.value[x.type].filter(function (item) { return item === x.value; }).length === 0 && !parentAlreadySelected) {
                _this.add(x);
            }
        });
    };
    NovoMultiPickerElement.prototype.setInitialValue = function (model) {
        var _this = this;
        this.items = [];
        this.value = model || {};
        if (!this.types) {
            return;
        }
        this.types.forEach(function (typeObj) {
            var type = typeObj.value;
            if (_this.value[type]) {
                var indeterminateIsSet_1 = false;
                var options = _this.updateAllItemState(type);
                var optionsByType_1 = options.allOfType;
                var allSelected_1 = options.allOfTypeSelected;
                _this.value[type].forEach(function (item) {
                    if (!allSelected_1 && !indeterminateIsSet_1) {
                        indeterminateIsSet_1 = true;
                        _this.setIndeterminateState(optionsByType_1, true);
                    }
                    var value = optionsByType_1.filter(function (x) { return x.value === item; })[0];
                    value.checked = true;
                    if (!allSelected_1) {
                        _this.updateDisplayItems(value, 'add');
                    }
                    if (_this.strictRelationship && value.isParentOf) {
                        _this.updateChildrenValue(value, 'select');
                    }
                });
                if (typeObj.isChildOf) {
                    _this.modifyAffectedParentsOrChildren(true, { value: type, isChildOf: true });
                }
            }
            else {
                _this.value[type] = [];
            }
        });
    };
    NovoMultiPickerElement.prototype.allItemsSelected = function (optionsByType, type) {
        return this.value[type].length === optionsByType.length - 1;
    };
    // Set touched on blur
    NovoMultiPickerElement.prototype.onTouched = function (e) {
        this.element.nativeElement.classList.remove('selected');
        this.onModelTouched();
        this.blur.emit(e);
    };
    NovoMultiPickerElement.prototype.writeValue = function (model) {
        this.model = model;
        this.setInitialValue(model);
    };
    NovoMultiPickerElement.prototype.registerOnChange = function (fn) {
        this.onModelChange = fn;
    };
    NovoMultiPickerElement.prototype.registerOnTouched = function (fn) {
        this.onModelTouched = fn;
    };
    NovoMultiPickerElement.ɵfac = function NovoMultiPickerElement_Factory(t) { return new (t || NovoMultiPickerElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService)); };
    NovoMultiPickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoMultiPickerElement, selectors: [["multi-picker"]], hostVars: 2, hostBindings: function NovoMultiPickerElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("with-value", ctx.items.length > 0);
        } }, inputs: { source: "source", placeholder: "placeholder", types: "types", value: "value" }, outputs: { changed: "changed", focus: "focus", blur: "blur" }, features: [ɵɵProvidersFeature([CHIPS_VALUE_ACCESSOR$2])], decls: 8, vars: 14, consts: [[3, "type", "selected", "remove", "select", 4, "ngFor", "ngForOf"], [4, "ngIf"], [1, "chip-input-container"], ["clearValueOnSelect", "true", 3, "config", "placeholder", "overrideElement", "select", "keydown", "focus", "blur"], [1, "bhi-search"], ["class", "clear-all", 3, "click", 4, "ngIf"], [3, "type", "remove", "select"], [1, "summary"], [4, "ngFor", "ngForOf"], [1, "clear-all", 3, "click"], [1, "bhi-times"]], template: function NovoMultiPickerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoMultiPickerElement_chip_0_Template, 2, 4, "chip", 0);
            ɵɵpipe(1, "slice");
            ɵɵpipe(2, "async");
            ɵɵtemplate(3, NovoMultiPickerElement_div_3_Template, 3, 1, "div", 1);
            ɵɵelementStart(4, "div", 2);
            ɵɵelementStart(5, "novo-picker", 3);
            ɵɵlistener("select", function NovoMultiPickerElement_Template_novo_picker_select_5_listener($event) { return ctx.clickOption($event); })("keydown", function NovoMultiPickerElement_Template_novo_picker_keydown_5_listener($event) { return ctx.onKeyDown($event); })("focus", function NovoMultiPickerElement_Template_novo_picker_focus_5_listener($event) { return ctx.onFocus($event); })("blur", function NovoMultiPickerElement_Template_novo_picker_blur_5_listener($event) { return ctx.onTouched($event); });
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelement(6, "i", 4);
            ɵɵtemplate(7, NovoMultiPickerElement_label_7_Template, 3, 1, "label", 5);
        } if (rf & 2) {
            ɵɵproperty("ngForOf", ɵɵpipeBind3(1, 8, ɵɵpipeBind1(2, 12, ctx._items), 0, ctx.chipsCount));
            ɵɵadvance(3);
            ɵɵproperty("ngIf", ctx.items.length > ctx.chipsCount);
            ɵɵadvance(2);
            ɵɵproperty("config", ctx.source)("placeholder", ctx.placeholder)("overrideElement", ctx.element);
            ɵɵadvance(1);
            ɵɵclassProp("has-value", ctx.items.length);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.items.length);
        } }, directives: [NgForOf, NgIf, NovoPickerElement, NovoChipElement], pipes: [SlicePipe, AsyncPipe], encapsulation: 2 });
    return NovoMultiPickerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMultiPickerElement, [{
        type: Component,
        args: [{
                selector: 'multi-picker',
                providers: [CHIPS_VALUE_ACCESSOR$2],
                template: "\n    <chip\n      *ngFor=\"let item of (_items | async | slice: 0:chipsCount)\"\n      [type]=\"item.type\"\n      [class.selected]=\"item == selected\"\n      (remove)=\"removeFromDisplay($event, item)\"\n      (select)=\"select($event, item)\"\n    >\n      {{ item.label }}\n    </chip>\n    <div *ngIf=\"items.length > chipsCount\">\n      <ul class=\"summary\">\n        <li *ngFor=\"let type of notShown\">+ {{ type.count }} {{ labels.more }} {{ type.type }}</li>\n      </ul>\n    </div>\n    <div class=\"chip-input-container\">\n      <novo-picker\n        clearValueOnSelect=\"true\"\n        [config]=\"source\"\n        [placeholder]=\"placeholder\"\n        (select)=\"clickOption($event)\"\n        (keydown)=\"onKeyDown($event)\"\n        (focus)=\"onFocus($event)\"\n        (blur)=\"onTouched($event)\"\n        [overrideElement]=\"element\"\n      >\n      </novo-picker>\n    </div>\n    <i class=\"bhi-search\" [class.has-value]=\"items.length\"></i>\n    <label class=\"clear-all\" *ngIf=\"items.length\" (click)=\"clearValue()\">{{ labels.clearAll }} <i class=\"bhi-times\"></i></label>\n  ",
                host: {
                    '[class.with-value]': 'items.length > 0',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }]; }, { source: [{
            type: Input
        }], placeholder: [{
            type: Input
        }], types: [{
            type: Input
        }], changed: [{
            type: Output
        }], focus: [{
            type: Output
        }], blur: [{
            type: Output
        }], value: [{
            type: Input
        }] }); })();

// NG2
var NovoMultiPickerModule = /** @class */ (function () {
    function NovoMultiPickerModule() {
    }
    NovoMultiPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoMultiPickerModule });
    NovoMultiPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoMultiPickerModule_Factory(t) { return new (t || NovoMultiPickerModule)(); }, imports: [[CommonModule, FormsModule, NovoPickerModule, NovoChipsModule]] });
    return NovoMultiPickerModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoMultiPickerModule, { declarations: [NovoMultiPickerElement], imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule], exports: [NovoMultiPickerElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoMultiPickerModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoPickerModule, NovoChipsModule],
                declarations: [NovoMultiPickerElement],
                exports: [NovoMultiPickerElement],
            }]
    }], null, null); })();

var GlobalRef = /** @class */ (function () {
    function GlobalRef() {
    }
    return GlobalRef;
}());
var BrowserGlobalRef = /** @class */ (function (_super) {
    __extends(BrowserGlobalRef, _super);
    function BrowserGlobalRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(BrowserGlobalRef.prototype, "nativeGlobal", {
        get: function () {
            return window;
        },
        enumerable: true,
        configurable: true
    });
    BrowserGlobalRef.ɵfac = function BrowserGlobalRef_Factory(t) { return ɵBrowserGlobalRef_BaseFactory(t || BrowserGlobalRef); };
    BrowserGlobalRef.ɵprov = ɵɵdefineInjectable({ token: BrowserGlobalRef, factory: BrowserGlobalRef.ɵfac });
    return BrowserGlobalRef;
}(GlobalRef));
var ɵBrowserGlobalRef_BaseFactory = ɵɵgetInheritedFactory(BrowserGlobalRef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(BrowserGlobalRef, [{
        type: Injectable
    }], null, null); })();
var NodeGlobalRef = /** @class */ (function (_super) {
    __extends(NodeGlobalRef, _super);
    function NodeGlobalRef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NodeGlobalRef.prototype, "nativeGlobal", {
        get: function () {
            throw new Error('global doesn\'t compile for some reason');
            // return global as Global;
        },
        enumerable: true,
        configurable: true
    });
    return NodeGlobalRef;
}(GlobalRef));

var LocalStorageService = /** @class */ (function () {
    function LocalStorageService() {
    }
    LocalStorageService.prototype.setItem = function (key, value) {
        localStorage.setItem(key, value);
    };
    LocalStorageService.prototype.getItem = function (key) {
        return localStorage.getItem(key);
    };
    LocalStorageService.prototype.removeItem = function (key) {
        localStorage.removeItem(key);
    };
    LocalStorageService.ɵfac = function LocalStorageService_Factory(t) { return new (t || LocalStorageService)(); };
    LocalStorageService.ɵprov = ɵɵdefineInjectable({ token: LocalStorageService, factory: LocalStorageService.ɵfac });
    return LocalStorageService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(LocalStorageService, [{
        type: Injectable
    }], null, null); })();

var GooglePlacesService = /** @class */ (function () {
    function GooglePlacesService(_http, platformId, _global, _localStorageService) {
        this._http = _http;
        this.platformId = platformId;
        this._global = _global;
        this._localStorageService = _localStorageService;
    }
    GooglePlacesService.prototype.getPredictions = function (url, query) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?query=' + query).subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    GooglePlacesService.prototype.getLatLngDetail = function (url, lat, lng) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?lat=' + lat + '&lng=' + lng).subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    GooglePlacesService.prototype.getPlaceDetails = function (url, placeId) {
        var _this = this;
        return new Promise(function (resolve) {
            _this._http.get(url + '?query=' + placeId).subscribe(function (data) {
                if (data) {
                    resolve(data);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    GooglePlacesService.prototype.getGeoCurrentLocation = function () {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                var _window = _this._global.nativeGlobal;
                if (_window.navigator.geolocation) {
                    _window.navigator.geolocation.getCurrentPosition(function (pos) {
                        var latlng = { lat: parseFloat(pos.coords.latitude + ''), lng: parseFloat(pos.coords.longitude + '') };
                        resolve(latlng);
                    });
                }
                else {
                    resolve(false);
                }
            }
            else {
                resolve(false);
            }
        });
    };
    GooglePlacesService.prototype.getGeoLatLngDetail = function (latlng) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                var _window = _this._global.nativeGlobal;
                var geocoder = new _window.google.maps.Geocoder();
                geocoder.geocode({ location: latlng }, function (results, status) {
                    if (status === 'OK') {
                        _this.getGeoPlaceDetail(results[0].place_id).then(function (result) {
                            if (result) {
                                resolve(result);
                            }
                            else {
                                resolve(false);
                            }
                        });
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    GooglePlacesService.prototype.getGeoPrediction = function (params) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                var _window = _this._global.nativeGlobal;
                var placesService = new _window.google.maps.places.AutocompleteService();
                var queryInput = {};
                var promiseArr = [];
                if (params.countryRestriction.length) {
                    queryInput = {
                        input: params.query,
                        componentRestrictions: { country: params.countryRestriction },
                    };
                }
                else {
                    queryInput = {
                        input: params.query,
                    };
                }
                if (params.geoLocation) {
                    queryInput.location = new _window.google.maps.LatLng(parseFloat(params.geoLocation[0]), parseFloat(params.geoLocation[1]));
                    queryInput.radius = params.radius;
                }
                if (params.geoTypes.length) {
                    for (var i = 0; i < params.geoTypes.length; i++) {
                        var _tempQuery = queryInput;
                        _tempQuery['types'] = new Array(params.geoTypes[i]);
                        promiseArr.push(_this.geoPredictionCall(placesService, _tempQuery));
                    }
                }
                else {
                    promiseArr.push(_this.geoPredictionCall(placesService, queryInput));
                }
                Promise.all(promiseArr).then(function (values) {
                    var val = values;
                    if (val.length > 1) {
                        var _tempArr = [];
                        for (var j = 0; j < val.length; j++) {
                            if (val[j] && val[j].length) {
                                _tempArr = _tempArr.concat(val[j]);
                            }
                        }
                        _tempArr = _this.getUniqueResults(_tempArr);
                        resolve(_tempArr);
                    }
                    else {
                        resolve(values[0]);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    GooglePlacesService.prototype.getGeoPlaceDetail = function (placeId) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                var _window = _this._global.nativeGlobal;
                var placesService = new _window.google.maps.places.PlacesService(document.createElement('div'));
                placesService.getDetails({ placeId: placeId }, function (result, status) {
                    if (result === null || result.length === 0) {
                        _this.getGeoPaceDetailByReferance(result.referance).then(function (referanceData) {
                            if (!referanceData) {
                                resolve(false);
                            }
                            else {
                                resolve(referanceData);
                            }
                        });
                    }
                    else {
                        resolve(result);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    GooglePlacesService.prototype.getGeoPaceDetailByReferance = function (referance) {
        var _this = this;
        return new Promise(function (resolve) {
            if (isPlatformBrowser(_this.platformId)) {
                var _window_1 = _this._global.nativeGlobal;
                var placesService = new _window_1.google.maps.places.PlacesService();
                placesService.getDetails({ reference: referance }, function (result, status) {
                    if (status === _window_1.google.maps.places.PlacesServiceStatus.OK) {
                        resolve(result);
                    }
                    else {
                        resolve(false);
                    }
                });
            }
            else {
                resolve(false);
            }
        });
    };
    GooglePlacesService.prototype.addRecentList = function (localStorageName, result, itemSavedLength) {
        var _this = this;
        this.getRecentList(localStorageName).then(function (data) {
            if (data) {
                for (var i = 0; i < data.length; i++) {
                    if (data[i].description === result.description) {
                        data.splice(i, 1);
                        break;
                    }
                }
                data.unshift(result);
                if (data.length > itemSavedLength) {
                    data.pop();
                }
                _this._localStorageService.setItem(localStorageName, JSON.stringify(data));
            }
        });
    };
    GooglePlacesService.prototype.getRecentList = function (localStorageName) {
        var _this = this;
        return new Promise(function (resolve) {
            var value = _this._localStorageService.getItem(localStorageName);
            if (value) {
                value = JSON.parse(value);
            }
            else {
                value = [];
            }
            resolve(value);
        });
    };
    GooglePlacesService.prototype.getUniqueResults = function (arr) {
        return Array.from(arr.reduce(function (m, t) { return m.set(t.place_id, t); }, new Map()).values());
    };
    GooglePlacesService.prototype.geoPredictionCall = function (placesService, queryInput) {
        var _window = this._global.nativeGlobal;
        return new Promise(function (resolve) {
            placesService.getPlacePredictions(queryInput, function (result, status) {
                if (status === _window.google.maps.places.PlacesServiceStatus.OK) {
                    resolve(result);
                }
                else {
                    resolve(false);
                }
            });
        });
    };
    GooglePlacesService.ɵfac = function GooglePlacesService_Factory(t) { return new (t || GooglePlacesService)(ɵɵinject(HttpClient), ɵɵinject(PLATFORM_ID), ɵɵinject(GlobalRef), ɵɵinject(LocalStorageService)); };
    GooglePlacesService.ɵprov = ɵɵdefineInjectable({ token: GooglePlacesService, factory: GooglePlacesService.ɵfac });
    return GooglePlacesService;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(GooglePlacesService, [{
        type: Injectable
    }], function () { return [{ type: HttpClient }, { type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: GlobalRef }, { type: LocalStorageService }]; }, null); })();

function PlacesListComponent_novo_list_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 2);
    ɵɵlistener("click", function PlacesListComponent_novo_list_item_1_Template_novo_list_item_click_0_listener($event) { ɵɵrestoreView(_r4); var $index_r2 = ctx.index; var ctx_r3 = ɵɵnextContext(); return ctx_r3.selectedListNode($event, $index_r2); });
    ɵɵelementStart(1, "item-header");
    ɵɵelement(2, "item-avatar", 3);
    ɵɵelementStart(3, "item-title");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementStart(5, "item-content");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var data_r1 = ctx.$implicit;
    ɵɵadvance(4);
    ɵɵtextInterpolate((data_r1.structured_formatting == null ? null : data_r1.structured_formatting.main_text) ? data_r1.structured_formatting.main_text : data_r1.description);
    ɵɵadvance(2);
    ɵɵtextInterpolate(data_r1.structured_formatting == null ? null : data_r1.structured_formatting.secondary_text);
} }
var PlacesListComponent = /** @class */ (function () {
    function PlacesListComponent(platformId, _elmRef, _global, _googlePlacesService) {
        this.platformId = platformId;
        this._elmRef = _elmRef;
        this._global = _global;
        this._googlePlacesService = _googlePlacesService;
        this.term = '';
        this.termChange = new EventEmitter();
        this.select = new EventEmitter();
        this.locationInput = '';
        this.gettingCurrentLocationFlag = false;
        this.dropdownOpen = false;
        this.recentDropdownOpen = false;
        this.queryItems = [];
        this.isSettingsError = false;
        this.settingsErrorMsg = '';
        this.settings = {};
        this.moduleinit = false;
        this.selectedDataIndex = -1;
        this.recentSearchData = [];
        this.userSelectedOption = '';
        this.defaultSettings = {
            geoPredictionServerUrl: '',
            geoLatLangServiceUrl: '',
            geoLocDetailServerUrl: '',
            geoCountryRestriction: [],
            geoTypes: [],
            geoLocation: [],
            geoRadius: 0,
            serverResponseListHierarchy: [],
            serverResponseatLangHierarchy: [],
            serverResponseDetailHierarchy: [],
            resOnSearchButtonClickOnly: false,
            useGoogleGeoApi: true,
            inputPlaceholderText: 'Enter Area Name',
            inputString: '',
            showSearchButton: true,
            showRecentSearch: true,
            showCurrentLocation: true,
            recentStorageName: 'recentSearches',
            noOfRecentSearchSave: 5,
            currentLocIconUrl: '',
            searchIconUrl: '',
            locationIconUrl: '',
        };
    }
    PlacesListComponent.prototype.ngOnInit = function () {
        if (!this.moduleinit) {
            this.moduleInit();
        }
    };
    PlacesListComponent.prototype.ngOnChanges = function () {
        this.moduleinit = true;
        this.moduleInit();
        this.searchinputCallback(null);
    };
    // function called when click event happens in input box. (Binded with view)
    PlacesListComponent.prototype.searchinputClickCallback = function (event) {
        event.target.select();
        this.searchinputCallback(event);
    };
    // function called when there is a change in input. (Binded with view)
    PlacesListComponent.prototype.searchinputCallback = function (event) {
        var inputVal = this.locationInput;
        if (inputVal) {
            this.getListQuery(inputVal);
        }
        else {
            this.queryItems = [];
            if (this.userSelectedOption) {
                this.userQuerySubmit('false');
            }
            this.userSelectedOption = '';
            if (this.settings.showRecentSearch) {
                this.showRecentSearch();
            }
            else {
                this.dropdownOpen = false;
            }
        }
    };
    // function to execute when user hover over autocomplete list.(binded with view)
    PlacesListComponent.prototype.activeListNode = function (index) {
        for (var i = 0; i < this.queryItems.length; i++) {
            if (index === i) {
                this.queryItems[i].active = true;
                this.selectedDataIndex = index;
            }
            else {
                this.queryItems[i].active = false;
            }
        }
    };
    // function to execute when user select the autocomplete list.(binded with view)
    PlacesListComponent.prototype.selectedListNode = function (event, index) {
        this.dropdownOpen = false;
        if (this.recentDropdownOpen) {
            this.setRecentLocation(this.queryItems[index]);
        }
        else {
            this.getPlaceLocationInfo(this.queryItems[index]);
        }
    };
    // function to close the autocomplete list when clicked outside. (binded with view)
    PlacesListComponent.prototype.closeAutocomplete = function (event) {
        if (!this._elmRef.nativeElement.contains(event.target)) {
            this.selectedDataIndex = -1;
            this.dropdownOpen = false;
        }
    };
    // function to manually trigger the callback to parent component when clicked search button.
    PlacesListComponent.prototype.userQuerySubmit = function (selectedOption) {
        var _userOption = selectedOption === 'false' ? '' : this.userSelectedOption;
        if (_userOption) {
            this.select.emit(this.userSelectedOption);
        }
        else {
            // this.select.emit(false);
        }
    };
    // function to get user current location from the device.
    PlacesListComponent.prototype.currentLocationSelected = function () {
        var _this = this;
        if (isPlatformBrowser(this.platformId)) {
            this.gettingCurrentLocationFlag = true;
            this.dropdownOpen = false;
            this._googlePlacesService.getGeoCurrentLocation().then(function (result) {
                if (!result) {
                    _this.gettingCurrentLocationFlag = false;
                }
                else {
                    _this.getCurrentLocationInfo(result);
                }
            });
        }
    };
    // module initialization happens. function called by ngOninit and ngOnChange
    PlacesListComponent.prototype.moduleInit = function () {
        this.settings = this.setUserSettings();
        // condition to check if Radius is set without location detail.
        if (this.settings.geoRadius) {
            if (this.settings.geoLocation.length !== 2) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Radius should be used with GeoLocation. Please use "geoLocation" key to set lat and lng. ';
            }
        }
        // condition to check if lat and lng is set and radious is not set then it will set to 20,000KM by default
        if (this.settings.geoLocation.length === 2 && !this.settings.geoRadius) {
            this.settings.geoRadius = 20000000;
        }
        if (this.settings.showRecentSearch) {
            this.getRecentLocations();
        }
        if (!this.settings.useGoogleGeoApi) {
            if (!this.settings.geoPredictionServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Prediction custom server url is not defined. Please use "geoPredictionServerUrl" key to set. ';
            }
            if (!this.settings.geoLatLangServiceUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Latitude and longitude custom server url is not defined. Please use "geoLatLangServiceUrl" key to set. ';
            }
            if (!this.settings.geoLocDetailServerUrl) {
                this.isSettingsError = true;
                this.settingsErrorMsg =
                    this.settingsErrorMsg + 'Location detail custom server url is not defined. Please use "geoLocDetailServerUrl" key to set. ';
            }
        }
        this.locationInput = this.term;
    };
    // function to process the search query when pressed enter.
    PlacesListComponent.prototype.processSearchQuery = function () {
        if (this.queryItems.length) {
            if (this.selectedDataIndex > -1) {
                this.selectedListNode(null, this.selectedDataIndex);
            }
            else {
                this.selectedListNode(null, 0);
            }
        }
    };
    // function to set user settings if it is available.
    PlacesListComponent.prototype.setUserSettings = function () {
        var e_1, _a;
        var _tempObj = {};
        if (this.userSettings && typeof this.userSettings === 'object') {
            var keys = Object.keys(this.defaultSettings);
            try {
                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                    var value = keys_1_1.value;
                    _tempObj[value] = this.userSettings[value] !== undefined ? this.userSettings[value] : this.defaultSettings[value];
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return _tempObj;
        }
        else {
            return this.defaultSettings;
        }
    };
    // function to get the autocomplete list based on user input.
    PlacesListComponent.prototype.getListQuery = function (value) {
        var _this = this;
        this.recentDropdownOpen = false;
        if (this.settings.useGoogleGeoApi) {
            var _tempParams = {
                query: value,
                countryRestriction: this.settings.geoCountryRestriction,
                geoTypes: this.settings.geoTypes,
            };
            if (this.settings.geoLocation.length === 2) {
                _tempParams.geoLocation = this.settings.geoLocation;
                _tempParams.radius = this.settings.geoRadius;
            }
            this._googlePlacesService.getGeoPrediction(_tempParams).then(function (result) {
                _this.updateListItem(result);
            });
        }
        else {
            this._googlePlacesService.getPredictions(this.settings.geoPredictionServerUrl, value).then(function (result) {
                result = _this.extractServerList(_this.settings.serverResponseListHierarchy, result);
                _this.updateListItem(result);
            });
        }
    };
    // function to extratc custom data which is send by the server.
    PlacesListComponent.prototype.extractServerList = function (arrayList, data) {
        var e_2, _a;
        if (arrayList.length) {
            var _tempData = data;
            try {
                for (var arrayList_1 = __values(arrayList), arrayList_1_1 = arrayList_1.next(); !arrayList_1_1.done; arrayList_1_1 = arrayList_1.next()) {
                    var key = arrayList_1_1.value;
                    _tempData = _tempData[key];
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (arrayList_1_1 && !arrayList_1_1.done && (_a = arrayList_1.return)) _a.call(arrayList_1);
                }
                finally { if (e_2) throw e_2.error; }
            }
            return _tempData;
        }
        else {
            return data;
        }
    };
    // function to update the predicted list.
    PlacesListComponent.prototype.updateListItem = function (listData) {
        this.queryItems = listData ? listData : [];
        this.dropdownOpen = true;
    };
    // function to show the recent search result.
    PlacesListComponent.prototype.showRecentSearch = function () {
        var _this = this;
        this.recentDropdownOpen = true;
        this.dropdownOpen = true;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (result) {
            if (result) {
                _this.queryItems = result;
            }
            else {
                _this.queryItems = [];
            }
        });
    };
    // //function to navigate through list when up and down keyboard key is pressed;
    // private navigateInList(keyCode: number): any {
    //     let arrayIndex: number = 0;
    //     //arrow down
    //     if (keyCode === 40) {
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex + 1) <= (this.queryItems.length - 1)) ? (this.selectedDataIndex + 1) : 0;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else if (keyCode === 38) {//arrow up
    //         if (this.selectedDataIndex >= 0) {
    //             arrayIndex = ((this.selectedDataIndex - 1) >= 0) ? (this.selectedDataIndex - 1) : (this.queryItems.length - 1);
    //         } else {
    //             arrayIndex = this.queryItems.length - 1;
    //         }
    //         this.activeListNode(arrayIndex);
    //     } else {
    //         this.processSearchQuery();
    //     }
    // }
    // function to execute to get location detail based on latitude and longitude.
    PlacesListComponent.prototype.getCurrentLocationInfo = function (latlng) {
        var _this = this;
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoLatLngDetail(latlng).then(function (result) {
                if (result) {
                    _this.setRecentLocation(result);
                }
                _this.gettingCurrentLocationFlag = false;
            });
        }
        else {
            this._googlePlacesService.getLatLngDetail(this.settings.geoLatLangServiceUrl, latlng.lat, latlng.lng).then(function (result) {
                if (result) {
                    result = _this.extractServerList(_this.settings.serverResponseatLangHierarchy, result);
                    _this.setRecentLocation(result);
                }
                _this.gettingCurrentLocationFlag = false;
            });
        }
    };
    // function to retrive the location info based on goovle place id.
    PlacesListComponent.prototype.getPlaceLocationInfo = function (selectedData) {
        var _this = this;
        if (this.settings.useGoogleGeoApi) {
            this._googlePlacesService.getGeoPlaceDetail(selectedData.place_id).then(function (data) {
                if (data) {
                    _this.setRecentLocation(data);
                }
            });
        }
        else {
            this._googlePlacesService.getPlaceDetails(this.settings.geoLocDetailServerUrl, selectedData.place_id).then(function (result) {
                if (result) {
                    result = _this.extractServerList(_this.settings.serverResponseDetailHierarchy, result);
                    _this.setRecentLocation(result);
                }
            });
        }
    };
    // function to store the selected user search in the localstorage.
    PlacesListComponent.prototype.setRecentLocation = function (data) {
        data = JSON.parse(JSON.stringify(data));
        data.description = data.description ? data.description : data.formatted_address;
        data.active = false;
        this.selectedDataIndex = -1;
        this.locationInput = data.description;
        if (this.settings.showRecentSearch) {
            this._googlePlacesService.addRecentList(this.settings.recentStorageName, data, this.settings.noOfRecentSearchSave);
            this.getRecentLocations();
        }
        this.userSelectedOption = data;
        // below code will execute only when user press enter or select any option selection and it emit a callback to the parent component.
        if (!this.settings.resOnSearchButtonClickOnly) {
            this.select.emit(data);
            this.termChange.emit(data);
        }
    };
    // function to retrive the stored recent user search from the localstorage.
    PlacesListComponent.prototype.getRecentLocations = function () {
        var _this = this;
        this._googlePlacesService.getRecentList(this.settings.recentStorageName).then(function (data) {
            _this.recentSearchData = data && data.length ? data : [];
        });
    };
    PlacesListComponent.ɵfac = function PlacesListComponent_Factory(t) { return new (t || PlacesListComponent)(ɵɵdirectiveInject(PLATFORM_ID), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(GlobalRef), ɵɵdirectiveInject(GooglePlacesService)); };
    PlacesListComponent.ɵcmp = ɵɵdefineComponent({ type: PlacesListComponent, selectors: [["google-places-list"]], inputs: { userSettings: "userSettings", term: "term" }, outputs: { termChange: "termChange", select: "select" }, features: [ɵɵNgOnChangesFeature], decls: 2, vars: 1, consts: [["direction", "vertical"], [3, "click", 4, "ngFor", "ngForOf"], [3, "click"], ["icon", "location"]], template: function PlacesListComponent_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-list", 0);
            ɵɵtemplate(1, PlacesListComponent_novo_list_item_1_Template, 7, 2, "novo-list-item", 1);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngForOf", ctx.queryItems);
        } }, directives: [NovoListElement, NgForOf, NovoListItemElement, NovoItemHeaderElement, NovoItemAvatarElement, NovoItemTitleElement, NovoItemContentElement], encapsulation: 2 });
    return PlacesListComponent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(PlacesListComponent, [{
        type: Component,
        args: [{
                selector: 'google-places-list',
                template: "\n        <novo-list direction=\"vertical\">\n            <novo-list-item *ngFor=\"let data of queryItems;let $index = index\" (click)=\"selectedListNode($event, $index)\">\n                <item-header>\n                    <item-avatar icon=\"location\"></item-avatar>\n                    <item-title>{{data.structured_formatting?.main_text ? data.structured_formatting.main_text : data.description}}</item-title>\n                </item-header>\n                <item-content>{{data.structured_formatting?.secondary_text}}</item-content>\n            </novo-list-item>\n        </novo-list>\n    ",
            }]
    }], function () { return [{ type: Object, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ElementRef }, { type: GlobalRef }, { type: GooglePlacesService }]; }, { userSettings: [{
            type: Input
        }], term: [{
            type: Input
        }], termChange: [{
            type: Output
        }], select: [{
            type: Output
        }] }); })();

var GooglePlacesModule = /** @class */ (function () {
    function GooglePlacesModule() {
    }
    GooglePlacesModule.ɵmod = ɵɵdefineNgModule({ type: GooglePlacesModule });
    GooglePlacesModule.ɵinj = ɵɵdefineInjector({ factory: function GooglePlacesModule_Factory(t) { return new (t || GooglePlacesModule)(); }, providers: [GooglePlacesService], imports: [[CommonModule, HttpClientModule, FormsModule, NovoListModule]] });
    return GooglePlacesModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(GooglePlacesModule, { declarations: [PlacesListComponent], imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule], exports: [PlacesListComponent] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(GooglePlacesModule, [{
        type: NgModule,
        args: [{
                declarations: [PlacesListComponent],
                imports: [CommonModule, HttpClientModule, FormsModule, NovoListModule],
                exports: [PlacesListComponent],
                providers: [GooglePlacesService],
            }]
    }], null, null); })();

var _c0$O = ["popoverDiv"];
var _c1$t = ["*"];
var PopOverContent = /** @class */ (function () {
    function PopOverContent(element, cdr) {
        this.element = element;
        this.cdr = cdr;
        this.placement = 'top';
        this.animation = true;
        this.onCloseFromOutside = new EventEmitter();
        this.top = -10000;
        this.left = -10000;
        this.displayType = 'none';
        this.isHidden = false;
    }
    PopOverContent.prototype.ngAfterViewInit = function () {
        this.show();
        this.cdr.detectChanges();
    };
    PopOverContent.prototype.toggle = function () {
        if (this.isHidden) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    PopOverContent.prototype.show = function () {
        if (!this.popover || !this.popover.getElement()) {
            return;
        }
        var p = this.positionElements(this.popover.getElement(), this.popoverDiv.nativeElement, this.placement);
        this.displayType = 'block';
        this.top = p.top;
        this.left = p.left;
        this.isHidden = false;
    };
    PopOverContent.prototype.hide = function () {
        this.top = -10000;
        this.left = -10000;
        this.isHidden = true;
        this.popover.hide();
    };
    PopOverContent.prototype.hideFromPopover = function () {
        this.top = -10000;
        this.left = -10000;
    };
    PopOverContent.prototype.positionElements = function (hostEl, targetEl, positionStr, appendToBody) {
        if (appendToBody === void 0) { appendToBody = false; }
        var positionStrParts = positionStr.split('-');
        var mainSide = (this.effectivePlacement = this.getEffectivePlacement(positionStrParts[0] || 'right', hostEl, targetEl));
        var orientation = (this.effectiveAlignment = positionStrParts[1] || 'center');
        var hostElPos = appendToBody ? this.offset(hostEl) : this.position(hostEl);
        var targetElWidth = targetEl.offsetWidth;
        var targetElHeight = targetEl.offsetHeight;
        var shiftWidth = {
            center: function () {
                return hostElPos.left + (hostElPos.width - targetElWidth) / 2;
            },
            right: function () {
                return hostElPos.left;
            },
            left: function () {
                return hostElPos.left + (hostElPos.width - targetElWidth);
            },
        };
        var shiftHeight = {
            center: function () {
                return hostElPos.top + (hostElPos.height - targetElHeight) / 2;
            },
            bottom: function () {
                return hostElPos.top;
            },
            top: function () {
                return hostElPos.top + (hostElPos.height - targetElHeight);
            },
        };
        var targetElPos;
        switch (mainSide) {
            case 'right':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left + hostElPos.width,
                };
                break;
            case 'left':
                targetElPos = {
                    top: shiftHeight[orientation](),
                    left: hostElPos.left - targetElWidth,
                };
                break;
            case 'bottom':
                targetElPos = {
                    top: hostElPos.top + hostElPos.height,
                    left: shiftWidth[orientation](),
                };
                break;
            default:
                targetElPos = {
                    top: hostElPos.top - targetElHeight,
                    left: shiftWidth[orientation](),
                };
                break;
        }
        return targetElPos;
    };
    PopOverContent.prototype.position = function (nativeEl) {
        var offsetParentBCR = { top: 0, left: 0 };
        var elBCR = this.offset(nativeEl);
        var offsetParentEl = this.parentOffsetEl(nativeEl);
        if (offsetParentEl !== window.document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        var boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left,
        };
    };
    PopOverContent.prototype.offset = function (nativeEl) {
        var boundingClientRect = nativeEl.getBoundingClientRect();
        return {
            width: boundingClientRect.width || nativeEl.offsetWidth,
            height: boundingClientRect.height || nativeEl.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || window.document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || window.document.documentElement.scrollLeft),
        };
    };
    PopOverContent.prototype.getStyle = function (nativeEl, cssProp) {
        if (nativeEl.currentStyle) {
            return nativeEl.currentStyle[cssProp];
        }
        if (window.getComputedStyle) {
            return window.getComputedStyle(nativeEl)[cssProp];
        }
        return nativeEl.style[cssProp];
    };
    PopOverContent.prototype.isStaticPositioned = function (nativeEl) {
        return (this.getStyle(nativeEl, 'position') || 'static') === 'static';
    };
    PopOverContent.prototype.parentOffsetEl = function (nativeEl) {
        var offsetParent = nativeEl.offsetParent || window.document;
        while (offsetParent && offsetParent !== window.document && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || window.document;
    };
    PopOverContent.prototype.getEffectivePlacement = function (desiredPlacement, hostElement, targetElement) {
        var hostElBoundingRect = hostElement.getBoundingClientRect();
        if (desiredPlacement === 'top' && hostElBoundingRect.top - targetElement.offsetHeight < 0) {
            return 'bottom';
        }
        if (desiredPlacement === 'bottom' && hostElBoundingRect.bottom + targetElement.offsetHeight > window.innerHeight) {
            return 'top';
        }
        if (desiredPlacement === 'left' && hostElBoundingRect.left - targetElement.offsetWidth < 0) {
            return 'right';
        }
        if (desiredPlacement === 'right' && hostElBoundingRect.right + targetElement.offsetWidth > window.innerWidth) {
            return 'left';
        }
        return desiredPlacement;
    };
    PopOverContent.ɵfac = function PopOverContent_Factory(t) { return new (t || PopOverContent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef)); };
    PopOverContent.ɵcmp = ɵɵdefineComponent({ type: PopOverContent, selectors: [["popover-content"]], viewQuery: function PopOverContent_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$O, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.popoverDiv = _t.first);
        } }, inputs: { content: "content", placement: "placement", title: "title", animation: "animation" }, ngContentSelectors: _c1$t, decls: 9, vars: 15, consts: [["role", "popover", 2, "display", "block"], ["popoverDiv", ""], [1, "popover-title", 3, "hidden"], [1, "popover-content"], [1, "popover-content-text"]], template: function PopOverContent_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "div", 0, 1);
            ɵɵelement(2, "div");
            ɵɵelementStart(3, "h4", 2);
            ɵɵtext(4);
            ɵɵelementEnd();
            ɵɵelementStart(5, "div", 3);
            ɵɵprojection(6);
            ɵɵelementStart(7, "div", 4);
            ɵɵtext(8);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassMapInterpolate1("popover ", ctx.effectivePlacement, "");
            ɵɵstyleProp("top", ctx.top + "px")("left", ctx.left + "px");
            ɵɵclassProp("fade", ctx.animation);
            ɵɵadvance(2);
            ɵɵclassMapInterpolate1("arrow ", ctx.effectiveAlignment, "");
            ɵɵadvance(1);
            ɵɵproperty("hidden", !ctx.title);
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.title);
            ɵɵadvance(4);
            ɵɵtextInterpolate(ctx.content);
        } }, encapsulation: 2 });
    return PopOverContent;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(PopOverContent, [{
        type: Component,
        args: [{
                selector: 'popover-content',
                template: "\n        <div #popoverDiv\n            class=\"popover {{ effectivePlacement }}\"\n            [style.top]=\"top + 'px'\"\n            [style.left]=\"left + 'px'\"\n            [class.fade]=\"animation\"\n            style=\"display: block\"\n            role=\"popover\">\n            <div class=\"arrow {{effectiveAlignment}}\"></div>\n            <h4 class=\"popover-title\" [hidden]=\"!title\">{{ title }}</h4>\n            <div class=\"popover-content\">\n                <ng-content></ng-content>\n                <div class=\"popover-content-text\">{{ content }}</div>\n            </div>\n        </div>\n    ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ChangeDetectorRef }]; }, { content: [{
            type: Input
        }], placement: [{
            type: Input
        }], title: [{
            type: Input
        }], animation: [{
            type: Input
        }], popoverDiv: [{
            type: ViewChild,
            args: ['popoverDiv']
        }] }); })();

// NG2
var PopOverDirective = /** @class */ (function () {
    function PopOverDirective(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        this.PopoverComponent = PopOverContent;
        this.popoverOnHover = false;
        this.popoverDismissTimeout = 0;
        this.onShown = new EventEmitter();
        this.onHidden = new EventEmitter();
    }
    // ---------------------------------------------------
    // Event listeners
    // ---------------------------------------------------
    PopOverDirective.prototype.showOrHideOnClick = function () {
        if (this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.toggle();
    };
    PopOverDirective.prototype.showOnHover = function () {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.show();
    };
    PopOverDirective.prototype.hideOnHover = function () {
        if (!this.popoverOnHover || this.popoverDisabled) {
            return;
        }
        this.hide();
    };
    PopOverDirective.prototype.ngOnChanges = function (changes) {
        if (changes['popoverDisabled']) {
            if (changes['popoverDisabled'].currentValue) {
                this.hide();
            }
        }
        if (changes['popoverAlways']) {
            if (changes['popoverAlways'].currentValue) {
                this.show();
            }
        }
    };
    PopOverDirective.prototype.toggle = function () {
        if (!this.visible) {
            this.show();
        }
        else {
            this.hide();
        }
    };
    PopOverDirective.prototype.show = function () {
        var _this = this;
        if (this.visible) {
            return;
        }
        this.visible = true;
        if (typeof this.content === 'string') {
            var factory = this.resolver.resolveComponentFactory(this.PopoverComponent);
            if (!this.visible) {
                return;
            }
            this.popover = this.viewContainerRef.createComponent(factory);
            var popover = this.popover.instance;
            popover.popover = this;
            popover.content = this.content;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
            if (this.popoverDismissTimeout > 0) {
                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
            }
        }
        else {
            var popover = this.content;
            popover.popover = this;
            if (this.popoverPlacement !== undefined) {
                popover.placement = this.popoverPlacement;
            }
            if (this.popoverAnimation !== undefined) {
                popover.animation = this.popoverAnimation;
            }
            if (this.popoverTitle !== undefined) {
                popover.title = this.popoverTitle;
            }
            popover.onCloseFromOutside.subscribe(function () { return _this.hide(); });
            if (this.popoverDismissTimeout > 0) {
                setTimeout(function () { return _this.hide(); }, this.popoverDismissTimeout);
            }
            popover.show();
        }
        this.onShown.emit(this);
    };
    PopOverDirective.prototype.hide = function () {
        if (!this.visible) {
            return;
        }
        this.visible = false;
        if (this.popover) {
            this.popover.destroy();
        }
        if (this.content instanceof PopOverContent) {
            this.content.hideFromPopover();
        }
        this.onHidden.emit(this);
    };
    PopOverDirective.prototype.getElement = function () {
        return this.viewContainerRef.element.nativeElement;
    };
    PopOverDirective.ɵfac = function PopOverDirective_Factory(t) { return new (t || PopOverDirective)(ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(ComponentFactoryResolver)); };
    PopOverDirective.ɵdir = ɵɵdefineDirective({ type: PopOverDirective, selectors: [["", "popover", ""]], hostBindings: function PopOverDirective_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function PopOverDirective_click_HostBindingHandler() { return ctx.showOrHideOnClick(); })("focusin", function PopOverDirective_focusin_HostBindingHandler() { return ctx.showOnHover(); })("mouseenter", function PopOverDirective_mouseenter_HostBindingHandler() { return ctx.showOnHover(); })("focusout", function PopOverDirective_focusout_HostBindingHandler() { return ctx.hideOnHover(); })("mouseleave", function PopOverDirective_mouseleave_HostBindingHandler() { return ctx.hideOnHover(); });
        } }, inputs: { content: ["popover", "content"], popoverDisabled: "popoverDisabled", popoverAlways: "popoverAlways", popoverAnimation: "popoverAnimation", popoverPlacement: "popoverPlacement", popoverTitle: "popoverTitle", popoverOnHover: "popoverOnHover", popoverDismissTimeout: "popoverDismissTimeout" }, outputs: { onShown: "onShown", onHidden: "onHidden" }, features: [ɵɵNgOnChangesFeature] });
    return PopOverDirective;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(PopOverDirective, [{
        type: Directive,
        args: [{
                selector: '[popover]',
            }]
    }], function () { return [{ type: ViewContainerRef }, { type: ComponentFactoryResolver }]; }, { content: [{
            type: Input,
            args: ['popover']
        }], popoverDisabled: [{
            type: Input
        }], popoverAlways: [{
            type: Input
        }], popoverAnimation: [{
            type: Input
        }], popoverPlacement: [{
            type: Input
        }], popoverTitle: [{
            type: Input
        }], popoverOnHover: [{
            type: Input
        }], popoverDismissTimeout: [{
            type: Input
        }], onShown: [{
            type: Output
        }], onHidden: [{
            type: Output
        }], showOrHideOnClick: [{
            type: HostListener,
            args: ['click']
        }], showOnHover: [{
            type: HostListener,
            args: ['focusin']
        }, {
            type: HostListener,
            args: ['mouseenter']
        }], hideOnHover: [{
            type: HostListener,
            args: ['focusout']
        }, {
            type: HostListener,
            args: ['mouseleave']
        }] }); })();

// NG2
var NovoPopOverModule = /** @class */ (function () {
    function NovoPopOverModule() {
    }
    NovoPopOverModule.ɵmod = ɵɵdefineNgModule({ type: NovoPopOverModule });
    NovoPopOverModule.ɵinj = ɵɵdefineInjector({ factory: function NovoPopOverModule_Factory(t) { return new (t || NovoPopOverModule)(); } });
    return NovoPopOverModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoPopOverModule, { declarations: [PopOverContent, PopOverDirective], exports: [PopOverContent, PopOverDirective] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoPopOverModule, [{
        type: NgModule,
        args: [{
                declarations: [PopOverContent, PopOverDirective],
                exports: [PopOverContent, PopOverDirective],
                entryComponents: [PopOverContent],
            }]
    }], null, null); })();

var ActivityTableRenderers = /** @class */ (function () {
    function ActivityTableRenderers() {
    }
    ActivityTableRenderers.propertyRenderer = function (prop) {
        var ret = function (data) {
            // TODO - allow for dots and sub props
            return data[prop];
        };
        return ret;
    };
    ActivityTableRenderers.dateRenderer = function (prop) {
        var ret = function (data) {
            return data[prop] ? new Date(data[prop]).toLocaleDateString() : '';
        };
        return ret;
    };
    return ActivityTableRenderers;
}());

var NovoActivityTableState = /** @class */ (function () {
    function NovoActivityTableState() {
        this.id = Math.random();
        this.sort = undefined;
        this.filter = undefined;
        this.page = 0;
        this.pageSize = undefined;
        this.globalSearch = undefined;
        this.selectedRows = new Map();
        this.updates = new EventEmitter();
        this.onReset = new EventEmitter();
    }
    Object.defineProperty(NovoActivityTableState.prototype, "userFiltered", {
        get: function () {
            return !!(this.filter || this.sort || this.globalSearch || this.outsideFilter);
        },
        enumerable: true,
        configurable: true
    });
    NovoActivityTableState.prototype.reset = function (fireUpdate, persistUserFilters) {
        if (fireUpdate === void 0) { fireUpdate = true; }
        if (!persistUserFilters) {
            this.sort = undefined;
            this.globalSearch = undefined;
            this.filter = undefined;
        }
        this.page = 0;
        this.selectedRows.clear();
        this.onReset.emit(true);
        if (fireUpdate) {
            this.updates.emit({
                sort: this.sort,
                filter: this.filter,
                globalSearch: this.globalSearch,
            });
        }
    };
    NovoActivityTableState.ɵfac = function NovoActivityTableState_Factory(t) { return new (t || NovoActivityTableState)(); };
    NovoActivityTableState.ɵprov = ɵɵdefineInjectable({ token: NovoActivityTableState, factory: NovoActivityTableState.ɵfac });
    return NovoActivityTableState;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableState, [{
        type: Injectable
    }], null, null); })();

var NovoSortFilter = /** @class */ (function () {
    function NovoSortFilter(state) {
        this.state = state;
    }
    NovoSortFilter.prototype.filter = function (id, value, transform) {
        var filter;
        if (!Helpers.isBlank(value)) {
            filter = { id: id, value: value, transform: transform };
        }
        else {
            filter = undefined;
        }
        this.state.filter = filter;
        this.state.reset(false, true);
        this.state.updates.next({ filter: filter, sort: this.state.sort });
    };
    NovoSortFilter.prototype.sort = function (id, value, transform) {
        var sort = { id: id, value: value, transform: transform };
        this.state.sort = sort;
        this.state.reset(false, true);
        this.state.updates.next({ sort: sort, filter: this.state.filter });
    };
    NovoSortFilter.ɵfac = function NovoSortFilter_Factory(t) { return new (t || NovoSortFilter)(ɵɵdirectiveInject(NovoActivityTableState)); };
    NovoSortFilter.ɵdir = ɵɵdefineDirective({ type: NovoSortFilter, selectors: [["", "novoSortFilter", ""]] });
    return NovoSortFilter;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSortFilter, [{
        type: Directive,
        args: [{
                selector: '[novoSortFilter]',
            }]
    }], function () { return [{ type: NovoActivityTableState }]; }, null); })();
var NovoSelection = /** @class */ (function () {
    function NovoSelection(state) {
        this.state = state;
        this.novoSelectAllToggle = new EventEmitter();
        this.allRows = new Map();
    }
    NovoSelection.prototype.register = function (id, row) {
        this.allRows.set(id, row);
    };
    NovoSelection.prototype.deregister = function (id) {
        var _this = this;
        this.allRows.delete(id);
        this.state.selectedRows.delete(id);
        clearTimeout(this.throttleTimeout);
        this.throttleTimeout = setTimeout(function () {
            if (_this.state.selectedRows.size === 0) {
                _this.novoSelectAllToggle.emit(false);
            }
        });
    };
    NovoSelection.prototype.ngOnDestroy = function () {
        this.allRows.clear();
        this.state.selectedRows.clear();
    };
    NovoSelection.prototype.toggle = function (id, selected, row) {
        if (selected) {
            this.state.selectedRows.set(id, row);
        }
        else {
            this.state.selectedRows.delete(id);
        }
    };
    NovoSelection.prototype.selectAll = function (value) {
        if (value) {
            this.state.selectedRows = new Map(this.allRows);
        }
        else {
            this.state.selectedRows.clear();
        }
        this.novoSelectAllToggle.emit(value);
    };
    NovoSelection.ɵfac = function NovoSelection_Factory(t) { return new (t || NovoSelection)(ɵɵdirectiveInject(NovoActivityTableState)); };
    NovoSelection.ɵdir = ɵɵdefineDirective({ type: NovoSelection, selectors: [["", "novoSelection", ""]], outputs: { novoSelectAllToggle: "novoSelectAllToggle" } });
    return NovoSelection;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSelection, [{
        type: Directive,
        args: [{
                selector: '[novoSelection]',
            }]
    }], function () { return [{ type: NovoActivityTableState }]; }, { novoSelectAllToggle: [{
            type: Output
        }] }); })();

function NovoSimpleActionCell_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "button", 1);
    ɵɵlistener("click", function NovoSimpleActionCell_ng_container_0_Template_button_click_1_listener() { ɵɵrestoreView(_r3); var ctx_r2 = ɵɵnextContext(); return ctx_r2.column.onClick(ctx_r2.row); });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("icon", ctx_r0.column.icon)("disabled", ctx_r0.isDisabled(ctx_r0.column, ctx_r0.row));
} }
function NovoSimpleActionCell_ng_container_1_item_5_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 5);
    ɵɵlistener("action", function NovoSimpleActionCell_ng_container_1_item_5_Template_item_action_0_listener() { ɵɵrestoreView(_r7); var option_r5 = ctx.$implicit; var ctx_r6 = ɵɵnextContext(2); return option_r5.onClick(ctx_r6.row); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r5 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("disabled", ctx_r4.isDisabled(option_r5, ctx_r4.row));
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", option_r5.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate(option_r5.label);
} }
function NovoSimpleActionCell_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "novo-dropdown", 2);
    ɵɵelementStart(2, "button", 3);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "list");
    ɵɵtemplate(5, NovoSimpleActionCell_ng_container_1_item_5_Template, 3, 3, "item", 4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.column.label || ctx_r1.labels.actions);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r1.column.options);
} }
/** Workaround for https://github.com/angular/angular/issues/17849 */
var _NovoCellDef = CdkCellDef;
var _NovoHeaderCellDef = CdkHeaderCellDef;
var _NovoColumnDef = CdkColumnDef;
var _NovoHeaderCell = CdkHeaderCell;
var _NovoCell = CdkCell;
var NovoSimpleCellDef = /** @class */ (function (_super) {
    __extends(NovoSimpleCellDef, _super);
    function NovoSimpleCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleCellDef.ɵfac = function NovoSimpleCellDef_Factory(t) { return ɵNovoSimpleCellDef_BaseFactory(t || NovoSimpleCellDef); };
    NovoSimpleCellDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleCellDef, selectors: [["", "novoSimpleCellDef", ""]], features: [ɵɵProvidersFeature([{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }]), ɵɵInheritDefinitionFeature] });
    return NovoSimpleCellDef;
}(_NovoCellDef));
var ɵNovoSimpleCellDef_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleCellDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCellDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleCellDef]',
                providers: [{ provide: CdkCellDef, useExisting: NovoSimpleCellDef }],
            }]
    }], null, null); })();
var NovoSimpleHeaderCellDef = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderCellDef, _super);
    function NovoSimpleHeaderCellDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleHeaderCellDef.ɵfac = function NovoSimpleHeaderCellDef_Factory(t) { return ɵNovoSimpleHeaderCellDef_BaseFactory(t || NovoSimpleHeaderCellDef); };
    NovoSimpleHeaderCellDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleHeaderCellDef, selectors: [["", "novoSimpleHeaderCellDef", ""]], features: [ɵɵProvidersFeature([{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }]), ɵɵInheritDefinitionFeature] });
    return NovoSimpleHeaderCellDef;
}(_NovoHeaderCellDef));
var ɵNovoSimpleHeaderCellDef_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleHeaderCellDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderCellDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleHeaderCellDef]',
                providers: [{ provide: CdkHeaderCellDef, useExisting: NovoSimpleHeaderCellDef }],
            }]
    }], null, null); })();
var NovoSimpleColumnDef = /** @class */ (function (_super) {
    __extends(NovoSimpleColumnDef, _super);
    function NovoSimpleColumnDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleColumnDef.ɵfac = function NovoSimpleColumnDef_Factory(t) { return ɵNovoSimpleColumnDef_BaseFactory(t || NovoSimpleColumnDef); };
    NovoSimpleColumnDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleColumnDef, selectors: [["", "novoSimpleColumnDef", ""]], inputs: { name: ["novoSimpleColumnDef", "name"] }, features: [ɵɵProvidersFeature([{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }]), ɵɵInheritDefinitionFeature] });
    return NovoSimpleColumnDef;
}(_NovoColumnDef));
var ɵNovoSimpleColumnDef_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleColumnDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleColumnDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleColumnDef]',
                providers: [{ provide: CdkColumnDef, useExisting: NovoSimpleColumnDef }],
            }]
    }], null, { name: [{
            type: Input,
            args: ['novoSimpleColumnDef']
        }] }); })();
var NovoSimpleHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderCell, _super);
    function NovoSimpleHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-header-cell');
        return _this;
    }
    NovoSimpleHeaderCell.prototype.ngOnInit = function () {
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
        }
    };
    NovoSimpleHeaderCell.ɵfac = function NovoSimpleHeaderCell_Factory(t) { return new (t || NovoSimpleHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
    NovoSimpleHeaderCell.ɵdir = ɵɵdefineDirective({ type: NovoSimpleHeaderCell, selectors: [["novo-simple-header-cell"]], hostVars: 1, hostBindings: function NovoSimpleHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { column: "column" }, features: [ɵɵInheritDefinitionFeature] });
    return NovoSimpleHeaderCell;
}(_NovoHeaderCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderCell, [{
        type: Directive,
        args: [{
                selector: 'novo-simple-header-cell',
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], column: [{
            type: Input
        }] }); })();
var NovoSimpleEmptyHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleEmptyHeaderCell, _super);
    function NovoSimpleEmptyHeaderCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.role = 'columnheader';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-empty-header-cell');
        return _this;
    }
    NovoSimpleEmptyHeaderCell.ɵfac = function NovoSimpleEmptyHeaderCell_Factory(t) { return new (t || NovoSimpleEmptyHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
    NovoSimpleEmptyHeaderCell.ɵdir = ɵɵdefineDirective({ type: NovoSimpleEmptyHeaderCell, selectors: [["novo-simple-empty-header-cell"]], hostVars: 1, hostBindings: function NovoSimpleEmptyHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, features: [ɵɵInheritDefinitionFeature] });
    return NovoSimpleEmptyHeaderCell;
}(_NovoHeaderCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleEmptyHeaderCell, [{
        type: Directive,
        args: [{
                selector: 'novo-simple-empty-header-cell',
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
var NovoSimpleCheckboxHeaderCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCheckboxHeaderCell, _super);
    function NovoSimpleCheckboxHeaderCell(columnDef, elementRef, renderer, ref, _selection) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this._selection = _selection;
        _this.role = 'columnheader';
        _this.selectAll = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-header-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-header-cell');
        _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
            _this.selectAll = value;
            ref.markForCheck();
        });
        return _this;
    }
    NovoSimpleCheckboxHeaderCell.prototype.ngOnDestroy = function () {
        this.selectAllSubscription.unsubscribe();
    };
    NovoSimpleCheckboxHeaderCell.prototype.toggle = function (value) {
        this._selection.selectAll(value);
    };
    NovoSimpleCheckboxHeaderCell.ɵfac = function NovoSimpleCheckboxHeaderCell_Factory(t) { return new (t || NovoSimpleCheckboxHeaderCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoSelection, 8)); };
    NovoSimpleCheckboxHeaderCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCheckboxHeaderCell, selectors: [["novo-simple-checkbox-header-cell"]], hostVars: 1, hostBindings: function NovoSimpleCheckboxHeaderCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, "ngModel", "ngModelChange"]], template: function NovoSimpleCheckboxHeaderCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-checkbox", 0);
            ɵɵlistener("ngModelChange", function NovoSimpleCheckboxHeaderCell_Template_novo_checkbox_ngModelChange_0_listener($event) { return ctx.selectAll = $event; })("ngModelChange", function NovoSimpleCheckboxHeaderCell_Template_novo_checkbox_ngModelChange_0_listener($event) { return ctx.toggle($event); });
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngModel", ctx.selectAll);
        } }, directives: [NovoCheckboxElement, NgControlStatus, NgModel], encapsulation: 2 });
    return NovoSimpleCheckboxHeaderCell;
}(_NovoHeaderCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCheckboxHeaderCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-checkbox-header-cell',
                template: "<novo-checkbox [(ngModel)]=\"selectAll\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>",
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: ChangeDetectorRef }, { type: NovoSelection, decorators: [{
                type: Optional
            }] }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
var NovoSimpleCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCell, _super);
    function NovoSimpleCell(columnDef, elementRef, renderer) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-cell');
        return _this;
    }
    NovoSimpleCell.prototype.ngOnInit = function () {
        if (this.column.customClass) {
            this.renderer.addClass(this.elementRef.nativeElement, this.column.customClass(this.row));
        }
        if (this.column.width) {
            this.renderer.setStyle(this.elementRef.nativeElement, 'min-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'max-width', this.column.width + "px");
            this.renderer.setStyle(this.elementRef.nativeElement, 'width', this.column.width + "px");
            // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
            // this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.column.width - 20}px`);
            // this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.column.width - 20}px`);
        }
        // else {
        //     // TODO - this inhibits resizing the page after the initial load -- but do we care?!?!
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'min-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'max-width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        //     this.renderer.setStyle(this.spanElement.nativeElement, 'width', `${this.elementRef.nativeElement.offsetWidth - 20}px`);
        // }
    };
    NovoSimpleCell.prototype.onClick = function (event) {
        Helpers.swallowEvent(event);
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
        return;
    };
    NovoSimpleCell.ɵfac = function NovoSimpleCell_Factory(t) { return new (t || NovoSimpleCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
    NovoSimpleCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCell, selectors: [["novo-simple-cell"]], hostVars: 1, hostBindings: function NovoSimpleCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { row: "row", column: "column" }, features: [ɵɵInheritDefinitionFeature], decls: 3, vars: 3, consts: [[3, "click"], ["span", ""]], template: function NovoSimpleCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "span", 0, 1);
            ɵɵlistener("click", function NovoSimpleCell_Template_span_click_0_listener($event) { return ctx.onClick($event); });
            ɵɵtext(2);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("clickable", !!ctx.column.onClick);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.column.renderer(ctx.row));
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoSimpleCell;
}(_NovoCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-cell',
                template: "\n    <span [class.clickable]=\"!!column.onClick\" (click)=\"onClick($event)\" #span>{{ column.renderer(row) }}</span>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], column: [{
            type: Input
        }] }); })();
var NovoSimpleCheckboxCell = /** @class */ (function (_super) {
    __extends(NovoSimpleCheckboxCell, _super);
    function NovoSimpleCheckboxCell(columnDef, elementRef, renderer, _selection) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.columnDef = columnDef;
        _this._selection = _selection;
        _this.role = 'gridcell';
        _this.selected = false;
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, "novo-checkbox-column-" + columnDef.cssClassFriendlyName);
        renderer.addClass(elementRef.nativeElement, 'novo-simple-checkbox-cell');
        _this.selectAllSubscription = _selection.novoSelectAllToggle.subscribe(function (value) {
            _this.selected = value;
        });
        return _this;
    }
    NovoSimpleCheckboxCell.prototype.ngOnInit = function () {
        this._selection.register(this.row.id || this.index, this.row);
        this.selected = this._selection.state.selectedRows.has(this.row.id || this.index);
    };
    NovoSimpleCheckboxCell.prototype.ngOnDestroy = function () {
        this._selection.deregister(this.row.id || this.index);
        this.selectAllSubscription.unsubscribe();
    };
    NovoSimpleCheckboxCell.prototype.toggle = function (value) {
        this._selection.toggle(this.row.id || this.index, value, this.row);
    };
    NovoSimpleCheckboxCell.ɵfac = function NovoSimpleCheckboxCell_Factory(t) { return new (t || NovoSimpleCheckboxCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoSelection, 8)); };
    NovoSimpleCheckboxCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCheckboxCell, selectors: [["novo-simple-checkbox-cell"]], hostVars: 1, hostBindings: function NovoSimpleCheckboxCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { row: "row", index: "index" }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [[3, "ngModel", "ngModelChange"]], template: function NovoSimpleCheckboxCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-checkbox", 0);
            ɵɵlistener("ngModelChange", function NovoSimpleCheckboxCell_Template_novo_checkbox_ngModelChange_0_listener($event) { return ctx.toggle($event); });
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngModel", ctx.selected);
        } }, directives: [NovoCheckboxElement, NgControlStatus, NgModel], encapsulation: 2 });
    return NovoSimpleCheckboxCell;
}(_NovoCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCheckboxCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-checkbox-cell',
                template: "\n    <novo-checkbox [ngModel]=\"selected\" (ngModelChange)=\"toggle($event)\"></novo-checkbox>\n  ",
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoSelection, decorators: [{
                type: Optional
            }] }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], index: [{
            type: Input
        }] }); })();
var NovoSimpleActionCell = /** @class */ (function (_super) {
    __extends(NovoSimpleActionCell, _super);
    function NovoSimpleActionCell(columnDef, elementRef, renderer, labels) {
        var _this = _super.call(this, columnDef, elementRef) || this;
        _this.elementRef = elementRef;
        _this.renderer = renderer;
        _this.labels = labels;
        _this.role = 'gridcell';
        renderer.setAttribute(elementRef.nativeElement, 'data-automation-id', "novo-action-column-" + columnDef.cssClassFriendlyName);
        return _this;
    }
    NovoSimpleActionCell.prototype.ngOnInit = function () {
        if (this.column.options) {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-dropdown-cell');
        }
        else {
            this.renderer.addClass(this.elementRef.nativeElement, 'novo-simple-button-cell');
        }
    };
    NovoSimpleActionCell.prototype.isDisabled = function (check, row) {
        if (check.disabled === true) {
            return true;
        }
        if (check.disabledCheck) {
            return check.disabledCheck(row);
        }
        return false;
    };
    NovoSimpleActionCell.ɵfac = function NovoSimpleActionCell_Factory(t) { return new (t || NovoSimpleActionCell)(ɵɵdirectiveInject(CdkColumnDef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(NovoLabelService)); };
    NovoSimpleActionCell.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleActionCell, selectors: [["novo-simple-action-cell"]], hostVars: 1, hostBindings: function NovoSimpleActionCell_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
        } }, inputs: { row: "row", column: "column" }, features: [ɵɵInheritDefinitionFeature], decls: 2, vars: 2, consts: [[4, "ngIf"], ["theme", "icon", 3, "icon", "disabled", "click"], ["parentScrollSelector", ".novo-simple-table", "containerClass", "novo-table-dropdown-cell"], ["type", "button", "theme", "dialogue", "icon", "collapse", "inverse", ""], [3, "disabled", "action", 4, "ngFor", "ngForOf"], [3, "disabled", "action"]], template: function NovoSimpleActionCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoSimpleActionCell_ng_container_0_Template, 2, 2, "ng-container", 0);
            ɵɵtemplate(1, NovoSimpleActionCell_ng_container_1_Template, 6, 2, "ng-container", 0);
        } if (rf & 2) {
            ɵɵproperty("ngIf", !ctx.column.options);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.column.options);
        } }, directives: [NgIf, NovoButtonElement, NovoDropdownElement, NovoDropdownListElement, NgForOf, NovoItemElement], encapsulation: 2, changeDetection: 0 });
    return NovoSimpleActionCell;
}(_NovoCell));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleActionCell, [{
        type: Component,
        args: [{
                selector: 'novo-simple-action-cell',
                template: "\n    <ng-container *ngIf=\"!column.options\">\n      <button theme=\"icon\" [icon]=\"column.icon\" (click)=\"column.onClick(row)\" [disabled]=\"isDisabled(column, row)\"></button>\n    </ng-container>\n    <ng-container *ngIf=\"column.options\">\n      <novo-dropdown parentScrollSelector=\".novo-simple-table\" containerClass=\"novo-table-dropdown-cell\">\n        <button type=\"button\" theme=\"dialogue\" icon=\"collapse\" inverse>{{ column.label || labels.actions }}</button>\n        <list>\n          <item *ngFor=\"let option of column.options\" (action)=\"option.onClick(row)\" [disabled]=\"isDisabled(option, row)\">\n            <span [attr.data-automation-id]=\"option.label\">{{ option.label }}</span>\n          </item>\n        </list>\n      </novo-dropdown>\n    </ng-container>\n  ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkColumnDef }, { type: ElementRef }, { type: Renderer2 }, { type: NovoLabelService }]; }, { role: [{
            type: HostBinding,
            args: ['attr.role']
        }], row: [{
            type: Input
        }], column: [{
            type: Input
        }] }); })();

var _c0$P = ["novo-simple-cell-config", ""];
function NovoSimpleCellHeader_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 3);
    ɵɵlistener("click", function NovoSimpleCellHeader_button_3_Template_button_click_0_listener() { ɵɵrestoreView(_r3); var ctx_r2 = ɵɵnextContext(); return ctx_r2.sort(); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("active", ctx_r0.sortActive);
    ɵɵproperty("icon", ctx_r0.icon);
} }
function NovoSimpleCellHeader_novo_dropdown_4_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 11);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(2); return ctx_r8.clearFilter(); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r4.labels.clear, " ");
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 18);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 16);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_Template_item_click_0_listener() { ɵɵrestoreView(_r17); var option_r14 = ctx.$implicit; var ctx_r16 = ɵɵnextContext(4); return ctx_r16.filterData(option_r14); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_i_2_Template, 1, 0, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r14 = ctx.$implicit;
    var ctx_r13 = ɵɵnextContext(4);
    ɵɵclassProp("active", ctx_r13.activeDateFilter === option_r14.label);
    ɵɵattribute("data-automation-id", "novo-activity-table-filter-" + option_r14.label);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", option_r14.label, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r13.activeDateFilter === option_r14.label);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_item_1_Template, 3, 5, "item", 15);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r10 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r10.config.filterConfig.options);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 18);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r20 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 19);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_Template_item_click_0_listener($event) { ɵɵrestoreView(_r20); var ctx_r19 = ɵɵnextContext(3); return ctx_r19.toggleCustomRange($event, true); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_i_2_Template, 1, 0, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r11 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r11.labels.customDateRange === ctx_r11.activeDateFilter);
    ɵɵproperty("keepOpen", true);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r11.labels.customDateRange, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r11.labels.customDateRange === ctx_r11.activeDateFilter);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 20);
    ɵɵelementStart(1, "div", 16);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template_div_click_1_listener($event) { ɵɵrestoreView(_r22); var ctx_r21 = ɵɵnextContext(3); return ctx_r21.toggleCustomRange($event, false); });
    ɵɵelement(2, "i", 21);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "novo-date-picker", 22);
    ɵɵlistener("onSelect", function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template_novo_date_picker_onSelect_4_listener($event) { ɵɵrestoreView(_r22); var ctx_r23 = ɵɵnextContext(3); return ctx_r23.filterData($event); })("ngModelChange", function NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template_novo_date_picker_ngModelChange_4_listener($event) { ɵɵrestoreView(_r22); var ctx_r24 = ɵɵnextContext(3); return ctx_r24.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r12 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r12.labels.backToPresetFilters);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r12.filter);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoSimpleCellHeader_novo_dropdown_4_list_7_ng_container_1_Template, 2, 1, "ng-container", 12);
    ɵɵtemplate(2, NovoSimpleCellHeader_novo_dropdown_4_list_7_item_2_Template, 3, 5, "item", 13);
    ɵɵtemplate(3, NovoSimpleCellHeader_novo_dropdown_4_list_7_div_3_Template, 5, 2, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r5.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.config.filterConfig.allowCustomRange && !ctx_r5.showCustomRange);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.showCustomRange);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 18);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_Template(rf, ctx) { if (rf & 1) {
    var _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 16);
    ɵɵlistener("click", function NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_Template_item_click_0_listener() { ɵɵrestoreView(_r29); var option_r26 = ctx.$implicit; var ctx_r28 = ɵɵnextContext(3); return ctx_r28.filterData(option_r26); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_i_3_Template, 1, 0, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r26 = ctx.$implicit;
    var ctx_r25 = ɵɵnextContext(3);
    ɵɵclassProp("active", ctx_r25.filter === option_r26);
    ɵɵattribute("data-automation-id", "novo-activity-table-filter-" + ((option_r26 == null ? null : option_r26.label) || option_r26));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r26 == null ? null : option_r26.label) || option_r26);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", option_r26.hasOwnProperty("value") ? ctx_r25.filter === option_r26.value : ctx_r25.filter === option_r26);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoSimpleCellHeader_novo_dropdown_4_list_8_item_1_Template, 4, 5, "item", 15);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r6.config.filterConfig.options);
} }
function NovoSimpleCellHeader_novo_dropdown_4_list_9_Template(rf, ctx) { if (rf & 1) {
    var _r31 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 23);
    ɵɵelementStart(2, "input", 24);
    ɵɵlistener("ngModelChange", function NovoSimpleCellHeader_novo_dropdown_4_list_9_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r31); var ctx_r30 = ɵɵnextContext(2); return ctx_r30.filter = $event; })("ngModelChange", function NovoSimpleCellHeader_novo_dropdown_4_list_9_Template_input_ngModelChange_2_listener($event) { ɵɵrestoreView(_r31); var ctx_r32 = ɵɵnextContext(2); return ctx_r32.filterData($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngModel", ctx_r7.filter);
} }
function NovoSimpleCellHeader_novo_dropdown_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-dropdown", 4);
    ɵɵelement(1, "button", 5);
    ɵɵelementStart(2, "div", 6);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoSimpleCellHeader_novo_dropdown_4_button_5_Template, 2, 1, "button", 7);
    ɵɵelementEnd();
    ɵɵelementContainerStart(6, 8);
    ɵɵtemplate(7, NovoSimpleCellHeader_novo_dropdown_4_list_7_Template, 4, 3, "list", 9);
    ɵɵtemplate(8, NovoSimpleCellHeader_novo_dropdown_4_list_8_Template, 2, 1, "list", 9);
    ɵɵtemplate(9, NovoSimpleCellHeader_novo_dropdown_4_list_9_Template, 3, 1, "list", 10);
    ɵɵelementContainerEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassProp("active", ctx_r1.filterActive);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r1.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.filter);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitch", ctx_r1.config.filterConfig.type);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "date");
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", "select");
} }
var _c1$u = ["*"];
var NovoSimpleFilterFocus = /** @class */ (function () {
    function NovoSimpleFilterFocus(element) {
        this.element = element;
    }
    NovoSimpleFilterFocus.prototype.ngAfterViewInit = function () {
        this.element.nativeElement.focus();
    };
    NovoSimpleFilterFocus.ɵfac = function NovoSimpleFilterFocus_Factory(t) { return new (t || NovoSimpleFilterFocus)(ɵɵdirectiveInject(ElementRef)); };
    NovoSimpleFilterFocus.ɵdir = ɵɵdefineDirective({ type: NovoSimpleFilterFocus, selectors: [["", "novoSimpleFilterFocus", ""]] });
    return NovoSimpleFilterFocus;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleFilterFocus, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleFilterFocus]',
            }]
    }], function () { return [{ type: ElementRef }]; }, null); })();
var NovoSimpleCellHeader = /** @class */ (function () {
    function NovoSimpleCellHeader(changeDetectorRef, labels, state, _sort, _cdkColumnDef) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._sort = _sort;
        this._cdkColumnDef = _cdkColumnDef;
        this.icon = 'sortable';
        this.filterActive = false;
        this.sortActive = false;
        this.showCustomRange = false;
        this._rerenderSubscription = state.updates.subscribe(function (change) {
            if (change.sort && change.sort.id === _this.id) {
                _this.icon = "sort-" + change.sort.value;
                _this.sortActive = true;
            }
            else {
                _this.icon = 'sortable';
                _this.sortActive = false;
            }
            if (change.filter && change.filter.id === _this.id) {
                _this.filterActive = true;
                _this.filter = change.filter.value;
            }
            else {
                _this.filterActive = false;
                _this.filter = undefined;
            }
            changeDetectorRef.markForCheck();
        });
    }
    Object.defineProperty(NovoSimpleCellHeader.prototype, "config", {
        get: function () {
            return this._config;
        },
        set: function (v) {
            if (!v) {
                this._config = {
                    sortable: false,
                    filterable: false,
                    filterConfig: {
                        type: 'text',
                    },
                };
            }
            else {
                this._config = {
                    sortable: coerceBooleanProperty(v.sortable),
                    filterable: coerceBooleanProperty(v.filterable),
                    transforms: v.transforms || {},
                    filterConfig: v.filterConfig || {
                        type: 'text',
                    },
                };
                if (this._config.filterConfig.type === 'date' && !this._config.filterConfig.options) {
                    this._config.filterConfig.options = this.getDefaultDateFilterOptions();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoSimpleCellHeader.prototype.ngOnInit = function () {
        if (this._cdkColumnDef) {
            this.id = this._cdkColumnDef.name;
        }
        if (this.defaultSort && this.id === this.defaultSort.id) {
            this.icon = "sort-" + this.defaultSort.value;
            this.sortActive = true;
            this.changeDetectorRef.markForCheck();
        }
    };
    NovoSimpleCellHeader.prototype.ngOnDestroy = function () {
        this._rerenderSubscription.unsubscribe();
    };
    NovoSimpleCellHeader.prototype.sort = function () {
        var _this = this;
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            _this.direction = _this.getNextSortDirection(_this.direction);
            _this._sort.sort(_this.id, _this.direction, _this._config.transforms.sort);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    NovoSimpleCellHeader.prototype.toggleCustomRange = function (event, value) {
        Helpers.swallowEvent(event);
        this.showCustomRange = value;
        this.changeDetectorRef.markForCheck();
        this.dropdown.openPanel(); // Ensures that the panel correctly updates to the dynamic size of the dropdown
    };
    NovoSimpleCellHeader.prototype.filterData = function (filter) {
        var _this = this;
        var actualFilter = filter;
        if (this.config.filterConfig.type === 'date' && filter) {
            this.activeDateFilter = filter.label || this.labels.customDateRange;
            if (filter.startDate && filter.endDate) {
                actualFilter = {
                    min: startOfDay(filter.startDate.date),
                    max: startOfDay(addDays(startOfDay(filter.endDate.date), 1)),
                };
            }
            else {
                actualFilter = {
                    min: filter.min ? addDays(startOfToday(), filter.min) : startOfToday(),
                    max: filter.max ? addDays(startOfTomorrow(), filter.max) : startOfTomorrow(),
                };
            }
        }
        if (actualFilter && actualFilter.hasOwnProperty('value')) {
            actualFilter = filter.value;
        }
        if (this.changeTimeout) {
            clearTimeout(this.changeTimeout);
        }
        this.changeTimeout = setTimeout(function () {
            if (actualFilter === '') {
                actualFilter = undefined;
            }
            _this._sort.filter(_this.id, actualFilter, _this.config.transforms.filter);
            _this.changeDetectorRef.markForCheck();
        }, 300);
    };
    NovoSimpleCellHeader.prototype.clearFilter = function () {
        this.filter = undefined;
        this.activeDateFilter = undefined;
        this.filterData();
    };
    NovoSimpleCellHeader.prototype.getNextSortDirection = function (direction) {
        if (!direction) {
            return 'asc';
        }
        if (direction === 'asc') {
            return 'desc';
        }
        return 'asc';
    };
    NovoSimpleCellHeader.prototype.getDefaultDateFilterOptions = function () {
        var opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        return opts;
    };
    NovoSimpleCellHeader.ɵfac = function NovoSimpleCellHeader_Factory(t) { return new (t || NovoSimpleCellHeader)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(NovoActivityTableState), ɵɵdirectiveInject(NovoSortFilter, 8), ɵɵdirectiveInject(CdkColumnDef, 8)); };
    NovoSimpleCellHeader.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleCellHeader, selectors: [["", "novo-simple-cell-config", ""]], viewQuery: function NovoSimpleCellHeader_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoDropdownElement, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        } }, inputs: { defaultSort: "defaultSort", config: ["novo-simple-cell-config", "config"] }, attrs: _c0$P, ngContentSelectors: _c1$u, decls: 5, vars: 4, consts: [["data-automation-id", "novo-activity-table-label", 3, "click"], ["theme", "icon", "data-automation-id", "novo-activity-table-sort", 3, "icon", "active", "click", 4, "ngIf"], ["side", "right", "parentScrollSelector", ".novo-simple-table", "containerClass", "simple-table-dropdown", "data-automation-id", "novo-activity-table-filter", 4, "ngIf"], ["theme", "icon", "data-automation-id", "novo-activity-table-sort", 3, "icon", "click"], ["side", "right", "parentScrollSelector", ".novo-simple-table", "containerClass", "simple-table-dropdown", "data-automation-id", "novo-activity-table-filter"], ["type", "button", "theme", "icon", "icon", "filter"], [1, "header"], ["theme", "dialogue", "color", "negative", "icon", "times", "data-automation-id", "novo-activity-table-filter-clear", 3, "click", 4, "ngIf"], [3, "ngSwitch"], [4, "ngSwitchCase"], [4, "ngSwitchDefault"], ["theme", "dialogue", "color", "negative", "icon", "times", "data-automation-id", "novo-activity-table-filter-clear", 3, "click"], [4, "ngIf"], [3, "active", "keepOpen", "click", 4, "ngIf"], ["class", "calendar-container", 4, "ngIf"], [3, "active", "click", 4, "ngFor", "ngForOf"], [3, "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], [3, "keepOpen", "click"], [1, "calendar-container"], [1, "bhi-previous"], ["range", "true", 3, "ngModel", "onSelect", "ngModelChange"], ["keepOpen", "true", 1, "filter-search"], ["type", "text", "novoSimpleFilterFocus", "", "data-automation-id", "novo-activity-table-filter-input", 3, "ngModel", "ngModelChange"]], template: function NovoSimpleCellHeader_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵelementStart(0, "label", 0);
            ɵɵlistener("click", function NovoSimpleCellHeader_Template_label_click_0_listener() { return ctx.sort(); });
            ɵɵprojection(1);
            ɵɵelementEnd();
            ɵɵelementStart(2, "div");
            ɵɵtemplate(3, NovoSimpleCellHeader_button_3_Template, 1, 3, "button", 1);
            ɵɵtemplate(4, NovoSimpleCellHeader_novo_dropdown_4_Template, 10, 7, "novo-dropdown", 2);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵclassProp("sort-disabled", !ctx.config.sortable);
            ɵɵadvance(3);
            ɵɵproperty("ngIf", ctx.config.sortable);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.config.filterable);
        } }, directives: [NgIf, NovoButtonElement, NovoDropdownElement, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoDropdownListElement, NgForOf, NovoItemElement, NovoDatePickerElement, NgControlStatus, NgModel, DefaultValueAccessor, NovoSimpleFilterFocus], encapsulation: 2, changeDetection: 0 });
    return NovoSimpleCellHeader;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleCellHeader, [{
        type: Component,
        args: [{
                selector: '[novo-simple-cell-config]',
                template: "\n    <label (click)=\"sort()\" data-automation-id=\"novo-activity-table-label\" [class.sort-disabled]=\"!config.sortable\">\n      <ng-content></ng-content>\n    </label>\n    <div>\n      <button\n        *ngIf=\"config.sortable\"\n        theme=\"icon\"\n        [icon]=\"icon\"\n        (click)=\"sort()\"\n        [class.active]=\"sortActive\"\n        data-automation-id=\"novo-activity-table-sort\"\n      ></button>\n      <novo-dropdown\n        *ngIf=\"config.filterable\"\n        side=\"right\"\n        parentScrollSelector=\".novo-simple-table\"\n        containerClass=\"simple-table-dropdown\"\n        data-automation-id=\"novo-activity-table-filter\"\n      >\n        <button type=\"button\" theme=\"icon\" icon=\"filter\" [class.active]=\"filterActive\"></button>\n        <div class=\"header\">\n          <span>{{ labels.filters }}</span>\n          <button\n            theme=\"dialogue\"\n            color=\"negative\"\n            icon=\"times\"\n            (click)=\"clearFilter()\"\n            *ngIf=\"filter\"\n            data-automation-id=\"novo-activity-table-filter-clear\"\n          >\n            {{ labels.clear }}\n          </button>\n        </div>\n        <ng-container [ngSwitch]=\"config.filterConfig.type\">\n          <list *ngSwitchCase=\"'date'\">\n            <ng-container *ngIf=\"!showCustomRange\">\n              <item\n                [class.active]=\"activeDateFilter === option.label\"\n                *ngFor=\"let option of config.filterConfig.options\"\n                (click)=\"filterData(option)\"\n                [attr.data-automation-id]=\"'novo-activity-table-filter-' + option.label\"\n              >\n                {{ option.label }} <i class=\"bhi-check\" *ngIf=\"activeDateFilter === option.label\"></i>\n              </item>\n            </ng-container>\n            <item\n              [class.active]=\"labels.customDateRange === activeDateFilter\"\n              (click)=\"toggleCustomRange($event, true)\"\n              *ngIf=\"config.filterConfig.allowCustomRange && !showCustomRange\"\n              [keepOpen]=\"true\"\n            >\n              {{ labels.customDateRange }} <i class=\"bhi-check\" *ngIf=\"labels.customDateRange === activeDateFilter\"></i>\n            </item>\n            <div class=\"calendar-container\" *ngIf=\"showCustomRange\">\n              <div (click)=\"toggleCustomRange($event, false)\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n              <novo-date-picker (onSelect)=\"filterData($event)\" [(ngModel)]=\"filter\" range=\"true\"></novo-date-picker>\n            </div>\n          </list>\n          <list *ngSwitchCase=\"'select'\">\n            <item\n              [class.active]=\"filter === option\"\n              *ngFor=\"let option of config.filterConfig.options\"\n              (click)=\"filterData(option)\"\n              [attr.data-automation-id]=\"'novo-activity-table-filter-' + (option?.label || option)\"\n            >\n              <span>{{ option?.label || option }}</span>\n              <i class=\"bhi-check\" *ngIf=\"option.hasOwnProperty('value') ? filter === option.value : filter === option\"></i>\n            </item>\n          </list>\n          <list *ngSwitchDefault>\n            <item class=\"filter-search\" keepOpen=\"true\">\n              <input\n                type=\"text\"\n                [(ngModel)]=\"filter\"\n                (ngModelChange)=\"filterData($event)\"\n                novoSimpleFilterFocus\n                data-automation-id=\"novo-activity-table-filter-input\"\n              />\n            </item>\n          </list>\n        </ng-container>\n      </novo-dropdown>\n    </div>\n  ",
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: NovoActivityTableState }, { type: NovoSortFilter, decorators: [{
                type: Optional
            }] }, { type: CdkColumnDef, decorators: [{
                type: Optional
            }] }]; }, { dropdown: [{
            type: ViewChild,
            args: [NovoDropdownElement]
        }], defaultSort: [{
            type: Input
        }], config: [{
            type: Input,
            args: ['novo-simple-cell-config']
        }] }); })();

function NovoSimpleTablePagination_novo_tiles_1_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tiles", 7);
    ɵɵlistener("ngModelChange", function NovoSimpleTablePagination_novo_tiles_1_Template_novo_tiles_ngModelChange_0_listener($event) { ɵɵrestoreView(_r3); var ctx_r2 = ɵɵnextContext(); return ctx_r2.pageSize = $event; })("onChange", function NovoSimpleTablePagination_novo_tiles_1_Template_novo_tiles_onChange_0_listener($event) { ɵɵrestoreView(_r3); var ctx_r4 = ɵɵnextContext(); return ctx_r4.changePageSize($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵproperty("ngModel", ctx_r0.pageSize)("options", ctx_r0.displayedPageSizeOptions);
} }
function NovoSimpleTablePagination_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r1.pageSize);
} }
var DEFAULT_PAGE_SIZE = 50;
var NovoSimpleTablePagination = /** @class */ (function () {
    function NovoSimpleTablePagination(changeDetectorRef, labels, state) {
        var _this = this;
        this.changeDetectorRef = changeDetectorRef;
        this.labels = labels;
        this.state = state;
        this._page = 0;
        this._length = 0;
        this._pageSizeOptions = [];
        this.pageChange = new EventEmitter();
        if (state && state.onReset) {
            this.resetSubscription = this.state.onReset.subscribe(function (clear) {
                if (clear) {
                    _this.page = 0;
                    _this.changeDetectorRef.markForCheck();
                }
            });
        }
    }
    Object.defineProperty(NovoSimpleTablePagination.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (page) {
            this._page = page;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
            this.state.page = this._page;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "length", {
        get: function () {
            return this._length;
        },
        set: function (length) {
            this._length = length;
            this.changeDetectorRef.markForCheck();
            this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
            this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSize", {
        get: function () {
            return this._pageSize;
        },
        set: function (pageSize) {
            this._pageSize = pageSize;
            this.updateDisplayedPageSizeOptions();
            this.state.pageSize = this._pageSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoSimpleTablePagination.prototype, "pageSizeOptions", {
        get: function () {
            return this._pageSizeOptions;
        },
        set: function (pageSizeOptions) {
            this._pageSizeOptions = pageSizeOptions;
            this.updateDisplayedPageSizeOptions();
        },
        enumerable: true,
        configurable: true
    });
    NovoSimpleTablePagination.prototype.ngOnInit = function () {
        this._initialized = true;
        this.updateDisplayedPageSizeOptions();
    };
    NovoSimpleTablePagination.prototype.ngOnDestroy = function () {
        this.resetSubscription.unsubscribe();
    };
    NovoSimpleTablePagination.prototype.nextPage = function () {
        if (!this.hasNextPage()) {
            return;
        }
        this.page++;
        this.emitPageEvent();
    };
    NovoSimpleTablePagination.prototype.previousPage = function () {
        if (!this.hasPreviousPage()) {
            return;
        }
        this.page--;
        this.emitPageEvent();
    };
    NovoSimpleTablePagination.prototype.hasPreviousPage = function () {
        return this.page >= 1 && this.pageSize !== 0;
    };
    NovoSimpleTablePagination.prototype.hasNextPage = function () {
        var numberOfPages = Math.ceil(this.length / this.pageSize) - 1;
        return this.page < numberOfPages && this.pageSize !== 0;
    };
    NovoSimpleTablePagination.prototype.changePageSize = function (pageSize) {
        this.page = 0;
        this.pageSize = pageSize;
        this.emitPageEvent();
    };
    NovoSimpleTablePagination.prototype.updateDisplayedPageSizeOptions = function () {
        if (!this._initialized) {
            return;
        }
        if (!this.pageSize) {
            this._pageSize = this.pageSizeOptions.length !== 0 ? this.pageSizeOptions[0] : DEFAULT_PAGE_SIZE;
        }
        this.displayedPageSizeOptions = this.pageSizeOptions.slice();
        if (this.displayedPageSizeOptions.indexOf(this.pageSize) === -1) {
            this.displayedPageSizeOptions.push(this.pageSize);
        }
        this.displayedPageSizeOptions.sort(function (a, b) { return a - b; });
        this.changeDetectorRef.markForCheck();
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
    };
    NovoSimpleTablePagination.prototype.emitPageEvent = function () {
        var event = {
            page: this.page,
            pageSize: this.pageSize,
            length: this.length,
        };
        this.pageChange.next(event);
        this.state.page = this.page;
        this.state.pageSize = this.pageSize;
        this.longRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, false);
        this.shortRangeLabel = this.labels.getRangeText(this.page, this.pageSize, this.length, true);
        this.state.updates.next(event);
    };
    NovoSimpleTablePagination.ɵfac = function NovoSimpleTablePagination_Factory(t) { return new (t || NovoSimpleTablePagination)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(NovoActivityTableState)); };
    NovoSimpleTablePagination.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleTablePagination, selectors: [["novo-simple-table-pagination"]], inputs: { page: "page", length: "length", pageSize: "pageSize", pageSizeOptions: "pageSizeOptions" }, outputs: { pageChange: "pageChange" }, decls: 13, vars: 8, consts: [[1, "novo-simple-table-pagination-size"], ["data-automation-id", "novo-simple-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange", 4, "ngIf"], [4, "ngIf"], ["data-automation-id", "novo-simple-table-pagination-range-label-long", 1, "novo-simple-table-range-label-long"], ["data-automation-id", "novo-simple-table-pagination-range-label-short", 1, "novo-simple-table-range-label-short"], ["theme", "dialogue", "type", "button", "icon", "previous", "side", "left", "data-automation-id", "novo-simple-table-pagination-previous", 1, "novo-simple-table-pagination-navigation-previous", 3, "disabled", "click"], ["theme", "dialogue", "type", "button", "icon", "next", "side", "right", "data-automation-id", "novo-simple-table-pagination-next", 1, "novo-simple-table-pagination-navigation-next", 3, "disabled", "click"], ["data-automation-id", "novo-simple-table-pagination-tiles", 3, "ngModel", "options", "ngModelChange", "onChange"]], template: function NovoSimpleTablePagination_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵtemplate(1, NovoSimpleTablePagination_novo_tiles_1_Template, 1, 2, "novo-tiles", 1);
            ɵɵtemplate(2, NovoSimpleTablePagination_div_2_Template, 2, 1, "div", 2);
            ɵɵelementEnd();
            ɵɵelementStart(3, "div", 3);
            ɵɵtext(4);
            ɵɵelementEnd();
            ɵɵelementStart(5, "div", 4);
            ɵɵtext(6);
            ɵɵelementEnd();
            ɵɵelementStart(7, "button", 5);
            ɵɵlistener("click", function NovoSimpleTablePagination_Template_button_click_7_listener() { return ctx.previousPage(); });
            ɵɵelementStart(8, "span");
            ɵɵtext(9);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(10, "button", 6);
            ɵɵlistener("click", function NovoSimpleTablePagination_Template_button_click_10_listener() { return ctx.nextPage(); });
            ɵɵelementStart(11, "span");
            ɵɵtext(12);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.displayedPageSizeOptions.length > 1);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.displayedPageSizeOptions.length <= 1);
            ɵɵadvance(2);
            ɵɵtextInterpolate1(" ", ctx.longRangeLabel, " ");
            ɵɵadvance(2);
            ɵɵtextInterpolate1(" ", ctx.shortRangeLabel, " ");
            ɵɵadvance(1);
            ɵɵproperty("disabled", !ctx.hasPreviousPage());
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.labels.previous);
            ɵɵadvance(1);
            ɵɵproperty("disabled", !ctx.hasNextPage());
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.labels.next);
        } }, directives: [NgIf, NovoButtonElement, NovoTilesElement, NgControlStatus, NgModel], encapsulation: 2, changeDetection: 0 });
    return NovoSimpleTablePagination;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleTablePagination, [{
        type: Component,
        args: [{
                selector: 'novo-simple-table-pagination',
                template: "\n        <div class=\"novo-simple-table-pagination-size\">\n            <novo-tiles *ngIf=\"displayedPageSizeOptions.length > 1\"\n                        [(ngModel)]=\"pageSize\"\n                        [options]=\"displayedPageSizeOptions\"\n                        (onChange)=\"changePageSize($event)\"\n                        data-automation-id=\"novo-simple-table-pagination-tiles\">\n            </novo-tiles>\n            <div *ngIf=\"displayedPageSizeOptions.length <= 1\">{{ pageSize }}</div>\n        </div>\n\n        <div class=\"novo-simple-table-range-label-long\"data-automation-id=\"novo-simple-table-pagination-range-label-long\">\n            {{ longRangeLabel }}\n        </div>\n        <div class=\"novo-simple-table-range-label-short\"data-automation-id=\"novo-simple-table-pagination-range-label-short\">\n            {{ shortRangeLabel }}\n        </div>\n\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-simple-table-pagination-navigation-previous\"\n                (click)=\"previousPage()\"\n                icon=\"previous\"\n                side=\"left\"\n                [disabled]=\"!hasPreviousPage()\"\n                data-automation-id=\"novo-simple-table-pagination-previous\">\n            <span>{{ labels.previous }}</span>\n        </button>\n        <button theme=\"dialogue\" type=\"button\"\n                class=\"novo-simple-table-pagination-navigation-next\"\n                (click)=\"nextPage()\"\n                icon=\"next\"\n                side=\"right\"\n                [disabled]=\"!hasNextPage()\"\n                data-automation-id=\"novo-simple-table-pagination-next\">\n            <span>{{ labels.next }}</span>\n        </button>\n    ",
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: ChangeDetectorRef }, { type: NovoLabelService }, { type: NovoActivityTableState }]; }, { page: [{
            type: Input
        }], length: [{
            type: Input
        }], pageSize: [{
            type: Input
        }], pageSizeOptions: [{
            type: Input
        }], pageChange: [{
            type: Output
        }] }); })();

/** Workaround for https://github.com/angular/angular/issues/17849 */
var _NovoHeaderRowDef = CdkHeaderRowDef;
var _NovoCdkRowDef = CdkRowDef;
var _NovoHeaderRow = CdkHeaderRow;
var _NovoRow = CdkRow;
var NovoSimpleHeaderRowDef = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderRowDef, _super);
    function NovoSimpleHeaderRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleHeaderRowDef.ɵfac = function NovoSimpleHeaderRowDef_Factory(t) { return ɵNovoSimpleHeaderRowDef_BaseFactory(t || NovoSimpleHeaderRowDef); };
    NovoSimpleHeaderRowDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleHeaderRowDef, selectors: [["", "novoSimpleHeaderRowDef", ""]], inputs: { columns: ["novoSimpleHeaderRowDef", "columns"] }, features: [ɵɵProvidersFeature([{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }]), ɵɵInheritDefinitionFeature] });
    return NovoSimpleHeaderRowDef;
}(_NovoHeaderRowDef));
var ɵNovoSimpleHeaderRowDef_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleHeaderRowDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderRowDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleHeaderRowDef]',
                providers: [{ provide: CdkHeaderRowDef, useExisting: NovoSimpleHeaderRowDef }],
            }]
    }], null, { columns: [{
            type: Input,
            args: ['novoSimpleHeaderRowDef']
        }] }); })();
var NovoSimpleRowDef = /** @class */ (function (_super) {
    __extends(NovoSimpleRowDef, _super);
    function NovoSimpleRowDef() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoSimpleRowDef.ɵfac = function NovoSimpleRowDef_Factory(t) { return ɵNovoSimpleRowDef_BaseFactory(t || NovoSimpleRowDef); };
    NovoSimpleRowDef.ɵdir = ɵɵdefineDirective({ type: NovoSimpleRowDef, selectors: [["", "novoSimpleRowDef", ""]], inputs: { columns: ["novoSimpleRowDefColumns", "columns"] }, features: [ɵɵProvidersFeature([{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }]), ɵɵInheritDefinitionFeature] });
    return NovoSimpleRowDef;
}(_NovoCdkRowDef));
var ɵNovoSimpleRowDef_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleRowDef);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleRowDef, [{
        type: Directive,
        args: [{
                selector: '[novoSimpleRowDef]',
                providers: [{ provide: CdkRowDef, useExisting: NovoSimpleRowDef }],
            }]
    }], null, { columns: [{
            type: Input,
            args: ['novoSimpleRowDefColumns']
        }] }); })();
var NovoSimpleHeaderRow = /** @class */ (function (_super) {
    __extends(NovoSimpleHeaderRow, _super);
    function NovoSimpleHeaderRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-simple-header-row';
        _this.role = 'row';
        return _this;
    }
    NovoSimpleHeaderRow.ɵfac = function NovoSimpleHeaderRow_Factory(t) { return ɵNovoSimpleHeaderRow_BaseFactory(t || NovoSimpleHeaderRow); };
    NovoSimpleHeaderRow.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleHeaderRow, selectors: [["novo-simple-header-row"]], hostVars: 3, hostBindings: function NovoSimpleHeaderRow_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
            ɵɵclassMap(ctx.rowClass);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoSimpleHeaderRow_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementContainer(0, 0);
        } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoSimpleHeaderRow;
}(_NovoHeaderRow));
var ɵNovoSimpleHeaderRow_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleHeaderRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleHeaderRow, [{
        type: Component,
        args: [{
                selector: 'novo-simple-header-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();
var NovoSimpleRow = /** @class */ (function (_super) {
    __extends(NovoSimpleRow, _super);
    function NovoSimpleRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowClass = 'novo-simple-row';
        _this.role = 'row';
        return _this;
    }
    NovoSimpleRow.ɵfac = function NovoSimpleRow_Factory(t) { return ɵNovoSimpleRow_BaseFactory(t || NovoSimpleRow); };
    NovoSimpleRow.ɵcmp = ɵɵdefineComponent({ type: NovoSimpleRow, selectors: [["novo-simple-row"]], hostVars: 3, hostBindings: function NovoSimpleRow_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("role", ctx.role);
            ɵɵclassMap(ctx.rowClass);
        } }, features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [["cdkCellOutlet", ""]], template: function NovoSimpleRow_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementContainer(0, 0);
        } }, directives: [CdkCellOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoSimpleRow;
}(_NovoRow));
var ɵNovoSimpleRow_BaseFactory = ɵɵgetInheritedFactory(NovoSimpleRow);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleRow, [{
        type: Component,
        args: [{
                selector: 'novo-simple-row',
                template: CDK_ROW_TEMPLATE,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { rowClass: [{
            type: HostBinding,
            args: ['class']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }] }); })();

var RemoteActivityTableService = /** @class */ (function () {
    function RemoteActivityTableService() {
    }
    return RemoteActivityTableService;
}());
var StaticActivityTableService = /** @class */ (function () {
    function StaticActivityTableService(data) {
        if (data === void 0) { data = []; }
        this.data = data;
    }
    StaticActivityTableService.prototype.getTableResults = function (sort, filter, page, pageSize, globalSearch, outsideFilter) {
        if (page === void 0) { page = 0; }
        var ret = Helpers.deepClone(this.data);
        if (ret.length !== 0) {
            if (globalSearch) {
                ret = ret.filter(function (item) { return Object.keys(item).some(function (key) { return ("" + item[key]).toLowerCase().includes(globalSearch.toLowerCase()); }); });
            }
            if (filter) {
                var value = Helpers.isString(filter.value) ? filter.value.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') : filter.value;
                ret = ret.filter(Helpers.filterByField(filter.id, value));
            }
            if (sort) {
                ret = ret.sort(Helpers.sortByField(sort.id, sort.value === 'desc'));
            }
            if (!Helpers.isBlank(page) && !Helpers.isBlank(pageSize)) {
                ret = ret.slice(page * pageSize, (page + 1) * pageSize);
            }
        }
        return of({ results: ret, total: this.data.length });
    };
    return StaticActivityTableService;
}());
var ActivityTableDataSource = /** @class */ (function (_super) {
    __extends(ActivityTableDataSource, _super);
    function ActivityTableDataSource(tableService, state, ref) {
        var _this = _super.call(this) || this;
        _this.tableService = tableService;
        _this.state = state;
        _this.ref = ref;
        _this.total = 0;
        _this.current = 0;
        _this.loading = false;
        _this.pristine = true;
        return _this;
    }
    Object.defineProperty(ActivityTableDataSource.prototype, "totallyEmpty", {
        get: function () {
            return this.total === 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ActivityTableDataSource.prototype, "currentlyEmpty", {
        get: function () {
            return this.current === 0;
        },
        enumerable: true,
        configurable: true
    });
    ActivityTableDataSource.prototype.connect = function () {
        var _this = this;
        var displayDataChanges = [this.state.updates];
        return merge.apply(void 0, __spread(displayDataChanges)).pipe(startWith(null), switchMap(function () {
            _this.pristine = false;
            _this.loading = true;
            return _this.tableService.getTableResults(_this.state.sort, _this.state.filter, _this.state.page, _this.state.pageSize, _this.state.globalSearch, _this.state.outsideFilter);
        }), map(function (data) {
            _this.loading = false;
            _this.total = data.total;
            _this.current = data.results.length;
            setTimeout(function () {
                _this.ref.markForCheck();
            });
            return data.results;
        }), catchError(function (error) {
            console.error(error); // tslint: disable-line
            _this.loading = false;
            return of(null);
        }));
    };
    ActivityTableDataSource.prototype.disconnect = function () { };
    return ActivityTableDataSource;
}(DataSource));

var _c0$Q = [[["caption"]]];
var _c1$v = ["caption"];
function NovoActivityTable_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementStart(1, "p");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "p");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "p");
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementStart(7, "p");
    ɵɵtext(8);
    ɵɵelementEnd();
    ɵɵelementStart(9, "p");
    ɵɵtext(10);
    ɵɵelementEnd();
    ɵɵelementStart(11, "p");
    ɵɵtext(12);
    ɵɵelementEnd();
    ɵɵelementStart(13, "p");
    ɵɵtext(14);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Total: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.total, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Current: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.current, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Totally Empty: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.totallyEmpty, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Currently Empty: ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.currentlyEmpty, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Loading (DataSource): ", ctx_r0.dataSource == null ? null : ctx_r0.dataSource.loading, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("User Filtered: ", ctx_r0.state.userFiltered, "");
    ɵɵadvance(2);
    ɵɵtextInterpolate1("Loading (Table): ", ctx_r0.loading, "");
} }
function NovoActivityTable_header_1_novo_search_2_Template(rf, ctx) { if (rf & 1) {
    var _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-search", 11);
    ɵɵlistener("searchChanged", function NovoActivityTable_header_1_novo_search_2_Template_novo_search_searchChanged_0_listener($event) { ɵɵrestoreView(_r10); var ctx_r9 = ɵɵnextContext(2); return ctx_r9.onSearchChange($event); })("ngModelChange", function NovoActivityTable_header_1_novo_search_2_Template_novo_search_ngModelChange_0_listener($event) { ɵɵrestoreView(_r10); var ctx_r11 = ɵɵnextContext(2); return ctx_r11.state.globalSearch = $event; });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r7 = ɵɵnextContext(2);
    ɵɵproperty("ngModel", ctx_r7.state.globalSearch)("placeholder", ctx_r7.searchOptions == null ? null : ctx_r7.searchOptions.placeholder)("hint", ctx_r7.searchOptions == null ? null : ctx_r7.searchOptions.tooltip);
} }
function NovoActivityTable_header_1_novo_simple_table_pagination_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-table-pagination", 12);
} if (rf & 2) {
    var ctx_r8 = ɵɵnextContext(2);
    ɵɵproperty("length", ctx_r8.dataSource == null ? null : ctx_r8.dataSource.total)("page", ctx_r8.paginationOptions.page)("pageSize", ctx_r8.paginationOptions.pageSize)("pageSizeOptions", ctx_r8.paginationOptions.pageSizeOptions);
} }
function NovoActivityTable_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵprojection(1);
    ɵɵtemplate(2, NovoActivityTable_header_1_novo_search_2_Template, 1, 3, "novo-search", 8);
    ɵɵtemplate(3, NovoActivityTable_header_1_novo_simple_table_pagination_3_Template, 1, 4, "novo-simple-table-pagination", 9);
    ɵɵelementStart(4, "div", 10);
    ɵɵprojection(5, 1);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngIf", !ctx_r1.hideGlobalSearch);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.paginationOptions);
} }
function NovoActivityTable_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelement(1, "novo-loading");
    ɵɵelementEnd();
} }
function NovoActivityTable_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 14);
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_header_cell_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-checkbox-header-cell");
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_cell_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-checkbox-cell", 22);
} if (rf & 2) {
    var row_r18 = ctx.$implicit;
    var i_r19 = ctx.index;
    ɵɵproperty("row", row_r18)("index", i_r19);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_empty_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-empty-header-cell");
} if (rf & 2) {
    var column_r20 = ɵɵnextContext().$implicit;
    ɵɵclassProp("button-header-cell", !column_r20.options)("dropdown-header-cell", column_r20.options);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_action_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-action-cell", 26);
} if (rf & 2) {
    var row_r24 = ctx.$implicit;
    var column_r20 = ɵɵnextContext().$implicit;
    ɵɵproperty("row", row_r24)("column", column_r20);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0, 23);
    ɵɵtemplate(1, NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_empty_header_cell_1_Template, 1, 4, "novo-simple-empty-header-cell", 24);
    ɵɵtemplate(2, NovoActivityTable_novo_simple_table_6_ng_container_5_novo_simple_action_cell_2_Template, 1, 2, "novo-simple-action-cell", 25);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var column_r20 = ctx.$implicit;
    ɵɵproperty("novoSimpleColumnDef", column_r20.id);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_header_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-simple-header-cell", 29);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r27 = ɵɵnextContext().$implicit;
    var ctx_r28 = ɵɵnextContext(2);
    ɵɵproperty("column", column_r27)("novo-simple-cell-config", column_r27.config)("defaultSort", ctx_r28.defaultSort);
    ɵɵadvance(1);
    ɵɵtextInterpolate(column_r27.label);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_cell_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-cell", 30);
} if (rf & 2) {
    var row_r31 = ctx.$implicit;
    var column_r27 = ɵɵnextContext().$implicit;
    ɵɵproperty("column", column_r27)("row", row_r31);
} }
function NovoActivityTable_novo_simple_table_6_ng_container_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0, 23);
    ɵɵtemplate(1, NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_header_cell_1_Template, 2, 4, "novo-simple-header-cell", 27);
    ɵɵtemplate(2, NovoActivityTable_novo_simple_table_6_ng_container_6_novo_simple_cell_2_Template, 1, 2, "novo-simple-cell", 28);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var column_r27 = ctx.$implicit;
    ɵɵproperty("novoSimpleColumnDef", column_r27.id);
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_header_row_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-header-row");
} }
function NovoActivityTable_novo_simple_table_6_novo_simple_row_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-simple-row");
} }
function NovoActivityTable_novo_simple_table_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-simple-table", 15);
    ɵɵprojection(1, 3);
    ɵɵelementContainerStart(2, 16);
    ɵɵtemplate(3, NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_header_cell_3_Template, 1, 0, "novo-simple-checkbox-header-cell", 17);
    ɵɵtemplate(4, NovoActivityTable_novo_simple_table_6_novo_simple_checkbox_cell_4_Template, 1, 2, "novo-simple-checkbox-cell", 18);
    ɵɵelementContainerEnd();
    ɵɵtemplate(5, NovoActivityTable_novo_simple_table_6_ng_container_5_Template, 3, 1, "ng-container", 19);
    ɵɵtemplate(6, NovoActivityTable_novo_simple_table_6_ng_container_6_Template, 3, 1, "ng-container", 19);
    ɵɵtemplate(7, NovoActivityTable_novo_simple_table_6_novo_simple_header_row_7_Template, 1, 0, "novo-simple-header-row", 20);
    ɵɵtemplate(8, NovoActivityTable_novo_simple_table_6_novo_simple_row_8_Template, 1, 0, "novo-simple-row", 21);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("empty", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.currentlyEmpty) && ctx_r4.state.userFiltered);
    ɵɵproperty("dataSource", ctx_r4.dataSource)("hidden", (ctx_r4.dataSource == null ? null : ctx_r4.dataSource.totallyEmpty) && !ctx_r4.state.userFiltered);
    ɵɵadvance(5);
    ɵɵproperty("ngForOf", ctx_r4.actionColumns);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r4.columns);
    ɵɵadvance(1);
    ɵɵproperty("novoSimpleHeaderRowDef", ctx_r4.displayedColumns);
    ɵɵadvance(1);
    ɵɵproperty("novoSimpleRowDefColumns", ctx_r4.displayedColumns);
} }
function NovoActivityTable_div_7_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 35);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r35 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r35.labels.noMatchingRecordsMessage, "");
} }
function NovoActivityTable_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 31);
    ɵɵelementStart(1, "div", null, 32);
    ɵɵprojection(3, 4);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoActivityTable_div_7_div_4_Template, 4, 1, "div", 33);
    ɵɵelementEnd();
} if (rf & 2) {
    var _r34 = ɵɵreference(2);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", _r34.childNodes.length == 0);
} }
function NovoActivityTable_div_8_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 34);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 35);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r37 = ɵɵnextContext(2);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r37.labels.emptyTableMessage, "");
} }
function NovoActivityTable_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 36);
    ɵɵelementStart(1, "div", null, 37);
    ɵɵprojection(3, 5);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoActivityTable_div_8_div_4_Template, 4, 1, "div", 33);
    ɵɵelementEnd();
} if (rf & 2) {
    var _r36 = ɵɵreference(2);
    ɵɵadvance(4);
    ɵɵproperty("ngIf", _r36.childNodes.length == 0);
} }
var _c2$d = [[["", "novo-activity-table-custom-header", ""]], [["", "novo-activity-table-actions", ""]], [["", "novo-activity-table-custom-filter", ""]], "*", [["", "novo-activity-table-no-results-message", ""]], [["", "novo-activity-table-empty-message", ""]]];
var _c3$8 = ["[novo-activity-table-custom-header]", "[novo-activity-table-actions]", "[novo-activity-table-custom-filter]", "*", "[novo-activity-table-no-results-message]", "[novo-activity-table-empty-message]"];
/** Workaround for https://github.com/angular/angular/issues/17849 */
var _NovoTable = CdkTable;
var NovoTable = /** @class */ (function (_super) {
    __extends(NovoTable, _super);
    function NovoTable() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoTable.ɵfac = function NovoTable_Factory(t) { return ɵNovoTable_BaseFactory(t || NovoTable); };
    NovoTable.ɵcmp = ɵɵdefineComponent({ type: NovoTable, selectors: [["novo-simple-table"]], features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c1$v, decls: 4, vars: 0, consts: [["headerRowOutlet", ""], ["rowOutlet", ""], ["footerRowOutlet", ""]], template: function NovoTable_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$Q);
            ɵɵprojection(0);
            ɵɵelementContainer(1, 0);
            ɵɵelementContainer(2, 1);
            ɵɵelementContainer(3, 2);
        } }, directives: [HeaderRowOutlet, DataRowOutlet, FooterRowOutlet], encapsulation: 2, changeDetection: 0 });
    return NovoTable;
}(_NovoTable));
var ɵNovoTable_BaseFactory = ɵɵgetInheritedFactory(NovoTable);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTable, [{
        type: Component,
        args: [{
                selector: 'novo-simple-table',
                template: CDK_TABLE_TEMPLATE,
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, null); })();
var NovoActivityTableActions = /** @class */ (function () {
    function NovoActivityTableActions() {
    }
    NovoActivityTableActions.ɵfac = function NovoActivityTableActions_Factory(t) { return new (t || NovoActivityTableActions)(); };
    NovoActivityTableActions.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableActions, selectors: [["novo-activity-table-actions"]] });
    return NovoActivityTableActions;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableActions, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-actions',
            }]
    }], null, null); })();
var NovoActivityTableCustomHeader = /** @class */ (function () {
    function NovoActivityTableCustomHeader() {
    }
    NovoActivityTableCustomHeader.ɵfac = function NovoActivityTableCustomHeader_Factory(t) { return new (t || NovoActivityTableCustomHeader)(); };
    NovoActivityTableCustomHeader.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableCustomHeader, selectors: [["novo-activity-table-custom-header"]] });
    return NovoActivityTableCustomHeader;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableCustomHeader, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-custom-header',
            }]
    }], null, null); })();
var NovoActivityTableCustomFilter = /** @class */ (function () {
    function NovoActivityTableCustomFilter() {
    }
    NovoActivityTableCustomFilter.ɵfac = function NovoActivityTableCustomFilter_Factory(t) { return new (t || NovoActivityTableCustomFilter)(); };
    NovoActivityTableCustomFilter.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableCustomFilter, selectors: [["novo-activity-table-custom-filter"]] });
    return NovoActivityTableCustomFilter;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableCustomFilter, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-custom-filter',
            }]
    }], null, null); })();
var NovoActivityTableEmptyMessage = /** @class */ (function () {
    function NovoActivityTableEmptyMessage() {
    }
    NovoActivityTableEmptyMessage.ɵfac = function NovoActivityTableEmptyMessage_Factory(t) { return new (t || NovoActivityTableEmptyMessage)(); };
    NovoActivityTableEmptyMessage.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableEmptyMessage, selectors: [["novo-activity-table-empty-message"]] });
    return NovoActivityTableEmptyMessage;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableEmptyMessage, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-empty-message',
            }]
    }], null, null); })();
var NovoActivityTableNoResultsMessage = /** @class */ (function () {
    function NovoActivityTableNoResultsMessage() {
    }
    NovoActivityTableNoResultsMessage.ɵfac = function NovoActivityTableNoResultsMessage_Factory(t) { return new (t || NovoActivityTableNoResultsMessage)(); };
    NovoActivityTableNoResultsMessage.ɵdir = ɵɵdefineDirective({ type: NovoActivityTableNoResultsMessage, selectors: [["novo-activity-table-no-results-message"]] });
    return NovoActivityTableNoResultsMessage;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTableNoResultsMessage, [{
        type: Directive,
        args: [{
                selector: 'novo-activity-table-no-results-message',
            }]
    }], null, null); })();
var NovoActivityTable = /** @class */ (function () {
    function NovoActivityTable(labels, ref, state) {
        this.labels = labels;
        this.ref = ref;
        this.state = state;
        this.globalSearchHiddenClassToggle = false;
        this.loading = true;
        notify('[Deprecated]: The simple table is deprecated. Please migrate to novo-data-tables!');
    }
    Object.defineProperty(NovoActivityTable.prototype, "customFilter", {
        get: function () {
            return this._customFilter;
        },
        set: function (v) {
            this._customFilter = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "forceShowHeader", {
        get: function () {
            return this._forceShowHeader;
        },
        set: function (v) {
            this._forceShowHeader = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "hideGlobalSearch", {
        get: function () {
            return this._hideGlobalSearch;
        },
        set: function (v) {
            this._hideGlobalSearch = coerceBooleanProperty(v);
            this.globalSearchHiddenClassToggle = this._hideGlobalSearch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "debug", {
        get: function () {
            return this._debug;
        },
        set: function (v) {
            this._debug = coerceBooleanProperty(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "empty", {
        get: function () {
            return this.dataSource && this.dataSource.totallyEmpty;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoActivityTable.prototype, "loadingClass", {
        get: function () {
            return this.loading || (this.dataSource && this.dataSource.loading);
        },
        enumerable: true,
        configurable: true
    });
    NovoActivityTable.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.loading = changes['activityService'] && !changes['activityService'].currentValue;
        this.ref.detectChanges();
        if (changes['activityService'] && changes['activityService'].currentValue) {
            this.loading = false;
            this.dataSource = new ActivityTableDataSource(this.activityService, this.state, this.ref);
            this.ref.detectChanges();
        }
        if (changes['outsideFilter'] && changes['outsideFilter'].currentValue) {
            if (!this.outsideFilterSubscription) {
                this.outsideFilterSubscription = this.outsideFilter.subscribe(function (filter) {
                    _this.state.outsideFilter = filter;
                    _this.state.updates.next({ globalSearch: _this.state.globalSearch, filter: _this.state.filter, sort: _this.state.sort });
                    _this.ref.markForCheck();
                });
            }
        }
    };
    NovoActivityTable.prototype.ngOnDestroy = function () {
        if (this.outsideFilterSubscription) {
            this.outsideFilterSubscription.unsubscribe();
        }
    };
    NovoActivityTable.prototype.ngAfterContentInit = function () {
        if (this.paginationOptions && !this.paginationOptions.page) {
            this.paginationOptions.page = 0;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSize) {
            this.paginationOptions.pageSize = 50;
        }
        if (this.paginationOptions && !this.paginationOptions.pageSizeOptions) {
            this.paginationOptions.pageSizeOptions = [10, 25, 50, 100];
        }
        this.state.page = this.paginationOptions ? this.paginationOptions.page : undefined;
        this.state.pageSize = this.paginationOptions ? this.paginationOptions.pageSize : undefined;
        this.ref.markForCheck();
    };
    NovoActivityTable.prototype.onSearchChange = function (term) {
        this.state.globalSearch = term;
        this.state.reset(false, true);
        this.state.updates.next({ globalSearch: term, filter: this.state.filter, sort: this.state.sort });
    };
    NovoActivityTable.ɵfac = function NovoActivityTable_Factory(t) { return new (t || NovoActivityTable)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NovoActivityTableState)); };
    NovoActivityTable.ɵcmp = ɵɵdefineComponent({ type: NovoActivityTable, selectors: [["novo-activity-table"]], hostVars: 6, hostBindings: function NovoActivityTable_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("global-search-hidden", ctx.globalSearchHiddenClassToggle)("empty", ctx.empty)("loading", ctx.loadingClass);
        } }, inputs: { activityService: "activityService", columns: "columns", displayedColumns: "displayedColumns", actionColumns: "actionColumns", paginationOptions: "paginationOptions", searchOptions: "searchOptions", defaultSort: "defaultSort", outsideFilter: "outsideFilter", customFilter: "customFilter", forceShowHeader: "forceShowHeader", hideGlobalSearch: "hideGlobalSearch", debug: "debug" }, features: [ɵɵProvidersFeature([NovoActivityTableState]), ɵɵNgOnChangesFeature], ngContentSelectors: _c3$8, decls: 9, vars: 7, consts: [[4, "ngIf"], ["class", "novo-activity-table-loading-mask", "data-automation-id", "novo-activity-table-loading", 4, "ngIf"], [1, "novo-activity-table-filter-container"], ["class", "novo-activity-table-custom-filter", 4, "ngIf"], [1, "novo-activity-table-container"], ["novoSortFilter", "", "novoSelection", "", 3, "dataSource", "empty", "hidden", 4, "ngIf"], ["class", "novo-activity-table-no-results-container", 4, "ngIf"], ["class", "novo-activity-table-empty-container", 4, "ngIf"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange", 4, "ngIf"], [3, "length", "page", "pageSize", "pageSizeOptions", 4, "ngIf"], [1, "novo-activity-table-actions"], ["alwaysOpen", "true", 3, "ngModel", "placeholder", "hint", "searchChanged", "ngModelChange"], [3, "length", "page", "pageSize", "pageSizeOptions"], ["data-automation-id", "novo-activity-table-loading", 1, "novo-activity-table-loading-mask"], [1, "novo-activity-table-custom-filter"], ["novoSortFilter", "", "novoSelection", "", 3, "dataSource", "hidden"], ["novoSimpleColumnDef", "selection"], [4, "novoSimpleHeaderCellDef"], [3, "row", "index", 4, "novoSimpleCellDef"], [3, "novoSimpleColumnDef", 4, "ngFor", "ngForOf"], [4, "novoSimpleHeaderRowDef"], [4, "novoSimpleRowDef", "novoSimpleRowDefColumns"], [3, "row", "index"], [3, "novoSimpleColumnDef"], [3, "button-header-cell", "dropdown-header-cell", 4, "novoSimpleHeaderCellDef"], [3, "row", "column", 4, "novoSimpleCellDef"], [3, "row", "column"], [3, "column", "novo-simple-cell-config", "defaultSort", 4, "novoSimpleHeaderCellDef"], [3, "column", "row", 4, "novoSimpleCellDef"], [3, "column", "novo-simple-cell-config", "defaultSort"], [3, "column", "row"], [1, "novo-activity-table-no-results-container"], ["filtered", ""], ["class", "novo-activity-table-empty-message", 4, "ngIf"], [1, "novo-activity-table-empty-message"], [1, "bhi-search-question"], [1, "novo-activity-table-empty-container"], ["empty", ""]], template: function NovoActivityTable_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c2$d);
            ɵɵtemplate(0, NovoActivityTable_div_0_Template, 15, 7, "div", 0);
            ɵɵtemplate(1, NovoActivityTable_header_1_Template, 6, 2, "header", 0);
            ɵɵtemplate(2, NovoActivityTable_div_2_Template, 2, 0, "div", 1);
            ɵɵelementStart(3, "div", 2);
            ɵɵtemplate(4, NovoActivityTable_div_4_Template, 2, 0, "div", 3);
            ɵɵelementStart(5, "div", 4);
            ɵɵtemplate(6, NovoActivityTable_novo_simple_table_6_Template, 9, 8, "novo-simple-table", 5);
            ɵɵtemplate(7, NovoActivityTable_div_7_Template, 5, 1, "div", 6);
            ɵɵtemplate(8, NovoActivityTable_div_8_Template, 5, 1, "div", 7);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.debug);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !((ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !ctx.state.userFiltered) && !ctx.loading || ctx.forceShowHeader);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.loading) || ctx.loading);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.customFilter);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", (ctx.columns == null ? null : ctx.columns.length) > 0);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.currentlyEmpty) && ctx.state.userFiltered && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.dataSource.pristine);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", (ctx.dataSource == null ? null : ctx.dataSource.totallyEmpty) && !(ctx.dataSource == null ? null : ctx.dataSource.loading) && !ctx.loading && !ctx.state.userFiltered && !ctx.dataSource.pristine);
        } }, directives: [NgIf, NovoSearchBoxElement, NgControlStatus, NgModel, NovoSimpleTablePagination, NovoLoadingElement, NovoTable, NovoSortFilter, NovoSelection, NovoSimpleColumnDef, NovoSimpleHeaderCellDef, NovoSimpleCellDef, NgForOf, NovoSimpleHeaderRowDef, NovoSimpleRowDef, NovoSimpleCheckboxHeaderCell, NovoSimpleCheckboxCell, NovoSimpleEmptyHeaderCell, NovoSimpleActionCell, NovoSimpleHeaderCell, NovoSimpleCellHeader, NovoSimpleCell, NovoSimpleHeaderRow, NovoSimpleRow], encapsulation: 2, changeDetection: 0 });
    return NovoActivityTable;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoActivityTable, [{
        type: Component,
        args: [{
                selector: 'novo-activity-table',
                template: "\n        <div *ngIf=\"debug\">\n            <p>Total: {{ dataSource?.total }}</p>\n            <p>Current: {{ dataSource?.current }}</p>\n            <p>Totally Empty: {{ dataSource?.totallyEmpty }}</p>\n            <p>Currently Empty: {{ dataSource?.currentlyEmpty }}</p>\n            <p>Loading (DataSource): {{ dataSource?.loading }}</p>\n            <p>User Filtered: {{ state.userFiltered }}</p>\n            <p>Loading (Table): {{ loading }}</p>\n        </div>\n        <header *ngIf=\"(!(dataSource?.totallyEmpty && !state.userFiltered) && !loading) || forceShowHeader\">\n            <ng-content select=\"[novo-activity-table-custom-header]\"></ng-content>\n            <novo-search\n                alwaysOpen=\"true\"\n                (searchChanged)=\"onSearchChange($event)\"\n                [(ngModel)]=\"state.globalSearch\"\n                *ngIf=\"!hideGlobalSearch\"\n                [placeholder]=\"searchOptions?.placeholder\"\n                [hint]=\"searchOptions?.tooltip\">\n            </novo-search>\n            <novo-simple-table-pagination\n                *ngIf=\"paginationOptions\"\n                [length]=\"dataSource?.total\"\n                [page]=\"paginationOptions.page\"\n                [pageSize]=\"paginationOptions.pageSize\"\n                [pageSizeOptions]=\"paginationOptions.pageSizeOptions\">\n            </novo-simple-table-pagination>\n            <div class=\"novo-activity-table-actions\">\n                <ng-content select=\"[novo-activity-table-actions]\"></ng-content>\n            </div>\n        </header>\n        <div class=\"novo-activity-table-loading-mask\" *ngIf=\"dataSource?.loading || loading\" data-automation-id=\"novo-activity-table-loading\">\n            <novo-loading></novo-loading>\n        </div>\n        <div class=\"novo-activity-table-filter-container\">\n            <div class=\"novo-activity-table-custom-filter\" *ngIf=\"customFilter\">\n                <ng-content select=\"[novo-activity-table-custom-filter]\"></ng-content>\n            </div>\n            <div class=\"novo-activity-table-container\">\n                <novo-simple-table *ngIf=\"(columns?.length > 0)\" [dataSource]=\"dataSource\" novoSortFilter novoSelection [class.empty]=\"dataSource?.currentlyEmpty && state.userFiltered\" [hidden]=\"dataSource?.totallyEmpty && !state.userFiltered\">\n                    <ng-content></ng-content>\n                    <ng-container novoSimpleColumnDef=\"selection\">\n                        <novo-simple-checkbox-header-cell *novoSimpleHeaderCellDef></novo-simple-checkbox-header-cell>\n                        <novo-simple-checkbox-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [index]=\"i\"></novo-simple-checkbox-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of actionColumns\" [novoSimpleColumnDef]=\"column.id\">\n                        <novo-simple-empty-header-cell [class.button-header-cell]=\"!column.options\" [class.dropdown-header-cell]=\"column.options\" *novoSimpleHeaderCellDef></novo-simple-empty-header-cell>\n                        <novo-simple-action-cell *novoSimpleCellDef=\"let row; let i = index\" [row]=\"row\" [column]=\"column\"></novo-simple-action-cell>\n                    </ng-container>\n                    <ng-container *ngFor=\"let column of columns\" [novoSimpleColumnDef]=\"column.id\">\n                        <novo-simple-header-cell *novoSimpleHeaderCellDef [column]=\"column\" [novo-simple-cell-config]=\"column.config\" [defaultSort]=\"defaultSort\">{{ column.label }}</novo-simple-header-cell>\n                        <novo-simple-cell *novoSimpleCellDef=\"let row\" [column]=\"column\" [row]=\"row\"></novo-simple-cell>\n                    </ng-container>\n                    <novo-simple-header-row *novoSimpleHeaderRowDef=\"displayedColumns\"></novo-simple-header-row>\n                    <novo-simple-row *novoSimpleRowDef=\"let row; columns: displayedColumns;\"></novo-simple-row>\n                </novo-simple-table>\n                <div class=\"novo-activity-table-no-results-container\" *ngIf=\"dataSource?.currentlyEmpty && state.userFiltered && !dataSource?.loading && !loading && !dataSource.pristine\">\n                    <div #filtered><ng-content select=\"[novo-activity-table-no-results-message]\"></ng-content></div>\n                    <div class=\"novo-activity-table-empty-message\" *ngIf=\"filtered.childNodes.length == 0\">\n                        <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                    </div>\n                </div>\n                <div class=\"novo-activity-table-empty-container\" *ngIf=\"dataSource?.totallyEmpty && !dataSource?.loading && !loading && !state.userFiltered && !dataSource.pristine\">\n                    <div #empty><ng-content select=\"[novo-activity-table-empty-message]\"></ng-content></div>\n                    <div class=\"novo-activity-table-empty-message\" *ngIf=\"empty.childNodes.length == 0\">\n                        <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                    </div>\n                </div>\n            </div>\n        </div>\n    ",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [NovoActivityTableState],
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ChangeDetectorRef }, { type: NovoActivityTableState }]; }, { globalSearchHiddenClassToggle: [{
            type: HostBinding,
            args: ['class.global-search-hidden']
        }], activityService: [{
            type: Input
        }], columns: [{
            type: Input
        }], displayedColumns: [{
            type: Input
        }], actionColumns: [{
            type: Input
        }], paginationOptions: [{
            type: Input
        }], searchOptions: [{
            type: Input
        }], defaultSort: [{
            type: Input
        }], outsideFilter: [{
            type: Input
        }], customFilter: [{
            type: Input
        }], forceShowHeader: [{
            type: Input
        }], hideGlobalSearch: [{
            type: Input
        }], debug: [{
            type: Input
        }], empty: [{
            type: HostBinding,
            args: ['class.empty']
        }], loadingClass: [{
            type: HostBinding,
            args: ['class.loading']
        }] }); })();

var NovoSimpleTableModule = /** @class */ (function () {
    function NovoSimpleTableModule() {
    }
    NovoSimpleTableModule.ɵmod = ɵɵdefineNgModule({ type: NovoSimpleTableModule });
    NovoSimpleTableModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSimpleTableModule_Factory(t) { return new (t || NovoSimpleTableModule)(); }, providers: [NovoActivityTableState], imports: [[
                NovoDatePickerModule,
                CdkTableModule,
                CommonModule,
                FormsModule,
                NovoButtonModule,
                NovoDropdownModule,
                NovoFormExtrasModule,
                NovoLoadingModule,
                NovoTilesModule,
                NovoSearchBoxModule,
            ]] });
    return NovoSimpleTableModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSimpleTableModule, { declarations: [NovoTable,
        NovoSimpleCellDef,
        NovoSimpleHeaderCellDef,
        NovoSimpleColumnDef,
        NovoActivityTableEmptyMessage,
        NovoActivityTableNoResultsMessage,
        NovoSimpleHeaderRowDef,
        NovoSimpleRowDef,
        NovoSimpleCellHeader,
        NovoSortFilter,
        NovoSimpleActionCell,
        NovoSimpleEmptyHeaderCell,
        NovoSimpleHeaderCell,
        NovoSimpleCell,
        NovoSimpleHeaderRow,
        NovoSimpleRow,
        NovoSimpleFilterFocus,
        NovoSimpleTablePagination,
        NovoActivityTableCustomHeader,
        NovoSimpleCheckboxCell,
        NovoSimpleCheckboxHeaderCell,
        NovoSelection,
        NovoActivityTable,
        NovoActivityTableActions,
        NovoActivityTableCustomFilter], imports: [NovoDatePickerModule,
        CdkTableModule,
        CommonModule,
        FormsModule,
        NovoButtonModule,
        NovoDropdownModule,
        NovoFormExtrasModule,
        NovoLoadingModule,
        NovoTilesModule,
        NovoSearchBoxModule], exports: [NovoTable,
        NovoSimpleCellDef,
        NovoSimpleHeaderCellDef,
        NovoSimpleColumnDef,
        NovoActivityTableEmptyMessage,
        NovoActivityTableNoResultsMessage,
        NovoSimpleHeaderRowDef,
        NovoSimpleRowDef,
        NovoSimpleCellHeader,
        NovoSortFilter,
        NovoSimpleActionCell,
        NovoSimpleEmptyHeaderCell,
        NovoSimpleHeaderCell,
        NovoSimpleCell,
        NovoSimpleHeaderRow,
        NovoSimpleRow,
        NovoSimpleFilterFocus,
        NovoSimpleTablePagination,
        NovoActivityTableCustomHeader,
        NovoSimpleCheckboxCell,
        NovoSimpleCheckboxHeaderCell,
        NovoSelection,
        NovoActivityTable,
        NovoActivityTableActions,
        NovoActivityTableCustomFilter] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSimpleTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    NovoDatePickerModule,
                    CdkTableModule,
                    CommonModule,
                    FormsModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                    NovoFormExtrasModule,
                    NovoLoadingModule,
                    NovoTilesModule,
                    NovoSearchBoxModule,
                ],
                exports: [
                    NovoTable,
                    NovoSimpleCellDef,
                    NovoSimpleHeaderCellDef,
                    NovoSimpleColumnDef,
                    NovoActivityTableEmptyMessage,
                    NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef,
                    NovoSimpleRowDef,
                    NovoSimpleCellHeader,
                    NovoSortFilter,
                    NovoSimpleActionCell,
                    NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell,
                    NovoSimpleCell,
                    NovoSimpleHeaderRow,
                    NovoSimpleRow,
                    NovoSimpleFilterFocus,
                    NovoSimpleTablePagination,
                    NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell,
                    NovoSimpleCheckboxHeaderCell,
                    NovoSelection,
                    NovoActivityTable,
                    NovoActivityTableActions,
                    NovoActivityTableCustomFilter,
                ],
                declarations: [
                    NovoTable,
                    NovoSimpleCellDef,
                    NovoSimpleHeaderCellDef,
                    NovoSimpleColumnDef,
                    NovoActivityTableEmptyMessage,
                    NovoActivityTableNoResultsMessage,
                    NovoSimpleHeaderRowDef,
                    NovoSimpleRowDef,
                    NovoSimpleCellHeader,
                    NovoSortFilter,
                    NovoSimpleActionCell,
                    NovoSimpleEmptyHeaderCell,
                    NovoSimpleHeaderCell,
                    NovoSimpleCell,
                    NovoSimpleHeaderRow,
                    NovoSimpleRow,
                    NovoSimpleFilterFocus,
                    NovoSimpleTablePagination,
                    NovoActivityTableCustomHeader,
                    NovoSimpleCheckboxCell,
                    NovoSimpleCheckboxHeaderCell,
                    NovoSelection,
                    NovoActivityTable,
                    NovoActivityTableActions,
                    NovoActivityTableCustomFilter,
                ],
                providers: [NovoActivityTableState],
            }]
    }], null, null); })();

// NG2
function NovoSliderElement_button_3_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function NovoSliderElement_button_3_Template_button_click_0_listener() { ɵɵrestoreView(_r5); var ctx_r4 = ɵɵnextContext(); return ctx_r4.changeSlide("back"); });
    ɵɵelementEnd();
} }
function NovoSliderElement_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 8);
} if (rf & 2) {
    var indicator_r6 = ctx.$implicit;
    ɵɵproperty("ngClass", indicator_r6);
} }
function NovoSliderElement_button_6_Template(rf, ctx) { if (rf & 1) {
    var _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 9);
    ɵɵlistener("click", function NovoSliderElement_button_6_Template_button_click_0_listener() { ɵɵrestoreView(_r9); var ctx_r8 = ɵɵnextContext(); return ctx_r8.changeSlide("next"); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.labels.next);
} }
function NovoSliderElement_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0, 1, ["*ngIf", "end"]);
} }
var _c0$R = [[["div", "slide", ""]], [["button"]]];
var _c1$w = ["div[slide]", "button"];
var NovoSliderElement = /** @class */ (function () {
    function NovoSliderElement(element, labels) {
        this.element = element;
        this.labels = labels;
        this.currentSlide = 0;
        this.start = true;
        this.end = true;
        this.currSlides = ['active'];
        this.handleKeyDownFunc = this.handleKeyDown.bind(this);
    }
    NovoSliderElement.prototype.ngOnInit = function () {
        for (var i = 0; i < this.slides; i++) {
            this.currSlides[i] = i > 0 ? 'inactive' : 'active';
        }
        // Catch Tab Events
        this.element.nativeElement.addEventListener('keydown', this.handleKeyDownFunc);
    };
    NovoSliderElement.prototype.ngOnDestroy = function () {
        this.element.nativeElement.removeEventListener('keydown', this.handleKeyDownFunc);
    };
    NovoSliderElement.prototype.handleKeyDown = function (event) {
        if (event.keyCode === 9) {
            event.stopImmediatePropagation();
            event.preventDefault();
        }
    };
    NovoSliderElement.prototype.changeSlide = function (direction) {
        if (direction === 'next') {
            if (this.currentSlide === this.slides - 1) {
                return;
            }
            this.currentSlide++;
        }
        else {
            if (this.currentSlide === 0) {
                return;
            }
            this.currentSlide--;
        }
        for (var i = 0; i < this.slides; i++) {
            this.currSlides[i] = 'inactive';
        }
        this.currSlides[this.currentSlide] = 'active';
        this.start = this.currentSlide === 0;
        this.end = this.currentSlide === this.slides - 1;
        this.currentClass = "slide-" + this.currentSlide;
    };
    NovoSliderElement.ɵfac = function NovoSliderElement_Factory(t) { return new (t || NovoSliderElement)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NovoLabelService)); };
    NovoSliderElement.ɵcmp = ɵɵdefineComponent({ type: NovoSliderElement, selectors: [["novo-slider"]], hostVars: 2, hostBindings: function NovoSliderElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassMap(ctx.currentClass);
        } }, inputs: { slides: "slides" }, ngContentSelectors: _c1$w, decls: 8, vars: 4, consts: [[1, "slides"], [1, "controls"], ["theme", "icon", "icon", "previous", 3, "click", 4, "ngIf"], [1, "indicators"], ["class", "indicator-circle", 3, "ngClass", 4, "ngFor", "ngForOf"], ["theme", "primary", "icon", "next", 3, "click", 4, "ngIf"], [4, "ngIf"], ["theme", "icon", "icon", "previous", 3, "click"], [1, "indicator-circle", 3, "ngClass"], ["theme", "primary", "icon", "next", 3, "click"]], template: function NovoSliderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c0$R);
            ɵɵelementStart(0, "section", 0);
            ɵɵprojection(1);
            ɵɵelementEnd();
            ɵɵelementStart(2, "div", 1);
            ɵɵtemplate(3, NovoSliderElement_button_3_Template, 1, 0, "button", 2);
            ɵɵelementStart(4, "div", 3);
            ɵɵtemplate(5, NovoSliderElement_div_5_Template, 1, 1, "div", 4);
            ɵɵelementEnd();
            ɵɵtemplate(6, NovoSliderElement_button_6_Template, 2, 1, "button", 5);
            ɵɵtemplate(7, NovoSliderElement_7_Template, 1, 0, undefined, 6);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(3);
            ɵɵproperty("ngIf", !ctx.start);
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx.currSlides);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.end);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.end);
        } }, directives: [NgIf, NgForOf, NovoButtonElement, NgClass], encapsulation: 2 });
    return NovoSliderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSliderElement, [{
        type: Component,
        args: [{
                selector: 'novo-slider',
                template: "\n        <section class=\"slides\">\n            <ng-content select=\"div[slide]\"></ng-content>\n        </section>\n        <div class=\"controls\">\n            <button *ngIf=\"!start\" theme=\"icon\" icon=\"previous\" (click)=\"changeSlide('back')\"></button>\n            <div class=\"indicators\">\n                <div class=\"indicator-circle\" *ngFor=\"let indicator of currSlides; let i = index\" [ngClass]=\"indicator\"></div>\n            </div>\n            <button *ngIf=\"!end\" theme=\"primary\" icon=\"next\" (click)=\"changeSlide('next')\">{{ labels.next }}</button>\n            <ng-content select=\"button\" *ngIf=\"end\"></ng-content>\n        </div>\n    ",
                host: {
                    '[class]': 'currentClass',
                },
            }]
    }], function () { return [{ type: ElementRef }, { type: NovoLabelService }]; }, { slides: [{
            type: Input
        }] }); })();

// NG2
var NovoSliderModule = /** @class */ (function () {
    function NovoSliderModule() {
    }
    NovoSliderModule.ɵmod = ɵɵdefineNgModule({ type: NovoSliderModule });
    NovoSliderModule.ɵinj = ɵɵdefineInjector({ factory: function NovoSliderModule_Factory(t) { return new (t || NovoSliderModule)(); }, imports: [[CommonModule, NovoButtonModule]] });
    return NovoSliderModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoSliderModule, { declarations: [NovoSliderElement], imports: [CommonModule, NovoButtonModule], exports: [NovoSliderElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoSliderModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, NovoButtonModule],
                declarations: [NovoSliderElement],
                exports: [NovoSliderElement],
            }]
    }], null, null); })();

var NovoStepLabel = /** @class */ (function (_super) {
    __extends(NovoStepLabel, _super);
    function NovoStepLabel(template) {
        return _super.call(this, template) || this;
    }
    NovoStepLabel.ɵfac = function NovoStepLabel_Factory(t) { return new (t || NovoStepLabel)(ɵɵdirectiveInject(TemplateRef)); };
    NovoStepLabel.ɵdir = ɵɵdefineDirective({ type: NovoStepLabel, selectors: [["", "novoStepLabel", ""]], features: [ɵɵInheritDefinitionFeature] });
    return NovoStepLabel;
}(CdkStepLabel));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepLabel, [{
        type: Directive,
        args: [{
                selector: '[novoStepLabel]',
            }]
    }], function () { return [{ type: TemplateRef }]; }, null); })();

function NovoStepHeader_ng_container_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "novo-icon", 5);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("theme", ctx_r0.theme);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r0.icon);
} }
function NovoStepHeader_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "span", 6);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.index + 1);
} }
function NovoStepHeader_ng_container_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainer(0, 7);
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngTemplateOutlet", ctx_r2._templateLabel().template);
} }
function NovoStepHeader_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.label);
} }
var NovoStepHeader = /** @class */ (function (_super) {
    __extends(NovoStepHeader, _super);
    function NovoStepHeader(_focusMonitor, _element) {
        var _this = _super.call(this, _element) || this;
        _this._focusMonitor = _focusMonitor;
        _this._element = _element;
        _focusMonitor.monitor(_element.nativeElement, true);
        return _this;
    }
    Object.defineProperty(NovoStepHeader.prototype, "index", {
        /** Index of the given step. */
        get: function () {
            return this._index;
        },
        set: function (value) {
            this._index = coerceNumberProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "selected", {
        /** Whether the given step is selected. */
        get: function () {
            return this._selected;
        },
        set: function (value) {
            this._selected = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "active", {
        /** Whether the given step label is active. */
        get: function () {
            return this._active;
        },
        set: function (value) {
            this._active = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "touched", {
        /** Whether the given step label is active. */
        get: function () {
            return this.selected || this.state === 'edit' || this.state === 'done';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoStepHeader.prototype, "optional", {
        /** Whether the given step is optional. */
        get: function () {
            return this._optional;
        },
        set: function (value) {
            this._optional = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NovoStepHeader.prototype.ngOnDestroy = function () {
        this._focusMonitor.stopMonitoring(this._element.nativeElement);
    };
    /** Returns string label of given step if it is a text label. */
    NovoStepHeader.prototype._stringLabel = function () {
        return this.label instanceof NovoStepLabel ? null : this.label;
    };
    /** Returns NovoStepLabel if the label of given step is a template label. */
    NovoStepHeader.prototype._templateLabel = function () {
        return this.label instanceof NovoStepLabel ? this.label : null;
    };
    /** Returns the host HTML element. */
    NovoStepHeader.prototype._getHostElement = function () {
        return this._element.nativeElement;
    };
    NovoStepHeader.ɵfac = function NovoStepHeader_Factory(t) { return new (t || NovoStepHeader)(ɵɵdirectiveInject(FocusMonitor), ɵɵdirectiveInject(ElementRef)); };
    NovoStepHeader.ɵcmp = ɵɵdefineComponent({ type: NovoStepHeader, selectors: [["novo-step-header"]], hostAttrs: ["role", "tab", 1, "novo-step-header"], inputs: { theme: "theme", color: "color", icon: "icon", state: "state", label: "label", iconOverrides: "iconOverrides", index: "index", selected: "selected", active: "active", optional: "optional" }, features: [ɵɵInheritDefinitionFeature], decls: 7, vars: 13, consts: [[4, "ngIf"], [1, "novo-step-label"], [3, "ngTemplateOutlet", 4, "ngIf"], ["class", "novo-step-text-label", 4, "ngIf"], [3, "state"], ["size", "small", "raised", "true", 3, "theme"], [1, "novo-step-number"], [3, "ngTemplateOutlet"], [1, "novo-step-text-label"]], template: function NovoStepHeader_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div");
            ɵɵtemplate(1, NovoStepHeader_ng_container_1_Template, 3, 2, "ng-container", 0);
            ɵɵtemplate(2, NovoStepHeader_ng_container_2_Template, 3, 1, "ng-container", 0);
            ɵɵelementEnd();
            ɵɵelementStart(3, "div", 1);
            ɵɵtemplate(4, NovoStepHeader_ng_container_4_Template, 1, 1, "ng-container", 2);
            ɵɵtemplate(5, NovoStepHeader_div_5_Template, 2, 1, "div", 3);
            ɵɵelementEnd();
            ɵɵelement(6, "novo-step-status", 4);
        } if (rf & 2) {
            ɵɵclassProp("novo-step-icon", ctx.touched)("novo-step-icon-not-touched", !ctx.touched);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.icon);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.icon);
            ɵɵadvance(1);
            ɵɵclassProp("novo-step-label-active", ctx.active)("novo-step-label-selected", ctx.selected);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx._templateLabel());
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx._stringLabel());
            ɵɵadvance(1);
            ɵɵproperty("state", ctx.state);
        } }, styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-step-header[_ngcontent-%COMP%]{overflow:visible;outline:0;cursor:pointer;position:relative}.novo-step-optional[_ngcontent-%COMP%]{font-size:12px}.novo-step-icon[_ngcontent-%COMP%], .novo-step-icon-not-touched[_ngcontent-%COMP%]{border-radius:50%;height:24px;width:24px;align-items:center;justify-content:center;display:flex}.novo-step-icon[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%], .novo-step-icon-not-touched[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%]{font-size:1em;min-width:1.6em;height:1.6em;box-shadow:2px 2px 0 rgba(0,0,0,.2);display:flex;align-items:center;justify-content:center;border-radius:4px}.novo-step-icon[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%]{background:#4a89dc;color:#fff}.novo-step-icon-not-touched[_ngcontent-%COMP%]   .novo-step-number[_ngcontent-%COMP%]{background:#a9adbb;color:#fff}.novo-step-label[_ngcontent-%COMP%]{display:inline-block;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;min-width:50px;vertical-align:middle;text-align:center;padding:4px 0}.novo-step-text-label[_ngcontent-%COMP%]{text-align:center;text-overflow:ellipsis;overflow:hidden}"], changeDetection: 0 });
    return NovoStepHeader;
}(CdkStepHeader));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepHeader, [{
        type: Component,
        args: [{
                selector: 'novo-step-header',
                templateUrl: 'step-header.component.html',
                styleUrls: ['step-header.component.scss'],
                host: {
                    class: 'novo-step-header',
                    role: 'tab',
                },
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: FocusMonitor }, { type: ElementRef }]; }, { theme: [{
            type: Input
        }], color: [{
            type: Input
        }], icon: [{
            type: Input
        }], state: [{
            type: Input
        }], label: [{
            type: Input
        }], iconOverrides: [{
            type: Input
        }], index: [{
            type: Input
        }], selected: [{
            type: Input
        }], active: [{
            type: Input
        }], optional: [{
            type: Input
        }] }); })();

/** Animations used by the Novo steppers. */
var novoStepperAnimations = {
    /** Animation that transitions the step along the X axis in a horizontal stepper. */
    horizontalStepTransition: trigger('stepTransition', [
        state('previous', style({ transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden' })),
        state('current', style({ transform: 'none', visibility: 'visible' })),
        state('next', style({ transform: 'translate3d(100%, 0, 0)', visibility: 'hidden' })),
        transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)')),
    ]),
    /** Animation that transitions the step along the Y axis in a vertical stepper. */
    verticalStepTransition: trigger('stepTransition', [
        state('previous', style({ height: '0px', visibility: 'hidden' })),
        state('next', style({ height: '0px', visibility: 'hidden' })),
        state('current', style({ height: '*', visibility: 'visible' })),
        transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),
    ]),
};

function NovoStep_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵprojection(0);
} }
var _c0$S = ["*"];
function NovoHorizontalStepper_ng_container_2_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "novo-step-header", 6);
    ɵɵlistener("click", function NovoHorizontalStepper_ng_container_2_Template_novo_step_header_click_1_listener() { var step_r2 = ctx.$implicit; return step_r2.select(); })("keydown", function NovoHorizontalStepper_ng_container_2_Template_novo_step_header_keydown_1_listener($event) { ɵɵrestoreView(_r7); var ctx_r6 = ɵɵnextContext(); return ctx_r6._onKeydown($event); });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var step_r2 = ctx.$implicit;
    var i_r3 = ctx.index;
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("tabIndex", ctx_r0._getFocusIndex() === i_r3 ? 0 : 0 - 1)("id", ctx_r0._getStepLabelId(i_r3))("index", i_r3)("theme", step_r2.theme)("color", step_r2.color)("icon", step_r2.icon)("state", ctx_r0.getIndicatorType(i_r3))("label", step_r2.stepLabel || step_r2.label)("selected", ctx_r0.selectedIndex === i_r3)("active", step_r2.completed || ctx_r0.selectedIndex === i_r3 || !ctx_r0.linear)("optional", step_r2.optional)("iconOverrides", ctx_r0._iconOverrides);
    ɵɵattribute("aria-controls", ctx_r0._getStepContentId(i_r3))("aria-selected", ctx_r0.selectedIndex == i_r3);
} }
function NovoHorizontalStepper_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵelementContainer(1, 8);
    ɵɵelementEnd();
} if (rf & 2) {
    var step_r8 = ctx.$implicit;
    var i_r9 = ctx.index;
    var ctx_r1 = ɵɵnextContext();
    ɵɵproperty("@stepTransition", ctx_r1._getAnimationDirection(i_r9))("id", ctx_r1._getStepContentId(i_r9));
    ɵɵattribute("aria-labelledby", ctx_r1._getStepLabelId(i_r9))("aria-expanded", ctx_r1.selectedIndex === i_r9);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", step_r8.content);
} }
function NovoVerticalStepper_div_0_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵelementStart(1, "novo-step-header", 2);
    ɵɵlistener("click", function NovoVerticalStepper_div_0_Template_novo_step_header_click_1_listener() { var step_r1 = ctx.$implicit; return step_r1.select(); })("keydown", function NovoVerticalStepper_div_0_Template_novo_step_header_keydown_1_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(); return ctx_r5._onKeydown($event); });
    ɵɵelementEnd();
    ɵɵelementStart(2, "div", 3);
    ɵɵelementStart(3, "div", 4);
    ɵɵelementStart(4, "div", 5);
    ɵɵelementContainer(5, 6);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var step_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var isLast_r3 = ctx.last;
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("tabIndex", ctx_r0._getFocusIndex() == i_r2 ? 0 : 0 - 1)("id", ctx_r0._getStepLabelId(i_r2))("index", i_r2)("theme", step_r1.theme)("color", step_r1.color)("icon", step_r1.icon)("state", ctx_r0.getIndicatorType(i_r2))("label", step_r1.stepLabel || step_r1.label)("selected", ctx_r0.selectedIndex === i_r2)("active", step_r1.completed || ctx_r0.selectedIndex === i_r2 || !ctx_r0.linear)("optional", step_r1.optional)("iconOverrides", ctx_r0._iconOverrides);
    ɵɵattribute("aria-controls", ctx_r0._getStepContentId(i_r2))("aria-selected", ctx_r0.selectedIndex === i_r2);
    ɵɵadvance(1);
    ɵɵclassProp("novo-stepper-vertical-line", !isLast_r3);
    ɵɵproperty("ngClass", ctx_r0.getIndicatorType(i_r2));
    ɵɵadvance(1);
    ɵɵproperty("@stepTransition", ctx_r0._getAnimationDirection(i_r2))("id", ctx_r0._getStepContentId(i_r2));
    ɵɵattribute("aria-labelledby", ctx_r0._getStepLabelId(i_r2))("aria-expanded", ctx_r0.selectedIndex === i_r2);
    ɵɵadvance(2);
    ɵɵproperty("ngTemplateOutlet", step_r1.content);
} }
var _NovoStep = CdkStep;
var _NovoStepper = CdkStepper;
var NovoStep = /** @class */ (function (_super) {
    __extends(NovoStep, _super);
    function NovoStep(stepper) {
        return _super.call(this, stepper) || this;
    }
    NovoStep.ɵfac = function NovoStep_Factory(t) { return new (t || NovoStep)(ɵɵdirectiveInject(forwardRef(function () { return NovoStepper; }))); };
    NovoStep.ɵcmp = ɵɵdefineComponent({ type: NovoStep, selectors: [["novo-step"]], contentQueries: function NovoStep_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoStepLabel, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.stepLabel = _t.first);
        } }, inputs: { theme: "theme", color: "color", icon: "icon" }, features: [ɵɵInheritDefinitionFeature], ngContentSelectors: _c0$S, decls: 1, vars: 0, template: function NovoStep_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵtemplate(0, NovoStep_ng_template_0_Template, 1, 0, "ng-template");
        } }, encapsulation: 2, changeDetection: 0 });
    return NovoStep;
}(CdkStep));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStep, [{
        type: Component,
        args: [{
                selector: 'novo-step',
                templateUrl: 'step.component.html',
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: CdkStepper, decorators: [{
                type: Inject,
                args: [forwardRef(function () { return NovoStepper; })]
            }] }]; }, { stepLabel: [{
            type: ContentChild,
            args: [NovoStepLabel]
        }], theme: [{
            type: Input
        }], color: [{
            type: Input
        }], icon: [{
            type: Input
        }] }); })();
var NovoStepper = /** @class */ (function (_super) {
    __extends(NovoStepper, _super);
    function NovoStepper() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /** Consumer-specified template-refs to be used to override the header icons. */
        _this._iconOverrides = {};
        return _this;
    }
    Object.defineProperty(NovoStepper.prototype, "completed", {
        get: function () {
            try {
                var steps = this._steps.toArray();
                var length_1 = steps.length - 1;
                return steps[length_1].completed && length_1 === this.selectedIndex;
            }
            catch (err) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    NovoStepper.prototype.ngAfterContentInit = function () {
        var _this = this;
        // Mark the component for change detection whenever the content children query changes
        this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(function () { return _this._stateChanged(); });
    };
    NovoStepper.prototype.complete = function () {
        try {
            var steps = this._steps.toArray();
            steps[this.selectedIndex].completed = true;
            this.next();
            this._stateChanged();
        }
        catch (err) {
            // do nothing
        }
    };
    NovoStepper.prototype.getIndicatorType = function (index) {
        var steps = this._steps.toArray();
        if (index === this.selectedIndex) {
            if (steps[index] && index === steps.length - 1 && steps[index].completed) {
                return 'done';
            }
            return 'edit';
        }
        if (index < this.selectedIndex) {
            return 'done';
        }
        return 'none';
    };
    NovoStepper.ɵfac = function NovoStepper_Factory(t) { return ɵNovoStepper_BaseFactory(t || NovoStepper); };
    NovoStepper.ɵdir = ɵɵdefineDirective({ type: NovoStepper, selectors: [["", "novoStepper", ""]], contentQueries: function NovoStepper_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
            ɵɵcontentQuery(dirIndex, NovoStep, false);
            ɵɵcontentQuery(dirIndex, NovoIconComponent, false);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._steps = _t);
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._icons = _t);
        } }, viewQuery: function NovoStepper_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(NovoStepHeader, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx._stepHeader = _t);
        } }, features: [ɵɵInheritDefinitionFeature] });
    return NovoStepper;
}(CdkStepper));
var ɵNovoStepper_BaseFactory = ɵɵgetInheritedFactory(NovoStepper);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepper, [{
        type: Directive,
        args: [{
                selector: '[novoStepper]',
            }]
    }], null, { _stepHeader: [{
            type: ViewChildren,
            args: [NovoStepHeader]
        }], _steps: [{
            type: ContentChildren,
            args: [NovoStep]
        }], _icons: [{
            type: ContentChildren,
            args: [NovoIconComponent]
        }] }); })();
var NovoHorizontalStepper = /** @class */ (function (_super) {
    __extends(NovoHorizontalStepper, _super);
    function NovoHorizontalStepper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoHorizontalStepper.ɵfac = function NovoHorizontalStepper_Factory(t) { return ɵNovoHorizontalStepper_BaseFactory(t || NovoHorizontalStepper); };
    NovoHorizontalStepper.ɵcmp = ɵɵdefineComponent({ type: NovoHorizontalStepper, selectors: [["novo-horizontal-stepper"]], hostAttrs: ["aria-orientation", "horizontal", "role", "tablist", 1, "novo-stepper-horizontal"], inputs: { selectedIndex: "selectedIndex" }, features: [ɵɵProvidersFeature([{ provide: NovoStepper, useExisting: NovoHorizontalStepper }]), ɵɵInheritDefinitionFeature], decls: 6, vars: 4, consts: [[1, "novo-horizontal-stepper-header-container"], [1, "novo-stepper-horizontal-line", "complete"], [4, "ngFor", "ngForOf"], [1, "novo-stepper-horizontal-line"], [1, "novo-horizontal-content-container"], ["class", "novo-horizontal-stepper-content", "role", "tabpanel", 3, "id", 4, "ngFor", "ngForOf"], [1, "novo-horizontal-stepper-header", 3, "tabIndex", "id", "index", "theme", "color", "icon", "state", "label", "selected", "active", "optional", "iconOverrides", "click", "keydown"], ["role", "tabpanel", 1, "novo-horizontal-stepper-content", 3, "id"], [3, "ngTemplateOutlet"]], template: function NovoHorizontalStepper_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelement(1, "div", 1);
            ɵɵtemplate(2, NovoHorizontalStepper_ng_container_2_Template, 2, 14, "ng-container", 2);
            ɵɵelement(3, "div", 3);
            ɵɵelementEnd();
            ɵɵelementStart(4, "div", 4);
            ɵɵtemplate(5, NovoHorizontalStepper_div_5_Template, 2, 5, "div", 5);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx._steps);
            ɵɵadvance(1);
            ɵɵclassProp("complete", ctx.completed);
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx._steps);
        } }, directives: [NgForOf, NovoStepHeader, NgTemplateOutlet], styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-stepper-horizontal[_ngcontent-%COMP%], .novo-stepper-vertical[_ngcontent-%COMP%]{display:block}.novo-horizontal-stepper-header-container[_ngcontent-%COMP%]{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f4f4f4}.novo-stepper-horizontal-line[_ngcontent-%COMP%]{border-bottom:1px solid #d9dadc;flex:auto;min-width:0;height:80px}.novo-stepper-horizontal-line.complete[_ngcontent-%COMP%]{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]{width:100%;position:absolute}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #d9dadc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #d9dadc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.done[_ngcontent-%COMP%]:before, .novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.edit[_ngcontent-%COMP%]:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.done[_ngcontent-%COMP%]:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%]{position:relative}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%]:before{content:\"\";display:block;background:#fff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative;z-index:1}.novo-vertical-stepper-header[_ngcontent-%COMP%]{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon[_ngcontent-%COMP%], .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon-not-touched[_ngcontent-%COMP%]{margin-right:12px}[dir=rtl][_ngcontent-%COMP%]   .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon[_ngcontent-%COMP%], [dir=rtl][_ngcontent-%COMP%]   .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon-not-touched[_ngcontent-%COMP%]{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content[_ngcontent-%COMP%]{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false][_ngcontent-%COMP%]{height:0}.novo-horizontal-content-container[_ngcontent-%COMP%]{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container[_ngcontent-%COMP%]{margin-left:36px;border:0;position:relative}[dir=rtl][_ngcontent-%COMP%]   .novo-vertical-content-container[_ngcontent-%COMP%]{margin-left:0;margin-right:36px}.novo-stepper-vertical-line[_ngcontent-%COMP%]:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left:1px solid #d9dadc}[dir=rtl][_ngcontent-%COMP%]   .novo-stepper-vertical-line[_ngcontent-%COMP%]:before{left:auto;right:0}.novo-stepper-vertical-line.done[_ngcontent-%COMP%]:after, .novo-stepper-vertical-line.done[_ngcontent-%COMP%]:before, .novo-stepper-vertical-line.edit[_ngcontent-%COMP%]:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical[_ngcontent-%COMP%]   novo-step-status[_ngcontent-%COMP%]{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content[_ngcontent-%COMP%]{overflow:hidden}.novo-vertical-content[_ngcontent-%COMP%]{padding:0 24px 24px}.novo-step[_ngcontent-%COMP%]:last-child   .novo-vertical-content-container[_ngcontent-%COMP%]{border:none}"], data: { animation: [novoStepperAnimations.horizontalStepTransition] }, changeDetection: 0 });
    return NovoHorizontalStepper;
}(NovoStepper));
var ɵNovoHorizontalStepper_BaseFactory = ɵɵgetInheritedFactory(NovoHorizontalStepper);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoHorizontalStepper, [{
        type: Component,
        args: [{
                selector: 'novo-horizontal-stepper',
                templateUrl: 'stepper-horizontal.html',
                styleUrls: ['stepper.component.scss'],
                host: {
                    class: 'novo-stepper-horizontal',
                    'aria-orientation': 'horizontal',
                    role: 'tablist',
                },
                animations: [novoStepperAnimations.horizontalStepTransition],
                providers: [{ provide: NovoStepper, useExisting: NovoHorizontalStepper }],
                // encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], null, { selectedIndex: [{
            type: Input
        }] }); })();
var NovoVerticalStepper = /** @class */ (function (_super) {
    __extends(NovoVerticalStepper, _super);
    function NovoVerticalStepper(dir, changeDetectorRef) {
        var _this = _super.call(this, dir, changeDetectorRef) || this;
        _this._orientation = 'vertical';
        return _this;
    }
    NovoVerticalStepper.ɵfac = function NovoVerticalStepper_Factory(t) { return new (t || NovoVerticalStepper)(ɵɵdirectiveInject(Directionality, 8), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoVerticalStepper.ɵcmp = ɵɵdefineComponent({ type: NovoVerticalStepper, selectors: [["novo-vertical-stepper"]], hostAttrs: ["aria-orientation", "vertical", "role", "tablist", 1, "novo-stepper-vertical"], inputs: { selectedIndex: "selectedIndex" }, features: [ɵɵProvidersFeature([{ provide: NovoStepper, useExisting: NovoVerticalStepper }]), ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "novo-step", 4, "ngFor", "ngForOf"], [1, "novo-step"], [1, "novo-vertical-stepper-header", 3, "tabIndex", "id", "index", "theme", "color", "icon", "state", "label", "selected", "active", "optional", "iconOverrides", "click", "keydown"], [1, "novo-vertical-content-container", 3, "ngClass"], ["role", "tabpanel", 1, "novo-vertical-stepper-content", 3, "id"], [1, "novo-vertical-content"], [3, "ngTemplateOutlet"]], template: function NovoVerticalStepper_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, NovoVerticalStepper_div_0_Template, 6, 22, "div", 0);
        } if (rf & 2) {
            ɵɵproperty("ngForOf", ctx._steps);
        } }, directives: [NgForOf, NovoStepHeader, NgClass, NgTemplateOutlet], styles: ["@-webkit-keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@keyframes rotate{0%{transform:rotateZ(0)}75%{transform:rotateZ(200deg)}100%{transform:rotateZ(180deg)}}@-webkit-keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@keyframes half-rotate{0%{transform:rotateZ(45deg)}75%{transform:rotateZ(100deg)}100%{transform:rotateZ(90deg)}}@-webkit-keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@keyframes rotateBack{0%{transform:rotateZ(90deg)}100%{transform:rotateZ(0)}}@-webkit-keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}@keyframes show{0%{opacity:0;transform:translateX(-100%)}75%{transform:translateX(0)}100%{opacity:1;transform:translateX(0)}}.novo-stepper-horizontal[_ngcontent-%COMP%], .novo-stepper-vertical[_ngcontent-%COMP%]{display:block}.novo-horizontal-stepper-header-container[_ngcontent-%COMP%]{white-space:nowrap;display:flex;align-items:center;justify-content:center;margin-bottom:1em;background:#f4f4f4}.novo-stepper-horizontal-line[_ngcontent-%COMP%]{border-bottom:1px solid #d9dadc;flex:auto;min-width:0;height:80px}.novo-stepper-horizontal-line.complete[_ngcontent-%COMP%]{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]{display:flex;height:80px;flex-flow:column;overflow:visible;align-items:center;justify-content:center;padding:0 24px}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]{display:flex;width:100%;justify-content:center;align-items:center;position:absolute;height:1px;bottom:0}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]{width:100%;position:absolute}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]:before{content:\"\";display:block;width:calc(50% - 8px);margin-right:8px;border-bottom:1px solid #d9dadc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line[_ngcontent-%COMP%]:after{content:\"\";display:block;width:calc(50% - 8px);margin-left:calc(50% + 8px);margin-top:-1px;border-top:1px solid #d9dadc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.done[_ngcontent-%COMP%]:before, .novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.edit[_ngcontent-%COMP%]:before{border-bottom:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-line.done[_ngcontent-%COMP%]:after{border-top:1px solid #4a89dc}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%]{position:relative}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%]:before{content:\"\";display:block;background:#fff;border-radius:50%;position:absolute;z-index:0;top:1px;left:1px;bottom:1px;right:1px}.novo-horizontal-stepper-header[_ngcontent-%COMP%]   .novo-step-status[_ngcontent-%COMP%]   .novo-stepper-status-icon[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{position:relative;z-index:1}.novo-vertical-stepper-header[_ngcontent-%COMP%]{display:flex;align-items:center;padding:24px;max-height:24px}.novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon[_ngcontent-%COMP%], .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon-not-touched[_ngcontent-%COMP%]{margin-right:12px}[dir=rtl][_ngcontent-%COMP%]   .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon[_ngcontent-%COMP%], [dir=rtl][_ngcontent-%COMP%]   .novo-vertical-stepper-header[_ngcontent-%COMP%]   .novo-step-icon-not-touched[_ngcontent-%COMP%]{margin-right:0;margin-left:12px}.novo-horizontal-stepper-content[_ngcontent-%COMP%]{overflow:hidden}.novo-horizontal-stepper-content[aria-expanded=false][_ngcontent-%COMP%]{height:0}.novo-horizontal-content-container[_ngcontent-%COMP%]{overflow:hidden;padding:0 24px 24px}.novo-vertical-content-container[_ngcontent-%COMP%]{margin-left:36px;border:0;position:relative}[dir=rtl][_ngcontent-%COMP%]   .novo-vertical-content-container[_ngcontent-%COMP%]{margin-left:0;margin-right:36px}.novo-stepper-vertical-line[_ngcontent-%COMP%]:before{content:\"\";position:absolute;top:-16px;bottom:-16px;left:0;z-index:-1;border-left:1px solid #d9dadc}[dir=rtl][_ngcontent-%COMP%]   .novo-stepper-vertical-line[_ngcontent-%COMP%]:before{left:auto;right:0}.novo-stepper-vertical-line.done[_ngcontent-%COMP%]:after, .novo-stepper-vertical-line.done[_ngcontent-%COMP%]:before, .novo-stepper-vertical-line.edit[_ngcontent-%COMP%]:before{border-left-color:1px solid #4a89dc}.novo-stepper-vertical[_ngcontent-%COMP%]   novo-step-status[_ngcontent-%COMP%]{position:absolute;left:35px;top:25px;transform:scale(.8)}.novo-vertical-stepper-content[_ngcontent-%COMP%]{overflow:hidden}.novo-vertical-content[_ngcontent-%COMP%]{padding:0 24px 24px}.novo-step[_ngcontent-%COMP%]:last-child   .novo-vertical-content-container[_ngcontent-%COMP%]{border:none}"], data: { animation: [novoStepperAnimations.verticalStepTransition] }, changeDetection: 0 });
    return NovoVerticalStepper;
}(NovoStepper));
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoVerticalStepper, [{
        type: Component,
        args: [{
                selector: 'novo-vertical-stepper',
                templateUrl: 'stepper-vertical.html',
                styleUrls: ['stepper.component.scss'],
                host: {
                    class: 'novo-stepper-vertical',
                    'aria-orientation': 'vertical',
                    role: 'tablist',
                },
                animations: [novoStepperAnimations.verticalStepTransition],
                providers: [{ provide: NovoStepper, useExisting: NovoVerticalStepper }],
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: Directionality, decorators: [{
                type: Optional
            }] }, { type: ChangeDetectorRef }]; }, { selectedIndex: [{
            type: Input
        }] }); })();

function NovoStepStatus_novo_icon_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 4);
    ɵɵtext(1, "check-circle");
    ɵɵelementEnd();
} }
function NovoStepStatus_novo_icon_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 4);
    ɵɵtext(1, "check-circle-filled");
    ɵɵelementEnd();
} }
function NovoStepStatus_novo_icon_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-icon", 4);
    ɵɵtext(1, "circle-o");
    ɵɵelementEnd();
} }
var NovoStepStatus = /** @class */ (function () {
    function NovoStepStatus(stepper, step) {
    }
    NovoStepStatus.ɵfac = function NovoStepStatus_Factory(t) { return new (t || NovoStepStatus)(ɵɵdirectiveInject(forwardRef(function () { return NovoStepper; })), ɵɵdirectiveInject(forwardRef(function () { return NovoStepHeader; }))); };
    NovoStepStatus.ɵcmp = ɵɵdefineComponent({ type: NovoStepStatus, selectors: [["novo-step-status"]], hostAttrs: [1, "novo-step-status"], inputs: { state: "state" }, decls: 5, vars: 4, consts: [[1, "novo-stepper-status-line", 3, "ngClass"], [1, "novo-stepper-status-icon", 3, "ngSwitch"], ["size", "small", "color", "positive", 4, "ngSwitchCase"], ["size", "small", "color", "positive", 4, "ngSwitchDefault"], ["size", "small", "color", "positive"]], template: function NovoStepStatus_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "div", 0);
            ɵɵelementStart(1, "div", 1);
            ɵɵtemplate(2, NovoStepStatus_novo_icon_2_Template, 2, 0, "novo-icon", 2);
            ɵɵtemplate(3, NovoStepStatus_novo_icon_3_Template, 2, 0, "novo-icon", 2);
            ɵɵtemplate(4, NovoStepStatus_novo_icon_4_Template, 2, 0, "novo-icon", 3);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngClass", ctx.state);
            ɵɵadvance(1);
            ɵɵproperty("ngSwitch", ctx.state);
            ɵɵadvance(1);
            ɵɵproperty("ngSwitchCase", "edit");
            ɵɵadvance(1);
            ɵɵproperty("ngSwitchCase", "done");
        } }, directives: [NgClass, NgSwitch, NgSwitchCase, NgSwitchDefault, NovoIconComponent], encapsulation: 2, changeDetection: 0 });
    return NovoStepStatus;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepStatus, [{
        type: Component,
        args: [{
                selector: 'novo-step-status',
                templateUrl: 'step-status.component.html',
                // encapsulation: ViewEncapsulation.None,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush,
                host: {
                    class: 'novo-step-status',
                },
            }]
    }], function () { return [{ type: NovoStepper, decorators: [{
                type: Inject,
                args: [forwardRef(function () { return NovoStepper; })]
            }] }, { type: NovoStepHeader, decorators: [{
                type: Inject,
                args: [forwardRef(function () { return NovoStepHeader; })]
            }] }]; }, { state: [{
            type: Input
        }] }); })();

var NovoStepperModule = /** @class */ (function () {
    function NovoStepperModule() {
    }
    NovoStepperModule.ɵmod = ɵɵdefineNgModule({ type: NovoStepperModule });
    NovoStepperModule.ɵinj = ɵɵdefineInjector({ factory: function NovoStepperModule_Factory(t) { return new (t || NovoStepperModule)(); }, imports: [[CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule]] });
    return NovoStepperModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoStepperModule, { declarations: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus], imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule], exports: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoStepperModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, PortalModule, NovoButtonModule, CdkStepperModule, NovoIconModule, A11yModule],
                exports: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
                declarations: [NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus],
            }]
    }], null, null); })();
ɵɵsetComponentScope(NovoStepHeader, [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase, CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective, NovoButtonElement, CdkStep, CdkStepper, CdkStepHeader, CdkStepLabel, CdkStepperNext, CdkStepperPrevious, NovoIconComponent, CdkAriaLive, CdkTrapFocus, CdkMonitorFocus, NovoHorizontalStepper, NovoVerticalStepper, NovoStep, NovoStepLabel, NovoStepper, NovoStepHeader, NovoStepStatus], [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe]);

var _c0$T = ["tabbedGroupPickerVirtualScrollViewport"];
function NovoTabbedGroupPickerElement_i_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 16);
} }
function NovoTabbedGroupPickerElement_i_9_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 17);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_i_9_Template_i_click_0_listener($event) { ɵɵrestoreView(_r8); var ctx_r7 = ɵɵnextContext(); return ctx_r7.onClearFilter($event); });
    ɵɵelementEnd();
} }
function NovoTabbedGroupPickerElement_novo_tab_14_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-tab", 18);
    ɵɵlistener("activeChange", function NovoTabbedGroupPickerElement_novo_tab_14_Template_novo_tab_activeChange_0_listener() { ɵɵrestoreView(_r11); var tab_r9 = ctx.$implicit; var ctx_r10 = ɵɵnextContext(); return ctx_r10.changeTab(tab_r9); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelement(3, "i", 19);
    ɵɵelementEnd();
} if (rf & 2) {
    var tab_r9 = ctx.$implicit;
    ɵɵattribute("data-automation-id", tab_r9.typeName);
    ɵɵadvance(2);
    ɵɵtextInterpolate2("", tab_r9.typeLabel, " (", tab_r9.data.length, ")");
} }
function NovoTabbedGroupPickerElement_button_15_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 20);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_button_15_Template_button_click_0_listener($event) { ɵɵrestoreView(_r13); var ctx_r12 = ɵɵnextContext(); return ctx_r12.deselectEverything($event); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.labelService.clear);
} }
function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template(rf, ctx) { if (rf & 1) {
    var _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 25);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r17); var quickSelect_r15 = ctx.$implicit; var ctx_r16 = ɵɵnextContext(2); quickSelect_r15.selected = !quickSelect_r15.selected; return ctx_r16.onItemToggled(quickSelect_r15); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "novo-checkbox", 26);
    ɵɵlistener("ngModelChange", function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template_novo_checkbox_ngModelChange_2_listener($event) { ɵɵrestoreView(_r17); var quickSelect_r15 = ctx.$implicit; return quickSelect_r15.selected = $event; })("ngModelChange", function NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template_novo_checkbox_ngModelChange_2_listener() { ɵɵrestoreView(_r17); var quickSelect_r15 = ctx.$implicit; var ctx_r19 = ɵɵnextContext(2); return ctx_r19.onItemToggled(quickSelect_r15); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var quickSelect_r15 = ctx.$implicit;
    ɵɵattribute("data-automation-id", quickSelect_r15.label);
    ɵɵadvance(2);
    ɵɵproperty("label", quickSelect_r15.label)("name", "selected")("ngModel", quickSelect_r15.selected);
} }
function NovoTabbedGroupPickerElement_div_17_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵelementStart(1, "div", 22);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "novo-list", 23);
    ɵɵtemplate(4, NovoTabbedGroupPickerElement_div_17_novo_list_item_4_Template, 3, 4, "novo-list-item", 24);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r4.quickSelectConfig.label);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r4.quickSelectConfig.items);
} }
function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template(rf, ctx) { if (rf & 1) {
    var _r24 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-list-item", 31);
    ɵɵlistener("click", function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template_novo_list_item_click_0_listener() { ɵɵrestoreView(_r24); var item_r22 = ctx.$implicit; var ctx_r23 = ɵɵnextContext(2); item_r22.selected = !item_r22.selected; return ctx_r23.onItemToggled(item_r22); });
    ɵɵelementStart(1, "item-content");
    ɵɵelementStart(2, "novo-checkbox", 32);
    ɵɵlistener("ngModelChange", function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template_novo_checkbox_ngModelChange_2_listener($event) { ɵɵrestoreView(_r24); var item_r22 = ctx.$implicit; return item_r22.selected = $event; })("ngModelChange", function NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template_novo_checkbox_ngModelChange_2_listener() { ɵɵrestoreView(_r24); var item_r22 = ctx.$implicit; var ctx_r26 = ɵɵnextContext(2); return ctx_r26.onItemToggled(item_r22); });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var item_r22 = ctx.$implicit;
    var ctx_r21 = ɵɵnextContext(2);
    ɵɵattribute("data-automation-id", item_r22[ctx_r21.displayTab.labelField]);
    ɵɵadvance(2);
    ɵɵproperty("label", item_r22[ctx_r21.displayTab.labelField])("name", "selected")("indeterminate", item_r22.indeterminate)("ngModel", item_r22.selected);
} }
function NovoTabbedGroupPickerElement_novo_list_19_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "novo-list", 27);
    ɵɵelementStart(1, "cdk-virtual-scroll-viewport", 28, 29);
    ɵɵtemplate(3, NovoTabbedGroupPickerElement_novo_list_19_novo_list_item_3_Template, 3, 5, "novo-list-item", 30);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("itemSize", ctx_r5.virtualScrollItemSize)("maxBufferPx", ctx_r5.maxBufferPx)("minBufferPx", ctx_r5.minBufferPx);
    ɵɵadvance(2);
    ɵɵproperty("cdkVirtualForOf", ctx_r5.displayTab.data);
} }
function NovoTabbedGroupPickerElement_div_20_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵelement(1, "i");
    ɵɵelementStart(2, "div", 34);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementStart(4, "div", 35);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassMap(ctx_r6.displayTab.icon || "bhi-search");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r6.labelService.tabbedGroupPickerEmpty);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r6.labelService.tabbedGroupClearSuggestion(ctx_r6.displayTab.typeLabel));
} }
var NovoTabbedGroupPickerElement = /** @class */ (function () {
    function NovoTabbedGroupPickerElement(labelService, ref) {
        var _this = this;
        this.labelService = labelService;
        this.ref = ref;
        this.selectionChange = new EventEmitter();
        this.displayTabIndex = 0;
        this.filterText = new BehaviorSubject('');
        this.loading = true;
        this.showClearAll = false;
        // Initial height based on 13 px font rendered in chrome. Actual height retrieved onDropdownToggled.
        this.scrollViewportHeight = 351;
        this.virtualScrollItemSize = 39;
        this.getSelectedState = function (childArray) {
            var numberOfSelectedItems = childArray.filter(function (_a) {
                var selected = _a.selected;
                return selected;
            }).length;
            if (!numberOfSelectedItems) {
                return undefined;
            }
            return numberOfSelectedItems === childArray.length ? 'selected' : 'indeterminate';
        };
        this.filter = function (searchTerm) {
            _this.displayTabs.forEach(function (displayTab, i) {
                return (displayTab.data = _this.tabs[i].data.filter(function (item) {
                    return item[displayTab.labelField].toLowerCase().includes(searchTerm.toLowerCase());
                }));
            });
            _this.ref.markForCheck();
        };
    }
    Object.defineProperty(NovoTabbedGroupPickerElement.prototype, "displayTab", {
        get: function () {
            return this.displayTabs[this.displayTabIndex];
        },
        set: function (tab) {
            this.displayTabIndex = this.tabs.map(function (_a) {
                var typeName = _a.typeName;
                return typeName;
            }).indexOf(tab.typeName);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTabbedGroupPickerElement.prototype, "minBufferPx", {
        get: function () {
            return this.scrollViewportHeight; // render at least 2x the number of items visible (viewport + min buffer)
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTabbedGroupPickerElement.prototype, "maxBufferPx", {
        get: function () {
            return 2 * this.scrollViewportHeight; // render at most 3x the number of items visible (viewport + max buffer)
        },
        enumerable: true,
        configurable: true
    });
    NovoTabbedGroupPickerElement.prototype.ngOnInit = function () {
        this.setupDisplayData();
        this.createChildrenReferences();
        this.initializeDescendantSelection();
        this.updateParentsAndQuickSelect();
        this.updateClearAll();
        this.loading = false;
        this.filterTextSubscription = this.filterText.pipe(debounceTime(300)).subscribe({
            next: this.filter,
        });
    };
    NovoTabbedGroupPickerElement.prototype.ngOnDestroy = function () {
        if (this.filterTextSubscription) {
            this.filterTextSubscription.unsubscribe();
        }
    };
    NovoTabbedGroupPickerElement.prototype.changeTab = function (tab) {
        this.displayTab = tab;
        if (this.scrollableInstance) {
            this.scrollableInstance.scrollTo({ behavior: 'auto', top: 0 });
        }
    };
    NovoTabbedGroupPickerElement.prototype.getPixelHeight = function (element) {
        return Number(getComputedStyle(element, '').height.match(/(\d+(\.\d+)?)px$/)[1]);
    };
    NovoTabbedGroupPickerElement.prototype.setupDisplayData = function () {
        // shallow copy here so that reassigning displayTabs[i].data doesn't mutate tabs[i].data
        // but both data values point to the same items
        this.displayTabs = this.tabs.map(function (tab) { return (__assign({}, tab)); });
        this.displayTab = this.tabs[0];
    };
    // Replace each parent's child object with a reference to the child to avoid
    // a child lookup for selected status; linking references allows M x N
    // time complexity instead of M x N^2
    NovoTabbedGroupPickerElement.prototype.createChildrenReferences = function () {
        var _this = this;
        this.tabs.forEach(function (tab) {
            // would rather filter but TypeScript still wants a type narrowing here
            if ('childTypeName' in tab) {
                var childTab = _this.tabs.find(function (_a) {
                    var typeName = _a.typeName;
                    return typeName === tab.childTypeName;
                });
                var compareFunction_1 = _this.makeCompareFunction(childTab.valueField);
                var warnFunction_1 = _this.makeWarningFunction(tab.typeName, childTab.typeName, childTab.valueField);
                var sortedChildren_1 = childTab.data.slice().sort(compareFunction_1);
                tab.data
                    .filter(function (_a) {
                    var children = _a.children;
                    return children && children.length;
                })
                    .forEach(function (parent) {
                    return _this.replaceChildrenWithReferences(parent, sortedChildren_1, compareFunction_1, warnFunction_1);
                });
            }
        });
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items
                .filter(function (parent) { return 'all' in parent; })
                .forEach(function (parent) {
                parent.children = _this.tabs.find(function (_a) {
                    var typeName = _a.typeName;
                    return parent.childTypeName === typeName;
                }).data;
            });
            this.quickSelectConfig.items
                .filter(function (parent) { return !('all' in parent); })
                .forEach(function (parent) {
                var childTab = _this.tabs.find(function (_a) {
                    var typeName = _a.typeName;
                    return typeName === parent.childTypeName;
                });
                var compareFunction = _this.makeCompareFunction(childTab.valueField);
                var warnFunction = _this.makeWarningFunction(parent.label, childTab.typeName, childTab.valueField);
                var sortedChildren = childTab.data.slice().sort(compareFunction);
                _this.replaceChildrenWithReferences(parent, sortedChildren, compareFunction, warnFunction);
            });
        }
    };
    NovoTabbedGroupPickerElement.prototype.makeCompareFunction = function (key) {
        return function (a, b) {
            var aValue = (a && a[key]) || a;
            var bValue = (b && b[key]) || b;
            if (aValue < bValue) {
                return -1;
            }
            else if (aValue > bValue) {
                return 1;
            }
            else if (aValue === bValue) {
                return 0;
            }
            else {
                return undefined;
            }
        };
    };
    NovoTabbedGroupPickerElement.prototype.replaceChildrenWithReferences = function (parent, sortedData, compareFunction, warnFunction) {
        parent.children = parent.children
            .map(function (child) { return binarySearch(child, sortedData, compareFunction) || warnFunction(child); })
            .filter(Boolean); // since map can return undefined, remove undefined elements
    };
    NovoTabbedGroupPickerElement.prototype.makeWarningFunction = function (parentLabel, childLabel, childValueField) {
        return function (child) {
            var childValue = child[childValueField] || child;
            console.warn("No " + childLabel + " found with value " + childValue + " for parent " + parentLabel);
        };
    };
    NovoTabbedGroupPickerElement.prototype.onDropdownToggle = function (event) {
        if (event) {
            this.scrollViewportHeight = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement);
            this.virtualScrollItemSize = this.getPixelHeight(this.scrollableInstance.getElementRef().nativeElement.querySelector('novo-list-item'));
        }
    };
    NovoTabbedGroupPickerElement.prototype.onItemToggled = function (item) {
        if (Array.isArray(item.children)) {
            this.updateDescendants(item.selected, item.children);
        }
        this.updateParentsAndQuickSelect();
        this.updateClearAll(item.selected);
        this.emitSelectedValues();
        this.ref.markForCheck();
    };
    NovoTabbedGroupPickerElement.prototype.initializeDescendantSelection = function () {
        this.tabs.forEach(function (tab) {
            if ('childTypeName' in tab && tab.data && tab.data.length) {
                tab.data.forEach(function (parent) {
                    if (parent.selected && parent.children && parent.children.length) {
                        parent.children.forEach(function (child) {
                            child.selected = true;
                        });
                    }
                });
            }
        });
    };
    NovoTabbedGroupPickerElement.prototype.updateDescendants = function (parentIsSelected, children) {
        var _this = this;
        children.forEach(function (item) {
            parentIsSelected ? (item.selected = true) : delete item.selected;
            if (Array.isArray(item.children)) {
                _this.updateDescendants(item.selected, item.children);
            }
        });
    };
    NovoTabbedGroupPickerElement.prototype.updateClearAll = function (itemWasJustSelected) {
        this.showClearAll = itemWasJustSelected
            ? true
            : this.tabs.some(function (tab) {
                if (tab.childTypeName) {
                    return tab.data.some(function (_a) {
                        var selected = _a.selected, indeterminate = _a.indeterminate;
                        return selected || indeterminate;
                    });
                }
                else {
                    return tab.data.some(function (_a) {
                        var selected = _a.selected;
                        return selected;
                    });
                }
            });
    };
    NovoTabbedGroupPickerElement.prototype.updateParentsAndQuickSelect = function () {
        var _this = this;
        // mutate here to avoid dereferencing the objects in displayTabs
        this.tabs
            .filter(function (tab) { return 'childTypeName' in tab && !!tab.childTypeName; })
            .forEach(function (tab) {
            var parents = tab.data.filter(function (_a) {
                var children = _a.children;
                return children && children.length;
            });
            parents.forEach(function (parent) {
                ['indeterminate', 'selected'].forEach(function (selectedStateOption) { return delete parent[selectedStateOption]; });
                var selectedState = _this.getSelectedState(parent.children);
                if (selectedState) {
                    parent[selectedState] = true;
                }
            });
        });
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach(function (quickSelect) {
                delete quickSelect.selected;
                var selectedState = _this.getSelectedState(quickSelect.children);
                if (selectedState) {
                    quickSelect[selectedState] = true;
                }
            });
        }
    };
    NovoTabbedGroupPickerElement.prototype.emitSelectedValues = function () {
        var selectedValues = this.tabs.map(function (tab) { return (__assign(__assign({}, tab), { data: tab.data.filter(function (_a) {
                var selected = _a.selected;
                return selected;
            }) })); });
        this.selectionChange.emit(selectedValues);
    };
    NovoTabbedGroupPickerElement.prototype.deselectEverything = function (event) {
        Helpers.swallowEvent(event);
        this.showClearAll = false;
        if (this.quickSelectConfig) {
            this.quickSelectConfig.items.forEach(function (quickSelect) {
                delete quickSelect.selected;
            });
        }
        this.tabs.forEach(function (tab) {
            if (tab.childTypeName) {
                tab.data.forEach(function (item) {
                    delete item.selected;
                    delete item.indeterminate;
                    item.children.forEach(function (child) { return delete child.selected; });
                });
            }
            else {
                tab.data.forEach(function (item) { return delete item.selected; });
            }
        });
        this.emitSelectedValues();
        this.ref.markForCheck();
    };
    NovoTabbedGroupPickerElement.prototype.onClearFilter = function (event) {
        Helpers.swallowEvent(event);
        this.filterText.next('');
    };
    NovoTabbedGroupPickerElement.prototype.onFilter = function (event) {
        this.filterText.next(event.target.value);
    };
    NovoTabbedGroupPickerElement.ɵfac = function NovoTabbedGroupPickerElement_Factory(t) { return new (t || NovoTabbedGroupPickerElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(ChangeDetectorRef)); };
    NovoTabbedGroupPickerElement.ɵcmp = ɵɵdefineComponent({ type: NovoTabbedGroupPickerElement, selectors: [["novo-tabbed-group-picker"]], viewQuery: function NovoTabbedGroupPickerElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$T, true);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.scrollableInstance = _t.first);
        } }, inputs: { buttonConfig: "buttonConfig", tabs: "tabs", quickSelectConfig: "quickSelectConfig" }, outputs: { selectionChange: "selectionChange" }, decls: 22, vars: 24, consts: [[3, "toggled"], [1, "tabbed-group-picker-button", 3, "theme", "side", "icon", "loading"], [1, "tabbed-group-picker-button-label"], ["data-automation-id", "tabbed-group-picker-search", 1, "tabbed-group-picker-search"], ["type", "text", 3, "placeholder", "value", "input"], ["class", "bhi-search", 4, "ngIf"], ["class", "bhi-times", 3, "click", 4, "ngIf"], [1, "tabbed-group-picker-column-container"], [1, "tabbed-group-picker-column", "left"], ["theme", "white", "direction", "vertical"], [3, "activeChange", 4, "ngFor", "ngForOf"], ["class", "clear-all-button", "theme", "dialogue", "icon", "times", "side", "right", "color", "grapefruit", 3, "click", 4, "ngIf"], [1, "tabbed-group-picker-column", "right"], ["class", "quick-select", 4, "ngIf"], ["direction", "vertical", 4, "ngIf"], ["class", "tabbed-group-picker-empty-item", 4, "ngIf"], [1, "bhi-search"], [1, "bhi-times", 3, "click"], [3, "activeChange"], [1, "bhi-next"], ["theme", "dialogue", "icon", "times", "side", "right", "color", "grapefruit", 1, "clear-all-button", 3, "click"], [1, "quick-select"], [1, "quick-select-label"], ["direction", "vertical", 1, "quick-select-list"], ["class", "quick-select-item", 3, "click", 4, "ngFor", "ngForOf"], [1, "quick-select-item", 3, "click"], [3, "label", "name", "ngModel", "ngModelChange"], ["direction", "vertical"], [3, "itemSize", "maxBufferPx", "minBufferPx"], ["tabbedGroupPickerVirtualScrollViewport", ""], [3, "click", 4, "cdkVirtualFor", "cdkVirtualForOf"], [3, "click"], [3, "label", "name", "indeterminate", "ngModel", "ngModelChange"], [1, "tabbed-group-picker-empty-item"], [1, "empty-item-main-message"], [1, "empty-item-sub-message"]], template: function NovoTabbedGroupPickerElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-dropdown", 0);
            ɵɵlistener("toggled", function NovoTabbedGroupPickerElement_Template_novo_dropdown_toggled_0_listener($event) { return ctx.onDropdownToggle($event); });
            ɵɵelementStart(1, "button", 1);
            ɵɵelementStart(2, "div", 2);
            ɵɵtext(3);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(4, "div", 3);
            ɵɵelementStart(5, "input", 4);
            ɵɵlistener("input", function NovoTabbedGroupPickerElement_Template_input_input_5_listener($event) { return ctx.onFilter($event); });
            ɵɵpipe(6, "async");
            ɵɵelementEnd();
            ɵɵtemplate(7, NovoTabbedGroupPickerElement_i_7_Template, 1, 0, "i", 5);
            ɵɵpipe(8, "async");
            ɵɵtemplate(9, NovoTabbedGroupPickerElement_i_9_Template, 1, 0, "i", 6);
            ɵɵpipe(10, "async");
            ɵɵelementEnd();
            ɵɵelementStart(11, "div", 7);
            ɵɵelementStart(12, "div", 8);
            ɵɵelementStart(13, "novo-nav", 9);
            ɵɵtemplate(14, NovoTabbedGroupPickerElement_novo_tab_14_Template, 4, 3, "novo-tab", 10);
            ɵɵelementEnd();
            ɵɵtemplate(15, NovoTabbedGroupPickerElement_button_15_Template, 2, 1, "button", 11);
            ɵɵelementEnd();
            ɵɵelementStart(16, "div", 12);
            ɵɵtemplate(17, NovoTabbedGroupPickerElement_div_17_Template, 5, 2, "div", 13);
            ɵɵpipe(18, "async");
            ɵɵtemplate(19, NovoTabbedGroupPickerElement_novo_list_19_Template, 4, 4, "novo-list", 14);
            ɵɵtemplate(20, NovoTabbedGroupPickerElement_div_20_Template, 6, 5, "div", 15);
            ɵɵpipe(21, "async");
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵproperty("theme", ctx.buttonConfig.theme)("side", ctx.buttonConfig.side)("icon", ctx.buttonConfig.icon)("loading", ctx.loading);
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.buttonConfig.label);
            ɵɵadvance(2);
            ɵɵproperty("placeholder", ctx.labelService.search)("value", ɵɵpipeBind1(6, 14, ctx.filterText));
            ɵɵadvance(2);
            ɵɵproperty("ngIf", !ɵɵpipeBind1(8, 16, ctx.filterText));
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ɵɵpipeBind1(10, 18, ctx.filterText));
            ɵɵadvance(5);
            ɵɵproperty("ngForOf", ctx.displayTabs);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.showClearAll);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.quickSelectConfig && !ɵɵpipeBind1(18, 20, ctx.filterText));
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.displayTab.data.length);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.displayTab.data.length && ɵɵpipeBind1(21, 22, ctx.filterText));
        } }, directives: [NovoDropdownElement, NovoButtonElement, NgIf, NovoNavElement, NgForOf, NovoTabElement, NovoListElement, NovoListItemElement, NovoItemContentElement, NovoCheckboxElement, NgControlStatus, NgModel, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf], pipes: [AsyncPipe], encapsulation: 2, changeDetection: 0 });
    return NovoTabbedGroupPickerElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabbedGroupPickerElement, [{
        type: Component,
        args: [{
                selector: 'novo-tabbed-group-picker',
                templateUrl: './TabbedGroupPicker.html',
                changeDetection: ChangeDetectionStrategy.OnPush,
            }]
    }], function () { return [{ type: NovoLabelService }, { type: ChangeDetectorRef }]; }, { scrollableInstance: [{
            type: ViewChild,
            args: ['tabbedGroupPickerVirtualScrollViewport']
        }], buttonConfig: [{
            type: Input
        }], tabs: [{
            type: Input
        }], quickSelectConfig: [{
            type: Input
        }], selectionChange: [{
            type: Output
        }] }); })();

// NG2
var NovoTabbedGroupPickerModule = /** @class */ (function () {
    function NovoTabbedGroupPickerModule() {
    }
    NovoTabbedGroupPickerModule.ɵmod = ɵɵdefineNgModule({ type: NovoTabbedGroupPickerModule });
    NovoTabbedGroupPickerModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTabbedGroupPickerModule_Factory(t) { return new (t || NovoTabbedGroupPickerModule)(); }, providers: [NovoLabelService], imports: [[
                CommonModule,
                FormsModule,
                ScrollingModule,
                NovoTabModule,
                NovoListModule,
                NovoFormExtrasModule,
                NovoButtonModule,
                NovoDropdownModule,
            ]] });
    return NovoTabbedGroupPickerModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTabbedGroupPickerModule, { declarations: [NovoTabbedGroupPickerElement], imports: [CommonModule,
        FormsModule,
        ScrollingModule,
        NovoTabModule,
        NovoListModule,
        NovoFormExtrasModule,
        NovoButtonModule,
        NovoDropdownModule], exports: [NovoTabbedGroupPickerElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTabbedGroupPickerModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    ScrollingModule,
                    NovoTabModule,
                    NovoListModule,
                    NovoFormExtrasModule,
                    NovoButtonModule,
                    NovoDropdownModule,
                ],
                providers: [NovoLabelService],
                declarations: [NovoTabbedGroupPickerElement],
                exports: [NovoTabbedGroupPickerElement],
            }]
    }], null, null); })();

var BaseRenderer = /** @class */ (function () {
    function BaseRenderer() {
        this.data = {};
        this.value = '';
        this.meta = {};
    }
    return BaseRenderer;
}());

var DateCell = /** @class */ (function (_super) {
    __extends(DateCell, _super);
    function DateCell(labels) {
        var _this = _super.call(this) || this;
        _this.labels = labels;
        return _this;
    }
    DateCell.prototype.getFormattedDate = function () {
        return this.labels.formatDate(this.value);
    };
    DateCell.ɵfac = function DateCell_Factory(t) { return new (t || DateCell)(ɵɵdirectiveInject(NovoLabelService)); };
    DateCell.ɵcmp = ɵɵdefineComponent({ type: DateCell, selectors: [["date-cell"]], inputs: { value: "value" }, features: [ɵɵInheritDefinitionFeature], decls: 3, vars: 1, consts: [[1, "date-cell"]], template: function DateCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelementStart(1, "label");
            ɵɵtext(2);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(2);
            ɵɵtextInterpolate(ctx.getFormattedDate());
        } }, encapsulation: 2 });
    return DateCell;
}(BaseRenderer));
/*@__PURE__*/ (function () { ɵsetClassMetadata(DateCell, [{
        type: Component,
        args: [{
                selector: 'date-cell',
                template: "\n        <div class=\"date-cell\">\n            <label>{{ getFormattedDate() }}</label>\n        </div>\n    ",
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { value: [{
            type: Input
        }] }); })();

function NovoDropdownCell_ng_container_5_dropdown_item_header_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "dropdown-item-header");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var config_r1 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵtextInterpolate(config_r1.category);
} }
function NovoDropdownCell_ng_container_5_item_2_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 8);
} }
function NovoDropdownCell_ng_container_5_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 6);
    ɵɵlistener("action", function NovoDropdownCell_ng_container_5_item_2_Template_item_action_0_listener() { ɵɵrestoreView(_r11); var option_r7 = ctx.$implicit; var config_r1 = ɵɵnextContext().$implicit; var ctx_r9 = ɵɵnextContext(); return ctx_r9.onClick(config_r1, option_r7, option_r7.value); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoDropdownCell_ng_container_5_item_2_i_3_Template, 1, 0, "i", 7);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r7 = ctx.$implicit;
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("active", (option_r7 || option_r7.value) === ctx_r4.value);
    ɵɵadvance(1);
    ɵɵattribute("data-automation-id", option_r7.label || option_r7);
    ɵɵadvance(1);
    ɵɵtextInterpolate(option_r7.label || option_r7);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (option_r7 || option_r7.value) === ctx_r4.value);
} }
function NovoDropdownCell_ng_container_5_hr_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "hr");
} }
function NovoDropdownCell_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, NovoDropdownCell_ng_container_5_dropdown_item_header_1_Template, 2, 1, "dropdown-item-header", 4);
    ɵɵtemplate(2, NovoDropdownCell_ng_container_5_item_2_Template, 4, 5, "item", 5);
    ɵɵtemplate(3, NovoDropdownCell_ng_container_5_hr_3_Template, 1, 0, "hr", 4);
    ɵɵelementContainerEnd();
} if (rf & 2) {
    var config_r1 = ctx.$implicit;
    var i_r2 = ctx.index;
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", config_r1.category);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", config_r1.options);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", i_r2 < ctx_r0.meta.dropdownCellConfig.length - 1);
} }
var NovoDropdownCell = /** @class */ (function (_super) {
    __extends(NovoDropdownCell, _super);
    function NovoDropdownCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    NovoDropdownCell.prototype.ngOnInit = function () {
        // Check for and fix bad config
        if (!this.meta.dropdownCellConfig) {
            throw new Error('Missing "dropdownCellConfig" on the column setup');
        }
    };
    NovoDropdownCell.prototype.onClick = function (config, option, value) {
        var callback = option.callback || config.callback;
        callback(this.data, value || option);
    };
    NovoDropdownCell.ɵfac = function NovoDropdownCell_Factory(t) { return ɵNovoDropdownCell_BaseFactory(t || NovoDropdownCell); };
    NovoDropdownCell.ɵcmp = ɵɵdefineComponent({ type: NovoDropdownCell, selectors: [["novo-dropdown-cell"]], inputs: { meta: "meta", value: "value" }, features: [ɵɵInheritDefinitionFeature], decls: 6, vars: 2, consts: [["parentScrollSelector", ".table-container", "containerClass", "novo-table-dropdown-cell"], ["type", "button", "theme", "secondary", "icon", "collapse", "inverse", ""], ["data-automation-id", "novo-dropdown-cell-value"], [4, "ngFor", "ngForOf"], [4, "ngIf"], [3, "active", "action", 4, "ngFor", "ngForOf"], [3, "action"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"]], template: function NovoDropdownCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "novo-dropdown", 0);
            ɵɵelementStart(1, "button", 1);
            ɵɵelementStart(2, "span", 2);
            ɵɵtext(3);
            ɵɵelementEnd();
            ɵɵelementEnd();
            ɵɵelementStart(4, "list");
            ɵɵtemplate(5, NovoDropdownCell_ng_container_5_Template, 4, 3, "ng-container", 3);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(3);
            ɵɵtextInterpolate(ctx.value);
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx.meta.dropdownCellConfig);
        } }, directives: [NovoDropdownElement, NovoButtonElement, NovoDropdownListElement, NgForOf, NgIf, NovoDropDownItemHeaderElement, NovoItemElement], encapsulation: 2 });
    return NovoDropdownCell;
}(BaseRenderer));
var ɵNovoDropdownCell_BaseFactory = ɵɵgetInheritedFactory(NovoDropdownCell);
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoDropdownCell, [{
        type: Component,
        args: [{
                selector: 'novo-dropdown-cell',
                template: "\n    <novo-dropdown parentScrollSelector=\".table-container\" containerClass=\"novo-table-dropdown-cell\">\n      <button type=\"button\" theme=\"secondary\" icon=\"collapse\" inverse>\n        <span data-automation-id=\"novo-dropdown-cell-value\">{{ value }}</span>\n      </button>\n      <list>\n        <ng-container *ngFor=\"let config of meta.dropdownCellConfig; let i = index\">\n          <dropdown-item-header *ngIf=\"config.category\">{{ config.category }}</dropdown-item-header>\n          <item *ngFor=\"let option of config.options\" (action)=\"onClick(config, option, option.value)\"\n                [class.active]=\"(option || option.value) === value\">\n            <span [attr.data-automation-id]=\"option.label || option\">{{ option.label || option }}</span>\n            <i *ngIf=\"(option || option.value) === value\" class=\"bhi-check\"></i>\n          </item>\n          <hr *ngIf=\"i < meta.dropdownCellConfig.length - 1\"/>\n        </ng-container>\n      </list>\n    </novo-dropdown>\n  ",
            }]
    }], null, { meta: [{
            type: Input
        }], value: [{
            type: Input
        }] }); })();

// NG2
var NovoTableKeepFilterFocus = /** @class */ (function () {
    function NovoTableKeepFilterFocus(element) {
        this.element = element;
    }
    NovoTableKeepFilterFocus.prototype.ngAfterViewInit = function () {
        this.element.nativeElement.focus();
    };
    NovoTableKeepFilterFocus.ɵfac = function NovoTableKeepFilterFocus_Factory(t) { return new (t || NovoTableKeepFilterFocus)(ɵɵdirectiveInject(ElementRef)); };
    NovoTableKeepFilterFocus.ɵdir = ɵɵdefineDirective({ type: NovoTableKeepFilterFocus, selectors: [["", "keepFilterFocused", ""]] });
    return NovoTableKeepFilterFocus;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableKeepFilterFocus, [{
        type: Directive,
        args: [{
                selector: '[keepFilterFocused]',
            }]
    }], function () { return [{ type: ElementRef }]; }, null); })();

// NG2
var _c0$U = function (a0) { return { active: a0 }; };
function Pagination_li_7_Template(rf, ctx) { if (rf & 1) {
    var _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "li", 4);
    ɵɵlistener("click", function Pagination_li_7_Template_li_click_0_listener($event) { ɵɵrestoreView(_r3); var p_r1 = ctx.$implicit; var ctx_r2 = ɵɵnextContext(); return ctx_r2.selectPage(p_r1.num, $event); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var p_r1 = ctx.$implicit;
    var ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("disabled", ctx_r0.disablePageSelection);
    ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c0$U, p_r1.active));
    ɵɵadvance(1);
    ɵɵtextInterpolate(p_r1.text);
} }
var _c1$x = function (a0) { return { "disabled": a0 }; };
var Pagination = /** @class */ (function () {
    function Pagination(labels) {
        this.labels = labels;
        this.itemsPerPage = 10;
        this.pageChange = new EventEmitter();
        this.itemsPerPageChange = new EventEmitter();
        this.onPageChange = new EventEmitter();
        this.maxPagesDisplayed = 5;
    }
    Object.defineProperty(Pagination.prototype, "disablePageSelection", {
        get: function () {
            return this.pageSelectDisabled;
        },
        set: function (val) {
            this.pageSelectDisabled = coerceBooleanProperty(val);
        },
        enumerable: true,
        configurable: true
    });
    Pagination.prototype.ngOnInit = function () {
        this.label = this.label || this.labels.itemsPerPage;
        this.rowOptions = this.rowOptions || this.getDefaultRowOptions();
    };
    Pagination.prototype.ngOnChanges = function (changes) {
        this.page = this.page || 1;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
    };
    Pagination.prototype.getDefaultRowOptions = function () {
        return [{ value: 10, label: '10' }, { value: 25, label: '25' }, { value: 50, label: '50' }, { value: 100, label: '100' }];
    };
    Pagination.prototype.onPageSizeChanged = function (event) {
        this.page = 1;
        this.itemsPerPage = event.selected;
        this.totalPages = this.calculateTotalPages();
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.itemsPerPageChange.emit(this.itemsPerPage);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    };
    Pagination.prototype.selectPage = function (page, event) {
        if (event) {
            event.preventDefault();
        }
        this.page = page;
        this.pages = this.getPages(this.page, this.totalPages);
        this.pageChange.emit(this.page);
        this.onPageChange.emit({
            page: this.page,
            itemsPerPage: this.itemsPerPage,
        });
    };
    Pagination.prototype.noPrevious = function () {
        return this.page === 1;
    };
    Pagination.prototype.noNext = function () {
        return this.page === this.totalPages;
    };
    // Create page object used in template
    Pagination.prototype.makePage = function (num, text, isActive) {
        return { num: num, text: text, active: isActive, };
    };
    Pagination.prototype.getPages = function (currentPage, totalPages) {
        var pages = [];
        // Default page limits
        var startPage = 1;
        var endPage = totalPages;
        var isMaxSized = this.maxPagesDisplayed < totalPages;
        // recompute if maxPagesDisplayed
        if (isMaxSized) {
            // Current page is displayed in the middle of the visible ones
            startPage = Math.max(currentPage - Math.floor(this.maxPagesDisplayed / 2), 1);
            endPage = startPage + this.maxPagesDisplayed - 1;
            // Adjust if limit is exceeded
            if (endPage > totalPages) {
                endPage = totalPages;
                startPage = endPage - this.maxPagesDisplayed + 1;
            }
        }
        // Add page number links
        for (var num = startPage; num <= endPage; num++) {
            var page = this.makePage(num, num.toString(), num === currentPage);
            pages.push(page);
        }
        return pages;
    };
    Pagination.prototype.calculateTotalPages = function () {
        var totalPages = this.itemsPerPage < 1 ? 1 : Math.ceil(this.totalItems / this.itemsPerPage);
        return Math.max(totalPages || 0, 1);
    };
    Pagination.ɵfac = function Pagination_Factory(t) { return new (t || Pagination)(ɵɵdirectiveInject(NovoLabelService)); };
    Pagination.ɵcmp = ɵɵdefineComponent({ type: Pagination, selectors: [["novo-pagination"]], inputs: { page: "page", totalItems: "totalItems", itemsPerPage: "itemsPerPage", rowOptions: "rowOptions", label: "label", disablePageSelection: "disablePageSelection" }, outputs: { pageChange: "pageChange", itemsPerPageChange: "itemsPerPageChange", onPageChange: "onPageChange" }, features: [ɵɵNgOnChangesFeature], decls: 10, vars: 11, consts: [[1, "rows"], ["data-automation-id", "pager-select", 3, "options", "placeholder", "ngModel", "ngModelChange", "onSelect"], [1, "spacer"], ["data-automation-id", "pager", 1, "pager"], [1, "page", 3, "ngClass", "click"], ["data-automation-id", "pager-previous", 1, "bhi-previous"], ["class", "page", 3, "ngClass", "disabled", "click", 4, "ngFor", "ngForOf"], ["data-automation-id", "pager-next", 1, "bhi-next"]], template: function Pagination_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "h5", 0);
            ɵɵtext(1);
            ɵɵelementEnd();
            ɵɵelementStart(2, "novo-select", 1);
            ɵɵlistener("ngModelChange", function Pagination_Template_novo_select_ngModelChange_2_listener($event) { return ctx.itemsPerPage = $event; })("onSelect", function Pagination_Template_novo_select_onSelect_2_listener($event) { return ctx.onPageSizeChanged($event); });
            ɵɵelementEnd();
            ɵɵelement(3, "span", 2);
            ɵɵelementStart(4, "ul", 3);
            ɵɵelementStart(5, "li", 4);
            ɵɵlistener("click", function Pagination_Template_li_click_5_listener() { return ctx.selectPage(ctx.page - 1); });
            ɵɵelement(6, "i", 5);
            ɵɵelementEnd();
            ɵɵtemplate(7, Pagination_li_7_Template, 2, 6, "li", 6);
            ɵɵelementStart(8, "li", 4);
            ɵɵlistener("click", function Pagination_Template_li_click_8_listener() { return ctx.selectPage(ctx.page + 1); });
            ɵɵelement(9, "i", 7);
            ɵɵelementEnd();
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(1);
            ɵɵtextInterpolate(ctx.label);
            ɵɵadvance(1);
            ɵɵproperty("options", ctx.rowOptions)("placeholder", ctx.labels.select)("ngModel", ctx.itemsPerPage);
            ɵɵadvance(3);
            ɵɵproperty("ngClass", ɵɵpureFunction1(7, _c1$x, ctx.noPrevious()));
            ɵɵadvance(2);
            ɵɵproperty("ngForOf", ctx.pages);
            ɵɵadvance(1);
            ɵɵproperty("ngClass", ɵɵpureFunction1(9, _c1$x, ctx.noNext()));
        } }, directives: [NovoSelectElement, NgControlStatus, NgModel, NgClass, NgForOf], encapsulation: 2 });
    return Pagination;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(Pagination, [{
        type: Component,
        args: [{
                selector: 'novo-pagination',
                template: "\n        <h5 class=\"rows\">{{label}}</h5>\n        <novo-select [options]=\"rowOptions\" [placeholder]=\"labels.select\" [(ngModel)]=\"itemsPerPage\" (onSelect)=\"onPageSizeChanged($event)\" data-automation-id=\"pager-select\"></novo-select>\n        <span class=\"spacer\"></span>\n        <ul class=\"pager\" data-automation-id=\"pager\">\n            <li class=\"page\" (click)=\"selectPage(page-1)\" [ngClass]=\"{'disabled': noPrevious()}\"><i class=\"bhi-previous\" data-automation-id=\"pager-previous\"></i></li>\n            <li class=\"page\" [ngClass]=\"{active: p.active}\" [class.disabled]=\"disablePageSelection\" *ngFor=\"let p of pages\" (click)=\"selectPage(p.num, $event)\">{{p.text}}</li>\n            <li class=\"page\" (click)=\"selectPage(page+1)\" [ngClass]=\"{'disabled': noNext()}\"><i class=\"bhi-next\" data-automation-id=\"pager-next\"></i></li>\n        </ul>\n  ",
            }]
    }], function () { return [{ type: NovoLabelService }]; }, { page: [{
            type: Input
        }], totalItems: [{
            type: Input
        }], itemsPerPage: [{
            type: Input
        }], rowOptions: [{
            type: Input
        }], label: [{
            type: Input
        }], disablePageSelection: [{
            type: Input
        }], pageChange: [{
            type: Output
        }], itemsPerPageChange: [{
            type: Output
        }], onPageChange: [{
            type: Output
        }] }); })();

function PercentageCell_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵtext(1);
    ɵɵpipe(2, "percent");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ɵɵpipeBind2(2, 1, ctx_r0.value, "1.0-2"));
} }
var PercentageCell = /** @class */ (function (_super) {
    __extends(PercentageCell, _super);
    function PercentageCell() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PercentageCell.ɵfac = function PercentageCell_Factory(t) { return ɵPercentageCell_BaseFactory(t || PercentageCell); };
    PercentageCell.ɵcmp = ɵɵdefineComponent({ type: PercentageCell, selectors: [["percentage-cell"]], features: [ɵɵInheritDefinitionFeature], decls: 1, vars: 1, consts: [["class", "percentage", 4, "ngIf"], [1, "percentage"]], template: function PercentageCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, PercentageCell_div_0_Template, 3, 4, "div", 0);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.value || ctx.value === 0);
        } }, directives: [NgIf], pipes: [PercentPipe], encapsulation: 2 });
    return PercentageCell;
}(BaseRenderer));
var ɵPercentageCell_BaseFactory = ɵɵgetInheritedFactory(PercentageCell);
/*@__PURE__*/ (function () { ɵsetClassMetadata(PercentageCell, [{
        type: Component,
        args: [{
                selector: 'percentage-cell',
                template: "\n        <div class=\"percentage\" *ngIf=\"value || value === 0\">{{ value | percent:'1.0-2' }}</div>\n    ",
            }]
    }], null, null); })();

// NG2
var _c0$V = ["container"];
var RowDetails = /** @class */ (function () {
    function RowDetails(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
    }
    RowDetails.prototype.ngOnInit = function () {
        if (this.renderer) {
            if (this.renderer.prototype instanceof BaseRenderer) {
                var componentRef = this.componentUtils.append(this.renderer, this.container);
                componentRef.instance['data'] = this.data;
            }
            else {
                this.value = this.renderer(this.data);
            }
        }
        else {
            // this.value = this.row[this.column.name];
        }
    };
    RowDetails.ɵfac = function RowDetails_Factory(t) { return new (t || RowDetails)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils)); };
    RowDetails.ɵcmp = ɵɵdefineComponent({ type: RowDetails, selectors: [["novo-row-details"]], viewQuery: function RowDetails_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(_c0$V, true, ViewContainerRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
        } }, inputs: { data: "data", renderer: "renderer" }, decls: 4, vars: 1, consts: [["container", ""]], template: function RowDetails_Template(rf, ctx) { if (rf & 1) {
            ɵɵelement(0, "span", null, 0);
            ɵɵelementStart(2, "span");
            ɵɵtext(3);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵadvance(3);
            ɵɵtextInterpolate(ctx.value);
        } }, encapsulation: 2 });
    return RowDetails;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(RowDetails, [{
        type: Component,
        args: [{
                selector: 'novo-row-details',
                template: "\n    <span #container></span> <span>{{ value }}</span>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }]; }, { container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], data: [{
            type: Input
        }], renderer: [{
            type: Input
        }] }); })();

// NG2
var _c0$W = ["*"];
var NovoTableActionsElement = /** @class */ (function () {
    function NovoTableActionsElement() {
    }
    NovoTableActionsElement.ɵfac = function NovoTableActionsElement_Factory(t) { return new (t || NovoTableActionsElement)(); };
    NovoTableActionsElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableActionsElement, selectors: [["novo-table-actions"]], ngContentSelectors: _c0$W, decls: 1, vars: 0, template: function NovoTableActionsElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoTableActionsElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableActionsElement, [{
        type: Component,
        args: [{
                selector: 'novo-table-actions',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

// NG2
var _c0$X = ["container"];
function TableCell_date_cell_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "date-cell", 5);
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵproperty("value", ctx_r1.value);
} }
function TableCell_a_4_Template(rf, ctx) { if (rf & 1) {
    var _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 6);
    ɵɵlistener("click", function TableCell_a_4_Template_a_click_0_listener($event) { ɵɵrestoreView(_r5); var ctx_r4 = ɵɵnextContext(); return ctx_r4.onClick($event); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r2.value);
} }
function TableCell_span_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r3.value);
} }
var TableCell = /** @class */ (function () {
    function TableCell(element, componentUtils) {
        this.element = element;
        this.componentUtils = componentUtils;
        this.value = '';
        this.element = element;
        this.componentUtils = componentUtils;
    }
    TableCell.prototype.ngOnInit = function () {
        var _this = this;
        this.column._type = this.column.type || 'text';
        if (this.column.renderer) {
            if (this.column.renderer.prototype instanceof BaseRenderer) {
                this.column._type = 'custom';
                var componentRef = this.componentUtils.append(this.column.renderer, this.container);
                componentRef.instance.meta = this.column;
                componentRef.instance.data = this.row;
                componentRef.instance.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
                // TODO - save ref to this and update in the valueChanges below!!
            }
            else {
                // TODO - wtf to do here?
                this.value = this.column.renderer(this.row);
            }
        }
        else {
            this.value = this.form && this.hasEditor ? this.form.value[this.column.name] : this.row[this.column.name];
        }
        if (this.form && this.hasEditor) {
            this.valueChangeSubscription = this.form.valueChanges
                .pipe(debounceTime(300), distinctUntilChanged())
                .subscribe(function (value) {
                _this.value = value[_this.column.name];
            });
        }
    };
    TableCell.prototype.ngOnDestroy = function () {
        if (this.valueChangeSubscription) {
            this.valueChangeSubscription.unsubscribe();
        }
    };
    TableCell.prototype.onClick = function (event) {
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (this.column.onClick) {
            this.column.onClick(this.row);
        }
    };
    TableCell.ɵfac = function TableCell_Factory(t) { return new (t || TableCell)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ComponentUtils)); };
    TableCell.ɵcmp = ɵɵdefineComponent({ type: TableCell, selectors: [["novo-table-cell"]], viewQuery: function TableCell_Query(rf, ctx) { if (rf & 1) {
            ɵɵstaticViewQuery(_c0$X, true, ViewContainerRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.container = _t.first);
        } }, inputs: { column: "column", row: "row", form: "form", hasEditor: "hasEditor" }, decls: 6, vars: 3, consts: [[3, "ngSwitch"], ["container", ""], [3, "value", 4, "ngSwitchCase"], [3, "click", 4, "ngSwitchCase"], [4, "ngSwitchDefault"], [3, "value"], [3, "click"]], template: function TableCell_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementStart(0, "div", 0);
            ɵɵelement(1, "span", null, 1);
            ɵɵtemplate(3, TableCell_date_cell_3_Template, 1, 1, "date-cell", 2);
            ɵɵtemplate(4, TableCell_a_4_Template, 2, 1, "a", 3);
            ɵɵtemplate(5, TableCell_span_5_Template, 2, 1, "span", 4);
            ɵɵelementEnd();
        } if (rf & 2) {
            ɵɵproperty("ngSwitch", ctx.column._type);
            ɵɵadvance(3);
            ɵɵproperty("ngSwitchCase", "date");
            ɵɵadvance(1);
            ɵɵproperty("ngSwitchCase", "link");
        } }, directives: [NgSwitch, NgSwitchCase, NgSwitchDefault, DateCell], encapsulation: 2 });
    return TableCell;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(TableCell, [{
        type: Component,
        args: [{
                selector: 'novo-table-cell',
                template: "\n    <div [ngSwitch]=\"column._type\">\n      <span #container></span>\n      <date-cell *ngSwitchCase=\"'date'\" [value]=\"value\"></date-cell>\n      <a *ngSwitchCase=\"'link'\" (click)=\"onClick($event)\">{{ value }}</a> <span *ngSwitchDefault>{{ value }}</span>\n    </div>\n  ",
            }]
    }], function () { return [{ type: ElementRef }, { type: ComponentUtils }]; }, { container: [{
            type: ViewChild,
            args: ['container', { read: ViewContainerRef, static: true }]
        }], column: [{
            type: Input
        }], row: [{
            type: Input
        }], form: [{
            type: Input
        }], hasEditor: [{
            type: Input
        }] }); })();

// NG2
var TableFilter = /** @class */ (function () {
    function TableFilter(element, renderer) {
        this.element = element;
        this.renderer = renderer;
        this.onFilterChange = new EventEmitter();
        this.element = element;
        this.renderer = renderer;
    }
    TableFilter.prototype.ngOnInit = function () {
        this.ngOnChanges();
    };
    TableFilter.prototype.ngOnChanges = function (changes) {
        var label = '';
        if (this.config.freetextFilter) {
            label = this.config.freetextFilter;
        }
        else if (this.config.filter) {
            label = this.config.filter;
        }
        this.renderer.setProperty(this.element, 'value', label);
    };
    TableFilter.prototype.onChangeFilter = function (event) {
        var _this = this;
        clearTimeout(this.filterThrottle);
        if (KeyCodes.ENTER === event.keyCode) {
            this.config.filter = event.target.value;
            this.onFilterChange.emit({ filtering: this.config });
        }
        else {
            this.filterThrottle = setTimeout(function () {
                _this.config.filter = event.target.value;
                _this.onFilterChange.emit({ filtering: _this.config });
            }, 300);
        }
    };
    TableFilter.prototype.onClick = function (event) {
        Helpers.swallowEvent(event);
    };
    TableFilter.ɵfac = function TableFilter_Factory(t) { return new (t || TableFilter)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2)); };
    TableFilter.ɵdir = ɵɵdefineDirective({ type: TableFilter, selectors: [["", "novoTableFilter", ""]], hostBindings: function TableFilter_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("keydown", function TableFilter_keydown_HostBindingHandler($event) { return ctx.onChangeFilter($event); })("click", function TableFilter_click_HostBindingHandler($event) { return ctx.onClick($event); });
        } }, inputs: { config: ["novoTableFilter", "config"] }, outputs: { onFilterChange: "onFilterChange" }, features: [ɵɵNgOnChangesFeature] });
    return TableFilter;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(TableFilter, [{
        type: Directive,
        args: [{
                selector: '[novoTableFilter]',
            }]
    }], function () { return [{ type: ElementRef }, { type: Renderer2 }]; }, { config: [{
            type: Input,
            args: ['novoTableFilter']
        }], onFilterChange: [{
            type: Output
        }], onChangeFilter: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], onClick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();

// NG2
var _c0$Y = ["*"];
var NovoTableFooterElement = /** @class */ (function () {
    function NovoTableFooterElement() {
    }
    NovoTableFooterElement.ɵfac = function NovoTableFooterElement_Factory(t) { return new (t || NovoTableFooterElement)(); };
    NovoTableFooterElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableFooterElement, selectors: [["novo-table-footer"]], ngContentSelectors: _c0$Y, decls: 1, vars: 0, template: function NovoTableFooterElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoTableFooterElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableFooterElement, [{
        type: Component,
        args: [{
                selector: 'novo-table-footer',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

// NG2
var _c0$Z = ["*"];
var NovoTableHeaderElement = /** @class */ (function () {
    function NovoTableHeaderElement() {
    }
    NovoTableHeaderElement.ɵfac = function NovoTableHeaderElement_Factory(t) { return new (t || NovoTableHeaderElement)(); };
    NovoTableHeaderElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableHeaderElement, selectors: [["novo-table-header"]], ngContentSelectors: _c0$Z, decls: 1, vars: 0, template: function NovoTableHeaderElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef();
            ɵɵprojection(0);
        } }, encapsulation: 2 });
    return NovoTableHeaderElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableHeaderElement, [{
        type: Component,
        args: [{
                selector: 'novo-table-header',
                template: '<ng-content></ng-content>',
            }]
    }], null, null); })();

// NG2
var ThOrderable = /** @class */ (function () {
    function ThOrderable(element) {
        this.element = element;
        this.onOrderChange = new EventEmitter();
        this.element = element;
    }
    Object.defineProperty(ThOrderable.prototype, "index", {
        get: function () {
            var index = null;
            if (this.element.nativeElement && this.element.nativeElement.parentNode) {
                var children = Array.prototype.slice.call(this.element.nativeElement.parentNode.children);
                index = children.indexOf(this.element.nativeElement);
            }
            return index;
        },
        enumerable: true,
        configurable: true
    });
    ThOrderable.prototype.ngOnInit = function () {
        if (this.column.ordering) {
            this.element.nativeElement.setAttribute('draggable', true);
            this.table = this.findTable(this.element.nativeElement);
        }
    };
    ThOrderable.prototype.onDragStart = function (event) {
        if (this.column.ordering) {
            this.element.nativeElement.classList.add('dragging');
            event.dataTransfer.effectAllowed = 'move';
            event.dataTransfer.setData('text/plain', JSON.stringify(this.column));
            this.clone = this.table.cloneNode(true);
            this.clone.style.position = 'absolute';
            this.clone.style.left = '100%';
            this.clone.style.width = '150px';
            this.deleteColumns(this.clone);
            document.body.appendChild(this.clone);
            event.dataTransfer.setDragImage(this.clone, 75, 30);
        }
    };
    ThOrderable.prototype.deleteColumns = function (table) {
        // TODO: `table` should be immutable and this method should return the modified data to its caller
        if (table.rows.length > 0) {
            var allRows = table.rows;
            for (var i = 0; i < allRows.length; i++) {
                if (i > 10) {
                    table.deleteRow(-1);
                }
                else {
                    var cellLength = allRows[i].cells.length;
                    for (var c = 0; c < cellLength; c++) {
                        if (c < this.index) {
                            allRows[i].deleteCell(0);
                        }
                        else if (c > this.index) {
                            allRows[i].deleteCell(-1);
                        }
                    }
                }
            }
        }
    };
    ThOrderable.prototype.findTable = function (start) {
        var htmlElementNode = start;
        while (htmlElementNode) {
            htmlElementNode = htmlElementNode.parentNode;
            if (htmlElementNode && htmlElementNode.tagName.toLowerCase() === 'table') {
                return htmlElementNode;
            }
        }
        return undefined;
    };
    ThOrderable.prototype.onDrag = function (event) {
        Helpers.swallowEvent(event);
        return false;
    };
    ThOrderable.prototype.onDragEnd = function (event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        this.element.nativeElement.classList.remove('dragging');
        document.body.removeChild(this.clone);
        return false;
    };
    ThOrderable.prototype.onDrop = function (event) {
        Helpers.swallowEvent(event);
        this.element.nativeElement.classList.remove('over');
        var data = JSON.parse(event.dataTransfer.getData('text/plain'));
        this.onOrderChange.emit({
            first: data,
            second: this.column,
        });
        return false;
    };
    ThOrderable.prototype.onDragOver = function (event) {
        Helpers.swallowEvent(event);
        event.dataTransfer.dropEffect = 'move';
        return false;
    };
    ThOrderable.prototype.onDragEnter = function (event) {
        this.element.nativeElement.classList.add('over');
        this.target = event.target;
    };
    ThOrderable.prototype.onDragLeave = function (event) {
        this.element.nativeElement.classList.remove('over');
    };
    ThOrderable.ɵfac = function ThOrderable_Factory(t) { return new (t || ThOrderable)(ɵɵdirectiveInject(ElementRef)); };
    ThOrderable.ɵdir = ɵɵdefineDirective({ type: ThOrderable, selectors: [["", "novoThOrderable", ""]], hostBindings: function ThOrderable_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("dragstart", function ThOrderable_dragstart_HostBindingHandler($event) { return ctx.onDragStart($event); })("dragover", function ThOrderable_dragover_HostBindingHandler($event) { return ctx.onDragOver($event); })("dragenter", function ThOrderable_dragenter_HostBindingHandler($event) { return ctx.onDragEnter($event); })("dragleave", function ThOrderable_dragleave_HostBindingHandler($event) { return ctx.onDragLeave($event); })("dragend", function ThOrderable_dragend_HostBindingHandler($event) { return ctx.onDragEnd($event); })("drop", function ThOrderable_drop_HostBindingHandler($event) { return ctx.onDrop($event); });
        } }, inputs: { column: ["novoThOrderable", "column"] }, outputs: { onOrderChange: "onOrderChange" } });
    return ThOrderable;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(ThOrderable, [{
        type: Directive,
        args: [{
                selector: '[novoThOrderable]',
                host: {
                    '(dragstart)': 'onDragStart($event)',
                    '(dragover)': 'onDragOver($event)',
                    '(dragenter)': 'onDragEnter($event)',
                    '(dragleave)': 'onDragLeave($event)',
                    '(dragend)': 'onDragEnd($event)',
                    '(drop)': 'onDrop($event)',
                },
            }]
    }], function () { return [{ type: ElementRef }]; }, { column: [{
            type: Input,
            args: ['novoThOrderable']
        }], onOrderChange: [{
            type: Output
        }] }); })();

// NG2
var ThSortable = /** @class */ (function () {
    function ThSortable() {
        this.onSortChange = new EventEmitter();
    }
    ThSortable.prototype.onToggleSort = function (event) {
        if (event) {
            event.preventDefault();
        }
        if (this.config && this.column && this.config.sorting !== false && this.column.sorting !== false) {
            switch (this.column.sort) {
                case 'asc':
                    this.column.sort = 'desc';
                    break;
                default:
                    this.column.sort = 'asc';
                    break;
            }
            this.onSortChange.emit(this.column);
        }
    };
    ThSortable.ɵfac = function ThSortable_Factory(t) { return new (t || ThSortable)(); };
    ThSortable.ɵdir = ɵɵdefineDirective({ type: ThSortable, selectors: [["", "novoThSortable", ""]], hostBindings: function ThSortable_HostBindings(rf, ctx) { if (rf & 1) {
            ɵɵlistener("click", function ThSortable_click_HostBindingHandler($event) { return ctx.onToggleSort($event); });
        } }, inputs: { config: ["novoThSortable", "config"], column: "column" }, outputs: { onSortChange: "onSortChange" } });
    return ThSortable;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(ThSortable, [{
        type: Directive,
        args: [{
                selector: '[novoThSortable]',
                host: {
                    '(click)': 'onToggleSort($event)',
                },
            }]
    }], null, { config: [{
            type: Input,
            args: ['novoThSortable']
        }], column: [{
            type: Input
        }], onSortChange: [{
            type: Output
        }] }); })();

// NG2
var NovoTableExtrasModule = /** @class */ (function () {
    function NovoTableExtrasModule() {
    }
    NovoTableExtrasModule.ɵmod = ɵɵdefineNgModule({ type: NovoTableExtrasModule });
    NovoTableExtrasModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTableExtrasModule_Factory(t) { return new (t || NovoTableExtrasModule)(); }, imports: [[CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule]] });
    return NovoTableExtrasModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTableExtrasModule, { declarations: [NovoTableHeaderElement,
        NovoTableFooterElement,
        NovoTableActionsElement,
        NovoTableKeepFilterFocus,
        Pagination,
        RowDetails,
        TableCell,
        TableFilter,
        ThOrderable,
        ThSortable,
        DateCell,
        PercentageCell,
        NovoDropdownCell], imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule], exports: [NovoTableHeaderElement,
        NovoTableFooterElement,
        NovoTableActionsElement,
        NovoTableKeepFilterFocus,
        Pagination,
        RowDetails,
        TableCell,
        TableFilter,
        ThOrderable,
        ThSortable,
        DateCell,
        PercentageCell,
        NovoDropdownCell] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableExtrasModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule, FormsModule, NovoSelectModule, NovoDropdownModule, NovoButtonModule],
                declarations: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell,
                ],
                exports: [
                    NovoTableHeaderElement,
                    NovoTableFooterElement,
                    NovoTableActionsElement,
                    NovoTableKeepFilterFocus,
                    Pagination,
                    RowDetails,
                    TableCell,
                    TableFilter,
                    ThOrderable,
                    ThSortable,
                    DateCell,
                    PercentageCell,
                    NovoDropdownCell,
                ],
                entryComponents: [DateCell, PercentageCell, NovoDropdownCell],
            }]
    }], null, null); })();

var CollectionEvent = /** @class */ (function () {
    function CollectionEvent(type, data) {
        if (type === void 0) { type = 'Collection.REFRESH'; }
        if (data === void 0) { data = []; }
        this.type = '';
        this.data = [];
        this.type = type;
        this.data = data;
    }
    CollectionEvent.REFRESH = 'Collection.REFRESH';
    CollectionEvent.ADD = 'Collection.ADD';
    CollectionEvent.REMOVE = 'Collection.REMOVE';
    CollectionEvent.REMOVE_ALL = 'Collection.REMOVE_ALL';
    CollectionEvent.REPLACE = 'Collection.REPLACE';
    CollectionEvent.INVALIDATE_ALL = 'Collection.INVALIDATE_ALL';
    CollectionEvent.SORT = 'Collection.SORT';
    CollectionEvent.FILTER = 'Collection.FILTER';
    CollectionEvent.CHANGE = 'Collection.CHANGE';
    CollectionEvent.CURRENTPAGE_CHANGE = 'Collection.CURRENTPAGE_CHANGE';
    CollectionEvent.PAGESIZE_CHANGE = 'Collection.PAGESIZE_CHANGE';
    CollectionEvent.NUMBEROFPAGES_CHANGE = 'Collection.NUMBEROFPAGES_CHANGE';
    return CollectionEvent;
}());

/**
 * Base Class for all Collection based data providers
 *
 * @example
 *  var dp:DataProvider = new DataProvider();
 *  dp.addItem({label:"Item 1"});
 *  dp.addItem({label:"Item 2"});
 *  dp.addItem({label:"Item 3"});
 *  dp.addItem({label:"Item 4"});

 *  var myList:List = new List();
 *  myList.dataProvider = dp;
 */
var ArrayCollection = /** @class */ (function () {
    function ArrayCollection(source) {
        if (source === void 0) { source = []; }
        this.dataChange = new EventEmitter();
        this.source = [];
        this.editData = [];
        this.isEditing = false;
        this.filterData = [];
        this._filter = {};
        this._sort = [];
        this.source = source;
        this.editData = this.copy(this.source);
        this.filterData = this.source.slice();
    }
    Object.defineProperty(ArrayCollection.prototype, "length", {
        get: function () {
            return this.filterData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayCollection.prototype, "total", {
        get: function () {
            return this.filterData.length;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArrayCollection.prototype, "list", {
        get: function () {
            return this.filterData;
        },
        enumerable: true,
        configurable: true
    });
    ArrayCollection.prototype.isEmpty = function () {
        return this.length <= 0 && !this.isLoading() && !this.hasErrors();
    };
    ArrayCollection.prototype.hasErrors = function () {
        return false;
    };
    ArrayCollection.prototype.isLoading = function () {
        return false;
    };
    ArrayCollection.prototype.isFiltered = function () {
        return Object.keys(this._filter).length > 0;
    };
    /**
     * Method to switch the isEditingflag for the data source
     */
    ArrayCollection.prototype.edit = function () {
        this.isEditing = true;
        this.editData = this.copy(this.source);
    };
    /**
     * Method to leave edit mode and reset source
     */
    ArrayCollection.prototype.undo = function () {
        this.isEditing = false;
        this.source = this.copy(this.editData);
        this.refresh();
    };
    /**
     * Method to leave edit mode and save editData
     */
    ArrayCollection.prototype.commit = function () {
        this.isEditing = false;
        this.source = this.filterData.slice();
        this.refresh();
    };
    /**
     * Appends an item to the end of the data provider.
     *
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.addItem = function (item) {
        this.isEditing ? this.editData.push(item) : this.source.push(item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    };
    /**
     * Adds a new item to the data provider at the specified index.
     *
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.addItemAt = function (item, index) {
        this.isEditing ? this.editData.splice(index, 0, item) : this.source.splice(index, 0, item);
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, [item]));
        this.refresh();
    };
    /**
     *  Appends multiple items to the end of the DataProvider and dispatches a CollectionEvent.ADD event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.addItems = function (items) {
        var _a, _b;
        this.isEditing ? (_a = this.editData).push.apply(_a, __spread(items)) : (_b = this.source).push.apply(_b, __spread(items));
        this.onDataChange(new CollectionEvent(CollectionEvent.ADD, items));
        this.refresh();
    };
    /**
     * Adds several items to the data provider at the specified index and dispatches a CollectionEvent.ADD event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.addItemsAt = function (items, index) {
        var _a, _b;
        this.isEditing ? (_a = this.editData).splice.apply(_a, __spread([index, 0], items)) : (_b = this.source).splice.apply(_b, __spread([index, 0], items));
    };
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.clone = function () {
        return new ArrayCollection(this.isEditing ? this.copy(this.editData) : this.copy(this.source));
    };
    /**
     * Creates a copy of the current ArrayCollection any.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.copy = function (array) {
        return Helpers.deepClone(array);
    };
    /**
     * Concatenates the specified items to the end of the current data provider.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.concat = function (items) {
        this.addItems(items);
    };
    /**
     * Returns the item at the specified index.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.getItemAt = function (index) {
        return this.isEditing ? this.editData[index] : this.source[index];
    };
    /**
     *  Returns the index of the specified item.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.getItemIndex = function (item) {
        return this.isEditing ? this.editData.indexOf(item) : this.source.indexOf(item);
    };
    /**
     * Invalidates all the data items that the DataProvider contains and dispatches a CollectionEvent.INVALIDATE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.invalidate = function () {
        this.onDataChange(new CollectionEvent(CollectionEvent.INVALIDATE_ALL));
    };
    /**
     * Invalidates the specified item.
     *
     * @memberOf ArrayCollection
     */
    // invalidateItem(item:any):void {}
    /**
     * Invalidates the item at the specified index.
     *
     * @memberOf ArrayCollection
     */
    // invalidateItemAt(index:number):void {}
    /**
     * Appends the specified data into the data that the data provider contains and removes any duplicate items.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.merge = function (newData) {
        var e_1, _a;
        try {
            for (var newData_1 = __values(newData), newData_1_1 = newData_1.next(); !newData_1_1.done; newData_1_1 = newData_1.next()) {
                var obj = newData_1_1.value;
                var existing = ~this.getItemIndex(obj);
                if (existing) {
                    this.replaceItem(obj, existing);
                }
                else {
                    this.addItem(obj);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (newData_1_1 && !newData_1_1.done && (_a = newData_1.return)) _a.call(newData_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * Removes all items from the data provider and dispatches a CollectionEvent.REMOVE_ALL event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.removeAll = function () {
        this.source = [];
        this.editData = [];
        this.filterData = [];
        this.onDataChange(new CollectionEvent(CollectionEvent.REMOVE_ALL, []));
        this.refresh();
    };
    /**
     * Removes the specified item from the data provider and dispatches a CollectionEvent.REMOVE event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.removeItem = function (item) {
        var index = this.getItemIndex(item);
        return this.removeItemAt(index);
    };
    /**
     * Removes the item at the specified index and dispatches a CollectionEvent.REMOVE event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.removeItemAt = function (index) {
        var success = !!this.source.splice(index, 1);
        this.refresh();
        return success;
    };
    /**
     * Replaces an existing item with a new item and dispatches a CollectionEvent.REPLACE event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.replaceItem = function (newItem, oldItem) {
        var index = this.getItemIndex(oldItem);
        if (index >= 0) {
            this.replaceItemAt(newItem, index);
        }
    };
    /**
     * Replaces the item at the specified index and dispatches a CollectionEvent.REPLACE event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.replaceItemAt = function (newItem, index) {
        this.filterData.splice(index, 1, newItem);
    };
    Object.defineProperty(ArrayCollection.prototype, "sort", {
        /**
         * Sorts the items that the data provider contains and dispatches a CollectionEvent.SORT event.
         *
         * @memberOf ArrayCollection
         */
        get: function () {
            return this._sort;
        },
        set: function (value) {
            this._sort = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sorts the items that the data provider contains by the specified field and dispatches a CollectionEvent.SORT event.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.sortOn = function (fieldName, reverse) {
        if (reverse === void 0) { reverse = false; }
        this.filterData = this.filterData.sort(Helpers.sortByField(fieldName, reverse));
        this.onDataChange(new CollectionEvent(CollectionEvent.SORT));
        return this.filterData;
    };
    Object.defineProperty(ArrayCollection.prototype, "filter", {
        get: function () {
            return this._filter;
        },
        set: function (value) {
            this._filter = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    ArrayCollection.prototype.filterOn = function (fieldName, value) {
        if (value === void 0) { value = null; }
        this.filterData = this.filterData.filter(Helpers.filterByField(fieldName, value));
        return this.filterData;
    };
    ArrayCollection.prototype.onDataChange = function (event) {
        this.dataChange.emit(event);
    };
    ArrayCollection.prototype.refresh = function () {
        var e_2, _a;
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        try {
            for (var _b = __values(this._sort.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.sortOn(item.field, item.reverse);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        for (var key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
    };
    /**
     * Creates an Array any representation of the data that the data provider contains.
     *
     * @memberOf ArrayCollection
     */
    ArrayCollection.prototype.toArray = function () {
        return this.isEditing ? this.editData : this.source;
    };
    ArrayCollection.prototype.toJSON = function () {
        return this.isEditing ? this.editData : this.source;
    };
    return ArrayCollection;
}());

var PagedArrayCollection = /** @class */ (function (_super) {
    __extends(PagedArrayCollection, _super);
    function PagedArrayCollection(source) {
        if (source === void 0) { source = []; }
        var _this = _super.call(this, source) || this;
        _this._page = 1;
        _this._numberOfPages = 1;
        _this._pageSize = 10;
        return _this;
    }
    Object.defineProperty(PagedArrayCollection.prototype, "numberOfPages", {
        get: function () {
            var result = this.source.length / this.pageSize;
            result = Math.ceil(result);
            return result;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagedArrayCollection.prototype, "page", {
        get: function () {
            return this._page;
        },
        set: function (value) {
            this._page = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PagedArrayCollection.prototype, "pageSize", {
        get: function () {
            return this._pageSize;
        },
        set: function (value) {
            this._pageSize = value;
            this.refresh();
        },
        enumerable: true,
        configurable: true
    });
    PagedArrayCollection.prototype.next = function () {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page++;
        return this.page;
    };
    PagedArrayCollection.prototype.prev = function () {
        if (this._page === 1) {
            return this.page;
        }
        this.page--;
        return this.page;
    };
    PagedArrayCollection.prototype.first = function () {
        if (this.page === 1) {
            return this.page;
        }
        this.page = 1;
        return this.page;
    };
    PagedArrayCollection.prototype.last = function () {
        if (this.page === this.numberOfPages) {
            return this.page;
        }
        this.page = this.numberOfPages;
        return this.page;
    };
    PagedArrayCollection.prototype.refresh = function () {
        var e_1, _a;
        this.filterData = this.isEditing ? this.editData.slice() : this.source.slice();
        try {
            for (var _b = __values(this._sort.reverse()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                this.sortOn(item.field, item.reverse);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        for (var key in this._filter) {
            if (key) {
                this.filterOn(key, this._filter[key]);
            }
        }
        if (this.page >= 0) {
            var start = (this.page - 1) * this.pageSize;
            var end = start + this.pageSize;
            var result = this.filterData.slice(start, end);
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, result));
        }
        else {
            this.onDataChange(new CollectionEvent(CollectionEvent.CHANGE, this.filterData));
        }
    };
    return PagedArrayCollection;
}(ArrayCollection));

var _c0$_ = ["filterInput"];
function NovoTableElement_header_0_novo_pagination_3_Template(rf, ctx) { if (rf & 1) {
    var _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-pagination", 6);
    ɵɵlistener("pageChange", function NovoTableElement_header_0_novo_pagination_3_Template_novo_pagination_pageChange_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r5 = ɵɵnextContext(2); return ctx_r5.dataProvider.page = $event; })("itemsPerPageChange", function NovoTableElement_header_0_novo_pagination_3_Template_novo_pagination_itemsPerPageChange_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r7 = ɵɵnextContext(2); return ctx_r7.dataProvider.pageSize = $event; })("onPageChange", function NovoTableElement_header_0_novo_pagination_3_Template_novo_pagination_onPageChange_0_listener($event) { ɵɵrestoreView(_r6); var ctx_r8 = ɵɵnextContext(2); return ctx_r8.onPageChange($event); });
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("rowOptions", ctx_r4.config.paging.rowOptions)("disablePageSelection", ctx_r4.config.paging.disablePageSelection)("page", ctx_r4.dataProvider.page)("itemsPerPage", ctx_r4.dataProvider.pageSize)("totalItems", ctx_r4.dataProvider.total);
} }
function NovoTableElement_header_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "header");
    ɵɵprojection(1);
    ɵɵelementStart(2, "div", 4);
    ɵɵtemplate(3, NovoTableElement_header_0_novo_pagination_3_Template, 1, 5, "novo-pagination", 5);
    ɵɵprojection(4, 1);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r0.config.paging && !(ctx_r0.dataProvider.isEmpty() && !ctx_r0.dataProvider.isFiltered()));
} }
function NovoTableElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 7);
    ɵɵelement(1, "novo-loading");
    ɵɵelementEnd();
} }
function NovoTableElement_novo_toast_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-toast", 8);
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵproperty("theme", ctx_r2.toast == null ? null : ctx_r2.toast.theme)("icon", ctx_r2.toast == null ? null : ctx_r2.toast.icon)("message", ctx_r2.toast == null ? null : ctx_r2.toast.message);
} }
function NovoTableElement_div_3_thead_3_th_2_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r22 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 23);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_2_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r22); var ctx_r21 = ɵɵnextContext(4); return ctx_r21.expandAllOnPage(ctx_r21.config.expandAll); });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_thead_3_th_2_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r24 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 24);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_2_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r24); var ctx_r23 = ɵɵnextContext(4); return ctx_r23.expandAllOnPage(ctx_r23.config.expandAll); });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_thead_3_th_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "th", 20);
    ɵɵtemplate(1, NovoTableElement_div_3_thead_3_th_2_button_1_Template, 1, 0, "button", 21);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_2_button_2_Template, 1, 0, "button", 22);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r16 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r16.config.expandAll);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r16.config.expandAll);
} }
function NovoTableElement_div_3_thead_3_th_3_Template(rf, ctx) { if (rf & 1) {
    var _r26 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "th", 25);
    ɵɵelementStart(1, "novo-checkbox", 26);
    ɵɵlistener("ngModelChange", function NovoTableElement_div_3_thead_3_th_3_Template_novo_checkbox_ngModelChange_1_listener($event) { ɵɵrestoreView(_r26); var ctx_r25 = ɵɵnextContext(3); return ctx_r25.master = $event; })("ngModelChange", function NovoTableElement_div_3_thead_3_th_3_Template_novo_checkbox_ngModelChange_1_listener($event) { ɵɵrestoreView(_r26); var ctx_r27 = ɵɵnextContext(3); return ctx_r27.selectPage($event); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r17 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", ctx_r17.master)("indeterminate", ctx_r17.pageSelected.length > 0 && ctx_r17.pageSelected.length < ctx_r17.pagedData.length)("tooltip", ctx_r17.master ? ctx_r17.labels.deselectAll : ctx_r17.labels.selectAllOnPage);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 33);
    ɵɵelement(1, "i", 34);
    ɵɵelement(2, "i", 35);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(2).$implicit;
    var ctx_r30 = ɵɵnextContext(3);
    ɵɵproperty("tooltip", ctx_r30.labels.sort)("ngClass", column_r28.sort || "");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r41 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 43);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r41); var column_r28 = ɵɵnextContext(4).$implicit; var ctx_r39 = ɵɵnextContext(3); return ctx_r39.onFilterClear(column_r28); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r36 = ɵɵnextContext(7);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r36.labels.clear);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template(rf, ctx) { if (rf & 1) {
    var _r44 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 44, 45);
    ɵɵlistener("onFilterChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template_input_onFilterChange_0_listener($event) { ɵɵrestoreView(_r44); var ctx_r43 = ɵɵnextContext(7); return ctx_r43.onFilterKeywords($event); })("ngModelChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template_input_ngModelChange_0_listener($event) { ɵɵrestoreView(_r44); var column_r28 = ɵɵnextContext(4).$implicit; return column_r28.freetextFilter = $event; });
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(4).$implicit;
    ɵɵproperty("novoTableFilter", column_r28)("ngModel", column_r28.freetextFilter);
    ɵɵattribute("id", column_r28.name + "-input");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_i_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 48);
} }
var _c1$y = function (a0) { return { active: a0 }; };
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_Template(rf, ctx) { if (rf & 1) {
    var _r52 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 46);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_Template_item_click_0_listener() { ɵɵrestoreView(_r52); var option_r48 = ctx.$implicit; var column_r28 = ɵɵnextContext(4).$implicit; var ctx_r50 = ɵɵnextContext(3); return ctx_r50.onFilterClick(column_r28, option_r48); });
    ɵɵelementStart(1, "span");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_i_3_Template, 1, 0, "i", 47);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r48 = ctx.$implicit;
    var column_r28 = ɵɵnextContext(4).$implicit;
    var ctx_r38 = ɵɵnextContext(3);
    ɵɵproperty("ngClass", ɵɵpureFunction1(4, _c1$y, ctx_r38.isFilterActive(column_r28, option_r48)));
    ɵɵattribute("data-automation-id", ctx_r38.getOptionDataAutomationId(option_r48));
    ɵɵadvance(2);
    ɵɵtextInterpolate((option_r48 == null ? null : option_r48.label) || option_r48);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r38.isFilterActive(column_r28, option_r48));
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 38);
    ɵɵelementStart(2, "div", 39);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_button_5_Template, 2, 1, "button", 40);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_input_6_Template, 2, 3, "input", 41);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_item_7_Template, 4, 6, "item", 42);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(3).$implicit;
    var ctx_r33 = ɵɵnextContext(3);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r33.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", column_r28.filter || column_r28.filter === false);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !!column_r28.allowCustomTextOption);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", column_r28.options);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_button_5_Template(rf, ctx) { if (rf & 1) {
    var _r59 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 43);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_button_5_Template_button_click_0_listener() { ɵɵrestoreView(_r59); var column_r28 = ɵɵnextContext(4).$implicit; var ctx_r57 = ɵɵnextContext(3); return ctx_r57.onFilterClear(column_r28); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r55 = ɵɵnextContext(7);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r55.labels.clear);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template(rf, ctx) { if (rf & 1) {
    var _r61 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵelementStart(1, "item", 38);
    ɵɵelementStart(2, "div", 39);
    ɵɵelementStart(3, "span");
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_button_5_Template, 2, 1, "button", 40);
    ɵɵelementEnd();
    ɵɵelementStart(6, "input", 44, 45);
    ɵɵlistener("onFilterChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template_input_onFilterChange_6_listener($event) { ɵɵrestoreView(_r61); var ctx_r60 = ɵɵnextContext(6); return ctx_r60.onFilterChange($event); })("ngModelChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template_input_ngModelChange_6_listener($event) { ɵɵrestoreView(_r61); var column_r28 = ɵɵnextContext(3).$implicit; return column_r28.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(3).$implicit;
    var ctx_r34 = ɵɵnextContext(3);
    ɵɵadvance(4);
    ɵɵtextInterpolate(ctx_r34.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", column_r28.filter);
    ɵɵadvance(1);
    ɵɵproperty("novoTableFilter", column_r28)("ngModel", column_r28.filter);
    ɵɵattribute("id", column_r28.name + "-input");
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_button_4_Template(rf, ctx) { if (rf & 1) {
    var _r71 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 43);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_button_4_Template_button_click_0_listener() { ɵɵrestoreView(_r71); var column_r28 = ɵɵnextContext(5).$implicit; var ctx_r69 = ɵɵnextContext(3); return ctx_r69.onFilterClear(column_r28); });
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r68 = ɵɵnextContext(8);
    ɵɵadvance(1);
    ɵɵtextInterpolate(ctx_r68.labels.clear);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "item", 38);
    ɵɵelementStart(1, "div", 39);
    ɵɵelementStart(2, "span");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_button_4_Template, 2, 1, "button", 40);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(4).$implicit;
    var ctx_r65 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r65.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", column_r28.filter);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_i_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i", 48);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_Template(rf, ctx) { if (rf & 1) {
    var _r77 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "item", 56);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_Template_item_click_0_listener() { ɵɵrestoreView(_r77); var option_r73 = ctx.$implicit; var column_r28 = ɵɵnextContext(4).$implicit; var ctx_r75 = ɵɵnextContext(3); return ctx_r75.onFilterClick(column_r28, option_r73); });
    ɵɵtext(1);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_i_2_Template, 1, 0, "i", 47);
    ɵɵelementEnd();
} if (rf & 2) {
    var option_r73 = ctx.$implicit;
    var column_r28 = ɵɵnextContext(4).$implicit;
    var ctx_r66 = ɵɵnextContext(3);
    ɵɵproperty("ngClass", ɵɵpureFunction1(6, _c1$y, ctx_r66.isFilterActive(column_r28, option_r73)))("keepOpen", option_r73.range)("hidden", column_r28.calenderShow);
    ɵɵattribute("data-automation-id", (option_r73 == null ? null : option_r73.label) || option_r73);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", (option_r73 == null ? null : option_r73.label) || option_r73, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r66.isFilterActive(column_r28, option_r73));
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template(rf, ctx) { if (rf & 1) {
    var _r81 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "list");
    ɵɵtemplate(1, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_1_Template, 5, 2, "item", 49);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_item_2_Template, 3, 8, "item", 50);
    ɵɵelementStart(3, "div", 51);
    ɵɵelementStart(4, "div", 52);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template_div_click_4_listener() { ɵɵrestoreView(_r81); var column_r28 = ɵɵnextContext(3).$implicit; return column_r28.calenderShow = false; });
    ɵɵelement(5, "i", 53);
    ɵɵtext(6);
    ɵɵelementEnd();
    ɵɵelementStart(7, "novo-date-picker", 54, 55);
    ɵɵlistener("onSelect", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template_novo_date_picker_onSelect_7_listener($event) { ɵɵrestoreView(_r81); var column_r28 = ɵɵnextContext(3).$implicit; var ctx_r82 = ɵɵnextContext(3); return ctx_r82.onCalenderSelect(column_r28, $event); })("ngModelChange", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template_novo_date_picker_ngModelChange_7_listener($event) { ɵɵrestoreView(_r81); var column_r28 = ɵɵnextContext(3).$implicit; return column_r28.filter = $event; });
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(3).$implicit;
    var ctx_r35 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !column_r28.calenderShow);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", column_r28.options);
    ɵɵadvance(1);
    ɵɵproperty("hidden", !column_r28.calenderShow);
    ɵɵadvance(3);
    ɵɵtextInterpolate(ctx_r35.labels.backToPresetFilters);
    ɵɵadvance(1);
    ɵɵproperty("ngModel", column_r28.filter);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template(rf, ctx) { if (rf & 1) {
    var _r88 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "novo-dropdown", 36);
    ɵɵlistener("toggled", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template_novo_dropdown_toggled_0_listener($event) { ɵɵrestoreView(_r88); var column_r28 = ɵɵnextContext(2).$implicit; var ctx_r87 = ɵɵnextContext(3); return ctx_r87.onDropdownToggled($event, column_r28.name); });
    ɵɵelementStart(1, "button", 37);
    ɵɵlistener("click", function NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template_button_click_1_listener() { ɵɵrestoreView(_r88); var ctx_r90 = ɵɵnextContext(5); return ctx_r90.focusInput(); });
    ɵɵelementEnd();
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_2_Template, 8, 4, "list", 0);
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_3_Template, 8, 5, "list", 0);
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_list_4_Template, 9, 5, "list", 0);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext(2).$implicit;
    var ctx_r31 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵclassProp("filtered", column_r28.filter || column_r28.filter === false);
    ɵɵproperty("tooltip", ctx_r31.labels.filters);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ((column_r28 == null ? null : column_r28.options == null ? null : column_r28.options.length) || (column_r28 == null ? null : column_r28.originalOptions == null ? null : column_r28.originalOptions.length)) && (column_r28 == null ? null : column_r28.type) !== "date" && ctx_r31.toggledDropdownMap[column_r28.name]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !((column_r28 == null ? null : column_r28.options == null ? null : column_r28.options.length) || (column_r28 == null ? null : column_r28.originalOptions == null ? null : column_r28.originalOptions.length)) && ctx_r31.toggledDropdownMap[column_r28.name]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", (column_r28 == null ? null : column_r28.options == null ? null : column_r28.options.length) && (column_r28 == null ? null : column_r28.type) === "date" && ctx_r31.toggledDropdownMap[column_r28.name]);
} }
function NovoTableElement_div_3_thead_3_th_4_div_1_Template(rf, ctx) { if (rf & 1) {
    var _r93 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 29);
    ɵɵelementStart(1, "div", 30);
    ɵɵlistener("onSortChange", function NovoTableElement_div_3_thead_3_th_4_div_1_Template_div_onSortChange_1_listener($event) { ɵɵrestoreView(_r93); var ctx_r92 = ɵɵnextContext(4); return ctx_r92.onSortChange($event); });
    ɵɵelementStart(2, "label");
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_div_1_div_4_Template, 3, 2, "div", 31);
    ɵɵelementEnd();
    ɵɵtemplate(5, NovoTableElement_div_3_thead_3_th_4_div_1_novo_dropdown_5_Template, 5, 6, "novo-dropdown", 32);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ɵɵnextContext().$implicit;
    var ctx_r29 = ɵɵnextContext(3);
    ɵɵattribute("data-automation-id", column_r28.id || column_r28.name);
    ɵɵadvance(1);
    ɵɵproperty("ngClass", ctx_r29.config.sorting !== false && column_r28.sorting !== false ? "sortable" : "")("novoThSortable", ctx_r29.config)("column", column_r28);
    ɵɵadvance(2);
    ɵɵtextInterpolate(column_r28.title || column_r28.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r29.config.sorting !== false && column_r28.sorting !== false);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r29.config.filtering !== false && column_r28.filtering !== false);
} }
var _c2$e = function (a0, a1, a2) { return { "mass-action": a0, "actions": a1, "preview": a2 }; };
function NovoTableElement_div_3_thead_3_th_4_Template(rf, ctx) { if (rf & 1) {
    var _r96 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "th", 27);
    ɵɵlistener("onOrderChange", function NovoTableElement_div_3_thead_3_th_4_Template_th_onOrderChange_0_listener($event) { ɵɵrestoreView(_r96); var ctx_r95 = ɵɵnextContext(3); return ctx_r95.onOrderChange($event); });
    ɵɵtemplate(1, NovoTableElement_div_3_thead_3_th_4_div_1_Template, 6, 7, "div", 28);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r28 = ctx.$implicit;
    var ctx_r18 = ɵɵnextContext(3);
    ɵɵproperty("ngClass", ɵɵpureFunction3(4, _c2$e, (ctx_r18.config == null ? null : ctx_r18.config.rowSelectionStyle) === "checkbox", (column_r28 == null ? null : column_r28.actions == null ? null : column_r28.actions.items == null ? null : column_r28.actions.items.length) > 0, (column_r28 == null ? null : column_r28.name) === "preview"))("novoThOrderable", column_r28)("hidden", ctx_r18.isColumnHidden(column_r28));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !column_r28.hideHeader);
} }
function NovoTableElement_div_3_thead_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "thead");
    ɵɵelementStart(1, "tr", 16);
    ɵɵtemplate(2, NovoTableElement_div_3_thead_3_th_2_Template, 3, 2, "th", 17);
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_th_3_Template, 2, 3, "th", 18);
    ɵɵtemplate(4, NovoTableElement_div_3_thead_3_th_4_Template, 2, 8, "th", 19);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r9.config.hasDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r9.config.rowSelectionStyle === "checkbox");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r9.columns);
} }
function NovoTableElement_div_3_tbody_4_tr_1_Template(rf, ctx) { if (rf & 1) {
    var _r100 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tr", 59);
    ɵɵelementStart(1, "td", 60);
    ɵɵtext(2);
    ɵɵelementStart(3, "a", 61);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_tr_1_Template_a_click_3_listener() { ɵɵrestoreView(_r100); var ctx_r99 = ɵɵnextContext(3); return ctx_r99.selectAll(true); });
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r97 = ɵɵnextContext(3);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r97.labels.selectedRecords(ctx_r97.selected.length), " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r97.labels.totalRecords(ctx_r97.dataProvider.total));
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_1_Template(rf, ctx) { if (rf & 1) {
    var _r111 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 68);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_1_Template_button_click_0_listener() { ɵɵrestoreView(_r111); var row_r101 = ɵɵnextContext(2).$implicit; return row_r101._expanded = !row_r101._expanded; });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_2_Template(rf, ctx) { if (rf & 1) {
    var _r114 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 69);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_2_Template_button_click_0_listener() { ɵɵrestoreView(_r114); var row_r101 = ɵɵnextContext(2).$implicit; return row_r101._expanded = !row_r101._expanded; });
    ɵɵelementEnd();
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "td", 20);
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_1_Template, 1, 0, "button", 66);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_td_1_button_2_Template, 1, 0, "button", 67);
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r101 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !row_r101._expanded);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", row_r101._expanded);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template(rf, ctx) { if (rf & 1) {
    var _r118 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "td", 70);
    ɵɵelementStart(1, "novo-checkbox", 71);
    ɵɵlistener("ngModelChange", function NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template_novo_checkbox_ngModelChange_1_listener($event) { ɵɵrestoreView(_r118); var row_r101 = ɵɵnextContext().$implicit; return row_r101._selected = $event; })("ngModelChange", function NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template_novo_checkbox_ngModelChange_1_listener() { ɵɵrestoreView(_r118); var row_r101 = ɵɵnextContext().$implicit; var ctx_r119 = ɵɵnextContext(3); return ctx_r119.rowSelectHandler(row_r101); });
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r101 = ɵɵnextContext().$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngModel", row_r101._selected);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_table_cell_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-table-cell", 75);
} if (rf & 2) {
    var column_r122 = ɵɵnextContext().$implicit;
    var ctx_r126 = ɵɵnextContext();
    var row_r101 = ctx_r126.$implicit;
    var i_r102 = ctx_r126.index;
    var ctx_r123 = ɵɵnextContext(3);
    ɵɵproperty("hasEditor", ctx_r123.editable)("column", column_r122)("row", row_r101)("form", ctx_r123.getRowControlForm(i_r102));
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_control_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-control", 76);
} if (rf & 2) {
    var column_r122 = ɵɵnextContext().$implicit;
    var ctx_r127 = ɵɵnextContext();
    var i_r102 = ctx_r127.index;
    var row_r101 = ctx_r127.$implicit;
    var ctx_r124 = ɵɵnextContext(3);
    ɵɵproperty("form", ctx_r124.getRowControlForm(i_r102))("control", row_r101.controls[column_r122.name]);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_td_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "td", 72);
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_table_cell_1_Template, 1, 4, "novo-table-cell", 73);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_td_3_novo_control_2_Template, 1, 2, "novo-control", 74);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r122 = ctx.$implicit;
    var row_r101 = ɵɵnextContext().$implicit;
    var ctx_r105 = ɵɵnextContext(3);
    ɵɵclassProp("novo-form-row", ctx_r105.editable);
    ɵɵproperty("hidden", ctx_r105.isColumnHidden(column_r122));
    ɵɵattribute("data-automation-id", column_r122.id || column_r122.name);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", row_r101._editing && !row_r101._editing[column_r122.name]);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", row_r101._editing && row_r101._editing[column_r122.name]);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_tr_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tr", 77);
    ɵɵelement(1, "td", 20);
    ɵɵelementStart(2, "td");
    ɵɵelement(3, "novo-row-details", 78);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var row_r101 = ɵɵnextContext().$implicit;
    var ctx_r106 = ɵɵnextContext(3);
    ɵɵproperty("hidden", !row_r101._expanded);
    ɵɵattribute("data-automation-id", "details-row-" + row_r101.id);
    ɵɵadvance(2);
    ɵɵattribute("colspan", ctx_r106.config.rowSelectionStyle === "checkbox" ? ctx_r106.columns.length + 1 : ctx_r106.columns.length);
    ɵɵadvance(1);
    ɵɵproperty("data", row_r101)("renderer", ctx_r106.config.detailsRenderer);
} }
function NovoTableElement_div_3_tbody_4_ng_template_2_Template(rf, ctx) { if (rf & 1) {
    var _r132 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tr", 62);
    ɵɵlistener("click", function NovoTableElement_div_3_tbody_4_ng_template_2_Template_tr_click_0_listener() { ɵɵrestoreView(_r132); var row_r101 = ctx.$implicit; var ctx_r131 = ɵɵnextContext(3); return ctx_r131.rowClickHandler(row_r101); });
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_ng_template_2_td_1_Template, 3, 2, "td", 17);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_td_2_Template, 2, 1, "td", 63);
    ɵɵtemplate(3, NovoTableElement_div_3_tbody_4_ng_template_2_td_3_Template, 3, 6, "td", 64);
    ɵɵelementEnd();
    ɵɵtemplate(4, NovoTableElement_div_3_tbody_4_ng_template_2_tr_4_Template, 4, 5, "tr", 65);
} if (rf & 2) {
    var row_r101 = ctx.$implicit;
    var ctx_r98 = ɵɵnextContext(3);
    ɵɵclassProp("active", row_r101.id === ctx_r98.activeId);
    ɵɵproperty("ngClass", row_r101.customClass || "")("id", ctx_r98.name + "-" + row_r101[ctx_r98.rowIdentifier]);
    ɵɵattribute("data-automation-id", row_r101.id);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r98.config.hasDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r98.config.rowSelectionStyle === "checkbox");
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r98.columns);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r98.config.hasDetails);
} }
function NovoTableElement_div_3_tbody_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody");
    ɵɵtemplate(1, NovoTableElement_div_3_tbody_4_tr_1_Template, 5, 2, "tr", 57);
    ɵɵtemplate(2, NovoTableElement_div_3_tbody_4_ng_template_2_Template, 5, 9, "ng-template", 58);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r10.config.rowSelectionStyle === "checkbox" && ctx_r10.showSelectAllMessage && ctx_r10.config.selectAllEnabled);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r10.rows);
} }
function NovoTableElement_div_3_tbody_5_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 82);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 83);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r134 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r134.labels.emptyTableMessage, "");
} }
function NovoTableElement_div_3_tbody_5_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody", 79);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵelementStart(3, "div", null, 80);
    ɵɵprojection(5, 2);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_5_div_6_Template, 4, 1, "div", 81);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var _r133 = ɵɵreference(4);
    ɵɵadvance(6);
    ɵɵproperty("ngIf", _r133.childNodes.length == 0);
} }
function NovoTableElement_div_3_tbody_6_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 86);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 83);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r136 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r136.labels.noMatchingRecordsMessage, "");
} }
function NovoTableElement_div_3_tbody_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody", 79);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵelementStart(3, "div", null, 84);
    ɵɵprojection(5, 3);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_6_div_6_Template, 4, 1, "div", 85);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var _r135 = ɵɵreference(4);
    ɵɵadvance(6);
    ɵɵproperty("ngIf", _r135.childNodes.length == 0);
} }
function NovoTableElement_div_3_tbody_7_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 90);
    ɵɵelementStart(1, "h4");
    ɵɵelement(2, "i", 91);
    ɵɵtext(3);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r138 = ɵɵnextContext(3);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ctx_r138.labels.erroredTableMessage, "");
} }
function NovoTableElement_div_3_tbody_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tbody", 87);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵelementStart(3, "div", null, 88);
    ɵɵprojection(5, 4);
    ɵɵelementEnd();
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_7_div_6_Template, 4, 1, "div", 89);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var _r137 = ɵɵreference(4);
    ɵɵadvance(6);
    ɵɵproperty("ngIf", _r137.childNodes.length == 0);
} }
function NovoTableElement_div_3_tfoot_8_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tfoot", 92);
    ɵɵelementStart(1, "tr");
    ɵɵelementStart(2, "td", 60);
    ɵɵprojection(3, 5);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r14 = ɵɵnextContext(2);
    ɵɵproperty("ngClass", ctx_r14.dataProvider.length % 2 == 0 ? "odd" : "even");
} }
function NovoTableElement_div_3_tfoot_9_td_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "td");
    ɵɵtext(1);
    ɵɵelementEnd();
} if (rf & 2) {
    var column_r142 = ctx.$implicit;
    var ctx_r143 = ɵɵnextContext();
    var i_r140 = ctx_r143.index;
    var footer_r139 = ctx_r143.$implicit;
    ɵɵattribute("data-automation-id", (column_r142.id || column_r142.name) + "-total-" + i_r140);
    ɵɵadvance(1);
    ɵɵtextInterpolate(footer_r139[column_r142.name]);
} }
function NovoTableElement_div_3_tfoot_9_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "tfoot", 93);
    ɵɵelementStart(1, "tr");
    ɵɵtemplate(2, NovoTableElement_div_3_tfoot_9_td_2_Template, 2, 2, "td", 94);
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r15 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r15.columns);
} }
function NovoTableElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵelementStart(1, "novo-form", 10);
    ɵɵelementStart(2, "table", 11);
    ɵɵtemplate(3, NovoTableElement_div_3_thead_3_Template, 5, 3, "thead", 0);
    ɵɵtemplate(4, NovoTableElement_div_3_tbody_4_Template, 3, 2, "tbody", 0);
    ɵɵtemplate(5, NovoTableElement_div_3_tbody_5_Template, 7, 1, "tbody", 12);
    ɵɵtemplate(6, NovoTableElement_div_3_tbody_6_Template, 7, 1, "tbody", 12);
    ɵɵtemplate(7, NovoTableElement_div_3_tbody_7_Template, 7, 1, "tbody", 13);
    ɵɵtemplate(8, NovoTableElement_div_3_tfoot_8_Template, 4, 1, "tfoot", 14);
    ɵɵtemplate(9, NovoTableElement_div_3_tfoot_9_Template, 3, 1, "tfoot", 15);
    ɵɵelementEnd();
    ɵɵelementEnd();
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("form", ctx_r3.tableForm);
    ɵɵadvance(1);
    ɵɵclassProp("table-details", ctx_r3.config.hasDetails);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.columns.length && (!ctx_r3.dataProvider.isEmpty() || ctx_r3.dataProvider.isFiltered() || ctx_r3.skipSortAndFilterClear || ctx_r3.editing));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r3.dataProvider.isEmpty() || ctx_r3.editing);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.dataProvider.isEmpty() && !ctx_r3.dataProvider.isFiltered() && !ctx_r3.editing);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.dataProvider.isEmpty() && ctx_r3.dataProvider.isFiltered());
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.dataProvider.hasErrors());
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r3.config.footers);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r3.footers);
} }
var _c3$9 = [[["novo-table-header"]], [["novo-table-actions"]], [["", "table-empty-message", ""]], [["", "table-no-matching-records-message", ""]], [["", "table-error-message", ""]], [["novo-table-footer"]]];
var _c4$3 = ["novo-table-header", "novo-table-actions", "[table-empty-message]", "[table-no-matching-records-message]", "[table-error-message]", "novo-table-footer"];
// TODO - support (1) clicking cell to edit, (2) clicking row to edit, (3) button to trigger full table to edit
var NovoTableMode;
(function (NovoTableMode) {
    NovoTableMode[NovoTableMode["VIEW"] = 1] = "VIEW";
    NovoTableMode[NovoTableMode["EDIT"] = 2] = "EDIT";
})(NovoTableMode || (NovoTableMode = {}));
var NovoTableElement = /** @class */ (function () {
    function NovoTableElement(labels, formUtils, builder) {
        this.labels = labels;
        this.formUtils = formUtils;
        this.builder = builder;
        this.config = {};
        this.skipSortAndFilterClear = false;
        this.mode = NovoTableMode.VIEW;
        this.editable = false;
        this.rowIdentifier = 'id';
        this.name = 'table';
        this.onRowClick = new EventEmitter();
        this.onRowSelect = new EventEmitter();
        this.onTableChange = new EventEmitter();
        this._rows = [];
        this.selected = [];
        this.activeId = 0;
        this.master = false;
        this.expandAll = false;
        this.indeterminate = false;
        this.lastPage = 0;
        this.selectedPageCount = 0;
        this.showSelectAllMessage = false;
        this.pagedData = [];
        // Map to keep track of what dropdowns are toggled
        // Used to properly *ngIf the <list> so that the keepFilterFocused Directive
        // will properly fire the ngAfterViewInit event
        this.toggledDropdownMap = {};
        this.NovoTableMode = NovoTableMode;
        this.tableForm = new FormGroup({});
        this.footers = [];
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        this.loading = false;
        notify('[Deprecated]: The table is deprecated. Please migrate to novo-data-tables!');
    }
    Object.defineProperty(NovoTableElement.prototype, "rows", {
        get: function () {
            return this._rows;
        },
        set: function (rows) {
            this.dataProvider = rows;
            if (rows && rows.length > 0) {
                this.setupColumnDefaults();
            }
            // this is a temporary/hacky fix until async dataloading is handled within the table
            if (!this.skipSortAndFilterClear) {
                this.clearAllSortAndFilters();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "dataProvider", {
        get: function () {
            return this._dataProvider;
        },
        set: function (dp) {
            var _this = this;
            this._dataProvider = Array.isArray(dp) ? new PagedArrayCollection(dp) : dp;
            this._dataProvider.dataChange.pipe(debounceTime(100)).subscribe(function (event) {
                switch (event.type) {
                    case CollectionEvent.CHANGE:
                        _this._rows = event.data;
                        // Setup form
                        _this.tableForm = _this.builder.group({
                            rows: _this.builder.array([]),
                        });
                        // Remove all selection on sort change if selection is on
                        if (_this.config.rowSelectionStyle === 'checkbox') {
                            _this.pagedData = event.data;
                            _this.pageSelected = _this.pagedData.filter(function (r) { return r._selected; });
                            _this.rowSelectHandler();
                        }
                        // Find that columns we might need to sum up via the footer
                        var columnsToSum_1 = [];
                        var columnSums_1 = {};
                        if (_this.config.footers) {
                            _this.config.footers.forEach(function (config) {
                                columnsToSum_1.push.apply(columnsToSum_1, __spread(config.columns));
                            });
                            // Only have unique columns, filter out duplicates
                            columnsToSum_1 = columnsToSum_1.filter(function (item, index, array) { return array.indexOf(item) === index; });
                        }
                        // Make a form for each row
                        var tableFormRows_1 = _this.tableForm.controls['rows'];
                        _this._rows.forEach(function (row, index) {
                            var rowControls = [];
                            row.controls = {};
                            row._editing = {};
                            row._expanded = _this.config.expandAll;
                            row.rowId = _this._rows.length;
                            _this.columns.forEach(function (column) {
                                // Use the control passed or use a ReadOnlyControl so that the form has the values
                                var control = column.editorConfig
                                    ? ControlFactory.create(column.editorType, column.editorConfig)
                                    : new ReadOnlyControl({ key: column.name });
                                row.controls[column.name] = control;
                                rowControls.push(control);
                            });
                            _this.formUtils.setInitialValues(rowControls, row, false);
                            tableFormRows_1.push(_this.formUtils.toFormGroup(rowControls));
                            // Setup the total footer if configured
                            // Array of keys to total
                            if (columnsToSum_1.length !== 0) {
                                columnsToSum_1.forEach(function (column) {
                                    if (Helpers.isBlank(columnSums_1[column])) {
                                        columnSums_1[column] = 0;
                                    }
                                    columnSums_1[column] += row[column];
                                });
                            }
                        });
                        if (_this.mode === NovoTableMode.EDIT) {
                            _this.setTableEdit();
                        }
                        // Setup the footers (if any)
                        if (_this.config.footers) {
                            _this.footers = [];
                            _this.config.footers.forEach(function (footerConfig, footerConfigIndex) {
                                var footer = {};
                                footer[footerConfig.labelColumn] = footerConfig.label;
                                footerConfig.columns.forEach(function (column) {
                                    if (footerConfig.method === 'AVG' && _this._rows.length !== 0) {
                                        footer[column] = columnSums_1[column] / _this._rows.length;
                                    }
                                    else {
                                        footer[column] = columnSums_1[column];
                                    }
                                });
                                _this.footers.push(footer);
                            });
                        }
                        break;
                    default:
                        break;
                }
            });
            if (this.config.paging) {
                this._dataProvider.page = this.config.paging.current;
                this._dataProvider.pageSize = this.config.paging.itemsPerPage;
            }
            else {
                // Paging turned off, return basically all of the data
                this._dataProvider.page = 1;
                this._dataProvider.pageSize = 500;
            }
            if (dp && dp.length > 0) {
                this.setupColumnDefaults();
            }
            this._dataProvider.refresh();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "editing", {
        get: function () {
            return this.mode === NovoTableMode.EDIT;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoTableElement.prototype, "formValue", {
        get: function () {
            return this.tableForm.value;
        },
        enumerable: true,
        configurable: true
    });
    NovoTableElement.prototype.onDropdownToggled = function (event, column) {
        this.toggledDropdownMap[column] = event;
    };
    NovoTableElement.prototype.focusInput = function () {
        if (this.filterInputs && this.filterInputs.length) {
            this.filterInputs.forEach(function (filterInput) {
                if (filterInput.nativeElement) {
                    setTimeout(function () { return filterInput.nativeElement.focus(); }, 0);
                }
            });
        }
    };
    NovoTableElement.prototype.onPageChange = function (event) {
        // this.dataProvider.page = event.page;
        // this.dataProvider.pageSize = event.itemsPerPage;
    };
    NovoTableElement.prototype.getOptionDataAutomationId = function (option) {
        if (!Helpers.isBlank(option.value)) {
            return option.value;
        }
        return option;
    };
    NovoTableElement.prototype.setupColumnDefaults = function () {
        var _this = this;
        // Check columns for cell option types
        this.columns.forEach(function (column) {
            if (column && column.type) {
                switch (column.type) {
                    case 'date':
                        // Set options based on dates if there are none
                        column.options = column.options || _this.getDefaultOptions(column);
                        break;
                    default:
                        break;
                }
            }
        });
    };
    NovoTableElement.prototype.ngDoCheck = function () {
        if (this.config.paging && this.config.paging.current !== this.lastPage) {
            this.rowSelectHandler();
            this.showSelectAllMessage = false;
        }
        this.lastPage = this.config.paging ? this.config.paging.current : 1;
    };
    NovoTableElement.prototype.getPageStart = function () {
        return this.config.paging ? (this.dataProvider.page - 1) * this.dataProvider.pageSize : 0;
    };
    NovoTableElement.prototype.getPageEnd = function () {
        return this.config.paging && this.dataProvider.pageSize > -1 ? this.getPageStart() + this.dataProvider.pageSize : this.rows.length;
    };
    NovoTableElement.prototype.getRowControlForm = function (i) {
        var tableFormRows = this.tableForm.controls['rows'];
        return tableFormRows.controls[i];
    };
    NovoTableElement.prototype.onFilterClick = function (column, filter) {
        if (filter.range && !column.calendarShow) {
            column.calenderShow = true;
            return;
        }
        if (Array.isArray(column.filter) && column.multiple) {
            if (~column.filter.indexOf(filter)) {
                // Remove filter
                column.filter.splice(column.filter.indexOf(filter), 1);
                if (filter.range) {
                    column.calenderShow = false;
                }
                if (column.filter.length === 0) {
                    column.filter = null;
                }
            }
            else {
                // Add filter
                column.filter.push(filter);
            }
        }
        else if (column.multiple) {
            column.filter = new Array();
            column.filter.push(Helpers.isBlank(filter.value) ? filter : filter.value);
        }
        else {
            column.filter = Helpers.isBlank(filter.value) ? filter : filter.value;
        }
        this.onFilterChange();
    };
    NovoTableElement.prototype.onFilterClear = function (column) {
        var _this = this;
        setTimeout(function () {
            column.filter = null;
            column.freetextFilter = null;
            _this.onFilterChange();
            if (column.originalOptions) {
                column.options = column.originalOptions;
            }
        });
    };
    NovoTableElement.prototype.clearAllSortAndFilters = function () {
        if (this.config.filtering) {
            this.columns.forEach(function (column) {
                column.filter = null;
                column.sort = null;
            });
        }
    };
    /**
     * @description This method updates the row data to reflect the active filters.
     */
    NovoTableElement.prototype.onFilterChange = function (event) {
        var e_1, _a;
        if (this.config.filtering) {
            // Array of filters
            var filters = this.columns.filter(function (col) { return !Helpers.isEmpty(col.filter); });
            if (filters.length) {
                var query = {};
                var _loop_1 = function (column) {
                    if (Helpers.isFunction(column.match)) {
                        query[column.name] = function (value, record) {
                            return column.match(record, column.filter);
                        };
                    }
                    else if (column.preFilter && Helpers.isFunction(column.preFilter)) {
                        query = Object.assign({}, query, column.preFilter(this_1.escapeCharacters(column.filter)));
                    }
                    else if (Array.isArray(column.filter)) {
                        // The filters are an array (multi-select), check value
                        var options = column.filter;
                        // We have an array of {value: '', labels: ''}
                        if (options[0].value || options[0].label) {
                            options = column.filter.map(function (opt) { return opt.value; });
                        }
                        query[column.name] = { any: options };
                    }
                    else if (column.type && column.type === 'date') {
                        if (column.filter.startDate && column.filter.endDate) {
                            query[column.name] = {
                                min: startOfDay(column.filter.startDate),
                                max: startOfDay(addDays(startOfDay(column.filter.endDate), 1)),
                            };
                        }
                        else {
                            query[column.name] = {
                                min: column.filter.min ? addDays(startOfToday(), column.filter.min) : startOfToday(),
                                max: column.filter.max ? addDays(startOfTomorrow(), column.filter.max) : startOfTomorrow(),
                            };
                        }
                    }
                    else {
                        query[column.name] = column.filter;
                    }
                };
                var this_1 = this;
                try {
                    for (var filters_1 = __values(filters), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
                        var column = filters_1_1.value;
                        _loop_1(column);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (filters_1_1 && !filters_1_1.done && (_a = filters_1.return)) _a.call(filters_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (Helpers.isFunction(this.config.filtering)) {
                    this.config.filtering(query);
                }
                else {
                    this._dataProvider.filter = query;
                }
            }
            else {
                this._dataProvider.filter = {};
            }
            // Trickle down to keep sort
            // this.onSortChange(this.currentSortColumn);
            this.fireTableChangeEvent();
            // If paging, reset page
            if (this.config.paging) {
                this.config.paging.current = 1;
            }
            // Remove all selection on sort change if selection is on
            if (this.config.rowSelectionStyle === 'checkbox') {
                this.selectAll(false);
            }
        }
    };
    NovoTableElement.prototype.escapeCharacters = function (filter) {
        if (typeof filter === 'string') {
            return filter.replace(/'/g, '\'\'');
        }
        return filter;
    };
    NovoTableElement.prototype.isFilterActive = function (column, filter) {
        // TODO: This needs to be refactored
        var isActive = false;
        if (column && !Helpers.isBlank(column.filter) && !Helpers.isBlank(filter)) {
            if (Array.isArray(column.filter)) {
                if (typeof filter !== 'string') {
                    isActive = column.filter.some(function (item) {
                        return item.label === filter.label;
                    });
                }
                else {
                    isActive = column.filter.includes(filter);
                }
            }
            else {
                if (typeof column.filter === typeof filter) {
                    isActive = column.filter === filter;
                }
                else {
                    isActive = column.filter === filter.value;
                }
            }
        }
        return isActive;
    };
    NovoTableElement.prototype.onSortChange = function (column) {
        var e_2, _a;
        var _this = this;
        this.currentSortColumn = column;
        var sortedColumns = this.columns.filter(function (thisColumn) {
            return thisColumn.sort && thisColumn !== _this.currentSortColumn;
        });
        try {
            for (var sortedColumns_1 = __values(sortedColumns), sortedColumns_1_1 = sortedColumns_1.next(); !sortedColumns_1_1.done; sortedColumns_1_1 = sortedColumns_1.next()) {
                var sortedColumn = sortedColumns_1_1.value;
                sortedColumn.sort = null;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (sortedColumns_1_1 && !sortedColumns_1_1.done && (_a = sortedColumns_1.return)) _a.call(sortedColumns_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (column) {
            if (Helpers.isFunction(this.config.sorting)) {
                this.config.sorting();
            }
            else if (Helpers.isFunction(column.preSort)) {
                this._dataProvider.sort = [].concat(column.preSort(column));
            }
            else {
                this._dataProvider.sort = [{ field: column.compare || column.name, reverse: column.sort === 'desc' }];
            }
        }
        // Fire table change event
        // this.fireTableChangeEvent();
        // If paging, reset page
        if (this.config.paging) {
            this.config.paging.current = 1;
        }
        // Remove all selection on sort change if selection is on
        if (this.config.rowSelectionStyle === 'checkbox') {
            this.selectAll(false);
        }
    };
    NovoTableElement.prototype.fireTableChangeEvent = function () {
        // Construct a table change object
        var onTableChange = {};
        var filters = this.columns.filter(function (col) { return col.filter && col.filter.length; });
        onTableChange.filter = filters.length ? filters : false;
        onTableChange.sort = this.currentSortColumn ? this.currentSortColumn : false;
        onTableChange.rows = this.rows;
        // Emit event
        this.onTableChange.emit(onTableChange);
    };
    NovoTableElement.prototype.findColumnIndex = function (value) {
        for (var i = 0; i < this.columns.length; i += 1) {
            if (this.columns[i].name === value) {
                return i;
            }
        }
        return null;
    };
    NovoTableElement.prototype.onOrderChange = function (event) {
        var oldIndex = this.findColumnIndex(event.first.name);
        var newIndex = this.findColumnIndex(event.second.name);
        this.columns.splice(newIndex, 0, this.columns.splice(oldIndex, 1)[0]);
        this.onSortChange(this.currentSortColumn);
    };
    NovoTableElement.prototype.expandAllOnPage = function (expanded) {
        var e_3, _a;
        this.config.expandAll = !expanded;
        try {
            for (var _b = __values(this.dataProvider.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                var row = _c.value;
                row._expanded = this.config.expandAll;
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    NovoTableElement.prototype.selectPage = function (data) {
        var e_4, _a;
        if (!this.master) {
            this.selectAll(false);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
            this.showSelectAllMessage = false;
        }
        else {
            this.indeterminate = false;
            try {
                // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
                for (var _b = __values(this.pagedData), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var row = _c.value;
                    row._selected = this.master;
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_4) throw e_4.error; }
            }
            this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
            this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
            this.emitSelected(this.selected);
            // Only show the select all message when there is only one new page selected at a time
            this.selectedPageCount++;
            this.showSelectAllMessage = this.selectedPageCount === 1 && this.selected.length !== this.dataProvider.total;
        }
    };
    NovoTableElement.prototype.selectAll = function (value) {
        var e_5, _a;
        this.master = value;
        this.indeterminate = false;
        try {
            for (var _b = __values(this.dataProvider.list), _c = _b.next(); !_c.done; _c = _b.next()) {
                var row = _c.value;
                row._selected = value;
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_5) throw e_5.error; }
        }
        this.selected = value ? this.dataProvider.list : [];
        this.showSelectAllMessage = false;
        this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        this.rowSelectHandler();
    };
    NovoTableElement.prototype.rowSelectHandler = function (data) {
        // this.pagedData = this.rows.slice(this.getPageStart(), this.getPageEnd());
        this.pageSelected = this.pagedData.filter(function (r) { return r._selected; });
        this.selected = this.dataProvider.list.filter(function (r) { return r._selected; });
        if (this.pageSelected.length === 0) {
            this.master = false;
            this.indeterminate = false;
        }
        else if (this.pageSelected.length === this.pagedData.length) {
            this.master = true;
            this.indeterminate = false;
        }
        else {
            this.master = false;
            this.indeterminate = true;
            // Breaking the selected page count
            this.showSelectAllMessage = false;
            this.selectedPageCount = this.selectedPageCount > 0 ? this.selectedPageCount - 1 : 0;
        }
        this.emitSelected(this.selected);
    };
    NovoTableElement.prototype.emitSelected = function (selected) {
        this.onRowSelect.emit({ length: selected.length, selected: selected });
    };
    NovoTableElement.prototype.rowClickHandler = function (row) {
        if (this.config.rowSelect) {
            this.activeId = row.id || 0;
            this.onRowClick.emit(row);
        }
    };
    NovoTableElement.prototype.getDefaultOptions = function (column) {
        // TODO - needs to come from label service - https://github.com/bullhorn/novo-elements/issues/116
        var opts = [
            { label: this.labels.past1Day, min: -1, max: 0 },
            { label: this.labels.past7Days, min: -7, max: 0 },
            { label: this.labels.past30Days, min: -30, max: 0 },
            { label: this.labels.past90Days, min: -90, max: 0 },
            { label: this.labels.past1Year, min: -366, max: 0 },
            { label: this.labels.next1Day, min: 0, max: 1 },
            { label: this.labels.next7Days, min: 0, max: 7 },
            { label: this.labels.next30Days, min: 0, max: 30 },
            { label: this.labels.next90Days, min: 0, max: 90 },
            { label: this.labels.next1Year, min: 0, max: 366 },
        ];
        if (column && column.range) {
            opts.push({
                label: this.labels.customDateRange,
                range: true,
            });
        }
        return opts;
    };
    NovoTableElement.prototype.onCalenderSelect = function (column, event) {
        var _this = this;
        setTimeout(function () {
            if (event.startDate && event.endDate) {
                _this.onFilterChange();
            }
        }, 10);
    };
    NovoTableElement.prototype.onFilterKeywords = function (config) {
        if (config && config.filtering && config.filtering.freetextFilter) {
            var filterKeywords_1 = config.filtering.freetextFilter.toLowerCase();
            if (!config.filtering.originalOptions) {
                config.filtering.originalOptions = config.filtering.options;
            }
            var newOptions = config.filtering.originalOptions.filter(function (option) {
                var value = option && option.label ? option.label : option;
                value = value.toLowerCase() ? value.toLowerCase() : value;
                if (value === filterKeywords_1) {
                    return true;
                }
                else if (~value.indexOf(filterKeywords_1) || ~value.indexOf(filterKeywords_1)) {
                    return true;
                }
                return false;
            });
            config.filtering.options = newOptions;
            config.filtering.filter = config.filtering.freetextFilter;
        }
        else {
            config.filtering.options = config.filtering.originalOptions;
        }
        this.onFilterChange();
    };
    /**
     * @description Sets the Table into EDIT mode, based on the row/column passed you can enter in a few states
     * (1) setTableEdit() - don't pass any to put the FULL table into edit mode
     * (2) setTableEdit(1) - pass only row to put that FULL row of the table into edit mode
     * (3) setTableEdit(1, 1) - pass row and column to put that column of the row of the table into edit mode
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.setTableEdit = function (rowNumber, columnNumber) {
        var _this = this;
        this.mode = NovoTableMode.EDIT;
        this._dataProvider.edit();
        this._rows.forEach(function (row, rowIndex) {
            row._editing = row._editing || {};
            _this.columns.forEach(function (column, columnIndex) {
                if (column.viewOnly) {
                    row._editing[column.name] = false;
                }
                else if (Helpers.isEmpty(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) && rowIndex === Number(rowNumber) && Helpers.isEmpty(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else if (!Helpers.isEmpty(rowNumber) &&
                    !Helpers.isEmpty(columnNumber) &&
                    rowIndex === Number(rowNumber) &&
                    columnIndex === Number(columnNumber)) {
                    row._editing[column.name] = true;
                }
                else {
                    row._editing[column.name] = false;
                }
            });
        });
    };
    /**
     * @description Leaves edit mode for the Table and puts everything back to VIEW only
     * @memberOf NovoTableElement
     * @param cancel - whether or not to save data or undo
     */
    NovoTableElement.prototype.leaveEditMode = function (cancel) {
        var _this = this;
        this.mode = NovoTableMode.VIEW;
        this._rows.forEach(function (row) {
            row._editing = row._editing || {};
            _this.columns.forEach(function (column) {
                row._editing[column.name] = false;
            });
        });
        if (cancel) {
            this._dataProvider.undo();
        }
        else {
            this._dataProvider.commit();
        }
        this.hideToastMessage();
    };
    /**
     * @description Adds a new row into the table to be edited, can be called from a local reference of the table in your template
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.addEditableRow = function (defaultValue) {
        if (defaultValue === void 0) { defaultValue = {}; }
        var tableFormRows = this.tableForm.controls['rows'];
        var row = {};
        var rowControls = [];
        row.controls = {};
        row._editing = {};
        row.rowId = this._rows.length + 1;
        this.columns.forEach(function (column) {
            // Use the control passed or use a ReadOnlyControl so that the form has the values
            var control = column.editorConfig
                ? ControlFactory.create(column.editorType, column.editorConfig)
                : new ReadOnlyControl({ key: column.name });
            control.value = null; // remove copied column value
            row.controls[column.name] = control;
            row._editing[column.name] = !column.viewOnly;
            rowControls.push(control);
        });
        this.formUtils.setInitialValues(rowControls, defaultValue, false);
        tableFormRows.push(this.formUtils.toFormGroup(rowControls));
        this._rows.push(row);
    };
    /**
     * @description Validates the Form inside of the Table, if there are errors it will display/return the errors for each row.
     * If there are no errors, then it will return ONLY the changed data for each row, the data returned will be in the form:
     * { id: ID_OF_RECORD, key: value } -- data that was updated
     * { id: undefined, key: value } -- data that was added
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.validateAndGetUpdatedData = function () {
        var _this = this;
        if (this.tableForm && this.tableForm.controls && this.tableForm.controls['rows']) {
            var changedRows_1 = [];
            var errors_1 = [];
            // Go over the FormArray's controls
            this.tableForm.controls['rows'].controls.forEach(function (formGroup, index) {
                var changedRow = null;
                var error = null;
                // Go over the form group controls
                Object.keys(formGroup.controls).forEach(function (key) {
                    var control = formGroup.controls[key];
                    // Handle value changing
                    if (control && control.dirty && !control.errors) {
                        if (!changedRow) {
                            // Append the ID, so we have some key to save against
                            changedRow = {};
                            if (_this._rows[index].id) {
                                changedRow.id = _this._rows[index].id;
                            }
                        }
                        // If dirty, grab value off the form
                        changedRow[key] = _this.tableForm.value['rows'][index][key];
                        // Set value back to row (should be already done via the server call, but do it anyway)
                        _this._rows[index][key] = changedRow[key];
                    }
                    else if (control && control.errors) {
                        // Handle errors
                        if (!error) {
                            error = {};
                        }
                        error[key] = control.errors;
                        control.markAsDirty();
                        control.markAsTouched();
                    }
                });
                if (changedRow) {
                    changedRows_1.push(changedRow);
                }
                if (error) {
                    errors_1.push({ errors: error, row: _this._rows[index], index: index });
                }
            });
            var ret = {};
            // Return errors if any, otherwise return the changed rows
            if (errors_1.length === 0) {
                return { changed: changedRows_1 };
            }
            return { errors: errors_1 };
        }
    };
    /**
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.cancelEditing = function () {
        this.leaveEditMode(true);
    };
    /**
     * @description Refresh the data provider and leave edit mode
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.saveChanges = function () {
        this.leaveEditMode(false);
    };
    /**
     * @description Displays a toast message inside of the table
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.displayToastMessage = function (toast, hideDelay) {
        var _this = this;
        this.loading = false;
        this.toast = toast;
        if (hideDelay) {
            setTimeout(function () { return _this.hideToastMessage(); }, hideDelay);
        }
    };
    /**
     * @description Force hide the toast message
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.hideToastMessage = function () {
        var _this = this;
        this.toast = null;
        // Hack to make the table display properly after hiding the toast
        this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = true;
        setTimeout(function () {
            _this.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast = false;
        });
    };
    /**
     * @description display the loading overlay on the table
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.toggleLoading = function (show) {
        this.loading = show;
    };
    /**
     * @description hide a column in edit or view mode
     * @memberOf NovoTableElement
     */
    NovoTableElement.prototype.isColumnHidden = function (column) {
        return this.editing ? !!column.hideColumnOnEdit : !!column.hideColumnOnView;
    };
    NovoTableElement.ɵfac = function NovoTableElement_Factory(t) { return new (t || NovoTableElement)(ɵɵdirectiveInject(NovoLabelService), ɵɵdirectiveInject(FormUtils), ɵɵdirectiveInject(FormBuilder)); };
    NovoTableElement.ɵcmp = ɵɵdefineComponent({ type: NovoTableElement, selectors: [["novo-table"]], viewQuery: function NovoTableElement_Query(rf, ctx) { if (rf & 1) {
            ɵɵviewQuery(_c0$_, true, ElementRef);
        } if (rf & 2) {
            var _t;
            ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.filterInputs = _t);
        } }, hostVars: 5, hostBindings: function NovoTableElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵattribute("theme", ctx.theme);
            ɵɵclassProp("editing", ctx.mode === ctx.NovoTableMode.EDIT)("novo-table-loading", ctx.loading);
        } }, inputs: { config: "config", columns: "columns", theme: "theme", skipSortAndFilterClear: "skipSortAndFilterClear", mode: "mode", editable: "editable", rowIdentifier: "rowIdentifier", name: "name", rows: "rows", dataProvider: "dataProvider" }, outputs: { onRowClick: "onRowClick", onRowSelect: "onRowSelect", onTableChange: "onTableChange" }, ngContentSelectors: _c4$3, decls: 4, vars: 4, consts: [[4, "ngIf"], ["class", "novo-table-loading-overlay", 4, "ngIf"], [3, "theme", "icon", "message", 4, "ngIf"], ["class", "table-container", 4, "ngIf"], [1, "header-actions"], [3, "rowOptions", "disablePageSelection", "page", "itemsPerPage", "totalItems", "pageChange", "itemsPerPageChange", "onPageChange", 4, "ngIf"], [3, "rowOptions", "disablePageSelection", "page", "itemsPerPage", "totalItems", "pageChange", "itemsPerPageChange", "onPageChange"], [1, "novo-table-loading-overlay"], [3, "theme", "icon", "message"], [1, "table-container"], ["hideHeader", "true", 3, "form"], ["role", "grid", 1, "table", "table-striped", "dataTable"], ["class", "table-message", "data-automation-id", "empty-table", 4, "ngIf"], ["class", "table-message", "data-automation-id", "table-errors", 4, "ngIf"], [3, "ngClass", 4, "ngIf"], ["class", "novo-table-total-footer", 4, "ngFor", "ngForOf"], ["role", "row"], ["class", "row-actions", 4, "ngIf"], ["class", "row-actions checkbox mass-action", 4, "ngIf"], [3, "ngClass", "novoThOrderable", "hidden", "onOrderChange", 4, "ngFor", "ngForOf"], [1, "row-actions"], ["theme", "icon", "icon", "next", "data-automation-id", "expand-all", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "sort-desc", "data-automation-id", "collapse-all", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "next", "data-automation-id", "expand-all", 3, "click"], ["theme", "icon", "icon", "sort-desc", "data-automation-id", "collapse-all", 3, "click"], [1, "row-actions", "checkbox", "mass-action"], ["data-automation-id", "select-all-checkbox", "tooltipPosition", "right", 3, "ngModel", "indeterminate", "tooltip", "ngModelChange"], [3, "ngClass", "novoThOrderable", "hidden", "onOrderChange"], ["class", "th-group", 4, "ngIf"], [1, "th-group"], [1, "th-title", 3, "ngClass", "novoThSortable", "column", "onSortChange"], ["class", "table-sort-icons", "tooltipPosition", "bottom", 3, "tooltip", "ngClass", 4, "ngIf"], ["side", "right", "class", "column-filters", "parentScrollSelector", ".table-container", "containerClass", "table-dropdown", 3, "toggled", 4, "ngIf"], ["tooltipPosition", "bottom", 1, "table-sort-icons", 3, "tooltip", "ngClass"], [1, "bhi-arrow-up"], [1, "bhi-arrow-down"], ["side", "right", "parentScrollSelector", ".table-container", "containerClass", "table-dropdown", 1, "column-filters", 3, "toggled"], ["type", "button", "theme", "icon", "icon", "filter", "tooltipPosition", "bottom", 3, "tooltip", "click"], [1, "filter-search"], [1, "header"], ["theme", "dialogue", "color", "negative", "icon", "times", 3, "click", 4, "ngIf"], ["type", "text", "keepFilterFocused", "", 3, "novoTableFilter", "ngModel", "onFilterChange", "ngModelChange", 4, "ngIf"], [3, "ngClass", "click", 4, "ngFor", "ngForOf"], ["theme", "dialogue", "color", "negative", "icon", "times", 3, "click"], ["type", "text", "keepFilterFocused", "", 3, "novoTableFilter", "ngModel", "onFilterChange", "ngModelChange"], ["filterInput", ""], [3, "ngClass", "click"], ["class", "bhi-check", 4, "ngIf"], [1, "bhi-check"], ["class", "filter-search", 4, "ngIf"], [3, "ngClass", "keepOpen", "hidden", "click", 4, "ngFor", "ngForOf"], [1, "calendar-container", 3, "hidden"], [3, "click"], [1, "bhi-previous"], ["range", "true", 3, "ngModel", "onSelect", "ngModelChange"], ["rangePicker", ""], [3, "ngClass", "keepOpen", "hidden", "click"], ["class", "table-selection-row", "data-automation-id", "table-selection-row", 4, "ngIf"], ["ngFor", "", 3, "ngForOf"], ["data-automation-id", "table-selection-row", 1, "table-selection-row"], ["colspan", "100%"], ["data-automation-id", "all-matching-records", 3, "click"], [1, "table-row", 3, "ngClass", "id", "click"], ["class", "row-actions checkbox", 4, "ngIf"], [3, "novo-form-row", "hidden", 4, "ngFor", "ngForOf"], ["class", "details-row", 3, "hidden", 4, "ngIf"], ["theme", "icon", "icon", "next", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "sort-desc", 3, "click", 4, "ngIf"], ["theme", "icon", "icon", "next", 3, "click"], ["theme", "icon", "icon", "sort-desc", 3, "click"], [1, "row-actions", "checkbox"], ["data-automation-id", "select-row-checkbox", 3, "ngModel", "ngModelChange"], [3, "hidden"], [3, "hasEditor", "column", "row", "form", 4, "ngIf"], ["condensed", "true", 3, "form", "control", 4, "ngIf"], [3, "hasEditor", "column", "row", "form"], ["condensed", "true", 3, "form", "control"], [1, "details-row", 3, "hidden"], [3, "data", "renderer"], ["data-automation-id", "empty-table", 1, "table-message"], ["emptymessage", ""], ["class", "table-empty-message", 4, "ngIf"], [1, "table-empty-message"], [1, "bhi-search-question"], ["nomatchmessage", ""], ["class", "no-matching-records", 4, "ngIf"], [1, "no-matching-records"], ["data-automation-id", "table-errors", 1, "table-message"], ["errormessage", ""], ["class", "table-error-message", 4, "ngIf"], [1, "table-error-message"], [1, "bhi-caution"], [3, "ngClass"], [1, "novo-table-total-footer"], [4, "ngFor", "ngForOf"]], template: function NovoTableElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵprojectionDef(_c3$9);
            ɵɵtemplate(0, NovoTableElement_header_0_Template, 5, 1, "header", 0);
            ɵɵtemplate(1, NovoTableElement_div_1_Template, 2, 0, "div", 1);
            ɵɵtemplate(2, NovoTableElement_novo_toast_2_Template, 1, 3, "novo-toast", 2);
            ɵɵtemplate(3, NovoTableElement_div_3_Template, 10, 10, "div", 3);
        } if (rf & 2) {
            ɵɵproperty("ngIf", ctx.columns.length);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.loading || ctx.dataProvider.isLoading());
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.toast);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", !ctx.grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast);
        } }, directives: [NgIf, Pagination, NovoLoadingElement, NovoToastElement, NovoFormElement, NgForOf, NovoButtonElement, NovoCheckboxElement, NgControlStatus, NgModel, TooltipDirective, NgClass, ThOrderable, ThSortable, NovoDropdownElement, NovoDropdownListElement, NovoItemElement, DefaultValueAccessor, NovoTableKeepFilterFocus, TableFilter, NovoDatePickerElement, TableCell, NovoControlElement, RowDetails], encapsulation: 2 });
    return NovoTableElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableElement, [{
        type: Component,
        args: [{
                selector: 'novo-table',
                host: {
                    '[attr.theme]': 'theme',
                    '[class.editing]': 'mode === NovoTableMode.EDIT',
                    '[class.novo-table-loading]': 'loading',
                },
                // directives: [],
                template: "\n        <header *ngIf=\"columns.length\">\n            <ng-content select=\"novo-table-header\"></ng-content>\n            <div class=\"header-actions\">\n                <novo-pagination *ngIf=\"config.paging && !(dataProvider.isEmpty() && !dataProvider.isFiltered())\"\n                                 [rowOptions]=\"config.paging.rowOptions\"\n                                 [disablePageSelection]=\"config.paging.disablePageSelection\"\n                                 [(page)]=\"dataProvider.page\"\n                                 [(itemsPerPage)]=\"dataProvider.pageSize\"\n                                 [totalItems]=\"dataProvider.total\"\n                                 (onPageChange)=\"onPageChange($event)\">\n                </novo-pagination>\n                <ng-content select=\"novo-table-actions\"></ng-content>\n            </div>\n        </header>\n        <div class=\"novo-table-loading-overlay\" *ngIf=\"loading || dataProvider.isLoading()\">\n            <novo-loading></novo-loading>\n        </div>\n        <novo-toast *ngIf=\"toast\" [theme]=\"toast?.theme\" [icon]=\"toast?.icon\" [message]=\"toast?.message\"></novo-toast>\n        <div class=\"table-container\" *ngIf=\"!grossFlagToAvoidTheTableFromBeingUglyWhenHidingTheToast\">\n            <novo-form hideHeader=\"true\" [form]=\"tableForm\">\n                <table class=\"table table-striped dataTable\" [class.table-details]=\"config.hasDetails\" role=\"grid\">\n                <!-- skipSortAndFilterClear is a hack right now, will be removed once Canvas is refactored -->\n                <thead *ngIf=\"columns.length && (!dataProvider.isEmpty() || dataProvider.isFiltered() || skipSortAndFilterClear || editing)\">\n                    <tr role=\"row\">\n                        <!-- DETAILS -->\n                        <th class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                            <button theme=\"icon\" icon=\"next\" (click)=\"expandAllOnPage(config.expandAll)\" *ngIf=\"!config.expandAll\" data-automation-id=\"expand-all\"></button>\n                            <button theme=\"icon\" icon=\"sort-desc\" (click)=\"expandAllOnPage(config.expandAll)\" *ngIf=\"config.expandAll\" data-automation-id=\"collapse-all\"></button>\n                        </th>\n                        <!-- CHECKBOX -->\n                        <th class=\"row-actions checkbox mass-action\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                            <novo-checkbox [(ngModel)]=\"master\" [indeterminate]=\"pageSelected.length > 0 && pageSelected.length < pagedData.length\" (ngModelChange)=\"selectPage($event)\" data-automation-id=\"select-all-checkbox\" [tooltip]=\"master ? labels.deselectAll : labels.selectAllOnPage\" tooltipPosition=\"right\"></novo-checkbox>\n                        </th>\n                        <!-- TABLE HEADERS -->\n                        <th *ngFor=\"let column of columns\" [ngClass]=\"{ 'mass-action': config?.rowSelectionStyle === 'checkbox', 'actions': column?.actions?.items?.length > 0, 'preview': column?.name === 'preview' }\" [novoThOrderable]=\"column\" (onOrderChange)=\"onOrderChange($event)\" [hidden]=\"isColumnHidden(column)\">\n                            <div class=\"th-group\" [attr.data-automation-id]=\"column.id || column.name\" *ngIf=\"!column.hideHeader\">\n                                <!-- LABEL & SORT ARROWS -->\n                                <div class=\"th-title\" [ngClass]=\"(config.sorting !== false && column.sorting !== false) ? 'sortable' : ''\" [novoThSortable]=\"config\" [column]=\"column\" (onSortChange)=\"onSortChange($event)\">\n                                    <label>{{ column.title || column.label }}</label>\n                                    <div class=\"table-sort-icons\" tooltipPosition=\"bottom\" [tooltip]=\"labels.sort\" [ngClass]=\"column.sort || ''\" *ngIf=\"config.sorting !== false && column.sorting !== false\">\n                                        <i class=\"bhi-arrow-up\"></i>\n                                        <i class=\"bhi-arrow-down\"></i>\n                                    </div>\n                                </div>\n                                <!-- FILTER DROP-DOWN -->\n                                <novo-dropdown side=\"right\" *ngIf=\"config.filtering !== false && column.filtering !== false\" class=\"column-filters\" (toggled)=\"onDropdownToggled($event, column.name)\" parentScrollSelector=\".table-container\" containerClass=\"table-dropdown\">\n                                    <button type=\"button\" theme=\"icon\" icon=\"filter\" tooltipPosition=\"bottom\" [tooltip]=\"labels.filters\" [class.filtered]=\"column.filter || column.filter===false\" (click)=\"focusInput()\"></button>\n                                    <!-- FILTER OPTIONS LIST -->\n                                    <list *ngIf=\"(column?.options?.length || column?.originalOptions?.length) && column?.type !== 'date' && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter || column.filter===false\">{{ labels.clear }}</button>\n                                            </div>\n                                            <input type=\"text\" *ngIf=\"!!column.allowCustomTextOption\" [attr.id]=\"column.name + '-input'\" [novoTableFilter]=\"column\" (onFilterChange)=\"onFilterKeywords($event)\" [(ngModel)]=\"column.freetextFilter\" keepFilterFocused #filterInput/>\n                                        </item>\n                                        <item [ngClass]=\"{ active: isFilterActive(column, option) }\" *ngFor=\"let option of column.options\" (click)=\"onFilterClick(column, option)\" [attr.data-automation-id]=\"getOptionDataAutomationId(option)\">\n                                            <span>{{ option?.label || option }}</span> <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                                        </item>\n                                    </list>\n                                    <!-- FILTER SEARCH INPUT -->\n                                    <list *ngIf=\"!(column?.options?.length || column?.originalOptions?.length) && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">{{ labels.clear }}</button>\n                                            </div>\n                                            <input type=\"text\" [attr.id]=\"column.name + '-input'\" [novoTableFilter]=\"column\" (onFilterChange)=\"onFilterChange($event)\" [(ngModel)]=\"column.filter\" keepFilterFocused #filterInput/>\n                                        </item>\n                                    </list>\n                                    <!-- FILTER DATE OPTIONS -->\n                                    <list *ngIf=\"column?.options?.length && column?.type === 'date' && toggledDropdownMap[column.name]\">\n                                        <item class=\"filter-search\" *ngIf=\"!column.calenderShow\">\n                                            <div class=\"header\">\n                                                <span>{{ labels.filters }}</span>\n                                                <button theme=\"dialogue\" color=\"negative\" icon=\"times\" (click)=\"onFilterClear(column)\" *ngIf=\"column.filter\">{{ labels.clear }}</button>\n                                            </div>\n                                        </item>\n                                        <item [ngClass]=\"{ active: isFilterActive(column, option) }\" *ngFor=\"let option of column.options\" (click)=\"onFilterClick(column, option)\" [keepOpen]=\"option.range\" [hidden]=\"column.calenderShow\" [attr.data-automation-id]=\"(option?.label || option)\">\n                                            {{ option?.label || option }} <i class=\"bhi-check\" *ngIf=\"isFilterActive(column, option)\"></i>\n                                        </item>\n                                        <div class=\"calendar-container\" [hidden]=\"!column.calenderShow\">\n                                            <div (click)=\"column.calenderShow=false\"><i class=\"bhi-previous\"></i>{{ labels.backToPresetFilters }}</div>\n                                            <novo-date-picker #rangePicker (onSelect)=\"onCalenderSelect(column, $event)\" [(ngModel)]=\"column.filter\" range=\"true\"></novo-date-picker>\n                                        </div>\n                                    </list>\n                                </novo-dropdown>\n                            </div>\n                        </th>\n                    </tr>\n                </thead>\n                <!-- TABLE DATA -->\n                <tbody *ngIf=\"!dataProvider.isEmpty() || editing\">\n                    <tr class=\"table-selection-row\" *ngIf=\"config.rowSelectionStyle === 'checkbox' && showSelectAllMessage && config.selectAllEnabled\" data-automation-id=\"table-selection-row\">\n                        <td colspan=\"100%\">\n                            {{labels.selectedRecords(selected.length)}} <a (click)=\"selectAll(true)\" data-automation-id=\"all-matching-records\">{{labels.totalRecords(dataProvider.total)}}</a>\n                        </td>\n                    </tr>\n                    <ng-template ngFor let-row=\"$implicit\" let-i=\"index\" [ngForOf]=\"rows\">\n                        <tr class=\"table-row\" [ngClass]=\"row.customClass || ''\" [id]=\"name + '-' + row[rowIdentifier]\" [attr.data-automation-id]=\"row.id\" (click)=\"rowClickHandler(row)\" [class.active]=\"row.id === activeId\">\n                            <td class=\"row-actions\" *ngIf=\"config.hasDetails\">\n                                <button theme=\"icon\" icon=\"next\" (click)=\"row._expanded=!row._expanded\" *ngIf=\"!row._expanded\"></button>\n                                <button theme=\"icon\" icon=\"sort-desc\" (click)=\"row._expanded=!row._expanded\" *ngIf=\"row._expanded\"></button>\n                            </td>\n                            <td class=\"row-actions checkbox\" *ngIf=\"config.rowSelectionStyle === 'checkbox'\">\n                                <novo-checkbox [(ngModel)]=\"row._selected\" (ngModelChange)=\"rowSelectHandler(row)\" data-automation-id=\"select-row-checkbox\"></novo-checkbox>\n                            </td>\n                            <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"column.id || column.name\" [class.novo-form-row]=\"editable\" [hidden]=\"isColumnHidden(column)\">\n                                <novo-table-cell *ngIf=\"row._editing && !row._editing[column.name]\" [hasEditor]=\"editable\" [column]=\"column\" [row]=\"row\" [form]=\"getRowControlForm(i)\"></novo-table-cell>\n                                <novo-control *ngIf=\"row._editing && row._editing[column.name]\" condensed=\"true\" [form]=\"getRowControlForm(i)\" [control]=\"row.controls[column.name]\"></novo-control>\n                            </td>\n                        </tr>\n                        <tr class=\"details-row\" *ngIf=\"config.hasDetails\" [hidden]=\"!row._expanded\" [attr.data-automation-id]=\"'details-row-'+row.id\">\n                            <td class=\"row-actions\"></td>\n                            <td [attr.colspan]=\"config.rowSelectionStyle === 'checkbox' ? (columns.length + 1) : columns.length\">\n                                <novo-row-details [data]=\"row\" [renderer]=\"config.detailsRenderer\"></novo-row-details>\n                            </td>\n                        </tr>\n                    </ng-template>\n                </tbody>\n                <!-- NO TABLE DATA PLACEHOLDER -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && !dataProvider.isFiltered() && !editing\" data-automation-id=\"empty-table\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #emptymessage><ng-content select=\"[table-empty-message]\"></ng-content></div>\n                            <div class=\"table-empty-message\" *ngIf=\"emptymessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-search-question\"></i> {{ labels.emptyTableMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <!-- NO MATCHING RECORDS -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.isEmpty() && dataProvider.isFiltered()\" data-automation-id=\"empty-table\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #nomatchmessage><ng-content select=\"[table-no-matching-records-message]\"></ng-content></div>\n                            <div class=\"no-matching-records\" *ngIf=\"nomatchmessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-search-question\"></i> {{ labels.noMatchingRecordsMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <!-- TABLE DATA ERROR PLACEHOLDER -->\n                <tbody class=\"table-message\" *ngIf=\"dataProvider.hasErrors()\" data-automation-id=\"table-errors\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <div #errormessage><ng-content select=\"[table-error-message]\"></ng-content></div>\n                            <div class=\"table-error-message\" *ngIf=\"errormessage.childNodes.length == 0\">\n                                <h4><i class=\"bhi-caution\"></i> {{ labels.erroredTableMessage }}</h4>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n                <tfoot *ngIf=\"!config.footers\" [ngClass]=\"dataProvider.length % 2 == 0 ? 'odd' : 'even'\">\n                    <tr>\n                        <td colspan=\"100%\">\n                            <ng-content select=\"novo-table-footer\"></ng-content>\n                        </td>\n                    </tr>\n                </tfoot>\n                <tfoot *ngFor=\"let footer of footers;let i = index;\" class=\"novo-table-total-footer\">\n                    <tr>\n                        <td *ngFor=\"let column of columns\" [attr.data-automation-id]=\"(column.id || column.name) + '-total-' + i\">{{ footer[column.name] }}</td>\n                    </tr>\n                </tfoot>\n            </table>\n        </novo-form>\n    </div>\n    ",
            }]
    }], function () { return [{ type: NovoLabelService }, { type: FormUtils }, { type: FormBuilder }]; }, { filterInputs: [{
            type: ViewChildren,
            args: ['filterInput', { read: ElementRef }]
        }], config: [{
            type: Input
        }], columns: [{
            type: Input
        }], theme: [{
            type: Input
        }], skipSortAndFilterClear: [{
            type: Input
        }], mode: [{
            type: Input
        }], editable: [{
            type: Input
        }], rowIdentifier: [{
            type: Input
        }], name: [{
            type: Input
        }], onRowClick: [{
            type: Output
        }], onRowSelect: [{
            type: Output
        }], onTableChange: [{
            type: Output
        }], rows: [{
            type: Input
        }], dataProvider: [{
            type: Input
        }] }); })();

// NG2
var NovoToastModule = /** @class */ (function () {
    function NovoToastModule() {
    }
    NovoToastModule.ɵmod = ɵɵdefineNgModule({ type: NovoToastModule });
    NovoToastModule.ɵinj = ɵɵdefineInjector({ factory: function NovoToastModule_Factory(t) { return new (t || NovoToastModule)(); }, imports: [[CommonModule]] });
    return NovoToastModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoToastModule, { declarations: [NovoToastElement], imports: [CommonModule], exports: [NovoToastElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoToastModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoToastElement],
                exports: [NovoToastElement],
                entryComponents: [NovoToastElement],
            }]
    }], null, null); })();

// NG2
var NovoTableModule = /** @class */ (function () {
    function NovoTableModule() {
    }
    NovoTableModule.ɵmod = ɵɵdefineNgModule({ type: NovoTableModule });
    NovoTableModule.ɵinj = ɵɵdefineInjector({ factory: function NovoTableModule_Factory(t) { return new (t || NovoTableModule)(); }, imports: [[
                CommonModule,
                FormsModule,
                NovoFormModule,
                NovoTableExtrasModule,
                NovoToastModule,
                NovoButtonModule,
                NovoTooltipModule,
                NovoDropdownModule,
                NovoLoadingModule,
                NovoDatePickerModule,
                NovoFormExtrasModule,
                TextMaskModule,
            ]] });
    return NovoTableModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoTableModule, { declarations: [NovoTableElement], imports: [CommonModule,
        FormsModule,
        NovoFormModule,
        NovoTableExtrasModule,
        NovoToastModule,
        NovoButtonModule,
        NovoTooltipModule,
        NovoDropdownModule,
        NovoLoadingModule,
        NovoDatePickerModule,
        NovoFormExtrasModule,
        TextMaskModule], exports: [NovoTableElement] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoTableModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    NovoFormModule,
                    NovoTableExtrasModule,
                    NovoToastModule,
                    NovoButtonModule,
                    NovoTooltipModule,
                    NovoDropdownModule,
                    NovoLoadingModule,
                    NovoDatePickerModule,
                    NovoFormExtrasModule,
                    TextMaskModule,
                ],
                declarations: [NovoTableElement],
                exports: [NovoTableElement],
            }]
    }], null, null); })();

var Security = /** @class */ (function () {
    function Security() {
        this.credentials = [];
        this.change = new EventEmitter();
    }
    Security.prototype.grant = function (data) {
        var e_1, _a, e_2, _b;
        var parsed = [];
        if (data instanceof Array) {
            try {
                for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                    var permission = data_1_1.value;
                    parsed.push(permission.replace(/\s/gi, ''));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (typeof data === 'object') {
            for (var key in data) {
                if (data[key] instanceof Array) {
                    try {
                        for (var _c = (e_2 = void 0, __values(data[key])), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var permission = _d.value;
                            parsed.push(key + "." + permission);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
        }
        this.credentials = [].concat(this.credentials, parsed);
        this.change.emit(this.credentials);
    };
    Security.prototype.has = function (value) {
        return this.credentials.indexOf(value) > -1;
    };
    Security.prototype.revoke = function (value) {
        var i = this.credentials.indexOf(value);
        this.credentials.splice(i, 1);
        this.change.emit(this.credentials);
    };
    Security.prototype.clear = function () {
        this.credentials = [];
        this.change.emit(this.credentials);
    };
    Security.prototype.subscribe = function (fn) {
        this.change.subscribe(fn);
    };
    Security.prototype.checkRoutes = function (routes, options) {
        var e_3, _a;
        var _this = this;
        var filtered = [];
        try {
            for (var routes_1 = __values(routes), routes_1_1 = routes_1.next(); !routes_1_1.done; routes_1_1 = routes_1.next()) {
                var route = routes_1_1.value;
                if (route.entities && ~route.entities.indexOf(options.entityType)) {
                    if (route.permissions instanceof Function) {
                        if (route.permissions(options, this)) {
                            filtered.push(route);
                        }
                    }
                    else if (route.permissions && route.permissions.length) {
                        if (route.permissions.every(function (perm) { return _this.has(perm); })) {
                            filtered.push(route);
                        }
                    }
                    else {
                        filtered.push(route);
                    }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (routes_1_1 && !routes_1_1.done && (_a = routes_1.return)) _a.call(routes_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return filtered;
    };
    Security.ɵfac = function Security_Factory(t) { return new (t || Security)(); };
    Security.ɵprov = ɵɵdefineInjectable({ token: Security, factory: Security.ɵfac });
    return Security;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(Security, [{
        type: Injectable
    }], null, null); })();

var Unless = /** @class */ (function () {
    function Unless(templateRef, viewContainer, security) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.security = security;
        this.permissions = '';
        this.isDisplayed = false;
        this.security.subscribe(this.check.bind(this));
    }
    Object.defineProperty(Unless.prototype, "bhUnless", {
        set: function (value) {
            this.permissions = value || '';
            this.check();
        },
        enumerable: true,
        configurable: true
    });
    Unless.prototype.check = function () {
        var e_1, _a;
        var _this = this;
        var display = false;
        if (~this.permissions.indexOf('||')) {
            var ps = this.permissions.split('||');
            try {
                for (var ps_1 = __values(ps), ps_1_1 = ps_1.next(); !ps_1_1.done; ps_1_1 = ps_1.next()) {
                    var p = ps_1_1.value;
                    if (this.security.has(p.trim())) {
                        display = true;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (ps_1_1 && !ps_1_1.done && (_a = ps_1.return)) _a.call(ps_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            display = this.permissions.split('&&').every(function (p) { return _this.security.has(p.trim()); });
        }
        if (display) {
            if (!this.isDisplayed) {
                this.isDisplayed = true;
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
        }
        else {
            this.isDisplayed = false;
            this.viewContainer.clear();
        }
    };
    Unless.ɵfac = function Unless_Factory(t) { return new (t || Unless)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ViewContainerRef), ɵɵdirectiveInject(Security)); };
    Unless.ɵdir = ɵɵdefineDirective({ type: Unless, selectors: [["", "bhUnless", ""]], inputs: { bhUnless: "bhUnless" } });
    return Unless;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(Unless, [{
        type: Directive,
        args: [{
                selector: '[bhUnless]',
            }]
    }], function () { return [{ type: TemplateRef }, { type: ViewContainerRef }, { type: Security }]; }, { bhUnless: [{
            type: Input
        }] }); })();

// NG2
var UnlessModule = /** @class */ (function () {
    function UnlessModule() {
    }
    UnlessModule.ɵmod = ɵɵdefineNgModule({ type: UnlessModule });
    UnlessModule.ɵinj = ɵɵdefineInjector({ factory: function UnlessModule_Factory(t) { return new (t || UnlessModule)(); }, imports: [[CommonModule]] });
    return UnlessModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(UnlessModule, { declarations: [Unless], imports: [CommonModule], exports: [Unless] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(UnlessModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [Unless],
                exports: [Unless],
            }]
    }], null, null); })();

/**
 * @classdesc
 * Renders data appropriately based on the data type found in Meta
 * All data types defined by bullhorn should be supported:
 *
 * - **String**: trims value and returns
 * - **Integer**: return value
 * - **Double**: return value fixed to 2 decimals
 * - **BigDecimal**: return value fixed to 2 decimals
 * - **Address**: only city and/or state returned
 * - **Address1**: only city and/or state returned
 * - **AddressWithoutCountry**: only city and/or state returned
 * - **Currency**: put a $ in front
 * - **Percentage**: divide by 100 fix to 2 decimals place and return
 * - **Options**: returns the appropriate 'label' for the 'value' from 'options'
 * - **Array**: returns list comma separated
 * - **DateTime**: formats the date
 * - **TimeStamp**: formats the date
 * - **ToOne**: return the entity specific name (ie. name, firstName lastName, title, ...)
 * - **ToMany**: return an array of the entity specific names (ie. name, firstName lastName, title, ...)
 *
 * @example
 * ```
 * {{ expression | render:field }}
 * ```
 */
var RenderPipe = /** @class */ (function () {
    function RenderPipe(changeDetector, sanitizationService, labels) {
        this.changeDetector = changeDetector;
        this.sanitizationService = sanitizationService;
        this.labels = labels;
    }
    RenderPipe.prototype.equals = function (objectOne, objectTwo) {
        if (objectOne === objectTwo) {
            return true;
        }
        if (objectOne === null || objectTwo === null) {
            return false;
        }
        if (objectOne !== objectOne && objectTwo !== objectTwo) {
            return true;
        }
        var t1 = typeof objectOne;
        var t2 = typeof objectTwo;
        var length;
        var key;
        var keySet;
        if (t1 === t2 && t1 === 'object') {
            if (Array.isArray(objectOne)) {
                if (!Array.isArray(objectTwo)) {
                    return false;
                }
                length = objectOne.length;
                if (length === objectTwo.length) {
                    for (key = 0; key < length; key++) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                    }
                    return true;
                }
            }
            else {
                if (Array.isArray(objectTwo)) {
                    return false;
                }
                keySet = Object.create(null);
                for (key in objectOne) {
                    if (objectOne[key]) {
                        if (!this.equals(objectOne[key], objectTwo[key])) {
                            return false;
                        }
                        keySet[key] = true;
                    }
                }
                for (key in objectTwo) {
                    if (!(key in keySet) && typeof objectTwo[key] !== 'undefined') {
                        return false;
                    }
                }
                return true;
            }
        }
        return false;
    };
    RenderPipe.prototype.getEntityLabel = function (item, entity) {
        switch (entity) {
            case 'CorporateUser':
            case 'ClientContact':
            case 'ClientContact1':
            case 'ClientContact2':
            case 'ClientContact3':
            case 'ClientContact4':
            case 'ClientContact5':
            case 'Lead':
            case 'Candidate':
            case 'Person':
                return ((item.firstName || '') + " " + (item.lastName || '')).trim();
            case 'ClientCorporation':
            case 'ClientCorporation1':
            case 'ClientCorporation2':
            case 'ClientCorporation3':
            case 'ClientCorporation4':
            case 'ClientCorporation5':
                return ("" + (item.name || '')).trim();
            case 'JobOrder':
            case 'JobOrder1':
            case 'JobOrder2':
            case 'JobOrder3':
            case 'JobOrder4':
            case 'JobOrder5':
            case 'Opportunity':
                return ("" + (item.title || '')).trim();
            case 'Placement':
                var label = '';
                if (item.candidate) {
                    label = (item.candidate.firstName + " " + item.candidate.lastName).trim();
                }
                if (item.jobOrder) {
                    label = (label + " - " + item.jobOrder.title).trim();
                }
                return label;
            default:
                return '';
        }
    };
    /**
     * Define the fields to set or retrieve for the given entity. Getter and Setter methods will automagically
     * be set up on the entity once the fields are defined.
     * @param args - fields can either be sent as a list of arguments or as an Array
     * @return text
     */
    RenderPipe.prototype.render = function (value, args) {
        var type = null;
        var text = value;
        // Handle when we don't have meta, but passing an entity
        if (value && value._subtype && !args) {
            return this.getEntityLabel(value, value._subtype);
        }
        // Stop logic for nulls
        if (value === undefined || value === null || !args) {
            return text;
        }
        if (args.formatter && typeof args.formatter === 'function') {
            return args.formatter(value, args);
        }
        // TODO move this to a service
        // Determine TYPE because its not just 1 value that determines this.
        if (args.type === 'TO_MANY') {
            type = 'ToMany';
        }
        else if (args.type === 'TO_ONE') {
            type = args.associatedEntity.entity;
        }
        else if (args.dataSpecialization === 'DATETIME') {
            type = 'DateTime';
        }
        else if (args.dataSpecialization === 'YEAR') {
            type = 'Year';
        }
        else if (args.dataSpecialization === 'DATE' && args.dataType === 'Date') {
            type = 'Date';
        }
        else if (args.dataType === 'Timestamp') {
            type = 'Timestamp';
        }
        else if (['mobile', 'phone', 'phone1', 'phone2', 'phone3', 'workPhone'].indexOf(args.name) > -1) {
            type = 'Phone';
        }
        else if (args.name && args.name.substring(0, 5) === 'email') {
            type = 'Email';
        }
        else if ((args.name && args.name === 'address.countryID') || args.optionsType === 'Country') {
            type = 'Country';
        }
        else if (args.optionsType === 'SkillText') {
            type = 'SkillText';
        }
        else if (args.options || args.inputType === 'SELECT' || args.inputType === 'CHECKBOX') {
            type = 'Options';
        }
        else if (['MONEY', 'PERCENTAGE', 'HTML', 'SSN'].indexOf(args.dataSpecialization) > -1) {
            type = this.capitalize(args.dataSpecialization.toLowerCase());
        }
        else {
            type = args.dataType || 'default';
        }
        // Transform data here
        try {
            switch (type) {
                case 'Address':
                case 'Address1':
                case 'AddressWithoutCountry':
                case 'SecondaryAddress':
                case 'BillingAddress':
                    var country = findByCountryId(Number(value.countryName));
                    text = '';
                    if (value.address1 || value.address2) {
                        text += (value.address1 || '') + " " + (value.address2 || '') + "<br />\n";
                    }
                    text += (value.city || '') + " " + (value.state || '') + " " + (value.zip || '') + (value.city || value.state || value.zip ? '<br />\n' : '');
                    text += "" + (country ? country.name : value.countryName || '') + (country || value.countryName ? '<br />\n' : '');
                    text = this.sanitizationService.bypassSecurityTrustHtml(text.trim());
                    break;
                case 'DateTime':
                case 'Timestamp':
                    text = this.labels.formatDateShort(value);
                    break;
                case 'Date':
                    text = this.labels.formatDate(new Date(value));
                    break;
                case 'Year':
                    text = new Date(value).getFullYear();
                    break;
                case 'Phone':
                case 'Email':
                    text = value;
                    break;
                case 'Money':
                    text = this.labels.formatCurrency(value);
                    break;
                case 'Percentage':
                    text = this.labels.formatNumber(parseFloat(value).toString(), { style: 'percent', minimumFractionDigits: 2 });
                    break;
                case 'Double':
                case 'BigDecimal':
                    text = this.labels.formatNumber(value, { minimumFractionDigits: this.getNumberDecimalPlaces(value) });
                    break;
                case 'Integer':
                    text = value;
                    break;
                case 'BusinessSector':
                case 'Category':
                case 'Certification':
                case 'ClientCorporation':
                case 'CorporationDepartment':
                case 'DistributionList':
                case 'Skill':
                case 'Tearsheet':
                case 'Specialty':
                    text = value.label || value.name || '';
                    break;
                case 'SkillText':
                    text = Array.isArray(value) ? value.join(', ') : value;
                    break;
                case 'Lead':
                case 'Candidate':
                case 'ClientContact':
                case 'CorporateUser':
                case 'Person':
                    text = value.label || (value.firstName || '') + " " + (value.lastName || '');
                    break;
                case 'Opportunity':
                case 'JobOrder':
                    text = value.label || value.title || '';
                    break;
                case 'Placement':
                    if (value.candidate) {
                        text = (value.candidate.firstName || '') + " " + (value.candidate.lastName || '');
                    }
                    if (value.jobOrder) {
                        text = value.candidate ? text + " - " + (value.jobOrder.title || '') : "" + (value.jobOrder.title || '');
                    }
                    break;
                case 'JobSubmission':
                    text =
                        value.label ||
                            (value.jobOrder ? value.jobOrder.title + " - " : '') + " " + (value.candidate ? value.candidate.firstName : '') + " " + (value.candidate ? value.candidate.lastName : '');
                    break;
                case 'WorkersCompensationRate':
                    text = (value.compensation ? value.compensation.code + " - " : '') + " " + (value.compensation ? value.compensation.name : '');
                    break;
                case 'Options':
                    text = this.options(value, args.options, args);
                    break;
                case 'ToMany':
                    if (['Candidate', 'CorporateUser', 'Person'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'firstName', 'lastName');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (['Category', 'BusinessSector', 'Skill', 'Specialty', 'ClientCorporation', 'CorporationDepartment'].indexOf(args.associatedEntity.entity) > -1) {
                        text = this.concat(value.data, 'name');
                        if (value.data.length < value.total) {
                            text = text + ', ' + this.labels.getToManyPlusMore({ quantity: value.total - value.data.length });
                        }
                    }
                    else if (args.associatedEntity.entity === 'MailListPushHistoryDetail') {
                        text = this.concat(value.data, 'externalListName');
                    }
                    else {
                        text = "" + (value.total || '');
                    }
                    break;
                case 'Country':
                    var countryObj = findByCountryId(Number(value));
                    text = countryObj ? countryObj.name : value;
                    break;
                case 'Html':
                    if (Array.isArray(value)) {
                        value = value.join(' ');
                    }
                    if (typeof text === 'string') {
                        text = this.sanitizationService.bypassSecurityTrustHtml(value.replace(/\<a/gi, '<a target="_blank"'));
                    }
                    break;
                case 'CandidateComment':
                    text = value.comments ? this.labels.formatDateShort(value.dateLastModified) + " (" + value.name + ") - " + value.comments : '';
                    break;
                default:
                    text = value.trim ? value.trim() : value;
                    break;
            }
            return text;
        }
        catch (e) {
            console.error("WARNING: There was a problem rendering the value of the field: " + args.label + ". Please check the configuration");
            console.error(e);
            return text;
        }
    };
    RenderPipe.prototype.updateValue = function (value, args) {
        this.value = this.render(value, args);
        this.changeDetector.markForCheck();
    };
    RenderPipe.prototype.transform = function (value, args) {
        if (value === undefined || value === null) {
            return '';
        }
        if (this.equals(value, this.lastValue) && this.equals(args, this.lastArgs)) {
            return this.value;
        }
        this.lastValue = value;
        this.lastArgs = args;
        this.updateValue(this.lastValue, this.lastArgs);
        return this.value;
    };
    /**
     * Simple function concat a list of fields from a list of objects
     * @param list - the list of values to use
     * @param fields - list of fields to extract
     */
    RenderPipe.prototype.concat = function (list) {
        var e_1, _a, e_2, _b;
        var fields = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            fields[_i - 1] = arguments[_i];
        }
        var data = [];
        try {
            for (var list_1 = __values(list), list_1_1 = list_1.next(); !list_1_1.done; list_1_1 = list_1.next()) {
                var item = list_1_1.value;
                var label = [];
                try {
                    for (var fields_1 = (e_2 = void 0, __values(fields)), fields_1_1 = fields_1.next(); !fields_1_1.done; fields_1_1 = fields_1.next()) {
                        var field = fields_1_1.value;
                        label.push("" + item[field]);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (fields_1_1 && !fields_1_1.done && (_b = fields_1.return)) _b.call(fields_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                data.push(label.join(' '));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (list_1_1 && !list_1_1.done && (_a = list_1.return)) _a.call(list_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return data.join(', ');
    };
    /**
     * Simple function to look up the **label** to display from options
     * @param value - the value to find
     * @param list - list of options (label/value pairs)
     */
    RenderPipe.prototype.options = function (value, list, args) {
        if (!Array.isArray(value)) {
            value = [value];
        }
        try {
            return value.map(function (item) {
                var e_3, _a;
                try {
                    for (var list_2 = __values(list), list_2_1 = list_2.next(); !list_2_1.done; list_2_1 = list_2.next()) {
                        var option = list_2_1.value;
                        if (option.value === item) {
                            return option.label;
                        }
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (list_2_1 && !list_2_1.done && (_a = list_2.return)) _a.call(list_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                return item;
            });
        }
        catch (e) {
            if (!args.optionsType) {
                throw Error(e);
            }
            return value;
        }
    };
    RenderPipe.prototype.getNumberDecimalPlaces = function (value) {
        var decimalPlaces;
        if (value) {
            var numberString = parseFloat(value).toString();
            var decimalPlace = (numberString || '').split('.')[1] || '';
            decimalPlaces = decimalPlace.length;
        }
        return decimalPlaces || 1;
    };
    /**
     * Capitalizes the first letter
     */
    RenderPipe.prototype.capitalize = function (value) {
        return value.charAt(0).toUpperCase() + value.slice(1);
    };
    RenderPipe.ɵfac = function RenderPipe_Factory(t) { return new (t || RenderPipe)(ɵɵinjectPipeChangeDetectorRef(), ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(NovoLabelService)); };
    RenderPipe.ɵpipe = ɵɵdefinePipe({ name: "render", type: RenderPipe, pure: false });
    RenderPipe.ɵprov = ɵɵdefineInjectable({ token: RenderPipe, factory: RenderPipe.ɵfac });
    return RenderPipe;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(RenderPipe, [{
        type: Pipe,
        args: [{
                name: 'render',
                pure: false,
            }]
    }, {
        type: Injectable
    }], function () { return [{ type: ChangeDetectorRef }, { type: DomSanitizer }, { type: NovoLabelService }]; }, null); })();

function EntityList_div_0_a_1_Template(rf, ctx) { if (rf & 1) {
    var _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 4);
    ɵɵlistener("click", function EntityList_div_0_a_1_Template_a_click_0_listener() { ɵɵrestoreView(_r7); var entity_r1 = ɵɵnextContext().$implicit; var ctx_r5 = ɵɵnextContext(); return ctx_r5.openLink(entity_r1); });
    ɵɵelement(1, "i");
    ɵɵtext(2);
    ɵɵpipe(3, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    var entity_r1 = ɵɵnextContext().$implicit;
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-circle ", entity_r1.class, "");
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ɵɵpipeBind2(3, 4, entity_r1, ctx_r2.metaDisplay), " ");
} }
function EntityList_div_0_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵelement(1, "i");
    ɵɵtext(2);
    ɵɵpipe(3, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    var entity_r1 = ɵɵnextContext().$implicit;
    var ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵclassMapInterpolate1("bhi-circle ", entity_r1.class, "");
    ɵɵadvance(1);
    ɵɵtextInterpolate1("", ɵɵpipeBind2(3, 4, entity_r1, ctx_r3.metaDisplay), " ");
} }
function EntityList_div_0_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "span");
    ɵɵtext(1);
    ɵɵpipe(2, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    var entity_r1 = ɵɵnextContext().$implicit;
    var ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(2, 1, entity_r1, ctx_r4.metaDisplay), " ");
} }
function EntityList_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 1);
    ɵɵtemplate(1, EntityList_div_0_a_1_Template, 4, 7, "a", 2);
    ɵɵtemplate(2, EntityList_div_0_span_2_Template, 4, 7, "span", 3);
    ɵɵtemplate(3, EntityList_div_0_span_3_Template, 3, 4, "span", 3);
    ɵɵelementEnd();
} if (rf & 2) {
    var entity_r1 = ctx.$implicit;
    ɵɵadvance(1);
    ɵɵproperty("ngIf", entity_r1.isLinkable);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !entity_r1.isLinkable && entity_r1.personSubtype);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !entity_r1.isLinkable && !entity_r1.personSubtype);
} }
var EntityList = /** @class */ (function () {
    function EntityList() {
        this.baseEntity = '';
        this.ENTITY_SHORT_NAMES = {
            Lead: 'lead',
            ClientContact: 'contact',
            ClientContact1: 'contact',
            ClientContact2: 'contact',
            ClientContact3: 'contact',
            ClientContact4: 'contact',
            ClientContact5: 'contact',
            ClientCorporation: 'company',
            ClientCorporation1: 'company',
            ClientCorporation2: 'company',
            ClientCorporation3: 'company',
            ClientCorporation4: 'company',
            ClientCorporation5: 'company',
            Opportunity: 'opportunity',
            Task: 'task',
            Note: 'note',
            CorporateUser: 'user',
            Candidate: 'candidate',
            JobOrder: 'job',
            JobOrder1: 'job',
            JobOrder2: 'job',
            JobOrder3: 'job',
            JobOrder4: 'job',
            JobOrder5: 'job',
            Placement: 'placement',
            JobSubmission: 'submission',
            CandidateReference: 'references',
            DistributionList: 'distributionList',
            Appointment: 'appointment',
        };
    }
    EntityList.prototype.ngOnInit = function () {
        var e_1, _a;
        // use a local copy of the meta to set the type to TO_ONE for proper display
        // without changing the input object
        this.metaDisplay = Helpers.deepClone(this.meta);
        this.metaDisplay.type = 'TO_ONE';
        this.baseEntity = this.meta.associatedEntity.entity;
        try {
            for (var _b = __values(this.data.data), _c = _b.next(); !_c.done; _c = _b.next()) {
                var entity = _c.value;
                entity.isLinkable = this.isLinkable(entity);
                entity.class = this.getClass(entity);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    EntityList.prototype.getClass = function (entity) {
        return this.ENTITY_SHORT_NAMES[entity.personSubtype];
    };
    EntityList.prototype.openLink = function (entity) {
        entity.openLink(entity);
    };
    EntityList.prototype.isLinkable = function (entity) {
        return entity.openLink;
    };
    EntityList.ɵfac = function EntityList_Factory(t) { return new (t || EntityList)(); };
    EntityList.ɵcmp = ɵɵdefineComponent({ type: EntityList, selectors: [["novo-entity-list"]], inputs: { data: "data", meta: "meta" }, decls: 1, vars: 1, consts: [["class", "entity", 4, "ngFor", "ngForOf"], [1, "entity"], [3, "click", 4, "ngIf"], [4, "ngIf"], [3, "click"]], template: function EntityList_Template(rf, ctx) { if (rf & 1) {
            ɵɵtemplate(0, EntityList_div_0_Template, 4, 3, "div", 0);
        } if (rf & 2) {
            ɵɵproperty("ngForOf", ctx.data.data);
        } }, directives: [NgForOf, NgIf], pipes: [RenderPipe], encapsulation: 2, changeDetection: 0 });
    return EntityList;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(EntityList, [{
        type: Component,
        args: [{
                selector: 'novo-entity-list',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: "\n        <div *ngFor=\"let entity of data.data\" class=\"entity\">\n            <a *ngIf=\"entity.isLinkable\" (click)=\"openLink(entity)\">\n                <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render : metaDisplay }}\n            </a>\n            <span *ngIf=\"!entity.isLinkable && entity.personSubtype\">\n                <i class=\"bhi-circle {{ entity.class }}\"></i>{{ entity | render : metaDisplay }}\n            </span>\n            <span *ngIf=\"!entity.isLinkable && !entity.personSubtype\">\n                {{ entity | render : metaDisplay }}\n            </span>\n        </div>\n    ",
            }]
    }], function () { return []; }, { data: [{
            type: Input
        }], meta: [{
            type: Input
        }] }); })();

// NG2
function NovoValueElement_div_1_i_4_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "i");
} if (rf & 2) {
    var ctx_r3 = ɵɵnextContext(2);
    ɵɵclassMapInterpolate1("bhi-circle ", ctx_r3.meta.entityIconClass, "");
} }
function NovoValueElement_div_1_a_5_Template(rf, ctx) { if (rf & 1) {
    var _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 10);
    ɵɵlistener("click", function NovoValueElement_div_1_a_5_Template_a_click_0_listener() { ɵɵrestoreView(_r8); var ctx_r7 = ɵɵnextContext(2); return ctx_r7.openLink(); });
    ɵɵpipe(1, "render");
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("innerHTML", ɵɵpipeBind2(1, 1, ctx_r4.data, ctx_r4.meta), ɵɵsanitizeHtml);
} }
function NovoValueElement_div_1_a_6_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "a", 11);
    ɵɵpipe(1, "render");
} if (rf & 2) {
    var ctx_r5 = ɵɵnextContext(2);
    ɵɵproperty("href", ctx_r5.url, ɵɵsanitizeUrl)("innerHTML", ɵɵpipeBind2(1, 2, ctx_r5.data, ctx_r5.meta), ɵɵsanitizeHtml);
} }
function NovoValueElement_div_1_novo_entity_list_7_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "novo-entity-list", 12);
} if (rf & 2) {
    var ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("data", ctx_r6.data)("meta", ctx_r6.meta);
} }
function NovoValueElement_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵelementStart(1, "label");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "span", 5);
    ɵɵtemplate(4, NovoValueElement_div_1_i_4_Template, 1, 3, "i", 6);
    ɵɵtemplate(5, NovoValueElement_div_1_a_5_Template, 2, 4, "a", 7);
    ɵɵtemplate(6, NovoValueElement_div_1_a_6_Template, 2, 5, "a", 8);
    ɵɵelementEnd();
    ɵɵtemplate(7, NovoValueElement_div_1_novo_entity_list_7_Template, 1, 2, "novo-entity-list", 9);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.meta.label);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.meta.showEntityIcon);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", ctx_r0.NOVO_VALUE_TYPE.INTERNAL_LINK);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", ctx_r0.NOVO_VALUE_TYPE.LINK);
    ɵɵadvance(1);
    ɵɵproperty("ngSwitchCase", ctx_r0.NOVO_VALUE_TYPE.ENTITY_LIST);
} }
function NovoValueElement_div_2_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelement(0, "div", 15);
    ɵɵpipe(1, "render");
} if (rf & 2) {
    var ctx_r9 = ɵɵnextContext(2);
    ɵɵproperty("innerHTML", ɵɵpipeBind2(1, 1, ctx_r9.data, ctx_r9.meta), ɵɵsanitizeHtml);
} }
function NovoValueElement_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵelementStart(1, "label");
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, NovoValueElement_div_2_div_3_Template, 2, 4, "div", 14);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r1 = ɵɵnextContext();
    ɵɵproperty("ngClass", ctx_r1.customClass);
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r1.meta.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.isDefault);
} }
function NovoValueElement_div_3_i_1_Template(rf, ctx) { if (rf & 1) {
    var _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "i", 18);
    ɵɵlistener("click", function NovoValueElement_div_3_i_1_Template_i_click_0_listener() { ɵɵrestoreView(_r13); var icon_r11 = ctx.$implicit; var ctx_r12 = ɵɵnextContext(2); return ctx_r12.onValueClick(icon_r11); });
    ɵɵelementEnd();
} if (rf & 2) {
    var icon_r11 = ctx.$implicit;
    var ctx_r10 = ɵɵnextContext(2);
    ɵɵclassMap(ctx_r10.iconClass(icon_r11));
} }
function NovoValueElement_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵɵelementStart(0, "div", 16);
    ɵɵtemplate(1, NovoValueElement_div_3_i_1_Template, 1, 2, "i", 17);
    ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r2.meta.icons);
} }
var NOVO_VALUE_TYPE;
(function (NOVO_VALUE_TYPE) {
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["DEFAULT"] = 0] = "DEFAULT";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["ENTITY_LIST"] = 1] = "ENTITY_LIST";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["LINK"] = 2] = "LINK";
    NOVO_VALUE_TYPE[NOVO_VALUE_TYPE["INTERNAL_LINK"] = 3] = "INTERNAL_LINK";
})(NOVO_VALUE_TYPE || (NOVO_VALUE_TYPE = {}));
var NOVO_VALUE_THEME;
(function (NOVO_VALUE_THEME) {
    NOVO_VALUE_THEME[NOVO_VALUE_THEME["DEFAULT"] = 0] = "DEFAULT";
    NOVO_VALUE_THEME[NOVO_VALUE_THEME["MOBILE"] = 1] = "MOBILE";
})(NOVO_VALUE_THEME || (NOVO_VALUE_THEME = {}));
var NovoValueElement = /** @class */ (function () {
    function NovoValueElement() {
        this.meta = { type: 'SCALAR', label: '' }; // TODO use interface
        this.theme = NOVO_VALUE_THEME.DEFAULT;
        this.NOVO_VALUE_TYPE = NOVO_VALUE_TYPE;
        this.NOVO_VALUE_THEME = NOVO_VALUE_THEME;
        this.customClass = '';
    }
    Object.defineProperty(NovoValueElement.prototype, "label", {
        get: function () {
            return this.meta.label;
        },
        set: function (lbl) {
            this.meta.label = lbl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "type", {
        get: function () {
            return this.meta.type;
        },
        set: function (typ) {
            this.meta.type = typ;
        },
        enumerable: true,
        configurable: true
    });
    NovoValueElement.prototype.ngOnInit = function () {
        if (Helpers.isEmpty(this.meta)) {
            this.meta = {
                label: '',
            };
        }
    };
    Object.defineProperty(NovoValueElement.prototype, "isMobile", {
        get: function () {
            return this.theme === NOVO_VALUE_THEME.MOBILE;
        },
        enumerable: true,
        configurable: true
    });
    NovoValueElement.prototype.iconClass = function (icon) {
        var iconClass = '';
        if (icon && icon.iconCls) {
            iconClass = "bhi-" + icon.iconCls + " actions";
            if (icon.onIconClick) {
                iconClass = iconClass + " clickable";
            }
            return iconClass;
        }
        return iconClass;
    };
    Object.defineProperty(NovoValueElement.prototype, "isDefault", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "showLabel", {
        get: function () {
            return (this._type === NOVO_VALUE_TYPE.INTERNAL_LINK || this._type === NOVO_VALUE_TYPE.LINK || this._type === NOVO_VALUE_TYPE.ENTITY_LIST);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NovoValueElement.prototype, "showIcon", {
        get: function () {
            return this.meta && this.meta.icons && this.meta.icons.length && !Helpers.isEmpty(this.data);
        },
        enumerable: true,
        configurable: true
    });
    NovoValueElement.prototype.onValueClick = function (icon) {
        if (icon.onIconClick && typeof icon.onIconClick === 'function') {
            icon.onIconClick(this.data, this.meta);
        }
    };
    NovoValueElement.prototype.openLink = function () {
        if (this.meta && this.meta.openLink && typeof this.meta.openLink === 'function') {
            this.meta.openLink(this.data, this.meta);
        }
    };
    NovoValueElement.prototype.ngOnChanges = function (changes) {
        if (this.meta && this.isLinkField(this.meta, this.data)) {
            this._type = NOVO_VALUE_TYPE.LINK;
            // Make sure the value has a protocol, otherwise the URL will be relative
            var hasProtocol = new RegExp('^(http|https)://', 'i');
            if (!hasProtocol.test(this.data)) {
                this.url = "http://" + this.data;
            }
            else {
                this.url = this.data;
            }
        }
        else if (this.isEntityList(this.meta.type)) {
            this._type = NOVO_VALUE_TYPE.ENTITY_LIST;
        }
        else if (this.isHTMLField(this.meta)) {
            this.customClass = this.meta.customClass ? this.meta.customClass : '';
            if (this.meta.stripHTML && this.data && this.data.replace) {
                this.data = this.data.replace(/<(?!style|\/style).+?>/gi, '').trim();
            }
        }
        else if (this.meta && this.meta.associatedEntity) {
            switch (this.meta.associatedEntity.entity) {
                case 'ClientCorporation':
                case 'ClientContact':
                case 'Candidate':
                case 'Opportunity':
                case 'JobOrder':
                case 'Placement':
                case 'Lead':
                    this._type = NOVO_VALUE_TYPE.INTERNAL_LINK;
                    break;
                default:
                    break;
            }
        }
    };
    NovoValueElement.prototype.isLinkField = function (field, data) {
        var linkFields = ['companyURL', 'clientCorporationCompanyURL'];
        var regex = new RegExp('^(https?://(?:www.|(?!www))[^s.]+.[^s]{2,}|www.[^s]+.[^s]{2,})$', 'gi');
        var isURL = Helpers.isString(data) && regex.exec(data.trim());
        return linkFields.indexOf(field.name) > -1 || !!isURL || field.type === NOVO_VALUE_TYPE.LINK;
    };
    NovoValueElement.prototype.isEntityList = function (type) {
        return type === 'TO_MANY';
    };
    NovoValueElement.prototype.isHTMLField = function (meta) {
        return meta.dataSpecialization === 'HTML' || meta.inputType === 'TEXTAREA';
    };
    NovoValueElement.ɵfac = function NovoValueElement_Factory(t) { return new (t || NovoValueElement)(); };
    NovoValueElement.ɵcmp = ɵɵdefineComponent({ type: NovoValueElement, selectors: [["novo-value"]], hostVars: 2, hostBindings: function NovoValueElement_HostBindings(rf, ctx) { if (rf & 2) {
            ɵɵclassProp("mobile", ctx.isMobile);
        } }, inputs: { data: "data", meta: "meta", theme: "theme", label: "label", type: "type" }, features: [ɵɵNgOnChangesFeature], decls: 4, vars: 3, consts: [[3, "ngSwitch"], ["class", "value-outer", 4, "ngIf"], ["class", "value-outer", 3, "ngClass", 4, "ngSwitchDefault"], ["class", "actions", 4, "ngIf"], [1, "value-outer"], [1, "value"], [3, "class", 4, "ngIf"], [3, "innerHTML", "click", 4, "ngSwitchCase"], ["class", "value", "target", "_blank", 3, "href", "innerHTML", 4, "ngSwitchCase"], [3, "data", "meta", 4, "ngSwitchCase"], [3, "innerHTML", "click"], ["target", "_blank", 1, "value", 3, "href", "innerHTML"], [3, "data", "meta"], [1, "value-outer", 3, "ngClass"], ["class", "value", 3, "innerHTML", 4, "ngIf"], [1, "value", 3, "innerHTML"], [1, "actions"], [3, "class", "click", 4, "ngFor", "ngForOf"], [3, "click"]], template: function NovoValueElement_Template(rf, ctx) { if (rf & 1) {
            ɵɵelementContainerStart(0, 0);
            ɵɵtemplate(1, NovoValueElement_div_1_Template, 8, 5, "div", 1);
            ɵɵtemplate(2, NovoValueElement_div_2_Template, 4, 3, "div", 2);
            ɵɵtemplate(3, NovoValueElement_div_3_Template, 2, 1, "div", 3);
            ɵɵelementContainerEnd();
        } if (rf & 2) {
            ɵɵproperty("ngSwitch", ctx._type);
            ɵɵadvance(1);
            ɵɵproperty("ngIf", ctx.showLabel);
            ɵɵadvance(2);
            ɵɵproperty("ngIf", ctx.showIcon);
        } }, directives: [NgSwitch, NgIf, NgSwitchDefault, NgSwitchCase, EntityList, NgClass, NgForOf], pipes: [RenderPipe], encapsulation: 2 });
    return NovoValueElement;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoValueElement, [{
        type: Component,
        args: [{
                selector: 'novo-value',
                template: "\n      <ng-container [ngSwitch]=\"_type\">\n          <div class=\"value-outer\" *ngIf=\"showLabel\">\n              <label>{{ meta.label }}</label>\n              <span class=\"value\">\n                <i *ngIf=\"meta.showEntityIcon\" class=\"bhi-circle {{meta.entityIconClass}}\"></i>\n                <a *ngSwitchCase=\"NOVO_VALUE_TYPE.INTERNAL_LINK\" (click)=\"openLink()\" [innerHTML]=\"data | render : meta\"></a>\n                <a *ngSwitchCase=\"NOVO_VALUE_TYPE.LINK\" class=\"value\" [href]=\"url\" target=\"_blank\" [innerHTML]=\"data | render : meta\"></a>\n              </span>\n              <novo-entity-list *ngSwitchCase=\"NOVO_VALUE_TYPE.ENTITY_LIST\" [data]='data' [meta]=\"meta\"></novo-entity-list>\n          </div>\n          <div *ngSwitchDefault class=\"value-outer\" [ngClass]=\"customClass\">\n              <label>{{ meta.label }}</label>\n              <div *ngIf=\"isDefault\" class=\"value\" [innerHTML]=\"data | render : meta\"></div>\n          </div>\n          <div class=\"actions\" *ngIf=\"showIcon\">\n              <i *ngFor=\"let icon of meta.icons\" [class]=\"iconClass(icon)\" (click)=\"onValueClick(icon)\"></i>\n          </div>\n      </ng-container>\n    ",
            }]
    }], null, { data: [{
            type: Input
        }], meta: [{
            type: Input
        }], theme: [{
            type: Input
        }], label: [{
            type: Input
        }], type: [{
            type: Input
        }], isMobile: [{
            type: HostBinding,
            args: ['class.mobile']
        }] }); })();

// NG2
var NovoValueModule = /** @class */ (function () {
    function NovoValueModule() {
    }
    NovoValueModule.ɵmod = ɵɵdefineNgModule({ type: NovoValueModule });
    NovoValueModule.ɵinj = ɵɵdefineInjector({ factory: function NovoValueModule_Factory(t) { return new (t || NovoValueModule)(); }, imports: [[CommonModule]] });
    return NovoValueModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoValueModule, { declarations: [NovoValueElement, RenderPipe, EntityList], imports: [CommonModule], exports: [NovoValueElement, RenderPipe, EntityList] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoValueModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [NovoValueElement, RenderPipe, EntityList],
                exports: [NovoValueElement, RenderPipe, EntityList],
            }]
    }], null, null); })();

// NG2
var NovoElementsModule = /** @class */ (function () {
    function NovoElementsModule() {
    }
    NovoElementsModule.ɵmod = ɵɵdefineNgModule({ type: NovoElementsModule });
    NovoElementsModule.ɵinj = ɵɵdefineInjector({ factory: function NovoElementsModule_Factory(t) { return new (t || NovoElementsModule)(); }, providers: [
            { provide: ComponentUtils, useClass: ComponentUtils },
            { provide: DateFormatService, useClass: DateFormatService },
            { provide: NovoLabelService, useClass: NovoLabelService },
            { provide: NovoDragulaService, useClass: NovoDragulaService },
            { provide: GooglePlacesService, useClass: GooglePlacesService },
            { provide: GlobalRef, useClass: BrowserGlobalRef },
            { provide: LocalStorageService, useClass: LocalStorageService },
            { provide: OptionsService, useClass: OptionsService },
            { provide: FormUtils, useClass: FormUtils },
        ], imports: [[ReactiveFormsModule],
            NovoPipesModule,
            NovoButtonModule,
            NovoLoadingModule,
            NovoCardModule,
            NovoCalendarModule,
            NovoToastModule,
            NovoTooltipModule,
            NovoHeaderModule,
            NovoTabModule,
            NovoTilesModule,
            NovoModalModule,
            NovoQuickNoteModule,
            NovoRadioModule,
            NovoDropdownModule,
            NovoSelectModule,
            NovoListModule,
            NovoSwitchModule,
            NovoDragulaModule,
            NovoSliderModule,
            NovoPickerModule,
            NovoChipsModule,
            NovoDatePickerModule,
            NovoTimePickerModule,
            NovoDateTimePickerModule,
            NovoNovoCKEditorModule,
            NovoTipWellModule,
            NovoSimpleTableModule,
            NovoTableModule,
            NovoTableExtrasModule,
            NovoFormModule,
            NovoFormExtrasModule,
            NovoCategoryDropdownModule,
            NovoMultiPickerModule,
            NovoPopOverModule,
            NovoDataTableModule,
            NovoSearchBoxModule,
            NovoOverlayModule,
            GooglePlacesModule,
            NovoValueModule,
            NovoAceEditorModule,
            NovoIconModule,
            NovoExpansionModule,
            UnlessModule,
            NovoCommonModule,
            NovoStepperModule,
            ScrollingModule,
            NovoTabbedGroupPickerModule] });
    return NovoElementsModule;
}());
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵɵsetNgModuleScope(NovoElementsModule, { imports: [ReactiveFormsModule], exports: [NovoPipesModule,
        NovoButtonModule,
        NovoLoadingModule,
        NovoCardModule,
        NovoCalendarModule,
        NovoToastModule,
        NovoTooltipModule,
        NovoHeaderModule,
        NovoTabModule,
        NovoTilesModule,
        NovoModalModule,
        NovoQuickNoteModule,
        NovoRadioModule,
        NovoDropdownModule,
        NovoSelectModule,
        NovoListModule,
        NovoSwitchModule,
        NovoDragulaModule,
        NovoSliderModule,
        NovoPickerModule,
        NovoChipsModule,
        NovoDatePickerModule,
        NovoTimePickerModule,
        NovoDateTimePickerModule,
        NovoNovoCKEditorModule,
        NovoTipWellModule,
        NovoSimpleTableModule,
        NovoTableModule,
        NovoTableExtrasModule,
        NovoFormModule,
        NovoFormExtrasModule,
        NovoCategoryDropdownModule,
        NovoMultiPickerModule,
        NovoPopOverModule,
        NovoDataTableModule,
        NovoSearchBoxModule,
        NovoOverlayModule,
        GooglePlacesModule,
        NovoValueModule,
        NovoAceEditorModule,
        NovoIconModule,
        NovoExpansionModule,
        UnlessModule,
        NovoCommonModule,
        NovoStepperModule,
        ScrollingModule,
        NovoTabbedGroupPickerModule] }); })();
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoElementsModule, [{
        type: NgModule,
        args: [{
                imports: [ReactiveFormsModule],
                exports: [
                    NovoPipesModule,
                    NovoButtonModule,
                    NovoLoadingModule,
                    NovoCardModule,
                    NovoCalendarModule,
                    NovoToastModule,
                    NovoTooltipModule,
                    NovoHeaderModule,
                    NovoTabModule,
                    NovoTilesModule,
                    NovoModalModule,
                    NovoQuickNoteModule,
                    NovoRadioModule,
                    NovoDropdownModule,
                    NovoSelectModule,
                    NovoListModule,
                    NovoSwitchModule,
                    NovoDragulaModule,
                    NovoSliderModule,
                    NovoPickerModule,
                    NovoChipsModule,
                    NovoDatePickerModule,
                    NovoTimePickerModule,
                    NovoDateTimePickerModule,
                    NovoNovoCKEditorModule,
                    NovoTipWellModule,
                    NovoSimpleTableModule,
                    NovoTableModule,
                    NovoTableExtrasModule,
                    NovoFormModule,
                    NovoFormExtrasModule,
                    NovoCategoryDropdownModule,
                    NovoMultiPickerModule,
                    NovoPopOverModule,
                    NovoDataTableModule,
                    NovoSearchBoxModule,
                    NovoOverlayModule,
                    GooglePlacesModule,
                    NovoValueModule,
                    NovoAceEditorModule,
                    NovoIconModule,
                    NovoExpansionModule,
                    UnlessModule,
                    NovoCommonModule,
                    NovoStepperModule,
                    ScrollingModule,
                    NovoTabbedGroupPickerModule,
                ],
                providers: [
                    { provide: ComponentUtils, useClass: ComponentUtils },
                    { provide: DateFormatService, useClass: DateFormatService },
                    { provide: NovoLabelService, useClass: NovoLabelService },
                    { provide: NovoDragulaService, useClass: NovoDragulaService },
                    { provide: GooglePlacesService, useClass: GooglePlacesService },
                    { provide: GlobalRef, useClass: BrowserGlobalRef },
                    { provide: LocalStorageService, useClass: LocalStorageService },
                    { provide: OptionsService, useClass: OptionsService },
                    { provide: FormUtils, useClass: FormUtils },
                ],
            }]
    }], null, null); })();

var NOVO_ELEMENTS_PROVIDERS = [
    { provide: NovoDragulaService, useClass: NovoDragulaService },
    { provide: NovoModalRef, useClass: NovoModalRef },
    { provide: NovoModalService, useClass: NovoModalService },
    { provide: GooglePlacesService, useClass: GooglePlacesService },
    { provide: NovoToastService, useClass: NovoToastService },
    { provide: ComponentUtils, useClass: ComponentUtils },
    { provide: GlobalRef, useClass: BrowserGlobalRef },
    { provide: LocalStorageService, useClass: LocalStorageService },
    { provide: OptionsService, useClass: OptionsService },
    FieldInteractionApi,
    DateFormatService,
    Security,
    NovoTemplateService,
];
var NovoElementProviders = /** @class */ (function () {
    function NovoElementProviders() {
    }
    NovoElementProviders.forRoot = function () {
        return {
            ngModule: NovoElementProviders,
            providers: __spread(NOVO_ELEMENTS_PROVIDERS),
        };
    };
    NovoElementProviders.forChild = function () {
        return {
            ngModule: NovoElementProviders,
        };
    };
    NovoElementProviders.ɵmod = ɵɵdefineNgModule({ type: NovoElementProviders });
    NovoElementProviders.ɵinj = ɵɵdefineInjector({ factory: function NovoElementProviders_Factory(t) { return new (t || NovoElementProviders)(); }, imports: [[]] });
    return NovoElementProviders;
}());
/*@__PURE__*/ (function () { ɵsetClassMetadata(NovoElementProviders, [{
        type: NgModule,
        args: [{
                imports: [],
            }]
    }], null, null); })();

var AppBridgeHandler;
(function (AppBridgeHandler) {
    AppBridgeHandler[AppBridgeHandler["HTTP"] = 0] = "HTTP";
    AppBridgeHandler[AppBridgeHandler["OPEN"] = 1] = "OPEN";
    AppBridgeHandler[AppBridgeHandler["OPEN_LIST"] = 2] = "OPEN_LIST";
    AppBridgeHandler[AppBridgeHandler["CLOSE"] = 3] = "CLOSE";
    AppBridgeHandler[AppBridgeHandler["REFRESH"] = 4] = "REFRESH";
    AppBridgeHandler[AppBridgeHandler["PIN"] = 5] = "PIN";
    AppBridgeHandler[AppBridgeHandler["REGISTER"] = 6] = "REGISTER";
    AppBridgeHandler[AppBridgeHandler["UPDATE"] = 7] = "UPDATE";
    AppBridgeHandler[AppBridgeHandler["REQUEST_DATA"] = 8] = "REQUEST_DATA";
    AppBridgeHandler[AppBridgeHandler["CALLBACK"] = 9] = "CALLBACK";
})(AppBridgeHandler || (AppBridgeHandler = {}));
var HTTP_VERBS = {
    GET: 'get',
    POST: 'post',
    PUT: 'put',
    DELETE: 'delete',
};
var MESSAGE_TYPES = {
    REGISTER: 'register',
    OPEN: 'open',
    OPEN_LIST: 'openList',
    CLOSE: 'close',
    REFRESH: 'refresh',
    PIN: 'pin',
    UPDATE: 'update',
    HTTP_GET: 'httpGET',
    HTTP_POST: 'httpPOST',
    HTTP_PUT: 'httpPUT',
    HTTP_DELETE: 'httpDELETE',
    CUSTOM_EVENT: 'customEvent',
    REQUEST_DATA: 'requestData',
    CALLBACK: 'callback',
};
var AppBridgeService = /** @class */ (function () {
    function AppBridgeService() {
    }
    AppBridgeService.prototype.create = function (name) {
        return new AppBridge(name);
    };
    return AppBridgeService;
}());
var DevAppBridgeService = /** @class */ (function () {
    function DevAppBridgeService(http) {
        this.http = http;
    }
    DevAppBridgeService.prototype.create = function (name) {
        return new DevAppBridge(name, this.http);
    };
    return DevAppBridgeService;
}());
var AppBridge = /** @class */ (function () {
    // Type?
    function AppBridge(traceName) {
        if (traceName === void 0) { traceName = 'AppBridge'; }
        this.id = "" + Date.now();
        this._registeredFrames = [];
        this._handlers = {};
        this._tracing = false;
        this._eventListeners = {};
        this.traceName = traceName;
        if (postRobot) {
            postRobot.CONFIG.LOG_LEVEL = 'error';
            try {
                this._setupHandlers();
            }
            catch (error) {
                // No op
            }
        }
    }
    Object.defineProperty(AppBridge.prototype, "tracing", {
        set: function (tracing) {
            this._tracing = tracing;
        },
        enumerable: true,
        configurable: true
    });
    AppBridge.prototype.handle = function (type, handler) {
        this._handlers[type] = handler;
    };
    AppBridge.prototype._trace = function (eventType, event) {
        if (this._tracing) {
            console.log("[" + (this.traceName || this.id) + "] \"" + eventType + "\"", event); // tslint:disable-line
        }
    };
    AppBridge.prototype._setupHandlers = function () {
        var _this = this;
        // Register
        postRobot.on(MESSAGE_TYPES.REGISTER, function (event) {
            _this._trace(MESSAGE_TYPES.REGISTER, event);
            _this._registeredFrames.push(event);
            return _this.register(event.data).then(function (windowName) {
                return { windowName: windowName };
            });
        });
        // Update
        postRobot.on(MESSAGE_TYPES.UPDATE, function (event) {
            _this._trace(MESSAGE_TYPES.UPDATE, event);
            return _this.update(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Open
        postRobot.on(MESSAGE_TYPES.OPEN, function (event) {
            _this._trace(MESSAGE_TYPES.OPEN, event);
            return _this.open(event.data).then(function (success) {
                return { success: success };
            });
        });
        postRobot.on(MESSAGE_TYPES.OPEN_LIST, function (event) {
            _this._trace(MESSAGE_TYPES.OPEN_LIST, event);
            return _this.openList(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Close
        postRobot.on(MESSAGE_TYPES.CLOSE, function (event) {
            _this._trace(MESSAGE_TYPES.CLOSE, event);
            var index = _this._registeredFrames.findIndex(function (frame) { return frame.data.id === event.data.id; });
            if (index !== -1) {
                _this._registeredFrames.splice(index, 1);
            }
            return _this.close(event.data).then(function (success) {
                return { success: success };
            });
        });
        // Refresh
        postRobot.on(MESSAGE_TYPES.REFRESH, function (event) {
            _this._trace(MESSAGE_TYPES.REFRESH, event);
            return _this.refresh(event.data).then(function (success) {
                return { success: success };
            });
        });
        // PIN
        postRobot.on(MESSAGE_TYPES.PIN, function (event) {
            _this._trace(MESSAGE_TYPES.PIN, event);
            return _this.pin(event.data).then(function (success) {
                return { success: success };
            });
        });
        // REQUEST_DATA
        postRobot.on(MESSAGE_TYPES.REQUEST_DATA, function (event) {
            _this._trace(MESSAGE_TYPES.REQUEST_DATA, event);
            return _this.requestData(event.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // CALLBACKS
        postRobot.on(MESSAGE_TYPES.CALLBACK, function (event) {
            _this._trace(MESSAGE_TYPES.CALLBACK, event);
            return _this.callback(event.data).then(function (success) {
                return { success: success };
            });
        });
        // HTTP-GET
        postRobot.on(MESSAGE_TYPES.HTTP_GET, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_GET, event);
            return _this.httpGET(event.data.relativeURL).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-POST
        postRobot.on(MESSAGE_TYPES.HTTP_POST, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_POST, event);
            return _this.httpPOST(event.data.relativeURL, event.data.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-PUT
        postRobot.on(MESSAGE_TYPES.HTTP_PUT, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_PUT, event);
            return _this.httpPUT(event.data.relativeURL, event.data.data).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // HTTP-DELETE
        postRobot.on(MESSAGE_TYPES.HTTP_DELETE, function (event) {
            _this._trace(MESSAGE_TYPES.HTTP_DELETE, event);
            return _this.httpDELETE(event.data.relativeURL).then(function (result) {
                return { data: result.data, error: result.error };
            });
        });
        // Custom Events
        postRobot.on(MESSAGE_TYPES.CUSTOM_EVENT, function (event) {
            _this._trace(MESSAGE_TYPES.CUSTOM_EVENT, event);
            if (_this._eventListeners[event.data.event]) {
                _this._eventListeners[event.data.event].forEach(function (listener) {
                    listener(event.data.data);
                });
            }
            if (_this._registeredFrames.length > 0) {
                _this._registeredFrames.forEach(function (frame) {
                    postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, event.data);
                });
            }
        });
    };
    /**
     * Fires or responds to an open event
     * @param packet any - packet of data to send with the open event
     */
    AppBridge.prototype.open = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.OPEN]) {
                _this._handlers[AppBridgeHandler.OPEN](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.OPEN + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an openList event
     * @param packet any - packet of data to send with the open event
     */
    AppBridge.prototype.openList = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.OPEN_LIST]) {
                _this._handlers[AppBridgeHandler.OPEN_LIST](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                var openListPacket = {};
                Object.assign(openListPacket, { type: 'List', entityType: packet.type, keywords: packet.keywords, criteria: packet.criteria });
                postRobot
                    .sendToParent(MESSAGE_TYPES.OPEN_LIST, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.OPEN_LIST + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     * @param packet any - packet of data to send with the close event
     */
    AppBridge.prototype.update = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.UPDATE]) {
                _this._handlers[AppBridgeHandler.UPDATE](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.UPDATE, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.UPDATE + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     */
    AppBridge.prototype.close = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.CLOSE]) {
                _this._handlers[AppBridgeHandler.CLOSE](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - close(packet) is deprecated! Please just use close()!'); // tslint:disable-line
                }
                var realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.CLOSE, realPacket)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.CLOSE + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an close event
     */
    AppBridge.prototype.refresh = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REFRESH]) {
                _this._handlers[AppBridgeHandler.REFRESH](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - refresh(packet) is deprecated! Please just use refresh()!'); // tslint:disable-line
                }
                var realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.REFRESH, realPacket)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.REFRESH + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to a pin event
     */
    AppBridge.prototype.pin = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.PIN]) {
                _this._handlers[AppBridgeHandler.PIN](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                if (packet) {
                    console.info('[AppBridge] - pin(packet) is deprecated! Please just use pin()!'); // tslint:disable-line
                }
                var realPacket = { id: _this.id, windowName: _this.windowName };
                postRobot
                    .sendToParent(MESSAGE_TYPES.PIN, realPacket)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.PIN + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to a requestData event
     * @param packet any - packet of data to send with the requestData event
     */
    AppBridge.prototype.requestData = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REQUEST_DATA]) {
                _this._handlers[AppBridgeHandler.REQUEST_DATA](packet, function (data) {
                    if (data) {
                        resolve({ data: data });
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REQUEST_DATA, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.REQUEST_DATA + " (callback)", event);
                    if (event.data) {
                        resolve({ data: event.data.data });
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires a generic callback command
     * @param packet string - key: string, generic: boolean
     */
    AppBridge.prototype.callback = function (packet) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.CALLBACK]) {
                _this._handlers[AppBridgeHandler.CALLBACK](packet, function (success) {
                    if (success) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id, windowName: _this.windowName });
                postRobot
                    .sendToParent(MESSAGE_TYPES.CALLBACK, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.CALLBACK + " (callback)", event);
                    if (event.data) {
                        resolve(true);
                    }
                    else {
                        reject(false);
                    }
                })
                    .catch(function (err) {
                    reject(false);
                });
            }
        });
    };
    /**
     * Fires or responds to an register event
     * @param packet any - packet of data to send with the event
     */
    AppBridge.prototype.register = function (packet) {
        var _this = this;
        if (packet === void 0) { packet = {}; }
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.REGISTER]) {
                _this._handlers[AppBridgeHandler.REGISTER](packet, function (windowName) {
                    if (windowName) {
                        resolve(windowName);
                    }
                    else {
                        resolve(null);
                    }
                });
            }
            else {
                Object.assign(packet, { id: _this.id });
                postRobot
                    .sendToParent(MESSAGE_TYPES.REGISTER, packet)
                    .then(function (event) {
                    _this._trace(MESSAGE_TYPES.REGISTER + " (callback)", event);
                    if (event.data) {
                        _this.windowName = event.data.windowName;
                        resolve(event.data.windowName);
                    }
                    else {
                        resolve(null);
                    }
                })
                    .catch(function (err) {
                    _this._trace(MESSAGE_TYPES.REGISTER + " - FAILED - (no parent)", err);
                    reject(err);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    AppBridge.prototype.httpGET = function (relativeURL) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.GET, relativeURL: relativeURL }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_GET, { relativeURL: relativeURL })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    AppBridge.prototype.httpPOST = function (relativeURL, postData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.POST, relativeURL: relativeURL, data: postData }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_POST, { relativeURL: relativeURL, data: postData })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    AppBridge.prototype.httpPUT = function (relativeURL, putData) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.PUT, relativeURL: relativeURL, data: putData }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_PUT, { relativeURL: relativeURL, data: putData })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    AppBridge.prototype.httpDELETE = function (relativeURL) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this._handlers[AppBridgeHandler.HTTP]) {
                _this._handlers[AppBridgeHandler.HTTP]({ verb: HTTP_VERBS.DELETE, relativeURL: relativeURL }, function (data, error) {
                    resolve({ data: data, error: error });
                });
            }
            else {
                postRobot
                    .sendToParent(MESSAGE_TYPES.HTTP_DELETE, { relativeURL: relativeURL })
                    .then(function (event) {
                    resolve({ data: event.data.data, error: event.data.error });
                })
                    .catch(function (err) {
                    reject(null);
                });
            }
        });
    };
    /**
     * Fires a custom event to anywhere in the application
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    AppBridge.prototype.fireEvent = function (event, data) {
        return new Promise(function (resolve, reject) {
            postRobot
                .sendToParent(MESSAGE_TYPES.CUSTOM_EVENT, { event: event, data: data })
                .then(function (e) {
                resolve(e);
            })
                .catch(function (err) {
                reject(null);
            });
        });
    };
    /**
     * Fires a custom event to all registered frames
     * @param event string - event name to fire
     * @param data any - data to be sent along with the event
     */
    AppBridge.prototype.fireEventToChildren = function (event, data) {
        if (this._registeredFrames.length > 0) {
            this._registeredFrames.forEach(function (frame) {
                postRobot.send(frame.source, MESSAGE_TYPES.CUSTOM_EVENT, {
                    eventType: event,
                    data: data,
                });
            });
        }
    };
    /**
     * Adds an event listener to a custom event
     * @param event string - event name to listen to
     * @param callback function - callback to be fired when an event is caught
     */
    AppBridge.prototype.addEventListener = function (event, callback) {
        if (!this._eventListeners[event]) {
            this._eventListeners[event] = [];
        }
        this._eventListeners[event].push(callback);
    };
    return AppBridge;
}());
var DevAppBridge = /** @class */ (function (_super) {
    __extends(DevAppBridge, _super);
    function DevAppBridge(traceName, http) {
        if (traceName === void 0) { traceName = 'DevAppBridge'; }
        var _this = _super.call(this, traceName) || this;
        _this.http = http;
        var cookie = _this.getCookie('UlEncodedIdentity');
        if (cookie && cookie.length) {
            var identity = JSON.parse(decodeURIComponent(cookie));
            var endpoints = identity.sessions.reduce(function (obj, session) {
                obj[session.name] = session.value.endpoint;
                return obj;
            }, {});
            _this.baseURL = endpoints.rest;
        }
        return _this;
    }
    DevAppBridge.prototype._setupHandlers = function () { };
    /**
     * Fires or responds to an HTTP_GET event
     * @param packet any - packet of data to send with the event
     */
    DevAppBridge.prototype.httpGET = function (relativeURL) {
        return this.http.get(this.baseURL + "/" + relativeURL, { withCredentials: true }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_POST event
     * @param packet any - packet of data to send with the event
     */
    DevAppBridge.prototype.httpPOST = function (relativeURL, postData) {
        return this.http.post(this.baseURL + "/" + relativeURL, postData, { withCredentials: true }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_PUT event
     * @param packet any - packet of data to send with the event
     */
    DevAppBridge.prototype.httpPUT = function (relativeURL, putData) {
        return this.http.put(this.baseURL + "/" + relativeURL, putData, { withCredentials: true }).toPromise();
    };
    /**
     * Fires or responds to an HTTP_DELETE event
     * @param packet any - packet of data to send with the event
     */
    DevAppBridge.prototype.httpDELETE = function (relativeURL) {
        return this.http.delete(this.baseURL + "/" + relativeURL, { withCredentials: true }).toPromise();
    };
    DevAppBridge.prototype.getCookie = function (cname) {
        if (document) {
            var name_1 = cname + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) === ' ') {
                    c = c.substring(1);
                }
                if (c.indexOf(name_1) === 0) {
                    return c.substring(name_1.length, c.length);
                }
            }
        }
        return false;
    };
    return DevAppBridge;
}(AppBridge));

/**
 * Generated bundle index. Do not edit.
 */

export { AceEditorControl, ActivityTableDataSource, ActivityTableRenderers, AddressControl, AppBridge, AppBridgeHandler, AppBridgeService, ArrayCollection, BaseControl, BasePickerResults, BaseRenderer, BrowserGlobalRef, COUNTRIES, CalendarEventResponse, CardActionsElement, CardElement, CheckListControl, CheckboxControl, ChecklistPickerResults, CollectionEvent, ComponentUtils, ControlFactory, CustomControl, DataTableBigDecimalRendererPipe, DataTableInterpolatePipe, DateCell, DateControl, DateTableCurrencyRendererPipe, DateTableDateRendererPipe, DateTableDateTimeRendererPipe, DateTableNumberRendererPipe, DateTableTimeRendererPipe, DateTimeControl, DayOfMonthPipe, DecodeURIPipe, Deferred, DevAppBridge, DevAppBridgeService, DistributionListPickerResults, EditorControl, EndOfWeekDisplayPipe, EntityList, EntityPickerResult, EntityPickerResults, FieldInteractionApi, FileControl, FormUtils, FormValidators, GlobalRef, GooglePlacesModule, GooglePlacesService, GroupByPipe, GroupedControl, GroupedMultiPickerResults, Helpers, HoursPipe, KeyCodes, LocalStorageService, MonthDayPipe, MonthPipe, NOVO_VALUE_THEME, NOVO_VALUE_TYPE, NativeSelectControl, NovoAccordion, NovoAceEditor, NovoAceEditorModule, NovoActivityTable, NovoActivityTableActions, NovoActivityTableCustomFilter, NovoActivityTableCustomHeader, NovoActivityTableEmptyMessage, NovoActivityTableNoResultsMessage, NovoActivityTableState, NovoAddressElement, NovoAutoSize, NovoButtonElement, NovoButtonModule, NovoCKEditorElement, NovoCalendarAllDayEventElement, NovoCalendarDateChangeElement, NovoCalendarDayEventElement, NovoCalendarDayViewElement, NovoCalendarHourSegmentElement, NovoCalendarModule, NovoCalendarMonthDayElement, NovoCalendarMonthHeaderElement, NovoCalendarMonthViewElement, NovoCalendarWeekEventElement, NovoCalendarWeekHeaderElement, NovoCalendarWeekViewElement, NovoCardModule, NovoCategoryDropdownElement, NovoCategoryDropdownModule, NovoCheckListElement, NovoCheckboxElement, NovoChipElement, NovoChipsElement, NovoChipsModule, NovoCommonModule, NovoControlElement, NovoControlGroup, NovoControlTemplates, NovoDataTable, NovoDataTableClearButton, NovoDataTableFilterUtils, NovoDataTableModule, NovoDatePickerElement, NovoDatePickerInputElement, NovoDatePickerModule, NovoDateTimePickerElement, NovoDateTimePickerInputElement, NovoDateTimePickerModule, NovoDragulaElement, NovoDragulaModule, NovoDragulaService, NovoDropDownItemHeaderElement, NovoDropdownCell, NovoDropdownElement, NovoDropdownListElement, NovoDropdownModule, NovoDynamicFormElement, NovoElementProviders, NovoElementsModule, NovoEventTypeLegendElement, NovoExpansionModule, NovoExpansionPanel, NovoExpansionPanelActionRow, NovoExpansionPanelContent, NovoExpansionPanelDescription, NovoExpansionPanelHeader, NovoExpansionPanelTitle, NovoFieldsetHeaderElement, NovoFile, NovoFileInputElement, NovoFormControl, NovoFormElement, NovoFormExtrasModule, NovoFormGroup, NovoFormModule, NovoHeaderComponent, NovoHeaderModule, NovoHeaderSpacer, NovoHorizontalStepper, NovoIconComponent, NovoIconModule, NovoIsLoadingDirective, NovoItemAvatarElement, NovoItemContentElement, NovoItemDateElement, NovoItemElement, NovoItemEndElement, NovoItemHeaderElement, NovoItemTitleElement, NovoLabelService, NovoListElement, NovoListItemElement, NovoListModule, NovoLoadedDirective, NovoLoadingElement, NovoLoadingModule, NovoModalElement, NovoModalModule, NovoModalNotificationElement, NovoModalParams, NovoModalRef, NovoModalService, NovoMultiPickerElement, NovoMultiPickerModule, NovoNavContentElement, NovoNavElement, NovoNavHeaderElement, NovoNavOutletElement, NovoNovoCKEditorModule, NovoOverlayModule, NovoOverlayTemplateComponent, NovoPickerElement, NovoPickerModule, NovoPipesModule, NovoPopOverModule, NovoQuickNoteModule, NovoRadioElement, NovoRadioGroup, NovoRadioModule, NovoRowChipElement, NovoRowChipsElement, NovoSearchBoxElement, NovoSearchBoxModule, NovoSelectElement, NovoSelectModule, NovoSelection, NovoSimpleActionCell, NovoSimpleCell, NovoSimpleCellDef, NovoSimpleCellHeader, NovoSimpleCheckboxCell, NovoSimpleCheckboxHeaderCell, NovoSimpleColumnDef, NovoSimpleEmptyHeaderCell, NovoSimpleFilterFocus, NovoSimpleHeaderCell, NovoSimpleHeaderCellDef, NovoSimpleHeaderRow, NovoSimpleHeaderRowDef, NovoSimpleRow, NovoSimpleRowDef, NovoSimpleTableModule, NovoSimpleTablePagination, NovoSkeletonDirective, NovoSliderElement, NovoSliderModule, NovoSortFilter, NovoSpinnerElement, NovoStep, NovoStepHeader, NovoStepLabel, NovoStepStatus, NovoStepper, NovoStepperModule, NovoSwitchElement, NovoSwitchModule, NovoTabButtonElement, NovoTabElement, NovoTabLinkElement, NovoTabModule, NovoTabbedGroupPickerElement, NovoTabbedGroupPickerModule, NovoTable, NovoTableActionsElement, NovoTableElement, NovoTableExtrasModule, NovoTableFooterElement, NovoTableHeaderElement, NovoTableKeepFilterFocus, NovoTableMode, NovoTableModule, NovoTemplate, NovoTemplateService, NovoTilesElement, NovoTilesModule, NovoTimePickerElement, NovoTimePickerInputElement, NovoTimePickerModule, NovoTipWellElement, NovoTipWellModule, NovoToastElement, NovoToastModule, NovoToastService, NovoTooltipModule, NovoUtilActionComponent, NovoUtilsComponent, NovoValueElement, NovoValueModule, NovoVerticalStepper, OptionsService, OutsideClick, PagedArrayCollection, Pagination, PercentageCell, PickerControl, PickerResults, PlacesListComponent, PluralPipe, PopOverContent, PopOverDirective, QuickNoteControl, QuickNoteElement, QuickNoteResults, RadioControl, ReadOnlyControl, RemoteActivityTableService, RemoteDataTableService, RenderPipe, RowDetails, Security, SelectControl, SkillsSpecialtyPickerResults, StaticActivityTableService, StaticDataTableService, TableCell, TableFilter, TablePickerControl, TextAreaControl, TextBoxControl, ThOrderable, ThSortable, TilesControl, TimeControl, TooltipDirective, Unless, UnlessModule, WeekdayPipe, WorkersCompCodesPickerResults, YearPipe, findByCountryCode, findByCountryId, findByCountryName, getCountries, getStateObjects, getStates, notify };
//# sourceMappingURL=novo-elements.js.map
