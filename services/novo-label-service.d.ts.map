{"version":3,"file":"novo-label-service.d.ts","sources":["novo-label-service.d.ts"],"names":[],"mappingssourcesContent":["export interface BigDecimalFormatOptions extends Intl.NumberFormatOptions {\n    useAccountingFormat?: boolean;\n}\nexport declare class NovoLabelService {\n    userLocale: string;\n    filters: string;\n    clear: string;\n    sort: string;\n    distributionListOwner: string;\n    dateAdded: string;\n    emptyTableMessage: string;\n    noMatchingRecordsMessage: string;\n    erroredTableMessage: string;\n    pickerError: string;\n    pickerTextFieldEmpty: string;\n    pickerEmpty: string;\n    tabbedGroupPickerEmpty: string;\n    quickNoteError: string;\n    quickNoteEmpty: string;\n    required: string;\n    numberTooLarge: string;\n    save: string;\n    cancel: string;\n    next: string;\n    itemsPerPage: string;\n    select: string;\n    selected: string;\n    selectAllOnPage: string;\n    deselectAll: string;\n    refresh: string;\n    close: string;\n    move: string;\n    startDate: string;\n    endDate: string;\n    rate: string;\n    more: string;\n    clearAll: string;\n    clearAllNormalCase: string;\n    clearSort: string;\n    clearFilter: string;\n    today: string;\n    now: string;\n    isRequired: string;\n    notValidYear: string;\n    isTooLarge: string;\n    invalidAddress: string;\n    invalidEmail: string;\n    minLength: string;\n    past1Day: string;\n    past7Days: string;\n    past30Days: string;\n    past90Days: string;\n    past1Year: string;\n    next1Day: string;\n    next7Days: string;\n    next30Days: string;\n    next90Days: string;\n    next1Year: string;\n    customDateRange: string;\n    backToPresetFilters: string;\n    okGotIt: string;\n    address: string;\n    address1: string;\n    apt: string;\n    address2: string;\n    city: string;\n    state: string;\n    zip: string;\n    zipCode: string;\n    country: string;\n    or: string;\n    clickToBrowse: string;\n    chooseAFile: string;\n    no: string;\n    yes: string;\n    search: string;\n    noItems: string;\n    dateFormat: string;\n    dateFormatPlaceholder: string;\n    timeFormatPlaceholderAM: string;\n    timeFormatPlaceholder24Hour: string;\n    timeFormatAM: string;\n    timeFormatPM: string;\n    confirmChangesModalMessage: string;\n    promptModalMessage: string;\n    asyncFailure: string;\n    previous: string;\n    actions: string;\n    all: string;\n    groupedMultiPickerEmpty: string;\n    groupedMultiPickerSelectCategory: string;\n    add: string;\n    encryptedFieldTooltip: string;\n    noStatesForCountry: string;\n    selectCountryFirst: string;\n    invalidIntegerInput: string;\n    maxRecordsReached: string;\n    selectFilterOptions: string;\n    constructor(userLocale?: string);\n    maxlengthMetWithField(field: string, maxlength: number): string;\n    maxlengthMet(maxlength: number): string;\n    invalidMaxlengthWithField(field: string, maxlength: number): string;\n    invalidMaxlength(maxlength: number): string;\n    getToManyPlusMore(toMany: {\n        quantity: number;\n    }): string;\n    selectedRecords(selected: number): string;\n    showingXofXResults(shown: number, total: number): string;\n    totalRecords(total: number, select?: boolean): string;\n    dateFormatString(): string;\n    tabbedGroupClearSuggestion(tabLabelPlural: string): string;\n    formatDateWithFormat(value: any, format: Intl.DateTimeFormatOptions): any;\n    formatToTimeOnly(param: any): void;\n    formatToDateOnly(param: any): void;\n    formatTimeWithFormat(value: any, format: Intl.DateTimeFormatOptions): string;\n    getWeekdays(): string[];\n    getMonths(): string[];\n    getProperty(value: string): any;\n    getRangeText(page: number, pageSize: number, length: number, short: boolean): string;\n    formatCurrency(value: number): string;\n    /**\n     * Extends the Intl.numberFormat capability with two extra features:\n     *  - Does NOT round values, but instead truncates to maximumFractionDigits\n     *  - By default uses accounting format for negative numbers: (3.14) instead of -3.14.\n     *\n     * @param value           The number value to convert to string\n     * @param overrideOptions Allows for overriding options used and passed to Intl.NumberFormat()\n     */\n    formatBigDecimal(value: number, overrideOptions?: BigDecimalFormatOptions): string;\n    /**\n     * Performs a string-based truncating of a number with no rounding\n     */\n    truncateToPrecision(value: number, precision: number): number;\n    formatNumber(value: any, options?: Intl.NumberFormatOptions): string;\n    formatDateShort(value: string | number | Date): string;\n    formatTime(value: string | number | Date): string;\n    formatDate(value: string | number | Date): string;\n}\nexport declare const NOVO_ELEMENTS_LABELS_PROVIDERS: {\n    provide: typeof NovoLabelService;\n    useClass: typeof NovoLabelService;\n}[];\n"]}